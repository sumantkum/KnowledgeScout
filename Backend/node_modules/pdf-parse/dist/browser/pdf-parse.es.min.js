var _C = (s) => {
  throw TypeError(s);
};
var hC = (s, I, g) => I.has(s) || _C("Cannot " + g);
var ZI = (s, I, g) => (hC(s, I, "read from private field"), g ? g.call(s) : I.get(s)), jI = (s, I, g) => I.has(s) ? _C("Cannot add the same private member more than once") : I instanceof WeakSet ? I.add(s) : I.set(s, g), MI = (s, I, g, C) => (hC(s, I, "write to private field"), C ? C.call(s, g) : I.set(s, g), g), OI = (s, I, g) => (hC(s, I, "access private method"), g);
var $C = (s, I, g, C) => ({
  set _(A) {
    MI(s, I, A, g);
  },
  get _() {
    return ZI(s, I, C);
  }
});
var cl = {
  /***/
  34: (
    /***/
    ((s, I, g) => {
      var C = g(4901);
      s.exports = function(A) {
        return typeof A == "object" ? A !== null : C(A);
      };
    })
  ),
  /***/
  81: (
    /***/
    ((s, I, g) => {
      var C = g(9565), A = g(9306), l = g(8551), Z = g(6823), i = g(851), d = TypeError;
      s.exports = function(c, G) {
        var b = arguments.length < 2 ? i(c) : G;
        if (A(b)) return l(C(b, c));
        throw new d(Z(c) + " is not iterable");
      };
    })
  ),
  /***/
  116: (
    /***/
    ((s, I, g) => {
      var C = g(6518), A = g(9565), l = g(2652), Z = g(9306), i = g(8551), d = g(1767), c = g(9539), G = g(4549), b = G("find", TypeError);
      C({ target: "Iterator", proto: !0, real: !0, forced: b }, {
        find: function(B) {
          i(this);
          try {
            Z(B);
          } catch (Y) {
            c(this, "throw", Y);
          }
          if (b) return A(b, this, B);
          var o = d(this), W = 0;
          return l(o, function(Y, h) {
            if (B(Y, W++)) return h(Y);
          }, { IS_RECORD: !0, INTERRUPTED: !0 }).result;
        }
      });
    })
  ),
  /***/
  283: (
    /***/
    ((s, I, g) => {
      var C = g(9504), A = g(9039), l = g(4901), Z = g(9297), i = g(3724), d = g(350).CONFIGURABLE, c = g(3706), G = g(1181), b = G.enforce, m = G.get, B = String, o = Object.defineProperty, W = C("".slice), Y = C("".replace), h = C([].join), a = i && !A(function() {
        return o(function() {
        }, "length", { value: 8 }).length !== 8;
      }), w = String(String).split("String"), n = s.exports = function(V, X, y) {
        W(B(X), 0, 7) === "Symbol(" && (X = "[" + Y(B(X), /^Symbol\(([^)]*)\).*$/, "$1") + "]"), y && y.getter && (X = "get " + X), y && y.setter && (X = "set " + X), (!Z(V, "name") || d && V.name !== X) && (i ? o(V, "name", { value: X, configurable: !0 }) : V.name = X), a && y && Z(y, "arity") && V.length !== y.arity && o(V, "length", { value: y.arity });
        try {
          y && Z(y, "constructor") && y.constructor ? i && o(V, "prototype", { writable: !1 }) : V.prototype && (V.prototype = void 0);
        } catch {
        }
        var N = b(V);
        return Z(N, "source") || (N.source = h(w, typeof X == "string" ? X : "")), V;
      };
      Function.prototype.toString = n(function() {
        return l(this) && m(this).source || c(this);
      }, "toString");
    })
  ),
  /***/
  350: (
    /***/
    ((s, I, g) => {
      var C = g(3724), A = g(9297), l = Function.prototype, Z = C && Object.getOwnPropertyDescriptor, i = A(l, "name"), d = i && (function() {
      }).name === "something", c = i && (!C || C && Z(l, "name").configurable);
      s.exports = {
        EXISTS: i,
        PROPER: d,
        CONFIGURABLE: c
      };
    })
  ),
  /***/
  397: (
    /***/
    ((s, I, g) => {
      var C = g(7751);
      s.exports = C("document", "documentElement");
    })
  ),
  /***/
  421: (
    /***/
    ((s) => {
      s.exports = {};
    })
  ),
  /***/
  456: (
    /***/
    ((s, I, g) => {
      var C = g(6518), A = g(4576), l = g(9504), Z = g(4154), i = g(5169), d = l(1.1.toString), c = A.Uint8Array, G = !c || !c.prototype.toHex || !(function() {
        try {
          var b = new c([255, 255, 255, 255, 255, 255, 255, 255]);
          return b.toHex() === "ffffffffffffffff";
        } catch {
          return !1;
        }
      })();
      c && C({ target: "Uint8Array", proto: !0, forced: G }, {
        toHex: function() {
          Z(this), i(this.buffer);
          for (var m = "", B = 0, o = this.length; B < o; B++) {
            var W = d(this[B], 16);
            m += W.length === 1 ? "0" + W : W;
          }
          return m;
        }
      });
    })
  ),
  /***/
  507: (
    /***/
    ((s, I, g) => {
      var C = g(9565);
      s.exports = function(A, l, Z) {
        for (var i = Z ? A : A.iterator, d = A.next, c, G; !(c = C(d, i)).done; )
          if (G = l(c.value), G !== void 0) return G;
      };
    })
  ),
  /***/
  531: (
    /***/
    ((s, I, g) => {
      var C = g(6518), A = g(9565), l = g(9306), Z = g(8551), i = g(1767), d = g(8646), c = g(9462), G = g(9539), b = g(6395), m = g(684), B = g(4549), o = !b && !m("flatMap", function() {
      }), W = !b && !o && B("flatMap", TypeError), Y = b || o || W, h = c(function() {
        for (var a = this.iterator, w = this.mapper, n, V; ; ) {
          if (V = this.inner) try {
            if (n = Z(A(V.next, V.iterator)), !n.done) return n.value;
            this.inner = null;
          } catch (X) {
            G(a, "throw", X);
          }
          if (n = Z(A(this.next, a)), this.done = !!n.done) return;
          try {
            this.inner = d(w(n.value, this.counter++), !1);
          } catch (X) {
            G(a, "throw", X);
          }
        }
      });
      C({ target: "Iterator", proto: !0, real: !0, forced: Y }, {
        flatMap: function(w) {
          Z(this);
          try {
            l(w);
          } catch (n) {
            G(this, "throw", n);
          }
          return W ? A(W, this, w) : new h(i(this), {
            mapper: w,
            inner: null
          });
        }
      });
    })
  ),
  /***/
  616: (
    /***/
    ((s, I, g) => {
      var C = g(9039);
      s.exports = !C(function() {
        var A = (function() {
        }).bind();
        return typeof A != "function" || A.hasOwnProperty("prototype");
      });
    })
  ),
  /***/
  655: (
    /***/
    ((s, I, g) => {
      var C = g(6955), A = String;
      s.exports = function(l) {
        if (C(l) === "Symbol") throw new TypeError("Cannot convert a Symbol value to a string");
        return A(l);
      };
    })
  ),
  /***/
  679: (
    /***/
    ((s, I, g) => {
      var C = g(1625), A = TypeError;
      s.exports = function(l, Z) {
        if (C(Z, l)) return l;
        throw new A("Incorrect invocation");
      };
    })
  ),
  /***/
  684: (
    /***/
    ((s) => {
      s.exports = function(I, g) {
        var C = typeof Iterator == "function" && Iterator.prototype[I];
        if (C) try {
          C.call({ next: null }, g).next();
        } catch {
          return !0;
        }
      };
    })
  ),
  /***/
  741: (
    /***/
    ((s) => {
      var I = Math.ceil, g = Math.floor;
      s.exports = Math.trunc || function(A) {
        var l = +A;
        return (l > 0 ? g : I)(l);
      };
    })
  ),
  /***/
  757: (
    /***/
    ((s, I, g) => {
      var C = g(7751), A = g(4901), l = g(1625), Z = g(7040), i = Object;
      s.exports = Z ? function(d) {
        return typeof d == "symbol";
      } : function(d) {
        var c = C("Symbol");
        return A(c) && l(c.prototype, i(d));
      };
    })
  ),
  /***/
  851: (
    /***/
    ((s, I, g) => {
      var C = g(6955), A = g(5966), l = g(4117), Z = g(6269), i = g(8227), d = i("iterator");
      s.exports = function(c) {
        if (!l(c)) return A(c, d) || A(c, "@@iterator") || Z[C(c)];
      };
    })
  ),
  /***/
  944: (
    /***/
    ((s) => {
      var I = TypeError;
      s.exports = function(g) {
        var C = g && g.alphabet;
        if (C === void 0 || C === "base64" || C === "base64url") return C || "base64";
        throw new I("Incorrect `alphabet` option");
      };
    })
  ),
  /***/
  1072: (
    /***/
    ((s, I, g) => {
      var C = g(1828), A = g(8727);
      s.exports = Object.keys || function(Z) {
        return C(Z, A);
      };
    })
  ),
  /***/
  1103: (
    /***/
    ((s) => {
      s.exports = function(I) {
        try {
          return { error: !1, value: I() };
        } catch (g) {
          return { error: !0, value: g };
        }
      };
    })
  ),
  /***/
  1108: (
    /***/
    ((s, I, g) => {
      var C = g(6955);
      s.exports = function(A) {
        var l = C(A);
        return l === "BigInt64Array" || l === "BigUint64Array";
      };
    })
  ),
  /***/
  1148: (
    /***/
    ((s, I, g) => {
      var C = g(6518), A = g(9565), l = g(2652), Z = g(9306), i = g(8551), d = g(1767), c = g(9539), G = g(4549), b = G("every", TypeError);
      C({ target: "Iterator", proto: !0, real: !0, forced: b }, {
        every: function(B) {
          i(this);
          try {
            Z(B);
          } catch (Y) {
            c(this, "throw", Y);
          }
          if (b) return A(b, this, B);
          var o = d(this), W = 0;
          return !l(o, function(Y, h) {
            if (!B(Y, W++)) return h();
          }, { IS_RECORD: !0, INTERRUPTED: !0 }).stopped;
        }
      });
    })
  ),
  /***/
  1181: (
    /***/
    ((s, I, g) => {
      var C = g(8622), A = g(4576), l = g(34), Z = g(6699), i = g(9297), d = g(7629), c = g(6119), G = g(421), b = "Object already initialized", m = A.TypeError, B = A.WeakMap, o, W, Y, h = function(V) {
        return Y(V) ? W(V) : o(V, {});
      }, a = function(V) {
        return function(X) {
          var y;
          if (!l(X) || (y = W(X)).type !== V)
            throw new m("Incompatible receiver, " + V + " required");
          return y;
        };
      };
      if (C || d.state) {
        var w = d.state || (d.state = new B());
        w.get = w.get, w.has = w.has, w.set = w.set, o = function(V, X) {
          if (w.has(V)) throw new m(b);
          return X.facade = V, w.set(V, X), X;
        }, W = function(V) {
          return w.get(V) || {};
        }, Y = function(V) {
          return w.has(V);
        };
      } else {
        var n = c("state");
        G[n] = !0, o = function(V, X) {
          if (i(V, n)) throw new m(b);
          return X.facade = V, Z(V, n, X), X;
        }, W = function(V) {
          return i(V, n) ? V[n] : {};
        }, Y = function(V) {
          return i(V, n);
        };
      }
      s.exports = {
        set: o,
        get: W,
        has: Y,
        enforce: h,
        getterFor: a
      };
    })
  ),
  /***/
  1291: (
    /***/
    ((s, I, g) => {
      var C = g(741);
      s.exports = function(A) {
        var l = +A;
        return l !== l || l === 0 ? 0 : C(l);
      };
    })
  ),
  /***/
  1385: (
    /***/
    ((s, I, g) => {
      var C = g(9539);
      s.exports = function(A, l, Z) {
        for (var i = A.length - 1; i >= 0; i--)
          if (A[i] !== void 0)
            try {
              Z = C(A[i].iterator, l, Z);
            } catch (d) {
              l = "throw", Z = d;
            }
        if (l === "throw") throw Z;
        return Z;
      };
    })
  ),
  /***/
  1548: (
    /***/
    ((s, I, g) => {
      var C = g(4576), A = g(9039), l = g(9519), Z = g(4215), i = C.structuredClone;
      s.exports = !!i && !A(function() {
        if (Z === "DENO" && l > 92 || Z === "NODE" && l > 94 || Z === "BROWSER" && l > 97) return !1;
        var d = new ArrayBuffer(8), c = i(d, { transfer: [d] });
        return d.byteLength !== 0 || c.byteLength !== 8;
      });
    })
  ),
  /***/
  1549: (
    /***/
    ((s, I, g) => {
      g(6632);
    })
  ),
  /***/
  1625: (
    /***/
    ((s, I, g) => {
      var C = g(9504);
      s.exports = C({}.isPrototypeOf);
    })
  ),
  /***/
  1689: (
    /***/
    ((s, I, g) => {
      var C = g(6518), A = g(4576), l = g(8745), Z = g(7680), i = g(6043), d = g(9306), c = g(1103), G = A.Promise, b = !1, m = !G || !G.try || c(function() {
        G.try(function(B) {
          b = B === 8;
        }, 8);
      }).error || !b;
      C({ target: "Promise", stat: !0, forced: m }, {
        try: function(B) {
          var o = arguments.length > 1 ? Z(arguments, 1) : [], W = i.f(this), Y = c(function() {
            return l(d(B), void 0, o);
          });
          return (Y.error ? W.reject : W.resolve)(Y.value), W.promise;
        }
      });
    })
  ),
  /***/
  1698: (
    /***/
    ((s, I, g) => {
      var C = g(6518), A = g(4204), l = g(9835), Z = g(4916), i = !Z("union") || !l("union");
      C({ target: "Set", proto: !0, real: !0, forced: i }, {
        union: A
      });
    })
  ),
  /***/
  1701: (
    /***/
    ((s, I, g) => {
      var C = g(6518), A = g(9565), l = g(9306), Z = g(8551), i = g(1767), d = g(9462), c = g(6319), G = g(9539), b = g(684), m = g(4549), B = g(6395), o = !B && !b("map", function() {
      }), W = !B && !o && m("map", TypeError), Y = B || o || W, h = d(function() {
        var a = this.iterator, w = Z(A(this.next, a)), n = this.done = !!w.done;
        if (!n) return c(a, this.mapper, [w.value, this.counter++], !0);
      });
      C({ target: "Iterator", proto: !0, real: !0, forced: Y }, {
        map: function(w) {
          Z(this);
          try {
            l(w);
          } catch (n) {
            G(this, "throw", n);
          }
          return W ? A(W, this, w) : new h(i(this), {
            mapper: w
          });
        }
      });
    })
  ),
  /***/
  1767: (
    /***/
    ((s) => {
      s.exports = function(I) {
        return {
          iterator: I,
          next: I.next,
          done: !1
        };
      };
    })
  ),
  /***/
  1828: (
    /***/
    ((s, I, g) => {
      var C = g(9504), A = g(9297), l = g(5397), Z = g(9617).indexOf, i = g(421), d = C([].push);
      s.exports = function(c, G) {
        var b = l(c), m = 0, B = [], o;
        for (o in b) !A(i, o) && A(b, o) && d(B, o);
        for (; G.length > m; ) A(b, o = G[m++]) && (~Z(B, o) || d(B, o));
        return B;
      };
    })
  ),
  /***/
  2106: (
    /***/
    ((s, I, g) => {
      var C = g(283), A = g(4913);
      s.exports = function(l, Z, i) {
        return i.get && C(i.get, Z, { getter: !0 }), i.set && C(i.set, Z, { setter: !0 }), A.f(l, Z, i);
      };
    })
  ),
  /***/
  2140: (
    /***/
    ((s, I, g) => {
      var C = g(8227), A = C("toStringTag"), l = {};
      l[A] = "z", s.exports = String(l) === "[object z]";
    })
  ),
  /***/
  2195: (
    /***/
    ((s, I, g) => {
      var C = g(9504), A = C({}.toString), l = C("".slice);
      s.exports = function(Z) {
        return l(A(Z), 8, -1);
      };
    })
  ),
  /***/
  2211: (
    /***/
    ((s, I, g) => {
      var C = g(9039);
      s.exports = !C(function() {
        function A() {
        }
        return A.prototype.constructor = null, Object.getPrototypeOf(new A()) !== A.prototype;
      });
    })
  ),
  /***/
  2303: (
    /***/
    ((s, I, g) => {
      var C = g(4576), A = g(9504), l = C.Uint8Array, Z = C.SyntaxError, i = C.parseInt, d = Math.min, c = /[^\da-f]/i, G = A(c.exec), b = A("".slice);
      s.exports = function(m, B) {
        var o = m.length;
        if (o % 2 !== 0) throw new Z("String should be an even number of characters");
        for (var W = B ? d(B.length, o / 2) : o / 2, Y = B || new l(W), h = 0, a = 0; a < W; ) {
          var w = b(m, h, h += 2);
          if (G(c, w)) throw new Z("String should only contain hex characters");
          Y[a++] = i(w, 16);
        }
        return { bytes: Y, read: h };
      };
    })
  ),
  /***/
  2360: (
    /***/
    ((s, I, g) => {
      var C = g(8551), A = g(6801), l = g(8727), Z = g(421), i = g(397), d = g(4055), c = g(6119), G = ">", b = "<", m = "prototype", B = "script", o = c("IE_PROTO"), W = function() {
      }, Y = function(V) {
        return b + B + G + V + b + "/" + B + G;
      }, h = function(V) {
        V.write(Y("")), V.close();
        var X = V.parentWindow.Object;
        return V = null, X;
      }, a = function() {
        var V = d("iframe"), X = "java" + B + ":", y;
        return V.style.display = "none", i.appendChild(V), V.src = String(X), y = V.contentWindow.document, y.open(), y.write(Y("document.F=Object")), y.close(), y.F;
      }, w, n = function() {
        try {
          w = new ActiveXObject("htmlfile");
        } catch {
        }
        n = typeof document < "u" ? document.domain && w ? h(w) : a() : h(w);
        for (var V = l.length; V--; ) delete n[m][l[V]];
        return n();
      };
      Z[o] = !0, s.exports = Object.create || function(X, y) {
        var N;
        return X !== null ? (W[m] = C(X), N = new W(), W[m] = null, N[o] = X) : N = n(), y === void 0 ? N : A.f(N, y);
      };
    })
  ),
  /***/
  2475: (
    /***/
    ((s, I, g) => {
      var C = g(6518), A = g(8527), l = g(4916), Z = !l("isSupersetOf", function(i) {
        return !i;
      });
      C({ target: "Set", proto: !0, real: !0, forced: Z }, {
        isSupersetOf: A
      });
    })
  ),
  /***/
  2489: (
    /***/
    ((s, I, g) => {
      var C = g(6518), A = g(9565), l = g(9306), Z = g(8551), i = g(1767), d = g(9462), c = g(6319), G = g(6395), b = g(9539), m = g(684), B = g(4549), o = !G && !m("filter", function() {
      }), W = !G && !o && B("filter", TypeError), Y = G || o || W, h = d(function() {
        for (var a = this.iterator, w = this.predicate, n = this.next, V, X, y; ; ) {
          if (V = Z(A(n, a)), X = this.done = !!V.done, X) return;
          if (y = V.value, c(a, w, [y, this.counter++], !0)) return y;
        }
      });
      C({ target: "Iterator", proto: !0, real: !0, forced: Y }, {
        filter: function(w) {
          Z(this);
          try {
            l(w);
          } catch (n) {
            b(this, "throw", n);
          }
          return W ? A(W, this, w) : new h(i(this), {
            predicate: w
          });
        }
      });
    })
  ),
  /***/
  2529: (
    /***/
    ((s) => {
      s.exports = function(I, g) {
        return { value: I, done: g };
      };
    })
  ),
  /***/
  2603: (
    /***/
    ((s, I, g) => {
      var C = g(655);
      s.exports = function(A, l) {
        return A === void 0 ? arguments.length < 2 ? "" : l : C(A);
      };
    })
  ),
  /***/
  2652: (
    /***/
    ((s, I, g) => {
      var C = g(6080), A = g(9565), l = g(8551), Z = g(6823), i = g(4209), d = g(6198), c = g(1625), G = g(81), b = g(851), m = g(9539), B = TypeError, o = function(Y, h) {
        this.stopped = Y, this.result = h;
      }, W = o.prototype;
      s.exports = function(Y, h, a) {
        var w = a && a.that, n = !!(a && a.AS_ENTRIES), V = !!(a && a.IS_RECORD), X = !!(a && a.IS_ITERATOR), y = !!(a && a.INTERRUPTED), N = C(h, w), t, e, R, F, K, S, L, M = function(k) {
          return t && m(t, "normal"), new o(!0, k);
        }, u = function(k) {
          return n ? (l(k), y ? N(k[0], k[1], M) : N(k[0], k[1])) : y ? N(k, M) : N(k);
        };
        if (V)
          t = Y.iterator;
        else if (X)
          t = Y;
        else {
          if (e = b(Y), !e) throw new B(Z(Y) + " is not iterable");
          if (i(e)) {
            for (R = 0, F = d(Y); F > R; R++)
              if (K = u(Y[R]), K && c(W, K)) return K;
            return new o(!1);
          }
          t = G(Y, e);
        }
        for (S = V ? Y.next : t.next; !(L = A(S, t)).done; ) {
          try {
            K = u(L.value);
          } catch (k) {
            m(t, "throw", k);
          }
          if (typeof K == "object" && K && c(W, K)) return K;
        }
        return new o(!1);
      };
    })
  ),
  /***/
  2777: (
    /***/
    ((s, I, g) => {
      var C = g(9565), A = g(34), l = g(757), Z = g(5966), i = g(4270), d = g(8227), c = TypeError, G = d("toPrimitive");
      s.exports = function(b, m) {
        if (!A(b) || l(b)) return b;
        var B = Z(b, G), o;
        if (B) {
          if (m === void 0 && (m = "default"), o = C(B, b, m), !A(o) || l(o)) return o;
          throw new c("Can't convert object to primitive value");
        }
        return m === void 0 && (m = "number"), i(b, m);
      };
    })
  ),
  /***/
  2787: (
    /***/
    ((s, I, g) => {
      var C = g(9297), A = g(4901), l = g(8981), Z = g(6119), i = g(2211), d = Z("IE_PROTO"), c = Object, G = c.prototype;
      s.exports = i ? c.getPrototypeOf : function(b) {
        var m = l(b);
        if (C(m, d)) return m[d];
        var B = m.constructor;
        return A(B) && m instanceof B ? B.prototype : m instanceof c ? G : null;
      };
    })
  ),
  /***/
  2796: (
    /***/
    ((s, I, g) => {
      var C = g(9039), A = g(4901), l = /#|\.prototype\./, Z = function(b, m) {
        var B = d[i(b)];
        return B === G ? !0 : B === c ? !1 : A(m) ? C(m) : !!m;
      }, i = Z.normalize = function(b) {
        return String(b).replace(l, ".").toLowerCase();
      }, d = Z.data = {}, c = Z.NATIVE = "N", G = Z.POLYFILL = "P";
      s.exports = Z;
    })
  ),
  /***/
  2804: (
    /***/
    ((s) => {
      var I = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", g = I + "+/", C = I + "-_", A = function(l) {
        for (var Z = {}, i = 0; i < 64; i++) Z[l.charAt(i)] = i;
        return Z;
      };
      s.exports = {
        i2c: g,
        c2i: A(g),
        i2cUrl: C,
        c2iUrl: A(C)
      };
    })
  ),
  /***/
  2812: (
    /***/
    ((s) => {
      var I = TypeError;
      s.exports = function(g, C) {
        if (g < C) throw new I("Not enough arguments");
        return g;
      };
    })
  ),
  /***/
  2839: (
    /***/
    ((s, I, g) => {
      var C = g(4576), A = C.navigator, l = A && A.userAgent;
      s.exports = l ? String(l) : "";
    })
  ),
  /***/
  2967: (
    /***/
    ((s, I, g) => {
      var C = g(6706), A = g(34), l = g(7750), Z = g(3506);
      s.exports = Object.setPrototypeOf || ("__proto__" in {} ? (function() {
        var i = !1, d = {}, c;
        try {
          c = C(Object.prototype, "__proto__", "set"), c(d, []), i = d instanceof Array;
        } catch {
        }
        return function(b, m) {
          return l(b), Z(m), A(b) && (i ? c(b, m) : b.__proto__ = m), b;
        };
      })() : void 0);
    })
  ),
  /***/
  3068: (
    /***/
    ((s, I, g) => {
      var C = g(6518), A = g(9504), l = g(2652), Z = RangeError, i = TypeError, d = 1 / 0, c = NaN, G = Math.abs, b = Math.pow, m = A([].push), B = b(2, 1023), o = b(2, 53) - 1, W = Number.MAX_VALUE, Y = b(2, 971), h = {}, a = {}, w = {}, n = {}, V = {}, X = function(y, N) {
        var t = y + N, e = N - (t - y);
        return { hi: t, lo: e };
      };
      C({ target: "Math", stat: !0 }, {
        // eslint-disable-next-line max-statements -- ok
        sumPrecise: function(N) {
          var t = [], e = 0, R = n;
          switch (l(N, function(D) {
            if (++e >= o) throw new Z("Maximum allowed index exceeded");
            if (typeof D != "number") throw new i("Value is not a number");
            R !== h && (D !== D ? R = h : D === d ? R = R === a ? h : w : D === -d ? R = R === w ? h : a : (D !== 0 || 1 / D === d) && (R === n || R === V) && (R = V, m(t, D)));
          }), R) {
            case h:
              return c;
            case a:
              return -d;
            case w:
              return d;
            case n:
              return -0;
          }
          for (var F = [], K = 0, S, L, M, u, k, v, $ = 0; $ < t.length; $++) {
            S = t[$];
            for (var dI = 0, q = 0; q < F.length; q++) {
              if (L = F[q], G(S) < G(L) && (v = S, S = L, L = v), M = X(S, L), u = M.hi, k = M.lo, G(u) === d) {
                var _ = u === d ? 1 : -1;
                K += _, S = S - _ * B - _ * B, G(S) < G(L) && (v = S, S = L, L = v), M = X(S, L), u = M.hi, k = M.lo;
              }
              k !== 0 && (F[dI++] = k), S = u;
            }
            F.length = dI, S !== 0 && m(F, S);
          }
          var lI = F.length - 1;
          if (u = 0, k = 0, K !== 0) {
            var nI = lI >= 0 ? F[lI] : 0;
            if (lI--, G(K) > 1 || K > 0 && nI > 0 || K < 0 && nI < 0)
              return K > 0 ? d : -d;
            if (M = X(K * B, nI / 2), u = M.hi, k = M.lo, k *= 2, G(2 * u) === d)
              return u > 0 ? u === B && k === -(Y / 2) && lI >= 0 && F[lI] < 0 ? W : d : u === -B && k === Y / 2 && lI >= 0 && F[lI] > 0 ? -W : -d;
            k !== 0 && (F[++lI] = k, k = 0), u *= 2;
          }
          for (; lI >= 0 && (M = X(u, F[lI--]), u = M.hi, k = M.lo, k === 0); )
            ;
          return lI >= 0 && (k < 0 && F[lI] < 0 || k > 0 && F[lI] > 0) && (L = k * 2, S = u + L, L === S - u && (u = S)), u;
        }
      });
    })
  ),
  /***/
  3167: (
    /***/
    ((s, I, g) => {
      var C = g(4901), A = g(34), l = g(2967);
      s.exports = function(Z, i, d) {
        var c, G;
        return (
          // it can work only with native `setPrototypeOf`
          l && // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
          C(c = i.constructor) && c !== d && A(G = c.prototype) && G !== d.prototype && l(Z, G), Z
        );
      };
    })
  ),
  /***/
  3238: (
    /***/
    ((s, I, g) => {
      var C = g(4576), A = g(7811), l = g(7394), Z = C.DataView;
      s.exports = function(i) {
        if (!A || l(i) !== 0) return !1;
        try {
          return new Z(i), !1;
        } catch {
          return !0;
        }
      };
    })
  ),
  /***/
  3392: (
    /***/
    ((s, I, g) => {
      var C = g(9504), A = 0, l = Math.random(), Z = C(1.1.toString);
      s.exports = function(i) {
        return "Symbol(" + (i === void 0 ? "" : i) + ")_" + Z(++A + l, 36);
      };
    })
  ),
  /***/
  3440: (
    /***/
    ((s, I, g) => {
      var C = g(7080), A = g(4402), l = g(9286), Z = g(5170), i = g(3789), d = g(8469), c = g(507), G = A.has, b = A.remove;
      s.exports = function(B) {
        var o = C(this), W = i(B), Y = l(o);
        return Z(o) <= W.size ? d(o, function(h) {
          W.includes(h) && b(Y, h);
        }) : c(W.getIterator(), function(h) {
          G(Y, h) && b(Y, h);
        }), Y;
      };
    })
  ),
  /***/
  3463: (
    /***/
    ((s) => {
      var I = TypeError;
      s.exports = function(g) {
        if (typeof g == "string") return g;
        throw new I("Argument is not a string");
      };
    })
  ),
  /***/
  3506: (
    /***/
    ((s, I, g) => {
      var C = g(3925), A = String, l = TypeError;
      s.exports = function(Z) {
        if (C(Z)) return Z;
        throw new l("Can't set " + A(Z) + " as a prototype");
      };
    })
  ),
  /***/
  3579: (
    /***/
    ((s, I, g) => {
      var C = g(6518), A = g(9565), l = g(2652), Z = g(9306), i = g(8551), d = g(1767), c = g(9539), G = g(4549), b = G("some", TypeError);
      C({ target: "Iterator", proto: !0, real: !0, forced: b }, {
        some: function(B) {
          i(this);
          try {
            Z(B);
          } catch (Y) {
            c(this, "throw", Y);
          }
          if (b) return A(b, this, B);
          var o = d(this), W = 0;
          return l(o, function(Y, h) {
            if (B(Y, W++)) return h();
          }, { IS_RECORD: !0, INTERRUPTED: !0 }).stopped;
        }
      });
    })
  ),
  /***/
  3650: (
    /***/
    ((s, I, g) => {
      var C = g(7080), A = g(4402), l = g(9286), Z = g(3789), i = g(507), d = A.add, c = A.has, G = A.remove;
      s.exports = function(m) {
        var B = C(this), o = Z(m).getIterator(), W = l(B);
        return i(o, function(Y) {
          c(B, Y) ? G(W, Y) : d(W, Y);
        }), W;
      };
    })
  ),
  /***/
  3706: (
    /***/
    ((s, I, g) => {
      var C = g(9504), A = g(4901), l = g(7629), Z = C(Function.toString);
      A(l.inspectSource) || (l.inspectSource = function(i) {
        return Z(i);
      }), s.exports = l.inspectSource;
    })
  ),
  /***/
  3717: (
    /***/
    ((s, I) => {
      I.f = Object.getOwnPropertySymbols;
    })
  ),
  /***/
  3724: (
    /***/
    ((s, I, g) => {
      var C = g(9039);
      s.exports = !C(function() {
        return Object.defineProperty({}, 1, { get: function() {
          return 7;
        } })[1] !== 7;
      });
    })
  ),
  /***/
  3789: (
    /***/
    ((s, I, g) => {
      var C = g(9306), A = g(8551), l = g(9565), Z = g(1291), i = g(1767), d = "Invalid size", c = RangeError, G = TypeError, b = Math.max, m = function(B, o) {
        this.set = B, this.size = b(o, 0), this.has = C(B.has), this.keys = C(B.keys);
      };
      m.prototype = {
        getIterator: function() {
          return i(A(l(this.keys, this.set)));
        },
        includes: function(B) {
          return l(this.has, this.set, B);
        }
      }, s.exports = function(B) {
        A(B);
        var o = +B.size;
        if (o !== o) throw new G(d);
        var W = Z(o);
        if (W < 0) throw new c(d);
        return new m(B, W);
      };
    })
  ),
  /***/
  3838: (
    /***/
    ((s, I, g) => {
      var C = g(7080), A = g(5170), l = g(8469), Z = g(3789);
      s.exports = function(d) {
        var c = C(this), G = Z(d);
        return A(c) > G.size ? !1 : l(c, function(b) {
          if (!G.includes(b)) return !1;
        }, !0) !== !1;
      };
    })
  ),
  /***/
  3853: (
    /***/
    ((s, I, g) => {
      var C = g(6518), A = g(4449), l = g(4916), Z = !l("isDisjointFrom", function(i) {
        return !i;
      });
      C({ target: "Set", proto: !0, real: !0, forced: Z }, {
        isDisjointFrom: A
      });
    })
  ),
  /***/
  3925: (
    /***/
    ((s, I, g) => {
      var C = g(34);
      s.exports = function(A) {
        return C(A) || A === null;
      };
    })
  ),
  /***/
  3972: (
    /***/
    ((s, I, g) => {
      var C = g(34), A = String, l = TypeError;
      s.exports = function(Z) {
        if (Z === void 0 || C(Z)) return Z;
        throw new l(A(Z) + " is not an object or undefined");
      };
    })
  ),
  /***/
  4055: (
    /***/
    ((s, I, g) => {
      var C = g(4576), A = g(34), l = C.document, Z = A(l) && A(l.createElement);
      s.exports = function(i) {
        return Z ? l.createElement(i) : {};
      };
    })
  ),
  /***/
  4114: (
    /***/
    ((s, I, g) => {
      var C = g(6518), A = g(8981), l = g(6198), Z = g(4527), i = g(6837), d = g(9039), c = d(function() {
        return [].push.call({ length: 4294967296 }, 1) !== 4294967297;
      }), G = function() {
        try {
          Object.defineProperty([], "length", { writable: !1 }).push();
        } catch (m) {
          return m instanceof TypeError;
        }
      }, b = c || !G();
      C({ target: "Array", proto: !0, arity: 1, forced: b }, {
        // eslint-disable-next-line no-unused-vars -- required for `.length`
        push: function(B) {
          var o = A(this), W = l(o), Y = arguments.length;
          i(W + Y);
          for (var h = 0; h < Y; h++)
            o[W] = arguments[h], W++;
          return Z(o, W), W;
        }
      });
    })
  ),
  /***/
  4117: (
    /***/
    ((s) => {
      s.exports = function(I) {
        return I == null;
      };
    })
  ),
  /***/
  4149: (
    /***/
    ((s) => {
      var I = RangeError;
      s.exports = function(g) {
        if (g === g) return g;
        throw new I("NaN is not allowed");
      };
    })
  ),
  /***/
  4154: (
    /***/
    ((s, I, g) => {
      var C = g(6955), A = TypeError;
      s.exports = function(l) {
        if (C(l) === "Uint8Array") return l;
        throw new A("Argument is not an Uint8Array");
      };
    })
  ),
  /***/
  4204: (
    /***/
    ((s, I, g) => {
      var C = g(7080), A = g(4402).add, l = g(9286), Z = g(3789), i = g(507);
      s.exports = function(c) {
        var G = C(this), b = Z(c).getIterator(), m = l(G);
        return i(b, function(B) {
          A(m, B);
        }), m;
      };
    })
  ),
  /***/
  4209: (
    /***/
    ((s, I, g) => {
      var C = g(8227), A = g(6269), l = C("iterator"), Z = Array.prototype;
      s.exports = function(i) {
        return i !== void 0 && (A.Array === i || Z[l] === i);
      };
    })
  ),
  /***/
  4215: (
    /***/
    ((s, I, g) => {
      var C = g(4576), A = g(2839), l = g(2195), Z = function(i) {
        return A.slice(0, i.length) === i;
      };
      s.exports = (function() {
        return Z("Bun/") ? "BUN" : Z("Cloudflare-Workers") ? "CLOUDFLARE" : Z("Deno/") ? "DENO" : Z("Node.js/") ? "NODE" : C.Bun && typeof Bun.version == "string" ? "BUN" : C.Deno && typeof Deno.version == "object" ? "DENO" : l(C.process) === "process" ? "NODE" : C.window && C.document ? "BROWSER" : "REST";
      })();
    })
  ),
  /***/
  4226: (
    /***/
    ((s, I, g) => {
      var C = g(6518), A = g(4576), l = g(3463), Z = g(4154), i = g(5169), d = g(2303);
      A.Uint8Array && C({ target: "Uint8Array", proto: !0 }, {
        setFromHex: function(G) {
          Z(this), l(G), i(this.buffer);
          var b = d(G, this).read;
          return { read: b, written: b / 2 };
        }
      });
    })
  ),
  /***/
  4235: (
    /***/
    ((s, I, g) => {
      g(3068);
    })
  ),
  /***/
  4270: (
    /***/
    ((s, I, g) => {
      var C = g(9565), A = g(4901), l = g(34), Z = TypeError;
      s.exports = function(i, d) {
        var c, G;
        if (d === "string" && A(c = i.toString) && !l(G = C(c, i)) || A(c = i.valueOf) && !l(G = C(c, i)) || d !== "string" && A(c = i.toString) && !l(G = C(c, i))) return G;
        throw new Z("Can't convert object to primitive value");
      };
    })
  ),
  /***/
  4376: (
    /***/
    ((s, I, g) => {
      var C = g(2195);
      s.exports = Array.isArray || function(l) {
        return C(l) === "Array";
      };
    })
  ),
  /***/
  4402: (
    /***/
    ((s, I, g) => {
      var C = g(9504), A = Set.prototype;
      s.exports = {
        // eslint-disable-next-line es/no-set -- safe
        Set,
        add: C(A.add),
        has: C(A.has),
        remove: C(A.delete),
        proto: A
      };
    })
  ),
  /***/
  4449: (
    /***/
    ((s, I, g) => {
      var C = g(7080), A = g(4402).has, l = g(5170), Z = g(3789), i = g(8469), d = g(507), c = g(9539);
      s.exports = function(b) {
        var m = C(this), B = Z(b);
        if (l(m) <= B.size) return i(m, function(W) {
          if (B.includes(W)) return !1;
        }, !0) !== !1;
        var o = B.getIterator();
        return d(o, function(W) {
          if (A(m, W)) return c(o, "normal", !1);
        }) !== !1;
      };
    })
  ),
  /***/
  4483: (
    /***/
    ((s, I, g) => {
      var C = g(4576), A = g(9429), l = g(1548), Z = C.structuredClone, i = C.ArrayBuffer, d = C.MessageChannel, c = !1, G, b, m, B;
      if (l)
        c = function(o) {
          Z(o, { transfer: [o] });
        };
      else if (i) try {
        d || (G = A("worker_threads"), G && (d = G.MessageChannel)), d && (b = new d(), m = new i(2), B = function(o) {
          b.port1.postMessage(null, [o]);
        }, m.byteLength === 2 && (B(m), m.byteLength === 0 && (c = B)));
      } catch {
      }
      s.exports = c;
    })
  ),
  /***/
  4495: (
    /***/
    ((s, I, g) => {
      var C = g(9519), A = g(9039), l = g(4576), Z = l.String;
      s.exports = !!Object.getOwnPropertySymbols && !A(function() {
        var i = Symbol("symbol detection");
        return !Z(i) || !(Object(i) instanceof Symbol) || // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
        !Symbol.sham && C && C < 41;
      });
    })
  ),
  /***/
  4527: (
    /***/
    ((s, I, g) => {
      var C = g(3724), A = g(4376), l = TypeError, Z = Object.getOwnPropertyDescriptor, i = C && !(function() {
        if (this !== void 0) return !0;
        try {
          Object.defineProperty([], "length", { writable: !1 }).length = 1;
        } catch (d) {
          return d instanceof TypeError;
        }
      })();
      s.exports = i ? function(d, c) {
        if (A(d) && !Z(d, "length").writable)
          throw new l("Cannot set read only .length");
        return d.length = c;
      } : function(d, c) {
        return d.length = c;
      };
    })
  ),
  /***/
  4549: (
    /***/
    ((s, I, g) => {
      var C = g(4576);
      s.exports = function(A, l) {
        var Z = C.Iterator, i = Z && Z.prototype, d = i && i[A], c = !1;
        if (d) try {
          d.call({
            next: function() {
              return { done: !0 };
            },
            return: function() {
              c = !0;
            }
          }, -1);
        } catch (G) {
          G instanceof l || (c = !1);
        }
        if (!c) return d;
      };
    })
  ),
  /***/
  4576: (
    /***/
    (function(s) {
      var I = function(g) {
        return g && g.Math === Math && g;
      };
      s.exports = // eslint-disable-next-line es/no-global-this -- safe
      I(typeof globalThis == "object" && globalThis) || I(typeof window == "object" && window) || // eslint-disable-next-line no-restricted-globals -- safe
      I(typeof self == "object" && self) || I(typeof global == "object" && global) || I(typeof this == "object" && this) || // eslint-disable-next-line no-new-func -- fallback
      /* @__PURE__ */ (function() {
        return this;
      })() || Function("return this")();
    })
  ),
  /***/
  4603: (
    /***/
    ((s, I, g) => {
      var C = g(6840), A = g(9504), l = g(655), Z = g(2812), i = URLSearchParams, d = i.prototype, c = A(d.append), G = A(d.delete), b = A(d.forEach), m = A([].push), B = new i("a=1&a=2&b=3");
      B.delete("a", 1), B.delete("b", void 0), B + "" != "a=2" && C(d, "delete", function(o) {
        var W = arguments.length, Y = W < 2 ? void 0 : arguments[1];
        if (W && Y === void 0) return G(this, o);
        var h = [];
        b(this, function(t, e) {
          m(h, { key: e, value: t });
        }), Z(W, 1);
        for (var a = l(o), w = l(Y), n = 0, V = 0, X = !1, y = h.length, N; n < y; )
          N = h[n++], X || N.key === a ? (X = !0, G(this, N.key)) : V++;
        for (; V < y; )
          N = h[V++], N.key === a && N.value === w || c(this, N.key, N.value);
      }, { enumerable: !0, unsafe: !0 });
    })
  ),
  /***/
  4628: (
    /***/
    ((s, I, g) => {
      var C = g(6518), A = g(6043);
      C({ target: "Promise", stat: !0 }, {
        withResolvers: function() {
          var Z = A.f(this);
          return {
            promise: Z.promise,
            resolve: Z.resolve,
            reject: Z.reject
          };
        }
      });
    })
  ),
  /***/
  4644: (
    /***/
    ((s, I, g) => {
      var C = g(7811), A = g(3724), l = g(4576), Z = g(4901), i = g(34), d = g(9297), c = g(6955), G = g(6823), b = g(6699), m = g(6840), B = g(2106), o = g(1625), W = g(2787), Y = g(2967), h = g(8227), a = g(3392), w = g(1181), n = w.enforce, V = w.get, X = l.Int8Array, y = X && X.prototype, N = l.Uint8ClampedArray, t = N && N.prototype, e = X && W(X), R = y && W(y), F = Object.prototype, K = l.TypeError, S = h("toStringTag"), L = a("TYPED_ARRAY_TAG"), M = "TypedArrayConstructor", u = C && !!Y && c(l.opera) !== "Opera", k = !1, v, $, dI, q = {
        Int8Array: 1,
        Uint8Array: 1,
        Uint8ClampedArray: 1,
        Int16Array: 2,
        Uint16Array: 2,
        Int32Array: 4,
        Uint32Array: 4,
        Float32Array: 4,
        Float64Array: 8
      }, _ = {
        BigInt64Array: 8,
        BigUint64Array: 8
      }, lI = function(CI) {
        if (!i(CI)) return !1;
        var AI = c(CI);
        return AI === "DataView" || d(q, AI) || d(_, AI);
      }, nI = function(Q) {
        var CI = W(Q);
        if (i(CI)) {
          var AI = V(CI);
          return AI && d(AI, M) ? AI[M] : nI(CI);
        }
      }, D = function(Q) {
        if (!i(Q)) return !1;
        var CI = c(Q);
        return d(q, CI) || d(_, CI);
      }, H = function(Q) {
        if (D(Q)) return Q;
        throw new K("Target is not a typed array");
      }, p = function(Q) {
        if (Z(Q) && (!Y || o(e, Q))) return Q;
        throw new K(G(Q) + " is not a typed array constructor");
      }, E = function(Q, CI, AI, zI) {
        if (A) {
          if (AI) for (var eI in q) {
            var wI = l[eI];
            if (wI && d(wI.prototype, Q)) try {
              delete wI.prototype[Q];
            } catch {
              try {
                wI.prototype[Q] = CI;
              } catch {
              }
            }
          }
          (!R[Q] || AI) && m(R, Q, AI ? CI : u && y[Q] || CI, zI);
        }
      }, gI = function(Q, CI, AI) {
        var zI, eI;
        if (A) {
          if (Y) {
            if (AI) {
              for (zI in q)
                if (eI = l[zI], eI && d(eI, Q)) try {
                  delete eI[Q];
                } catch {
                }
            }
            if (!e[Q] || AI)
              try {
                return m(e, Q, AI ? CI : u && e[Q] || CI);
              } catch {
              }
            else return;
          }
          for (zI in q)
            eI = l[zI], eI && (!eI[Q] || AI) && m(eI, Q, CI);
        }
      };
      for (v in q)
        $ = l[v], dI = $ && $.prototype, dI ? n(dI)[M] = $ : u = !1;
      for (v in _)
        $ = l[v], dI = $ && $.prototype, dI && (n(dI)[M] = $);
      if ((!u || !Z(e) || e === Function.prototype) && (e = function() {
        throw new K("Incorrect invocation");
      }, u))
        for (v in q)
          l[v] && Y(l[v], e);
      if ((!u || !R || R === F) && (R = e.prototype, u))
        for (v in q)
          l[v] && Y(l[v].prototype, R);
      if (u && W(t) !== R && Y(t, R), A && !d(R, S)) {
        k = !0, B(R, S, {
          configurable: !0,
          get: function() {
            return i(this) ? this[L] : void 0;
          }
        });
        for (v in q) l[v] && b(l[v], L, v);
      }
      s.exports = {
        NATIVE_ARRAY_BUFFER_VIEWS: u,
        TYPED_ARRAY_TAG: k && L,
        aTypedArray: H,
        aTypedArrayConstructor: p,
        exportTypedArrayMethod: E,
        exportTypedArrayStaticMethod: gI,
        getTypedArrayConstructor: nI,
        isView: lI,
        isTypedArray: D,
        TypedArray: e,
        TypedArrayPrototype: R
      };
    })
  ),
  /***/
  4659: (
    /***/
    ((s, I, g) => {
      var C = g(3724), A = g(4913), l = g(6980);
      s.exports = function(Z, i, d) {
        C ? A.f(Z, i, l(0, d)) : Z[i] = d;
      };
    })
  ),
  /***/
  4901: (
    /***/
    ((s) => {
      var I = typeof document == "object" && document.all;
      s.exports = typeof I > "u" && I !== void 0 ? function(g) {
        return typeof g == "function" || g === I;
      } : function(g) {
        return typeof g == "function";
      };
    })
  ),
  /***/
  4913: (
    /***/
    ((s, I, g) => {
      var C = g(3724), A = g(5917), l = g(8686), Z = g(8551), i = g(6969), d = TypeError, c = Object.defineProperty, G = Object.getOwnPropertyDescriptor, b = "enumerable", m = "configurable", B = "writable";
      I.f = C ? l ? function(W, Y, h) {
        if (Z(W), Y = i(Y), Z(h), typeof W == "function" && Y === "prototype" && "value" in h && B in h && !h[B]) {
          var a = G(W, Y);
          a && a[B] && (W[Y] = h.value, h = {
            configurable: m in h ? h[m] : a[m],
            enumerable: b in h ? h[b] : a[b],
            writable: !1
          });
        }
        return c(W, Y, h);
      } : c : function(W, Y, h) {
        if (Z(W), Y = i(Y), Z(h), A) try {
          return c(W, Y, h);
        } catch {
        }
        if ("get" in h || "set" in h) throw new d("Accessors not supported");
        return "value" in h && (W[Y] = h.value), W;
      };
    })
  ),
  /***/
  4916: (
    /***/
    ((s, I, g) => {
      var C = g(7751), A = function(Z) {
        return {
          size: Z,
          has: function() {
            return !1;
          },
          keys: function() {
            return {
              next: function() {
                return { done: !0 };
              }
            };
          }
        };
      }, l = function(Z) {
        return {
          size: Z,
          has: function() {
            return !0;
          },
          keys: function() {
            throw new Error("e");
          }
        };
      };
      s.exports = function(Z, i) {
        var d = C("Set");
        try {
          new d()[Z](A(0));
          try {
            return new d()[Z](A(-1)), !1;
          } catch {
            if (!i) return !0;
            try {
              return new d()[Z](l(-1 / 0)), !1;
            } catch {
              var c = new d();
              return c.add(1), c.add(2), i(c[Z](l(1 / 0)));
            }
          }
        } catch {
          return !1;
        }
      };
    })
  ),
  /***/
  4972: (
    /***/
    ((s, I, g) => {
      var C = g(6518), A = g(9565), l = g(8551), Z = g(1767), i = g(4149), d = g(9590), c = g(9462), G = g(9539), b = g(4549), m = g(6395), B = !m && b("take", RangeError), o = c(function() {
        var W = this.iterator;
        if (!this.remaining--)
          return this.done = !0, G(W, "normal", void 0);
        var Y = l(A(this.next, W)), h = this.done = !!Y.done;
        if (!h) return Y.value;
      });
      C({ target: "Iterator", proto: !0, real: !0, forced: m || B }, {
        take: function(Y) {
          l(this);
          var h;
          try {
            h = d(i(+Y));
          } catch (a) {
            G(this, "throw", a);
          }
          return B ? A(B, this, h) : new o(Z(this), {
            remaining: h
          });
        }
      });
    })
  ),
  /***/
  4979: (
    /***/
    ((s, I, g) => {
      var C = g(6518), A = g(4576), l = g(7751), Z = g(6980), i = g(4913).f, d = g(9297), c = g(679), G = g(3167), b = g(2603), m = g(5002), B = g(8574), o = g(3724), W = g(6395), Y = "DOMException", h = l("Error"), a = l(Y), w = function() {
        c(this, n);
        var M = arguments.length, u = b(M < 1 ? void 0 : arguments[0]), k = b(M < 2 ? void 0 : arguments[1], "Error"), v = new a(u, k), $ = new h(u);
        return $.name = Y, i(v, "stack", Z(1, B($.stack, 1))), G(v, this, w), v;
      }, n = w.prototype = a.prototype, V = "stack" in new h(Y), X = "stack" in new a(1, 2), y = a && o && Object.getOwnPropertyDescriptor(A, Y), N = !!y && !(y.writable && y.configurable), t = V && !N && !X;
      C({ global: !0, constructor: !0, forced: W || t }, {
        // TODO: fix export logic
        DOMException: t ? w : a
      });
      var e = l(Y), R = e.prototype;
      if (R.constructor !== e) {
        W || i(R, "constructor", Z(1, e));
        for (var F in m) if (d(m, F)) {
          var K = m[F], S = K.s;
          d(e, S) || i(e, S, Z(6, K.c));
        }
      }
    })
  ),
  /***/
  5002: (
    /***/
    ((s) => {
      s.exports = {
        IndexSizeError: { s: "INDEX_SIZE_ERR", c: 1, m: 1 },
        DOMStringSizeError: { s: "DOMSTRING_SIZE_ERR", c: 2, m: 0 },
        HierarchyRequestError: { s: "HIERARCHY_REQUEST_ERR", c: 3, m: 1 },
        WrongDocumentError: { s: "WRONG_DOCUMENT_ERR", c: 4, m: 1 },
        InvalidCharacterError: { s: "INVALID_CHARACTER_ERR", c: 5, m: 1 },
        NoDataAllowedError: { s: "NO_DATA_ALLOWED_ERR", c: 6, m: 0 },
        NoModificationAllowedError: { s: "NO_MODIFICATION_ALLOWED_ERR", c: 7, m: 1 },
        NotFoundError: { s: "NOT_FOUND_ERR", c: 8, m: 1 },
        NotSupportedError: { s: "NOT_SUPPORTED_ERR", c: 9, m: 1 },
        InUseAttributeError: { s: "INUSE_ATTRIBUTE_ERR", c: 10, m: 1 },
        InvalidStateError: { s: "INVALID_STATE_ERR", c: 11, m: 1 },
        SyntaxError: { s: "SYNTAX_ERR", c: 12, m: 1 },
        InvalidModificationError: { s: "INVALID_MODIFICATION_ERR", c: 13, m: 1 },
        NamespaceError: { s: "NAMESPACE_ERR", c: 14, m: 1 },
        InvalidAccessError: { s: "INVALID_ACCESS_ERR", c: 15, m: 1 },
        ValidationError: { s: "VALIDATION_ERR", c: 16, m: 0 },
        TypeMismatchError: { s: "TYPE_MISMATCH_ERR", c: 17, m: 1 },
        SecurityError: { s: "SECURITY_ERR", c: 18, m: 1 },
        NetworkError: { s: "NETWORK_ERR", c: 19, m: 1 },
        AbortError: { s: "ABORT_ERR", c: 20, m: 1 },
        URLMismatchError: { s: "URL_MISMATCH_ERR", c: 21, m: 1 },
        QuotaExceededError: { s: "QUOTA_EXCEEDED_ERR", c: 22, m: 1 },
        TimeoutError: { s: "TIMEOUT_ERR", c: 23, m: 1 },
        InvalidNodeTypeError: { s: "INVALID_NODE_TYPE_ERR", c: 24, m: 1 },
        DataCloneError: { s: "DATA_CLONE_ERR", c: 25, m: 1 }
      };
    })
  ),
  /***/
  5024: (
    /***/
    ((s, I, g) => {
      var C = g(6518), A = g(3650), l = g(9835), Z = g(4916), i = !Z("symmetricDifference") || !l("symmetricDifference");
      C({ target: "Set", proto: !0, real: !0, forced: i }, {
        symmetricDifference: A
      });
    })
  ),
  /***/
  5031: (
    /***/
    ((s, I, g) => {
      var C = g(7751), A = g(9504), l = g(8480), Z = g(3717), i = g(8551), d = A([].concat);
      s.exports = C("Reflect", "ownKeys") || function(G) {
        var b = l.f(i(G)), m = Z.f;
        return m ? d(b, m(G)) : b;
      };
    })
  ),
  /***/
  5169: (
    /***/
    ((s, I, g) => {
      var C = g(3238), A = TypeError;
      s.exports = function(l) {
        if (C(l)) throw new A("ArrayBuffer is detached");
        return l;
      };
    })
  ),
  /***/
  5170: (
    /***/
    ((s, I, g) => {
      var C = g(6706), A = g(4402);
      s.exports = C(A.proto, "size", "get") || function(l) {
        return l.size;
      };
    })
  ),
  /***/
  5213: (
    /***/
    ((s, I, g) => {
      var C = g(6518), A = g(4576), l = g(5370), Z = g(9143), i = A.Uint8Array, d = !i || !i.fromBase64 || !(function() {
        try {
          i.fromBase64("a");
          return;
        } catch {
        }
        try {
          i.fromBase64("", null);
        } catch {
          return !0;
        }
      })();
      i && C({ target: "Uint8Array", stat: !0, forced: d }, {
        fromBase64: function(G) {
          var b = Z(G, arguments.length > 1 ? arguments[1] : void 0, null, 9007199254740991);
          return l(i, b.bytes);
        }
      });
    })
  ),
  /***/
  5370: (
    /***/
    ((s, I, g) => {
      var C = g(6198);
      s.exports = function(A, l, Z) {
        for (var i = 0, d = arguments.length > 2 ? Z : C(l), c = new A(d); d > i; ) c[i] = l[i++];
        return c;
      };
    })
  ),
  /***/
  5397: (
    /***/
    ((s, I, g) => {
      var C = g(7055), A = g(7750);
      s.exports = function(l) {
        return C(A(l));
      };
    })
  ),
  /***/
  5610: (
    /***/
    ((s, I, g) => {
      var C = g(1291), A = Math.max, l = Math.min;
      s.exports = function(Z, i) {
        var d = C(Z);
        return d < 0 ? A(d + i, 0) : l(d, i);
      };
    })
  ),
  /***/
  5623: (
    /***/
    ((s, I, g) => {
      g(456);
    })
  ),
  /***/
  5636: (
    /***/
    ((s, I, g) => {
      var C = g(4576), A = g(9504), l = g(6706), Z = g(7696), i = g(5169), d = g(7394), c = g(4483), G = g(1548), b = C.structuredClone, m = C.ArrayBuffer, B = C.DataView, o = Math.min, W = m.prototype, Y = B.prototype, h = A(W.slice), a = l(W, "resizable", "get"), w = l(W, "maxByteLength", "get"), n = A(Y.getInt8), V = A(Y.setInt8);
      s.exports = (G || c) && function(X, y, N) {
        var t = d(X), e = y === void 0 ? t : Z(y), R = !a || !a(X), F;
        if (i(X), G && (X = b(X, { transfer: [X] }), t === e && (N || R)))
          return X;
        if (t >= e && (!N || R))
          F = h(X, 0, e);
        else {
          var K = N && !R && w ? { maxByteLength: w(X) } : void 0;
          F = new m(e, K);
          for (var S = new B(X), L = new B(F), M = o(e, t), u = 0; u < M; u++) V(L, u, n(S, u));
        }
        return G || c(X), F;
      };
    })
  ),
  /***/
  5745: (
    /***/
    ((s, I, g) => {
      var C = g(7629);
      s.exports = function(A, l) {
        return C[A] || (C[A] = l || {});
      };
    })
  ),
  /***/
  5781: (
    /***/
    ((s, I, g) => {
      var C = g(6518), A = g(7751), l = g(2812), Z = g(655), i = g(7416), d = A("URL");
      C({ target: "URL", stat: !0, forced: !i }, {
        parse: function(G) {
          var b = l(arguments.length, 1), m = Z(G), B = b < 2 || arguments[1] === void 0 ? void 0 : Z(arguments[1]);
          try {
            return new d(m, B);
          } catch {
            return null;
          }
        }
      });
    })
  ),
  /***/
  5854: (
    /***/
    ((s, I, g) => {
      var C = g(2777), A = TypeError;
      s.exports = function(l) {
        var Z = C(l, "number");
        if (typeof Z == "number") throw new A("Can't convert number to bigint");
        return BigInt(Z);
      };
    })
  ),
  /***/
  5876: (
    /***/
    ((s, I, g) => {
      var C = g(6518), A = g(3838), l = g(4916), Z = !l("isSubsetOf", function(i) {
        return i;
      });
      C({ target: "Set", proto: !0, real: !0, forced: Z }, {
        isSubsetOf: A
      });
    })
  ),
  /***/
  5917: (
    /***/
    ((s, I, g) => {
      var C = g(3724), A = g(9039), l = g(4055);
      s.exports = !C && !A(function() {
        return Object.defineProperty(l("div"), "a", {
          get: function() {
            return 7;
          }
        }).a !== 7;
      });
    })
  ),
  /***/
  5966: (
    /***/
    ((s, I, g) => {
      var C = g(9306), A = g(4117);
      s.exports = function(l, Z) {
        var i = l[Z];
        return A(i) ? void 0 : C(i);
      };
    })
  ),
  /***/
  6043: (
    /***/
    ((s, I, g) => {
      var C = g(9306), A = TypeError, l = function(Z) {
        var i, d;
        this.promise = new Z(function(c, G) {
          if (i !== void 0 || d !== void 0) throw new A("Bad Promise constructor");
          i = c, d = G;
        }), this.resolve = C(i), this.reject = C(d);
      };
      s.exports.f = function(Z) {
        return new l(Z);
      };
    })
  ),
  /***/
  6080: (
    /***/
    ((s, I, g) => {
      var C = g(7476), A = g(9306), l = g(616), Z = C(C.bind);
      s.exports = function(i, d) {
        return A(i), d === void 0 ? i : l ? Z(i, d) : function() {
          return i.apply(d, arguments);
        };
      };
    })
  ),
  /***/
  6119: (
    /***/
    ((s, I, g) => {
      var C = g(5745), A = g(3392), l = C("keys");
      s.exports = function(Z) {
        return l[Z] || (l[Z] = A(Z));
      };
    })
  ),
  /***/
  6193: (
    /***/
    ((s, I, g) => {
      var C = g(4215);
      s.exports = C === "NODE";
    })
  ),
  /***/
  6198: (
    /***/
    ((s, I, g) => {
      var C = g(8014);
      s.exports = function(A) {
        return C(A.length);
      };
    })
  ),
  /***/
  6269: (
    /***/
    ((s) => {
      s.exports = {};
    })
  ),
  /***/
  6279: (
    /***/
    ((s, I, g) => {
      var C = g(6840);
      s.exports = function(A, l, Z) {
        for (var i in l) C(A, i, l[i], Z);
        return A;
      };
    })
  ),
  /***/
  6319: (
    /***/
    ((s, I, g) => {
      var C = g(8551), A = g(9539);
      s.exports = function(l, Z, i, d) {
        try {
          return d ? Z(C(i)[0], i[1]) : Z(i);
        } catch (c) {
          A(l, "throw", c);
        }
      };
    })
  ),
  /***/
  6395: (
    /***/
    ((s) => {
      s.exports = !1;
    })
  ),
  /***/
  6518: (
    /***/
    ((s, I, g) => {
      var C = g(4576), A = g(7347).f, l = g(6699), Z = g(6840), i = g(9433), d = g(7740), c = g(2796);
      s.exports = function(G, b) {
        var m = G.target, B = G.global, o = G.stat, W, Y, h, a, w, n;
        if (B ? Y = C : o ? Y = C[m] || i(m, {}) : Y = C[m] && C[m].prototype, Y) for (h in b) {
          if (w = b[h], G.dontCallGetSet ? (n = A(Y, h), a = n && n.value) : a = Y[h], W = c(B ? h : m + (o ? "." : "#") + h, G.forced), !W && a !== void 0) {
            if (typeof w == typeof a) continue;
            d(w, a);
          }
          (G.sham || a && a.sham) && l(w, "sham", !0), Z(Y, h, w, G);
        }
      };
    })
  ),
  /***/
  6573: (
    /***/
    ((s, I, g) => {
      var C = g(3724), A = g(2106), l = g(3238), Z = ArrayBuffer.prototype;
      C && !("detached" in Z) && A(Z, "detached", {
        configurable: !0,
        get: function() {
          return l(this);
        }
      });
    })
  ),
  /***/
  6632: (
    /***/
    ((s, I, g) => {
      var C = g(6518), A = g(4576), l = g(9143), Z = g(4154), i = A.Uint8Array, d = !i || !i.prototype.setFromBase64 || !(function() {
        var c = new i([255, 255, 255, 255, 255]);
        try {
          c.setFromBase64("", null);
          return;
        } catch {
        }
        try {
          c.setFromBase64("a");
          return;
        } catch {
        }
        try {
          c.setFromBase64("MjYyZg===");
        } catch {
          return c[0] === 50 && c[1] === 54 && c[2] === 50 && c[3] === 255 && c[4] === 255;
        }
      })();
      i && C({ target: "Uint8Array", proto: !0, forced: d }, {
        setFromBase64: function(G) {
          Z(this);
          var b = l(G, arguments.length > 1 ? arguments[1] : void 0, this, this.length);
          return { read: b.read, written: b.written };
        }
      });
    })
  ),
  /***/
  6699: (
    /***/
    ((s, I, g) => {
      var C = g(3724), A = g(4913), l = g(6980);
      s.exports = C ? function(Z, i, d) {
        return A.f(Z, i, l(1, d));
      } : function(Z, i, d) {
        return Z[i] = d, Z;
      };
    })
  ),
  /***/
  6706: (
    /***/
    ((s, I, g) => {
      var C = g(9504), A = g(9306);
      s.exports = function(l, Z, i) {
        try {
          return C(A(Object.getOwnPropertyDescriptor(l, Z)[i]));
        } catch {
        }
      };
    })
  ),
  /***/
  6801: (
    /***/
    ((s, I, g) => {
      var C = g(3724), A = g(8686), l = g(4913), Z = g(8551), i = g(5397), d = g(1072);
      I.f = C && !A ? Object.defineProperties : function(G, b) {
        Z(G);
        for (var m = i(b), B = d(b), o = B.length, W = 0, Y; o > W; ) l.f(G, Y = B[W++], m[Y]);
        return G;
      };
    })
  ),
  /***/
  6823: (
    /***/
    ((s) => {
      var I = String;
      s.exports = function(g) {
        try {
          return I(g);
        } catch {
          return "Object";
        }
      };
    })
  ),
  /***/
  6837: (
    /***/
    ((s) => {
      var I = TypeError, g = 9007199254740991;
      s.exports = function(C) {
        if (C > g) throw I("Maximum allowed index exceeded");
        return C;
      };
    })
  ),
  /***/
  6840: (
    /***/
    ((s, I, g) => {
      var C = g(4901), A = g(4913), l = g(283), Z = g(9433);
      s.exports = function(i, d, c, G) {
        G || (G = {});
        var b = G.enumerable, m = G.name !== void 0 ? G.name : d;
        if (C(c) && l(c, m, G), G.global)
          b ? i[d] = c : Z(d, c);
        else {
          try {
            G.unsafe ? i[d] && (b = !0) : delete i[d];
          } catch {
          }
          b ? i[d] = c : A.f(i, d, {
            value: c,
            enumerable: !1,
            configurable: !G.nonConfigurable,
            writable: !G.nonWritable
          });
        }
        return i;
      };
    })
  ),
  /***/
  6955: (
    /***/
    ((s, I, g) => {
      var C = g(2140), A = g(4901), l = g(2195), Z = g(8227), i = Z("toStringTag"), d = Object, c = l(/* @__PURE__ */ (function() {
        return arguments;
      })()) === "Arguments", G = function(b, m) {
        try {
          return b[m];
        } catch {
        }
      };
      s.exports = C ? l : function(b) {
        var m, B, o;
        return b === void 0 ? "Undefined" : b === null ? "Null" : typeof (B = G(m = d(b), i)) == "string" ? B : c ? l(m) : (o = l(m)) === "Object" && A(m.callee) ? "Arguments" : o;
      };
    })
  ),
  /***/
  6969: (
    /***/
    ((s, I, g) => {
      var C = g(2777), A = g(757);
      s.exports = function(l) {
        var Z = C(l, "string");
        return A(Z) ? Z : Z + "";
      };
    })
  ),
  /***/
  6980: (
    /***/
    ((s) => {
      s.exports = function(I, g) {
        return {
          enumerable: !(I & 1),
          configurable: !(I & 2),
          writable: !(I & 4),
          value: g
        };
      };
    })
  ),
  /***/
  7040: (
    /***/
    ((s, I, g) => {
      var C = g(4495);
      s.exports = C && !Symbol.sham && typeof Symbol.iterator == "symbol";
    })
  ),
  /***/
  7055: (
    /***/
    ((s, I, g) => {
      var C = g(9504), A = g(9039), l = g(2195), Z = Object, i = C("".split);
      s.exports = A(function() {
        return !Z("z").propertyIsEnumerable(0);
      }) ? function(d) {
        return l(d) === "String" ? i(d, "") : Z(d);
      } : Z;
    })
  ),
  /***/
  7080: (
    /***/
    ((s, I, g) => {
      var C = g(4402).has;
      s.exports = function(A) {
        return C(A), A;
      };
    })
  ),
  /***/
  7347: (
    /***/
    ((s, I, g) => {
      var C = g(3724), A = g(9565), l = g(8773), Z = g(6980), i = g(5397), d = g(6969), c = g(9297), G = g(5917), b = Object.getOwnPropertyDescriptor;
      I.f = C ? b : function(B, o) {
        if (B = i(B), o = d(o), G) try {
          return b(B, o);
        } catch {
        }
        if (c(B, o)) return Z(!A(l.f, B, o), B[o]);
      };
    })
  ),
  /***/
  7394: (
    /***/
    ((s, I, g) => {
      var C = g(4576), A = g(6706), l = g(2195), Z = C.ArrayBuffer, i = C.TypeError;
      s.exports = Z && A(Z.prototype, "byteLength", "get") || function(d) {
        if (l(d) !== "ArrayBuffer") throw new i("ArrayBuffer expected");
        return d.byteLength;
      };
    })
  ),
  /***/
  7416: (
    /***/
    ((s, I, g) => {
      var C = g(9039), A = g(8227), l = g(3724), Z = g(6395), i = A("iterator");
      s.exports = !C(function() {
        var d = new URL("b?a=1&b=2&c=3", "https://a"), c = d.searchParams, G = new URLSearchParams("a=1&a=2&b=3"), b = "";
        return d.pathname = "c%20d", c.forEach(function(m, B) {
          c.delete("b"), b += B + m;
        }), G.delete("a", 2), G.delete("b", void 0), Z && (!d.toJSON || !G.has("a", 1) || G.has("a", 2) || !G.has("a", void 0) || G.has("b")) || !c.size && (Z || !l) || !c.sort || d.href !== "https://a/c%20d?a=1&c=3" || c.get("c") !== "3" || String(new URLSearchParams("?a=1")) !== "a=1" || !c[i] || new URL("https://a@b").username !== "a" || new URLSearchParams(new URLSearchParams("a=b")).get("a") !== "b" || new URL("https://тест").host !== "xn--e1aybc" || new URL("https://a#б").hash !== "#%D0%B1" || b !== "a1c3" || new URL("https://x", void 0).host !== "x";
      });
    })
  ),
  /***/
  7476: (
    /***/
    ((s, I, g) => {
      var C = g(2195), A = g(9504);
      s.exports = function(l) {
        if (C(l) === "Function") return A(l);
      };
    })
  ),
  /***/
  7566: (
    /***/
    ((s, I, g) => {
      var C = g(6840), A = g(9504), l = g(655), Z = g(2812), i = URLSearchParams, d = i.prototype, c = A(d.getAll), G = A(d.has), b = new i("a=1");
      (b.has("a", 2) || !b.has("a", void 0)) && C(d, "has", function(B) {
        var o = arguments.length, W = o < 2 ? void 0 : arguments[1];
        if (o && W === void 0) return G(this, B);
        var Y = c(this, B);
        Z(o, 1);
        for (var h = l(W), a = 0; a < Y.length; )
          if (Y[a++] === h) return !0;
        return !1;
      }, { enumerable: !0, unsafe: !0 });
    })
  ),
  /***/
  7588: (
    /***/
    ((s, I, g) => {
      var C = g(6518), A = g(9565), l = g(2652), Z = g(9306), i = g(8551), d = g(1767), c = g(9539), G = g(4549), b = G("forEach", TypeError);
      C({ target: "Iterator", proto: !0, real: !0, forced: b }, {
        forEach: function(B) {
          i(this);
          try {
            Z(B);
          } catch (Y) {
            c(this, "throw", Y);
          }
          if (b) return A(b, this, B);
          var o = d(this), W = 0;
          l(o, function(Y) {
            B(Y, W++);
          }, { IS_RECORD: !0 });
        }
      });
    })
  ),
  /***/
  7629: (
    /***/
    ((s, I, g) => {
      var C = g(6395), A = g(4576), l = g(9433), Z = "__core-js_shared__", i = s.exports = A[Z] || l(Z, {});
      (i.versions || (i.versions = [])).push({
        version: "3.45.0",
        mode: C ? "pure" : "global",
        copyright: "© 2014-2025 Denis Pushkarev (zloirock.ru)",
        license: "https://github.com/zloirock/core-js/blob/v3.45.0/LICENSE",
        source: "https://github.com/zloirock/core-js"
      });
    })
  ),
  /***/
  7642: (
    /***/
    ((s, I, g) => {
      var C = g(6518), A = g(3440), l = g(9039), Z = g(4916), i = !Z("difference", function(c) {
        return c.size === 0;
      }), d = i || l(function() {
        var c = {
          size: 1,
          has: function() {
            return !0;
          },
          keys: function() {
            var b = 0;
            return {
              next: function() {
                var m = b++ > 1;
                return G.has(1) && G.clear(), { done: m, value: 2 };
              }
            };
          }
        }, G = /* @__PURE__ */ new Set([1, 2, 3, 4]);
        return G.difference(c).size !== 3;
      });
      C({ target: "Set", proto: !0, real: !0, forced: d }, {
        difference: A
      });
    })
  ),
  /***/
  7657: (
    /***/
    ((s, I, g) => {
      var C = g(9039), A = g(4901), l = g(34), Z = g(2360), i = g(2787), d = g(6840), c = g(8227), G = g(6395), b = c("iterator"), m = !1, B, o, W;
      [].keys && (W = [].keys(), "next" in W ? (o = i(i(W)), o !== Object.prototype && (B = o)) : m = !0);
      var Y = !l(B) || C(function() {
        var h = {};
        return B[b].call(h) !== h;
      });
      Y ? B = {} : G && (B = Z(B)), A(B[b]) || d(B, b, function() {
        return this;
      }), s.exports = {
        IteratorPrototype: B,
        BUGGY_SAFARI_ITERATORS: m
      };
    })
  ),
  /***/
  7680: (
    /***/
    ((s, I, g) => {
      var C = g(9504);
      s.exports = C([].slice);
    })
  ),
  /***/
  7696: (
    /***/
    ((s, I, g) => {
      var C = g(1291), A = g(8014), l = RangeError;
      s.exports = function(Z) {
        if (Z === void 0) return 0;
        var i = C(Z), d = A(i);
        if (i !== d) throw new l("Wrong length or index");
        return d;
      };
    })
  ),
  /***/
  7740: (
    /***/
    ((s, I, g) => {
      var C = g(9297), A = g(5031), l = g(7347), Z = g(4913);
      s.exports = function(i, d, c) {
        for (var G = A(d), b = Z.f, m = l.f, B = 0; B < G.length; B++) {
          var o = G[B];
          !C(i, o) && !(c && C(c, o)) && b(i, o, m(d, o));
        }
      };
    })
  ),
  /***/
  7750: (
    /***/
    ((s, I, g) => {
      var C = g(4117), A = TypeError;
      s.exports = function(l) {
        if (C(l)) throw new A("Can't call method on " + l);
        return l;
      };
    })
  ),
  /***/
  7751: (
    /***/
    ((s, I, g) => {
      var C = g(4576), A = g(4901), l = function(Z) {
        return A(Z) ? Z : void 0;
      };
      s.exports = function(Z, i) {
        return arguments.length < 2 ? l(C[Z]) : C[Z] && C[Z][i];
      };
    })
  ),
  /***/
  7811: (
    /***/
    ((s) => {
      s.exports = typeof ArrayBuffer < "u" && typeof DataView < "u";
    })
  ),
  /***/
  7936: (
    /***/
    ((s, I, g) => {
      var C = g(6518), A = g(5636);
      A && C({ target: "ArrayBuffer", proto: !0 }, {
        transferToFixedLength: function() {
          return A(this, arguments.length ? arguments[0] : void 0, !1);
        }
      });
    })
  ),
  /***/
  8004: (
    /***/
    ((s, I, g) => {
      var C = g(6518), A = g(9039), l = g(8750), Z = g(4916), i = !Z("intersection", function(d) {
        return d.size === 2 && d.has(1) && d.has(2);
      }) || A(function() {
        return String(Array.from((/* @__PURE__ */ new Set([1, 2, 3])).intersection(/* @__PURE__ */ new Set([3, 2])))) !== "3,2";
      });
      C({ target: "Set", proto: !0, real: !0, forced: i }, {
        intersection: l
      });
    })
  ),
  /***/
  8014: (
    /***/
    ((s, I, g) => {
      var C = g(1291), A = Math.min;
      s.exports = function(l) {
        var Z = C(l);
        return Z > 0 ? A(Z, 9007199254740991) : 0;
      };
    })
  ),
  /***/
  8100: (
    /***/
    ((s, I, g) => {
      var C = g(6518), A = g(5636);
      A && C({ target: "ArrayBuffer", proto: !0 }, {
        transfer: function() {
          return A(this, arguments.length ? arguments[0] : void 0, !0);
        }
      });
    })
  ),
  /***/
  8111: (
    /***/
    ((s, I, g) => {
      var C = g(6518), A = g(4576), l = g(679), Z = g(8551), i = g(4901), d = g(2787), c = g(2106), G = g(4659), b = g(9039), m = g(9297), B = g(8227), o = g(7657).IteratorPrototype, W = g(3724), Y = g(6395), h = "constructor", a = "Iterator", w = B("toStringTag"), n = TypeError, V = A[a], X = Y || !i(V) || V.prototype !== o || !b(function() {
        V({});
      }), y = function() {
        if (l(this, o), d(this) === o) throw new n("Abstract class Iterator not directly constructable");
      }, N = function(t, e) {
        W ? c(o, t, {
          configurable: !0,
          get: function() {
            return e;
          },
          set: function(R) {
            if (Z(this), this === o) throw new n("You can't redefine this property");
            m(this, t) ? this[t] = R : G(this, t, R);
          }
        }) : o[t] = e;
      };
      m(o, w) || N(w, a), (X || !m(o, h) || o[h] === Object) && N(h, y), y.prototype = o, C({ global: !0, constructor: !0, forced: X }, {
        Iterator: y
      });
    })
  ),
  /***/
  8227: (
    /***/
    ((s, I, g) => {
      var C = g(4576), A = g(5745), l = g(9297), Z = g(3392), i = g(4495), d = g(7040), c = C.Symbol, G = A("wks"), b = d ? c.for || c : c && c.withoutSetter || Z;
      s.exports = function(m) {
        return l(G, m) || (G[m] = i && l(c, m) ? c[m] : b("Symbol." + m)), G[m];
      };
    })
  ),
  /***/
  8235: (
    /***/
    ((s, I, g) => {
      var C = g(9504), A = g(9297), l = SyntaxError, Z = parseInt, i = String.fromCharCode, d = C("".charAt), c = C("".slice), G = C(/./.exec), b = {
        '\\"': '"',
        "\\\\": "\\",
        "\\/": "/",
        "\\b": "\b",
        "\\f": "\f",
        "\\n": `
`,
        "\\r": "\r",
        "\\t": "	"
      }, m = /^[\da-f]{4}$/i, B = /^[\u0000-\u001F]$/;
      s.exports = function(o, W) {
        for (var Y = !0, h = ""; W < o.length; ) {
          var a = d(o, W);
          if (a === "\\") {
            var w = c(o, W, W + 2);
            if (A(b, w))
              h += b[w], W += 2;
            else if (w === "\\u") {
              W += 2;
              var n = c(o, W, W + 4);
              if (!G(m, n)) throw new l("Bad Unicode escape at: " + W);
              h += i(Z(n, 16)), W += 4;
            } else throw new l('Unknown escape sequence: "' + w + '"');
          } else if (a === '"') {
            Y = !1, W++;
            break;
          } else {
            if (G(B, a)) throw new l("Bad control character in string literal at: " + W);
            h += a, W++;
          }
        }
        if (Y) throw new l("Unterminated string at: " + W);
        return { value: h, end: W };
      };
    })
  ),
  /***/
  8237: (
    /***/
    ((s, I, g) => {
      var C = g(6518), A = g(2652), l = g(9306), Z = g(8551), i = g(1767), d = g(9539), c = g(4549), G = g(8745), b = g(9039), m = TypeError, B = b(function() {
        [].keys().reduce(function() {
        }, void 0);
      }), o = !B && c("reduce", m);
      C({ target: "Iterator", proto: !0, real: !0, forced: B || o }, {
        reduce: function(Y) {
          Z(this);
          try {
            l(Y);
          } catch (V) {
            d(this, "throw", V);
          }
          var h = arguments.length < 2, a = h ? void 0 : arguments[1];
          if (o)
            return G(o, this, h ? [Y] : [Y, a]);
          var w = i(this), n = 0;
          if (A(w, function(V) {
            h ? (h = !1, a = V) : a = Y(a, V, n), n++;
          }, { IS_RECORD: !0 }), h) throw new m("Reduce of empty iterator with no initial value");
          return a;
        }
      });
    })
  ),
  /***/
  8335: (
    /***/
    ((s, I, g) => {
      var C = g(6518), A = g(3724), l = g(4576), Z = g(7751), i = g(9504), d = g(9565), c = g(4901), G = g(34), b = g(4376), m = g(9297), B = g(655), o = g(6198), W = g(4659), Y = g(9039), h = g(8235), a = g(4495), w = l.JSON, n = l.Number, V = l.SyntaxError, X = w && w.parse, y = Z("Object", "keys"), N = Object.getOwnPropertyDescriptor, t = i("".charAt), e = i("".slice), R = i(/./.exec), F = i([].push), K = /^\d$/, S = /^[1-9]$/, L = /^[\d-]$/, M = /^[\t\n\r ]$/, u = 0, k = 1, v = function(D, H) {
        D = B(D);
        var p = new _(D, 0), E = p.parse(), gI = E.value, Q = p.skip(M, E.end);
        if (Q < D.length)
          throw new V('Unexpected extra character: "' + t(D, Q) + '" after the parsed data at: ' + Q);
        return c(H) ? $({ "": gI }, "", H, E) : gI;
      }, $ = function(D, H, p, E) {
        var gI = D[H], Q = E && gI === E.value, CI = Q && typeof E.source == "string" ? { source: E.source } : {}, AI, zI, eI, wI, Wg;
        if (G(gI)) {
          var WC = b(gI), vg = Q ? E.nodes : WC ? [] : {};
          if (WC)
            for (AI = vg.length, eI = o(gI), wI = 0; wI < eI; wI++)
              dI(gI, wI, $(gI, "" + wI, p, wI < AI ? vg[wI] : void 0));
          else
            for (zI = y(gI), eI = o(zI), wI = 0; wI < eI; wI++)
              Wg = zI[wI], dI(gI, Wg, $(gI, Wg, p, m(vg, Wg) ? vg[Wg] : void 0));
        }
        return d(p, D, H, gI, CI);
      }, dI = function(D, H, p) {
        if (A) {
          var E = N(D, H);
          if (E && !E.configurable) return;
        }
        p === void 0 ? delete D[H] : W(D, H, p);
      }, q = function(D, H, p, E) {
        this.value = D, this.end = H, this.source = p, this.nodes = E;
      }, _ = function(D, H) {
        this.source = D, this.index = H;
      };
      _.prototype = {
        fork: function(D) {
          return new _(this.source, D);
        },
        parse: function() {
          var D = this.source, H = this.skip(M, this.index), p = this.fork(H), E = t(D, H);
          if (R(L, E)) return p.number();
          switch (E) {
            case "{":
              return p.object();
            case "[":
              return p.array();
            case '"':
              return p.string();
            case "t":
              return p.keyword(!0);
            case "f":
              return p.keyword(!1);
            case "n":
              return p.keyword(null);
          }
          throw new V('Unexpected character: "' + E + '" at: ' + H);
        },
        node: function(D, H, p, E, gI) {
          return new q(H, E, D ? null : e(this.source, p, E), gI);
        },
        object: function() {
          for (var D = this.source, H = this.index + 1, p = !1, E = {}, gI = {}; H < D.length; ) {
            if (H = this.until(['"', "}"], H), t(D, H) === "}" && !p) {
              H++;
              break;
            }
            var Q = this.fork(H).string(), CI = Q.value;
            H = Q.end, H = this.until([":"], H) + 1, H = this.skip(M, H), Q = this.fork(H).parse(), W(gI, CI, Q), W(E, CI, Q.value), H = this.until([",", "}"], Q.end);
            var AI = t(D, H);
            if (AI === ",")
              p = !0, H++;
            else if (AI === "}") {
              H++;
              break;
            }
          }
          return this.node(k, E, this.index, H, gI);
        },
        array: function() {
          for (var D = this.source, H = this.index + 1, p = !1, E = [], gI = []; H < D.length; ) {
            if (H = this.skip(M, H), t(D, H) === "]" && !p) {
              H++;
              break;
            }
            var Q = this.fork(H).parse();
            if (F(gI, Q), F(E, Q.value), H = this.until([",", "]"], Q.end), t(D, H) === ",")
              p = !0, H++;
            else if (t(D, H) === "]") {
              H++;
              break;
            }
          }
          return this.node(k, E, this.index, H, gI);
        },
        string: function() {
          var D = this.index, H = h(this.source, this.index + 1);
          return this.node(u, H.value, D, H.end);
        },
        number: function() {
          var D = this.source, H = this.index, p = H;
          if (t(D, p) === "-" && p++, t(D, p) === "0") p++;
          else if (R(S, t(D, p))) p = this.skip(K, p + 1);
          else throw new V("Failed to parse number at: " + p);
          if (t(D, p) === "." && (p = this.skip(K, p + 1)), t(D, p) === "e" || t(D, p) === "E") {
            p++, (t(D, p) === "+" || t(D, p) === "-") && p++;
            var E = p;
            if (p = this.skip(K, p), E === p) throw new V("Failed to parse number's exponent value at: " + p);
          }
          return this.node(u, n(e(D, H, p)), H, p);
        },
        keyword: function(D) {
          var H = "" + D, p = this.index, E = p + H.length;
          if (e(this.source, p, E) !== H) throw new V("Failed to parse value at: " + p);
          return this.node(u, D, p, E);
        },
        skip: function(D, H) {
          for (var p = this.source; H < p.length && R(D, t(p, H)); H++) ;
          return H;
        },
        until: function(D, H) {
          H = this.skip(M, H);
          for (var p = t(this.source, H), E = 0; E < D.length; E++) if (D[E] === p) return H;
          throw new V('Unexpected character: "' + p + '" at: ' + H);
        }
      };
      var lI = Y(function() {
        var D = "9007199254740993", H;
        return X(D, function(p, E, gI) {
          H = gI.source;
        }), H !== D;
      }), nI = a && !Y(function() {
        return 1 / X("-0 	") !== -1 / 0;
      });
      C({ target: "JSON", stat: !0, forced: lI }, {
        parse: function(H, p) {
          return nI && !c(p) ? X(H) : v(H, p);
        }
      });
    })
  ),
  /***/
  8469: (
    /***/
    ((s, I, g) => {
      var C = g(9504), A = g(507), l = g(4402), Z = l.Set, i = l.proto, d = C(i.forEach), c = C(i.keys), G = c(new Z()).next;
      s.exports = function(b, m, B) {
        return B ? A({ iterator: c(b), next: G }, m) : d(b, m);
      };
    })
  ),
  /***/
  8480: (
    /***/
    ((s, I, g) => {
      var C = g(1828), A = g(8727), l = A.concat("length", "prototype");
      I.f = Object.getOwnPropertyNames || function(i) {
        return C(i, l);
      };
    })
  ),
  /***/
  8527: (
    /***/
    ((s, I, g) => {
      var C = g(7080), A = g(4402).has, l = g(5170), Z = g(3789), i = g(507), d = g(9539);
      s.exports = function(G) {
        var b = C(this), m = Z(G);
        if (l(b) < m.size) return !1;
        var B = m.getIterator();
        return i(B, function(o) {
          if (!A(b, o)) return d(B, "normal", !1);
        }) !== !1;
      };
    })
  ),
  /***/
  8551: (
    /***/
    ((s, I, g) => {
      var C = g(34), A = String, l = TypeError;
      s.exports = function(Z) {
        if (C(Z)) return Z;
        throw new l(A(Z) + " is not an object");
      };
    })
  ),
  /***/
  8574: (
    /***/
    ((s, I, g) => {
      var C = g(9504), A = Error, l = C("".replace), Z = (function(c) {
        return String(new A(c).stack);
      })("zxcasd"), i = /\n\s*at [^:]*:[^\n]*/, d = i.test(Z);
      s.exports = function(c, G) {
        if (d && typeof c == "string" && !A.prepareStackTrace)
          for (; G--; ) c = l(c, i, "");
        return c;
      };
    })
  ),
  /***/
  8622: (
    /***/
    ((s, I, g) => {
      var C = g(4576), A = g(4901), l = C.WeakMap;
      s.exports = A(l) && /native code/.test(String(l));
    })
  ),
  /***/
  8646: (
    /***/
    ((s, I, g) => {
      var C = g(9565), A = g(8551), l = g(1767), Z = g(851);
      s.exports = function(i, d) {
        (!d || typeof i != "string") && A(i);
        var c = Z(i);
        return l(A(c !== void 0 ? C(c, i) : i));
      };
    })
  ),
  /***/
  8686: (
    /***/
    ((s, I, g) => {
      var C = g(3724), A = g(9039);
      s.exports = C && A(function() {
        return Object.defineProperty(function() {
        }, "prototype", {
          value: 42,
          writable: !1
        }).prototype !== 42;
      });
    })
  ),
  /***/
  8721: (
    /***/
    ((s, I, g) => {
      var C = g(3724), A = g(9504), l = g(2106), Z = URLSearchParams.prototype, i = A(Z.forEach);
      C && !("size" in Z) && l(Z, "size", {
        get: function() {
          var c = 0;
          return i(this, function() {
            c++;
          }), c;
        },
        configurable: !0,
        enumerable: !0
      });
    })
  ),
  /***/
  8727: (
    /***/
    ((s) => {
      s.exports = [
        "constructor",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "toLocaleString",
        "toString",
        "valueOf"
      ];
    })
  ),
  /***/
  8745: (
    /***/
    ((s, I, g) => {
      var C = g(616), A = Function.prototype, l = A.apply, Z = A.call;
      s.exports = typeof Reflect == "object" && Reflect.apply || (C ? Z.bind(l) : function() {
        return Z.apply(l, arguments);
      });
    })
  ),
  /***/
  8750: (
    /***/
    ((s, I, g) => {
      var C = g(7080), A = g(4402), l = g(5170), Z = g(3789), i = g(8469), d = g(507), c = A.Set, G = A.add, b = A.has;
      s.exports = function(B) {
        var o = C(this), W = Z(B), Y = new c();
        return l(o) > W.size ? d(W.getIterator(), function(h) {
          b(o, h) && G(Y, h);
        }) : i(o, function(h) {
          W.includes(h) && G(Y, h);
        }), Y;
      };
    })
  ),
  /***/
  8773: (
    /***/
    ((s, I) => {
      var g = {}.propertyIsEnumerable, C = Object.getOwnPropertyDescriptor, A = C && !g.call({ 1: 2 }, 1);
      I.f = A ? function(Z) {
        var i = C(this, Z);
        return !!i && i.enumerable;
      } : g;
    })
  ),
  /***/
  8981: (
    /***/
    ((s, I, g) => {
      var C = g(7750), A = Object;
      s.exports = function(l) {
        return A(C(l));
      };
    })
  ),
  /***/
  9039: (
    /***/
    ((s) => {
      s.exports = function(I) {
        try {
          return !!I();
        } catch {
          return !0;
        }
      };
    })
  ),
  /***/
  9143: (
    /***/
    ((s, I, g) => {
      var C = g(4576), A = g(9504), l = g(3972), Z = g(3463), i = g(9297), d = g(2804), c = g(944), G = g(5169), b = d.c2i, m = d.c2iUrl, B = C.SyntaxError, o = C.TypeError, W = A("".charAt), Y = function(w, n) {
        for (var V = w.length; n < V; n++) {
          var X = W(w, n);
          if (X !== " " && X !== "	" && X !== `
` && X !== "\f" && X !== "\r") break;
        }
        return n;
      }, h = function(w, n, V) {
        var X = w.length;
        X < 4 && (w += X === 2 ? "AA" : "A");
        var y = (n[W(w, 0)] << 18) + (n[W(w, 1)] << 12) + (n[W(w, 2)] << 6) + n[W(w, 3)], N = [
          y >> 16 & 255,
          y >> 8 & 255,
          y & 255
        ];
        if (X === 2) {
          if (V && N[1] !== 0)
            throw new B("Extra bits");
          return [N[0]];
        }
        if (X === 3) {
          if (V && N[2] !== 0)
            throw new B("Extra bits");
          return [N[0], N[1]];
        }
        return N;
      }, a = function(w, n, V) {
        for (var X = n.length, y = 0; y < X; y++)
          w[V + y] = n[y];
        return V + X;
      };
      s.exports = function(w, n, V, X) {
        Z(w), l(n);
        var y = c(n) === "base64" ? b : m, N = n ? n.lastChunkHandling : void 0;
        if (N === void 0 && (N = "loose"), N !== "loose" && N !== "strict" && N !== "stop-before-partial")
          throw new o("Incorrect `lastChunkHandling` option");
        V && G(V.buffer);
        var t = w.length, e = V || [], R = 0, F = 0, K = "", S = 0;
        if (X) for (; ; ) {
          if (S = Y(w, S), S === t) {
            if (K.length > 0) {
              if (N === "stop-before-partial")
                break;
              if (N === "loose") {
                if (K.length === 1)
                  throw new B("Malformed padding: exactly one additional character");
                R = a(e, h(K, y, !1), R);
              } else
                throw new B("Missing padding");
            }
            F = t;
            break;
          }
          var L = W(w, S);
          if (++S, L === "=") {
            if (K.length < 2)
              throw new B("Padding is too early");
            if (S = Y(w, S), K.length === 2) {
              if (S === t) {
                if (N === "stop-before-partial")
                  break;
                throw new B("Malformed padding: only one =");
              }
              W(w, S) === "=" && (++S, S = Y(w, S));
            }
            if (S < t)
              throw new B("Unexpected character after padding");
            R = a(e, h(K, y, N === "strict"), R), F = t;
            break;
          }
          if (!i(y, L))
            throw new B("Unexpected character");
          var M = X - R;
          if (M === 1 && K.length === 2 || M === 2 && K.length === 3 || (K += L, K.length === 4 && (R = a(e, h(K, y, !1), R), K = "", F = S, R === X)))
            break;
        }
        return { bytes: e, read: F, written: R };
      };
    })
  ),
  /***/
  9286: (
    /***/
    ((s, I, g) => {
      var C = g(4402), A = g(8469), l = C.Set, Z = C.add;
      s.exports = function(i) {
        var d = new l();
        return A(i, function(c) {
          Z(d, c);
        }), d;
      };
    })
  ),
  /***/
  9297: (
    /***/
    ((s, I, g) => {
      var C = g(9504), A = g(8981), l = C({}.hasOwnProperty);
      s.exports = Object.hasOwn || function(i, d) {
        return l(A(i), d);
      };
    })
  ),
  /***/
  9306: (
    /***/
    ((s, I, g) => {
      var C = g(4901), A = g(6823), l = TypeError;
      s.exports = function(Z) {
        if (C(Z)) return Z;
        throw new l(A(Z) + " is not a function");
      };
    })
  ),
  /***/
  9314: (
    /***/
    ((s, I, g) => {
      var C = g(6518), A = g(9565), l = g(8551), Z = g(1767), i = g(4149), d = g(9590), c = g(9539), G = g(9462), b = g(684), m = g(4549), B = g(6395), o = !B && !b("drop", 0), W = !B && !o && m("drop", RangeError), Y = B || o || W, h = G(function() {
        for (var a = this.iterator, w = this.next, n, V; this.remaining; )
          if (this.remaining--, n = l(A(w, a)), V = this.done = !!n.done, V) return;
        if (n = l(A(w, a)), V = this.done = !!n.done, !V) return n.value;
      });
      C({ target: "Iterator", proto: !0, real: !0, forced: Y }, {
        drop: function(w) {
          l(this);
          var n;
          try {
            n = d(i(+w));
          } catch (V) {
            c(this, "throw", V);
          }
          return W ? A(W, this, n) : new h(Z(this), {
            remaining: n
          });
        }
      });
    })
  ),
  /***/
  9429: (
    /***/
    ((s, I, g) => {
      var C = g(4576), A = g(6193);
      s.exports = function(l) {
        if (A) {
          try {
            return C.process.getBuiltinModule(l);
          } catch {
          }
          try {
            return Function('return require("' + l + '")')();
          } catch {
          }
        }
      };
    })
  ),
  /***/
  9432: (
    /***/
    ((s, I, g) => {
      g(5213);
    })
  ),
  /***/
  9433: (
    /***/
    ((s, I, g) => {
      var C = g(4576), A = Object.defineProperty;
      s.exports = function(l, Z) {
        try {
          A(C, l, { value: Z, configurable: !0, writable: !0 });
        } catch {
          C[l] = Z;
        }
        return Z;
      };
    })
  ),
  /***/
  9462: (
    /***/
    ((s, I, g) => {
      var C = g(9565), A = g(2360), l = g(6699), Z = g(6279), i = g(8227), d = g(1181), c = g(5966), G = g(7657).IteratorPrototype, b = g(2529), m = g(9539), B = g(1385), o = i("toStringTag"), W = "IteratorHelper", Y = "WrapForValidIterator", h = "normal", a = "throw", w = d.set, n = function(y) {
        var N = d.getterFor(y ? Y : W);
        return Z(A(G), {
          next: function() {
            var e = N(this);
            if (y) return e.nextHandler();
            if (e.done) return b(void 0, !0);
            try {
              var R = e.nextHandler();
              return e.returnHandlerResult ? R : b(R, e.done);
            } catch (F) {
              throw e.done = !0, F;
            }
          },
          return: function() {
            var t = N(this), e = t.iterator;
            if (t.done = !0, y) {
              var R = c(e, "return");
              return R ? C(R, e) : b(void 0, !0);
            }
            if (t.inner) try {
              m(t.inner.iterator, h);
            } catch (F) {
              return m(e, a, F);
            }
            if (t.openIters) try {
              B(t.openIters, h);
            } catch (F) {
              return m(e, a, F);
            }
            return e && m(e, h), b(void 0, !0);
          }
        });
      }, V = n(!0), X = n(!1);
      l(X, o, "Iterator Helper"), s.exports = function(y, N, t) {
        var e = function(F, K) {
          K ? (K.iterator = F.iterator, K.next = F.next) : K = F, K.type = N ? Y : W, K.returnHandlerResult = !!t, K.nextHandler = y, K.counter = 0, K.done = !1, w(this, K);
        };
        return e.prototype = N ? V : X, e;
      };
    })
  ),
  /***/
  9486: (
    /***/
    ((s, I, g) => {
      var C = g(6518), A = g(4576), l = g(9504), Z = g(3972), i = g(4154), d = g(5169), c = g(2804), G = g(944), b = c.i2c, m = c.i2cUrl, B = l("".charAt), o = A.Uint8Array, W = !o || !o.prototype.toBase64 || !(function() {
        try {
          var Y = new o();
          Y.toBase64(null);
        } catch {
          return !0;
        }
      })();
      o && C({ target: "Uint8Array", proto: !0, forced: W }, {
        toBase64: function() {
          var h = i(this), a = arguments.length ? Z(arguments[0]) : void 0, w = G(a) === "base64" ? b : m, n = !!a && !!a.omitPadding;
          d(this.buffer);
          for (var V = "", X = 0, y = h.length, N, t = function(e) {
            return B(w, N >> 6 * e & 63);
          }; X + 2 < y; X += 3)
            N = (h[X] << 16) + (h[X + 1] << 8) + h[X + 2], V += t(3) + t(2) + t(1) + t(0);
          return X + 2 === y ? (N = (h[X] << 16) + (h[X + 1] << 8), V += t(3) + t(2) + t(1) + (n ? "" : "=")) : X + 1 === y && (N = h[X] << 16, V += t(3) + t(2) + (n ? "" : "==")), V;
        }
      });
    })
  ),
  /***/
  9504: (
    /***/
    ((s, I, g) => {
      var C = g(616), A = Function.prototype, l = A.call, Z = C && A.bind.bind(l, l);
      s.exports = C ? Z : function(i) {
        return function() {
          return l.apply(i, arguments);
        };
      };
    })
  ),
  /***/
  9519: (
    /***/
    ((s, I, g) => {
      var C = g(4576), A = g(2839), l = C.process, Z = C.Deno, i = l && l.versions || Z && Z.version, d = i && i.v8, c, G;
      d && (c = d.split("."), G = c[0] > 0 && c[0] < 4 ? 1 : +(c[0] + c[1])), !G && A && (c = A.match(/Edge\/(\d+)/), (!c || c[1] >= 74) && (c = A.match(/Chrome\/(\d+)/), c && (G = +c[1]))), s.exports = G;
    })
  ),
  /***/
  9539: (
    /***/
    ((s, I, g) => {
      var C = g(9565), A = g(8551), l = g(5966);
      s.exports = function(Z, i, d) {
        var c, G;
        A(Z);
        try {
          if (c = l(Z, "return"), !c) {
            if (i === "throw") throw d;
            return d;
          }
          c = C(c, Z);
        } catch (b) {
          G = !0, c = b;
        }
        if (i === "throw") throw d;
        if (G) throw c;
        return A(c), d;
      };
    })
  ),
  /***/
  9565: (
    /***/
    ((s, I, g) => {
      var C = g(616), A = Function.prototype.call;
      s.exports = C ? A.bind(A) : function() {
        return A.apply(A, arguments);
      };
    })
  ),
  /***/
  9577: (
    /***/
    ((s, I, g) => {
      var C = g(9928), A = g(4644), l = g(1108), Z = g(1291), i = g(5854), d = A.aTypedArray, c = A.getTypedArrayConstructor, G = A.exportTypedArrayMethod, b = (function() {
        try {
          new Int8Array(1).with(2, { valueOf: function() {
            throw 8;
          } });
        } catch (B) {
          return B === 8;
        }
      })(), m = b && (function() {
        try {
          new Int8Array(1).with(-0.5, 1);
        } catch {
          return !0;
        }
      })();
      G("with", function(B, o) {
        var W = d(this), Y = Z(B), h = l(W) ? i(o) : +o;
        return C(W, c(W), Y, h);
      }, !b || m);
    })
  ),
  /***/
  9590: (
    /***/
    ((s, I, g) => {
      var C = g(1291), A = RangeError;
      s.exports = function(l) {
        var Z = C(l);
        if (Z < 0) throw new A("The argument can't be less than 0");
        return Z;
      };
    })
  ),
  /***/
  9617: (
    /***/
    ((s, I, g) => {
      var C = g(5397), A = g(5610), l = g(6198), Z = function(i) {
        return function(d, c, G) {
          var b = C(d), m = l(b);
          if (m === 0) return !i && -1;
          var B = A(G, m), o;
          if (i && c !== c) {
            for (; m > B; )
              if (o = b[B++], o !== o) return !0;
          } else for (; m > B; B++)
            if ((i || B in b) && b[B] === c) return i || B || 0;
          return !i && -1;
        };
      };
      s.exports = {
        // `Array.prototype.includes` method
        // https://tc39.es/ecma262/#sec-array.prototype.includes
        includes: Z(!0),
        // `Array.prototype.indexOf` method
        // https://tc39.es/ecma262/#sec-array.prototype.indexof
        indexOf: Z(!1)
      };
    })
  ),
  /***/
  9631: (
    /***/
    ((s, I, g) => {
      g(9486);
    })
  ),
  /***/
  9797: (
    /***/
    ((s, I, g) => {
      g(4226);
    })
  ),
  /***/
  9835: (
    /***/
    ((s) => {
      s.exports = function(I) {
        try {
          var g = /* @__PURE__ */ new Set(), C = {
            size: 0,
            has: function() {
              return !0;
            },
            keys: function() {
              return Object.defineProperty({}, "next", {
                get: function() {
                  return g.clear(), g.add(4), function() {
                    return { done: !0 };
                  };
                }
              });
            }
          }, A = g[I](C);
          return A.size === 1 && A.values().next().value === 4;
        } catch {
          return !1;
        }
      };
    })
  ),
  /***/
  9928: (
    /***/
    ((s, I, g) => {
      var C = g(6198), A = g(1291), l = RangeError;
      s.exports = function(Z, i, d, c) {
        var G = C(Z), b = A(d), m = b < 0 ? G + b : b;
        if (m >= G || m < 0) throw new l("Incorrect index");
        for (var B = new i(G), o = 0; o < G; o++) B[o] = o === m ? c : Z[o];
        return B;
      };
    })
  )
  /******/
}, IA = {};
function x(s) {
  var I = IA[s];
  if (I !== void 0)
    return I.exports;
  var g = IA[s] = {
    /******/
    // no module.id needed
    /******/
    // no module.loaded needed
    /******/
    exports: {}
    /******/
  };
  return cl[s].call(g.exports, g, g.exports, x), g.exports;
}
x.d = (s, I) => {
  for (var g in I)
    x.o(I, g) && !x.o(s, g) && Object.defineProperty(s, g, { enumerable: !0, get: I[g] });
};
x.o = (s, I) => Object.prototype.hasOwnProperty.call(s, I);
x(4114);
x(6573);
x(8100);
x(7936);
x(8111);
x(8237);
x(1689);
x(9577);
x(4235);
x(9432);
x(1549);
x(9797);
x(9631);
x(5623);
x(4979);
x(5781);
const HI = typeof process == "object" && process + "" == "[object process]" && !process.versions.nw && !(process.versions.electron && process.type && process.type !== "browser"), tC = [1e-3, 0, 0, 1e-3, 0, 0], YC = 1.35, SI = {
  ANY: 1,
  DISPLAY: 2,
  PRINT: 4,
  ANNOTATIONS_FORMS: 16,
  ANNOTATIONS_STORAGE: 32,
  ANNOTATIONS_DISABLE: 64,
  IS_EDITING: 128,
  OPLIST: 256
}, $I = {
  DISABLE: 0,
  ENABLE: 1,
  ENABLE_FORMS: 2,
  ENABLE_STORAGE: 3
}, RA = "pdfjs_internal_editor_", O = {
  DISABLE: -1,
  NONE: 0,
  FREETEXT: 3,
  HIGHLIGHT: 9,
  STAMP: 13,
  INK: 15,
  POPUP: 16,
  SIGNATURE: 101,
  COMMENT: 102
}, f = {
  RESIZE: 1,
  CREATE: 2,
  FREETEXT_SIZE: 11,
  FREETEXT_COLOR: 12,
  FREETEXT_OPACITY: 13,
  INK_COLOR: 21,
  INK_THICKNESS: 22,
  INK_OPACITY: 23,
  HIGHLIGHT_COLOR: 31,
  HIGHLIGHT_THICKNESS: 32,
  HIGHLIGHT_FREE: 33,
  HIGHLIGHT_SHOW_ALL: 34,
  DRAW_STEP: 41
}, eA = {
  PRINT: 4,
  MODIFY_CONTENTS: 8,
  COPY: 16,
  MODIFY_ANNOTATIONS: 32,
  FILL_INTERACTIVE_FORMS: 256,
  COPY_FOR_ACCESSIBILITY: 512,
  ASSEMBLE: 1024,
  PRINT_HIGH_QUALITY: 2048
}, yI = {
  FILL: 0,
  STROKE: 1,
  FILL_STROKE: 2,
  INVISIBLE: 3,
  FILL_STROKE_MASK: 3,
  ADD_TO_PATH_FLAG: 4
}, lg = {
  GRAYSCALE_1BPP: 1,
  RGB_24BPP: 2,
  RGBA_32BPP: 3
}, GI = {
  TEXT: 1,
  LINK: 2,
  FREETEXT: 3,
  LINE: 4,
  SQUARE: 5,
  CIRCLE: 6,
  POLYGON: 7,
  POLYLINE: 8,
  HIGHLIGHT: 9,
  UNDERLINE: 10,
  SQUIGGLY: 11,
  STRIKEOUT: 12,
  STAMP: 13,
  CARET: 14,
  INK: 15,
  POPUP: 16,
  FILEATTACHMENT: 17,
  SOUND: 18,
  MOVIE: 19,
  WIDGET: 20,
  SCREEN: 21,
  PRINTERMARK: 22,
  TRAPNET: 23,
  WATERMARK: 24,
  THREED: 25,
  REDACT: 26
}, Yg = {
  SOLID: 1,
  DASHED: 2,
  BEVELED: 3,
  INSET: 4,
  UNDERLINE: 5
}, Ng = {
  ERRORS: 0,
  WARNINGS: 1,
  INFOS: 5
}, sI = {
  dependency: 1,
  setLineWidth: 2,
  setLineCap: 3,
  setLineJoin: 4,
  setMiterLimit: 5,
  setDash: 6,
  setRenderingIntent: 7,
  setFlatness: 8,
  setGState: 9,
  save: 10,
  restore: 11,
  transform: 12,
  moveTo: 13,
  lineTo: 14,
  curveTo: 15,
  curveTo2: 16,
  curveTo3: 17,
  closePath: 18,
  rectangle: 19,
  stroke: 20,
  closeStroke: 21,
  fill: 22,
  eoFill: 23,
  fillStroke: 24,
  eoFillStroke: 25,
  closeFillStroke: 26,
  closeEOFillStroke: 27,
  endPath: 28,
  clip: 29,
  eoClip: 30,
  beginText: 31,
  endText: 32,
  setCharSpacing: 33,
  setWordSpacing: 34,
  setHScale: 35,
  setLeading: 36,
  setFont: 37,
  setTextRenderingMode: 38,
  setTextRise: 39,
  moveText: 40,
  setLeadingMoveText: 41,
  setTextMatrix: 42,
  nextLine: 43,
  showText: 44,
  showSpacedText: 45,
  nextLineShowText: 46,
  nextLineSetSpacingShowText: 47,
  setCharWidth: 48,
  setCharWidthAndBounds: 49,
  setStrokeColorSpace: 50,
  setFillColorSpace: 51,
  setStrokeColor: 52,
  setStrokeColorN: 53,
  setFillColor: 54,
  setFillColorN: 55,
  setStrokeGray: 56,
  setFillGray: 57,
  setStrokeRGBColor: 58,
  setFillRGBColor: 59,
  setStrokeCMYKColor: 60,
  setFillCMYKColor: 61,
  shadingFill: 62,
  beginInlineImage: 63,
  beginImageData: 64,
  endInlineImage: 65,
  paintXObject: 66,
  markPoint: 67,
  markPointProps: 68,
  beginMarkedContent: 69,
  beginMarkedContentProps: 70,
  endMarkedContent: 71,
  beginCompat: 72,
  endCompat: 73,
  paintFormXObjectBegin: 74,
  paintFormXObjectEnd: 75,
  beginGroup: 76,
  endGroup: 77,
  beginAnnotation: 80,
  endAnnotation: 81,
  paintImageMaskXObject: 83,
  paintImageMaskXObjectGroup: 84,
  paintImageXObject: 85,
  paintInlineImageXObject: 86,
  paintInlineImageXObjectGroup: 87,
  paintImageXObjectRepeat: 88,
  paintImageMaskXObjectRepeat: 89,
  paintSolidColorImageMask: 90,
  constructPath: 91,
  setStrokeTransparent: 92,
  setFillTransparent: 93,
  rawFillPath: 94
}, xg = {
  moveTo: 0,
  lineTo: 1,
  curveTo: 2,
  closePath: 3
}, HA = {
  NEED_PASSWORD: 1,
  INCORRECT_PASSWORD: 2
};
let cC = Ng.WARNINGS;
function sl(s) {
  Number.isInteger(s) && (cC = s);
}
function Gl() {
  return cC;
}
function sC(s) {
  cC >= Ng.INFOS && console.log(`Info: ${s}`);
}
function j(s) {
  cC >= Ng.WARNINGS && console.log(`Warning: ${s}`);
}
function II(s) {
  throw new Error(s);
}
function WI(s, I) {
  s || II(I);
}
function bl(s) {
  switch (s?.protocol) {
    case "http:":
    case "https:":
    case "ftp:":
    case "mailto:":
    case "tel:":
      return !0;
    default:
      return !1;
  }
}
function SC(s, I = null, g = null) {
  if (!s)
    return null;
  if (g && typeof s == "string" && (g.addDefaultProtocol && s.startsWith("www.") && s.match(/\./g)?.length >= 2 && (s = `http://${s}`), g.tryConvertEncoding))
    try {
      s = hl(s);
    } catch {
    }
  const C = I ? URL.parse(s, I) : URL.parse(s);
  return bl(C) ? C : null;
}
function pC(s, I, g = !1) {
  const C = URL.parse(s);
  return C ? (C.hash = I, C.href) : g && SC(s, "http://example.com") ? s.split("#", 1)[0] + `${I ? `#${I}` : ""}` : "";
}
function P(s, I, g, C = !1) {
  return Object.defineProperty(s, I, {
    value: g,
    enumerable: !C,
    configurable: !0,
    writable: !1
  }), g;
}
const Bg = (function() {
  function I(g, C) {
    this.message = g, this.name = C;
  }
  return I.prototype = new Error(), I.constructor = I, I;
})();
class gA extends Bg {
  constructor(I, g) {
    super(I, "PasswordException"), this.code = g;
  }
}
class wC extends Bg {
  constructor(I, g) {
    super(I, "UnknownErrorException"), this.details = g;
  }
}
class AC extends Bg {
  constructor(I) {
    super(I, "InvalidPDFException");
  }
}
class pg extends Bg {
  constructor(I, g, C) {
    super(I, "ResponseException"), this.status = g, this.missing = C;
  }
}
class ml extends Bg {
  constructor(I) {
    super(I, "FormatError");
  }
}
class gg extends Bg {
  constructor(I) {
    super(I, "AbortException");
  }
}
function uA(s) {
  (typeof s != "object" || s?.length === void 0) && II("Invalid argument for bytesToString");
  const I = s.length, g = 8192;
  if (I < g)
    return String.fromCharCode.apply(null, s);
  const C = [];
  for (let A = 0; A < I; A += g) {
    const l = Math.min(A + g, I), Z = s.subarray(A, l);
    C.push(String.fromCharCode.apply(null, Z));
  }
  return C.join("");
}
function kg(s) {
  typeof s != "string" && II("Invalid argument for stringToBytes");
  const I = s.length, g = new Uint8Array(I);
  for (let C = 0; C < I; ++C)
    g[C] = s.charCodeAt(C) & 255;
  return g;
}
function Bl(s) {
  return String.fromCharCode(s >> 24 & 255, s >> 16 & 255, s >> 8 & 255, s & 255);
}
function ol() {
  const s = new Uint8Array(4);
  return s[0] = 1, new Uint32Array(s.buffer, 0, 1)[0] === 1;
}
function Wl() {
  try {
    return new Function(""), !0;
  } catch {
    return !1;
  }
}
class XI {
  static get isLittleEndian() {
    return P(this, "isLittleEndian", ol());
  }
  static get isEvalSupported() {
    return P(this, "isEvalSupported", Wl());
  }
  static get isOffscreenCanvasSupported() {
    return P(this, "isOffscreenCanvasSupported", typeof OffscreenCanvas < "u");
  }
  static get isImageDecoderSupported() {
    return P(this, "isImageDecoderSupported", typeof ImageDecoder < "u");
  }
  static get platform() {
    const {
      platform: I,
      userAgent: g
    } = navigator;
    return P(this, "platform", {
      isAndroid: g.includes("Android"),
      isLinux: I.includes("Linux"),
      isMac: I.includes("Mac"),
      isWindows: I.includes("Win"),
      isFirefox: g.includes("Firefox")
    });
  }
  static get isCSSRoundSupported() {
    return P(this, "isCSSRoundSupported", globalThis.CSS?.supports?.("width: round(1.5px, 1px)"));
  }
}
const aC = Array.from(Array(256).keys(), (s) => s.toString(16).padStart(2, "0"));
class J {
  static makeHexColor(I, g, C) {
    return `#${aC[I]}${aC[g]}${aC[C]}`;
  }
  static domMatrixToTransform(I) {
    return [I.a, I.b, I.c, I.d, I.e, I.f];
  }
  static scaleMinMax(I, g) {
    let C;
    I[0] ? (I[0] < 0 && (C = g[0], g[0] = g[2], g[2] = C), g[0] *= I[0], g[2] *= I[0], I[3] < 0 && (C = g[1], g[1] = g[3], g[3] = C), g[1] *= I[3], g[3] *= I[3]) : (C = g[0], g[0] = g[1], g[1] = C, C = g[2], g[2] = g[3], g[3] = C, I[1] < 0 && (C = g[1], g[1] = g[3], g[3] = C), g[1] *= I[1], g[3] *= I[1], I[2] < 0 && (C = g[0], g[0] = g[2], g[2] = C), g[0] *= I[2], g[2] *= I[2]), g[0] += I[4], g[1] += I[5], g[2] += I[4], g[3] += I[5];
  }
  static transform(I, g) {
    return [I[0] * g[0] + I[2] * g[1], I[1] * g[0] + I[3] * g[1], I[0] * g[2] + I[2] * g[3], I[1] * g[2] + I[3] * g[3], I[0] * g[4] + I[2] * g[5] + I[4], I[1] * g[4] + I[3] * g[5] + I[5]];
  }
  static multiplyByDOMMatrix(I, g) {
    return [I[0] * g.a + I[2] * g.b, I[1] * g.a + I[3] * g.b, I[0] * g.c + I[2] * g.d, I[1] * g.c + I[3] * g.d, I[0] * g.e + I[2] * g.f + I[4], I[1] * g.e + I[3] * g.f + I[5]];
  }
  static applyTransform(I, g, C = 0) {
    const A = I[C], l = I[C + 1];
    I[C] = A * g[0] + l * g[2] + g[4], I[C + 1] = A * g[1] + l * g[3] + g[5];
  }
  static applyTransformToBezier(I, g, C = 0) {
    const A = g[0], l = g[1], Z = g[2], i = g[3], d = g[4], c = g[5];
    for (let G = 0; G < 6; G += 2) {
      const b = I[C + G], m = I[C + G + 1];
      I[C + G] = b * A + m * Z + d, I[C + G + 1] = b * l + m * i + c;
    }
  }
  static applyInverseTransform(I, g) {
    const C = I[0], A = I[1], l = g[0] * g[3] - g[1] * g[2];
    I[0] = (C * g[3] - A * g[2] + g[2] * g[5] - g[4] * g[3]) / l, I[1] = (-C * g[1] + A * g[0] + g[4] * g[1] - g[5] * g[0]) / l;
  }
  static axialAlignedBoundingBox(I, g, C) {
    const A = g[0], l = g[1], Z = g[2], i = g[3], d = g[4], c = g[5], G = I[0], b = I[1], m = I[2], B = I[3];
    let o = A * G + d, W = o, Y = A * m + d, h = Y, a = i * b + c, w = a, n = i * B + c, V = n;
    if (l !== 0 || Z !== 0) {
      const X = l * G, y = l * m, N = Z * b, t = Z * B;
      o += N, h += N, Y += t, W += t, a += X, V += X, n += y, w += y;
    }
    C[0] = Math.min(C[0], o, Y, W, h), C[1] = Math.min(C[1], a, n, w, V), C[2] = Math.max(C[2], o, Y, W, h), C[3] = Math.max(C[3], a, n, w, V);
  }
  static inverseTransform(I) {
    const g = I[0] * I[3] - I[1] * I[2];
    return [I[3] / g, -I[1] / g, -I[2] / g, I[0] / g, (I[2] * I[5] - I[4] * I[3]) / g, (I[4] * I[1] - I[5] * I[0]) / g];
  }
  static singularValueDecompose2dScale(I, g) {
    const C = I[0], A = I[1], l = I[2], Z = I[3], i = C ** 2 + A ** 2, d = C * l + A * Z, c = l ** 2 + Z ** 2, G = (i + c) / 2, b = Math.sqrt(G ** 2 - (i * c - d ** 2));
    g[0] = Math.sqrt(G + b || 1), g[1] = Math.sqrt(G - b || 1);
  }
  static normalizeRect(I) {
    const g = I.slice(0);
    return I[0] > I[2] && (g[0] = I[2], g[2] = I[0]), I[1] > I[3] && (g[1] = I[3], g[3] = I[1]), g;
  }
  static intersect(I, g) {
    const C = Math.max(Math.min(I[0], I[2]), Math.min(g[0], g[2])), A = Math.min(Math.max(I[0], I[2]), Math.max(g[0], g[2]));
    if (C > A)
      return null;
    const l = Math.max(Math.min(I[1], I[3]), Math.min(g[1], g[3])), Z = Math.min(Math.max(I[1], I[3]), Math.max(g[1], g[3]));
    return l > Z ? null : [C, l, A, Z];
  }
  static pointBoundingBox(I, g, C) {
    C[0] = Math.min(C[0], I), C[1] = Math.min(C[1], g), C[2] = Math.max(C[2], I), C[3] = Math.max(C[3], g);
  }
  static rectBoundingBox(I, g, C, A, l) {
    l[0] = Math.min(l[0], I, C), l[1] = Math.min(l[1], g, A), l[2] = Math.max(l[2], I, C), l[3] = Math.max(l[3], g, A);
  }
  static #I(I, g, C, A, l, Z, i, d, c, G) {
    if (c <= 0 || c >= 1)
      return;
    const b = 1 - c, m = c * c, B = m * c, o = b * (b * (b * I + 3 * c * g) + 3 * m * C) + B * A, W = b * (b * (b * l + 3 * c * Z) + 3 * m * i) + B * d;
    G[0] = Math.min(G[0], o), G[1] = Math.min(G[1], W), G[2] = Math.max(G[2], o), G[3] = Math.max(G[3], W);
  }
  static #g(I, g, C, A, l, Z, i, d, c, G, b, m) {
    if (Math.abs(c) < 1e-12) {
      Math.abs(G) >= 1e-12 && this.#I(I, g, C, A, l, Z, i, d, -b / G, m);
      return;
    }
    const B = G ** 2 - 4 * b * c;
    if (B < 0)
      return;
    const o = Math.sqrt(B), W = 2 * c;
    this.#I(I, g, C, A, l, Z, i, d, (-G + o) / W, m), this.#I(I, g, C, A, l, Z, i, d, (-G - o) / W, m);
  }
  static bezierBoundingBox(I, g, C, A, l, Z, i, d, c) {
    c[0] = Math.min(c[0], I, i), c[1] = Math.min(c[1], g, d), c[2] = Math.max(c[2], I, i), c[3] = Math.max(c[3], g, d), this.#g(I, C, l, i, g, A, Z, d, 3 * (-I + 3 * (C - l) + i), 6 * (I - 2 * C + l), 3 * (C - I), c), this.#g(I, C, l, i, g, A, Z, d, 3 * (-g + 3 * (A - Z) + d), 6 * (g - 2 * A + Z), 3 * (A - g), c);
  }
}
function hl(s) {
  return decodeURIComponent(escape(s));
}
let VC = null, CA = null;
function MA(s) {
  return VC || (VC = /([\u00a0\u00b5\u037e\u0eb3\u2000-\u200a\u202f\u2126\ufb00-\ufb04\ufb06\ufb20-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufba1\ufba4-\ufba9\ufbae-\ufbb1\ufbd3-\ufbdc\ufbde-\ufbe7\ufbea-\ufbf8\ufbfc-\ufbfd\ufc00-\ufc5d\ufc64-\ufcf1\ufcf5-\ufd3d\ufd88\ufdf4\ufdfa-\ufdfb\ufe71\ufe77\ufe79\ufe7b\ufe7d]+)|(\ufb05+)/gu, CA = /* @__PURE__ */ new Map([["ﬅ", "ſt"]])), s.replaceAll(VC, (I, g, C) => g ? g.normalize("NFKC") : CA.get(C));
}
function FC() {
  if (typeof crypto.randomUUID == "function")
    return crypto.randomUUID();
  const s = new Uint8Array(32);
  return crypto.getRandomValues(s), uA(s);
}
const JC = "pdfjs_internal_id_";
function Yl(s, I, g) {
  if (!Array.isArray(g) || g.length < 2)
    return !1;
  const [C, A, ...l] = g;
  if (!s(C) && !Number.isInteger(C) || !I(A))
    return !1;
  const Z = l.length;
  let i = !0;
  switch (A.name) {
    case "XYZ":
      if (Z < 2 || Z > 3)
        return !1;
      break;
    case "Fit":
    case "FitB":
      return Z === 0;
    case "FitH":
    case "FitBH":
    case "FitV":
    case "FitBV":
      if (Z > 1)
        return !1;
      break;
    case "FitR":
      if (Z !== 4)
        return !1;
      i = !1;
      break;
    default:
      return !1;
  }
  for (const d of l)
    if (!(typeof d == "number" || i && d === null))
      return !1;
  return !0;
}
function RI(s, I, g) {
  return Math.min(Math.max(s, I), g);
}
function KA(s) {
  return Uint8Array.prototype.toBase64 ? s.toBase64() : btoa(uA(s));
}
function wl(s) {
  return Uint8Array.fromBase64 ? Uint8Array.fromBase64(s) : kg(atob(s));
}
typeof Math.sumPrecise != "function" && (Math.sumPrecise = function(s) {
  return s.reduce((I, g) => I + g, 0);
});
typeof AbortSignal.any != "function" && (AbortSignal.any = function(s) {
  const I = new AbortController(), {
    signal: g
  } = I;
  for (const C of s)
    if (C.aborted)
      return I.abort(C.reason), g;
  for (const C of s)
    C.addEventListener("abort", () => {
      I.abort(C.reason);
    }, {
      signal: g
    });
  return g;
});
x(1701);
x(4972);
x(4628);
x(7642);
x(8004);
x(3853);
x(5876);
x(2475);
x(5024);
x(1698);
x(4603);
x(7566);
x(8721);
x(9314);
x(1148);
x(3579);
x(8335);
const fI = "http://www.w3.org/2000/svg";
class bg {
  static CSS = 96;
  static PDF = 72;
  static PDF_TO_CSS_UNITS = this.CSS / this.PDF;
}
async function tg(s, I = "text") {
  if (Mg(s, document.baseURI)) {
    const g = await fetch(s);
    if (!g.ok)
      throw new Error(g.statusText);
    switch (I) {
      case "arraybuffer":
        return g.arrayBuffer();
      case "blob":
        return g.blob();
      case "json":
        return g.json();
    }
    return g.text();
  }
  return new Promise((g, C) => {
    const A = new XMLHttpRequest();
    A.open("GET", s, !0), A.responseType = I, A.onreadystatechange = () => {
      if (A.readyState === XMLHttpRequest.DONE) {
        if (A.status === 200 || A.status === 0) {
          switch (I) {
            case "arraybuffer":
            case "blob":
            case "json":
              g(A.response);
              return;
          }
          g(A.responseText);
          return;
        }
        C(new Error(A.statusText));
      }
    }, A.send(null);
  });
}
class Lg {
  constructor({
    viewBox: I,
    userUnit: g,
    scale: C,
    rotation: A,
    offsetX: l = 0,
    offsetY: Z = 0,
    dontFlip: i = !1
  }) {
    this.viewBox = I, this.userUnit = g, this.scale = C, this.rotation = A, this.offsetX = l, this.offsetY = Z, C *= g;
    const d = (I[2] + I[0]) / 2, c = (I[3] + I[1]) / 2;
    let G, b, m, B;
    switch (A %= 360, A < 0 && (A += 360), A) {
      case 180:
        G = -1, b = 0, m = 0, B = 1;
        break;
      case 90:
        G = 0, b = 1, m = 1, B = 0;
        break;
      case 270:
        G = 0, b = -1, m = -1, B = 0;
        break;
      case 0:
        G = 1, b = 0, m = 0, B = -1;
        break;
      default:
        throw new Error("PageViewport: Invalid rotation, must be a multiple of 90 degrees.");
    }
    i && (m = -m, B = -B);
    let o, W, Y, h;
    G === 0 ? (o = Math.abs(c - I[1]) * C + l, W = Math.abs(d - I[0]) * C + Z, Y = (I[3] - I[1]) * C, h = (I[2] - I[0]) * C) : (o = Math.abs(d - I[0]) * C + l, W = Math.abs(c - I[1]) * C + Z, Y = (I[2] - I[0]) * C, h = (I[3] - I[1]) * C), this.transform = [G * C, b * C, m * C, B * C, o - G * C * d - m * C * c, W - b * C * d - B * C * c], this.width = Y, this.height = h;
  }
  get rawDims() {
    const I = this.viewBox;
    return P(this, "rawDims", {
      pageWidth: I[2] - I[0],
      pageHeight: I[3] - I[1],
      pageX: I[0],
      pageY: I[1]
    });
  }
  clone({
    scale: I = this.scale,
    rotation: g = this.rotation,
    offsetX: C = this.offsetX,
    offsetY: A = this.offsetY,
    dontFlip: l = !1
  } = {}) {
    return new Lg({
      viewBox: this.viewBox.slice(),
      userUnit: this.userUnit,
      scale: I,
      rotation: g,
      offsetX: C,
      offsetY: A,
      dontFlip: l
    });
  }
  convertToViewportPoint(I, g) {
    const C = [I, g];
    return J.applyTransform(C, this.transform), C;
  }
  convertToViewportRectangle(I) {
    const g = [I[0], I[1]];
    J.applyTransform(g, this.transform);
    const C = [I[2], I[3]];
    return J.applyTransform(C, this.transform), [g[0], g[1], C[0], C[1]];
  }
  convertToPdfPoint(I, g) {
    const C = [I, g];
    return J.applyInverseTransform(C, this.transform), C;
  }
}
class GC extends Bg {
  constructor(I, g = 0) {
    super(I, "RenderingCancelledException"), this.extraDelay = g;
  }
}
function Tg(s) {
  const I = s.length;
  let g = 0;
  for (; g < I && s[g].trim() === ""; )
    g++;
  return s.substring(g, g + 5).toLowerCase() === "data:";
}
function bC(s) {
  return typeof s == "string" && /\.pdf$/i.test(s);
}
function DA(s) {
  return [s] = s.split(/[#?]/, 1), s.substring(s.lastIndexOf("/") + 1);
}
function SA(s, I = "document.pdf") {
  if (typeof s != "string")
    return I;
  if (Tg(s))
    return j('getPdfFilenameFromUrl: ignore "data:"-URL for performance reasons.'), I;
  const C = ((i) => {
    try {
      return new URL(i);
    } catch {
      try {
        return new URL(decodeURIComponent(i));
      } catch {
        try {
          return new URL(i, "https://foo.bar");
        } catch {
          try {
            return new URL(decodeURIComponent(i), "https://foo.bar");
          } catch {
            return null;
          }
        }
      }
    }
  })(s);
  if (!C)
    return I;
  const A = (i) => {
    try {
      let d = decodeURIComponent(i);
      return d.includes("/") ? (d = d.split("/").at(-1), d.test(/^\.pdf$/i) ? d : i) : d;
    } catch {
      return i;
    }
  }, l = /\.pdf$/i, Z = C.pathname.split("/").at(-1);
  if (l.test(Z))
    return A(Z);
  if (C.searchParams.size > 0) {
    const i = Array.from(C.searchParams.values()).reverse();
    for (const c of i)
      if (l.test(c))
        return A(c);
    const d = Array.from(C.searchParams.keys()).reverse();
    for (const c of d)
      if (l.test(c))
        return A(c);
  }
  if (C.hash) {
    const d = /[^/?#=]+\.pdf\b(?!.*\.pdf\b)/i.exec(C.hash);
    if (d)
      return A(d[0]);
  }
  return I;
}
class AA {
  started = /* @__PURE__ */ Object.create(null);
  times = [];
  time(I) {
    I in this.started && j(`Timer is already running for ${I}`), this.started[I] = Date.now();
  }
  timeEnd(I) {
    I in this.started || j(`Timer has not been started for ${I}`), this.times.push({
      name: I,
      start: this.started[I],
      end: Date.now()
    }), delete this.started[I];
  }
  toString() {
    const I = [];
    let g = 0;
    for (const {
      name: C
    } of this.times)
      g = Math.max(C.length, g);
    for (const {
      name: C,
      start: A,
      end: l
    } of this.times)
      I.push(`${C.padEnd(g)} ${l - A}ms
`);
    return I.join("");
  }
}
function Mg(s, I) {
  const g = I ? URL.parse(s, I) : URL.parse(s);
  return g?.protocol === "http:" || g?.protocol === "https:";
}
function JI(s) {
  s.preventDefault();
}
function mI(s) {
  s.preventDefault(), s.stopPropagation();
}
function al(s) {
  console.log("Deprecated API usage: " + s);
}
class lC {
  static #I;
  static toDateObject(I) {
    if (I instanceof Date)
      return I;
    if (!I || typeof I != "string")
      return null;
    this.#I ||= new RegExp("^D:(\\d{4})(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?([Z|+|-])?(\\d{2})?'?(\\d{2})?'?");
    const g = this.#I.exec(I);
    if (!g)
      return null;
    const C = parseInt(g[1], 10);
    let A = parseInt(g[2], 10);
    A = A >= 1 && A <= 12 ? A - 1 : 0;
    let l = parseInt(g[3], 10);
    l = l >= 1 && l <= 31 ? l : 1;
    let Z = parseInt(g[4], 10);
    Z = Z >= 0 && Z <= 23 ? Z : 0;
    let i = parseInt(g[5], 10);
    i = i >= 0 && i <= 59 ? i : 0;
    let d = parseInt(g[6], 10);
    d = d >= 0 && d <= 59 ? d : 0;
    const c = g[7] || "Z";
    let G = parseInt(g[8], 10);
    G = G >= 0 && G <= 23 ? G : 0;
    let b = parseInt(g[9], 10) || 0;
    return b = b >= 0 && b <= 59 ? b : 0, c === "-" ? (Z += G, i += b) : c === "+" && (Z -= G, i -= b), new Date(Date.UTC(C, A, l, Z, i, d));
  }
}
function pA(s, {
  scale: I = 1,
  rotation: g = 0
}) {
  const {
    width: C,
    height: A
  } = s.attributes.style, l = [0, 0, parseInt(C), parseInt(A)];
  return new Lg({
    viewBox: l,
    userUnit: 1,
    scale: I,
    rotation: g
  });
}
function Qg(s) {
  if (s.startsWith("#")) {
    const I = parseInt(s.slice(1), 16);
    return [(I & 16711680) >> 16, (I & 65280) >> 8, I & 255];
  }
  return s.startsWith("rgb(") ? s.slice(4, -1).split(",").map((I) => parseInt(I)) : s.startsWith("rgba(") ? s.slice(5, -1).split(",").map((I) => parseInt(I)).slice(0, 3) : (j(`Not a valid color format: "${s}"`), [0, 0, 0]);
}
function Vl(s) {
  const I = document.createElement("span");
  I.style.visibility = "hidden", I.style.colorScheme = "only light", document.body.append(I);
  for (const g of s.keys()) {
    I.style.color = g;
    const C = window.getComputedStyle(I).color;
    s.set(g, Qg(C));
  }
  I.remove();
}
function cI(s) {
  const {
    a: I,
    b: g,
    c: C,
    d: A,
    e: l,
    f: Z
  } = s.getTransform();
  return [I, g, C, A, l, Z];
}
function UI(s) {
  const {
    a: I,
    b: g,
    c: C,
    d: A,
    e: l,
    f: Z
  } = s.getTransform().invertSelf();
  return [I, g, C, A, l, Z];
}
function Zg(s, I, g = !1, C = !0) {
  if (I instanceof Lg) {
    const {
      pageWidth: A,
      pageHeight: l
    } = I.rawDims, {
      style: Z
    } = s, i = XI.isCSSRoundSupported, d = `var(--total-scale-factor) * ${A}px`, c = `var(--total-scale-factor) * ${l}px`, G = i ? `round(down, ${d}, var(--scale-round-x))` : `calc(${d})`, b = i ? `round(down, ${c}, var(--scale-round-y))` : `calc(${c})`;
    !g || I.rotation % 180 === 0 ? (Z.width = G, Z.height = b) : (Z.width = b, Z.height = G);
  }
  C && s.setAttribute("data-main-rotation", I.rotation);
}
class rI {
  constructor() {
    const {
      pixelRatio: I
    } = rI;
    this.sx = I, this.sy = I;
  }
  get scaled() {
    return this.sx !== 1 || this.sy !== 1;
  }
  get symmetric() {
    return this.sx === this.sy;
  }
  limitCanvas(I, g, C, A, l = -1) {
    let Z = 1 / 0, i = 1 / 0, d = 1 / 0;
    C = rI.capPixels(C, l), C > 0 && (Z = Math.sqrt(C / (I * g))), A !== -1 && (i = A / I, d = A / g);
    const c = Math.min(Z, i, d);
    return this.sx > c || this.sy > c ? (this.sx = c, this.sy = c, !0) : !1;
  }
  static get pixelRatio() {
    return globalThis.devicePixelRatio || 1;
  }
  static capPixels(I, g) {
    if (g >= 0) {
      const C = Math.ceil(window.screen.availWidth * window.screen.availHeight * this.pixelRatio ** 2 * (1 + g / 100));
      return I > 0 ? Math.min(I, C) : C;
    }
    return I;
  }
}
const ZC = ["image/apng", "image/avif", "image/bmp", "image/gif", "image/jpeg", "image/png", "image/svg+xml", "image/webp", "image/x-icon"];
class Sg {
  #I = null;
  #g = null;
  #C;
  #A = null;
  #Z = null;
  #l = null;
  #i = null;
  static #d = null;
  constructor(I) {
    this.#C = I, Sg.#d ||= Object.freeze({
      freetext: "pdfjs-editor-remove-freetext-button",
      highlight: "pdfjs-editor-remove-highlight-button",
      ink: "pdfjs-editor-remove-ink-button",
      stamp: "pdfjs-editor-remove-stamp-button",
      signature: "pdfjs-editor-remove-signature-button"
    });
  }
  render() {
    const I = this.#I = document.createElement("div");
    I.classList.add("editToolbar", "hidden"), I.setAttribute("role", "toolbar");
    const g = this.#C._uiManager._signal;
    g instanceof AbortSignal && !g.aborted && (I.addEventListener("contextmenu", JI, {
      signal: g
    }), I.addEventListener("pointerdown", Sg.#c, {
      signal: g
    }));
    const C = this.#A = document.createElement("div");
    C.className = "buttons", I.append(C);
    const A = this.#C.toolbarPosition;
    if (A) {
      const {
        style: l
      } = I, Z = this.#C._uiManager.direction === "ltr" ? 1 - A[0] : A[0];
      l.insetInlineEnd = `${100 * Z}%`, l.top = `calc(${100 * A[1]}% + var(--editor-toolbar-vert-offset))`;
    }
    return I;
  }
  get div() {
    return this.#I;
  }
  static #c(I) {
    I.stopPropagation();
  }
  #s(I) {
    this.#C._focusEventsAllowed = !1, mI(I);
  }
  #m(I) {
    this.#C._focusEventsAllowed = !0, mI(I);
  }
  #G(I) {
    const g = this.#C._uiManager._signal;
    return !(g instanceof AbortSignal) || g.aborted ? !1 : (I.addEventListener("focusin", this.#s.bind(this), {
      capture: !0,
      signal: g
    }), I.addEventListener("focusout", this.#m.bind(this), {
      capture: !0,
      signal: g
    }), I.addEventListener("contextmenu", JI, {
      signal: g
    }), !0);
  }
  hide() {
    this.#I.classList.add("hidden"), this.#g?.hideDropdown();
  }
  show() {
    this.#I.classList.remove("hidden"), this.#Z?.shown(), this.#l?.shown();
  }
  addDeleteButton() {
    const {
      editorType: I,
      _uiManager: g
    } = this.#C, C = document.createElement("button");
    C.classList.add("basic", "deleteButton"), C.tabIndex = 0, C.setAttribute("data-l10n-id", Sg.#d[I]), this.#G(C) && C.addEventListener("click", (A) => {
      g.delete();
    }, {
      signal: g._signal
    }), this.#A.append(C);
  }
  get #B() {
    const I = document.createElement("div");
    return I.className = "divider", I;
  }
  async addAltText(I) {
    const g = await I.render();
    this.#G(g), this.#A.append(g, this.#B), this.#Z = I;
  }
  addComment(I) {
    if (this.#l)
      return;
    const g = I.render();
    g && (this.#G(g), this.#A.append(g, this.#B), this.#l = I, I.toolbar = this);
  }
  addColorPicker(I) {
    if (this.#g)
      return;
    this.#g = I;
    const g = I.renderButton();
    this.#G(g), this.#A.append(g, this.#B);
  }
  async addEditSignatureButton(I) {
    const g = this.#i = await I.renderEditButton(this.#C);
    this.#G(g), this.#A.append(g, this.#B);
  }
  async addButton(I, g) {
    switch (I) {
      case "colorPicker":
        this.addColorPicker(g);
        break;
      case "altText":
        await this.addAltText(g);
        break;
      case "editSignature":
        await this.addEditSignatureButton(g);
        break;
      case "delete":
        this.addDeleteButton();
        break;
      case "comment":
        this.addComment(g);
        break;
    }
  }
  updateEditSignatureButton(I) {
    this.#i && (this.#i.title = I);
  }
  remove() {
    this.#I.remove(), this.#g?.destroy(), this.#g = null;
  }
}
class Xl {
  #I = null;
  #g = null;
  #C;
  constructor(I) {
    this.#C = I;
  }
  #A() {
    const I = this.#g = document.createElement("div");
    I.className = "editToolbar", I.setAttribute("role", "toolbar");
    const g = this.#C._signal;
    g instanceof AbortSignal && !g.aborted && I.addEventListener("contextmenu", JI, {
      signal: g
    });
    const C = this.#I = document.createElement("div");
    return C.className = "buttons", I.append(C), this.#C.hasCommentManager() && this.#l("commentButton", "pdfjs-comment-floating-button", "pdfjs-comment-floating-button-label", () => {
      this.#C.commentSelection("floating_button");
    }), this.#l("highlightButton", "pdfjs-highlight-floating-button1", "pdfjs-highlight-floating-button-label", () => {
      this.#C.highlightSelection("floating_button");
    }), I;
  }
  #Z(I, g) {
    let C = 0, A = 0;
    for (const l of I) {
      const Z = l.y + l.height;
      if (Z < C)
        continue;
      const i = l.x + (g ? l.width : 0);
      if (Z > C) {
        A = i, C = Z;
        continue;
      }
      g ? i > A && (A = i) : i < A && (A = i);
    }
    return [g ? 1 - A : A, C];
  }
  show(I, g, C) {
    const [A, l] = this.#Z(g, C), {
      style: Z
    } = this.#g ||= this.#A();
    I.append(this.#g), Z.insetInlineEnd = `${100 * A}%`, Z.top = `calc(${100 * l}% + var(--editor-toolbar-vert-offset))`;
  }
  hide() {
    this.#g.remove();
  }
  #l(I, g, C, A) {
    const l = document.createElement("button");
    l.classList.add("basic", I), l.tabIndex = 0, l.setAttribute("data-l10n-id", g);
    const Z = document.createElement("span");
    l.append(Z), Z.className = "visuallyHidden", Z.setAttribute("data-l10n-id", C);
    const i = this.#C._signal;
    i instanceof AbortSignal && !i.aborted && (l.addEventListener("contextmenu", JI, {
      signal: i
    }), l.addEventListener("click", A, {
      signal: i
    })), this.#I.append(l);
  }
}
function FA(s, I, g) {
  for (const C of g)
    I.addEventListener(C, s[C].bind(s));
}
class nl {
  #I = 0;
  get id() {
    return `${RA}${this.#I++}`;
  }
}
class zC {
  #I = FC();
  #g = 0;
  #C = null;
  static get _isSVGFittingCanvas() {
    const I = 'data:image/svg+xml;charset=UTF-8,<svg viewBox="0 0 1 1" width="1" height="1" xmlns="http://www.w3.org/2000/svg"><rect width="1" height="1" style="fill:red;"/></svg>', C = new OffscreenCanvas(1, 3).getContext("2d", {
      willReadFrequently: !0
    }), A = new Image();
    A.src = I;
    const l = A.decode().then(() => (C.drawImage(A, 0, 0, 1, 1, 0, 0, 1, 3), new Uint32Array(C.getImageData(0, 0, 1, 1).data.buffer)[0] === 0));
    return P(this, "_isSVGFittingCanvas", l);
  }
  async #A(I, g) {
    this.#C ||= /* @__PURE__ */ new Map();
    let C = this.#C.get(I);
    if (C === null)
      return null;
    if (C?.bitmap)
      return C.refCounter += 1, C;
    try {
      C ||= {
        bitmap: null,
        id: `image_${this.#I}_${this.#g++}`,
        refCounter: 0,
        isSvg: !1
      };
      let A;
      if (typeof g == "string" ? (C.url = g, A = await tg(g, "blob")) : g instanceof File ? A = C.file = g : g instanceof Blob && (A = g), A.type === "image/svg+xml") {
        const l = zC._isSVGFittingCanvas, Z = new FileReader(), i = new Image(), d = new Promise((c, G) => {
          i.onload = () => {
            C.bitmap = i, C.isSvg = !0, c();
          }, Z.onload = async () => {
            const b = C.svgUrl = Z.result;
            i.src = await l ? `${b}#svgView(preserveAspectRatio(none))` : b;
          }, i.onerror = Z.onerror = G;
        });
        Z.readAsDataURL(A), await d;
      } else
        C.bitmap = await createImageBitmap(A);
      C.refCounter = 1;
    } catch (A) {
      j(A), C = null;
    }
    return this.#C.set(I, C), C && this.#C.set(C.id, C), C;
  }
  async getFromFile(I) {
    const {
      lastModified: g,
      name: C,
      size: A,
      type: l
    } = I;
    return this.#A(`${g}_${C}_${A}_${l}`, I);
  }
  async getFromUrl(I) {
    return this.#A(I, I);
  }
  async getFromBlob(I, g) {
    const C = await g;
    return this.#A(I, C);
  }
  async getFromId(I) {
    this.#C ||= /* @__PURE__ */ new Map();
    const g = this.#C.get(I);
    if (!g)
      return null;
    if (g.bitmap)
      return g.refCounter += 1, g;
    if (g.file)
      return this.getFromFile(g.file);
    if (g.blobPromise) {
      const {
        blobPromise: C
      } = g;
      return delete g.blobPromise, this.getFromBlob(g.id, C);
    }
    return this.getFromUrl(g.url);
  }
  getFromCanvas(I, g) {
    this.#C ||= /* @__PURE__ */ new Map();
    let C = this.#C.get(I);
    if (C?.bitmap)
      return C.refCounter += 1, C;
    const A = new OffscreenCanvas(g.width, g.height);
    return A.getContext("2d").drawImage(g, 0, 0), C = {
      bitmap: A.transferToImageBitmap(),
      id: `image_${this.#I}_${this.#g++}`,
      refCounter: 1,
      isSvg: !1
    }, this.#C.set(I, C), this.#C.set(C.id, C), C;
  }
  getSvgUrl(I) {
    const g = this.#C.get(I);
    return g?.isSvg ? g.svgUrl : null;
  }
  deleteId(I) {
    this.#C ||= /* @__PURE__ */ new Map();
    const g = this.#C.get(I);
    if (!g || (g.refCounter -= 1, g.refCounter !== 0))
      return;
    const {
      bitmap: C
    } = g;
    if (!g.url && !g.file) {
      const A = new OffscreenCanvas(C.width, C.height);
      A.getContext("bitmaprenderer").transferFromImageBitmap(C), g.blobPromise = A.convertToBlob();
    }
    C.close?.(), g.bitmap = null;
  }
  isValidId(I) {
    return I.startsWith(`image_${this.#I}_`);
  }
}
class yl {
  #I = [];
  #g = !1;
  #C;
  #A = -1;
  constructor(I = 128) {
    this.#C = I;
  }
  add({
    cmd: I,
    undo: g,
    post: C,
    mustExec: A,
    type: l = NaN,
    overwriteIfSameType: Z = !1,
    keepUndo: i = !1
  }) {
    if (A && I(), this.#g)
      return;
    const d = {
      cmd: I,
      undo: g,
      post: C,
      type: l
    };
    if (this.#A === -1) {
      this.#I.length > 0 && (this.#I.length = 0), this.#A = 0, this.#I.push(d);
      return;
    }
    if (Z && this.#I[this.#A].type === l) {
      i && (d.undo = this.#I[this.#A].undo), this.#I[this.#A] = d;
      return;
    }
    const c = this.#A + 1;
    c === this.#C ? this.#I.splice(0, 1) : (this.#A = c, c < this.#I.length && this.#I.splice(c)), this.#I.push(d);
  }
  undo() {
    if (this.#A === -1)
      return;
    this.#g = !0;
    const {
      undo: I,
      post: g
    } = this.#I[this.#A];
    I(), g?.(), this.#g = !1, this.#A -= 1;
  }
  redo() {
    if (this.#A < this.#I.length - 1) {
      this.#A += 1, this.#g = !0;
      const {
        cmd: I,
        post: g
      } = this.#I[this.#A];
      I(), g?.(), this.#g = !1;
    }
  }
  hasSomethingToUndo() {
    return this.#A !== -1;
  }
  hasSomethingToRedo() {
    return this.#A < this.#I.length - 1;
  }
  cleanType(I) {
    if (this.#A !== -1) {
      for (let g = this.#A; g >= 0; g--)
        if (this.#I[g].type !== I) {
          this.#I.splice(g + 1, this.#A - g), this.#A = g;
          return;
        }
      this.#I.length = 0, this.#A = -1;
    }
  }
  destroy() {
    this.#I = null;
  }
}
class rg {
  constructor(I) {
    this.buffer = [], this.callbacks = /* @__PURE__ */ new Map(), this.allKeys = /* @__PURE__ */ new Set();
    const {
      isMac: g
    } = XI.platform;
    for (const [C, A, l = {}] of I)
      for (const Z of C) {
        const i = Z.startsWith("mac+");
        g && i ? (this.callbacks.set(Z.slice(4), {
          callback: A,
          options: l
        }), this.allKeys.add(Z.split("+").at(-1))) : !g && !i && (this.callbacks.set(Z, {
          callback: A,
          options: l
        }), this.allKeys.add(Z.split("+").at(-1)));
      }
  }
  #I(I) {
    I.altKey && this.buffer.push("alt"), I.ctrlKey && this.buffer.push("ctrl"), I.metaKey && this.buffer.push("meta"), I.shiftKey && this.buffer.push("shift"), this.buffer.push(I.key);
    const g = this.buffer.join("+");
    return this.buffer.length = 0, g;
  }
  exec(I, g) {
    if (!this.allKeys.has(g.key))
      return;
    const C = this.callbacks.get(this.#I(g));
    if (!C)
      return;
    const {
      callback: A,
      options: {
        bubbles: l = !1,
        args: Z = [],
        checker: i = null
      }
    } = C;
    i && !i(I, g) || (A.bind(I, ...Z, g)(), l || mI(g));
  }
}
class kC {
  static _colorsMapping = /* @__PURE__ */ new Map([["CanvasText", [0, 0, 0]], ["Canvas", [255, 255, 255]]]);
  get _colors() {
    const I = /* @__PURE__ */ new Map([["CanvasText", null], ["Canvas", null]]);
    return Vl(I), P(this, "_colors", I);
  }
  convert(I) {
    const g = Qg(I);
    if (!window.matchMedia("(forced-colors: active)").matches)
      return g;
    for (const [C, A] of this._colors)
      if (A.every((l, Z) => l === g[Z]))
        return kC._colorsMapping.get(C);
    return g;
  }
  getHexCode(I) {
    const g = this._colors.get(I);
    return g ? J.makeHexColor(...g) : I;
  }
}
class Cg {
  #I = new AbortController();
  #g = null;
  #C = null;
  #A = /* @__PURE__ */ new Map();
  #Z = /* @__PURE__ */ new Map();
  #l = null;
  #i = null;
  #d = null;
  #c = new yl();
  #s = null;
  #m = null;
  #G = null;
  #B = 0;
  #W = /* @__PURE__ */ new Set();
  #o = null;
  #b = null;
  #h = /* @__PURE__ */ new Set();
  _editorUndoBar = null;
  #a = !1;
  #Y = !1;
  #X = !1;
  #n = null;
  #w = null;
  #y = null;
  #H = null;
  #R = !1;
  #N = null;
  #D = new nl();
  #e = !1;
  #u = !1;
  #F = !1;
  #S = null;
  #p = null;
  #J = null;
  #K = null;
  #L = null;
  #t = O.NONE;
  #V = /* @__PURE__ */ new Set();
  #T = null;
  #Q = null;
  #j = null;
  #E = null;
  #v = null;
  #x = {
    isEditing: !1,
    isEmpty: !0,
    hasSomethingToUndo: !1,
    hasSomethingToRedo: !1,
    hasSelectedEditor: !1,
    hasSelectedText: !1
  };
  #z = [0, 0];
  #O = null;
  #U = null;
  #_ = null;
  #$ = null;
  #k = null;
  static TRANSLATE_SMALL = 1;
  static TRANSLATE_BIG = 10;
  static get _keyboardManager() {
    const I = Cg.prototype, g = (Z) => Z.#U.contains(document.activeElement) && document.activeElement.tagName !== "BUTTON" && Z.hasSomethingToControl(), C = (Z, {
      target: i
    }) => {
      if (i instanceof HTMLInputElement) {
        const {
          type: d
        } = i;
        return d !== "text" && d !== "number";
      }
      return !0;
    }, A = this.TRANSLATE_SMALL, l = this.TRANSLATE_BIG;
    return P(this, "_keyboardManager", new rg([[["ctrl+a", "mac+meta+a"], I.selectAll, {
      checker: C
    }], [["ctrl+z", "mac+meta+z"], I.undo, {
      checker: C
    }], [["ctrl+y", "ctrl+shift+z", "mac+meta+shift+z", "ctrl+shift+Z", "mac+meta+shift+Z"], I.redo, {
      checker: C
    }], [["Backspace", "alt+Backspace", "ctrl+Backspace", "shift+Backspace", "mac+Backspace", "mac+alt+Backspace", "mac+ctrl+Backspace", "Delete", "ctrl+Delete", "shift+Delete", "mac+Delete"], I.delete, {
      checker: C
    }], [["Enter", "mac+Enter"], I.addNewEditorFromKeyboard, {
      checker: (Z, {
        target: i
      }) => !(i instanceof HTMLButtonElement) && Z.#U.contains(i) && !Z.isEnterHandled
    }], [[" ", "mac+ "], I.addNewEditorFromKeyboard, {
      checker: (Z, {
        target: i
      }) => !(i instanceof HTMLButtonElement) && Z.#U.contains(document.activeElement)
    }], [["Escape", "mac+Escape"], I.unselectAll], [["ArrowLeft", "mac+ArrowLeft"], I.translateSelectedEditors, {
      args: [-A, 0],
      checker: g
    }], [["ctrl+ArrowLeft", "mac+shift+ArrowLeft"], I.translateSelectedEditors, {
      args: [-l, 0],
      checker: g
    }], [["ArrowRight", "mac+ArrowRight"], I.translateSelectedEditors, {
      args: [A, 0],
      checker: g
    }], [["ctrl+ArrowRight", "mac+shift+ArrowRight"], I.translateSelectedEditors, {
      args: [l, 0],
      checker: g
    }], [["ArrowUp", "mac+ArrowUp"], I.translateSelectedEditors, {
      args: [0, -A],
      checker: g
    }], [["ctrl+ArrowUp", "mac+shift+ArrowUp"], I.translateSelectedEditors, {
      args: [0, -l],
      checker: g
    }], [["ArrowDown", "mac+ArrowDown"], I.translateSelectedEditors, {
      args: [0, A],
      checker: g
    }], [["ctrl+ArrowDown", "mac+shift+ArrowDown"], I.translateSelectedEditors, {
      args: [0, l],
      checker: g
    }]]));
  }
  constructor(I, g, C, A, l, Z, i, d, c, G, b, m, B, o, W, Y) {
    const h = this._signal = this.#I.signal;
    this.#U = I, this.#_ = g, this.#$ = C, this.#l = A, this.#s = l, this.#Q = Z, this.#v = d, this._eventBus = i, i._on("editingaction", this.onEditingAction.bind(this), {
      signal: h
    }), i._on("pagechanging", this.onPageChanging.bind(this), {
      signal: h
    }), i._on("scalechanging", this.onScaleChanging.bind(this), {
      signal: h
    }), i._on("rotationchanging", this.onRotationChanging.bind(this), {
      signal: h
    }), i._on("setpreference", this.onSetPreference.bind(this), {
      signal: h
    }), i._on("switchannotationeditorparams", (a) => this.updateParams(a.type, a.value), {
      signal: h
    }), window.addEventListener("pointerdown", () => {
      this.#u = !0;
    }, {
      capture: !0,
      signal: h
    }), window.addEventListener("pointerup", () => {
      this.#u = !1;
    }, {
      capture: !0,
      signal: h
    }), this.#cI(), this.#mI(), this.#gI(), this.#i = d.annotationStorage, this.#n = d.filterFactory, this.#j = c, this.#H = G || null, this.#a = b, this.#Y = m, this.#X = B, this.#L = o || null, this.viewParameters = {
      realScale: bg.PDF_TO_CSS_UNITS,
      rotation: 0
    }, this.isShiftKeyDown = !1, this._editorUndoBar = W || null, this._supportsPinchToZoom = Y !== !1;
  }
  destroy() {
    this.#k?.resolve(), this.#k = null, this.#I?.abort(), this.#I = null, this._signal = null;
    for (const I of this.#Z.values())
      I.destroy();
    this.#Z.clear(), this.#A.clear(), this.#h.clear(), this.#K?.clear(), this.#g = null, this.#V.clear(), this.#c.destroy(), this.#l?.destroy(), this.#s?.destroy(), this.#Q?.destroy(), this.#N?.hide(), this.#N = null, this.#J?.destroy(), this.#J = null, this.#C = null, this.#w && (clearTimeout(this.#w), this.#w = null), this.#O && (clearTimeout(this.#O), this.#O = null), this._editorUndoBar?.destroy(), this.#v = null;
  }
  combinedSignal(I) {
    return AbortSignal.any([this._signal, I.signal]);
  }
  get mlManager() {
    return this.#L;
  }
  get useNewAltTextFlow() {
    return this.#Y;
  }
  get useNewAltTextWhenAddingImage() {
    return this.#X;
  }
  get hcmFilter() {
    return P(this, "hcmFilter", this.#j ? this.#n.addHCMFilter(this.#j.foreground, this.#j.background) : "none");
  }
  get direction() {
    return P(this, "direction", getComputedStyle(this.#U).direction);
  }
  get _highlightColors() {
    return P(this, "_highlightColors", this.#H ? new Map(this.#H.split(",").map((I) => (I = I.split("=").map((g) => g.trim()), I[1] = I[1].toUpperCase(), I))) : null);
  }
  get highlightColors() {
    const {
      _highlightColors: I
    } = this;
    if (!I)
      return P(this, "highlightColors", null);
    const g = /* @__PURE__ */ new Map(), C = !!this.#j;
    for (const [A, l] of I) {
      const Z = A.endsWith("_HCM");
      if (C && Z) {
        g.set(A.replace("_HCM", ""), l);
        continue;
      }
      !C && !Z && g.set(A, l);
    }
    return P(this, "highlightColors", g);
  }
  get highlightColorNames() {
    return P(this, "highlightColorNames", this.highlightColors ? new Map(Array.from(this.highlightColors, (I) => I.reverse())) : null);
  }
  getNonHCMColor(I) {
    if (!this._highlightColors)
      return I;
    const g = this.highlightColorNames.get(I);
    return this._highlightColors.get(g) || I;
  }
  getNonHCMColorName(I) {
    return this.highlightColorNames.get(I) || I;
  }
  setCurrentDrawingSession(I) {
    I ? (this.unselectAll(), this.disableUserSelect(!0)) : this.disableUserSelect(!1), this.#G = I;
  }
  setMainHighlightColorPicker(I) {
    this.#J = I;
  }
  editAltText(I, g = !1) {
    this.#l?.editAltText(this, I, g);
  }
  hasCommentManager() {
    return !!this.#s;
  }
  editComment(I, g) {
    this.#s?.open(this, I, g);
  }
  getSignature(I) {
    this.#Q?.getSignature({
      uiManager: this,
      editor: I
    });
  }
  get signatureManager() {
    return this.#Q;
  }
  switchToMode(I, g) {
    this._eventBus.on("annotationeditormodechanged", g, {
      once: !0,
      signal: this._signal
    }), this._eventBus.dispatch("showannotationeditorui", {
      source: this,
      mode: I
    });
  }
  setPreference(I, g) {
    this._eventBus.dispatch("setpreference", {
      source: this,
      name: I,
      value: g
    });
  }
  onSetPreference({
    name: I,
    value: g
  }) {
    switch (I) {
      case "enableNewAltTextWhenAddingImage":
        this.#X = g;
        break;
    }
  }
  onPageChanging({
    pageNumber: I
  }) {
    this.#B = I - 1;
  }
  focusMainContainer() {
    this.#U.focus();
  }
  findParent(I, g) {
    for (const C of this.#Z.values()) {
      const {
        x: A,
        y: l,
        width: Z,
        height: i
      } = C.div.getBoundingClientRect();
      if (I >= A && I <= A + Z && g >= l && g <= l + i)
        return C;
    }
    return null;
  }
  disableUserSelect(I = !1) {
    this.#_.classList.toggle("noUserSelect", I);
  }
  addShouldRescale(I) {
    this.#h.add(I);
  }
  removeShouldRescale(I) {
    this.#h.delete(I);
  }
  onScaleChanging({
    scale: I
  }) {
    this.commitOrRemove(), this.viewParameters.realScale = I * bg.PDF_TO_CSS_UNITS;
    for (const g of this.#h)
      g.onScaleChanging();
    this.#G?.onScaleChanging();
  }
  onRotationChanging({
    pagesRotation: I
  }) {
    this.commitOrRemove(), this.viewParameters.rotation = I;
  }
  #q({
    anchorNode: I
  }) {
    return I.nodeType === Node.TEXT_NODE ? I.parentElement : I;
  }
  #II(I) {
    const {
      currentLayer: g
    } = this;
    if (g.hasTextLayer(I))
      return g;
    for (const C of this.#Z.values())
      if (C.hasTextLayer(I))
        return C;
    return null;
  }
  highlightSelection(I = "", g = !1) {
    const C = document.getSelection();
    if (!C || C.isCollapsed)
      return;
    const {
      anchorNode: A,
      anchorOffset: l,
      focusNode: Z,
      focusOffset: i
    } = C, d = C.toString(), G = this.#q(C).closest(".textLayer"), b = this.getSelectionBoxes(G);
    if (!b)
      return;
    C.empty();
    const m = this.#II(G), B = this.#t === O.NONE, o = () => {
      const W = m?.createAndAddNewEditor({
        x: 0,
        y: 0
      }, !1, {
        methodOfCreation: I,
        boxes: b,
        anchorNode: A,
        anchorOffset: l,
        focusNode: Z,
        focusOffset: i,
        text: d
      });
      B && this.showAllEditors("highlight", !0, !0), g && W?.editComment();
    };
    if (B) {
      this.switchToMode(O.HIGHLIGHT, o);
      return;
    }
    o();
  }
  commentSelection(I = "") {
    this.highlightSelection(I, !0);
  }
  #iI() {
    const I = document.getSelection();
    if (!I || I.isCollapsed)
      return;
    const C = this.#q(I).closest(".textLayer"), A = this.getSelectionBoxes(C);
    A && (this.#N ||= new Xl(this), this.#N.show(C, A, this.direction === "ltr"));
  }
  addToAnnotationStorage(I) {
    !I.isEmpty() && this.#i && !this.#i.has(I.id) && this.#i.setValue(I.id, I);
  }
  a11yAlert(I, g = null) {
    const C = this.#$;
    C && (C.setAttribute("data-l10n-id", I), g ? C.setAttribute("data-l10n-args", JSON.stringify(g)) : C.removeAttribute("data-l10n-args"));
  }
  #dI() {
    const I = document.getSelection();
    if (!I || I.isCollapsed) {
      this.#T && (this.#N?.hide(), this.#T = null, this.#M({
        hasSelectedText: !1
      }));
      return;
    }
    const {
      anchorNode: g
    } = I;
    if (g === this.#T)
      return;
    const A = this.#q(I).closest(".textLayer");
    if (!A) {
      this.#T && (this.#N?.hide(), this.#T = null, this.#M({
        hasSelectedText: !1
      }));
      return;
    }
    if (this.#N?.hide(), this.#T = g, this.#M({
      hasSelectedText: !0
    }), !(this.#t !== O.HIGHLIGHT && this.#t !== O.NONE) && (this.#t === O.HIGHLIGHT && this.showAllEditors("highlight", !0, !0), this.#R = this.isShiftKeyDown, !this.isShiftKeyDown)) {
      const l = this.#t === O.HIGHLIGHT ? this.#II(A) : null;
      if (l?.toggleDrawing(), this.#u) {
        const Z = new AbortController(), i = this.combinedSignal(Z), d = (c) => {
          c.type === "pointerup" && c.button !== 0 || (Z.abort(), l?.toggleDrawing(!0), c.type === "pointerup" && this.#P("main_toolbar"));
        };
        window.addEventListener("pointerup", d, {
          signal: i
        }), window.addEventListener("blur", d, {
          signal: i
        });
      } else
        l?.toggleDrawing(!0), this.#P("main_toolbar");
    }
  }
  #P(I = "") {
    this.#t === O.HIGHLIGHT ? this.highlightSelection(I) : this.#a && this.#iI();
  }
  #cI() {
    document.addEventListener("selectionchange", this.#dI.bind(this), {
      signal: this._signal
    });
  }
  #sI() {
    if (this.#y)
      return;
    this.#y = new AbortController();
    const I = this.combinedSignal(this.#y);
    window.addEventListener("focus", this.focus.bind(this), {
      signal: I
    }), window.addEventListener("blur", this.blur.bind(this), {
      signal: I
    });
  }
  #GI() {
    this.#y?.abort(), this.#y = null;
  }
  blur() {
    if (this.isShiftKeyDown = !1, this.#R && (this.#R = !1, this.#P("main_toolbar")), !this.hasSelection)
      return;
    const {
      activeElement: I
    } = document;
    for (const g of this.#V)
      if (g.div.contains(I)) {
        this.#p = [g, I], g._focusEventsAllowed = !1;
        break;
      }
  }
  focus() {
    if (!this.#p)
      return;
    const [I, g] = this.#p;
    this.#p = null, g.addEventListener("focusin", () => {
      I._focusEventsAllowed = !0;
    }, {
      once: !0,
      signal: this._signal
    }), g.focus();
  }
  #gI() {
    if (this.#S)
      return;
    this.#S = new AbortController();
    const I = this.combinedSignal(this.#S);
    window.addEventListener("keydown", this.keydown.bind(this), {
      signal: I
    }), window.addEventListener("keyup", this.keyup.bind(this), {
      signal: I
    });
  }
  #bI() {
    this.#S?.abort(), this.#S = null;
  }
  #CI() {
    if (this.#m)
      return;
    this.#m = new AbortController();
    const I = this.combinedSignal(this.#m);
    document.addEventListener("copy", this.copy.bind(this), {
      signal: I
    }), document.addEventListener("cut", this.cut.bind(this), {
      signal: I
    }), document.addEventListener("paste", this.paste.bind(this), {
      signal: I
    });
  }
  #AI() {
    this.#m?.abort(), this.#m = null;
  }
  #mI() {
    const I = this._signal;
    document.addEventListener("dragover", this.dragOver.bind(this), {
      signal: I
    }), document.addEventListener("drop", this.drop.bind(this), {
      signal: I
    });
  }
  addEditListeners() {
    this.#gI(), this.#CI();
  }
  removeEditListeners() {
    this.#bI(), this.#AI();
  }
  dragOver(I) {
    for (const {
      type: g
    } of I.dataTransfer.items)
      for (const C of this.#b)
        if (C.isHandlingMimeForPasting(g)) {
          I.dataTransfer.dropEffect = "copy", I.preventDefault();
          return;
        }
  }
  drop(I) {
    for (const g of I.dataTransfer.items)
      for (const C of this.#b)
        if (C.isHandlingMimeForPasting(g.type)) {
          C.paste(g, this.currentLayer), I.preventDefault();
          return;
        }
  }
  copy(I) {
    if (I.preventDefault(), this.#g?.commitOrRemove(), !this.hasSelection)
      return;
    const g = [];
    for (const C of this.#V) {
      const A = C.serialize(!0);
      A && g.push(A);
    }
    g.length !== 0 && I.clipboardData.setData("application/pdfjs", JSON.stringify(g));
  }
  cut(I) {
    this.copy(I), this.delete();
  }
  async paste(I) {
    I.preventDefault();
    const {
      clipboardData: g
    } = I;
    for (const l of g.items)
      for (const Z of this.#b)
        if (Z.isHandlingMimeForPasting(l.type)) {
          Z.paste(l, this.currentLayer);
          return;
        }
    let C = g.getData("application/pdfjs");
    if (!C)
      return;
    try {
      C = JSON.parse(C);
    } catch (l) {
      j(`paste: "${l.message}".`);
      return;
    }
    if (!Array.isArray(C))
      return;
    this.unselectAll();
    const A = this.currentLayer;
    try {
      const l = [];
      for (const d of C) {
        const c = await A.deserialize(d);
        if (!c)
          return;
        l.push(c);
      }
      const Z = () => {
        for (const d of l)
          this.#lI(d);
        this.#ZI(l);
      }, i = () => {
        for (const d of l)
          d.remove();
      };
      this.addCommands({
        cmd: Z,
        undo: i,
        mustExec: !0
      });
    } catch (l) {
      j(`paste: "${l.message}".`);
    }
  }
  keydown(I) {
    !this.isShiftKeyDown && I.key === "Shift" && (this.isShiftKeyDown = !0), this.#t !== O.NONE && !this.isEditorHandlingKeyboard && Cg._keyboardManager.exec(this, I);
  }
  keyup(I) {
    this.isShiftKeyDown && I.key === "Shift" && (this.isShiftKeyDown = !1, this.#R && (this.#R = !1, this.#P("main_toolbar")));
  }
  onEditingAction({
    name: I
  }) {
    switch (I) {
      case "undo":
      case "redo":
      case "delete":
      case "selectAll":
        this[I]();
        break;
      case "highlightSelection":
        this.highlightSelection("context_menu");
        break;
      case "commentSelection":
        this.commentSelection("context_menu");
        break;
    }
  }
  #M(I) {
    Object.entries(I).some(([C, A]) => this.#x[C] !== A) && (this._eventBus.dispatch("annotationeditorstateschanged", {
      source: this,
      details: Object.assign(this.#x, I)
    }), this.#t === O.HIGHLIGHT && I.hasSelectedEditor === !1 && this.#r([[f.HIGHLIGHT_FREE, !0]]));
  }
  #r(I) {
    this._eventBus.dispatch("annotationeditorparamschanged", {
      source: this,
      details: I
    });
  }
  setEditingState(I) {
    I ? (this.#sI(), this.#CI(), this.#M({
      isEditing: this.#t !== O.NONE,
      isEmpty: this.#f(),
      hasSomethingToUndo: this.#c.hasSomethingToUndo(),
      hasSomethingToRedo: this.#c.hasSomethingToRedo(),
      hasSelectedEditor: !1
    })) : (this.#GI(), this.#AI(), this.#M({
      isEditing: !1
    }), this.disableUserSelect(!1));
  }
  registerEditorTypes(I) {
    if (!this.#b) {
      this.#b = I;
      for (const g of this.#b)
        this.#r(g.defaultPropertiesToUpdate);
    }
  }
  getId() {
    return this.#D.id;
  }
  get currentLayer() {
    return this.#Z.get(this.#B);
  }
  getLayer(I) {
    return this.#Z.get(I);
  }
  get currentPageIndex() {
    return this.#B;
  }
  addLayer(I) {
    this.#Z.set(I.pageIndex, I), this.#e ? I.enable() : I.disable();
  }
  removeLayer(I) {
    this.#Z.delete(I.pageIndex);
  }
  async updateMode(I, g = null, C = !1, A = !1, l = !1) {
    if (this.#t !== I && !(this.#k && (await this.#k.promise, !this.#k))) {
      if (this.#k = Promise.withResolvers(), this.#G?.commitOrRemove(), this.#t === O.POPUP && this.#s?.hideSidebar(), this.#t = I, I === O.NONE) {
        this.setEditingState(!1), this.#oI(), this._editorUndoBar?.hide(), this.#k.resolve();
        return;
      }
      I === O.SIGNATURE && await this.#Q?.loadSignatures(), I === O.POPUP && (this.#C ||= await this.#v.getAnnotationsByType(new Set(this.#b.map((Z) => Z._editorType))), this.#s?.showSidebar(this.#C)), this.setEditingState(!0), await this.#BI(), this.unselectAll();
      for (const Z of this.#Z.values())
        Z.updateMode(I);
      if (!g) {
        C && this.addNewEditorFromKeyboard(), this.#k.resolve();
        return;
      }
      for (const Z of this.#A.values())
        Z.annotationElementId === g || Z.id === g ? (this.setSelected(Z), l ? Z.editComment() : A && Z.enterInEditMode()) : Z.unselect();
      this.#k.resolve();
    }
  }
  addNewEditorFromKeyboard() {
    this.currentLayer.canCreateNewEmptyEditor() && this.currentLayer.addNewEditor();
  }
  updateToolbar(I) {
    I.mode !== this.#t && this._eventBus.dispatch("switchannotationeditormode", {
      source: this,
      ...I
    });
  }
  updateParams(I, g) {
    if (this.#b) {
      switch (I) {
        case f.CREATE:
          this.currentLayer.addNewEditor(g);
          return;
        case f.HIGHLIGHT_SHOW_ALL:
          this._eventBus.dispatch("reporttelemetry", {
            source: this,
            details: {
              type: "editing",
              data: {
                type: "highlight",
                action: "toggle_visibility"
              }
            }
          }), (this.#E ||= /* @__PURE__ */ new Map()).set(I, g), this.showAllEditors("highlight", g);
          break;
      }
      if (this.hasSelection)
        for (const C of this.#V)
          C.updateParams(I, g);
      else
        for (const C of this.#b)
          C.updateDefaultParams(I, g);
    }
  }
  showAllEditors(I, g, C = !1) {
    for (const l of this.#A.values())
      l.editorType === I && l.show(g);
    (this.#E?.get(f.HIGHLIGHT_SHOW_ALL) ?? !0) !== g && this.#r([[f.HIGHLIGHT_SHOW_ALL, g]]);
  }
  enableWaiting(I = !1) {
    if (this.#F !== I) {
      this.#F = I;
      for (const g of this.#Z.values())
        I ? g.disableClick() : g.enableClick(), g.div.classList.toggle("waiting", I);
    }
  }
  async #BI() {
    if (!this.#e) {
      this.#e = !0;
      const I = [];
      for (const g of this.#Z.values())
        I.push(g.enable());
      await Promise.all(I);
      for (const g of this.#A.values())
        g.enable();
    }
  }
  #oI() {
    if (this.unselectAll(), this.#e) {
      this.#e = !1;
      for (const I of this.#Z.values())
        I.disable();
      for (const I of this.#A.values())
        I.disable();
    }
  }
  getEditors(I) {
    const g = [];
    for (const C of this.#A.values())
      C.pageIndex === I && g.push(C);
    return g;
  }
  getEditor(I) {
    return this.#A.get(I);
  }
  addEditor(I) {
    this.#A.set(I.id, I);
  }
  removeEditor(I) {
    I.div.contains(document.activeElement) && (this.#w && clearTimeout(this.#w), this.#w = setTimeout(() => {
      this.focusMainContainer(), this.#w = null;
    }, 0)), this.#A.delete(I.id), I.annotationElementId && this.#K?.delete(I.annotationElementId), this.unselect(I), (!I.annotationElementId || !this.#W.has(I.annotationElementId)) && this.#i?.remove(I.id);
  }
  addDeletedAnnotationElement(I) {
    this.#W.add(I.annotationElementId), this.addChangedExistingAnnotation(I), I.deleted = !0;
  }
  isDeletedAnnotationElement(I) {
    return this.#W.has(I);
  }
  removeDeletedAnnotationElement(I) {
    this.#W.delete(I.annotationElementId), this.removeChangedExistingAnnotation(I), I.deleted = !1;
  }
  #lI(I) {
    const g = this.#Z.get(I.pageIndex);
    g ? g.addOrRebuild(I) : (this.addEditor(I), this.addToAnnotationStorage(I));
  }
  setActiveEditor(I) {
    this.#g !== I && (this.#g = I, I && this.#r(I.propertiesToUpdate));
  }
  get #WI() {
    let I = null;
    for (I of this.#V)
      ;
    return I;
  }
  updateUI(I) {
    this.#WI === I && this.#r(I.propertiesToUpdate);
  }
  updateUIForDefaultProperties(I) {
    this.#r(I.defaultPropertiesToUpdate);
  }
  toggleSelected(I) {
    if (this.#V.has(I)) {
      this.#V.delete(I), I.unselect(), this.#M({
        hasSelectedEditor: this.hasSelection
      });
      return;
    }
    this.#V.add(I), I.select(), this.#r(I.propertiesToUpdate), this.#M({
      hasSelectedEditor: !0
    });
  }
  setSelected(I) {
    this.updateToolbar({
      mode: I.mode,
      editId: I.id
    }), this.#G?.commitOrRemove();
    for (const g of this.#V)
      g !== I && g.unselect();
    this.#V.clear(), this.#V.add(I), I.select(), this.#r(I.propertiesToUpdate), this.#M({
      hasSelectedEditor: !0
    });
  }
  isSelected(I) {
    return this.#V.has(I);
  }
  get firstSelectedEditor() {
    return this.#V.values().next().value;
  }
  unselect(I) {
    I.unselect(), this.#V.delete(I), this.#M({
      hasSelectedEditor: this.hasSelection
    });
  }
  get hasSelection() {
    return this.#V.size !== 0;
  }
  get isEnterHandled() {
    return this.#V.size === 1 && this.firstSelectedEditor.isEnterHandled;
  }
  undo() {
    this.#c.undo(), this.#M({
      hasSomethingToUndo: this.#c.hasSomethingToUndo(),
      hasSomethingToRedo: !0,
      isEmpty: this.#f()
    }), this._editorUndoBar?.hide();
  }
  redo() {
    this.#c.redo(), this.#M({
      hasSomethingToUndo: !0,
      hasSomethingToRedo: this.#c.hasSomethingToRedo(),
      isEmpty: this.#f()
    });
  }
  addCommands(I) {
    this.#c.add(I), this.#M({
      hasSomethingToUndo: !0,
      hasSomethingToRedo: !1,
      isEmpty: this.#f()
    });
  }
  cleanUndoStack(I) {
    this.#c.cleanType(I);
  }
  #f() {
    if (this.#A.size === 0)
      return !0;
    if (this.#A.size === 1)
      for (const I of this.#A.values())
        return I.isEmpty();
    return !1;
  }
  delete() {
    this.commitOrRemove();
    const I = this.currentLayer?.endDrawingSession(!0);
    if (!this.hasSelection && !I)
      return;
    const g = I ? [I] : [...this.#V], C = () => {
      this._editorUndoBar?.show(A, g.length === 1 ? g[0].editorType : g.length);
      for (const l of g)
        l.remove();
    }, A = () => {
      for (const l of g)
        this.#lI(l);
    };
    this.addCommands({
      cmd: C,
      undo: A,
      mustExec: !0
    });
  }
  commitOrRemove() {
    this.#g?.commitOrRemove();
  }
  hasSomethingToControl() {
    return this.#g || this.hasSelection;
  }
  #ZI(I) {
    for (const g of this.#V)
      g.unselect();
    this.#V.clear();
    for (const g of I)
      g.isEmpty() || (this.#V.add(g), g.select());
    this.#M({
      hasSelectedEditor: this.hasSelection
    });
  }
  selectAll() {
    for (const I of this.#V)
      I.commit();
    this.#ZI(this.#A.values());
  }
  unselectAll() {
    if (!(this.#g && (this.#g.commitOrRemove(), this.#t !== O.NONE)) && !this.#G?.commitOrRemove() && this.hasSelection) {
      for (const I of this.#V)
        I.unselect();
      this.#V.clear(), this.#M({
        hasSelectedEditor: !1
      });
    }
  }
  translateSelectedEditors(I, g, C = !1) {
    if (C || this.commitOrRemove(), !this.hasSelection)
      return;
    this.#z[0] += I, this.#z[1] += g;
    const [A, l] = this.#z, Z = [...this.#V], i = 1e3;
    this.#O && clearTimeout(this.#O), this.#O = setTimeout(() => {
      this.#O = null, this.#z[0] = this.#z[1] = 0, this.addCommands({
        cmd: () => {
          for (const d of Z)
            this.#A.has(d.id) && (d.translateInPage(A, l), d.translationDone());
        },
        undo: () => {
          for (const d of Z)
            this.#A.has(d.id) && (d.translateInPage(-A, -l), d.translationDone());
        },
        mustExec: !1
      });
    }, i);
    for (const d of Z)
      d.translateInPage(I, g), d.translationDone();
  }
  setUpDragSession() {
    if (this.hasSelection) {
      this.disableUserSelect(!0), this.#o = /* @__PURE__ */ new Map();
      for (const I of this.#V)
        this.#o.set(I, {
          savedX: I.x,
          savedY: I.y,
          savedPageIndex: I.pageIndex,
          newX: 0,
          newY: 0,
          newPageIndex: -1
        });
    }
  }
  endDragSession() {
    if (!this.#o)
      return !1;
    this.disableUserSelect(!1);
    const I = this.#o;
    this.#o = null;
    let g = !1;
    for (const [{
      x: A,
      y: l,
      pageIndex: Z
    }, i] of I)
      i.newX = A, i.newY = l, i.newPageIndex = Z, g ||= A !== i.savedX || l !== i.savedY || Z !== i.savedPageIndex;
    if (!g)
      return !1;
    const C = (A, l, Z, i) => {
      if (this.#A.has(A.id)) {
        const d = this.#Z.get(i);
        d ? A._setParentAndPosition(d, l, Z) : (A.pageIndex = i, A.x = l, A.y = Z);
      }
    };
    return this.addCommands({
      cmd: () => {
        for (const [A, {
          newX: l,
          newY: Z,
          newPageIndex: i
        }] of I)
          C(A, l, Z, i);
      },
      undo: () => {
        for (const [A, {
          savedX: l,
          savedY: Z,
          savedPageIndex: i
        }] of I)
          C(A, l, Z, i);
      },
      mustExec: !0
    }), !0;
  }
  dragSelectedEditors(I, g) {
    if (this.#o)
      for (const C of this.#o.keys())
        C.drag(I, g);
  }
  rebuild(I) {
    if (I.parent === null) {
      const g = this.getLayer(I.pageIndex);
      g ? (g.changeParent(I), g.addOrRebuild(I)) : (this.addEditor(I), this.addToAnnotationStorage(I), I.rebuild());
    } else
      I.parent.addOrRebuild(I);
  }
  get isEditorHandlingKeyboard() {
    return this.getActive()?.shouldGetKeyboardEvents() || this.#V.size === 1 && this.firstSelectedEditor.shouldGetKeyboardEvents();
  }
  isActive(I) {
    return this.#g === I;
  }
  getActive() {
    return this.#g;
  }
  getMode() {
    return this.#t;
  }
  get imageManager() {
    return P(this, "imageManager", new zC());
  }
  getSelectionBoxes(I) {
    if (!I)
      return null;
    const g = document.getSelection();
    for (let c = 0, G = g.rangeCount; c < G; c++)
      if (!I.contains(g.getRangeAt(c).commonAncestorContainer))
        return null;
    const {
      x: C,
      y: A,
      width: l,
      height: Z
    } = I.getBoundingClientRect();
    let i;
    switch (I.getAttribute("data-main-rotation")) {
      case "90":
        i = (c, G, b, m) => ({
          x: (G - A) / Z,
          y: 1 - (c + b - C) / l,
          width: m / Z,
          height: b / l
        });
        break;
      case "180":
        i = (c, G, b, m) => ({
          x: 1 - (c + b - C) / l,
          y: 1 - (G + m - A) / Z,
          width: b / l,
          height: m / Z
        });
        break;
      case "270":
        i = (c, G, b, m) => ({
          x: 1 - (G + m - A) / Z,
          y: (c - C) / l,
          width: m / Z,
          height: b / l
        });
        break;
      default:
        i = (c, G, b, m) => ({
          x: (c - C) / l,
          y: (G - A) / Z,
          width: b / l,
          height: m / Z
        });
        break;
    }
    const d = [];
    for (let c = 0, G = g.rangeCount; c < G; c++) {
      const b = g.getRangeAt(c);
      if (!b.collapsed)
        for (const {
          x: m,
          y: B,
          width: o,
          height: W
        } of b.getClientRects())
          o === 0 || W === 0 || d.push(i(m, B, o, W));
    }
    return d.length === 0 ? null : d;
  }
  addChangedExistingAnnotation({
    annotationElementId: I,
    id: g
  }) {
    (this.#d ||= /* @__PURE__ */ new Map()).set(I, g);
  }
  removeChangedExistingAnnotation({
    annotationElementId: I
  }) {
    this.#d?.delete(I);
  }
  renderAnnotationElement(I) {
    const g = this.#d?.get(I.data.id);
    if (!g)
      return;
    const C = this.#i.getRawValue(g);
    C && (this.#t === O.NONE && !C.hasBeenModified || C.renderAnnotationElement(I));
  }
  setMissingCanvas(I, g, C) {
    const A = this.#K?.get(I);
    A && (A.setCanvas(g, C), this.#K.delete(I));
  }
  addMissingCanvas(I, g) {
    (this.#K ||= /* @__PURE__ */ new Map()).set(I, g);
  }
}
class EI {
  #I = null;
  #g = !1;
  #C = null;
  #A = null;
  #Z = null;
  #l = null;
  #i = !1;
  #d = null;
  #c = null;
  #s = null;
  #m = null;
  #G = !1;
  static #B = null;
  static _l10n = null;
  constructor(I) {
    this.#c = I, this.#G = I._uiManager.useNewAltTextFlow, EI.#B ||= Object.freeze({
      added: "pdfjs-editor-new-alt-text-added-button",
      "added-label": "pdfjs-editor-new-alt-text-added-button-label",
      missing: "pdfjs-editor-new-alt-text-missing-button",
      "missing-label": "pdfjs-editor-new-alt-text-missing-button-label",
      review: "pdfjs-editor-new-alt-text-to-review-button",
      "review-label": "pdfjs-editor-new-alt-text-to-review-button-label"
    });
  }
  static initialize(I) {
    EI._l10n ??= I;
  }
  async render() {
    const I = this.#C = document.createElement("button");
    I.className = "altText", I.tabIndex = "0";
    const g = this.#A = document.createElement("span");
    I.append(g), this.#G ? (I.classList.add("new"), I.setAttribute("data-l10n-id", EI.#B.missing), g.setAttribute("data-l10n-id", EI.#B["missing-label"])) : (I.setAttribute("data-l10n-id", "pdfjs-editor-alt-text-button"), g.setAttribute("data-l10n-id", "pdfjs-editor-alt-text-button-label"));
    const C = this.#c._uiManager._signal;
    I.addEventListener("contextmenu", JI, {
      signal: C
    }), I.addEventListener("pointerdown", (l) => l.stopPropagation(), {
      signal: C
    });
    const A = (l) => {
      l.preventDefault(), this.#c._uiManager.editAltText(this.#c), this.#G && this.#c._reportTelemetry({
        action: "pdfjs.image.alt_text.image_status_label_clicked",
        data: {
          label: this.#W
        }
      });
    };
    return I.addEventListener("click", A, {
      capture: !0,
      signal: C
    }), I.addEventListener("keydown", (l) => {
      l.target === I && l.key === "Enter" && (this.#i = !0, A(l));
    }, {
      signal: C
    }), await this.#o(), I;
  }
  get #W() {
    return this.#I && "added" || this.#I === null && this.guessedText && "review" || "missing";
  }
  finish() {
    this.#C && (this.#C.focus({
      focusVisible: this.#i
    }), this.#i = !1);
  }
  isEmpty() {
    return this.#G ? this.#I === null : !this.#I && !this.#g;
  }
  hasData() {
    return this.#G ? this.#I !== null || !!this.#s : this.isEmpty();
  }
  get guessedText() {
    return this.#s;
  }
  async setGuessedText(I) {
    this.#I === null && (this.#s = I, this.#m = await EI._l10n.get("pdfjs-editor-new-alt-text-generated-alt-text-with-disclaimer", {
      generatedAltText: I
    }), this.#o());
  }
  toggleAltTextBadge(I = !1) {
    if (!this.#G || this.#I) {
      this.#d?.remove(), this.#d = null;
      return;
    }
    if (!this.#d) {
      const g = this.#d = document.createElement("div");
      g.className = "noAltTextBadge", this.#c.div.append(g);
    }
    this.#d.classList.toggle("hidden", !I);
  }
  serialize(I) {
    let g = this.#I;
    return !I && this.#s === g && (g = this.#m), {
      altText: g,
      decorative: this.#g,
      guessedText: this.#s,
      textWithDisclaimer: this.#m
    };
  }
  get data() {
    return {
      altText: this.#I,
      decorative: this.#g
    };
  }
  set data({
    altText: I,
    decorative: g,
    guessedText: C,
    textWithDisclaimer: A,
    cancel: l = !1
  }) {
    C && (this.#s = C, this.#m = A), !(this.#I === I && this.#g === g) && (l || (this.#I = I, this.#g = g), this.#o());
  }
  toggle(I = !1) {
    this.#C && (!I && this.#l && (clearTimeout(this.#l), this.#l = null), this.#C.disabled = !I);
  }
  shown() {
    this.#c._reportTelemetry({
      action: "pdfjs.image.alt_text.image_status_label_displayed",
      data: {
        label: this.#W
      }
    });
  }
  destroy() {
    this.#C?.remove(), this.#C = null, this.#A = null, this.#Z = null, this.#d?.remove(), this.#d = null;
  }
  async #o() {
    const I = this.#C;
    if (!I)
      return;
    if (this.#G) {
      if (I.classList.toggle("done", !!this.#I), I.setAttribute("data-l10n-id", EI.#B[this.#W]), this.#A?.setAttribute("data-l10n-id", EI.#B[`${this.#W}-label`]), !this.#I) {
        this.#Z?.remove();
        return;
      }
    } else {
      if (!this.#I && !this.#g) {
        I.classList.remove("done"), this.#Z?.remove();
        return;
      }
      I.classList.add("done"), I.setAttribute("data-l10n-id", "pdfjs-editor-alt-text-edit-button");
    }
    let g = this.#Z;
    if (!g) {
      this.#Z = g = document.createElement("span"), g.className = "tooltip", g.setAttribute("role", "tooltip"), g.id = `alt-text-tooltip-${this.#c.id}`;
      const A = 100, l = this.#c._uiManager._signal;
      l.addEventListener("abort", () => {
        clearTimeout(this.#l), this.#l = null;
      }, {
        once: !0
      }), I.addEventListener("mouseenter", () => {
        this.#l = setTimeout(() => {
          this.#l = null, this.#Z.classList.add("show"), this.#c._reportTelemetry({
            action: "alt_text_tooltip"
          });
        }, A);
      }, {
        signal: l
      }), I.addEventListener("mouseleave", () => {
        this.#l && (clearTimeout(this.#l), this.#l = null), this.#Z?.classList.remove("show");
      }, {
        signal: l
      });
    }
    this.#g ? g.setAttribute("data-l10n-id", "pdfjs-editor-alt-text-decorative-tooltip") : (g.removeAttribute("data-l10n-id"), g.textContent = this.#I), g.parentNode || I.append(g), this.#c.getElementForAltText()?.setAttribute("aria-describedby", g.id);
  }
}
class Eg {
  #I = null;
  #g = !1;
  #C = null;
  #A = null;
  #Z = null;
  #l = null;
  #i = !1;
  constructor(I) {
    this.#C = I, this.toolbar = null;
  }
  render() {
    if (!this.#C._uiManager.hasCommentManager())
      return null;
    const I = this.#I = document.createElement("button");
    I.className = "comment", I.tabIndex = "0", I.setAttribute("data-l10n-id", "pdfjs-editor-edit-comment-button");
    const g = this.#C._uiManager._signal;
    if (!(g instanceof AbortSignal) || g.aborted)
      return I;
    I.addEventListener("contextmenu", JI, {
      signal: g
    }), I.addEventListener("pointerdown", (A) => A.stopPropagation(), {
      signal: g
    });
    const C = (A) => {
      A.preventDefault(), this.edit();
    };
    return I.addEventListener("click", C, {
      capture: !0,
      signal: g
    }), I.addEventListener("keydown", (A) => {
      A.target === I && A.key === "Enter" && (this.#g = !0, C(A));
    }, {
      signal: g
    }), I;
  }
  edit() {
    const {
      bottom: I,
      left: g,
      right: C
    } = this.#C.getClientDimensions(), A = {
      top: I
    };
    this.#C._uiManager.direction === "ltr" ? A.right = C : A.left = g, this.#C._uiManager.editComment(this.#C, A);
  }
  finish() {
    this.#I && (this.#I.focus({
      focusVisible: this.#g
    }), this.#g = !1);
  }
  isDeleted() {
    return this.#i || this.#Z === "";
  }
  hasBeenEdited() {
    return this.isDeleted() || this.#Z !== this.#A;
  }
  serialize() {
    return this.data;
  }
  get data() {
    return {
      text: this.#Z,
      date: this.#l,
      deleted: this.#i
    };
  }
  set data(I) {
    if (I === null) {
      this.#Z = "", this.#i = !0;
      return;
    }
    this.#Z = I, this.#l = /* @__PURE__ */ new Date(), this.#i = !1;
  }
  setInitialText(I) {
    this.#A = I, this.data = I;
  }
  toggle(I = !1) {
    this.#I && (this.#I.disabled = !I);
  }
  shown() {
  }
  destroy() {
    this.#I?.remove(), this.#I = null, this.#Z = "", this.#l = null, this.#C = null, this.#g = !1, this.#i = !1;
  }
}
class jg {
  #I;
  #g = !1;
  #C = null;
  #A;
  #Z;
  #l;
  #i;
  #d = null;
  #c;
  #s = null;
  #m;
  #G = null;
  constructor({
    container: I,
    isPinchingDisabled: g = null,
    isPinchingStopped: C = null,
    onPinchStart: A = null,
    onPinching: l = null,
    onPinchEnd: Z = null,
    signal: i
  }) {
    this.#I = I, this.#C = C, this.#A = g, this.#Z = A, this.#l = l, this.#i = Z, this.#m = new AbortController(), this.#c = AbortSignal.any([i, this.#m.signal]), I.addEventListener("touchstart", this.#B.bind(this), {
      passive: !1,
      signal: this.#c
    });
  }
  get MIN_TOUCH_DISTANCE_TO_PINCH() {
    return 35 / rI.pixelRatio;
  }
  #B(I) {
    if (this.#A?.())
      return;
    if (I.touches.length === 1) {
      if (this.#d)
        return;
      const A = this.#d = new AbortController(), l = AbortSignal.any([this.#c, A.signal]), Z = this.#I, i = {
        capture: !0,
        signal: l,
        passive: !1
      }, d = (c) => {
        c.pointerType === "touch" && (this.#d?.abort(), this.#d = null);
      };
      Z.addEventListener("pointerdown", (c) => {
        c.pointerType === "touch" && (mI(c), d(c));
      }, i), Z.addEventListener("pointerup", d, i), Z.addEventListener("pointercancel", d, i);
      return;
    }
    if (!this.#G) {
      this.#G = new AbortController();
      const A = AbortSignal.any([this.#c, this.#G.signal]), l = this.#I, Z = {
        signal: A,
        capture: !1,
        passive: !1
      };
      l.addEventListener("touchmove", this.#W.bind(this), Z);
      const i = this.#o.bind(this);
      l.addEventListener("touchend", i, Z), l.addEventListener("touchcancel", i, Z), Z.capture = !0, l.addEventListener("pointerdown", mI, Z), l.addEventListener("pointermove", mI, Z), l.addEventListener("pointercancel", mI, Z), l.addEventListener("pointerup", mI, Z), this.#Z?.();
    }
    if (mI(I), I.touches.length !== 2 || this.#C?.()) {
      this.#s = null;
      return;
    }
    let [g, C] = I.touches;
    g.identifier > C.identifier && ([g, C] = [C, g]), this.#s = {
      touch0X: g.screenX,
      touch0Y: g.screenY,
      touch1X: C.screenX,
      touch1Y: C.screenY
    };
  }
  #W(I) {
    if (!this.#s || I.touches.length !== 2)
      return;
    mI(I);
    let [g, C] = I.touches;
    g.identifier > C.identifier && ([g, C] = [C, g]);
    const {
      screenX: A,
      screenY: l
    } = g, {
      screenX: Z,
      screenY: i
    } = C, d = this.#s, {
      touch0X: c,
      touch0Y: G,
      touch1X: b,
      touch1Y: m
    } = d, B = b - c, o = m - G, W = Z - A, Y = i - l, h = Math.hypot(W, Y) || 1, a = Math.hypot(B, o) || 1;
    if (!this.#g && Math.abs(a - h) <= jg.MIN_TOUCH_DISTANCE_TO_PINCH)
      return;
    if (d.touch0X = A, d.touch0Y = l, d.touch1X = Z, d.touch1Y = i, !this.#g) {
      this.#g = !0;
      return;
    }
    const w = [(A + Z) / 2, (l + i) / 2];
    this.#l?.(w, a, h);
  }
  #o(I) {
    I.touches.length >= 2 || (this.#G && (this.#G.abort(), this.#G = null, this.#i?.()), this.#s && (mI(I), this.#s = null, this.#g = !1));
  }
  destroy() {
    this.#m?.abort(), this.#m = null, this.#d?.abort(), this.#d = null;
  }
}
class T {
  #I = null;
  #g = null;
  #C = null;
  #A = null;
  #Z = !1;
  #l = null;
  #i = "";
  #d = !1;
  #c = null;
  #s = null;
  #m = null;
  #G = null;
  #B = "";
  #W = !1;
  #o = null;
  #b = !1;
  #h = !1;
  #a = !1;
  #Y = null;
  #X = 0;
  #n = 0;
  #w = null;
  #y = null;
  isSelected = !1;
  _isCopy = !1;
  _editToolbar = null;
  _initialOptions = /* @__PURE__ */ Object.create(null);
  _initialData = null;
  _isVisible = !0;
  _uiManager = null;
  _focusEventsAllowed = !0;
  static _l10n = null;
  static _l10nResizer = null;
  #H = !1;
  #R = T._zIndex++;
  static _borderLineWidth = -1;
  static _colorManager = new kC();
  static _zIndex = 1;
  static _telemetryTimeout = 1e3;
  static get _resizerKeyboardManager() {
    const I = T.prototype._resizeWithKeyboard, g = Cg.TRANSLATE_SMALL, C = Cg.TRANSLATE_BIG;
    return P(this, "_resizerKeyboardManager", new rg([[["ArrowLeft", "mac+ArrowLeft"], I, {
      args: [-g, 0]
    }], [["ctrl+ArrowLeft", "mac+shift+ArrowLeft"], I, {
      args: [-C, 0]
    }], [["ArrowRight", "mac+ArrowRight"], I, {
      args: [g, 0]
    }], [["ctrl+ArrowRight", "mac+shift+ArrowRight"], I, {
      args: [C, 0]
    }], [["ArrowUp", "mac+ArrowUp"], I, {
      args: [0, -g]
    }], [["ctrl+ArrowUp", "mac+shift+ArrowUp"], I, {
      args: [0, -C]
    }], [["ArrowDown", "mac+ArrowDown"], I, {
      args: [0, g]
    }], [["ctrl+ArrowDown", "mac+shift+ArrowDown"], I, {
      args: [0, C]
    }], [["Escape", "mac+Escape"], T.prototype._stopResizingWithKeyboard]]));
  }
  constructor(I) {
    this.parent = I.parent, this.id = I.id, this.width = this.height = null, this.pageIndex = I.parent.pageIndex, this.name = I.name, this.div = null, this._uiManager = I.uiManager, this.annotationElementId = null, this._willKeepAspectRatio = !1, this._initialOptions.isCentered = I.isCentered, this._structTreeParentId = null, this.annotationElementId = I.annotationElementId || null;
    const {
      rotation: g,
      rawDims: {
        pageWidth: C,
        pageHeight: A,
        pageX: l,
        pageY: Z
      }
    } = this.parent.viewport;
    this.rotation = g, this.pageRotation = (360 + g - this._uiManager.viewParameters.rotation) % 360, this.pageDimensions = [C, A], this.pageTranslation = [l, Z];
    const [i, d] = this.parentDimensions;
    this.x = I.x / i, this.y = I.y / d, this.isAttachedToDOM = !1, this.deleted = !1;
  }
  get editorType() {
    return Object.getPrototypeOf(this).constructor._type;
  }
  get mode() {
    return Object.getPrototypeOf(this).constructor._editorType;
  }
  static get isDrawer() {
    return !1;
  }
  static get _defaultLineColor() {
    return P(this, "_defaultLineColor", this._colorManager.getHexCode("CanvasText"));
  }
  static deleteAnnotationElement(I) {
    const g = new Nl({
      id: I.parent.getNextId(),
      parent: I.parent,
      uiManager: I._uiManager
    });
    g.annotationElementId = I.annotationElementId, g.deleted = !0, g._uiManager.addToAnnotationStorage(g);
  }
  static initialize(I, g) {
    if (T._l10n ??= I, T._l10nResizer ||= Object.freeze({
      topLeft: "pdfjs-editor-resizer-top-left",
      topMiddle: "pdfjs-editor-resizer-top-middle",
      topRight: "pdfjs-editor-resizer-top-right",
      middleRight: "pdfjs-editor-resizer-middle-right",
      bottomRight: "pdfjs-editor-resizer-bottom-right",
      bottomMiddle: "pdfjs-editor-resizer-bottom-middle",
      bottomLeft: "pdfjs-editor-resizer-bottom-left",
      middleLeft: "pdfjs-editor-resizer-middle-left"
    }), T._borderLineWidth !== -1)
      return;
    const C = getComputedStyle(document.documentElement);
    T._borderLineWidth = parseFloat(C.getPropertyValue("--outline-width")) || 0;
  }
  static updateDefaultParams(I, g) {
  }
  static get defaultPropertiesToUpdate() {
    return [];
  }
  static isHandlingMimeForPasting(I) {
    return !1;
  }
  static paste(I, g) {
    II("Not implemented");
  }
  get propertiesToUpdate() {
    return [];
  }
  get _isDraggable() {
    return this.#H;
  }
  set _isDraggable(I) {
    this.#H = I, this.div?.classList.toggle("draggable", I);
  }
  get isEnterHandled() {
    return !0;
  }
  center() {
    const [I, g] = this.pageDimensions;
    switch (this.parentRotation) {
      case 90:
        this.x -= this.height * g / (I * 2), this.y += this.width * I / (g * 2);
        break;
      case 180:
        this.x += this.width / 2, this.y += this.height / 2;
        break;
      case 270:
        this.x += this.height * g / (I * 2), this.y -= this.width * I / (g * 2);
        break;
      default:
        this.x -= this.width / 2, this.y -= this.height / 2;
        break;
    }
    this.fixAndSetPosition();
  }
  addCommands(I) {
    this._uiManager.addCommands(I);
  }
  get currentLayer() {
    return this._uiManager.currentLayer;
  }
  setInBackground() {
    this.div.style.zIndex = 0;
  }
  setInForeground() {
    this.div.style.zIndex = this.#R;
  }
  setParent(I) {
    I !== null ? (this.pageIndex = I.pageIndex, this.pageDimensions = I.pageDimensions) : this.#z(), this.parent = I;
  }
  focusin(I) {
    this._focusEventsAllowed && (this.#W ? this.#W = !1 : this.parent.setSelected(this));
  }
  focusout(I) {
    !this._focusEventsAllowed || !this.isAttachedToDOM || I.relatedTarget?.closest(`#${this.id}`) || (I.preventDefault(), this.parent?.isMultipleSelection || this.commitOrRemove());
  }
  commitOrRemove() {
    this.isEmpty() ? this.remove() : this.commit();
  }
  commit() {
    this.isInEditMode() && this.addToAnnotationStorage();
  }
  addToAnnotationStorage() {
    this._uiManager.addToAnnotationStorage(this);
  }
  setAt(I, g, C, A) {
    const [l, Z] = this.parentDimensions;
    [C, A] = this.screenToPageTranslation(C, A), this.x = (I + C) / l, this.y = (g + A) / Z, this.fixAndSetPosition();
  }
  _moveAfterPaste(I, g) {
    const [C, A] = this.parentDimensions;
    this.setAt(I * C, g * A, this.width * C, this.height * A), this._onTranslated();
  }
  #N([I, g], C, A) {
    [C, A] = this.screenToPageTranslation(C, A), this.x += C / I, this.y += A / g, this._onTranslating(this.x, this.y), this.fixAndSetPosition();
  }
  translate(I, g) {
    this.#N(this.parentDimensions, I, g);
  }
  translateInPage(I, g) {
    this.#o ||= [this.x, this.y, this.width, this.height], this.#N(this.pageDimensions, I, g), this.div.scrollIntoView({
      block: "nearest"
    });
  }
  translationDone() {
    this._onTranslated(this.x, this.y);
  }
  drag(I, g) {
    this.#o ||= [this.x, this.y, this.width, this.height];
    const {
      div: C,
      parentDimensions: [A, l]
    } = this;
    if (this.x += I / A, this.y += g / l, this.parent && (this.x < 0 || this.x > 1 || this.y < 0 || this.y > 1)) {
      const {
        x: b,
        y: m
      } = this.div.getBoundingClientRect();
      this.parent.findNewParent(this, b, m) && (this.x -= Math.floor(this.x), this.y -= Math.floor(this.y));
    }
    let {
      x: Z,
      y: i
    } = this;
    const [d, c] = this.getBaseTranslation();
    Z += d, i += c;
    const {
      style: G
    } = C;
    G.left = `${(100 * Z).toFixed(2)}%`, G.top = `${(100 * i).toFixed(2)}%`, this._onTranslating(Z, i), C.scrollIntoView({
      block: "nearest"
    });
  }
  _onTranslating(I, g) {
  }
  _onTranslated(I, g) {
  }
  get _hasBeenMoved() {
    return !!this.#o && (this.#o[0] !== this.x || this.#o[1] !== this.y);
  }
  get _hasBeenResized() {
    return !!this.#o && (this.#o[2] !== this.width || this.#o[3] !== this.height);
  }
  getBaseTranslation() {
    const [I, g] = this.parentDimensions, {
      _borderLineWidth: C
    } = T, A = C / I, l = C / g;
    switch (this.rotation) {
      case 90:
        return [-A, l];
      case 180:
        return [A, l];
      case 270:
        return [A, -l];
      default:
        return [-A, -l];
    }
  }
  get _mustFixPosition() {
    return !0;
  }
  fixAndSetPosition(I = this.rotation) {
    const {
      div: {
        style: g
      },
      pageDimensions: [C, A]
    } = this;
    let {
      x: l,
      y: Z,
      width: i,
      height: d
    } = this;
    if (i *= C, d *= A, l *= C, Z *= A, this._mustFixPosition)
      switch (I) {
        case 0:
          l = RI(l, 0, C - i), Z = RI(Z, 0, A - d);
          break;
        case 90:
          l = RI(l, 0, C - d), Z = RI(Z, i, A);
          break;
        case 180:
          l = RI(l, i, C), Z = RI(Z, d, A);
          break;
        case 270:
          l = RI(l, d, C), Z = RI(Z, 0, A - i);
          break;
      }
    this.x = l /= C, this.y = Z /= A;
    const [c, G] = this.getBaseTranslation();
    l += c, Z += G, g.left = `${(100 * l).toFixed(2)}%`, g.top = `${(100 * Z).toFixed(2)}%`, this.moveInDOM();
  }
  static #D(I, g, C) {
    switch (C) {
      case 90:
        return [g, -I];
      case 180:
        return [-I, -g];
      case 270:
        return [-g, I];
      default:
        return [I, g];
    }
  }
  screenToPageTranslation(I, g) {
    return T.#D(I, g, this.parentRotation);
  }
  pageTranslationToScreen(I, g) {
    return T.#D(I, g, 360 - this.parentRotation);
  }
  #e(I) {
    switch (I) {
      case 90: {
        const [g, C] = this.pageDimensions;
        return [0, -g / C, C / g, 0];
      }
      case 180:
        return [-1, 0, 0, -1];
      case 270: {
        const [g, C] = this.pageDimensions;
        return [0, g / C, -C / g, 0];
      }
      default:
        return [1, 0, 0, 1];
    }
  }
  get parentScale() {
    return this._uiManager.viewParameters.realScale;
  }
  get parentRotation() {
    return (this._uiManager.viewParameters.rotation + this.pageRotation) % 360;
  }
  get parentDimensions() {
    const {
      parentScale: I,
      pageDimensions: [g, C]
    } = this;
    return [g * I, C * I];
  }
  setDims(I, g) {
    const [C, A] = this.parentDimensions, {
      style: l
    } = this.div;
    l.width = `${(100 * I / C).toFixed(2)}%`, this.#d || (l.height = `${(100 * g / A).toFixed(2)}%`);
  }
  fixDims() {
    const {
      style: I
    } = this.div, {
      height: g,
      width: C
    } = I, A = C.endsWith("%"), l = !this.#d && g.endsWith("%");
    if (A && l)
      return;
    const [Z, i] = this.parentDimensions;
    A || (I.width = `${(100 * parseFloat(C) / Z).toFixed(2)}%`), !this.#d && !l && (I.height = `${(100 * parseFloat(g) / i).toFixed(2)}%`);
  }
  getInitialTranslation() {
    return [0, 0];
  }
  #u() {
    if (this.#c)
      return;
    this.#c = document.createElement("div"), this.#c.classList.add("resizers");
    const I = this._willKeepAspectRatio ? ["topLeft", "topRight", "bottomRight", "bottomLeft"] : ["topLeft", "topMiddle", "topRight", "middleRight", "bottomRight", "bottomMiddle", "bottomLeft", "middleLeft"], g = this._uiManager._signal;
    for (const C of I) {
      const A = document.createElement("div");
      this.#c.append(A), A.classList.add("resizer", C), A.setAttribute("data-resizer-name", C), A.addEventListener("pointerdown", this.#F.bind(this, C), {
        signal: g
      }), A.addEventListener("contextmenu", JI, {
        signal: g
      }), A.tabIndex = -1;
    }
    this.div.prepend(this.#c);
  }
  #F(I, g) {
    g.preventDefault();
    const {
      isMac: C
    } = XI.platform;
    if (g.button !== 0 || g.ctrlKey && C)
      return;
    this.#C?.toggle(!1);
    const A = this._isDraggable;
    this._isDraggable = !1, this.#s = [g.screenX, g.screenY];
    const l = new AbortController(), Z = this._uiManager.combinedSignal(l);
    this.parent.togglePointerEvents(!1), window.addEventListener("pointermove", this.#J.bind(this, I), {
      passive: !0,
      capture: !0,
      signal: Z
    }), window.addEventListener("touchmove", mI, {
      passive: !1,
      signal: Z
    }), window.addEventListener("contextmenu", JI, {
      signal: Z
    }), this.#m = {
      savedX: this.x,
      savedY: this.y,
      savedWidth: this.width,
      savedHeight: this.height
    };
    const i = this.parent.div.style.cursor, d = this.div.style.cursor;
    this.div.style.cursor = this.parent.div.style.cursor = window.getComputedStyle(g.target).cursor;
    const c = () => {
      l.abort(), this.parent.togglePointerEvents(!0), this.#C?.toggle(!0), this._isDraggable = A, this.parent.div.style.cursor = i, this.div.style.cursor = d, this.#p();
    };
    window.addEventListener("pointerup", c, {
      signal: Z
    }), window.addEventListener("blur", c, {
      signal: Z
    });
  }
  #S(I, g, C, A) {
    this.width = C, this.height = A, this.x = I, this.y = g;
    const [l, Z] = this.parentDimensions;
    this.setDims(l * C, Z * A), this.fixAndSetPosition(), this._onResized();
  }
  _onResized() {
  }
  #p() {
    if (!this.#m)
      return;
    const {
      savedX: I,
      savedY: g,
      savedWidth: C,
      savedHeight: A
    } = this.#m;
    this.#m = null;
    const l = this.x, Z = this.y, i = this.width, d = this.height;
    l === I && Z === g && i === C && d === A || this.addCommands({
      cmd: this.#S.bind(this, l, Z, i, d),
      undo: this.#S.bind(this, I, g, C, A),
      mustExec: !0
    });
  }
  static _round(I) {
    return Math.round(I * 1e4) / 1e4;
  }
  #J(I, g) {
    const [C, A] = this.parentDimensions, l = this.x, Z = this.y, i = this.width, d = this.height, c = T.MIN_SIZE / C, G = T.MIN_SIZE / A, b = this.#e(this.rotation), m = (M, u) => [b[0] * M + b[2] * u, b[1] * M + b[3] * u], B = this.#e(360 - this.rotation), o = (M, u) => [B[0] * M + B[2] * u, B[1] * M + B[3] * u];
    let W, Y, h = !1, a = !1;
    switch (I) {
      case "topLeft":
        h = !0, W = (M, u) => [0, 0], Y = (M, u) => [M, u];
        break;
      case "topMiddle":
        W = (M, u) => [M / 2, 0], Y = (M, u) => [M / 2, u];
        break;
      case "topRight":
        h = !0, W = (M, u) => [M, 0], Y = (M, u) => [0, u];
        break;
      case "middleRight":
        a = !0, W = (M, u) => [M, u / 2], Y = (M, u) => [0, u / 2];
        break;
      case "bottomRight":
        h = !0, W = (M, u) => [M, u], Y = (M, u) => [0, 0];
        break;
      case "bottomMiddle":
        W = (M, u) => [M / 2, u], Y = (M, u) => [M / 2, 0];
        break;
      case "bottomLeft":
        h = !0, W = (M, u) => [0, u], Y = (M, u) => [M, 0];
        break;
      case "middleLeft":
        a = !0, W = (M, u) => [0, u / 2], Y = (M, u) => [M, u / 2];
        break;
    }
    const w = W(i, d), n = Y(i, d);
    let V = m(...n);
    const X = T._round(l + V[0]), y = T._round(Z + V[1]);
    let N = 1, t = 1, e, R;
    if (g.fromKeyboard)
      ({
        deltaX: e,
        deltaY: R
      } = g);
    else {
      const {
        screenX: M,
        screenY: u
      } = g, [k, v] = this.#s;
      [e, R] = this.screenToPageTranslation(M - k, u - v), this.#s[0] = M, this.#s[1] = u;
    }
    if ([e, R] = o(e / C, R / A), h) {
      const M = Math.hypot(i, d);
      N = t = Math.max(Math.min(Math.hypot(n[0] - w[0] - e, n[1] - w[1] - R) / M, 1 / i, 1 / d), c / i, G / d);
    } else a ? N = RI(Math.abs(n[0] - w[0] - e), c, 1) / i : t = RI(Math.abs(n[1] - w[1] - R), G, 1) / d;
    const F = T._round(i * N), K = T._round(d * t);
    V = m(...Y(F, K));
    const S = X - V[0], L = y - V[1];
    this.#o ||= [this.x, this.y, this.width, this.height], this.width = F, this.height = K, this.x = S, this.y = L, this.setDims(C * F, A * K), this.fixAndSetPosition(), this._onResizing();
  }
  _onResizing() {
  }
  altTextFinish() {
    this.#C?.finish();
  }
  get toolbarButtons() {
    return null;
  }
  async addEditToolbar() {
    if (this._editToolbar || this.#h)
      return this._editToolbar;
    this._editToolbar = new Sg(this), this.div.append(this._editToolbar.render());
    const {
      toolbarButtons: I
    } = this;
    if (I)
      for (const [g, C] of I)
        await this._editToolbar.addButton(g, C);
    return this._editToolbar.addButton("comment", this.addCommentButton()), this._editToolbar.addButton("delete"), this._editToolbar;
  }
  removeEditToolbar() {
    this._editToolbar && (this._editToolbar.remove(), this._editToolbar = null, this.#C?.destroy());
  }
  addContainer(I) {
    const g = this._editToolbar?.div;
    g ? g.before(I) : this.div.append(I);
  }
  getClientDimensions() {
    return this.div.getBoundingClientRect();
  }
  createAltText() {
    return this.#C || (EI.initialize(T._l10n), this.#C = new EI(this), this.#I && (this.#C.data = this.#I, this.#I = null)), this.#C;
  }
  get altTextData() {
    return this.#C?.data;
  }
  set altTextData(I) {
    this.#C && (this.#C.data = I);
  }
  get guessedAltText() {
    return this.#C?.guessedText;
  }
  async setGuessedAltText(I) {
    await this.#C?.setGuessedText(I);
  }
  serializeAltText(I) {
    return this.#C?.serialize(I);
  }
  hasAltText() {
    return !!this.#C && !this.#C.isEmpty();
  }
  hasAltTextData() {
    return this.#C?.hasData() ?? !1;
  }
  addCommentButton() {
    return this.#A ? this.#A : this.#A = new Eg(this);
  }
  get commentColor() {
    return null;
  }
  get comment() {
    const I = this.#A;
    return {
      text: I.data.text,
      date: I.data.date,
      deleted: I.isDeleted(),
      color: this.commentColor
    };
  }
  set comment(I) {
    this.#A || (this.#A = new Eg(this)), this.#A.data = I;
  }
  setCommentData(I) {
    this.#A || (this.#A = new Eg(this)), this.#A.setInitialText(I);
  }
  get hasEditedComment() {
    return this.#A?.hasBeenEdited();
  }
  async editComment() {
    this.#A || (this.#A = new Eg(this)), this.#A.edit();
  }
  addComment(I) {
    if (this.hasEditedComment) {
      const [, , , A] = I.rect, [l] = this.pageDimensions, [Z] = this.pageTranslation, i = Z + l + 1, d = A - 100, c = i + 180;
      I.popup = {
        contents: this.comment.text,
        deleted: this.comment.deleted,
        rect: [i, d, c, A]
      };
    }
  }
  render() {
    const I = this.div = document.createElement("div");
    I.setAttribute("data-editor-rotation", (360 - this.rotation) % 360), I.className = this.name, I.setAttribute("id", this.id), I.tabIndex = this.#Z ? -1 : 0, I.setAttribute("role", "application"), this.defaultL10nId && I.setAttribute("data-l10n-id", this.defaultL10nId), this._isVisible || I.classList.add("hidden"), this.setInForeground(), this.#Q();
    const [g, C] = this.parentDimensions;
    this.parentRotation % 180 !== 0 && (I.style.maxWidth = `${(100 * C / g).toFixed(2)}%`, I.style.maxHeight = `${(100 * g / C).toFixed(2)}%`);
    const [A, l] = this.getInitialTranslation();
    return this.translate(A, l), FA(this, I, ["keydown", "pointerdown", "dblclick"]), this.isResizable && this._uiManager._supportsPinchToZoom && (this.#y ||= new jg({
      container: I,
      isPinchingDisabled: () => !this.isSelected,
      onPinchStart: this.#K.bind(this),
      onPinching: this.#L.bind(this),
      onPinchEnd: this.#t.bind(this),
      signal: this._uiManager._signal
    })), this._uiManager._editorUndoBar?.hide(), I;
  }
  #K() {
    this.#m = {
      savedX: this.x,
      savedY: this.y,
      savedWidth: this.width,
      savedHeight: this.height
    }, this.#C?.toggle(!1), this.parent.togglePointerEvents(!1);
  }
  #L(I, g, C) {
    let l = 0.7 * (C / g) + 1 - 0.7;
    if (l === 1)
      return;
    const Z = this.#e(this.rotation), i = (X, y) => [Z[0] * X + Z[2] * y, Z[1] * X + Z[3] * y], [d, c] = this.parentDimensions, G = this.x, b = this.y, m = this.width, B = this.height, o = T.MIN_SIZE / d, W = T.MIN_SIZE / c;
    l = Math.max(Math.min(l, 1 / m, 1 / B), o / m, W / B);
    const Y = T._round(m * l), h = T._round(B * l);
    if (Y === m && h === B)
      return;
    this.#o ||= [G, b, m, B];
    const a = i(m / 2, B / 2), w = T._round(G + a[0]), n = T._round(b + a[1]), V = i(Y / 2, h / 2);
    this.x = w - V[0], this.y = n - V[1], this.width = Y, this.height = h, this.setDims(d * Y, c * h), this.fixAndSetPosition(), this._onResizing();
  }
  #t() {
    this.#C?.toggle(!0), this.parent.togglePointerEvents(!0), this.#p();
  }
  pointerdown(I) {
    const {
      isMac: g
    } = XI.platform;
    if (I.button !== 0 || I.ctrlKey && g) {
      I.preventDefault();
      return;
    }
    if (this.#W = !0, this._isDraggable) {
      this.#T(I);
      return;
    }
    this.#V(I);
  }
  #V(I) {
    const {
      isMac: g
    } = XI.platform;
    I.ctrlKey && !g || I.shiftKey || I.metaKey && g ? this.parent.toggleSelected(this) : this.parent.setSelected(this);
  }
  #T(I) {
    const {
      isSelected: g
    } = this;
    this._uiManager.setUpDragSession();
    let C = !1;
    const A = new AbortController(), l = this._uiManager.combinedSignal(A), Z = {
      capture: !0,
      passive: !1,
      signal: l
    }, i = (c) => {
      A.abort(), this.#l = null, this.#W = !1, this._uiManager.endDragSession() || this.#V(c), C && this._onStopDragging();
    };
    g && (this.#X = I.clientX, this.#n = I.clientY, this.#l = I.pointerId, this.#i = I.pointerType, window.addEventListener("pointermove", (c) => {
      C || (C = !0, this._onStartDragging());
      const {
        clientX: G,
        clientY: b,
        pointerId: m
      } = c;
      if (m !== this.#l) {
        mI(c);
        return;
      }
      const [B, o] = this.screenToPageTranslation(G - this.#X, b - this.#n);
      this.#X = G, this.#n = b, this._uiManager.dragSelectedEditors(B, o);
    }, Z), window.addEventListener("touchmove", mI, Z), window.addEventListener("pointerdown", (c) => {
      c.pointerType === this.#i && (this.#y || c.isPrimary) && i(c), mI(c);
    }, Z));
    const d = (c) => {
      if (!this.#l || this.#l === c.pointerId) {
        i(c);
        return;
      }
      mI(c);
    };
    window.addEventListener("pointerup", d, {
      signal: l
    }), window.addEventListener("blur", d, {
      signal: l
    });
  }
  _onStartDragging() {
  }
  _onStopDragging() {
  }
  moveInDOM() {
    this.#Y && clearTimeout(this.#Y), this.#Y = setTimeout(() => {
      this.#Y = null, this.parent?.moveEditorInDOM(this);
    }, 0);
  }
  _setParentAndPosition(I, g, C) {
    I.changeParent(this), this.x = g, this.y = C, this.fixAndSetPosition(), this._onTranslated();
  }
  getRect(I, g, C = this.rotation) {
    const A = this.parentScale, [l, Z] = this.pageDimensions, [i, d] = this.pageTranslation, c = I / A, G = g / A, b = this.x * l, m = this.y * Z, B = this.width * l, o = this.height * Z;
    switch (C) {
      case 0:
        return [b + c + i, Z - m - G - o + d, b + c + B + i, Z - m - G + d];
      case 90:
        return [b + G + i, Z - m + c + d, b + G + o + i, Z - m + c + B + d];
      case 180:
        return [b - c - B + i, Z - m + G + d, b - c + i, Z - m + G + o + d];
      case 270:
        return [b - G - o + i, Z - m - c - B + d, b - G + i, Z - m - c + d];
      default:
        throw new Error("Invalid rotation");
    }
  }
  getRectInCurrentCoords(I, g) {
    const [C, A, l, Z] = I, i = l - C, d = Z - A;
    switch (this.rotation) {
      case 0:
        return [C, g - Z, i, d];
      case 90:
        return [C, g - A, d, i];
      case 180:
        return [l, g - A, i, d];
      case 270:
        return [l, g - Z, d, i];
      default:
        throw new Error("Invalid rotation");
    }
  }
  getPDFRect() {
    return this.getRect(0, 0);
  }
  onceAdded(I) {
  }
  isEmpty() {
    return !1;
  }
  enableEditMode() {
    return this.isInEditMode() ? !1 : (this.parent.setEditingState(!1), this.#h = !0, !0);
  }
  disableEditMode() {
    return this.isInEditMode() ? (this.parent.setEditingState(!0), this.#h = !1, !0) : !1;
  }
  isInEditMode() {
    return this.#h;
  }
  shouldGetKeyboardEvents() {
    return this.#a;
  }
  needsToBeRebuilt() {
    return this.div && !this.isAttachedToDOM;
  }
  get isOnScreen() {
    const {
      top: I,
      left: g,
      bottom: C,
      right: A
    } = this.getClientDimensions(), {
      innerHeight: l,
      innerWidth: Z
    } = window;
    return g < Z && A > 0 && I < l && C > 0;
  }
  #Q() {
    if (this.#G || !this.div)
      return;
    this.#G = new AbortController();
    const I = this._uiManager.combinedSignal(this.#G);
    this.div.addEventListener("focusin", this.focusin.bind(this), {
      signal: I
    }), this.div.addEventListener("focusout", this.focusout.bind(this), {
      signal: I
    });
  }
  rebuild() {
    this.#Q();
  }
  rotate(I) {
  }
  resize() {
  }
  serializeDeleted() {
    return {
      id: this.annotationElementId,
      deleted: !0,
      pageIndex: this.pageIndex,
      popupRef: this._initialData?.popupRef || ""
    };
  }
  serialize(I = !1, g = null) {
    II("An editor must be serializable");
  }
  static async deserialize(I, g, C) {
    const A = new this.prototype.constructor({
      parent: g,
      id: g.getNextId(),
      uiManager: C,
      annotationElementId: I.annotationElementId
    });
    A.rotation = I.rotation, A.#I = I.accessibilityData, A._isCopy = I.isCopy || !1;
    const [l, Z] = A.pageDimensions, [i, d, c, G] = A.getRectInCurrentCoords(I.rect, Z);
    return A.x = i / l, A.y = d / Z, A.width = c / l, A.height = G / Z, A;
  }
  get hasBeenModified() {
    return !!this.annotationElementId && (this.deleted || this.serialize() !== null);
  }
  remove() {
    if (this.#G?.abort(), this.#G = null, this.isEmpty() || this.commit(), this.parent ? this.parent.remove(this) : this._uiManager.removeEditor(this), this.#Y && (clearTimeout(this.#Y), this.#Y = null), this.#z(), this.removeEditToolbar(), this.#w) {
      for (const I of this.#w.values())
        clearTimeout(I);
      this.#w = null;
    }
    this.parent = null, this.#y?.destroy(), this.#y = null;
  }
  get isResizable() {
    return !1;
  }
  makeResizable() {
    this.isResizable && (this.#u(), this.#c.classList.remove("hidden"));
  }
  get toolbarPosition() {
    return null;
  }
  keydown(I) {
    if (!this.isResizable || I.target !== this.div || I.key !== "Enter")
      return;
    this._uiManager.setSelected(this), this.#m = {
      savedX: this.x,
      savedY: this.y,
      savedWidth: this.width,
      savedHeight: this.height
    };
    const g = this.#c.children;
    if (!this.#g) {
      this.#g = Array.from(g);
      const Z = this.#j.bind(this), i = this.#E.bind(this), d = this._uiManager._signal;
      for (const c of this.#g) {
        const G = c.getAttribute("data-resizer-name");
        c.setAttribute("role", "spinbutton"), c.addEventListener("keydown", Z, {
          signal: d
        }), c.addEventListener("blur", i, {
          signal: d
        }), c.addEventListener("focus", this.#v.bind(this, G), {
          signal: d
        }), c.setAttribute("data-l10n-id", T._l10nResizer[G]);
      }
    }
    const C = this.#g[0];
    let A = 0;
    for (const Z of g) {
      if (Z === C)
        break;
      A++;
    }
    const l = (360 - this.rotation + this.parentRotation) % 360 / 90 * (this.#g.length / 4);
    if (l !== A) {
      if (l < A)
        for (let i = 0; i < A - l; i++)
          this.#c.append(this.#c.firstChild);
      else if (l > A)
        for (let i = 0; i < l - A; i++)
          this.#c.firstChild.before(this.#c.lastChild);
      let Z = 0;
      for (const i of g) {
        const c = this.#g[Z++].getAttribute("data-resizer-name");
        i.setAttribute("data-l10n-id", T._l10nResizer[c]);
      }
    }
    this.#x(0), this.#a = !0, this.#c.firstChild.focus({
      focusVisible: !0
    }), I.preventDefault(), I.stopImmediatePropagation();
  }
  #j(I) {
    T._resizerKeyboardManager.exec(this, I);
  }
  #E(I) {
    this.#a && I.relatedTarget?.parentNode !== this.#c && this.#z();
  }
  #v(I) {
    this.#B = this.#a ? I : "";
  }
  #x(I) {
    if (this.#g)
      for (const g of this.#g)
        g.tabIndex = I;
  }
  _resizeWithKeyboard(I, g) {
    this.#a && this.#J(this.#B, {
      deltaX: I,
      deltaY: g,
      fromKeyboard: !0
    });
  }
  #z() {
    this.#a = !1, this.#x(-1), this.#p();
  }
  _stopResizingWithKeyboard() {
    this.#z(), this.div.focus();
  }
  select() {
    if (!(this.isSelected && this._editToolbar)) {
      if (this.isSelected = !0, this.makeResizable(), this.div?.classList.add("selectedEditor"), !this._editToolbar) {
        this.addEditToolbar().then(() => {
          this.div?.classList.contains("selectedEditor") && this._editToolbar?.show();
        });
        return;
      }
      this._editToolbar?.show(), this.#C?.toggleAltTextBadge(!1);
    }
  }
  unselect() {
    this.isSelected && (this.isSelected = !1, this.#c?.classList.add("hidden"), this.div?.classList.remove("selectedEditor"), this.div?.contains(document.activeElement) && this._uiManager.currentLayer.div.focus({
      preventScroll: !0
    }), this._editToolbar?.hide(), this.#C?.toggleAltTextBadge(!0));
  }
  updateParams(I, g) {
  }
  disableEditing() {
  }
  enableEditing() {
  }
  get canChangeContent() {
    return !1;
  }
  enterInEditMode() {
    this.canChangeContent && (this.enableEditMode(), this.div.focus());
  }
  dblclick(I) {
    this.enterInEditMode(), this.parent.updateToolbar({
      mode: this.constructor._editorType,
      editId: this.id
    });
  }
  getElementForAltText() {
    return this.div;
  }
  get contentDiv() {
    return this.div;
  }
  get isEditing() {
    return this.#b;
  }
  set isEditing(I) {
    this.#b = I, this.parent && (I ? (this.parent.setSelected(this), this.parent.setActiveEditor(this)) : this.parent.setActiveEditor(null));
  }
  setAspectRatio(I, g) {
    this.#d = !0;
    const C = I / g, {
      style: A
    } = this.div;
    A.aspectRatio = C, A.height = "auto";
  }
  static get MIN_SIZE() {
    return 16;
  }
  static canCreateNewEmptyEditor() {
    return !0;
  }
  get telemetryInitialData() {
    return {
      action: "added"
    };
  }
  get telemetryFinalData() {
    return null;
  }
  _reportTelemetry(I, g = !1) {
    if (g) {
      this.#w ||= /* @__PURE__ */ new Map();
      const {
        action: C
      } = I;
      let A = this.#w.get(C);
      A && clearTimeout(A), A = setTimeout(() => {
        this._reportTelemetry(I), this.#w.delete(C), this.#w.size === 0 && (this.#w = null);
      }, T._telemetryTimeout), this.#w.set(C, A);
      return;
    }
    I.type ||= this.editorType, this._uiManager._eventBus.dispatch("reporttelemetry", {
      source: this,
      details: {
        type: "editing",
        data: I
      }
    });
  }
  show(I = this._isVisible) {
    this.div.classList.toggle("hidden", !I), this._isVisible = I;
  }
  enable() {
    this.div && (this.div.tabIndex = 0), this.#Z = !1;
  }
  disable() {
    this.div && (this.div.tabIndex = -1), this.#Z = !0;
  }
  renderAnnotationElement(I) {
    if (this.deleted)
      return I.hide(), null;
    let g = I.container.querySelector(".annotationContent");
    if (!g)
      g = document.createElement("div"), g.classList.add("annotationContent", this.editorType), I.container.prepend(g);
    else if (g.nodeName === "CANVAS") {
      const C = g;
      g = document.createElement("div"), g.classList.add("annotationContent", this.editorType), C.before(g);
    }
    return g;
  }
  resetAnnotationElement(I) {
    const {
      firstChild: g
    } = I.container;
    g?.nodeName === "DIV" && g.classList.contains("annotationContent") && g.remove();
  }
}
class Nl extends T {
  constructor(I) {
    super(I), this.annotationElementId = I.annotationElementId, this.deleted = !0;
  }
  serialize() {
    return this.serializeDeleted();
  }
}
const lA = 3285377520, kI = 4294901760, vI = 65535;
class JA {
  constructor(I) {
    this.h1 = I ? I & 4294967295 : lA, this.h2 = I ? I & 4294967295 : lA;
  }
  update(I) {
    let g, C;
    if (typeof I == "string") {
      g = new Uint8Array(I.length * 2), C = 0;
      for (let W = 0, Y = I.length; W < Y; W++) {
        const h = I.charCodeAt(W);
        h <= 255 ? g[C++] = h : (g[C++] = h >>> 8, g[C++] = h & 255);
      }
    } else if (ArrayBuffer.isView(I))
      g = I.slice(), C = g.byteLength;
    else
      throw new Error("Invalid data format, must be a string or TypedArray.");
    const A = C >> 2, l = C - A * 4, Z = new Uint32Array(g.buffer, 0, A);
    let i = 0, d = 0, c = this.h1, G = this.h2;
    const b = 3432918353, m = 461845907, B = b & vI, o = m & vI;
    for (let W = 0; W < A; W++)
      W & 1 ? (i = Z[W], i = i * b & kI | i * B & vI, i = i << 15 | i >>> 17, i = i * m & kI | i * o & vI, c ^= i, c = c << 13 | c >>> 19, c = c * 5 + 3864292196) : (d = Z[W], d = d * b & kI | d * B & vI, d = d << 15 | d >>> 17, d = d * m & kI | d * o & vI, G ^= d, G = G << 13 | G >>> 19, G = G * 5 + 3864292196);
    switch (i = 0, l) {
      case 3:
        i ^= g[A * 4 + 2] << 16;
      case 2:
        i ^= g[A * 4 + 1] << 8;
      case 1:
        i ^= g[A * 4], i = i * b & kI | i * B & vI, i = i << 15 | i >>> 17, i = i * m & kI | i * o & vI, A & 1 ? c ^= i : G ^= i;
    }
    this.h1 = c, this.h2 = G;
  }
  hexdigest() {
    let I = this.h1, g = this.h2;
    return I ^= g >>> 1, I = I * 3981806797 & kI | I * 36045 & vI, g = g * 4283543511 & kI | ((g << 16 | I >>> 16) * 2950163797 & kI) >>> 16, I ^= g >>> 1, I = I * 444984403 & kI | I * 60499 & vI, g = g * 3301882366 & kI | ((g << 16 | I >>> 16) * 3120437893 & kI) >>> 16, I ^= g >>> 1, (I >>> 0).toString(16).padStart(8, "0") + (g >>> 0).toString(16).padStart(8, "0");
  }
}
const RC = Object.freeze({
  map: null,
  hash: "",
  transfer: void 0
});
class LC {
  #I = !1;
  #g = null;
  #C = /* @__PURE__ */ new Map();
  constructor() {
    this.onSetModified = null, this.onResetModified = null, this.onAnnotationEditor = null;
  }
  getValue(I, g) {
    const C = this.#C.get(I);
    return C === void 0 ? g : Object.assign(g, C);
  }
  getRawValue(I) {
    return this.#C.get(I);
  }
  remove(I) {
    if (this.#C.delete(I), this.#C.size === 0 && this.resetModified(), typeof this.onAnnotationEditor == "function") {
      for (const g of this.#C.values())
        if (g instanceof T)
          return;
      this.onAnnotationEditor(null);
    }
  }
  setValue(I, g) {
    const C = this.#C.get(I);
    let A = !1;
    if (C !== void 0)
      for (const [l, Z] of Object.entries(g))
        C[l] !== Z && (A = !0, C[l] = Z);
    else
      A = !0, this.#C.set(I, g);
    A && this.#A(), g instanceof T && typeof this.onAnnotationEditor == "function" && this.onAnnotationEditor(g.constructor._type);
  }
  has(I) {
    return this.#C.has(I);
  }
  get size() {
    return this.#C.size;
  }
  #A() {
    this.#I || (this.#I = !0, typeof this.onSetModified == "function" && this.onSetModified());
  }
  resetModified() {
    this.#I && (this.#I = !1, typeof this.onResetModified == "function" && this.onResetModified());
  }
  get print() {
    return new zA(this);
  }
  get serializable() {
    if (this.#C.size === 0)
      return RC;
    const I = /* @__PURE__ */ new Map(), g = new JA(), C = [], A = /* @__PURE__ */ Object.create(null);
    let l = !1;
    for (const [Z, i] of this.#C) {
      const d = i instanceof T ? i.serialize(!1, A) : i;
      d && (I.set(Z, d), g.update(`${Z}:${JSON.stringify(d)}`), l ||= !!d.bitmap);
    }
    if (l)
      for (const Z of I.values())
        Z.bitmap && C.push(Z.bitmap);
    return I.size > 0 ? {
      map: I,
      hash: g.hexdigest(),
      transfer: C
    } : RC;
  }
  get editorStats() {
    let I = null;
    const g = /* @__PURE__ */ new Map();
    for (const C of this.#C.values()) {
      if (!(C instanceof T))
        continue;
      const A = C.telemetryFinalData;
      if (!A)
        continue;
      const {
        type: l
      } = A;
      g.has(l) || g.set(l, Object.getPrototypeOf(C).constructor), I ||= /* @__PURE__ */ Object.create(null);
      const Z = I[l] ||= /* @__PURE__ */ new Map();
      for (const [i, d] of Object.entries(A)) {
        if (i === "type")
          continue;
        let c = Z.get(i);
        c || (c = /* @__PURE__ */ new Map(), Z.set(i, c));
        const G = c.get(d) ?? 0;
        c.set(d, G + 1);
      }
    }
    for (const [C, A] of g)
      I[C] = A.computeTelemetryFinalData(I[C]);
    return I;
  }
  resetModifiedIds() {
    this.#g = null;
  }
  get modifiedIds() {
    if (this.#g)
      return this.#g;
    const I = [];
    for (const g of this.#C.values())
      !(g instanceof T) || !g.annotationElementId || !g.serialize() || I.push(g.annotationElementId);
    return this.#g = {
      ids: new Set(I),
      hash: I.join(",")
    };
  }
  [Symbol.iterator]() {
    return this.#C.entries();
  }
}
class zA extends LC {
  #I;
  constructor(I) {
    super();
    const {
      map: g,
      hash: C,
      transfer: A
    } = I.serializable, l = structuredClone(g, A ? {
      transfer: A
    } : null);
    this.#I = {
      map: l,
      hash: C,
      transfer: A
    };
  }
  get print() {
    II("Should not call PrintAnnotationStorage.print");
  }
  get serializable() {
    return this.#I;
  }
  get modifiedIds() {
    return P(this, "modifiedIds", {
      ids: /* @__PURE__ */ new Set(),
      hash: ""
    });
  }
}
class tl {
  #I = /* @__PURE__ */ new Set();
  constructor({
    ownerDocument: I = globalThis.document,
    styleElement: g = null
  }) {
    this._document = I, this.nativeFontFaces = /* @__PURE__ */ new Set(), this.styleElement = null, this.loadingRequests = [], this.loadTestFontId = 0;
  }
  addNativeFontFace(I) {
    this.nativeFontFaces.add(I), this._document.fonts.add(I);
  }
  removeNativeFontFace(I) {
    this.nativeFontFaces.delete(I), this._document.fonts.delete(I);
  }
  insertRule(I) {
    this.styleElement || (this.styleElement = this._document.createElement("style"), this._document.documentElement.getElementsByTagName("head")[0].append(this.styleElement));
    const g = this.styleElement.sheet;
    g.insertRule(I, g.cssRules.length);
  }
  clear() {
    for (const I of this.nativeFontFaces)
      this._document.fonts.delete(I);
    this.nativeFontFaces.clear(), this.#I.clear(), this.styleElement && (this.styleElement.remove(), this.styleElement = null);
  }
  async loadSystemFont({
    systemFontInfo: I,
    disableFontFace: g,
    _inspectFont: C
  }) {
    if (!(!I || this.#I.has(I.loadedName))) {
      if (WI(!g, "loadSystemFont shouldn't be called when `disableFontFace` is set."), this.isFontLoadingAPISupported) {
        const {
          loadedName: A,
          src: l,
          style: Z
        } = I, i = new FontFace(A, l, Z);
        this.addNativeFontFace(i);
        try {
          await i.load(), this.#I.add(A), C?.(I);
        } catch {
          j(`Cannot load system font: ${I.baseFontName}, installing it could help to improve PDF rendering.`), this.removeNativeFontFace(i);
        }
        return;
      }
      II("Not implemented: loadSystemFont without the Font Loading API.");
    }
  }
  async bind(I) {
    if (I.attached || I.missingFile && !I.systemFontInfo)
      return;
    if (I.attached = !0, I.systemFontInfo) {
      await this.loadSystemFont(I);
      return;
    }
    if (this.isFontLoadingAPISupported) {
      const C = I.createNativeFontFace();
      if (C) {
        this.addNativeFontFace(C);
        try {
          await C.loaded;
        } catch (A) {
          throw j(`Failed to load font '${C.family}': '${A}'.`), I.disableFontFace = !0, A;
        }
      }
      return;
    }
    const g = I.createFontFaceRule();
    if (g) {
      if (this.insertRule(g), this.isSyncFontLoadingSupported)
        return;
      await new Promise((C) => {
        const A = this._queueLoadingCallback(C);
        this._prepareFontLoadEvent(I, A);
      });
    }
  }
  get isFontLoadingAPISupported() {
    const I = !!this._document?.fonts;
    return P(this, "isFontLoadingAPISupported", I);
  }
  get isSyncFontLoadingSupported() {
    return P(this, "isSyncFontLoadingSupported", HI || XI.platform.isFirefox);
  }
  _queueLoadingCallback(I) {
    function g() {
      for (WI(!A.done, "completeRequest() cannot be called twice."), A.done = !0; C.length > 0 && C[0].done; ) {
        const l = C.shift();
        setTimeout(l.callback, 0);
      }
    }
    const {
      loadingRequests: C
    } = this, A = {
      done: !1,
      complete: g,
      callback: I
    };
    return C.push(A), A;
  }
  get _loadTestFont() {
    const I = atob("T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQAFQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAAALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgAAAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACMAooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4DIP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAAAAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUAAQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgABAAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABYAAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAAAC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAAAAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQACAQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTjFQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==");
    return P(this, "_loadTestFont", I);
  }
  _prepareFontLoadEvent(I, g) {
    function C(n, V) {
      return n.charCodeAt(V) << 24 | n.charCodeAt(V + 1) << 16 | n.charCodeAt(V + 2) << 8 | n.charCodeAt(V + 3) & 255;
    }
    function A(n, V, X, y) {
      const N = n.substring(0, V), t = n.substring(V + X);
      return N + y + t;
    }
    let l, Z;
    const i = this._document.createElement("canvas");
    i.width = 1, i.height = 1;
    const d = i.getContext("2d");
    let c = 0;
    function G(n, V) {
      if (++c > 30) {
        j("Load test font never loaded."), V();
        return;
      }
      if (d.font = "30px " + n, d.fillText(".", 0, 20), d.getImageData(0, 0, 1, 1).data[3] > 0) {
        V();
        return;
      }
      setTimeout(G.bind(null, n, V));
    }
    const b = `lt${Date.now()}${this.loadTestFontId++}`;
    let m = this._loadTestFont;
    m = A(m, 976, b.length, b);
    const o = 16, W = 1482184792;
    let Y = C(m, o);
    for (l = 0, Z = b.length - 3; l < Z; l += 4)
      Y = Y - W + C(b, l) | 0;
    l < b.length && (Y = Y - W + C(b + "XXX", l) | 0), m = A(m, o, 4, Bl(Y));
    const h = `url(data:font/opentype;base64,${btoa(m)});`, a = `@font-face {font-family:"${b}";src:${h}}`;
    this.insertRule(a);
    const w = this._document.createElement("div");
    w.style.visibility = "hidden", w.style.width = w.style.height = "10px", w.style.position = "absolute", w.style.top = w.style.left = "0px";
    for (const n of [I.loadedName, b]) {
      const V = this._document.createElement("span");
      V.textContent = "Hi", V.style.fontFamily = n, w.append(V);
    }
    this._document.body.append(w), G(b, () => {
      w.remove(), g.complete();
    });
  }
}
class Rl {
  constructor(I, g = null) {
    this.compiledGlyphs = /* @__PURE__ */ Object.create(null);
    for (const C in I)
      this[C] = I[C];
    this._inspectFont = g;
  }
  createNativeFontFace() {
    if (!this.data || this.disableFontFace)
      return null;
    let I;
    if (!this.cssFontInfo)
      I = new FontFace(this.loadedName, this.data, {});
    else {
      const g = {
        weight: this.cssFontInfo.fontWeight
      };
      this.cssFontInfo.italicAngle && (g.style = `oblique ${this.cssFontInfo.italicAngle}deg`), I = new FontFace(this.cssFontInfo.fontFamily, this.data, g);
    }
    return this._inspectFont?.(this), I;
  }
  createFontFaceRule() {
    if (!this.data || this.disableFontFace)
      return null;
    const I = `url(data:${this.mimetype};base64,${KA(this.data)});`;
    let g;
    if (!this.cssFontInfo)
      g = `@font-face {font-family:"${this.loadedName}";src:${I}}`;
    else {
      let C = `font-weight: ${this.cssFontInfo.fontWeight};`;
      this.cssFontInfo.italicAngle && (C += `font-style: oblique ${this.cssFontInfo.italicAngle}deg;`), g = `@font-face {font-family:"${this.cssFontInfo.fontFamily}";${C}src:${I}}`;
    }
    return this._inspectFont?.(this, I), g;
  }
  getPathGenerator(I, g) {
    if (this.compiledGlyphs[g] !== void 0)
      return this.compiledGlyphs[g];
    const C = this.loadedName + "_path_" + g;
    let A;
    try {
      A = I.get(C);
    } catch (Z) {
      j(`getPathGenerator - ignoring character: "${Z}".`);
    }
    const l = new Path2D(A || "");
    return this.fontExtraProperties || I.delete(C), this.compiledGlyphs[g] = l;
  }
}
function el(s) {
  if (s instanceof URL)
    return s.href;
  if (typeof s == "string") {
    if (HI)
      return s;
    const I = URL.parse(s, window.location);
    if (I)
      return I.href;
  }
  throw new Error("Invalid PDF url data: either string or URL-object is expected in the url property.");
}
function Hl(s) {
  if (HI && typeof Buffer < "u" && s instanceof Buffer)
    throw new Error("Please provide binary data as `Uint8Array`, rather than `Buffer`.");
  if (s instanceof Uint8Array && s.byteLength === s.buffer.byteLength)
    return s;
  if (typeof s == "string")
    return kg(s);
  if (s instanceof ArrayBuffer || ArrayBuffer.isView(s) || typeof s == "object" && !isNaN(s?.length))
    return new Uint8Array(s);
  throw new Error("Invalid PDF binary data: either TypedArray, string, or array-like object is expected in the data property.");
}
function Pg(s) {
  if (typeof s != "string")
    return null;
  if (s.endsWith("/"))
    return s;
  throw new Error(`Invalid factory url: "${s}" must include trailing slash.`);
}
const eC = (s) => typeof s == "object" && Number.isInteger(s?.num) && s.num >= 0 && Number.isInteger(s?.gen) && s.gen >= 0, ul = (s) => typeof s == "object" && typeof s?.name == "string", kA = Yl.bind(null, eC, ul);
class Ml {
  #I = /* @__PURE__ */ new Map();
  #g = Promise.resolve();
  postMessage(I, g) {
    const C = {
      data: structuredClone(I, g ? {
        transfer: g
      } : null)
    };
    this.#g.then(() => {
      for (const [A] of this.#I)
        A.call(this, C);
    });
  }
  addEventListener(I, g, C = null) {
    let A = null;
    if (C?.signal instanceof AbortSignal) {
      const {
        signal: l
      } = C;
      if (l.aborted) {
        j("LoopbackPort - cannot use an `aborted` signal.");
        return;
      }
      const Z = () => this.removeEventListener(I, g);
      A = () => l.removeEventListener("abort", Z), l.addEventListener("abort", Z);
    }
    this.#I.set(g, A);
  }
  removeEventListener(I, g) {
    this.#I.get(g)?.(), this.#I.delete(g);
  }
  terminate() {
    for (const [, I] of this.#I)
      I?.();
    this.#I.clear();
  }
}
const fg = {
  DATA: 1,
  ERROR: 2
}, oI = {
  CANCEL: 1,
  CANCEL_COMPLETE: 2,
  CLOSE: 3,
  ENQUEUE: 4,
  ERROR: 5,
  PULL: 6,
  PULL_COMPLETE: 7,
  START_COMPLETE: 8
};
function ZA() {
}
function KI(s) {
  if (s instanceof gg || s instanceof AC || s instanceof gA || s instanceof pg || s instanceof wC)
    return s;
  switch (s instanceof Error || typeof s == "object" && s !== null || II('wrapReason: Expected "reason" to be a (possibly cloned) Error.'), s.name) {
    case "AbortException":
      return new gg(s.message);
    case "InvalidPDFException":
      return new AC(s.message);
    case "PasswordException":
      return new gA(s.message, s.code);
    case "ResponseException":
      return new pg(s.message, s.status, s.missing);
    case "UnknownErrorException":
      return new wC(s.message, s.details);
  }
  return new wC(s.message, s.toString());
}
class Kg {
  #I = new AbortController();
  constructor(I, g, C) {
    this.sourceName = I, this.targetName = g, this.comObj = C, this.callbackId = 1, this.streamId = 1, this.streamSinks = /* @__PURE__ */ Object.create(null), this.streamControllers = /* @__PURE__ */ Object.create(null), this.callbackCapabilities = /* @__PURE__ */ Object.create(null), this.actionHandler = /* @__PURE__ */ Object.create(null), C.addEventListener("message", this.#g.bind(this), {
      signal: this.#I.signal
    });
  }
  #g({
    data: I
  }) {
    if (I.targetName !== this.sourceName)
      return;
    if (I.stream) {
      this.#A(I);
      return;
    }
    if (I.callback) {
      const C = I.callbackId, A = this.callbackCapabilities[C];
      if (!A)
        throw new Error(`Cannot resolve callback ${C}`);
      if (delete this.callbackCapabilities[C], I.callback === fg.DATA)
        A.resolve(I.data);
      else if (I.callback === fg.ERROR)
        A.reject(KI(I.reason));
      else
        throw new Error("Unexpected callback case");
      return;
    }
    const g = this.actionHandler[I.action];
    if (!g)
      throw new Error(`Unknown action from worker: ${I.action}`);
    if (I.callbackId) {
      const C = this.sourceName, A = I.sourceName, l = this.comObj;
      Promise.try(g, I.data).then(function(Z) {
        l.postMessage({
          sourceName: C,
          targetName: A,
          callback: fg.DATA,
          callbackId: I.callbackId,
          data: Z
        });
      }, function(Z) {
        l.postMessage({
          sourceName: C,
          targetName: A,
          callback: fg.ERROR,
          callbackId: I.callbackId,
          reason: KI(Z)
        });
      });
      return;
    }
    if (I.streamId) {
      this.#C(I);
      return;
    }
    g(I.data);
  }
  on(I, g) {
    const C = this.actionHandler;
    if (C[I])
      throw new Error(`There is already an actionName called "${I}"`);
    C[I] = g;
  }
  send(I, g, C) {
    this.comObj.postMessage({
      sourceName: this.sourceName,
      targetName: this.targetName,
      action: I,
      data: g
    }, C);
  }
  sendWithPromise(I, g, C) {
    const A = this.callbackId++, l = Promise.withResolvers();
    this.callbackCapabilities[A] = l;
    try {
      this.comObj.postMessage({
        sourceName: this.sourceName,
        targetName: this.targetName,
        action: I,
        callbackId: A,
        data: g
      }, C);
    } catch (Z) {
      l.reject(Z);
    }
    return l.promise;
  }
  sendWithStream(I, g, C, A) {
    const l = this.streamId++, Z = this.sourceName, i = this.targetName, d = this.comObj;
    return new ReadableStream({
      start: (c) => {
        const G = Promise.withResolvers();
        return this.streamControllers[l] = {
          controller: c,
          startCall: G,
          pullCall: null,
          cancelCall: null,
          isClosed: !1
        }, d.postMessage({
          sourceName: Z,
          targetName: i,
          action: I,
          streamId: l,
          data: g,
          desiredSize: c.desiredSize
        }, A), G.promise;
      },
      pull: (c) => {
        const G = Promise.withResolvers();
        return this.streamControllers[l].pullCall = G, d.postMessage({
          sourceName: Z,
          targetName: i,
          stream: oI.PULL,
          streamId: l,
          desiredSize: c.desiredSize
        }), G.promise;
      },
      cancel: (c) => {
        WI(c instanceof Error, "cancel must have a valid reason");
        const G = Promise.withResolvers();
        return this.streamControllers[l].cancelCall = G, this.streamControllers[l].isClosed = !0, d.postMessage({
          sourceName: Z,
          targetName: i,
          stream: oI.CANCEL,
          streamId: l,
          reason: KI(c)
        }), G.promise;
      }
    }, C);
  }
  #C(I) {
    const g = I.streamId, C = this.sourceName, A = I.sourceName, l = this.comObj, Z = this, i = this.actionHandler[I.action], d = {
      enqueue(c, G = 1, b) {
        if (this.isCancelled)
          return;
        const m = this.desiredSize;
        this.desiredSize -= G, m > 0 && this.desiredSize <= 0 && (this.sinkCapability = Promise.withResolvers(), this.ready = this.sinkCapability.promise), l.postMessage({
          sourceName: C,
          targetName: A,
          stream: oI.ENQUEUE,
          streamId: g,
          chunk: c
        }, b);
      },
      close() {
        this.isCancelled || (this.isCancelled = !0, l.postMessage({
          sourceName: C,
          targetName: A,
          stream: oI.CLOSE,
          streamId: g
        }), delete Z.streamSinks[g]);
      },
      error(c) {
        WI(c instanceof Error, "error must have a valid reason"), !this.isCancelled && (this.isCancelled = !0, l.postMessage({
          sourceName: C,
          targetName: A,
          stream: oI.ERROR,
          streamId: g,
          reason: KI(c)
        }));
      },
      sinkCapability: Promise.withResolvers(),
      onPull: null,
      onCancel: null,
      isCancelled: !1,
      desiredSize: I.desiredSize,
      ready: null
    };
    d.sinkCapability.resolve(), d.ready = d.sinkCapability.promise, this.streamSinks[g] = d, Promise.try(i, I.data, d).then(function() {
      l.postMessage({
        sourceName: C,
        targetName: A,
        stream: oI.START_COMPLETE,
        streamId: g,
        success: !0
      });
    }, function(c) {
      l.postMessage({
        sourceName: C,
        targetName: A,
        stream: oI.START_COMPLETE,
        streamId: g,
        reason: KI(c)
      });
    });
  }
  #A(I) {
    const g = I.streamId, C = this.sourceName, A = I.sourceName, l = this.comObj, Z = this.streamControllers[g], i = this.streamSinks[g];
    switch (I.stream) {
      case oI.START_COMPLETE:
        I.success ? Z.startCall.resolve() : Z.startCall.reject(KI(I.reason));
        break;
      case oI.PULL_COMPLETE:
        I.success ? Z.pullCall.resolve() : Z.pullCall.reject(KI(I.reason));
        break;
      case oI.PULL:
        if (!i) {
          l.postMessage({
            sourceName: C,
            targetName: A,
            stream: oI.PULL_COMPLETE,
            streamId: g,
            success: !0
          });
          break;
        }
        i.desiredSize <= 0 && I.desiredSize > 0 && i.sinkCapability.resolve(), i.desiredSize = I.desiredSize, Promise.try(i.onPull || ZA).then(function() {
          l.postMessage({
            sourceName: C,
            targetName: A,
            stream: oI.PULL_COMPLETE,
            streamId: g,
            success: !0
          });
        }, function(c) {
          l.postMessage({
            sourceName: C,
            targetName: A,
            stream: oI.PULL_COMPLETE,
            streamId: g,
            reason: KI(c)
          });
        });
        break;
      case oI.ENQUEUE:
        if (WI(Z, "enqueue should have stream controller"), Z.isClosed)
          break;
        Z.controller.enqueue(I.chunk);
        break;
      case oI.CLOSE:
        if (WI(Z, "close should have stream controller"), Z.isClosed)
          break;
        Z.isClosed = !0, Z.controller.close(), this.#Z(Z, g);
        break;
      case oI.ERROR:
        WI(Z, "error should have stream controller"), Z.controller.error(KI(I.reason)), this.#Z(Z, g);
        break;
      case oI.CANCEL_COMPLETE:
        I.success ? Z.cancelCall.resolve() : Z.cancelCall.reject(KI(I.reason)), this.#Z(Z, g);
        break;
      case oI.CANCEL:
        if (!i)
          break;
        const d = KI(I.reason);
        Promise.try(i.onCancel || ZA, d).then(function() {
          l.postMessage({
            sourceName: C,
            targetName: A,
            stream: oI.CANCEL_COMPLETE,
            streamId: g,
            success: !0
          });
        }, function(c) {
          l.postMessage({
            sourceName: C,
            targetName: A,
            stream: oI.CANCEL_COMPLETE,
            streamId: g,
            reason: KI(c)
          });
        }), i.sinkCapability.reject(d), i.isCancelled = !0, delete this.streamSinks[g];
        break;
      default:
        throw new Error("Unexpected stream case");
    }
  }
  async #Z(I, g) {
    await Promise.allSettled([I.startCall?.promise, I.pullCall?.promise, I.cancelCall?.promise]), delete this.streamControllers[g];
  }
  destroy() {
    this.#I?.abort(), this.#I = null;
  }
}
class LA {
  #I = !1;
  constructor({
    enableHWA: I = !1
  }) {
    this.#I = I;
  }
  create(I, g) {
    if (I <= 0 || g <= 0)
      throw new Error("Invalid canvas size");
    const C = this._createCanvas(I, g);
    return {
      canvas: C,
      context: C.getContext("2d", {
        willReadFrequently: !this.#I
      })
    };
  }
  reset(I, g, C) {
    if (!I.canvas)
      throw new Error("Canvas is not specified");
    if (g <= 0 || C <= 0)
      throw new Error("Invalid canvas size");
    I.canvas.width = g, I.canvas.height = C;
  }
  destroy(I) {
    if (!I.canvas)
      throw new Error("Canvas is not specified");
    I.canvas.width = 0, I.canvas.height = 0, I.canvas = null, I.context = null;
  }
  _createCanvas(I, g) {
    II("Abstract method `_createCanvas` called.");
  }
}
class Kl extends LA {
  constructor({
    ownerDocument: I = globalThis.document,
    enableHWA: g = !1
  }) {
    super({
      enableHWA: g
    }), this._document = I;
  }
  _createCanvas(I, g) {
    const C = this._document.createElement("canvas");
    return C.width = I, C.height = g, C;
  }
}
class TA {
  constructor({
    baseUrl: I = null,
    isCompressed: g = !0
  }) {
    this.baseUrl = I, this.isCompressed = g;
  }
  async fetch({
    name: I
  }) {
    if (!this.baseUrl)
      throw new Error("Ensure that the `cMapUrl` and `cMapPacked` API parameters are provided.");
    if (!I)
      throw new Error("CMap name must be specified.");
    const g = this.baseUrl + I + (this.isCompressed ? ".bcmap" : "");
    return this._fetch(g).then((C) => ({
      cMapData: C,
      isCompressed: this.isCompressed
    })).catch((C) => {
      throw new Error(`Unable to load ${this.isCompressed ? "binary " : ""}CMap at: ${g}`);
    });
  }
  async _fetch(I) {
    II("Abstract method `_fetch` called.");
  }
}
class iA extends TA {
  async _fetch(I) {
    const g = await tg(I, this.isCompressed ? "arraybuffer" : "text");
    return g instanceof ArrayBuffer ? new Uint8Array(g) : kg(g);
  }
}
x(2489);
class QA {
  addFilter(I) {
    return "none";
  }
  addHCMFilter(I, g) {
    return "none";
  }
  addAlphaFilter(I) {
    return "none";
  }
  addLuminosityFilter(I) {
    return "none";
  }
  addHighlightHCMFilter(I, g, C, A, l) {
    return "none";
  }
  destroy(I = !1) {
  }
}
class Dl extends QA {
  #I;
  #g;
  #C;
  #A;
  #Z;
  #l;
  #i = 0;
  constructor({
    docId: I,
    ownerDocument: g = globalThis.document
  }) {
    super(), this.#A = I, this.#Z = g;
  }
  get #d() {
    return this.#g ||= /* @__PURE__ */ new Map();
  }
  get #c() {
    return this.#l ||= /* @__PURE__ */ new Map();
  }
  get #s() {
    if (!this.#C) {
      const I = this.#Z.createElement("div"), {
        style: g
      } = I;
      g.visibility = "hidden", g.contain = "strict", g.width = g.height = 0, g.position = "absolute", g.top = g.left = 0, g.zIndex = -1;
      const C = this.#Z.createElementNS(fI, "svg");
      C.setAttribute("width", 0), C.setAttribute("height", 0), this.#C = this.#Z.createElementNS(fI, "defs"), I.append(C), C.append(this.#C), this.#Z.body.append(I);
    }
    return this.#C;
  }
  #m(I) {
    if (I.length === 1) {
      const d = I[0], c = new Array(256);
      for (let b = 0; b < 256; b++)
        c[b] = d[b] / 255;
      const G = c.join(",");
      return [G, G, G];
    }
    const [g, C, A] = I, l = new Array(256), Z = new Array(256), i = new Array(256);
    for (let d = 0; d < 256; d++)
      l[d] = g[d] / 255, Z[d] = C[d] / 255, i[d] = A[d] / 255;
    return [l.join(","), Z.join(","), i.join(",")];
  }
  #G(I) {
    if (this.#I === void 0) {
      this.#I = "";
      const g = this.#Z.URL;
      g !== this.#Z.baseURI && (Tg(g) ? j('#createUrl: ignore "data:"-URL for performance reasons.') : this.#I = pC(g, ""));
    }
    return `url(${this.#I}#${I})`;
  }
  addFilter(I) {
    if (!I)
      return "none";
    let g = this.#d.get(I);
    if (g)
      return g;
    const [C, A, l] = this.#m(I), Z = I.length === 1 ? C : `${C}${A}${l}`;
    if (g = this.#d.get(Z), g)
      return this.#d.set(I, g), g;
    const i = `g_${this.#A}_transfer_map_${this.#i++}`, d = this.#G(i);
    this.#d.set(I, d), this.#d.set(Z, d);
    const c = this.#o(i);
    return this.#h(C, A, l, c), d;
  }
  addHCMFilter(I, g) {
    const C = `${I}-${g}`, A = "base";
    let l = this.#c.get(A);
    if (l?.key === C || (l ? (l.filter?.remove(), l.key = C, l.url = "none", l.filter = null) : (l = {
      key: C,
      url: "none",
      filter: null
    }, this.#c.set(A, l)), !I || !g))
      return l.url;
    const Z = this.#Y(I);
    I = J.makeHexColor(...Z);
    const i = this.#Y(g);
    if (g = J.makeHexColor(...i), this.#s.style.color = "", I === "#000000" && g === "#ffffff" || I === g)
      return l.url;
    const d = new Array(256);
    for (let B = 0; B <= 255; B++) {
      const o = B / 255;
      d[B] = o <= 0.03928 ? o / 12.92 : ((o + 0.055) / 1.055) ** 2.4;
    }
    const c = d.join(","), G = `g_${this.#A}_hcm_filter`, b = l.filter = this.#o(G);
    this.#h(c, c, c, b), this.#W(b);
    const m = (B, o) => {
      const W = Z[B] / 255, Y = i[B] / 255, h = new Array(o + 1);
      for (let a = 0; a <= o; a++)
        h[a] = W + a / o * (Y - W);
      return h.join(",");
    };
    return this.#h(m(0, 5), m(1, 5), m(2, 5), b), l.url = this.#G(G), l.url;
  }
  addAlphaFilter(I) {
    let g = this.#d.get(I);
    if (g)
      return g;
    const [C] = this.#m([I]), A = `alpha_${C}`;
    if (g = this.#d.get(A), g)
      return this.#d.set(I, g), g;
    const l = `g_${this.#A}_alpha_map_${this.#i++}`, Z = this.#G(l);
    this.#d.set(I, Z), this.#d.set(A, Z);
    const i = this.#o(l);
    return this.#a(C, i), Z;
  }
  addLuminosityFilter(I) {
    let g = this.#d.get(I || "luminosity");
    if (g)
      return g;
    let C, A;
    if (I ? ([C] = this.#m([I]), A = `luminosity_${C}`) : A = "luminosity", g = this.#d.get(A), g)
      return this.#d.set(I, g), g;
    const l = `g_${this.#A}_luminosity_map_${this.#i++}`, Z = this.#G(l);
    this.#d.set(I, Z), this.#d.set(A, Z);
    const i = this.#o(l);
    return this.#B(i), I && this.#a(C, i), Z;
  }
  addHighlightHCMFilter(I, g, C, A, l) {
    const Z = `${g}-${C}-${A}-${l}`;
    let i = this.#c.get(I);
    if (i?.key === Z || (i ? (i.filter?.remove(), i.key = Z, i.url = "none", i.filter = null) : (i = {
      key: Z,
      url: "none",
      filter: null
    }, this.#c.set(I, i)), !g || !C))
      return i.url;
    const [d, c] = [g, C].map(this.#Y.bind(this));
    let G = Math.round(0.2126 * d[0] + 0.7152 * d[1] + 0.0722 * d[2]), b = Math.round(0.2126 * c[0] + 0.7152 * c[1] + 0.0722 * c[2]), [m, B] = [A, l].map(this.#Y.bind(this));
    b < G && ([G, b, m, B] = [b, G, B, m]), this.#s.style.color = "";
    const o = (h, a, w) => {
      const n = new Array(256), V = (b - G) / w, X = h / 255, y = (a - h) / (255 * w);
      let N = 0;
      for (let t = 0; t <= w; t++) {
        const e = Math.round(G + t * V), R = X + t * y;
        for (let F = N; F <= e; F++)
          n[F] = R;
        N = e + 1;
      }
      for (let t = N; t < 256; t++)
        n[t] = n[N - 1];
      return n.join(",");
    }, W = `g_${this.#A}_hcm_${I}_filter`, Y = i.filter = this.#o(W);
    return this.#W(Y), this.#h(o(m[0], B[0], 5), o(m[1], B[1], 5), o(m[2], B[2], 5), Y), i.url = this.#G(W), i.url;
  }
  destroy(I = !1) {
    I && this.#l?.size || (this.#C?.parentNode.parentNode.remove(), this.#C = null, this.#g?.clear(), this.#g = null, this.#l?.clear(), this.#l = null, this.#i = 0);
  }
  #B(I) {
    const g = this.#Z.createElementNS(fI, "feColorMatrix");
    g.setAttribute("type", "matrix"), g.setAttribute("values", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0.59 0.11 0 0"), I.append(g);
  }
  #W(I) {
    const g = this.#Z.createElementNS(fI, "feColorMatrix");
    g.setAttribute("type", "matrix"), g.setAttribute("values", "0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0 0 0 1 0"), I.append(g);
  }
  #o(I) {
    const g = this.#Z.createElementNS(fI, "filter");
    return g.setAttribute("color-interpolation-filters", "sRGB"), g.setAttribute("id", I), this.#s.append(g), g;
  }
  #b(I, g, C) {
    const A = this.#Z.createElementNS(fI, g);
    A.setAttribute("type", "discrete"), A.setAttribute("tableValues", C), I.append(A);
  }
  #h(I, g, C, A) {
    const l = this.#Z.createElementNS(fI, "feComponentTransfer");
    A.append(l), this.#b(l, "feFuncR", I), this.#b(l, "feFuncG", g), this.#b(l, "feFuncB", C);
  }
  #a(I, g) {
    const C = this.#Z.createElementNS(fI, "feComponentTransfer");
    g.append(C), this.#b(C, "feFuncA", I);
  }
  #Y(I) {
    return this.#s.style.color = I, Qg(getComputedStyle(this.#s).getPropertyValue("color"));
  }
}
class rA {
  constructor({
    baseUrl: I = null
  }) {
    this.baseUrl = I;
  }
  async fetch({
    filename: I
  }) {
    if (!this.baseUrl)
      throw new Error("Ensure that the `standardFontDataUrl` API parameter is provided.");
    if (!I)
      throw new Error("Font filename must be specified.");
    const g = `${this.baseUrl}${I}`;
    return this._fetch(g).catch((C) => {
      throw new Error(`Unable to load font data at: ${g}`);
    });
  }
  async _fetch(I) {
    II("Abstract method `_fetch` called.");
  }
}
class dA extends rA {
  async _fetch(I) {
    const g = await tg(I, "arraybuffer");
    return new Uint8Array(g);
  }
}
class jA {
  constructor({
    baseUrl: I = null
  }) {
    this.baseUrl = I;
  }
  async fetch({
    filename: I
  }) {
    if (!this.baseUrl)
      throw new Error("Ensure that the `wasmUrl` API parameter is provided.");
    if (!I)
      throw new Error("Wasm filename must be specified.");
    const g = `${this.baseUrl}${I}`;
    return this._fetch(g).catch((C) => {
      throw new Error(`Unable to load wasm data at: ${g}`);
    });
  }
  async _fetch(I) {
    II("Abstract method `_fetch` called.");
  }
}
class cA extends jA {
  async _fetch(I) {
    const g = await tg(I, "arraybuffer");
    return new Uint8Array(g);
  }
}
if (HI) {
  let s;
  try {
    const I = process.getBuiltinModule("module").createRequire(import.meta.url);
    try {
      s = I("@napi-rs/canvas");
    } catch (g) {
      j(`Cannot load "@napi-rs/canvas" package: "${g}".`);
    }
  } catch (I) {
    j(`Cannot access the \`require\` function: "${I}".`);
  }
  globalThis.DOMMatrix || (s?.DOMMatrix ? globalThis.DOMMatrix = s.DOMMatrix : j("Cannot polyfill `DOMMatrix`, rendering may be broken.")), globalThis.ImageData || (s?.ImageData ? globalThis.ImageData = s.ImageData : j("Cannot polyfill `ImageData`, rendering may be broken.")), globalThis.Path2D || (s?.Path2D ? globalThis.Path2D = s.Path2D : j("Cannot polyfill `Path2D`, rendering may be broken.")), globalThis.navigator?.language || (globalThis.navigator = {
    language: "en-US",
    platform: "",
    userAgent: ""
  });
}
async function TC(s) {
  const g = await process.getBuiltinModule("fs").promises.readFile(s);
  return new Uint8Array(g);
}
class Sl extends QA {
}
class pl extends LA {
  _createCanvas(I, g) {
    return process.getBuiltinModule("module").createRequire(import.meta.url)("@napi-rs/canvas").createCanvas(I, g);
  }
}
class Fl extends TA {
  async _fetch(I) {
    return TC(I);
  }
}
class Jl extends rA {
  async _fetch(I) {
    return TC(I);
  }
}
class zl extends jA {
  async _fetch(I) {
    return TC(I);
  }
}
x(7588);
const hg = "__forcedDependency";
class kl {
  #I = {
    __proto__: null
  };
  #g = {
    __proto__: null,
    transform: [],
    moveText: [],
    sameLineText: [],
    [hg]: []
  };
  #C = /* @__PURE__ */ new Map();
  #A = [];
  #Z = [];
  #l = [[1, 0, 0, 1, 0, 0]];
  #i = [-1 / 0, -1 / 0, 1 / 0, 1 / 0];
  #d = new Float64Array([1 / 0, 1 / 0, -1 / 0, -1 / 0]);
  #c = -1;
  #s = /* @__PURE__ */ new Set();
  #m = /* @__PURE__ */ new Map();
  #G = /* @__PURE__ */ new Map();
  #B;
  #W;
  constructor(I) {
    this.#B = I.width, this.#W = I.height;
  }
  save(I) {
    return this.#I = {
      __proto__: this.#I
    }, this.#g = {
      __proto__: this.#g,
      transform: {
        __proto__: this.#g.transform
      },
      moveText: {
        __proto__: this.#g.moveText
      },
      sameLineText: {
        __proto__: this.#g.sameLineText
      },
      [hg]: {
        __proto__: this.#g[hg]
      }
    }, this.#i = {
      __proto__: this.#i
    }, this.#A.push([I, null]), this;
  }
  restore(I) {
    const g = Object.getPrototypeOf(this.#I);
    if (g === null)
      return this;
    this.#I = g, this.#g = Object.getPrototypeOf(this.#g), this.#i = Object.getPrototypeOf(this.#i);
    const C = this.#A.pop();
    return C !== void 0 && (C[1] = I), this;
  }
  recordOpenMarker(I) {
    return this.#A.push([I, null]), this;
  }
  getOpenMarker() {
    return this.#A.length === 0 ? null : this.#A.at(-1)[0];
  }
  recordCloseMarker(I) {
    const g = this.#A.pop();
    return g !== void 0 && (g[1] = I), this;
  }
  beginMarkedContent(I) {
    return this.#Z.push([I, null]), this;
  }
  endMarkedContent(I) {
    const g = this.#Z.pop();
    return g !== void 0 && (g[1] = I), this;
  }
  pushBaseTransform(I) {
    return this.#l.push(J.multiplyByDOMMatrix(this.#l.at(-1), I.getTransform())), this;
  }
  popBaseTransform() {
    return this.#l.length > 1 && this.#l.pop(), this;
  }
  recordSimpleData(I, g) {
    return this.#I[I] = g, this;
  }
  recordIncrementalData(I, g) {
    return this.#g[I].push(g), this;
  }
  resetIncrementalData(I, g) {
    return this.#g[I].length = 0, this;
  }
  recordNamedData(I, g) {
    return this.#C.set(I, g), this;
  }
  recordFutureForcedDependency(I, g) {
    return this.recordIncrementalData(hg, g), this;
  }
  inheritSimpleDataAsFutureForcedDependencies(I) {
    for (const g of I)
      g in this.#I && this.recordFutureForcedDependency(g, this.#I[g]);
    return this;
  }
  inheritPendingDependenciesAsFutureForcedDependencies() {
    for (const I of this.#s)
      this.recordFutureForcedDependency(hg, I);
    return this;
  }
  resetBBox(I) {
    return this.#c = I, this.#d[0] = 1 / 0, this.#d[1] = 1 / 0, this.#d[2] = -1 / 0, this.#d[3] = -1 / 0, this;
  }
  get hasPendingBBox() {
    return this.#c !== -1;
  }
  recordClipBox(I, g, C, A, l, Z) {
    const i = J.multiplyByDOMMatrix(this.#l.at(-1), g.getTransform()), d = [1 / 0, 1 / 0, -1 / 0, -1 / 0];
    J.axialAlignedBoundingBox([C, l, A, Z], i, d);
    const c = J.intersect(this.#i, d);
    return c ? (this.#i[0] = c[0], this.#i[1] = c[1], this.#i[2] = c[2], this.#i[3] = c[3]) : (this.#i[0] = this.#i[1] = 1 / 0, this.#i[2] = this.#i[3] = -1 / 0), this;
  }
  recordBBox(I, g, C, A, l, Z) {
    const i = this.#i;
    if (i[0] === 1 / 0)
      return this;
    const d = J.multiplyByDOMMatrix(this.#l.at(-1), g.getTransform());
    if (i[0] === -1 / 0)
      return J.axialAlignedBoundingBox([C, l, A, Z], d, this.#d), this;
    const c = [1 / 0, 1 / 0, -1 / 0, -1 / 0];
    return J.axialAlignedBoundingBox([C, l, A, Z], d, c), this.#d[0] = Math.min(this.#d[0], Math.max(c[0], i[0])), this.#d[1] = Math.min(this.#d[1], Math.max(c[1], i[1])), this.#d[2] = Math.max(this.#d[2], Math.min(c[2], i[2])), this.#d[3] = Math.max(this.#d[3], Math.min(c[3], i[3])), this;
  }
  recordCharacterBBox(I, g, C, A = 1, l = 0, Z = 0, i) {
    const d = C.bbox;
    let c, G;
    if (d && (c = d[2] !== d[0] && d[3] !== d[1] && this.#G.get(C), c !== !1 && (G = [0, 0, 0, 0], J.axialAlignedBoundingBox(d, C.fontMatrix, G), (A !== 1 || l !== 0 || Z !== 0) && J.scaleMinMax([A, 0, 0, -A, l, Z], G), c)))
      return this.recordBBox(I, g, G[0], G[2], G[1], G[3]);
    if (!i)
      return this.recordFullPageBBox(I);
    const b = i();
    return d && G && c === void 0 && (c = G[0] <= l - b.actualBoundingBoxLeft && G[2] >= l + b.actualBoundingBoxRight && G[1] <= Z - b.actualBoundingBoxAscent && G[3] >= Z + b.actualBoundingBoxDescent, this.#G.set(C, c), c) ? this.recordBBox(I, g, G[0], G[2], G[1], G[3]) : this.recordBBox(I, g, l - b.actualBoundingBoxLeft, l + b.actualBoundingBoxRight, Z - b.actualBoundingBoxAscent, Z + b.actualBoundingBoxDescent);
  }
  recordFullPageBBox(I) {
    return this.#d[0] = Math.max(0, this.#i[0]), this.#d[1] = Math.max(0, this.#i[1]), this.#d[2] = Math.min(this.#B, this.#i[2]), this.#d[3] = Math.min(this.#W, this.#i[3]), this;
  }
  getSimpleIndex(I) {
    return this.#I[I];
  }
  recordDependencies(I, g) {
    const C = this.#s, A = this.#I, l = this.#g;
    for (const Z of g)
      Z in this.#I ? C.add(A[Z]) : Z in l && l[Z].forEach(C.add, C);
    return this;
  }
  copyDependenciesFromIncrementalOperation(I, g) {
    const C = this.#m, A = this.#s;
    for (const l of this.#g[g])
      C.get(l).dependencies.forEach(A.add, A.add(l));
    return this;
  }
  recordNamedDependency(I, g) {
    return this.#C.has(g) && this.#s.add(this.#C.get(g)), this;
  }
  recordOperation(I, g = !1) {
    this.recordDependencies(I, [hg]);
    const C = new Set(this.#s), A = this.#A.concat(this.#Z), l = this.#c === I ? {
      minX: this.#d[0],
      minY: this.#d[1],
      maxX: this.#d[2],
      maxY: this.#d[3]
    } : null;
    return this.#m.set(I, {
      bbox: l,
      pairs: A,
      dependencies: C
    }), g || (this.#c = -1), this.#s.clear(), this;
  }
  bboxToClipBoxDropOperation(I) {
    return this.#c !== -1 && (this.#c = -1, this.#i[0] = Math.max(this.#i[0], this.#d[0]), this.#i[1] = Math.max(this.#i[1], this.#d[1]), this.#i[2] = Math.min(this.#i[2], this.#d[2]), this.#i[3] = Math.min(this.#i[3], this.#d[3])), this.#s.clear(), this;
  }
  _takePendingDependencies() {
    const I = this.#s;
    return this.#s = /* @__PURE__ */ new Set(), I;
  }
  _extractOperation(I) {
    const g = this.#m.get(I);
    return this.#m.delete(I), g;
  }
  _pushPendingDependencies(I) {
    for (const g of I)
      this.#s.add(g);
  }
  take() {
    return this.#G.clear(), Array.from(this.#m, ([I, {
      bbox: g,
      pairs: C,
      dependencies: A
    }]) => (C.forEach((l) => l.forEach(A.add, A)), A.delete(I), {
      minX: (g?.minX ?? 0) / this.#B,
      maxX: (g?.maxX ?? this.#B) / this.#B,
      minY: (g?.minY ?? 0) / this.#W,
      maxY: (g?.maxY ?? this.#W) / this.#W,
      dependencies: Array.from(A).sort((l, Z) => l - Z),
      idx: I
    }));
  }
}
class iC {
  #I;
  #g;
  #C = 0;
  #A;
  #Z = 0;
  constructor(I, g) {
    if (I instanceof iC)
      return I;
    this.#I = I, this.#A = I._takePendingDependencies(), this.#g = g;
  }
  save(I) {
    return this.#Z++, this.#I.save(this.#g), this;
  }
  restore(I) {
    return this.#Z > 0 && (this.#I.restore(this.#g), this.#Z--), this;
  }
  recordOpenMarker(I) {
    return this.#C++, this;
  }
  getOpenMarker() {
    return this.#C > 0 ? this.#g : this.#I.getOpenMarker();
  }
  recordCloseMarker(I) {
    return this.#C--, this;
  }
  beginMarkedContent(I) {
    return this;
  }
  endMarkedContent(I) {
    return this;
  }
  pushBaseTransform(I) {
    return this.#I.pushBaseTransform(I), this;
  }
  popBaseTransform() {
    return this.#I.popBaseTransform(), this;
  }
  recordSimpleData(I, g) {
    return this.#I.recordSimpleData(I, this.#g), this;
  }
  recordIncrementalData(I, g) {
    return this.#I.recordIncrementalData(I, this.#g), this;
  }
  resetIncrementalData(I, g) {
    return this.#I.resetIncrementalData(I, this.#g), this;
  }
  recordNamedData(I, g) {
    return this;
  }
  recordFutureForcedDependency(I, g) {
    return this.#I.recordFutureForcedDependency(I, this.#g), this;
  }
  inheritSimpleDataAsFutureForcedDependencies(I) {
    return this.#I.inheritSimpleDataAsFutureForcedDependencies(I), this;
  }
  inheritPendingDependenciesAsFutureForcedDependencies() {
    return this.#I.inheritPendingDependenciesAsFutureForcedDependencies(), this;
  }
  resetBBox(I) {
    return this.#I.hasPendingBBox || this.#I.resetBBox(this.#g), this;
  }
  get hasPendingBBox() {
    return this.#I.hasPendingBBox;
  }
  recordClipBox(I, g, C, A, l, Z) {
    return this.#I.recordClipBox(this.#g, g, C, A, l, Z), this;
  }
  recordBBox(I, g, C, A, l, Z) {
    return this.#I.recordBBox(this.#g, g, C, A, l, Z), this;
  }
  recordCharacterBBox(I, g, C, A, l, Z, i) {
    return this.#I.recordCharacterBBox(this.#g, g, C, A, l, Z, i), this;
  }
  recordFullPageBBox(I) {
    return this.#I.recordFullPageBBox(this.#g), this;
  }
  getSimpleIndex(I) {
    return this.#I.getSimpleIndex(I);
  }
  recordDependencies(I, g) {
    return this.#I.recordDependencies(this.#g, g), this;
  }
  copyDependenciesFromIncrementalOperation(I, g) {
    return this.#I.copyDependenciesFromIncrementalOperation(this.#g, g), this;
  }
  recordNamedDependency(I, g) {
    return this.#I.recordNamedDependency(this.#g, g), this;
  }
  recordOperation(I) {
    this.#I.recordOperation(this.#g, !0);
    const g = this.#I._extractOperation(this.#g);
    for (const C of g.dependencies)
      this.#A.add(C);
    return this.#A.delete(this.#g), this.#A.delete(null), this;
  }
  bboxToClipBoxDropOperation(I) {
    return this.#I.bboxToClipBoxDropOperation(this.#g), this;
  }
  recordNestedDependencies() {
    this.#I._pushPendingDependencies(this.#A);
  }
  take() {
    throw new Error("Unreachable");
  }
}
const LI = {
  stroke: ["path", "transform", "filter", "strokeColor", "strokeAlpha", "lineWidth", "lineCap", "lineJoin", "miterLimit", "dash"],
  fill: ["path", "transform", "filter", "fillColor", "fillAlpha", "globalCompositeOperation", "SMask"],
  imageXObject: ["transform", "SMask", "filter", "fillAlpha", "strokeAlpha", "globalCompositeOperation"],
  rawFillPath: ["filter", "fillColor", "fillAlpha"],
  showText: ["transform", "leading", "charSpacing", "wordSpacing", "hScale", "textRise", "moveText", "textMatrix", "font", "filter", "fillColor", "textRenderingMode", "SMask", "fillAlpha", "strokeAlpha", "globalCompositeOperation"],
  transform: ["transform"],
  transformAndFill: ["transform", "fillColor"]
}, NI = {
  FILL: "Fill",
  STROKE: "Stroke",
  SHADING: "Shading"
};
function HC(s, I) {
  if (!I)
    return;
  const g = I[2] - I[0], C = I[3] - I[1], A = new Path2D();
  A.rect(I[0], I[1], g, C), s.clip(A);
}
class QC {
  isModifyingCurrentTransform() {
    return !1;
  }
  getPattern() {
    II("Abstract method `getPattern` called.");
  }
}
class Ll extends QC {
  constructor(I) {
    super(), this._type = I[1], this._bbox = I[2], this._colorStops = I[3], this._p0 = I[4], this._p1 = I[5], this._r0 = I[6], this._r1 = I[7], this.matrix = null;
  }
  _createGradient(I) {
    let g;
    this._type === "axial" ? g = I.createLinearGradient(this._p0[0], this._p0[1], this._p1[0], this._p1[1]) : this._type === "radial" && (g = I.createRadialGradient(this._p0[0], this._p0[1], this._r0, this._p1[0], this._p1[1], this._r1));
    for (const C of this._colorStops)
      g.addColorStop(C[0], C[1]);
    return g;
  }
  getPattern(I, g, C, A) {
    let l;
    if (A === NI.STROKE || A === NI.FILL) {
      const Z = g.current.getClippedPathBoundingBox(A, cI(I)) || [0, 0, 0, 0], i = Math.ceil(Z[2] - Z[0]) || 1, d = Math.ceil(Z[3] - Z[1]) || 1, c = g.cachedCanvases.getCanvas("pattern", i, d), G = c.context;
      G.clearRect(0, 0, G.canvas.width, G.canvas.height), G.beginPath(), G.rect(0, 0, G.canvas.width, G.canvas.height), G.translate(-Z[0], -Z[1]), C = J.transform(C, [1, 0, 0, 1, Z[0], Z[1]]), G.transform(...g.baseTransform), this.matrix && G.transform(...this.matrix), HC(G, this._bbox), G.fillStyle = this._createGradient(G), G.fill(), l = I.createPattern(c.canvas, "no-repeat");
      const b = new DOMMatrix(C);
      l.setTransform(b);
    } else
      HC(I, this._bbox), l = this._createGradient(I);
    return l;
  }
}
function XC(s, I, g, C, A, l, Z, i) {
  const d = I.coords, c = I.colors, G = s.data, b = s.width * 4;
  let m;
  d[g + 1] > d[C + 1] && (m = g, g = C, C = m, m = l, l = Z, Z = m), d[C + 1] > d[A + 1] && (m = C, C = A, A = m, m = Z, Z = i, i = m), d[g + 1] > d[C + 1] && (m = g, g = C, C = m, m = l, l = Z, Z = m);
  const B = (d[g] + I.offsetX) * I.scaleX, o = (d[g + 1] + I.offsetY) * I.scaleY, W = (d[C] + I.offsetX) * I.scaleX, Y = (d[C + 1] + I.offsetY) * I.scaleY, h = (d[A] + I.offsetX) * I.scaleX, a = (d[A + 1] + I.offsetY) * I.scaleY;
  if (o >= a)
    return;
  const w = c[l], n = c[l + 1], V = c[l + 2], X = c[Z], y = c[Z + 1], N = c[Z + 2], t = c[i], e = c[i + 1], R = c[i + 2], F = Math.round(o), K = Math.round(a);
  let S, L, M, u, k, v, $, dI;
  for (let q = F; q <= K; q++) {
    if (q < Y) {
      const H = q < o ? 0 : (o - q) / (o - Y);
      S = B - (B - W) * H, L = w - (w - X) * H, M = n - (n - y) * H, u = V - (V - N) * H;
    } else {
      let H;
      q > a ? H = 1 : Y === a ? H = 0 : H = (Y - q) / (Y - a), S = W - (W - h) * H, L = X - (X - t) * H, M = y - (y - e) * H, u = N - (N - R) * H;
    }
    let _;
    q < o ? _ = 0 : q > a ? _ = 1 : _ = (o - q) / (o - a), k = B - (B - h) * _, v = w - (w - t) * _, $ = n - (n - e) * _, dI = V - (V - R) * _;
    const lI = Math.round(Math.min(S, k)), nI = Math.round(Math.max(S, k));
    let D = b * q + lI * 4;
    for (let H = lI; H <= nI; H++)
      _ = (S - H) / (S - k), _ < 0 ? _ = 0 : _ > 1 && (_ = 1), G[D++] = L - (L - v) * _ | 0, G[D++] = M - (M - $) * _ | 0, G[D++] = u - (u - dI) * _ | 0, G[D++] = 255;
  }
}
function Tl(s, I, g) {
  const C = I.coords, A = I.colors;
  let l, Z;
  switch (I.type) {
    case "lattice":
      const i = I.verticesPerRow, d = Math.floor(C.length / i) - 1, c = i - 1;
      for (l = 0; l < d; l++) {
        let G = l * i;
        for (let b = 0; b < c; b++, G++)
          XC(s, g, C[G], C[G + 1], C[G + i], A[G], A[G + 1], A[G + i]), XC(s, g, C[G + i + 1], C[G + 1], C[G + i], A[G + i + 1], A[G + 1], A[G + i]);
      }
      break;
    case "triangles":
      for (l = 0, Z = C.length; l < Z; l += 3)
        XC(s, g, C[l], C[l + 1], C[l + 2], A[l], A[l + 1], A[l + 2]);
      break;
    default:
      throw new Error("illegal figure");
  }
}
class Ql extends QC {
  constructor(I) {
    super(), this._coords = I[2], this._colors = I[3], this._figures = I[4], this._bounds = I[5], this._bbox = I[6], this._background = I[7], this.matrix = null;
  }
  _createMeshCanvas(I, g, C) {
    const i = Math.floor(this._bounds[0]), d = Math.floor(this._bounds[1]), c = Math.ceil(this._bounds[2]) - i, G = Math.ceil(this._bounds[3]) - d, b = Math.min(Math.ceil(Math.abs(c * I[0] * 1.1)), 3e3), m = Math.min(Math.ceil(Math.abs(G * I[1] * 1.1)), 3e3), B = c / b, o = G / m, W = {
      coords: this._coords,
      colors: this._colors,
      offsetX: -i,
      offsetY: -d,
      scaleX: 1 / B,
      scaleY: 1 / o
    }, Y = b + 4, h = m + 4, a = C.getCanvas("mesh", Y, h), w = a.context, n = w.createImageData(b, m);
    if (g) {
      const X = n.data;
      for (let y = 0, N = X.length; y < N; y += 4)
        X[y] = g[0], X[y + 1] = g[1], X[y + 2] = g[2], X[y + 3] = 255;
    }
    for (const X of this._figures)
      Tl(n, X, W);
    return w.putImageData(n, 2, 2), {
      canvas: a.canvas,
      offsetX: i - 2 * B,
      offsetY: d - 2 * o,
      scaleX: B,
      scaleY: o
    };
  }
  isModifyingCurrentTransform() {
    return !0;
  }
  getPattern(I, g, C, A) {
    HC(I, this._bbox);
    const l = new Float32Array(2);
    if (A === NI.SHADING)
      J.singularValueDecompose2dScale(cI(I), l);
    else if (this.matrix) {
      J.singularValueDecompose2dScale(this.matrix, l);
      const [i, d] = l;
      J.singularValueDecompose2dScale(g.baseTransform, l), l[0] *= i, l[1] *= d;
    } else
      J.singularValueDecompose2dScale(g.baseTransform, l);
    const Z = this._createMeshCanvas(l, A === NI.SHADING ? null : this._background, g.cachedCanvases);
    return A !== NI.SHADING && (I.setTransform(...g.baseTransform), this.matrix && I.transform(...this.matrix)), I.translate(Z.offsetX, Z.offsetY), I.scale(Z.scaleX, Z.scaleY), I.createPattern(Z.canvas, "no-repeat");
  }
}
class rl extends QC {
  getPattern() {
    return "hotpink";
  }
}
function jl(s) {
  switch (s[0]) {
    case "RadialAxial":
      return new Ll(s);
    case "Mesh":
      return new Ql(s);
    case "Dummy":
      return new rl();
  }
  throw new Error(`Unknown IR type: ${s[0]}`);
}
const sA = {
  COLORED: 1,
  UNCOLORED: 2
};
class rC {
  static MAX_PATTERN_SIZE = 3e3;
  constructor(I, g, C, A) {
    this.color = I[1], this.operatorList = I[2], this.matrix = I[3], this.bbox = I[4], this.xstep = I[5], this.ystep = I[6], this.paintType = I[7], this.tilingType = I[8], this.ctx = g, this.canvasGraphicsFactory = C, this.baseTransform = A;
  }
  createPatternCanvas(I) {
    const {
      bbox: g,
      operatorList: C,
      paintType: A,
      tilingType: l,
      color: Z,
      canvasGraphicsFactory: i
    } = this;
    let {
      xstep: d,
      ystep: c
    } = this;
    d = Math.abs(d), c = Math.abs(c), sC("TilingType: " + l);
    const G = g[0], b = g[1], m = g[2], B = g[3], o = m - G, W = B - b, Y = new Float32Array(2);
    J.singularValueDecompose2dScale(this.matrix, Y);
    const [h, a] = Y;
    J.singularValueDecompose2dScale(this.baseTransform, Y);
    const w = h * Y[0], n = a * Y[1];
    let V = o, X = W, y = !1, N = !1;
    const t = Math.ceil(d * w), e = Math.ceil(c * n), R = Math.ceil(o * w), F = Math.ceil(W * n);
    t >= R ? V = d : y = !0, e >= F ? X = c : N = !0;
    const K = this.getSizeAndScale(V, this.ctx.canvas.width, w), S = this.getSizeAndScale(X, this.ctx.canvas.height, n), L = I.cachedCanvases.getCanvas("pattern", K.size, S.size), M = L.context, u = i.createCanvasGraphics(M);
    if (u.groupLevel = I.groupLevel, this.setFillAndStrokeStyleToContext(u, A, Z), M.translate(-K.scale * G, -S.scale * b), u.transform(0, K.scale, 0, 0, S.scale, 0, 0), M.save(), u.dependencyTracker?.save(), this.clipBbox(u, G, b, m, B), u.baseTransform = cI(u.ctx), u.executeOperatorList(C), u.endDrawing(), u.dependencyTracker?.restore().recordNestedDependencies?.(), M.restore(), y || N) {
      const k = L.canvas;
      y && (V = d), N && (X = c);
      const v = this.getSizeAndScale(V, this.ctx.canvas.width, w), $ = this.getSizeAndScale(X, this.ctx.canvas.height, n), dI = v.size, q = $.size, _ = I.cachedCanvases.getCanvas("pattern-workaround", dI, q), lI = _.context, nI = y ? Math.floor(o / d) : 0, D = N ? Math.floor(W / c) : 0;
      for (let H = 0; H <= nI; H++)
        for (let p = 0; p <= D; p++)
          lI.drawImage(k, dI * H, q * p, dI, q, 0, 0, dI, q);
      return {
        canvas: _.canvas,
        scaleX: v.scale,
        scaleY: $.scale,
        offsetX: G,
        offsetY: b
      };
    }
    return {
      canvas: L.canvas,
      scaleX: K.scale,
      scaleY: S.scale,
      offsetX: G,
      offsetY: b
    };
  }
  getSizeAndScale(I, g, C) {
    const A = Math.max(rC.MAX_PATTERN_SIZE, g);
    let l = Math.ceil(I * C);
    return l >= A ? l = A : C = l / I, {
      scale: C,
      size: l
    };
  }
  clipBbox(I, g, C, A, l) {
    const Z = A - g, i = l - C;
    I.ctx.rect(g, C, Z, i), J.axialAlignedBoundingBox([g, C, A, l], cI(I.ctx), I.current.minMax), I.clip(), I.endPath();
  }
  setFillAndStrokeStyleToContext(I, g, C) {
    const A = I.ctx, l = I.current;
    switch (g) {
      case sA.COLORED:
        const {
          fillStyle: Z,
          strokeStyle: i
        } = this.ctx;
        A.fillStyle = l.fillColor = Z, A.strokeStyle = l.strokeColor = i;
        break;
      case sA.UNCOLORED:
        A.fillStyle = A.strokeStyle = C, l.fillColor = l.strokeColor = C;
        break;
      default:
        throw new ml(`Unsupported paint type: ${g}`);
    }
  }
  isModifyingCurrentTransform() {
    return !1;
  }
  getPattern(I, g, C, A) {
    let l = C;
    A !== NI.SHADING && (l = J.transform(l, g.baseTransform), this.matrix && (l = J.transform(l, this.matrix)));
    const Z = this.createPatternCanvas(g);
    let i = new DOMMatrix(l);
    i = i.translate(Z.offsetX, Z.offsetY), i = i.scale(1 / Z.scaleX, 1 / Z.scaleY);
    const d = I.createPattern(Z.canvas, "repeat");
    return d.setTransform(i), d;
  }
}
function Ol({
  src: s,
  srcPos: I = 0,
  dest: g,
  width: C,
  height: A,
  nonBlackColor: l = 4294967295,
  inverseDecode: Z = !1
}) {
  const i = XI.isLittleEndian ? 4278190080 : 255, [d, c] = Z ? [l, i] : [i, l], G = C >> 3, b = C & 7, m = s.length;
  g = new Uint32Array(g.buffer);
  let B = 0;
  for (let o = 0; o < A; o++) {
    for (const Y = I + G; I < Y; I++) {
      const h = I < m ? s[I] : 255;
      g[B++] = h & 128 ? c : d, g[B++] = h & 64 ? c : d, g[B++] = h & 32 ? c : d, g[B++] = h & 16 ? c : d, g[B++] = h & 8 ? c : d, g[B++] = h & 4 ? c : d, g[B++] = h & 2 ? c : d, g[B++] = h & 1 ? c : d;
    }
    if (b === 0)
      continue;
    const W = I < m ? s[I++] : 255;
    for (let Y = 0; Y < b; Y++)
      g[B++] = W & 1 << 7 - Y ? c : d;
  }
  return {
    srcPos: I,
    destPos: B
  };
}
const GA = 16, bA = 100, Ul = 15, mA = 10, DI = 16, nC = new DOMMatrix(), FI = new Float32Array(2), ag = new Float32Array([1 / 0, 1 / 0, -1 / 0, -1 / 0]);
function vl(s, I) {
  if (s._removeMirroring)
    throw new Error("Context is already forwarding operations.");
  s.__originalSave = s.save, s.__originalRestore = s.restore, s.__originalRotate = s.rotate, s.__originalScale = s.scale, s.__originalTranslate = s.translate, s.__originalTransform = s.transform, s.__originalSetTransform = s.setTransform, s.__originalResetTransform = s.resetTransform, s.__originalClip = s.clip, s.__originalMoveTo = s.moveTo, s.__originalLineTo = s.lineTo, s.__originalBezierCurveTo = s.bezierCurveTo, s.__originalRect = s.rect, s.__originalClosePath = s.closePath, s.__originalBeginPath = s.beginPath, s._removeMirroring = () => {
    s.save = s.__originalSave, s.restore = s.__originalRestore, s.rotate = s.__originalRotate, s.scale = s.__originalScale, s.translate = s.__originalTranslate, s.transform = s.__originalTransform, s.setTransform = s.__originalSetTransform, s.resetTransform = s.__originalResetTransform, s.clip = s.__originalClip, s.moveTo = s.__originalMoveTo, s.lineTo = s.__originalLineTo, s.bezierCurveTo = s.__originalBezierCurveTo, s.rect = s.__originalRect, s.closePath = s.__originalClosePath, s.beginPath = s.__originalBeginPath, delete s._removeMirroring;
  }, s.save = function() {
    I.save(), this.__originalSave();
  }, s.restore = function() {
    I.restore(), this.__originalRestore();
  }, s.translate = function(g, C) {
    I.translate(g, C), this.__originalTranslate(g, C);
  }, s.scale = function(g, C) {
    I.scale(g, C), this.__originalScale(g, C);
  }, s.transform = function(g, C, A, l, Z, i) {
    I.transform(g, C, A, l, Z, i), this.__originalTransform(g, C, A, l, Z, i);
  }, s.setTransform = function(g, C, A, l, Z, i) {
    I.setTransform(g, C, A, l, Z, i), this.__originalSetTransform(g, C, A, l, Z, i);
  }, s.resetTransform = function() {
    I.resetTransform(), this.__originalResetTransform();
  }, s.rotate = function(g) {
    I.rotate(g), this.__originalRotate(g);
  }, s.clip = function(g) {
    I.clip(g), this.__originalClip(g);
  }, s.moveTo = function(g, C) {
    I.moveTo(g, C), this.__originalMoveTo(g, C);
  }, s.lineTo = function(g, C) {
    I.lineTo(g, C), this.__originalLineTo(g, C);
  }, s.bezierCurveTo = function(g, C, A, l, Z, i) {
    I.bezierCurveTo(g, C, A, l, Z, i), this.__originalBezierCurveTo(g, C, A, l, Z, i);
  }, s.rect = function(g, C, A, l) {
    I.rect(g, C, A, l), this.__originalRect(g, C, A, l);
  }, s.closePath = function() {
    I.closePath(), this.__originalClosePath();
  }, s.beginPath = function() {
    I.beginPath(), this.__originalBeginPath();
  };
}
class xl {
  constructor(I) {
    this.canvasFactory = I, this.cache = /* @__PURE__ */ Object.create(null);
  }
  getCanvas(I, g, C) {
    let A;
    return this.cache[I] !== void 0 ? (A = this.cache[I], this.canvasFactory.reset(A, g, C)) : (A = this.canvasFactory.create(g, C), this.cache[I] = A), A;
  }
  delete(I) {
    delete this.cache[I];
  }
  clear() {
    for (const I in this.cache) {
      const g = this.cache[I];
      this.canvasFactory.destroy(g), delete this.cache[I];
    }
  }
}
function qg(s, I, g, C, A, l, Z, i, d, c) {
  const [G, b, m, B, o, W] = cI(s);
  if (b === 0 && m === 0) {
    const a = Z * G + o, w = Math.round(a), n = i * B + W, V = Math.round(n), X = (Z + d) * G + o, y = Math.abs(Math.round(X) - w) || 1, N = (i + c) * B + W, t = Math.abs(Math.round(N) - V) || 1;
    return s.setTransform(Math.sign(G), 0, 0, Math.sign(B), w, V), s.drawImage(I, g, C, A, l, 0, 0, y, t), s.setTransform(G, b, m, B, o, W), [y, t];
  }
  if (G === 0 && B === 0) {
    const a = i * m + o, w = Math.round(a), n = Z * b + W, V = Math.round(n), X = (i + c) * m + o, y = Math.abs(Math.round(X) - w) || 1, N = (Z + d) * b + W, t = Math.abs(Math.round(N) - V) || 1;
    return s.setTransform(0, Math.sign(b), Math.sign(m), 0, w, V), s.drawImage(I, g, C, A, l, 0, 0, t, y), s.setTransform(G, b, m, B, o, W), [t, y];
  }
  s.drawImage(I, g, C, A, l, Z, i, d, c);
  const Y = Math.hypot(G, b), h = Math.hypot(m, B);
  return [Y * d, h * c];
}
class BA {
  alphaIsShape = !1;
  fontSize = 0;
  fontSizeScale = 1;
  textMatrix = null;
  textMatrixScale = 1;
  fontMatrix = tC;
  leading = 0;
  x = 0;
  y = 0;
  lineX = 0;
  lineY = 0;
  charSpacing = 0;
  wordSpacing = 0;
  textHScale = 1;
  textRenderingMode = yI.FILL;
  textRise = 0;
  fillColor = "#000000";
  strokeColor = "#000000";
  patternFill = !1;
  patternStroke = !1;
  fillAlpha = 1;
  strokeAlpha = 1;
  lineWidth = 1;
  activeSMask = null;
  transferMaps = "none";
  constructor(I, g, C) {
    C?.(this), this.clipBox = new Float32Array([0, 0, I, g]), this.minMax = ag.slice();
  }
  clone() {
    const I = Object.create(this);
    return I.clipBox = this.clipBox.slice(), I.minMax = this.minMax.slice(), I;
  }
  getPathBoundingBox(I = NI.FILL, g = null) {
    const C = this.minMax.slice();
    if (I === NI.STROKE) {
      g || II("Stroke bounding box must include transform."), J.singularValueDecompose2dScale(g, FI);
      const A = FI[0] * this.lineWidth / 2, l = FI[1] * this.lineWidth / 2;
      C[0] -= A, C[1] -= l, C[2] += A, C[3] += l;
    }
    return C;
  }
  updateClipFromPath() {
    const I = J.intersect(this.clipBox, this.getPathBoundingBox());
    this.startNewPathAndClipBox(I || [0, 0, 0, 0]);
  }
  isEmptyClip() {
    return this.minMax[0] === 1 / 0;
  }
  startNewPathAndClipBox(I) {
    this.clipBox.set(I, 0), this.minMax.set(ag, 0);
  }
  getClippedPathBoundingBox(I = NI.FILL, g = null) {
    return J.intersect(this.clipBox, this.getPathBoundingBox(I, g));
  }
}
function oA(s, I) {
  if (I instanceof ImageData) {
    s.putImageData(I, 0, 0);
    return;
  }
  const g = I.height, C = I.width, A = g % DI, l = (g - A) / DI, Z = A === 0 ? l : l + 1, i = s.createImageData(C, DI);
  let d = 0, c;
  const G = I.data, b = i.data;
  let m, B, o, W;
  if (I.kind === lg.GRAYSCALE_1BPP) {
    const Y = G.byteLength, h = new Uint32Array(b.buffer, 0, b.byteLength >> 2), a = h.length, w = C + 7 >> 3, n = 4294967295, V = XI.isLittleEndian ? 4278190080 : 255;
    for (m = 0; m < Z; m++) {
      for (o = m < l ? DI : A, c = 0, B = 0; B < o; B++) {
        const X = Y - d;
        let y = 0;
        const N = X > w ? C : X * 8 - 7, t = N & -8;
        let e = 0, R = 0;
        for (; y < t; y += 8)
          R = G[d++], h[c++] = R & 128 ? n : V, h[c++] = R & 64 ? n : V, h[c++] = R & 32 ? n : V, h[c++] = R & 16 ? n : V, h[c++] = R & 8 ? n : V, h[c++] = R & 4 ? n : V, h[c++] = R & 2 ? n : V, h[c++] = R & 1 ? n : V;
        for (; y < N; y++)
          e === 0 && (R = G[d++], e = 128), h[c++] = R & e ? n : V, e >>= 1;
      }
      for (; c < a; )
        h[c++] = 0;
      s.putImageData(i, 0, m * DI);
    }
  } else if (I.kind === lg.RGBA_32BPP) {
    for (B = 0, W = C * DI * 4, m = 0; m < l; m++)
      b.set(G.subarray(d, d + W)), d += W, s.putImageData(i, 0, B), B += DI;
    m < Z && (W = C * A * 4, b.set(G.subarray(d, d + W)), s.putImageData(i, 0, B));
  } else if (I.kind === lg.RGB_24BPP)
    for (o = DI, W = C * o, m = 0; m < Z; m++) {
      for (m >= l && (o = A, W = C * o), c = 0, B = W; B--; )
        b[c++] = G[d++], b[c++] = G[d++], b[c++] = G[d++], b[c++] = 255;
      s.putImageData(i, 0, m * DI);
    }
  else
    throw new Error(`bad image kind: ${I.kind}`);
}
function WA(s, I) {
  if (I.bitmap) {
    s.drawImage(I.bitmap, 0, 0);
    return;
  }
  const g = I.height, C = I.width, A = g % DI, l = (g - A) / DI, Z = A === 0 ? l : l + 1, i = s.createImageData(C, DI);
  let d = 0;
  const c = I.data, G = i.data;
  for (let b = 0; b < Z; b++) {
    const m = b < l ? DI : A;
    ({
      srcPos: d
    } = Ol({
      src: c,
      srcPos: d,
      dest: G,
      width: C,
      height: m,
      nonBlackColor: 0
    })), s.putImageData(i, 0, b * DI);
  }
}
function Rg(s, I) {
  const g = ["strokeStyle", "fillStyle", "fillRule", "globalAlpha", "lineWidth", "lineCap", "lineJoin", "miterLimit", "globalCompositeOperation", "font", "filter"];
  for (const C of g)
    s[C] !== void 0 && (I[C] = s[C]);
  s.setLineDash !== void 0 && (I.setLineDash(s.getLineDash()), I.lineDashOffset = s.lineDashOffset);
}
function _g(s) {
  s.strokeStyle = s.fillStyle = "#000000", s.fillRule = "nonzero", s.globalAlpha = 1, s.lineWidth = 1, s.lineCap = "butt", s.lineJoin = "miter", s.miterLimit = 10, s.globalCompositeOperation = "source-over", s.font = "10px sans-serif", s.setLineDash !== void 0 && (s.setLineDash([]), s.lineDashOffset = 0);
  const {
    filter: I
  } = s;
  I !== "none" && I !== "" && (s.filter = "none");
}
function hA(s, I) {
  if (I)
    return !0;
  J.singularValueDecompose2dScale(s, FI);
  const g = Math.fround(rI.pixelRatio * bg.PDF_TO_CSS_UNITS);
  return FI[0] <= g && FI[1] <= g;
}
const El = ["butt", "round", "square"], Pl = ["miter", "round", "bevel"], fl = {}, YA = {};
class Xg {
  constructor(I, g, C, A, l, {
    optionalContentConfig: Z,
    markedContentStack: i = null
  }, d, c, G) {
    this.ctx = I, this.current = new BA(this.ctx.canvas.width, this.ctx.canvas.height), this.stateStack = [], this.pendingClip = null, this.pendingEOFill = !1, this.res = null, this.xobjs = null, this.commonObjs = g, this.objs = C, this.canvasFactory = A, this.filterFactory = l, this.groupStack = [], this.baseTransform = null, this.baseTransformStack = [], this.groupLevel = 0, this.smaskStack = [], this.smaskCounter = 0, this.tempSMask = null, this.suspendedCtx = null, this.contentVisible = !0, this.markedContentStack = i || [], this.optionalContentConfig = Z, this.cachedCanvases = new xl(this.canvasFactory), this.cachedPatterns = /* @__PURE__ */ new Map(), this.annotationCanvasMap = d, this.viewportScale = 1, this.outputScaleX = 1, this.outputScaleY = 1, this.pageColors = c, this._cachedScaleForStroking = [-1, 0], this._cachedGetSinglePixelWidth = null, this._cachedBitmapsMap = /* @__PURE__ */ new Map(), this.dependencyTracker = G ?? null;
  }
  getObject(I, g, C = null) {
    return typeof g == "string" ? (this.dependencyTracker?.recordNamedDependency(I, g), g.startsWith("g_") ? this.commonObjs.get(g) : this.objs.get(g)) : C;
  }
  beginDrawing({
    transform: I,
    viewport: g,
    transparency: C = !1,
    background: A = null
  }) {
    const l = this.ctx.canvas.width, Z = this.ctx.canvas.height, i = this.ctx.fillStyle;
    if (this.ctx.fillStyle = A || "#ffffff", this.ctx.fillRect(0, 0, l, Z), this.ctx.fillStyle = i, C) {
      const d = this.cachedCanvases.getCanvas("transparent", l, Z);
      this.compositeCtx = this.ctx, this.transparentCanvas = d.canvas, this.ctx = d.context, this.ctx.save(), this.ctx.transform(...cI(this.compositeCtx));
    }
    this.ctx.save(), _g(this.ctx), I && (this.ctx.transform(...I), this.outputScaleX = I[0], this.outputScaleY = I[0]), this.ctx.transform(...g.transform), this.viewportScale = g.scale, this.baseTransform = cI(this.ctx);
  }
  executeOperatorList(I, g, C, A, l) {
    const Z = I.argsArray, i = I.fnArray;
    let d = g || 0;
    const c = Z.length;
    if (c === d)
      return d;
    const G = c - d > mA && typeof C == "function", b = G ? Date.now() + Ul : 0;
    let m = 0;
    const B = this.commonObjs, o = this.objs;
    let W, Y;
    for (; ; ) {
      if (A !== void 0 && d === A.nextBreakPoint)
        return A.breakIt(d, C), d;
      if (!l || l.has(d))
        if (W = i[d], Y = Z[d] ?? null, W !== sI.dependency)
          Y === null ? this[W](d) : this[W](d, ...Y);
        else
          for (const h of Y) {
            this.dependencyTracker?.recordNamedData(h, d);
            const a = h.startsWith("g_") ? B : o;
            if (!a.has(h))
              return a.get(h, C), d;
          }
      if (d++, d === c)
        return d;
      if (G && ++m > mA) {
        if (Date.now() > b)
          return C(), d;
        m = 0;
      }
    }
  }
  #I() {
    for (; this.stateStack.length || this.inSMaskMode; )
      this.restore();
    this.current.activeSMask = null, this.ctx.restore(), this.transparentCanvas && (this.ctx = this.compositeCtx, this.ctx.save(), this.ctx.setTransform(1, 0, 0, 1, 0, 0), this.ctx.drawImage(this.transparentCanvas, 0, 0), this.ctx.restore(), this.transparentCanvas = null);
  }
  endDrawing() {
    this.#I(), this.cachedCanvases.clear(), this.cachedPatterns.clear();
    for (const I of this._cachedBitmapsMap.values()) {
      for (const g of I.values())
        typeof HTMLCanvasElement < "u" && g instanceof HTMLCanvasElement && (g.width = g.height = 0);
      I.clear();
    }
    this._cachedBitmapsMap.clear(), this.#g();
  }
  #g() {
    if (this.pageColors) {
      const I = this.filterFactory.addHCMFilter(this.pageColors.foreground, this.pageColors.background);
      if (I !== "none") {
        const g = this.ctx.filter;
        this.ctx.filter = I, this.ctx.drawImage(this.ctx.canvas, 0, 0), this.ctx.filter = g;
      }
    }
  }
  _scaleImage(I, g) {
    const C = I.width ?? I.displayWidth, A = I.height ?? I.displayHeight;
    let l = Math.max(Math.hypot(g[0], g[1]), 1), Z = Math.max(Math.hypot(g[2], g[3]), 1), i = C, d = A, c = "prescale1", G, b;
    for (; l > 2 && i > 1 || Z > 2 && d > 1; ) {
      let m = i, B = d;
      l > 2 && i > 1 && (m = i >= 16384 ? Math.floor(i / 2) - 1 || 1 : Math.ceil(i / 2), l /= i / m), Z > 2 && d > 1 && (B = d >= 16384 ? Math.floor(d / 2) - 1 || 1 : Math.ceil(d) / 2, Z /= d / B), G = this.cachedCanvases.getCanvas(c, m, B), b = G.context, b.clearRect(0, 0, m, B), b.drawImage(I, 0, 0, i, d, 0, 0, m, B), I = G.canvas, i = m, d = B, c = c === "prescale1" ? "prescale2" : "prescale1";
    }
    return {
      img: I,
      paintWidth: i,
      paintHeight: d
    };
  }
  _createMaskCanvas(I, g) {
    const C = this.ctx, {
      width: A,
      height: l
    } = g, Z = this.current.fillColor, i = this.current.patternFill, d = cI(C);
    let c, G, b, m;
    if ((g.bitmap || g.data) && g.count > 1) {
      const e = g.bitmap || g.data.buffer;
      G = JSON.stringify(i ? d : [d.slice(0, 4), Z]), c = this._cachedBitmapsMap.get(e), c || (c = /* @__PURE__ */ new Map(), this._cachedBitmapsMap.set(e, c));
      const R = c.get(G);
      if (R && !i) {
        const F = Math.round(Math.min(d[0], d[2]) + d[4]), K = Math.round(Math.min(d[1], d[3]) + d[5]);
        return this.dependencyTracker?.recordDependencies(I, LI.transformAndFill), {
          canvas: R,
          offsetX: F,
          offsetY: K
        };
      }
      b = R;
    }
    b || (m = this.cachedCanvases.getCanvas("maskCanvas", A, l), WA(m.context, g));
    let B = J.transform(d, [1 / A, 0, 0, -1 / l, 0, 0]);
    B = J.transform(B, [1, 0, 0, 1, 0, -l]);
    const o = ag.slice();
    J.axialAlignedBoundingBox([0, 0, A, l], B, o);
    const [W, Y, h, a] = o, w = Math.round(h - W) || 1, n = Math.round(a - Y) || 1, V = this.cachedCanvases.getCanvas("fillCanvas", w, n), X = V.context, y = W, N = Y;
    X.translate(-y, -N), X.transform(...B), b || (b = this._scaleImage(m.canvas, UI(X)), b = b.img, c && i && c.set(G, b)), X.imageSmoothingEnabled = hA(cI(X), g.interpolate), qg(X, b, 0, 0, b.width, b.height, 0, 0, A, l), X.globalCompositeOperation = "source-in";
    const t = J.transform(UI(X), [1, 0, 0, 1, -y, -N]);
    return X.fillStyle = i ? Z.getPattern(C, this, t, NI.FILL) : Z, X.fillRect(0, 0, A, l), c && !i && (this.cachedCanvases.delete("fillCanvas"), c.set(G, V.canvas)), this.dependencyTracker?.recordDependencies(I, LI.transformAndFill), {
      canvas: V.canvas,
      offsetX: Math.round(y),
      offsetY: Math.round(N)
    };
  }
  setLineWidth(I, g) {
    this.dependencyTracker?.recordSimpleData("lineWidth", I), g !== this.current.lineWidth && (this._cachedScaleForStroking[0] = -1), this.current.lineWidth = g, this.ctx.lineWidth = g;
  }
  setLineCap(I, g) {
    this.dependencyTracker?.recordSimpleData("lineCap", I), this.ctx.lineCap = El[g];
  }
  setLineJoin(I, g) {
    this.dependencyTracker?.recordSimpleData("lineJoin", I), this.ctx.lineJoin = Pl[g];
  }
  setMiterLimit(I, g) {
    this.dependencyTracker?.recordSimpleData("miterLimit", I), this.ctx.miterLimit = g;
  }
  setDash(I, g, C) {
    this.dependencyTracker?.recordSimpleData("dash", I);
    const A = this.ctx;
    A.setLineDash !== void 0 && (A.setLineDash(g), A.lineDashOffset = C);
  }
  setRenderingIntent(I, g) {
  }
  setFlatness(I, g) {
  }
  setGState(I, g) {
    for (const [C, A] of g)
      switch (C) {
        case "LW":
          this.setLineWidth(I, A);
          break;
        case "LC":
          this.setLineCap(I, A);
          break;
        case "LJ":
          this.setLineJoin(I, A);
          break;
        case "ML":
          this.setMiterLimit(I, A);
          break;
        case "D":
          this.setDash(I, A[0], A[1]);
          break;
        case "RI":
          this.setRenderingIntent(I, A);
          break;
        case "FL":
          this.setFlatness(I, A);
          break;
        case "Font":
          this.setFont(I, A[0], A[1]);
          break;
        case "CA":
          this.dependencyTracker?.recordSimpleData("strokeAlpha", I), this.current.strokeAlpha = A;
          break;
        case "ca":
          this.dependencyTracker?.recordSimpleData("fillAlpha", I), this.ctx.globalAlpha = this.current.fillAlpha = A;
          break;
        case "BM":
          this.dependencyTracker?.recordSimpleData("globalCompositeOperation", I), this.ctx.globalCompositeOperation = A;
          break;
        case "SMask":
          this.dependencyTracker?.recordSimpleData("SMask", I), this.current.activeSMask = A ? this.tempSMask : null, this.tempSMask = null, this.checkSMaskState();
          break;
        case "TR":
          this.dependencyTracker?.recordSimpleData("filter", I), this.ctx.filter = this.current.transferMaps = this.filterFactory.addFilter(A);
          break;
      }
  }
  get inSMaskMode() {
    return !!this.suspendedCtx;
  }
  checkSMaskState() {
    const I = this.inSMaskMode;
    this.current.activeSMask && !I ? this.beginSMaskMode() : !this.current.activeSMask && I && this.endSMaskMode();
  }
  beginSMaskMode(I) {
    if (this.inSMaskMode)
      throw new Error("beginSMaskMode called while already in smask mode");
    const g = this.ctx.canvas.width, C = this.ctx.canvas.height, A = "smaskGroupAt" + this.groupLevel, l = this.cachedCanvases.getCanvas(A, g, C);
    this.suspendedCtx = this.ctx;
    const Z = this.ctx = l.context;
    Z.setTransform(this.suspendedCtx.getTransform()), Rg(this.suspendedCtx, Z), vl(Z, this.suspendedCtx), this.setGState(I, [["BM", "source-over"]]);
  }
  endSMaskMode() {
    if (!this.inSMaskMode)
      throw new Error("endSMaskMode called while not in smask mode");
    this.ctx._removeMirroring(), Rg(this.ctx, this.suspendedCtx), this.ctx = this.suspendedCtx, this.suspendedCtx = null;
  }
  compose(I) {
    if (!this.current.activeSMask)
      return;
    I ? (I[0] = Math.floor(I[0]), I[1] = Math.floor(I[1]), I[2] = Math.ceil(I[2]), I[3] = Math.ceil(I[3])) : I = [0, 0, this.ctx.canvas.width, this.ctx.canvas.height];
    const g = this.current.activeSMask, C = this.suspendedCtx;
    this.composeSMask(C, g, this.ctx, I), this.ctx.save(), this.ctx.setTransform(1, 0, 0, 1, 0, 0), this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height), this.ctx.restore();
  }
  composeSMask(I, g, C, A) {
    const l = A[0], Z = A[1], i = A[2] - l, d = A[3] - Z;
    i === 0 || d === 0 || (this.genericComposeSMask(g.context, C, i, d, g.subtype, g.backdrop, g.transferMap, l, Z, g.offsetX, g.offsetY), I.save(), I.globalAlpha = 1, I.globalCompositeOperation = "source-over", I.setTransform(1, 0, 0, 1, 0, 0), I.drawImage(C.canvas, 0, 0), I.restore());
  }
  genericComposeSMask(I, g, C, A, l, Z, i, d, c, G, b) {
    let m = I.canvas, B = d - G, o = c - b;
    if (Z)
      if (B < 0 || o < 0 || B + C > m.width || o + A > m.height) {
        const Y = this.cachedCanvases.getCanvas("maskExtension", C, A), h = Y.context;
        h.drawImage(m, -B, -o), h.globalCompositeOperation = "destination-atop", h.fillStyle = Z, h.fillRect(0, 0, C, A), h.globalCompositeOperation = "source-over", m = Y.canvas, B = o = 0;
      } else {
        I.save(), I.globalAlpha = 1, I.setTransform(1, 0, 0, 1, 0, 0);
        const Y = new Path2D();
        Y.rect(B, o, C, A), I.clip(Y), I.globalCompositeOperation = "destination-atop", I.fillStyle = Z, I.fillRect(B, o, C, A), I.restore();
      }
    g.save(), g.globalAlpha = 1, g.setTransform(1, 0, 0, 1, 0, 0), l === "Alpha" && i ? g.filter = this.filterFactory.addAlphaFilter(i) : l === "Luminosity" && (g.filter = this.filterFactory.addLuminosityFilter(i));
    const W = new Path2D();
    W.rect(d, c, C, A), g.clip(W), g.globalCompositeOperation = "destination-in", g.drawImage(m, B, o, C, A, d, c, C, A), g.restore();
  }
  save(I) {
    this.inSMaskMode && Rg(this.ctx, this.suspendedCtx), this.ctx.save();
    const g = this.current;
    this.stateStack.push(g), this.current = g.clone(), this.dependencyTracker?.save(I);
  }
  restore(I) {
    if (this.dependencyTracker?.restore(I), this.stateStack.length === 0) {
      this.inSMaskMode && this.endSMaskMode();
      return;
    }
    this.current = this.stateStack.pop(), this.ctx.restore(), this.inSMaskMode && Rg(this.suspendedCtx, this.ctx), this.checkSMaskState(), this.pendingClip = null, this._cachedScaleForStroking[0] = -1, this._cachedGetSinglePixelWidth = null;
  }
  transform(I, g, C, A, l, Z, i) {
    this.dependencyTracker?.recordIncrementalData("transform", I), this.ctx.transform(g, C, A, l, Z, i), this._cachedScaleForStroking[0] = -1, this._cachedGetSinglePixelWidth = null;
  }
  constructPath(I, g, C, A) {
    let [l] = C;
    if (!A) {
      l ||= C[0] = new Path2D(), this[g](I, l);
      return;
    }
    if (this.dependencyTracker !== null) {
      const Z = g === sI.stroke ? this.current.lineWidth / 2 : 0;
      this.dependencyTracker.resetBBox(I).recordBBox(I, this.ctx, A[0] - Z, A[2] + Z, A[1] - Z, A[3] + Z).recordDependencies(I, ["transform"]);
    }
    if (!(l instanceof Path2D)) {
      const Z = C[0] = new Path2D();
      for (let i = 0, d = l.length; i < d; )
        switch (l[i++]) {
          case xg.moveTo:
            Z.moveTo(l[i++], l[i++]);
            break;
          case xg.lineTo:
            Z.lineTo(l[i++], l[i++]);
            break;
          case xg.curveTo:
            Z.bezierCurveTo(l[i++], l[i++], l[i++], l[i++], l[i++], l[i++]);
            break;
          case xg.closePath:
            Z.closePath();
            break;
          default:
            j(`Unrecognized drawing path operator: ${l[i - 1]}`);
            break;
        }
      l = Z;
    }
    J.axialAlignedBoundingBox(A, cI(this.ctx), this.current.minMax), this[g](I, l), this._pathStartIdx = I;
  }
  closePath(I) {
    this.ctx.closePath();
  }
  stroke(I, g, C = !0) {
    const A = this.ctx, l = this.current.strokeColor;
    if (A.globalAlpha = this.current.strokeAlpha, this.contentVisible)
      if (typeof l == "object" && l?.getPattern) {
        const Z = l.isModifyingCurrentTransform() ? A.getTransform() : null;
        if (A.save(), A.strokeStyle = l.getPattern(A, this, UI(A), NI.STROKE), Z) {
          const i = new Path2D();
          i.addPath(g, A.getTransform().invertSelf().multiplySelf(Z)), g = i;
        }
        this.rescaleAndStroke(g, !1), A.restore();
      } else
        this.rescaleAndStroke(g, !0);
    this.dependencyTracker?.recordDependencies(I, LI.stroke), C && this.consumePath(I, g, this.current.getClippedPathBoundingBox(NI.STROKE, cI(this.ctx))), A.globalAlpha = this.current.fillAlpha;
  }
  closeStroke(I, g) {
    this.stroke(I, g);
  }
  fill(I, g, C = !0) {
    const A = this.ctx, l = this.current.fillColor, Z = this.current.patternFill;
    let i = !1;
    if (Z) {
      const c = l.isModifyingCurrentTransform() ? A.getTransform() : null;
      if (this.dependencyTracker?.save(I), A.save(), A.fillStyle = l.getPattern(A, this, UI(A), NI.FILL), c) {
        const G = new Path2D();
        G.addPath(g, A.getTransform().invertSelf().multiplySelf(c)), g = G;
      }
      i = !0;
    }
    const d = this.current.getClippedPathBoundingBox();
    this.contentVisible && d !== null && (this.pendingEOFill ? (A.fill(g, "evenodd"), this.pendingEOFill = !1) : A.fill(g)), this.dependencyTracker?.recordDependencies(I, LI.fill), i && (A.restore(), this.dependencyTracker?.restore(I)), C && this.consumePath(I, g, d);
  }
  eoFill(I, g) {
    this.pendingEOFill = !0, this.fill(I, g);
  }
  fillStroke(I, g) {
    this.fill(I, g, !1), this.stroke(I, g, !1), this.consumePath(I, g);
  }
  eoFillStroke(I, g) {
    this.pendingEOFill = !0, this.fillStroke(I, g);
  }
  closeFillStroke(I, g) {
    this.fillStroke(I, g);
  }
  closeEOFillStroke(I, g) {
    this.pendingEOFill = !0, this.fillStroke(I, g);
  }
  endPath(I, g) {
    this.consumePath(I, g);
  }
  rawFillPath(I, g) {
    this.ctx.fill(g), this.dependencyTracker?.recordDependencies(I, LI.rawFillPath).recordOperation(I);
  }
  clip(I) {
    this.dependencyTracker?.recordFutureForcedDependency("clipMode", I), this.pendingClip = fl;
  }
  eoClip(I) {
    this.dependencyTracker?.recordFutureForcedDependency("clipMode", I), this.pendingClip = YA;
  }
  beginText(I) {
    this.current.textMatrix = null, this.current.textMatrixScale = 1, this.current.x = this.current.lineX = 0, this.current.y = this.current.lineY = 0, this.dependencyTracker?.recordOpenMarker(I).resetIncrementalData("sameLineText").resetIncrementalData("moveText", I);
  }
  endText(I) {
    const g = this.pendingTextPaths, C = this.ctx;
    if (this.dependencyTracker) {
      const {
        dependencyTracker: A
      } = this;
      g !== void 0 && A.recordFutureForcedDependency("textClip", A.getOpenMarker()).recordFutureForcedDependency("textClip", I), A.recordCloseMarker(I);
    }
    if (g !== void 0) {
      const A = new Path2D(), l = C.getTransform().invertSelf();
      for (const {
        transform: Z,
        x: i,
        y: d,
        fontSize: c,
        path: G
      } of g)
        G && A.addPath(G, new DOMMatrix(Z).preMultiplySelf(l).translate(i, d).scale(c, -c));
      C.clip(A);
    }
    delete this.pendingTextPaths;
  }
  setCharSpacing(I, g) {
    this.dependencyTracker?.recordSimpleData("charSpacing", I), this.current.charSpacing = g;
  }
  setWordSpacing(I, g) {
    this.dependencyTracker?.recordSimpleData("wordSpacing", I), this.current.wordSpacing = g;
  }
  setHScale(I, g) {
    this.dependencyTracker?.recordSimpleData("hScale", I), this.current.textHScale = g / 100;
  }
  setLeading(I, g) {
    this.dependencyTracker?.recordSimpleData("leading", I), this.current.leading = -g;
  }
  setFont(I, g, C) {
    this.dependencyTracker?.recordSimpleData("font", I).recordNamedDependency(I, g);
    const A = this.commonObjs.get(g), l = this.current;
    if (!A)
      throw new Error(`Can't find font for ${g}`);
    if (l.fontMatrix = A.fontMatrix || tC, (l.fontMatrix[0] === 0 || l.fontMatrix[3] === 0) && j("Invalid font matrix for font " + g), C < 0 ? (C = -C, l.fontDirection = -1) : l.fontDirection = 1, this.current.font = A, this.current.fontSize = C, A.isType3Font)
      return;
    const Z = A.loadedName || "sans-serif", i = A.systemFontInfo?.css || `"${Z}", ${A.fallbackName}`;
    let d = "normal";
    A.black ? d = "900" : A.bold && (d = "bold");
    const c = A.italic ? "italic" : "normal";
    let G = C;
    C < GA ? G = GA : C > bA && (G = bA), this.current.fontSizeScale = C / G, this.ctx.font = `${c} ${d} ${G}px ${i}`;
  }
  setTextRenderingMode(I, g) {
    this.dependencyTracker?.recordSimpleData("textRenderingMode", I), this.current.textRenderingMode = g;
  }
  setTextRise(I, g) {
    this.dependencyTracker?.recordSimpleData("textRise", I), this.current.textRise = g;
  }
  moveText(I, g, C) {
    this.dependencyTracker?.resetIncrementalData("sameLineText").recordIncrementalData("moveText", I), this.current.x = this.current.lineX += g, this.current.y = this.current.lineY += C;
  }
  setLeadingMoveText(I, g, C) {
    this.setLeading(I, -C), this.moveText(I, g, C);
  }
  setTextMatrix(I, g) {
    this.dependencyTracker?.recordSimpleData("textMatrix", I);
    const {
      current: C
    } = this;
    C.textMatrix = g, C.textMatrixScale = Math.hypot(g[0], g[1]), C.x = C.lineX = 0, C.y = C.lineY = 0;
  }
  nextLine(I) {
    this.moveText(I, 0, this.current.leading), this.dependencyTracker?.recordIncrementalData("moveText", this.dependencyTracker.getSimpleIndex("leading") ?? I);
  }
  #C(I, g, C) {
    const A = new Path2D();
    return A.addPath(I, new DOMMatrix(C).invertSelf().multiplySelf(g)), A;
  }
  paintChar(I, g, C, A, l, Z) {
    const i = this.ctx, d = this.current, c = d.font, G = d.textRenderingMode, b = d.fontSize / d.fontSizeScale, m = G & yI.FILL_STROKE_MASK, B = !!(G & yI.ADD_TO_PATH_FLAG), o = d.patternFill && !c.missingFile, W = d.patternStroke && !c.missingFile;
    let Y;
    if ((c.disableFontFace || B || o || W) && !c.missingFile && (Y = c.getPathGenerator(this.commonObjs, g)), Y && (c.disableFontFace || o || W)) {
      i.save(), i.translate(C, A), i.scale(b, -b), this.dependencyTracker?.recordCharacterBBox(I, i, c);
      let h;
      if (m === yI.FILL || m === yI.FILL_STROKE)
        if (l) {
          h = i.getTransform(), i.setTransform(...l);
          const a = this.#C(Y, h, l);
          i.fill(a);
        } else
          i.fill(Y);
      if (m === yI.STROKE || m === yI.FILL_STROKE)
        if (Z) {
          h ||= i.getTransform(), i.setTransform(...Z);
          const {
            a,
            b: w,
            c: n,
            d: V
          } = h, X = J.inverseTransform(Z), y = J.transform([a, w, n, V, 0, 0], X);
          J.singularValueDecompose2dScale(y, FI), i.lineWidth *= Math.max(FI[0], FI[1]) / b, i.stroke(this.#C(Y, h, Z));
        } else
          i.lineWidth /= b, i.stroke(Y);
      i.restore();
    } else
      (m === yI.FILL || m === yI.FILL_STROKE) && (i.fillText(g, C, A), this.dependencyTracker?.recordCharacterBBox(I, i, c, b, C, A, () => i.measureText(g))), (m === yI.STROKE || m === yI.FILL_STROKE) && (this.dependencyTracker && this.dependencyTracker?.recordCharacterBBox(I, i, c, b, C, A, () => i.measureText(g)).recordDependencies(I, LI.stroke), i.strokeText(g, C, A));
    B && ((this.pendingTextPaths ||= []).push({
      transform: cI(i),
      x: C,
      y: A,
      fontSize: b,
      path: Y
    }), this.dependencyTracker?.recordCharacterBBox(I, i, c, b, C, A));
  }
  get isFontSubpixelAAEnabled() {
    const {
      context: I
    } = this.cachedCanvases.getCanvas("isFontSubpixelAAEnabled", 10, 10);
    I.scale(1.5, 1), I.fillText("I", 0, 10);
    const g = I.getImageData(0, 0, 10, 10).data;
    let C = !1;
    for (let A = 3; A < g.length; A += 4)
      if (g[A] > 0 && g[A] < 255) {
        C = !0;
        break;
      }
    return P(this, "isFontSubpixelAAEnabled", C);
  }
  showText(I, g) {
    this.dependencyTracker && (this.dependencyTracker.recordDependencies(I, LI.showText).copyDependenciesFromIncrementalOperation(I, "sameLineText").resetBBox(I), this.current.textRenderingMode & yI.ADD_TO_PATH_FLAG && this.dependencyTracker.recordFutureForcedDependency("textClip", I).inheritPendingDependenciesAsFutureForcedDependencies());
    const C = this.current, A = C.font;
    if (A.isType3Font) {
      this.showType3Text(I, g), this.dependencyTracker?.recordOperation(I).recordIncrementalData("sameLineText", I);
      return;
    }
    const l = C.fontSize;
    if (l === 0) {
      this.dependencyTracker?.recordOperation(I);
      return;
    }
    const Z = this.ctx, i = C.fontSizeScale, d = C.charSpacing, c = C.wordSpacing, G = C.fontDirection, b = C.textHScale * G, m = g.length, B = A.vertical, o = B ? 1 : -1, W = A.defaultVMetrics, Y = l * C.fontMatrix[0], h = C.textRenderingMode === yI.FILL && !A.disableFontFace && !C.patternFill;
    Z.save(), C.textMatrix && Z.transform(...C.textMatrix), Z.translate(C.x, C.y + C.textRise), G > 0 ? Z.scale(b, -1) : Z.scale(b, 1);
    let a, w;
    if (C.patternFill) {
      Z.save();
      const N = C.fillColor.getPattern(Z, this, UI(Z), NI.FILL);
      a = cI(Z), Z.restore(), Z.fillStyle = N;
    }
    if (C.patternStroke) {
      Z.save();
      const N = C.strokeColor.getPattern(Z, this, UI(Z), NI.STROKE);
      w = cI(Z), Z.restore(), Z.strokeStyle = N;
    }
    let n = C.lineWidth;
    const V = C.textMatrixScale;
    if (V === 0 || n === 0) {
      const N = C.textRenderingMode & yI.FILL_STROKE_MASK;
      (N === yI.STROKE || N === yI.FILL_STROKE) && (n = this.getSinglePixelWidth());
    } else
      n /= V;
    if (i !== 1 && (Z.scale(i, i), n /= i), Z.lineWidth = n, A.isInvalidPDFjsFont) {
      const N = [];
      let t = 0;
      for (const R of g)
        N.push(R.unicode), t += R.width;
      const e = N.join("");
      if (Z.fillText(e, 0, 0), this.dependencyTracker !== null) {
        const R = Z.measureText(e);
        this.dependencyTracker.recordBBox(I, this.ctx, -R.actualBoundingBoxLeft, R.actualBoundingBoxRight, -R.actualBoundingBoxAscent, R.actualBoundingBoxDescent).recordOperation(I).recordIncrementalData("sameLineText", I);
      }
      C.x += t * Y * b, Z.restore(), this.compose();
      return;
    }
    let X = 0, y;
    for (y = 0; y < m; ++y) {
      const N = g[y];
      if (typeof N == "number") {
        X += o * N * l / 1e3;
        continue;
      }
      let t = !1;
      const e = (N.isSpace ? c : 0) + d, R = N.fontChar, F = N.accent;
      let K, S, L = N.width;
      if (B) {
        const k = N.vmetric || W, v = -(N.vmetric ? k[1] : L * 0.5) * Y, $ = k[2] * Y;
        L = k ? -k[0] : L, K = v / i, S = (X + $) / i;
      } else
        K = X / i, S = 0;
      let M;
      if (A.remeasure && L > 0) {
        M = Z.measureText(R);
        const k = M.width * 1e3 / l * i;
        if (L < k && this.isFontSubpixelAAEnabled) {
          const v = L / k;
          t = !0, Z.save(), Z.scale(v, 1), K /= v;
        } else L !== k && (K += (L - k) / 2e3 * l / i);
      }
      if (this.contentVisible && (N.isInFont || A.missingFile)) {
        if (h && !F)
          Z.fillText(R, K, S), this.dependencyTracker?.recordCharacterBBox(I, Z, M ? {
            bbox: null
          } : A, l / i, K, S, () => M ?? Z.measureText(R));
        else if (this.paintChar(I, R, K, S, a, w), F) {
          const k = K + l * F.offset.x / i, v = S - l * F.offset.y / i;
          this.paintChar(I, F.fontChar, k, v, a, w);
        }
      }
      const u = B ? L * Y - e * G : L * Y + e * G;
      X += u, t && Z.restore();
    }
    B ? C.y -= X : C.x += X * b, Z.restore(), this.compose(), this.dependencyTracker?.recordOperation(I).recordIncrementalData("sameLineText", I);
  }
  showType3Text(I, g) {
    const C = this.ctx, A = this.current, l = A.font, Z = A.fontSize, i = A.fontDirection, d = l.vertical ? 1 : -1, c = A.charSpacing, G = A.wordSpacing, b = A.textHScale * i, m = A.fontMatrix || tC, B = g.length, o = A.textRenderingMode === yI.INVISIBLE;
    let W, Y, h, a;
    if (o || Z === 0)
      return;
    this._cachedScaleForStroking[0] = -1, this._cachedGetSinglePixelWidth = null, C.save(), A.textMatrix && C.transform(...A.textMatrix), C.translate(A.x, A.y + A.textRise), C.scale(b, i);
    const w = this.dependencyTracker;
    for (this.dependencyTracker = w ? new iC(w, I) : null, W = 0; W < B; ++W) {
      if (Y = g[W], typeof Y == "number") {
        a = d * Y * Z / 1e3, this.ctx.translate(a, 0), A.x += a * b;
        continue;
      }
      const n = (Y.isSpace ? G : 0) + c, V = l.charProcOperatorList[Y.operatorListId];
      V ? this.contentVisible && (this.save(), C.scale(Z, Z), C.transform(...m), this.executeOperatorList(V), this.restore()) : j(`Type3 character "${Y.operatorListId}" is not available.`);
      const X = [Y.width, 0];
      J.applyTransform(X, m), h = X[0] * Z + n, C.translate(h, 0), A.x += h * b;
    }
    C.restore(), w && (this.dependencyTracker.recordNestedDependencies(), this.dependencyTracker = w);
  }
  setCharWidth(I, g, C) {
  }
  setCharWidthAndBounds(I, g, C, A, l, Z, i) {
    const d = new Path2D();
    d.rect(A, l, Z - A, i - l), this.ctx.clip(d), this.dependencyTracker?.recordBBox(I, this.ctx, A, Z, l, i).recordClipBox(I, this.ctx, A, Z, l, i), this.endPath(I);
  }
  getColorN_Pattern(I, g) {
    let C;
    if (g[0] === "TilingPattern") {
      const A = this.baseTransform || cI(this.ctx), l = {
        createCanvasGraphics: (Z) => new Xg(Z, this.commonObjs, this.objs, this.canvasFactory, this.filterFactory, {
          optionalContentConfig: this.optionalContentConfig,
          markedContentStack: this.markedContentStack
        }, void 0, void 0, this.dependencyTracker ? new iC(this.dependencyTracker, I) : null)
      };
      C = new rC(g, this.ctx, l, A);
    } else
      C = this._getPattern(I, g[1], g[2]);
    return C;
  }
  setStrokeColorN(I, ...g) {
    this.dependencyTracker?.recordSimpleData("strokeColor", I), this.current.strokeColor = this.getColorN_Pattern(I, g), this.current.patternStroke = !0;
  }
  setFillColorN(I, ...g) {
    this.dependencyTracker?.recordSimpleData("fillColor", I), this.current.fillColor = this.getColorN_Pattern(I, g), this.current.patternFill = !0;
  }
  setStrokeRGBColor(I, g) {
    this.dependencyTracker?.recordSimpleData("strokeColor", I), this.ctx.strokeStyle = this.current.strokeColor = g, this.current.patternStroke = !1;
  }
  setStrokeTransparent(I) {
    this.dependencyTracker?.recordSimpleData("strokeColor", I), this.ctx.strokeStyle = this.current.strokeColor = "transparent", this.current.patternStroke = !1;
  }
  setFillRGBColor(I, g) {
    this.dependencyTracker?.recordSimpleData("fillColor", I), this.ctx.fillStyle = this.current.fillColor = g, this.current.patternFill = !1;
  }
  setFillTransparent(I) {
    this.dependencyTracker?.recordSimpleData("fillColor", I), this.ctx.fillStyle = this.current.fillColor = "transparent", this.current.patternFill = !1;
  }
  _getPattern(I, g, C = null) {
    let A;
    return this.cachedPatterns.has(g) ? A = this.cachedPatterns.get(g) : (A = jl(this.getObject(I, g)), this.cachedPatterns.set(g, A)), C && (A.matrix = C), A;
  }
  shadingFill(I, g) {
    if (!this.contentVisible)
      return;
    const C = this.ctx;
    this.save(I);
    const A = this._getPattern(I, g);
    C.fillStyle = A.getPattern(C, this, UI(C), NI.SHADING);
    const l = UI(C);
    if (l) {
      const {
        width: Z,
        height: i
      } = C.canvas, d = ag.slice();
      J.axialAlignedBoundingBox([0, 0, Z, i], l, d);
      const [c, G, b, m] = d;
      this.ctx.fillRect(c, G, b - c, m - G);
    } else
      this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);
    this.dependencyTracker?.resetBBox(I).recordFullPageBBox(I).recordDependencies(I, LI.transform).recordDependencies(I, LI.fill).recordOperation(I), this.compose(this.current.getClippedPathBoundingBox()), this.restore(I);
  }
  beginInlineImage() {
    II("Should not call beginInlineImage");
  }
  beginImageData() {
    II("Should not call beginImageData");
  }
  paintFormXObjectBegin(I, g, C) {
    if (this.contentVisible && (this.save(I), this.baseTransformStack.push(this.baseTransform), g && this.transform(I, ...g), this.baseTransform = cI(this.ctx), C)) {
      J.axialAlignedBoundingBox(C, this.baseTransform, this.current.minMax);
      const [A, l, Z, i] = C, d = new Path2D();
      d.rect(A, l, Z - A, i - l), this.ctx.clip(d), this.dependencyTracker?.recordClipBox(I, this.ctx, A, Z, l, i), this.endPath(I);
    }
  }
  paintFormXObjectEnd(I) {
    this.contentVisible && (this.restore(I), this.baseTransform = this.baseTransformStack.pop());
  }
  beginGroup(I, g) {
    if (!this.contentVisible)
      return;
    this.save(I), this.inSMaskMode && (this.endSMaskMode(), this.current.activeSMask = null);
    const C = this.ctx;
    g.isolated || sC("TODO: Support non-isolated groups."), g.knockout && j("Knockout groups not supported.");
    const A = cI(C);
    if (g.matrix && C.transform(...g.matrix), !g.bbox)
      throw new Error("Bounding box is required.");
    let l = ag.slice();
    J.axialAlignedBoundingBox(g.bbox, cI(C), l);
    const Z = [0, 0, C.canvas.width, C.canvas.height];
    l = J.intersect(l, Z) || [0, 0, 0, 0];
    const i = Math.floor(l[0]), d = Math.floor(l[1]), c = Math.max(Math.ceil(l[2]) - i, 1), G = Math.max(Math.ceil(l[3]) - d, 1);
    this.current.startNewPathAndClipBox([0, 0, c, G]);
    let b = "groupAt" + this.groupLevel;
    g.smask && (b += "_smask_" + this.smaskCounter++ % 2);
    const m = this.cachedCanvases.getCanvas(b, c, G), B = m.context;
    B.translate(-i, -d), B.transform(...A);
    let o = new Path2D();
    const [W, Y, h, a] = g.bbox;
    if (o.rect(W, Y, h - W, a - Y), g.matrix) {
      const w = new Path2D();
      w.addPath(o, new DOMMatrix(g.matrix)), o = w;
    }
    B.clip(o), g.smask && this.smaskStack.push({
      canvas: m.canvas,
      context: B,
      offsetX: i,
      offsetY: d,
      subtype: g.smask.subtype,
      backdrop: g.smask.backdrop,
      transferMap: g.smask.transferMap || null,
      startTransformInverse: null
    }), (!g.smask || this.dependencyTracker) && (C.setTransform(1, 0, 0, 1, 0, 0), C.translate(i, d), C.save()), Rg(C, B), this.ctx = B, this.dependencyTracker?.inheritSimpleDataAsFutureForcedDependencies(["fillAlpha", "strokeAlpha", "globalCompositeOperation"]).pushBaseTransform(C), this.setGState(I, [["BM", "source-over"], ["ca", 1], ["CA", 1]]), this.groupStack.push(C), this.groupLevel++;
  }
  endGroup(I, g) {
    if (!this.contentVisible)
      return;
    this.groupLevel--;
    const C = this.ctx, A = this.groupStack.pop();
    if (this.ctx = A, this.ctx.imageSmoothingEnabled = !1, this.dependencyTracker?.popBaseTransform(), g.smask)
      this.tempSMask = this.smaskStack.pop(), this.restore(I), this.dependencyTracker && this.ctx.restore();
    else {
      this.ctx.restore();
      const l = cI(this.ctx);
      this.restore(I), this.ctx.save(), this.ctx.setTransform(...l);
      const Z = ag.slice();
      J.axialAlignedBoundingBox([0, 0, C.canvas.width, C.canvas.height], l, Z), this.ctx.drawImage(C.canvas, 0, 0), this.ctx.restore(), this.compose(Z);
    }
  }
  beginAnnotation(I, g, C, A, l, Z) {
    if (this.#I(), _g(this.ctx), this.ctx.save(), this.save(I), this.baseTransform && this.ctx.setTransform(...this.baseTransform), C) {
      const i = C[2] - C[0], d = C[3] - C[1];
      if (Z && this.annotationCanvasMap) {
        A = A.slice(), A[4] -= C[0], A[5] -= C[1], C = C.slice(), C[0] = C[1] = 0, C[2] = i, C[3] = d, J.singularValueDecompose2dScale(cI(this.ctx), FI);
        const {
          viewportScale: c
        } = this, G = Math.ceil(i * this.outputScaleX * c), b = Math.ceil(d * this.outputScaleY * c);
        this.annotationCanvas = this.canvasFactory.create(G, b);
        const {
          canvas: m,
          context: B
        } = this.annotationCanvas;
        this.annotationCanvasMap.set(g, m), this.annotationCanvas.savedCtx = this.ctx, this.ctx = B, this.ctx.save(), this.ctx.setTransform(FI[0], 0, 0, -FI[1], 0, d * FI[1]), _g(this.ctx);
      } else {
        _g(this.ctx), this.endPath(I);
        const c = new Path2D();
        c.rect(C[0], C[1], i, d), this.ctx.clip(c);
      }
    }
    this.current = new BA(this.ctx.canvas.width, this.ctx.canvas.height), this.transform(I, ...A), this.transform(I, ...l);
  }
  endAnnotation(I) {
    this.annotationCanvas && (this.ctx.restore(), this.#g(), this.ctx = this.annotationCanvas.savedCtx, delete this.annotationCanvas.savedCtx, delete this.annotationCanvas);
  }
  paintImageMaskXObject(I, g) {
    if (!this.contentVisible)
      return;
    const C = g.count;
    g = this.getObject(I, g.data, g), g.count = C;
    const A = this.ctx, l = this._createMaskCanvas(I, g), Z = l.canvas;
    A.save(), A.setTransform(1, 0, 0, 1, 0, 0), A.drawImage(Z, l.offsetX, l.offsetY), this.dependencyTracker?.resetBBox(I).recordBBox(I, this.ctx, l.offsetX, l.offsetX + Z.width, l.offsetY, l.offsetY + Z.height).recordOperation(I), A.restore(), this.compose();
  }
  paintImageMaskXObjectRepeat(I, g, C, A = 0, l = 0, Z, i) {
    if (!this.contentVisible)
      return;
    g = this.getObject(I, g.data, g);
    const d = this.ctx;
    d.save();
    const c = cI(d);
    d.transform(C, A, l, Z, 0, 0);
    const G = this._createMaskCanvas(I, g);
    d.setTransform(1, 0, 0, 1, G.offsetX - c[4], G.offsetY - c[5]), this.dependencyTracker?.resetBBox(I);
    for (let b = 0, m = i.length; b < m; b += 2) {
      const B = J.transform(c, [C, A, l, Z, i[b], i[b + 1]]);
      d.drawImage(G.canvas, B[4], B[5]), this.dependencyTracker?.recordBBox(I, this.ctx, B[4], B[4] + G.canvas.width, B[5], B[5] + G.canvas.height);
    }
    d.restore(), this.compose(), this.dependencyTracker?.recordOperation(I);
  }
  paintImageMaskXObjectGroup(I, g) {
    if (!this.contentVisible)
      return;
    const C = this.ctx, A = this.current.fillColor, l = this.current.patternFill;
    this.dependencyTracker?.resetBBox(I).recordDependencies(I, LI.transformAndFill);
    for (const Z of g) {
      const {
        data: i,
        width: d,
        height: c,
        transform: G
      } = Z, b = this.cachedCanvases.getCanvas("maskCanvas", d, c), m = b.context;
      m.save();
      const B = this.getObject(I, i, Z);
      WA(m, B), m.globalCompositeOperation = "source-in", m.fillStyle = l ? A.getPattern(m, this, UI(C), NI.FILL) : A, m.fillRect(0, 0, d, c), m.restore(), C.save(), C.transform(...G), C.scale(1, -1), qg(C, b.canvas, 0, 0, d, c, 0, -1, 1, 1), this.dependencyTracker?.recordBBox(I, C, 0, d, 0, c), C.restore();
    }
    this.compose(), this.dependencyTracker?.recordOperation(I);
  }
  paintImageXObject(I, g) {
    if (!this.contentVisible)
      return;
    const C = this.getObject(I, g);
    if (!C) {
      j("Dependent image isn't ready yet");
      return;
    }
    this.paintInlineImageXObject(I, C);
  }
  paintImageXObjectRepeat(I, g, C, A, l) {
    if (!this.contentVisible)
      return;
    const Z = this.getObject(I, g);
    if (!Z) {
      j("Dependent image isn't ready yet");
      return;
    }
    const i = Z.width, d = Z.height, c = [];
    for (let G = 0, b = l.length; G < b; G += 2)
      c.push({
        transform: [C, 0, 0, A, l[G], l[G + 1]],
        x: 0,
        y: 0,
        w: i,
        h: d
      });
    this.paintInlineImageXObjectGroup(I, Z, c);
  }
  applyTransferMapsToCanvas(I) {
    return this.current.transferMaps !== "none" && (I.filter = this.current.transferMaps, I.drawImage(I.canvas, 0, 0), I.filter = "none"), I.canvas;
  }
  applyTransferMapsToBitmap(I) {
    if (this.current.transferMaps === "none")
      return I.bitmap;
    const {
      bitmap: g,
      width: C,
      height: A
    } = I, l = this.cachedCanvases.getCanvas("inlineImage", C, A), Z = l.context;
    return Z.filter = this.current.transferMaps, Z.drawImage(g, 0, 0), Z.filter = "none", l.canvas;
  }
  paintInlineImageXObject(I, g) {
    if (!this.contentVisible)
      return;
    const C = g.width, A = g.height, l = this.ctx;
    this.save(I);
    const {
      filter: Z
    } = l;
    Z !== "none" && Z !== "" && (l.filter = "none"), l.scale(1 / C, -1 / A);
    let i;
    if (g.bitmap)
      i = this.applyTransferMapsToBitmap(g);
    else if (typeof HTMLElement == "function" && g instanceof HTMLElement || !g.data)
      i = g;
    else {
      const G = this.cachedCanvases.getCanvas("inlineImage", C, A).context;
      oA(G, g), i = this.applyTransferMapsToCanvas(G);
    }
    const d = this._scaleImage(i, UI(l));
    l.imageSmoothingEnabled = hA(cI(l), g.interpolate), this.dependencyTracker?.resetBBox(I).recordBBox(I, l, 0, C, -A, 0).recordDependencies(I, LI.imageXObject).recordOperation(I), qg(l, d.img, 0, 0, d.paintWidth, d.paintHeight, 0, -A, C, A), this.compose(), this.restore(I);
  }
  paintInlineImageXObjectGroup(I, g, C) {
    if (!this.contentVisible)
      return;
    const A = this.ctx;
    let l;
    if (g.bitmap)
      l = g.bitmap;
    else {
      const Z = g.width, i = g.height, c = this.cachedCanvases.getCanvas("inlineImage", Z, i).context;
      oA(c, g), l = this.applyTransferMapsToCanvas(c);
    }
    this.dependencyTracker?.resetBBox(I);
    for (const Z of C)
      A.save(), A.transform(...Z.transform), A.scale(1, -1), qg(A, l, Z.x, Z.y, Z.w, Z.h, 0, -1, 1, 1), this.dependencyTracker?.recordBBox(I, A, 0, 1, -1, 0), A.restore();
    this.dependencyTracker?.recordOperation(I), this.compose();
  }
  paintSolidColorImageMask(I) {
    this.contentVisible && (this.dependencyTracker?.resetBBox(I).recordBBox(I, this.ctx, 0, 1, 0, 1).recordDependencies(I, LI.fill).recordOperation(I), this.ctx.fillRect(0, 0, 1, 1), this.compose());
  }
  markPoint(I, g) {
  }
  markPointProps(I, g, C) {
  }
  beginMarkedContent(I, g) {
    this.dependencyTracker?.beginMarkedContent(I), this.markedContentStack.push({
      visible: !0
    });
  }
  beginMarkedContentProps(I, g, C) {
    this.dependencyTracker?.beginMarkedContent(I), g === "OC" ? this.markedContentStack.push({
      visible: this.optionalContentConfig.isVisible(C)
    }) : this.markedContentStack.push({
      visible: !0
    }), this.contentVisible = this.isContentVisible();
  }
  endMarkedContent(I) {
    this.dependencyTracker?.endMarkedContent(I), this.markedContentStack.pop(), this.contentVisible = this.isContentVisible();
  }
  beginCompat(I) {
  }
  endCompat(I) {
  }
  consumePath(I, g, C) {
    const A = this.current.isEmptyClip();
    this.pendingClip && this.current.updateClipFromPath(), this.pendingClip || this.compose(C);
    const l = this.ctx;
    this.pendingClip ? (A || (this.pendingClip === YA ? l.clip(g, "evenodd") : l.clip(g)), this.pendingClip = null, this.dependencyTracker?.bboxToClipBoxDropOperation(I).recordFutureForcedDependency("clipPath", I)) : this.dependencyTracker?.recordOperation(I), this.current.startNewPathAndClipBox(this.current.clipBox);
  }
  getSinglePixelWidth() {
    if (!this._cachedGetSinglePixelWidth) {
      const I = cI(this.ctx);
      if (I[1] === 0 && I[2] === 0)
        this._cachedGetSinglePixelWidth = 1 / Math.min(Math.abs(I[0]), Math.abs(I[3]));
      else {
        const g = Math.abs(I[0] * I[3] - I[2] * I[1]), C = Math.hypot(I[0], I[2]), A = Math.hypot(I[1], I[3]);
        this._cachedGetSinglePixelWidth = Math.max(C, A) / g;
      }
    }
    return this._cachedGetSinglePixelWidth;
  }
  getScaleForStroking() {
    if (this._cachedScaleForStroking[0] === -1) {
      const {
        lineWidth: I
      } = this.current, {
        a: g,
        b: C,
        c: A,
        d: l
      } = this.ctx.getTransform();
      let Z, i;
      if (C === 0 && A === 0) {
        const d = Math.abs(g), c = Math.abs(l);
        if (d === c)
          if (I === 0)
            Z = i = 1 / d;
          else {
            const G = d * I;
            Z = i = G < 1 ? 1 / G : 1;
          }
        else if (I === 0)
          Z = 1 / d, i = 1 / c;
        else {
          const G = d * I, b = c * I;
          Z = G < 1 ? 1 / G : 1, i = b < 1 ? 1 / b : 1;
        }
      } else {
        const d = Math.abs(g * l - C * A), c = Math.hypot(g, C), G = Math.hypot(A, l);
        if (I === 0)
          Z = G / d, i = c / d;
        else {
          const b = I * d;
          Z = G > b ? G / b : 1, i = c > b ? c / b : 1;
        }
      }
      this._cachedScaleForStroking[0] = Z, this._cachedScaleForStroking[1] = i;
    }
    return this._cachedScaleForStroking;
  }
  rescaleAndStroke(I, g) {
    const {
      ctx: C,
      current: {
        lineWidth: A
      }
    } = this, [l, Z] = this.getScaleForStroking();
    if (l === Z) {
      C.lineWidth = (A || 1) * l, C.stroke(I);
      return;
    }
    const i = C.getLineDash();
    g && C.save(), C.scale(l, Z), nC.a = 1 / l, nC.d = 1 / Z;
    const d = new Path2D();
    if (d.addPath(I, nC), i.length > 0) {
      const c = Math.max(l, Z);
      C.setLineDash(i.map((G) => G / c)), C.lineDashOffset /= c;
    }
    C.lineWidth = A || 1, C.stroke(d), g && C.restore();
  }
  isContentVisible() {
    for (let I = this.markedContentStack.length - 1; I >= 0; I--)
      if (!this.markedContentStack[I].visible)
        return !1;
    return !0;
  }
}
for (const s in sI)
  Xg.prototype[s] !== void 0 && (Xg.prototype[sI[s]] = Xg.prototype[s]);
class Ig {
  static #I = null;
  static #g = "";
  static get workerPort() {
    return this.#I;
  }
  static set workerPort(I) {
    if (!(typeof Worker < "u" && I instanceof Worker) && I !== null)
      throw new Error("Invalid `workerPort` type.");
    this.#I = I;
  }
  static get workerSrc() {
    return this.#g;
  }
  static set workerSrc(I) {
    if (typeof I != "string")
      throw new Error("Invalid `workerSrc` type.");
    this.#g = I;
  }
}
class ql {
  #I;
  #g;
  constructor({
    parsedData: I,
    rawData: g
  }) {
    this.#I = I, this.#g = g;
  }
  getRaw() {
    return this.#g;
  }
  get(I) {
    return this.#I.get(I) ?? null;
  }
  [Symbol.iterator]() {
    return this.#I.entries();
  }
}
const wg = Symbol("INTERNAL");
class _l {
  #I = !1;
  #g = !1;
  #C = !1;
  #A = !0;
  constructor(I, {
    name: g,
    intent: C,
    usage: A,
    rbGroups: l
  }) {
    this.#I = !!(I & SI.DISPLAY), this.#g = !!(I & SI.PRINT), this.name = g, this.intent = C, this.usage = A, this.rbGroups = l;
  }
  get visible() {
    if (this.#C)
      return this.#A;
    if (!this.#A)
      return !1;
    const {
      print: I,
      view: g
    } = this.usage;
    return this.#I ? g?.viewState !== "OFF" : this.#g ? I?.printState !== "OFF" : !0;
  }
  _setVisible(I, g, C = !1) {
    I !== wg && II("Internal method `_setVisible` called."), this.#C = C, this.#A = g;
  }
}
class $l {
  #I = null;
  #g = /* @__PURE__ */ new Map();
  #C = null;
  #A = null;
  constructor(I, g = SI.DISPLAY) {
    if (this.renderingIntent = g, this.name = null, this.creator = null, I !== null) {
      this.name = I.name, this.creator = I.creator, this.#A = I.order;
      for (const C of I.groups)
        this.#g.set(C.id, new _l(g, C));
      if (I.baseState === "OFF")
        for (const C of this.#g.values())
          C._setVisible(wg, !1);
      for (const C of I.on)
        this.#g.get(C)._setVisible(wg, !0);
      for (const C of I.off)
        this.#g.get(C)._setVisible(wg, !1);
      this.#C = this.getHash();
    }
  }
  #Z(I) {
    const g = I.length;
    if (g < 2)
      return !0;
    const C = I[0];
    for (let A = 1; A < g; A++) {
      const l = I[A];
      let Z;
      if (Array.isArray(l))
        Z = this.#Z(l);
      else if (this.#g.has(l))
        Z = this.#g.get(l).visible;
      else
        return j(`Optional content group not found: ${l}`), !0;
      switch (C) {
        case "And":
          if (!Z)
            return !1;
          break;
        case "Or":
          if (Z)
            return !0;
          break;
        case "Not":
          return !Z;
        default:
          return !0;
      }
    }
    return C === "And";
  }
  isVisible(I) {
    if (this.#g.size === 0)
      return !0;
    if (!I)
      return sC("Optional content group not defined."), !0;
    if (I.type === "OCG")
      return this.#g.has(I.id) ? this.#g.get(I.id).visible : (j(`Optional content group not found: ${I.id}`), !0);
    if (I.type === "OCMD") {
      if (I.expression)
        return this.#Z(I.expression);
      if (!I.policy || I.policy === "AnyOn") {
        for (const g of I.ids) {
          if (!this.#g.has(g))
            return j(`Optional content group not found: ${g}`), !0;
          if (this.#g.get(g).visible)
            return !0;
        }
        return !1;
      } else if (I.policy === "AllOn") {
        for (const g of I.ids) {
          if (!this.#g.has(g))
            return j(`Optional content group not found: ${g}`), !0;
          if (!this.#g.get(g).visible)
            return !1;
        }
        return !0;
      } else if (I.policy === "AnyOff") {
        for (const g of I.ids) {
          if (!this.#g.has(g))
            return j(`Optional content group not found: ${g}`), !0;
          if (!this.#g.get(g).visible)
            return !0;
        }
        return !1;
      } else if (I.policy === "AllOff") {
        for (const g of I.ids) {
          if (!this.#g.has(g))
            return j(`Optional content group not found: ${g}`), !0;
          if (this.#g.get(g).visible)
            return !1;
        }
        return !0;
      }
      return j(`Unknown optional content policy ${I.policy}.`), !0;
    }
    return j(`Unknown group type ${I.type}.`), !0;
  }
  setVisibility(I, g = !0, C = !0) {
    const A = this.#g.get(I);
    if (!A) {
      j(`Optional content group not found: ${I}`);
      return;
    }
    if (C && g && A.rbGroups.length)
      for (const l of A.rbGroups)
        for (const Z of l)
          Z !== I && this.#g.get(Z)?._setVisible(wg, !1, !0);
    A._setVisible(wg, !!g, !0), this.#I = null;
  }
  setOCGState({
    state: I,
    preserveRB: g
  }) {
    let C;
    for (const A of I) {
      switch (A) {
        case "ON":
        case "OFF":
        case "Toggle":
          C = A;
          continue;
      }
      const l = this.#g.get(A);
      if (l)
        switch (C) {
          case "ON":
            this.setVisibility(A, !0, g);
            break;
          case "OFF":
            this.setVisibility(A, !1, g);
            break;
          case "Toggle":
            this.setVisibility(A, !l.visible, g);
            break;
        }
    }
    this.#I = null;
  }
  get hasInitialVisibility() {
    return this.#C === null || this.getHash() === this.#C;
  }
  getOrder() {
    return this.#g.size ? this.#A ? this.#A.slice() : [...this.#g.keys()] : null;
  }
  getGroup(I) {
    return this.#g.get(I) || null;
  }
  getHash() {
    if (this.#I !== null)
      return this.#I;
    const I = new JA();
    for (const [g, C] of this.#g)
      I.update(`${g}:${C.visible}`);
    return this.#I = I.hexdigest();
  }
  [Symbol.iterator]() {
    return this.#g.entries();
  }
}
class IZ {
  constructor(I, {
    disableRange: g = !1,
    disableStream: C = !1
  }) {
    WI(I, 'PDFDataTransportStream - missing required "pdfDataRangeTransport" argument.');
    const {
      length: A,
      initialData: l,
      progressiveDone: Z,
      contentDispositionFilename: i
    } = I;
    if (this._queuedChunks = [], this._progressiveDone = Z, this._contentDispositionFilename = i, l?.length > 0) {
      const d = l instanceof Uint8Array && l.byteLength === l.buffer.byteLength ? l.buffer : new Uint8Array(l).buffer;
      this._queuedChunks.push(d);
    }
    this._pdfDataRangeTransport = I, this._isStreamingSupported = !C, this._isRangeSupported = !g, this._contentLength = A, this._fullRequestReader = null, this._rangeReaders = [], I.addRangeListener((d, c) => {
      this._onReceiveData({
        begin: d,
        chunk: c
      });
    }), I.addProgressListener((d, c) => {
      this._onProgress({
        loaded: d,
        total: c
      });
    }), I.addProgressiveReadListener((d) => {
      this._onReceiveData({
        chunk: d
      });
    }), I.addProgressiveDoneListener(() => {
      this._onProgressiveDone();
    }), I.transportReady();
  }
  _onReceiveData({
    begin: I,
    chunk: g
  }) {
    const C = g instanceof Uint8Array && g.byteLength === g.buffer.byteLength ? g.buffer : new Uint8Array(g).buffer;
    if (I === void 0)
      this._fullRequestReader ? this._fullRequestReader._enqueue(C) : this._queuedChunks.push(C);
    else {
      const A = this._rangeReaders.some(function(l) {
        return l._begin !== I ? !1 : (l._enqueue(C), !0);
      });
      WI(A, "_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.");
    }
  }
  get _progressiveDataLength() {
    return this._fullRequestReader?._loaded ?? 0;
  }
  _onProgress(I) {
    I.total === void 0 ? this._rangeReaders[0]?.onProgress?.({
      loaded: I.loaded
    }) : this._fullRequestReader?.onProgress?.({
      loaded: I.loaded,
      total: I.total
    });
  }
  _onProgressiveDone() {
    this._fullRequestReader?.progressiveDone(), this._progressiveDone = !0;
  }
  _removeRangeReader(I) {
    const g = this._rangeReaders.indexOf(I);
    g >= 0 && this._rangeReaders.splice(g, 1);
  }
  getFullReader() {
    WI(!this._fullRequestReader, "PDFDataTransportStream.getFullReader can only be called once.");
    const I = this._queuedChunks;
    return this._queuedChunks = null, new gZ(this, I, this._progressiveDone, this._contentDispositionFilename);
  }
  getRangeReader(I, g) {
    if (g <= this._progressiveDataLength)
      return null;
    const C = new CZ(this, I, g);
    return this._pdfDataRangeTransport.requestDataRange(I, g), this._rangeReaders.push(C), C;
  }
  cancelAllRequests(I) {
    this._fullRequestReader?.cancel(I);
    for (const g of this._rangeReaders.slice(0))
      g.cancel(I);
    this._pdfDataRangeTransport.abort();
  }
}
class gZ {
  constructor(I, g, C = !1, A = null) {
    this._stream = I, this._done = C || !1, this._filename = bC(A) ? A : null, this._queuedChunks = g || [], this._loaded = 0;
    for (const l of this._queuedChunks)
      this._loaded += l.byteLength;
    this._requests = [], this._headersReady = Promise.resolve(), I._fullRequestReader = this, this.onProgress = null;
  }
  _enqueue(I) {
    this._done || (this._requests.length > 0 ? this._requests.shift().resolve({
      value: I,
      done: !1
    }) : this._queuedChunks.push(I), this._loaded += I.byteLength);
  }
  get headersReady() {
    return this._headersReady;
  }
  get filename() {
    return this._filename;
  }
  get isRangeSupported() {
    return this._stream._isRangeSupported;
  }
  get isStreamingSupported() {
    return this._stream._isStreamingSupported;
  }
  get contentLength() {
    return this._stream._contentLength;
  }
  async read() {
    if (this._queuedChunks.length > 0)
      return {
        value: this._queuedChunks.shift(),
        done: !1
      };
    if (this._done)
      return {
        value: void 0,
        done: !0
      };
    const I = Promise.withResolvers();
    return this._requests.push(I), I.promise;
  }
  cancel(I) {
    this._done = !0;
    for (const g of this._requests)
      g.resolve({
        value: void 0,
        done: !0
      });
    this._requests.length = 0;
  }
  progressiveDone() {
    this._done || (this._done = !0);
  }
}
class CZ {
  constructor(I, g, C) {
    this._stream = I, this._begin = g, this._end = C, this._queuedChunk = null, this._requests = [], this._done = !1, this.onProgress = null;
  }
  _enqueue(I) {
    if (!this._done) {
      if (this._requests.length === 0)
        this._queuedChunk = I;
      else {
        this._requests.shift().resolve({
          value: I,
          done: !1
        });
        for (const C of this._requests)
          C.resolve({
            value: void 0,
            done: !0
          });
        this._requests.length = 0;
      }
      this._done = !0, this._stream._removeRangeReader(this);
    }
  }
  get isStreamingSupported() {
    return !1;
  }
  async read() {
    if (this._queuedChunk) {
      const g = this._queuedChunk;
      return this._queuedChunk = null, {
        value: g,
        done: !1
      };
    }
    if (this._done)
      return {
        value: void 0,
        done: !0
      };
    const I = Promise.withResolvers();
    return this._requests.push(I), I.promise;
  }
  cancel(I) {
    this._done = !0;
    for (const g of this._requests)
      g.resolve({
        value: void 0,
        done: !0
      });
    this._requests.length = 0, this._stream._removeRangeReader(this);
  }
}
function AZ(s) {
  let I = !0, g = C("filename\\*", "i").exec(s);
  if (g) {
    g = g[1];
    let G = i(g);
    return G = unescape(G), G = d(G), G = c(G), l(G);
  }
  if (g = Z(s), g) {
    const G = c(g);
    return l(G);
  }
  if (g = C("filename", "i").exec(s), g) {
    g = g[1];
    let G = i(g);
    return G = c(G), l(G);
  }
  function C(G, b) {
    return new RegExp("(?:^|;)\\s*" + G + '\\s*=\\s*([^";\\s][^;\\s]*|"(?:[^"\\\\]|\\\\"?)+"?)', b);
  }
  function A(G, b) {
    if (G) {
      if (!/^[\x00-\xFF]+$/.test(b))
        return b;
      try {
        const m = new TextDecoder(G, {
          fatal: !0
        }), B = kg(b);
        b = m.decode(B), I = !1;
      } catch {
      }
    }
    return b;
  }
  function l(G) {
    return I && /[\x80-\xff]/.test(G) && (G = A("utf-8", G), I && (G = A("iso-8859-1", G))), G;
  }
  function Z(G) {
    const b = [];
    let m;
    const B = C("filename\\*((?!0\\d)\\d+)(\\*?)", "ig");
    for (; (m = B.exec(G)) !== null; ) {
      let [, W, Y, h] = m;
      if (W = parseInt(W, 10), W in b) {
        if (W === 0)
          break;
        continue;
      }
      b[W] = [Y, h];
    }
    const o = [];
    for (let W = 0; W < b.length && W in b; ++W) {
      let [Y, h] = b[W];
      h = i(h), Y && (h = unescape(h), W === 0 && (h = d(h))), o.push(h);
    }
    return o.join("");
  }
  function i(G) {
    if (G.startsWith('"')) {
      const b = G.slice(1).split('\\"');
      for (let m = 0; m < b.length; ++m) {
        const B = b[m].indexOf('"');
        B !== -1 && (b[m] = b[m].slice(0, B), b.length = m + 1), b[m] = b[m].replaceAll(/\\(.)/g, "$1");
      }
      G = b.join('"');
    }
    return G;
  }
  function d(G) {
    const b = G.indexOf("'");
    if (b === -1)
      return G;
    const m = G.slice(0, b), o = G.slice(b + 1).replace(/^[^']*'/, "");
    return A(m, o);
  }
  function c(G) {
    return !G.startsWith("=?") || /[\x00-\x19\x80-\xff]/.test(G) ? G : G.replaceAll(/=\?([\w-]*)\?([QqBb])\?((?:[^?]|\?(?!=))*)\?=/g, function(b, m, B, o) {
      if (B === "q" || B === "Q")
        return o = o.replaceAll("_", " "), o = o.replaceAll(/=([0-9a-fA-F]{2})/g, function(W, Y) {
          return String.fromCharCode(parseInt(Y, 16));
        }), A(m, o);
      try {
        o = atob(o);
      } catch {
      }
      return A(m, o);
    });
  }
  return "";
}
function OA(s, I) {
  const g = new Headers();
  if (!s || !I || typeof I != "object")
    return g;
  for (const C in I) {
    const A = I[C];
    A !== void 0 && g.append(C, A);
  }
  return g;
}
function mC(s) {
  return URL.parse(s)?.origin ?? null;
}
function UA({
  responseHeaders: s,
  isHttp: I,
  rangeChunkSize: g,
  disableRange: C
}) {
  const A = {
    allowRangeRequests: !1,
    suggestedLength: void 0
  }, l = parseInt(s.get("Content-Length"), 10);
  return !Number.isInteger(l) || (A.suggestedLength = l, l <= 2 * g) || C || !I || s.get("Accept-Ranges") !== "bytes" || (s.get("Content-Encoding") || "identity") !== "identity" || (A.allowRangeRequests = !0), A;
}
function vA(s) {
  const I = s.get("Content-Disposition");
  if (I) {
    let g = AZ(I);
    if (g.includes("%"))
      try {
        g = decodeURIComponent(g);
      } catch {
      }
    if (bC(g))
      return g;
  }
  return null;
}
function Og(s, I) {
  return new pg(`Unexpected server response (${s}) while retrieving PDF "${I}".`, s, s === 404 || s === 0 && I.startsWith("file:"));
}
function xA(s) {
  return s === 200 || s === 206;
}
function EA(s, I, g) {
  return {
    method: "GET",
    headers: s,
    signal: g.signal,
    mode: "cors",
    credentials: I ? "include" : "same-origin",
    redirect: "follow"
  };
}
function PA(s) {
  return s instanceof Uint8Array ? s.buffer : s instanceof ArrayBuffer ? s : (j(`getArrayBuffer - unexpected data format: ${s}`), new Uint8Array(s).buffer);
}
class lZ {
  _responseOrigin = null;
  constructor(I) {
    this.source = I, this.isHttp = /^https?:/i.test(I.url), this.headers = OA(this.isHttp, I.httpHeaders), this._fullRequestReader = null, this._rangeRequestReaders = [];
  }
  get _progressiveDataLength() {
    return this._fullRequestReader?._loaded ?? 0;
  }
  getFullReader() {
    return WI(!this._fullRequestReader, "PDFFetchStream.getFullReader can only be called once."), this._fullRequestReader = new ZZ(this), this._fullRequestReader;
  }
  getRangeReader(I, g) {
    if (g <= this._progressiveDataLength)
      return null;
    const C = new iZ(this, I, g);
    return this._rangeRequestReaders.push(C), C;
  }
  cancelAllRequests(I) {
    this._fullRequestReader?.cancel(I);
    for (const g of this._rangeRequestReaders.slice(0))
      g.cancel(I);
  }
}
class ZZ {
  constructor(I) {
    this._stream = I, this._reader = null, this._loaded = 0, this._filename = null;
    const g = I.source;
    this._withCredentials = g.withCredentials || !1, this._contentLength = g.length, this._headersCapability = Promise.withResolvers(), this._disableRange = g.disableRange || !1, this._rangeChunkSize = g.rangeChunkSize, !this._rangeChunkSize && !this._disableRange && (this._disableRange = !0), this._abortController = new AbortController(), this._isStreamingSupported = !g.disableStream, this._isRangeSupported = !g.disableRange;
    const C = new Headers(I.headers), A = g.url;
    fetch(A, EA(C, this._withCredentials, this._abortController)).then((l) => {
      if (I._responseOrigin = mC(l.url), !xA(l.status))
        throw Og(l.status, A);
      this._reader = l.body.getReader(), this._headersCapability.resolve();
      const Z = l.headers, {
        allowRangeRequests: i,
        suggestedLength: d
      } = UA({
        responseHeaders: Z,
        isHttp: I.isHttp,
        rangeChunkSize: this._rangeChunkSize,
        disableRange: this._disableRange
      });
      this._isRangeSupported = i, this._contentLength = d || this._contentLength, this._filename = vA(Z), !this._isStreamingSupported && this._isRangeSupported && this.cancel(new gg("Streaming is disabled."));
    }).catch(this._headersCapability.reject), this.onProgress = null;
  }
  get headersReady() {
    return this._headersCapability.promise;
  }
  get filename() {
    return this._filename;
  }
  get contentLength() {
    return this._contentLength;
  }
  get isRangeSupported() {
    return this._isRangeSupported;
  }
  get isStreamingSupported() {
    return this._isStreamingSupported;
  }
  async read() {
    await this._headersCapability.promise;
    const {
      value: I,
      done: g
    } = await this._reader.read();
    return g ? {
      value: I,
      done: g
    } : (this._loaded += I.byteLength, this.onProgress?.({
      loaded: this._loaded,
      total: this._contentLength
    }), {
      value: PA(I),
      done: !1
    });
  }
  cancel(I) {
    this._reader?.cancel(I), this._abortController.abort();
  }
}
class iZ {
  constructor(I, g, C) {
    this._stream = I, this._reader = null, this._loaded = 0;
    const A = I.source;
    this._withCredentials = A.withCredentials || !1, this._readCapability = Promise.withResolvers(), this._isStreamingSupported = !A.disableStream, this._abortController = new AbortController();
    const l = new Headers(I.headers);
    l.append("Range", `bytes=${g}-${C - 1}`);
    const Z = A.url;
    fetch(Z, EA(l, this._withCredentials, this._abortController)).then((i) => {
      const d = mC(i.url);
      if (d !== I._responseOrigin)
        throw new Error(`Expected range response-origin "${d}" to match "${I._responseOrigin}".`);
      if (!xA(i.status))
        throw Og(i.status, Z);
      this._readCapability.resolve(), this._reader = i.body.getReader();
    }).catch(this._readCapability.reject), this.onProgress = null;
  }
  get isStreamingSupported() {
    return this._isStreamingSupported;
  }
  async read() {
    await this._readCapability.promise;
    const {
      value: I,
      done: g
    } = await this._reader.read();
    return g ? {
      value: I,
      done: g
    } : (this._loaded += I.byteLength, this.onProgress?.({
      loaded: this._loaded
    }), {
      value: PA(I),
      done: !1
    });
  }
  cancel(I) {
    this._reader?.cancel(I), this._abortController.abort();
  }
}
const yC = 200, NC = 206;
function dZ(s) {
  const I = s.response;
  return typeof I != "string" ? I : kg(I).buffer;
}
class cZ {
  _responseOrigin = null;
  constructor({
    url: I,
    httpHeaders: g,
    withCredentials: C
  }) {
    this.url = I, this.isHttp = /^https?:/i.test(I), this.headers = OA(this.isHttp, g), this.withCredentials = C || !1, this.currXhrId = 0, this.pendingRequests = /* @__PURE__ */ Object.create(null);
  }
  request(I) {
    const g = new XMLHttpRequest(), C = this.currXhrId++, A = this.pendingRequests[C] = {
      xhr: g
    };
    g.open("GET", this.url), g.withCredentials = this.withCredentials;
    for (const [l, Z] of this.headers)
      g.setRequestHeader(l, Z);
    return this.isHttp && "begin" in I && "end" in I ? (g.setRequestHeader("Range", `bytes=${I.begin}-${I.end - 1}`), A.expectedStatus = NC) : A.expectedStatus = yC, g.responseType = "arraybuffer", WI(I.onError, "Expected `onError` callback to be provided."), g.onerror = () => {
      I.onError(g.status);
    }, g.onreadystatechange = this.onStateChange.bind(this, C), g.onprogress = this.onProgress.bind(this, C), A.onHeadersReceived = I.onHeadersReceived, A.onDone = I.onDone, A.onError = I.onError, A.onProgress = I.onProgress, g.send(null), C;
  }
  onProgress(I, g) {
    const C = this.pendingRequests[I];
    C && C.onProgress?.(g);
  }
  onStateChange(I, g) {
    const C = this.pendingRequests[I];
    if (!C)
      return;
    const A = C.xhr;
    if (A.readyState >= 2 && C.onHeadersReceived && (C.onHeadersReceived(), delete C.onHeadersReceived), A.readyState !== 4 || !(I in this.pendingRequests))
      return;
    if (delete this.pendingRequests[I], A.status === 0 && this.isHttp) {
      C.onError(A.status);
      return;
    }
    const l = A.status || yC;
    if (!(l === yC && C.expectedStatus === NC) && l !== C.expectedStatus) {
      C.onError(A.status);
      return;
    }
    const i = dZ(A);
    if (l === NC) {
      const d = A.getResponseHeader("Content-Range"), c = /bytes (\d+)-(\d+)\/(\d+)/.exec(d);
      c ? C.onDone({
        begin: parseInt(c[1], 10),
        chunk: i
      }) : (j('Missing or invalid "Content-Range" header.'), C.onError(0));
    } else i ? C.onDone({
      begin: 0,
      chunk: i
    }) : C.onError(A.status);
  }
  getRequestXhr(I) {
    return this.pendingRequests[I].xhr;
  }
  isPendingRequest(I) {
    return I in this.pendingRequests;
  }
  abortRequest(I) {
    const g = this.pendingRequests[I].xhr;
    delete this.pendingRequests[I], g.abort();
  }
}
class sZ {
  constructor(I) {
    this._source = I, this._manager = new cZ(I), this._rangeChunkSize = I.rangeChunkSize, this._fullRequestReader = null, this._rangeRequestReaders = [];
  }
  _onRangeRequestReaderClosed(I) {
    const g = this._rangeRequestReaders.indexOf(I);
    g >= 0 && this._rangeRequestReaders.splice(g, 1);
  }
  getFullReader() {
    return WI(!this._fullRequestReader, "PDFNetworkStream.getFullReader can only be called once."), this._fullRequestReader = new GZ(this._manager, this._source), this._fullRequestReader;
  }
  getRangeReader(I, g) {
    const C = new bZ(this._manager, I, g);
    return C.onClosed = this._onRangeRequestReaderClosed.bind(this), this._rangeRequestReaders.push(C), C;
  }
  cancelAllRequests(I) {
    this._fullRequestReader?.cancel(I);
    for (const g of this._rangeRequestReaders.slice(0))
      g.cancel(I);
  }
}
class GZ {
  constructor(I, g) {
    this._manager = I, this._url = g.url, this._fullRequestId = I.request({
      onHeadersReceived: this._onHeadersReceived.bind(this),
      onDone: this._onDone.bind(this),
      onError: this._onError.bind(this),
      onProgress: this._onProgress.bind(this)
    }), this._headersCapability = Promise.withResolvers(), this._disableRange = g.disableRange || !1, this._contentLength = g.length, this._rangeChunkSize = g.rangeChunkSize, !this._rangeChunkSize && !this._disableRange && (this._disableRange = !0), this._isStreamingSupported = !1, this._isRangeSupported = !1, this._cachedChunks = [], this._requests = [], this._done = !1, this._storedError = void 0, this._filename = null, this.onProgress = null;
  }
  _onHeadersReceived() {
    const I = this._fullRequestId, g = this._manager.getRequestXhr(I);
    this._manager._responseOrigin = mC(g.responseURL);
    const C = g.getAllResponseHeaders(), A = new Headers(C ? C.trimStart().replace(/[^\S ]+$/, "").split(/[\r\n]+/).map((i) => {
      const [d, ...c] = i.split(": ");
      return [d, c.join(": ")];
    }) : []), {
      allowRangeRequests: l,
      suggestedLength: Z
    } = UA({
      responseHeaders: A,
      isHttp: this._manager.isHttp,
      rangeChunkSize: this._rangeChunkSize,
      disableRange: this._disableRange
    });
    l && (this._isRangeSupported = !0), this._contentLength = Z || this._contentLength, this._filename = vA(A), this._isRangeSupported && this._manager.abortRequest(I), this._headersCapability.resolve();
  }
  _onDone(I) {
    if (I && (this._requests.length > 0 ? this._requests.shift().resolve({
      value: I.chunk,
      done: !1
    }) : this._cachedChunks.push(I.chunk)), this._done = !0, !(this._cachedChunks.length > 0)) {
      for (const g of this._requests)
        g.resolve({
          value: void 0,
          done: !0
        });
      this._requests.length = 0;
    }
  }
  _onError(I) {
    this._storedError = Og(I, this._url), this._headersCapability.reject(this._storedError);
    for (const g of this._requests)
      g.reject(this._storedError);
    this._requests.length = 0, this._cachedChunks.length = 0;
  }
  _onProgress(I) {
    this.onProgress?.({
      loaded: I.loaded,
      total: I.lengthComputable ? I.total : this._contentLength
    });
  }
  get filename() {
    return this._filename;
  }
  get isRangeSupported() {
    return this._isRangeSupported;
  }
  get isStreamingSupported() {
    return this._isStreamingSupported;
  }
  get contentLength() {
    return this._contentLength;
  }
  get headersReady() {
    return this._headersCapability.promise;
  }
  async read() {
    if (await this._headersCapability.promise, this._storedError)
      throw this._storedError;
    if (this._cachedChunks.length > 0)
      return {
        value: this._cachedChunks.shift(),
        done: !1
      };
    if (this._done)
      return {
        value: void 0,
        done: !0
      };
    const I = Promise.withResolvers();
    return this._requests.push(I), I.promise;
  }
  cancel(I) {
    this._done = !0, this._headersCapability.reject(I);
    for (const g of this._requests)
      g.resolve({
        value: void 0,
        done: !0
      });
    this._requests.length = 0, this._manager.isPendingRequest(this._fullRequestId) && this._manager.abortRequest(this._fullRequestId), this._fullRequestReader = null;
  }
}
class bZ {
  constructor(I, g, C) {
    this._manager = I, this._url = I.url, this._requestId = I.request({
      begin: g,
      end: C,
      onHeadersReceived: this._onHeadersReceived.bind(this),
      onDone: this._onDone.bind(this),
      onError: this._onError.bind(this),
      onProgress: this._onProgress.bind(this)
    }), this._requests = [], this._queuedChunk = null, this._done = !1, this._storedError = void 0, this.onProgress = null, this.onClosed = null;
  }
  _onHeadersReceived() {
    const I = mC(this._manager.getRequestXhr(this._requestId)?.responseURL);
    I !== this._manager._responseOrigin && (this._storedError = new Error(`Expected range response-origin "${I}" to match "${this._manager._responseOrigin}".`), this._onError(0));
  }
  _close() {
    this.onClosed?.(this);
  }
  _onDone(I) {
    const g = I.chunk;
    this._requests.length > 0 ? this._requests.shift().resolve({
      value: g,
      done: !1
    }) : this._queuedChunk = g, this._done = !0;
    for (const C of this._requests)
      C.resolve({
        value: void 0,
        done: !0
      });
    this._requests.length = 0, this._close();
  }
  _onError(I) {
    this._storedError ??= Og(I, this._url);
    for (const g of this._requests)
      g.reject(this._storedError);
    this._requests.length = 0, this._queuedChunk = null;
  }
  _onProgress(I) {
    this.isStreamingSupported || this.onProgress?.({
      loaded: I.loaded
    });
  }
  get isStreamingSupported() {
    return !1;
  }
  async read() {
    if (this._storedError)
      throw this._storedError;
    if (this._queuedChunk !== null) {
      const g = this._queuedChunk;
      return this._queuedChunk = null, {
        value: g,
        done: !1
      };
    }
    if (this._done)
      return {
        value: void 0,
        done: !0
      };
    const I = Promise.withResolvers();
    return this._requests.push(I), I.promise;
  }
  cancel(I) {
    this._done = !0;
    for (const g of this._requests)
      g.resolve({
        value: void 0,
        done: !0
      });
    this._requests.length = 0, this._manager.isPendingRequest(this._requestId) && this._manager.abortRequest(this._requestId), this._close();
  }
}
const mZ = /^[a-z][a-z0-9\-+.]+:/i;
function BZ(s) {
  if (mZ.test(s))
    return new URL(s);
  const I = process.getBuiltinModule("url");
  return new URL(I.pathToFileURL(s));
}
class oZ {
  constructor(I) {
    this.source = I, this.url = BZ(I.url), WI(this.url.protocol === "file:", "PDFNodeStream only supports file:// URLs."), this._fullRequestReader = null, this._rangeRequestReaders = [];
  }
  get _progressiveDataLength() {
    return this._fullRequestReader?._loaded ?? 0;
  }
  getFullReader() {
    return WI(!this._fullRequestReader, "PDFNodeStream.getFullReader can only be called once."), this._fullRequestReader = new WZ(this), this._fullRequestReader;
  }
  getRangeReader(I, g) {
    if (g <= this._progressiveDataLength)
      return null;
    const C = new hZ(this, I, g);
    return this._rangeRequestReaders.push(C), C;
  }
  cancelAllRequests(I) {
    this._fullRequestReader?.cancel(I);
    for (const g of this._rangeRequestReaders.slice(0))
      g.cancel(I);
  }
}
class WZ {
  constructor(I) {
    this._url = I.url, this._done = !1, this._storedError = null, this.onProgress = null;
    const g = I.source;
    this._contentLength = g.length, this._loaded = 0, this._filename = null, this._disableRange = g.disableRange || !1, this._rangeChunkSize = g.rangeChunkSize, !this._rangeChunkSize && !this._disableRange && (this._disableRange = !0), this._isStreamingSupported = !g.disableStream, this._isRangeSupported = !g.disableRange, this._readableStream = null, this._readCapability = Promise.withResolvers(), this._headersCapability = Promise.withResolvers();
    const C = process.getBuiltinModule("fs");
    C.promises.lstat(this._url).then((A) => {
      this._contentLength = A.size, this._setReadableStream(C.createReadStream(this._url)), this._headersCapability.resolve();
    }, (A) => {
      A.code === "ENOENT" && (A = Og(0, this._url.href)), this._storedError = A, this._headersCapability.reject(A);
    });
  }
  get headersReady() {
    return this._headersCapability.promise;
  }
  get filename() {
    return this._filename;
  }
  get contentLength() {
    return this._contentLength;
  }
  get isRangeSupported() {
    return this._isRangeSupported;
  }
  get isStreamingSupported() {
    return this._isStreamingSupported;
  }
  async read() {
    if (await this._readCapability.promise, this._done)
      return {
        value: void 0,
        done: !0
      };
    if (this._storedError)
      throw this._storedError;
    const I = this._readableStream.read();
    return I === null ? (this._readCapability = Promise.withResolvers(), this.read()) : (this._loaded += I.length, this.onProgress?.({
      loaded: this._loaded,
      total: this._contentLength
    }), {
      value: new Uint8Array(I).buffer,
      done: !1
    });
  }
  cancel(I) {
    if (!this._readableStream) {
      this._error(I);
      return;
    }
    this._readableStream.destroy(I);
  }
  _error(I) {
    this._storedError = I, this._readCapability.resolve();
  }
  _setReadableStream(I) {
    this._readableStream = I, I.on("readable", () => {
      this._readCapability.resolve();
    }), I.on("end", () => {
      I.destroy(), this._done = !0, this._readCapability.resolve();
    }), I.on("error", (g) => {
      this._error(g);
    }), !this._isStreamingSupported && this._isRangeSupported && this._error(new gg("streaming is disabled")), this._storedError && this._readableStream.destroy(this._storedError);
  }
}
class hZ {
  constructor(I, g, C) {
    this._url = I.url, this._done = !1, this._storedError = null, this.onProgress = null, this._loaded = 0, this._readableStream = null, this._readCapability = Promise.withResolvers();
    const A = I.source;
    this._isStreamingSupported = !A.disableStream;
    const l = process.getBuiltinModule("fs");
    this._setReadableStream(l.createReadStream(this._url, {
      start: g,
      end: C - 1
    }));
  }
  get isStreamingSupported() {
    return this._isStreamingSupported;
  }
  async read() {
    if (await this._readCapability.promise, this._done)
      return {
        value: void 0,
        done: !0
      };
    if (this._storedError)
      throw this._storedError;
    const I = this._readableStream.read();
    return I === null ? (this._readCapability = Promise.withResolvers(), this.read()) : (this._loaded += I.length, this.onProgress?.({
      loaded: this._loaded
    }), {
      value: new Uint8Array(I).buffer,
      done: !1
    });
  }
  cancel(I) {
    if (!this._readableStream) {
      this._error(I);
      return;
    }
    this._readableStream.destroy(I);
  }
  _error(I) {
    this._storedError = I, this._readCapability.resolve();
  }
  _setReadableStream(I) {
    this._readableStream = I, I.on("readable", () => {
      this._readCapability.resolve();
    }), I.on("end", () => {
      I.destroy(), this._done = !0, this._readCapability.resolve();
    }), I.on("error", (g) => {
      this._error(g);
    }), this._storedError && this._readableStream.destroy(this._storedError);
  }
}
const eg = Symbol("INITIAL_DATA");
class fA {
  #I = /* @__PURE__ */ Object.create(null);
  #g(I) {
    return this.#I[I] ||= {
      ...Promise.withResolvers(),
      data: eg
    };
  }
  get(I, g = null) {
    if (g) {
      const A = this.#g(I);
      return A.promise.then(() => g(A.data)), null;
    }
    const C = this.#I[I];
    if (!C || C.data === eg)
      throw new Error(`Requesting object that isn't resolved yet ${I}.`);
    return C.data;
  }
  has(I) {
    const g = this.#I[I];
    return !!g && g.data !== eg;
  }
  delete(I) {
    const g = this.#I[I];
    return !g || g.data === eg ? !1 : (delete this.#I[I], !0);
  }
  resolve(I, g = null) {
    const C = this.#g(I);
    C.data = g, C.resolve();
  }
  clear() {
    for (const I in this.#I) {
      const {
        data: g
      } = this.#I[I];
      g?.bitmap?.close();
    }
    this.#I = /* @__PURE__ */ Object.create(null);
  }
  *[Symbol.iterator]() {
    for (const I in this.#I) {
      const {
        data: g
      } = this.#I[I];
      g !== eg && (yield [I, g]);
    }
  }
}
const YZ = 1e5, wA = 30;
class tI {
  #I = Promise.withResolvers();
  #g = null;
  #C = !1;
  #A = !!globalThis.FontInspector?.enabled;
  #Z = null;
  #l = null;
  #i = 0;
  #d = 0;
  #c = null;
  #s = null;
  #m = 0;
  #G = 0;
  #B = /* @__PURE__ */ Object.create(null);
  #W = [];
  #o = null;
  #b = [];
  #h = /* @__PURE__ */ new WeakMap();
  #a = null;
  static #Y = /* @__PURE__ */ new Map();
  static #X = /* @__PURE__ */ new Map();
  static #n = /* @__PURE__ */ new WeakMap();
  static #w = null;
  static #y = /* @__PURE__ */ new Set();
  constructor({
    textContentSource: I,
    container: g,
    viewport: C
  }) {
    if (I instanceof ReadableStream)
      this.#o = I;
    else if (typeof I == "object")
      this.#o = new ReadableStream({
        start(d) {
          d.enqueue(I), d.close();
        }
      });
    else
      throw new Error('No "textContentSource" parameter specified.');
    this.#g = this.#s = g, this.#G = C.scale * rI.pixelRatio, this.#m = C.rotation, this.#l = {
      div: null,
      properties: null,
      ctx: null
    };
    const {
      pageWidth: A,
      pageHeight: l,
      pageX: Z,
      pageY: i
    } = C.rawDims;
    this.#a = [1, 0, 0, -1, -Z, i + l], this.#d = A, this.#i = l, tI.#u(), Zg(g, C), this.#I.promise.finally(() => {
      tI.#y.delete(this), this.#l = null, this.#B = null;
    }).catch(() => {
    });
  }
  static get fontFamilyMap() {
    const {
      isWindows: I,
      isFirefox: g
    } = XI.platform;
    return P(this, "fontFamilyMap", /* @__PURE__ */ new Map([["sans-serif", `${I && g ? "Calibri, " : ""}sans-serif`], ["monospace", `${I && g ? "Lucida Console, " : ""}monospace`]]));
  }
  render() {
    const I = () => {
      this.#c.read().then(({
        value: g,
        done: C
      }) => {
        if (C) {
          this.#I.resolve();
          return;
        }
        this.#Z ??= g.lang, Object.assign(this.#B, g.styles), this.#H(g.items), I();
      }, this.#I.reject);
    };
    return this.#c = this.#o.getReader(), tI.#y.add(this), I(), this.#I.promise;
  }
  update({
    viewport: I,
    onBefore: g = null
  }) {
    const C = I.scale * rI.pixelRatio, A = I.rotation;
    if (A !== this.#m && (g?.(), this.#m = A, Zg(this.#s, {
      rotation: A
    })), C !== this.#G) {
      g?.(), this.#G = C;
      const l = {
        div: null,
        properties: null,
        ctx: tI.#D(this.#Z)
      };
      for (const Z of this.#b)
        l.properties = this.#h.get(Z), l.div = Z, this.#N(l);
    }
  }
  cancel() {
    const I = new gg("TextLayer task cancelled.");
    this.#c?.cancel(I).catch(() => {
    }), this.#c = null, this.#I.reject(I);
  }
  get textDivs() {
    return this.#b;
  }
  get textContentItemsStr() {
    return this.#W;
  }
  #H(I) {
    if (this.#C)
      return;
    this.#l.ctx ??= tI.#D(this.#Z);
    const g = this.#b, C = this.#W;
    for (const A of I) {
      if (g.length > YZ) {
        j("Ignoring additional textDivs for performance reasons."), this.#C = !0;
        return;
      }
      if (A.str === void 0) {
        if (A.type === "beginMarkedContentProps" || A.type === "beginMarkedContent") {
          const l = this.#g;
          this.#g = document.createElement("span"), this.#g.classList.add("markedContent"), A.id && this.#g.setAttribute("id", `${A.id}`), l.append(this.#g);
        } else A.type === "endMarkedContent" && (this.#g = this.#g.parentNode);
        continue;
      }
      C.push(A.str), this.#R(A);
    }
  }
  #R(I) {
    const g = document.createElement("span"), C = {
      angle: 0,
      canvasWidth: 0,
      hasText: I.str !== "",
      hasEOL: I.hasEOL,
      fontSize: 0
    };
    this.#b.push(g);
    const A = J.transform(this.#a, I.transform);
    let l = Math.atan2(A[1], A[0]);
    const Z = this.#B[I.fontName];
    Z.vertical && (l += Math.PI / 2);
    let i = this.#A && Z.fontSubstitution || Z.fontFamily;
    i = tI.fontFamilyMap.get(i) || i;
    const d = Math.hypot(A[2], A[3]), c = d * tI.#F(i, Z, this.#Z);
    let G, b;
    l === 0 ? (G = A[4], b = A[5] - c) : (G = A[4] + c * Math.sin(l), b = A[5] - c * Math.cos(l));
    const m = "calc(var(--total-scale-factor) *", B = g.style;
    this.#g === this.#s ? (B.left = `${(100 * G / this.#d).toFixed(2)}%`, B.top = `${(100 * b / this.#i).toFixed(2)}%`) : (B.left = `${m}${G.toFixed(2)}px)`, B.top = `${m}${b.toFixed(2)}px)`), B.fontSize = `${m}${(tI.#w * d).toFixed(2)}px)`, B.fontFamily = i, C.fontSize = d, g.setAttribute("role", "presentation"), g.textContent = I.str, g.dir = I.dir, this.#A && (g.dataset.fontName = Z.fontSubstitutionLoadedName || I.fontName), l !== 0 && (C.angle = l * (180 / Math.PI));
    let o = !1;
    if (I.str.length > 1)
      o = !0;
    else if (I.str !== " " && I.transform[0] !== I.transform[3]) {
      const W = Math.abs(I.transform[0]), Y = Math.abs(I.transform[3]);
      W !== Y && Math.max(W, Y) / Math.min(W, Y) > 1.5 && (o = !0);
    }
    if (o && (C.canvasWidth = Z.vertical ? I.height : I.width), this.#h.set(g, C), this.#l.div = g, this.#l.properties = C, this.#N(this.#l), C.hasText && this.#g.append(g), C.hasEOL) {
      const W = document.createElement("br");
      W.setAttribute("role", "presentation"), this.#g.append(W);
    }
  }
  #N(I) {
    const {
      div: g,
      properties: C,
      ctx: A
    } = I, {
      style: l
    } = g;
    let Z = "";
    if (tI.#w > 1 && (Z = `scale(${1 / tI.#w})`), C.canvasWidth !== 0 && C.hasText) {
      const {
        fontFamily: i
      } = l, {
        canvasWidth: d,
        fontSize: c
      } = C;
      tI.#e(A, c * this.#G, i);
      const {
        width: G
      } = A.measureText(g.textContent);
      G > 0 && (Z = `scaleX(${d * this.#G / G}) ${Z}`);
    }
    C.angle !== 0 && (Z = `rotate(${C.angle}deg) ${Z}`), Z.length > 0 && (l.transform = Z);
  }
  static cleanup() {
    if (!(this.#y.size > 0)) {
      this.#Y.clear();
      for (const {
        canvas: I
      } of this.#X.values())
        I.remove();
      this.#X.clear();
    }
  }
  static #D(I = null) {
    let g = this.#X.get(I ||= "");
    if (!g) {
      const C = document.createElement("canvas");
      C.className = "hiddenCanvasElement", C.lang = I, document.body.append(C), g = C.getContext("2d", {
        alpha: !1,
        willReadFrequently: !0
      }), this.#X.set(I, g), this.#n.set(g, {
        size: 0,
        family: ""
      });
    }
    return g;
  }
  static #e(I, g, C) {
    const A = this.#n.get(I);
    g === A.size && C === A.family || (I.font = `${g}px ${C}`, A.size = g, A.family = C);
  }
  static #u() {
    if (this.#w !== null)
      return;
    const I = document.createElement("div");
    I.style.opacity = 0, I.style.lineHeight = 1, I.style.fontSize = "1px", I.style.position = "absolute", I.textContent = "X", document.body.append(I), this.#w = I.getBoundingClientRect().height, I.remove();
  }
  static #F(I, g, C) {
    const A = this.#Y.get(I);
    if (A)
      return A;
    const l = this.#D(C);
    l.canvas.width = l.canvas.height = wA, this.#e(l, wA, I);
    const Z = l.measureText(""), i = Z.fontBoundingBoxAscent, d = Math.abs(Z.fontBoundingBoxDescent);
    l.canvas.width = l.canvas.height = 0;
    let c = 0.8;
    return i ? c = i / (i + d) : (XI.platform.isFirefox && j("Enable the `dom.textMetrics.fontBoundingBox.enabled` preference in `about:config` to improve TextLayer rendering."), g.ascent ? c = g.ascent : g.descent && (c = 1 + g.descent)), this.#Y.set(I, c), c;
  }
}
class Fg {
  static textContent(I) {
    const g = [], C = {
      items: g,
      styles: /* @__PURE__ */ Object.create(null)
    };
    function A(l) {
      if (!l)
        return;
      let Z = null;
      const i = l.name;
      if (i === "#text")
        Z = l.value;
      else if (Fg.shouldBuildText(i))
        l?.attributes?.textContent ? Z = l.attributes.textContent : l.value && (Z = l.value);
      else return;
      if (Z !== null && g.push({
        str: Z
      }), !!l.children)
        for (const d of l.children)
          A(d);
    }
    return A(I), C;
  }
  static shouldBuildText(I) {
    return !(I === "textarea" || I === "input" || I === "option" || I === "select");
  }
}
const wZ = 100;
function jC(s = {}) {
  typeof s == "string" || s instanceof URL ? s = {
    url: s
  } : (s instanceof ArrayBuffer || ArrayBuffer.isView(s)) && (s = {
    data: s
  });
  const I = new OC(), {
    docId: g
  } = I, C = s.url ? el(s.url) : null, A = s.data ? Hl(s.data) : null, l = s.httpHeaders || null, Z = s.withCredentials === !0, i = s.password ?? null, d = s.range instanceof UC ? s.range : null, c = Number.isInteger(s.rangeChunkSize) && s.rangeChunkSize > 0 ? s.rangeChunkSize : 2 ** 16;
  let G = s.worker instanceof yg ? s.worker : null;
  const b = s.verbosity, m = typeof s.docBaseUrl == "string" && !Tg(s.docBaseUrl) ? s.docBaseUrl : null, B = Pg(s.cMapUrl), o = s.cMapPacked !== !1, W = s.CMapReaderFactory || (HI ? Fl : iA), Y = Pg(s.iccUrl), h = Pg(s.standardFontDataUrl), a = s.StandardFontDataFactory || (HI ? Jl : dA), w = Pg(s.wasmUrl), n = s.WasmFactory || (HI ? zl : cA), V = s.stopAtErrors !== !0, X = Number.isInteger(s.maxImageSize) && s.maxImageSize > -1 ? s.maxImageSize : -1, y = s.isEvalSupported !== !1, N = typeof s.isOffscreenCanvasSupported == "boolean" ? s.isOffscreenCanvasSupported : !HI, t = typeof s.isImageDecoderSupported == "boolean" ? s.isImageDecoderSupported : !HI && (XI.platform.isFirefox || !globalThis.chrome), e = Number.isInteger(s.canvasMaxAreaInBytes) ? s.canvasMaxAreaInBytes : -1, R = typeof s.disableFontFace == "boolean" ? s.disableFontFace : HI, F = s.fontExtraProperties === !0, K = s.enableXfa === !0, S = s.ownerDocument || globalThis.document, L = s.disableRange === !0, M = s.disableStream === !0, u = s.disableAutoFetch === !0, k = s.pdfBug === !0, v = s.CanvasFactory || (HI ? pl : Kl), $ = s.FilterFactory || (HI ? Sl : Dl), dI = s.enableHWA === !0, q = s.useWasm !== !1, _ = d ? d.length : s.length ?? NaN, lI = typeof s.useSystemFonts == "boolean" ? s.useSystemFonts : !HI && !R, nI = typeof s.useWorkerFetch == "boolean" ? s.useWorkerFetch : !!(W === iA && a === dA && n === cA && B && h && w && Mg(B, document.baseURI) && Mg(h, document.baseURI) && Mg(w, document.baseURI)), D = null;
  sl(b);
  const H = {
    canvasFactory: new v({
      ownerDocument: S,
      enableHWA: dI
    }),
    filterFactory: new $({
      docId: g,
      ownerDocument: S
    }),
    cMapReaderFactory: nI ? null : new W({
      baseUrl: B,
      isCompressed: o
    }),
    standardFontDataFactory: nI ? null : new a({
      baseUrl: h
    }),
    wasmFactory: nI ? null : new n({
      baseUrl: w
    })
  };
  G || (G = yg.create({
    verbosity: b,
    port: Ig.workerPort
  }), I._worker = G);
  const p = {
    docId: g,
    apiVersion: "5.4.149",
    data: A,
    password: i,
    disableAutoFetch: u,
    rangeChunkSize: c,
    length: _,
    docBaseUrl: m,
    enableXfa: K,
    evaluatorOptions: {
      maxImageSize: X,
      disableFontFace: R,
      ignoreErrors: V,
      isEvalSupported: y,
      isOffscreenCanvasSupported: N,
      isImageDecoderSupported: t,
      canvasMaxAreaInBytes: e,
      fontExtraProperties: F,
      useSystemFonts: lI,
      useWasm: q,
      useWorkerFetch: nI,
      cMapUrl: B,
      iccUrl: Y,
      standardFontDataUrl: h,
      wasmUrl: w
    }
  }, E = {
    ownerDocument: S,
    pdfBug: k,
    styleElement: D,
    loadingParams: {
      disableAutoFetch: u,
      enableXfa: K
    }
  };
  return G.promise.then(function() {
    if (I.destroyed)
      throw new Error("Loading aborted");
    if (G.destroyed)
      throw new Error("Worker was destroyed");
    const gI = G.messageHandler.sendWithPromise("GetDocRequest", p, A ? [A.buffer] : null);
    let Q;
    if (d)
      Q = new IZ(d, {
        disableRange: L,
        disableStream: M
      });
    else if (!A) {
      if (!C)
        throw new Error("getDocument - no `url` parameter provided.");
      const CI = Mg(C) ? lZ : HI ? oZ : sZ;
      Q = new CI({
        url: C,
        length: _,
        httpHeaders: l,
        withCredentials: Z,
        rangeChunkSize: c,
        disableRange: L,
        disableStream: M
      });
    }
    return gI.then((CI) => {
      if (I.destroyed)
        throw new Error("Loading aborted");
      if (G.destroyed)
        throw new Error("Worker was destroyed");
      const AI = new Kg(g, CI, G.port), zI = new XZ(AI, I, Q, E, H, dI);
      I._transport = zI, AI.send("Ready", null);
    });
  }).catch(I._capability.reject), I;
}
class OC {
  static #I = 0;
  _capability = Promise.withResolvers();
  _transport = null;
  _worker = null;
  docId = `d${OC.#I++}`;
  destroyed = !1;
  onPassword = null;
  onProgress = null;
  get promise() {
    return this._capability.promise;
  }
  async destroy() {
    this.destroyed = !0;
    try {
      this._worker?.port && (this._worker._pendingDestroy = !0), await this._transport?.destroy();
    } catch (I) {
      throw this._worker?.port && delete this._worker._pendingDestroy, I;
    }
    this._transport = null, this._worker?.destroy(), this._worker = null;
  }
  async getData() {
    return this._transport.getData();
  }
}
class UC {
  #I = Promise.withResolvers();
  #g = [];
  #C = [];
  #A = [];
  #Z = [];
  constructor(I, g, C = !1, A = null) {
    this.length = I, this.initialData = g, this.progressiveDone = C, this.contentDispositionFilename = A;
  }
  addRangeListener(I) {
    this.#Z.push(I);
  }
  addProgressListener(I) {
    this.#A.push(I);
  }
  addProgressiveReadListener(I) {
    this.#C.push(I);
  }
  addProgressiveDoneListener(I) {
    this.#g.push(I);
  }
  onDataRange(I, g) {
    for (const C of this.#Z)
      C(I, g);
  }
  onDataProgress(I, g) {
    this.#I.promise.then(() => {
      for (const C of this.#A)
        C(I, g);
    });
  }
  onDataProgressiveRead(I) {
    this.#I.promise.then(() => {
      for (const g of this.#C)
        g(I);
    });
  }
  onDataProgressiveDone() {
    this.#I.promise.then(() => {
      for (const I of this.#g)
        I();
    });
  }
  transportReady() {
    this.#I.resolve();
  }
  requestDataRange(I, g) {
    II("Abstract method PDFDataRangeTransport.requestDataRange");
  }
  abort() {
  }
}
class aZ {
  constructor(I, g) {
    this._pdfInfo = I, this._transport = g;
  }
  get annotationStorage() {
    return this._transport.annotationStorage;
  }
  get canvasFactory() {
    return this._transport.canvasFactory;
  }
  get filterFactory() {
    return this._transport.filterFactory;
  }
  get numPages() {
    return this._pdfInfo.numPages;
  }
  get fingerprints() {
    return this._pdfInfo.fingerprints;
  }
  get isPureXfa() {
    return P(this, "isPureXfa", !!this._transport._htmlForXfa);
  }
  get allXfaHtml() {
    return this._transport._htmlForXfa;
  }
  getPage(I) {
    return this._transport.getPage(I);
  }
  getPageIndex(I) {
    return this._transport.getPageIndex(I);
  }
  getDestinations() {
    return this._transport.getDestinations();
  }
  getDestination(I) {
    return this._transport.getDestination(I);
  }
  getPageLabels() {
    return this._transport.getPageLabels();
  }
  getPageLayout() {
    return this._transport.getPageLayout();
  }
  getPageMode() {
    return this._transport.getPageMode();
  }
  getViewerPreferences() {
    return this._transport.getViewerPreferences();
  }
  getOpenAction() {
    return this._transport.getOpenAction();
  }
  getAttachments() {
    return this._transport.getAttachments();
  }
  getAnnotationsByType(I, g) {
    return this._transport.getAnnotationsByType(I, g);
  }
  getJSActions() {
    return this._transport.getDocJSActions();
  }
  getOutline() {
    return this._transport.getOutline();
  }
  getOptionalContentConfig({
    intent: I = "display"
  } = {}) {
    const {
      renderingIntent: g
    } = this._transport.getRenderingIntent(I);
    return this._transport.getOptionalContentConfig(g);
  }
  getPermissions() {
    return this._transport.getPermissions();
  }
  getMetadata() {
    return this._transport.getMetadata();
  }
  getMarkInfo() {
    return this._transport.getMarkInfo();
  }
  getData() {
    return this._transport.getData();
  }
  saveDocument() {
    return this._transport.saveDocument();
  }
  getDownloadInfo() {
    return this._transport.downloadInfoCapability.promise;
  }
  cleanup(I = !1) {
    return this._transport.startCleanup(I || this.isPureXfa);
  }
  destroy() {
    return this.loadingTask.destroy();
  }
  cachedPageNumber(I) {
    return this._transport.cachedPageNumber(I);
  }
  get loadingParams() {
    return this._transport.loadingParams;
  }
  get loadingTask() {
    return this._transport.loadingTask;
  }
  getFieldObjects() {
    return this._transport.getFieldObjects();
  }
  hasJSActions() {
    return this._transport.hasJSActions();
  }
  getCalculationOrderIds() {
    return this._transport.getCalculationOrderIds();
  }
}
class VZ {
  #I = !1;
  constructor(I, g, C, A = !1) {
    this._pageIndex = I, this._pageInfo = g, this._transport = C, this._stats = A ? new AA() : null, this._pdfBug = A, this.commonObjs = C.commonObjs, this.objs = new fA(), this._intentStates = /* @__PURE__ */ new Map(), this.destroyed = !1, this.recordedGroups = null;
  }
  get pageNumber() {
    return this._pageIndex + 1;
  }
  get rotate() {
    return this._pageInfo.rotate;
  }
  get ref() {
    return this._pageInfo.ref;
  }
  get userUnit() {
    return this._pageInfo.userUnit;
  }
  get view() {
    return this._pageInfo.view;
  }
  getViewport({
    scale: I,
    rotation: g = this.rotate,
    offsetX: C = 0,
    offsetY: A = 0,
    dontFlip: l = !1
  } = {}) {
    return new Lg({
      viewBox: this.view,
      userUnit: this.userUnit,
      scale: I,
      rotation: g,
      offsetX: C,
      offsetY: A,
      dontFlip: l
    });
  }
  getAnnotations({
    intent: I = "display"
  } = {}) {
    const {
      renderingIntent: g
    } = this._transport.getRenderingIntent(I);
    return this._transport.getAnnotations(this._pageIndex, g);
  }
  getJSActions() {
    return this._transport.getPageJSActions(this._pageIndex);
  }
  get filterFactory() {
    return this._transport.filterFactory;
  }
  get isPureXfa() {
    return P(this, "isPureXfa", !!this._transport._htmlForXfa);
  }
  async getXfa() {
    return this._transport._htmlForXfa?.children[this._pageIndex] || null;
  }
  render({
    canvasContext: I,
    canvas: g = I.canvas,
    viewport: C,
    intent: A = "display",
    annotationMode: l = $I.ENABLE,
    transform: Z = null,
    background: i = null,
    optionalContentConfigPromise: d = null,
    annotationCanvasMap: c = null,
    pageColors: G = null,
    printAnnotationStorage: b = null,
    isEditing: m = !1,
    recordOperations: B = !1,
    filteredOperationIndexes: o = null
  }) {
    this._stats?.time("Overall");
    const W = this._transport.getRenderingIntent(A, l, b, m), {
      renderingIntent: Y,
      cacheKey: h
    } = W;
    this.#I = !1, d ||= this._transport.getOptionalContentConfig(Y);
    let a = this._intentStates.get(h);
    a || (a = /* @__PURE__ */ Object.create(null), this._intentStates.set(h, a)), a.streamReaderCancelTimeout && (clearTimeout(a.streamReaderCancelTimeout), a.streamReaderCancelTimeout = null);
    const w = !!(Y & SI.PRINT);
    a.displayReadyCapability || (a.displayReadyCapability = Promise.withResolvers(), a.operatorList = {
      fnArray: [],
      argsArray: [],
      lastChunk: !1,
      separateAnnots: null
    }, this._stats?.time("Page Request"), this._pumpOperatorList(W));
    const n = !this.recordedGroups && (B || this._pdfBug && globalThis.StepperManager?.enabled), V = (N) => {
      if (a.renderTasks.delete(X), n) {
        const t = X.gfx?.dependencyTracker.take();
        t ? (X.stepper?.setOperatorGroups(t), B && (this.recordedGroups = t)) : B && (this.recordedGroups = []);
      }
      w && (this.#I = !0), this.#g(), N ? (X.capability.reject(N), this._abortOperatorList({
        intentState: a,
        reason: N instanceof Error ? N : new Error(N)
      })) : X.capability.resolve(), this._stats && (this._stats.timeEnd("Rendering"), this._stats.timeEnd("Overall"), globalThis.Stats?.enabled && globalThis.Stats.add(this.pageNumber, this._stats));
    }, X = new Vg({
      callback: V,
      params: {
        canvas: g,
        canvasContext: I,
        dependencyTracker: n ? new kl(g) : null,
        viewport: C,
        transform: Z,
        background: i
      },
      objs: this.objs,
      commonObjs: this.commonObjs,
      annotationCanvasMap: c,
      operatorList: a.operatorList,
      pageIndex: this._pageIndex,
      canvasFactory: this._transport.canvasFactory,
      filterFactory: this._transport.filterFactory,
      useRequestAnimationFrame: !w,
      pdfBug: this._pdfBug,
      pageColors: G,
      enableHWA: this._transport.enableHWA,
      filteredOperationIndexes: o
    });
    (a.renderTasks ||= /* @__PURE__ */ new Set()).add(X);
    const y = X.task;
    return Promise.all([a.displayReadyCapability.promise, d]).then(([N, t]) => {
      if (this.destroyed) {
        V();
        return;
      }
      if (this._stats?.time("Rendering"), !(t.renderingIntent & Y))
        throw new Error("Must use the same `intent`-argument when calling the `PDFPageProxy.render` and `PDFDocumentProxy.getOptionalContentConfig` methods.");
      X.initializeGraphics({
        transparency: N,
        optionalContentConfig: t
      }), X.operatorListChanged();
    }).catch(V), y;
  }
  getOperatorList({
    intent: I = "display",
    annotationMode: g = $I.ENABLE,
    printAnnotationStorage: C = null,
    isEditing: A = !1
  } = {}) {
    function l() {
      i.operatorList.lastChunk && (i.opListReadCapability.resolve(i.operatorList), i.renderTasks.delete(d));
    }
    const Z = this._transport.getRenderingIntent(I, g, C, A, !0);
    let i = this._intentStates.get(Z.cacheKey);
    i || (i = /* @__PURE__ */ Object.create(null), this._intentStates.set(Z.cacheKey, i));
    let d;
    return i.opListReadCapability || (d = /* @__PURE__ */ Object.create(null), d.operatorListChanged = l, i.opListReadCapability = Promise.withResolvers(), (i.renderTasks ||= /* @__PURE__ */ new Set()).add(d), i.operatorList = {
      fnArray: [],
      argsArray: [],
      lastChunk: !1,
      separateAnnots: null
    }, this._stats?.time("Page Request"), this._pumpOperatorList(Z)), i.opListReadCapability.promise;
  }
  streamTextContent({
    includeMarkedContent: I = !1,
    disableNormalization: g = !1
  } = {}) {
    return this._transport.messageHandler.sendWithStream("GetTextContent", {
      pageIndex: this._pageIndex,
      includeMarkedContent: I === !0,
      disableNormalization: g === !0
    }, {
      highWaterMark: 100,
      size(A) {
        return A.items.length;
      }
    });
  }
  getTextContent(I = {}) {
    if (this._transport._htmlForXfa)
      return this.getXfa().then((C) => Fg.textContent(C));
    const g = this.streamTextContent(I);
    return new Promise(function(C, A) {
      function l() {
        Z.read().then(function({
          value: d,
          done: c
        }) {
          if (c) {
            C(i);
            return;
          }
          i.lang ??= d.lang, Object.assign(i.styles, d.styles), i.items.push(...d.items), l();
        }, A);
      }
      const Z = g.getReader(), i = {
        items: [],
        styles: /* @__PURE__ */ Object.create(null),
        lang: null
      };
      l();
    });
  }
  getStructTree() {
    return this._transport.getStructTree(this._pageIndex);
  }
  _destroy() {
    this.destroyed = !0;
    const I = [];
    for (const g of this._intentStates.values())
      if (this._abortOperatorList({
        intentState: g,
        reason: new Error("Page was destroyed."),
        force: !0
      }), !g.opListReadCapability)
        for (const C of g.renderTasks)
          I.push(C.completed), C.cancel();
    return this.objs.clear(), this.#I = !1, Promise.all(I);
  }
  cleanup(I = !1) {
    this.#I = !0;
    const g = this.#g();
    return I && g && (this._stats &&= new AA()), g;
  }
  #g() {
    if (!this.#I || this.destroyed)
      return !1;
    for (const {
      renderTasks: I,
      operatorList: g
    } of this._intentStates.values())
      if (I.size > 0 || !g.lastChunk)
        return !1;
    return this._intentStates.clear(), this.objs.clear(), this.#I = !1, !0;
  }
  _startRenderPage(I, g) {
    const C = this._intentStates.get(g);
    C && (this._stats?.timeEnd("Page Request"), C.displayReadyCapability?.resolve(I));
  }
  _renderPageChunk(I, g) {
    for (let C = 0, A = I.length; C < A; C++)
      g.operatorList.fnArray.push(I.fnArray[C]), g.operatorList.argsArray.push(I.argsArray[C]);
    g.operatorList.lastChunk = I.lastChunk, g.operatorList.separateAnnots = I.separateAnnots;
    for (const C of g.renderTasks)
      C.operatorListChanged();
    I.lastChunk && this.#g();
  }
  _pumpOperatorList({
    renderingIntent: I,
    cacheKey: g,
    annotationStorageSerializable: C,
    modifiedIds: A
  }) {
    const {
      map: l,
      transfer: Z
    } = C, d = this._transport.messageHandler.sendWithStream("GetOperatorList", {
      pageIndex: this._pageIndex,
      intent: I,
      cacheKey: g,
      annotationStorage: l,
      modifiedIds: A
    }, Z).getReader(), c = this._intentStates.get(g);
    c.streamReader = d;
    const G = () => {
      d.read().then(({
        value: b,
        done: m
      }) => {
        if (m) {
          c.streamReader = null;
          return;
        }
        this._transport.destroyed || (this._renderPageChunk(b, c), G());
      }, (b) => {
        if (c.streamReader = null, !this._transport.destroyed) {
          if (c.operatorList) {
            c.operatorList.lastChunk = !0;
            for (const m of c.renderTasks)
              m.operatorListChanged();
            this.#g();
          }
          if (c.displayReadyCapability)
            c.displayReadyCapability.reject(b);
          else if (c.opListReadCapability)
            c.opListReadCapability.reject(b);
          else
            throw b;
        }
      });
    };
    G();
  }
  _abortOperatorList({
    intentState: I,
    reason: g,
    force: C = !1
  }) {
    if (I.streamReader) {
      if (I.streamReaderCancelTimeout && (clearTimeout(I.streamReaderCancelTimeout), I.streamReaderCancelTimeout = null), !C) {
        if (I.renderTasks.size > 0)
          return;
        if (g instanceof GC) {
          let A = wZ;
          g.extraDelay > 0 && g.extraDelay < 1e3 && (A += g.extraDelay), I.streamReaderCancelTimeout = setTimeout(() => {
            I.streamReaderCancelTimeout = null, this._abortOperatorList({
              intentState: I,
              reason: g,
              force: !0
            });
          }, A);
          return;
        }
      }
      if (I.streamReader.cancel(new gg(g.message)).catch(() => {
      }), I.streamReader = null, !this._transport.destroyed) {
        for (const [A, l] of this._intentStates)
          if (l === I) {
            this._intentStates.delete(A);
            break;
          }
        this.cleanup();
      }
    }
  }
  get stats() {
    return this._stats;
  }
}
var Ag, QI, _I, cg, dC, sg, Gg, uI, gC, qA, _A, Dg, ng, CC;
const iI = class iI {
  constructor({
    name: I = null,
    port: g = null,
    verbosity: C = Gl()
  } = {}) {
    jI(this, uI);
    jI(this, Ag, Promise.withResolvers());
    jI(this, QI, null);
    jI(this, _I, null);
    jI(this, cg, null);
    if (this.name = I, this.destroyed = !1, this.verbosity = C, g) {
      if (ZI(iI, Gg).has(g))
        throw new Error("Cannot use more than one PDFWorker per port.");
      ZI(iI, Gg).set(g, this), OI(this, uI, qA).call(this, g);
    } else
      OI(this, uI, _A).call(this);
  }
  get promise() {
    return ZI(this, Ag).promise;
  }
  get port() {
    return ZI(this, _I);
  }
  get messageHandler() {
    return ZI(this, QI);
  }
  destroy() {
    this.destroyed = !0, ZI(this, cg)?.terminate(), MI(this, cg, null), ZI(iI, Gg).delete(ZI(this, _I)), MI(this, _I, null), ZI(this, QI)?.destroy(), MI(this, QI, null);
  }
  static create(I) {
    const g = ZI(this, Gg).get(I?.port);
    if (g) {
      if (g._pendingDestroy)
        throw new Error("PDFWorker.create - the worker is being destroyed.\nPlease remember to await `PDFDocumentLoadingTask.destroy()`-calls.");
      return g;
    }
    return new iI(I);
  }
  static get workerSrc() {
    if (Ig.workerSrc)
      return Ig.workerSrc;
    throw new Error('No "GlobalWorkerOptions.workerSrc" specified.');
  }
  static get _setupFakeWorkerGlobal() {
    return P(this, "_setupFakeWorkerGlobal", (async () => ZI(this, ng, CC) ? ZI(this, ng, CC) : (await import(
      /*webpackIgnore: true*/
      /*@vite-ignore*/
      this.workerSrc
    )).WorkerMessageHandler)());
  }
};
Ag = new WeakMap(), QI = new WeakMap(), _I = new WeakMap(), cg = new WeakMap(), dC = new WeakMap(), sg = new WeakMap(), Gg = new WeakMap(), uI = new WeakSet(), gC = function() {
  ZI(this, Ag).resolve(), ZI(this, QI).send("configure", {
    verbosity: this.verbosity
  });
}, qA = function(I) {
  MI(this, _I, I), MI(this, QI, new Kg("main", "worker", I)), ZI(this, QI).on("ready", () => {
  }), OI(this, uI, gC).call(this);
}, _A = function() {
  if (ZI(iI, sg) || ZI(iI, ng, CC)) {
    OI(this, uI, Dg).call(this);
    return;
  }
  let {
    workerSrc: I
  } = iI;
  try {
    iI._isSameOrigin(window.location, I) || (I = iI._createCDNWrapper(new URL(I, window.location).href));
    const g = new Worker(I, {
      type: "module"
    }), C = new Kg("main", "worker", g), A = () => {
      l.abort(), C.destroy(), g.terminate(), this.destroyed ? ZI(this, Ag).reject(new Error("Worker was destroyed")) : OI(this, uI, Dg).call(this);
    }, l = new AbortController();
    g.addEventListener("error", () => {
      ZI(this, cg) || A();
    }, {
      signal: l.signal
    }), C.on("test", (i) => {
      if (l.abort(), this.destroyed || !i) {
        A();
        return;
      }
      MI(this, QI, C), MI(this, _I, g), MI(this, cg, g), OI(this, uI, gC).call(this);
    }), C.on("ready", (i) => {
      if (l.abort(), this.destroyed) {
        A();
        return;
      }
      try {
        Z();
      } catch {
        OI(this, uI, Dg).call(this);
      }
    });
    const Z = () => {
      const i = new Uint8Array();
      C.send("test", i, [i.buffer]);
    };
    Z();
    return;
  } catch {
    sC("The worker has been disabled.");
  }
  OI(this, uI, Dg).call(this);
}, Dg = function() {
  ZI(iI, sg) || (j("Setting up fake worker."), MI(iI, sg, !0)), iI._setupFakeWorkerGlobal.then((I) => {
    if (this.destroyed) {
      ZI(this, Ag).reject(new Error("Worker was destroyed"));
      return;
    }
    const g = new Ml();
    MI(this, _I, g);
    const C = `fake${$C(iI, dC)._++}`, A = new Kg(C + "_worker", C, g);
    I.setup(A, g), MI(this, QI, new Kg(C, C + "_worker", g)), OI(this, uI, gC).call(this);
  }).catch((I) => {
    ZI(this, Ag).reject(new Error(`Setting up fake worker failed: "${I.message}".`));
  });
}, ng = new WeakSet(), CC = function() {
  try {
    return globalThis.pdfjsWorker?.WorkerMessageHandler || null;
  } catch {
    return null;
  }
}, jI(iI, ng), jI(iI, dC, 0), jI(iI, sg, !1), jI(iI, Gg, /* @__PURE__ */ new WeakMap()), HI && (MI(iI, sg, !0), Ig.workerSrc ||= "./pdf.worker.mjs"), iI._isSameOrigin = (I, g) => {
  const C = URL.parse(I);
  if (!C?.origin || C.origin === "null")
    return !1;
  const A = new URL(g, C);
  return C.origin === A.origin;
}, iI._createCDNWrapper = (I) => {
  const g = `await import("${I}");`;
  return URL.createObjectURL(new Blob([g], {
    type: "text/javascript"
  }));
}, iI.fromPort = (I) => {
  if (al("`PDFWorker.fromPort` - please use `PDFWorker.create` instead."), !I?.port)
    throw new Error("PDFWorker.fromPort - invalid method signature.");
  return iI.create(I);
};
let yg = iI;
class XZ {
  #I = /* @__PURE__ */ new Map();
  #g = /* @__PURE__ */ new Map();
  #C = /* @__PURE__ */ new Map();
  #A = /* @__PURE__ */ new Map();
  #Z = null;
  constructor(I, g, C, A, l, Z) {
    this.messageHandler = I, this.loadingTask = g, this.commonObjs = new fA(), this.fontLoader = new tl({
      ownerDocument: A.ownerDocument,
      styleElement: A.styleElement
    }), this.loadingParams = A.loadingParams, this._params = A, this.canvasFactory = l.canvasFactory, this.filterFactory = l.filterFactory, this.cMapReaderFactory = l.cMapReaderFactory, this.standardFontDataFactory = l.standardFontDataFactory, this.wasmFactory = l.wasmFactory, this.destroyed = !1, this.destroyCapability = null, this._networkStream = C, this._fullReader = null, this._lastProgress = null, this.downloadInfoCapability = Promise.withResolvers(), this.enableHWA = Z, this.setupMessageHandler();
  }
  #l(I, g = null) {
    const C = this.#I.get(I);
    if (C)
      return C;
    const A = this.messageHandler.sendWithPromise(I, g);
    return this.#I.set(I, A), A;
  }
  get annotationStorage() {
    return P(this, "annotationStorage", new LC());
  }
  getRenderingIntent(I, g = $I.ENABLE, C = null, A = !1, l = !1) {
    let Z = SI.DISPLAY, i = RC;
    switch (I) {
      case "any":
        Z = SI.ANY;
        break;
      case "display":
        break;
      case "print":
        Z = SI.PRINT;
        break;
      default:
        j(`getRenderingIntent - invalid intent: ${I}`);
    }
    const d = Z & SI.PRINT && C instanceof zA ? C : this.annotationStorage;
    switch (g) {
      case $I.DISABLE:
        Z += SI.ANNOTATIONS_DISABLE;
        break;
      case $I.ENABLE:
        break;
      case $I.ENABLE_FORMS:
        Z += SI.ANNOTATIONS_FORMS;
        break;
      case $I.ENABLE_STORAGE:
        Z += SI.ANNOTATIONS_STORAGE, i = d.serializable;
        break;
      default:
        j(`getRenderingIntent - invalid annotationMode: ${g}`);
    }
    A && (Z += SI.IS_EDITING), l && (Z += SI.OPLIST);
    const {
      ids: c,
      hash: G
    } = d.modifiedIds, b = [Z, i.hash, G];
    return {
      renderingIntent: Z,
      cacheKey: b.join("_"),
      annotationStorageSerializable: i,
      modifiedIds: c
    };
  }
  destroy() {
    if (this.destroyCapability)
      return this.destroyCapability.promise;
    this.destroyed = !0, this.destroyCapability = Promise.withResolvers(), this.#Z?.reject(new Error("Worker was destroyed during onPassword callback"));
    const I = [];
    for (const C of this.#g.values())
      I.push(C._destroy());
    this.#g.clear(), this.#C.clear(), this.#A.clear(), this.hasOwnProperty("annotationStorage") && this.annotationStorage.resetModified();
    const g = this.messageHandler.sendWithPromise("Terminate", null);
    return I.push(g), Promise.all(I).then(() => {
      this.commonObjs.clear(), this.fontLoader.clear(), this.#I.clear(), this.filterFactory.destroy(), tI.cleanup(), this._networkStream?.cancelAllRequests(new gg("Worker was terminated.")), this.messageHandler?.destroy(), this.messageHandler = null, this.destroyCapability.resolve();
    }, this.destroyCapability.reject), this.destroyCapability.promise;
  }
  setupMessageHandler() {
    const {
      messageHandler: I,
      loadingTask: g
    } = this;
    I.on("GetReader", (C, A) => {
      WI(this._networkStream, "GetReader - no `IPDFStream` instance available."), this._fullReader = this._networkStream.getFullReader(), this._fullReader.onProgress = (l) => {
        this._lastProgress = {
          loaded: l.loaded,
          total: l.total
        };
      }, A.onPull = () => {
        this._fullReader.read().then(function({
          value: l,
          done: Z
        }) {
          if (Z) {
            A.close();
            return;
          }
          WI(l instanceof ArrayBuffer, "GetReader - expected an ArrayBuffer."), A.enqueue(new Uint8Array(l), 1, [l]);
        }).catch((l) => {
          A.error(l);
        });
      }, A.onCancel = (l) => {
        this._fullReader.cancel(l), A.ready.catch((Z) => {
          if (!this.destroyed)
            throw Z;
        });
      };
    }), I.on("ReaderHeadersReady", async (C) => {
      await this._fullReader.headersReady;
      const {
        isStreamingSupported: A,
        isRangeSupported: l,
        contentLength: Z
      } = this._fullReader;
      return (!A || !l) && (this._lastProgress && g.onProgress?.(this._lastProgress), this._fullReader.onProgress = (i) => {
        g.onProgress?.({
          loaded: i.loaded,
          total: i.total
        });
      }), {
        isStreamingSupported: A,
        isRangeSupported: l,
        contentLength: Z
      };
    }), I.on("GetRangeReader", (C, A) => {
      WI(this._networkStream, "GetRangeReader - no `IPDFStream` instance available.");
      const l = this._networkStream.getRangeReader(C.begin, C.end);
      if (!l) {
        A.close();
        return;
      }
      A.onPull = () => {
        l.read().then(function({
          value: Z,
          done: i
        }) {
          if (i) {
            A.close();
            return;
          }
          WI(Z instanceof ArrayBuffer, "GetRangeReader - expected an ArrayBuffer."), A.enqueue(new Uint8Array(Z), 1, [Z]);
        }).catch((Z) => {
          A.error(Z);
        });
      }, A.onCancel = (Z) => {
        l.cancel(Z), A.ready.catch((i) => {
          if (!this.destroyed)
            throw i;
        });
      };
    }), I.on("GetDoc", ({
      pdfInfo: C
    }) => {
      this._numPages = C.numPages, this._htmlForXfa = C.htmlForXfa, delete C.htmlForXfa, g._capability.resolve(new aZ(C, this));
    }), I.on("DocException", (C) => {
      g._capability.reject(KI(C));
    }), I.on("PasswordRequest", (C) => {
      this.#Z = Promise.withResolvers();
      try {
        if (!g.onPassword)
          throw KI(C);
        const A = (l) => {
          l instanceof Error ? this.#Z.reject(l) : this.#Z.resolve({
            password: l
          });
        };
        g.onPassword(A, C.code);
      } catch (A) {
        this.#Z.reject(A);
      }
      return this.#Z.promise;
    }), I.on("DataLoaded", (C) => {
      g.onProgress?.({
        loaded: C.length,
        total: C.length
      }), this.downloadInfoCapability.resolve(C);
    }), I.on("StartRenderPage", (C) => {
      if (this.destroyed)
        return;
      this.#g.get(C.pageIndex)._startRenderPage(C.transparency, C.cacheKey);
    }), I.on("commonobj", ([C, A, l]) => {
      if (this.destroyed || this.commonObjs.has(C))
        return null;
      switch (A) {
        case "Font":
          if ("error" in l) {
            const c = l.error;
            j(`Error during font loading: ${c}`), this.commonObjs.resolve(C, c);
            break;
          }
          const Z = this._params.pdfBug && globalThis.FontInspector?.enabled ? (c, G) => globalThis.FontInspector.fontAdded(c, G) : null, i = new Rl(l, Z);
          this.fontLoader.bind(i).catch(() => I.sendWithPromise("FontFallback", {
            id: C
          })).finally(() => {
            !i.fontExtraProperties && i.data && (i.data = null), this.commonObjs.resolve(C, i);
          });
          break;
        case "CopyLocalImage":
          const {
            imageRef: d
          } = l;
          WI(d, "The imageRef must be defined.");
          for (const c of this.#g.values())
            for (const [, G] of c.objs)
              if (G?.ref === d)
                return G.dataLen ? (this.commonObjs.resolve(C, structuredClone(G)), G.dataLen) : null;
          break;
        case "FontPath":
        case "Image":
        case "Pattern":
          this.commonObjs.resolve(C, l);
          break;
        default:
          throw new Error(`Got unknown common object type ${A}`);
      }
      return null;
    }), I.on("obj", ([C, A, l, Z]) => {
      if (this.destroyed)
        return;
      const i = this.#g.get(A);
      if (!i.objs.has(C)) {
        if (i._intentStates.size === 0) {
          Z?.bitmap?.close();
          return;
        }
        switch (l) {
          case "Image":
          case "Pattern":
            i.objs.resolve(C, Z);
            break;
          default:
            throw new Error(`Got unknown object type ${l}`);
        }
      }
    }), I.on("DocProgress", (C) => {
      this.destroyed || g.onProgress?.({
        loaded: C.loaded,
        total: C.total
      });
    }), I.on("FetchBinaryData", async (C) => {
      if (this.destroyed)
        throw new Error("Worker was destroyed.");
      const A = this[C.type];
      if (!A)
        throw new Error(`${C.type} not initialized, see the \`useWorkerFetch\` parameter.`);
      return A.fetch(C);
    });
  }
  getData() {
    return this.messageHandler.sendWithPromise("GetData", null);
  }
  saveDocument() {
    this.annotationStorage.size <= 0 && j("saveDocument called while `annotationStorage` is empty, please use the getData-method instead.");
    const {
      map: I,
      transfer: g
    } = this.annotationStorage.serializable;
    return this.messageHandler.sendWithPromise("SaveDocument", {
      isPureXfa: !!this._htmlForXfa,
      numPages: this._numPages,
      annotationStorage: I,
      filename: this._fullReader?.filename ?? null
    }, g).finally(() => {
      this.annotationStorage.resetModified();
    });
  }
  getPage(I) {
    if (!Number.isInteger(I) || I <= 0 || I > this._numPages)
      return Promise.reject(new Error("Invalid page request."));
    const g = I - 1, C = this.#C.get(g);
    if (C)
      return C;
    const A = this.messageHandler.sendWithPromise("GetPage", {
      pageIndex: g
    }).then((l) => {
      if (this.destroyed)
        throw new Error("Transport destroyed");
      l.refStr && this.#A.set(l.refStr, I);
      const Z = new VZ(g, l, this, this._params.pdfBug);
      return this.#g.set(g, Z), Z;
    });
    return this.#C.set(g, A), A;
  }
  getPageIndex(I) {
    return eC(I) ? this.messageHandler.sendWithPromise("GetPageIndex", {
      num: I.num,
      gen: I.gen
    }) : Promise.reject(new Error("Invalid pageIndex request."));
  }
  getAnnotations(I, g) {
    return this.messageHandler.sendWithPromise("GetAnnotations", {
      pageIndex: I,
      intent: g
    });
  }
  getFieldObjects() {
    return this.#l("GetFieldObjects");
  }
  hasJSActions() {
    return this.#l("HasJSActions");
  }
  getCalculationOrderIds() {
    return this.messageHandler.sendWithPromise("GetCalculationOrderIds", null);
  }
  getDestinations() {
    return this.messageHandler.sendWithPromise("GetDestinations", null);
  }
  getDestination(I) {
    return typeof I != "string" ? Promise.reject(new Error("Invalid destination request.")) : this.messageHandler.sendWithPromise("GetDestination", {
      id: I
    });
  }
  getPageLabels() {
    return this.messageHandler.sendWithPromise("GetPageLabels", null);
  }
  getPageLayout() {
    return this.messageHandler.sendWithPromise("GetPageLayout", null);
  }
  getPageMode() {
    return this.messageHandler.sendWithPromise("GetPageMode", null);
  }
  getViewerPreferences() {
    return this.messageHandler.sendWithPromise("GetViewerPreferences", null);
  }
  getOpenAction() {
    return this.messageHandler.sendWithPromise("GetOpenAction", null);
  }
  getAttachments() {
    return this.messageHandler.sendWithPromise("GetAttachments", null);
  }
  getAnnotationsByType(I, g) {
    return this.messageHandler.sendWithPromise("GetAnnotationsByType", {
      types: I,
      pageIndexesToSkip: g
    });
  }
  getDocJSActions() {
    return this.#l("GetDocJSActions");
  }
  getPageJSActions(I) {
    return this.messageHandler.sendWithPromise("GetPageJSActions", {
      pageIndex: I
    });
  }
  getStructTree(I) {
    return this.messageHandler.sendWithPromise("GetStructTree", {
      pageIndex: I
    });
  }
  getOutline() {
    return this.messageHandler.sendWithPromise("GetOutline", null);
  }
  getOptionalContentConfig(I) {
    return this.#l("GetOptionalContentConfig").then((g) => new $l(g, I));
  }
  getPermissions() {
    return this.messageHandler.sendWithPromise("GetPermissions", null);
  }
  getMetadata() {
    const I = "GetMetadata", g = this.#I.get(I);
    if (g)
      return g;
    const C = this.messageHandler.sendWithPromise(I, null).then((A) => ({
      info: A[0],
      metadata: A[1] ? new ql(A[1]) : null,
      contentDispositionFilename: this._fullReader?.filename ?? null,
      contentLength: this._fullReader?.contentLength ?? null
    }));
    return this.#I.set(I, C), C;
  }
  getMarkInfo() {
    return this.messageHandler.sendWithPromise("GetMarkInfo", null);
  }
  async startCleanup(I = !1) {
    if (!this.destroyed) {
      await this.messageHandler.sendWithPromise("Cleanup", null);
      for (const g of this.#g.values())
        if (!g.cleanup())
          throw new Error(`startCleanup: Page ${g.pageNumber} is currently rendering.`);
      this.commonObjs.clear(), I || this.fontLoader.clear(), this.#I.clear(), this.filterFactory.destroy(!0), tI.cleanup();
    }
  }
  cachedPageNumber(I) {
    if (!eC(I))
      return null;
    const g = I.gen === 0 ? `${I.num}R` : `${I.num}R${I.gen}`;
    return this.#A.get(g) ?? null;
  }
}
class nZ {
  #I = null;
  onContinue = null;
  onError = null;
  constructor(I) {
    this.#I = I;
  }
  get promise() {
    return this.#I.capability.promise;
  }
  cancel(I = 0) {
    this.#I.cancel(null, I);
  }
  get separateAnnots() {
    const {
      separateAnnots: I
    } = this.#I.operatorList;
    if (!I)
      return !1;
    const {
      annotationCanvasMap: g
    } = this.#I;
    return I.form || I.canvas && g?.size > 0;
  }
}
class Vg {
  #I = null;
  static #g = /* @__PURE__ */ new WeakSet();
  constructor({
    callback: I,
    params: g,
    objs: C,
    commonObjs: A,
    annotationCanvasMap: l,
    operatorList: Z,
    pageIndex: i,
    canvasFactory: d,
    filterFactory: c,
    useRequestAnimationFrame: G = !1,
    pdfBug: b = !1,
    pageColors: m = null,
    enableHWA: B = !1,
    filteredOperationIndexes: o = null
  }) {
    this.callback = I, this.params = g, this.objs = C, this.commonObjs = A, this.annotationCanvasMap = l, this.operatorListIdx = null, this.operatorList = Z, this._pageIndex = i, this.canvasFactory = d, this.filterFactory = c, this._pdfBug = b, this.pageColors = m, this.running = !1, this.graphicsReadyCallback = null, this.graphicsReady = !1, this._useRequestAnimationFrame = G === !0 && typeof window < "u", this.cancelled = !1, this.capability = Promise.withResolvers(), this.task = new nZ(this), this._cancelBound = this.cancel.bind(this), this._continueBound = this._continue.bind(this), this._scheduleNextBound = this._scheduleNext.bind(this), this._nextBound = this._next.bind(this), this._canvas = g.canvas, this._canvasContext = g.canvas ? null : g.canvasContext, this._enableHWA = B, this._dependencyTracker = g.dependencyTracker, this._filteredOperationIndexes = o;
  }
  get completed() {
    return this.capability.promise.catch(function() {
    });
  }
  initializeGraphics({
    transparency: I = !1,
    optionalContentConfig: g
  }) {
    if (this.cancelled)
      return;
    if (this._canvas) {
      if (Vg.#g.has(this._canvas))
        throw new Error("Cannot use the same canvas during multiple render() operations. Use different canvas or ensure previous operations were cancelled or completed.");
      Vg.#g.add(this._canvas);
    }
    this._pdfBug && globalThis.StepperManager?.enabled && (this.stepper = globalThis.StepperManager.create(this._pageIndex), this.stepper.init(this.operatorList), this.stepper.nextBreakPoint = this.stepper.getNextBreakPoint());
    const {
      viewport: C,
      transform: A,
      background: l,
      dependencyTracker: Z
    } = this.params, i = this._canvasContext || this._canvas.getContext("2d", {
      alpha: !1,
      willReadFrequently: !this._enableHWA
    });
    this.gfx = new Xg(i, this.commonObjs, this.objs, this.canvasFactory, this.filterFactory, {
      optionalContentConfig: g
    }, this.annotationCanvasMap, this.pageColors, Z), this.gfx.beginDrawing({
      transform: A,
      viewport: C,
      transparency: I,
      background: l
    }), this.operatorListIdx = 0, this.graphicsReady = !0, this.graphicsReadyCallback?.();
  }
  cancel(I = null, g = 0) {
    this.running = !1, this.cancelled = !0, this.gfx?.endDrawing(), this.#I && (window.cancelAnimationFrame(this.#I), this.#I = null), Vg.#g.delete(this._canvas), I ||= new GC(`Rendering cancelled, page ${this._pageIndex + 1}`, g), this.callback(I), this.task.onError?.(I);
  }
  operatorListChanged() {
    if (!this.graphicsReady) {
      this.graphicsReadyCallback ||= this._continueBound;
      return;
    }
    this.stepper?.updateOperatorList(this.operatorList), !this.running && this._continue();
  }
  _continue() {
    this.running = !0, !this.cancelled && (this.task.onContinue ? this.task.onContinue(this._scheduleNextBound) : this._scheduleNext());
  }
  _scheduleNext() {
    this._useRequestAnimationFrame ? this.#I = window.requestAnimationFrame(() => {
      this.#I = null, this._nextBound().catch(this._cancelBound);
    }) : Promise.resolve().then(this._nextBound).catch(this._cancelBound);
  }
  async _next() {
    this.cancelled || (this.operatorListIdx = this.gfx.executeOperatorList(this.operatorList, this.operatorListIdx, this._continueBound, this.stepper, this._filteredOperationIndexes), this.operatorListIdx === this.operatorList.argsArray.length && (this.running = !1, this.operatorList.lastChunk && (this.gfx.endDrawing(), Vg.#g.delete(this._canvas), this.callback())));
  }
}
const $A = "5.4.149", Il = "9e2e9e209";
class pI {
  #I = null;
  #g = null;
  #C;
  #A = null;
  #Z = !1;
  #l = !1;
  #i = null;
  #d;
  #c = null;
  #s = null;
  static #m = null;
  static get _keyboardManager() {
    return P(this, "_keyboardManager", new rg([[["Escape", "mac+Escape"], pI.prototype._hideDropdownFromKeyboard], [[" ", "mac+ "], pI.prototype._colorSelectFromKeyboard], [["ArrowDown", "ArrowRight", "mac+ArrowDown", "mac+ArrowRight"], pI.prototype._moveToNext], [["ArrowUp", "ArrowLeft", "mac+ArrowUp", "mac+ArrowLeft"], pI.prototype._moveToPrevious], [["Home", "mac+Home"], pI.prototype._moveToBeginning], [["End", "mac+End"], pI.prototype._moveToEnd]]));
  }
  constructor({
    editor: I = null,
    uiManager: g = null
  }) {
    I ? (this.#l = !1, this.#i = I) : this.#l = !0, this.#s = I?._uiManager || g, this.#d = this.#s._eventBus, this.#C = I?.color?.toUpperCase() || this.#s?.highlightColors.values().next().value || "#FFFF98", pI.#m ||= Object.freeze({
      blue: "pdfjs-editor-colorpicker-blue",
      green: "pdfjs-editor-colorpicker-green",
      pink: "pdfjs-editor-colorpicker-pink",
      red: "pdfjs-editor-colorpicker-red",
      yellow: "pdfjs-editor-colorpicker-yellow"
    });
  }
  renderButton() {
    const I = this.#I = document.createElement("button");
    I.className = "colorPicker", I.tabIndex = "0", I.setAttribute("data-l10n-id", "pdfjs-editor-colorpicker-button"), I.ariaHasPopup = "true", this.#i && (I.ariaControls = `${this.#i.id}_colorpicker_dropdown`);
    const g = this.#s._signal;
    I.addEventListener("click", this.#o.bind(this), {
      signal: g
    }), I.addEventListener("keydown", this.#W.bind(this), {
      signal: g
    });
    const C = this.#g = document.createElement("span");
    return C.className = "swatch", C.ariaHidden = "true", C.style.backgroundColor = this.#C, I.append(C), I;
  }
  renderMainDropdown() {
    const I = this.#A = this.#G();
    return I.ariaOrientation = "horizontal", I.ariaLabelledBy = "highlightColorPickerLabel", I;
  }
  #G() {
    const I = document.createElement("div"), g = this.#s._signal;
    I.addEventListener("contextmenu", JI, {
      signal: g
    }), I.className = "dropdown", I.role = "listbox", I.ariaMultiSelectable = "false", I.ariaOrientation = "vertical", I.setAttribute("data-l10n-id", "pdfjs-editor-colorpicker-dropdown"), this.#i && (I.id = `${this.#i.id}_colorpicker_dropdown`);
    for (const [C, A] of this.#s.highlightColors) {
      const l = document.createElement("button");
      l.tabIndex = "0", l.role = "option", l.setAttribute("data-color", A), l.title = C, l.setAttribute("data-l10n-id", pI.#m[C]);
      const Z = document.createElement("span");
      l.append(Z), Z.className = "swatch", Z.style.backgroundColor = A, l.ariaSelected = A === this.#C, l.addEventListener("click", this.#B.bind(this, A), {
        signal: g
      }), I.append(l);
    }
    return I.addEventListener("keydown", this.#W.bind(this), {
      signal: g
    }), I;
  }
  #B(I, g) {
    g.stopPropagation(), this.#d.dispatch("switchannotationeditorparams", {
      source: this,
      type: f.HIGHLIGHT_COLOR,
      value: I
    }), this.updateColor(I);
  }
  _colorSelectFromKeyboard(I) {
    if (I.target === this.#I) {
      this.#o(I);
      return;
    }
    const g = I.target.getAttribute("data-color");
    g && this.#B(g, I);
  }
  _moveToNext(I) {
    if (!this.#h) {
      this.#o(I);
      return;
    }
    if (I.target === this.#I) {
      this.#A.firstChild?.focus();
      return;
    }
    I.target.nextSibling?.focus();
  }
  _moveToPrevious(I) {
    if (I.target === this.#A?.firstChild || I.target === this.#I) {
      this.#h && this._hideDropdownFromKeyboard();
      return;
    }
    this.#h || this.#o(I), I.target.previousSibling?.focus();
  }
  _moveToBeginning(I) {
    if (!this.#h) {
      this.#o(I);
      return;
    }
    this.#A.firstChild?.focus();
  }
  _moveToEnd(I) {
    if (!this.#h) {
      this.#o(I);
      return;
    }
    this.#A.lastChild?.focus();
  }
  #W(I) {
    pI._keyboardManager.exec(this, I);
  }
  #o(I) {
    if (this.#h) {
      this.hideDropdown();
      return;
    }
    if (this.#Z = I.detail === 0, this.#c || (this.#c = new AbortController(), window.addEventListener("pointerdown", this.#b.bind(this), {
      signal: this.#s.combinedSignal(this.#c)
    })), this.#I.ariaExpanded = "true", this.#A) {
      this.#A.classList.remove("hidden");
      return;
    }
    const g = this.#A = this.#G();
    this.#I.append(g);
  }
  #b(I) {
    this.#A?.contains(I.target) || this.hideDropdown();
  }
  hideDropdown() {
    this.#A?.classList.add("hidden"), this.#I.ariaExpanded = "false", this.#c?.abort(), this.#c = null;
  }
  get #h() {
    return this.#A && !this.#A.classList.contains("hidden");
  }
  _hideDropdownFromKeyboard() {
    if (!this.#l) {
      if (!this.#h) {
        this.#i?.unselect();
        return;
      }
      this.hideDropdown(), this.#I.focus({
        preventScroll: !0,
        focusVisible: this.#Z
      });
    }
  }
  updateColor(I) {
    if (this.#g && (this.#g.style.backgroundColor = I), !this.#A)
      return;
    const g = this.#s.highlightColors.values();
    for (const C of this.#A.children)
      C.ariaSelected = g.next().value === I.toUpperCase();
  }
  destroy() {
    this.#I?.remove(), this.#I = null, this.#g = null, this.#A?.remove(), this.#A = null;
  }
}
class Jg {
  #I = null;
  #g = null;
  #C = null;
  static #A = null;
  constructor(I) {
    this.#g = I, this.#C = I._uiManager, Jg.#A ||= Object.freeze({
      freetext: "pdfjs-editor-color-picker-free-text-input",
      ink: "pdfjs-editor-color-picker-ink-input"
    });
  }
  renderButton() {
    if (this.#I)
      return this.#I;
    const {
      editorType: I,
      colorType: g,
      colorValue: C
    } = this.#g, A = this.#I = document.createElement("input");
    return A.type = "color", A.value = C || "#000000", A.className = "basicColorPicker", A.tabIndex = 0, A.setAttribute("data-l10n-id", Jg.#A[I]), A.addEventListener("input", () => {
      this.#C.updateParams(g, A.value);
    }, {
      signal: this.#C._signal
    }), A;
  }
  update(I) {
    this.#I && (this.#I.value = I);
  }
  destroy() {
    this.#I?.remove(), this.#I = null;
  }
  hideDropdown() {
  }
}
x(116);
x(531);
function aA(s) {
  return Math.floor(Math.max(0, Math.min(1, s)) * 255).toString(16).padStart(2, "0");
}
function Hg(s) {
  return Math.max(0, Math.min(255, 255 * s));
}
class VA {
  static CMYK_G([I, g, C, A]) {
    return ["G", 1 - Math.min(1, 0.3 * I + 0.59 * C + 0.11 * g + A)];
  }
  static G_CMYK([I]) {
    return ["CMYK", 0, 0, 0, 1 - I];
  }
  static G_RGB([I]) {
    return ["RGB", I, I, I];
  }
  static G_rgb([I]) {
    return I = Hg(I), [I, I, I];
  }
  static G_HTML([I]) {
    const g = aA(I);
    return `#${g}${g}${g}`;
  }
  static RGB_G([I, g, C]) {
    return ["G", 0.3 * I + 0.59 * g + 0.11 * C];
  }
  static RGB_rgb(I) {
    return I.map(Hg);
  }
  static RGB_HTML(I) {
    return `#${I.map(aA).join("")}`;
  }
  static T_HTML() {
    return "#00000000";
  }
  static T_rgb() {
    return [null];
  }
  static CMYK_RGB([I, g, C, A]) {
    return ["RGB", 1 - Math.min(1, I + A), 1 - Math.min(1, C + A), 1 - Math.min(1, g + A)];
  }
  static CMYK_rgb([I, g, C, A]) {
    return [Hg(1 - Math.min(1, I + A)), Hg(1 - Math.min(1, C + A)), Hg(1 - Math.min(1, g + A))];
  }
  static CMYK_HTML(I) {
    const g = this.CMYK_RGB(I).slice(1);
    return this.RGB_HTML(g);
  }
  static RGB_CMYK([I, g, C]) {
    const A = 1 - I, l = 1 - g, Z = 1 - C, i = Math.min(A, l, Z);
    return ["CMYK", A, l, Z, i];
  }
}
class yZ {
  create(I, g, C = !1) {
    if (I <= 0 || g <= 0)
      throw new Error("Invalid SVG dimensions");
    const A = this._createSVG("svg:svg");
    return A.setAttribute("version", "1.1"), C || (A.setAttribute("width", `${I}px`), A.setAttribute("height", `${g}px`)), A.setAttribute("preserveAspectRatio", "none"), A.setAttribute("viewBox", `0 0 ${I} ${g}`), A;
  }
  createElement(I) {
    if (typeof I != "string")
      throw new Error("Invalid SVG element type");
    return this._createSVG(I);
  }
  _createSVG(I) {
    II("Abstract method `_createSVG` called.");
  }
}
class zg extends yZ {
  _createSVG(I) {
    return document.createElementNS(fI, I);
  }
}
class vC {
  static setupStorage(I, g, C, A, l) {
    const Z = A.getValue(g, {
      value: null
    });
    switch (C.name) {
      case "textarea":
        if (Z.value !== null && (I.textContent = Z.value), l === "print")
          break;
        I.addEventListener("input", (i) => {
          A.setValue(g, {
            value: i.target.value
          });
        });
        break;
      case "input":
        if (C.attributes.type === "radio" || C.attributes.type === "checkbox") {
          if (Z.value === C.attributes.xfaOn ? I.setAttribute("checked", !0) : Z.value === C.attributes.xfaOff && I.removeAttribute("checked"), l === "print")
            break;
          I.addEventListener("change", (i) => {
            A.setValue(g, {
              value: i.target.checked ? i.target.getAttribute("xfaOn") : i.target.getAttribute("xfaOff")
            });
          });
        } else {
          if (Z.value !== null && I.setAttribute("value", Z.value), l === "print")
            break;
          I.addEventListener("input", (i) => {
            A.setValue(g, {
              value: i.target.value
            });
          });
        }
        break;
      case "select":
        if (Z.value !== null) {
          I.setAttribute("value", Z.value);
          for (const i of C.children)
            i.attributes.value === Z.value ? i.attributes.selected = !0 : i.attributes.hasOwnProperty("selected") && delete i.attributes.selected;
        }
        I.addEventListener("input", (i) => {
          const d = i.target.options, c = d.selectedIndex === -1 ? "" : d[d.selectedIndex].value;
          A.setValue(g, {
            value: c
          });
        });
        break;
    }
  }
  static setAttributes({
    html: I,
    element: g,
    storage: C = null,
    intent: A,
    linkService: l
  }) {
    const {
      attributes: Z
    } = g, i = I instanceof HTMLAnchorElement;
    Z.type === "radio" && (Z.name = `${Z.name}-${A}`);
    for (const [d, c] of Object.entries(Z))
      if (c != null)
        switch (d) {
          case "class":
            c.length && I.setAttribute(d, c.join(" "));
            break;
          case "dataId":
            break;
          case "id":
            I.setAttribute("data-element-id", c);
            break;
          case "style":
            Object.assign(I.style, c);
            break;
          case "textContent":
            I.textContent = c;
            break;
          default:
            (!i || d !== "href" && d !== "newWindow") && I.setAttribute(d, c);
        }
    i && l.addLinkAttributes(I, Z.href, Z.newWindow), C && Z.dataId && this.setupStorage(I, Z.dataId, g, C);
  }
  static render(I) {
    const g = I.annotationStorage, C = I.linkService, A = I.xfaHtml, l = I.intent || "display", Z = document.createElement(A.name);
    A.attributes && this.setAttributes({
      html: Z,
      element: A,
      intent: l,
      linkService: C
    });
    const i = l !== "richText", d = I.div;
    if (d.append(Z), I.viewport) {
      const b = `matrix(${I.viewport.transform.join(",")})`;
      d.style.transform = b;
    }
    i && d.setAttribute("class", "xfaLayer xfaFont");
    const c = [];
    if (A.children.length === 0) {
      if (A.value) {
        const b = document.createTextNode(A.value);
        Z.append(b), i && Fg.shouldBuildText(A.name) && c.push(b);
      }
      return {
        textDivs: c
      };
    }
    const G = [[A, -1, Z]];
    for (; G.length > 0; ) {
      const [b, m, B] = G.at(-1);
      if (m + 1 === b.children.length) {
        G.pop();
        continue;
      }
      const o = b.children[++G.at(-1)[1]];
      if (o === null)
        continue;
      const {
        name: W
      } = o;
      if (W === "#text") {
        const h = document.createTextNode(o.value);
        c.push(h), B.append(h);
        continue;
      }
      const Y = o?.attributes?.xmlns ? document.createElementNS(o.attributes.xmlns, W) : document.createElement(W);
      if (B.append(Y), o.attributes && this.setAttributes({
        html: Y,
        element: o,
        storage: g,
        intent: l,
        linkService: C
      }), o.children?.length > 0)
        G.push([o, -1, Y]);
      else if (o.value) {
        const h = document.createTextNode(o.value);
        i && Fg.shouldBuildText(W) && c.push(h), Y.append(h);
      }
    }
    for (const b of d.querySelectorAll(".xfaNonInteractive input, .xfaNonInteractive textarea"))
      b.setAttribute("readOnly", !0);
    return {
      textDivs: c
    };
  }
  static update(I) {
    const g = `matrix(${I.viewport.transform.join(",")})`;
    I.div.style.transform = g, I.div.hidden = !1;
  }
}
const NZ = 9, mg = /* @__PURE__ */ new WeakSet(), tZ = (/* @__PURE__ */ new Date()).getTimezoneOffset() * 60 * 1e3;
class XA {
  static create(I) {
    switch (I.data.annotationType) {
      case GI.LINK:
        return new xC(I);
      case GI.TEXT:
        return new RZ(I);
      case GI.WIDGET:
        switch (I.data.fieldType) {
          case "Tx":
            return new eZ(I);
          case "Btn":
            return I.data.radioButton ? new gl(I) : I.data.checkBox ? new uZ(I) : new MZ(I);
          case "Ch":
            return new KZ(I);
          case "Sig":
            return new HZ(I);
        }
        return new og(I);
      case GI.POPUP:
        return new uC(I);
      case GI.FREETEXT:
        return new Cl(I);
      case GI.LINE:
        return new SZ(I);
      case GI.SQUARE:
        return new pZ(I);
      case GI.CIRCLE:
        return new FZ(I);
      case GI.POLYLINE:
        return new Al(I);
      case GI.CARET:
        return new zZ(I);
      case GI.INK:
        return new EC(I);
      case GI.POLYGON:
        return new JZ(I);
      case GI.HIGHLIGHT:
        return new ll(I);
      case GI.UNDERLINE:
        return new kZ(I);
      case GI.SQUIGGLY:
        return new LZ(I);
      case GI.STRIKEOUT:
        return new TZ(I);
      case GI.STAMP:
        return new Zl(I);
      case GI.FILEATTACHMENT:
        return new QZ(I);
      default:
        return new BI(I);
    }
  }
}
class BI {
  #I = null;
  #g = !1;
  #C = null;
  constructor(I, {
    isRenderable: g = !1,
    ignoreBorder: C = !1,
    createQuadrilaterals: A = !1
  } = {}) {
    this.isRenderable = g, this.data = I.data, this.layer = I.layer, this.linkService = I.linkService, this.downloadManager = I.downloadManager, this.imageResourcesPath = I.imageResourcesPath, this.renderForms = I.renderForms, this.svgFactory = I.svgFactory, this.annotationStorage = I.annotationStorage, this.enableComment = I.enableComment, this.enableScripting = I.enableScripting, this.hasJSActions = I.hasJSActions, this._fieldObjects = I.fieldObjects, this.parent = I.parent, g && (this.container = this._createContainer(C)), A && this._createQuadrilaterals();
  }
  static _hasPopupData({
    contentsObj: I,
    richText: g
  }) {
    return !!(I?.str || g?.str);
  }
  get _isEditable() {
    return this.data.isEditable;
  }
  get hasPopupData() {
    return BI._hasPopupData(this.data);
  }
  get hasCommentButton() {
    return this.enableComment && this._isEditable && this.hasPopupElement;
  }
  get commentButtonPosition() {
    const {
      quadPoints: I,
      rect: g
    } = this.data;
    let C = -1 / 0, A = -1 / 0;
    if (I?.length >= 8) {
      for (let l = 0; l < I.length; l += 8)
        I[l + 1] > A ? (A = I[l + 1], C = I[l + 2]) : I[l + 1] === A && (C = Math.max(C, I[l + 2]));
      return [C, A];
    }
    return g ? [g[2], g[3]] : null;
  }
  get commentButtonColor() {
    if (!this.data.color)
      return null;
    const [I, g, C] = this.data.color, l = 255 * (1 - (this.data.opacity ?? 1));
    return this.#A(Math.min(I + l, 255), Math.min(g + l, 255), Math.min(C + l, 255));
  }
  #A(I, g, C) {
    I /= 255, g /= 255, C /= 255;
    const A = Math.max(I, g, C), l = Math.min(I, g, C), Z = (A + l) / 2, i = ((1 + Math.sqrt(Z)) / 2 * 100).toFixed(2);
    if (A === l)
      return `hsl(0, 0%, ${i}%)`;
    const d = A - l;
    let c;
    A === I ? c = (g - C) / d + (g < C ? 6 : 0) : A === g ? c = (C - I) / d + 2 : c = (I - g) / d + 4, c = (c * 60).toFixed(2);
    const G = (d / (1 - Math.abs(2 * Z - 1)) * 100).toFixed(2);
    return `hsl(${c}, ${G}%, ${i}%)`;
  }
  _normalizePoint(I) {
    const {
      page: {
        view: g
      },
      viewport: {
        rawDims: {
          pageWidth: C,
          pageHeight: A,
          pageX: l,
          pageY: Z
        }
      }
    } = this.parent;
    return I[1] = g[3] - I[1] + g[1], I[0] = 100 * (I[0] - l) / C, I[1] = 100 * (I[1] - Z) / A, I;
  }
  updateEdited(I) {
    if (!this.container)
      return;
    I.rect && (this.#I ||= {
      rect: this.data.rect.slice(0)
    });
    const {
      rect: g,
      popup: C
    } = I;
    g && this.#Z(g);
    let A = this.#C?.popup || this.popup;
    !A && C?.text && (this._createPopup(C), A = this.#C.popup), A && (A.updateEdited(I), C?.deleted && (A.remove(), this.#C = null, this.popup = null));
  }
  resetEdited() {
    this.#I && (this.#Z(this.#I.rect), this.#C?.popup.resetEdited(), this.#I = null);
  }
  #Z(I) {
    const {
      container: {
        style: g
      },
      data: {
        rect: C,
        rotation: A
      },
      parent: {
        viewport: {
          rawDims: {
            pageWidth: l,
            pageHeight: Z,
            pageX: i,
            pageY: d
          }
        }
      }
    } = this;
    C?.splice(0, 4, ...I), g.left = `${100 * (I[0] - i) / l}%`, g.top = `${100 * (Z - I[3] + d) / Z}%`, A === 0 ? (g.width = `${100 * (I[2] - I[0]) / l}%`, g.height = `${100 * (I[3] - I[1]) / Z}%`) : this.setRotation(A);
  }
  _createContainer(I) {
    const {
      data: g,
      parent: {
        page: C,
        viewport: A
      }
    } = this, l = document.createElement("section");
    l.setAttribute("data-annotation-id", g.id), !(this instanceof og) && !(this instanceof xC) && (l.tabIndex = 0);
    const {
      style: Z
    } = l;
    if (Z.zIndex = this.parent.zIndex, this.parent.zIndex += 2, g.alternativeText && (l.title = g.alternativeText), g.noRotate && l.classList.add("norotate"), !g.rect || this instanceof uC) {
      const {
        rotation: W
      } = g;
      return !g.hasOwnCanvas && W !== 0 && this.setRotation(W, l), l;
    }
    const {
      width: i,
      height: d
    } = this;
    if (!I && g.borderStyle.width > 0) {
      Z.borderWidth = `${g.borderStyle.width}px`;
      const W = g.borderStyle.horizontalCornerRadius, Y = g.borderStyle.verticalCornerRadius;
      if (W > 0 || Y > 0) {
        const a = `calc(${W}px * var(--total-scale-factor)) / calc(${Y}px * var(--total-scale-factor))`;
        Z.borderRadius = a;
      } else if (this instanceof gl) {
        const a = `calc(${i}px * var(--total-scale-factor)) / calc(${d}px * var(--total-scale-factor))`;
        Z.borderRadius = a;
      }
      switch (g.borderStyle.style) {
        case Yg.SOLID:
          Z.borderStyle = "solid";
          break;
        case Yg.DASHED:
          Z.borderStyle = "dashed";
          break;
        case Yg.BEVELED:
          j("Unimplemented border style: beveled");
          break;
        case Yg.INSET:
          j("Unimplemented border style: inset");
          break;
        case Yg.UNDERLINE:
          Z.borderBottomStyle = "solid";
          break;
      }
      const h = g.borderColor || null;
      h ? (this.#g = !0, Z.borderColor = J.makeHexColor(h[0] | 0, h[1] | 0, h[2] | 0)) : Z.borderWidth = 0;
    }
    const c = J.normalizeRect([g.rect[0], C.view[3] - g.rect[1] + C.view[1], g.rect[2], C.view[3] - g.rect[3] + C.view[1]]), {
      pageWidth: G,
      pageHeight: b,
      pageX: m,
      pageY: B
    } = A.rawDims;
    Z.left = `${100 * (c[0] - m) / G}%`, Z.top = `${100 * (c[1] - B) / b}%`;
    const {
      rotation: o
    } = g;
    return g.hasOwnCanvas || o === 0 ? (Z.width = `${100 * i / G}%`, Z.height = `${100 * d / b}%`) : this.setRotation(o, l), l;
  }
  setRotation(I, g = this.container) {
    if (!this.data.rect)
      return;
    const {
      pageWidth: C,
      pageHeight: A
    } = this.parent.viewport.rawDims;
    let {
      width: l,
      height: Z
    } = this;
    I % 180 !== 0 && ([l, Z] = [Z, l]), g.style.width = `${100 * l / C}%`, g.style.height = `${100 * Z / A}%`, g.setAttribute("data-main-rotation", (360 - I) % 360);
  }
  get _commonActions() {
    const I = (g, C, A) => {
      const l = A.detail[g], Z = l[0], i = l.slice(1);
      A.target.style[C] = VA[`${Z}_HTML`](i), this.annotationStorage.setValue(this.data.id, {
        [C]: VA[`${Z}_rgb`](i)
      });
    };
    return P(this, "_commonActions", {
      display: (g) => {
        const {
          display: C
        } = g.detail, A = C % 2 === 1;
        this.container.style.visibility = A ? "hidden" : "visible", this.annotationStorage.setValue(this.data.id, {
          noView: A,
          noPrint: C === 1 || C === 2
        });
      },
      print: (g) => {
        this.annotationStorage.setValue(this.data.id, {
          noPrint: !g.detail.print
        });
      },
      hidden: (g) => {
        const {
          hidden: C
        } = g.detail;
        this.container.style.visibility = C ? "hidden" : "visible", this.annotationStorage.setValue(this.data.id, {
          noPrint: C,
          noView: C
        });
      },
      focus: (g) => {
        setTimeout(() => g.target.focus({
          preventScroll: !1
        }), 0);
      },
      userName: (g) => {
        g.target.title = g.detail.userName;
      },
      readonly: (g) => {
        g.target.disabled = g.detail.readonly;
      },
      required: (g) => {
        this._setRequired(g.target, g.detail.required);
      },
      bgColor: (g) => {
        I("bgColor", "backgroundColor", g);
      },
      fillColor: (g) => {
        I("fillColor", "backgroundColor", g);
      },
      fgColor: (g) => {
        I("fgColor", "color", g);
      },
      textColor: (g) => {
        I("textColor", "color", g);
      },
      borderColor: (g) => {
        I("borderColor", "borderColor", g);
      },
      strokeColor: (g) => {
        I("strokeColor", "borderColor", g);
      },
      rotation: (g) => {
        const C = g.detail.rotation;
        this.setRotation(C), this.annotationStorage.setValue(this.data.id, {
          rotation: C
        });
      }
    });
  }
  _dispatchEventFromSandbox(I, g) {
    const C = this._commonActions;
    for (const A of Object.keys(g.detail))
      (I[A] || C[A])?.(g);
  }
  _setDefaultPropertiesFromJS(I) {
    if (!this.enableScripting)
      return;
    const g = this.annotationStorage.getRawValue(this.data.id);
    if (!g)
      return;
    const C = this._commonActions;
    for (const [A, l] of Object.entries(g)) {
      const Z = C[A];
      if (Z) {
        const i = {
          detail: {
            [A]: l
          },
          target: I
        };
        Z(i), delete g[A];
      }
    }
  }
  _createQuadrilaterals() {
    if (!this.container)
      return;
    const {
      quadPoints: I
    } = this.data;
    if (!I)
      return;
    const [g, C, A, l] = this.data.rect.map((W) => Math.fround(W));
    if (I.length === 8) {
      const [W, Y, h, a] = I.subarray(2, 6);
      if (A === W && l === Y && g === h && C === a)
        return;
    }
    const {
      style: Z
    } = this.container;
    let i;
    if (this.#g) {
      const {
        borderColor: W,
        borderWidth: Y
      } = Z;
      Z.borderWidth = 0, i = ["url('data:image/svg+xml;utf8,", '<svg xmlns="http://www.w3.org/2000/svg"', ' preserveAspectRatio="none" viewBox="0 0 1 1">', `<g fill="transparent" stroke="${W}" stroke-width="${Y}">`], this.container.classList.add("hasBorder");
    }
    const d = A - g, c = l - C, {
      svgFactory: G
    } = this, b = G.createElement("svg");
    b.classList.add("quadrilateralsContainer"), b.setAttribute("width", 0), b.setAttribute("height", 0), b.role = "none";
    const m = G.createElement("defs");
    b.append(m);
    const B = G.createElement("clipPath"), o = `clippath_${this.data.id}`;
    B.setAttribute("id", o), B.setAttribute("clipPathUnits", "objectBoundingBox"), m.append(B);
    for (let W = 2, Y = I.length; W < Y; W += 8) {
      const h = I[W], a = I[W + 1], w = I[W + 2], n = I[W + 3], V = G.createElement("rect"), X = (w - g) / d, y = (l - a) / c, N = (h - w) / d, t = (a - n) / c;
      V.setAttribute("x", X), V.setAttribute("y", y), V.setAttribute("width", N), V.setAttribute("height", t), B.append(V), i?.push(`<rect vector-effect="non-scaling-stroke" x="${X}" y="${y}" width="${N}" height="${t}"/>`);
    }
    this.#g && (i.push("</g></svg>')"), Z.backgroundImage = i.join("")), this.container.append(b), this.container.style.clipPath = `url(#${o})`;
  }
  _createPopup(I = null) {
    const {
      data: g
    } = this;
    let C, A;
    I ? (C = {
      str: I.text
    }, A = I.date) : (C = g.contentsObj, A = g.modificationDate);
    const l = this.#C = new uC({
      data: {
        color: g.color,
        titleObj: g.titleObj,
        modificationDate: A,
        contentsObj: C,
        richText: g.richText,
        parentRect: g.rect,
        borderStyle: 0,
        id: `popup_${g.id}`,
        rotation: g.rotation,
        noRotate: !0
      },
      linkService: this.linkService,
      parent: this.parent,
      elements: [this]
    });
    this.parent.div.append(l.render());
  }
  get hasPopupElement() {
    return !!(this.#C || this.popup || this.data.popupRef);
  }
  render() {
    II("Abstract method `AnnotationElement.render` called");
  }
  _getElementsByName(I, g = null) {
    const C = [];
    if (this._fieldObjects) {
      const A = this._fieldObjects[I];
      if (A)
        for (const {
          page: l,
          id: Z,
          exportValues: i
        } of A) {
          if (l === -1 || Z === g)
            continue;
          const d = typeof i == "string" ? i : null, c = document.querySelector(`[data-element-id="${Z}"]`);
          if (c && !mg.has(c)) {
            j(`_getElementsByName - element not allowed: ${Z}`);
            continue;
          }
          C.push({
            id: Z,
            exportValue: d,
            domElement: c
          });
        }
      return C;
    }
    for (const A of document.getElementsByName(I)) {
      const {
        exportValue: l
      } = A, Z = A.getAttribute("data-element-id");
      Z !== g && mg.has(A) && C.push({
        id: Z,
        exportValue: l,
        domElement: A
      });
    }
    return C;
  }
  show() {
    this.container && (this.container.hidden = !1), this.popup?.maybeShow();
  }
  hide() {
    this.container && (this.container.hidden = !0), this.popup?.forceHide();
  }
  getElementsToTriggerPopup() {
    return this.container;
  }
  addHighlightArea() {
    const I = this.getElementsToTriggerPopup();
    if (Array.isArray(I))
      for (const g of I)
        g.classList.add("highlightArea");
    else
      I.classList.add("highlightArea");
  }
  _editOnDoubleClick() {
    if (!this._isEditable)
      return;
    const {
      annotationEditorType: I,
      data: {
        id: g
      }
    } = this;
    this.container.addEventListener("dblclick", () => {
      this.linkService.eventBus?.dispatch("switchannotationeditormode", {
        source: this,
        mode: I,
        editId: g,
        mustEnterInEditMode: !0
      });
    });
  }
  get width() {
    return this.data.rect[2] - this.data.rect[0];
  }
  get height() {
    return this.data.rect[3] - this.data.rect[1];
  }
}
class xC extends BI {
  constructor(I, g = null) {
    super(I, {
      isRenderable: !0,
      ignoreBorder: !!g?.ignoreBorder,
      createQuadrilaterals: !0
    }), this.isTooltipOnly = I.data.isTooltipOnly;
  }
  render() {
    const {
      data: I,
      linkService: g
    } = this, C = document.createElement("a");
    C.setAttribute("data-element-id", I.id);
    let A = !1;
    return I.url ? (g.addLinkAttributes(C, I.url, I.newWindow), A = !0) : I.action ? (this._bindNamedAction(C, I.action, I.overlaidText), A = !0) : I.attachment ? (this.#g(C, I.attachment, I.overlaidText, I.attachmentDest), A = !0) : I.setOCGState ? (this.#C(C, I.setOCGState, I.overlaidText), A = !0) : I.dest ? (this._bindLink(C, I.dest, I.overlaidText), A = !0) : (I.actions && (I.actions.Action || I.actions["Mouse Up"] || I.actions["Mouse Down"]) && this.enableScripting && this.hasJSActions && (this._bindJSAction(C, I), A = !0), I.resetForm ? (this._bindResetFormAction(C, I.resetForm), A = !0) : this.isTooltipOnly && !A && (this._bindLink(C, ""), A = !0)), this.container.classList.add("linkAnnotation"), A && this.container.append(C), this.container;
  }
  #I() {
    this.container.setAttribute("data-internal-link", "");
  }
  _bindLink(I, g, C = "") {
    I.href = this.linkService.getDestinationHash(g), I.onclick = () => (g && this.linkService.goToDestination(g), !1), (g || g === "") && this.#I(), C && (I.title = C);
  }
  _bindNamedAction(I, g, C = "") {
    I.href = this.linkService.getAnchorUrl(""), I.onclick = () => (this.linkService.executeNamedAction(g), !1), C && (I.title = C), this.#I();
  }
  #g(I, g, C = "", A = null) {
    I.href = this.linkService.getAnchorUrl(""), g.description ? I.title = g.description : C && (I.title = C), I.onclick = () => (this.downloadManager?.openOrDownloadData(g.content, g.filename, A), !1), this.#I();
  }
  #C(I, g, C = "") {
    I.href = this.linkService.getAnchorUrl(""), I.onclick = () => (this.linkService.executeSetOCGState(g), !1), C && (I.title = C), this.#I();
  }
  _bindJSAction(I, g) {
    I.href = this.linkService.getAnchorUrl("");
    const C = /* @__PURE__ */ new Map([["Action", "onclick"], ["Mouse Up", "onmouseup"], ["Mouse Down", "onmousedown"]]);
    for (const A of Object.keys(g.actions)) {
      const l = C.get(A);
      l && (I[l] = () => (this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
        source: this,
        detail: {
          id: g.id,
          name: A
        }
      }), !1));
    }
    g.overlaidText && (I.title = g.overlaidText), I.onclick || (I.onclick = () => !1), this.#I();
  }
  _bindResetFormAction(I, g) {
    const C = I.onclick;
    if (C || (I.href = this.linkService.getAnchorUrl("")), this.#I(), !this._fieldObjects) {
      j('_bindResetFormAction - "resetForm" action not supported, ensure that the `fieldObjects` parameter is provided.'), C || (I.onclick = () => !1);
      return;
    }
    I.onclick = () => {
      C?.();
      const {
        fields: A,
        refs: l,
        include: Z
      } = g, i = [];
      if (A.length !== 0 || l.length !== 0) {
        const G = new Set(l);
        for (const b of A) {
          const m = this._fieldObjects[b] || [];
          for (const {
            id: B
          } of m)
            G.add(B);
        }
        for (const b of Object.values(this._fieldObjects))
          for (const m of b)
            G.has(m.id) === Z && i.push(m);
      } else
        for (const G of Object.values(this._fieldObjects))
          i.push(...G);
      const d = this.annotationStorage, c = [];
      for (const G of i) {
        const {
          id: b
        } = G;
        switch (c.push(b), G.type) {
          case "text": {
            const B = G.defaultValue || "";
            d.setValue(b, {
              value: B
            });
            break;
          }
          case "checkbox":
          case "radiobutton": {
            const B = G.defaultValue === G.exportValues;
            d.setValue(b, {
              value: B
            });
            break;
          }
          case "combobox":
          case "listbox": {
            const B = G.defaultValue || "";
            d.setValue(b, {
              value: B
            });
            break;
          }
          default:
            continue;
        }
        const m = document.querySelector(`[data-element-id="${b}"]`);
        if (m) {
          if (!mg.has(m)) {
            j(`_bindResetFormAction - element not allowed: ${b}`);
            continue;
          }
        } else continue;
        m.dispatchEvent(new Event("resetform"));
      }
      return this.enableScripting && this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
        source: this,
        detail: {
          id: "app",
          ids: c,
          name: "ResetForm"
        }
      }), !1;
    };
  }
}
class RZ extends BI {
  constructor(I) {
    super(I, {
      isRenderable: !0
    });
  }
  render() {
    this.container.classList.add("textAnnotation");
    const I = document.createElement("img");
    return I.src = this.imageResourcesPath + "annotation-" + this.data.name.toLowerCase() + ".svg", I.setAttribute("data-l10n-id", "pdfjs-text-annotation-type"), I.setAttribute("data-l10n-args", JSON.stringify({
      type: this.data.name
    })), !this.data.popupRef && this.hasPopupData && this._createPopup(), this.container.append(I), this.container;
  }
}
class og extends BI {
  render() {
    return this.container;
  }
  showElementAndHideCanvas(I) {
    this.data.hasOwnCanvas && (I.previousSibling?.nodeName === "CANVAS" && (I.previousSibling.hidden = !0), I.hidden = !1);
  }
  _getKeyModifier(I) {
    return XI.platform.isMac ? I.metaKey : I.ctrlKey;
  }
  _setEventListener(I, g, C, A, l) {
    C.includes("mouse") ? I.addEventListener(C, (Z) => {
      this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
        source: this,
        detail: {
          id: this.data.id,
          name: A,
          value: l(Z),
          shift: Z.shiftKey,
          modifier: this._getKeyModifier(Z)
        }
      });
    }) : I.addEventListener(C, (Z) => {
      if (C === "blur") {
        if (!g.focused || !Z.relatedTarget)
          return;
        g.focused = !1;
      } else if (C === "focus") {
        if (g.focused)
          return;
        g.focused = !0;
      }
      l && this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
        source: this,
        detail: {
          id: this.data.id,
          name: A,
          value: l(Z)
        }
      });
    });
  }
  _setEventListeners(I, g, C, A) {
    for (const [l, Z] of C)
      (Z === "Action" || this.data.actions?.[Z]) && ((Z === "Focus" || Z === "Blur") && (g ||= {
        focused: !1
      }), this._setEventListener(I, g, l, Z, A), Z === "Focus" && !this.data.actions?.Blur ? this._setEventListener(I, g, "blur", "Blur", null) : Z === "Blur" && !this.data.actions?.Focus && this._setEventListener(I, g, "focus", "Focus", null));
  }
  _setBackgroundColor(I) {
    const g = this.data.backgroundColor || null;
    I.style.backgroundColor = g === null ? "transparent" : J.makeHexColor(g[0], g[1], g[2]);
  }
  _setTextStyle(I) {
    const g = ["left", "center", "right"], {
      fontColor: C
    } = this.data.defaultAppearanceData, A = this.data.defaultAppearanceData.fontSize || NZ, l = I.style;
    let Z;
    const i = 2, d = (c) => Math.round(10 * c) / 10;
    if (this.data.multiLine) {
      const c = Math.abs(this.data.rect[3] - this.data.rect[1] - i), G = Math.round(c / (YC * A)) || 1, b = c / G;
      Z = Math.min(A, d(b / YC));
    } else {
      const c = Math.abs(this.data.rect[3] - this.data.rect[1] - i);
      Z = Math.min(A, d(c / YC));
    }
    l.fontSize = `calc(${Z}px * var(--total-scale-factor))`, l.color = J.makeHexColor(C[0], C[1], C[2]), this.data.textAlignment !== null && (l.textAlign = g[this.data.textAlignment]);
  }
  _setRequired(I, g) {
    g ? I.setAttribute("required", !0) : I.removeAttribute("required"), I.setAttribute("aria-required", g);
  }
}
class eZ extends og {
  constructor(I) {
    const g = I.renderForms || I.data.hasOwnCanvas || !I.data.hasAppearance && !!I.data.fieldValue;
    super(I, {
      isRenderable: g
    });
  }
  setPropertyOnSiblings(I, g, C, A) {
    const l = this.annotationStorage;
    for (const Z of this._getElementsByName(I.name, I.id))
      Z.domElement && (Z.domElement[g] = C), l.setValue(Z.id, {
        [A]: C
      });
  }
  render() {
    const I = this.annotationStorage, g = this.data.id;
    this.container.classList.add("textWidgetAnnotation");
    let C = null;
    if (this.renderForms) {
      const A = I.getValue(g, {
        value: this.data.fieldValue
      });
      let l = A.value || "";
      const Z = I.getValue(g, {
        charLimit: this.data.maxLen
      }).charLimit;
      Z && l.length > Z && (l = l.slice(0, Z));
      let i = A.formattedValue || this.data.textContent?.join(`
`) || null;
      i && this.data.comb && (i = i.replaceAll(/\s+/g, ""));
      const d = {
        userValue: l,
        formattedValue: i,
        lastCommittedValue: null,
        commitKey: 1,
        focused: !1
      };
      this.data.multiLine ? (C = document.createElement("textarea"), C.textContent = i ?? l, this.data.doNotScroll && (C.style.overflowY = "hidden")) : (C = document.createElement("input"), C.type = this.data.password ? "password" : "text", C.setAttribute("value", i ?? l), this.data.doNotScroll && (C.style.overflowX = "hidden")), this.data.hasOwnCanvas && (C.hidden = !0), mg.add(C), C.setAttribute("data-element-id", g), C.disabled = this.data.readOnly, C.name = this.data.fieldName, C.tabIndex = 0;
      const {
        datetimeFormat: c,
        datetimeType: G,
        timeStep: b
      } = this.data, m = !!G && this.enableScripting;
      c && (C.title = c), this._setRequired(C, this.data.required), Z && (C.maxLength = Z), C.addEventListener("input", (o) => {
        I.setValue(g, {
          value: o.target.value
        }), this.setPropertyOnSiblings(C, "value", o.target.value, "value"), d.formattedValue = null;
      }), C.addEventListener("resetform", (o) => {
        const W = this.data.defaultFieldValue ?? "";
        C.value = d.userValue = W, d.formattedValue = null;
      });
      let B = (o) => {
        const {
          formattedValue: W
        } = d;
        W != null && (o.target.value = W), o.target.scrollLeft = 0;
      };
      if (this.enableScripting && this.hasJSActions) {
        C.addEventListener("focus", (W) => {
          if (d.focused)
            return;
          const {
            target: Y
          } = W;
          if (m && (Y.type = G, b && (Y.step = b)), d.userValue) {
            const h = d.userValue;
            if (m)
              if (G === "time") {
                const a = new Date(h), w = [a.getHours(), a.getMinutes(), a.getSeconds()];
                Y.value = w.map((n) => n.toString().padStart(2, "0")).join(":");
              } else
                Y.value = new Date(h - tZ).toISOString().split(G === "date" ? "T" : ".", 1)[0];
            else
              Y.value = h;
          }
          d.lastCommittedValue = Y.value, d.commitKey = 1, this.data.actions?.Focus || (d.focused = !0);
        }), C.addEventListener("updatefromsandbox", (W) => {
          this.showElementAndHideCanvas(W.target);
          const Y = {
            value(h) {
              d.userValue = h.detail.value ?? "", m || I.setValue(g, {
                value: d.userValue.toString()
              }), h.target.value = d.userValue;
            },
            formattedValue(h) {
              const {
                formattedValue: a
              } = h.detail;
              d.formattedValue = a, a != null && h.target !== document.activeElement && (h.target.value = a);
              const w = {
                formattedValue: a
              };
              m && (w.value = a), I.setValue(g, w);
            },
            selRange(h) {
              h.target.setSelectionRange(...h.detail.selRange);
            },
            charLimit: (h) => {
              const {
                charLimit: a
              } = h.detail, {
                target: w
              } = h;
              if (a === 0) {
                w.removeAttribute("maxLength");
                return;
              }
              w.setAttribute("maxLength", a);
              let n = d.userValue;
              !n || n.length <= a || (n = n.slice(0, a), w.value = d.userValue = n, I.setValue(g, {
                value: n
              }), this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
                source: this,
                detail: {
                  id: g,
                  name: "Keystroke",
                  value: n,
                  willCommit: !0,
                  commitKey: 1,
                  selStart: w.selectionStart,
                  selEnd: w.selectionEnd
                }
              }));
            }
          };
          this._dispatchEventFromSandbox(Y, W);
        }), C.addEventListener("keydown", (W) => {
          d.commitKey = 1;
          let Y = -1;
          if (W.key === "Escape" ? Y = 0 : W.key === "Enter" && !this.data.multiLine ? Y = 2 : W.key === "Tab" && (d.commitKey = 3), Y === -1)
            return;
          const {
            value: h
          } = W.target;
          d.lastCommittedValue !== h && (d.lastCommittedValue = h, d.userValue = h, this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
            source: this,
            detail: {
              id: g,
              name: "Keystroke",
              value: h,
              willCommit: !0,
              commitKey: Y,
              selStart: W.target.selectionStart,
              selEnd: W.target.selectionEnd
            }
          }));
        });
        const o = B;
        B = null, C.addEventListener("blur", (W) => {
          if (!d.focused || !W.relatedTarget)
            return;
          this.data.actions?.Blur || (d.focused = !1);
          const {
            target: Y
          } = W;
          let {
            value: h
          } = Y;
          if (m) {
            if (h && G === "time") {
              const a = h.split(":").map((w) => parseInt(w, 10));
              h = new Date(2e3, 0, 1, a[0], a[1], a[2] || 0).valueOf(), Y.step = "";
            } else
              h = new Date(h).valueOf();
            Y.type = "text";
          }
          d.userValue = h, d.lastCommittedValue !== h && this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
            source: this,
            detail: {
              id: g,
              name: "Keystroke",
              value: h,
              willCommit: !0,
              commitKey: d.commitKey,
              selStart: W.target.selectionStart,
              selEnd: W.target.selectionEnd
            }
          }), o(W);
        }), this.data.actions?.Keystroke && C.addEventListener("beforeinput", (W) => {
          d.lastCommittedValue = null;
          const {
            data: Y,
            target: h
          } = W, {
            value: a,
            selectionStart: w,
            selectionEnd: n
          } = h;
          let V = w, X = n;
          switch (W.inputType) {
            case "deleteWordBackward": {
              const y = a.substring(0, w).match(/\w*[^\w]*$/);
              y && (V -= y[0].length);
              break;
            }
            case "deleteWordForward": {
              const y = a.substring(w).match(/^[^\w]*\w*/);
              y && (X += y[0].length);
              break;
            }
            case "deleteContentBackward":
              w === n && (V -= 1);
              break;
            case "deleteContentForward":
              w === n && (X += 1);
              break;
          }
          W.preventDefault(), this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
            source: this,
            detail: {
              id: g,
              name: "Keystroke",
              value: a,
              change: Y || "",
              willCommit: !1,
              selStart: V,
              selEnd: X
            }
          });
        }), this._setEventListeners(C, d, [["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"]], (W) => W.target.value);
      }
      if (B && C.addEventListener("blur", B), this.data.comb) {
        const W = (this.data.rect[2] - this.data.rect[0]) / Z;
        C.classList.add("comb"), C.style.letterSpacing = `calc(${W}px * var(--total-scale-factor) - 1ch)`;
      }
    } else
      C = document.createElement("div"), C.textContent = this.data.fieldValue, C.style.verticalAlign = "middle", C.style.display = "table-cell", this.data.hasOwnCanvas && (C.hidden = !0);
    return this._setTextStyle(C), this._setBackgroundColor(C), this._setDefaultPropertiesFromJS(C), this.container.append(C), this.container;
  }
}
class HZ extends og {
  constructor(I) {
    super(I, {
      isRenderable: !!I.data.hasOwnCanvas
    });
  }
}
class uZ extends og {
  constructor(I) {
    super(I, {
      isRenderable: I.renderForms
    });
  }
  render() {
    const I = this.annotationStorage, g = this.data, C = g.id;
    let A = I.getValue(C, {
      value: g.exportValue === g.fieldValue
    }).value;
    typeof A == "string" && (A = A !== "Off", I.setValue(C, {
      value: A
    })), this.container.classList.add("buttonWidgetAnnotation", "checkBox");
    const l = document.createElement("input");
    return mg.add(l), l.setAttribute("data-element-id", C), l.disabled = g.readOnly, this._setRequired(l, this.data.required), l.type = "checkbox", l.name = g.fieldName, A && l.setAttribute("checked", !0), l.setAttribute("exportValue", g.exportValue), l.tabIndex = 0, l.addEventListener("change", (Z) => {
      const {
        name: i,
        checked: d
      } = Z.target;
      for (const c of this._getElementsByName(i, C)) {
        const G = d && c.exportValue === g.exportValue;
        c.domElement && (c.domElement.checked = G), I.setValue(c.id, {
          value: G
        });
      }
      I.setValue(C, {
        value: d
      });
    }), l.addEventListener("resetform", (Z) => {
      const i = g.defaultFieldValue || "Off";
      Z.target.checked = i === g.exportValue;
    }), this.enableScripting && this.hasJSActions && (l.addEventListener("updatefromsandbox", (Z) => {
      const i = {
        value(d) {
          d.target.checked = d.detail.value !== "Off", I.setValue(C, {
            value: d.target.checked
          });
        }
      };
      this._dispatchEventFromSandbox(i, Z);
    }), this._setEventListeners(l, null, [["change", "Validate"], ["change", "Action"], ["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"]], (Z) => Z.target.checked)), this._setBackgroundColor(l), this._setDefaultPropertiesFromJS(l), this.container.append(l), this.container;
  }
}
class gl extends og {
  constructor(I) {
    super(I, {
      isRenderable: I.renderForms
    });
  }
  render() {
    this.container.classList.add("buttonWidgetAnnotation", "radioButton");
    const I = this.annotationStorage, g = this.data, C = g.id;
    let A = I.getValue(C, {
      value: g.fieldValue === g.buttonValue
    }).value;
    if (typeof A == "string" && (A = A !== g.buttonValue, I.setValue(C, {
      value: A
    })), A)
      for (const Z of this._getElementsByName(g.fieldName, C))
        I.setValue(Z.id, {
          value: !1
        });
    const l = document.createElement("input");
    if (mg.add(l), l.setAttribute("data-element-id", C), l.disabled = g.readOnly, this._setRequired(l, this.data.required), l.type = "radio", l.name = g.fieldName, A && l.setAttribute("checked", !0), l.tabIndex = 0, l.addEventListener("change", (Z) => {
      const {
        name: i,
        checked: d
      } = Z.target;
      for (const c of this._getElementsByName(i, C))
        I.setValue(c.id, {
          value: !1
        });
      I.setValue(C, {
        value: d
      });
    }), l.addEventListener("resetform", (Z) => {
      const i = g.defaultFieldValue;
      Z.target.checked = i != null && i === g.buttonValue;
    }), this.enableScripting && this.hasJSActions) {
      const Z = g.buttonValue;
      l.addEventListener("updatefromsandbox", (i) => {
        const d = {
          value: (c) => {
            const G = Z === c.detail.value;
            for (const b of this._getElementsByName(c.target.name)) {
              const m = G && b.id === C;
              b.domElement && (b.domElement.checked = m), I.setValue(b.id, {
                value: m
              });
            }
          }
        };
        this._dispatchEventFromSandbox(d, i);
      }), this._setEventListeners(l, null, [["change", "Validate"], ["change", "Action"], ["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"]], (i) => i.target.checked);
    }
    return this._setBackgroundColor(l), this._setDefaultPropertiesFromJS(l), this.container.append(l), this.container;
  }
}
class MZ extends xC {
  constructor(I) {
    super(I, {
      ignoreBorder: I.data.hasAppearance
    });
  }
  render() {
    const I = super.render();
    I.classList.add("buttonWidgetAnnotation", "pushButton");
    const g = I.lastChild;
    return this.enableScripting && this.hasJSActions && g && (this._setDefaultPropertiesFromJS(g), g.addEventListener("updatefromsandbox", (C) => {
      this._dispatchEventFromSandbox({}, C);
    })), I;
  }
}
class KZ extends og {
  constructor(I) {
    super(I, {
      isRenderable: I.renderForms
    });
  }
  render() {
    this.container.classList.add("choiceWidgetAnnotation");
    const I = this.annotationStorage, g = this.data.id, C = I.getValue(g, {
      value: this.data.fieldValue
    }), A = document.createElement("select");
    mg.add(A), A.setAttribute("data-element-id", g), A.disabled = this.data.readOnly, this._setRequired(A, this.data.required), A.name = this.data.fieldName, A.tabIndex = 0;
    let l = this.data.combo && this.data.options.length > 0;
    this.data.combo || (A.size = this.data.options.length, this.data.multiSelect && (A.multiple = !0)), A.addEventListener("resetform", (G) => {
      const b = this.data.defaultFieldValue;
      for (const m of A.options)
        m.selected = m.value === b;
    });
    for (const G of this.data.options) {
      const b = document.createElement("option");
      b.textContent = G.displayValue, b.value = G.exportValue, C.value.includes(G.exportValue) && (b.setAttribute("selected", !0), l = !1), A.append(b);
    }
    let Z = null;
    if (l) {
      const G = document.createElement("option");
      G.value = " ", G.setAttribute("hidden", !0), G.setAttribute("selected", !0), A.prepend(G), Z = () => {
        G.remove(), A.removeEventListener("input", Z), Z = null;
      }, A.addEventListener("input", Z);
    }
    const i = (G) => {
      const b = G ? "value" : "textContent", {
        options: m,
        multiple: B
      } = A;
      return B ? Array.prototype.filter.call(m, (o) => o.selected).map((o) => o[b]) : m.selectedIndex === -1 ? null : m[m.selectedIndex][b];
    };
    let d = i(!1);
    const c = (G) => {
      const b = G.target.options;
      return Array.prototype.map.call(b, (m) => ({
        displayValue: m.textContent,
        exportValue: m.value
      }));
    };
    return this.enableScripting && this.hasJSActions ? (A.addEventListener("updatefromsandbox", (G) => {
      const b = {
        value(m) {
          Z?.();
          const B = m.detail.value, o = new Set(Array.isArray(B) ? B : [B]);
          for (const W of A.options)
            W.selected = o.has(W.value);
          I.setValue(g, {
            value: i(!0)
          }), d = i(!1);
        },
        multipleSelection(m) {
          A.multiple = !0;
        },
        remove(m) {
          const B = A.options, o = m.detail.remove;
          B[o].selected = !1, A.remove(o), B.length > 0 && Array.prototype.findIndex.call(B, (Y) => Y.selected) === -1 && (B[0].selected = !0), I.setValue(g, {
            value: i(!0),
            items: c(m)
          }), d = i(!1);
        },
        clear(m) {
          for (; A.length !== 0; )
            A.remove(0);
          I.setValue(g, {
            value: null,
            items: []
          }), d = i(!1);
        },
        insert(m) {
          const {
            index: B,
            displayValue: o,
            exportValue: W
          } = m.detail.insert, Y = A.children[B], h = document.createElement("option");
          h.textContent = o, h.value = W, Y ? Y.before(h) : A.append(h), I.setValue(g, {
            value: i(!0),
            items: c(m)
          }), d = i(!1);
        },
        items(m) {
          const {
            items: B
          } = m.detail;
          for (; A.length !== 0; )
            A.remove(0);
          for (const o of B) {
            const {
              displayValue: W,
              exportValue: Y
            } = o, h = document.createElement("option");
            h.textContent = W, h.value = Y, A.append(h);
          }
          A.options.length > 0 && (A.options[0].selected = !0), I.setValue(g, {
            value: i(!0),
            items: c(m)
          }), d = i(!1);
        },
        indices(m) {
          const B = new Set(m.detail.indices);
          for (const o of m.target.options)
            o.selected = B.has(o.index);
          I.setValue(g, {
            value: i(!0)
          }), d = i(!1);
        },
        editable(m) {
          m.target.disabled = !m.detail.editable;
        }
      };
      this._dispatchEventFromSandbox(b, G);
    }), A.addEventListener("input", (G) => {
      const b = i(!0), m = i(!1);
      I.setValue(g, {
        value: b
      }), G.preventDefault(), this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
        source: this,
        detail: {
          id: g,
          name: "Keystroke",
          value: d,
          change: m,
          changeEx: b,
          willCommit: !1,
          commitKey: 1,
          keyDown: !1
        }
      });
    }), this._setEventListeners(A, null, [["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"], ["input", "Action"], ["input", "Validate"]], (G) => G.target.value)) : A.addEventListener("input", function(G) {
      I.setValue(g, {
        value: i(!0)
      });
    }), this.data.combo && this._setTextStyle(A), this._setBackgroundColor(A), this._setDefaultPropertiesFromJS(A), this.container.append(A), this.container;
  }
}
class uC extends BI {
  constructor(I) {
    const {
      data: g,
      elements: C
    } = I;
    super(I, {
      isRenderable: BI._hasPopupData(g)
    }), this.elements = C, this.popup = null;
  }
  render() {
    const {
      container: I
    } = this;
    I.classList.add("popupAnnotation"), I.role = "comment";
    const g = this.popup = new DZ({
      container: this.container,
      color: this.data.color,
      titleObj: this.data.titleObj,
      modificationDate: this.data.modificationDate || this.data.creationDate,
      contentsObj: this.data.contentsObj,
      richText: this.data.richText,
      rect: this.data.rect,
      parentRect: this.data.parentRect || null,
      parent: this.parent,
      elements: this.elements,
      open: this.data.open,
      eventBus: this.linkService.eventBus
    }), C = [];
    for (const A of this.elements)
      A.popup = g, A.container.ariaHasPopup = "dialog", C.push(A.data.id), A.addHighlightArea();
    return this.container.setAttribute("aria-controls", C.map((A) => `${JC}${A}`).join(",")), this.container;
  }
}
class DZ {
  #I = this.#p.bind(this);
  #g = this.#t.bind(this);
  #C = this.#L.bind(this);
  #A = this.#K.bind(this);
  #Z = null;
  #l = null;
  #i = null;
  #d = null;
  #c = null;
  #s = null;
  #m = null;
  #G = null;
  #B = !1;
  #W = null;
  #o = null;
  #b = null;
  #h = null;
  #a = null;
  #Y = null;
  #X = null;
  #n = null;
  #w = null;
  #y = null;
  #H = !1;
  constructor({
    container: I,
    color: g,
    elements: C,
    titleObj: A,
    modificationDate: l,
    contentsObj: Z,
    richText: i,
    parent: d,
    rect: c,
    parentRect: G,
    open: b,
    eventBus: m = null
  }) {
    this.#l = I, this.#w = A, this.#i = Z, this.#n = i, this.#m = d, this.#Z = g, this.#X = c, this.#G = G, this.#c = C, this.#s = m, this.#d = lC.toDateObject(l), this.trigger = C.flatMap((B) => B.getElementsToTriggerPopup()), this.#R(), this.#l.hidden = !0, b && this.#K();
  }
  #R() {
    if (this.#o)
      return;
    this.#o = new AbortController();
    const {
      signal: I
    } = this.#o;
    for (const g of this.trigger)
      g.addEventListener("click", this.#A, {
        signal: I
      }), g.addEventListener("mouseenter", this.#C, {
        signal: I
      }), g.addEventListener("mouseleave", this.#g, {
        signal: I
      }), g.classList.add("popupTriggerArea");
    for (const g of this.#c)
      g.container?.addEventListener("keydown", this.#I, {
        signal: I
      });
    this.#D();
  }
  #N() {
    const I = this.#c.find((g) => g.hasCommentButton);
    I && (this.#a = I._normalizePoint(I.commentButtonPosition), this.#Y = I.commentButtonColor);
  }
  #D() {
    if (this.#h || (this.#a || this.#N(), !this.#a))
      return;
    const I = this.#h = document.createElement("button");
    I.className = "annotationCommentButton";
    const g = this.#c[0].container;
    I.style.zIndex = g.style.zIndex + 1, I.tabIndex = 0;
    const {
      signal: C
    } = this.#o;
    I.addEventListener("hover", this.#A, {
      signal: C
    }), I.addEventListener("keydown", this.#I, {
      signal: C
    }), I.addEventListener("click", () => {
      const [{
        data: {
          id: l
        },
        annotationEditorType: Z
      }] = this.#c;
      this.#s?.dispatch("switchannotationeditormode", {
        source: this,
        editId: l,
        mode: Z,
        editComment: !0
      });
    }, {
      signal: C
    });
    const {
      style: A
    } = I;
    A.left = `calc(${this.#a[0]}%)`, A.top = `calc(${this.#a[1]}% - var(--comment-button-dim))`, this.#Y && (A.backgroundColor = this.#Y), g.after(I);
  }
  render() {
    if (this.#W)
      return;
    const I = this.#W = document.createElement("div");
    if (I.className = "popup", this.#Z) {
      const A = I.style.outlineColor = J.makeHexColor(...this.#Z);
      I.style.backgroundColor = `color-mix(in srgb, ${A} 30%, white)`;
    }
    const g = document.createElement("span");
    if (g.className = "header", this.#w?.str) {
      const A = document.createElement("span");
      A.className = "title", g.append(A), {
        dir: A.dir,
        str: A.textContent
      } = this.#w;
    }
    if (I.append(g), this.#d) {
      const A = document.createElement("time");
      A.className = "popupDate", A.setAttribute("data-l10n-id", "pdfjs-annotation-date-time-string"), A.setAttribute("data-l10n-args", JSON.stringify({
        dateObj: this.#d.valueOf()
      })), A.dateTime = this.#d.toISOString(), g.append(A);
    }
    const C = this.#e;
    if (C)
      vC.render({
        xfaHtml: C,
        intent: "richText",
        div: I
      }), I.lastChild.classList.add("richText", "popupContent");
    else {
      const A = this._formatContents(this.#i);
      I.append(A);
    }
    this.#l.append(I);
  }
  get #e() {
    const I = this.#n, g = this.#i;
    return I?.str && (!g?.str || g.str === I.str) && this.#n.html || null;
  }
  get #u() {
    return this.#e?.attributes?.style?.fontSize || 0;
  }
  get #F() {
    return this.#e?.attributes?.style?.color || null;
  }
  #S(I) {
    const g = [], C = {
      str: I,
      html: {
        name: "div",
        attributes: {
          dir: "auto"
        },
        children: [{
          name: "p",
          children: g
        }]
      }
    }, A = {
      style: {
        color: this.#F,
        fontSize: this.#u ? `calc(${this.#u}px * var(--total-scale-factor))` : ""
      }
    };
    for (const l of I.split(`
`))
      g.push({
        name: "span",
        value: l,
        attributes: A
      });
    return C;
  }
  _formatContents({
    str: I,
    dir: g
  }) {
    const C = document.createElement("p");
    C.classList.add("popupContent"), C.dir = g;
    const A = I.split(/(?:\r\n?|\n)/);
    for (let l = 0, Z = A.length; l < Z; ++l) {
      const i = A[l];
      C.append(document.createTextNode(i)), l < Z - 1 && C.append(document.createElement("br"));
    }
    return C;
  }
  #p(I) {
    I.altKey || I.shiftKey || I.ctrlKey || I.metaKey || (I.key === "Enter" || I.key === "Escape" && this.#B) && this.#K();
  }
  updateEdited({
    rect: I,
    popup: g,
    deleted: C
  }) {
    if (C || g?.deleted) {
      this.remove();
      return;
    }
    this.#R(), this.#y ||= {
      contentsObj: this.#i,
      richText: this.#n
    }, I && (this.#b = null), g && (this.#n = this.#S(g.text), this.#d = lC.toDateObject(g.date), this.#i = null), this.#W?.remove(), this.#W = null;
  }
  resetEdited() {
    this.#y && ({
      contentsObj: this.#i,
      richText: this.#n
    } = this.#y, this.#y = null, this.#W?.remove(), this.#W = null, this.#b = null);
  }
  remove() {
    this.#o?.abort(), this.#o = null, this.#W?.remove(), this.#W = null, this.#H = !1, this.#B = !1;
    for (const I of this.trigger)
      I.classList.remove("popupTriggerArea");
  }
  #J() {
    if (this.#b !== null)
      return;
    const {
      page: {
        view: I
      },
      viewport: {
        rawDims: {
          pageWidth: g,
          pageHeight: C,
          pageX: A,
          pageY: l
        }
      }
    } = this.#m;
    let Z = !!this.#G, i = Z ? this.#G : this.#X;
    for (const o of this.#c)
      if (!i || J.intersect(o.data.rect, i) !== null) {
        i = o.data.rect, Z = !0;
        break;
      }
    const d = J.normalizeRect([i[0], I[3] - i[1] + I[1], i[2], I[3] - i[3] + I[1]]), G = Z ? i[2] - i[0] + 5 : 0, b = d[0] + G, m = d[1];
    this.#b = [100 * (b - A) / g, 100 * (m - l) / C];
    const {
      style: B
    } = this.#l;
    B.left = `${this.#b[0]}%`, B.top = `${this.#b[1]}%`;
  }
  #K() {
    this.#B = !this.#B, this.#B ? (this.#L(), this.#l.addEventListener("click", this.#A), this.#l.addEventListener("keydown", this.#I)) : (this.#t(), this.#l.removeEventListener("click", this.#A), this.#l.removeEventListener("keydown", this.#I));
  }
  #L() {
    this.#W || this.render(), this.isVisible ? this.#B && this.#l.classList.add("focused") : (this.#J(), this.#l.hidden = !1, this.#l.style.zIndex = parseInt(this.#l.style.zIndex) + 1e3);
  }
  #t() {
    this.#l.classList.remove("focused"), !(this.#B || !this.isVisible) && (this.#l.hidden = !0, this.#l.style.zIndex = parseInt(this.#l.style.zIndex) - 1e3);
  }
  forceHide() {
    this.#H = this.isVisible, this.#H && (this.#l.hidden = !0);
  }
  maybeShow() {
    this.#R(), this.#H && (this.#W || this.#L(), this.#H = !1, this.#l.hidden = !1);
  }
  get isVisible() {
    return this.#l.hidden === !1;
  }
}
class Cl extends BI {
  constructor(I) {
    super(I, {
      isRenderable: !0,
      ignoreBorder: !0
    }), this.textContent = I.data.textContent, this.textPosition = I.data.textPosition, this.annotationEditorType = O.FREETEXT;
  }
  render() {
    if (this.container.classList.add("freeTextAnnotation"), this.textContent) {
      const I = document.createElement("div");
      I.classList.add("annotationTextContent"), I.setAttribute("role", "comment");
      for (const g of this.textContent) {
        const C = document.createElement("span");
        C.textContent = g, I.append(C);
      }
      this.container.append(I);
    }
    return !this.data.popupRef && this.hasPopupData && this._createPopup(), this._editOnDoubleClick(), this.container;
  }
}
class SZ extends BI {
  #I = null;
  constructor(I) {
    super(I, {
      isRenderable: !0,
      ignoreBorder: !0
    });
  }
  render() {
    this.container.classList.add("lineAnnotation");
    const {
      data: I,
      width: g,
      height: C
    } = this, A = this.svgFactory.create(g, C, !0), l = this.#I = this.svgFactory.createElement("svg:line");
    return l.setAttribute("x1", I.rect[2] - I.lineCoordinates[0]), l.setAttribute("y1", I.rect[3] - I.lineCoordinates[1]), l.setAttribute("x2", I.rect[2] - I.lineCoordinates[2]), l.setAttribute("y2", I.rect[3] - I.lineCoordinates[3]), l.setAttribute("stroke-width", I.borderStyle.width || 1), l.setAttribute("stroke", "transparent"), l.setAttribute("fill", "transparent"), A.append(l), this.container.append(A), !I.popupRef && this.hasPopupData && this._createPopup(), this.container;
  }
  getElementsToTriggerPopup() {
    return this.#I;
  }
  addHighlightArea() {
    this.container.classList.add("highlightArea");
  }
}
class pZ extends BI {
  #I = null;
  constructor(I) {
    super(I, {
      isRenderable: !0,
      ignoreBorder: !0
    });
  }
  render() {
    this.container.classList.add("squareAnnotation");
    const {
      data: I,
      width: g,
      height: C
    } = this, A = this.svgFactory.create(g, C, !0), l = I.borderStyle.width, Z = this.#I = this.svgFactory.createElement("svg:rect");
    return Z.setAttribute("x", l / 2), Z.setAttribute("y", l / 2), Z.setAttribute("width", g - l), Z.setAttribute("height", C - l), Z.setAttribute("stroke-width", l || 1), Z.setAttribute("stroke", "transparent"), Z.setAttribute("fill", "transparent"), A.append(Z), this.container.append(A), !I.popupRef && this.hasPopupData && this._createPopup(), this.container;
  }
  getElementsToTriggerPopup() {
    return this.#I;
  }
  addHighlightArea() {
    this.container.classList.add("highlightArea");
  }
}
class FZ extends BI {
  #I = null;
  constructor(I) {
    super(I, {
      isRenderable: !0,
      ignoreBorder: !0
    });
  }
  render() {
    this.container.classList.add("circleAnnotation");
    const {
      data: I,
      width: g,
      height: C
    } = this, A = this.svgFactory.create(g, C, !0), l = I.borderStyle.width, Z = this.#I = this.svgFactory.createElement("svg:ellipse");
    return Z.setAttribute("cx", g / 2), Z.setAttribute("cy", C / 2), Z.setAttribute("rx", g / 2 - l / 2), Z.setAttribute("ry", C / 2 - l / 2), Z.setAttribute("stroke-width", l || 1), Z.setAttribute("stroke", "transparent"), Z.setAttribute("fill", "transparent"), A.append(Z), this.container.append(A), !I.popupRef && this.hasPopupData && this._createPopup(), this.container;
  }
  getElementsToTriggerPopup() {
    return this.#I;
  }
  addHighlightArea() {
    this.container.classList.add("highlightArea");
  }
}
class Al extends BI {
  #I = null;
  constructor(I) {
    super(I, {
      isRenderable: !0,
      ignoreBorder: !0
    }), this.containerClassName = "polylineAnnotation", this.svgElementName = "svg:polyline";
  }
  render() {
    this.container.classList.add(this.containerClassName);
    const {
      data: {
        rect: I,
        vertices: g,
        borderStyle: C,
        popupRef: A
      },
      width: l,
      height: Z
    } = this;
    if (!g)
      return this.container;
    const i = this.svgFactory.create(l, Z, !0);
    let d = [];
    for (let G = 0, b = g.length; G < b; G += 2) {
      const m = g[G] - I[0], B = I[3] - g[G + 1];
      d.push(`${m},${B}`);
    }
    d = d.join(" ");
    const c = this.#I = this.svgFactory.createElement(this.svgElementName);
    return c.setAttribute("points", d), c.setAttribute("stroke-width", C.width || 1), c.setAttribute("stroke", "transparent"), c.setAttribute("fill", "transparent"), i.append(c), this.container.append(i), !A && this.hasPopupData && this._createPopup(), this.container;
  }
  getElementsToTriggerPopup() {
    return this.#I;
  }
  addHighlightArea() {
    this.container.classList.add("highlightArea");
  }
}
class JZ extends Al {
  constructor(I) {
    super(I), this.containerClassName = "polygonAnnotation", this.svgElementName = "svg:polygon";
  }
}
class zZ extends BI {
  constructor(I) {
    super(I, {
      isRenderable: !0,
      ignoreBorder: !0
    });
  }
  render() {
    return this.container.classList.add("caretAnnotation"), !this.data.popupRef && this.hasPopupData && this._createPopup(), this.container;
  }
}
class EC extends BI {
  #I = null;
  #g = [];
  constructor(I) {
    super(I, {
      isRenderable: !0,
      ignoreBorder: !0
    }), this.containerClassName = "inkAnnotation", this.svgElementName = "svg:polyline", this.annotationEditorType = this.data.it === "InkHighlight" ? O.HIGHLIGHT : O.INK;
  }
  #C(I, g) {
    switch (I) {
      case 90:
        return {
          transform: `rotate(90) translate(${-g[0]},${g[1]}) scale(1,-1)`,
          width: g[3] - g[1],
          height: g[2] - g[0]
        };
      case 180:
        return {
          transform: `rotate(180) translate(${-g[2]},${g[1]}) scale(1,-1)`,
          width: g[2] - g[0],
          height: g[3] - g[1]
        };
      case 270:
        return {
          transform: `rotate(270) translate(${-g[2]},${g[3]}) scale(1,-1)`,
          width: g[3] - g[1],
          height: g[2] - g[0]
        };
      default:
        return {
          transform: `translate(${-g[0]},${g[3]}) scale(1,-1)`,
          width: g[2] - g[0],
          height: g[3] - g[1]
        };
    }
  }
  render() {
    this.container.classList.add(this.containerClassName);
    const {
      data: {
        rect: I,
        rotation: g,
        inkLists: C,
        borderStyle: A,
        popupRef: l
      }
    } = this, {
      transform: Z,
      width: i,
      height: d
    } = this.#C(g, I), c = this.svgFactory.create(i, d, !0), G = this.#I = this.svgFactory.createElement("svg:g");
    c.append(G), G.setAttribute("stroke-width", A.width || 1), G.setAttribute("stroke-linecap", "round"), G.setAttribute("stroke-linejoin", "round"), G.setAttribute("stroke-miterlimit", 10), G.setAttribute("stroke", "transparent"), G.setAttribute("fill", "transparent"), G.setAttribute("transform", Z);
    for (let b = 0, m = C.length; b < m; b++) {
      const B = this.svgFactory.createElement(this.svgElementName);
      this.#g.push(B), B.setAttribute("points", C[b].join(",")), G.append(B);
    }
    return !l && this.hasPopupData && this._createPopup(), this.container.append(c), this._editOnDoubleClick(), this.container;
  }
  updateEdited(I) {
    super.updateEdited(I);
    const {
      thickness: g,
      points: C,
      rect: A
    } = I, l = this.#I;
    if (g >= 0 && l.setAttribute("stroke-width", g || 1), C)
      for (let Z = 0, i = this.#g.length; Z < i; Z++)
        this.#g[Z].setAttribute("points", C[Z].join(","));
    if (A) {
      const {
        transform: Z,
        width: i,
        height: d
      } = this.#C(this.data.rotation, A);
      l.parentElement.setAttribute("viewBox", `0 0 ${i} ${d}`), l.setAttribute("transform", Z);
    }
  }
  getElementsToTriggerPopup() {
    return this.#g;
  }
  addHighlightArea() {
    this.container.classList.add("highlightArea");
  }
  get commentButtonPosition() {
    const {
      inkLists: I,
      rect: g
    } = this.data;
    if (I?.length >= 1) {
      let C = -1 / 0, A = -1 / 0;
      for (const l of I)
        for (let Z = 0, i = l.length; Z < i; Z += 2)
          l[Z + 1] > A ? (A = l[Z + 1], C = l[Z]) : l[Z + 1] === A && (C = Math.max(C, l[Z]));
      if (C !== 1 / 0)
        return [C, A];
    }
    return g ? [g[2], g[3]] : null;
  }
}
class ll extends BI {
  constructor(I) {
    super(I, {
      isRenderable: !0,
      ignoreBorder: !0,
      createQuadrilaterals: !0
    }), this.annotationEditorType = O.HIGHLIGHT;
  }
  render() {
    const {
      data: {
        overlaidText: I,
        popupRef: g
      }
    } = this;
    if (!g && this.hasPopupData && this._createPopup(), this.container.classList.add("highlightAnnotation"), this._editOnDoubleClick(), I) {
      const C = document.createElement("mark");
      C.classList.add("overlaidText"), C.textContent = I, this.container.append(C);
    }
    return this.container;
  }
}
class kZ extends BI {
  constructor(I) {
    super(I, {
      isRenderable: !0,
      ignoreBorder: !0,
      createQuadrilaterals: !0
    });
  }
  render() {
    const {
      data: {
        overlaidText: I,
        popupRef: g
      }
    } = this;
    if (!g && this.hasPopupData && this._createPopup(), this.container.classList.add("underlineAnnotation"), I) {
      const C = document.createElement("u");
      C.classList.add("overlaidText"), C.textContent = I, this.container.append(C);
    }
    return this.container;
  }
}
class LZ extends BI {
  constructor(I) {
    super(I, {
      isRenderable: !0,
      ignoreBorder: !0,
      createQuadrilaterals: !0
    });
  }
  render() {
    const {
      data: {
        overlaidText: I,
        popupRef: g
      }
    } = this;
    if (!g && this.hasPopupData && this._createPopup(), this.container.classList.add("squigglyAnnotation"), I) {
      const C = document.createElement("u");
      C.classList.add("overlaidText"), C.textContent = I, this.container.append(C);
    }
    return this.container;
  }
}
class TZ extends BI {
  constructor(I) {
    super(I, {
      isRenderable: !0,
      ignoreBorder: !0,
      createQuadrilaterals: !0
    });
  }
  render() {
    const {
      data: {
        overlaidText: I,
        popupRef: g
      }
    } = this;
    if (!g && this.hasPopupData && this._createPopup(), this.container.classList.add("strikeoutAnnotation"), I) {
      const C = document.createElement("s");
      C.classList.add("overlaidText"), C.textContent = I, this.container.append(C);
    }
    return this.container;
  }
}
class Zl extends BI {
  constructor(I) {
    super(I, {
      isRenderable: !0,
      ignoreBorder: !0
    }), this.annotationEditorType = O.STAMP;
  }
  render() {
    return this.container.classList.add("stampAnnotation"), this.container.setAttribute("role", "img"), !this.data.popupRef && this.hasPopupData && this._createPopup(), this._editOnDoubleClick(), this.container;
  }
}
class QZ extends BI {
  #I = null;
  constructor(I) {
    super(I, {
      isRenderable: !0
    });
    const {
      file: g
    } = this.data;
    this.filename = g.filename, this.content = g.content, this.linkService.eventBus?.dispatch("fileattachmentannotation", {
      source: this,
      ...g
    });
  }
  render() {
    this.container.classList.add("fileAttachmentAnnotation");
    const {
      container: I,
      data: g
    } = this;
    let C;
    g.hasAppearance || g.fillAlpha === 0 ? C = document.createElement("div") : (C = document.createElement("img"), C.src = `${this.imageResourcesPath}annotation-${/paperclip/i.test(g.name) ? "paperclip" : "pushpin"}.svg`, g.fillAlpha && g.fillAlpha < 1 && (C.style = `filter: opacity(${Math.round(g.fillAlpha * 100)}%);`)), C.addEventListener("dblclick", this.#g.bind(this)), this.#I = C;
    const {
      isMac: A
    } = XI.platform;
    return I.addEventListener("keydown", (l) => {
      l.key === "Enter" && (A ? l.metaKey : l.ctrlKey) && this.#g();
    }), !g.popupRef && this.hasPopupData ? this._createPopup() : C.classList.add("popupTriggerArea"), I.append(C), I;
  }
  getElementsToTriggerPopup() {
    return this.#I;
  }
  addHighlightArea() {
    this.container.classList.add("highlightArea");
  }
  #g() {
    this.downloadManager?.openOrDownloadData(this.content, this.filename);
  }
}
class BC {
  #I = null;
  #g = null;
  #C = /* @__PURE__ */ new Map();
  #A = null;
  constructor({
    div: I,
    accessibilityManager: g,
    annotationCanvasMap: C,
    annotationEditorUIManager: A,
    page: l,
    viewport: Z,
    structTreeLayer: i
  }) {
    this.div = I, this.#I = g, this.#g = C, this.#A = i || null, this.page = l, this.viewport = Z, this.zIndex = 0, this._annotationEditorUIManager = A;
  }
  hasEditableAnnotations() {
    return this.#C.size > 0;
  }
  async #Z(I, g, C) {
    const A = I.firstChild || I, l = A.id = `${JC}${g}`, Z = await this.#A?.getAriaAttributes(l);
    if (Z)
      for (const [i, d] of Z)
        A.setAttribute(i, d);
    C ? C.at(-1).container.after(I) : (this.div.append(I), this.#I?.moveElementInDOM(this.div, I, A, !1));
  }
  async render(I) {
    const {
      annotations: g
    } = I, C = this.div;
    Zg(C, this.viewport);
    const A = /* @__PURE__ */ new Map(), l = {
      data: null,
      layer: C,
      linkService: I.linkService,
      downloadManager: I.downloadManager,
      imageResourcesPath: I.imageResourcesPath || "",
      renderForms: I.renderForms !== !1,
      svgFactory: new zg(),
      annotationStorage: I.annotationStorage || new LC(),
      enableComment: I.enableComment === !0,
      enableScripting: I.enableScripting === !0,
      hasJSActions: I.hasJSActions,
      fieldObjects: I.fieldObjects,
      parent: this,
      elements: null
    };
    for (const Z of g) {
      if (Z.noHTML)
        continue;
      const i = Z.annotationType === GI.POPUP;
      if (i) {
        const G = A.get(Z.id);
        if (!G)
          continue;
        l.elements = G;
      } else if (Z.rect[2] === Z.rect[0] || Z.rect[3] === Z.rect[1])
        continue;
      l.data = Z;
      const d = XA.create(l);
      if (!d.isRenderable)
        continue;
      if (!i && Z.popupRef) {
        const G = A.get(Z.popupRef);
        G ? G.push(d) : A.set(Z.popupRef, [d]);
      }
      const c = d.render();
      Z.hidden && (c.style.visibility = "hidden"), await this.#Z(c, Z.id, l.elements), d._isEditable && (this.#C.set(d.data.id, d), this._annotationEditorUIManager?.renderAnnotationElement(d));
    }
    this.#l();
  }
  async addLinkAnnotations(I, g) {
    const C = {
      data: null,
      layer: this.div,
      linkService: g,
      svgFactory: new zg(),
      parent: this
    };
    for (const A of I) {
      A.borderStyle ||= BC._defaultBorderStyle, C.data = A;
      const l = XA.create(C);
      if (!l.isRenderable)
        continue;
      const Z = l.render();
      await this.#Z(Z, A.id, null);
    }
  }
  update({
    viewport: I
  }) {
    const g = this.div;
    this.viewport = I, Zg(g, {
      rotation: I.rotation
    }), this.#l(), g.hidden = !1;
  }
  #l() {
    if (!this.#g)
      return;
    const I = this.div;
    for (const [g, C] of this.#g) {
      const A = I.querySelector(`[data-annotation-id="${g}"]`);
      if (!A)
        continue;
      C.className = "annotationContent";
      const {
        firstChild: l
      } = A;
      l ? l.nodeName === "CANVAS" ? l.replaceWith(C) : l.classList.contains("annotationContent") ? l.after(C) : l.before(C) : A.append(C);
      const Z = this.#C.get(g);
      Z && (Z._hasNoCanvas ? (this._annotationEditorUIManager?.setMissingCanvas(g, A.id, C), Z._hasNoCanvas = !1) : Z.canvas = C);
    }
    this.#g.clear();
  }
  getEditableAnnotations() {
    return Array.from(this.#C.values());
  }
  getEditableAnnotation(I) {
    return this.#C.get(I);
  }
  static get _defaultBorderStyle() {
    return P(this, "_defaultBorderStyle", Object.freeze({
      width: 1,
      rawWidth: 1,
      style: Yg.SOLID,
      dashArray: [3],
      horizontalCornerRadius: 0,
      verticalCornerRadius: 0
    }));
  }
}
const $g = /\r\n?|\n/g;
class aI extends T {
  #I;
  #g = "";
  #C = `${this.id}-editor`;
  #A = null;
  #Z;
  _colorPicker = null;
  static _freeTextDefaultContent = "";
  static _internalPadding = 0;
  static _defaultColor = null;
  static _defaultFontSize = 10;
  static get _keyboardManager() {
    const I = aI.prototype, g = (l) => l.isEmpty(), C = Cg.TRANSLATE_SMALL, A = Cg.TRANSLATE_BIG;
    return P(this, "_keyboardManager", new rg([[["ctrl+s", "mac+meta+s", "ctrl+p", "mac+meta+p"], I.commitOrRemove, {
      bubbles: !0
    }], [["ctrl+Enter", "mac+meta+Enter", "Escape", "mac+Escape"], I.commitOrRemove], [["ArrowLeft", "mac+ArrowLeft"], I._translateEmpty, {
      args: [-C, 0],
      checker: g
    }], [["ctrl+ArrowLeft", "mac+shift+ArrowLeft"], I._translateEmpty, {
      args: [-A, 0],
      checker: g
    }], [["ArrowRight", "mac+ArrowRight"], I._translateEmpty, {
      args: [C, 0],
      checker: g
    }], [["ctrl+ArrowRight", "mac+shift+ArrowRight"], I._translateEmpty, {
      args: [A, 0],
      checker: g
    }], [["ArrowUp", "mac+ArrowUp"], I._translateEmpty, {
      args: [0, -C],
      checker: g
    }], [["ctrl+ArrowUp", "mac+shift+ArrowUp"], I._translateEmpty, {
      args: [0, -A],
      checker: g
    }], [["ArrowDown", "mac+ArrowDown"], I._translateEmpty, {
      args: [0, C],
      checker: g
    }], [["ctrl+ArrowDown", "mac+shift+ArrowDown"], I._translateEmpty, {
      args: [0, A],
      checker: g
    }]]));
  }
  static _type = "freetext";
  static _editorType = O.FREETEXT;
  constructor(I) {
    super({
      ...I,
      name: "freeTextEditor"
    }), this.#I = I.color || aI._defaultColor || T._defaultLineColor, this.#Z = I.fontSize || aI._defaultFontSize, this.annotationElementId || this._uiManager.a11yAlert("pdfjs-editor-freetext-added-alert");
  }
  static initialize(I, g) {
    T.initialize(I, g);
    const C = getComputedStyle(document.documentElement);
    this._internalPadding = parseFloat(C.getPropertyValue("--freetext-padding"));
  }
  static updateDefaultParams(I, g) {
    switch (I) {
      case f.FREETEXT_SIZE:
        aI._defaultFontSize = g;
        break;
      case f.FREETEXT_COLOR:
        aI._defaultColor = g;
        break;
    }
  }
  updateParams(I, g) {
    switch (I) {
      case f.FREETEXT_SIZE:
        this.#l(g);
        break;
      case f.FREETEXT_COLOR:
        this.#i(g);
        break;
    }
  }
  static get defaultPropertiesToUpdate() {
    return [[f.FREETEXT_SIZE, aI._defaultFontSize], [f.FREETEXT_COLOR, aI._defaultColor || T._defaultLineColor]];
  }
  get propertiesToUpdate() {
    return [[f.FREETEXT_SIZE, this.#Z], [f.FREETEXT_COLOR, this.#I]];
  }
  get toolbarButtons() {
    return this._colorPicker ||= new Jg(this), [["colorPicker", this._colorPicker]];
  }
  get colorType() {
    return f.FREETEXT_COLOR;
  }
  get colorValue() {
    return this.#I;
  }
  #l(I) {
    const g = (A) => {
      this.editorDiv.style.fontSize = `calc(${A}px * var(--total-scale-factor))`, this.translate(0, -(A - this.#Z) * this.parentScale), this.#Z = A, this.#c();
    }, C = this.#Z;
    this.addCommands({
      cmd: g.bind(this, I),
      undo: g.bind(this, C),
      post: this._uiManager.updateUI.bind(this._uiManager, this),
      mustExec: !0,
      type: f.FREETEXT_SIZE,
      overwriteIfSameType: !0,
      keepUndo: !0
    });
  }
  #i(I) {
    const g = (A) => {
      this.#I = this.editorDiv.style.color = A, this._colorPicker?.update(A);
    }, C = this.#I;
    this.addCommands({
      cmd: g.bind(this, I),
      undo: g.bind(this, C),
      post: this._uiManager.updateUI.bind(this._uiManager, this),
      mustExec: !0,
      type: f.FREETEXT_COLOR,
      overwriteIfSameType: !0,
      keepUndo: !0
    });
  }
  _translateEmpty(I, g) {
    this._uiManager.translateSelectedEditors(I, g, !0);
  }
  getInitialTranslation() {
    const I = this.parentScale;
    return [-aI._internalPadding * I, -(aI._internalPadding + this.#Z) * I];
  }
  rebuild() {
    this.parent && (super.rebuild(), this.div !== null && (this.isAttachedToDOM || this.parent.add(this)));
  }
  enableEditMode() {
    if (!super.enableEditMode())
      return !1;
    this.overlayDiv.classList.remove("enabled"), this.editorDiv.contentEditable = !0, this._isDraggable = !1, this.div.removeAttribute("aria-activedescendant"), this.#A = new AbortController();
    const I = this._uiManager.combinedSignal(this.#A);
    return this.editorDiv.addEventListener("keydown", this.editorDivKeydown.bind(this), {
      signal: I
    }), this.editorDiv.addEventListener("focus", this.editorDivFocus.bind(this), {
      signal: I
    }), this.editorDiv.addEventListener("blur", this.editorDivBlur.bind(this), {
      signal: I
    }), this.editorDiv.addEventListener("input", this.editorDivInput.bind(this), {
      signal: I
    }), this.editorDiv.addEventListener("paste", this.editorDivPaste.bind(this), {
      signal: I
    }), !0;
  }
  disableEditMode() {
    return super.disableEditMode() ? (this.overlayDiv.classList.add("enabled"), this.editorDiv.contentEditable = !1, this.div.setAttribute("aria-activedescendant", this.#C), this._isDraggable = !0, this.#A?.abort(), this.#A = null, this.div.focus({
      preventScroll: !0
    }), this.isEditing = !1, this.parent.div.classList.add("freetextEditing"), !0) : !1;
  }
  focusin(I) {
    this._focusEventsAllowed && (super.focusin(I), I.target !== this.editorDiv && this.editorDiv.focus());
  }
  onceAdded(I) {
    this.width || (this.enableEditMode(), I && this.editorDiv.focus(), this._initialOptions?.isCentered && this.center(), this._initialOptions = null);
  }
  isEmpty() {
    return !this.editorDiv || this.editorDiv.innerText.trim() === "";
  }
  remove() {
    this.isEditing = !1, this.parent && (this.parent.setEditingState(!0), this.parent.div.classList.add("freetextEditing")), super.remove();
  }
  #d() {
    const I = [];
    this.editorDiv.normalize();
    let g = null;
    for (const C of this.editorDiv.childNodes)
      g?.nodeType === Node.TEXT_NODE && C.nodeName === "BR" || (I.push(aI.#s(C)), g = C);
    return I.join(`
`);
  }
  #c() {
    const [I, g] = this.parentDimensions;
    let C;
    if (this.isAttachedToDOM)
      C = this.div.getBoundingClientRect();
    else {
      const {
        currentLayer: A,
        div: l
      } = this, Z = l.style.display, i = l.classList.contains("hidden");
      l.classList.remove("hidden"), l.style.display = "hidden", A.div.append(this.div), C = l.getBoundingClientRect(), l.remove(), l.style.display = Z, l.classList.toggle("hidden", i);
    }
    this.rotation % 180 === this.parentRotation % 180 ? (this.width = C.width / I, this.height = C.height / g) : (this.width = C.height / I, this.height = C.width / g), this.fixAndSetPosition();
  }
  commit() {
    if (!this.isInEditMode())
      return;
    super.commit(), this.disableEditMode();
    const I = this.#g, g = this.#g = this.#d().trimEnd();
    if (I === g)
      return;
    const C = (A) => {
      if (this.#g = A, !A) {
        this.remove();
        return;
      }
      this.#m(), this._uiManager.rebuild(this), this.#c();
    };
    this.addCommands({
      cmd: () => {
        C(g);
      },
      undo: () => {
        C(I);
      },
      mustExec: !1
    }), this.#c();
  }
  shouldGetKeyboardEvents() {
    return this.isInEditMode();
  }
  enterInEditMode() {
    this.enableEditMode(), this.editorDiv.focus();
  }
  keydown(I) {
    I.target === this.div && I.key === "Enter" && (this.enterInEditMode(), I.preventDefault());
  }
  editorDivKeydown(I) {
    aI._keyboardManager.exec(this, I);
  }
  editorDivFocus(I) {
    this.isEditing = !0;
  }
  editorDivBlur(I) {
    this.isEditing = !1;
  }
  editorDivInput(I) {
    this.parent.div.classList.toggle("freetextEditing", this.isEmpty());
  }
  disableEditing() {
    this.editorDiv.setAttribute("role", "comment"), this.editorDiv.removeAttribute("aria-multiline");
  }
  enableEditing() {
    this.editorDiv.setAttribute("role", "textbox"), this.editorDiv.setAttribute("aria-multiline", !0);
  }
  get canChangeContent() {
    return !0;
  }
  render() {
    if (this.div)
      return this.div;
    let I, g;
    (this._isCopy || this.annotationElementId) && (I = this.x, g = this.y), super.render(), this.editorDiv = document.createElement("div"), this.editorDiv.className = "internal", this.editorDiv.setAttribute("id", this.#C), this.editorDiv.setAttribute("data-l10n-id", "pdfjs-free-text2"), this.editorDiv.setAttribute("data-l10n-attrs", "default-content"), this.enableEditing(), this.editorDiv.contentEditable = !0;
    const {
      style: C
    } = this.editorDiv;
    if (C.fontSize = `calc(${this.#Z}px * var(--total-scale-factor))`, C.color = this.#I, this.div.append(this.editorDiv), this.overlayDiv = document.createElement("div"), this.overlayDiv.classList.add("overlay", "enabled"), this.div.append(this.overlayDiv), this._isCopy || this.annotationElementId) {
      const [A, l] = this.parentDimensions;
      if (this.annotationElementId) {
        const {
          position: Z
        } = this._initialData;
        let [i, d] = this.getInitialTranslation();
        [i, d] = this.pageTranslationToScreen(i, d);
        const [c, G] = this.pageDimensions, [b, m] = this.pageTranslation;
        let B, o;
        switch (this.rotation) {
          case 0:
            B = I + (Z[0] - b) / c, o = g + this.height - (Z[1] - m) / G;
            break;
          case 90:
            B = I + (Z[0] - b) / c, o = g - (Z[1] - m) / G, [i, d] = [d, -i];
            break;
          case 180:
            B = I - this.width + (Z[0] - b) / c, o = g - (Z[1] - m) / G, [i, d] = [-i, -d];
            break;
          case 270:
            B = I + (Z[0] - b - this.height * G) / c, o = g + (Z[1] - m - this.width * c) / G, [i, d] = [-d, i];
            break;
        }
        this.setAt(B * A, o * l, i, d);
      } else
        this._moveAfterPaste(I, g);
      this.#m(), this._isDraggable = !0, this.editorDiv.contentEditable = !1;
    } else
      this._isDraggable = !1, this.editorDiv.contentEditable = !0;
    return this.div;
  }
  static #s(I) {
    return (I.nodeType === Node.TEXT_NODE ? I.nodeValue : I.innerText).replaceAll($g, "");
  }
  editorDivPaste(I) {
    const g = I.clipboardData || window.clipboardData, {
      types: C
    } = g;
    if (C.length === 1 && C[0] === "text/plain")
      return;
    I.preventDefault();
    const A = aI.#B(g.getData("text") || "").replaceAll($g, `
`);
    if (!A)
      return;
    const l = window.getSelection();
    if (!l.rangeCount)
      return;
    this.editorDiv.normalize(), l.deleteFromDocument();
    const Z = l.getRangeAt(0);
    if (!A.includes(`
`)) {
      Z.insertNode(document.createTextNode(A)), this.editorDiv.normalize(), l.collapseToStart();
      return;
    }
    const {
      startContainer: i,
      startOffset: d
    } = Z, c = [], G = [];
    if (i.nodeType === Node.TEXT_NODE) {
      const B = i.parentElement;
      if (G.push(i.nodeValue.slice(d).replaceAll($g, "")), B !== this.editorDiv) {
        let o = c;
        for (const W of this.editorDiv.childNodes) {
          if (W === B) {
            o = G;
            continue;
          }
          o.push(aI.#s(W));
        }
      }
      c.push(i.nodeValue.slice(0, d).replaceAll($g, ""));
    } else if (i === this.editorDiv) {
      let B = c, o = 0;
      for (const W of this.editorDiv.childNodes)
        o++ === d && (B = G), B.push(aI.#s(W));
    }
    this.#g = `${c.join(`
`)}${A}${G.join(`
`)}`, this.#m();
    const b = new Range();
    let m = Math.sumPrecise(c.map((B) => B.length));
    for (const {
      firstChild: B
    } of this.editorDiv.childNodes)
      if (B.nodeType === Node.TEXT_NODE) {
        const o = B.nodeValue.length;
        if (m <= o) {
          b.setStart(B, m), b.setEnd(B, m);
          break;
        }
        m -= o;
      }
    l.removeAllRanges(), l.addRange(b);
  }
  #m() {
    if (this.editorDiv.replaceChildren(), !!this.#g)
      for (const I of this.#g.split(`
`)) {
        const g = document.createElement("div");
        g.append(I ? document.createTextNode(I) : document.createElement("br")), this.editorDiv.append(g);
      }
  }
  #G() {
    return this.#g.replaceAll(" ", " ");
  }
  static #B(I) {
    return I.replaceAll(" ", " ");
  }
  get contentDiv() {
    return this.editorDiv;
  }
  getPDFRect() {
    const I = aI._internalPadding * this.parentScale;
    return this.getRect(I, I);
  }
  static async deserialize(I, g, C) {
    let A = null;
    if (I instanceof Cl) {
      const {
        data: {
          defaultAppearanceData: {
            fontSize: Z,
            fontColor: i
          },
          rect: d,
          rotation: c,
          id: G,
          popupRef: b,
          contentsObj: m
        },
        textContent: B,
        textPosition: o,
        parent: {
          page: {
            pageNumber: W
          }
        }
      } = I;
      if (!B || B.length === 0)
        return null;
      A = I = {
        annotationType: O.FREETEXT,
        color: Array.from(i),
        fontSize: Z,
        value: B.join(`
`),
        position: o,
        pageIndex: W - 1,
        rect: d.slice(0),
        rotation: c,
        annotationElementId: G,
        id: G,
        deleted: !1,
        popupRef: b,
        comment: m?.str || null
      };
    }
    const l = await super.deserialize(I, g, C);
    return l.#Z = I.fontSize, l.#I = J.makeHexColor(...I.color), l.#g = aI.#B(I.value), l._initialData = A, I.comment && l.setCommentData(I.comment), l;
  }
  serialize(I = !1) {
    if (this.isEmpty())
      return null;
    if (this.deleted)
      return this.serializeDeleted();
    const g = this.getPDFRect(), C = T._colorManager.convert(this.isAttachedToDOM ? getComputedStyle(this.editorDiv).color : this.#I), A = {
      annotationType: O.FREETEXT,
      color: C,
      fontSize: this.#Z,
      value: this.#G(),
      pageIndex: this.pageIndex,
      rect: g,
      rotation: this.rotation,
      structTreeParentId: this._structTreeParentId
    };
    return this.addComment(A), I ? (A.isCopy = !0, A) : this.annotationElementId && !this.#W(A) ? null : (A.id = this.annotationElementId, A);
  }
  #W(I) {
    const {
      value: g,
      fontSize: C,
      color: A,
      pageIndex: l
    } = this._initialData;
    return this.hasEditedComment || this._hasBeenMoved || I.value !== g || I.fontSize !== C || I.color.some((Z, i) => Z !== A[i]) || I.pageIndex !== l;
  }
  renderAnnotationElement(I) {
    const g = super.renderAnnotationElement(I);
    if (!g)
      return null;
    const {
      style: C
    } = g;
    C.fontSize = `calc(${this.#Z}px * var(--total-scale-factor))`, C.color = this.#I, g.replaceChildren();
    for (const l of this.#g.split(`
`)) {
      const Z = document.createElement("div");
      Z.append(l ? document.createTextNode(l) : document.createElement("br")), g.append(Z);
    }
    const A = {
      rect: this.getPDFRect()
    };
    return A.popup = this.hasEditedComment ? this.comment : {
      text: this.#g
    }, I.updateEdited(A), g;
  }
  resetAnnotationElement(I) {
    super.resetAnnotationElement(I), I.resetEdited();
  }
}
class z {
  static PRECISION = 1e-4;
  toSVGPath() {
    II("Abstract method `toSVGPath` must be implemented.");
  }
  get box() {
    II("Abstract getter `box` must be implemented.");
  }
  serialize(I, g) {
    II("Abstract method `serialize` must be implemented.");
  }
  static _rescale(I, g, C, A, l, Z) {
    Z ||= new Float32Array(I.length);
    for (let i = 0, d = I.length; i < d; i += 2)
      Z[i] = g + I[i] * A, Z[i + 1] = C + I[i + 1] * l;
    return Z;
  }
  static _rescaleAndSwap(I, g, C, A, l, Z) {
    Z ||= new Float32Array(I.length);
    for (let i = 0, d = I.length; i < d; i += 2)
      Z[i] = g + I[i + 1] * A, Z[i + 1] = C + I[i] * l;
    return Z;
  }
  static _translate(I, g, C, A) {
    A ||= new Float32Array(I.length);
    for (let l = 0, Z = I.length; l < Z; l += 2)
      A[l] = g + I[l], A[l + 1] = C + I[l + 1];
    return A;
  }
  static svgRound(I) {
    return Math.round(I * 1e4);
  }
  static _normalizePoint(I, g, C, A, l) {
    switch (l) {
      case 90:
        return [1 - g / C, I / A];
      case 180:
        return [1 - I / C, 1 - g / A];
      case 270:
        return [g / C, 1 - I / A];
      default:
        return [I / C, g / A];
    }
  }
  static _normalizePagePoint(I, g, C) {
    switch (C) {
      case 90:
        return [1 - g, I];
      case 180:
        return [1 - I, 1 - g];
      case 270:
        return [g, 1 - I];
      default:
        return [I, g];
    }
  }
  static createBezierPoints(I, g, C, A, l, Z) {
    return [(I + 5 * C) / 6, (g + 5 * A) / 6, (5 * C + l) / 6, (5 * A + Z) / 6, (C + l) / 2, (A + Z) / 2];
  }
}
class dg {
  #I;
  #g = [];
  #C;
  #A;
  #Z = [];
  #l = new Float32Array(18);
  #i;
  #d;
  #c;
  #s;
  #m;
  #G;
  #B = [];
  static #W = 8;
  static #o = 2;
  static #b = dg.#W + dg.#o;
  constructor({
    x: I,
    y: g
  }, C, A, l, Z, i = 0) {
    this.#I = C, this.#G = l * A, this.#A = Z, this.#l.set([NaN, NaN, NaN, NaN, I, g], 6), this.#C = i, this.#s = dg.#W * A, this.#c = dg.#b * A, this.#m = A, this.#B.push(I, g);
  }
  isEmpty() {
    return isNaN(this.#l[8]);
  }
  #h() {
    const I = this.#l.subarray(4, 6), g = this.#l.subarray(16, 18), [C, A, l, Z] = this.#I;
    return [(this.#i + (I[0] - g[0]) / 2 - C) / l, (this.#d + (I[1] - g[1]) / 2 - A) / Z, (this.#i + (g[0] - I[0]) / 2 - C) / l, (this.#d + (g[1] - I[1]) / 2 - A) / Z];
  }
  add({
    x: I,
    y: g
  }) {
    this.#i = I, this.#d = g;
    const [C, A, l, Z] = this.#I;
    let [i, d, c, G] = this.#l.subarray(8, 12);
    const b = I - c, m = g - G, B = Math.hypot(b, m);
    if (B < this.#c)
      return !1;
    const o = B - this.#s, W = o / B, Y = W * b, h = W * m;
    let a = i, w = d;
    i = c, d = G, c += Y, G += h, this.#B?.push(I, g);
    const n = -h / o, V = Y / o, X = n * this.#G, y = V * this.#G;
    return this.#l.set(this.#l.subarray(2, 8), 0), this.#l.set([c + X, G + y], 4), this.#l.set(this.#l.subarray(14, 18), 12), this.#l.set([c - X, G - y], 16), isNaN(this.#l[6]) ? (this.#Z.length === 0 && (this.#l.set([i + X, d + y], 2), this.#Z.push(NaN, NaN, NaN, NaN, (i + X - C) / l, (d + y - A) / Z), this.#l.set([i - X, d - y], 14), this.#g.push(NaN, NaN, NaN, NaN, (i - X - C) / l, (d - y - A) / Z)), this.#l.set([a, w, i, d, c, G], 6), !this.isEmpty()) : (this.#l.set([a, w, i, d, c, G], 6), Math.abs(Math.atan2(w - d, a - i) - Math.atan2(h, Y)) < Math.PI / 2 ? ([i, d, c, G] = this.#l.subarray(2, 6), this.#Z.push(NaN, NaN, NaN, NaN, ((i + c) / 2 - C) / l, ((d + G) / 2 - A) / Z), [i, d, a, w] = this.#l.subarray(14, 18), this.#g.push(NaN, NaN, NaN, NaN, ((a + i) / 2 - C) / l, ((w + d) / 2 - A) / Z), !0) : ([a, w, i, d, c, G] = this.#l.subarray(0, 6), this.#Z.push(((a + 5 * i) / 6 - C) / l, ((w + 5 * d) / 6 - A) / Z, ((5 * i + c) / 6 - C) / l, ((5 * d + G) / 6 - A) / Z, ((i + c) / 2 - C) / l, ((d + G) / 2 - A) / Z), [c, G, i, d, a, w] = this.#l.subarray(12, 18), this.#g.push(((a + 5 * i) / 6 - C) / l, ((w + 5 * d) / 6 - A) / Z, ((5 * i + c) / 6 - C) / l, ((5 * d + G) / 6 - A) / Z, ((i + c) / 2 - C) / l, ((d + G) / 2 - A) / Z), !0));
  }
  toSVGPath() {
    if (this.isEmpty())
      return "";
    const I = this.#Z, g = this.#g;
    if (isNaN(this.#l[6]) && !this.isEmpty())
      return this.#a();
    const C = [];
    C.push(`M${I[4]} ${I[5]}`);
    for (let A = 6; A < I.length; A += 6)
      isNaN(I[A]) ? C.push(`L${I[A + 4]} ${I[A + 5]}`) : C.push(`C${I[A]} ${I[A + 1]} ${I[A + 2]} ${I[A + 3]} ${I[A + 4]} ${I[A + 5]}`);
    this.#X(C);
    for (let A = g.length - 6; A >= 6; A -= 6)
      isNaN(g[A]) ? C.push(`L${g[A + 4]} ${g[A + 5]}`) : C.push(`C${g[A]} ${g[A + 1]} ${g[A + 2]} ${g[A + 3]} ${g[A + 4]} ${g[A + 5]}`);
    return this.#Y(C), C.join(" ");
  }
  #a() {
    const [I, g, C, A] = this.#I, [l, Z, i, d] = this.#h();
    return `M${(this.#l[2] - I) / C} ${(this.#l[3] - g) / A} L${(this.#l[4] - I) / C} ${(this.#l[5] - g) / A} L${l} ${Z} L${i} ${d} L${(this.#l[16] - I) / C} ${(this.#l[17] - g) / A} L${(this.#l[14] - I) / C} ${(this.#l[15] - g) / A} Z`;
  }
  #Y(I) {
    const g = this.#g;
    I.push(`L${g[4]} ${g[5]} Z`);
  }
  #X(I) {
    const [g, C, A, l] = this.#I, Z = this.#l.subarray(4, 6), i = this.#l.subarray(16, 18), [d, c, G, b] = this.#h();
    I.push(`L${(Z[0] - g) / A} ${(Z[1] - C) / l} L${d} ${c} L${G} ${b} L${(i[0] - g) / A} ${(i[1] - C) / l}`);
  }
  newFreeDrawOutline(I, g, C, A, l, Z) {
    return new il(I, g, C, A, l, Z);
  }
  getOutlines() {
    const I = this.#Z, g = this.#g, C = this.#l, [A, l, Z, i] = this.#I, d = new Float32Array((this.#B?.length ?? 0) + 2);
    for (let b = 0, m = d.length - 2; b < m; b += 2)
      d[b] = (this.#B[b] - A) / Z, d[b + 1] = (this.#B[b + 1] - l) / i;
    if (d[d.length - 2] = (this.#i - A) / Z, d[d.length - 1] = (this.#d - l) / i, isNaN(C[6]) && !this.isEmpty())
      return this.#n(d);
    const c = new Float32Array(this.#Z.length + 24 + this.#g.length);
    let G = I.length;
    for (let b = 0; b < G; b += 2) {
      if (isNaN(I[b])) {
        c[b] = c[b + 1] = NaN;
        continue;
      }
      c[b] = I[b], c[b + 1] = I[b + 1];
    }
    G = this.#y(c, G);
    for (let b = g.length - 6; b >= 6; b -= 6)
      for (let m = 0; m < 6; m += 2) {
        if (isNaN(g[b + m])) {
          c[G] = c[G + 1] = NaN, G += 2;
          continue;
        }
        c[G] = g[b + m], c[G + 1] = g[b + m + 1], G += 2;
      }
    return this.#w(c, G), this.newFreeDrawOutline(c, d, this.#I, this.#m, this.#C, this.#A);
  }
  #n(I) {
    const g = this.#l, [C, A, l, Z] = this.#I, [i, d, c, G] = this.#h(), b = new Float32Array(36);
    return b.set([NaN, NaN, NaN, NaN, (g[2] - C) / l, (g[3] - A) / Z, NaN, NaN, NaN, NaN, (g[4] - C) / l, (g[5] - A) / Z, NaN, NaN, NaN, NaN, i, d, NaN, NaN, NaN, NaN, c, G, NaN, NaN, NaN, NaN, (g[16] - C) / l, (g[17] - A) / Z, NaN, NaN, NaN, NaN, (g[14] - C) / l, (g[15] - A) / Z], 0), this.newFreeDrawOutline(b, I, this.#I, this.#m, this.#C, this.#A);
  }
  #w(I, g) {
    const C = this.#g;
    return I.set([NaN, NaN, NaN, NaN, C[4], C[5]], g), g += 6;
  }
  #y(I, g) {
    const C = this.#l.subarray(4, 6), A = this.#l.subarray(16, 18), [l, Z, i, d] = this.#I, [c, G, b, m] = this.#h();
    return I.set([NaN, NaN, NaN, NaN, (C[0] - l) / i, (C[1] - Z) / d, NaN, NaN, NaN, NaN, c, G, NaN, NaN, NaN, NaN, b, m, NaN, NaN, NaN, NaN, (A[0] - l) / i, (A[1] - Z) / d], g), g += 24;
  }
}
class il extends z {
  #I;
  #g = new Float32Array(4);
  #C;
  #A;
  #Z;
  #l;
  #i;
  constructor(I, g, C, A, l, Z) {
    super(), this.#i = I, this.#Z = g, this.#I = C, this.#l = A, this.#C = l, this.#A = Z, this.lastPoint = [NaN, NaN], this.#d(Z);
    const [i, d, c, G] = this.#g;
    for (let b = 0, m = I.length; b < m; b += 2)
      I[b] = (I[b] - i) / c, I[b + 1] = (I[b + 1] - d) / G;
    for (let b = 0, m = g.length; b < m; b += 2)
      g[b] = (g[b] - i) / c, g[b + 1] = (g[b + 1] - d) / G;
  }
  toSVGPath() {
    const I = [`M${this.#i[4]} ${this.#i[5]}`];
    for (let g = 6, C = this.#i.length; g < C; g += 6) {
      if (isNaN(this.#i[g])) {
        I.push(`L${this.#i[g + 4]} ${this.#i[g + 5]}`);
        continue;
      }
      I.push(`C${this.#i[g]} ${this.#i[g + 1]} ${this.#i[g + 2]} ${this.#i[g + 3]} ${this.#i[g + 4]} ${this.#i[g + 5]}`);
    }
    return I.push("Z"), I.join(" ");
  }
  serialize([I, g, C, A], l) {
    const Z = C - I, i = A - g;
    let d, c;
    switch (l) {
      case 0:
        d = z._rescale(this.#i, I, A, Z, -i), c = z._rescale(this.#Z, I, A, Z, -i);
        break;
      case 90:
        d = z._rescaleAndSwap(this.#i, I, g, Z, i), c = z._rescaleAndSwap(this.#Z, I, g, Z, i);
        break;
      case 180:
        d = z._rescale(this.#i, C, g, -Z, i), c = z._rescale(this.#Z, C, g, -Z, i);
        break;
      case 270:
        d = z._rescaleAndSwap(this.#i, C, A, -Z, -i), c = z._rescaleAndSwap(this.#Z, C, A, -Z, -i);
        break;
    }
    return {
      outline: Array.from(d),
      points: [Array.from(c)]
    };
  }
  #d(I) {
    const g = this.#i;
    let C = g[4], A = g[5];
    const l = [C, A, C, A];
    let Z = C, i = A;
    const d = I ? Math.max : Math.min;
    for (let G = 6, b = g.length; G < b; G += 6) {
      const m = g[G + 4], B = g[G + 5];
      if (isNaN(g[G]))
        J.pointBoundingBox(m, B, l), i < B ? (Z = m, i = B) : i === B && (Z = d(Z, m));
      else {
        const o = [1 / 0, 1 / 0, -1 / 0, -1 / 0];
        J.bezierBoundingBox(C, A, ...g.slice(G, G + 6), o), J.rectBoundingBox(...o, l), i < o[3] ? (Z = o[2], i = o[3]) : i === o[3] && (Z = d(Z, o[2]));
      }
      C = m, A = B;
    }
    const c = this.#g;
    c[0] = l[0] - this.#C, c[1] = l[1] - this.#C, c[2] = l[2] - l[0] + 2 * this.#C, c[3] = l[3] - l[1] + 2 * this.#C, this.lastPoint = [Z, i];
  }
  get box() {
    return this.#g;
  }
  newOutliner(I, g, C, A, l, Z = 0) {
    return new dg(I, g, C, A, l, Z);
  }
  getNewOutline(I, g) {
    const [C, A, l, Z] = this.#g, [i, d, c, G] = this.#I, b = l * c, m = Z * G, B = C * c + i, o = A * G + d, W = this.newOutliner({
      x: this.#Z[0] * b + B,
      y: this.#Z[1] * m + o
    }, this.#I, this.#l, I, this.#A, g ?? this.#C);
    for (let Y = 2; Y < this.#Z.length; Y += 2)
      W.add({
        x: this.#Z[Y] * b + B,
        y: this.#Z[Y + 1] * m + o
      });
    return W.getOutlines();
  }
}
class MC {
  #I;
  #g;
  #C = [];
  #A = [];
  constructor(I, g = 0, C = 0, A = !0) {
    const l = [1 / 0, 1 / 0, -1 / 0, -1 / 0], Z = 10 ** -4;
    for (const {
      x: B,
      y: o,
      width: W,
      height: Y
    } of I) {
      const h = Math.floor((B - g) / Z) * Z, a = Math.ceil((B + W + g) / Z) * Z, w = Math.floor((o - g) / Z) * Z, n = Math.ceil((o + Y + g) / Z) * Z, V = [h, w, n, !0], X = [a, w, n, !1];
      this.#C.push(V, X), J.rectBoundingBox(h, w, a, n, l);
    }
    const i = l[2] - l[0] + 2 * C, d = l[3] - l[1] + 2 * C, c = l[0] - C, G = l[1] - C, b = this.#C.at(A ? -1 : -2), m = [b[0], b[2]];
    for (const B of this.#C) {
      const [o, W, Y] = B;
      B[0] = (o - c) / i, B[1] = (W - G) / d, B[2] = (Y - G) / d;
    }
    this.#I = new Float32Array([c, G, i, d]), this.#g = m;
  }
  getOutlines() {
    this.#C.sort((g, C) => g[0] - C[0] || g[1] - C[1] || g[2] - C[2]);
    const I = [];
    for (const g of this.#C)
      g[3] ? (I.push(...this.#c(g)), this.#i(g)) : (this.#d(g), I.push(...this.#c(g)));
    return this.#Z(I);
  }
  #Z(I) {
    const g = [], C = /* @__PURE__ */ new Set();
    for (const Z of I) {
      const [i, d, c] = Z;
      g.push([i, d, Z], [i, c, Z]);
    }
    g.sort((Z, i) => Z[1] - i[1] || Z[0] - i[0]);
    for (let Z = 0, i = g.length; Z < i; Z += 2) {
      const d = g[Z][2], c = g[Z + 1][2];
      d.push(c), c.push(d), C.add(d), C.add(c);
    }
    const A = [];
    let l;
    for (; C.size > 0; ) {
      const Z = C.values().next().value;
      let [i, d, c, G, b] = Z;
      C.delete(Z);
      let m = i, B = d;
      for (l = [i, c], A.push(l); ; ) {
        let o;
        if (C.has(G))
          o = G;
        else if (C.has(b))
          o = b;
        else
          break;
        C.delete(o), [i, d, c, G, b] = o, m !== i && (l.push(m, B, i, B === d ? d : c), m = i), B = B === d ? c : d;
      }
      l.push(m, B);
    }
    return new rZ(A, this.#I, this.#g);
  }
  #l(I) {
    const g = this.#A;
    let C = 0, A = g.length - 1;
    for (; C <= A; ) {
      const l = C + A >> 1, Z = g[l][0];
      if (Z === I)
        return l;
      Z < I ? C = l + 1 : A = l - 1;
    }
    return A + 1;
  }
  #i([, I, g]) {
    const C = this.#l(I);
    this.#A.splice(C, 0, [I, g]);
  }
  #d([, I, g]) {
    const C = this.#l(I);
    for (let A = C; A < this.#A.length; A++) {
      const [l, Z] = this.#A[A];
      if (l !== I)
        break;
      if (l === I && Z === g) {
        this.#A.splice(A, 1);
        return;
      }
    }
    for (let A = C - 1; A >= 0; A--) {
      const [l, Z] = this.#A[A];
      if (l !== I)
        break;
      if (l === I && Z === g) {
        this.#A.splice(A, 1);
        return;
      }
    }
  }
  #c(I) {
    const [g, C, A] = I, l = [[g, C, A]], Z = this.#l(A);
    for (let i = 0; i < Z; i++) {
      const [d, c] = this.#A[i];
      for (let G = 0, b = l.length; G < b; G++) {
        const [, m, B] = l[G];
        if (!(c <= m || B <= d)) {
          if (m >= d) {
            if (B > c)
              l[G][1] = c;
            else {
              if (b === 1)
                return [];
              l.splice(G, 1), G--, b--;
            }
            continue;
          }
          l[G][2] = d, B > c && l.push([g, c, B]);
        }
      }
    }
    return l;
  }
}
class rZ extends z {
  #I;
  #g;
  constructor(I, g, C) {
    super(), this.#g = I, this.#I = g, this.lastPoint = C;
  }
  toSVGPath() {
    const I = [];
    for (const g of this.#g) {
      let [C, A] = g;
      I.push(`M${C} ${A}`);
      for (let l = 2; l < g.length; l += 2) {
        const Z = g[l], i = g[l + 1];
        Z === C ? (I.push(`V${i}`), A = i) : i === A && (I.push(`H${Z}`), C = Z);
      }
      I.push("Z");
    }
    return I.join(" ");
  }
  serialize([I, g, C, A], l) {
    const Z = [], i = C - I, d = A - g;
    for (const c of this.#g) {
      const G = new Array(c.length);
      for (let b = 0; b < c.length; b += 2)
        G[b] = I + c[b] * i, G[b + 1] = A - c[b + 1] * d;
      Z.push(G);
    }
    return Z;
  }
  get box() {
    return this.#I;
  }
  get classNamesForOutlining() {
    return ["highlightOutline"];
  }
}
class KC extends dg {
  newFreeDrawOutline(I, g, C, A, l, Z) {
    return new jZ(I, g, C, A, l, Z);
  }
}
class jZ extends il {
  newOutliner(I, g, C, A, l, Z = 0) {
    return new KC(I, g, C, A, l, Z);
  }
}
class bI extends T {
  #I = null;
  #g = 0;
  #C;
  #A = null;
  #Z = null;
  #l = null;
  #i = null;
  #d = 0;
  #c = null;
  #s = null;
  #m = null;
  #G = !1;
  #B = null;
  #W;
  #o = null;
  #b = "";
  #h;
  #a = "";
  static _defaultColor = null;
  static _defaultOpacity = 1;
  static _defaultThickness = 12;
  static _type = "highlight";
  static _editorType = O.HIGHLIGHT;
  static _freeHighlightId = -1;
  static _freeHighlight = null;
  static _freeHighlightClipId = "";
  static get _keyboardManager() {
    const I = bI.prototype;
    return P(this, "_keyboardManager", new rg([[["ArrowLeft", "mac+ArrowLeft"], I._moveCaret, {
      args: [0]
    }], [["ArrowRight", "mac+ArrowRight"], I._moveCaret, {
      args: [1]
    }], [["ArrowUp", "mac+ArrowUp"], I._moveCaret, {
      args: [2]
    }], [["ArrowDown", "mac+ArrowDown"], I._moveCaret, {
      args: [3]
    }]]));
  }
  constructor(I) {
    super({
      ...I,
      name: "highlightEditor"
    }), this.color = I.color || bI._defaultColor, this.#h = I.thickness || bI._defaultThickness, this.#W = I.opacity || bI._defaultOpacity, this.#C = I.boxes || null, this.#a = I.methodOfCreation || "", this.#b = I.text || "", this._isDraggable = !1, this.defaultL10nId = "pdfjs-editor-highlight-editor", I.highlightId > -1 ? (this.#G = !0, this.#X(I), this.#R()) : this.#C && (this.#I = I.anchorNode, this.#g = I.anchorOffset, this.#i = I.focusNode, this.#d = I.focusOffset, this.#Y(), this.#R(), this.rotate(this.rotation)), this.annotationElementId || this._uiManager.a11yAlert("pdfjs-editor-highlight-added-alert");
  }
  get telemetryInitialData() {
    return {
      action: "added",
      type: this.#G ? "free_highlight" : "highlight",
      color: this._uiManager.getNonHCMColorName(this.color),
      thickness: this.#h,
      methodOfCreation: this.#a
    };
  }
  get telemetryFinalData() {
    return {
      type: "highlight",
      color: this._uiManager.getNonHCMColorName(this.color)
    };
  }
  get commentColor() {
    return this.color;
  }
  static computeTelemetryFinalData(I) {
    return {
      numberOfColors: I.get("color").size
    };
  }
  #Y() {
    const I = new MC(this.#C, 1e-3);
    this.#s = I.getOutlines(), [this.x, this.y, this.width, this.height] = this.#s.box;
    const g = new MC(this.#C, 25e-4, 1e-3, this._uiManager.direction === "ltr");
    this.#l = g.getOutlines();
    const {
      lastPoint: C
    } = this.#l;
    this.#B = [(C[0] - this.x) / this.width, (C[1] - this.y) / this.height];
  }
  #X({
    highlightOutlines: I,
    highlightId: g,
    clipPathId: C
  }) {
    this.#s = I;
    const A = 1.5;
    if (this.#l = I.getNewOutline(this.#h / 2 + A, 25e-4), g >= 0)
      this.#m = g, this.#A = C, this.parent.drawLayer.finalizeDraw(g, {
        bbox: I.box,
        path: {
          d: I.toSVGPath()
        }
      }), this.#o = this.parent.drawLayer.drawOutline({
        rootClass: {
          highlightOutline: !0,
          free: !0
        },
        bbox: this.#l.box,
        path: {
          d: this.#l.toSVGPath()
        }
      }, !0);
    else if (this.parent) {
      const G = this.parent.viewport.rotation;
      this.parent.drawLayer.updateProperties(this.#m, {
        bbox: bI.#N(this.#s.box, (G - this.rotation + 360) % 360),
        path: {
          d: I.toSVGPath()
        }
      }), this.parent.drawLayer.updateProperties(this.#o, {
        bbox: bI.#N(this.#l.box, G),
        path: {
          d: this.#l.toSVGPath()
        }
      });
    }
    const [l, Z, i, d] = I.box;
    switch (this.rotation) {
      case 0:
        this.x = l, this.y = Z, this.width = i, this.height = d;
        break;
      case 90: {
        const [G, b] = this.parentDimensions;
        this.x = Z, this.y = 1 - l, this.width = i * b / G, this.height = d * G / b;
        break;
      }
      case 180:
        this.x = 1 - l, this.y = 1 - Z, this.width = i, this.height = d;
        break;
      case 270: {
        const [G, b] = this.parentDimensions;
        this.x = 1 - Z, this.y = l, this.width = i * b / G, this.height = d * G / b;
        break;
      }
    }
    const {
      lastPoint: c
    } = this.#l;
    this.#B = [(c[0] - l) / i, (c[1] - Z) / d];
  }
  static initialize(I, g) {
    T.initialize(I, g), bI._defaultColor ||= g.highlightColors?.values().next().value || "#fff066";
  }
  static updateDefaultParams(I, g) {
    switch (I) {
      case f.HIGHLIGHT_COLOR:
        bI._defaultColor = g;
        break;
      case f.HIGHLIGHT_THICKNESS:
        bI._defaultThickness = g;
        break;
    }
  }
  translateInPage(I, g) {
  }
  get toolbarPosition() {
    return this.#B;
  }
  updateParams(I, g) {
    switch (I) {
      case f.HIGHLIGHT_COLOR:
        this.#n(g);
        break;
      case f.HIGHLIGHT_THICKNESS:
        this.#w(g);
        break;
    }
  }
  static get defaultPropertiesToUpdate() {
    return [[f.HIGHLIGHT_COLOR, bI._defaultColor], [f.HIGHLIGHT_THICKNESS, bI._defaultThickness]];
  }
  get propertiesToUpdate() {
    return [[f.HIGHLIGHT_COLOR, this.color || bI._defaultColor], [f.HIGHLIGHT_THICKNESS, this.#h || bI._defaultThickness], [f.HIGHLIGHT_FREE, this.#G]];
  }
  #n(I) {
    const g = (l, Z) => {
      this.color = l, this.#W = Z, this.parent?.drawLayer.updateProperties(this.#m, {
        root: {
          fill: l,
          "fill-opacity": Z
        }
      }), this.#Z?.updateColor(l);
    }, C = this.color, A = this.#W;
    this.addCommands({
      cmd: g.bind(this, I, bI._defaultOpacity),
      undo: g.bind(this, C, A),
      post: this._uiManager.updateUI.bind(this._uiManager, this),
      mustExec: !0,
      type: f.HIGHLIGHT_COLOR,
      overwriteIfSameType: !0,
      keepUndo: !0
    }), this._reportTelemetry({
      action: "color_changed",
      color: this._uiManager.getNonHCMColorName(I)
    }, !0);
  }
  #w(I) {
    const g = this.#h, C = (A) => {
      this.#h = A, this.#y(A);
    };
    this.addCommands({
      cmd: C.bind(this, I),
      undo: C.bind(this, g),
      post: this._uiManager.updateUI.bind(this._uiManager, this),
      mustExec: !0,
      type: f.INK_THICKNESS,
      overwriteIfSameType: !0,
      keepUndo: !0
    }), this._reportTelemetry({
      action: "thickness_changed",
      thickness: I
    }, !0);
  }
  get toolbarButtons() {
    return this._uiManager.highlightColors ? [["colorPicker", this.#Z = new pI({
      editor: this
    })]] : super.toolbarButtons;
  }
  disableEditing() {
    super.disableEditing(), this.div.classList.toggle("disabled", !0);
  }
  enableEditing() {
    super.enableEditing(), this.div.classList.toggle("disabled", !1);
  }
  fixAndSetPosition() {
    return super.fixAndSetPosition(this.#u());
  }
  getBaseTranslation() {
    return [0, 0];
  }
  getRect(I, g) {
    return super.getRect(I, g, this.#u());
  }
  onceAdded(I) {
    this.annotationElementId || this.parent.addUndoableEditor(this), I && this.div.focus();
  }
  remove() {
    this.#H(), this._reportTelemetry({
      action: "deleted"
    }), super.remove();
  }
  rebuild() {
    this.parent && (super.rebuild(), this.div !== null && (this.#R(), this.isAttachedToDOM || this.parent.add(this)));
  }
  setParent(I) {
    let g = !1;
    this.parent && !I ? this.#H() : I && (this.#R(I), g = !this.parent && this.div?.classList.contains("selectedEditor")), super.setParent(I), this.show(this._isVisible), g && this.select();
  }
  #y(I) {
    if (!this.#G)
      return;
    this.#X({
      highlightOutlines: this.#s.getNewOutline(I / 2)
    }), this.fixAndSetPosition();
    const [g, C] = this.parentDimensions;
    this.setDims(this.width * g, this.height * C);
  }
  #H() {
    this.#m === null || !this.parent || (this.parent.drawLayer.remove(this.#m), this.#m = null, this.parent.drawLayer.remove(this.#o), this.#o = null);
  }
  #R(I = this.parent) {
    this.#m === null && ({
      id: this.#m,
      clipPathId: this.#A
    } = I.drawLayer.draw({
      bbox: this.#s.box,
      root: {
        viewBox: "0 0 1 1",
        fill: this.color,
        "fill-opacity": this.#W
      },
      rootClass: {
        highlight: !0,
        free: this.#G
      },
      path: {
        d: this.#s.toSVGPath()
      }
    }, !1, !0), this.#o = I.drawLayer.drawOutline({
      rootClass: {
        highlightOutline: !0,
        free: this.#G
      },
      bbox: this.#l.box,
      path: {
        d: this.#l.toSVGPath()
      }
    }, this.#G), this.#c && (this.#c.style.clipPath = this.#A));
  }
  static #N([I, g, C, A], l) {
    switch (l) {
      case 90:
        return [1 - g - A, I, A, C];
      case 180:
        return [1 - I - C, 1 - g - A, C, A];
      case 270:
        return [g, 1 - I - C, A, C];
    }
    return [I, g, C, A];
  }
  rotate(I) {
    const {
      drawLayer: g
    } = this.parent;
    let C;
    this.#G ? (I = (I - this.rotation + 360) % 360, C = bI.#N(this.#s.box, I)) : C = bI.#N([this.x, this.y, this.width, this.height], I), g.updateProperties(this.#m, {
      bbox: C,
      root: {
        "data-main-rotation": I
      }
    }), g.updateProperties(this.#o, {
      bbox: bI.#N(this.#l.box, I),
      root: {
        "data-main-rotation": I
      }
    });
  }
  render() {
    if (this.div)
      return this.div;
    const I = super.render();
    this.#b && (I.setAttribute("aria-label", this.#b), I.setAttribute("role", "mark")), this.#G ? I.classList.add("free") : this.div.addEventListener("keydown", this.#D.bind(this), {
      signal: this._uiManager._signal
    });
    const g = this.#c = document.createElement("div");
    I.append(g), g.setAttribute("aria-hidden", "true"), g.className = "internal", g.style.clipPath = this.#A;
    const [C, A] = this.parentDimensions;
    return this.setDims(this.width * C, this.height * A), FA(this, this.#c, ["pointerover", "pointerleave"]), this.enableEditing(), I;
  }
  pointerover() {
    this.isSelected || this.parent?.drawLayer.updateProperties(this.#o, {
      rootClass: {
        hovered: !0
      }
    });
  }
  pointerleave() {
    this.isSelected || this.parent?.drawLayer.updateProperties(this.#o, {
      rootClass: {
        hovered: !1
      }
    });
  }
  #D(I) {
    bI._keyboardManager.exec(this, I);
  }
  _moveCaret(I) {
    switch (this.parent.unselect(this), I) {
      case 0:
      case 2:
        this.#e(!0);
        break;
      case 1:
      case 3:
        this.#e(!1);
        break;
    }
  }
  #e(I) {
    if (!this.#I)
      return;
    const g = window.getSelection();
    I ? g.setPosition(this.#I, this.#g) : g.setPosition(this.#i, this.#d);
  }
  select() {
    super.select(), this.#o && this.parent?.drawLayer.updateProperties(this.#o, {
      rootClass: {
        hovered: !1,
        selected: !0
      }
    });
  }
  unselect() {
    super.unselect(), this.#o && (this.parent?.drawLayer.updateProperties(this.#o, {
      rootClass: {
        selected: !1
      }
    }), this.#G || this.#e(!1));
  }
  get _mustFixPosition() {
    return !this.#G;
  }
  show(I = this._isVisible) {
    super.show(I), this.parent && (this.parent.drawLayer.updateProperties(this.#m, {
      rootClass: {
        hidden: !I
      }
    }), this.parent.drawLayer.updateProperties(this.#o, {
      rootClass: {
        hidden: !I
      }
    }));
  }
  #u() {
    return this.#G ? this.rotation : 0;
  }
  #F() {
    if (this.#G)
      return null;
    const [I, g] = this.pageDimensions, [C, A] = this.pageTranslation, l = this.#C, Z = new Float32Array(l.length * 8);
    let i = 0;
    for (const {
      x: d,
      y: c,
      width: G,
      height: b
    } of l) {
      const m = d * I + C, B = (1 - c) * g + A;
      Z[i] = Z[i + 4] = m, Z[i + 1] = Z[i + 3] = B, Z[i + 2] = Z[i + 6] = m + G * I, Z[i + 5] = Z[i + 7] = B - b * g, i += 8;
    }
    return Z;
  }
  #S(I) {
    return this.#s.serialize(I, this.#u());
  }
  static startHighlighting(I, g, {
    target: C,
    x: A,
    y: l
  }) {
    const {
      x: Z,
      y: i,
      width: d,
      height: c
    } = C.getBoundingClientRect(), G = new AbortController(), b = I.combinedSignal(G), m = (B) => {
      G.abort(), this.#J(I, B);
    };
    window.addEventListener("blur", m, {
      signal: b
    }), window.addEventListener("pointerup", m, {
      signal: b
    }), window.addEventListener("pointerdown", mI, {
      capture: !0,
      passive: !1,
      signal: b
    }), window.addEventListener("contextmenu", JI, {
      signal: b
    }), C.addEventListener("pointermove", this.#p.bind(this, I), {
      signal: b
    }), this._freeHighlight = new KC({
      x: A,
      y: l
    }, [Z, i, d, c], I.scale, this._defaultThickness / 2, g, 1e-3), {
      id: this._freeHighlightId,
      clipPathId: this._freeHighlightClipId
    } = I.drawLayer.draw({
      bbox: [0, 0, 1, 1],
      root: {
        viewBox: "0 0 1 1",
        fill: this._defaultColor,
        "fill-opacity": this._defaultOpacity
      },
      rootClass: {
        highlight: !0,
        free: !0
      },
      path: {
        d: this._freeHighlight.toSVGPath()
      }
    }, !0, !0);
  }
  static #p(I, g) {
    this._freeHighlight.add(g) && I.drawLayer.updateProperties(this._freeHighlightId, {
      path: {
        d: this._freeHighlight.toSVGPath()
      }
    });
  }
  static #J(I, g) {
    this._freeHighlight.isEmpty() ? I.drawLayer.remove(this._freeHighlightId) : I.createAndAddNewEditor(g, !1, {
      highlightId: this._freeHighlightId,
      highlightOutlines: this._freeHighlight.getOutlines(),
      clipPathId: this._freeHighlightClipId,
      methodOfCreation: "main_toolbar"
    }), this._freeHighlightId = -1, this._freeHighlight = null, this._freeHighlightClipId = "";
  }
  static async deserialize(I, g, C) {
    let A = null;
    if (I instanceof ll) {
      const {
        data: {
          quadPoints: o,
          rect: W,
          rotation: Y,
          id: h,
          color: a,
          opacity: w,
          popupRef: n,
          contentsObj: V
        },
        parent: {
          page: {
            pageNumber: X
          }
        }
      } = I;
      A = I = {
        annotationType: O.HIGHLIGHT,
        color: Array.from(a),
        opacity: w,
        quadPoints: o,
        boxes: null,
        pageIndex: X - 1,
        rect: W.slice(0),
        rotation: Y,
        annotationElementId: h,
        id: h,
        deleted: !1,
        popupRef: n,
        comment: V?.str || null
      };
    } else if (I instanceof EC) {
      const {
        data: {
          inkLists: o,
          rect: W,
          rotation: Y,
          id: h,
          color: a,
          borderStyle: {
            rawWidth: w
          },
          popupRef: n,
          contentsObj: V
        },
        parent: {
          page: {
            pageNumber: X
          }
        }
      } = I;
      A = I = {
        annotationType: O.HIGHLIGHT,
        color: Array.from(a),
        thickness: w,
        inkLists: o,
        boxes: null,
        pageIndex: X - 1,
        rect: W.slice(0),
        rotation: Y,
        annotationElementId: h,
        id: h,
        deleted: !1,
        popupRef: n,
        comment: V?.str || null
      };
    }
    const {
      color: l,
      quadPoints: Z,
      inkLists: i,
      opacity: d
    } = I, c = await super.deserialize(I, g, C);
    c.color = J.makeHexColor(...l), c.#W = d || 1, i && (c.#h = I.thickness), c._initialData = A, I.comment && c.setCommentData(I.comment);
    const [G, b] = c.pageDimensions, [m, B] = c.pageTranslation;
    if (Z) {
      const o = c.#C = [];
      for (let W = 0; W < Z.length; W += 8)
        o.push({
          x: (Z[W] - m) / G,
          y: 1 - (Z[W + 1] - B) / b,
          width: (Z[W + 2] - Z[W]) / G,
          height: (Z[W + 1] - Z[W + 5]) / b
        });
      c.#Y(), c.#R(), c.rotate(c.rotation);
    } else if (i) {
      c.#G = !0;
      const o = i[0], W = {
        x: o[0] - m,
        y: b - (o[1] - B)
      }, Y = new KC(W, [0, 0, G, b], 1, c.#h / 2, !0, 1e-3);
      for (let w = 0, n = o.length; w < n; w += 2)
        W.x = o[w] - m, W.y = b - (o[w + 1] - B), Y.add(W);
      const {
        id: h,
        clipPathId: a
      } = g.drawLayer.draw({
        bbox: [0, 0, 1, 1],
        root: {
          viewBox: "0 0 1 1",
          fill: c.color,
          "fill-opacity": c._defaultOpacity
        },
        rootClass: {
          highlight: !0,
          free: !0
        },
        path: {
          d: Y.toSVGPath()
        }
      }, !0, !0);
      c.#X({
        highlightOutlines: Y.getOutlines(),
        highlightId: h,
        clipPathId: a
      }), c.#R(), c.rotate(c.parentRotation);
    }
    return c;
  }
  serialize(I = !1) {
    if (this.isEmpty() || I)
      return null;
    if (this.deleted)
      return this.serializeDeleted();
    const g = this.getPDFRect(), C = T._colorManager.convert(this._uiManager.getNonHCMColor(this.color)), A = {
      annotationType: O.HIGHLIGHT,
      color: C,
      opacity: this.#W,
      thickness: this.#h,
      quadPoints: this.#F(),
      outlines: this.#S(g),
      pageIndex: this.pageIndex,
      rect: g,
      rotation: this.#u(),
      structTreeParentId: this._structTreeParentId
    };
    return this.addComment(A), this.annotationElementId && !this.#K(A) ? null : (A.id = this.annotationElementId, A);
  }
  #K(I) {
    const {
      color: g
    } = this._initialData;
    return this.hasEditedComment || I.color.some((C, A) => C !== g[A]);
  }
  renderAnnotationElement(I) {
    if (this.deleted)
      return I.hide(), null;
    const g = {
      rect: this.getPDFRect()
    };
    return this.hasEditedComment && (g.popup = this.comment), I.updateEdited(g), null;
  }
  static canCreateNewEmptyEditor() {
    return !1;
  }
}
class dl {
  #I = /* @__PURE__ */ Object.create(null);
  updateProperty(I, g) {
    this[I] = g, this.updateSVGProperty(I, g);
  }
  updateProperties(I) {
    if (I)
      for (const [g, C] of Object.entries(I))
        g.startsWith("_") || this.updateProperty(g, C);
  }
  updateSVGProperty(I, g) {
    this.#I[I] = g;
  }
  toSVGProperties() {
    const I = this.#I;
    return this.#I = /* @__PURE__ */ Object.create(null), {
      root: I
    };
  }
  reset() {
    this.#I = /* @__PURE__ */ Object.create(null);
  }
  updateAll(I = this) {
    this.updateProperties(I);
  }
  clone() {
    II("Not implemented");
  }
}
class r extends T {
  #I = null;
  #g;
  _colorPicker = null;
  _drawId = null;
  static _currentDrawId = -1;
  static _currentParent = null;
  static #C = null;
  static #A = null;
  static #Z = null;
  static #l = NaN;
  static #i = null;
  static #d = null;
  static #c = NaN;
  static _INNER_MARGIN = 3;
  constructor(I) {
    super(I), this.#g = I.mustBeCommitted || !1, this._addOutlines(I);
  }
  _addOutlines(I) {
    I.drawOutlines && (this.#s(I), this.#B());
  }
  #s({
    drawOutlines: I,
    drawId: g,
    drawingOptions: C
  }) {
    this.#I = I, this._drawingOptions ||= C, this.annotationElementId || this._uiManager.a11yAlert(`pdfjs-editor-${this.editorType}-added-alert`), g >= 0 ? (this._drawId = g, this.parent.drawLayer.finalizeDraw(g, I.defaultProperties)) : this._drawId = this.#m(I, this.parent), this.#b(I.box);
  }
  #m(I, g) {
    const {
      id: C
    } = g.drawLayer.draw(r._mergeSVGProperties(this._drawingOptions.toSVGProperties(), I.defaultSVGProperties), !1, !1);
    return C;
  }
  static _mergeSVGProperties(I, g) {
    const C = new Set(Object.keys(I));
    for (const [A, l] of Object.entries(g))
      C.has(A) ? Object.assign(I[A], l) : I[A] = l;
    return I;
  }
  static getDefaultDrawingOptions(I) {
    II("Not implemented");
  }
  static get typesMap() {
    II("Not implemented");
  }
  static get isDrawer() {
    return !0;
  }
  static get supportMultipleDrawings() {
    return !1;
  }
  static updateDefaultParams(I, g) {
    const C = this.typesMap.get(I);
    C && this._defaultDrawingOptions.updateProperty(C, g), this._currentParent && (r.#C.updateProperty(C, g), this._currentParent.drawLayer.updateProperties(this._currentDrawId, this._defaultDrawingOptions.toSVGProperties()));
  }
  updateParams(I, g) {
    const C = this.constructor.typesMap.get(I);
    C && this._updateProperty(I, C, g);
  }
  static get defaultPropertiesToUpdate() {
    const I = [], g = this._defaultDrawingOptions;
    for (const [C, A] of this.typesMap)
      I.push([C, g[A]]);
    return I;
  }
  get propertiesToUpdate() {
    const I = [], {
      _drawingOptions: g
    } = this;
    for (const [C, A] of this.constructor.typesMap)
      I.push([C, g[A]]);
    return I;
  }
  _updateProperty(I, g, C) {
    const A = this._drawingOptions, l = A[g], Z = (i) => {
      A.updateProperty(g, i);
      const d = this.#I.updateProperty(g, i);
      d && this.#b(d), this.parent?.drawLayer.updateProperties(this._drawId, A.toSVGProperties()), I === this.colorType && this._colorPicker?.update(i);
    };
    this.addCommands({
      cmd: Z.bind(this, C),
      undo: Z.bind(this, l),
      post: this._uiManager.updateUI.bind(this._uiManager, this),
      mustExec: !0,
      type: I,
      overwriteIfSameType: !0,
      keepUndo: !0
    });
  }
  _onResizing() {
    this.parent?.drawLayer.updateProperties(this._drawId, r._mergeSVGProperties(this.#I.getPathResizingSVGProperties(this.#o()), {
      bbox: this.#h()
    }));
  }
  _onResized() {
    this.parent?.drawLayer.updateProperties(this._drawId, r._mergeSVGProperties(this.#I.getPathResizedSVGProperties(this.#o()), {
      bbox: this.#h()
    }));
  }
  _onTranslating(I, g) {
    this.parent?.drawLayer.updateProperties(this._drawId, {
      bbox: this.#h()
    });
  }
  _onTranslated() {
    this.parent?.drawLayer.updateProperties(this._drawId, r._mergeSVGProperties(this.#I.getPathTranslatedSVGProperties(this.#o(), this.parentDimensions), {
      bbox: this.#h()
    }));
  }
  _onStartDragging() {
    this.parent?.drawLayer.updateProperties(this._drawId, {
      rootClass: {
        moving: !0
      }
    });
  }
  _onStopDragging() {
    this.parent?.drawLayer.updateProperties(this._drawId, {
      rootClass: {
        moving: !1
      }
    });
  }
  commit() {
    super.commit(), this.disableEditMode(), this.disableEditing();
  }
  disableEditing() {
    super.disableEditing(), this.div.classList.toggle("disabled", !0);
  }
  enableEditing() {
    super.enableEditing(), this.div.classList.toggle("disabled", !1);
  }
  getBaseTranslation() {
    return [0, 0];
  }
  get isResizable() {
    return !0;
  }
  onceAdded(I) {
    this.annotationElementId || this.parent.addUndoableEditor(this), this._isDraggable = !0, this.#g && (this.#g = !1, this.commit(), this.parent.setSelected(this), I && this.isOnScreen && this.div.focus());
  }
  remove() {
    this.#G(), super.remove();
  }
  rebuild() {
    this.parent && (super.rebuild(), this.div !== null && (this.#B(), this.#b(this.#I.box), this.isAttachedToDOM || this.parent.add(this)));
  }
  setParent(I) {
    let g = !1;
    this.parent && !I ? (this._uiManager.removeShouldRescale(this), this.#G()) : I && (this._uiManager.addShouldRescale(this), this.#B(I), g = !this.parent && this.div?.classList.contains("selectedEditor")), super.setParent(I), g && this.select();
  }
  #G() {
    this._drawId === null || !this.parent || (this.parent.drawLayer.remove(this._drawId), this._drawId = null, this._drawingOptions.reset());
  }
  #B(I = this.parent) {
    if (!(this._drawId !== null && this.parent === I)) {
      if (this._drawId !== null) {
        this.parent.drawLayer.updateParent(this._drawId, I.drawLayer);
        return;
      }
      this._drawingOptions.updateAll(), this._drawId = this.#m(this.#I, I);
    }
  }
  #W([I, g, C, A]) {
    const {
      parentDimensions: [l, Z],
      rotation: i
    } = this;
    switch (i) {
      case 90:
        return [g, 1 - I, C * (Z / l), A * (l / Z)];
      case 180:
        return [1 - I, 1 - g, C, A];
      case 270:
        return [1 - g, I, C * (Z / l), A * (l / Z)];
      default:
        return [I, g, C, A];
    }
  }
  #o() {
    const {
      x: I,
      y: g,
      width: C,
      height: A,
      parentDimensions: [l, Z],
      rotation: i
    } = this;
    switch (i) {
      case 90:
        return [1 - g, I, C * (l / Z), A * (Z / l)];
      case 180:
        return [1 - I, 1 - g, C, A];
      case 270:
        return [g, 1 - I, C * (l / Z), A * (Z / l)];
      default:
        return [I, g, C, A];
    }
  }
  #b(I) {
    if ([this.x, this.y, this.width, this.height] = this.#W(I), this.div) {
      this.fixAndSetPosition();
      const [g, C] = this.parentDimensions;
      this.setDims(this.width * g, this.height * C);
    }
    this._onResized();
  }
  #h() {
    const {
      x: I,
      y: g,
      width: C,
      height: A,
      rotation: l,
      parentRotation: Z,
      parentDimensions: [i, d]
    } = this;
    switch ((l * 4 + Z) / 90) {
      case 1:
        return [1 - g - A, I, A, C];
      case 2:
        return [1 - I - C, 1 - g - A, C, A];
      case 3:
        return [g, 1 - I - C, A, C];
      case 4:
        return [I, g - C * (i / d), A * (d / i), C * (i / d)];
      case 5:
        return [1 - g, I, C * (i / d), A * (d / i)];
      case 6:
        return [1 - I - A * (d / i), 1 - g, A * (d / i), C * (i / d)];
      case 7:
        return [g - C * (i / d), 1 - I - A * (d / i), C * (i / d), A * (d / i)];
      case 8:
        return [I - C, g - A, C, A];
      case 9:
        return [1 - g, I - C, A, C];
      case 10:
        return [1 - I, 1 - g, C, A];
      case 11:
        return [g - A, 1 - I, A, C];
      case 12:
        return [I - A * (d / i), g, A * (d / i), C * (i / d)];
      case 13:
        return [1 - g - C * (i / d), I - A * (d / i), C * (i / d), A * (d / i)];
      case 14:
        return [1 - I, 1 - g - C * (i / d), A * (d / i), C * (i / d)];
      case 15:
        return [g, 1 - I, C * (i / d), A * (d / i)];
      default:
        return [I, g, C, A];
    }
  }
  rotate() {
    this.parent && this.parent.drawLayer.updateProperties(this._drawId, r._mergeSVGProperties({
      bbox: this.#h()
    }, this.#I.updateRotation((this.parentRotation - this.rotation + 360) % 360)));
  }
  onScaleChanging() {
    this.parent && this.#b(this.#I.updateParentDimensions(this.parentDimensions, this.parent.scale));
  }
  static onScaleChangingWhenDrawing() {
  }
  render() {
    if (this.div)
      return this.div;
    let I, g;
    this._isCopy && (I = this.x, g = this.y);
    const C = super.render();
    C.classList.add("draw");
    const A = document.createElement("div");
    C.append(A), A.setAttribute("aria-hidden", "true"), A.className = "internal";
    const [l, Z] = this.parentDimensions;
    return this.setDims(this.width * l, this.height * Z), this._uiManager.addShouldRescale(this), this.disableEditing(), this._isCopy && this._moveAfterPaste(I, g), C;
  }
  static createDrawerInstance(I, g, C, A, l) {
    II("Not implemented");
  }
  static startDrawing(I, g, C, A) {
    const {
      target: l,
      offsetX: Z,
      offsetY: i,
      pointerId: d,
      pointerType: c
    } = A;
    if (r.#i && r.#i !== c)
      return;
    const {
      viewport: {
        rotation: G
      }
    } = I, {
      width: b,
      height: m
    } = l.getBoundingClientRect(), B = r.#A = new AbortController(), o = I.combinedSignal(B);
    if (r.#l ||= d, r.#i ??= c, window.addEventListener("pointerup", (W) => {
      r.#l === W.pointerId ? this._endDraw(W) : r.#d?.delete(W.pointerId);
    }, {
      signal: o
    }), window.addEventListener("pointercancel", (W) => {
      r.#l === W.pointerId ? this._currentParent.endDrawingSession() : r.#d?.delete(W.pointerId);
    }, {
      signal: o
    }), window.addEventListener("pointerdown", (W) => {
      r.#i === W.pointerType && ((r.#d ||= /* @__PURE__ */ new Set()).add(W.pointerId), r.#C.isCancellable() && (r.#C.removeLastElement(), r.#C.isEmpty() ? this._currentParent.endDrawingSession(!0) : this._endDraw(null)));
    }, {
      capture: !0,
      passive: !1,
      signal: o
    }), window.addEventListener("contextmenu", JI, {
      signal: o
    }), l.addEventListener("pointermove", this._drawMove.bind(this), {
      signal: o
    }), l.addEventListener("touchmove", (W) => {
      W.timeStamp === r.#c && mI(W);
    }, {
      signal: o
    }), I.toggleDrawing(), g._editorUndoBar?.hide(), r.#C) {
      I.drawLayer.updateProperties(this._currentDrawId, r.#C.startNew(Z, i, b, m, G));
      return;
    }
    g.updateUIForDefaultProperties(this), r.#C = this.createDrawerInstance(Z, i, b, m, G), r.#Z = this.getDefaultDrawingOptions(), this._currentParent = I, {
      id: this._currentDrawId
    } = I.drawLayer.draw(this._mergeSVGProperties(r.#Z.toSVGProperties(), r.#C.defaultSVGProperties), !0, !1);
  }
  static _drawMove(I) {
    if (r.#c = -1, !r.#C)
      return;
    const {
      offsetX: g,
      offsetY: C,
      pointerId: A
    } = I;
    if (r.#l === A) {
      if (r.#d?.size >= 1) {
        this._endDraw(I);
        return;
      }
      this._currentParent.drawLayer.updateProperties(this._currentDrawId, r.#C.add(g, C)), r.#c = I.timeStamp, mI(I);
    }
  }
  static _cleanup(I) {
    I && (this._currentDrawId = -1, this._currentParent = null, r.#C = null, r.#Z = null, r.#i = null, r.#c = NaN), r.#A && (r.#A.abort(), r.#A = null, r.#l = NaN, r.#d = null);
  }
  static _endDraw(I) {
    const g = this._currentParent;
    if (g) {
      if (g.toggleDrawing(!0), this._cleanup(!1), I?.target === g.div && g.drawLayer.updateProperties(this._currentDrawId, r.#C.end(I.offsetX, I.offsetY)), this.supportMultipleDrawings) {
        const C = r.#C, A = this._currentDrawId, l = C.getLastElement();
        g.addCommands({
          cmd: () => {
            g.drawLayer.updateProperties(A, C.setLastElement(l));
          },
          undo: () => {
            g.drawLayer.updateProperties(A, C.removeLastElement());
          },
          mustExec: !1,
          type: f.DRAW_STEP
        });
        return;
      }
      this.endDrawing(!1);
    }
  }
  static endDrawing(I) {
    const g = this._currentParent;
    if (!g)
      return null;
    if (g.toggleDrawing(!0), g.cleanUndoStack(f.DRAW_STEP), !r.#C.isEmpty()) {
      const {
        pageDimensions: [C, A],
        scale: l
      } = g, Z = g.createAndAddNewEditor({
        offsetX: 0,
        offsetY: 0
      }, !1, {
        drawId: this._currentDrawId,
        drawOutlines: r.#C.getOutlines(C * l, A * l, l, this._INNER_MARGIN),
        drawingOptions: r.#Z,
        mustBeCommitted: !I
      });
      return this._cleanup(!0), Z;
    }
    return g.drawLayer.remove(this._currentDrawId), this._cleanup(!0), null;
  }
  createDrawingOptions(I) {
  }
  static deserializeDraw(I, g, C, A, l, Z) {
    II("Not implemented");
  }
  static async deserialize(I, g, C) {
    const {
      rawDims: {
        pageWidth: A,
        pageHeight: l,
        pageX: Z,
        pageY: i
      }
    } = g.viewport, d = this.deserializeDraw(Z, i, A, l, this._INNER_MARGIN, I), c = await super.deserialize(I, g, C);
    return c.createDrawingOptions(I), c.#s({
      drawOutlines: d
    }), c.#B(), c.onScaleChanging(), c.rotate(), c;
  }
  serializeDraw(I) {
    const [g, C] = this.pageTranslation, [A, l] = this.pageDimensions;
    return this.#I.serialize([g, C, A, l], I);
  }
  renderAnnotationElement(I) {
    return I.updateEdited({
      rect: this.getPDFRect()
    }), null;
  }
  static canCreateNewEmptyEditor() {
    return !1;
  }
}
class OZ {
  #I = new Float64Array(6);
  #g;
  #C;
  #A;
  #Z;
  #l;
  #i = "";
  #d = 0;
  #c = new Ug();
  #s;
  #m;
  constructor(I, g, C, A, l, Z) {
    this.#s = C, this.#m = A, this.#A = l, this.#Z = Z, [I, g] = this.#G(I, g);
    const i = this.#g = [NaN, NaN, NaN, NaN, I, g];
    this.#l = [I, g], this.#C = [{
      line: i,
      points: this.#l
    }], this.#I.set(i, 0);
  }
  updateProperty(I, g) {
    I === "stroke-width" && (this.#Z = g);
  }
  #G(I, g) {
    return z._normalizePoint(I, g, this.#s, this.#m, this.#A);
  }
  isEmpty() {
    return !this.#C || this.#C.length === 0;
  }
  isCancellable() {
    return this.#l.length <= 10;
  }
  add(I, g) {
    [I, g] = this.#G(I, g);
    const [C, A, l, Z] = this.#I.subarray(2, 6), i = I - l, d = g - Z;
    return Math.hypot(this.#s * i, this.#m * d) <= 2 ? null : (this.#l.push(I, g), isNaN(C) ? (this.#I.set([l, Z, I, g], 2), this.#g.push(NaN, NaN, NaN, NaN, I, g), {
      path: {
        d: this.toSVGPath()
      }
    }) : (isNaN(this.#I[0]) && this.#g.splice(6, 6), this.#I.set([C, A, l, Z, I, g], 0), this.#g.push(...z.createBezierPoints(C, A, l, Z, I, g)), {
      path: {
        d: this.toSVGPath()
      }
    }));
  }
  end(I, g) {
    const C = this.add(I, g);
    return C || (this.#l.length === 2 ? {
      path: {
        d: this.toSVGPath()
      }
    } : null);
  }
  startNew(I, g, C, A, l) {
    this.#s = C, this.#m = A, this.#A = l, [I, g] = this.#G(I, g);
    const Z = this.#g = [NaN, NaN, NaN, NaN, I, g];
    this.#l = [I, g];
    const i = this.#C.at(-1);
    return i && (i.line = new Float32Array(i.line), i.points = new Float32Array(i.points)), this.#C.push({
      line: Z,
      points: this.#l
    }), this.#I.set(Z, 0), this.#d = 0, this.toSVGPath(), null;
  }
  getLastElement() {
    return this.#C.at(-1);
  }
  setLastElement(I) {
    return this.#C ? (this.#C.push(I), this.#g = I.line, this.#l = I.points, this.#d = 0, {
      path: {
        d: this.toSVGPath()
      }
    }) : this.#c.setLastElement(I);
  }
  removeLastElement() {
    if (!this.#C)
      return this.#c.removeLastElement();
    this.#C.pop(), this.#i = "";
    for (let I = 0, g = this.#C.length; I < g; I++) {
      const {
        line: C,
        points: A
      } = this.#C[I];
      this.#g = C, this.#l = A, this.#d = 0, this.toSVGPath();
    }
    return {
      path: {
        d: this.#i
      }
    };
  }
  toSVGPath() {
    const I = z.svgRound(this.#g[4]), g = z.svgRound(this.#g[5]);
    if (this.#l.length === 2)
      return this.#i = `${this.#i} M ${I} ${g} Z`, this.#i;
    if (this.#l.length <= 6) {
      const A = this.#i.lastIndexOf("M");
      this.#i = `${this.#i.slice(0, A)} M ${I} ${g}`, this.#d = 6;
    }
    if (this.#l.length === 4) {
      const A = z.svgRound(this.#g[10]), l = z.svgRound(this.#g[11]);
      return this.#i = `${this.#i} L ${A} ${l}`, this.#d = 12, this.#i;
    }
    const C = [];
    this.#d === 0 && (C.push(`M ${I} ${g}`), this.#d = 6);
    for (let A = this.#d, l = this.#g.length; A < l; A += 6) {
      const [Z, i, d, c, G, b] = this.#g.slice(A, A + 6).map(z.svgRound);
      C.push(`C${Z} ${i} ${d} ${c} ${G} ${b}`);
    }
    return this.#i += C.join(" "), this.#d = this.#g.length, this.#i;
  }
  getOutlines(I, g, C, A) {
    const l = this.#C.at(-1);
    return l.line = new Float32Array(l.line), l.points = new Float32Array(l.points), this.#c.build(this.#C, I, g, C, this.#A, this.#Z, A), this.#I = null, this.#g = null, this.#C = null, this.#i = null, this.#c;
  }
  get defaultSVGProperties() {
    return {
      root: {
        viewBox: "0 0 10000 10000"
      },
      rootClass: {
        draw: !0
      },
      bbox: [0, 0, 1, 1]
    };
  }
}
class Ug extends z {
  #I;
  #g = 0;
  #C;
  #A;
  #Z;
  #l;
  #i;
  #d;
  #c;
  build(I, g, C, A, l, Z, i) {
    this.#Z = g, this.#l = C, this.#i = A, this.#d = l, this.#c = Z, this.#C = i ?? 0, this.#A = I, this.#G();
  }
  get thickness() {
    return this.#c;
  }
  setLastElement(I) {
    return this.#A.push(I), {
      path: {
        d: this.toSVGPath()
      }
    };
  }
  removeLastElement() {
    return this.#A.pop(), {
      path: {
        d: this.toSVGPath()
      }
    };
  }
  toSVGPath() {
    const I = [];
    for (const {
      line: g
    } of this.#A) {
      if (I.push(`M${z.svgRound(g[4])} ${z.svgRound(g[5])}`), g.length === 6) {
        I.push("Z");
        continue;
      }
      if (g.length === 12 && isNaN(g[6])) {
        I.push(`L${z.svgRound(g[10])} ${z.svgRound(g[11])}`);
        continue;
      }
      for (let C = 6, A = g.length; C < A; C += 6) {
        const [l, Z, i, d, c, G] = g.subarray(C, C + 6).map(z.svgRound);
        I.push(`C${l} ${Z} ${i} ${d} ${c} ${G}`);
      }
    }
    return I.join("");
  }
  serialize([I, g, C, A], l) {
    const Z = [], i = [], [d, c, G, b] = this.#m();
    let m, B, o, W, Y, h, a, w, n;
    switch (this.#d) {
      case 0:
        n = z._rescale, m = I, B = g + A, o = C, W = -A, Y = I + d * C, h = g + (1 - c - b) * A, a = I + (d + G) * C, w = g + (1 - c) * A;
        break;
      case 90:
        n = z._rescaleAndSwap, m = I, B = g, o = C, W = A, Y = I + c * C, h = g + d * A, a = I + (c + b) * C, w = g + (d + G) * A;
        break;
      case 180:
        n = z._rescale, m = I + C, B = g, o = -C, W = A, Y = I + (1 - d - G) * C, h = g + c * A, a = I + (1 - d) * C, w = g + (c + b) * A;
        break;
      case 270:
        n = z._rescaleAndSwap, m = I + C, B = g + A, o = -C, W = -A, Y = I + (1 - c - b) * C, h = g + (1 - d - G) * A, a = I + (1 - c) * C, w = g + (1 - d) * A;
        break;
    }
    for (const {
      line: V,
      points: X
    } of this.#A)
      Z.push(n(V, m, B, o, W, l ? new Array(V.length) : null)), i.push(n(X, m, B, o, W, l ? new Array(X.length) : null));
    return {
      lines: Z,
      points: i,
      rect: [Y, h, a, w]
    };
  }
  static deserialize(I, g, C, A, l, {
    paths: {
      lines: Z,
      points: i
    },
    rotation: d,
    thickness: c
  }) {
    const G = [];
    let b, m, B, o, W;
    switch (d) {
      case 0:
        W = z._rescale, b = -I / C, m = g / A + 1, B = 1 / C, o = -1 / A;
        break;
      case 90:
        W = z._rescaleAndSwap, b = -g / A, m = -I / C, B = 1 / A, o = 1 / C;
        break;
      case 180:
        W = z._rescale, b = I / C + 1, m = -g / A, B = -1 / C, o = 1 / A;
        break;
      case 270:
        W = z._rescaleAndSwap, b = g / A + 1, m = I / C + 1, B = -1 / A, o = -1 / C;
        break;
    }
    if (!Z) {
      Z = [];
      for (const h of i) {
        const a = h.length;
        if (a === 2) {
          Z.push(new Float32Array([NaN, NaN, NaN, NaN, h[0], h[1]]));
          continue;
        }
        if (a === 4) {
          Z.push(new Float32Array([NaN, NaN, NaN, NaN, h[0], h[1], NaN, NaN, NaN, NaN, h[2], h[3]]));
          continue;
        }
        const w = new Float32Array(3 * (a - 2));
        Z.push(w);
        let [n, V, X, y] = h.subarray(0, 4);
        w.set([NaN, NaN, NaN, NaN, n, V], 0);
        for (let N = 4; N < a; N += 2) {
          const t = h[N], e = h[N + 1];
          w.set(z.createBezierPoints(n, V, X, y, t, e), (N - 2) * 3), [n, V, X, y] = [X, y, t, e];
        }
      }
    }
    for (let h = 0, a = Z.length; h < a; h++)
      G.push({
        line: W(Z[h].map((w) => w ?? NaN), b, m, B, o),
        points: W(i[h].map((w) => w ?? NaN), b, m, B, o)
      });
    const Y = new this.prototype.constructor();
    return Y.build(G, C, A, 1, d, c, l), Y;
  }
  #s(I = this.#c) {
    const g = this.#C + I / 2 * this.#i;
    return this.#d % 180 === 0 ? [g / this.#Z, g / this.#l] : [g / this.#l, g / this.#Z];
  }
  #m() {
    const [I, g, C, A] = this.#I, [l, Z] = this.#s(0);
    return [I + l, g + Z, C - 2 * l, A - 2 * Z];
  }
  #G() {
    const I = this.#I = new Float32Array([1 / 0, 1 / 0, -1 / 0, -1 / 0]);
    for (const {
      line: A
    } of this.#A) {
      if (A.length <= 12) {
        for (let i = 4, d = A.length; i < d; i += 6)
          J.pointBoundingBox(A[i], A[i + 1], I);
        continue;
      }
      let l = A[4], Z = A[5];
      for (let i = 6, d = A.length; i < d; i += 6) {
        const [c, G, b, m, B, o] = A.subarray(i, i + 6);
        J.bezierBoundingBox(l, Z, c, G, b, m, B, o, I), l = B, Z = o;
      }
    }
    const [g, C] = this.#s();
    I[0] = RI(I[0] - g, 0, 1), I[1] = RI(I[1] - C, 0, 1), I[2] = RI(I[2] + g, 0, 1), I[3] = RI(I[3] + C, 0, 1), I[2] -= I[0], I[3] -= I[1];
  }
  get box() {
    return this.#I;
  }
  updateProperty(I, g) {
    return I === "stroke-width" ? this.#B(g) : null;
  }
  #B(I) {
    const [g, C] = this.#s();
    this.#c = I;
    const [A, l] = this.#s(), [Z, i] = [A - g, l - C], d = this.#I;
    return d[0] -= Z, d[1] -= i, d[2] += 2 * Z, d[3] += 2 * i, d;
  }
  updateParentDimensions([I, g], C) {
    const [A, l] = this.#s();
    this.#Z = I, this.#l = g, this.#i = C;
    const [Z, i] = this.#s(), d = Z - A, c = i - l, G = this.#I;
    return G[0] -= d, G[1] -= c, G[2] += 2 * d, G[3] += 2 * c, G;
  }
  updateRotation(I) {
    return this.#g = I, {
      path: {
        transform: this.rotationTransform
      }
    };
  }
  get viewBox() {
    return this.#I.map(z.svgRound).join(" ");
  }
  get defaultProperties() {
    const [I, g] = this.#I;
    return {
      root: {
        viewBox: this.viewBox
      },
      path: {
        "transform-origin": `${z.svgRound(I)} ${z.svgRound(g)}`
      }
    };
  }
  get rotationTransform() {
    const [, , I, g] = this.#I;
    let C = 0, A = 0, l = 0, Z = 0, i = 0, d = 0;
    switch (this.#g) {
      case 90:
        A = g / I, l = -I / g, i = I;
        break;
      case 180:
        C = -1, Z = -1, i = I, d = g;
        break;
      case 270:
        A = -g / I, l = I / g, d = g;
        break;
      default:
        return "";
    }
    return `matrix(${C} ${A} ${l} ${Z} ${z.svgRound(i)} ${z.svgRound(d)})`;
  }
  getPathResizingSVGProperties([I, g, C, A]) {
    const [l, Z] = this.#s(), [i, d, c, G] = this.#I;
    if (Math.abs(c - l) <= z.PRECISION || Math.abs(G - Z) <= z.PRECISION) {
      const W = I + C / 2 - (i + c / 2), Y = g + A / 2 - (d + G / 2);
      return {
        path: {
          "transform-origin": `${z.svgRound(I)} ${z.svgRound(g)}`,
          transform: `${this.rotationTransform} translate(${W} ${Y})`
        }
      };
    }
    const b = (C - 2 * l) / (c - 2 * l), m = (A - 2 * Z) / (G - 2 * Z), B = c / C, o = G / A;
    return {
      path: {
        "transform-origin": `${z.svgRound(i)} ${z.svgRound(d)}`,
        transform: `${this.rotationTransform} scale(${B} ${o}) translate(${z.svgRound(l)} ${z.svgRound(Z)}) scale(${b} ${m}) translate(${z.svgRound(-l)} ${z.svgRound(-Z)})`
      }
    };
  }
  getPathResizedSVGProperties([I, g, C, A]) {
    const [l, Z] = this.#s(), i = this.#I, [d, c, G, b] = i;
    if (i[0] = I, i[1] = g, i[2] = C, i[3] = A, Math.abs(G - l) <= z.PRECISION || Math.abs(b - Z) <= z.PRECISION) {
      const Y = I + C / 2 - (d + G / 2), h = g + A / 2 - (c + b / 2);
      for (const {
        line: a,
        points: w
      } of this.#A)
        z._translate(a, Y, h, a), z._translate(w, Y, h, w);
      return {
        root: {
          viewBox: this.viewBox
        },
        path: {
          "transform-origin": `${z.svgRound(I)} ${z.svgRound(g)}`,
          transform: this.rotationTransform || null,
          d: this.toSVGPath()
        }
      };
    }
    const m = (C - 2 * l) / (G - 2 * l), B = (A - 2 * Z) / (b - 2 * Z), o = -m * (d + l) + I + l, W = -B * (c + Z) + g + Z;
    if (m !== 1 || B !== 1 || o !== 0 || W !== 0)
      for (const {
        line: Y,
        points: h
      } of this.#A)
        z._rescale(Y, o, W, m, B, Y), z._rescale(h, o, W, m, B, h);
    return {
      root: {
        viewBox: this.viewBox
      },
      path: {
        "transform-origin": `${z.svgRound(I)} ${z.svgRound(g)}`,
        transform: this.rotationTransform || null,
        d: this.toSVGPath()
      }
    };
  }
  getPathTranslatedSVGProperties([I, g], C) {
    const [A, l] = C, Z = this.#I, i = I - Z[0], d = g - Z[1];
    if (this.#Z === A && this.#l === l)
      for (const {
        line: c,
        points: G
      } of this.#A)
        z._translate(c, i, d, c), z._translate(G, i, d, G);
    else {
      const c = this.#Z / A, G = this.#l / l;
      this.#Z = A, this.#l = l;
      for (const {
        line: b,
        points: m
      } of this.#A)
        z._rescale(b, i, d, c, G, b), z._rescale(m, i, d, c, G, m);
      Z[2] *= c, Z[3] *= G;
    }
    return Z[0] = I, Z[1] = g, {
      root: {
        viewBox: this.viewBox
      },
      path: {
        d: this.toSVGPath(),
        "transform-origin": `${z.svgRound(I)} ${z.svgRound(g)}`
      }
    };
  }
  get defaultSVGProperties() {
    const I = this.#I;
    return {
      root: {
        viewBox: this.viewBox
      },
      rootClass: {
        draw: !0
      },
      path: {
        d: this.toSVGPath(),
        "transform-origin": `${z.svgRound(I[0])} ${z.svgRound(I[1])}`,
        transform: this.rotationTransform || null
      },
      bbox: I
    };
  }
}
class oC extends dl {
  constructor(I) {
    super(), this._viewParameters = I, super.updateProperties({
      fill: "none",
      stroke: T._defaultLineColor,
      "stroke-opacity": 1,
      "stroke-width": 1,
      "stroke-linecap": "round",
      "stroke-linejoin": "round",
      "stroke-miterlimit": 10
    });
  }
  updateSVGProperty(I, g) {
    I === "stroke-width" && (g ??= this["stroke-width"], g *= this._viewParameters.realScale), super.updateSVGProperty(I, g);
  }
  clone() {
    const I = new oC(this._viewParameters);
    return I.updateAll(this), I;
  }
}
class PC extends r {
  static _type = "ink";
  static _editorType = O.INK;
  static _defaultDrawingOptions = null;
  constructor(I) {
    super({
      ...I,
      name: "inkEditor"
    }), this._willKeepAspectRatio = !0, this.defaultL10nId = "pdfjs-editor-ink-editor";
  }
  static initialize(I, g) {
    T.initialize(I, g), this._defaultDrawingOptions = new oC(g.viewParameters);
  }
  static getDefaultDrawingOptions(I) {
    const g = this._defaultDrawingOptions.clone();
    return g.updateProperties(I), g;
  }
  static get supportMultipleDrawings() {
    return !0;
  }
  static get typesMap() {
    return P(this, "typesMap", /* @__PURE__ */ new Map([[f.INK_THICKNESS, "stroke-width"], [f.INK_COLOR, "stroke"], [f.INK_OPACITY, "stroke-opacity"]]));
  }
  static createDrawerInstance(I, g, C, A, l) {
    return new OZ(I, g, C, A, l, this._defaultDrawingOptions["stroke-width"]);
  }
  static deserializeDraw(I, g, C, A, l, Z) {
    return Ug.deserialize(I, g, C, A, l, Z);
  }
  static async deserialize(I, g, C) {
    let A = null;
    if (I instanceof EC) {
      const {
        data: {
          inkLists: Z,
          rect: i,
          rotation: d,
          id: c,
          color: G,
          opacity: b,
          borderStyle: {
            rawWidth: m
          },
          popupRef: B,
          contentsObj: o
        },
        parent: {
          page: {
            pageNumber: W
          }
        }
      } = I;
      A = I = {
        annotationType: O.INK,
        color: Array.from(G),
        thickness: m,
        opacity: b,
        paths: {
          points: Z
        },
        boxes: null,
        pageIndex: W - 1,
        rect: i.slice(0),
        rotation: d,
        annotationElementId: c,
        id: c,
        deleted: !1,
        popupRef: B,
        comment: o?.str || null
      };
    }
    const l = await super.deserialize(I, g, C);
    return l._initialData = A, I.comment && l.setCommentData(I.comment), l;
  }
  get toolbarButtons() {
    return this._colorPicker ||= new Jg(this), [["colorPicker", this._colorPicker]];
  }
  get colorType() {
    return f.INK_COLOR;
  }
  get colorValue() {
    return this._drawingOptions.stroke;
  }
  onScaleChanging() {
    if (!this.parent)
      return;
    super.onScaleChanging();
    const {
      _drawId: I,
      _drawingOptions: g,
      parent: C
    } = this;
    g.updateSVGProperty("stroke-width"), C.drawLayer.updateProperties(I, g.toSVGProperties());
  }
  static onScaleChangingWhenDrawing() {
    const I = this._currentParent;
    I && (super.onScaleChangingWhenDrawing(), this._defaultDrawingOptions.updateSVGProperty("stroke-width"), I.drawLayer.updateProperties(this._currentDrawId, this._defaultDrawingOptions.toSVGProperties()));
  }
  createDrawingOptions({
    color: I,
    thickness: g,
    opacity: C
  }) {
    this._drawingOptions = PC.getDefaultDrawingOptions({
      stroke: J.makeHexColor(...I),
      "stroke-width": g,
      "stroke-opacity": C
    });
  }
  serialize(I = !1) {
    if (this.isEmpty())
      return null;
    if (this.deleted)
      return this.serializeDeleted();
    const {
      lines: g,
      points: C,
      rect: A
    } = this.serializeDraw(I), {
      _drawingOptions: {
        stroke: l,
        "stroke-opacity": Z,
        "stroke-width": i
      }
    } = this, d = {
      annotationType: O.INK,
      color: T._colorManager.convert(l),
      opacity: Z,
      thickness: i,
      paths: {
        lines: g,
        points: C
      },
      pageIndex: this.pageIndex,
      rect: A,
      rotation: this.rotation,
      structTreeParentId: this._structTreeParentId
    };
    return this.addComment(d), I ? (d.isCopy = !0, d) : this.annotationElementId && !this.#I(d) ? null : (d.id = this.annotationElementId, d);
  }
  #I(I) {
    const {
      color: g,
      thickness: C,
      opacity: A,
      pageIndex: l
    } = this._initialData;
    return this.hasEditedComment || this._hasBeenMoved || this._hasBeenResized || I.color.some((Z, i) => Z !== g[i]) || I.thickness !== C || I.opacity !== A || I.pageIndex !== l;
  }
  renderAnnotationElement(I) {
    if (this.deleted)
      return I.hide(), null;
    const {
      points: g,
      rect: C
    } = this.serializeDraw(!1), A = {
      rect: C,
      thickness: this._drawingOptions["stroke-width"],
      points: g
    };
    return this.hasEditedComment && (A.popup = this.comment), I.updateEdited(A), null;
  }
}
class DC extends Ug {
  toSVGPath() {
    let I = super.toSVGPath();
    return I.endsWith("Z") || (I += "Z"), I;
  }
}
const IC = 8, ug = 3;
class ig {
  static #I = {
    maxDim: 512,
    sigmaSFactor: 0.02,
    sigmaR: 25,
    kernelSize: 16
  };
  static #g(I, g, C, A) {
    return C -= I, A -= g, C === 0 ? A > 0 ? 0 : 4 : C === 1 ? A + 6 : 2 - A;
  }
  static #C = new Int32Array([0, 1, -1, 1, -1, 0, -1, -1, 0, -1, 1, -1, 1, 0, 1, 1]);
  static #A(I, g, C, A, l, Z, i) {
    const d = this.#g(C, A, l, Z);
    for (let c = 0; c < 8; c++) {
      const G = (-c + d - i + 16) % 8, b = this.#C[2 * G], m = this.#C[2 * G + 1];
      if (I[(C + b) * g + (A + m)] !== 0)
        return G;
    }
    return -1;
  }
  static #Z(I, g, C, A, l, Z, i) {
    const d = this.#g(C, A, l, Z);
    for (let c = 0; c < 8; c++) {
      const G = (c + d + i + 16) % 8, b = this.#C[2 * G], m = this.#C[2 * G + 1];
      if (I[(C + b) * g + (A + m)] !== 0)
        return G;
    }
    return -1;
  }
  static #l(I, g, C, A) {
    const l = I.length, Z = new Int32Array(l);
    for (let G = 0; G < l; G++)
      Z[G] = I[G] <= A ? 1 : 0;
    for (let G = 1; G < C - 1; G++)
      Z[G * g] = Z[G * g + g - 1] = 0;
    for (let G = 0; G < g; G++)
      Z[G] = Z[g * C - 1 - G] = 0;
    let i = 1, d;
    const c = [];
    for (let G = 1; G < C - 1; G++) {
      d = 1;
      for (let b = 1; b < g - 1; b++) {
        const m = G * g + b, B = Z[m];
        if (B === 0)
          continue;
        let o = G, W = b;
        if (B === 1 && Z[m - 1] === 0)
          i += 1, W -= 1;
        else if (B >= 1 && Z[m + 1] === 0)
          i += 1, W += 1, B > 1 && (d = B);
        else {
          B !== 1 && (d = Math.abs(B));
          continue;
        }
        const Y = [b, G], h = W === b + 1, a = {
          isHole: h,
          points: Y,
          id: i,
          parent: 0
        };
        c.push(a);
        let w;
        for (const R of c)
          if (R.id === d) {
            w = R;
            break;
          }
        w ? w.isHole ? a.parent = h ? w.parent : d : a.parent = h ? d : w.parent : a.parent = h ? d : 0;
        const n = this.#A(Z, g, G, b, o, W, 0);
        if (n === -1) {
          Z[m] = -i, Z[m] !== 1 && (d = Math.abs(Z[m]));
          continue;
        }
        let V = this.#C[2 * n], X = this.#C[2 * n + 1];
        const y = G + V, N = b + X;
        o = y, W = N;
        let t = G, e = b;
        for (; ; ) {
          const R = this.#Z(Z, g, t, e, o, W, 1);
          V = this.#C[2 * R], X = this.#C[2 * R + 1];
          const F = t + V, K = e + X;
          Y.push(K, F);
          const S = t * g + e;
          if (Z[S + 1] === 0 ? Z[S] = -i : Z[S] === 1 && (Z[S] = i), F === G && K === b && t === y && e === N) {
            Z[m] !== 1 && (d = Math.abs(Z[m]));
            break;
          } else
            o = t, W = e, t = F, e = K;
        }
      }
    }
    return c;
  }
  static #i(I, g, C, A) {
    if (C - g <= 4) {
      for (let y = g; y < C - 2; y += 2)
        A.push(I[y], I[y + 1]);
      return;
    }
    const l = I[g], Z = I[g + 1], i = I[C - 4] - l, d = I[C - 3] - Z, c = Math.hypot(i, d), G = i / c, b = d / c, m = G * Z - b * l, B = d / i, o = 1 / c, W = Math.atan(B), Y = Math.cos(W), h = Math.sin(W), a = o * (Math.abs(Y) + Math.abs(h)), w = o * (1 - a + a ** 2), n = Math.max(Math.atan(Math.abs(h + Y) * w), Math.atan(Math.abs(h - Y) * w));
    let V = 0, X = g;
    for (let y = g + 2; y < C - 2; y += 2) {
      const N = Math.abs(m - G * I[y + 1] + b * I[y]);
      N > V && (X = y, V = N);
    }
    V > (c * n) ** 2 ? (this.#i(I, g, X + 2, A), this.#i(I, X, C, A)) : A.push(l, Z);
  }
  static #d(I) {
    const g = [], C = I.length;
    return this.#i(I, 0, C, g), g.push(I[C - 2], I[C - 1]), g.length <= 4 ? null : g;
  }
  static #c(I, g, C, A, l, Z) {
    const i = new Float32Array(Z ** 2), d = -2 * A ** 2, c = Z >> 1;
    for (let W = 0; W < Z; W++) {
      const Y = (W - c) ** 2;
      for (let h = 0; h < Z; h++)
        i[W * Z + h] = Math.exp((Y + (h - c) ** 2) / d);
    }
    const G = new Float32Array(256), b = -2 * l ** 2;
    for (let W = 0; W < 256; W++)
      G[W] = Math.exp(W ** 2 / b);
    const m = I.length, B = new Uint8Array(m), o = new Uint32Array(256);
    for (let W = 0; W < C; W++)
      for (let Y = 0; Y < g; Y++) {
        const h = W * g + Y, a = I[h];
        let w = 0, n = 0;
        for (let X = 0; X < Z; X++) {
          const y = W + X - c;
          if (!(y < 0 || y >= C))
            for (let N = 0; N < Z; N++) {
              const t = Y + N - c;
              if (t < 0 || t >= g)
                continue;
              const e = I[y * g + t], R = i[X * Z + N] * G[Math.abs(e - a)];
              w += e * R, n += R;
            }
        }
        const V = B[h] = Math.round(w / n);
        o[V]++;
      }
    return [B, o];
  }
  static #s(I) {
    const g = new Uint32Array(256);
    for (const C of I)
      g[C]++;
    return g;
  }
  static #m(I) {
    const g = I.length, C = new Uint8ClampedArray(g >> 2);
    let A = -1 / 0, l = 1 / 0;
    for (let i = 0, d = C.length; i < d; i++) {
      const c = C[i] = I[i << 2];
      A = Math.max(A, c), l = Math.min(l, c);
    }
    const Z = 255 / (A - l);
    for (let i = 0, d = C.length; i < d; i++)
      C[i] = (C[i] - l) * Z;
    return C;
  }
  static #G(I) {
    let g, C = -1 / 0, A = -1 / 0;
    const l = I.findIndex((d) => d !== 0);
    let Z = l, i = l;
    for (g = l; g < 256; g++) {
      const d = I[g];
      d > C && (g - Z > A && (A = g - Z, i = g - 1), C = d, Z = g);
    }
    for (g = i - 1; g >= 0 && !(I[g] > I[g + 1]); g--)
      ;
    return g;
  }
  static #B(I) {
    const g = I, {
      width: C,
      height: A
    } = I, {
      maxDim: l
    } = this.#I;
    let Z = C, i = A;
    if (C > l || A > l) {
      let m = C, B = A, o = Math.log2(Math.max(C, A) / l);
      const W = Math.floor(o);
      o = o === W ? W - 1 : W;
      for (let h = 0; h < o; h++) {
        Z = Math.ceil(m / 2), i = Math.ceil(B / 2);
        const a = new OffscreenCanvas(Z, i);
        a.getContext("2d").drawImage(I, 0, 0, m, B, 0, 0, Z, i), m = Z, B = i, I !== g && I.close(), I = a.transferToImageBitmap();
      }
      const Y = Math.min(l / Z, l / i);
      Z = Math.round(Z * Y), i = Math.round(i * Y);
    }
    const c = new OffscreenCanvas(Z, i).getContext("2d", {
      willReadFrequently: !0
    });
    c.fillStyle = "white", c.fillRect(0, 0, Z, i), c.filter = "grayscale(1)", c.drawImage(I, 0, 0, I.width, I.height, 0, 0, Z, i);
    const G = c.getImageData(0, 0, Z, i).data;
    return [this.#m(G), Z, i];
  }
  static extractContoursFromText(I, {
    fontFamily: g,
    fontStyle: C,
    fontWeight: A
  }, l, Z, i, d) {
    let c = new OffscreenCanvas(1, 1), G = c.getContext("2d", {
      alpha: !1
    });
    const b = 200, m = G.font = `${C} ${A} ${b}px ${g}`, {
      actualBoundingBoxLeft: B,
      actualBoundingBoxRight: o,
      actualBoundingBoxAscent: W,
      actualBoundingBoxDescent: Y,
      fontBoundingBoxAscent: h,
      fontBoundingBoxDescent: a,
      width: w
    } = G.measureText(I), n = 1.5, V = Math.ceil(Math.max(Math.abs(B) + Math.abs(o) || 0, w) * n), X = Math.ceil(Math.max(Math.abs(W) + Math.abs(Y) || b, Math.abs(h) + Math.abs(a) || b) * n);
    c = new OffscreenCanvas(V, X), G = c.getContext("2d", {
      alpha: !0,
      willReadFrequently: !0
    }), G.font = m, G.filter = "grayscale(1)", G.fillStyle = "white", G.fillRect(0, 0, V, X), G.fillStyle = "black", G.fillText(I, V * (n - 1) / 2, X * (3 - n) / 2);
    const y = this.#m(G.getImageData(0, 0, V, X).data), N = this.#s(y), t = this.#G(N), e = this.#l(y, V, X, t);
    return this.processDrawnLines({
      lines: {
        curves: e,
        width: V,
        height: X
      },
      pageWidth: l,
      pageHeight: Z,
      rotation: i,
      innerMargin: d,
      mustSmooth: !0,
      areContours: !0
    });
  }
  static process(I, g, C, A, l) {
    const [Z, i, d] = this.#B(I), [c, G] = this.#c(Z, i, d, Math.hypot(i, d) * this.#I.sigmaSFactor, this.#I.sigmaR, this.#I.kernelSize), b = this.#G(G), m = this.#l(c, i, d, b);
    return this.processDrawnLines({
      lines: {
        curves: m,
        width: i,
        height: d
      },
      pageWidth: g,
      pageHeight: C,
      rotation: A,
      innerMargin: l,
      mustSmooth: !0,
      areContours: !0
    });
  }
  static processDrawnLines({
    lines: I,
    pageWidth: g,
    pageHeight: C,
    rotation: A,
    innerMargin: l,
    mustSmooth: Z,
    areContours: i
  }) {
    A % 180 !== 0 && ([g, C] = [C, g]);
    const {
      curves: d,
      width: c,
      height: G
    } = I, b = I.thickness ?? 0, m = [], B = Math.min(g / c, C / G), o = B / g, W = B / C, Y = [];
    for (const {
      points: a
    } of d) {
      const w = Z ? this.#d(a) : a;
      if (!w)
        continue;
      Y.push(w);
      const n = w.length, V = new Float32Array(n), X = new Float32Array(3 * (n === 2 ? 2 : n - 2));
      if (m.push({
        line: X,
        points: V
      }), n === 2) {
        V[0] = w[0] * o, V[1] = w[1] * W, X.set([NaN, NaN, NaN, NaN, V[0], V[1]], 0);
        continue;
      }
      let [y, N, t, e] = w;
      y *= o, N *= W, t *= o, e *= W, V.set([y, N, t, e], 0), X.set([NaN, NaN, NaN, NaN, y, N], 0);
      for (let R = 4; R < n; R += 2) {
        const F = V[R] = w[R] * o, K = V[R + 1] = w[R + 1] * W;
        X.set(z.createBezierPoints(y, N, t, e, F, K), (R - 2) * 3), [y, N, t, e] = [t, e, F, K];
      }
    }
    if (m.length === 0)
      return null;
    const h = i ? new DC() : new Ug();
    return h.build(m, g, C, 1, A, i ? 0 : b, l), {
      outline: h,
      newCurves: Y,
      areContours: i,
      thickness: b,
      width: c,
      height: G
    };
  }
  static async compressSignature({
    outlines: I,
    areContours: g,
    thickness: C,
    width: A,
    height: l
  }) {
    let Z = 1 / 0, i = -1 / 0, d = 0;
    for (const w of I) {
      d += w.length;
      for (let n = 2, V = w.length; n < V; n++) {
        const X = w[n] - w[n - 2];
        Z = Math.min(Z, X), i = Math.max(i, X);
      }
    }
    let c;
    Z >= -128 && i <= 127 ? c = Int8Array : Z >= -32768 && i <= 32767 ? c = Int16Array : c = Int32Array;
    const G = I.length, b = IC + ug * G, m = new Uint32Array(b);
    let B = 0;
    m[B++] = b * Uint32Array.BYTES_PER_ELEMENT + (d - 2 * G) * c.BYTES_PER_ELEMENT, m[B++] = 0, m[B++] = A, m[B++] = l, m[B++] = g ? 0 : 1, m[B++] = Math.max(0, Math.floor(C ?? 0)), m[B++] = G, m[B++] = c.BYTES_PER_ELEMENT;
    for (const w of I)
      m[B++] = w.length - 2, m[B++] = w[0], m[B++] = w[1];
    const o = new CompressionStream("deflate-raw"), W = o.writable.getWriter();
    await W.ready, W.write(m);
    const Y = c.prototype.constructor;
    for (const w of I) {
      const n = new Y(w.length - 2);
      for (let V = 2, X = w.length; V < X; V++)
        n[V - 2] = w[V] - w[V - 2];
      W.write(n);
    }
    W.close();
    const h = await new Response(o.readable).arrayBuffer(), a = new Uint8Array(h);
    return KA(a);
  }
  static async decompressSignature(I) {
    try {
      const g = wl(I), {
        readable: C,
        writable: A
      } = new DecompressionStream("deflate-raw"), l = A.getWriter();
      await l.ready, l.write(g).then(async () => {
        await l.ready, await l.close();
      }).catch(() => {
      });
      let Z = null, i = 0;
      for await (const w of C)
        Z ||= new Uint8Array(new Uint32Array(w.buffer, 0, 4)[0]), Z.set(w, i), i += w.length;
      const d = new Uint32Array(Z.buffer, 0, Z.length >> 2), c = d[1];
      if (c !== 0)
        throw new Error(`Invalid version: ${c}`);
      const G = d[2], b = d[3], m = d[4] === 0, B = d[5], o = d[6], W = d[7], Y = [], h = (IC + ug * o) * Uint32Array.BYTES_PER_ELEMENT;
      let a;
      switch (W) {
        case Int8Array.BYTES_PER_ELEMENT:
          a = new Int8Array(Z.buffer, h);
          break;
        case Int16Array.BYTES_PER_ELEMENT:
          a = new Int16Array(Z.buffer, h);
          break;
        case Int32Array.BYTES_PER_ELEMENT:
          a = new Int32Array(Z.buffer, h);
          break;
      }
      i = 0;
      for (let w = 0; w < o; w++) {
        const n = d[ug * w + IC], V = new Float32Array(n + 2);
        Y.push(V);
        for (let X = 0; X < ug - 1; X++)
          V[X] = d[ug * w + IC + X + 1];
        for (let X = 0; X < n; X++)
          V[X + 2] = V[X] + a[i++];
      }
      return {
        areContours: m,
        thickness: B,
        outlines: Y,
        width: G,
        height: b
      };
    } catch (g) {
      return j(`decompressSignature: ${g}`), null;
    }
  }
}
class fC extends dl {
  constructor() {
    super(), super.updateProperties({
      fill: T._defaultLineColor,
      "stroke-width": 0
    });
  }
  clone() {
    const I = new fC();
    return I.updateAll(this), I;
  }
}
class qC extends oC {
  constructor(I) {
    super(I), super.updateProperties({
      stroke: T._defaultLineColor,
      "stroke-width": 1
    });
  }
  clone() {
    const I = new qC(this._viewParameters);
    return I.updateAll(this), I;
  }
}
class xI extends r {
  #I = !1;
  #g = null;
  #C = null;
  #A = null;
  static _type = "signature";
  static _editorType = O.SIGNATURE;
  static _defaultDrawingOptions = null;
  constructor(I) {
    super({
      ...I,
      mustBeCommitted: !0,
      name: "signatureEditor"
    }), this._willKeepAspectRatio = !0, this.#C = I.signatureData || null, this.#g = null, this.defaultL10nId = "pdfjs-editor-signature-editor1";
  }
  static initialize(I, g) {
    T.initialize(I, g), this._defaultDrawingOptions = new fC(), this._defaultDrawnSignatureOptions = new qC(g.viewParameters);
  }
  static getDefaultDrawingOptions(I) {
    const g = this._defaultDrawingOptions.clone();
    return g.updateProperties(I), g;
  }
  static get supportMultipleDrawings() {
    return !1;
  }
  static get typesMap() {
    return P(this, "typesMap", /* @__PURE__ */ new Map());
  }
  static get isDrawer() {
    return !1;
  }
  get telemetryFinalData() {
    return {
      type: "signature",
      hasDescription: !!this.#g
    };
  }
  static computeTelemetryFinalData(I) {
    const g = I.get("hasDescription");
    return {
      hasAltText: g.get(!0) ?? 0,
      hasNoAltText: g.get(!1) ?? 0
    };
  }
  get isResizable() {
    return !0;
  }
  onScaleChanging() {
    this._drawId !== null && super.onScaleChanging();
  }
  render() {
    if (this.div)
      return this.div;
    let I, g;
    const {
      _isCopy: C
    } = this;
    if (C && (this._isCopy = !1, I = this.x, g = this.y), super.render(), this._drawId === null)
      if (this.#C) {
        const {
          lines: A,
          mustSmooth: l,
          areContours: Z,
          description: i,
          uuid: d,
          heightInPage: c
        } = this.#C, {
          rawDims: {
            pageWidth: G,
            pageHeight: b
          },
          rotation: m
        } = this.parent.viewport, B = ig.processDrawnLines({
          lines: A,
          pageWidth: G,
          pageHeight: b,
          rotation: m,
          innerMargin: xI._INNER_MARGIN,
          mustSmooth: l,
          areContours: Z
        });
        this.addSignature(B, c, i, d);
      } else
        this.div.setAttribute("data-l10n-args", JSON.stringify({
          description: ""
        })), this.div.hidden = !0, this._uiManager.getSignature(this);
    else
      this.div.setAttribute("data-l10n-args", JSON.stringify({
        description: this.#g || ""
      }));
    return C && (this._isCopy = !0, this._moveAfterPaste(I, g)), this.div;
  }
  setUuid(I) {
    this.#A = I, this.addEditToolbar();
  }
  getUuid() {
    return this.#A;
  }
  get description() {
    return this.#g;
  }
  set description(I) {
    this.#g = I, this.div && (this.div.setAttribute("data-l10n-args", JSON.stringify({
      description: I
    })), super.addEditToolbar().then((g) => {
      g?.updateEditSignatureButton(I);
    }));
  }
  getSignaturePreview() {
    const {
      newCurves: I,
      areContours: g,
      thickness: C,
      width: A,
      height: l
    } = this.#C, Z = Math.max(A, l), i = ig.processDrawnLines({
      lines: {
        curves: I.map((d) => ({
          points: d
        })),
        thickness: C,
        width: A,
        height: l
      },
      pageWidth: Z,
      pageHeight: Z,
      rotation: 0,
      innerMargin: 0,
      mustSmooth: !1,
      areContours: g
    });
    return {
      areContours: g,
      outline: i.outline
    };
  }
  get toolbarButtons() {
    return this._uiManager.signatureManager ? [["editSignature", this._uiManager.signatureManager]] : super.toolbarButtons;
  }
  addSignature(I, g, C, A) {
    const {
      x: l,
      y: Z
    } = this, {
      outline: i
    } = this.#C = I;
    this.#I = i instanceof DC, this.description = C;
    let d;
    this.#I ? d = xI.getDefaultDrawingOptions() : (d = xI._defaultDrawnSignatureOptions.clone(), d.updateProperties({
      "stroke-width": i.thickness
    })), this._addOutlines({
      drawOutlines: i,
      drawingOptions: d
    });
    const [c, G] = this.parentDimensions, [, b] = this.pageDimensions;
    let m = g / b;
    m = m >= 1 ? 0.5 : m, this.width *= m / this.height, this.width >= 1 && (m *= 0.9 / this.width, this.width = 0.9), this.height = m, this.setDims(c * this.width, G * this.height), this.x = l, this.y = Z, this.center(), this._onResized(), this.onScaleChanging(), this.rotate(), this._uiManager.addToAnnotationStorage(this), this.setUuid(A), this._reportTelemetry({
      action: "pdfjs.signature.inserted",
      data: {
        hasBeenSaved: !!A,
        hasDescription: !!C
      }
    }), this.div.hidden = !1;
  }
  getFromImage(I) {
    const {
      rawDims: {
        pageWidth: g,
        pageHeight: C
      },
      rotation: A
    } = this.parent.viewport;
    return ig.process(I, g, C, A, xI._INNER_MARGIN);
  }
  getFromText(I, g) {
    const {
      rawDims: {
        pageWidth: C,
        pageHeight: A
      },
      rotation: l
    } = this.parent.viewport;
    return ig.extractContoursFromText(I, g, C, A, l, xI._INNER_MARGIN);
  }
  getDrawnSignature(I) {
    const {
      rawDims: {
        pageWidth: g,
        pageHeight: C
      },
      rotation: A
    } = this.parent.viewport;
    return ig.processDrawnLines({
      lines: I,
      pageWidth: g,
      pageHeight: C,
      rotation: A,
      innerMargin: xI._INNER_MARGIN,
      mustSmooth: !1,
      areContours: !1
    });
  }
  createDrawingOptions({
    areContours: I,
    thickness: g
  }) {
    I ? this._drawingOptions = xI.getDefaultDrawingOptions() : (this._drawingOptions = xI._defaultDrawnSignatureOptions.clone(), this._drawingOptions.updateProperties({
      "stroke-width": g
    }));
  }
  serialize(I = !1) {
    if (this.isEmpty())
      return null;
    const {
      lines: g,
      points: C,
      rect: A
    } = this.serializeDraw(I), {
      _drawingOptions: {
        "stroke-width": l
      }
    } = this, Z = {
      annotationType: O.SIGNATURE,
      isSignature: !0,
      areContours: this.#I,
      color: [0, 0, 0],
      thickness: this.#I ? 0 : l,
      pageIndex: this.pageIndex,
      rect: A,
      rotation: this.rotation,
      structTreeParentId: this._structTreeParentId
    };
    return this.addComment(Z), I ? (Z.paths = {
      lines: g,
      points: C
    }, Z.uuid = this.#A, Z.isCopy = !0) : Z.lines = g, this.#g && (Z.accessibilityData = {
      type: "Figure",
      alt: this.#g
    }), Z;
  }
  static deserializeDraw(I, g, C, A, l, Z) {
    return Z.areContours ? DC.deserialize(I, g, C, A, l, Z) : Ug.deserialize(I, g, C, A, l, Z);
  }
  static async deserialize(I, g, C) {
    const A = await super.deserialize(I, g, C);
    return A.#I = I.areContours, A.description = I.accessibilityData?.alt || "", A.#A = I.uuid, A;
  }
}
class UZ extends T {
  #I = null;
  #g = null;
  #C = null;
  #A = null;
  #Z = null;
  #l = "";
  #i = null;
  #d = !1;
  #c = null;
  #s = !1;
  #m = !1;
  static _type = "stamp";
  static _editorType = O.STAMP;
  constructor(I) {
    super({
      ...I,
      name: "stampEditor"
    }), this.#A = I.bitmapUrl, this.#Z = I.bitmapFile, this.defaultL10nId = "pdfjs-editor-stamp-editor";
  }
  static initialize(I, g) {
    T.initialize(I, g);
  }
  static isHandlingMimeForPasting(I) {
    return ZC.includes(I);
  }
  static paste(I, g) {
    g.pasteEditor({
      mode: O.STAMP
    }, {
      bitmapFile: I.getAsFile()
    });
  }
  altTextFinish() {
    this._uiManager.useNewAltTextFlow && (this.div.hidden = !1), super.altTextFinish();
  }
  get telemetryFinalData() {
    return {
      type: "stamp",
      hasAltText: !!this.altTextData?.altText
    };
  }
  static computeTelemetryFinalData(I) {
    const g = I.get("hasAltText");
    return {
      hasAltText: g.get(!0) ?? 0,
      hasNoAltText: g.get(!1) ?? 0
    };
  }
  #G(I, g = !1) {
    if (!I) {
      this.remove();
      return;
    }
    this.#I = I.bitmap, g || (this.#g = I.id, this.#s = I.isSvg), I.file && (this.#l = I.file.name), this.#o();
  }
  #B() {
    if (this.#C = null, this._uiManager.enableWaiting(!1), !!this.#i) {
      if (this._uiManager.useNewAltTextWhenAddingImage && this._uiManager.useNewAltTextFlow && this.#I) {
        this.addEditToolbar().then(() => {
          this._editToolbar.hide(), this._uiManager.editAltText(this, !0);
        });
        return;
      }
      if (!this._uiManager.useNewAltTextWhenAddingImage && this._uiManager.useNewAltTextFlow && this.#I) {
        this._reportTelemetry({
          action: "pdfjs.image.image_added",
          data: {
            alt_text_modal: !1,
            alt_text_type: "empty"
          }
        });
        try {
          this.mlGuessAltText();
        } catch {
        }
      }
      this.div.focus();
    }
  }
  async mlGuessAltText(I = null, g = !0) {
    if (this.hasAltTextData())
      return null;
    const {
      mlManager: C
    } = this._uiManager;
    if (!C)
      throw new Error("No ML.");
    if (!await C.isEnabledFor("altText"))
      throw new Error("ML isn't enabled for alt text.");
    const {
      data: A,
      width: l,
      height: Z
    } = I || this.copyCanvas(null, null, !0).imageData, i = await C.guess({
      name: "altText",
      request: {
        data: A,
        width: l,
        height: Z,
        channels: A.length / (l * Z)
      }
    });
    if (!i)
      throw new Error("No response from the AI service.");
    if (i.error)
      throw new Error("Error from the AI service.");
    if (i.cancel)
      return null;
    if (!i.output)
      throw new Error("No valid response from the AI service.");
    const d = i.output;
    return await this.setGuessedAltText(d), g && !this.hasAltTextData() && (this.altTextData = {
      alt: d,
      decorative: !1
    }), d;
  }
  #W() {
    if (this.#g) {
      this._uiManager.enableWaiting(!0), this._uiManager.imageManager.getFromId(this.#g).then((C) => this.#G(C, !0)).finally(() => this.#B());
      return;
    }
    if (this.#A) {
      const C = this.#A;
      this.#A = null, this._uiManager.enableWaiting(!0), this.#C = this._uiManager.imageManager.getFromUrl(C).then((A) => this.#G(A)).finally(() => this.#B());
      return;
    }
    if (this.#Z) {
      const C = this.#Z;
      this.#Z = null, this._uiManager.enableWaiting(!0), this.#C = this._uiManager.imageManager.getFromFile(C).then((A) => this.#G(A)).finally(() => this.#B());
      return;
    }
    const I = document.createElement("input");
    I.type = "file", I.accept = ZC.join(",");
    const g = this._uiManager._signal;
    this.#C = new Promise((C) => {
      I.addEventListener("change", async () => {
        if (!I.files || I.files.length === 0)
          this.remove();
        else {
          this._uiManager.enableWaiting(!0);
          const A = await this._uiManager.imageManager.getFromFile(I.files[0]);
          this._reportTelemetry({
            action: "pdfjs.image.image_selected",
            data: {
              alt_text_modal: this._uiManager.useNewAltTextFlow
            }
          }), this.#G(A);
        }
        C();
      }, {
        signal: g
      }), I.addEventListener("cancel", () => {
        this.remove(), C();
      }, {
        signal: g
      });
    }).finally(() => this.#B()), I.click();
  }
  remove() {
    this.#g && (this.#I = null, this._uiManager.imageManager.deleteId(this.#g), this.#i?.remove(), this.#i = null, this.#c && (clearTimeout(this.#c), this.#c = null)), super.remove();
  }
  rebuild() {
    if (!this.parent) {
      this.#g && this.#W();
      return;
    }
    super.rebuild(), this.div !== null && (this.#g && this.#i === null && this.#W(), this.isAttachedToDOM || this.parent.add(this));
  }
  onceAdded(I) {
    this._isDraggable = !0, I && this.div.focus();
  }
  isEmpty() {
    return !(this.#C || this.#I || this.#A || this.#Z || this.#g || this.#d);
  }
  get toolbarButtons() {
    return [["altText", this.createAltText()]];
  }
  get isResizable() {
    return !0;
  }
  render() {
    if (this.div)
      return this.div;
    let I, g;
    return this._isCopy && (I = this.x, g = this.y), super.render(), this.div.hidden = !0, this.createAltText(), this.#d || (this.#I ? this.#o() : this.#W()), this._isCopy && this._moveAfterPaste(I, g), this._uiManager.addShouldRescale(this), this.div;
  }
  setCanvas(I, g) {
    const {
      id: C,
      bitmap: A
    } = this._uiManager.imageManager.getFromCanvas(I, g);
    g.remove(), C && this._uiManager.imageManager.isValidId(C) && (this.#g = C, A && (this.#I = A), this.#d = !1, this.#o());
  }
  _onResized() {
    this.onScaleChanging();
  }
  onScaleChanging() {
    if (!this.parent)
      return;
    this.#c !== null && clearTimeout(this.#c);
    const I = 200;
    this.#c = setTimeout(() => {
      this.#c = null, this.#h();
    }, I);
  }
  #o() {
    const {
      div: I
    } = this;
    let {
      width: g,
      height: C
    } = this.#I;
    const [A, l] = this.pageDimensions, Z = 0.75;
    if (this.width)
      g = this.width * A, C = this.height * l;
    else if (g > Z * A || C > Z * l) {
      const G = Math.min(Z * A / g, Z * l / C);
      g *= G, C *= G;
    }
    const [i, d] = this.parentDimensions;
    this.setDims(g * i / A, C * d / l), this._uiManager.enableWaiting(!1);
    const c = this.#i = document.createElement("canvas");
    c.setAttribute("role", "img"), this.addContainer(c), this.width = g / A, this.height = C / l, this._initialOptions?.isCentered ? this.center() : this.fixAndSetPosition(), this._initialOptions = null, (!this._uiManager.useNewAltTextWhenAddingImage || !this._uiManager.useNewAltTextFlow || this.annotationElementId) && (I.hidden = !1), this.#h(), this.#m || (this.parent.addUndoableEditor(this), this.#m = !0), this._reportTelemetry({
      action: "inserted_image"
    }), this.#l && this.div.setAttribute("aria-description", this.#l), this.annotationElementId || this._uiManager.a11yAlert("pdfjs-editor-stamp-added-alert");
  }
  copyCanvas(I, g, C = !1) {
    I || (I = 224);
    const {
      width: A,
      height: l
    } = this.#I, Z = new rI();
    let i = this.#I, d = A, c = l, G = null;
    if (g) {
      if (A > g || l > g) {
        const X = Math.min(g / A, g / l);
        d = Math.floor(A * X), c = Math.floor(l * X);
      }
      G = document.createElement("canvas");
      const m = G.width = Math.ceil(d * Z.sx), B = G.height = Math.ceil(c * Z.sy);
      this.#s || (i = this.#b(m, B));
      const o = G.getContext("2d");
      o.filter = this._uiManager.hcmFilter;
      let W = "white", Y = "#cfcfd8";
      this._uiManager.hcmFilter !== "none" ? Y = "black" : window.matchMedia?.("(prefers-color-scheme: dark)").matches && (W = "#8f8f9d", Y = "#42414d");
      const h = 15, a = h * Z.sx, w = h * Z.sy, n = new OffscreenCanvas(a * 2, w * 2), V = n.getContext("2d");
      V.fillStyle = W, V.fillRect(0, 0, a * 2, w * 2), V.fillStyle = Y, V.fillRect(0, 0, a, w), V.fillRect(a, w, a, w), o.fillStyle = o.createPattern(n, "repeat"), o.fillRect(0, 0, m, B), o.drawImage(i, 0, 0, i.width, i.height, 0, 0, m, B);
    }
    let b = null;
    if (C) {
      let m, B;
      if (Z.symmetric && i.width < I && i.height < I)
        m = i.width, B = i.height;
      else if (i = this.#I, A > I || l > I) {
        const Y = Math.min(I / A, I / l);
        m = Math.floor(A * Y), B = Math.floor(l * Y), this.#s || (i = this.#b(m, B));
      }
      const W = new OffscreenCanvas(m, B).getContext("2d", {
        willReadFrequently: !0
      });
      W.drawImage(i, 0, 0, i.width, i.height, 0, 0, m, B), b = {
        width: m,
        height: B,
        data: W.getImageData(0, 0, m, B).data
      };
    }
    return {
      canvas: G,
      width: d,
      height: c,
      imageData: b
    };
  }
  #b(I, g) {
    const {
      width: C,
      height: A
    } = this.#I;
    let l = C, Z = A, i = this.#I;
    for (; l > 2 * I || Z > 2 * g; ) {
      const d = l, c = Z;
      l > 2 * I && (l = l >= 16384 ? Math.floor(l / 2) - 1 : Math.ceil(l / 2)), Z > 2 * g && (Z = Z >= 16384 ? Math.floor(Z / 2) - 1 : Math.ceil(Z / 2));
      const G = new OffscreenCanvas(l, Z);
      G.getContext("2d").drawImage(i, 0, 0, d, c, 0, 0, l, Z), i = G.transferToImageBitmap();
    }
    return i;
  }
  #h() {
    const [I, g] = this.parentDimensions, {
      width: C,
      height: A
    } = this, l = new rI(), Z = Math.ceil(C * I * l.sx), i = Math.ceil(A * g * l.sy), d = this.#i;
    if (!d || d.width === Z && d.height === i)
      return;
    d.width = Z, d.height = i;
    const c = this.#s ? this.#I : this.#b(Z, i), G = d.getContext("2d");
    G.filter = this._uiManager.hcmFilter, G.drawImage(c, 0, 0, c.width, c.height, 0, 0, Z, i);
  }
  #a(I) {
    if (I) {
      if (this.#s) {
        const A = this._uiManager.imageManager.getSvgUrl(this.#g);
        if (A)
          return A;
      }
      const g = document.createElement("canvas");
      return {
        width: g.width,
        height: g.height
      } = this.#I, g.getContext("2d").drawImage(this.#I, 0, 0), g.toDataURL();
    }
    if (this.#s) {
      const [g, C] = this.pageDimensions, A = Math.round(this.width * g * bg.PDF_TO_CSS_UNITS), l = Math.round(this.height * C * bg.PDF_TO_CSS_UNITS), Z = new OffscreenCanvas(A, l);
      return Z.getContext("2d").drawImage(this.#I, 0, 0, this.#I.width, this.#I.height, 0, 0, A, l), Z.transferToImageBitmap();
    }
    return structuredClone(this.#I);
  }
  static async deserialize(I, g, C) {
    let A = null, l = !1;
    if (I instanceof Zl) {
      const {
        data: {
          rect: W,
          rotation: Y,
          id: h,
          structParent: a,
          popupRef: w,
          contentsObj: n
        },
        container: V,
        parent: {
          page: {
            pageNumber: X
          }
        },
        canvas: y
      } = I;
      let N, t;
      y ? (delete I.canvas, {
        id: N,
        bitmap: t
      } = C.imageManager.getFromCanvas(V.id, y), y.remove()) : (l = !0, I._hasNoCanvas = !0);
      const e = (await g._structTree.getAriaAttributes(`${JC}${h}`))?.get("aria-label") || "";
      A = I = {
        annotationType: O.STAMP,
        bitmapId: N,
        bitmap: t,
        pageIndex: X - 1,
        rect: W.slice(0),
        rotation: Y,
        annotationElementId: h,
        id: h,
        deleted: !1,
        accessibilityData: {
          decorative: !1,
          altText: e
        },
        isSvg: !1,
        structParent: a,
        popupRef: w,
        comment: n?.str || null
      };
    }
    const Z = await super.deserialize(I, g, C), {
      rect: i,
      bitmap: d,
      bitmapUrl: c,
      bitmapId: G,
      isSvg: b,
      accessibilityData: m
    } = I;
    l ? (C.addMissingCanvas(I.id, Z), Z.#d = !0) : G && C.imageManager.isValidId(G) ? (Z.#g = G, d && (Z.#I = d)) : Z.#A = c, Z.#s = b;
    const [B, o] = Z.pageDimensions;
    return Z.width = (i[2] - i[0]) / B, Z.height = (i[3] - i[1]) / o, m && (Z.altTextData = m), Z._initialData = A, I.comment && Z.setCommentData(I.comment), Z.#m = !!A, Z;
  }
  serialize(I = !1, g = null) {
    if (this.isEmpty())
      return null;
    if (this.deleted)
      return this.serializeDeleted();
    const C = {
      annotationType: O.STAMP,
      bitmapId: this.#g,
      pageIndex: this.pageIndex,
      rect: this.getPDFRect(),
      rotation: this.rotation,
      isSvg: this.#s,
      structTreeParentId: this._structTreeParentId
    };
    if (this.addComment(C), I)
      return C.bitmapUrl = this.#a(!0), C.accessibilityData = this.serializeAltText(!0), C.isCopy = !0, C;
    const {
      decorative: A,
      altText: l
    } = this.serializeAltText(!1);
    if (!A && l && (C.accessibilityData = {
      type: "Figure",
      alt: l
    }), this.annotationElementId) {
      const i = this.#Y(C);
      if (i.isSame)
        return null;
      i.isSameAltText ? delete C.accessibilityData : C.accessibilityData.structParent = this._initialData.structParent ?? -1;
    }
    if (C.id = this.annotationElementId, g === null)
      return C;
    g.stamps ||= /* @__PURE__ */ new Map();
    const Z = this.#s ? (C.rect[2] - C.rect[0]) * (C.rect[3] - C.rect[1]) : null;
    if (!g.stamps.has(this.#g))
      g.stamps.set(this.#g, {
        area: Z,
        serialized: C
      }), C.bitmap = this.#a(!1);
    else if (this.#s) {
      const i = g.stamps.get(this.#g);
      Z > i.area && (i.area = Z, i.serialized.bitmap.close(), i.serialized.bitmap = this.#a(!1));
    }
    return C;
  }
  #Y(I) {
    const {
      pageIndex: g,
      accessibilityData: {
        altText: C
      }
    } = this._initialData, A = I.pageIndex === g, l = (I.accessibilityData?.alt || "") === C;
    return {
      isSame: !this.hasEditedComment && !this._hasBeenMoved && !this._hasBeenResized && A && l,
      isSameAltText: l
    };
  }
  renderAnnotationElement(I) {
    if (this.deleted)
      return I.hide(), null;
    const g = {
      rect: this.getPDFRect()
    };
    return this.hasEditedComment && (g.popup = this.comment), I.updateEdited(g), null;
  }
}
class PI {
  #I;
  #g = !1;
  #C = null;
  #A = null;
  #Z = null;
  #l = /* @__PURE__ */ new Map();
  #i = !1;
  #d = !1;
  #c = !1;
  #s = null;
  #m = null;
  #G = null;
  #B = null;
  #W = null;
  #o = -1;
  #b;
  static _initialized = !1;
  static #h = new Map([aI, PC, UZ, bI, xI].map((I) => [I._editorType, I]));
  constructor({
    uiManager: I,
    pageIndex: g,
    div: C,
    structTreeLayer: A,
    accessibilityManager: l,
    annotationLayer: Z,
    drawLayer: i,
    textLayer: d,
    viewport: c,
    l10n: G
  }) {
    const b = [...PI.#h.values()];
    if (!PI._initialized) {
      PI._initialized = !0;
      for (const m of b)
        m.initialize(G, I);
    }
    I.registerEditorTypes(b), this.#b = I, this.pageIndex = g, this.div = C, this.#I = l, this.#C = Z, this.viewport = c, this.#G = d, this.drawLayer = i, this._structTree = A, this.#b.addLayer(this);
  }
  get isEmpty() {
    return this.#l.size === 0;
  }
  get isInvisible() {
    return this.isEmpty && this.#b.getMode() === O.NONE;
  }
  updateToolbar(I) {
    this.#b.updateToolbar(I);
  }
  updateMode(I = this.#b.getMode()) {
    switch (this.#w(), I) {
      case O.NONE:
        this.disableTextSelection(), this.togglePointerEvents(!1), this.toggleAnnotationLayerPointerEvents(!0), this.disableClick();
        return;
      case O.INK:
        this.disableTextSelection(), this.togglePointerEvents(!0), this.enableClick();
        break;
      case O.HIGHLIGHT:
        this.enableTextSelection(), this.togglePointerEvents(!1), this.disableClick();
        break;
      default:
        this.disableTextSelection(), this.togglePointerEvents(!0), this.enableClick();
    }
    this.toggleAnnotationLayerPointerEvents(!1);
    const {
      classList: g
    } = this.div;
    for (const C of PI.#h.values())
      g.toggle(`${C._type}Editing`, I === C._editorType);
    this.div.hidden = !1;
  }
  hasTextLayer(I) {
    return I === this.#G?.div;
  }
  setEditingState(I) {
    this.#b.setEditingState(I);
  }
  addCommands(I) {
    this.#b.addCommands(I);
  }
  cleanUndoStack(I) {
    this.#b.cleanUndoStack(I);
  }
  toggleDrawing(I = !1) {
    this.div.classList.toggle("drawing", !I);
  }
  togglePointerEvents(I = !1) {
    this.div.classList.toggle("disabled", !I);
  }
  toggleAnnotationLayerPointerEvents(I = !1) {
    this.#C?.div.classList.toggle("disabled", !I);
  }
  async enable() {
    this.#c = !0, this.div.tabIndex = 0, this.togglePointerEvents(!0), this.#W?.abort(), this.#W = null;
    const I = /* @__PURE__ */ new Set();
    for (const C of this.#l.values())
      C.enableEditing(), C.show(!0), C.annotationElementId && (this.#b.removeChangedExistingAnnotation(C), I.add(C.annotationElementId));
    if (!this.#C) {
      this.#c = !1;
      return;
    }
    const g = this.#C.getEditableAnnotations();
    for (const C of g) {
      if (C.hide(), this.#b.isDeletedAnnotationElement(C.data.id) || I.has(C.data.id))
        continue;
      const A = await this.deserialize(C);
      A && (this.addOrRebuild(A), A.enableEditing());
    }
    this.#c = !1;
  }
  disable() {
    if (this.#d = !0, this.div.tabIndex = -1, this.togglePointerEvents(!1), this.#G && !this.#W) {
      this.#W = new AbortController();
      const A = this.#b.combinedSignal(this.#W);
      this.#G.div.addEventListener("pointerdown", (l) => {
        const {
          clientX: i,
          clientY: d,
          timeStamp: c
        } = l, G = this.#o;
        if (c - G > 500) {
          this.#o = c;
          return;
        }
        this.#o = -1;
        const {
          classList: b
        } = this.div;
        b.toggle("getElements", !0);
        const m = document.elementsFromPoint(i, d);
        if (b.toggle("getElements", !1), !this.div.contains(m[0]))
          return;
        let B;
        const o = new RegExp(`^${RA}[0-9]+$`);
        for (const Y of m)
          if (o.test(Y.id)) {
            B = Y.id;
            break;
          }
        if (!B)
          return;
        const W = this.#l.get(B);
        W?.annotationElementId === null && (l.stopPropagation(), l.preventDefault(), W.dblclick());
      }, {
        signal: A,
        capture: !0
      });
    }
    const I = /* @__PURE__ */ new Map(), g = /* @__PURE__ */ new Map();
    for (const A of this.#l.values())
      if (A.disableEditing(), !!A.annotationElementId) {
        if (A.serialize() !== null) {
          I.set(A.annotationElementId, A);
          continue;
        } else
          g.set(A.annotationElementId, A);
        this.getEditableAnnotation(A.annotationElementId)?.show(), A.remove();
      }
    if (this.#C) {
      const A = this.#C.getEditableAnnotations();
      for (const l of A) {
        const {
          id: Z
        } = l.data;
        if (this.#b.isDeletedAnnotationElement(Z)) {
          l.updateEdited({
            deleted: !0
          });
          continue;
        }
        let i = g.get(Z);
        if (i) {
          i.resetAnnotationElement(l), i.show(!1), l.show();
          continue;
        }
        i = I.get(Z), i && (this.#b.addChangedExistingAnnotation(i), i.renderAnnotationElement(l) && i.show(!1)), l.show();
      }
    }
    this.#w(), this.isEmpty && (this.div.hidden = !0);
    const {
      classList: C
    } = this.div;
    for (const A of PI.#h.values())
      C.remove(`${A._type}Editing`);
    this.disableTextSelection(), this.toggleAnnotationLayerPointerEvents(!0), this.#d = !1;
  }
  getEditableAnnotation(I) {
    return this.#C?.getEditableAnnotation(I) || null;
  }
  setActiveEditor(I) {
    this.#b.getActive() !== I && this.#b.setActiveEditor(I);
  }
  enableTextSelection() {
    if (this.div.tabIndex = -1, this.#G?.div && !this.#B) {
      this.#B = new AbortController();
      const I = this.#b.combinedSignal(this.#B);
      this.#G.div.addEventListener("pointerdown", this.#a.bind(this), {
        signal: I
      }), this.#G.div.classList.add("highlighting");
    }
  }
  disableTextSelection() {
    this.div.tabIndex = 0, this.#G?.div && this.#B && (this.#B.abort(), this.#B = null, this.#G.div.classList.remove("highlighting"));
  }
  #a(I) {
    this.#b.unselectAll();
    const {
      target: g
    } = I;
    if (g === this.#G.div || (g.getAttribute("role") === "img" || g.classList.contains("endOfContent")) && this.#G.div.contains(g)) {
      const {
        isMac: C
      } = XI.platform;
      if (I.button !== 0 || I.ctrlKey && C)
        return;
      this.#b.showAllEditors("highlight", !0, !0), this.#G.div.classList.add("free"), this.toggleDrawing(), bI.startHighlighting(this, this.#b.direction === "ltr", {
        target: this.#G.div,
        x: I.x,
        y: I.y
      }), this.#G.div.addEventListener("pointerup", () => {
        this.#G.div.classList.remove("free"), this.toggleDrawing(!0);
      }, {
        once: !0,
        signal: this.#b._signal
      }), I.preventDefault();
    }
  }
  enableClick() {
    if (this.#A)
      return;
    this.#A = new AbortController();
    const I = this.#b.combinedSignal(this.#A);
    this.div.addEventListener("pointerdown", this.pointerdown.bind(this), {
      signal: I
    });
    const g = this.pointerup.bind(this);
    this.div.addEventListener("pointerup", g, {
      signal: I
    }), this.div.addEventListener("pointercancel", g, {
      signal: I
    });
  }
  disableClick() {
    this.#A?.abort(), this.#A = null;
  }
  attach(I) {
    this.#l.set(I.id, I);
    const {
      annotationElementId: g
    } = I;
    g && this.#b.isDeletedAnnotationElement(g) && this.#b.removeDeletedAnnotationElement(I);
  }
  detach(I) {
    this.#l.delete(I.id), this.#I?.removePointerInTextLayer(I.contentDiv), !this.#d && I.annotationElementId && this.#b.addDeletedAnnotationElement(I);
  }
  remove(I) {
    this.detach(I), this.#b.removeEditor(I), I.div.remove(), I.isAttachedToDOM = !1;
  }
  changeParent(I) {
    I.parent !== this && (I.parent && I.annotationElementId && (this.#b.addDeletedAnnotationElement(I.annotationElementId), T.deleteAnnotationElement(I), I.annotationElementId = null), this.attach(I), I.parent?.detach(I), I.setParent(this), I.div && I.isAttachedToDOM && (I.div.remove(), this.div.append(I.div)));
  }
  add(I) {
    if (!(I.parent === this && I.isAttachedToDOM)) {
      if (this.changeParent(I), this.#b.addEditor(I), this.attach(I), !I.isAttachedToDOM) {
        const g = I.render();
        this.div.append(g), I.isAttachedToDOM = !0;
      }
      I.fixAndSetPosition(), I.onceAdded(!this.#c), this.#b.addToAnnotationStorage(I), I._reportTelemetry(I.telemetryInitialData);
    }
  }
  moveEditorInDOM(I) {
    if (!I.isAttachedToDOM)
      return;
    const {
      activeElement: g
    } = document;
    I.div.contains(g) && !this.#Z && (I._focusEventsAllowed = !1, this.#Z = setTimeout(() => {
      this.#Z = null, I.div.contains(document.activeElement) ? I._focusEventsAllowed = !0 : (I.div.addEventListener("focusin", () => {
        I._focusEventsAllowed = !0;
      }, {
        once: !0,
        signal: this.#b._signal
      }), g.focus());
    }, 0)), I._structTreeParentId = this.#I?.moveElementInDOM(this.div, I.div, I.contentDiv, !0);
  }
  addOrRebuild(I) {
    I.needsToBeRebuilt() ? (I.parent ||= this, I.rebuild(), I.show()) : this.add(I);
  }
  addUndoableEditor(I) {
    const g = () => I._uiManager.rebuild(I), C = () => {
      I.remove();
    };
    this.addCommands({
      cmd: g,
      undo: C,
      mustExec: !1
    });
  }
  getNextId() {
    return this.#b.getId();
  }
  get #Y() {
    return PI.#h.get(this.#b.getMode());
  }
  combinedSignal(I) {
    return this.#b.combinedSignal(I);
  }
  #X(I) {
    const g = this.#Y;
    return g ? new g.prototype.constructor(I) : null;
  }
  canCreateNewEmptyEditor() {
    return this.#Y?.canCreateNewEmptyEditor();
  }
  async pasteEditor(I, g) {
    this.updateToolbar(I), await this.#b.updateMode(I.mode);
    const {
      offsetX: C,
      offsetY: A
    } = this.#n(), l = this.getNextId(), Z = this.#X({
      parent: this,
      id: l,
      x: C,
      y: A,
      uiManager: this.#b,
      isCentered: !0,
      ...g
    });
    Z && this.add(Z);
  }
  async deserialize(I) {
    return await PI.#h.get(I.annotationType ?? I.annotationEditorType)?.deserialize(I, this, this.#b) || null;
  }
  createAndAddNewEditor(I, g, C = {}) {
    const A = this.getNextId(), l = this.#X({
      parent: this,
      id: A,
      x: I.offsetX,
      y: I.offsetY,
      uiManager: this.#b,
      isCentered: g,
      ...C
    });
    return l && this.add(l), l;
  }
  #n() {
    const {
      x: I,
      y: g,
      width: C,
      height: A
    } = this.div.getBoundingClientRect(), l = Math.max(0, I), Z = Math.max(0, g), i = Math.min(window.innerWidth, I + C), d = Math.min(window.innerHeight, g + A), c = (l + i) / 2 - I, G = (Z + d) / 2 - g, [b, m] = this.viewport.rotation % 180 === 0 ? [c, G] : [G, c];
    return {
      offsetX: b,
      offsetY: m
    };
  }
  addNewEditor(I = {}) {
    this.createAndAddNewEditor(this.#n(), !0, I);
  }
  setSelected(I) {
    this.#b.setSelected(I);
  }
  toggleSelected(I) {
    this.#b.toggleSelected(I);
  }
  unselect(I) {
    this.#b.unselect(I);
  }
  pointerup(I) {
    const {
      isMac: g
    } = XI.platform;
    if (I.button !== 0 || I.ctrlKey && g || I.target !== this.div || !this.#i || (this.#i = !1, this.#Y?.isDrawer && this.#Y.supportMultipleDrawings))
      return;
    if (!this.#g) {
      this.#g = !0;
      return;
    }
    const C = this.#b.getMode();
    if (C === O.STAMP || C === O.SIGNATURE) {
      this.#b.unselectAll();
      return;
    }
    this.createAndAddNewEditor(I, !1);
  }
  pointerdown(I) {
    if (this.#b.getMode() === O.HIGHLIGHT && this.enableTextSelection(), this.#i) {
      this.#i = !1;
      return;
    }
    const {
      isMac: g
    } = XI.platform;
    if (I.button !== 0 || I.ctrlKey && g || I.target !== this.div)
      return;
    if (this.#i = !0, this.#Y?.isDrawer) {
      this.startDrawingSession(I);
      return;
    }
    const C = this.#b.getActive();
    this.#g = !C || C.isEmpty();
  }
  startDrawingSession(I) {
    if (this.div.focus({
      preventScroll: !0
    }), this.#s) {
      this.#Y.startDrawing(this, this.#b, !1, I);
      return;
    }
    this.#b.setCurrentDrawingSession(this), this.#s = new AbortController();
    const g = this.#b.combinedSignal(this.#s);
    this.div.addEventListener("blur", ({
      relatedTarget: C
    }) => {
      C && !this.div.contains(C) && (this.#m = null, this.commitOrRemove());
    }, {
      signal: g
    }), this.#Y.startDrawing(this, this.#b, !1, I);
  }
  pause(I) {
    if (I) {
      const {
        activeElement: g
      } = document;
      this.div.contains(g) && (this.#m = g);
      return;
    }
    this.#m && setTimeout(() => {
      this.#m?.focus(), this.#m = null;
    }, 0);
  }
  endDrawingSession(I = !1) {
    return this.#s ? (this.#b.setCurrentDrawingSession(null), this.#s.abort(), this.#s = null, this.#m = null, this.#Y.endDrawing(I)) : null;
  }
  findNewParent(I, g, C) {
    const A = this.#b.findParent(g, C);
    return A === null || A === this ? !1 : (A.changeParent(I), !0);
  }
  commitOrRemove() {
    return this.#s ? (this.endDrawingSession(), !0) : !1;
  }
  onScaleChanging() {
    this.#s && this.#Y.onScaleChangingWhenDrawing(this);
  }
  destroy() {
    this.commitOrRemove(), this.#b.getActive()?.parent === this && (this.#b.commitOrRemove(), this.#b.setActiveEditor(null)), this.#Z && (clearTimeout(this.#Z), this.#Z = null);
    for (const I of this.#l.values())
      this.#I?.removePointerInTextLayer(I.contentDiv), I.setParent(null), I.isAttachedToDOM = !1, I.div.remove();
    this.div = null, this.#l.clear(), this.#b.removeLayer(this);
  }
  #w() {
    for (const I of this.#l.values())
      I.isEmpty() && I.remove();
  }
  render({
    viewport: I
  }) {
    this.viewport = I, Zg(this.div, I);
    for (const g of this.#b.getEditors(this.pageIndex))
      this.add(g), g.rebuild();
    this.updateMode();
  }
  update({
    viewport: I
  }) {
    this.#b.commitOrRemove(), this.#w();
    const g = this.viewport.rotation, C = I.rotation;
    if (this.viewport = I, Zg(this.div, {
      rotation: C
    }), g !== C)
      for (const A of this.#l.values())
        A.rotate(C);
  }
  get pageDimensions() {
    const {
      pageWidth: I,
      pageHeight: g
    } = this.viewport.rawDims;
    return [I, g];
  }
  get scale() {
    return this.#b.viewParameters.realScale;
  }
}
class VI {
  #I = null;
  #g = /* @__PURE__ */ new Map();
  #C = /* @__PURE__ */ new Map();
  static #A = 0;
  constructor({
    pageIndex: I
  }) {
    this.pageIndex = I;
  }
  setParent(I) {
    if (!this.#I) {
      this.#I = I;
      return;
    }
    if (this.#I !== I) {
      if (this.#g.size > 0)
        for (const g of this.#g.values())
          g.remove(), I.append(g);
      this.#I = I;
    }
  }
  static get _svgFactory() {
    return P(this, "_svgFactory", new zg());
  }
  static #Z(I, [g, C, A, l]) {
    const {
      style: Z
    } = I;
    Z.top = `${100 * C}%`, Z.left = `${100 * g}%`, Z.width = `${100 * A}%`, Z.height = `${100 * l}%`;
  }
  #l() {
    const I = VI._svgFactory.create(1, 1, !0);
    return this.#I.append(I), I.setAttribute("aria-hidden", !0), I;
  }
  #i(I, g) {
    const C = VI._svgFactory.createElement("clipPath");
    I.append(C);
    const A = `clip_${g}`;
    C.setAttribute("id", A), C.setAttribute("clipPathUnits", "objectBoundingBox");
    const l = VI._svgFactory.createElement("use");
    return C.append(l), l.setAttribute("href", `#${g}`), l.classList.add("clip"), A;
  }
  #d(I, g) {
    for (const [C, A] of Object.entries(g))
      A === null ? I.removeAttribute(C) : I.setAttribute(C, A);
  }
  draw(I, g = !1, C = !1) {
    const A = VI.#A++, l = this.#l(), Z = VI._svgFactory.createElement("defs");
    l.append(Z);
    const i = VI._svgFactory.createElement("path");
    Z.append(i);
    const d = `path_p${this.pageIndex}_${A}`;
    i.setAttribute("id", d), i.setAttribute("vector-effect", "non-scaling-stroke"), g && this.#C.set(A, i);
    const c = C ? this.#i(Z, d) : null, G = VI._svgFactory.createElement("use");
    return l.append(G), G.setAttribute("href", `#${d}`), this.updateProperties(l, I), this.#g.set(A, l), {
      id: A,
      clipPathId: `url(#${c})`
    };
  }
  drawOutline(I, g) {
    const C = VI.#A++, A = this.#l(), l = VI._svgFactory.createElement("defs");
    A.append(l);
    const Z = VI._svgFactory.createElement("path");
    l.append(Z);
    const i = `path_p${this.pageIndex}_${C}`;
    Z.setAttribute("id", i), Z.setAttribute("vector-effect", "non-scaling-stroke");
    let d;
    if (g) {
      const b = VI._svgFactory.createElement("mask");
      l.append(b), d = `mask_p${this.pageIndex}_${C}`, b.setAttribute("id", d), b.setAttribute("maskUnits", "objectBoundingBox");
      const m = VI._svgFactory.createElement("rect");
      b.append(m), m.setAttribute("width", "1"), m.setAttribute("height", "1"), m.setAttribute("fill", "white");
      const B = VI._svgFactory.createElement("use");
      b.append(B), B.setAttribute("href", `#${i}`), B.setAttribute("stroke", "none"), B.setAttribute("fill", "black"), B.setAttribute("fill-rule", "nonzero"), B.classList.add("mask");
    }
    const c = VI._svgFactory.createElement("use");
    A.append(c), c.setAttribute("href", `#${i}`), d && c.setAttribute("mask", `url(#${d})`);
    const G = c.cloneNode();
    return A.append(G), c.classList.add("mainOutline"), G.classList.add("secondaryOutline"), this.updateProperties(A, I), this.#g.set(C, A), C;
  }
  finalizeDraw(I, g) {
    this.#C.delete(I), this.updateProperties(I, g);
  }
  updateProperties(I, g) {
    if (!g)
      return;
    const {
      root: C,
      bbox: A,
      rootClass: l,
      path: Z
    } = g, i = typeof I == "number" ? this.#g.get(I) : I;
    if (i) {
      if (C && this.#d(i, C), A && VI.#Z(i, A), l) {
        const {
          classList: d
        } = i;
        for (const [c, G] of Object.entries(l))
          d.toggle(c, G);
      }
      if (Z) {
        const c = i.firstChild.firstChild;
        this.#d(c, Z);
      }
    }
  }
  updateParent(I, g) {
    if (g === this)
      return;
    const C = this.#g.get(I);
    C && (g.#I.append(C), this.#g.delete(I), g.#g.set(I, C));
  }
  remove(I) {
    this.#C.delete(I), this.#I !== null && (this.#g.get(I).remove(), this.#g.delete(I));
  }
  destroy() {
    this.#I = null;
    for (const I of this.#g.values())
      I.remove();
    this.#g.clear(), this.#C.clear();
  }
}
globalThis._pdfjsTestingUtils = {
  HighlightOutliner: MC
};
globalThis.pdfjsLib = {
  AbortException: gg,
  AnnotationEditorLayer: PI,
  AnnotationEditorParamsType: f,
  AnnotationEditorType: O,
  AnnotationEditorUIManager: Cg,
  AnnotationLayer: BC,
  AnnotationMode: $I,
  AnnotationType: GI,
  build: Il,
  ColorPicker: pI,
  createValidAbsoluteUrl: SC,
  DOMSVGFactory: zg,
  DrawLayer: VI,
  FeatureTest: XI,
  fetchData: tg,
  getDocument: jC,
  getFilenameFromUrl: DA,
  getPdfFilenameFromUrl: SA,
  getRGB: Qg,
  getUuid: FC,
  getXfaPageViewport: pA,
  GlobalWorkerOptions: Ig,
  ImageKind: lg,
  InvalidPDFException: AC,
  isDataScheme: Tg,
  isPdfFile: bC,
  isValidExplicitDest: kA,
  MathClamp: RI,
  noContextMenu: JI,
  normalizeUnicode: MA,
  OPS: sI,
  OutputScale: rI,
  PasswordResponses: HA,
  PDFDataRangeTransport: UC,
  PDFDateString: lC,
  PDFWorker: yg,
  PermissionFlag: eA,
  PixelsPerInch: bg,
  RenderingCancelledException: GC,
  ResponseException: pg,
  setLayerDimensions: Zg,
  shadow: P,
  SignatureExtractor: ig,
  stopEvent: mI,
  SupportedImageMimeTypes: ZC,
  TextLayer: tI,
  TouchManager: jg,
  updateUrlHash: pC,
  Util: J,
  VerbosityLevel: Ng,
  version: $A,
  XfaLayer: vC
};
const vZ = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  AbortException: gg,
  AnnotationEditorLayer: PI,
  AnnotationEditorParamsType: f,
  AnnotationEditorType: O,
  AnnotationEditorUIManager: Cg,
  AnnotationLayer: BC,
  AnnotationMode: $I,
  AnnotationType: GI,
  ColorPicker: pI,
  DOMSVGFactory: zg,
  DrawLayer: VI,
  FeatureTest: XI,
  GlobalWorkerOptions: Ig,
  ImageKind: lg,
  InvalidPDFException: AC,
  MathClamp: RI,
  OPS: sI,
  OutputScale: rI,
  PDFDataRangeTransport: UC,
  PDFDateString: lC,
  PDFWorker: yg,
  PasswordResponses: HA,
  PermissionFlag: eA,
  PixelsPerInch: bg,
  RenderingCancelledException: GC,
  ResponseException: pg,
  SignatureExtractor: ig,
  SupportedImageMimeTypes: ZC,
  TextLayer: tI,
  TouchManager: jg,
  Util: J,
  VerbosityLevel: Ng,
  XfaLayer: vC,
  build: Il,
  createValidAbsoluteUrl: SC,
  fetchData: tg,
  getDocument: jC,
  getFilenameFromUrl: DA,
  getPdfFilenameFromUrl: SA,
  getRGB: Qg,
  getUuid: FC,
  getXfaPageViewport: pA,
  isDataScheme: Tg,
  isPdfFile: bC,
  isValidExplicitDest: kA,
  noContextMenu: JI,
  normalizeUnicode: MA,
  setLayerDimensions: Zg,
  shadow: P,
  stopEvent: mI,
  updateUrlHash: pC,
  version: $A
}, Symbol.toStringTag, { value: "Module" })), xZ = "data:text/javascript;base64,LyoqCiAqIEBsaWNzdGFydCBUaGUgZm9sbG93aW5nIGlzIHRoZSBlbnRpcmUgbGljZW5zZSBub3RpY2UgZm9yIHRoZQogKiBKYXZhU2NyaXB0IGNvZGUgaW4gdGhpcyBwYWdlCiAqCiAqIENvcHlyaWdodCAyMDI0IE1vemlsbGEgRm91bmRhdGlvbgogKgogKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKICoKICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogKgogKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgogKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgogKgogKiBAbGljZW5kIFRoZSBhYm92ZSBpcyB0aGUgZW50aXJlIGxpY2Vuc2Ugbm90aWNlIGZvciB0aGUKICogSmF2YVNjcmlwdCBjb2RlIGluIHRoaXMgcGFnZQogKi8KCi8qKgogKiBwZGZqc1ZlcnNpb24gPSA1LjQuMTQ5CiAqIHBkZmpzQnVpbGQgPSA5ZTJlOWUyMDkKICovCi8qKioqKiovIHZhciBfX3dlYnBhY2tfbW9kdWxlc19fID0gKHsKCi8qKiovIDM0OgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIGlzQ2FsbGFibGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5MDEpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHsKICByZXR1cm4gdHlwZW9mIGl0ID09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiBpc0NhbGxhYmxlKGl0KTsKfTsKCgovKioqLyB9KSwKCi8qKiovIDgxOgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIGNhbGwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk1NjUpOwp2YXIgYUNhbGxhYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MzA2KTsKdmFyIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NTUxKTsKdmFyIHRyeVRvU3RyaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2ODIzKTsKdmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NTEpOwoKdmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCwgdXNpbmdJdGVyYXRvcikgewogIHZhciBpdGVyYXRvck1ldGhvZCA9IGFyZ3VtZW50cy5sZW5ndGggPCAyID8gZ2V0SXRlcmF0b3JNZXRob2QoYXJndW1lbnQpIDogdXNpbmdJdGVyYXRvcjsKICBpZiAoYUNhbGxhYmxlKGl0ZXJhdG9yTWV0aG9kKSkgcmV0dXJuIGFuT2JqZWN0KGNhbGwoaXRlcmF0b3JNZXRob2QsIGFyZ3VtZW50KSk7CiAgdGhyb3cgbmV3ICRUeXBlRXJyb3IodHJ5VG9TdHJpbmcoYXJndW1lbnQpICsgJyBpcyBub3QgaXRlcmFibGUnKTsKfTsKCgovKioqLyB9KSwKCi8qKiovIDExNjoKLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyICQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY1MTgpOwp2YXIgY2FsbCA9IF9fd2VicGFja19yZXF1aXJlX18oOTU2NSk7CnZhciBpdGVyYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNjUyKTsKdmFyIGFDYWxsYWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oOTMwNik7CnZhciBhbk9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oODU1MSk7CnZhciBnZXRJdGVyYXRvckRpcmVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTc2Nyk7CnZhciBpdGVyYXRvckNsb3NlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NTM5KTsKdmFyIGl0ZXJhdG9ySGVscGVyV2l0aG91dENsb3NpbmdPbkVhcmx5RXJyb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ1NDkpOwoKdmFyIGZpbmRXaXRob3V0Q2xvc2luZ09uRWFybHlFcnJvciA9IGl0ZXJhdG9ySGVscGVyV2l0aG91dENsb3NpbmdPbkVhcmx5RXJyb3IoJ2ZpbmQnLCBUeXBlRXJyb3IpOwoKLy8gYEl0ZXJhdG9yLnByb3RvdHlwZS5maW5kYCBtZXRob2QKLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pdGVyYXRvci5wcm90b3R5cGUuZmluZAokKHsgdGFyZ2V0OiAnSXRlcmF0b3InLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiBmaW5kV2l0aG91dENsb3NpbmdPbkVhcmx5RXJyb3IgfSwgewogIGZpbmQ6IGZ1bmN0aW9uIGZpbmQocHJlZGljYXRlKSB7CiAgICBhbk9iamVjdCh0aGlzKTsKICAgIHRyeSB7CiAgICAgIGFDYWxsYWJsZShwcmVkaWNhdGUpOwogICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgaXRlcmF0b3JDbG9zZSh0aGlzLCAndGhyb3cnLCBlcnJvcik7CiAgICB9CgogICAgaWYgKGZpbmRXaXRob3V0Q2xvc2luZ09uRWFybHlFcnJvcikgcmV0dXJuIGNhbGwoZmluZFdpdGhvdXRDbG9zaW5nT25FYXJseUVycm9yLCB0aGlzLCBwcmVkaWNhdGUpOwoKICAgIHZhciByZWNvcmQgPSBnZXRJdGVyYXRvckRpcmVjdCh0aGlzKTsKICAgIHZhciBjb3VudGVyID0gMDsKICAgIHJldHVybiBpdGVyYXRlKHJlY29yZCwgZnVuY3Rpb24gKHZhbHVlLCBzdG9wKSB7CiAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGNvdW50ZXIrKykpIHJldHVybiBzdG9wKHZhbHVlKTsKICAgIH0sIHsgSVNfUkVDT1JEOiB0cnVlLCBJTlRFUlJVUFRFRDogdHJ1ZSB9KS5yZXN1bHQ7CiAgfQp9KTsKCgovKioqLyB9KSwKCi8qKiovIDI4MzoKLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCnZhciB1bmN1cnJ5VGhpcyA9IF9fd2VicGFja19yZXF1aXJlX18oOTUwNCk7CnZhciBmYWlscyA9IF9fd2VicGFja19yZXF1aXJlX18oOTAzOSk7CnZhciBpc0NhbGxhYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OTAxKTsKdmFyIGhhc093biA9IF9fd2VicGFja19yZXF1aXJlX18oOTI5Nyk7CnZhciBERVNDUklQVE9SUyA9IF9fd2VicGFja19yZXF1aXJlX18oMzcyNCk7CnZhciBDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDM1MCkuQ09ORklHVVJBQkxFKTsKdmFyIGluc3BlY3RTb3VyY2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM3MDYpOwp2YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTE4MSk7Cgp2YXIgZW5mb3JjZUludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmVuZm9yY2U7CnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXQ7CnZhciAkU3RyaW5nID0gU3RyaW5nOwovLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmUKdmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5Owp2YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7CnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7CnZhciBqb2luID0gdW5jdXJyeVRoaXMoW10uam9pbik7Cgp2YXIgQ09ORklHVVJBQkxFX0xFTkdUSCA9IERFU0NSSVBUT1JTICYmICFmYWlscyhmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIGRlZmluZVByb3BlcnR5KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgJ2xlbmd0aCcsIHsgdmFsdWU6IDggfSkubGVuZ3RoICE9PSA4Owp9KTsKCnZhciBURU1QTEFURSA9IFN0cmluZyhTdHJpbmcpLnNwbGl0KCdTdHJpbmcnKTsKCnZhciBtYWtlQnVpbHRJbiA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHZhbHVlLCBuYW1lLCBvcHRpb25zKSB7CiAgaWYgKHN0cmluZ1NsaWNlKCRTdHJpbmcobmFtZSksIDAsIDcpID09PSAnU3ltYm9sKCcpIHsKICAgIG5hbWUgPSAnWycgKyByZXBsYWNlKCRTdHJpbmcobmFtZSksIC9eU3ltYm9sXCgoW14pXSopXCkuKiQvLCAnJDEnKSArICddJzsKICB9CiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5nZXR0ZXIpIG5hbWUgPSAnZ2V0ICcgKyBuYW1lOwogIGlmIChvcHRpb25zICYmIG9wdGlvbnMuc2V0dGVyKSBuYW1lID0gJ3NldCAnICsgbmFtZTsKICBpZiAoIWhhc093bih2YWx1ZSwgJ25hbWUnKSB8fCAoQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUgJiYgdmFsdWUubmFtZSAhPT0gbmFtZSkpIHsKICAgIGlmIChERVNDUklQVE9SUykgZGVmaW5lUHJvcGVydHkodmFsdWUsICduYW1lJywgeyB2YWx1ZTogbmFtZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pOwogICAgZWxzZSB2YWx1ZS5uYW1lID0gbmFtZTsKICB9CiAgaWYgKENPTkZJR1VSQUJMRV9MRU5HVEggJiYgb3B0aW9ucyAmJiBoYXNPd24ob3B0aW9ucywgJ2FyaXR5JykgJiYgdmFsdWUubGVuZ3RoICE9PSBvcHRpb25zLmFyaXR5KSB7CiAgICBkZWZpbmVQcm9wZXJ0eSh2YWx1ZSwgJ2xlbmd0aCcsIHsgdmFsdWU6IG9wdGlvbnMuYXJpdHkgfSk7CiAgfQogIHRyeSB7CiAgICBpZiAob3B0aW9ucyAmJiBoYXNPd24ob3B0aW9ucywgJ2NvbnN0cnVjdG9yJykgJiYgb3B0aW9ucy5jb25zdHJ1Y3RvcikgewogICAgICBpZiAoREVTQ1JJUFRPUlMpIGRlZmluZVByb3BlcnR5KHZhbHVlLCAncHJvdG90eXBlJywgeyB3cml0YWJsZTogZmFsc2UgfSk7CiAgICAvLyBpbiBWOCB+IENocm9tZSA1MywgcHJvdG90eXBlcyBvZiBzb21lIG1ldGhvZHMsIGxpa2UgYEFycmF5LnByb3RvdHlwZS52YWx1ZXNgLCBhcmUgbm9uLXdyaXRhYmxlCiAgICB9IGVsc2UgaWYgKHZhbHVlLnByb3RvdHlwZSkgdmFsdWUucHJvdG90eXBlID0gdW5kZWZpbmVkOwogIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH0KICB2YXIgc3RhdGUgPSBlbmZvcmNlSW50ZXJuYWxTdGF0ZSh2YWx1ZSk7CiAgaWYgKCFoYXNPd24oc3RhdGUsICdzb3VyY2UnKSkgewogICAgc3RhdGUuc291cmNlID0gam9pbihURU1QTEFURSwgdHlwZW9mIG5hbWUgPT0gJ3N0cmluZycgPyBuYW1lIDogJycpOwogIH0gcmV0dXJuIHZhbHVlOwp9OwoKLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlCi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1leHRlbmQtbmF0aXZlIC0tIHJlcXVpcmVkCkZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZyA9IG1ha2VCdWlsdEluKGZ1bmN0aW9uIHRvU3RyaW5nKCkgewogIHJldHVybiBpc0NhbGxhYmxlKHRoaXMpICYmIGdldEludGVybmFsU3RhdGUodGhpcykuc291cmNlIHx8IGluc3BlY3RTb3VyY2UodGhpcyk7Cn0sICd0b1N0cmluZycpOwoKCi8qKiovIH0pLAoKLyoqKi8gMzUwOgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIERFU0NSSVBUT1JTID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNzI0KTsKdmFyIGhhc093biA9IF9fd2VicGFja19yZXF1aXJlX18oOTI5Nyk7Cgp2YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7Ci8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmUKdmFyIGdldERlc2NyaXB0b3IgPSBERVNDUklQVE9SUyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOwoKdmFyIEVYSVNUUyA9IGhhc093bihGdW5jdGlvblByb3RvdHlwZSwgJ25hbWUnKTsKLy8gYWRkaXRpb25hbCBwcm90ZWN0aW9uIGZyb20gbWluaWZpZWQgLyBtYW5nbGVkIC8gZHJvcHBlZCBmdW5jdGlvbiBuYW1lcwp2YXIgUFJPUEVSID0gRVhJU1RTICYmIChmdW5jdGlvbiBzb21ldGhpbmcoKSB7IC8qIGVtcHR5ICovIH0pLm5hbWUgPT09ICdzb21ldGhpbmcnOwp2YXIgQ09ORklHVVJBQkxFID0gRVhJU1RTICYmICghREVTQ1JJUFRPUlMgfHwgKERFU0NSSVBUT1JTICYmIGdldERlc2NyaXB0b3IoRnVuY3Rpb25Qcm90b3R5cGUsICduYW1lJykuY29uZmlndXJhYmxlKSk7Cgptb2R1bGUuZXhwb3J0cyA9IHsKICBFWElTVFM6IEVYSVNUUywKICBQUk9QRVI6IFBST1BFUiwKICBDT05GSUdVUkFCTEU6IENPTkZJR1VSQUJMRQp9OwoKCi8qKiovIH0pLAoKLyoqKi8gMzk3OgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIGdldEJ1aWx0SW4gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc3NTEpOwoKbW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdkb2N1bWVudCcsICdkb2N1bWVudEVsZW1lbnQnKTsKCgovKioqLyB9KSwKCi8qKiovIDQyMToKLyoqKi8gKChtb2R1bGUpID0+IHsKCgptb2R1bGUuZXhwb3J0cyA9IHt9OwoKCi8qKiovIH0pLAoKLyoqKi8gNDU2OgovKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgJCA9IF9fd2VicGFja19yZXF1aXJlX18oNjUxOCk7CnZhciBnbG9iYWxUaGlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NTc2KTsKdmFyIHVuY3VycnlUaGlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NTA0KTsKdmFyIGFuVWludDhBcnJheSA9IF9fd2VicGFja19yZXF1aXJlX18oNDE1NCk7CnZhciBub3REZXRhY2hlZCA9IF9fd2VicGFja19yZXF1aXJlX18oNTE2OSk7Cgp2YXIgbnVtYmVyVG9TdHJpbmcgPSB1bmN1cnJ5VGhpcygxLjEudG9TdHJpbmcpOwoKdmFyIFVpbnQ4QXJyYXkgPSBnbG9iYWxUaGlzLlVpbnQ4QXJyYXk7Cgp2YXIgSU5DT1JSRUNUX0JFSEFWSU9SX09SX0RPRVNOVF9FWElTVFMgPSAhVWludDhBcnJheSB8fCAhVWludDhBcnJheS5wcm90b3R5cGUudG9IZXggfHwgIShmdW5jdGlvbiAoKSB7CiAgdHJ5IHsKICAgIHZhciB0YXJnZXQgPSBuZXcgVWludDhBcnJheShbMjU1LCAyNTUsIDI1NSwgMjU1LCAyNTUsIDI1NSwgMjU1LCAyNTVdKTsKICAgIHJldHVybiB0YXJnZXQudG9IZXgoKSA9PT0gJ2ZmZmZmZmZmZmZmZmZmZmYnOwogIH0gY2F0Y2ggKGVycm9yKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQp9KSgpOwoKLy8gYFVpbnQ4QXJyYXkucHJvdG90eXBlLnRvSGV4YCBtZXRob2QKLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtYXJyYXlidWZmZXItYmFzZTY0CmlmIChVaW50OEFycmF5KSAkKHsgdGFyZ2V0OiAnVWludDhBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVF9CRUhBVklPUl9PUl9ET0VTTlRfRVhJU1RTIH0sIHsKICB0b0hleDogZnVuY3Rpb24gdG9IZXgoKSB7CiAgICBhblVpbnQ4QXJyYXkodGhpcyk7CiAgICBub3REZXRhY2hlZCh0aGlzLmJ1ZmZlcik7CiAgICB2YXIgcmVzdWx0ID0gJyc7CiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gdGhpcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICB2YXIgaGV4ID0gbnVtYmVyVG9TdHJpbmcodGhpc1tpXSwgMTYpOwogICAgICByZXN1bHQgKz0gaGV4Lmxlbmd0aCA9PT0gMSA/ICcwJyArIGhleCA6IGhleDsKICAgIH0KICAgIHJldHVybiByZXN1bHQ7CiAgfQp9KTsKCgovKioqLyB9KSwKCi8qKiovIDUwNzoKLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCnZhciBjYWxsID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NTY1KTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHJlY29yZCwgZm4sIElURVJBVE9SX0lOU1RFQURfT0ZfUkVDT1JEKSB7CiAgdmFyIGl0ZXJhdG9yID0gSVRFUkFUT1JfSU5TVEVBRF9PRl9SRUNPUkQgPyByZWNvcmQgOiByZWNvcmQuaXRlcmF0b3I7CiAgdmFyIG5leHQgPSByZWNvcmQubmV4dDsKICB2YXIgc3RlcCwgcmVzdWx0OwogIHdoaWxlICghKHN0ZXAgPSBjYWxsKG5leHQsIGl0ZXJhdG9yKSkuZG9uZSkgewogICAgcmVzdWx0ID0gZm4oc3RlcC52YWx1ZSk7CiAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHJldHVybiByZXN1bHQ7CiAgfQp9OwoKCi8qKiovIH0pLAoKLyoqKi8gNTMxOgovKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgJCA9IF9fd2VicGFja19yZXF1aXJlX18oNjUxOCk7CnZhciBjYWxsID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NTY1KTsKdmFyIGFDYWxsYWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oOTMwNik7CnZhciBhbk9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oODU1MSk7CnZhciBnZXRJdGVyYXRvckRpcmVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTc2Nyk7CnZhciBnZXRJdGVyYXRvckZsYXR0ZW5hYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NjQ2KTsKdmFyIGNyZWF0ZUl0ZXJhdG9yUHJveHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk0NjIpOwp2YXIgaXRlcmF0b3JDbG9zZSA9IF9fd2VicGFja19yZXF1aXJlX18oOTUzOSk7CnZhciBJU19QVVJFID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2Mzk1KTsKdmFyIGl0ZXJhdG9ySGVscGVyVGhyb3dzT25JbnZhbGlkSXRlcmF0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY4NCk7CnZhciBpdGVyYXRvckhlbHBlcldpdGhvdXRDbG9zaW5nT25FYXJseUVycm9yID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NTQ5KTsKCnZhciBGTEFUX01BUF9XSVRIT1VUX1RIUk9XSU5HX09OX0lOVkFMSURfSVRFUkFUT1IgPSAhSVNfUFVSRQogICYmICFpdGVyYXRvckhlbHBlclRocm93c09uSW52YWxpZEl0ZXJhdG9yKCdmbGF0TWFwJywgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTsKdmFyIGZsYXRNYXBXaXRob3V0Q2xvc2luZ09uRWFybHlFcnJvciA9ICFJU19QVVJFICYmICFGTEFUX01BUF9XSVRIT1VUX1RIUk9XSU5HX09OX0lOVkFMSURfSVRFUkFUT1IKICAmJiBpdGVyYXRvckhlbHBlcldpdGhvdXRDbG9zaW5nT25FYXJseUVycm9yKCdmbGF0TWFwJywgVHlwZUVycm9yKTsKCnZhciBGT1JDRUQgPSBJU19QVVJFIHx8IEZMQVRfTUFQX1dJVEhPVVRfVEhST1dJTkdfT05fSU5WQUxJRF9JVEVSQVRPUiB8fCBmbGF0TWFwV2l0aG91dENsb3NpbmdPbkVhcmx5RXJyb3I7Cgp2YXIgSXRlcmF0b3JQcm94eSA9IGNyZWF0ZUl0ZXJhdG9yUHJveHkoZnVuY3Rpb24gKCkgewogIHZhciBpdGVyYXRvciA9IHRoaXMuaXRlcmF0b3I7CiAgdmFyIG1hcHBlciA9IHRoaXMubWFwcGVyOwogIHZhciByZXN1bHQsIGlubmVyOwoKICB3aGlsZSAodHJ1ZSkgewogICAgaWYgKGlubmVyID0gdGhpcy5pbm5lcikgdHJ5IHsKICAgICAgcmVzdWx0ID0gYW5PYmplY3QoY2FsbChpbm5lci5uZXh0LCBpbm5lci5pdGVyYXRvcikpOwogICAgICBpZiAoIXJlc3VsdC5kb25lKSByZXR1cm4gcmVzdWx0LnZhbHVlOwogICAgICB0aGlzLmlubmVyID0gbnVsbDsKICAgIH0gY2F0Y2ggKGVycm9yKSB7IGl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsICd0aHJvdycsIGVycm9yKTsgfQoKICAgIHJlc3VsdCA9IGFuT2JqZWN0KGNhbGwodGhpcy5uZXh0LCBpdGVyYXRvcikpOwoKICAgIGlmICh0aGlzLmRvbmUgPSAhIXJlc3VsdC5kb25lKSByZXR1cm47CgogICAgdHJ5IHsKICAgICAgdGhpcy5pbm5lciA9IGdldEl0ZXJhdG9yRmxhdHRlbmFibGUobWFwcGVyKHJlc3VsdC52YWx1ZSwgdGhpcy5jb3VudGVyKyspLCBmYWxzZSk7CiAgICB9IGNhdGNoIChlcnJvcikgeyBpdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCAndGhyb3cnLCBlcnJvcik7IH0KICB9Cn0pOwoKLy8gYEl0ZXJhdG9yLnByb3RvdHlwZS5mbGF0TWFwYCBtZXRob2QKLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pdGVyYXRvci5wcm90b3R5cGUuZmxhdG1hcAokKHsgdGFyZ2V0OiAnSXRlcmF0b3InLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwgewogIGZsYXRNYXA6IGZ1bmN0aW9uIGZsYXRNYXAobWFwcGVyKSB7CiAgICBhbk9iamVjdCh0aGlzKTsKICAgIHRyeSB7CiAgICAgIGFDYWxsYWJsZShtYXBwZXIpOwogICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgaXRlcmF0b3JDbG9zZSh0aGlzLCAndGhyb3cnLCBlcnJvcik7CiAgICB9CgogICAgaWYgKGZsYXRNYXBXaXRob3V0Q2xvc2luZ09uRWFybHlFcnJvcikgcmV0dXJuIGNhbGwoZmxhdE1hcFdpdGhvdXRDbG9zaW5nT25FYXJseUVycm9yLCB0aGlzLCBtYXBwZXIpOwoKICAgIHJldHVybiBuZXcgSXRlcmF0b3JQcm94eShnZXRJdGVyYXRvckRpcmVjdCh0aGlzKSwgewogICAgICBtYXBwZXI6IG1hcHBlciwKICAgICAgaW5uZXI6IG51bGwKICAgIH0pOwogIH0KfSk7CgoKLyoqKi8gfSksCgovKioqLyA2MTY6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgZmFpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkwMzkpOwoKbW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkgewogIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1mdW5jdGlvbi1wcm90b3R5cGUtYmluZCAtLSBzYWZlCiAgdmFyIHRlc3QgPSAoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KS5iaW5kKCk7CiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGlucyAtLSBzYWZlCiAgcmV0dXJuIHR5cGVvZiB0ZXN0ICE9ICdmdW5jdGlvbicgfHwgdGVzdC5oYXNPd25Qcm9wZXJ0eSgncHJvdG90eXBlJyk7Cn0pOwoKCi8qKiovIH0pLAoKLyoqKi8gNjU1OgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIGNsYXNzb2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY5NTUpOwoKdmFyICRTdHJpbmcgPSBTdHJpbmc7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkgewogIGlmIChjbGFzc29mKGFyZ3VtZW50KSA9PT0gJ1N5bWJvbCcpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IGEgU3ltYm9sIHZhbHVlIHRvIGEgc3RyaW5nJyk7CiAgcmV0dXJuICRTdHJpbmcoYXJndW1lbnQpOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gNjc5OgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIGlzUHJvdG90eXBlT2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2MjUpOwoKdmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUHJvdG90eXBlKSB7CiAgaWYgKGlzUHJvdG90eXBlT2YoUHJvdG90eXBlLCBpdCkpIHJldHVybiBpdDsKICB0aHJvdyBuZXcgJFR5cGVFcnJvcignSW5jb3JyZWN0IGludm9jYXRpb24nKTsKfTsKCgovKioqLyB9KSwKCi8qKiovIDY4NDoKLyoqKi8gKChtb2R1bGUpID0+IHsKCgovLyBTaG91bGQgdGhyb3cgYW4gZXJyb3Igb24gaW52YWxpZCBpdGVyYXRvcgovLyBodHRwczovL2lzc3Vlcy5jaHJvbWl1bS5vcmcvaXNzdWVzLzMzNjgzOTExNQptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtZXRob2ROYW1lLCBhcmd1bWVudCkgewogIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1pdGVyYXRvciAtLSByZXF1aXJlZCBmb3IgdGVzdGluZwogIHZhciBtZXRob2QgPSB0eXBlb2YgSXRlcmF0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBJdGVyYXRvci5wcm90b3R5cGVbbWV0aG9kTmFtZV07CiAgaWYgKG1ldGhvZCkgdHJ5IHsKICAgIG1ldGhvZC5jYWxsKHsgbmV4dDogbnVsbCB9LCBhcmd1bWVudCkubmV4dCgpOwogIH0gY2F0Y2ggKGVycm9yKSB7CiAgICByZXR1cm4gdHJ1ZTsKICB9Cn07CgoKLyoqKi8gfSksCgovKioqLyA3NDE6Ci8qKiovICgobW9kdWxlKSA9PiB7CgoKdmFyIGNlaWwgPSBNYXRoLmNlaWw7CnZhciBmbG9vciA9IE1hdGguZmxvb3I7CgovLyBgTWF0aC50cnVuY2AgbWV0aG9kCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC50cnVuYwovLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbWF0aC10cnVuYyAtLSBzYWZlCm1vZHVsZS5leHBvcnRzID0gTWF0aC50cnVuYyB8fCBmdW5jdGlvbiB0cnVuYyh4KSB7CiAgdmFyIG4gPSAreDsKICByZXR1cm4gKG4gPiAwID8gZmxvb3IgOiBjZWlsKShuKTsKfTsKCgovKioqLyB9KSwKCi8qKiovIDc1NzoKLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCnZhciBnZXRCdWlsdEluID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NzUxKTsKdmFyIGlzQ2FsbGFibGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5MDEpOwp2YXIgaXNQcm90b3R5cGVPZiA9IF9fd2VicGFja19yZXF1aXJlX18oMTYyNSk7CnZhciBVU0VfU1lNQk9MX0FTX1VJRCA9IF9fd2VicGFja19yZXF1aXJlX18oNzA0MCk7Cgp2YXIgJE9iamVjdCA9IE9iamVjdDsKCm1vZHVsZS5leHBvcnRzID0gVVNFX1NZTUJPTF9BU19VSUQgPyBmdW5jdGlvbiAoaXQpIHsKICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnOwp9IDogZnVuY3Rpb24gKGl0KSB7CiAgdmFyICRTeW1ib2wgPSBnZXRCdWlsdEluKCdTeW1ib2wnKTsKICByZXR1cm4gaXNDYWxsYWJsZSgkU3ltYm9sKSAmJiBpc1Byb3RvdHlwZU9mKCRTeW1ib2wucHJvdG90eXBlLCAkT2JqZWN0KGl0KSk7Cn07CgoKLyoqKi8gfSksCgovKioqLyA4NTE6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgY2xhc3NvZiA9IF9fd2VicGFja19yZXF1aXJlX18oNjk1NSk7CnZhciBnZXRNZXRob2QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU5NjYpOwp2YXIgaXNOdWxsT3JVbmRlZmluZWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQxMTcpOwp2YXIgSXRlcmF0b3JzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MjY5KTsKdmFyIHdlbGxLbm93blN5bWJvbCA9IF9fd2VicGFja19yZXF1aXJlX18oODIyNyk7Cgp2YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkgewogIGlmICghaXNOdWxsT3JVbmRlZmluZWQoaXQpKSByZXR1cm4gZ2V0TWV0aG9kKGl0LCBJVEVSQVRPUikKICAgIHx8IGdldE1ldGhvZChpdCwgJ0BAaXRlcmF0b3InKQogICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTsKfTsKCgovKioqLyB9KSwKCi8qKiovIDk0NDoKLyoqKi8gKChtb2R1bGUpID0+IHsKCgp2YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdGlvbnMpIHsKICB2YXIgYWxwaGFiZXQgPSBvcHRpb25zICYmIG9wdGlvbnMuYWxwaGFiZXQ7CiAgaWYgKGFscGhhYmV0ID09PSB1bmRlZmluZWQgfHwgYWxwaGFiZXQgPT09ICdiYXNlNjQnIHx8IGFscGhhYmV0ID09PSAnYmFzZTY0dXJsJykgcmV0dXJuIGFscGhhYmV0IHx8ICdiYXNlNjQnOwogIHRocm93IG5ldyAkVHlwZUVycm9yKCdJbmNvcnJlY3QgYGFscGhhYmV0YCBvcHRpb24nKTsKfTsKCgovKioqLyB9KSwKCi8qKiovIDEwNzI6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxODI4KTsKdmFyIGVudW1CdWdLZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NzI3KTsKCi8vIGBPYmplY3Qua2V5c2AgbWV0aG9kCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmtleXMKLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1rZXlzIC0tIHNhZmUKbW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHsKICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGVudW1CdWdLZXlzKTsKfTsKCgovKioqLyB9KSwKCi8qKiovIDExMDM6Ci8qKiovICgobW9kdWxlKSA9PiB7CgoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykgewogIHRyeSB7CiAgICByZXR1cm4geyBlcnJvcjogZmFsc2UsIHZhbHVlOiBleGVjKCkgfTsKICB9IGNhdGNoIChlcnJvcikgewogICAgcmV0dXJuIHsgZXJyb3I6IHRydWUsIHZhbHVlOiBlcnJvciB9OwogIH0KfTsKCgovKioqLyB9KSwKCi8qKiovIDExMDg6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgY2xhc3NvZiA9IF9fd2VicGFja19yZXF1aXJlX18oNjk1NSk7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkgewogIHZhciBrbGFzcyA9IGNsYXNzb2YoaXQpOwogIHJldHVybiBrbGFzcyA9PT0gJ0JpZ0ludDY0QXJyYXknIHx8IGtsYXNzID09PSAnQmlnVWludDY0QXJyYXknOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gMTE0ODoKLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyICQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY1MTgpOwp2YXIgY2FsbCA9IF9fd2VicGFja19yZXF1aXJlX18oOTU2NSk7CnZhciBpdGVyYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNjUyKTsKdmFyIGFDYWxsYWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oOTMwNik7CnZhciBhbk9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oODU1MSk7CnZhciBnZXRJdGVyYXRvckRpcmVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTc2Nyk7CnZhciBpdGVyYXRvckNsb3NlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NTM5KTsKdmFyIGl0ZXJhdG9ySGVscGVyV2l0aG91dENsb3NpbmdPbkVhcmx5RXJyb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ1NDkpOwoKdmFyIGV2ZXJ5V2l0aG91dENsb3NpbmdPbkVhcmx5RXJyb3IgPSBpdGVyYXRvckhlbHBlcldpdGhvdXRDbG9zaW5nT25FYXJseUVycm9yKCdldmVyeScsIFR5cGVFcnJvcik7CgovLyBgSXRlcmF0b3IucHJvdG90eXBlLmV2ZXJ5YCBtZXRob2QKLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pdGVyYXRvci5wcm90b3R5cGUuZXZlcnkKJCh7IHRhcmdldDogJ0l0ZXJhdG9yJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogZXZlcnlXaXRob3V0Q2xvc2luZ09uRWFybHlFcnJvciB9LCB7CiAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KHByZWRpY2F0ZSkgewogICAgYW5PYmplY3QodGhpcyk7CiAgICB0cnkgewogICAgICBhQ2FsbGFibGUocHJlZGljYXRlKTsKICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgIGl0ZXJhdG9yQ2xvc2UodGhpcywgJ3Rocm93JywgZXJyb3IpOwogICAgfQoKICAgIGlmIChldmVyeVdpdGhvdXRDbG9zaW5nT25FYXJseUVycm9yKSByZXR1cm4gY2FsbChldmVyeVdpdGhvdXRDbG9zaW5nT25FYXJseUVycm9yLCB0aGlzLCBwcmVkaWNhdGUpOwoKICAgIHZhciByZWNvcmQgPSBnZXRJdGVyYXRvckRpcmVjdCh0aGlzKTsKICAgIHZhciBjb3VudGVyID0gMDsKICAgIHJldHVybiAhaXRlcmF0ZShyZWNvcmQsIGZ1bmN0aW9uICh2YWx1ZSwgc3RvcCkgewogICAgICBpZiAoIXByZWRpY2F0ZSh2YWx1ZSwgY291bnRlcisrKSkgcmV0dXJuIHN0b3AoKTsKICAgIH0sIHsgSVNfUkVDT1JEOiB0cnVlLCBJTlRFUlJVUFRFRDogdHJ1ZSB9KS5zdG9wcGVkOwogIH0KfSk7CgoKLyoqKi8gfSksCgovKioqLyAxMTgxOgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIE5BVElWRV9XRUFLX01BUCA9IF9fd2VicGFja19yZXF1aXJlX18oODYyMik7CnZhciBnbG9iYWxUaGlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NTc2KTsKdmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNCk7CnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY2OTkpOwp2YXIgaGFzT3duID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5Mjk3KTsKdmFyIHNoYXJlZCA9IF9fd2VicGFja19yZXF1aXJlX18oNzYyOSk7CnZhciBzaGFyZWRLZXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYxMTkpOwp2YXIgaGlkZGVuS2V5cyA9IF9fd2VicGFja19yZXF1aXJlX18oNDIxKTsKCnZhciBPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCA9ICdPYmplY3QgYWxyZWFkeSBpbml0aWFsaXplZCc7CnZhciBUeXBlRXJyb3IgPSBnbG9iYWxUaGlzLlR5cGVFcnJvcjsKdmFyIFdlYWtNYXAgPSBnbG9iYWxUaGlzLldlYWtNYXA7CnZhciBzZXQsIGdldCwgaGFzOwoKdmFyIGVuZm9yY2UgPSBmdW5jdGlvbiAoaXQpIHsKICByZXR1cm4gaGFzKGl0KSA/IGdldChpdCkgOiBzZXQoaXQsIHt9KTsKfTsKCnZhciBnZXR0ZXJGb3IgPSBmdW5jdGlvbiAoVFlQRSkgewogIHJldHVybiBmdW5jdGlvbiAoaXQpIHsKICAgIHZhciBzdGF0ZTsKICAgIGlmICghaXNPYmplY3QoaXQpIHx8IChzdGF0ZSA9IGdldChpdCkpLnR5cGUgIT09IFRZUEUpIHsKICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQnKTsKICAgIH0gcmV0dXJuIHN0YXRlOwogIH07Cn07CgppZiAoTkFUSVZFX1dFQUtfTUFQIHx8IHNoYXJlZC5zdGF0ZSkgewogIHZhciBzdG9yZSA9IHNoYXJlZC5zdGF0ZSB8fCAoc2hhcmVkLnN0YXRlID0gbmV3IFdlYWtNYXAoKSk7CiAgLyogZXNsaW50LWRpc2FibGUgbm8tc2VsZi1hc3NpZ24gLS0gcHJvdG90eXBlIG1ldGhvZHMgcHJvdGVjdGlvbiAqLwogIHN0b3JlLmdldCA9IHN0b3JlLmdldDsKICBzdG9yZS5oYXMgPSBzdG9yZS5oYXM7CiAgc3RvcmUuc2V0ID0gc3RvcmUuc2V0OwogIC8qIGVzbGludC1lbmFibGUgbm8tc2VsZi1hc3NpZ24gLS0gcHJvdG90eXBlIG1ldGhvZHMgcHJvdGVjdGlvbiAqLwogIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHsKICAgIGlmIChzdG9yZS5oYXMoaXQpKSB0aHJvdyBuZXcgVHlwZUVycm9yKE9CSkVDVF9BTFJFQURZX0lOSVRJQUxJWkVEKTsKICAgIG1ldGFkYXRhLmZhY2FkZSA9IGl0OwogICAgc3RvcmUuc2V0KGl0LCBtZXRhZGF0YSk7CiAgICByZXR1cm4gbWV0YWRhdGE7CiAgfTsKICBnZXQgPSBmdW5jdGlvbiAoaXQpIHsKICAgIHJldHVybiBzdG9yZS5nZXQoaXQpIHx8IHt9OwogIH07CiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7CiAgICByZXR1cm4gc3RvcmUuaGFzKGl0KTsKICB9Owp9IGVsc2UgewogIHZhciBTVEFURSA9IHNoYXJlZEtleSgnc3RhdGUnKTsKICBoaWRkZW5LZXlzW1NUQVRFXSA9IHRydWU7CiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkgewogICAgaWYgKGhhc093bihpdCwgU1RBVEUpKSB0aHJvdyBuZXcgVHlwZUVycm9yKE9CSkVDVF9BTFJFQURZX0lOSVRJQUxJWkVEKTsKICAgIG1ldGFkYXRhLmZhY2FkZSA9IGl0OwogICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGl0LCBTVEFURSwgbWV0YWRhdGEpOwogICAgcmV0dXJuIG1ldGFkYXRhOwogIH07CiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7CiAgICByZXR1cm4gaGFzT3duKGl0LCBTVEFURSkgPyBpdFtTVEFURV0gOiB7fTsKICB9OwogIGhhcyA9IGZ1bmN0aW9uIChpdCkgewogICAgcmV0dXJuIGhhc093bihpdCwgU1RBVEUpOwogIH07Cn0KCm1vZHVsZS5leHBvcnRzID0gewogIHNldDogc2V0LAogIGdldDogZ2V0LAogIGhhczogaGFzLAogIGVuZm9yY2U6IGVuZm9yY2UsCiAgZ2V0dGVyRm9yOiBnZXR0ZXJGb3IKfTsKCgovKioqLyB9KSwKCi8qKiovIDEyOTE6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgdHJ1bmMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc0MSk7CgovLyBgVG9JbnRlZ2VyT3JJbmZpbml0eWAgYWJzdHJhY3Qgb3BlcmF0aW9uCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9pbnRlZ2Vyb3JpbmZpbml0eQptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkgewogIHZhciBudW1iZXIgPSArYXJndW1lbnQ7CiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2sKICByZXR1cm4gbnVtYmVyICE9PSBudW1iZXIgfHwgbnVtYmVyID09PSAwID8gMCA6IHRydW5jKG51bWJlcik7Cn07CgoKLyoqKi8gfSksCgovKioqLyAxMzg1OgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIGl0ZXJhdG9yQ2xvc2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk1MzkpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcnMsIGtpbmQsIHZhbHVlKSB7CiAgZm9yICh2YXIgaSA9IGl0ZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7CiAgICBpZiAoaXRlcnNbaV0gPT09IHVuZGVmaW5lZCkgY29udGludWU7CiAgICB0cnkgewogICAgICB2YWx1ZSA9IGl0ZXJhdG9yQ2xvc2UoaXRlcnNbaV0uaXRlcmF0b3IsIGtpbmQsIHZhbHVlKTsKICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgIGtpbmQgPSAndGhyb3cnOwogICAgICB2YWx1ZSA9IGVycm9yOwogICAgfQogIH0KICBpZiAoa2luZCA9PT0gJ3Rocm93JykgdGhyb3cgdmFsdWU7CiAgcmV0dXJuIHZhbHVlOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gMTU0ODoKLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCnZhciBnbG9iYWxUaGlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NTc2KTsKdmFyIGZhaWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MDM5KTsKdmFyIFY4ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NTE5KTsKdmFyIEVOVklST05NRU5UID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MjE1KTsKCnZhciBzdHJ1Y3R1cmVkQ2xvbmUgPSBnbG9iYWxUaGlzLnN0cnVjdHVyZWRDbG9uZTsKCm1vZHVsZS5leHBvcnRzID0gISFzdHJ1Y3R1cmVkQ2xvbmUgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHsKICAvLyBwcmV2ZW50IFY4IEFycmF5QnVmZmVyRGV0YWNoaW5nIHByb3RlY3RvciBjZWxsIGludmFsaWRhdGlvbiBhbmQgcGVyZm9ybWFuY2UgZGVncmFkYXRpb24KICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjc5CiAgaWYgKChFTlZJUk9OTUVOVCA9PT0gJ0RFTk8nICYmIFY4ID4gOTIpIHx8IChFTlZJUk9OTUVOVCA9PT0gJ05PREUnICYmIFY4ID4gOTQpIHx8IChFTlZJUk9OTUVOVCA9PT0gJ0JST1dTRVInICYmIFY4ID4gOTcpKSByZXR1cm4gZmFsc2U7CiAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcig4KTsKICB2YXIgY2xvbmUgPSBzdHJ1Y3R1cmVkQ2xvbmUoYnVmZmVyLCB7IHRyYW5zZmVyOiBbYnVmZmVyXSB9KTsKICByZXR1cm4gYnVmZmVyLmJ5dGVMZW5ndGggIT09IDAgfHwgY2xvbmUuYnl0ZUxlbmd0aCAhPT0gODsKfSk7CgoKLyoqKi8gfSksCgovKioqLyAxNTQ5OgovKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgovLyBUT0RPOiBSZW1vdmUgZnJvbSBgY29yZS1qc0A0YApfX3dlYnBhY2tfcmVxdWlyZV9fKDY2MzIpOwoKCi8qKiovIH0pLAoKLyoqKi8gMTYyNToKLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCnZhciB1bmN1cnJ5VGhpcyA9IF9fd2VicGFja19yZXF1aXJlX18oOTUwNCk7Cgptb2R1bGUuZXhwb3J0cyA9IHVuY3VycnlUaGlzKHt9LmlzUHJvdG90eXBlT2YpOwoKCi8qKiovIH0pLAoKLyoqKi8gMTY4OToKLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyICQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY1MTgpOwp2YXIgZ2xvYmFsVGhpcyA9IF9fd2VicGFja19yZXF1aXJlX18oNDU3Nik7CnZhciBhcHBseSA9IF9fd2VicGFja19yZXF1aXJlX18oODc0NSk7CnZhciBzbGljZSA9IF9fd2VicGFja19yZXF1aXJlX18oNzY4MCk7CnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18oNjA0Myk7CnZhciBhQ2FsbGFibGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkzMDYpOwp2YXIgcGVyZm9ybSA9IF9fd2VicGFja19yZXF1aXJlX18oMTEwMyk7Cgp2YXIgUHJvbWlzZSA9IGdsb2JhbFRoaXMuUHJvbWlzZTsKCnZhciBBQ0NFUFRfQVJHVU1FTlRTID0gZmFsc2U7Ci8vIEF2b2lkaW5nIHRoZSB1c2Ugb2YgcG9seWZpbGxzIG9mIHRoZSBwcmV2aW91cyBpdGVyYXRpb24gb2YgdGhpcyBwcm9wb3NhbAovLyB0aGF0IGRvZXMgbm90IGFjY2VwdCBhcmd1bWVudHMgb2YgdGhlIGNhbGxiYWNrCnZhciBGT1JDRUQgPSAhUHJvbWlzZSB8fCAhUHJvbWlzZVsndHJ5J10gfHwgcGVyZm9ybShmdW5jdGlvbiAoKSB7CiAgUHJvbWlzZVsndHJ5J10oZnVuY3Rpb24gKGFyZ3VtZW50KSB7CiAgICBBQ0NFUFRfQVJHVU1FTlRTID0gYXJndW1lbnQgPT09IDg7CiAgfSwgOCk7Cn0pLmVycm9yIHx8ICFBQ0NFUFRfQVJHVU1FTlRTOwoKLy8gYFByb21pc2UudHJ5YCBtZXRob2QKLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnRyeQokKHsgdGFyZ2V0OiAnUHJvbWlzZScsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHsKICAndHJ5JzogZnVuY3Rpb24gKGNhbGxiYWNrZm4gLyogLCAuLi5hcmdzICovKSB7CiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2UoYXJndW1lbnRzLCAxKSA6IFtdOwogICAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZih0aGlzKTsKICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIGFwcGx5KGFDYWxsYWJsZShjYWxsYmFja2ZuKSwgdW5kZWZpbmVkLCBhcmdzKTsKICAgIH0pOwogICAgKHJlc3VsdC5lcnJvciA/IHByb21pc2VDYXBhYmlsaXR5LnJlamVjdCA6IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmUpKHJlc3VsdC52YWx1ZSk7CiAgICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTsKICB9Cn0pOwoKCi8qKiovIH0pLAoKLyoqKi8gMTY5ODoKLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyICQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY1MTgpOwp2YXIgdW5pb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQyMDQpOwp2YXIgc2V0TWV0aG9kR2V0S2V5c0JlZm9yZUNsb25pbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk4MzUpOwp2YXIgc2V0TWV0aG9kQWNjZXB0U2V0TGlrZSA9IF9fd2VicGFja19yZXF1aXJlX18oNDkxNik7Cgp2YXIgRk9SQ0VEID0gIXNldE1ldGhvZEFjY2VwdFNldExpa2UoJ3VuaW9uJykgfHwgIXNldE1ldGhvZEdldEtleXNCZWZvcmVDbG9uaW5nKCd1bmlvbicpOwoKLy8gYFNldC5wcm90b3R5cGUudW5pb25gIG1ldGhvZAovLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUudW5pb24KJCh7IHRhcmdldDogJ1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7CiAgdW5pb246IHVuaW9uCn0pOwoKCi8qKiovIH0pLAoKLyoqKi8gMTcwMToKLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyICQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY1MTgpOwp2YXIgY2FsbCA9IF9fd2VicGFja19yZXF1aXJlX18oOTU2NSk7CnZhciBhQ2FsbGFibGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkzMDYpOwp2YXIgYW5PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg1NTEpOwp2YXIgZ2V0SXRlcmF0b3JEaXJlY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3NjcpOwp2YXIgY3JlYXRlSXRlcmF0b3JQcm94eSA9IF9fd2VicGFja19yZXF1aXJlX18oOTQ2Mik7CnZhciBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MzE5KTsKdmFyIGl0ZXJhdG9yQ2xvc2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk1MzkpOwp2YXIgaXRlcmF0b3JIZWxwZXJUaHJvd3NPbkludmFsaWRJdGVyYXRvciA9IF9fd2VicGFja19yZXF1aXJlX18oNjg0KTsKdmFyIGl0ZXJhdG9ySGVscGVyV2l0aG91dENsb3NpbmdPbkVhcmx5RXJyb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ1NDkpOwp2YXIgSVNfUFVSRSA9IF9fd2VicGFja19yZXF1aXJlX18oNjM5NSk7Cgp2YXIgTUFQX1dJVEhPVVRfVEhST1dJTkdfT05fSU5WQUxJRF9JVEVSQVRPUiA9ICFJU19QVVJFICYmICFpdGVyYXRvckhlbHBlclRocm93c09uSW52YWxpZEl0ZXJhdG9yKCdtYXAnLCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pOwp2YXIgbWFwV2l0aG91dENsb3NpbmdPbkVhcmx5RXJyb3IgPSAhSVNfUFVSRSAmJiAhTUFQX1dJVEhPVVRfVEhST1dJTkdfT05fSU5WQUxJRF9JVEVSQVRPUgogICYmIGl0ZXJhdG9ySGVscGVyV2l0aG91dENsb3NpbmdPbkVhcmx5RXJyb3IoJ21hcCcsIFR5cGVFcnJvcik7Cgp2YXIgRk9SQ0VEID0gSVNfUFVSRSB8fCBNQVBfV0lUSE9VVF9USFJPV0lOR19PTl9JTlZBTElEX0lURVJBVE9SIHx8IG1hcFdpdGhvdXRDbG9zaW5nT25FYXJseUVycm9yOwoKdmFyIEl0ZXJhdG9yUHJveHkgPSBjcmVhdGVJdGVyYXRvclByb3h5KGZ1bmN0aW9uICgpIHsKICB2YXIgaXRlcmF0b3IgPSB0aGlzLml0ZXJhdG9yOwogIHZhciByZXN1bHQgPSBhbk9iamVjdChjYWxsKHRoaXMubmV4dCwgaXRlcmF0b3IpKTsKICB2YXIgZG9uZSA9IHRoaXMuZG9uZSA9ICEhcmVzdWx0LmRvbmU7CiAgaWYgKCFkb25lKSByZXR1cm4gY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyhpdGVyYXRvciwgdGhpcy5tYXBwZXIsIFtyZXN1bHQudmFsdWUsIHRoaXMuY291bnRlcisrXSwgdHJ1ZSk7Cn0pOwoKLy8gYEl0ZXJhdG9yLnByb3RvdHlwZS5tYXBgIG1ldGhvZAovLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWl0ZXJhdG9yLnByb3RvdHlwZS5tYXAKJCh7IHRhcmdldDogJ0l0ZXJhdG9yJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHsKICBtYXA6IGZ1bmN0aW9uIG1hcChtYXBwZXIpIHsKICAgIGFuT2JqZWN0KHRoaXMpOwogICAgdHJ5IHsKICAgICAgYUNhbGxhYmxlKG1hcHBlcik7CiAgICB9IGNhdGNoIChlcnJvcikgewogICAgICBpdGVyYXRvckNsb3NlKHRoaXMsICd0aHJvdycsIGVycm9yKTsKICAgIH0KCiAgICBpZiAobWFwV2l0aG91dENsb3NpbmdPbkVhcmx5RXJyb3IpIHJldHVybiBjYWxsKG1hcFdpdGhvdXRDbG9zaW5nT25FYXJseUVycm9yLCB0aGlzLCBtYXBwZXIpOwoKICAgIHJldHVybiBuZXcgSXRlcmF0b3JQcm94eShnZXRJdGVyYXRvckRpcmVjdCh0aGlzKSwgewogICAgICBtYXBwZXI6IG1hcHBlcgogICAgfSk7CiAgfQp9KTsKCgovKioqLyB9KSwKCi8qKiovIDE3Njc6Ci8qKiovICgobW9kdWxlKSA9PiB7CgoKLy8gYEdldEl0ZXJhdG9yRGlyZWN0KG9iailgIGFic3RyYWN0IG9wZXJhdGlvbgovLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldGl0ZXJhdG9yZGlyZWN0Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iaikgewogIHJldHVybiB7CiAgICBpdGVyYXRvcjogb2JqLAogICAgbmV4dDogb2JqLm5leHQsCiAgICBkb25lOiBmYWxzZQogIH07Cn07CgoKLyoqKi8gfSksCgovKioqLyAxODA2OgovKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgJCA9IF9fd2VicGFja19yZXF1aXJlX18oNjUxOCk7CnZhciBhbk9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oODU1MSk7CnZhciBpdGVyYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNjUyKTsKdmFyIGdldEl0ZXJhdG9yRGlyZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNzY3KTsKCnZhciBwdXNoID0gW10ucHVzaDsKCi8vIGBJdGVyYXRvci5wcm90b3R5cGUudG9BcnJheWAgbWV0aG9kCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXRlcmF0b3IucHJvdG90eXBlLnRvYXJyYXkKJCh7IHRhcmdldDogJ0l0ZXJhdG9yJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUgfSwgewogIHRvQXJyYXk6IGZ1bmN0aW9uIHRvQXJyYXkoKSB7CiAgICB2YXIgcmVzdWx0ID0gW107CiAgICBpdGVyYXRlKGdldEl0ZXJhdG9yRGlyZWN0KGFuT2JqZWN0KHRoaXMpKSwgcHVzaCwgeyB0aGF0OiByZXN1bHQsIElTX1JFQ09SRDogdHJ1ZSB9KTsKICAgIHJldHVybiByZXN1bHQ7CiAgfQp9KTsKCgovKioqLyB9KSwKCi8qKiovIDE4Mjg6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgdW5jdXJyeVRoaXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk1MDQpOwp2YXIgaGFzT3duID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5Mjk3KTsKdmFyIHRvSW5kZXhlZE9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oNTM5Nyk7CnZhciBpbmRleE9mID0gKF9fd2VicGFja19yZXF1aXJlX18oOTYxNykuaW5kZXhPZik7CnZhciBoaWRkZW5LZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MjEpOwoKdmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHsKICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChvYmplY3QpOwogIHZhciBpID0gMDsKICB2YXIgcmVzdWx0ID0gW107CiAgdmFyIGtleTsKICBmb3IgKGtleSBpbiBPKSAhaGFzT3duKGhpZGRlbktleXMsIGtleSkgJiYgaGFzT3duKE8sIGtleSkgJiYgcHVzaChyZXN1bHQsIGtleSk7CiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5cwogIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzT3duKE8sIGtleSA9IG5hbWVzW2krK10pKSB7CiAgICB+aW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcHVzaChyZXN1bHQsIGtleSk7CiAgfQogIHJldHVybiByZXN1bHQ7Cn07CgoKLyoqKi8gfSksCgovKioqLyAyMTA2OgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIG1ha2VCdWlsdEluID0gX193ZWJwYWNrX3JlcXVpcmVfXygyODMpOwp2YXIgZGVmaW5lUHJvcGVydHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5MTMpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBuYW1lLCBkZXNjcmlwdG9yKSB7CiAgaWYgKGRlc2NyaXB0b3IuZ2V0KSBtYWtlQnVpbHRJbihkZXNjcmlwdG9yLmdldCwgbmFtZSwgeyBnZXR0ZXI6IHRydWUgfSk7CiAgaWYgKGRlc2NyaXB0b3Iuc2V0KSBtYWtlQnVpbHRJbihkZXNjcmlwdG9yLnNldCwgbmFtZSwgeyBzZXR0ZXI6IHRydWUgfSk7CiAgcmV0dXJuIGRlZmluZVByb3BlcnR5LmYodGFyZ2V0LCBuYW1lLCBkZXNjcmlwdG9yKTsKfTsKCgovKioqLyB9KSwKCi8qKiovIDIxNDA6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgd2VsbEtub3duU3ltYm9sID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MjI3KTsKCnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpOwp2YXIgdGVzdCA9IHt9OwoKdGVzdFtUT19TVFJJTkdfVEFHXSA9ICd6JzsKCm1vZHVsZS5leHBvcnRzID0gU3RyaW5nKHRlc3QpID09PSAnW29iamVjdCB6XSc7CgoKLyoqKi8gfSksCgovKioqLyAyMTk1OgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIHVuY3VycnlUaGlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NTA0KTsKCnZhciB0b1N0cmluZyA9IHVuY3VycnlUaGlzKHt9LnRvU3RyaW5nKTsKdmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHsKICByZXR1cm4gc3RyaW5nU2xpY2UodG9TdHJpbmcoaXQpLCA4LCAtMSk7Cn07CgoKLyoqKi8gfSksCgovKioqLyAyMjExOgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIGZhaWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MDM5KTsKCm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9CiAgRi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBudWxsOwogIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0cHJvdG90eXBlb2YgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcKICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG5ldyBGKCkpICE9PSBGLnByb3RvdHlwZTsKfSk7CgoKLyoqKi8gfSksCgovKioqLyAyMzAzOgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIGdsb2JhbFRoaXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ1NzYpOwp2YXIgdW5jdXJyeVRoaXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk1MDQpOwoKdmFyIFVpbnQ4QXJyYXkgPSBnbG9iYWxUaGlzLlVpbnQ4QXJyYXk7CnZhciBTeW50YXhFcnJvciA9IGdsb2JhbFRoaXMuU3ludGF4RXJyb3I7CnZhciBwYXJzZUludCA9IGdsb2JhbFRoaXMucGFyc2VJbnQ7CnZhciBtaW4gPSBNYXRoLm1pbjsKdmFyIE5PVF9IRVggPSAvW15cZGEtZl0vaTsKdmFyIGV4ZWMgPSB1bmN1cnJ5VGhpcyhOT1RfSEVYLmV4ZWMpOwp2YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzdHJpbmcsIGludG8pIHsKICB2YXIgc3RyaW5nTGVuZ3RoID0gc3RyaW5nLmxlbmd0aDsKICBpZiAoc3RyaW5nTGVuZ3RoICUgMiAhPT0gMCkgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdTdHJpbmcgc2hvdWxkIGJlIGFuIGV2ZW4gbnVtYmVyIG9mIGNoYXJhY3RlcnMnKTsKICB2YXIgbWF4TGVuZ3RoID0gaW50byA/IG1pbihpbnRvLmxlbmd0aCwgc3RyaW5nTGVuZ3RoIC8gMikgOiBzdHJpbmdMZW5ndGggLyAyOwogIHZhciBieXRlcyA9IGludG8gfHwgbmV3IFVpbnQ4QXJyYXkobWF4TGVuZ3RoKTsKICB2YXIgcmVhZCA9IDA7CiAgdmFyIHdyaXR0ZW4gPSAwOwogIHdoaWxlICh3cml0dGVuIDwgbWF4TGVuZ3RoKSB7CiAgICB2YXIgaGV4aXRzID0gc3RyaW5nU2xpY2Uoc3RyaW5nLCByZWFkLCByZWFkICs9IDIpOwogICAgaWYgKGV4ZWMoTk9UX0hFWCwgaGV4aXRzKSkgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdTdHJpbmcgc2hvdWxkIG9ubHkgY29udGFpbiBoZXggY2hhcmFjdGVycycpOwogICAgYnl0ZXNbd3JpdHRlbisrXSA9IHBhcnNlSW50KGhleGl0cywgMTYpOwogIH0KICByZXR1cm4geyBieXRlczogYnl0ZXMsIHJlYWQ6IHJlYWQgfTsKfTsKCgovKioqLyB9KSwKCi8qKiovIDIzNjA6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgovKiBnbG9iYWwgQWN0aXZlWE9iamVjdCAtLSBvbGQgSUUsIFdTSCAqLwp2YXIgYW5PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg1NTEpOwp2YXIgZGVmaW5lUHJvcGVydGllc01vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18oNjgwMSk7CnZhciBlbnVtQnVnS2V5cyA9IF9fd2VicGFja19yZXF1aXJlX18oODcyNyk7CnZhciBoaWRkZW5LZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MjEpOwp2YXIgaHRtbCA9IF9fd2VicGFja19yZXF1aXJlX18oMzk3KTsKdmFyIGRvY3VtZW50Q3JlYXRlRWxlbWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNDA1NSk7CnZhciBzaGFyZWRLZXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYxMTkpOwoKdmFyIEdUID0gJz4nOwp2YXIgTFQgPSAnPCc7CnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJzsKdmFyIFNDUklQVCA9ICdzY3JpcHQnOwp2YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7Cgp2YXIgRW1wdHlDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTsKCnZhciBzY3JpcHRUYWcgPSBmdW5jdGlvbiAoY29udGVudCkgewogIHJldHVybiBMVCArIFNDUklQVCArIEdUICsgY29udGVudCArIExUICsgJy8nICsgU0NSSVBUICsgR1Q7Cn07CgovLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgQWN0aXZlWCBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZQp2YXIgTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCA9IGZ1bmN0aW9uIChhY3RpdmVYRG9jdW1lbnQpIHsKICBhY3RpdmVYRG9jdW1lbnQud3JpdGUoc2NyaXB0VGFnKCcnKSk7CiAgYWN0aXZlWERvY3VtZW50LmNsb3NlKCk7CiAgdmFyIHRlbXAgPSBhY3RpdmVYRG9jdW1lbnQucGFyZW50V2luZG93Lk9iamVjdDsKICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1hc3NpZ25tZW50IC0tIGF2b2lkIG1lbW9yeSBsZWFrCiAgYWN0aXZlWERvY3VtZW50ID0gbnVsbDsKICByZXR1cm4gdGVtcDsKfTsKCi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGUKdmFyIE51bGxQcm90b09iamVjdFZpYUlGcmFtZSA9IGZ1bmN0aW9uICgpIHsKICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1ZwogIHZhciBpZnJhbWUgPSBkb2N1bWVudENyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpOwogIHZhciBKUyA9ICdqYXZhJyArIFNDUklQVCArICc6JzsKICB2YXIgaWZyYW1lRG9jdW1lbnQ7CiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgaHRtbC5hcHBlbmRDaGlsZChpZnJhbWUpOwogIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy80NzUKICBpZnJhbWUuc3JjID0gU3RyaW5nKEpTKTsKICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50OwogIGlmcmFtZURvY3VtZW50Lm9wZW4oKTsKICBpZnJhbWVEb2N1bWVudC53cml0ZShzY3JpcHRUYWcoJ2RvY3VtZW50LkY9T2JqZWN0JykpOwogIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7CiAgcmV0dXJuIGlmcmFtZURvY3VtZW50LkY7Cn07CgovLyBDaGVjayBmb3IgZG9jdW1lbnQuZG9tYWluIGFuZCBhY3RpdmUgeCBzdXBwb3J0Ci8vIE5vIG5lZWQgdG8gdXNlIGFjdGl2ZSB4IGFwcHJvYWNoIHdoZW4gZG9jdW1lbnQuZG9tYWluIGlzIG5vdCBzZXQKLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9pc3N1ZXMvMTUwCi8vIHZhcmlhdGlvbiBvZiBodHRwczovL2dpdGh1Yi5jb20va2l0Y2FtYnJpZGdlL2VzNS1zaGltL2NvbW1pdC80ZjczOGFjMDY2MzQ2Ci8vIGF2b2lkIElFIEdDIGJ1Zwp2YXIgYWN0aXZlWERvY3VtZW50Owp2YXIgTnVsbFByb3RvT2JqZWN0ID0gZnVuY3Rpb24gKCkgewogIHRyeSB7CiAgICBhY3RpdmVYRG9jdW1lbnQgPSBuZXcgQWN0aXZlWE9iamVjdCgnaHRtbGZpbGUnKTsKICB9IGNhdGNoIChlcnJvcikgeyAvKiBpZ25vcmUgKi8gfQogIE51bGxQcm90b09iamVjdCA9IHR5cGVvZiBkb2N1bWVudCAhPSAndW5kZWZpbmVkJwogICAgPyBkb2N1bWVudC5kb21haW4gJiYgYWN0aXZlWERvY3VtZW50CiAgICAgID8gTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWChhY3RpdmVYRG9jdW1lbnQpIC8vIG9sZCBJRQogICAgICA6IE51bGxQcm90b09iamVjdFZpYUlGcmFtZSgpCiAgICA6IE51bGxQcm90b09iamVjdFZpYUFjdGl2ZVgoYWN0aXZlWERvY3VtZW50KTsgLy8gV1NICiAgdmFyIGxlbmd0aCA9IGVudW1CdWdLZXlzLmxlbmd0aDsKICB3aGlsZSAobGVuZ3RoLS0pIGRlbGV0ZSBOdWxsUHJvdG9PYmplY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tsZW5ndGhdXTsKICByZXR1cm4gTnVsbFByb3RvT2JqZWN0KCk7Cn07CgpoaWRkZW5LZXlzW0lFX1BST1RPXSA9IHRydWU7CgovLyBgT2JqZWN0LmNyZWF0ZWAgbWV0aG9kCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmNyZWF0ZQovLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWNyZWF0ZSAtLSBzYWZlCm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykgewogIHZhciByZXN1bHQ7CiAgaWYgKE8gIT09IG51bGwpIHsKICAgIEVtcHR5Q29uc3RydWN0b3JbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pOwogICAgcmVzdWx0ID0gbmV3IEVtcHR5Q29uc3RydWN0b3IoKTsKICAgIEVtcHR5Q29uc3RydWN0b3JbUFJPVE9UWVBFXSA9IG51bGw7CiAgICAvLyBhZGQgIl9fcHJvdG9fXyIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbAogICAgcmVzdWx0W0lFX1BST1RPXSA9IE87CiAgfSBlbHNlIHJlc3VsdCA9IE51bGxQcm90b09iamVjdCgpOwogIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkZWZpbmVQcm9wZXJ0aWVzTW9kdWxlLmYocmVzdWx0LCBQcm9wZXJ0aWVzKTsKfTsKCgovKioqLyB9KSwKCi8qKiovIDI0NzU6Ci8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCnZhciAkID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NTE4KTsKdmFyIGlzU3VwZXJzZXRPZiA9IF9fd2VicGFja19yZXF1aXJlX18oODUyNyk7CnZhciBzZXRNZXRob2RBY2NlcHRTZXRMaWtlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OTE2KTsKCnZhciBJTkNPUlJFQ1QgPSAhc2V0TWV0aG9kQWNjZXB0U2V0TGlrZSgnaXNTdXBlcnNldE9mJywgZnVuY3Rpb24gKHJlc3VsdCkgewogIHJldHVybiAhcmVzdWx0Owp9KTsKCi8vIGBTZXQucHJvdG90eXBlLmlzU3VwZXJzZXRPZmAgbWV0aG9kCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS5pc3N1cGVyc2V0b2YKJCh7IHRhcmdldDogJ1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVCB9LCB7CiAgaXNTdXBlcnNldE9mOiBpc1N1cGVyc2V0T2YKfSk7CgoKLyoqKi8gfSksCgovKioqLyAyNDg5OgovKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgJCA9IF9fd2VicGFja19yZXF1aXJlX18oNjUxOCk7CnZhciBjYWxsID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NTY1KTsKdmFyIGFDYWxsYWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oOTMwNik7CnZhciBhbk9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oODU1MSk7CnZhciBnZXRJdGVyYXRvckRpcmVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTc2Nyk7CnZhciBjcmVhdGVJdGVyYXRvclByb3h5ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NDYyKTsKdmFyIGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYzMTkpOwp2YXIgSVNfUFVSRSA9IF9fd2VicGFja19yZXF1aXJlX18oNjM5NSk7CnZhciBpdGVyYXRvckNsb3NlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NTM5KTsKdmFyIGl0ZXJhdG9ySGVscGVyVGhyb3dzT25JbnZhbGlkSXRlcmF0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY4NCk7CnZhciBpdGVyYXRvckhlbHBlcldpdGhvdXRDbG9zaW5nT25FYXJseUVycm9yID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NTQ5KTsKCnZhciBGSUxURVJfV0lUSE9VVF9USFJPV0lOR19PTl9JTlZBTElEX0lURVJBVE9SID0gIUlTX1BVUkUgJiYgIWl0ZXJhdG9ySGVscGVyVGhyb3dzT25JbnZhbGlkSXRlcmF0b3IoJ2ZpbHRlcicsIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7CnZhciBmaWx0ZXJXaXRob3V0Q2xvc2luZ09uRWFybHlFcnJvciA9ICFJU19QVVJFICYmICFGSUxURVJfV0lUSE9VVF9USFJPV0lOR19PTl9JTlZBTElEX0lURVJBVE9SCiAgJiYgaXRlcmF0b3JIZWxwZXJXaXRob3V0Q2xvc2luZ09uRWFybHlFcnJvcignZmlsdGVyJywgVHlwZUVycm9yKTsKCnZhciBGT1JDRUQgPSBJU19QVVJFIHx8IEZJTFRFUl9XSVRIT1VUX1RIUk9XSU5HX09OX0lOVkFMSURfSVRFUkFUT1IgfHwgZmlsdGVyV2l0aG91dENsb3NpbmdPbkVhcmx5RXJyb3I7Cgp2YXIgSXRlcmF0b3JQcm94eSA9IGNyZWF0ZUl0ZXJhdG9yUHJveHkoZnVuY3Rpb24gKCkgewogIHZhciBpdGVyYXRvciA9IHRoaXMuaXRlcmF0b3I7CiAgdmFyIHByZWRpY2F0ZSA9IHRoaXMucHJlZGljYXRlOwogIHZhciBuZXh0ID0gdGhpcy5uZXh0OwogIHZhciByZXN1bHQsIGRvbmUsIHZhbHVlOwogIHdoaWxlICh0cnVlKSB7CiAgICByZXN1bHQgPSBhbk9iamVjdChjYWxsKG5leHQsIGl0ZXJhdG9yKSk7CiAgICBkb25lID0gdGhpcy5kb25lID0gISFyZXN1bHQuZG9uZTsKICAgIGlmIChkb25lKSByZXR1cm47CiAgICB2YWx1ZSA9IHJlc3VsdC52YWx1ZTsKICAgIGlmIChjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nKGl0ZXJhdG9yLCBwcmVkaWNhdGUsIFt2YWx1ZSwgdGhpcy5jb3VudGVyKytdLCB0cnVlKSkgcmV0dXJuIHZhbHVlOwogIH0KfSk7CgovLyBgSXRlcmF0b3IucHJvdG90eXBlLmZpbHRlcmAgbWV0aG9kCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXRlcmF0b3IucHJvdG90eXBlLmZpbHRlcgokKHsgdGFyZ2V0OiAnSXRlcmF0b3InLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwgewogIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKHByZWRpY2F0ZSkgewogICAgYW5PYmplY3QodGhpcyk7CiAgICB0cnkgewogICAgICBhQ2FsbGFibGUocHJlZGljYXRlKTsKICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgIGl0ZXJhdG9yQ2xvc2UodGhpcywgJ3Rocm93JywgZXJyb3IpOwogICAgfQoKICAgIGlmIChmaWx0ZXJXaXRob3V0Q2xvc2luZ09uRWFybHlFcnJvcikgcmV0dXJuIGNhbGwoZmlsdGVyV2l0aG91dENsb3NpbmdPbkVhcmx5RXJyb3IsIHRoaXMsIHByZWRpY2F0ZSk7CgogICAgcmV0dXJuIG5ldyBJdGVyYXRvclByb3h5KGdldEl0ZXJhdG9yRGlyZWN0KHRoaXMpLCB7CiAgICAgIHByZWRpY2F0ZTogcHJlZGljYXRlCiAgICB9KTsKICB9Cn0pOwoKCi8qKiovIH0pLAoKLyoqKi8gMjUyOToKLyoqKi8gKChtb2R1bGUpID0+IHsKCgovLyBgQ3JlYXRlSXRlclJlc3VsdE9iamVjdGAgYWJzdHJhY3Qgb3BlcmF0aW9uCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRlaXRlcnJlc3VsdG9iamVjdAptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh2YWx1ZSwgZG9uZSkgewogIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogZG9uZSB9Owp9OwoKCi8qKiovIH0pLAoKLyoqKi8gMjYwMzoKLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCnZhciB0b1N0cmluZyA9IF9fd2VicGFja19yZXF1aXJlX18oNjU1KTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50LCAkZGVmYXVsdCkgewogIHJldHVybiBhcmd1bWVudCA9PT0gdW5kZWZpbmVkID8gYXJndW1lbnRzLmxlbmd0aCA8IDIgPyAnJyA6ICRkZWZhdWx0IDogdG9TdHJpbmcoYXJndW1lbnQpOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gMjY1MjoKLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCnZhciBiaW5kID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MDgwKTsKdmFyIGNhbGwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk1NjUpOwp2YXIgYW5PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg1NTEpOwp2YXIgdHJ5VG9TdHJpbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY4MjMpOwp2YXIgaXNBcnJheUl0ZXJhdG9yTWV0aG9kID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MjA5KTsKdmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MTk4KTsKdmFyIGlzUHJvdG90eXBlT2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2MjUpOwp2YXIgZ2V0SXRlcmF0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgxKTsKdmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NTEpOwp2YXIgaXRlcmF0b3JDbG9zZSA9IF9fd2VicGFja19yZXF1aXJlX18oOTUzOSk7Cgp2YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjsKCnZhciBSZXN1bHQgPSBmdW5jdGlvbiAoc3RvcHBlZCwgcmVzdWx0KSB7CiAgdGhpcy5zdG9wcGVkID0gc3RvcHBlZDsKICB0aGlzLnJlc3VsdCA9IHJlc3VsdDsKfTsKCnZhciBSZXN1bHRQcm90b3R5cGUgPSBSZXN1bHQucHJvdG90eXBlOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIHVuYm91bmRGdW5jdGlvbiwgb3B0aW9ucykgewogIHZhciB0aGF0ID0gb3B0aW9ucyAmJiBvcHRpb25zLnRoYXQ7CiAgdmFyIEFTX0VOVFJJRVMgPSAhIShvcHRpb25zICYmIG9wdGlvbnMuQVNfRU5UUklFUyk7CiAgdmFyIElTX1JFQ09SRCA9ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy5JU19SRUNPUkQpOwogIHZhciBJU19JVEVSQVRPUiA9ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy5JU19JVEVSQVRPUik7CiAgdmFyIElOVEVSUlVQVEVEID0gISEob3B0aW9ucyAmJiBvcHRpb25zLklOVEVSUlVQVEVEKTsKICB2YXIgZm4gPSBiaW5kKHVuYm91bmRGdW5jdGlvbiwgdGhhdCk7CiAgdmFyIGl0ZXJhdG9yLCBpdGVyRm4sIGluZGV4LCBsZW5ndGgsIHJlc3VsdCwgbmV4dCwgc3RlcDsKCiAgdmFyIHN0b3AgPSBmdW5jdGlvbiAoY29uZGl0aW9uKSB7CiAgICBpZiAoaXRlcmF0b3IpIGl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsICdub3JtYWwnKTsKICAgIHJldHVybiBuZXcgUmVzdWx0KHRydWUsIGNvbmRpdGlvbik7CiAgfTsKCiAgdmFyIGNhbGxGbiA9IGZ1bmN0aW9uICh2YWx1ZSkgewogICAgaWYgKEFTX0VOVFJJRVMpIHsKICAgICAgYW5PYmplY3QodmFsdWUpOwogICAgICByZXR1cm4gSU5URVJSVVBURUQgPyBmbih2YWx1ZVswXSwgdmFsdWVbMV0sIHN0b3ApIDogZm4odmFsdWVbMF0sIHZhbHVlWzFdKTsKICAgIH0gcmV0dXJuIElOVEVSUlVQVEVEID8gZm4odmFsdWUsIHN0b3ApIDogZm4odmFsdWUpOwogIH07CgogIGlmIChJU19SRUNPUkQpIHsKICAgIGl0ZXJhdG9yID0gaXRlcmFibGUuaXRlcmF0b3I7CiAgfSBlbHNlIGlmIChJU19JVEVSQVRPUikgewogICAgaXRlcmF0b3IgPSBpdGVyYWJsZTsKICB9IGVsc2UgewogICAgaXRlckZuID0gZ2V0SXRlcmF0b3JNZXRob2QoaXRlcmFibGUpOwogICAgaWYgKCFpdGVyRm4pIHRocm93IG5ldyAkVHlwZUVycm9yKHRyeVRvU3RyaW5nKGl0ZXJhYmxlKSArICcgaXMgbm90IGl0ZXJhYmxlJyk7CiAgICAvLyBvcHRpbWlzYXRpb24gZm9yIGFycmF5IGl0ZXJhdG9ycwogICAgaWYgKGlzQXJyYXlJdGVyYXRvck1ldGhvZChpdGVyRm4pKSB7CiAgICAgIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShpdGVyYWJsZSk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7CiAgICAgICAgcmVzdWx0ID0gY2FsbEZuKGl0ZXJhYmxlW2luZGV4XSk7CiAgICAgICAgaWYgKHJlc3VsdCAmJiBpc1Byb3RvdHlwZU9mKFJlc3VsdFByb3RvdHlwZSwgcmVzdWx0KSkgcmV0dXJuIHJlc3VsdDsKICAgICAgfSByZXR1cm4gbmV3IFJlc3VsdChmYWxzZSk7CiAgICB9CiAgICBpdGVyYXRvciA9IGdldEl0ZXJhdG9yKGl0ZXJhYmxlLCBpdGVyRm4pOwogIH0KCiAgbmV4dCA9IElTX1JFQ09SRCA/IGl0ZXJhYmxlLm5leHQgOiBpdGVyYXRvci5uZXh0OwogIHdoaWxlICghKHN0ZXAgPSBjYWxsKG5leHQsIGl0ZXJhdG9yKSkuZG9uZSkgewogICAgdHJ5IHsKICAgICAgcmVzdWx0ID0gY2FsbEZuKHN0ZXAudmFsdWUpOwogICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgaXRlcmF0b3JDbG9zZShpdGVyYXRvciwgJ3Rocm93JywgZXJyb3IpOwogICAgfQogICAgaWYgKHR5cGVvZiByZXN1bHQgPT0gJ29iamVjdCcgJiYgcmVzdWx0ICYmIGlzUHJvdG90eXBlT2YoUmVzdWx0UHJvdG90eXBlLCByZXN1bHQpKSByZXR1cm4gcmVzdWx0OwogIH0gcmV0dXJuIG5ldyBSZXN1bHQoZmFsc2UpOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gMjc3NzoKLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCnZhciBjYWxsID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NTY1KTsKdmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNCk7CnZhciBpc1N5bWJvbCA9IF9fd2VicGFja19yZXF1aXJlX18oNzU3KTsKdmFyIGdldE1ldGhvZCA9IF9fd2VicGFja19yZXF1aXJlX18oNTk2Nik7CnZhciBvcmRpbmFyeVRvUHJpbWl0aXZlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MjcwKTsKdmFyIHdlbGxLbm93blN5bWJvbCA9IF9fd2VicGFja19yZXF1aXJlX18oODIyNyk7Cgp2YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjsKdmFyIFRPX1BSSU1JVElWRSA9IHdlbGxLbm93blN5bWJvbCgndG9QcmltaXRpdmUnKTsKCi8vIGBUb1ByaW1pdGl2ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9wcmltaXRpdmUKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQsIHByZWYpIHsKICBpZiAoIWlzT2JqZWN0KGlucHV0KSB8fCBpc1N5bWJvbChpbnB1dCkpIHJldHVybiBpbnB1dDsKICB2YXIgZXhvdGljVG9QcmltID0gZ2V0TWV0aG9kKGlucHV0LCBUT19QUklNSVRJVkUpOwogIHZhciByZXN1bHQ7CiAgaWYgKGV4b3RpY1RvUHJpbSkgewogICAgaWYgKHByZWYgPT09IHVuZGVmaW5lZCkgcHJlZiA9ICdkZWZhdWx0JzsKICAgIHJlc3VsdCA9IGNhbGwoZXhvdGljVG9QcmltLCBpbnB1dCwgcHJlZik7CiAgICBpZiAoIWlzT2JqZWN0KHJlc3VsdCkgfHwgaXNTeW1ib2wocmVzdWx0KSkgcmV0dXJuIHJlc3VsdDsKICAgIHRocm93IG5ldyAkVHlwZUVycm9yKCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWUiKTsKICB9CiAgaWYgKHByZWYgPT09IHVuZGVmaW5lZCkgcHJlZiA9ICdudW1iZXInOwogIHJldHVybiBvcmRpbmFyeVRvUHJpbWl0aXZlKGlucHV0LCBwcmVmKTsKfTsKCgovKioqLyB9KSwKCi8qKiovIDI3ODc6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgaGFzT3duID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5Mjk3KTsKdmFyIGlzQ2FsbGFibGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5MDEpOwp2YXIgdG9PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg5ODEpOwp2YXIgc2hhcmVkS2V5ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MTE5KTsKdmFyIENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA9IF9fd2VicGFja19yZXF1aXJlX18oMjIxMSk7Cgp2YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7CnZhciAkT2JqZWN0ID0gT2JqZWN0Owp2YXIgT2JqZWN0UHJvdG90eXBlID0gJE9iamVjdC5wcm90b3R5cGU7CgovLyBgT2JqZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2QKLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0cHJvdG90eXBlb2YKLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRwcm90b3R5cGVvZiAtLSBzYWZlCm1vZHVsZS5leHBvcnRzID0gQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSID8gJE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIChPKSB7CiAgdmFyIG9iamVjdCA9IHRvT2JqZWN0KE8pOwogIGlmIChoYXNPd24ob2JqZWN0LCBJRV9QUk9UTykpIHJldHVybiBvYmplY3RbSUVfUFJPVE9dOwogIHZhciBjb25zdHJ1Y3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcjsKICBpZiAoaXNDYWxsYWJsZShjb25zdHJ1Y3RvcikgJiYgb2JqZWN0IGluc3RhbmNlb2YgY29uc3RydWN0b3IpIHsKICAgIHJldHVybiBjb25zdHJ1Y3Rvci5wcm90b3R5cGU7CiAgfSByZXR1cm4gb2JqZWN0IGluc3RhbmNlb2YgJE9iamVjdCA/IE9iamVjdFByb3RvdHlwZSA6IG51bGw7Cn07CgoKLyoqKi8gfSksCgovKioqLyAyNzk2OgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIGZhaWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MDM5KTsKdmFyIGlzQ2FsbGFibGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5MDEpOwoKdmFyIHJlcGxhY2VtZW50ID0gLyN8XC5wcm90b3R5cGVcLi87Cgp2YXIgaXNGb3JjZWQgPSBmdW5jdGlvbiAoZmVhdHVyZSwgZGV0ZWN0aW9uKSB7CiAgdmFyIHZhbHVlID0gZGF0YVtub3JtYWxpemUoZmVhdHVyZSldOwogIHJldHVybiB2YWx1ZSA9PT0gUE9MWUZJTEwgPyB0cnVlCiAgICA6IHZhbHVlID09PSBOQVRJVkUgPyBmYWxzZQogICAgOiBpc0NhbGxhYmxlKGRldGVjdGlvbikgPyBmYWlscyhkZXRlY3Rpb24pCiAgICA6ICEhZGV0ZWN0aW9uOwp9OwoKdmFyIG5vcm1hbGl6ZSA9IGlzRm9yY2VkLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIChzdHJpbmcpIHsKICByZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZShyZXBsYWNlbWVudCwgJy4nKS50b0xvd2VyQ2FzZSgpOwp9OwoKdmFyIGRhdGEgPSBpc0ZvcmNlZC5kYXRhID0ge307CnZhciBOQVRJVkUgPSBpc0ZvcmNlZC5OQVRJVkUgPSAnTic7CnZhciBQT0xZRklMTCA9IGlzRm9yY2VkLlBPTFlGSUxMID0gJ1AnOwoKbW9kdWxlLmV4cG9ydHMgPSBpc0ZvcmNlZDsKCgovKioqLyB9KSwKCi8qKiovIDI4MDQ6Ci8qKiovICgobW9kdWxlKSA9PiB7CgoKdmFyIGNvbW1vbkFscGhhYmV0ID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5JzsKdmFyIGJhc2U2NEFscGhhYmV0ID0gY29tbW9uQWxwaGFiZXQgKyAnKy8nOwp2YXIgYmFzZTY0VXJsQWxwaGFiZXQgPSBjb21tb25BbHBoYWJldCArICctXyc7Cgp2YXIgaW52ZXJzZSA9IGZ1bmN0aW9uIChjaGFyYWN0ZXJzKSB7CiAgLy8gVE9ETzogdXNlIGBPYmplY3QuY3JlYXRlKG51bGwpYCBpbiBgY29yZS1qc0A0YAogIHZhciByZXN1bHQgPSB7fTsKICB2YXIgaW5kZXggPSAwOwogIGZvciAoOyBpbmRleCA8IDY0OyBpbmRleCsrKSByZXN1bHRbY2hhcmFjdGVycy5jaGFyQXQoaW5kZXgpXSA9IGluZGV4OwogIHJldHVybiByZXN1bHQ7Cn07Cgptb2R1bGUuZXhwb3J0cyA9IHsKICBpMmM6IGJhc2U2NEFscGhhYmV0LAogIGMyaTogaW52ZXJzZShiYXNlNjRBbHBoYWJldCksCiAgaTJjVXJsOiBiYXNlNjRVcmxBbHBoYWJldCwKICBjMmlVcmw6IGludmVyc2UoYmFzZTY0VXJsQWxwaGFiZXQpCn07CgoKLyoqKi8gfSksCgovKioqLyAyODEyOgovKioqLyAoKG1vZHVsZSkgPT4gewoKCnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocGFzc2VkLCByZXF1aXJlZCkgewogIGlmIChwYXNzZWQgPCByZXF1aXJlZCkgdGhyb3cgbmV3ICRUeXBlRXJyb3IoJ05vdCBlbm91Z2ggYXJndW1lbnRzJyk7CiAgcmV0dXJuIHBhc3NlZDsKfTsKCgovKioqLyB9KSwKCi8qKiovIDI4Mzk6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgZ2xvYmFsVGhpcyA9IF9fd2VicGFja19yZXF1aXJlX18oNDU3Nik7Cgp2YXIgbmF2aWdhdG9yID0gZ2xvYmFsVGhpcy5uYXZpZ2F0b3I7CnZhciB1c2VyQWdlbnQgPSBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudDsKCm1vZHVsZS5leHBvcnRzID0gdXNlckFnZW50ID8gU3RyaW5nKHVzZXJBZ2VudCkgOiAnJzsKCgovKioqLyB9KSwKCi8qKiovIDI5Njc6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgovKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAtLSBzYWZlICovCnZhciB1bmN1cnJ5VGhpc0FjY2Vzc29yID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NzA2KTsKdmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNCk7CnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NzUwKTsKdmFyIGFQb3NzaWJsZVByb3RvdHlwZSA9IF9fd2VicGFja19yZXF1aXJlX18oMzUwNik7CgovLyBgT2JqZWN0LnNldFByb3RvdHlwZU9mYCBtZXRob2QKLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3Quc2V0cHJvdG90eXBlb2YKLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuCi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3Qtc2V0cHJvdG90eXBlb2YgLS0gc2FmZQptb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyBmdW5jdGlvbiAoKSB7CiAgdmFyIENPUlJFQ1RfU0VUVEVSID0gZmFsc2U7CiAgdmFyIHRlc3QgPSB7fTsKICB2YXIgc2V0dGVyOwogIHRyeSB7CiAgICBzZXR0ZXIgPSB1bmN1cnJ5VGhpc0FjY2Vzc29yKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nLCAnc2V0Jyk7CiAgICBzZXR0ZXIodGVzdCwgW10pOwogICAgQ09SUkVDVF9TRVRURVIgPSB0ZXN0IGluc3RhbmNlb2YgQXJyYXk7CiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfQogIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykgewogICAgcmVxdWlyZU9iamVjdENvZXJjaWJsZShPKTsKICAgIGFQb3NzaWJsZVByb3RvdHlwZShwcm90byk7CiAgICBpZiAoIWlzT2JqZWN0KE8pKSByZXR1cm4gTzsKICAgIGlmIChDT1JSRUNUX1NFVFRFUikgc2V0dGVyKE8sIHByb3RvKTsKICAgIGVsc2UgTy5fX3Byb3RvX18gPSBwcm90bzsKICAgIHJldHVybiBPOwogIH07Cn0oKSA6IHVuZGVmaW5lZCk7CgoKLyoqKi8gfSksCgovKioqLyAzMDY4OgovKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgovLyBiYXNlZCBvbiBTaGV3Y2h1aydzIGFsZ29yaXRobSBmb3IgZXhhY3RseSBmbG9hdGluZyBwb2ludCBhZGRpdGlvbgovLyBhZGFwdGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtbWF0aC1zdW0vYmxvYi8zNTEzZDU4MzIzYTFhZTI1NTYwZTg3MDBhYTUyOTQ1MDBjNmM5Mjg3L3BvbHlmaWxsL3BvbHlmaWxsLm1qcwp2YXIgJCA9IF9fd2VicGFja19yZXF1aXJlX18oNjUxOCk7CnZhciB1bmN1cnJ5VGhpcyA9IF9fd2VicGFja19yZXF1aXJlX18oOTUwNCk7CnZhciBpdGVyYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNjUyKTsKCnZhciAkUmFuZ2VFcnJvciA9IFJhbmdlRXJyb3I7CnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yOwp2YXIgJEluZmluaXR5ID0gSW5maW5pdHk7CnZhciAkTmFOID0gTmFOOwp2YXIgYWJzID0gTWF0aC5hYnM7CnZhciBwb3cgPSBNYXRoLnBvdzsKdmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTsKCnZhciBQT1dfMl8xMDIzID0gcG93KDIsIDEwMjMpOwp2YXIgTUFYX1NBRkVfSU5URUdFUiA9IHBvdygyLCA1MykgLSAxOyAvLyAyICoqIDUzIC0gMSA9PT0gOTAwNzE5OTI1NDc0MDk5Mgp2YXIgTUFYX0RPVUJMRSA9IE51bWJlci5NQVhfVkFMVUU7IC8vIDIgKiogMTAyNCAtIDIgKiogKDEwMjMgLSA1MikgPT09IDEuNzk3NjkzMTM0ODYyMzE1NzA4MTVlKzMwOAp2YXIgTUFYX1VMUCA9IHBvdygyLCA5NzEpOyAvLyAyICoqICgxMDIzIC0gNTIpID09PSAxLjk5NTg0MDMwOTUzNDcxOTgxMTY2ZSsyOTIKCnZhciBOT1RfQV9OVU1CRVIgPSB7fTsKdmFyIE1JTlVTX0lORklOSVRZID0ge307CnZhciBQTFVTX0lORklOSVRZID0ge307CnZhciBNSU5VU19aRVJPID0ge307CnZhciBGSU5JVEUgPSB7fTsKCi8vIHByZXJlcXVpc2l0ZTogYWJzKHgpID49IGFicyh5KQp2YXIgdHdvc3VtID0gZnVuY3Rpb24gKHgsIHkpIHsKICB2YXIgaGkgPSB4ICsgeTsKICB2YXIgbG8gPSB5IC0gKGhpIC0geCk7CiAgcmV0dXJuIHsgaGk6IGhpLCBsbzogbG8gfTsKfTsKCi8vIGBNYXRoLnN1bVByZWNpc2VgIG1ldGhvZAovLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1tYXRoLXN1bQokKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwgewogIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtc3RhdGVtZW50cyAtLSBvawogIHN1bVByZWNpc2U6IGZ1bmN0aW9uIHN1bVByZWNpc2UoaXRlbXMpIHsKICAgIHZhciBudW1iZXJzID0gW107CiAgICB2YXIgY291bnQgPSAwOwogICAgdmFyIHN0YXRlID0gTUlOVVNfWkVSTzsKCiAgICBpdGVyYXRlKGl0ZW1zLCBmdW5jdGlvbiAobikgewogICAgICBpZiAoKytjb3VudCA+PSBNQVhfU0FGRV9JTlRFR0VSKSB0aHJvdyBuZXcgJFJhbmdlRXJyb3IoJ01heGltdW0gYWxsb3dlZCBpbmRleCBleGNlZWRlZCcpOwogICAgICBpZiAodHlwZW9mIG4gIT0gJ251bWJlcicpIHRocm93IG5ldyAkVHlwZUVycm9yKCdWYWx1ZSBpcyBub3QgYSBudW1iZXInKTsKICAgICAgaWYgKHN0YXRlICE9PSBOT1RfQV9OVU1CRVIpIHsKICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVjawogICAgICAgIGlmIChuICE9PSBuKSBzdGF0ZSA9IE5PVF9BX05VTUJFUjsKICAgICAgICBlbHNlIGlmIChuID09PSAkSW5maW5pdHkpIHN0YXRlID0gc3RhdGUgPT09IE1JTlVTX0lORklOSVRZID8gTk9UX0FfTlVNQkVSIDogUExVU19JTkZJTklUWTsKICAgICAgICBlbHNlIGlmIChuID09PSAtJEluZmluaXR5KSBzdGF0ZSA9IHN0YXRlID09PSBQTFVTX0lORklOSVRZID8gTk9UX0FfTlVNQkVSIDogTUlOVVNfSU5GSU5JVFk7CiAgICAgICAgZWxzZSBpZiAoKG4gIT09IDAgfHwgKDEgLyBuKSA9PT0gJEluZmluaXR5KSAmJiAoc3RhdGUgPT09IE1JTlVTX1pFUk8gfHwgc3RhdGUgPT09IEZJTklURSkpIHsKICAgICAgICAgIHN0YXRlID0gRklOSVRFOwogICAgICAgICAgcHVzaChudW1iZXJzLCBuKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0pOwoKICAgIHN3aXRjaCAoc3RhdGUpIHsKICAgICAgY2FzZSBOT1RfQV9OVU1CRVI6IHJldHVybiAkTmFOOwogICAgICBjYXNlIE1JTlVTX0lORklOSVRZOiByZXR1cm4gLSRJbmZpbml0eTsKICAgICAgY2FzZSBQTFVTX0lORklOSVRZOiByZXR1cm4gJEluZmluaXR5OwogICAgICBjYXNlIE1JTlVTX1pFUk86IHJldHVybiAtMDsKICAgIH0KCiAgICB2YXIgcGFydGlhbHMgPSBbXTsKICAgIHZhciBvdmVyZmxvdyA9IDA7IC8vIGNvbmNlcHR1YWxseSAyICoqIDEwMjQgdGltZXMgdGhpcyB2YWx1ZTsgdGhlIGZpbmFsIHBhcnRpYWwgaXMgYmlhc2VkIGJ5IHRoaXMgYW1vdW50CiAgICB2YXIgeCwgeSwgc3VtLCBoaSwgbG8sIHRtcDsKCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bWJlcnMubGVuZ3RoOyBpKyspIHsKICAgICAgeCA9IG51bWJlcnNbaV07CiAgICAgIHZhciBhY3R1YWxseVVzZWRQYXJ0aWFscyA9IDA7CiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgcGFydGlhbHMubGVuZ3RoOyBqKyspIHsKICAgICAgICB5ID0gcGFydGlhbHNbal07CiAgICAgICAgaWYgKGFicyh4KSA8IGFicyh5KSkgewogICAgICAgICAgdG1wID0geDsKICAgICAgICAgIHggPSB5OwogICAgICAgICAgeSA9IHRtcDsKICAgICAgICB9CiAgICAgICAgc3VtID0gdHdvc3VtKHgsIHkpOwogICAgICAgIGhpID0gc3VtLmhpOwogICAgICAgIGxvID0gc3VtLmxvOwogICAgICAgIGlmIChhYnMoaGkpID09PSAkSW5maW5pdHkpIHsKICAgICAgICAgIHZhciBzaWduID0gaGkgPT09ICRJbmZpbml0eSA/IDEgOiAtMTsKICAgICAgICAgIG92ZXJmbG93ICs9IHNpZ247CgogICAgICAgICAgeCA9ICh4IC0gKHNpZ24gKiBQT1dfMl8xMDIzKSkgLSAoc2lnbiAqIFBPV18yXzEwMjMpOwogICAgICAgICAgaWYgKGFicyh4KSA8IGFicyh5KSkgewogICAgICAgICAgICB0bXAgPSB4OwogICAgICAgICAgICB4ID0geTsKICAgICAgICAgICAgeSA9IHRtcDsKICAgICAgICAgIH0KICAgICAgICAgIHN1bSA9IHR3b3N1bSh4LCB5KTsKICAgICAgICAgIGhpID0gc3VtLmhpOwogICAgICAgICAgbG8gPSBzdW0ubG87CiAgICAgICAgfQogICAgICAgIGlmIChsbyAhPT0gMCkgcGFydGlhbHNbYWN0dWFsbHlVc2VkUGFydGlhbHMrK10gPSBsbzsKICAgICAgICB4ID0gaGk7CiAgICAgIH0KICAgICAgcGFydGlhbHMubGVuZ3RoID0gYWN0dWFsbHlVc2VkUGFydGlhbHM7CiAgICAgIGlmICh4ICE9PSAwKSBwdXNoKHBhcnRpYWxzLCB4KTsKICAgIH0KCiAgICAvLyBjb21wdXRlIHRoZSBleGFjdCBzdW0gb2YgcGFydGlhbHMsIHN0b3BwaW5nIG9uY2Ugd2UgbG9zZSBwcmVjaXNpb24KICAgIHZhciBuID0gcGFydGlhbHMubGVuZ3RoIC0gMTsKICAgIGhpID0gMDsKICAgIGxvID0gMDsKCiAgICBpZiAob3ZlcmZsb3cgIT09IDApIHsKICAgICAgdmFyIG5leHQgPSBuID49IDAgPyBwYXJ0aWFsc1tuXSA6IDA7CiAgICAgIG4tLTsKICAgICAgaWYgKGFicyhvdmVyZmxvdykgPiAxIHx8IChvdmVyZmxvdyA+IDAgJiYgbmV4dCA+IDApIHx8IChvdmVyZmxvdyA8IDAgJiYgbmV4dCA8IDApKSB7CiAgICAgICAgcmV0dXJuIG92ZXJmbG93ID4gMCA/ICRJbmZpbml0eSA6IC0kSW5maW5pdHk7CiAgICAgIH0KICAgICAgLy8gaGVyZSB3ZSBhY3R1YWxseSBoYXZlIHRvIGRvIHRoZSBhcml0aG1ldGljCiAgICAgIC8vIGRyb3AgYSBmYWN0b3Igb2YgMiBzbyB3ZSBjYW4gZG8gaXQgd2l0aG91dCBvdmVyZmxvdwogICAgICAvLyBhc3NlcnQoYWJzKG92ZXJmbG93KSA9PT0gMSkKICAgICAgc3VtID0gdHdvc3VtKG92ZXJmbG93ICogUE9XXzJfMTAyMywgbmV4dCAvIDIpOwogICAgICBoaSA9IHN1bS5oaTsKICAgICAgbG8gPSBzdW0ubG87CiAgICAgIGxvICo9IDI7CiAgICAgIGlmIChhYnMoMiAqIGhpKSA9PT0gJEluZmluaXR5KSB7CiAgICAgICAgLy8gcm91bmRpbmcgdG8gdGhlIG1heGltdW0gdmFsdWUKICAgICAgICBpZiAoaGkgPiAwKSB7CiAgICAgICAgICByZXR1cm4gKGhpID09PSBQT1dfMl8xMDIzICYmIGxvID09PSAtKE1BWF9VTFAgLyAyKSAmJiBuID49IDAgJiYgcGFydGlhbHNbbl0gPCAwKSA/IE1BWF9ET1VCTEUgOiAkSW5maW5pdHk7CiAgICAgICAgfSByZXR1cm4gKGhpID09PSAtUE9XXzJfMTAyMyAmJiBsbyA9PT0gKE1BWF9VTFAgLyAyKSAmJiBuID49IDAgJiYgcGFydGlhbHNbbl0gPiAwKSA/IC1NQVhfRE9VQkxFIDogLSRJbmZpbml0eTsKICAgICAgfQoKICAgICAgaWYgKGxvICE9PSAwKSB7CiAgICAgICAgcGFydGlhbHNbKytuXSA9IGxvOwogICAgICAgIGxvID0gMDsKICAgICAgfQoKICAgICAgaGkgKj0gMjsKICAgIH0KCiAgICB3aGlsZSAobiA+PSAwKSB7CiAgICAgIHN1bSA9IHR3b3N1bShoaSwgcGFydGlhbHNbbi0tXSk7CiAgICAgIGhpID0gc3VtLmhpOwogICAgICBsbyA9IHN1bS5sbzsKICAgICAgaWYgKGxvICE9PSAwKSBicmVhazsKICAgIH0KCiAgICBpZiAobiA+PSAwICYmICgobG8gPCAwICYmIHBhcnRpYWxzW25dIDwgMCkgfHwgKGxvID4gMCAmJiBwYXJ0aWFsc1tuXSA+IDApKSkgewogICAgICB5ID0gbG8gKiAyOwogICAgICB4ID0gaGkgKyB5OwogICAgICBpZiAoeSA9PT0geCAtIGhpKSBoaSA9IHg7CiAgICB9CgogICAgcmV0dXJuIGhpOwogIH0KfSk7CgoKLyoqKi8gfSksCgovKioqLyAzMTY3OgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIGlzQ2FsbGFibGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5MDEpOwp2YXIgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM0KTsKdmFyIHNldFByb3RvdHlwZU9mID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOTY3KTsKCi8vIG1ha2VzIHN1YmNsYXNzaW5nIHdvcmsgY29ycmVjdCBmb3Igd3JhcHBlZCBidWlsdC1pbnMKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoJHRoaXMsIGR1bW15LCBXcmFwcGVyKSB7CiAgdmFyIE5ld1RhcmdldCwgTmV3VGFyZ2V0UHJvdG90eXBlOwogIGlmICgKICAgIC8vIGl0IGNhbiB3b3JrIG9ubHkgd2l0aCBuYXRpdmUgYHNldFByb3RvdHlwZU9mYAogICAgc2V0UHJvdG90eXBlT2YgJiYKICAgIC8vIHdlIGhhdmVuJ3QgY29tcGxldGVseSBjb3JyZWN0IHByZS1FUzYgd2F5IGZvciBnZXR0aW5nIGBuZXcudGFyZ2V0YCwgc28gdXNlIHRoaXMKICAgIGlzQ2FsbGFibGUoTmV3VGFyZ2V0ID0gZHVtbXkuY29uc3RydWN0b3IpICYmCiAgICBOZXdUYXJnZXQgIT09IFdyYXBwZXIgJiYKICAgIGlzT2JqZWN0KE5ld1RhcmdldFByb3RvdHlwZSA9IE5ld1RhcmdldC5wcm90b3R5cGUpICYmCiAgICBOZXdUYXJnZXRQcm90b3R5cGUgIT09IFdyYXBwZXIucHJvdG90eXBlCiAgKSBzZXRQcm90b3R5cGVPZigkdGhpcywgTmV3VGFyZ2V0UHJvdG90eXBlKTsKICByZXR1cm4gJHRoaXM7Cn07CgoKLyoqKi8gfSksCgovKioqLyAzMjM4OgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIGdsb2JhbFRoaXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ1NzYpOwp2YXIgTkFUSVZFX0FSUkFZX0JVRkZFUiA9IF9fd2VicGFja19yZXF1aXJlX18oNzgxMSk7CnZhciBhcnJheUJ1ZmZlckJ5dGVMZW5ndGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDczOTQpOwoKdmFyIERhdGFWaWV3ID0gZ2xvYmFsVGhpcy5EYXRhVmlldzsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8pIHsKICBpZiAoIU5BVElWRV9BUlJBWV9CVUZGRVIgfHwgYXJyYXlCdWZmZXJCeXRlTGVuZ3RoKE8pICE9PSAwKSByZXR1cm4gZmFsc2U7CiAgdHJ5IHsKICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXcgLS0gdGhyb3dlcgogICAgbmV3IERhdGFWaWV3KE8pOwogICAgcmV0dXJuIGZhbHNlOwogIH0gY2F0Y2ggKGVycm9yKSB7CiAgICByZXR1cm4gdHJ1ZTsKICB9Cn07CgoKLyoqKi8gfSksCgovKioqLyAzMzkyOgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIHVuY3VycnlUaGlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NTA0KTsKCnZhciBpZCA9IDA7CnZhciBwb3N0Zml4ID0gTWF0aC5yYW5kb20oKTsKdmFyIHRvU3RyaW5nID0gdW5jdXJyeVRoaXMoMS4xLnRvU3RyaW5nKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkgewogIHJldHVybiAnU3ltYm9sKCcgKyAoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSkgKyAnKV8nICsgdG9TdHJpbmcoKytpZCArIHBvc3RmaXgsIDM2KTsKfTsKCgovKioqLyB9KSwKCi8qKiovIDM0NDA6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgYVNldCA9IF9fd2VicGFja19yZXF1aXJlX18oNzA4MCk7CnZhciBTZXRIZWxwZXJzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NDAyKTsKdmFyIGNsb25lID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5Mjg2KTsKdmFyIHNpemUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUxNzApOwp2YXIgZ2V0U2V0UmVjb3JkID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNzg5KTsKdmFyIGl0ZXJhdGVTZXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0NjkpOwp2YXIgaXRlcmF0ZVNpbXBsZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTA3KTsKCnZhciBoYXMgPSBTZXRIZWxwZXJzLmhhczsKdmFyIHJlbW92ZSA9IFNldEhlbHBlcnMucmVtb3ZlOwoKLy8gYFNldC5wcm90b3R5cGUuZGlmZmVyZW5jZWAgbWV0aG9kCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS5kaWZmZXJlbmNlCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlmZmVyZW5jZShvdGhlcikgewogIHZhciBPID0gYVNldCh0aGlzKTsKICB2YXIgb3RoZXJSZWMgPSBnZXRTZXRSZWNvcmQob3RoZXIpOwogIHZhciByZXN1bHQgPSBjbG9uZShPKTsKICBpZiAoc2l6ZShPKSA8PSBvdGhlclJlYy5zaXplKSBpdGVyYXRlU2V0KE8sIGZ1bmN0aW9uIChlKSB7CiAgICBpZiAob3RoZXJSZWMuaW5jbHVkZXMoZSkpIHJlbW92ZShyZXN1bHQsIGUpOwogIH0pOwogIGVsc2UgaXRlcmF0ZVNpbXBsZShvdGhlclJlYy5nZXRJdGVyYXRvcigpLCBmdW5jdGlvbiAoZSkgewogICAgaWYgKGhhcyhyZXN1bHQsIGUpKSByZW1vdmUocmVzdWx0LCBlKTsKICB9KTsKICByZXR1cm4gcmVzdWx0Owp9OwoKCi8qKiovIH0pLAoKLyoqKi8gMzQ2MzoKLyoqKi8gKChtb2R1bGUpID0+IHsKCgp2YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7CiAgaWYgKHR5cGVvZiBhcmd1bWVudCA9PSAnc3RyaW5nJykgcmV0dXJuIGFyZ3VtZW50OwogIHRocm93IG5ldyAkVHlwZUVycm9yKCdBcmd1bWVudCBpcyBub3QgYSBzdHJpbmcnKTsKfTsKCgovKioqLyB9KSwKCi8qKiovIDM1MDY6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgaXNQb3NzaWJsZVByb3RvdHlwZSA9IF9fd2VicGFja19yZXF1aXJlX18oMzkyNSk7Cgp2YXIgJFN0cmluZyA9IFN0cmluZzsKdmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkgewogIGlmIChpc1Bvc3NpYmxlUHJvdG90eXBlKGFyZ3VtZW50KSkgcmV0dXJuIGFyZ3VtZW50OwogIHRocm93IG5ldyAkVHlwZUVycm9yKCJDYW4ndCBzZXQgIiArICRTdHJpbmcoYXJndW1lbnQpICsgJyBhcyBhIHByb3RvdHlwZScpOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gMzU3OToKLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyICQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY1MTgpOwp2YXIgY2FsbCA9IF9fd2VicGFja19yZXF1aXJlX18oOTU2NSk7CnZhciBpdGVyYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNjUyKTsKdmFyIGFDYWxsYWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oOTMwNik7CnZhciBhbk9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oODU1MSk7CnZhciBnZXRJdGVyYXRvckRpcmVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTc2Nyk7CnZhciBpdGVyYXRvckNsb3NlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NTM5KTsKdmFyIGl0ZXJhdG9ySGVscGVyV2l0aG91dENsb3NpbmdPbkVhcmx5RXJyb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ1NDkpOwoKdmFyIHNvbWVXaXRob3V0Q2xvc2luZ09uRWFybHlFcnJvciA9IGl0ZXJhdG9ySGVscGVyV2l0aG91dENsb3NpbmdPbkVhcmx5RXJyb3IoJ3NvbWUnLCBUeXBlRXJyb3IpOwoKLy8gYEl0ZXJhdG9yLnByb3RvdHlwZS5zb21lYCBtZXRob2QKLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pdGVyYXRvci5wcm90b3R5cGUuc29tZQokKHsgdGFyZ2V0OiAnSXRlcmF0b3InLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiBzb21lV2l0aG91dENsb3NpbmdPbkVhcmx5RXJyb3IgfSwgewogIHNvbWU6IGZ1bmN0aW9uIHNvbWUocHJlZGljYXRlKSB7CiAgICBhbk9iamVjdCh0aGlzKTsKICAgIHRyeSB7CiAgICAgIGFDYWxsYWJsZShwcmVkaWNhdGUpOwogICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgaXRlcmF0b3JDbG9zZSh0aGlzLCAndGhyb3cnLCBlcnJvcik7CiAgICB9CgogICAgaWYgKHNvbWVXaXRob3V0Q2xvc2luZ09uRWFybHlFcnJvcikgcmV0dXJuIGNhbGwoc29tZVdpdGhvdXRDbG9zaW5nT25FYXJseUVycm9yLCB0aGlzLCBwcmVkaWNhdGUpOwoKICAgIHZhciByZWNvcmQgPSBnZXRJdGVyYXRvckRpcmVjdCh0aGlzKTsKICAgIHZhciBjb3VudGVyID0gMDsKICAgIHJldHVybiBpdGVyYXRlKHJlY29yZCwgZnVuY3Rpb24gKHZhbHVlLCBzdG9wKSB7CiAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGNvdW50ZXIrKykpIHJldHVybiBzdG9wKCk7CiAgICB9LCB7IElTX1JFQ09SRDogdHJ1ZSwgSU5URVJSVVBURUQ6IHRydWUgfSkuc3RvcHBlZDsKICB9Cn0pOwoKCi8qKiovIH0pLAoKLyoqKi8gMzYxMToKLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyICQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY1MTgpOwp2YXIgZ2xvYmFsVGhpcyA9IF9fd2VicGFja19yZXF1aXJlX18oNDU3Nik7CnZhciBkZWZpbmVCdWlsdEluQWNjZXNzb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxMDYpOwp2YXIgREVTQ1JJUFRPUlMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM3MjQpOwoKdmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7Ci8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZQp2YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7CnZhciBJTkNPUlJFQ1RfVkFMVUUgPSBnbG9iYWxUaGlzLnNlbGYgIT09IGdsb2JhbFRoaXM7CgovLyBgc2VsZmAgZ2V0dGVyCi8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3dpbmRvdy1vYmplY3QuaHRtbCNkb20tc2VsZgp0cnkgewogIGlmIChERVNDUklQVE9SUykgewogICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZQogICAgdmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGdsb2JhbFRoaXMsICdzZWxmJyk7CiAgICAvLyBzb21lIGVuZ2luZXMgaGF2ZSBgc2VsZmAsIGJ1dCB3aXRoIGluY29ycmVjdCBkZXNjcmlwdG9yCiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZGVub2xhbmQvZGVuby9pc3N1ZXMvMTU3NjUKICAgIGlmIChJTkNPUlJFQ1RfVkFMVUUgfHwgIWRlc2NyaXB0b3IgfHwgIWRlc2NyaXB0b3IuZ2V0IHx8ICFkZXNjcmlwdG9yLmVudW1lcmFibGUpIHsKICAgICAgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKGdsb2JhbFRoaXMsICdzZWxmJywgewogICAgICAgIGdldDogZnVuY3Rpb24gc2VsZigpIHsKICAgICAgICAgIHJldHVybiBnbG9iYWxUaGlzOwogICAgICAgIH0sCiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZWxmKHZhbHVlKSB7CiAgICAgICAgICBpZiAodGhpcyAhPT0gZ2xvYmFsVGhpcykgdGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0lsbGVnYWwgaW52b2NhdGlvbicpOwogICAgICAgICAgZGVmaW5lUHJvcGVydHkoZ2xvYmFsVGhpcywgJ3NlbGYnLCB7CiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsCiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZQogICAgICAgICAgfSk7CiAgICAgICAgfSwKICAgICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZQogICAgICB9KTsKICAgIH0KICB9IGVsc2UgJCh7IGdsb2JhbDogdHJ1ZSwgc2ltcGxlOiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVF9WQUxVRSB9LCB7CiAgICBzZWxmOiBnbG9iYWxUaGlzCiAgfSk7Cn0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH0KCgovKioqLyB9KSwKCi8qKiovIDM2NTA6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgYVNldCA9IF9fd2VicGFja19yZXF1aXJlX18oNzA4MCk7CnZhciBTZXRIZWxwZXJzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NDAyKTsKdmFyIGNsb25lID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5Mjg2KTsKdmFyIGdldFNldFJlY29yZCA9IF9fd2VicGFja19yZXF1aXJlX18oMzc4OSk7CnZhciBpdGVyYXRlU2ltcGxlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MDcpOwoKdmFyIGFkZCA9IFNldEhlbHBlcnMuYWRkOwp2YXIgaGFzID0gU2V0SGVscGVycy5oYXM7CnZhciByZW1vdmUgPSBTZXRIZWxwZXJzLnJlbW92ZTsKCi8vIGBTZXQucHJvdG90eXBlLnN5bW1ldHJpY0RpZmZlcmVuY2VgIG1ldGhvZAovLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUuc3ltbWV0cmljZGlmZmVyZW5jZQptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHN5bW1ldHJpY0RpZmZlcmVuY2Uob3RoZXIpIHsKICB2YXIgTyA9IGFTZXQodGhpcyk7CiAgdmFyIGtleXNJdGVyID0gZ2V0U2V0UmVjb3JkKG90aGVyKS5nZXRJdGVyYXRvcigpOwogIHZhciByZXN1bHQgPSBjbG9uZShPKTsKICBpdGVyYXRlU2ltcGxlKGtleXNJdGVyLCBmdW5jdGlvbiAoZSkgewogICAgaWYgKGhhcyhPLCBlKSkgcmVtb3ZlKHJlc3VsdCwgZSk7CiAgICBlbHNlIGFkZChyZXN1bHQsIGUpOwogIH0pOwogIHJldHVybiByZXN1bHQ7Cn07CgoKLyoqKi8gfSksCgovKioqLyAzNzA2OgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIHVuY3VycnlUaGlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NTA0KTsKdmFyIGlzQ2FsbGFibGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5MDEpOwp2YXIgc3RvcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc2MjkpOwoKdmFyIGZ1bmN0aW9uVG9TdHJpbmcgPSB1bmN1cnJ5VGhpcyhGdW5jdGlvbi50b1N0cmluZyk7CgovLyB0aGlzIGhlbHBlciBicm9rZW4gaW4gYGNvcmUtanNAMy40LjEtMy40LjRgLCBzbyB3ZSBjYW4ndCB1c2UgYHNoYXJlZGAgaGVscGVyCmlmICghaXNDYWxsYWJsZShzdG9yZS5pbnNwZWN0U291cmNlKSkgewogIHN0b3JlLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHsKICAgIHJldHVybiBmdW5jdGlvblRvU3RyaW5nKGl0KTsKICB9Owp9Cgptb2R1bGUuZXhwb3J0cyA9IHN0b3JlLmluc3BlY3RTb3VyY2U7CgoKLyoqKi8gfSksCgovKioqLyAzNzE3OgovKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzKSA9PiB7CgoKLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eXN5bWJvbHMgLS0gc2FmZQpleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzOwoKCi8qKiovIH0pLAoKLyoqKi8gMzcyNDoKLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCnZhciBmYWlscyA9IF9fd2VicGFja19yZXF1aXJlX18oOTAzOSk7CgovLyBEZXRlY3QgSUU4J3MgaW5jb21wbGV0ZSBkZWZpbmVQcm9wZXJ0eSBpbXBsZW1lbnRhdGlvbgptb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7CiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZwogIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sIDEsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pWzFdICE9PSA3Owp9KTsKCgovKioqLyB9KSwKCi8qKiovIDM3ODk6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgYUNhbGxhYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MzA2KTsKdmFyIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NTUxKTsKdmFyIGNhbGwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk1NjUpOwp2YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IF9fd2VicGFja19yZXF1aXJlX18oMTI5MSk7CnZhciBnZXRJdGVyYXRvckRpcmVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTc2Nyk7Cgp2YXIgSU5WQUxJRF9TSVpFID0gJ0ludmFsaWQgc2l6ZSc7CnZhciAkUmFuZ2VFcnJvciA9IFJhbmdlRXJyb3I7CnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yOwp2YXIgbWF4ID0gTWF0aC5tYXg7Cgp2YXIgU2V0UmVjb3JkID0gZnVuY3Rpb24gKHNldCwgaW50U2l6ZSkgewogIHRoaXMuc2V0ID0gc2V0OwogIHRoaXMuc2l6ZSA9IG1heChpbnRTaXplLCAwKTsKICB0aGlzLmhhcyA9IGFDYWxsYWJsZShzZXQuaGFzKTsKICB0aGlzLmtleXMgPSBhQ2FsbGFibGUoc2V0LmtleXMpOwp9OwoKU2V0UmVjb3JkLnByb3RvdHlwZSA9IHsKICBnZXRJdGVyYXRvcjogZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIGdldEl0ZXJhdG9yRGlyZWN0KGFuT2JqZWN0KGNhbGwodGhpcy5rZXlzLCB0aGlzLnNldCkpKTsKICB9LAogIGluY2x1ZGVzOiBmdW5jdGlvbiAoaXQpIHsKICAgIHJldHVybiBjYWxsKHRoaXMuaGFzLCB0aGlzLnNldCwgaXQpOwogIH0KfTsKCi8vIGBHZXRTZXRSZWNvcmRgIGFic3RyYWN0IG9wZXJhdGlvbgovLyBodHRwczovL3RjMzkuZXMvcHJvcG9zYWwtc2V0LW1ldGhvZHMvI3NlYy1nZXRzZXRyZWNvcmQKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqKSB7CiAgYW5PYmplY3Qob2JqKTsKICB2YXIgbnVtU2l6ZSA9ICtvYmouc2l6ZTsKICAvLyBOT1RFOiBJZiBzaXplIGlzIHVuZGVmaW5lZCwgdGhlbiBudW1TaXplIHdpbGwgYmUgTmFOCiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2sKICBpZiAobnVtU2l6ZSAhPT0gbnVtU2l6ZSkgdGhyb3cgbmV3ICRUeXBlRXJyb3IoSU5WQUxJRF9TSVpFKTsKICB2YXIgaW50U2l6ZSA9IHRvSW50ZWdlck9ySW5maW5pdHkobnVtU2l6ZSk7CiAgaWYgKGludFNpemUgPCAwKSB0aHJvdyBuZXcgJFJhbmdlRXJyb3IoSU5WQUxJRF9TSVpFKTsKICByZXR1cm4gbmV3IFNldFJlY29yZChvYmosIGludFNpemUpOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gMzgzODoKLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCnZhciBhU2V0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MDgwKTsKdmFyIHNpemUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUxNzApOwp2YXIgaXRlcmF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oODQ2OSk7CnZhciBnZXRTZXRSZWNvcmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM3ODkpOwoKLy8gYFNldC5wcm90b3R5cGUuaXNTdWJzZXRPZmAgbWV0aG9kCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS5pc3N1YnNldG9mCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNTdWJzZXRPZihvdGhlcikgewogIHZhciBPID0gYVNldCh0aGlzKTsKICB2YXIgb3RoZXJSZWMgPSBnZXRTZXRSZWNvcmQob3RoZXIpOwogIGlmIChzaXplKE8pID4gb3RoZXJSZWMuc2l6ZSkgcmV0dXJuIGZhbHNlOwogIHJldHVybiBpdGVyYXRlKE8sIGZ1bmN0aW9uIChlKSB7CiAgICBpZiAoIW90aGVyUmVjLmluY2x1ZGVzKGUpKSByZXR1cm4gZmFsc2U7CiAgfSwgdHJ1ZSkgIT09IGZhbHNlOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gMzg1MzoKLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyICQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY1MTgpOwp2YXIgaXNEaXNqb2ludEZyb20gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ0NDkpOwp2YXIgc2V0TWV0aG9kQWNjZXB0U2V0TGlrZSA9IF9fd2VicGFja19yZXF1aXJlX18oNDkxNik7Cgp2YXIgSU5DT1JSRUNUID0gIXNldE1ldGhvZEFjY2VwdFNldExpa2UoJ2lzRGlzam9pbnRGcm9tJywgZnVuY3Rpb24gKHJlc3VsdCkgewogIHJldHVybiAhcmVzdWx0Owp9KTsKCi8vIGBTZXQucHJvdG90eXBlLmlzRGlzam9pbnRGcm9tYCBtZXRob2QKLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLmlzZGlzam9pbnRmcm9tCiQoeyB0YXJnZXQ6ICdTZXQnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiBJTkNPUlJFQ1QgfSwgewogIGlzRGlzam9pbnRGcm9tOiBpc0Rpc2pvaW50RnJvbQp9KTsKCgovKioqLyB9KSwKCi8qKiovIDM5MjU6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM0KTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7CiAgcmV0dXJuIGlzT2JqZWN0KGFyZ3VtZW50KSB8fCBhcmd1bWVudCA9PT0gbnVsbDsKfTsKCgovKioqLyB9KSwKCi8qKiovIDM5NzI6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM0KTsKCnZhciAkU3RyaW5nID0gU3RyaW5nOwp2YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7CiAgaWYgKGFyZ3VtZW50ID09PSB1bmRlZmluZWQgfHwgaXNPYmplY3QoYXJndW1lbnQpKSByZXR1cm4gYXJndW1lbnQ7CiAgdGhyb3cgbmV3ICRUeXBlRXJyb3IoJFN0cmluZyhhcmd1bWVudCkgKyAnIGlzIG5vdCBhbiBvYmplY3Qgb3IgdW5kZWZpbmVkJyk7Cn07CgoKLyoqKi8gfSksCgovKioqLyA0MDU1OgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIGdsb2JhbFRoaXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ1NzYpOwp2YXIgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM0KTsKCnZhciBkb2N1bWVudCA9IGdsb2JhbFRoaXMuZG9jdW1lbnQ7Ci8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRQp2YXIgRVhJU1RTID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHsKICByZXR1cm4gRVhJU1RTID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTsKfTsKCgovKioqLyB9KSwKCi8qKiovIDQxMTQ6Ci8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCnZhciAkID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NTE4KTsKdmFyIHRvT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4OTgxKTsKdmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MTk4KTsKdmFyIHNldEFycmF5TGVuZ3RoID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NTI3KTsKdmFyIGRvZXNOb3RFeGNlZWRTYWZlSW50ZWdlciA9IF9fd2VicGFja19yZXF1aXJlX18oNjgzNyk7CnZhciBmYWlscyA9IF9fd2VicGFja19yZXF1aXJlX18oOTAzOSk7Cgp2YXIgSU5DT1JSRUNUX1RPX0xFTkdUSCA9IGZhaWxzKGZ1bmN0aW9uICgpIHsKICByZXR1cm4gW10ucHVzaC5jYWxsKHsgbGVuZ3RoOiAweDEwMDAwMDAwMCB9LCAxKSAhPT0gNDI5NDk2NzI5NzsKfSk7CgovLyBWOCA8PSAxMjEgYW5kIFNhZmFyaSA8PSAxNS40OyBGRiA8IDIzIHRocm93cyBJbnRlcm5hbEVycm9yCi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTEyNjgxCnZhciBwcm9wZXJFcnJvck9uTm9uV3JpdGFibGVMZW5ndGggPSBmdW5jdGlvbiAoKSB7CiAgdHJ5IHsKICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZQogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFtdLCAnbGVuZ3RoJywgeyB3cml0YWJsZTogZmFsc2UgfSkucHVzaCgpOwogIH0gY2F0Y2ggKGVycm9yKSB7CiAgICByZXR1cm4gZXJyb3IgaW5zdGFuY2VvZiBUeXBlRXJyb3I7CiAgfQp9OwoKdmFyIEZPUkNFRCA9IElOQ09SUkVDVF9UT19MRU5HVEggfHwgIXByb3BlckVycm9yT25Ob25Xcml0YWJsZUxlbmd0aCgpOwoKLy8gYEFycmF5LnByb3RvdHlwZS5wdXNoYCBtZXRob2QKLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUucHVzaAokKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgYXJpdHk6IDEsIGZvcmNlZDogRk9SQ0VEIH0sIHsKICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYAogIHB1c2g6IGZ1bmN0aW9uIHB1c2goaXRlbSkgewogICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTsKICAgIHZhciBsZW4gPSBsZW5ndGhPZkFycmF5TGlrZShPKTsKICAgIHZhciBhcmdDb3VudCA9IGFyZ3VtZW50cy5sZW5ndGg7CiAgICBkb2VzTm90RXhjZWVkU2FmZUludGVnZXIobGVuICsgYXJnQ291bnQpOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdDb3VudDsgaSsrKSB7CiAgICAgIE9bbGVuXSA9IGFyZ3VtZW50c1tpXTsKICAgICAgbGVuKys7CiAgICB9CiAgICBzZXRBcnJheUxlbmd0aChPLCBsZW4pOwogICAgcmV0dXJuIGxlbjsKICB9Cn0pOwoKCi8qKiovIH0pLAoKLyoqKi8gNDExNzoKLyoqKi8gKChtb2R1bGUpID0+IHsKCgovLyB3ZSBjYW4ndCB1c2UganVzdCBgaXQgPT0gbnVsbGAgc2luY2Ugb2YgYGRvY3VtZW50LmFsbGAgc3BlY2lhbCBjYXNlCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtSXNIVE1MRERBLWludGVybmFsLXNsb3QtYWVjCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7CiAgcmV0dXJuIGl0ID09PSBudWxsIHx8IGl0ID09PSB1bmRlZmluZWQ7Cn07CgoKLyoqKi8gfSksCgovKioqLyA0MTU0OgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIGNsYXNzb2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY5NTUpOwoKdmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7CgovLyBQZXJmb3JtID8gUmVxdWlyZUludGVybmFsU2xvdChhcmd1bWVudCwgW1tUeXBlZEFycmF5TmFtZV1dKQovLyBJZiBhcmd1bWVudC5bW1R5cGVkQXJyYXlOYW1lXV0gaXMgbm90ICJVaW50OEFycmF5IiwgdGhyb3cgYSBUeXBlRXJyb3IgZXhjZXB0aW9uCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7CiAgaWYgKGNsYXNzb2YoYXJndW1lbnQpID09PSAnVWludDhBcnJheScpIHJldHVybiBhcmd1bWVudDsKICB0aHJvdyBuZXcgJFR5cGVFcnJvcignQXJndW1lbnQgaXMgbm90IGFuIFVpbnQ4QXJyYXknKTsKfTsKCgovKioqLyB9KSwKCi8qKiovIDQyMDQ6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgYVNldCA9IF9fd2VicGFja19yZXF1aXJlX18oNzA4MCk7CnZhciBhZGQgPSAoX193ZWJwYWNrX3JlcXVpcmVfXyg0NDAyKS5hZGQpOwp2YXIgY2xvbmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkyODYpOwp2YXIgZ2V0U2V0UmVjb3JkID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNzg5KTsKdmFyIGl0ZXJhdGVTaW1wbGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwNyk7CgovLyBgU2V0LnByb3RvdHlwZS51bmlvbmAgbWV0aG9kCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS51bmlvbgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHVuaW9uKG90aGVyKSB7CiAgdmFyIE8gPSBhU2V0KHRoaXMpOwogIHZhciBrZXlzSXRlciA9IGdldFNldFJlY29yZChvdGhlcikuZ2V0SXRlcmF0b3IoKTsKICB2YXIgcmVzdWx0ID0gY2xvbmUoTyk7CiAgaXRlcmF0ZVNpbXBsZShrZXlzSXRlciwgZnVuY3Rpb24gKGl0KSB7CiAgICBhZGQocmVzdWx0LCBpdCk7CiAgfSk7CiAgcmV0dXJuIHJlc3VsdDsKfTsKCgovKioqLyB9KSwKCi8qKiovIDQyMDk6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgd2VsbEtub3duU3ltYm9sID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MjI3KTsKdmFyIEl0ZXJhdG9ycyA9IF9fd2VicGFja19yZXF1aXJlX18oNjI2OSk7Cgp2YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7CnZhciBBcnJheVByb3RvdHlwZSA9IEFycmF5LnByb3RvdHlwZTsKCi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3IKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHsKICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvdHlwZVtJVEVSQVRPUl0gPT09IGl0KTsKfTsKCgovKioqLyB9KSwKCi8qKiovIDQyMTU6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgovKiBnbG9iYWwgQnVuLCBEZW5vIC0tIGRldGVjdGlvbiAqLwp2YXIgZ2xvYmFsVGhpcyA9IF9fd2VicGFja19yZXF1aXJlX18oNDU3Nik7CnZhciB1c2VyQWdlbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4MzkpOwp2YXIgY2xhc3NvZiA9IF9fd2VicGFja19yZXF1aXJlX18oMjE5NSk7Cgp2YXIgdXNlckFnZW50U3RhcnRzV2l0aCA9IGZ1bmN0aW9uIChzdHJpbmcpIHsKICByZXR1cm4gdXNlckFnZW50LnNsaWNlKDAsIHN0cmluZy5sZW5ndGgpID09PSBzdHJpbmc7Cn07Cgptb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbiAoKSB7CiAgaWYgKHVzZXJBZ2VudFN0YXJ0c1dpdGgoJ0J1bi8nKSkgcmV0dXJuICdCVU4nOwogIGlmICh1c2VyQWdlbnRTdGFydHNXaXRoKCdDbG91ZGZsYXJlLVdvcmtlcnMnKSkgcmV0dXJuICdDTE9VREZMQVJFJzsKICBpZiAodXNlckFnZW50U3RhcnRzV2l0aCgnRGVuby8nKSkgcmV0dXJuICdERU5PJzsKICBpZiAodXNlckFnZW50U3RhcnRzV2l0aCgnTm9kZS5qcy8nKSkgcmV0dXJuICdOT0RFJzsKICBpZiAoZ2xvYmFsVGhpcy5CdW4gJiYgdHlwZW9mIEJ1bi52ZXJzaW9uID09ICdzdHJpbmcnKSByZXR1cm4gJ0JVTic7CiAgaWYgKGdsb2JhbFRoaXMuRGVubyAmJiB0eXBlb2YgRGVuby52ZXJzaW9uID09ICdvYmplY3QnKSByZXR1cm4gJ0RFTk8nOwogIGlmIChjbGFzc29mKGdsb2JhbFRoaXMucHJvY2VzcykgPT09ICdwcm9jZXNzJykgcmV0dXJuICdOT0RFJzsKICBpZiAoZ2xvYmFsVGhpcy53aW5kb3cgJiYgZ2xvYmFsVGhpcy5kb2N1bWVudCkgcmV0dXJuICdCUk9XU0VSJzsKICByZXR1cm4gJ1JFU1QnOwp9KSgpOwoKCi8qKiovIH0pLAoKLyoqKi8gNDIyNjoKLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyICQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY1MTgpOwp2YXIgZ2xvYmFsVGhpcyA9IF9fd2VicGFja19yZXF1aXJlX18oNDU3Nik7CnZhciBhU3RyaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNDYzKTsKdmFyIGFuVWludDhBcnJheSA9IF9fd2VicGFja19yZXF1aXJlX18oNDE1NCk7CnZhciBub3REZXRhY2hlZCA9IF9fd2VicGFja19yZXF1aXJlX18oNTE2OSk7CnZhciAkZnJvbUhleCA9IF9fd2VicGFja19yZXF1aXJlX18oMjMwMyk7CgovLyBgVWludDhBcnJheS5wcm90b3R5cGUuc2V0RnJvbUhleGAgbWV0aG9kCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWFycmF5YnVmZmVyLWJhc2U2NAppZiAoZ2xvYmFsVGhpcy5VaW50OEFycmF5KSAkKHsgdGFyZ2V0OiAnVWludDhBcnJheScsIHByb3RvOiB0cnVlIH0sIHsKICBzZXRGcm9tSGV4OiBmdW5jdGlvbiBzZXRGcm9tSGV4KHN0cmluZykgewogICAgYW5VaW50OEFycmF5KHRoaXMpOwogICAgYVN0cmluZyhzdHJpbmcpOwogICAgbm90RGV0YWNoZWQodGhpcy5idWZmZXIpOwogICAgdmFyIHJlYWQgPSAkZnJvbUhleChzdHJpbmcsIHRoaXMpLnJlYWQ7CiAgICByZXR1cm4geyByZWFkOiByZWFkLCB3cml0dGVuOiByZWFkIC8gMiB9OwogIH0KfSk7CgoKLyoqKi8gfSksCgovKioqLyA0MjM1OgovKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgovLyBUT0RPOiBSZW1vdmUgZnJvbSBgY29yZS1qc0A0YApfX3dlYnBhY2tfcmVxdWlyZV9fKDMwNjgpOwoKCi8qKiovIH0pLAoKLyoqKi8gNDI3MDoKLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCnZhciBjYWxsID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NTY1KTsKdmFyIGlzQ2FsbGFibGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5MDEpOwp2YXIgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM0KTsKCnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yOwoKLy8gYE9yZGluYXJ5VG9QcmltaXRpdmVgIGFic3RyYWN0IG9wZXJhdGlvbgovLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9yZGluYXJ5dG9wcmltaXRpdmUKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQsIHByZWYpIHsKICB2YXIgZm4sIHZhbDsKICBpZiAocHJlZiA9PT0gJ3N0cmluZycgJiYgaXNDYWxsYWJsZShmbiA9IGlucHV0LnRvU3RyaW5nKSAmJiAhaXNPYmplY3QodmFsID0gY2FsbChmbiwgaW5wdXQpKSkgcmV0dXJuIHZhbDsKICBpZiAoaXNDYWxsYWJsZShmbiA9IGlucHV0LnZhbHVlT2YpICYmICFpc09iamVjdCh2YWwgPSBjYWxsKGZuLCBpbnB1dCkpKSByZXR1cm4gdmFsOwogIGlmIChwcmVmICE9PSAnc3RyaW5nJyAmJiBpc0NhbGxhYmxlKGZuID0gaW5wdXQudG9TdHJpbmcpICYmICFpc09iamVjdCh2YWwgPSBjYWxsKGZuLCBpbnB1dCkpKSByZXR1cm4gdmFsOwogIHRocm93IG5ldyAkVHlwZUVycm9yKCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWUiKTsKfTsKCgovKioqLyB9KSwKCi8qKiovIDQzNzY6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgY2xhc3NvZiA9IF9fd2VicGFja19yZXF1aXJlX18oMjE5NSk7CgovLyBgSXNBcnJheWAgYWJzdHJhY3Qgb3BlcmF0aW9uCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXNhcnJheQovLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tYXJyYXktaXNhcnJheSAtLSBzYWZlCm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZ3VtZW50KSB7CiAgcmV0dXJuIGNsYXNzb2YoYXJndW1lbnQpID09PSAnQXJyYXknOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gNDQwMjoKLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCnZhciB1bmN1cnJ5VGhpcyA9IF9fd2VicGFja19yZXF1aXJlX18oOTUwNCk7CgovLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tc2V0IC0tIHNhZmUKdmFyIFNldFByb3RvdHlwZSA9IFNldC5wcm90b3R5cGU7Cgptb2R1bGUuZXhwb3J0cyA9IHsKICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tc2V0IC0tIHNhZmUKICBTZXQ6IFNldCwKICBhZGQ6IHVuY3VycnlUaGlzKFNldFByb3RvdHlwZS5hZGQpLAogIGhhczogdW5jdXJyeVRoaXMoU2V0UHJvdG90eXBlLmhhcyksCiAgcmVtb3ZlOiB1bmN1cnJ5VGhpcyhTZXRQcm90b3R5cGVbJ2RlbGV0ZSddKSwKICBwcm90bzogU2V0UHJvdG90eXBlCn07CgoKLyoqKi8gfSksCgovKioqLyA0NDQ5OgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIGFTZXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcwODApOwp2YXIgaGFzID0gKF9fd2VicGFja19yZXF1aXJlX18oNDQwMikuaGFzKTsKdmFyIHNpemUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUxNzApOwp2YXIgZ2V0U2V0UmVjb3JkID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNzg5KTsKdmFyIGl0ZXJhdGVTZXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0NjkpOwp2YXIgaXRlcmF0ZVNpbXBsZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTA3KTsKdmFyIGl0ZXJhdG9yQ2xvc2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk1MzkpOwoKLy8gYFNldC5wcm90b3R5cGUuaXNEaXNqb2ludEZyb21gIG1ldGhvZAovLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUuaXNkaXNqb2ludGZyb20KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Rpc2pvaW50RnJvbShvdGhlcikgewogIHZhciBPID0gYVNldCh0aGlzKTsKICB2YXIgb3RoZXJSZWMgPSBnZXRTZXRSZWNvcmQob3RoZXIpOwogIGlmIChzaXplKE8pIDw9IG90aGVyUmVjLnNpemUpIHJldHVybiBpdGVyYXRlU2V0KE8sIGZ1bmN0aW9uIChlKSB7CiAgICBpZiAob3RoZXJSZWMuaW5jbHVkZXMoZSkpIHJldHVybiBmYWxzZTsKICB9LCB0cnVlKSAhPT0gZmFsc2U7CiAgdmFyIGl0ZXJhdG9yID0gb3RoZXJSZWMuZ2V0SXRlcmF0b3IoKTsKICByZXR1cm4gaXRlcmF0ZVNpbXBsZShpdGVyYXRvciwgZnVuY3Rpb24gKGUpIHsKICAgIGlmIChoYXMoTywgZSkpIHJldHVybiBpdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCAnbm9ybWFsJywgZmFsc2UpOwogIH0pICE9PSBmYWxzZTsKfTsKCgovKioqLyB9KSwKCi8qKiovIDQ0ODM6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgZ2xvYmFsVGhpcyA9IF9fd2VicGFja19yZXF1aXJlX18oNDU3Nik7CnZhciBnZXRCdWlsdEluTm9kZU1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18oOTQyOSk7CnZhciBQUk9QRVJfU1RSVUNUVVJFRF9DTE9ORV9UUkFOU0ZFUiA9IF9fd2VicGFja19yZXF1aXJlX18oMTU0OCk7Cgp2YXIgc3RydWN0dXJlZENsb25lID0gZ2xvYmFsVGhpcy5zdHJ1Y3R1cmVkQ2xvbmU7CnZhciAkQXJyYXlCdWZmZXIgPSBnbG9iYWxUaGlzLkFycmF5QnVmZmVyOwp2YXIgJE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsVGhpcy5NZXNzYWdlQ2hhbm5lbDsKdmFyIGRldGFjaCA9IGZhbHNlOwp2YXIgV29ya2VyVGhyZWFkcywgY2hhbm5lbCwgYnVmZmVyLCAkZGV0YWNoOwoKaWYgKFBST1BFUl9TVFJVQ1RVUkVEX0NMT05FX1RSQU5TRkVSKSB7CiAgZGV0YWNoID0gZnVuY3Rpb24gKHRyYW5zZmVyYWJsZSkgewogICAgc3RydWN0dXJlZENsb25lKHRyYW5zZmVyYWJsZSwgeyB0cmFuc2ZlcjogW3RyYW5zZmVyYWJsZV0gfSk7CiAgfTsKfSBlbHNlIGlmICgkQXJyYXlCdWZmZXIpIHRyeSB7CiAgaWYgKCEkTWVzc2FnZUNoYW5uZWwpIHsKICAgIFdvcmtlclRocmVhZHMgPSBnZXRCdWlsdEluTm9kZU1vZHVsZSgnd29ya2VyX3RocmVhZHMnKTsKICAgIGlmIChXb3JrZXJUaHJlYWRzKSAkTWVzc2FnZUNoYW5uZWwgPSBXb3JrZXJUaHJlYWRzLk1lc3NhZ2VDaGFubmVsOwogIH0KCiAgaWYgKCRNZXNzYWdlQ2hhbm5lbCkgewogICAgY2hhbm5lbCA9IG5ldyAkTWVzc2FnZUNoYW5uZWwoKTsKICAgIGJ1ZmZlciA9IG5ldyAkQXJyYXlCdWZmZXIoMik7CgogICAgJGRldGFjaCA9IGZ1bmN0aW9uICh0cmFuc2ZlcmFibGUpIHsKICAgICAgY2hhbm5lbC5wb3J0MS5wb3N0TWVzc2FnZShudWxsLCBbdHJhbnNmZXJhYmxlXSk7CiAgICB9OwoKICAgIGlmIChidWZmZXIuYnl0ZUxlbmd0aCA9PT0gMikgewogICAgICAkZGV0YWNoKGJ1ZmZlcik7CiAgICAgIGlmIChidWZmZXIuYnl0ZUxlbmd0aCA9PT0gMCkgZGV0YWNoID0gJGRldGFjaDsKICAgIH0KICB9Cn0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH0KCm1vZHVsZS5leHBvcnRzID0gZGV0YWNoOwoKCi8qKiovIH0pLAoKLyoqKi8gNDQ5NToKLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCi8qIGVzbGludC1kaXNhYmxlIGVzL25vLXN5bWJvbCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqLwp2YXIgVjhfVkVSU0lPTiA9IF9fd2VicGFja19yZXF1aXJlX18oOTUxOSk7CnZhciBmYWlscyA9IF9fd2VicGFja19yZXF1aXJlX18oOTAzOSk7CnZhciBnbG9iYWxUaGlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NTc2KTsKCnZhciAkU3RyaW5nID0gZ2xvYmFsVGhpcy5TdHJpbmc7CgovLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5c3ltYm9scyAtLSByZXF1aXJlZCBmb3IgdGVzdGluZwptb2R1bGUuZXhwb3J0cyA9ICEhT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkgewogIHZhciBzeW1ib2wgPSBTeW1ib2woJ3N5bWJvbCBkZXRlY3Rpb24nKTsKICAvLyBDaHJvbWUgMzggU3ltYm9sIGhhcyBpbmNvcnJlY3QgdG9TdHJpbmcgY29udmVyc2lvbgogIC8vIGBnZXQtb3duLXByb3BlcnR5LXN5bWJvbHNgIHBvbHlmaWxsIHN5bWJvbHMgY29udmVydGVkIHRvIG9iamVjdCBhcmUgbm90IFN5bWJvbCBpbnN0YW5jZXMKICAvLyBuYjogRG8gbm90IGNhbGwgYFN0cmluZ2AgZGlyZWN0bHkgdG8gYXZvaWQgdGhpcyBiZWluZyBvcHRpbWl6ZWQgb3V0IHRvIGBzeW1ib2wrJydgIHdoaWNoIHdpbGwsCiAgLy8gb2YgY291cnNlLCBmYWlsLgogIHJldHVybiAhJFN0cmluZyhzeW1ib2wpIHx8ICEoT2JqZWN0KHN5bWJvbCkgaW5zdGFuY2VvZiBTeW1ib2wpIHx8CiAgICAvLyBDaHJvbWUgMzgtNDAgc3ltYm9scyBhcmUgbm90IGluaGVyaXRlZCBmcm9tIERPTSBjb2xsZWN0aW9ucyBwcm90b3R5cGVzIHRvIGluc3RhbmNlcwogICAgIVN5bWJvbC5zaGFtICYmIFY4X1ZFUlNJT04gJiYgVjhfVkVSU0lPTiA8IDQxOwp9KTsKCgovKioqLyB9KSwKCi8qKiovIDQ1Mjc6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgREVTQ1JJUFRPUlMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM3MjQpOwp2YXIgaXNBcnJheSA9IF9fd2VicGFja19yZXF1aXJlX18oNDM3Nik7Cgp2YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjsKLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZQp2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsKCi8vIFNhZmFyaSA8IDEzIGRvZXMgbm90IHRocm93IGFuIGVycm9yIGluIHRoaXMgY2FzZQp2YXIgU0lMRU5UX09OX05PTl9XUklUQUJMRV9MRU5HVEhfU0VUID0gREVTQ1JJUFRPUlMgJiYgIWZ1bmN0aW9uICgpIHsKICAvLyBtYWtlcyBubyBzZW5zZSB3aXRob3V0IHByb3BlciBzdHJpY3QgbW9kZSBzdXBwb3J0CiAgaWYgKHRoaXMgIT09IHVuZGVmaW5lZCkgcmV0dXJuIHRydWU7CiAgdHJ5IHsKICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZQogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFtdLCAnbGVuZ3RoJywgeyB3cml0YWJsZTogZmFsc2UgfSkubGVuZ3RoID0gMTsKICB9IGNhdGNoIChlcnJvcikgewogICAgcmV0dXJuIGVycm9yIGluc3RhbmNlb2YgVHlwZUVycm9yOwogIH0KfSgpOwoKbW9kdWxlLmV4cG9ydHMgPSBTSUxFTlRfT05fTk9OX1dSSVRBQkxFX0xFTkdUSF9TRVQgPyBmdW5jdGlvbiAoTywgbGVuZ3RoKSB7CiAgaWYgKGlzQXJyYXkoTykgJiYgIWdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCAnbGVuZ3RoJykud3JpdGFibGUpIHsKICAgIHRocm93IG5ldyAkVHlwZUVycm9yKCdDYW5ub3Qgc2V0IHJlYWQgb25seSAubGVuZ3RoJyk7CiAgfSByZXR1cm4gTy5sZW5ndGggPSBsZW5ndGg7Cn0gOiBmdW5jdGlvbiAoTywgbGVuZ3RoKSB7CiAgcmV0dXJuIE8ubGVuZ3RoID0gbGVuZ3RoOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gNDU0OToKLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCnZhciBnbG9iYWxUaGlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NTc2KTsKCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L2VjbWEyNjIvcHVsbC8zNDY3Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FLCBFeHBlY3RlZEVycm9yKSB7CiAgdmFyIEl0ZXJhdG9yID0gZ2xvYmFsVGhpcy5JdGVyYXRvcjsKICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSBJdGVyYXRvciAmJiBJdGVyYXRvci5wcm90b3R5cGU7CiAgdmFyIG1ldGhvZCA9IEl0ZXJhdG9yUHJvdG90eXBlICYmIEl0ZXJhdG9yUHJvdG90eXBlW01FVEhPRF9OQU1FXTsKCiAgdmFyIENMT1NFRCA9IGZhbHNlOwoKICBpZiAobWV0aG9kKSB0cnkgewogICAgbWV0aG9kLmNhbGwoewogICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB7IGRvbmU6IHRydWUgfTsgfSwKICAgICAgJ3JldHVybic6IGZ1bmN0aW9uICgpIHsgQ0xPU0VEID0gdHJ1ZTsgfQogICAgfSwgLTEpOwogIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkxMTk1CiAgICBpZiAoIShlcnJvciBpbnN0YW5jZW9mIEV4cGVjdGVkRXJyb3IpKSBDTE9TRUQgPSBmYWxzZTsKICB9CgogIGlmICghQ0xPU0VEKSByZXR1cm4gbWV0aG9kOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gNDU3NjoKLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSkgewoKCnZhciBjaGVjayA9IGZ1bmN0aW9uIChpdCkgewogIHJldHVybiBpdCAmJiBpdC5NYXRoID09PSBNYXRoICYmIGl0Owp9OwoKLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjgKbW9kdWxlLmV4cG9ydHMgPQogIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1nbG9iYWwtdGhpcyAtLSBzYWZlCiAgY2hlY2sodHlwZW9mIGdsb2JhbFRoaXMgPT0gJ29iamVjdCcgJiYgZ2xvYmFsVGhpcykgfHwKICBjaGVjayh0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdykgfHwKICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzIC0tIHNhZmUKICBjaGVjayh0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmKSB8fAogIGNoZWNrKHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsKSB8fAogIGNoZWNrKHR5cGVvZiB0aGlzID09ICdvYmplY3QnICYmIHRoaXMpIHx8CiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jIC0tIGZhbGxiYWNrCiAgKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pKCkgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTsKCgovKioqLyB9KSwKCi8qKiovIDQ2MDM6Ci8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCnZhciBkZWZpbmVCdWlsdEluID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2ODQwKTsKdmFyIHVuY3VycnlUaGlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NTA0KTsKdmFyIHRvU3RyaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NTUpOwp2YXIgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4MTIpOwoKdmFyICRVUkxTZWFyY2hQYXJhbXMgPSBVUkxTZWFyY2hQYXJhbXM7CnZhciBVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUgPSAkVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZTsKdmFyIGFwcGVuZCA9IHVuY3VycnlUaGlzKFVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZS5hcHBlbmQpOwp2YXIgJGRlbGV0ZSA9IHVuY3VycnlUaGlzKFVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZVsnZGVsZXRlJ10pOwp2YXIgZm9yRWFjaCA9IHVuY3VycnlUaGlzKFVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZS5mb3JFYWNoKTsKdmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTsKdmFyIHBhcmFtcyA9IG5ldyAkVVJMU2VhcmNoUGFyYW1zKCdhPTEmYT0yJmI9MycpOwoKcGFyYW1zWydkZWxldGUnXSgnYScsIDEpOwovLyBgdW5kZWZpbmVkYCBjYXNlIGlzIGEgQ2hyb21pdW0gMTE3IGJ1ZwovLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0xNDIyMgpwYXJhbXNbJ2RlbGV0ZSddKCdiJywgdW5kZWZpbmVkKTsKCmlmIChwYXJhbXMgKyAnJyAhPT0gJ2E9MicpIHsKICBkZWZpbmVCdWlsdEluKFVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZSwgJ2RlbGV0ZScsIGZ1bmN0aW9uIChuYW1lIC8qICwgdmFsdWUgKi8pIHsKICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoOwogICAgdmFyICR2YWx1ZSA9IGxlbmd0aCA8IDIgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMV07CiAgICBpZiAobGVuZ3RoICYmICR2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gJGRlbGV0ZSh0aGlzLCBuYW1lKTsKICAgIHZhciBlbnRyaWVzID0gW107CiAgICBmb3JFYWNoKHRoaXMsIGZ1bmN0aW9uICh2LCBrKSB7IC8vIGFsc28gdmFsaWRhdGVzIGB0aGlzYAogICAgICBwdXNoKGVudHJpZXMsIHsga2V5OiBrLCB2YWx1ZTogdiB9KTsKICAgIH0pOwogICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgobGVuZ3RoLCAxKTsKICAgIHZhciBrZXkgPSB0b1N0cmluZyhuYW1lKTsKICAgIHZhciB2YWx1ZSA9IHRvU3RyaW5nKCR2YWx1ZSk7CiAgICB2YXIgaW5kZXggPSAwOwogICAgdmFyIGRpbmRleCA9IDA7CiAgICB2YXIgZm91bmQgPSBmYWxzZTsKICAgIHZhciBlbnRyaWVzTGVuZ3RoID0gZW50cmllcy5sZW5ndGg7CiAgICB2YXIgZW50cnk7CiAgICB3aGlsZSAoaW5kZXggPCBlbnRyaWVzTGVuZ3RoKSB7CiAgICAgIGVudHJ5ID0gZW50cmllc1tpbmRleCsrXTsKICAgICAgaWYgKGZvdW5kIHx8IGVudHJ5LmtleSA9PT0ga2V5KSB7CiAgICAgICAgZm91bmQgPSB0cnVlOwogICAgICAgICRkZWxldGUodGhpcywgZW50cnkua2V5KTsKICAgICAgfSBlbHNlIGRpbmRleCsrOwogICAgfQogICAgd2hpbGUgKGRpbmRleCA8IGVudHJpZXNMZW5ndGgpIHsKICAgICAgZW50cnkgPSBlbnRyaWVzW2RpbmRleCsrXTsKICAgICAgaWYgKCEoZW50cnkua2V5ID09PSBrZXkgJiYgZW50cnkudmFsdWUgPT09IHZhbHVlKSkgYXBwZW5kKHRoaXMsIGVudHJ5LmtleSwgZW50cnkudmFsdWUpOwogICAgfQogIH0sIHsgZW51bWVyYWJsZTogdHJ1ZSwgdW5zYWZlOiB0cnVlIH0pOwp9CgoKLyoqKi8gfSksCgovKioqLyA0NjI4OgovKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgJCA9IF9fd2VicGFja19yZXF1aXJlX18oNjUxOCk7CnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18oNjA0Myk7CgovLyBgUHJvbWlzZS53aXRoUmVzb2x2ZXJzYCBtZXRob2QKLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLndpdGhSZXNvbHZlcnMKJCh7IHRhcmdldDogJ1Byb21pc2UnLCBzdGF0OiB0cnVlIH0sIHsKICB3aXRoUmVzb2x2ZXJzOiBmdW5jdGlvbiB3aXRoUmVzb2x2ZXJzKCkgewogICAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZih0aGlzKTsKICAgIHJldHVybiB7CiAgICAgIHByb21pc2U6IHByb21pc2VDYXBhYmlsaXR5LnByb21pc2UsCiAgICAgIHJlc29sdmU6IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmUsCiAgICAgIHJlamVjdDogcHJvbWlzZUNhcGFiaWxpdHkucmVqZWN0CiAgICB9OwogIH0KfSk7CgoKLyoqKi8gfSksCgovKioqLyA0NjQ0OgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIE5BVElWRV9BUlJBWV9CVUZGRVIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc4MTEpOwp2YXIgREVTQ1JJUFRPUlMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM3MjQpOwp2YXIgZ2xvYmFsVGhpcyA9IF9fd2VicGFja19yZXF1aXJlX18oNDU3Nik7CnZhciBpc0NhbGxhYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OTAxKTsKdmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNCk7CnZhciBoYXNPd24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkyOTcpOwp2YXIgY2xhc3NvZiA9IF9fd2VicGFja19yZXF1aXJlX18oNjk1NSk7CnZhciB0cnlUb1N0cmluZyA9IF9fd2VicGFja19yZXF1aXJlX18oNjgyMyk7CnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY2OTkpOwp2YXIgZGVmaW5lQnVpbHRJbiA9IF9fd2VicGFja19yZXF1aXJlX18oNjg0MCk7CnZhciBkZWZpbmVCdWlsdEluQWNjZXNzb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxMDYpOwp2YXIgaXNQcm90b3R5cGVPZiA9IF9fd2VicGFja19yZXF1aXJlX18oMTYyNSk7CnZhciBnZXRQcm90b3R5cGVPZiA9IF9fd2VicGFja19yZXF1aXJlX18oMjc4Nyk7CnZhciBzZXRQcm90b3R5cGVPZiA9IF9fd2VicGFja19yZXF1aXJlX18oMjk2Nyk7CnZhciB3ZWxsS25vd25TeW1ib2wgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgyMjcpOwp2YXIgdWlkID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMzkyKTsKdmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExODEpOwoKdmFyIGVuZm9yY2VJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5lbmZvcmNlOwp2YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0Owp2YXIgSW50OEFycmF5ID0gZ2xvYmFsVGhpcy5JbnQ4QXJyYXk7CnZhciBJbnQ4QXJyYXlQcm90b3R5cGUgPSBJbnQ4QXJyYXkgJiYgSW50OEFycmF5LnByb3RvdHlwZTsKdmFyIFVpbnQ4Q2xhbXBlZEFycmF5ID0gZ2xvYmFsVGhpcy5VaW50OENsYW1wZWRBcnJheTsKdmFyIFVpbnQ4Q2xhbXBlZEFycmF5UHJvdG90eXBlID0gVWludDhDbGFtcGVkQXJyYXkgJiYgVWludDhDbGFtcGVkQXJyYXkucHJvdG90eXBlOwp2YXIgVHlwZWRBcnJheSA9IEludDhBcnJheSAmJiBnZXRQcm90b3R5cGVPZihJbnQ4QXJyYXkpOwp2YXIgVHlwZWRBcnJheVByb3RvdHlwZSA9IEludDhBcnJheVByb3RvdHlwZSAmJiBnZXRQcm90b3R5cGVPZihJbnQ4QXJyYXlQcm90b3R5cGUpOwp2YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTsKdmFyIFR5cGVFcnJvciA9IGdsb2JhbFRoaXMuVHlwZUVycm9yOwoKdmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7CnZhciBUWVBFRF9BUlJBWV9UQUcgPSB1aWQoJ1RZUEVEX0FSUkFZX1RBRycpOwp2YXIgVFlQRURfQVJSQVlfQ09OU1RSVUNUT1IgPSAnVHlwZWRBcnJheUNvbnN0cnVjdG9yJzsKLy8gRml4aW5nIG5hdGl2ZSB0eXBlZCBhcnJheXMgaW4gT3BlcmEgUHJlc3RvIGNyYXNoZXMgdGhlIGJyb3dzZXIsIHNlZSAjNTk1CnZhciBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTID0gTkFUSVZFX0FSUkFZX0JVRkZFUiAmJiAhIXNldFByb3RvdHlwZU9mICYmIGNsYXNzb2YoZ2xvYmFsVGhpcy5vcGVyYSkgIT09ICdPcGVyYSc7CnZhciBUWVBFRF9BUlJBWV9UQUdfUkVRVUlSRUQgPSBmYWxzZTsKdmFyIE5BTUUsIENvbnN0cnVjdG9yLCBQcm90b3R5cGU7Cgp2YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QgPSB7CiAgSW50OEFycmF5OiAxLAogIFVpbnQ4QXJyYXk6IDEsCiAgVWludDhDbGFtcGVkQXJyYXk6IDEsCiAgSW50MTZBcnJheTogMiwKICBVaW50MTZBcnJheTogMiwKICBJbnQzMkFycmF5OiA0LAogIFVpbnQzMkFycmF5OiA0LAogIEZsb2F0MzJBcnJheTogNCwKICBGbG9hdDY0QXJyYXk6IDgKfTsKCnZhciBCaWdJbnRBcnJheUNvbnN0cnVjdG9yc0xpc3QgPSB7CiAgQmlnSW50NjRBcnJheTogOCwKICBCaWdVaW50NjRBcnJheTogOAp9OwoKdmFyIGlzVmlldyA9IGZ1bmN0aW9uIGlzVmlldyhpdCkgewogIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gZmFsc2U7CiAgdmFyIGtsYXNzID0gY2xhc3NvZihpdCk7CiAgcmV0dXJuIGtsYXNzID09PSAnRGF0YVZpZXcnCiAgICB8fCBoYXNPd24oVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QsIGtsYXNzKQogICAgfHwgaGFzT3duKEJpZ0ludEFycmF5Q29uc3RydWN0b3JzTGlzdCwga2xhc3MpOwp9OwoKdmFyIGdldFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIChpdCkgewogIHZhciBwcm90byA9IGdldFByb3RvdHlwZU9mKGl0KTsKICBpZiAoIWlzT2JqZWN0KHByb3RvKSkgcmV0dXJuOwogIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUocHJvdG8pOwogIHJldHVybiAoc3RhdGUgJiYgaGFzT3duKHN0YXRlLCBUWVBFRF9BUlJBWV9DT05TVFJVQ1RPUikpID8gc3RhdGVbVFlQRURfQVJSQVlfQ09OU1RSVUNUT1JdIDogZ2V0VHlwZWRBcnJheUNvbnN0cnVjdG9yKHByb3RvKTsKfTsKCnZhciBpc1R5cGVkQXJyYXkgPSBmdW5jdGlvbiAoaXQpIHsKICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGZhbHNlOwogIHZhciBrbGFzcyA9IGNsYXNzb2YoaXQpOwogIHJldHVybiBoYXNPd24oVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QsIGtsYXNzKQogICAgfHwgaGFzT3duKEJpZ0ludEFycmF5Q29uc3RydWN0b3JzTGlzdCwga2xhc3MpOwp9OwoKdmFyIGFUeXBlZEFycmF5ID0gZnVuY3Rpb24gKGl0KSB7CiAgaWYgKGlzVHlwZWRBcnJheShpdCkpIHJldHVybiBpdDsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUYXJnZXQgaXMgbm90IGEgdHlwZWQgYXJyYXknKTsKfTsKCnZhciBhVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gKEMpIHsKICBpZiAoaXNDYWxsYWJsZShDKSAmJiAoIXNldFByb3RvdHlwZU9mIHx8IGlzUHJvdG90eXBlT2YoVHlwZWRBcnJheSwgQykpKSByZXR1cm4gQzsKICB0aHJvdyBuZXcgVHlwZUVycm9yKHRyeVRvU3RyaW5nKEMpICsgJyBpcyBub3QgYSB0eXBlZCBhcnJheSBjb25zdHJ1Y3RvcicpOwp9OwoKdmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBmdW5jdGlvbiAoS0VZLCBwcm9wZXJ0eSwgZm9yY2VkLCBvcHRpb25zKSB7CiAgaWYgKCFERVNDUklQVE9SUykgcmV0dXJuOwogIGlmIChmb3JjZWQpIGZvciAodmFyIEFSUkFZIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0KSB7CiAgICB2YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gZ2xvYmFsVGhpc1tBUlJBWV07CiAgICBpZiAoVHlwZWRBcnJheUNvbnN0cnVjdG9yICYmIGhhc093bihUeXBlZEFycmF5Q29uc3RydWN0b3IucHJvdG90eXBlLCBLRVkpKSB0cnkgewogICAgICBkZWxldGUgVHlwZWRBcnJheUNvbnN0cnVjdG9yLnByb3RvdHlwZVtLRVldOwogICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgLy8gb2xkIFdlYktpdCBidWcgLSBzb21lIG1ldGhvZHMgYXJlIG5vbi1jb25maWd1cmFibGUKICAgICAgdHJ5IHsKICAgICAgICBUeXBlZEFycmF5Q29uc3RydWN0b3IucHJvdG90eXBlW0tFWV0gPSBwcm9wZXJ0eTsKICAgICAgfSBjYXRjaCAoZXJyb3IyKSB7IC8qIGVtcHR5ICovIH0KICAgIH0KICB9CiAgaWYgKCFUeXBlZEFycmF5UHJvdG90eXBlW0tFWV0gfHwgZm9yY2VkKSB7CiAgICBkZWZpbmVCdWlsdEluKFR5cGVkQXJyYXlQcm90b3R5cGUsIEtFWSwgZm9yY2VkID8gcHJvcGVydHkKICAgICAgOiBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTICYmIEludDhBcnJheVByb3RvdHlwZVtLRVldIHx8IHByb3BlcnR5LCBvcHRpb25zKTsKICB9Cn07Cgp2YXIgZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZCA9IGZ1bmN0aW9uIChLRVksIHByb3BlcnR5LCBmb3JjZWQpIHsKICB2YXIgQVJSQVksIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcjsKICBpZiAoIURFU0NSSVBUT1JTKSByZXR1cm47CiAgaWYgKHNldFByb3RvdHlwZU9mKSB7CiAgICBpZiAoZm9yY2VkKSBmb3IgKEFSUkFZIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0KSB7CiAgICAgIFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IGdsb2JhbFRoaXNbQVJSQVldOwogICAgICBpZiAoVHlwZWRBcnJheUNvbnN0cnVjdG9yICYmIGhhc093bihUeXBlZEFycmF5Q29uc3RydWN0b3IsIEtFWSkpIHRyeSB7CiAgICAgICAgZGVsZXRlIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcltLRVldOwogICAgICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9CiAgICB9CiAgICBpZiAoIVR5cGVkQXJyYXlbS0VZXSB8fCBmb3JjZWQpIHsKICAgICAgLy8gVjggfiBDaHJvbWUgNDktNTAgYCVUeXBlZEFycmF5JWAgbWV0aG9kcyBhcmUgbm9uLXdyaXRhYmxlIG5vbi1jb25maWd1cmFibGUKICAgICAgdHJ5IHsKICAgICAgICByZXR1cm4gZGVmaW5lQnVpbHRJbihUeXBlZEFycmF5LCBLRVksIGZvcmNlZCA/IHByb3BlcnR5IDogTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyAmJiBUeXBlZEFycmF5W0tFWV0gfHwgcHJvcGVydHkpOwogICAgICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9CiAgICB9IGVsc2UgcmV0dXJuOwogIH0KICBmb3IgKEFSUkFZIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0KSB7CiAgICBUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBnbG9iYWxUaGlzW0FSUkFZXTsKICAgIGlmIChUeXBlZEFycmF5Q29uc3RydWN0b3IgJiYgKCFUeXBlZEFycmF5Q29uc3RydWN0b3JbS0VZXSB8fCBmb3JjZWQpKSB7CiAgICAgIGRlZmluZUJ1aWx0SW4oVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBLRVksIHByb3BlcnR5KTsKICAgIH0KICB9Cn07Cgpmb3IgKE5BTUUgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIHsKICBDb25zdHJ1Y3RvciA9IGdsb2JhbFRoaXNbTkFNRV07CiAgUHJvdG90eXBlID0gQ29uc3RydWN0b3IgJiYgQ29uc3RydWN0b3IucHJvdG90eXBlOwogIGlmIChQcm90b3R5cGUpIGVuZm9yY2VJbnRlcm5hbFN0YXRlKFByb3RvdHlwZSlbVFlQRURfQVJSQVlfQ09OU1RSVUNUT1JdID0gQ29uc3RydWN0b3I7CiAgZWxzZSBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTID0gZmFsc2U7Cn0KCmZvciAoTkFNRSBpbiBCaWdJbnRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIHsKICBDb25zdHJ1Y3RvciA9IGdsb2JhbFRoaXNbTkFNRV07CiAgUHJvdG90eXBlID0gQ29uc3RydWN0b3IgJiYgQ29uc3RydWN0b3IucHJvdG90eXBlOwogIGlmIChQcm90b3R5cGUpIGVuZm9yY2VJbnRlcm5hbFN0YXRlKFByb3RvdHlwZSlbVFlQRURfQVJSQVlfQ09OU1RSVUNUT1JdID0gQ29uc3RydWN0b3I7Cn0KCi8vIFdlYktpdCBidWcgLSB0eXBlZCBhcnJheXMgY29uc3RydWN0b3JzIHByb3RvdHlwZSBpcyBPYmplY3QucHJvdG90eXBlCmlmICghTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyB8fCAhaXNDYWxsYWJsZShUeXBlZEFycmF5KSB8fCBUeXBlZEFycmF5ID09PSBGdW5jdGlvbi5wcm90b3R5cGUpIHsKICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2hhZG93IC0tIHNhZmUKICBUeXBlZEFycmF5ID0gZnVuY3Rpb24gVHlwZWRBcnJheSgpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0luY29ycmVjdCBpbnZvY2F0aW9uJyk7CiAgfTsKICBpZiAoTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUykgZm9yIChOQU1FIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0KSB7CiAgICBpZiAoZ2xvYmFsVGhpc1tOQU1FXSkgc2V0UHJvdG90eXBlT2YoZ2xvYmFsVGhpc1tOQU1FXSwgVHlwZWRBcnJheSk7CiAgfQp9CgppZiAoIU5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgfHwgIVR5cGVkQXJyYXlQcm90b3R5cGUgfHwgVHlwZWRBcnJheVByb3RvdHlwZSA9PT0gT2JqZWN0UHJvdG90eXBlKSB7CiAgVHlwZWRBcnJheVByb3RvdHlwZSA9IFR5cGVkQXJyYXkucHJvdG90eXBlOwogIGlmIChOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTKSBmb3IgKE5BTUUgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIHsKICAgIGlmIChnbG9iYWxUaGlzW05BTUVdKSBzZXRQcm90b3R5cGVPZihnbG9iYWxUaGlzW05BTUVdLnByb3RvdHlwZSwgVHlwZWRBcnJheVByb3RvdHlwZSk7CiAgfQp9CgovLyBXZWJLaXQgYnVnIC0gb25lIG1vcmUgb2JqZWN0IGluIFVpbnQ4Q2xhbXBlZEFycmF5IHByb3RvdHlwZSBjaGFpbgppZiAoTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyAmJiBnZXRQcm90b3R5cGVPZihVaW50OENsYW1wZWRBcnJheVByb3RvdHlwZSkgIT09IFR5cGVkQXJyYXlQcm90b3R5cGUpIHsKICBzZXRQcm90b3R5cGVPZihVaW50OENsYW1wZWRBcnJheVByb3RvdHlwZSwgVHlwZWRBcnJheVByb3RvdHlwZSk7Cn0KCmlmIChERVNDUklQVE9SUyAmJiAhaGFzT3duKFR5cGVkQXJyYXlQcm90b3R5cGUsIFRPX1NUUklOR19UQUcpKSB7CiAgVFlQRURfQVJSQVlfVEFHX1JFUVVJUkVEID0gdHJ1ZTsKICBkZWZpbmVCdWlsdEluQWNjZXNzb3IoVHlwZWRBcnJheVByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgewogICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgZ2V0OiBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBpc09iamVjdCh0aGlzKSA/IHRoaXNbVFlQRURfQVJSQVlfVEFHXSA6IHVuZGVmaW5lZDsKICAgIH0KICB9KTsKICBmb3IgKE5BTUUgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIGlmIChnbG9iYWxUaGlzW05BTUVdKSB7CiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoZ2xvYmFsVGhpc1tOQU1FXSwgVFlQRURfQVJSQVlfVEFHLCBOQU1FKTsKICB9Cn0KCm1vZHVsZS5leHBvcnRzID0gewogIE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1M6IE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MsCiAgVFlQRURfQVJSQVlfVEFHOiBUWVBFRF9BUlJBWV9UQUdfUkVRVUlSRUQgJiYgVFlQRURfQVJSQVlfVEFHLAogIGFUeXBlZEFycmF5OiBhVHlwZWRBcnJheSwKICBhVHlwZWRBcnJheUNvbnN0cnVjdG9yOiBhVHlwZWRBcnJheUNvbnN0cnVjdG9yLAogIGV4cG9ydFR5cGVkQXJyYXlNZXRob2Q6IGV4cG9ydFR5cGVkQXJyYXlNZXRob2QsCiAgZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZDogZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZCwKICBnZXRUeXBlZEFycmF5Q29uc3RydWN0b3I6IGdldFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwKICBpc1ZpZXc6IGlzVmlldywKICBpc1R5cGVkQXJyYXk6IGlzVHlwZWRBcnJheSwKICBUeXBlZEFycmF5OiBUeXBlZEFycmF5LAogIFR5cGVkQXJyYXlQcm90b3R5cGU6IFR5cGVkQXJyYXlQcm90b3R5cGUKfTsKCgovKioqLyB9KSwKCi8qKiovIDQ2NTk6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgREVTQ1JJUFRPUlMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM3MjQpOwp2YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5MTMpOwp2YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2OTgwKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkgewogIGlmIChERVNDUklQVE9SUykgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIGtleSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsIHZhbHVlKSk7CiAgZWxzZSBvYmplY3Rba2V5XSA9IHZhbHVlOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gNDkwMToKLyoqKi8gKChtb2R1bGUpID0+IHsKCgovLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLUlzSFRNTEREQS1pbnRlcm5hbC1zbG90CnZhciBkb2N1bWVudEFsbCA9IHR5cGVvZiBkb2N1bWVudCA9PSAnb2JqZWN0JyAmJiBkb2N1bWVudC5hbGw7CgovLyBgSXNDYWxsYWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXNjYWxsYWJsZQovLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW5pY29ybi9uby10eXBlb2YtdW5kZWZpbmVkIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nCm1vZHVsZS5leHBvcnRzID0gdHlwZW9mIGRvY3VtZW50QWxsID09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50QWxsICE9PSB1bmRlZmluZWQgPyBmdW5jdGlvbiAoYXJndW1lbnQpIHsKICByZXR1cm4gdHlwZW9mIGFyZ3VtZW50ID09ICdmdW5jdGlvbicgfHwgYXJndW1lbnQgPT09IGRvY3VtZW50QWxsOwp9IDogZnVuY3Rpb24gKGFyZ3VtZW50KSB7CiAgcmV0dXJuIHR5cGVvZiBhcmd1bWVudCA9PSAnZnVuY3Rpb24nOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gNDkxMzoKLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCnZhciBERVNDUklQVE9SUyA9IF9fd2VicGFja19yZXF1aXJlX18oMzcyNCk7CnZhciBJRThfRE9NX0RFRklORSA9IF9fd2VicGFja19yZXF1aXJlX18oNTkxNyk7CnZhciBWOF9QUk9UT1RZUEVfREVGSU5FX0JVRyA9IF9fd2VicGFja19yZXF1aXJlX18oODY4Nik7CnZhciBhbk9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oODU1MSk7CnZhciB0b1Byb3BlcnR5S2V5ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2OTY5KTsKCnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yOwovLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmUKdmFyICRkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTsKLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZQp2YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7CnZhciBFTlVNRVJBQkxFID0gJ2VudW1lcmFibGUnOwp2YXIgQ09ORklHVVJBQkxFID0gJ2NvbmZpZ3VyYWJsZSc7CnZhciBXUklUQUJMRSA9ICd3cml0YWJsZSc7CgovLyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBtZXRob2QKLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydHkKZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyBWOF9QUk9UT1RZUEVfREVGSU5FX0JVRyA/IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHsKICBhbk9iamVjdChPKTsKICBQID0gdG9Qcm9wZXJ0eUtleShQKTsKICBhbk9iamVjdChBdHRyaWJ1dGVzKTsKICBpZiAodHlwZW9mIE8gPT09ICdmdW5jdGlvbicgJiYgUCA9PT0gJ3Byb3RvdHlwZScgJiYgJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzICYmIFdSSVRBQkxFIGluIEF0dHJpYnV0ZXMgJiYgIUF0dHJpYnV0ZXNbV1JJVEFCTEVdKSB7CiAgICB2YXIgY3VycmVudCA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCk7CiAgICBpZiAoY3VycmVudCAmJiBjdXJyZW50W1dSSVRBQkxFXSkgewogICAgICBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTsKICAgICAgQXR0cmlidXRlcyA9IHsKICAgICAgICBjb25maWd1cmFibGU6IENPTkZJR1VSQUJMRSBpbiBBdHRyaWJ1dGVzID8gQXR0cmlidXRlc1tDT05GSUdVUkFCTEVdIDogY3VycmVudFtDT05GSUdVUkFCTEVdLAogICAgICAgIGVudW1lcmFibGU6IEVOVU1FUkFCTEUgaW4gQXR0cmlidXRlcyA/IEF0dHJpYnV0ZXNbRU5VTUVSQUJMRV0gOiBjdXJyZW50W0VOVU1FUkFCTEVdLAogICAgICAgIHdyaXRhYmxlOiBmYWxzZQogICAgICB9OwogICAgfQogIH0gcmV0dXJuICRkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTsKfSA6ICRkZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHsKICBhbk9iamVjdChPKTsKICBQID0gdG9Qcm9wZXJ0eUtleShQKTsKICBhbk9iamVjdChBdHRyaWJ1dGVzKTsKICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7CiAgICByZXR1cm4gJGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpOwogIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH0KICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBuZXcgJFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQnKTsKICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTsKICByZXR1cm4gTzsKfTsKCgovKioqLyB9KSwKCi8qKiovIDQ5MTY6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgZ2V0QnVpbHRJbiA9IF9fd2VicGFja19yZXF1aXJlX18oNzc1MSk7Cgp2YXIgY3JlYXRlU2V0TGlrZSA9IGZ1bmN0aW9uIChzaXplKSB7CiAgcmV0dXJuIHsKICAgIHNpemU6IHNpemUsCiAgICBoYXM6IGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfSwKICAgIGtleXM6IGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlIH07CiAgICAgICAgfQogICAgICB9OwogICAgfQogIH07Cn07Cgp2YXIgY3JlYXRlU2V0TGlrZVdpdGhJbmZpbml0eVNpemUgPSBmdW5jdGlvbiAoc2l6ZSkgewogIHJldHVybiB7CiAgICBzaXplOiBzaXplLAogICAgaGFzOiBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiB0cnVlOwogICAgfSwKICAgIGtleXM6IGZ1bmN0aW9uICgpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCdlJyk7CiAgICB9CiAgfTsKfTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrKSB7CiAgdmFyIFNldCA9IGdldEJ1aWx0SW4oJ1NldCcpOwogIHRyeSB7CiAgICBuZXcgU2V0KClbbmFtZV0oY3JlYXRlU2V0TGlrZSgwKSk7CiAgICB0cnkgewogICAgICAvLyBsYXRlIHNwZWMgY2hhbmdlLCBlYXJseSBXZWJLaXQgfiBTYWZhcmkgMTcgaW1wbGVtZW50YXRpb24gZG9lcyBub3QgcGFzcyBpdAogICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zZXQtbWV0aG9kcy9wdWxsLzg4CiAgICAgIC8vIGFsc28gY292ZXJlZCBlbmdpbmVzIHdpdGgKICAgICAgLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI3MjY3OQogICAgICBuZXcgU2V0KClbbmFtZV0oY3JlYXRlU2V0TGlrZSgtMSkpOwogICAgICByZXR1cm4gZmFsc2U7CiAgICB9IGNhdGNoIChlcnJvcjIpIHsKICAgICAgaWYgKCFjYWxsYmFjaykgcmV0dXJuIHRydWU7CiAgICAgIC8vIGVhcmx5IFY4IGltcGxlbWVudGF0aW9uIGJ1ZwogICAgICAvLyBodHRwczovL2lzc3Vlcy5jaHJvbWl1bS5vcmcvaXNzdWVzLzM1MTMzMjYzNAogICAgICB0cnkgewogICAgICAgIG5ldyBTZXQoKVtuYW1lXShjcmVhdGVTZXRMaWtlV2l0aEluZmluaXR5U2l6ZSgtSW5maW5pdHkpKTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgdmFyIHNldCA9IG5ldyBTZXQoKTsKICAgICAgICBzZXQuYWRkKDEpOwogICAgICAgIHNldC5hZGQoMik7CiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKHNldFtuYW1lXShjcmVhdGVTZXRMaWtlV2l0aEluZmluaXR5U2l6ZShJbmZpbml0eSkpKTsKICAgICAgfQogICAgfQogIH0gY2F0Y2ggKGVycm9yKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQp9OwoKCi8qKiovIH0pLAoKLyoqKi8gNDk3OToKLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyICQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY1MTgpOwp2YXIgZ2xvYmFsVGhpcyA9IF9fd2VicGFja19yZXF1aXJlX18oNDU3Nik7CnZhciBnZXRCdWlsdEluID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NzUxKTsKdmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IF9fd2VicGFja19yZXF1aXJlX18oNjk4MCk7CnZhciBkZWZpbmVQcm9wZXJ0eSA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5MTMpLmYpOwp2YXIgaGFzT3duID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5Mjk3KTsKdmFyIGFuSW5zdGFuY2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY3OSk7CnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IF9fd2VicGFja19yZXF1aXJlX18oMzE2Nyk7CnZhciBub3JtYWxpemVTdHJpbmdBcmd1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMjYwMyk7CnZhciBET01FeGNlcHRpb25Db25zdGFudHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwMDIpOwp2YXIgY2xlYXJFcnJvclN0YWNrID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NTc0KTsKdmFyIERFU0NSSVBUT1JTID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNzI0KTsKdmFyIElTX1BVUkUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYzOTUpOwoKdmFyIERPTV9FWENFUFRJT04gPSAnRE9NRXhjZXB0aW9uJzsKdmFyIEVycm9yID0gZ2V0QnVpbHRJbignRXJyb3InKTsKdmFyIE5hdGl2ZURPTUV4Y2VwdGlvbiA9IGdldEJ1aWx0SW4oRE9NX0VYQ0VQVElPTik7Cgp2YXIgJERPTUV4Y2VwdGlvbiA9IGZ1bmN0aW9uIERPTUV4Y2VwdGlvbigpIHsKICBhbkluc3RhbmNlKHRoaXMsIERPTUV4Y2VwdGlvblByb3RvdHlwZSk7CiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7CiAgdmFyIG1lc3NhZ2UgPSBub3JtYWxpemVTdHJpbmdBcmd1bWVudChhcmd1bWVudHNMZW5ndGggPCAxID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKTsKICB2YXIgbmFtZSA9IG5vcm1hbGl6ZVN0cmluZ0FyZ3VtZW50KGFyZ3VtZW50c0xlbmd0aCA8IDIgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMV0sICdFcnJvcicpOwogIHZhciB0aGF0ID0gbmV3IE5hdGl2ZURPTUV4Y2VwdGlvbihtZXNzYWdlLCBuYW1lKTsKICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7CiAgZXJyb3IubmFtZSA9IERPTV9FWENFUFRJT047CiAgZGVmaW5lUHJvcGVydHkodGhhdCwgJ3N0YWNrJywgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIGNsZWFyRXJyb3JTdGFjayhlcnJvci5zdGFjaywgMSkpKTsKICBpbmhlcml0SWZSZXF1aXJlZCh0aGF0LCB0aGlzLCAkRE9NRXhjZXB0aW9uKTsKICByZXR1cm4gdGhhdDsKfTsKCnZhciBET01FeGNlcHRpb25Qcm90b3R5cGUgPSAkRE9NRXhjZXB0aW9uLnByb3RvdHlwZSA9IE5hdGl2ZURPTUV4Y2VwdGlvbi5wcm90b3R5cGU7Cgp2YXIgRVJST1JfSEFTX1NUQUNLID0gJ3N0YWNrJyBpbiBuZXcgRXJyb3IoRE9NX0VYQ0VQVElPTik7CnZhciBET01fRVhDRVBUSU9OX0hBU19TVEFDSyA9ICdzdGFjaycgaW4gbmV3IE5hdGl2ZURPTUV4Y2VwdGlvbigxLCAyKTsKCi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmUKdmFyIGRlc2NyaXB0b3IgPSBOYXRpdmVET01FeGNlcHRpb24gJiYgREVTQ1JJUFRPUlMgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihnbG9iYWxUaGlzLCBET01fRVhDRVBUSU9OKTsKCi8vIEJ1biB+IDAuMS4xIERPTUV4Y2VwdGlvbiBoYXZlIGluY29ycmVjdCBkZXNjcmlwdG9yIGFuZCB3ZSBjYW4ndCByZWRlZmluZSBpdAovLyBodHRwczovL2dpdGh1Yi5jb20vSmFycmVkLVN1bW5lci9idW4vaXNzdWVzLzM5OQp2YXIgQlVHR1lfREVTQ1JJUFRPUiA9ICEhZGVzY3JpcHRvciAmJiAhKGRlc2NyaXB0b3Iud3JpdGFibGUgJiYgZGVzY3JpcHRvci5jb25maWd1cmFibGUpOwoKdmFyIEZPUkNFRF9DT05TVFJVQ1RPUiA9IEVSUk9SX0hBU19TVEFDSyAmJiAhQlVHR1lfREVTQ1JJUFRPUiAmJiAhRE9NX0VYQ0VQVElPTl9IQVNfU1RBQ0s7CgovLyBgRE9NRXhjZXB0aW9uYCBjb25zdHJ1Y3RvciBwYXRjaCBmb3IgYC5zdGFja2Agd2hlcmUgaXQncyByZXF1aXJlZAovLyBodHRwczovL3dlYmlkbC5zcGVjLndoYXR3Zy5vcmcvI2VzLURPTUV4Y2VwdGlvbi1zcGVjaWFsbmVzcwokKHsgZ2xvYmFsOiB0cnVlLCBjb25zdHJ1Y3RvcjogdHJ1ZSwgZm9yY2VkOiBJU19QVVJFIHx8IEZPUkNFRF9DT05TVFJVQ1RPUiB9LCB7IC8vIFRPRE86IGZpeCBleHBvcnQgbG9naWMKICBET01FeGNlcHRpb246IEZPUkNFRF9DT05TVFJVQ1RPUiA/ICRET01FeGNlcHRpb24gOiBOYXRpdmVET01FeGNlcHRpb24KfSk7Cgp2YXIgUG9seWZpbGxlZERPTUV4Y2VwdGlvbiA9IGdldEJ1aWx0SW4oRE9NX0VYQ0VQVElPTik7CnZhciBQb2x5ZmlsbGVkRE9NRXhjZXB0aW9uUHJvdG90eXBlID0gUG9seWZpbGxlZERPTUV4Y2VwdGlvbi5wcm90b3R5cGU7CgppZiAoUG9seWZpbGxlZERPTUV4Y2VwdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciAhPT0gUG9seWZpbGxlZERPTUV4Y2VwdGlvbikgewogIGlmICghSVNfUFVSRSkgewogICAgZGVmaW5lUHJvcGVydHkoUG9seWZpbGxlZERPTUV4Y2VwdGlvblByb3RvdHlwZSwgJ2NvbnN0cnVjdG9yJywgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIFBvbHlmaWxsZWRET01FeGNlcHRpb24pKTsKICB9CgogIGZvciAodmFyIGtleSBpbiBET01FeGNlcHRpb25Db25zdGFudHMpIGlmIChoYXNPd24oRE9NRXhjZXB0aW9uQ29uc3RhbnRzLCBrZXkpKSB7CiAgICB2YXIgY29uc3RhbnQgPSBET01FeGNlcHRpb25Db25zdGFudHNba2V5XTsKICAgIHZhciBjb25zdGFudE5hbWUgPSBjb25zdGFudC5zOwogICAgaWYgKCFoYXNPd24oUG9seWZpbGxlZERPTUV4Y2VwdGlvbiwgY29uc3RhbnROYW1lKSkgewogICAgICBkZWZpbmVQcm9wZXJ0eShQb2x5ZmlsbGVkRE9NRXhjZXB0aW9uLCBjb25zdGFudE5hbWUsIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcig2LCBjb25zdGFudC5jKSk7CiAgICB9CiAgfQp9CgoKLyoqKi8gfSksCgovKioqLyA1MDAyOgovKioqLyAoKG1vZHVsZSkgPT4gewoKCm1vZHVsZS5leHBvcnRzID0gewogIEluZGV4U2l6ZUVycm9yOiB7IHM6ICdJTkRFWF9TSVpFX0VSUicsIGM6IDEsIG06IDEgfSwKICBET01TdHJpbmdTaXplRXJyb3I6IHsgczogJ0RPTVNUUklOR19TSVpFX0VSUicsIGM6IDIsIG06IDAgfSwKICBIaWVyYXJjaHlSZXF1ZXN0RXJyb3I6IHsgczogJ0hJRVJBUkNIWV9SRVFVRVNUX0VSUicsIGM6IDMsIG06IDEgfSwKICBXcm9uZ0RvY3VtZW50RXJyb3I6IHsgczogJ1dST05HX0RPQ1VNRU5UX0VSUicsIGM6IDQsIG06IDEgfSwKICBJbnZhbGlkQ2hhcmFjdGVyRXJyb3I6IHsgczogJ0lOVkFMSURfQ0hBUkFDVEVSX0VSUicsIGM6IDUsIG06IDEgfSwKICBOb0RhdGFBbGxvd2VkRXJyb3I6IHsgczogJ05PX0RBVEFfQUxMT1dFRF9FUlInLCBjOiA2LCBtOiAwIH0sCiAgTm9Nb2RpZmljYXRpb25BbGxvd2VkRXJyb3I6IHsgczogJ05PX01PRElGSUNBVElPTl9BTExPV0VEX0VSUicsIGM6IDcsIG06IDEgfSwKICBOb3RGb3VuZEVycm9yOiB7IHM6ICdOT1RfRk9VTkRfRVJSJywgYzogOCwgbTogMSB9LAogIE5vdFN1cHBvcnRlZEVycm9yOiB7IHM6ICdOT1RfU1VQUE9SVEVEX0VSUicsIGM6IDksIG06IDEgfSwKICBJblVzZUF0dHJpYnV0ZUVycm9yOiB7IHM6ICdJTlVTRV9BVFRSSUJVVEVfRVJSJywgYzogMTAsIG06IDEgfSwKICBJbnZhbGlkU3RhdGVFcnJvcjogeyBzOiAnSU5WQUxJRF9TVEFURV9FUlInLCBjOiAxMSwgbTogMSB9LAogIFN5bnRheEVycm9yOiB7IHM6ICdTWU5UQVhfRVJSJywgYzogMTIsIG06IDEgfSwKICBJbnZhbGlkTW9kaWZpY2F0aW9uRXJyb3I6IHsgczogJ0lOVkFMSURfTU9ESUZJQ0FUSU9OX0VSUicsIGM6IDEzLCBtOiAxIH0sCiAgTmFtZXNwYWNlRXJyb3I6IHsgczogJ05BTUVTUEFDRV9FUlInLCBjOiAxNCwgbTogMSB9LAogIEludmFsaWRBY2Nlc3NFcnJvcjogeyBzOiAnSU5WQUxJRF9BQ0NFU1NfRVJSJywgYzogMTUsIG06IDEgfSwKICBWYWxpZGF0aW9uRXJyb3I6IHsgczogJ1ZBTElEQVRJT05fRVJSJywgYzogMTYsIG06IDAgfSwKICBUeXBlTWlzbWF0Y2hFcnJvcjogeyBzOiAnVFlQRV9NSVNNQVRDSF9FUlInLCBjOiAxNywgbTogMSB9LAogIFNlY3VyaXR5RXJyb3I6IHsgczogJ1NFQ1VSSVRZX0VSUicsIGM6IDE4LCBtOiAxIH0sCiAgTmV0d29ya0Vycm9yOiB7IHM6ICdORVRXT1JLX0VSUicsIGM6IDE5LCBtOiAxIH0sCiAgQWJvcnRFcnJvcjogeyBzOiAnQUJPUlRfRVJSJywgYzogMjAsIG06IDEgfSwKICBVUkxNaXNtYXRjaEVycm9yOiB7IHM6ICdVUkxfTUlTTUFUQ0hfRVJSJywgYzogMjEsIG06IDEgfSwKICBRdW90YUV4Y2VlZGVkRXJyb3I6IHsgczogJ1FVT1RBX0VYQ0VFREVEX0VSUicsIGM6IDIyLCBtOiAxIH0sCiAgVGltZW91dEVycm9yOiB7IHM6ICdUSU1FT1VUX0VSUicsIGM6IDIzLCBtOiAxIH0sCiAgSW52YWxpZE5vZGVUeXBlRXJyb3I6IHsgczogJ0lOVkFMSURfTk9ERV9UWVBFX0VSUicsIGM6IDI0LCBtOiAxIH0sCiAgRGF0YUNsb25lRXJyb3I6IHsgczogJ0RBVEFfQ0xPTkVfRVJSJywgYzogMjUsIG06IDEgfQp9OwoKCi8qKiovIH0pLAoKLyoqKi8gNTAyNDoKLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyICQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY1MTgpOwp2YXIgc3ltbWV0cmljRGlmZmVyZW5jZSA9IF9fd2VicGFja19yZXF1aXJlX18oMzY1MCk7CnZhciBzZXRNZXRob2RHZXRLZXlzQmVmb3JlQ2xvbmluZyA9IF9fd2VicGFja19yZXF1aXJlX18oOTgzNSk7CnZhciBzZXRNZXRob2RBY2NlcHRTZXRMaWtlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OTE2KTsKCnZhciBGT1JDRUQgPSAhc2V0TWV0aG9kQWNjZXB0U2V0TGlrZSgnc3ltbWV0cmljRGlmZmVyZW5jZScpIHx8ICFzZXRNZXRob2RHZXRLZXlzQmVmb3JlQ2xvbmluZygnc3ltbWV0cmljRGlmZmVyZW5jZScpOwoKLy8gYFNldC5wcm90b3R5cGUuc3ltbWV0cmljRGlmZmVyZW5jZWAgbWV0aG9kCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS5zeW1tZXRyaWNkaWZmZXJlbmNlCiQoeyB0YXJnZXQ6ICdTZXQnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwgewogIHN5bW1ldHJpY0RpZmZlcmVuY2U6IHN5bW1ldHJpY0RpZmZlcmVuY2UKfSk7CgoKLyoqKi8gfSksCgovKioqLyA1MDMxOgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIGdldEJ1aWx0SW4gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc3NTEpOwp2YXIgdW5jdXJyeVRoaXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk1MDQpOwp2YXIgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18oODQ4MCk7CnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM3MTcpOwp2YXIgYW5PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg1NTEpOwoKdmFyIGNvbmNhdCA9IHVuY3VycnlUaGlzKFtdLmNvbmNhdCk7CgovLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzCm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignUmVmbGVjdCcsICdvd25LZXlzJykgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkgewogIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mKGFuT2JqZWN0KGl0KSk7CiAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mOwogIHJldHVybiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPyBjb25jYXQoa2V5cywgZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSkgOiBrZXlzOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gNTE2OToKLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCnZhciBpc0RldGFjaGVkID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMjM4KTsKCnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHsKICBpZiAoaXNEZXRhY2hlZChpdCkpIHRocm93IG5ldyAkVHlwZUVycm9yKCdBcnJheUJ1ZmZlciBpcyBkZXRhY2hlZCcpOwogIHJldHVybiBpdDsKfTsKCgovKioqLyB9KSwKCi8qKiovIDUxNzA6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgdW5jdXJyeVRoaXNBY2Nlc3NvciA9IF9fd2VicGFja19yZXF1aXJlX18oNjcwNik7CnZhciBTZXRIZWxwZXJzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NDAyKTsKCm1vZHVsZS5leHBvcnRzID0gdW5jdXJyeVRoaXNBY2Nlc3NvcihTZXRIZWxwZXJzLnByb3RvLCAnc2l6ZScsICdnZXQnKSB8fCBmdW5jdGlvbiAoc2V0KSB7CiAgcmV0dXJuIHNldC5zaXplOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gNTIxMzoKLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyICQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY1MTgpOwp2YXIgZ2xvYmFsVGhpcyA9IF9fd2VicGFja19yZXF1aXJlX18oNDU3Nik7CnZhciBhcnJheUZyb21Db25zdHJ1Y3RvckFuZExpc3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUzNzApOwp2YXIgJGZyb21CYXNlNjQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkxNDMpOwoKdmFyIFVpbnQ4QXJyYXkgPSBnbG9iYWxUaGlzLlVpbnQ4QXJyYXk7Cgp2YXIgSU5DT1JSRUNUX0JFSEFWSU9SX09SX0RPRVNOVF9FWElTVFMgPSAhVWludDhBcnJheSB8fCAhVWludDhBcnJheS5mcm9tQmFzZTY0IHx8ICFmdW5jdGlvbiAoKSB7CiAgLy8gV2Via2l0IG5vdCB0aHJvdyBhbiBlcnJvciBvbiBvZGQgbGVuZ3RoIHN0cmluZwogIHRyeSB7CiAgICBVaW50OEFycmF5LmZyb21CYXNlNjQoJ2EnKTsKICAgIHJldHVybjsKICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9CiAgdHJ5IHsKICAgIFVpbnQ4QXJyYXkuZnJvbUJhc2U2NCgnJywgbnVsbCk7CiAgfSBjYXRjaCAoZXJyb3IpIHsKICAgIHJldHVybiB0cnVlOwogIH0KfSgpOwoKLy8gYFVpbnQ4QXJyYXkuZnJvbUJhc2U2NGAgbWV0aG9kCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWFycmF5YnVmZmVyLWJhc2U2NAppZiAoVWludDhBcnJheSkgJCh7IHRhcmdldDogJ1VpbnQ4QXJyYXknLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVF9CRUhBVklPUl9PUl9ET0VTTlRfRVhJU1RTIH0sIHsKICBmcm9tQmFzZTY0OiBmdW5jdGlvbiBmcm9tQmFzZTY0KHN0cmluZyAvKiAsIG9wdGlvbnMgKi8pIHsKICAgIHZhciByZXN1bHQgPSAkZnJvbUJhc2U2NChzdHJpbmcsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBudWxsLCAweDFGRkZGRkZGRkZGRkZGKTsKICAgIHJldHVybiBhcnJheUZyb21Db25zdHJ1Y3RvckFuZExpc3QoVWludDhBcnJheSwgcmVzdWx0LmJ5dGVzKTsKICB9Cn0pOwoKCi8qKiovIH0pLAoKLyoqKi8gNTM3MDoKLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IF9fd2VicGFja19yZXF1aXJlX18oNjE5OCk7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgbGlzdCwgJGxlbmd0aCkgewogIHZhciBpbmRleCA9IDA7CiAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gJGxlbmd0aCA6IGxlbmd0aE9mQXJyYXlMaWtlKGxpc3QpOwogIHZhciByZXN1bHQgPSBuZXcgQ29uc3RydWN0b3IobGVuZ3RoKTsKICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBsaXN0W2luZGV4KytdOwogIHJldHVybiByZXN1bHQ7Cn07CgoKLyoqKi8gfSksCgovKioqLyA1Mzk3OgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKLy8gdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3MKdmFyIEluZGV4ZWRPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcwNTUpOwp2YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oNzc1MCk7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkgewogIHJldHVybiBJbmRleGVkT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoaXQpKTsKfTsKCgovKioqLyB9KSwKCi8qKiovIDU2MTA6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IF9fd2VicGFja19yZXF1aXJlX18oMTI5MSk7Cgp2YXIgbWF4ID0gTWF0aC5tYXg7CnZhciBtaW4gPSBNYXRoLm1pbjsKCi8vIEhlbHBlciBmb3IgYSBwb3B1bGFyIHJlcGVhdGluZyBjYXNlIG9mIHRoZSBzcGVjOgovLyBMZXQgaW50ZWdlciBiZSA/IFRvSW50ZWdlcihpbmRleCkuCi8vIElmIGludGVnZXIgPCAwLCBsZXQgcmVzdWx0IGJlIG1heCgobGVuZ3RoICsgaW50ZWdlciksIDApOyBlbHNlIGxldCByZXN1bHQgYmUgbWluKGludGVnZXIsIGxlbmd0aCkuCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHsKICB2YXIgaW50ZWdlciA9IHRvSW50ZWdlck9ySW5maW5pdHkoaW5kZXgpOwogIHJldHVybiBpbnRlZ2VyIDwgMCA/IG1heChpbnRlZ2VyICsgbGVuZ3RoLCAwKSA6IG1pbihpbnRlZ2VyLCBsZW5ndGgpOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gNTYyMzoKLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGAKX193ZWJwYWNrX3JlcXVpcmVfXyg0NTYpOwoKCi8qKiovIH0pLAoKLyoqKi8gNTYzNjoKLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCnZhciBnbG9iYWxUaGlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NTc2KTsKdmFyIHVuY3VycnlUaGlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NTA0KTsKdmFyIHVuY3VycnlUaGlzQWNjZXNzb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY3MDYpOwp2YXIgdG9JbmRleCA9IF9fd2VicGFja19yZXF1aXJlX18oNzY5Nik7CnZhciBub3REZXRhY2hlZCA9IF9fd2VicGFja19yZXF1aXJlX18oNTE2OSk7CnZhciBhcnJheUJ1ZmZlckJ5dGVMZW5ndGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDczOTQpOwp2YXIgZGV0YWNoVHJhbnNmZXJhYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NDgzKTsKdmFyIFBST1BFUl9TVFJVQ1RVUkVEX0NMT05FX1RSQU5TRkVSID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNTQ4KTsKCnZhciBzdHJ1Y3R1cmVkQ2xvbmUgPSBnbG9iYWxUaGlzLnN0cnVjdHVyZWRDbG9uZTsKdmFyIEFycmF5QnVmZmVyID0gZ2xvYmFsVGhpcy5BcnJheUJ1ZmZlcjsKdmFyIERhdGFWaWV3ID0gZ2xvYmFsVGhpcy5EYXRhVmlldzsKdmFyIG1pbiA9IE1hdGgubWluOwp2YXIgQXJyYXlCdWZmZXJQcm90b3R5cGUgPSBBcnJheUJ1ZmZlci5wcm90b3R5cGU7CnZhciBEYXRhVmlld1Byb3RvdHlwZSA9IERhdGFWaWV3LnByb3RvdHlwZTsKdmFyIHNsaWNlID0gdW5jdXJyeVRoaXMoQXJyYXlCdWZmZXJQcm90b3R5cGUuc2xpY2UpOwp2YXIgaXNSZXNpemFibGUgPSB1bmN1cnJ5VGhpc0FjY2Vzc29yKEFycmF5QnVmZmVyUHJvdG90eXBlLCAncmVzaXphYmxlJywgJ2dldCcpOwp2YXIgbWF4Qnl0ZUxlbmd0aCA9IHVuY3VycnlUaGlzQWNjZXNzb3IoQXJyYXlCdWZmZXJQcm90b3R5cGUsICdtYXhCeXRlTGVuZ3RoJywgJ2dldCcpOwp2YXIgZ2V0SW50OCA9IHVuY3VycnlUaGlzKERhdGFWaWV3UHJvdG90eXBlLmdldEludDgpOwp2YXIgc2V0SW50OCA9IHVuY3VycnlUaGlzKERhdGFWaWV3UHJvdG90eXBlLnNldEludDgpOwoKbW9kdWxlLmV4cG9ydHMgPSAoUFJPUEVSX1NUUlVDVFVSRURfQ0xPTkVfVFJBTlNGRVIgfHwgZGV0YWNoVHJhbnNmZXJhYmxlKSAmJiBmdW5jdGlvbiAoYXJyYXlCdWZmZXIsIG5ld0xlbmd0aCwgcHJlc2VydmVSZXNpemFiaWxpdHkpIHsKICB2YXIgYnl0ZUxlbmd0aCA9IGFycmF5QnVmZmVyQnl0ZUxlbmd0aChhcnJheUJ1ZmZlcik7CiAgdmFyIG5ld0J5dGVMZW5ndGggPSBuZXdMZW5ndGggPT09IHVuZGVmaW5lZCA/IGJ5dGVMZW5ndGggOiB0b0luZGV4KG5ld0xlbmd0aCk7CiAgdmFyIGZpeGVkTGVuZ3RoID0gIWlzUmVzaXphYmxlIHx8ICFpc1Jlc2l6YWJsZShhcnJheUJ1ZmZlcik7CiAgdmFyIG5ld0J1ZmZlcjsKICBub3REZXRhY2hlZChhcnJheUJ1ZmZlcik7CiAgaWYgKFBST1BFUl9TVFJVQ1RVUkVEX0NMT05FX1RSQU5TRkVSKSB7CiAgICBhcnJheUJ1ZmZlciA9IHN0cnVjdHVyZWRDbG9uZShhcnJheUJ1ZmZlciwgeyB0cmFuc2ZlcjogW2FycmF5QnVmZmVyXSB9KTsKICAgIGlmIChieXRlTGVuZ3RoID09PSBuZXdCeXRlTGVuZ3RoICYmIChwcmVzZXJ2ZVJlc2l6YWJpbGl0eSB8fCBmaXhlZExlbmd0aCkpIHJldHVybiBhcnJheUJ1ZmZlcjsKICB9CiAgaWYgKGJ5dGVMZW5ndGggPj0gbmV3Qnl0ZUxlbmd0aCAmJiAoIXByZXNlcnZlUmVzaXphYmlsaXR5IHx8IGZpeGVkTGVuZ3RoKSkgewogICAgbmV3QnVmZmVyID0gc2xpY2UoYXJyYXlCdWZmZXIsIDAsIG5ld0J5dGVMZW5ndGgpOwogIH0gZWxzZSB7CiAgICB2YXIgb3B0aW9ucyA9IHByZXNlcnZlUmVzaXphYmlsaXR5ICYmICFmaXhlZExlbmd0aCAmJiBtYXhCeXRlTGVuZ3RoID8geyBtYXhCeXRlTGVuZ3RoOiBtYXhCeXRlTGVuZ3RoKGFycmF5QnVmZmVyKSB9IDogdW5kZWZpbmVkOwogICAgbmV3QnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKG5ld0J5dGVMZW5ndGgsIG9wdGlvbnMpOwogICAgdmFyIGEgPSBuZXcgRGF0YVZpZXcoYXJyYXlCdWZmZXIpOwogICAgdmFyIGIgPSBuZXcgRGF0YVZpZXcobmV3QnVmZmVyKTsKICAgIHZhciBjb3B5TGVuZ3RoID0gbWluKG5ld0J5dGVMZW5ndGgsIGJ5dGVMZW5ndGgpOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3B5TGVuZ3RoOyBpKyspIHNldEludDgoYiwgaSwgZ2V0SW50OChhLCBpKSk7CiAgfQogIGlmICghUFJPUEVSX1NUUlVDVFVSRURfQ0xPTkVfVFJBTlNGRVIpIGRldGFjaFRyYW5zZmVyYWJsZShhcnJheUJ1ZmZlcik7CiAgcmV0dXJuIG5ld0J1ZmZlcjsKfTsKCgovKioqLyB9KSwKCi8qKiovIDU3NDU6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgc3RvcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc2MjkpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkgewogIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgfHwge30pOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gNTc4MToKLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyICQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY1MTgpOwp2YXIgZ2V0QnVpbHRJbiA9IF9fd2VicGFja19yZXF1aXJlX18oNzc1MSk7CnZhciB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aCA9IF9fd2VicGFja19yZXF1aXJlX18oMjgxMik7CnZhciB0b1N0cmluZyA9IF9fd2VicGFja19yZXF1aXJlX18oNjU1KTsKdmFyIFVTRV9OQVRJVkVfVVJMID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NDE2KTsKCnZhciBVUkwgPSBnZXRCdWlsdEluKCdVUkwnKTsKCi8vIGBVUkwucGFyc2VgIG1ldGhvZAovLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtY2FucGFyc2UKJCh7IHRhcmdldDogJ1VSTCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIVVTRV9OQVRJVkVfVVJMIH0sIHsKICBwYXJzZTogZnVuY3Rpb24gcGFyc2UodXJsKSB7CiAgICB2YXIgbGVuZ3RoID0gdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7CiAgICB2YXIgdXJsU3RyaW5nID0gdG9TdHJpbmcodXJsKTsKICAgIHZhciBiYXNlID0gbGVuZ3RoIDwgMiB8fCBhcmd1bWVudHNbMV0gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHRvU3RyaW5nKGFyZ3VtZW50c1sxXSk7CiAgICB0cnkgewogICAgICByZXR1cm4gbmV3IFVSTCh1cmxTdHJpbmcsIGJhc2UpOwogICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgfQp9KTsKCgovKioqLyB9KSwKCi8qKiovIDU4NTQ6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgdG9QcmltaXRpdmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3NzcpOwoKdmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7CgovLyBgVG9CaWdJbnRgIGFic3RyYWN0IG9wZXJhdGlvbgovLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvYmlnaW50Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7CiAgdmFyIHByaW0gPSB0b1ByaW1pdGl2ZShhcmd1bWVudCwgJ251bWJlcicpOwogIGlmICh0eXBlb2YgcHJpbSA9PSAnbnVtYmVyJykgdGhyb3cgbmV3ICRUeXBlRXJyb3IoIkNhbid0IGNvbnZlcnQgbnVtYmVyIHRvIGJpZ2ludCIpOwogIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1iaWdpbnQgLS0gc2FmZQogIHJldHVybiBCaWdJbnQocHJpbSk7Cn07CgoKLyoqKi8gfSksCgovKioqLyA1ODc2OgovKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgJCA9IF9fd2VicGFja19yZXF1aXJlX18oNjUxOCk7CnZhciBpc1N1YnNldE9mID0gX193ZWJwYWNrX3JlcXVpcmVfXygzODM4KTsKdmFyIHNldE1ldGhvZEFjY2VwdFNldExpa2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5MTYpOwoKdmFyIElOQ09SUkVDVCA9ICFzZXRNZXRob2RBY2NlcHRTZXRMaWtlKCdpc1N1YnNldE9mJywgZnVuY3Rpb24gKHJlc3VsdCkgewogIHJldHVybiByZXN1bHQ7Cn0pOwoKLy8gYFNldC5wcm90b3R5cGUuaXNTdWJzZXRPZmAgbWV0aG9kCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS5pc3N1YnNldG9mCiQoeyB0YXJnZXQ6ICdTZXQnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiBJTkNPUlJFQ1QgfSwgewogIGlzU3Vic2V0T2Y6IGlzU3Vic2V0T2YKfSk7CgoKLyoqKi8gfSksCgovKioqLyA1OTE3OgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIERFU0NSSVBUT1JTID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNzI0KTsKdmFyIGZhaWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MDM5KTsKdmFyIGNyZWF0ZUVsZW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQwNTUpOwoKLy8gVGhhbmtzIHRvIElFOCBmb3IgaXRzIGZ1bm55IGRlZmluZVByb3BlcnR5Cm1vZHVsZS5leHBvcnRzID0gIURFU0NSSVBUT1JTICYmICFmYWlscyhmdW5jdGlvbiAoKSB7CiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZwogIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3JlYXRlRWxlbWVudCgnZGl2JyksICdhJywgewogICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9CiAgfSkuYSAhPT0gNzsKfSk7CgoKLyoqKi8gfSksCgovKioqLyA1OTY2OgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIGFDYWxsYWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oOTMwNik7CnZhciBpc051bGxPclVuZGVmaW5lZCA9IF9fd2VicGFja19yZXF1aXJlX18oNDExNyk7CgovLyBgR2V0TWV0aG9kYCBhYnN0cmFjdCBvcGVyYXRpb24KLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXRtZXRob2QKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoViwgUCkgewogIHZhciBmdW5jID0gVltQXTsKICByZXR1cm4gaXNOdWxsT3JVbmRlZmluZWQoZnVuYykgPyB1bmRlZmluZWQgOiBhQ2FsbGFibGUoZnVuYyk7Cn07CgoKLyoqKi8gfSksCgovKioqLyA2MDQzOgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIGFDYWxsYWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oOTMwNik7Cgp2YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjsKCnZhciBQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7CiAgdmFyIHJlc29sdmUsIHJlamVjdDsKICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbiAoJCRyZXNvbHZlLCAkJHJlamVjdCkgewogICAgaWYgKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCkgdGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7CiAgICByZXNvbHZlID0gJCRyZXNvbHZlOwogICAgcmVqZWN0ID0gJCRyZWplY3Q7CiAgfSk7CiAgdGhpcy5yZXNvbHZlID0gYUNhbGxhYmxlKHJlc29sdmUpOwogIHRoaXMucmVqZWN0ID0gYUNhbGxhYmxlKHJlamVjdCk7Cn07CgovLyBgTmV3UHJvbWlzZUNhcGFiaWxpdHlgIGFic3RyYWN0IG9wZXJhdGlvbgovLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW5ld3Byb21pc2VjYXBhYmlsaXR5Cm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiAoQykgewogIHJldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7Cn07CgoKLyoqKi8gfSksCgovKioqLyA2MDgwOgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIHVuY3VycnlUaGlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NDc2KTsKdmFyIGFDYWxsYWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oOTMwNik7CnZhciBOQVRJVkVfQklORCA9IF9fd2VicGFja19yZXF1aXJlX18oNjE2KTsKCnZhciBiaW5kID0gdW5jdXJyeVRoaXModW5jdXJyeVRoaXMuYmluZCk7CgovLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmcKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQpIHsKICBhQ2FsbGFibGUoZm4pOwogIHJldHVybiB0aGF0ID09PSB1bmRlZmluZWQgPyBmbiA6IE5BVElWRV9CSU5EID8gYmluZChmbiwgdGhhdCkgOiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykgewogICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7CiAgfTsKfTsKCgovKioqLyB9KSwKCi8qKiovIDYxMTk6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgc2hhcmVkID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NzQ1KTsKdmFyIHVpZCA9IF9fd2VicGFja19yZXF1aXJlX18oMzM5Mik7Cgp2YXIga2V5cyA9IHNoYXJlZCgna2V5cycpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7CiAgcmV0dXJuIGtleXNba2V5XSB8fCAoa2V5c1trZXldID0gdWlkKGtleSkpOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gNjE5MzoKLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCnZhciBFTlZJUk9OTUVOVCA9IF9fd2VicGFja19yZXF1aXJlX18oNDIxNSk7Cgptb2R1bGUuZXhwb3J0cyA9IEVOVklST05NRU5UID09PSAnTk9ERSc7CgoKLyoqKi8gfSksCgovKioqLyA2MTk4OgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIHRvTGVuZ3RoID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MDE0KTsKCi8vIGBMZW5ndGhPZkFycmF5TGlrZWAgYWJzdHJhY3Qgb3BlcmF0aW9uCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbGVuZ3Rob2ZhcnJheWxpa2UKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqKSB7CiAgcmV0dXJuIHRvTGVuZ3RoKG9iai5sZW5ndGgpOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gNjI2OToKLyoqKi8gKChtb2R1bGUpID0+IHsKCgptb2R1bGUuZXhwb3J0cyA9IHt9OwoKCi8qKiovIH0pLAoKLyoqKi8gNjI3OToKLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCnZhciBkZWZpbmVCdWlsdEluID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2ODQwKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc3JjLCBvcHRpb25zKSB7CiAgZm9yICh2YXIga2V5IGluIHNyYykgZGVmaW5lQnVpbHRJbih0YXJnZXQsIGtleSwgc3JjW2tleV0sIG9wdGlvbnMpOwogIHJldHVybiB0YXJnZXQ7Cn07CgoKLyoqKi8gfSksCgovKioqLyA2MzE5OgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NTUxKTsKdmFyIGl0ZXJhdG9yQ2xvc2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk1MzkpOwoKLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvcgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwgZm4sIHZhbHVlLCBFTlRSSUVTKSB7CiAgdHJ5IHsKICAgIHJldHVybiBFTlRSSUVTID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7CiAgfSBjYXRjaCAoZXJyb3IpIHsKICAgIGl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsICd0aHJvdycsIGVycm9yKTsKICB9Cn07CgoKLyoqKi8gfSksCgovKioqLyA2Mzk1OgovKioqLyAoKG1vZHVsZSkgPT4gewoKCm1vZHVsZS5leHBvcnRzID0gZmFsc2U7CgoKLyoqKi8gfSksCgovKioqLyA2NTE4OgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIGdsb2JhbFRoaXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ1NzYpOwp2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gKF9fd2VicGFja19yZXF1aXJlX18oNzM0NykuZik7CnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY2OTkpOwp2YXIgZGVmaW5lQnVpbHRJbiA9IF9fd2VicGFja19yZXF1aXJlX18oNjg0MCk7CnZhciBkZWZpbmVHbG9iYWxQcm9wZXJ0eSA9IF9fd2VicGFja19yZXF1aXJlX18oOTQzMyk7CnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NzQwKTsKdmFyIGlzRm9yY2VkID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNzk2KTsKCi8qCiAgb3B0aW9ucy50YXJnZXQgICAgICAgICAtIG5hbWUgb2YgdGhlIHRhcmdldCBvYmplY3QKICBvcHRpb25zLmdsb2JhbCAgICAgICAgIC0gdGFyZ2V0IGlzIHRoZSBnbG9iYWwgb2JqZWN0CiAgb3B0aW9ucy5zdGF0ICAgICAgICAgICAtIGV4cG9ydCBhcyBzdGF0aWMgbWV0aG9kcyBvZiB0YXJnZXQKICBvcHRpb25zLnByb3RvICAgICAgICAgIC0gZXhwb3J0IGFzIHByb3RvdHlwZSBtZXRob2RzIG9mIHRhcmdldAogIG9wdGlvbnMucmVhbCAgICAgICAgICAgLSByZWFsIHByb3RvdHlwZSBtZXRob2QgZm9yIHRoZSBgcHVyZWAgdmVyc2lvbgogIG9wdGlvbnMuZm9yY2VkICAgICAgICAgLSBleHBvcnQgZXZlbiBpZiB0aGUgbmF0aXZlIGZlYXR1cmUgaXMgYXZhaWxhYmxlCiAgb3B0aW9ucy5iaW5kICAgICAgICAgICAtIGJpbmQgbWV0aG9kcyB0byB0aGUgdGFyZ2V0LCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uCiAgb3B0aW9ucy53cmFwICAgICAgICAgICAtIHdyYXAgY29uc3RydWN0b3JzIHRvIHByZXZlbnRpbmcgZ2xvYmFsIHBvbGx1dGlvbiwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvbgogIG9wdGlvbnMudW5zYWZlICAgICAgICAgLSB1c2UgdGhlIHNpbXBsZSBhc3NpZ25tZW50IG9mIHByb3BlcnR5IGluc3RlYWQgb2YgZGVsZXRlICsgZGVmaW5lUHJvcGVydHkKICBvcHRpb25zLnNoYW0gICAgICAgICAgIC0gYWRkIGEgZmxhZyB0byBub3QgY29tcGxldGVseSBmdWxsIHBvbHlmaWxscwogIG9wdGlvbnMuZW51bWVyYWJsZSAgICAgLSBleHBvcnQgYXMgZW51bWVyYWJsZSBwcm9wZXJ0eQogIG9wdGlvbnMuZG9udENhbGxHZXRTZXQgLSBwcmV2ZW50IGNhbGxpbmcgYSBnZXR0ZXIgb24gdGFyZ2V0CiAgb3B0aW9ucy5uYW1lICAgICAgICAgICAtIHRoZSAubmFtZSBvZiB0aGUgZnVuY3Rpb24gaWYgaXQgZG9lcyBub3QgbWF0Y2ggdGhlIGtleQoqLwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRpb25zLCBzb3VyY2UpIHsKICB2YXIgVEFSR0VUID0gb3B0aW9ucy50YXJnZXQ7CiAgdmFyIEdMT0JBTCA9IG9wdGlvbnMuZ2xvYmFsOwogIHZhciBTVEFUSUMgPSBvcHRpb25zLnN0YXQ7CiAgdmFyIEZPUkNFRCwgdGFyZ2V0LCBrZXksIHRhcmdldFByb3BlcnR5LCBzb3VyY2VQcm9wZXJ0eSwgZGVzY3JpcHRvcjsKICBpZiAoR0xPQkFMKSB7CiAgICB0YXJnZXQgPSBnbG9iYWxUaGlzOwogIH0gZWxzZSBpZiAoU1RBVElDKSB7CiAgICB0YXJnZXQgPSBnbG9iYWxUaGlzW1RBUkdFVF0gfHwgZGVmaW5lR2xvYmFsUHJvcGVydHkoVEFSR0VULCB7fSk7CiAgfSBlbHNlIHsKICAgIHRhcmdldCA9IGdsb2JhbFRoaXNbVEFSR0VUXSAmJiBnbG9iYWxUaGlzW1RBUkdFVF0ucHJvdG90eXBlOwogIH0KICBpZiAodGFyZ2V0KSBmb3IgKGtleSBpbiBzb3VyY2UpIHsKICAgIHNvdXJjZVByb3BlcnR5ID0gc291cmNlW2tleV07CiAgICBpZiAob3B0aW9ucy5kb250Q2FsbEdldFNldCkgewogICAgICBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KTsKICAgICAgdGFyZ2V0UHJvcGVydHkgPSBkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IudmFsdWU7CiAgICB9IGVsc2UgdGFyZ2V0UHJvcGVydHkgPSB0YXJnZXRba2V5XTsKICAgIEZPUkNFRCA9IGlzRm9yY2VkKEdMT0JBTCA/IGtleSA6IFRBUkdFVCArIChTVEFUSUMgPyAnLicgOiAnIycpICsga2V5LCBvcHRpb25zLmZvcmNlZCk7CiAgICAvLyBjb250YWluZWQgaW4gdGFyZ2V0CiAgICBpZiAoIUZPUkNFRCAmJiB0YXJnZXRQcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgIGlmICh0eXBlb2Ygc291cmNlUHJvcGVydHkgPT0gdHlwZW9mIHRhcmdldFByb3BlcnR5KSBjb250aW51ZTsKICAgICAgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhzb3VyY2VQcm9wZXJ0eSwgdGFyZ2V0UHJvcGVydHkpOwogICAgfQogICAgLy8gYWRkIGEgZmxhZyB0byBub3QgY29tcGxldGVseSBmdWxsIHBvbHlmaWxscwogICAgaWYgKG9wdGlvbnMuc2hhbSB8fCAodGFyZ2V0UHJvcGVydHkgJiYgdGFyZ2V0UHJvcGVydHkuc2hhbSkpIHsKICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHNvdXJjZVByb3BlcnR5LCAnc2hhbScsIHRydWUpOwogICAgfQogICAgZGVmaW5lQnVpbHRJbih0YXJnZXQsIGtleSwgc291cmNlUHJvcGVydHksIG9wdGlvbnMpOwogIH0KfTsKCgovKioqLyB9KSwKCi8qKiovIDY1NzM6Ci8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCnZhciBERVNDUklQVE9SUyA9IF9fd2VicGFja19yZXF1aXJlX18oMzcyNCk7CnZhciBkZWZpbmVCdWlsdEluQWNjZXNzb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxMDYpOwp2YXIgaXNEZXRhY2hlZCA9IF9fd2VicGFja19yZXF1aXJlX18oMzIzOCk7Cgp2YXIgQXJyYXlCdWZmZXJQcm90b3R5cGUgPSBBcnJheUJ1ZmZlci5wcm90b3R5cGU7CgovLyBgQXJyYXlCdWZmZXIucHJvdG90eXBlLmRldGFjaGVkYCBnZXR0ZXIKLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXQtYXJyYXlidWZmZXIucHJvdG90eXBlLmRldGFjaGVkCmlmIChERVNDUklQVE9SUyAmJiAhKCdkZXRhY2hlZCcgaW4gQXJyYXlCdWZmZXJQcm90b3R5cGUpKSB7CiAgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKEFycmF5QnVmZmVyUHJvdG90eXBlLCAnZGV0YWNoZWQnLCB7CiAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICBnZXQ6IGZ1bmN0aW9uIGRldGFjaGVkKCkgewogICAgICByZXR1cm4gaXNEZXRhY2hlZCh0aGlzKTsKICAgIH0KICB9KTsKfQoKCi8qKiovIH0pLAoKLyoqKi8gNjYzMjoKLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyICQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY1MTgpOwp2YXIgZ2xvYmFsVGhpcyA9IF9fd2VicGFja19yZXF1aXJlX18oNDU3Nik7CnZhciAkZnJvbUJhc2U2NCA9IF9fd2VicGFja19yZXF1aXJlX18oOTE0Myk7CnZhciBhblVpbnQ4QXJyYXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQxNTQpOwoKdmFyIFVpbnQ4QXJyYXkgPSBnbG9iYWxUaGlzLlVpbnQ4QXJyYXk7Cgp2YXIgSU5DT1JSRUNUX0JFSEFWSU9SX09SX0RPRVNOVF9FWElTVFMgPSAhVWludDhBcnJheSB8fCAhVWludDhBcnJheS5wcm90b3R5cGUuc2V0RnJvbUJhc2U2NCB8fCAhZnVuY3Rpb24gKCkgewogIHZhciB0YXJnZXQgPSBuZXcgVWludDhBcnJheShbMjU1LCAyNTUsIDI1NSwgMjU1LCAyNTVdKTsKICB0cnkgewogICAgdGFyZ2V0LnNldEZyb21CYXNlNjQoJycsIG51bGwpOwogICAgcmV0dXJuOwogIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH0KICAvLyBXZWJraXQgbm90IHRocm93IGFuIGVycm9yIG9uIG9kZCBsZW5ndGggc3RyaW5nCiAgdHJ5IHsKICAgIHRhcmdldC5zZXRGcm9tQmFzZTY0KCdhJyk7CiAgICByZXR1cm47CiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfQogIHRyeSB7CiAgICB0YXJnZXQuc2V0RnJvbUJhc2U2NCgnTWpZeVpnPT09Jyk7CiAgfSBjYXRjaCAoZXJyb3IpIHsKICAgIHJldHVybiB0YXJnZXRbMF0gPT09IDUwICYmIHRhcmdldFsxXSA9PT0gNTQgJiYgdGFyZ2V0WzJdID09PSA1MCAmJiB0YXJnZXRbM10gPT09IDI1NSAmJiB0YXJnZXRbNF0gPT09IDI1NTsKICB9Cn0oKTsKCi8vIGBVaW50OEFycmF5LnByb3RvdHlwZS5zZXRGcm9tQmFzZTY0YCBtZXRob2QKLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtYXJyYXlidWZmZXItYmFzZTY0CmlmIChVaW50OEFycmF5KSAkKHsgdGFyZ2V0OiAnVWludDhBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVF9CRUhBVklPUl9PUl9ET0VTTlRfRVhJU1RTIH0sIHsKICBzZXRGcm9tQmFzZTY0OiBmdW5jdGlvbiBzZXRGcm9tQmFzZTY0KHN0cmluZyAvKiAsIG9wdGlvbnMgKi8pIHsKICAgIGFuVWludDhBcnJheSh0aGlzKTsKCiAgICB2YXIgcmVzdWx0ID0gJGZyb21CYXNlNjQoc3RyaW5nLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdGhpcywgdGhpcy5sZW5ndGgpOwoKICAgIHJldHVybiB7IHJlYWQ6IHJlc3VsdC5yZWFkLCB3cml0dGVuOiByZXN1bHQud3JpdHRlbiB9OwogIH0KfSk7CgoKLyoqKi8gfSksCgovKioqLyA2Njk5OgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIERFU0NSSVBUT1JTID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNzI0KTsKdmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OTEzKTsKdmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IF9fd2VicGFja19yZXF1aXJlX18oNjk4MCk7Cgptb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkgewogIHJldHVybiBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwga2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgdmFsdWUpKTsKfSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHsKICBvYmplY3Rba2V5XSA9IHZhbHVlOwogIHJldHVybiBvYmplY3Q7Cn07CgoKLyoqKi8gfSksCgovKioqLyA2NzA2OgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIHVuY3VycnlUaGlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NTA0KTsKdmFyIGFDYWxsYWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oOTMwNik7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgbWV0aG9kKSB7CiAgdHJ5IHsKICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmUKICAgIHJldHVybiB1bmN1cnJ5VGhpcyhhQ2FsbGFibGUoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIGtleSlbbWV0aG9kXSkpOwogIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH0KfTsKCgovKioqLyB9KSwKCi8qKiovIDY4MDE6Ci8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgREVTQ1JJUFRPUlMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM3MjQpOwp2YXIgVjhfUFJPVE9UWVBFX0RFRklORV9CVUcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg2ODYpOwp2YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5MTMpOwp2YXIgYW5PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg1NTEpOwp2YXIgdG9JbmRleGVkT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1Mzk3KTsKdmFyIG9iamVjdEtleXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwNzIpOwoKLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzYCBtZXRob2QKLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydGllcwovLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnRpZXMgLS0gc2FmZQpleHBvcnRzLmYgPSBERVNDUklQVE9SUyAmJiAhVjhfUFJPVE9UWVBFX0RFRklORV9CVUcgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykgewogIGFuT2JqZWN0KE8pOwogIHZhciBwcm9wcyA9IHRvSW5kZXhlZE9iamVjdChQcm9wZXJ0aWVzKTsKICB2YXIga2V5cyA9IG9iamVjdEtleXMoUHJvcGVydGllcyk7CiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoOwogIHZhciBpbmRleCA9IDA7CiAgdmFyIGtleTsKICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoTywga2V5ID0ga2V5c1tpbmRleCsrXSwgcHJvcHNba2V5XSk7CiAgcmV0dXJuIE87Cn07CgoKLyoqKi8gfSksCgovKioqLyA2ODIzOgovKioqLyAoKG1vZHVsZSkgPT4gewoKCnZhciAkU3RyaW5nID0gU3RyaW5nOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHsKICB0cnkgewogICAgcmV0dXJuICRTdHJpbmcoYXJndW1lbnQpOwogIH0gY2F0Y2ggKGVycm9yKSB7CiAgICByZXR1cm4gJ09iamVjdCc7CiAgfQp9OwoKCi8qKiovIH0pLAoKLyoqKi8gNjgzNzoKLyoqKi8gKChtb2R1bGUpID0+IHsKCgp2YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjsKdmFyIE1BWF9TQUZFX0lOVEVHRVIgPSAweDFGRkZGRkZGRkZGRkZGOyAvLyAyICoqIDUzIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxCgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkgewogIGlmIChpdCA+IE1BWF9TQUZFX0lOVEVHRVIpIHRocm93ICRUeXBlRXJyb3IoJ01heGltdW0gYWxsb3dlZCBpbmRleCBleGNlZWRlZCcpOwogIHJldHVybiBpdDsKfTsKCgovKioqLyB9KSwKCi8qKiovIDY4NDA6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgaXNDYWxsYWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oNDkwMSk7CnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18oNDkxMyk7CnZhciBtYWtlQnVpbHRJbiA9IF9fd2VicGFja19yZXF1aXJlX18oMjgzKTsKdmFyIGRlZmluZUdsb2JhbFByb3BlcnR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NDMzKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsdWUsIG9wdGlvbnMpIHsKICBpZiAoIW9wdGlvbnMpIG9wdGlvbnMgPSB7fTsKICB2YXIgc2ltcGxlID0gb3B0aW9ucy5lbnVtZXJhYmxlOwogIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm5hbWUgOiBrZXk7CiAgaWYgKGlzQ2FsbGFibGUodmFsdWUpKSBtYWtlQnVpbHRJbih2YWx1ZSwgbmFtZSwgb3B0aW9ucyk7CiAgaWYgKG9wdGlvbnMuZ2xvYmFsKSB7CiAgICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTsKICAgIGVsc2UgZGVmaW5lR2xvYmFsUHJvcGVydHkoa2V5LCB2YWx1ZSk7CiAgfSBlbHNlIHsKICAgIHRyeSB7CiAgICAgIGlmICghb3B0aW9ucy51bnNhZmUpIGRlbGV0ZSBPW2tleV07CiAgICAgIGVsc2UgaWYgKE9ba2V5XSkgc2ltcGxlID0gdHJ1ZTsKICAgIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH0KICAgIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlOwogICAgZWxzZSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKE8sIGtleSwgewogICAgICB2YWx1ZTogdmFsdWUsCiAgICAgIGVudW1lcmFibGU6IGZhbHNlLAogICAgICBjb25maWd1cmFibGU6ICFvcHRpb25zLm5vbkNvbmZpZ3VyYWJsZSwKICAgICAgd3JpdGFibGU6ICFvcHRpb25zLm5vbldyaXRhYmxlCiAgICB9KTsKICB9IHJldHVybiBPOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gNjk1NToKLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCnZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxNDApOwp2YXIgaXNDYWxsYWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oNDkwMSk7CnZhciBjbGFzc29mUmF3ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMTk1KTsKdmFyIHdlbGxLbm93blN5bWJvbCA9IF9fd2VicGFja19yZXF1aXJlX18oODIyNyk7Cgp2YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTsKdmFyICRPYmplY3QgPSBPYmplY3Q7CgovLyBFUzMgd3JvbmcgaGVyZQp2YXIgQ09SUkVDVF9BUkdVTUVOVFMgPSBjbGFzc29mUmF3KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PT0gJ0FyZ3VtZW50cyc7CgovLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvcgp2YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHsKICB0cnkgewogICAgcmV0dXJuIGl0W2tleV07CiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfQp9OwoKLy8gZ2V0dGluZyB0YWcgZnJvbSBFUzYrIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYAptb2R1bGUuZXhwb3J0cyA9IFRPX1NUUklOR19UQUdfU1VQUE9SVCA/IGNsYXNzb2ZSYXcgOiBmdW5jdGlvbiAoaXQpIHsKICB2YXIgTywgdGFnLCByZXN1bHQ7CiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnCiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2UKICAgIDogdHlwZW9mICh0YWcgPSB0cnlHZXQoTyA9ICRPYmplY3QoaXQpLCBUT19TVFJJTkdfVEFHKSkgPT0gJ3N0cmluZycgPyB0YWcKICAgIC8vIGJ1aWx0aW5UYWcgY2FzZQogICAgOiBDT1JSRUNUX0FSR1VNRU5UUyA/IGNsYXNzb2ZSYXcoTykKICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2sKICAgIDogKHJlc3VsdCA9IGNsYXNzb2ZSYXcoTykpID09PSAnT2JqZWN0JyAmJiBpc0NhbGxhYmxlKE8uY2FsbGVlKSA/ICdBcmd1bWVudHMnIDogcmVzdWx0Owp9OwoKCi8qKiovIH0pLAoKLyoqKi8gNjk2OToKLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCnZhciB0b1ByaW1pdGl2ZSA9IF9fd2VicGFja19yZXF1aXJlX18oMjc3Nyk7CnZhciBpc1N5bWJvbCA9IF9fd2VicGFja19yZXF1aXJlX18oNzU3KTsKCi8vIGBUb1Byb3BlcnR5S2V5YCBhYnN0cmFjdCBvcGVyYXRpb24KLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b3Byb3BlcnR5a2V5Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7CiAgdmFyIGtleSA9IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCAnc3RyaW5nJyk7CiAgcmV0dXJuIGlzU3ltYm9sKGtleSkgPyBrZXkgOiBrZXkgKyAnJzsKfTsKCgovKioqLyB9KSwKCi8qKiovIDY5ODA6Ci8qKiovICgobW9kdWxlKSA9PiB7CgoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkgewogIHJldHVybiB7CiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLAogICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLAogICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksCiAgICB2YWx1ZTogdmFsdWUKICB9Owp9OwoKCi8qKiovIH0pLAoKLyoqKi8gNzA0MDoKLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCi8qIGVzbGludC1kaXNhYmxlIGVzL25vLXN5bWJvbCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqLwp2YXIgTkFUSVZFX1NZTUJPTCA9IF9fd2VicGFja19yZXF1aXJlX18oNDQ5NSk7Cgptb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9TWU1CT0wgJiYKICAhU3ltYm9sLnNoYW0gJiYKICB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnOwoKCi8qKiovIH0pLAoKLyoqKi8gNzA1NToKLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCnZhciB1bmN1cnJ5VGhpcyA9IF9fd2VicGFja19yZXF1aXJlX18oOTUwNCk7CnZhciBmYWlscyA9IF9fd2VicGFja19yZXF1aXJlX18oOTAzOSk7CnZhciBjbGFzc29mID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMTk1KTsKCnZhciAkT2JqZWN0ID0gT2JqZWN0Owp2YXIgc3BsaXQgPSB1bmN1cnJ5VGhpcygnJy5zcGxpdCk7CgovLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5ncwptb2R1bGUuZXhwb3J0cyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsKICAvLyB0aHJvd3MgYW4gZXJyb3IgaW4gcmhpbm8sIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9yaGluby9pc3N1ZXMvMzQ2CiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGlucyAtLSBzYWZlCiAgcmV0dXJuICEkT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCk7Cn0pID8gZnVuY3Rpb24gKGl0KSB7CiAgcmV0dXJuIGNsYXNzb2YoaXQpID09PSAnU3RyaW5nJyA/IHNwbGl0KGl0LCAnJykgOiAkT2JqZWN0KGl0KTsKfSA6ICRPYmplY3Q7CgoKLyoqKi8gfSksCgovKioqLyA3MDgwOgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIGhhcyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDQ0MDIpLmhhcyk7CgovLyBQZXJmb3JtID8gUmVxdWlyZUludGVybmFsU2xvdChNLCBbW1NldERhdGFdXSkKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHsKICBoYXMoaXQpOwogIHJldHVybiBpdDsKfTsKCgovKioqLyB9KSwKCi8qKiovIDczNDc6Ci8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgREVTQ1JJUFRPUlMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM3MjQpOwp2YXIgY2FsbCA9IF9fd2VicGFja19yZXF1aXJlX18oOTU2NSk7CnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18oODc3Myk7CnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY5ODApOwp2YXIgdG9JbmRleGVkT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1Mzk3KTsKdmFyIHRvUHJvcGVydHlLZXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY5NjkpOwp2YXIgaGFzT3duID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5Mjk3KTsKdmFyIElFOF9ET01fREVGSU5FID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1OTE3KTsKCi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmUKdmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOwoKLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZAovLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IKZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHsKICBPID0gdG9JbmRleGVkT2JqZWN0KE8pOwogIFAgPSB0b1Byb3BlcnR5S2V5KFApOwogIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHsKICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApOwogIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH0KICBpZiAoaGFzT3duKE8sIFApKSByZXR1cm4gY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKCFjYWxsKHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmYsIE8sIFApLCBPW1BdKTsKfTsKCgovKioqLyB9KSwKCi8qKiovIDczOTQ6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgZ2xvYmFsVGhpcyA9IF9fd2VicGFja19yZXF1aXJlX18oNDU3Nik7CnZhciB1bmN1cnJ5VGhpc0FjY2Vzc29yID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NzA2KTsKdmFyIGNsYXNzb2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxOTUpOwoKdmFyIEFycmF5QnVmZmVyID0gZ2xvYmFsVGhpcy5BcnJheUJ1ZmZlcjsKdmFyIFR5cGVFcnJvciA9IGdsb2JhbFRoaXMuVHlwZUVycm9yOwoKLy8gSW5jbHVkZXMKLy8gLSBQZXJmb3JtID8gUmVxdWlyZUludGVybmFsU2xvdChPLCBbW0FycmF5QnVmZmVyRGF0YV1dKS4KLy8gLSBJZiBJc1NoYXJlZEFycmF5QnVmZmVyKE8pIGlzIHRydWUsIHRocm93IGEgVHlwZUVycm9yIGV4Y2VwdGlvbi4KbW9kdWxlLmV4cG9ydHMgPSBBcnJheUJ1ZmZlciAmJiB1bmN1cnJ5VGhpc0FjY2Vzc29yKEFycmF5QnVmZmVyLnByb3RvdHlwZSwgJ2J5dGVMZW5ndGgnLCAnZ2V0JykgfHwgZnVuY3Rpb24gKE8pIHsKICBpZiAoY2xhc3NvZihPKSAhPT0gJ0FycmF5QnVmZmVyJykgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJyYXlCdWZmZXIgZXhwZWN0ZWQnKTsKICByZXR1cm4gTy5ieXRlTGVuZ3RoOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gNzQxNjoKLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCnZhciBmYWlscyA9IF9fd2VicGFja19yZXF1aXJlX18oOTAzOSk7CnZhciB3ZWxsS25vd25TeW1ib2wgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgyMjcpOwp2YXIgREVTQ1JJUFRPUlMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM3MjQpOwp2YXIgSVNfUFVSRSA9IF9fd2VicGFja19yZXF1aXJlX18oNjM5NSk7Cgp2YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7Cgptb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7CiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHVuaWNvcm4vcmVsYXRpdmUtdXJsLXN0eWxlIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nCiAgdmFyIHVybCA9IG5ldyBVUkwoJ2I/YT0xJmI9MiZjPTMnLCAnaHR0cHM6Ly9hJyk7CiAgdmFyIHBhcmFtcyA9IHVybC5zZWFyY2hQYXJhbXM7CiAgdmFyIHBhcmFtczIgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCdhPTEmYT0yJmI9MycpOwogIHZhciByZXN1bHQgPSAnJzsKICB1cmwucGF0aG5hbWUgPSAnYyUyMGQnOwogIHBhcmFtcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7CiAgICBwYXJhbXNbJ2RlbGV0ZSddKCdiJyk7CiAgICByZXN1bHQgKz0ga2V5ICsgdmFsdWU7CiAgfSk7CiAgcGFyYW1zMlsnZGVsZXRlJ10oJ2EnLCAyKTsKICAvLyBgdW5kZWZpbmVkYCBjYXNlIGlzIGEgQ2hyb21pdW0gMTE3IGJ1ZwogIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTE0MjIyCiAgcGFyYW1zMlsnZGVsZXRlJ10oJ2InLCB1bmRlZmluZWQpOwogIHJldHVybiAoSVNfUFVSRSAmJiAoIXVybC50b0pTT04gfHwgIXBhcmFtczIuaGFzKCdhJywgMSkgfHwgcGFyYW1zMi5oYXMoJ2EnLCAyKSB8fCAhcGFyYW1zMi5oYXMoJ2EnLCB1bmRlZmluZWQpIHx8IHBhcmFtczIuaGFzKCdiJykpKQogICAgfHwgKCFwYXJhbXMuc2l6ZSAmJiAoSVNfUFVSRSB8fCAhREVTQ1JJUFRPUlMpKQogICAgfHwgIXBhcmFtcy5zb3J0CiAgICB8fCB1cmwuaHJlZiAhPT0gJ2h0dHBzOi8vYS9jJTIwZD9hPTEmYz0zJwogICAgfHwgcGFyYW1zLmdldCgnYycpICE9PSAnMycKICAgIHx8IFN0cmluZyhuZXcgVVJMU2VhcmNoUGFyYW1zKCc/YT0xJykpICE9PSAnYT0xJwogICAgfHwgIXBhcmFtc1tJVEVSQVRPUl0KICAgIC8vIHRocm93cyBpbiBFZGdlCiAgICB8fCBuZXcgVVJMKCdodHRwczovL2FAYicpLnVzZXJuYW1lICE9PSAnYScKICAgIHx8IG5ldyBVUkxTZWFyY2hQYXJhbXMobmV3IFVSTFNlYXJjaFBhcmFtcygnYT1iJykpLmdldCgnYScpICE9PSAnYicKICAgIC8vIG5vdCBwdW55Y29kZWQgaW4gRWRnZQogICAgfHwgbmV3IFVSTCgnaHR0cHM6Ly/RgtC10YHRgicpLmhvc3QgIT09ICd4bi0tZTFheWJjJwogICAgLy8gbm90IGVzY2FwZWQgaW4gQ2hyb21lIDYyLQogICAgfHwgbmV3IFVSTCgnaHR0cHM6Ly9hI9CxJykuaGFzaCAhPT0gJyMlRDAlQjEnCiAgICAvLyBmYWlscyBpbiBDaHJvbWUgNjYtCiAgICB8fCByZXN1bHQgIT09ICdhMWMzJwogICAgLy8gdGhyb3dzIGluIFNhZmFyaQogICAgfHwgbmV3IFVSTCgnaHR0cHM6Ly94JywgdW5kZWZpbmVkKS5ob3N0ICE9PSAneCc7Cn0pOwoKCi8qKiovIH0pLAoKLyoqKi8gNzQ3NjoKLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCnZhciBjbGFzc29mUmF3ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMTk1KTsKdmFyIHVuY3VycnlUaGlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NTA0KTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuKSB7CiAgLy8gTmFzaG9ybiBidWc6CiAgLy8gICBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTEyOAogIC8vICAgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzExMzAKICBpZiAoY2xhc3NvZlJhdyhmbikgPT09ICdGdW5jdGlvbicpIHJldHVybiB1bmN1cnJ5VGhpcyhmbik7Cn07CgoKLyoqKi8gfSksCgovKioqLyA3NTY2OgovKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgZGVmaW5lQnVpbHRJbiA9IF9fd2VicGFja19yZXF1aXJlX18oNjg0MCk7CnZhciB1bmN1cnJ5VGhpcyA9IF9fd2VicGFja19yZXF1aXJlX18oOTUwNCk7CnZhciB0b1N0cmluZyA9IF9fd2VicGFja19yZXF1aXJlX18oNjU1KTsKdmFyIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoID0gX193ZWJwYWNrX3JlcXVpcmVfXygyODEyKTsKCnZhciAkVVJMU2VhcmNoUGFyYW1zID0gVVJMU2VhcmNoUGFyYW1zOwp2YXIgVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlID0gJFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGU7CnZhciBnZXRBbGwgPSB1bmN1cnJ5VGhpcyhVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUuZ2V0QWxsKTsKdmFyICRoYXMgPSB1bmN1cnJ5VGhpcyhVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUuaGFzKTsKdmFyIHBhcmFtcyA9IG5ldyAkVVJMU2VhcmNoUGFyYW1zKCdhPTEnKTsKCi8vIGB1bmRlZmluZWRgIGNhc2UgaXMgYSBDaHJvbWl1bSAxMTcgYnVnCi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTE0MjIyCmlmIChwYXJhbXMuaGFzKCdhJywgMikgfHwgIXBhcmFtcy5oYXMoJ2EnLCB1bmRlZmluZWQpKSB7CiAgZGVmaW5lQnVpbHRJbihVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUsICdoYXMnLCBmdW5jdGlvbiBoYXMobmFtZSAvKiAsIHZhbHVlICovKSB7CiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsKICAgIHZhciAkdmFsdWUgPSBsZW5ndGggPCAyID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzFdOwogICAgaWYgKGxlbmd0aCAmJiAkdmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuICRoYXModGhpcywgbmFtZSk7CiAgICB2YXIgdmFsdWVzID0gZ2V0QWxsKHRoaXMsIG5hbWUpOyAvLyBhbHNvIHZhbGlkYXRlcyBgdGhpc2AKICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGxlbmd0aCwgMSk7CiAgICB2YXIgdmFsdWUgPSB0b1N0cmluZygkdmFsdWUpOwogICAgdmFyIGluZGV4ID0gMDsKICAgIHdoaWxlIChpbmRleCA8IHZhbHVlcy5sZW5ndGgpIHsKICAgICAgaWYgKHZhbHVlc1tpbmRleCsrXSA9PT0gdmFsdWUpIHJldHVybiB0cnVlOwogICAgfSByZXR1cm4gZmFsc2U7CiAgfSwgeyBlbnVtZXJhYmxlOiB0cnVlLCB1bnNhZmU6IHRydWUgfSk7Cn0KCgovKioqLyB9KSwKCi8qKiovIDc1ODg6Ci8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCnZhciAkID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NTE4KTsKdmFyIGNhbGwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk1NjUpOwp2YXIgaXRlcmF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oMjY1Mik7CnZhciBhQ2FsbGFibGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkzMDYpOwp2YXIgYW5PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg1NTEpOwp2YXIgZ2V0SXRlcmF0b3JEaXJlY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3NjcpOwp2YXIgaXRlcmF0b3JDbG9zZSA9IF9fd2VicGFja19yZXF1aXJlX18oOTUzOSk7CnZhciBpdGVyYXRvckhlbHBlcldpdGhvdXRDbG9zaW5nT25FYXJseUVycm9yID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NTQ5KTsKCnZhciBmb3JFYWNoV2l0aG91dENsb3NpbmdPbkVhcmx5RXJyb3IgPSBpdGVyYXRvckhlbHBlcldpdGhvdXRDbG9zaW5nT25FYXJseUVycm9yKCdmb3JFYWNoJywgVHlwZUVycm9yKTsKCi8vIGBJdGVyYXRvci5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXRlcmF0b3IucHJvdG90eXBlLmZvcmVhY2gKJCh7IHRhcmdldDogJ0l0ZXJhdG9yJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogZm9yRWFjaFdpdGhvdXRDbG9zaW5nT25FYXJseUVycm9yIH0sIHsKICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7CiAgICBhbk9iamVjdCh0aGlzKTsKICAgIHRyeSB7CiAgICAgIGFDYWxsYWJsZShmbik7CiAgICB9IGNhdGNoIChlcnJvcikgewogICAgICBpdGVyYXRvckNsb3NlKHRoaXMsICd0aHJvdycsIGVycm9yKTsKICAgIH0KCiAgICBpZiAoZm9yRWFjaFdpdGhvdXRDbG9zaW5nT25FYXJseUVycm9yKSByZXR1cm4gY2FsbChmb3JFYWNoV2l0aG91dENsb3NpbmdPbkVhcmx5RXJyb3IsIHRoaXMsIGZuKTsKCiAgICB2YXIgcmVjb3JkID0gZ2V0SXRlcmF0b3JEaXJlY3QodGhpcyk7CiAgICB2YXIgY291bnRlciA9IDA7CiAgICBpdGVyYXRlKHJlY29yZCwgZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgIGZuKHZhbHVlLCBjb3VudGVyKyspOwogICAgfSwgeyBJU19SRUNPUkQ6IHRydWUgfSk7CiAgfQp9KTsKCgovKioqLyB9KSwKCi8qKiovIDc1OTQ6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgZ2xvYmFsVGhpcyA9IF9fd2VicGFja19yZXF1aXJlX18oNDU3Nik7CnZhciBmYWlscyA9IF9fd2VicGFja19yZXF1aXJlX18oOTAzOSk7CgovLyBiYWJlbC1taW5pZnkgYW5kIENsb3N1cmUgQ29tcGlsZXIgdHJhbnNwaWxlcyBSZWdFeHAoJy4nLCAnZCcpIC0+IC8uL2QgYW5kIGl0IGNhdXNlcyBTeW50YXhFcnJvcgp2YXIgUmVnRXhwID0gZ2xvYmFsVGhpcy5SZWdFeHA7Cgp2YXIgRkxBR1NfR0VUVEVSX0lTX0NPUlJFQ1QgPSAhZmFpbHMoZnVuY3Rpb24gKCkgewogIHZhciBJTkRJQ0VTX1NVUFBPUlQgPSB0cnVlOwogIHRyeSB7CiAgICBSZWdFeHAoJy4nLCAnZCcpOwogIH0gY2F0Y2ggKGVycm9yKSB7CiAgICBJTkRJQ0VTX1NVUFBPUlQgPSBmYWxzZTsKICB9CgogIHZhciBPID0ge307CiAgLy8gbW9kZXJuIFY4IGJ1ZwogIHZhciBjYWxscyA9ICcnOwogIHZhciBleHBlY3RlZCA9IElORElDRVNfU1VQUE9SVCA/ICdkZ2ltc3knIDogJ2dpbXN5JzsKCiAgdmFyIGFkZEdldHRlciA9IGZ1bmN0aW9uIChrZXksIGNocikgewogICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSBzYWZlCiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgewogICAgICBjYWxscyArPSBjaHI7CiAgICAgIHJldHVybiB0cnVlOwogICAgfSB9KTsKICB9OwoKICB2YXIgcGFpcnMgPSB7CiAgICBkb3RBbGw6ICdzJywKICAgIGdsb2JhbDogJ2cnLAogICAgaWdub3JlQ2FzZTogJ2knLAogICAgbXVsdGlsaW5lOiAnbScsCiAgICBzdGlja3k6ICd5JwogIH07CgogIGlmIChJTkRJQ0VTX1NVUFBPUlQpIHBhaXJzLmhhc0luZGljZXMgPSAnZCc7CgogIGZvciAodmFyIGtleSBpbiBwYWlycykgYWRkR2V0dGVyKGtleSwgcGFpcnNba2V5XSk7CgogIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmUKICB2YXIgcmVzdWx0ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihSZWdFeHAucHJvdG90eXBlLCAnZmxhZ3MnKS5nZXQuY2FsbChPKTsKCiAgcmV0dXJuIHJlc3VsdCAhPT0gZXhwZWN0ZWQgfHwgY2FsbHMgIT09IGV4cGVjdGVkOwp9KTsKCm1vZHVsZS5leHBvcnRzID0geyBjb3JyZWN0OiBGTEFHU19HRVRURVJfSVNfQ09SUkVDVCB9OwoKCi8qKiovIH0pLAoKLyoqKi8gNzYyOToKLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCnZhciBJU19QVVJFID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2Mzk1KTsKdmFyIGdsb2JhbFRoaXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ1NzYpOwp2YXIgZGVmaW5lR2xvYmFsUHJvcGVydHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk0MzMpOwoKdmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nOwp2YXIgc3RvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbFRoaXNbU0hBUkVEXSB8fCBkZWZpbmVHbG9iYWxQcm9wZXJ0eShTSEFSRUQsIHt9KTsKCihzdG9yZS52ZXJzaW9ucyB8fCAoc3RvcmUudmVyc2lvbnMgPSBbXSkpLnB1c2goewogIHZlcnNpb246ICczLjQ1LjAnLAogIG1vZGU6IElTX1BVUkUgPyAncHVyZScgOiAnZ2xvYmFsJywKICBjb3B5cmlnaHQ6ICfCqSAyMDE0LTIwMjUgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknLAogIGxpY2Vuc2U6ICdodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9ibG9iL3YzLjQ1LjAvTElDRU5TRScsCiAgc291cmNlOiAnaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMnCn0pOwoKCi8qKiovIH0pLAoKLyoqKi8gNzY0MjoKLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyICQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY1MTgpOwp2YXIgZGlmZmVyZW5jZSA9IF9fd2VicGFja19yZXF1aXJlX18oMzQ0MCk7CnZhciBmYWlscyA9IF9fd2VicGFja19yZXF1aXJlX18oOTAzOSk7CnZhciBzZXRNZXRob2RBY2NlcHRTZXRMaWtlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OTE2KTsKCnZhciBTRVRfTElLRV9JTkNPUlJFQ1RfQkVIQVZJT1IgPSAhc2V0TWV0aG9kQWNjZXB0U2V0TGlrZSgnZGlmZmVyZW5jZScsIGZ1bmN0aW9uIChyZXN1bHQpIHsKICByZXR1cm4gcmVzdWx0LnNpemUgPT09IDA7Cn0pOwoKdmFyIEZPUkNFRCA9IFNFVF9MSUtFX0lOQ09SUkVDVF9CRUhBVklPUiB8fCBmYWlscyhmdW5jdGlvbiAoKSB7CiAgLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI4ODU5NQogIHZhciBzZXRMaWtlID0gewogICAgc2l6ZTogMSwKICAgIGhhczogZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfSwKICAgIGtleXM6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGluZGV4ID0gMDsKICAgICAgcmV0dXJuIHsKICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICB2YXIgZG9uZSA9IGluZGV4KysgPiAxOwogICAgICAgICAgaWYgKGJhc2VTZXQuaGFzKDEpKSBiYXNlU2V0LmNsZWFyKCk7CiAgICAgICAgICByZXR1cm4geyBkb25lOiBkb25lLCB2YWx1ZTogMiB9OwogICAgICAgIH0KICAgICAgfTsKICAgIH0KICB9OwogIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1zZXQgLS0gdGVzdGluZwogIHZhciBiYXNlU2V0ID0gbmV3IFNldChbMSwgMiwgMywgNF0pOwogIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1zZXQtcHJvdG90eXBlLWRpZmZlcmVuY2UgLS0gdGVzdGluZwogIHJldHVybiBiYXNlU2V0LmRpZmZlcmVuY2Uoc2V0TGlrZSkuc2l6ZSAhPT0gMzsKfSk7CgovLyBgU2V0LnByb3RvdHlwZS5kaWZmZXJlbmNlYCBtZXRob2QKLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLmRpZmZlcmVuY2UKJCh7IHRhcmdldDogJ1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7CiAgZGlmZmVyZW5jZTogZGlmZmVyZW5jZQp9KTsKCgovKioqLyB9KSwKCi8qKiovIDc2NTc6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgZmFpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkwMzkpOwp2YXIgaXNDYWxsYWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oNDkwMSk7CnZhciBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMzQpOwp2YXIgY3JlYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMzYwKTsKdmFyIGdldFByb3RvdHlwZU9mID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNzg3KTsKdmFyIGRlZmluZUJ1aWx0SW4gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY4NDApOwp2YXIgd2VsbEtub3duU3ltYm9sID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MjI3KTsKdmFyIElTX1BVUkUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYzOTUpOwoKdmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpOwp2YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IGZhbHNlOwoKLy8gYCVJdGVyYXRvclByb3RvdHlwZSVgIG9iamVjdAovLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSVpdGVyYXRvcnByb3RvdHlwZSUtb2JqZWN0CnZhciBJdGVyYXRvclByb3RvdHlwZSwgUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlLCBhcnJheUl0ZXJhdG9yOwoKLyogZXNsaW50LWRpc2FibGUgZXMvbm8tYXJyYXktcHJvdG90eXBlLWtleXMgLS0gc2FmZSAqLwppZiAoW10ua2V5cykgewogIGFycmF5SXRlcmF0b3IgPSBbXS5rZXlzKCk7CiAgLy8gU2FmYXJpIDggaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgCiAgaWYgKCEoJ25leHQnIGluIGFycmF5SXRlcmF0b3IpKSBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gdHJ1ZTsKICBlbHNlIHsKICAgIFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKGdldFByb3RvdHlwZU9mKGFycmF5SXRlcmF0b3IpKTsKICAgIGlmIChQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUpIEl0ZXJhdG9yUHJvdG90eXBlID0gUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlOwogIH0KfQoKdmFyIE5FV19JVEVSQVRPUl9QUk9UT1RZUEUgPSAhaXNPYmplY3QoSXRlcmF0b3JQcm90b3R5cGUpIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHsKICB2YXIgdGVzdCA9IHt9OwogIC8vIEZGNDQtIGxlZ2FjeSBpdGVyYXRvcnMgY2FzZQogIHJldHVybiBJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0uY2FsbCh0ZXN0KSAhPT0gdGVzdDsKfSk7CgppZiAoTkVXX0lURVJBVE9SX1BST1RPVFlQRSkgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTsKZWxzZSBpZiAoSVNfUFVSRSkgSXRlcmF0b3JQcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpOwoKLy8gYCVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKWAgbWV0aG9kCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJWl0ZXJhdG9ycHJvdG90eXBlJS1AQGl0ZXJhdG9yCmlmICghaXNDYWxsYWJsZShJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0pKSB7CiAgZGVmaW5lQnVpbHRJbihJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzOwogIH0pOwp9Cgptb2R1bGUuZXhwb3J0cyA9IHsKICBJdGVyYXRvclByb3RvdHlwZTogSXRlcmF0b3JQcm90b3R5cGUsCiAgQlVHR1lfU0FGQVJJX0lURVJBVE9SUzogQlVHR1lfU0FGQVJJX0lURVJBVE9SUwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gNzY4MDoKLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCnZhciB1bmN1cnJ5VGhpcyA9IF9fd2VicGFja19yZXF1aXJlX18oOTUwNCk7Cgptb2R1bGUuZXhwb3J0cyA9IHVuY3VycnlUaGlzKFtdLnNsaWNlKTsKCgovKioqLyB9KSwKCi8qKiovIDc2OTY6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IF9fd2VicGFja19yZXF1aXJlX18oMTI5MSk7CnZhciB0b0xlbmd0aCA9IF9fd2VicGFja19yZXF1aXJlX18oODAxNCk7Cgp2YXIgJFJhbmdlRXJyb3IgPSBSYW5nZUVycm9yOwoKLy8gYFRvSW5kZXhgIGFic3RyYWN0IG9wZXJhdGlvbgovLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvaW5kZXgKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHsKICBpZiAoaXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIDA7CiAgdmFyIG51bWJlciA9IHRvSW50ZWdlck9ySW5maW5pdHkoaXQpOwogIHZhciBsZW5ndGggPSB0b0xlbmd0aChudW1iZXIpOwogIGlmIChudW1iZXIgIT09IGxlbmd0aCkgdGhyb3cgbmV3ICRSYW5nZUVycm9yKCdXcm9uZyBsZW5ndGggb3IgaW5kZXgnKTsKICByZXR1cm4gbGVuZ3RoOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gNzc0MDoKLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCnZhciBoYXNPd24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkyOTcpOwp2YXIgb3duS2V5cyA9IF9fd2VicGFja19yZXF1aXJlX18oNTAzMSk7CnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDczNDcpOwp2YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5MTMpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UsIGV4Y2VwdGlvbnMpIHsKICB2YXIga2V5cyA9IG93bktleXMoc291cmNlKTsKICB2YXIgZGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mOwogIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjsKICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBrZXkgPSBrZXlzW2ldOwogICAgaWYgKCFoYXNPd24odGFyZ2V0LCBrZXkpICYmICEoZXhjZXB0aW9ucyAmJiBoYXNPd24oZXhjZXB0aW9ucywga2V5KSkpIHsKICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOwogICAgfQogIH0KfTsKCgovKioqLyB9KSwKCi8qKiovIDc3NTA6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgaXNOdWxsT3JVbmRlZmluZWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQxMTcpOwoKdmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7CgovLyBgUmVxdWlyZU9iamVjdENvZXJjaWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVxdWlyZW9iamVjdGNvZXJjaWJsZQptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkgewogIGlmIChpc051bGxPclVuZGVmaW5lZChpdCkpIHRocm93IG5ldyAkVHlwZUVycm9yKCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAiICsgaXQpOwogIHJldHVybiBpdDsKfTsKCgovKioqLyB9KSwKCi8qKiovIDc3NTE6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgZ2xvYmFsVGhpcyA9IF9fd2VicGFja19yZXF1aXJlX18oNDU3Nik7CnZhciBpc0NhbGxhYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OTAxKTsKCnZhciBhRnVuY3Rpb24gPSBmdW5jdGlvbiAoYXJndW1lbnQpIHsKICByZXR1cm4gaXNDYWxsYWJsZShhcmd1bWVudCkgPyBhcmd1bWVudCA6IHVuZGVmaW5lZDsKfTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWVzcGFjZSwgbWV0aG9kKSB7CiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gYUZ1bmN0aW9uKGdsb2JhbFRoaXNbbmFtZXNwYWNlXSkgOiBnbG9iYWxUaGlzW25hbWVzcGFjZV0gJiYgZ2xvYmFsVGhpc1tuYW1lc3BhY2VdW21ldGhvZF07Cn07CgoKLyoqKi8gfSksCgovKioqLyA3ODExOgovKioqLyAoKG1vZHVsZSkgPT4gewoKCi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby10eXBlZC1hcnJheXMgLS0gc2FmZQptb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBBcnJheUJ1ZmZlciAhPSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgRGF0YVZpZXcgIT0gJ3VuZGVmaW5lZCc7CgoKLyoqKi8gfSksCgovKioqLyA3OTM2OgovKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgJCA9IF9fd2VicGFja19yZXF1aXJlX18oNjUxOCk7CnZhciAkdHJhbnNmZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU2MzYpOwoKLy8gYEFycmF5QnVmZmVyLnByb3RvdHlwZS50cmFuc2ZlclRvRml4ZWRMZW5ndGhgIG1ldGhvZAovLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5YnVmZmVyLnByb3RvdHlwZS50cmFuc2ZlcnRvZml4ZWRsZW5ndGgKaWYgKCR0cmFuc2ZlcikgJCh7IHRhcmdldDogJ0FycmF5QnVmZmVyJywgcHJvdG86IHRydWUgfSwgewogIHRyYW5zZmVyVG9GaXhlZExlbmd0aDogZnVuY3Rpb24gdHJhbnNmZXJUb0ZpeGVkTGVuZ3RoKCkgewogICAgcmV0dXJuICR0cmFuc2Zlcih0aGlzLCBhcmd1bWVudHMubGVuZ3RoID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkLCBmYWxzZSk7CiAgfQp9KTsKCgovKioqLyB9KSwKCi8qKiovIDc5Nzk6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgYW5PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg1NTEpOwoKLy8gYFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NgIGdldHRlciBpbXBsZW1lbnRhdGlvbgovLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldC1yZWdleHAucHJvdG90eXBlLmZsYWdzCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgewogIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7CiAgdmFyIHJlc3VsdCA9ICcnOwogIGlmICh0aGF0Lmhhc0luZGljZXMpIHJlc3VsdCArPSAnZCc7CiAgaWYgKHRoYXQuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnOwogIGlmICh0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7CiAgaWYgKHRoYXQubXVsdGlsaW5lKSByZXN1bHQgKz0gJ20nOwogIGlmICh0aGF0LmRvdEFsbCkgcmVzdWx0ICs9ICdzJzsKICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnOwogIGlmICh0aGF0LnVuaWNvZGVTZXRzKSByZXN1bHQgKz0gJ3YnOwogIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JzsKICByZXR1cm4gcmVzdWx0Owp9OwoKCi8qKiovIH0pLAoKLyoqKi8gODAwNDoKLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyICQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY1MTgpOwp2YXIgZmFpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkwMzkpOwp2YXIgaW50ZXJzZWN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NzUwKTsKdmFyIHNldE1ldGhvZEFjY2VwdFNldExpa2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5MTYpOwoKdmFyIElOQ09SUkVDVCA9ICFzZXRNZXRob2RBY2NlcHRTZXRMaWtlKCdpbnRlcnNlY3Rpb24nLCBmdW5jdGlvbiAocmVzdWx0KSB7CiAgcmV0dXJuIHJlc3VsdC5zaXplID09PSAyICYmIHJlc3VsdC5oYXMoMSkgJiYgcmVzdWx0LmhhcygyKTsKfSkgfHwgZmFpbHMoZnVuY3Rpb24gKCkgewogIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1mcm9tLCBlcy9uby1zZXQsIGVzL25vLXNldC1wcm90b3R5cGUtaW50ZXJzZWN0aW9uIC0tIHRlc3RpbmcKICByZXR1cm4gU3RyaW5nKEFycmF5LmZyb20obmV3IFNldChbMSwgMiwgM10pLmludGVyc2VjdGlvbihuZXcgU2V0KFszLCAyXSkpKSkgIT09ICczLDInOwp9KTsKCi8vIGBTZXQucHJvdG90eXBlLmludGVyc2VjdGlvbmAgbWV0aG9kCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS5pbnRlcnNlY3Rpb24KJCh7IHRhcmdldDogJ1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVCB9LCB7CiAgaW50ZXJzZWN0aW9uOiBpbnRlcnNlY3Rpb24KfSk7CgoKLyoqKi8gfSksCgovKioqLyA4MDE0OgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyOTEpOwoKdmFyIG1pbiA9IE1hdGgubWluOwoKLy8gYFRvTGVuZ3RoYCBhYnN0cmFjdCBvcGVyYXRpb24KLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b2xlbmd0aAptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkgewogIHZhciBsZW4gPSB0b0ludGVnZXJPckluZmluaXR5KGFyZ3VtZW50KTsKICByZXR1cm4gbGVuID4gMCA/IG1pbihsZW4sIDB4MUZGRkZGRkZGRkZGRkYpIDogMDsgLy8gMiAqKiA1MyAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MQp9OwoKCi8qKiovIH0pLAoKLyoqKi8gODEwMDoKLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyICQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY1MTgpOwp2YXIgJHRyYW5zZmVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NjM2KTsKCi8vIGBBcnJheUJ1ZmZlci5wcm90b3R5cGUudHJhbnNmZXJgIG1ldGhvZAovLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5YnVmZmVyLnByb3RvdHlwZS50cmFuc2ZlcgppZiAoJHRyYW5zZmVyKSAkKHsgdGFyZ2V0OiAnQXJyYXlCdWZmZXInLCBwcm90bzogdHJ1ZSB9LCB7CiAgdHJhbnNmZXI6IGZ1bmN0aW9uIHRyYW5zZmVyKCkgewogICAgcmV0dXJuICR0cmFuc2Zlcih0aGlzLCBhcmd1bWVudHMubGVuZ3RoID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkLCB0cnVlKTsKICB9Cn0pOwoKCi8qKiovIH0pLAoKLyoqKi8gODExMToKLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyICQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY1MTgpOwp2YXIgZ2xvYmFsVGhpcyA9IF9fd2VicGFja19yZXF1aXJlX18oNDU3Nik7CnZhciBhbkluc3RhbmNlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NzkpOwp2YXIgYW5PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg1NTEpOwp2YXIgaXNDYWxsYWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oNDkwMSk7CnZhciBnZXRQcm90b3R5cGVPZiA9IF9fd2VicGFja19yZXF1aXJlX18oMjc4Nyk7CnZhciBkZWZpbmVCdWlsdEluQWNjZXNzb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxMDYpOwp2YXIgY3JlYXRlUHJvcGVydHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ2NTkpOwp2YXIgZmFpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkwMzkpOwp2YXIgaGFzT3duID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5Mjk3KTsKdmFyIHdlbGxLbm93blN5bWJvbCA9IF9fd2VicGFja19yZXF1aXJlX18oODIyNyk7CnZhciBJdGVyYXRvclByb3RvdHlwZSA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDc2NTcpLkl0ZXJhdG9yUHJvdG90eXBlKTsKdmFyIERFU0NSSVBUT1JTID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNzI0KTsKdmFyIElTX1BVUkUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYzOTUpOwoKdmFyIENPTlNUUlVDVE9SID0gJ2NvbnN0cnVjdG9yJzsKdmFyIElURVJBVE9SID0gJ0l0ZXJhdG9yJzsKdmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7Cgp2YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjsKdmFyIE5hdGl2ZUl0ZXJhdG9yID0gZ2xvYmFsVGhpc1tJVEVSQVRPUl07CgovLyBGRjU2LSBoYXZlIG5vbi1zdGFuZGFyZCBnbG9iYWwgaGVscGVyIGBJdGVyYXRvcmAKdmFyIEZPUkNFRCA9IElTX1BVUkUKICB8fCAhaXNDYWxsYWJsZShOYXRpdmVJdGVyYXRvcikKICB8fCBOYXRpdmVJdGVyYXRvci5wcm90b3R5cGUgIT09IEl0ZXJhdG9yUHJvdG90eXBlCiAgLy8gRkY0NC0gbm9uLXN0YW5kYXJkIGBJdGVyYXRvcmAgcGFzc2VzIHByZXZpb3VzIHRlc3RzCiAgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHsgTmF0aXZlSXRlcmF0b3Ioe30pOyB9KTsKCnZhciBJdGVyYXRvckNvbnN0cnVjdG9yID0gZnVuY3Rpb24gSXRlcmF0b3IoKSB7CiAgYW5JbnN0YW5jZSh0aGlzLCBJdGVyYXRvclByb3RvdHlwZSk7CiAgaWYgKGdldFByb3RvdHlwZU9mKHRoaXMpID09PSBJdGVyYXRvclByb3RvdHlwZSkgdGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fic3RyYWN0IGNsYXNzIEl0ZXJhdG9yIG5vdCBkaXJlY3RseSBjb25zdHJ1Y3RhYmxlJyk7Cn07Cgp2YXIgZGVmaW5lSXRlcmF0b3JQcm90b3R5cGVBY2Nlc3NvciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7CiAgaWYgKERFU0NSSVBUT1JTKSB7CiAgICBkZWZpbmVCdWlsdEluQWNjZXNzb3IoSXRlcmF0b3JQcm90b3R5cGUsIGtleSwgewogICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgIGdldDogZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgfSwKICAgICAgc2V0OiBmdW5jdGlvbiAocmVwbGFjZW1lbnQpIHsKICAgICAgICBhbk9iamVjdCh0aGlzKTsKICAgICAgICBpZiAodGhpcyA9PT0gSXRlcmF0b3JQcm90b3R5cGUpIHRocm93IG5ldyAkVHlwZUVycm9yKCJZb3UgY2FuJ3QgcmVkZWZpbmUgdGhpcyBwcm9wZXJ0eSIpOwogICAgICAgIGlmIChoYXNPd24odGhpcywga2V5KSkgdGhpc1trZXldID0gcmVwbGFjZW1lbnQ7CiAgICAgICAgZWxzZSBjcmVhdGVQcm9wZXJ0eSh0aGlzLCBrZXksIHJlcGxhY2VtZW50KTsKICAgICAgfQogICAgfSk7CiAgfSBlbHNlIEl0ZXJhdG9yUHJvdG90eXBlW2tleV0gPSB2YWx1ZTsKfTsKCmlmICghaGFzT3duKEl0ZXJhdG9yUHJvdG90eXBlLCBUT19TVFJJTkdfVEFHKSkgZGVmaW5lSXRlcmF0b3JQcm90b3R5cGVBY2Nlc3NvcihUT19TVFJJTkdfVEFHLCBJVEVSQVRPUik7CgppZiAoRk9SQ0VEIHx8ICFoYXNPd24oSXRlcmF0b3JQcm90b3R5cGUsIENPTlNUUlVDVE9SKSB8fCBJdGVyYXRvclByb3RvdHlwZVtDT05TVFJVQ1RPUl0gPT09IE9iamVjdCkgewogIGRlZmluZUl0ZXJhdG9yUHJvdG90eXBlQWNjZXNzb3IoQ09OU1RSVUNUT1IsIEl0ZXJhdG9yQ29uc3RydWN0b3IpOwp9CgpJdGVyYXRvckNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IEl0ZXJhdG9yUHJvdG90eXBlOwoKLy8gYEl0ZXJhdG9yYCBjb25zdHJ1Y3RvcgovLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWl0ZXJhdG9yCiQoeyBnbG9iYWw6IHRydWUsIGNvbnN0cnVjdG9yOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7CiAgSXRlcmF0b3I6IEl0ZXJhdG9yQ29uc3RydWN0b3IKfSk7CgoKLyoqKi8gfSksCgovKioqLyA4MjI3OgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIGdsb2JhbFRoaXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ1NzYpOwp2YXIgc2hhcmVkID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NzQ1KTsKdmFyIGhhc093biA9IF9fd2VicGFja19yZXF1aXJlX18oOTI5Nyk7CnZhciB1aWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMzOTIpOwp2YXIgTkFUSVZFX1NZTUJPTCA9IF9fd2VicGFja19yZXF1aXJlX18oNDQ5NSk7CnZhciBVU0VfU1lNQk9MX0FTX1VJRCA9IF9fd2VicGFja19yZXF1aXJlX18oNzA0MCk7Cgp2YXIgU3ltYm9sID0gZ2xvYmFsVGhpcy5TeW1ib2w7CnZhciBXZWxsS25vd25TeW1ib2xzU3RvcmUgPSBzaGFyZWQoJ3drcycpOwp2YXIgY3JlYXRlV2VsbEtub3duU3ltYm9sID0gVVNFX1NZTUJPTF9BU19VSUQgPyBTeW1ib2xbJ2ZvciddIHx8IFN5bWJvbCA6IFN5bWJvbCAmJiBTeW1ib2wud2l0aG91dFNldHRlciB8fCB1aWQ7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7CiAgaWYgKCFoYXNPd24oV2VsbEtub3duU3ltYm9sc1N0b3JlLCBuYW1lKSkgewogICAgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gTkFUSVZFX1NZTUJPTCAmJiBoYXNPd24oU3ltYm9sLCBuYW1lKQogICAgICA/IFN5bWJvbFtuYW1lXQogICAgICA6IGNyZWF0ZVdlbGxLbm93blN5bWJvbCgnU3ltYm9sLicgKyBuYW1lKTsKICB9IHJldHVybiBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV07Cn07CgoKLyoqKi8gfSksCgovKioqLyA4MjM3OgovKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgJCA9IF9fd2VicGFja19yZXF1aXJlX18oNjUxOCk7CnZhciBpdGVyYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNjUyKTsKdmFyIGFDYWxsYWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oOTMwNik7CnZhciBhbk9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oODU1MSk7CnZhciBnZXRJdGVyYXRvckRpcmVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTc2Nyk7CnZhciBpdGVyYXRvckNsb3NlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NTM5KTsKdmFyIGl0ZXJhdG9ySGVscGVyV2l0aG91dENsb3NpbmdPbkVhcmx5RXJyb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ1NDkpOwp2YXIgYXBwbHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg3NDUpOwp2YXIgZmFpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkwMzkpOwoKdmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7CgovLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkxNjUxCnZhciBGQUlMU19PTl9JTklUSUFMX1VOREVGSU5FRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHsKICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8taXRlcmF0b3ItcHJvdG90eXBlLXJlZHVjZSwgZXMvbm8tYXJyYXktcHJvdG90eXBlLWtleXMsIGFycmF5LWNhbGxiYWNrLXJldHVybiAtLSByZXF1aXJlZCBmb3IgdGVzdGluZwogIFtdLmtleXMoKS5yZWR1Y2UoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCB1bmRlZmluZWQpOwp9KTsKCnZhciByZWR1Y2VXaXRob3V0Q2xvc2luZ09uRWFybHlFcnJvciA9ICFGQUlMU19PTl9JTklUSUFMX1VOREVGSU5FRCAmJiBpdGVyYXRvckhlbHBlcldpdGhvdXRDbG9zaW5nT25FYXJseUVycm9yKCdyZWR1Y2UnLCAkVHlwZUVycm9yKTsKCi8vIGBJdGVyYXRvci5wcm90b3R5cGUucmVkdWNlYCBtZXRob2QKLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pdGVyYXRvci5wcm90b3R5cGUucmVkdWNlCiQoeyB0YXJnZXQ6ICdJdGVyYXRvcicsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX0lOSVRJQUxfVU5ERUZJTkVEIHx8IHJlZHVjZVdpdGhvdXRDbG9zaW5nT25FYXJseUVycm9yIH0sIHsKICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShyZWR1Y2VyIC8qICwgaW5pdGlhbFZhbHVlICovKSB7CiAgICBhbk9iamVjdCh0aGlzKTsKICAgIHRyeSB7CiAgICAgIGFDYWxsYWJsZShyZWR1Y2VyKTsKICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgIGl0ZXJhdG9yQ2xvc2UodGhpcywgJ3Rocm93JywgZXJyb3IpOwogICAgfQoKICAgIHZhciBub0luaXRpYWwgPSBhcmd1bWVudHMubGVuZ3RoIDwgMjsKICAgIHZhciBhY2N1bXVsYXRvciA9IG5vSW5pdGlhbCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXTsKICAgIGlmIChyZWR1Y2VXaXRob3V0Q2xvc2luZ09uRWFybHlFcnJvcikgewogICAgICByZXR1cm4gYXBwbHkocmVkdWNlV2l0aG91dENsb3NpbmdPbkVhcmx5RXJyb3IsIHRoaXMsIG5vSW5pdGlhbCA/IFtyZWR1Y2VyXSA6IFtyZWR1Y2VyLCBhY2N1bXVsYXRvcl0pOwogICAgfQogICAgdmFyIHJlY29yZCA9IGdldEl0ZXJhdG9yRGlyZWN0KHRoaXMpOwogICAgdmFyIGNvdW50ZXIgPSAwOwogICAgaXRlcmF0ZShyZWNvcmQsIGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICBpZiAobm9Jbml0aWFsKSB7CiAgICAgICAgbm9Jbml0aWFsID0gZmFsc2U7CiAgICAgICAgYWNjdW11bGF0b3IgPSB2YWx1ZTsKICAgICAgfSBlbHNlIHsKICAgICAgICBhY2N1bXVsYXRvciA9IHJlZHVjZXIoYWNjdW11bGF0b3IsIHZhbHVlLCBjb3VudGVyKTsKICAgICAgfQogICAgICBjb3VudGVyKys7CiAgICB9LCB7IElTX1JFQ09SRDogdHJ1ZSB9KTsKICAgIGlmIChub0luaXRpYWwpIHRocm93IG5ldyAkVHlwZUVycm9yKCdSZWR1Y2Ugb2YgZW1wdHkgaXRlcmF0b3Igd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7CiAgICByZXR1cm4gYWNjdW11bGF0b3I7CiAgfQp9KTsKCgovKioqLyB9KSwKCi8qKiovIDg0Njk6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgdW5jdXJyeVRoaXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk1MDQpOwp2YXIgaXRlcmF0ZVNpbXBsZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTA3KTsKdmFyIFNldEhlbHBlcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ0MDIpOwoKdmFyIFNldCA9IFNldEhlbHBlcnMuU2V0Owp2YXIgU2V0UHJvdG90eXBlID0gU2V0SGVscGVycy5wcm90bzsKdmFyIGZvckVhY2ggPSB1bmN1cnJ5VGhpcyhTZXRQcm90b3R5cGUuZm9yRWFjaCk7CnZhciBrZXlzID0gdW5jdXJyeVRoaXMoU2V0UHJvdG90eXBlLmtleXMpOwp2YXIgbmV4dCA9IGtleXMobmV3IFNldCgpKS5uZXh0OwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc2V0LCBmbiwgaW50ZXJydXB0aWJsZSkgewogIHJldHVybiBpbnRlcnJ1cHRpYmxlID8gaXRlcmF0ZVNpbXBsZSh7IGl0ZXJhdG9yOiBrZXlzKHNldCksIG5leHQ6IG5leHQgfSwgZm4pIDogZm9yRWFjaChzZXQsIGZuKTsKfTsKCgovKioqLyB9KSwKCi8qKiovIDg0ODA6Ci8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxODI4KTsKdmFyIGVudW1CdWdLZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NzI3KTsKCnZhciBoaWRkZW5LZXlzID0gZW51bUJ1Z0tleXMuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7CgovLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZAovLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eW5hbWVzCi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHluYW1lcyAtLSBzYWZlCmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykgewogIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgaGlkZGVuS2V5cyk7Cn07CgoKLyoqKi8gfSksCgovKioqLyA4NTI3OgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIGFTZXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcwODApOwp2YXIgaGFzID0gKF9fd2VicGFja19yZXF1aXJlX18oNDQwMikuaGFzKTsKdmFyIHNpemUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUxNzApOwp2YXIgZ2V0U2V0UmVjb3JkID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNzg5KTsKdmFyIGl0ZXJhdGVTaW1wbGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwNyk7CnZhciBpdGVyYXRvckNsb3NlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NTM5KTsKCi8vIGBTZXQucHJvdG90eXBlLmlzU3VwZXJzZXRPZmAgbWV0aG9kCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS5pc3N1cGVyc2V0b2YKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc1N1cGVyc2V0T2Yob3RoZXIpIHsKICB2YXIgTyA9IGFTZXQodGhpcyk7CiAgdmFyIG90aGVyUmVjID0gZ2V0U2V0UmVjb3JkKG90aGVyKTsKICBpZiAoc2l6ZShPKSA8IG90aGVyUmVjLnNpemUpIHJldHVybiBmYWxzZTsKICB2YXIgaXRlcmF0b3IgPSBvdGhlclJlYy5nZXRJdGVyYXRvcigpOwogIHJldHVybiBpdGVyYXRlU2ltcGxlKGl0ZXJhdG9yLCBmdW5jdGlvbiAoZSkgewogICAgaWYgKCFoYXMoTywgZSkpIHJldHVybiBpdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCAnbm9ybWFsJywgZmFsc2UpOwogIH0pICE9PSBmYWxzZTsKfTsKCgovKioqLyB9KSwKCi8qKiovIDg1NTE6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM0KTsKCnZhciAkU3RyaW5nID0gU3RyaW5nOwp2YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjsKCi8vIGBBc3NlcnQ6IFR5cGUoYXJndW1lbnQpIGlzIE9iamVjdGAKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHsKICBpZiAoaXNPYmplY3QoYXJndW1lbnQpKSByZXR1cm4gYXJndW1lbnQ7CiAgdGhyb3cgbmV3ICRUeXBlRXJyb3IoJFN0cmluZyhhcmd1bWVudCkgKyAnIGlzIG5vdCBhbiBvYmplY3QnKTsKfTsKCgovKioqLyB9KSwKCi8qKiovIDg1NzQ6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgdW5jdXJyeVRoaXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk1MDQpOwoKdmFyICRFcnJvciA9IEVycm9yOwp2YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpOwoKdmFyIFRFU1QgPSAoZnVuY3Rpb24gKGFyZykgeyByZXR1cm4gU3RyaW5nKG5ldyAkRXJyb3IoYXJnKS5zdGFjayk7IH0pKCd6eGNhc2QnKTsKLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZG9zL25vLXZ1bG5lcmFibGUsIHNvbmFyanMvc2xvdy1yZWdleCAtLSBzYWZlCnZhciBWOF9PUl9DSEFLUkFfU1RBQ0tfRU5UUlkgPSAvXG5ccyphdCBbXjpdKjpbXlxuXSovOwp2YXIgSVNfVjhfT1JfQ0hBS1JBX1NUQUNLID0gVjhfT1JfQ0hBS1JBX1NUQUNLX0VOVFJZLnRlc3QoVEVTVCk7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzdGFjaywgZHJvcEVudHJpZXMpIHsKICBpZiAoSVNfVjhfT1JfQ0hBS1JBX1NUQUNLICYmIHR5cGVvZiBzdGFjayA9PSAnc3RyaW5nJyAmJiAhJEVycm9yLnByZXBhcmVTdGFja1RyYWNlKSB7CiAgICB3aGlsZSAoZHJvcEVudHJpZXMtLSkgc3RhY2sgPSByZXBsYWNlKHN0YWNrLCBWOF9PUl9DSEFLUkFfU1RBQ0tfRU5UUlksICcnKTsKICB9IHJldHVybiBzdGFjazsKfTsKCgovKioqLyB9KSwKCi8qKiovIDg2MjI6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgZ2xvYmFsVGhpcyA9IF9fd2VicGFja19yZXF1aXJlX18oNDU3Nik7CnZhciBpc0NhbGxhYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OTAxKTsKCnZhciBXZWFrTWFwID0gZ2xvYmFsVGhpcy5XZWFrTWFwOwoKbW9kdWxlLmV4cG9ydHMgPSBpc0NhbGxhYmxlKFdlYWtNYXApICYmIC9uYXRpdmUgY29kZS8udGVzdChTdHJpbmcoV2Vha01hcCkpOwoKCi8qKiovIH0pLAoKLyoqKi8gODY0NjoKLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCnZhciBjYWxsID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NTY1KTsKdmFyIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NTUxKTsKdmFyIGdldEl0ZXJhdG9yRGlyZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNzY3KTsKdmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NTEpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqLCBzdHJpbmdIYW5kbGluZykgewogIGlmICghc3RyaW5nSGFuZGxpbmcgfHwgdHlwZW9mIG9iaiAhPT0gJ3N0cmluZycpIGFuT2JqZWN0KG9iaik7CiAgdmFyIG1ldGhvZCA9IGdldEl0ZXJhdG9yTWV0aG9kKG9iaik7CiAgcmV0dXJuIGdldEl0ZXJhdG9yRGlyZWN0KGFuT2JqZWN0KG1ldGhvZCAhPT0gdW5kZWZpbmVkID8gY2FsbChtZXRob2QsIG9iaikgOiBvYmopKTsKfTsKCgovKioqLyB9KSwKCi8qKiovIDg2ODY6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgREVTQ1JJUFRPUlMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM3MjQpOwp2YXIgZmFpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkwMzkpOwoKLy8gVjggfiBDaHJvbWUgMzYtCi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMzMzQKbW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7CiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZwogIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCAncHJvdG90eXBlJywgewogICAgdmFsdWU6IDQyLAogICAgd3JpdGFibGU6IGZhbHNlCiAgfSkucHJvdG90eXBlICE9PSA0MjsKfSk7CgoKLyoqKi8gfSksCgovKioqLyA4NzIxOgovKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgREVTQ1JJUFRPUlMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM3MjQpOwp2YXIgdW5jdXJyeVRoaXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk1MDQpOwp2YXIgZGVmaW5lQnVpbHRJbkFjY2Vzc29yID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMTA2KTsKCnZhciBVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUgPSBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlOwp2YXIgZm9yRWFjaCA9IHVuY3VycnlUaGlzKFVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZS5mb3JFYWNoKTsKCi8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLnNpemVgIGdldHRlcgovLyBodHRwczovL2dpdGh1Yi5jb20vd2hhdHdnL3VybC9wdWxsLzczNAppZiAoREVTQ1JJUFRPUlMgJiYgISgnc2l6ZScgaW4gVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlKSkgewogIGRlZmluZUJ1aWx0SW5BY2Nlc3NvcihVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUsICdzaXplJywgewogICAgZ2V0OiBmdW5jdGlvbiBzaXplKCkgewogICAgICB2YXIgY291bnQgPSAwOwogICAgICBmb3JFYWNoKHRoaXMsIGZ1bmN0aW9uICgpIHsgY291bnQrKzsgfSk7CiAgICAgIHJldHVybiBjb3VudDsKICAgIH0sCiAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICBlbnVtZXJhYmxlOiB0cnVlCiAgfSk7Cn0KCgovKioqLyB9KSwKCi8qKiovIDg3Mjc6Ci8qKiovICgobW9kdWxlKSA9PiB7CgoKLy8gSUU4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzCm1vZHVsZS5leHBvcnRzID0gWwogICdjb25zdHJ1Y3RvcicsCiAgJ2hhc093blByb3BlcnR5JywKICAnaXNQcm90b3R5cGVPZicsCiAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywKICAndG9Mb2NhbGVTdHJpbmcnLAogICd0b1N0cmluZycsCiAgJ3ZhbHVlT2YnCl07CgoKLyoqKi8gfSksCgovKioqLyA4NzQ1OgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIE5BVElWRV9CSU5EID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MTYpOwoKdmFyIEZ1bmN0aW9uUHJvdG90eXBlID0gRnVuY3Rpb24ucHJvdG90eXBlOwp2YXIgYXBwbHkgPSBGdW5jdGlvblByb3RvdHlwZS5hcHBseTsKdmFyIGNhbGwgPSBGdW5jdGlvblByb3RvdHlwZS5jYWxsOwoKLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWZ1bmN0aW9uLXByb3RvdHlwZS1iaW5kLCBlcy9uby1yZWZsZWN0IC0tIHNhZmUKbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgUmVmbGVjdCA9PSAnb2JqZWN0JyAmJiBSZWZsZWN0LmFwcGx5IHx8IChOQVRJVkVfQklORCA/IGNhbGwuYmluZChhcHBseSkgOiBmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIGNhbGwuYXBwbHkoYXBwbHksIGFyZ3VtZW50cyk7Cn0pOwoKCi8qKiovIH0pLAoKLyoqKi8gODc1MDoKLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCnZhciBhU2V0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MDgwKTsKdmFyIFNldEhlbHBlcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ0MDIpOwp2YXIgc2l6ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTE3MCk7CnZhciBnZXRTZXRSZWNvcmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM3ODkpOwp2YXIgaXRlcmF0ZVNldCA9IF9fd2VicGFja19yZXF1aXJlX18oODQ2OSk7CnZhciBpdGVyYXRlU2ltcGxlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MDcpOwoKdmFyIFNldCA9IFNldEhlbHBlcnMuU2V0Owp2YXIgYWRkID0gU2V0SGVscGVycy5hZGQ7CnZhciBoYXMgPSBTZXRIZWxwZXJzLmhhczsKCi8vIGBTZXQucHJvdG90eXBlLmludGVyc2VjdGlvbmAgbWV0aG9kCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS5pbnRlcnNlY3Rpb24KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbnRlcnNlY3Rpb24ob3RoZXIpIHsKICB2YXIgTyA9IGFTZXQodGhpcyk7CiAgdmFyIG90aGVyUmVjID0gZ2V0U2V0UmVjb3JkKG90aGVyKTsKICB2YXIgcmVzdWx0ID0gbmV3IFNldCgpOwoKICBpZiAoc2l6ZShPKSA+IG90aGVyUmVjLnNpemUpIHsKICAgIGl0ZXJhdGVTaW1wbGUob3RoZXJSZWMuZ2V0SXRlcmF0b3IoKSwgZnVuY3Rpb24gKGUpIHsKICAgICAgaWYgKGhhcyhPLCBlKSkgYWRkKHJlc3VsdCwgZSk7CiAgICB9KTsKICB9IGVsc2UgewogICAgaXRlcmF0ZVNldChPLCBmdW5jdGlvbiAoZSkgewogICAgICBpZiAob3RoZXJSZWMuaW5jbHVkZXMoZSkpIGFkZChyZXN1bHQsIGUpOwogICAgfSk7CiAgfQoKICByZXR1cm4gcmVzdWx0Owp9OwoKCi8qKiovIH0pLAoKLyoqKi8gODc3MzoKLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cykgPT4gewoKCnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTsKLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZQp2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsKCi8vIE5hc2hvcm4gfiBKREs4IGJ1Zwp2YXIgTkFTSE9STl9CVUcgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgISRwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHsgMTogMiB9LCAxKTsKCi8vIGBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlYCBtZXRob2QgaW1wbGVtZW50YXRpb24KLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnByb3BlcnR5aXNlbnVtZXJhYmxlCmV4cG9ydHMuZiA9IE5BU0hPUk5fQlVHID8gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoVikgewogIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRoaXMsIFYpOwogIHJldHVybiAhIWRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci5lbnVtZXJhYmxlOwp9IDogJHByb3BlcnR5SXNFbnVtZXJhYmxlOwoKCi8qKiovIH0pLAoKLyoqKi8gODk4MToKLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NzUwKTsKCnZhciAkT2JqZWN0ID0gT2JqZWN0OwoKLy8gYFRvT2JqZWN0YCBhYnN0cmFjdCBvcGVyYXRpb24KLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b29iamVjdAptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkgewogIHJldHVybiAkT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpKTsKfTsKCgovKioqLyB9KSwKCi8qKiovIDkwMzk6Ci8qKiovICgobW9kdWxlKSA9PiB7CgoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykgewogIHRyeSB7CiAgICByZXR1cm4gISFleGVjKCk7CiAgfSBjYXRjaCAoZXJyb3IpIHsKICAgIHJldHVybiB0cnVlOwogIH0KfTsKCgovKioqLyB9KSwKCi8qKiovIDkxNDM6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgZ2xvYmFsVGhpcyA9IF9fd2VicGFja19yZXF1aXJlX18oNDU3Nik7CnZhciB1bmN1cnJ5VGhpcyA9IF9fd2VicGFja19yZXF1aXJlX18oOTUwNCk7CnZhciBhbk9iamVjdE9yVW5kZWZpbmVkID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOTcyKTsKdmFyIGFTdHJpbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM0NjMpOwp2YXIgaGFzT3duID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5Mjk3KTsKdmFyIGJhc2U2NE1hcCA9IF9fd2VicGFja19yZXF1aXJlX18oMjgwNCk7CnZhciBnZXRBbHBoYWJldE9wdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oOTQ0KTsKdmFyIG5vdERldGFjaGVkID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MTY5KTsKCnZhciBiYXNlNjRBbHBoYWJldCA9IGJhc2U2NE1hcC5jMmk7CnZhciBiYXNlNjRVcmxBbHBoYWJldCA9IGJhc2U2NE1hcC5jMmlVcmw7Cgp2YXIgU3ludGF4RXJyb3IgPSBnbG9iYWxUaGlzLlN5bnRheEVycm9yOwp2YXIgVHlwZUVycm9yID0gZ2xvYmFsVGhpcy5UeXBlRXJyb3I7CnZhciBhdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7Cgp2YXIgc2tpcEFzY2lpV2hpdGVzcGFjZSA9IGZ1bmN0aW9uIChzdHJpbmcsIGluZGV4KSB7CiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7CiAgZm9yICg7aW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHsKICAgIHZhciBjaHIgPSBhdChzdHJpbmcsIGluZGV4KTsKICAgIGlmIChjaHIgIT09ICcgJyAmJiBjaHIgIT09ICdcdCcgJiYgY2hyICE9PSAnXG4nICYmIGNociAhPT0gJ1xmJyAmJiBjaHIgIT09ICdccicpIGJyZWFrOwogIH0gcmV0dXJuIGluZGV4Owp9OwoKdmFyIGRlY29kZUJhc2U2NENodW5rID0gZnVuY3Rpb24gKGNodW5rLCBhbHBoYWJldCwgdGhyb3dPbkV4dHJhQml0cykgewogIHZhciBjaHVua0xlbmd0aCA9IGNodW5rLmxlbmd0aDsKCiAgaWYgKGNodW5rTGVuZ3RoIDwgNCkgewogICAgY2h1bmsgKz0gY2h1bmtMZW5ndGggPT09IDIgPyAnQUEnIDogJ0EnOwogIH0KCiAgdmFyIHRyaXBsZXQgPSAoYWxwaGFiZXRbYXQoY2h1bmssIDApXSA8PCAxOCkKICAgICsgKGFscGhhYmV0W2F0KGNodW5rLCAxKV0gPDwgMTIpCiAgICArIChhbHBoYWJldFthdChjaHVuaywgMildIDw8IDYpCiAgICArIGFscGhhYmV0W2F0KGNodW5rLCAzKV07CgogIHZhciBjaHVua0J5dGVzID0gWwogICAgKHRyaXBsZXQgPj4gMTYpICYgMjU1LAogICAgKHRyaXBsZXQgPj4gOCkgJiAyNTUsCiAgICB0cmlwbGV0ICYgMjU1CiAgXTsKCiAgaWYgKGNodW5rTGVuZ3RoID09PSAyKSB7CiAgICBpZiAodGhyb3dPbkV4dHJhQml0cyAmJiBjaHVua0J5dGVzWzFdICE9PSAwKSB7CiAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcignRXh0cmEgYml0cycpOwogICAgfQogICAgcmV0dXJuIFtjaHVua0J5dGVzWzBdXTsKICB9CgogIGlmIChjaHVua0xlbmd0aCA9PT0gMykgewogICAgaWYgKHRocm93T25FeHRyYUJpdHMgJiYgY2h1bmtCeXRlc1syXSAhPT0gMCkgewogICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ0V4dHJhIGJpdHMnKTsKICAgIH0KICAgIHJldHVybiBbY2h1bmtCeXRlc1swXSwgY2h1bmtCeXRlc1sxXV07CiAgfQoKICByZXR1cm4gY2h1bmtCeXRlczsKfTsKCnZhciB3cml0ZUJ5dGVzID0gZnVuY3Rpb24gKGJ5dGVzLCBlbGVtZW50cywgd3JpdHRlbikgewogIHZhciBlbGVtZW50c0xlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDsKICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgZWxlbWVudHNMZW5ndGg7IGluZGV4KyspIHsKICAgIGJ5dGVzW3dyaXR0ZW4gKyBpbmRleF0gPSBlbGVtZW50c1tpbmRleF07CiAgfQogIHJldHVybiB3cml0dGVuICsgZWxlbWVudHNMZW5ndGg7Cn07CgovKiBlc2xpbnQtZGlzYWJsZSBtYXgtc3RhdGVtZW50cywgbWF4LWRlcHRoIC0tIFRPRE8gKi8KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc3RyaW5nLCBvcHRpb25zLCBpbnRvLCBtYXhMZW5ndGgpIHsKICBhU3RyaW5nKHN0cmluZyk7CiAgYW5PYmplY3RPclVuZGVmaW5lZChvcHRpb25zKTsKICB2YXIgYWxwaGFiZXQgPSBnZXRBbHBoYWJldE9wdGlvbihvcHRpb25zKSA9PT0gJ2Jhc2U2NCcgPyBiYXNlNjRBbHBoYWJldCA6IGJhc2U2NFVybEFscGhhYmV0OwogIHZhciBsYXN0Q2h1bmtIYW5kbGluZyA9IG9wdGlvbnMgPyBvcHRpb25zLmxhc3RDaHVua0hhbmRsaW5nIDogdW5kZWZpbmVkOwoKICBpZiAobGFzdENodW5rSGFuZGxpbmcgPT09IHVuZGVmaW5lZCkgbGFzdENodW5rSGFuZGxpbmcgPSAnbG9vc2UnOwoKICBpZiAobGFzdENodW5rSGFuZGxpbmcgIT09ICdsb29zZScgJiYgbGFzdENodW5rSGFuZGxpbmcgIT09ICdzdHJpY3QnICYmIGxhc3RDaHVua0hhbmRsaW5nICE9PSAnc3RvcC1iZWZvcmUtcGFydGlhbCcpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0luY29ycmVjdCBgbGFzdENodW5rSGFuZGxpbmdgIG9wdGlvbicpOwogIH0KCiAgaWYgKGludG8pIG5vdERldGFjaGVkKGludG8uYnVmZmVyKTsKCiAgdmFyIHN0cmluZ0xlbmd0aCA9IHN0cmluZy5sZW5ndGg7CiAgdmFyIGJ5dGVzID0gaW50byB8fCBbXTsKICB2YXIgd3JpdHRlbiA9IDA7CiAgdmFyIHJlYWQgPSAwOwogIHZhciBjaHVuayA9ICcnOwogIHZhciBpbmRleCA9IDA7CgogIGlmIChtYXhMZW5ndGgpIHdoaWxlICh0cnVlKSB7CiAgICBpbmRleCA9IHNraXBBc2NpaVdoaXRlc3BhY2Uoc3RyaW5nLCBpbmRleCk7CiAgICBpZiAoaW5kZXggPT09IHN0cmluZ0xlbmd0aCkgewogICAgICBpZiAoY2h1bmsubGVuZ3RoID4gMCkgewogICAgICAgIGlmIChsYXN0Q2h1bmtIYW5kbGluZyA9PT0gJ3N0b3AtYmVmb3JlLXBhcnRpYWwnKSB7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgICAgaWYgKGxhc3RDaHVua0hhbmRsaW5nID09PSAnbG9vc2UnKSB7CiAgICAgICAgICBpZiAoY2h1bmsubGVuZ3RoID09PSAxKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcignTWFsZm9ybWVkIHBhZGRpbmc6IGV4YWN0bHkgb25lIGFkZGl0aW9uYWwgY2hhcmFjdGVyJyk7CiAgICAgICAgICB9CiAgICAgICAgICB3cml0dGVuID0gd3JpdGVCeXRlcyhieXRlcywgZGVjb2RlQmFzZTY0Q2h1bmsoY2h1bmssIGFscGhhYmV0LCBmYWxzZSksIHdyaXR0ZW4pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ01pc3NpbmcgcGFkZGluZycpOwogICAgICAgIH0KICAgICAgfQogICAgICByZWFkID0gc3RyaW5nTGVuZ3RoOwogICAgICBicmVhazsKICAgIH0KICAgIHZhciBjaHIgPSBhdChzdHJpbmcsIGluZGV4KTsKICAgICsraW5kZXg7CiAgICBpZiAoY2hyID09PSAnPScpIHsKICAgICAgaWYgKGNodW5rLmxlbmd0aCA8IDIpIHsKICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ1BhZGRpbmcgaXMgdG9vIGVhcmx5Jyk7CiAgICAgIH0KICAgICAgaW5kZXggPSBza2lwQXNjaWlXaGl0ZXNwYWNlKHN0cmluZywgaW5kZXgpOwogICAgICBpZiAoY2h1bmsubGVuZ3RoID09PSAyKSB7CiAgICAgICAgaWYgKGluZGV4ID09PSBzdHJpbmdMZW5ndGgpIHsKICAgICAgICAgIGlmIChsYXN0Q2h1bmtIYW5kbGluZyA9PT0gJ3N0b3AtYmVmb3JlLXBhcnRpYWwnKSB7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdNYWxmb3JtZWQgcGFkZGluZzogb25seSBvbmUgPScpOwogICAgICAgIH0KICAgICAgICBpZiAoYXQoc3RyaW5nLCBpbmRleCkgPT09ICc9JykgewogICAgICAgICAgKytpbmRleDsKICAgICAgICAgIGluZGV4ID0gc2tpcEFzY2lpV2hpdGVzcGFjZShzdHJpbmcsIGluZGV4KTsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKGluZGV4IDwgc3RyaW5nTGVuZ3RoKSB7CiAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdVbmV4cGVjdGVkIGNoYXJhY3RlciBhZnRlciBwYWRkaW5nJyk7CiAgICAgIH0KICAgICAgd3JpdHRlbiA9IHdyaXRlQnl0ZXMoYnl0ZXMsIGRlY29kZUJhc2U2NENodW5rKGNodW5rLCBhbHBoYWJldCwgbGFzdENodW5rSGFuZGxpbmcgPT09ICdzdHJpY3QnKSwgd3JpdHRlbik7CiAgICAgIHJlYWQgPSBzdHJpbmdMZW5ndGg7CiAgICAgIGJyZWFrOwogICAgfQogICAgaWYgKCFoYXNPd24oYWxwaGFiZXQsIGNocikpIHsKICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdVbmV4cGVjdGVkIGNoYXJhY3RlcicpOwogICAgfQogICAgdmFyIHJlbWFpbmluZ0J5dGVzID0gbWF4TGVuZ3RoIC0gd3JpdHRlbjsKICAgIGlmIChyZW1haW5pbmdCeXRlcyA9PT0gMSAmJiBjaHVuay5sZW5ndGggPT09IDIgfHwgcmVtYWluaW5nQnl0ZXMgPT09IDIgJiYgY2h1bmsubGVuZ3RoID09PSAzKSB7CiAgICAgIC8vIHNwZWNpYWwgY2FzZTogd2UgY2FuIGZpdCBleGFjdGx5IHRoZSBudW1iZXIgb2YgYnl0ZXMgY3VycmVudGx5IHJlcHJlc2VudGVkIGJ5IGNodW5rLCBzbyB3ZSB3ZXJlIGp1c3QgY2hlY2tpbmcgZm9yIGA9YAogICAgICBicmVhazsKICAgIH0KCiAgICBjaHVuayArPSBjaHI7CiAgICBpZiAoY2h1bmsubGVuZ3RoID09PSA0KSB7CiAgICAgIHdyaXR0ZW4gPSB3cml0ZUJ5dGVzKGJ5dGVzLCBkZWNvZGVCYXNlNjRDaHVuayhjaHVuaywgYWxwaGFiZXQsIGZhbHNlKSwgd3JpdHRlbik7CiAgICAgIGNodW5rID0gJyc7CiAgICAgIHJlYWQgPSBpbmRleDsKICAgICAgaWYgKHdyaXR0ZW4gPT09IG1heExlbmd0aCkgewogICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CiAgfQoKICByZXR1cm4geyBieXRlczogYnl0ZXMsIHJlYWQ6IHJlYWQsIHdyaXR0ZW46IHdyaXR0ZW4gfTsKfTsKCgovKioqLyB9KSwKCi8qKiovIDkyODY6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgU2V0SGVscGVycyA9IF9fd2VicGFja19yZXF1aXJlX18oNDQwMik7CnZhciBpdGVyYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NDY5KTsKCnZhciBTZXQgPSBTZXRIZWxwZXJzLlNldDsKdmFyIGFkZCA9IFNldEhlbHBlcnMuYWRkOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc2V0KSB7CiAgdmFyIHJlc3VsdCA9IG5ldyBTZXQoKTsKICBpdGVyYXRlKHNldCwgZnVuY3Rpb24gKGl0KSB7CiAgICBhZGQocmVzdWx0LCBpdCk7CiAgfSk7CiAgcmV0dXJuIHJlc3VsdDsKfTsKCgovKioqLyB9KSwKCi8qKiovIDkyOTc6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgdW5jdXJyeVRoaXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk1MDQpOwp2YXIgdG9PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg5ODEpOwoKdmFyIGhhc093blByb3BlcnR5ID0gdW5jdXJyeVRoaXMoe30uaGFzT3duUHJvcGVydHkpOwoKLy8gYEhhc093blByb3BlcnR5YCBhYnN0cmFjdCBvcGVyYXRpb24KLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1oYXNvd25wcm9wZXJ0eQovLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWhhc293biAtLSBzYWZlCm1vZHVsZS5leHBvcnRzID0gT2JqZWN0Lmhhc093biB8fCBmdW5jdGlvbiBoYXNPd24oaXQsIGtleSkgewogIHJldHVybiBoYXNPd25Qcm9wZXJ0eSh0b09iamVjdChpdCksIGtleSk7Cn07CgoKLyoqKi8gfSksCgovKioqLyA5MzA2OgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIGlzQ2FsbGFibGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5MDEpOwp2YXIgdHJ5VG9TdHJpbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY4MjMpOwoKdmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7CgovLyBgQXNzZXJ0OiBJc0NhbGxhYmxlKGFyZ3VtZW50KSBpcyB0cnVlYAptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkgewogIGlmIChpc0NhbGxhYmxlKGFyZ3VtZW50KSkgcmV0dXJuIGFyZ3VtZW50OwogIHRocm93IG5ldyAkVHlwZUVycm9yKHRyeVRvU3RyaW5nKGFyZ3VtZW50KSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTsKfTsKCgovKioqLyB9KSwKCi8qKiovIDk0Mjk6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgZ2xvYmFsVGhpcyA9IF9fd2VicGFja19yZXF1aXJlX18oNDU3Nik7CnZhciBJU19OT0RFID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MTkzKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHsKICBpZiAoSVNfTk9ERSkgewogICAgdHJ5IHsKICAgICAgcmV0dXJuIGdsb2JhbFRoaXMucHJvY2Vzcy5nZXRCdWlsdGluTW9kdWxlKG5hbWUpOwogICAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfQogICAgdHJ5IHsKICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jIC0tIHNhZmUKICAgICAgcmV0dXJuIEZ1bmN0aW9uKCdyZXR1cm4gcmVxdWlyZSgiJyArIG5hbWUgKyAnIiknKSgpOwogICAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfQogIH0KfTsKCgovKioqLyB9KSwKCi8qKiovIDk0MzI6Ci8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCi8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgCl9fd2VicGFja19yZXF1aXJlX18oNTIxMyk7CgoKLyoqKi8gfSksCgovKioqLyA5NDMzOgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIGdsb2JhbFRoaXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ1NzYpOwoKLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSBzYWZlCnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHsKICB0cnkgewogICAgZGVmaW5lUHJvcGVydHkoZ2xvYmFsVGhpcywga2V5LCB7IHZhbHVlOiB2YWx1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsKICB9IGNhdGNoIChlcnJvcikgewogICAgZ2xvYmFsVGhpc1trZXldID0gdmFsdWU7CiAgfSByZXR1cm4gdmFsdWU7Cn07CgoKLyoqKi8gfSksCgovKioqLyA5NDYyOgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIGNhbGwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk1NjUpOwp2YXIgY3JlYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMzYwKTsKdmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IF9fd2VicGFja19yZXF1aXJlX18oNjY5OSk7CnZhciBkZWZpbmVCdWlsdElucyA9IF9fd2VicGFja19yZXF1aXJlX18oNjI3OSk7CnZhciB3ZWxsS25vd25TeW1ib2wgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgyMjcpOwp2YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTE4MSk7CnZhciBnZXRNZXRob2QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU5NjYpOwp2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSAoX193ZWJwYWNrX3JlcXVpcmVfXyg3NjU3KS5JdGVyYXRvclByb3RvdHlwZSk7CnZhciBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNTI5KTsKdmFyIGl0ZXJhdG9yQ2xvc2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk1MzkpOwp2YXIgaXRlcmF0b3JDbG9zZUFsbCA9IF9fd2VicGFja19yZXF1aXJlX18oMTM4NSk7Cgp2YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTsKdmFyIElURVJBVE9SX0hFTFBFUiA9ICdJdGVyYXRvckhlbHBlcic7CnZhciBXUkFQX0ZPUl9WQUxJRF9JVEVSQVRPUiA9ICdXcmFwRm9yVmFsaWRJdGVyYXRvcic7CnZhciBOT1JNQUwgPSAnbm9ybWFsJzsKdmFyIFRIUk9XID0gJ3Rocm93JzsKdmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDsKCnZhciBjcmVhdGVJdGVyYXRvclByb3h5UHJvdG90eXBlID0gZnVuY3Rpb24gKElTX0lURVJBVE9SKSB7CiAgdmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihJU19JVEVSQVRPUiA/IFdSQVBfRk9SX1ZBTElEX0lURVJBVE9SIDogSVRFUkFUT1JfSEVMUEVSKTsKCiAgcmV0dXJuIGRlZmluZUJ1aWx0SW5zKGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSksIHsKICAgIG5leHQ6IGZ1bmN0aW9uIG5leHQoKSB7CiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7CiAgICAgIC8vIGZvciBzaW1wbGlmaWNhdGlvbjoKICAgICAgLy8gICBmb3IgYCVXcmFwRm9yVmFsaWRJdGVyYXRvclByb3RvdHlwZSUubmV4dGAgb3Igd2l0aCBgc3RhdGUucmV0dXJuSGFuZGxlclJlc3VsdGAgb3VyIGBuZXh0SGFuZGxlcmAgcmV0dXJucyBgSXRlclJlc3VsdE9iamVjdGAKICAgICAgLy8gICBmb3IgYCVJdGVyYXRvckhlbHBlclByb3RvdHlwZSUubmV4dGAgLSBqdXN0IGEgdmFsdWUKICAgICAgaWYgKElTX0lURVJBVE9SKSByZXR1cm4gc3RhdGUubmV4dEhhbmRsZXIoKTsKICAgICAgaWYgKHN0YXRlLmRvbmUpIHJldHVybiBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KHVuZGVmaW5lZCwgdHJ1ZSk7CiAgICAgIHRyeSB7CiAgICAgICAgdmFyIHJlc3VsdCA9IHN0YXRlLm5leHRIYW5kbGVyKCk7CiAgICAgICAgcmV0dXJuIHN0YXRlLnJldHVybkhhbmRsZXJSZXN1bHQgPyByZXN1bHQgOiBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KHJlc3VsdCwgc3RhdGUuZG9uZSk7CiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgc3RhdGUuZG9uZSA9IHRydWU7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0KICAgIH0sCiAgICAncmV0dXJuJzogZnVuY3Rpb24gKCkgewogICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpOwogICAgICB2YXIgaXRlcmF0b3IgPSBzdGF0ZS5pdGVyYXRvcjsKICAgICAgc3RhdGUuZG9uZSA9IHRydWU7CiAgICAgIGlmIChJU19JVEVSQVRPUikgewogICAgICAgIHZhciByZXR1cm5NZXRob2QgPSBnZXRNZXRob2QoaXRlcmF0b3IsICdyZXR1cm4nKTsKICAgICAgICByZXR1cm4gcmV0dXJuTWV0aG9kID8gY2FsbChyZXR1cm5NZXRob2QsIGl0ZXJhdG9yKSA6IGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QodW5kZWZpbmVkLCB0cnVlKTsKICAgICAgfQogICAgICBpZiAoc3RhdGUuaW5uZXIpIHRyeSB7CiAgICAgICAgaXRlcmF0b3JDbG9zZShzdGF0ZS5pbm5lci5pdGVyYXRvciwgTk9STUFMKTsKICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICByZXR1cm4gaXRlcmF0b3JDbG9zZShpdGVyYXRvciwgVEhST1csIGVycm9yKTsKICAgICAgfQogICAgICBpZiAoc3RhdGUub3Blbkl0ZXJzKSB0cnkgewogICAgICAgIGl0ZXJhdG9yQ2xvc2VBbGwoc3RhdGUub3Blbkl0ZXJzLCBOT1JNQUwpOwogICAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgIHJldHVybiBpdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBUSFJPVywgZXJyb3IpOwogICAgICB9CiAgICAgIGlmIChpdGVyYXRvcikgaXRlcmF0b3JDbG9zZShpdGVyYXRvciwgTk9STUFMKTsKICAgICAgcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QodW5kZWZpbmVkLCB0cnVlKTsKICAgIH0KICB9KTsKfTsKCnZhciBXcmFwRm9yVmFsaWRJdGVyYXRvclByb3RvdHlwZSA9IGNyZWF0ZUl0ZXJhdG9yUHJveHlQcm90b3R5cGUodHJ1ZSk7CnZhciBJdGVyYXRvckhlbHBlclByb3RvdHlwZSA9IGNyZWF0ZUl0ZXJhdG9yUHJveHlQcm90b3R5cGUoZmFsc2UpOwoKY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KEl0ZXJhdG9ySGVscGVyUHJvdG90eXBlLCBUT19TVFJJTkdfVEFHLCAnSXRlcmF0b3IgSGVscGVyJyk7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuZXh0SGFuZGxlciwgSVNfSVRFUkFUT1IsIFJFVFVSTl9IQU5ETEVSX1JFU1VMVCkgewogIHZhciBJdGVyYXRvclByb3h5ID0gZnVuY3Rpb24gSXRlcmF0b3IocmVjb3JkLCBzdGF0ZSkgewogICAgaWYgKHN0YXRlKSB7CiAgICAgIHN0YXRlLml0ZXJhdG9yID0gcmVjb3JkLml0ZXJhdG9yOwogICAgICBzdGF0ZS5uZXh0ID0gcmVjb3JkLm5leHQ7CiAgICB9IGVsc2Ugc3RhdGUgPSByZWNvcmQ7CiAgICBzdGF0ZS50eXBlID0gSVNfSVRFUkFUT1IgPyBXUkFQX0ZPUl9WQUxJRF9JVEVSQVRPUiA6IElURVJBVE9SX0hFTFBFUjsKICAgIHN0YXRlLnJldHVybkhhbmRsZXJSZXN1bHQgPSAhIVJFVFVSTl9IQU5ETEVSX1JFU1VMVDsKICAgIHN0YXRlLm5leHRIYW5kbGVyID0gbmV4dEhhbmRsZXI7CiAgICBzdGF0ZS5jb3VudGVyID0gMDsKICAgIHN0YXRlLmRvbmUgPSBmYWxzZTsKICAgIHNldEludGVybmFsU3RhdGUodGhpcywgc3RhdGUpOwogIH07CgogIEl0ZXJhdG9yUHJveHkucHJvdG90eXBlID0gSVNfSVRFUkFUT1IgPyBXcmFwRm9yVmFsaWRJdGVyYXRvclByb3RvdHlwZSA6IEl0ZXJhdG9ySGVscGVyUHJvdG90eXBlOwoKICByZXR1cm4gSXRlcmF0b3JQcm94eTsKfTsKCgovKioqLyB9KSwKCi8qKiovIDk0Nzk6Ci8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCnZhciBERVNDUklQVE9SUyA9IF9fd2VicGFja19yZXF1aXJlX18oMzcyNCk7CnZhciBkZWZpbmVCdWlsdEluQWNjZXNzb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxMDYpOwp2YXIgcmVnRXhwRmxhZ3NEZXRlY3Rpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc1OTQpOwp2YXIgcmVnRXhwRmxhZ3NHZXR0ZXJJbXBsZW1lbnRhdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oNzk3OSk7CgovLyBgUmVnRXhwLnByb3RvdHlwZS5mbGFnc2AgZ2V0dGVyCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0LXJlZ2V4cC5wcm90b3R5cGUuZmxhZ3MKaWYgKERFU0NSSVBUT1JTICYmICFyZWdFeHBGbGFnc0RldGVjdGlvbi5jb3JyZWN0KSB7CiAgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKFJlZ0V4cC5wcm90b3R5cGUsICdmbGFncycsIHsKICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgIGdldDogcmVnRXhwRmxhZ3NHZXR0ZXJJbXBsZW1lbnRhdGlvbgogIH0pOwoKICByZWdFeHBGbGFnc0RldGVjdGlvbi5jb3JyZWN0ID0gdHJ1ZTsKfQoKCi8qKiovIH0pLAoKLyoqKi8gOTQ4NjoKLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyICQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY1MTgpOwp2YXIgZ2xvYmFsVGhpcyA9IF9fd2VicGFja19yZXF1aXJlX18oNDU3Nik7CnZhciB1bmN1cnJ5VGhpcyA9IF9fd2VicGFja19yZXF1aXJlX18oOTUwNCk7CnZhciBhbk9iamVjdE9yVW5kZWZpbmVkID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOTcyKTsKdmFyIGFuVWludDhBcnJheSA9IF9fd2VicGFja19yZXF1aXJlX18oNDE1NCk7CnZhciBub3REZXRhY2hlZCA9IF9fd2VicGFja19yZXF1aXJlX18oNTE2OSk7CnZhciBiYXNlNjRNYXAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4MDQpOwp2YXIgZ2V0QWxwaGFiZXRPcHRpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk0NCk7Cgp2YXIgYmFzZTY0QWxwaGFiZXQgPSBiYXNlNjRNYXAuaTJjOwp2YXIgYmFzZTY0VXJsQWxwaGFiZXQgPSBiYXNlNjRNYXAuaTJjVXJsOwoKdmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7Cgp2YXIgVWludDhBcnJheSA9IGdsb2JhbFRoaXMuVWludDhBcnJheTsKCnZhciBJTkNPUlJFQ1RfQkVIQVZJT1JfT1JfRE9FU05UX0VYSVNUUyA9ICFVaW50OEFycmF5IHx8ICFVaW50OEFycmF5LnByb3RvdHlwZS50b0Jhc2U2NCB8fCAhZnVuY3Rpb24gKCkgewogIHRyeSB7CiAgICB2YXIgdGFyZ2V0ID0gbmV3IFVpbnQ4QXJyYXkoKTsKICAgIHRhcmdldC50b0Jhc2U2NChudWxsKTsKICB9IGNhdGNoIChlcnJvcikgewogICAgcmV0dXJuIHRydWU7CiAgfQp9KCk7CgovLyBgVWludDhBcnJheS5wcm90b3R5cGUudG9CYXNlNjRgIG1ldGhvZAovLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1hcnJheWJ1ZmZlci1iYXNlNjQKaWYgKFVpbnQ4QXJyYXkpICQoeyB0YXJnZXQ6ICdVaW50OEFycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogSU5DT1JSRUNUX0JFSEFWSU9SX09SX0RPRVNOVF9FWElTVFMgfSwgewogIHRvQmFzZTY0OiBmdW5jdGlvbiB0b0Jhc2U2NCgvKiBvcHRpb25zICovKSB7CiAgICB2YXIgYXJyYXkgPSBhblVpbnQ4QXJyYXkodGhpcyk7CiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPyBhbk9iamVjdE9yVW5kZWZpbmVkKGFyZ3VtZW50c1swXSkgOiB1bmRlZmluZWQ7CiAgICB2YXIgYWxwaGFiZXQgPSBnZXRBbHBoYWJldE9wdGlvbihvcHRpb25zKSA9PT0gJ2Jhc2U2NCcgPyBiYXNlNjRBbHBoYWJldCA6IGJhc2U2NFVybEFscGhhYmV0OwogICAgdmFyIG9taXRQYWRkaW5nID0gISFvcHRpb25zICYmICEhb3B0aW9ucy5vbWl0UGFkZGluZzsKICAgIG5vdERldGFjaGVkKHRoaXMuYnVmZmVyKTsKCiAgICB2YXIgcmVzdWx0ID0gJyc7CiAgICB2YXIgaSA9IDA7CiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoOwogICAgdmFyIHRyaXBsZXQ7CgogICAgdmFyIGF0ID0gZnVuY3Rpb24gKHNoaWZ0KSB7CiAgICAgIHJldHVybiBjaGFyQXQoYWxwaGFiZXQsICh0cmlwbGV0ID4+ICg2ICogc2hpZnQpKSAmIDYzKTsKICAgIH07CgogICAgZm9yICg7IGkgKyAyIDwgbGVuZ3RoOyBpICs9IDMpIHsKICAgICAgdHJpcGxldCA9IChhcnJheVtpXSA8PCAxNikgKyAoYXJyYXlbaSArIDFdIDw8IDgpICsgYXJyYXlbaSArIDJdOwogICAgICByZXN1bHQgKz0gYXQoMykgKyBhdCgyKSArIGF0KDEpICsgYXQoMCk7CiAgICB9CiAgICBpZiAoaSArIDIgPT09IGxlbmd0aCkgewogICAgICB0cmlwbGV0ID0gKGFycmF5W2ldIDw8IDE2KSArIChhcnJheVtpICsgMV0gPDwgOCk7CiAgICAgIHJlc3VsdCArPSBhdCgzKSArIGF0KDIpICsgYXQoMSkgKyAob21pdFBhZGRpbmcgPyAnJyA6ICc9Jyk7CiAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHsKICAgICAgdHJpcGxldCA9IGFycmF5W2ldIDw8IDE2OwogICAgICByZXN1bHQgKz0gYXQoMykgKyBhdCgyKSArIChvbWl0UGFkZGluZyA/ICcnIDogJz09Jyk7CiAgICB9CgogICAgcmV0dXJuIHJlc3VsdDsKICB9Cn0pOwoKCi8qKiovIH0pLAoKLyoqKi8gOTUwNDoKLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCnZhciBOQVRJVkVfQklORCA9IF9fd2VicGFja19yZXF1aXJlX18oNjE2KTsKCnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTsKdmFyIGNhbGwgPSBGdW5jdGlvblByb3RvdHlwZS5jYWxsOwovLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tZnVuY3Rpb24tcHJvdG90eXBlLWJpbmQgLS0gc2FmZQp2YXIgdW5jdXJyeVRoaXNXaXRoQmluZCA9IE5BVElWRV9CSU5EICYmIEZ1bmN0aW9uUHJvdG90eXBlLmJpbmQuYmluZChjYWxsLCBjYWxsKTsKCm1vZHVsZS5leHBvcnRzID0gTkFUSVZFX0JJTkQgPyB1bmN1cnJ5VGhpc1dpdGhCaW5kIDogZnVuY3Rpb24gKGZuKSB7CiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBjYWxsLmFwcGx5KGZuLCBhcmd1bWVudHMpOwogIH07Cn07CgoKLyoqKi8gfSksCgovKioqLyA5NTE5OgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIGdsb2JhbFRoaXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ1NzYpOwp2YXIgdXNlckFnZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyODM5KTsKCnZhciBwcm9jZXNzID0gZ2xvYmFsVGhpcy5wcm9jZXNzOwp2YXIgRGVubyA9IGdsb2JhbFRoaXMuRGVubzsKdmFyIHZlcnNpb25zID0gcHJvY2VzcyAmJiBwcm9jZXNzLnZlcnNpb25zIHx8IERlbm8gJiYgRGVuby52ZXJzaW9uOwp2YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52ODsKdmFyIG1hdGNoLCB2ZXJzaW9uOwoKaWYgKHY4KSB7CiAgbWF0Y2ggPSB2OC5zcGxpdCgnLicpOwogIC8vIGluIG9sZCBDaHJvbWUsIHZlcnNpb25zIG9mIFY4IGlzbid0IFY4ID0gQ2hyb21lIC8gMTAKICAvLyBidXQgdGhlaXIgY29ycmVjdCB2ZXJzaW9ucyBhcmUgbm90IGludGVyZXN0aW5nIGZvciB1cwogIHZlcnNpb24gPSBtYXRjaFswXSA+IDAgJiYgbWF0Y2hbMF0gPCA0ID8gMSA6ICsobWF0Y2hbMF0gKyBtYXRjaFsxXSk7Cn0KCi8vIEJyb3dzZXJGUyBOb2RlSlMgYHByb2Nlc3NgIHBvbHlmaWxsIGluY29ycmVjdGx5IHNldCBgLnY4YCB0byBgMC4wYAovLyBzbyBjaGVjayBgdXNlckFnZW50YCBldmVuIGlmIGAudjhgIGV4aXN0cywgYnV0IDAKaWYgKCF2ZXJzaW9uICYmIHVzZXJBZ2VudCkgewogIG1hdGNoID0gdXNlckFnZW50Lm1hdGNoKC9FZGdlXC8oXGQrKS8pOwogIGlmICghbWF0Y2ggfHwgbWF0Y2hbMV0gPj0gNzQpIHsKICAgIG1hdGNoID0gdXNlckFnZW50Lm1hdGNoKC9DaHJvbWVcLyhcZCspLyk7CiAgICBpZiAobWF0Y2gpIHZlcnNpb24gPSArbWF0Y2hbMV07CiAgfQp9Cgptb2R1bGUuZXhwb3J0cyA9IHZlcnNpb247CgoKLyoqKi8gfSksCgovKioqLyA5NTM5OgovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKdmFyIGNhbGwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk1NjUpOwp2YXIgYW5PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg1NTEpOwp2YXIgZ2V0TWV0aG9kID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1OTY2KTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBraW5kLCB2YWx1ZSkgewogIHZhciBpbm5lclJlc3VsdCwgaW5uZXJFcnJvcjsKICBhbk9iamVjdChpdGVyYXRvcik7CiAgdHJ5IHsKICAgIGlubmVyUmVzdWx0ID0gZ2V0TWV0aG9kKGl0ZXJhdG9yLCAncmV0dXJuJyk7CiAgICBpZiAoIWlubmVyUmVzdWx0KSB7CiAgICAgIGlmIChraW5kID09PSAndGhyb3cnKSB0aHJvdyB2YWx1ZTsKICAgICAgcmV0dXJuIHZhbHVlOwogICAgfQogICAgaW5uZXJSZXN1bHQgPSBjYWxsKGlubmVyUmVzdWx0LCBpdGVyYXRvcik7CiAgfSBjYXRjaCAoZXJyb3IpIHsKICAgIGlubmVyRXJyb3IgPSB0cnVlOwogICAgaW5uZXJSZXN1bHQgPSBlcnJvcjsKICB9CiAgaWYgKGtpbmQgPT09ICd0aHJvdycpIHRocm93IHZhbHVlOwogIGlmIChpbm5lckVycm9yKSB0aHJvdyBpbm5lclJlc3VsdDsKICBhbk9iamVjdChpbm5lclJlc3VsdCk7CiAgcmV0dXJuIHZhbHVlOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gOTU2NToKLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCnZhciBOQVRJVkVfQklORCA9IF9fd2VicGFja19yZXF1aXJlX18oNjE2KTsKCnZhciBjYWxsID0gRnVuY3Rpb24ucHJvdG90eXBlLmNhbGw7Ci8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1mdW5jdGlvbi1wcm90b3R5cGUtYmluZCAtLSBzYWZlCm1vZHVsZS5leHBvcnRzID0gTkFUSVZFX0JJTkQgPyBjYWxsLmJpbmQoY2FsbCkgOiBmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIGNhbGwuYXBwbHkoY2FsbCwgYXJndW1lbnRzKTsKfTsKCgovKioqLyB9KSwKCi8qKiovIDk1Nzc6Ci8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCnZhciBhcnJheVdpdGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk5MjgpOwp2YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IF9fd2VicGFja19yZXF1aXJlX18oNDY0NCk7CnZhciBpc0JpZ0ludEFycmF5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTA4KTsKdmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyOTEpOwp2YXIgdG9CaWdJbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU4NTQpOwoKdmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTsKdmFyIGdldFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IEFycmF5QnVmZmVyVmlld0NvcmUuZ2V0VHlwZWRBcnJheUNvbnN0cnVjdG9yOwp2YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDsKCnZhciBQUk9QRVJfT1JERVIgPSBmdW5jdGlvbiAoKSB7CiAgdHJ5IHsKICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsLCBlcy9uby10eXBlZC1hcnJheXMsIGVzL25vLWFycmF5LXByb3RvdHlwZS13aXRoIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nCiAgICBuZXcgSW50OEFycmF5KDEpWyd3aXRoJ10oMiwgeyB2YWx1ZU9mOiBmdW5jdGlvbiAoKSB7IHRocm93IDg7IH0gfSk7CiAgfSBjYXRjaCAoZXJyb3IpIHsKICAgIC8vIHNvbWUgZWFybHkgaW1wbGVtZW50YXRpb25zLCBsaWtlIFdlYktpdCwgZG9lcyBub3QgZm9sbG93IHRoZSBmaW5hbCBzZW1hbnRpYwogICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtY2hhbmdlLWFycmF5LWJ5LWNvcHkvcHVsbC84NgogICAgcmV0dXJuIGVycm9yID09PSA4OwogIH0KfSgpOwoKLy8gQnVnIGluIFdlYktpdC4gSXQgc2hvdWxkIHRydW5jYXRlIGEgbmVnYXRpdmUgZnJhY3Rpb25hbCBpbmRleCB0byB6ZXJvLCBidXQgaW5zdGVhZCB0aHJvd3MgYW4gZXJyb3IKdmFyIFRIUk9XX09OX05FR0FUSVZFX0ZSQUNUSU9OQUxfSU5ERVggPSBQUk9QRVJfT1JERVIgJiYgZnVuY3Rpb24gKCkgewogIHRyeSB7CiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tdHlwZWQtYXJyYXlzLCBlcy9uby1hcnJheS1wcm90b3R5cGUtd2l0aCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZwogICAgbmV3IEludDhBcnJheSgxKVsnd2l0aCddKC0wLjUsIDEpOwogIH0gY2F0Y2ggKGVycm9yKSB7CiAgICByZXR1cm4gdHJ1ZTsKICB9Cn0oKTsKCi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLndpdGhgIG1ldGhvZAovLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUud2l0aApleHBvcnRUeXBlZEFycmF5TWV0aG9kKCd3aXRoJywgeyAnd2l0aCc6IGZ1bmN0aW9uIChpbmRleCwgdmFsdWUpIHsKICB2YXIgTyA9IGFUeXBlZEFycmF5KHRoaXMpOwogIHZhciByZWxhdGl2ZUluZGV4ID0gdG9JbnRlZ2VyT3JJbmZpbml0eShpbmRleCk7CiAgdmFyIGFjdHVhbFZhbHVlID0gaXNCaWdJbnRBcnJheShPKSA/IHRvQmlnSW50KHZhbHVlKSA6ICt2YWx1ZTsKICByZXR1cm4gYXJyYXlXaXRoKE8sIGdldFR5cGVkQXJyYXlDb25zdHJ1Y3RvcihPKSwgcmVsYXRpdmVJbmRleCwgYWN0dWFsVmFsdWUpOwp9IH1bJ3dpdGgnXSwgIVBST1BFUl9PUkRFUiB8fCBUSFJPV19PTl9ORUdBVElWRV9GUkFDVElPTkFMX0lOREVYKTsKCgovKioqLyB9KSwKCi8qKiovIDk2MTc6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgdG9JbmRleGVkT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1Mzk3KTsKdmFyIHRvQWJzb2x1dGVJbmRleCA9IF9fd2VicGFja19yZXF1aXJlX18oNTYxMCk7CnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IF9fd2VicGFja19yZXF1aXJlX18oNjE5OCk7CgovLyBgQXJyYXkucHJvdG90eXBlLnsgaW5kZXhPZiwgaW5jbHVkZXMgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvbgp2YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7CiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkgewogICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QoJHRoaXMpOwogICAgdmFyIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pOwogICAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTsKICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7CiAgICB2YXIgdmFsdWU7CiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtCiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVjawogICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9PSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7CiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTsKICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2sKICAgICAgaWYgKHZhbHVlICE9PSB2YWx1ZSkgcmV0dXJuIHRydWU7CiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90CiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHsKICAgICAgaWYgKChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSAmJiBPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwOwogICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xOwogIH07Cn07Cgptb2R1bGUuZXhwb3J0cyA9IHsKICAvLyBgQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2QKICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmNsdWRlcwogIGluY2x1ZGVzOiBjcmVhdGVNZXRob2QodHJ1ZSksCiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmRleE9mYCBtZXRob2QKICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmRleG9mCiAgaW5kZXhPZjogY3JlYXRlTWV0aG9kKGZhbHNlKQp9OwoKCi8qKiovIH0pLAoKLyoqKi8gOTYzMToKLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGAKX193ZWJwYWNrX3JlcXVpcmVfXyg5NDg2KTsKCgovKioqLyB9KSwKCi8qKiovIDk3OTc6Ci8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCi8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgCl9fd2VicGFja19yZXF1aXJlX18oNDIyNik7CgoKLyoqKi8gfSksCgovKioqLyA5ODM1OgovKioqLyAoKG1vZHVsZSkgPT4gewoKCi8vIFNob3VsZCBnZXQgaXRlcmF0b3IgcmVjb3JkIG9mIGEgc2V0LWxpa2Ugb2JqZWN0IGJlZm9yZSBjbG9uaW5nIHRoaXMKLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI4OTQzMAptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkgewogIHRyeSB7CiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tc2V0IC0tIG5lZWRlZCBmb3IgdGVzdAogICAgdmFyIGJhc2VTZXQgPSBuZXcgU2V0KCk7CiAgICB2YXIgc2V0TGlrZSA9IHsKICAgICAgc2l6ZTogMCwKICAgICAgaGFzOiBmdW5jdGlvbiAoKSB7IHJldHVybiB0cnVlOyB9LAogICAgICBrZXlzOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSBuZWVkZWQgZm9yIHRlc3QKICAgICAgICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnbmV4dCcsIHsKICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICBiYXNlU2V0LmNsZWFyKCk7CiAgICAgICAgICAgIGJhc2VTZXQuYWRkKDQpOwogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUgfTsKICAgICAgICAgICAgfTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQogICAgfTsKICAgIHZhciByZXN1bHQgPSBiYXNlU2V0W01FVEhPRF9OQU1FXShzZXRMaWtlKTsKCiAgICByZXR1cm4gcmVzdWx0LnNpemUgPT09IDEgJiYgcmVzdWx0LnZhbHVlcygpLm5leHQoKS52YWx1ZSA9PT0gNDsKICB9IGNhdGNoIChlcnJvcikgewogICAgcmV0dXJuIGZhbHNlOwogIH0KfTsKCgovKioqLyB9KSwKCi8qKiovIDk5Mjg6Ci8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgp2YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYxOTgpOwp2YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IF9fd2VicGFja19yZXF1aXJlX18oMTI5MSk7Cgp2YXIgJFJhbmdlRXJyb3IgPSBSYW5nZUVycm9yOwoKLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUud2l0aAovLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUud2l0aAptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBDLCBpbmRleCwgdmFsdWUpIHsKICB2YXIgbGVuID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7CiAgdmFyIHJlbGF0aXZlSW5kZXggPSB0b0ludGVnZXJPckluZmluaXR5KGluZGV4KTsKICB2YXIgYWN0dWFsSW5kZXggPSByZWxhdGl2ZUluZGV4IDwgMCA/IGxlbiArIHJlbGF0aXZlSW5kZXggOiByZWxhdGl2ZUluZGV4OwogIGlmIChhY3R1YWxJbmRleCA+PSBsZW4gfHwgYWN0dWFsSW5kZXggPCAwKSB0aHJvdyBuZXcgJFJhbmdlRXJyb3IoJ0luY29ycmVjdCBpbmRleCcpOwogIHZhciBBID0gbmV3IEMobGVuKTsKICB2YXIgayA9IDA7CiAgZm9yICg7IGsgPCBsZW47IGsrKykgQVtrXSA9IGsgPT09IGFjdHVhbEluZGV4ID8gdmFsdWUgOiBPW2tdOwogIHJldHVybiBBOwp9OwoKCi8qKiovIH0pCgovKioqKioqLyB9KTsKLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKioqKi8gLy8gVGhlIG1vZHVsZSBjYWNoZQovKioqKioqLyB2YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307Ci8qKioqKiovIAovKioqKioqLyAvLyBUaGUgcmVxdWlyZSBmdW5jdGlvbgovKioqKioqLyBmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7Ci8qKioqKiovIAkvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGUKLyoqKioqKi8gCXZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdOwovKioqKioqLyAJaWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7Ci8qKioqKiovIAkJcmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzOwovKioqKioqLyAJfQovKioqKioqLyAJLy8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSkKLyoqKioqKi8gCXZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0gewovKioqKioqLyAJCS8vIG5vIG1vZHVsZS5pZCBuZWVkZWQKLyoqKioqKi8gCQkvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZAovKioqKioqLyAJCWV4cG9ydHM6IHt9Ci8qKioqKiovIAl9OwovKioqKioqLyAKLyoqKioqKi8gCS8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvbgovKioqKioqLyAJX193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7Ci8qKioqKiovIAovKioqKioqLyAJLy8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGUKLyoqKioqKi8gCXJldHVybiBtb2R1bGUuZXhwb3J0czsKLyoqKioqKi8gfQovKioqKioqLyAKLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKioqKi8gLyogd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzICovCi8qKioqKiovICgoKSA9PiB7Ci8qKioqKiovIAkvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4gewovKioqKioqLyAJCWZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHsKLyoqKioqKi8gCQkJaWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7Ci8qKioqKiovIAkJCQlPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pOwovKioqKioqLyAJCQl9Ci8qKioqKiovIAkJfQovKioqKioqLyAJfTsKLyoqKioqKi8gfSkoKTsKLyoqKioqKi8gCi8qKioqKiovIC8qIHdlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQgKi8KLyoqKioqKi8gKCgpID0+IHsKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkKLyoqKioqKi8gfSkoKTsKLyoqKioqKi8gCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0ge307CgovLyBFWFRFUk5BTCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5wdXNoLmpzCnZhciBlc19hcnJheV9wdXNoID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MTE0KTsKLy8gRVhURVJOQUwgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXktYnVmZmVyLmRldGFjaGVkLmpzCnZhciBlc19hcnJheV9idWZmZXJfZGV0YWNoZWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY1NzMpOwovLyBFWFRFUk5BTCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS1idWZmZXIudHJhbnNmZXIuanMKdmFyIGVzX2FycmF5X2J1ZmZlcl90cmFuc2ZlciA9IF9fd2VicGFja19yZXF1aXJlX18oODEwMCk7Ci8vIEVYVEVSTkFMIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LWJ1ZmZlci50cmFuc2Zlci10by1maXhlZC1sZW5ndGguanMKdmFyIGVzX2FycmF5X2J1ZmZlcl90cmFuc2Zlcl90b19maXhlZF9sZW5ndGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc5MzYpOwovLyBFWFRFUk5BTCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5pdGVyYXRvci5jb25zdHJ1Y3Rvci5qcwp2YXIgZXNfaXRlcmF0b3JfY29uc3RydWN0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgxMTEpOwovLyBFWFRFUk5BTCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5pdGVyYXRvci5maWx0ZXIuanMKdmFyIGVzX2l0ZXJhdG9yX2ZpbHRlciA9IF9fd2VicGFja19yZXF1aXJlX18oMjQ4OSk7Ci8vIEVYVEVSTkFMIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLml0ZXJhdG9yLm1hcC5qcwp2YXIgZXNfaXRlcmF0b3JfbWFwID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNzAxKTsKLy8gRVhURVJOQUwgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuaXRlcmF0b3Iuc29tZS5qcwp2YXIgZXNfaXRlcmF0b3Jfc29tZSA9IF9fd2VicGFja19yZXF1aXJlX18oMzU3OSk7Ci8vIEVYVEVSTkFMIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2Uud2l0aC1yZXNvbHZlcnMuanMKdmFyIGVzX3Byb21pc2Vfd2l0aF9yZXNvbHZlcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ2MjgpOwovLyBFWFRFUk5BTCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zZXQuZGlmZmVyZW5jZS52Mi5qcwp2YXIgZXNfc2V0X2RpZmZlcmVuY2VfdjIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc2NDIpOwovLyBFWFRFUk5BTCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zZXQuaW50ZXJzZWN0aW9uLnYyLmpzCnZhciBlc19zZXRfaW50ZXJzZWN0aW9uX3YyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MDA0KTsKLy8gRVhURVJOQUwgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc2V0LmlzLWRpc2pvaW50LWZyb20udjIuanMKdmFyIGVzX3NldF9pc19kaXNqb2ludF9mcm9tX3YyID0gX193ZWJwYWNrX3JlcXVpcmVfXygzODUzKTsKLy8gRVhURVJOQUwgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc2V0LmlzLXN1YnNldC1vZi52Mi5qcwp2YXIgZXNfc2V0X2lzX3N1YnNldF9vZl92MiA9IF9fd2VicGFja19yZXF1aXJlX18oNTg3Nik7Ci8vIEVYVEVSTkFMIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnNldC5pcy1zdXBlcnNldC1vZi52Mi5qcwp2YXIgZXNfc2V0X2lzX3N1cGVyc2V0X29mX3YyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNDc1KTsKLy8gRVhURVJOQUwgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc2V0LnN5bW1ldHJpYy1kaWZmZXJlbmNlLnYyLmpzCnZhciBlc19zZXRfc3ltbWV0cmljX2RpZmZlcmVuY2VfdjIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwMjQpOwovLyBFWFRFUk5BTCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zZXQudW5pb24udjIuanMKdmFyIGVzX3NldF91bmlvbl92MiA9IF9fd2VicGFja19yZXF1aXJlX18oMTY5OCk7Ci8vIEVYVEVSTkFMIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LndpdGguanMKdmFyIGVzX3R5cGVkX2FycmF5X3dpdGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk1NzcpOwovLyBFWFRFUk5BTCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQudWludDgtYXJyYXkuc2V0LWZyb20tYmFzZTY0LmpzCnZhciBlc25leHRfdWludDhfYXJyYXlfc2V0X2Zyb21fYmFzZTY0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNTQ5KTsKLy8gRVhURVJOQUwgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnVpbnQ4LWFycmF5LnNldC1mcm9tLWhleC5qcwp2YXIgZXNuZXh0X3VpbnQ4X2FycmF5X3NldF9mcm9tX2hleCA9IF9fd2VicGFja19yZXF1aXJlX18oOTc5Nyk7Ci8vIEVYVEVSTkFMIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC51aW50OC1hcnJheS50by1iYXNlNjQuanMKdmFyIGVzbmV4dF91aW50OF9hcnJheV90b19iYXNlNjQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk2MzEpOwovLyBFWFRFUk5BTCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQudWludDgtYXJyYXkudG8taGV4LmpzCnZhciBlc25leHRfdWludDhfYXJyYXlfdG9faGV4ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NjIzKTsKLy8gRVhURVJOQUwgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLnNlbGYuanMKdmFyIHdlYl9zZWxmID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNjExKTsKLy8gRVhURVJOQUwgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuaXRlcmF0b3IucmVkdWNlLmpzCnZhciBlc19pdGVyYXRvcl9yZWR1Y2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgyMzcpOwovLyBFWFRFUk5BTCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5wcm9taXNlLnRyeS5qcwp2YXIgZXNfcHJvbWlzZV90cnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2ODkpOwovLyBFWFRFUk5BTCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQubWF0aC5zdW0tcHJlY2lzZS5qcwp2YXIgZXNuZXh0X21hdGhfc3VtX3ByZWNpc2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQyMzUpOwovLyBFWFRFUk5BTCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQudWludDgtYXJyYXkuZnJvbS1iYXNlNjQuanMKdmFyIGVzbmV4dF91aW50OF9hcnJheV9mcm9tX2Jhc2U2NCA9IF9fd2VicGFja19yZXF1aXJlX18oOTQzMik7Ci8vIEVYVEVSTkFMIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tZXhjZXB0aW9uLnN0YWNrLmpzCnZhciB3ZWJfZG9tX2V4Y2VwdGlvbl9zdGFjayA9IF9fd2VicGFja19yZXF1aXJlX18oNDk3OSk7Ci8vIEVYVEVSTkFMIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi51cmwucGFyc2UuanMKdmFyIHdlYl91cmxfcGFyc2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU3ODEpOwo7Ly8gLi9zcmMvc2hhcmVkL3V0aWwuanMKCgoKCgoKCgoKCgoKCgoKCmNvbnN0IGlzTm9kZUpTID0gdHlwZW9mIHByb2Nlc3MgPT09ICJvYmplY3QiICYmIHByb2Nlc3MgKyAiIiA9PT0gIltvYmplY3QgcHJvY2Vzc10iICYmICFwcm9jZXNzLnZlcnNpb25zLm53ICYmICEocHJvY2Vzcy52ZXJzaW9ucy5lbGVjdHJvbiAmJiBwcm9jZXNzLnR5cGUgJiYgcHJvY2Vzcy50eXBlICE9PSAiYnJvd3NlciIpOwpjb25zdCBGT05UX0lERU5USVRZX01BVFJJWCA9IFswLjAwMSwgMCwgMCwgMC4wMDEsIDAsIDBdOwpjb25zdCBMSU5FX0ZBQ1RPUiA9IDEuMzU7CmNvbnN0IExJTkVfREVTQ0VOVF9GQUNUT1IgPSAwLjM1Owpjb25zdCBCQVNFTElORV9GQUNUT1IgPSBMSU5FX0RFU0NFTlRfRkFDVE9SIC8gTElORV9GQUNUT1I7CmNvbnN0IFJlbmRlcmluZ0ludGVudEZsYWcgPSB7CiAgQU5ZOiAweDAxLAogIERJU1BMQVk6IDB4MDIsCiAgUFJJTlQ6IDB4MDQsCiAgU0FWRTogMHgwOCwKICBBTk5PVEFUSU9OU19GT1JNUzogMHgxMCwKICBBTk5PVEFUSU9OU19TVE9SQUdFOiAweDIwLAogIEFOTk9UQVRJT05TX0RJU0FCTEU6IDB4NDAsCiAgSVNfRURJVElORzogMHg4MCwKICBPUExJU1Q6IDB4MTAwCn07CmNvbnN0IEFubm90YXRpb25Nb2RlID0gewogIERJU0FCTEU6IDAsCiAgRU5BQkxFOiAxLAogIEVOQUJMRV9GT1JNUzogMiwKICBFTkFCTEVfU1RPUkFHRTogMwp9Owpjb25zdCBBbm5vdGF0aW9uRWRpdG9yUHJlZml4ID0gInBkZmpzX2ludGVybmFsX2VkaXRvcl8iOwpjb25zdCBBbm5vdGF0aW9uRWRpdG9yVHlwZSA9IHsKICBESVNBQkxFOiAtMSwKICBOT05FOiAwLAogIEZSRUVURVhUOiAzLAogIEhJR0hMSUdIVDogOSwKICBTVEFNUDogMTMsCiAgSU5LOiAxNSwKICBQT1BVUDogMTYsCiAgU0lHTkFUVVJFOiAxMDEsCiAgQ09NTUVOVDogMTAyCn07CmNvbnN0IEFubm90YXRpb25FZGl0b3JQYXJhbXNUeXBlID0gewogIFJFU0laRTogMSwKICBDUkVBVEU6IDIsCiAgRlJFRVRFWFRfU0laRTogMTEsCiAgRlJFRVRFWFRfQ09MT1I6IDEyLAogIEZSRUVURVhUX09QQUNJVFk6IDEzLAogIElOS19DT0xPUjogMjEsCiAgSU5LX1RISUNLTkVTUzogMjIsCiAgSU5LX09QQUNJVFk6IDIzLAogIEhJR0hMSUdIVF9DT0xPUjogMzEsCiAgSElHSExJR0hUX1RISUNLTkVTUzogMzIsCiAgSElHSExJR0hUX0ZSRUU6IDMzLAogIEhJR0hMSUdIVF9TSE9XX0FMTDogMzQsCiAgRFJBV19TVEVQOiA0MQp9Owpjb25zdCBQZXJtaXNzaW9uRmxhZyA9IHsKICBQUklOVDogMHgwNCwKICBNT0RJRllfQ09OVEVOVFM6IDB4MDgsCiAgQ09QWTogMHgxMCwKICBNT0RJRllfQU5OT1RBVElPTlM6IDB4MjAsCiAgRklMTF9JTlRFUkFDVElWRV9GT1JNUzogMHgxMDAsCiAgQ09QWV9GT1JfQUNDRVNTSUJJTElUWTogMHgyMDAsCiAgQVNTRU1CTEU6IDB4NDAwLAogIFBSSU5UX0hJR0hfUVVBTElUWTogMHg4MDAKfTsKY29uc3QgVGV4dFJlbmRlcmluZ01vZGUgPSB7CiAgRklMTDogMCwKICBTVFJPS0U6IDEsCiAgRklMTF9TVFJPS0U6IDIsCiAgSU5WSVNJQkxFOiAzLAogIEZJTExfQUREX1RPX1BBVEg6IDQsCiAgU1RST0tFX0FERF9UT19QQVRIOiA1LAogIEZJTExfU1RST0tFX0FERF9UT19QQVRIOiA2LAogIEFERF9UT19QQVRIOiA3LAogIEZJTExfU1RST0tFX01BU0s6IDMsCiAgQUREX1RPX1BBVEhfRkxBRzogNAp9Owpjb25zdCBJbWFnZUtpbmQgPSB7CiAgR1JBWVNDQUxFXzFCUFA6IDEsCiAgUkdCXzI0QlBQOiAyLAogIFJHQkFfMzJCUFA6IDMKfTsKY29uc3QgQW5ub3RhdGlvblR5cGUgPSB7CiAgVEVYVDogMSwKICBMSU5LOiAyLAogIEZSRUVURVhUOiAzLAogIExJTkU6IDQsCiAgU1FVQVJFOiA1LAogIENJUkNMRTogNiwKICBQT0xZR09OOiA3LAogIFBPTFlMSU5FOiA4LAogIEhJR0hMSUdIVDogOSwKICBVTkRFUkxJTkU6IDEwLAogIFNRVUlHR0xZOiAxMSwKICBTVFJJS0VPVVQ6IDEyLAogIFNUQU1QOiAxMywKICBDQVJFVDogMTQsCiAgSU5LOiAxNSwKICBQT1BVUDogMTYsCiAgRklMRUFUVEFDSE1FTlQ6IDE3LAogIFNPVU5EOiAxOCwKICBNT1ZJRTogMTksCiAgV0lER0VUOiAyMCwKICBTQ1JFRU46IDIxLAogIFBSSU5URVJNQVJLOiAyMiwKICBUUkFQTkVUOiAyMywKICBXQVRFUk1BUks6IDI0LAogIFRIUkVFRDogMjUsCiAgUkVEQUNUOiAyNgp9Owpjb25zdCBBbm5vdGF0aW9uUmVwbHlUeXBlID0gewogIEdST1VQOiAiR3JvdXAiLAogIFJFUExZOiAiUiIKfTsKY29uc3QgQW5ub3RhdGlvbkZsYWcgPSB7CiAgSU5WSVNJQkxFOiAweDAxLAogIEhJRERFTjogMHgwMiwKICBQUklOVDogMHgwNCwKICBOT1pPT006IDB4MDgsCiAgTk9ST1RBVEU6IDB4MTAsCiAgTk9WSUVXOiAweDIwLAogIFJFQURPTkxZOiAweDQwLAogIExPQ0tFRDogMHg4MCwKICBUT0dHTEVOT1ZJRVc6IDB4MTAwLAogIExPQ0tFRENPTlRFTlRTOiAweDIwMAp9Owpjb25zdCBBbm5vdGF0aW9uRmllbGRGbGFnID0gewogIFJFQURPTkxZOiAweDAwMDAwMDEsCiAgUkVRVUlSRUQ6IDB4MDAwMDAwMiwKICBOT0VYUE9SVDogMHgwMDAwMDA0LAogIE1VTFRJTElORTogMHgwMDAxMDAwLAogIFBBU1NXT1JEOiAweDAwMDIwMDAsCiAgTk9UT0dHTEVUT09GRjogMHgwMDA0MDAwLAogIFJBRElPOiAweDAwMDgwMDAsCiAgUFVTSEJVVFRPTjogMHgwMDEwMDAwLAogIENPTUJPOiAweDAwMjAwMDAsCiAgRURJVDogMHgwMDQwMDAwLAogIFNPUlQ6IDB4MDA4MDAwMCwKICBGSUxFU0VMRUNUOiAweDAxMDAwMDAsCiAgTVVMVElTRUxFQ1Q6IDB4MDIwMDAwMCwKICBET05PVFNQRUxMQ0hFQ0s6IDB4MDQwMDAwMCwKICBET05PVFNDUk9MTDogMHgwODAwMDAwLAogIENPTUI6IDB4MTAwMDAwMCwKICBSSUNIVEVYVDogMHgyMDAwMDAwLAogIFJBRElPU0lOVU5JU09OOiAweDIwMDAwMDAsCiAgQ09NTUlUT05TRUxDSEFOR0U6IDB4NDAwMDAwMAp9Owpjb25zdCBBbm5vdGF0aW9uQm9yZGVyU3R5bGVUeXBlID0gewogIFNPTElEOiAxLAogIERBU0hFRDogMiwKICBCRVZFTEVEOiAzLAogIElOU0VUOiA0LAogIFVOREVSTElORTogNQp9Owpjb25zdCBBbm5vdGF0aW9uQWN0aW9uRXZlbnRUeXBlID0gewogIEU6ICJNb3VzZSBFbnRlciIsCiAgWDogIk1vdXNlIEV4aXQiLAogIEQ6ICJNb3VzZSBEb3duIiwKICBVOiAiTW91c2UgVXAiLAogIEZvOiAiRm9jdXMiLAogIEJsOiAiQmx1ciIsCiAgUE86ICJQYWdlT3BlbiIsCiAgUEM6ICJQYWdlQ2xvc2UiLAogIFBWOiAiUGFnZVZpc2libGUiLAogIFBJOiAiUGFnZUludmlzaWJsZSIsCiAgSzogIktleXN0cm9rZSIsCiAgRjogIkZvcm1hdCIsCiAgVjogIlZhbGlkYXRlIiwKICBDOiAiQ2FsY3VsYXRlIgp9Owpjb25zdCBEb2N1bWVudEFjdGlvbkV2ZW50VHlwZSA9IHsKICBXQzogIldpbGxDbG9zZSIsCiAgV1M6ICJXaWxsU2F2ZSIsCiAgRFM6ICJEaWRTYXZlIiwKICBXUDogIldpbGxQcmludCIsCiAgRFA6ICJEaWRQcmludCIKfTsKY29uc3QgUGFnZUFjdGlvbkV2ZW50VHlwZSA9IHsKICBPOiAiUGFnZU9wZW4iLAogIEM6ICJQYWdlQ2xvc2UiCn07CmNvbnN0IFZlcmJvc2l0eUxldmVsID0gewogIEVSUk9SUzogMCwKICBXQVJOSU5HUzogMSwKICBJTkZPUzogNQp9Owpjb25zdCBPUFMgPSB7CiAgZGVwZW5kZW5jeTogMSwKICBzZXRMaW5lV2lkdGg6IDIsCiAgc2V0TGluZUNhcDogMywKICBzZXRMaW5lSm9pbjogNCwKICBzZXRNaXRlckxpbWl0OiA1LAogIHNldERhc2g6IDYsCiAgc2V0UmVuZGVyaW5nSW50ZW50OiA3LAogIHNldEZsYXRuZXNzOiA4LAogIHNldEdTdGF0ZTogOSwKICBzYXZlOiAxMCwKICByZXN0b3JlOiAxMSwKICB0cmFuc2Zvcm06IDEyLAogIG1vdmVUbzogMTMsCiAgbGluZVRvOiAxNCwKICBjdXJ2ZVRvOiAxNSwKICBjdXJ2ZVRvMjogMTYsCiAgY3VydmVUbzM6IDE3LAogIGNsb3NlUGF0aDogMTgsCiAgcmVjdGFuZ2xlOiAxOSwKICBzdHJva2U6IDIwLAogIGNsb3NlU3Ryb2tlOiAyMSwKICBmaWxsOiAyMiwKICBlb0ZpbGw6IDIzLAogIGZpbGxTdHJva2U6IDI0LAogIGVvRmlsbFN0cm9rZTogMjUsCiAgY2xvc2VGaWxsU3Ryb2tlOiAyNiwKICBjbG9zZUVPRmlsbFN0cm9rZTogMjcsCiAgZW5kUGF0aDogMjgsCiAgY2xpcDogMjksCiAgZW9DbGlwOiAzMCwKICBiZWdpblRleHQ6IDMxLAogIGVuZFRleHQ6IDMyLAogIHNldENoYXJTcGFjaW5nOiAzMywKICBzZXRXb3JkU3BhY2luZzogMzQsCiAgc2V0SFNjYWxlOiAzNSwKICBzZXRMZWFkaW5nOiAzNiwKICBzZXRGb250OiAzNywKICBzZXRUZXh0UmVuZGVyaW5nTW9kZTogMzgsCiAgc2V0VGV4dFJpc2U6IDM5LAogIG1vdmVUZXh0OiA0MCwKICBzZXRMZWFkaW5nTW92ZVRleHQ6IDQxLAogIHNldFRleHRNYXRyaXg6IDQyLAogIG5leHRMaW5lOiA0MywKICBzaG93VGV4dDogNDQsCiAgc2hvd1NwYWNlZFRleHQ6IDQ1LAogIG5leHRMaW5lU2hvd1RleHQ6IDQ2LAogIG5leHRMaW5lU2V0U3BhY2luZ1Nob3dUZXh0OiA0NywKICBzZXRDaGFyV2lkdGg6IDQ4LAogIHNldENoYXJXaWR0aEFuZEJvdW5kczogNDksCiAgc2V0U3Ryb2tlQ29sb3JTcGFjZTogNTAsCiAgc2V0RmlsbENvbG9yU3BhY2U6IDUxLAogIHNldFN0cm9rZUNvbG9yOiA1MiwKICBzZXRTdHJva2VDb2xvck46IDUzLAogIHNldEZpbGxDb2xvcjogNTQsCiAgc2V0RmlsbENvbG9yTjogNTUsCiAgc2V0U3Ryb2tlR3JheTogNTYsCiAgc2V0RmlsbEdyYXk6IDU3LAogIHNldFN0cm9rZVJHQkNvbG9yOiA1OCwKICBzZXRGaWxsUkdCQ29sb3I6IDU5LAogIHNldFN0cm9rZUNNWUtDb2xvcjogNjAsCiAgc2V0RmlsbENNWUtDb2xvcjogNjEsCiAgc2hhZGluZ0ZpbGw6IDYyLAogIGJlZ2luSW5saW5lSW1hZ2U6IDYzLAogIGJlZ2luSW1hZ2VEYXRhOiA2NCwKICBlbmRJbmxpbmVJbWFnZTogNjUsCiAgcGFpbnRYT2JqZWN0OiA2NiwKICBtYXJrUG9pbnQ6IDY3LAogIG1hcmtQb2ludFByb3BzOiA2OCwKICBiZWdpbk1hcmtlZENvbnRlbnQ6IDY5LAogIGJlZ2luTWFya2VkQ29udGVudFByb3BzOiA3MCwKICBlbmRNYXJrZWRDb250ZW50OiA3MSwKICBiZWdpbkNvbXBhdDogNzIsCiAgZW5kQ29tcGF0OiA3MywKICBwYWludEZvcm1YT2JqZWN0QmVnaW46IDc0LAogIHBhaW50Rm9ybVhPYmplY3RFbmQ6IDc1LAogIGJlZ2luR3JvdXA6IDc2LAogIGVuZEdyb3VwOiA3NywKICBiZWdpbkFubm90YXRpb246IDgwLAogIGVuZEFubm90YXRpb246IDgxLAogIHBhaW50SW1hZ2VNYXNrWE9iamVjdDogODMsCiAgcGFpbnRJbWFnZU1hc2tYT2JqZWN0R3JvdXA6IDg0LAogIHBhaW50SW1hZ2VYT2JqZWN0OiA4NSwKICBwYWludElubGluZUltYWdlWE9iamVjdDogODYsCiAgcGFpbnRJbmxpbmVJbWFnZVhPYmplY3RHcm91cDogODcsCiAgcGFpbnRJbWFnZVhPYmplY3RSZXBlYXQ6IDg4LAogIHBhaW50SW1hZ2VNYXNrWE9iamVjdFJlcGVhdDogODksCiAgcGFpbnRTb2xpZENvbG9ySW1hZ2VNYXNrOiA5MCwKICBjb25zdHJ1Y3RQYXRoOiA5MSwKICBzZXRTdHJva2VUcmFuc3BhcmVudDogOTIsCiAgc2V0RmlsbFRyYW5zcGFyZW50OiA5MywKICByYXdGaWxsUGF0aDogOTQKfTsKY29uc3QgRHJhd09QUyA9IHsKICBtb3ZlVG86IDAsCiAgbGluZVRvOiAxLAogIGN1cnZlVG86IDIsCiAgY2xvc2VQYXRoOiAzCn07CmNvbnN0IFBhc3N3b3JkUmVzcG9uc2VzID0gewogIE5FRURfUEFTU1dPUkQ6IDEsCiAgSU5DT1JSRUNUX1BBU1NXT1JEOiAyCn07CmxldCB2ZXJib3NpdHkgPSBWZXJib3NpdHlMZXZlbC5XQVJOSU5HUzsKZnVuY3Rpb24gc2V0VmVyYm9zaXR5TGV2ZWwobGV2ZWwpIHsKICBpZiAoTnVtYmVyLmlzSW50ZWdlcihsZXZlbCkpIHsKICAgIHZlcmJvc2l0eSA9IGxldmVsOwogIH0KfQpmdW5jdGlvbiBnZXRWZXJib3NpdHlMZXZlbCgpIHsKICByZXR1cm4gdmVyYm9zaXR5Owp9CmZ1bmN0aW9uIGluZm8obXNnKSB7CiAgaWYgKHZlcmJvc2l0eSA+PSBWZXJib3NpdHlMZXZlbC5JTkZPUykgewogICAgY29uc29sZS5sb2coYEluZm86ICR7bXNnfWApOwogIH0KfQpmdW5jdGlvbiB3YXJuKG1zZykgewogIGlmICh2ZXJib3NpdHkgPj0gVmVyYm9zaXR5TGV2ZWwuV0FSTklOR1MpIHsKICAgIGNvbnNvbGUubG9nKGBXYXJuaW5nOiAke21zZ31gKTsKICB9Cn0KZnVuY3Rpb24gdW5yZWFjaGFibGUobXNnKSB7CiAgdGhyb3cgbmV3IEVycm9yKG1zZyk7Cn0KZnVuY3Rpb24gYXNzZXJ0KGNvbmQsIG1zZykgewogIGlmICghY29uZCkgewogICAgdW5yZWFjaGFibGUobXNnKTsKICB9Cn0KZnVuY3Rpb24gX2lzVmFsaWRQcm90b2NvbCh1cmwpIHsKICBzd2l0Y2ggKHVybD8ucHJvdG9jb2wpIHsKICAgIGNhc2UgImh0dHA6IjoKICAgIGNhc2UgImh0dHBzOiI6CiAgICBjYXNlICJmdHA6IjoKICAgIGNhc2UgIm1haWx0bzoiOgogICAgY2FzZSAidGVsOiI6CiAgICAgIHJldHVybiB0cnVlOwogICAgZGVmYXVsdDoKICAgICAgcmV0dXJuIGZhbHNlOwogIH0KfQpmdW5jdGlvbiBjcmVhdGVWYWxpZEFic29sdXRlVXJsKHVybCwgYmFzZVVybCA9IG51bGwsIG9wdGlvbnMgPSBudWxsKSB7CiAgaWYgKCF1cmwpIHsKICAgIHJldHVybiBudWxsOwogIH0KICBpZiAob3B0aW9ucyAmJiB0eXBlb2YgdXJsID09PSAic3RyaW5nIikgewogICAgaWYgKG9wdGlvbnMuYWRkRGVmYXVsdFByb3RvY29sICYmIHVybC5zdGFydHNXaXRoKCJ3d3cuIikpIHsKICAgICAgY29uc3QgZG90cyA9IHVybC5tYXRjaCgvXC4vZyk7CiAgICAgIGlmIChkb3RzPy5sZW5ndGggPj0gMikgewogICAgICAgIHVybCA9IGBodHRwOi8vJHt1cmx9YDsKICAgICAgfQogICAgfQogICAgaWYgKG9wdGlvbnMudHJ5Q29udmVydEVuY29kaW5nKSB7CiAgICAgIHRyeSB7CiAgICAgICAgdXJsID0gc3RyaW5nVG9VVEY4U3RyaW5nKHVybCk7CiAgICAgIH0gY2F0Y2gge30KICAgIH0KICB9CiAgY29uc3QgYWJzb2x1dGVVcmwgPSBiYXNlVXJsID8gVVJMLnBhcnNlKHVybCwgYmFzZVVybCkgOiBVUkwucGFyc2UodXJsKTsKICByZXR1cm4gX2lzVmFsaWRQcm90b2NvbChhYnNvbHV0ZVVybCkgPyBhYnNvbHV0ZVVybCA6IG51bGw7Cn0KZnVuY3Rpb24gdXBkYXRlVXJsSGFzaCh1cmwsIGhhc2gsIGFsbG93UmVsID0gZmFsc2UpIHsKICBjb25zdCByZXMgPSBVUkwucGFyc2UodXJsKTsKICBpZiAocmVzKSB7CiAgICByZXMuaGFzaCA9IGhhc2g7CiAgICByZXR1cm4gcmVzLmhyZWY7CiAgfQogIGlmIChhbGxvd1JlbCAmJiBjcmVhdGVWYWxpZEFic29sdXRlVXJsKHVybCwgImh0dHA6Ly9leGFtcGxlLmNvbSIpKSB7CiAgICByZXR1cm4gdXJsLnNwbGl0KCIjIiwgMSlbMF0gKyBgJHtoYXNoID8gYCMke2hhc2h9YCA6ICIifWA7CiAgfQogIHJldHVybiAiIjsKfQpmdW5jdGlvbiBzaGFkb3cob2JqLCBwcm9wLCB2YWx1ZSwgbm9uU2VyaWFsaXphYmxlID0gZmFsc2UpIHsKICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBwcm9wLCB7CiAgICB2YWx1ZSwKICAgIGVudW1lcmFibGU6ICFub25TZXJpYWxpemFibGUsCiAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICB3cml0YWJsZTogZmFsc2UKICB9KTsKICByZXR1cm4gdmFsdWU7Cn0KY29uc3QgQmFzZUV4Y2VwdGlvbiA9IGZ1bmN0aW9uIEJhc2VFeGNlcHRpb25DbG9zdXJlKCkgewogIGZ1bmN0aW9uIEJhc2VFeGNlcHRpb24obWVzc2FnZSwgbmFtZSkgewogICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTsKICAgIHRoaXMubmFtZSA9IG5hbWU7CiAgfQogIEJhc2VFeGNlcHRpb24ucHJvdG90eXBlID0gbmV3IEVycm9yKCk7CiAgQmFzZUV4Y2VwdGlvbi5jb25zdHJ1Y3RvciA9IEJhc2VFeGNlcHRpb247CiAgcmV0dXJuIEJhc2VFeGNlcHRpb247Cn0oKTsKY2xhc3MgUGFzc3dvcmRFeGNlcHRpb24gZXh0ZW5kcyBCYXNlRXhjZXB0aW9uIHsKICBjb25zdHJ1Y3Rvcihtc2csIGNvZGUpIHsKICAgIHN1cGVyKG1zZywgIlBhc3N3b3JkRXhjZXB0aW9uIik7CiAgICB0aGlzLmNvZGUgPSBjb2RlOwogIH0KfQpjbGFzcyBVbmtub3duRXJyb3JFeGNlcHRpb24gZXh0ZW5kcyBCYXNlRXhjZXB0aW9uIHsKICBjb25zdHJ1Y3Rvcihtc2csIGRldGFpbHMpIHsKICAgIHN1cGVyKG1zZywgIlVua25vd25FcnJvckV4Y2VwdGlvbiIpOwogICAgdGhpcy5kZXRhaWxzID0gZGV0YWlsczsKICB9Cn0KY2xhc3MgSW52YWxpZFBERkV4Y2VwdGlvbiBleHRlbmRzIEJhc2VFeGNlcHRpb24gewogIGNvbnN0cnVjdG9yKG1zZykgewogICAgc3VwZXIobXNnLCAiSW52YWxpZFBERkV4Y2VwdGlvbiIpOwogIH0KfQpjbGFzcyBSZXNwb25zZUV4Y2VwdGlvbiBleHRlbmRzIEJhc2VFeGNlcHRpb24gewogIGNvbnN0cnVjdG9yKG1zZywgc3RhdHVzLCBtaXNzaW5nKSB7CiAgICBzdXBlcihtc2csICJSZXNwb25zZUV4Y2VwdGlvbiIpOwogICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7CiAgICB0aGlzLm1pc3NpbmcgPSBtaXNzaW5nOwogIH0KfQpjbGFzcyBGb3JtYXRFcnJvciBleHRlbmRzIEJhc2VFeGNlcHRpb24gewogIGNvbnN0cnVjdG9yKG1zZykgewogICAgc3VwZXIobXNnLCAiRm9ybWF0RXJyb3IiKTsKICB9Cn0KY2xhc3MgQWJvcnRFeGNlcHRpb24gZXh0ZW5kcyBCYXNlRXhjZXB0aW9uIHsKICBjb25zdHJ1Y3Rvcihtc2cpIHsKICAgIHN1cGVyKG1zZywgIkFib3J0RXhjZXB0aW9uIik7CiAgfQp9CmZ1bmN0aW9uIGJ5dGVzVG9TdHJpbmcoYnl0ZXMpIHsKICBpZiAodHlwZW9mIGJ5dGVzICE9PSAib2JqZWN0IiB8fCBieXRlcz8ubGVuZ3RoID09PSB1bmRlZmluZWQpIHsKICAgIHVucmVhY2hhYmxlKCJJbnZhbGlkIGFyZ3VtZW50IGZvciBieXRlc1RvU3RyaW5nIik7CiAgfQogIGNvbnN0IGxlbmd0aCA9IGJ5dGVzLmxlbmd0aDsKICBjb25zdCBNQVhfQVJHVU1FTlRfQ09VTlQgPSA4MTkyOwogIGlmIChsZW5ndGggPCBNQVhfQVJHVU1FTlRfQ09VTlQpIHsKICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGJ5dGVzKTsKICB9CiAgY29uc3Qgc3RyQnVmID0gW107CiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gTUFYX0FSR1VNRU5UX0NPVU5UKSB7CiAgICBjb25zdCBjaHVua0VuZCA9IE1hdGgubWluKGkgKyBNQVhfQVJHVU1FTlRfQ09VTlQsIGxlbmd0aCk7CiAgICBjb25zdCBjaHVuayA9IGJ5dGVzLnN1YmFycmF5KGksIGNodW5rRW5kKTsKICAgIHN0ckJ1Zi5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgY2h1bmspKTsKICB9CiAgcmV0dXJuIHN0ckJ1Zi5qb2luKCIiKTsKfQpmdW5jdGlvbiBzdHJpbmdUb0J5dGVzKHN0cikgewogIGlmICh0eXBlb2Ygc3RyICE9PSAic3RyaW5nIikgewogICAgdW5yZWFjaGFibGUoIkludmFsaWQgYXJndW1lbnQgZm9yIHN0cmluZ1RvQnl0ZXMiKTsKICB9CiAgY29uc3QgbGVuZ3RoID0gc3RyLmxlbmd0aDsKICBjb25zdCBieXRlcyA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7CiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgYnl0ZXNbaV0gPSBzdHIuY2hhckNvZGVBdChpKSAmIDB4ZmY7CiAgfQogIHJldHVybiBieXRlczsKfQpmdW5jdGlvbiBzdHJpbmczMih2YWx1ZSkgewogIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHZhbHVlID4+IDI0ICYgMHhmZiwgdmFsdWUgPj4gMTYgJiAweGZmLCB2YWx1ZSA+PiA4ICYgMHhmZiwgdmFsdWUgJiAweGZmKTsKfQpmdW5jdGlvbiBvYmplY3RTaXplKG9iaikgewogIHJldHVybiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aDsKfQpmdW5jdGlvbiBpc0xpdHRsZUVuZGlhbigpIHsKICBjb25zdCBidWZmZXI4ID0gbmV3IFVpbnQ4QXJyYXkoNCk7CiAgYnVmZmVyOFswXSA9IDE7CiAgY29uc3QgdmlldzMyID0gbmV3IFVpbnQzMkFycmF5KGJ1ZmZlcjguYnVmZmVyLCAwLCAxKTsKICByZXR1cm4gdmlldzMyWzBdID09PSAxOwp9CmZ1bmN0aW9uIGlzRXZhbFN1cHBvcnRlZCgpIHsKICB0cnkgewogICAgbmV3IEZ1bmN0aW9uKCIiKTsKICAgIHJldHVybiB0cnVlOwogIH0gY2F0Y2ggewogICAgcmV0dXJuIGZhbHNlOwogIH0KfQpjbGFzcyBGZWF0dXJlVGVzdCB7CiAgc3RhdGljIGdldCBpc0xpdHRsZUVuZGlhbigpIHsKICAgIHJldHVybiBzaGFkb3codGhpcywgImlzTGl0dGxlRW5kaWFuIiwgaXNMaXR0bGVFbmRpYW4oKSk7CiAgfQogIHN0YXRpYyBnZXQgaXNFdmFsU3VwcG9ydGVkKCkgewogICAgcmV0dXJuIHNoYWRvdyh0aGlzLCAiaXNFdmFsU3VwcG9ydGVkIiwgaXNFdmFsU3VwcG9ydGVkKCkpOwogIH0KICBzdGF0aWMgZ2V0IGlzT2Zmc2NyZWVuQ2FudmFzU3VwcG9ydGVkKCkgewogICAgcmV0dXJuIHNoYWRvdyh0aGlzLCAiaXNPZmZzY3JlZW5DYW52YXNTdXBwb3J0ZWQiLCB0eXBlb2YgT2Zmc2NyZWVuQ2FudmFzICE9PSAidW5kZWZpbmVkIik7CiAgfQogIHN0YXRpYyBnZXQgaXNJbWFnZURlY29kZXJTdXBwb3J0ZWQoKSB7CiAgICByZXR1cm4gc2hhZG93KHRoaXMsICJpc0ltYWdlRGVjb2RlclN1cHBvcnRlZCIsIHR5cGVvZiBJbWFnZURlY29kZXIgIT09ICJ1bmRlZmluZWQiKTsKICB9CiAgc3RhdGljIGdldCBwbGF0Zm9ybSgpIHsKICAgIGNvbnN0IHsKICAgICAgcGxhdGZvcm0sCiAgICAgIHVzZXJBZ2VudAogICAgfSA9IG5hdmlnYXRvcjsKICAgIHJldHVybiBzaGFkb3codGhpcywgInBsYXRmb3JtIiwgewogICAgICBpc0FuZHJvaWQ6IHVzZXJBZ2VudC5pbmNsdWRlcygiQW5kcm9pZCIpLAogICAgICBpc0xpbnV4OiBwbGF0Zm9ybS5pbmNsdWRlcygiTGludXgiKSwKICAgICAgaXNNYWM6IHBsYXRmb3JtLmluY2x1ZGVzKCJNYWMiKSwKICAgICAgaXNXaW5kb3dzOiBwbGF0Zm9ybS5pbmNsdWRlcygiV2luIiksCiAgICAgIGlzRmlyZWZveDogdXNlckFnZW50LmluY2x1ZGVzKCJGaXJlZm94IikKICAgIH0pOwogIH0KICBzdGF0aWMgZ2V0IGlzQ1NTUm91bmRTdXBwb3J0ZWQoKSB7CiAgICByZXR1cm4gc2hhZG93KHRoaXMsICJpc0NTU1JvdW5kU3VwcG9ydGVkIiwgZ2xvYmFsVGhpcy5DU1M/LnN1cHBvcnRzPy4oIndpZHRoOiByb3VuZCgxLjVweCwgMXB4KSIpKTsKICB9Cn0KY29uc3QgaGV4TnVtYmVycyA9IEFycmF5LmZyb20oQXJyYXkoMjU2KS5rZXlzKCksIG4gPT4gbi50b1N0cmluZygxNikucGFkU3RhcnQoMiwgIjAiKSk7CmNsYXNzIFV0aWwgewogIHN0YXRpYyBtYWtlSGV4Q29sb3IociwgZywgYikgewogICAgcmV0dXJuIGAjJHtoZXhOdW1iZXJzW3JdfSR7aGV4TnVtYmVyc1tnXX0ke2hleE51bWJlcnNbYl19YDsKICB9CiAgc3RhdGljIGRvbU1hdHJpeFRvVHJhbnNmb3JtKGRtKSB7CiAgICByZXR1cm4gW2RtLmEsIGRtLmIsIGRtLmMsIGRtLmQsIGRtLmUsIGRtLmZdOwogIH0KICBzdGF0aWMgc2NhbGVNaW5NYXgodHJhbnNmb3JtLCBtaW5NYXgpIHsKICAgIGxldCB0ZW1wOwogICAgaWYgKHRyYW5zZm9ybVswXSkgewogICAgICBpZiAodHJhbnNmb3JtWzBdIDwgMCkgewogICAgICAgIHRlbXAgPSBtaW5NYXhbMF07CiAgICAgICAgbWluTWF4WzBdID0gbWluTWF4WzJdOwogICAgICAgIG1pbk1heFsyXSA9IHRlbXA7CiAgICAgIH0KICAgICAgbWluTWF4WzBdICo9IHRyYW5zZm9ybVswXTsKICAgICAgbWluTWF4WzJdICo9IHRyYW5zZm9ybVswXTsKICAgICAgaWYgKHRyYW5zZm9ybVszXSA8IDApIHsKICAgICAgICB0ZW1wID0gbWluTWF4WzFdOwogICAgICAgIG1pbk1heFsxXSA9IG1pbk1heFszXTsKICAgICAgICBtaW5NYXhbM10gPSB0ZW1wOwogICAgICB9CiAgICAgIG1pbk1heFsxXSAqPSB0cmFuc2Zvcm1bM107CiAgICAgIG1pbk1heFszXSAqPSB0cmFuc2Zvcm1bM107CiAgICB9IGVsc2UgewogICAgICB0ZW1wID0gbWluTWF4WzBdOwogICAgICBtaW5NYXhbMF0gPSBtaW5NYXhbMV07CiAgICAgIG1pbk1heFsxXSA9IHRlbXA7CiAgICAgIHRlbXAgPSBtaW5NYXhbMl07CiAgICAgIG1pbk1heFsyXSA9IG1pbk1heFszXTsKICAgICAgbWluTWF4WzNdID0gdGVtcDsKICAgICAgaWYgKHRyYW5zZm9ybVsxXSA8IDApIHsKICAgICAgICB0ZW1wID0gbWluTWF4WzFdOwogICAgICAgIG1pbk1heFsxXSA9IG1pbk1heFszXTsKICAgICAgICBtaW5NYXhbM10gPSB0ZW1wOwogICAgICB9CiAgICAgIG1pbk1heFsxXSAqPSB0cmFuc2Zvcm1bMV07CiAgICAgIG1pbk1heFszXSAqPSB0cmFuc2Zvcm1bMV07CiAgICAgIGlmICh0cmFuc2Zvcm1bMl0gPCAwKSB7CiAgICAgICAgdGVtcCA9IG1pbk1heFswXTsKICAgICAgICBtaW5NYXhbMF0gPSBtaW5NYXhbMl07CiAgICAgICAgbWluTWF4WzJdID0gdGVtcDsKICAgICAgfQogICAgICBtaW5NYXhbMF0gKj0gdHJhbnNmb3JtWzJdOwogICAgICBtaW5NYXhbMl0gKj0gdHJhbnNmb3JtWzJdOwogICAgfQogICAgbWluTWF4WzBdICs9IHRyYW5zZm9ybVs0XTsKICAgIG1pbk1heFsxXSArPSB0cmFuc2Zvcm1bNV07CiAgICBtaW5NYXhbMl0gKz0gdHJhbnNmb3JtWzRdOwogICAgbWluTWF4WzNdICs9IHRyYW5zZm9ybVs1XTsKICB9CiAgc3RhdGljIHRyYW5zZm9ybShtMSwgbTIpIHsKICAgIHJldHVybiBbbTFbMF0gKiBtMlswXSArIG0xWzJdICogbTJbMV0sIG0xWzFdICogbTJbMF0gKyBtMVszXSAqIG0yWzFdLCBtMVswXSAqIG0yWzJdICsgbTFbMl0gKiBtMlszXSwgbTFbMV0gKiBtMlsyXSArIG0xWzNdICogbTJbM10sIG0xWzBdICogbTJbNF0gKyBtMVsyXSAqIG0yWzVdICsgbTFbNF0sIG0xWzFdICogbTJbNF0gKyBtMVszXSAqIG0yWzVdICsgbTFbNV1dOwogIH0KICBzdGF0aWMgbXVsdGlwbHlCeURPTU1hdHJpeChtLCBtZCkgewogICAgcmV0dXJuIFttWzBdICogbWQuYSArIG1bMl0gKiBtZC5iLCBtWzFdICogbWQuYSArIG1bM10gKiBtZC5iLCBtWzBdICogbWQuYyArIG1bMl0gKiBtZC5kLCBtWzFdICogbWQuYyArIG1bM10gKiBtZC5kLCBtWzBdICogbWQuZSArIG1bMl0gKiBtZC5mICsgbVs0XSwgbVsxXSAqIG1kLmUgKyBtWzNdICogbWQuZiArIG1bNV1dOwogIH0KICBzdGF0aWMgYXBwbHlUcmFuc2Zvcm0ocCwgbSwgcG9zID0gMCkgewogICAgY29uc3QgcDAgPSBwW3Bvc107CiAgICBjb25zdCBwMSA9IHBbcG9zICsgMV07CiAgICBwW3Bvc10gPSBwMCAqIG1bMF0gKyBwMSAqIG1bMl0gKyBtWzRdOwogICAgcFtwb3MgKyAxXSA9IHAwICogbVsxXSArIHAxICogbVszXSArIG1bNV07CiAgfQogIHN0YXRpYyBhcHBseVRyYW5zZm9ybVRvQmV6aWVyKHAsIHRyYW5zZm9ybSwgcG9zID0gMCkgewogICAgY29uc3QgbTAgPSB0cmFuc2Zvcm1bMF07CiAgICBjb25zdCBtMSA9IHRyYW5zZm9ybVsxXTsKICAgIGNvbnN0IG0yID0gdHJhbnNmb3JtWzJdOwogICAgY29uc3QgbTMgPSB0cmFuc2Zvcm1bM107CiAgICBjb25zdCBtNCA9IHRyYW5zZm9ybVs0XTsKICAgIGNvbnN0IG01ID0gdHJhbnNmb3JtWzVdOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCA2OyBpICs9IDIpIHsKICAgICAgY29uc3QgcEkgPSBwW3BvcyArIGldOwogICAgICBjb25zdCBwSTEgPSBwW3BvcyArIGkgKyAxXTsKICAgICAgcFtwb3MgKyBpXSA9IHBJICogbTAgKyBwSTEgKiBtMiArIG00OwogICAgICBwW3BvcyArIGkgKyAxXSA9IHBJICogbTEgKyBwSTEgKiBtMyArIG01OwogICAgfQogIH0KICBzdGF0aWMgYXBwbHlJbnZlcnNlVHJhbnNmb3JtKHAsIG0pIHsKICAgIGNvbnN0IHAwID0gcFswXTsKICAgIGNvbnN0IHAxID0gcFsxXTsKICAgIGNvbnN0IGQgPSBtWzBdICogbVszXSAtIG1bMV0gKiBtWzJdOwogICAgcFswXSA9IChwMCAqIG1bM10gLSBwMSAqIG1bMl0gKyBtWzJdICogbVs1XSAtIG1bNF0gKiBtWzNdKSAvIGQ7CiAgICBwWzFdID0gKC1wMCAqIG1bMV0gKyBwMSAqIG1bMF0gKyBtWzRdICogbVsxXSAtIG1bNV0gKiBtWzBdKSAvIGQ7CiAgfQogIHN0YXRpYyBheGlhbEFsaWduZWRCb3VuZGluZ0JveChyZWN0LCB0cmFuc2Zvcm0sIG91dHB1dCkgewogICAgY29uc3QgbTAgPSB0cmFuc2Zvcm1bMF07CiAgICBjb25zdCBtMSA9IHRyYW5zZm9ybVsxXTsKICAgIGNvbnN0IG0yID0gdHJhbnNmb3JtWzJdOwogICAgY29uc3QgbTMgPSB0cmFuc2Zvcm1bM107CiAgICBjb25zdCBtNCA9IHRyYW5zZm9ybVs0XTsKICAgIGNvbnN0IG01ID0gdHJhbnNmb3JtWzVdOwogICAgY29uc3QgcjAgPSByZWN0WzBdOwogICAgY29uc3QgcjEgPSByZWN0WzFdOwogICAgY29uc3QgcjIgPSByZWN0WzJdOwogICAgY29uc3QgcjMgPSByZWN0WzNdOwogICAgbGV0IGEwID0gbTAgKiByMCArIG00OwogICAgbGV0IGEyID0gYTA7CiAgICBsZXQgYTEgPSBtMCAqIHIyICsgbTQ7CiAgICBsZXQgYTMgPSBhMTsKICAgIGxldCBiMCA9IG0zICogcjEgKyBtNTsKICAgIGxldCBiMiA9IGIwOwogICAgbGV0IGIxID0gbTMgKiByMyArIG01OwogICAgbGV0IGIzID0gYjE7CiAgICBpZiAobTEgIT09IDAgfHwgbTIgIT09IDApIHsKICAgICAgY29uc3QgbTFyMCA9IG0xICogcjA7CiAgICAgIGNvbnN0IG0xcjIgPSBtMSAqIHIyOwogICAgICBjb25zdCBtMnIxID0gbTIgKiByMTsKICAgICAgY29uc3QgbTJyMyA9IG0yICogcjM7CiAgICAgIGEwICs9IG0ycjE7CiAgICAgIGEzICs9IG0ycjE7CiAgICAgIGExICs9IG0ycjM7CiAgICAgIGEyICs9IG0ycjM7CiAgICAgIGIwICs9IG0xcjA7CiAgICAgIGIzICs9IG0xcjA7CiAgICAgIGIxICs9IG0xcjI7CiAgICAgIGIyICs9IG0xcjI7CiAgICB9CiAgICBvdXRwdXRbMF0gPSBNYXRoLm1pbihvdXRwdXRbMF0sIGEwLCBhMSwgYTIsIGEzKTsKICAgIG91dHB1dFsxXSA9IE1hdGgubWluKG91dHB1dFsxXSwgYjAsIGIxLCBiMiwgYjMpOwogICAgb3V0cHV0WzJdID0gTWF0aC5tYXgob3V0cHV0WzJdLCBhMCwgYTEsIGEyLCBhMyk7CiAgICBvdXRwdXRbM10gPSBNYXRoLm1heChvdXRwdXRbM10sIGIwLCBiMSwgYjIsIGIzKTsKICB9CiAgc3RhdGljIGludmVyc2VUcmFuc2Zvcm0obSkgewogICAgY29uc3QgZCA9IG1bMF0gKiBtWzNdIC0gbVsxXSAqIG1bMl07CiAgICByZXR1cm4gW21bM10gLyBkLCAtbVsxXSAvIGQsIC1tWzJdIC8gZCwgbVswXSAvIGQsIChtWzJdICogbVs1XSAtIG1bNF0gKiBtWzNdKSAvIGQsIChtWzRdICogbVsxXSAtIG1bNV0gKiBtWzBdKSAvIGRdOwogIH0KICBzdGF0aWMgc2luZ3VsYXJWYWx1ZURlY29tcG9zZTJkU2NhbGUobWF0cml4LCBvdXRwdXQpIHsKICAgIGNvbnN0IG0wID0gbWF0cml4WzBdOwogICAgY29uc3QgbTEgPSBtYXRyaXhbMV07CiAgICBjb25zdCBtMiA9IG1hdHJpeFsyXTsKICAgIGNvbnN0IG0zID0gbWF0cml4WzNdOwogICAgY29uc3QgYSA9IG0wICoqIDIgKyBtMSAqKiAyOwogICAgY29uc3QgYiA9IG0wICogbTIgKyBtMSAqIG0zOwogICAgY29uc3QgYyA9IG0yICoqIDIgKyBtMyAqKiAyOwogICAgY29uc3QgZmlyc3QgPSAoYSArIGMpIC8gMjsKICAgIGNvbnN0IHNlY29uZCA9IE1hdGguc3FydChmaXJzdCAqKiAyIC0gKGEgKiBjIC0gYiAqKiAyKSk7CiAgICBvdXRwdXRbMF0gPSBNYXRoLnNxcnQoZmlyc3QgKyBzZWNvbmQgfHwgMSk7CiAgICBvdXRwdXRbMV0gPSBNYXRoLnNxcnQoZmlyc3QgLSBzZWNvbmQgfHwgMSk7CiAgfQogIHN0YXRpYyBub3JtYWxpemVSZWN0KHJlY3QpIHsKICAgIGNvbnN0IHIgPSByZWN0LnNsaWNlKDApOwogICAgaWYgKHJlY3RbMF0gPiByZWN0WzJdKSB7CiAgICAgIHJbMF0gPSByZWN0WzJdOwogICAgICByWzJdID0gcmVjdFswXTsKICAgIH0KICAgIGlmIChyZWN0WzFdID4gcmVjdFszXSkgewogICAgICByWzFdID0gcmVjdFszXTsKICAgICAgclszXSA9IHJlY3RbMV07CiAgICB9CiAgICByZXR1cm4gcjsKICB9CiAgc3RhdGljIGludGVyc2VjdChyZWN0MSwgcmVjdDIpIHsKICAgIGNvbnN0IHhMb3cgPSBNYXRoLm1heChNYXRoLm1pbihyZWN0MVswXSwgcmVjdDFbMl0pLCBNYXRoLm1pbihyZWN0MlswXSwgcmVjdDJbMl0pKTsKICAgIGNvbnN0IHhIaWdoID0gTWF0aC5taW4oTWF0aC5tYXgocmVjdDFbMF0sIHJlY3QxWzJdKSwgTWF0aC5tYXgocmVjdDJbMF0sIHJlY3QyWzJdKSk7CiAgICBpZiAoeExvdyA+IHhIaWdoKSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgY29uc3QgeUxvdyA9IE1hdGgubWF4KE1hdGgubWluKHJlY3QxWzFdLCByZWN0MVszXSksIE1hdGgubWluKHJlY3QyWzFdLCByZWN0MlszXSkpOwogICAgY29uc3QgeUhpZ2ggPSBNYXRoLm1pbihNYXRoLm1heChyZWN0MVsxXSwgcmVjdDFbM10pLCBNYXRoLm1heChyZWN0MlsxXSwgcmVjdDJbM10pKTsKICAgIGlmICh5TG93ID4geUhpZ2gpIHsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICByZXR1cm4gW3hMb3csIHlMb3csIHhIaWdoLCB5SGlnaF07CiAgfQogIHN0YXRpYyBwb2ludEJvdW5kaW5nQm94KHgsIHksIG1pbk1heCkgewogICAgbWluTWF4WzBdID0gTWF0aC5taW4obWluTWF4WzBdLCB4KTsKICAgIG1pbk1heFsxXSA9IE1hdGgubWluKG1pbk1heFsxXSwgeSk7CiAgICBtaW5NYXhbMl0gPSBNYXRoLm1heChtaW5NYXhbMl0sIHgpOwogICAgbWluTWF4WzNdID0gTWF0aC5tYXgobWluTWF4WzNdLCB5KTsKICB9CiAgc3RhdGljIHJlY3RCb3VuZGluZ0JveCh4MCwgeTAsIHgxLCB5MSwgbWluTWF4KSB7CiAgICBtaW5NYXhbMF0gPSBNYXRoLm1pbihtaW5NYXhbMF0sIHgwLCB4MSk7CiAgICBtaW5NYXhbMV0gPSBNYXRoLm1pbihtaW5NYXhbMV0sIHkwLCB5MSk7CiAgICBtaW5NYXhbMl0gPSBNYXRoLm1heChtaW5NYXhbMl0sIHgwLCB4MSk7CiAgICBtaW5NYXhbM10gPSBNYXRoLm1heChtaW5NYXhbM10sIHkwLCB5MSk7CiAgfQogIHN0YXRpYyAjZ2V0RXh0cmVtdW1PbkN1cnZlKHgwLCB4MSwgeDIsIHgzLCB5MCwgeTEsIHkyLCB5MywgdCwgbWluTWF4KSB7CiAgICBpZiAodCA8PSAwIHx8IHQgPj0gMSkgewogICAgICByZXR1cm47CiAgICB9CiAgICBjb25zdCBtdCA9IDEgLSB0OwogICAgY29uc3QgdHQgPSB0ICogdDsKICAgIGNvbnN0IHR0dCA9IHR0ICogdDsKICAgIGNvbnN0IHggPSBtdCAqIChtdCAqIChtdCAqIHgwICsgMyAqIHQgKiB4MSkgKyAzICogdHQgKiB4MikgKyB0dHQgKiB4MzsKICAgIGNvbnN0IHkgPSBtdCAqIChtdCAqIChtdCAqIHkwICsgMyAqIHQgKiB5MSkgKyAzICogdHQgKiB5MikgKyB0dHQgKiB5MzsKICAgIG1pbk1heFswXSA9IE1hdGgubWluKG1pbk1heFswXSwgeCk7CiAgICBtaW5NYXhbMV0gPSBNYXRoLm1pbihtaW5NYXhbMV0sIHkpOwogICAgbWluTWF4WzJdID0gTWF0aC5tYXgobWluTWF4WzJdLCB4KTsKICAgIG1pbk1heFszXSA9IE1hdGgubWF4KG1pbk1heFszXSwgeSk7CiAgfQogIHN0YXRpYyAjZ2V0RXh0cmVtdW0oeDAsIHgxLCB4MiwgeDMsIHkwLCB5MSwgeTIsIHkzLCBhLCBiLCBjLCBtaW5NYXgpIHsKICAgIGlmIChNYXRoLmFicyhhKSA8IDFlLTEyKSB7CiAgICAgIGlmIChNYXRoLmFicyhiKSA+PSAxZS0xMikgewogICAgICAgIHRoaXMuI2dldEV4dHJlbXVtT25DdXJ2ZSh4MCwgeDEsIHgyLCB4MywgeTAsIHkxLCB5MiwgeTMsIC1jIC8gYiwgbWluTWF4KTsKICAgICAgfQogICAgICByZXR1cm47CiAgICB9CiAgICBjb25zdCBkZWx0YSA9IGIgKiogMiAtIDQgKiBjICogYTsKICAgIGlmIChkZWx0YSA8IDApIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgY29uc3Qgc3FydERlbHRhID0gTWF0aC5zcXJ0KGRlbHRhKTsKICAgIGNvbnN0IGEyID0gMiAqIGE7CiAgICB0aGlzLiNnZXRFeHRyZW11bU9uQ3VydmUoeDAsIHgxLCB4MiwgeDMsIHkwLCB5MSwgeTIsIHkzLCAoLWIgKyBzcXJ0RGVsdGEpIC8gYTIsIG1pbk1heCk7CiAgICB0aGlzLiNnZXRFeHRyZW11bU9uQ3VydmUoeDAsIHgxLCB4MiwgeDMsIHkwLCB5MSwgeTIsIHkzLCAoLWIgLSBzcXJ0RGVsdGEpIC8gYTIsIG1pbk1heCk7CiAgfQogIHN0YXRpYyBiZXppZXJCb3VuZGluZ0JveCh4MCwgeTAsIHgxLCB5MSwgeDIsIHkyLCB4MywgeTMsIG1pbk1heCkgewogICAgbWluTWF4WzBdID0gTWF0aC5taW4obWluTWF4WzBdLCB4MCwgeDMpOwogICAgbWluTWF4WzFdID0gTWF0aC5taW4obWluTWF4WzFdLCB5MCwgeTMpOwogICAgbWluTWF4WzJdID0gTWF0aC5tYXgobWluTWF4WzJdLCB4MCwgeDMpOwogICAgbWluTWF4WzNdID0gTWF0aC5tYXgobWluTWF4WzNdLCB5MCwgeTMpOwogICAgdGhpcy4jZ2V0RXh0cmVtdW0oeDAsIHgxLCB4MiwgeDMsIHkwLCB5MSwgeTIsIHkzLCAzICogKC14MCArIDMgKiAoeDEgLSB4MikgKyB4MyksIDYgKiAoeDAgLSAyICogeDEgKyB4MiksIDMgKiAoeDEgLSB4MCksIG1pbk1heCk7CiAgICB0aGlzLiNnZXRFeHRyZW11bSh4MCwgeDEsIHgyLCB4MywgeTAsIHkxLCB5MiwgeTMsIDMgKiAoLXkwICsgMyAqICh5MSAtIHkyKSArIHkzKSwgNiAqICh5MCAtIDIgKiB5MSArIHkyKSwgMyAqICh5MSAtIHkwKSwgbWluTWF4KTsKICB9Cn0KY29uc3QgUERGU3RyaW5nVHJhbnNsYXRlVGFibGUgPSBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMHgyZDgsIDB4MmM3LCAweDJjNiwgMHgyZDksIDB4MmRkLCAweDJkYiwgMHgyZGEsIDB4MmRjLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAweDIwMjIsIDB4MjAyMCwgMHgyMDIxLCAweDIwMjYsIDB4MjAxNCwgMHgyMDEzLCAweDE5MiwgMHgyMDQ0LCAweDIwMzksIDB4MjAzYSwgMHgyMjEyLCAweDIwMzAsIDB4MjAxZSwgMHgyMDFjLCAweDIwMWQsIDB4MjAxOCwgMHgyMDE5LCAweDIwMWEsIDB4MjEyMiwgMHhmYjAxLCAweGZiMDIsIDB4MTQxLCAweDE1MiwgMHgxNjAsIDB4MTc4LCAweDE3ZCwgMHgxMzEsIDB4MTQyLCAweDE1MywgMHgxNjEsIDB4MTdlLCAwLCAweDIwYWNdOwpmdW5jdGlvbiBzdHJpbmdUb1BERlN0cmluZyhzdHIsIGtlZXBFc2NhcGVTZXF1ZW5jZSA9IGZhbHNlKSB7CiAgaWYgKHN0clswXSA+PSAiXHhFRiIpIHsKICAgIGxldCBlbmNvZGluZzsKICAgIGlmIChzdHJbMF0gPT09ICJceEZFIiAmJiBzdHJbMV0gPT09ICJceEZGIikgewogICAgICBlbmNvZGluZyA9ICJ1dGYtMTZiZSI7CiAgICAgIGlmIChzdHIubGVuZ3RoICUgMiA9PT0gMSkgewogICAgICAgIHN0ciA9IHN0ci5zbGljZSgwLCAtMSk7CiAgICAgIH0KICAgIH0gZWxzZSBpZiAoc3RyWzBdID09PSAiXHhGRiIgJiYgc3RyWzFdID09PSAiXHhGRSIpIHsKICAgICAgZW5jb2RpbmcgPSAidXRmLTE2bGUiOwogICAgICBpZiAoc3RyLmxlbmd0aCAlIDIgPT09IDEpIHsKICAgICAgICBzdHIgPSBzdHIuc2xpY2UoMCwgLTEpOwogICAgICB9CiAgICB9IGVsc2UgaWYgKHN0clswXSA9PT0gIlx4RUYiICYmIHN0clsxXSA9PT0gIlx4QkIiICYmIHN0clsyXSA9PT0gIlx4QkYiKSB7CiAgICAgIGVuY29kaW5nID0gInV0Zi04IjsKICAgIH0KICAgIGlmIChlbmNvZGluZykgewogICAgICB0cnkgewogICAgICAgIGNvbnN0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoZW5jb2RpbmcsIHsKICAgICAgICAgIGZhdGFsOiB0cnVlCiAgICAgICAgfSk7CiAgICAgICAgY29uc3QgYnVmZmVyID0gc3RyaW5nVG9CeXRlcyhzdHIpOwogICAgICAgIGNvbnN0IGRlY29kZWQgPSBkZWNvZGVyLmRlY29kZShidWZmZXIpOwogICAgICAgIGlmIChrZWVwRXNjYXBlU2VxdWVuY2UgfHwgIWRlY29kZWQuaW5jbHVkZXMoIlx4MWIiKSkgewogICAgICAgICAgcmV0dXJuIGRlY29kZWQ7CiAgICAgICAgfQogICAgICAgIHJldHVybiBkZWNvZGVkLnJlcGxhY2VBbGwoL1x4MWJbXlx4MWJdKig/Olx4MWJ8JCkvZywgIiIpOwogICAgICB9IGNhdGNoIChleCkgewogICAgICAgIHdhcm4oYHN0cmluZ1RvUERGU3RyaW5nOiAiJHtleH0iLmApOwogICAgICB9CiAgICB9CiAgfQogIGNvbnN0IHN0ckJ1ZiA9IFtdOwogIGZvciAobGV0IGkgPSAwLCBpaSA9IHN0ci5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICBjb25zdCBjaGFyQ29kZSA9IHN0ci5jaGFyQ29kZUF0KGkpOwogICAgaWYgKCFrZWVwRXNjYXBlU2VxdWVuY2UgJiYgY2hhckNvZGUgPT09IDB4MWIpIHsKICAgICAgd2hpbGUgKCsraSA8IGlpICYmIHN0ci5jaGFyQ29kZUF0KGkpICE9PSAweDFiKSB7fQogICAgICBjb250aW51ZTsKICAgIH0KICAgIGNvbnN0IGNvZGUgPSBQREZTdHJpbmdUcmFuc2xhdGVUYWJsZVtjaGFyQ29kZV07CiAgICBzdHJCdWYucHVzaChjb2RlID8gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKSA6IHN0ci5jaGFyQXQoaSkpOwogIH0KICByZXR1cm4gc3RyQnVmLmpvaW4oIiIpOwp9CmZ1bmN0aW9uIHN0cmluZ1RvVVRGOFN0cmluZyhzdHIpIHsKICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShzdHIpKTsKfQpmdW5jdGlvbiB1dGY4U3RyaW5nVG9TdHJpbmcoc3RyKSB7CiAgcmV0dXJuIHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChzdHIpKTsKfQpmdW5jdGlvbiBpc0FycmF5RXF1YWwoYXJyMSwgYXJyMikgewogIGlmIChhcnIxLmxlbmd0aCAhPT0gYXJyMi5sZW5ndGgpIHsKICAgIHJldHVybiBmYWxzZTsKICB9CiAgZm9yIChsZXQgaSA9IDAsIGlpID0gYXJyMS5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICBpZiAoYXJyMVtpXSAhPT0gYXJyMltpXSkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfQogIHJldHVybiB0cnVlOwp9CmZ1bmN0aW9uIGdldE1vZGlmaWNhdGlvbkRhdGUoZGF0ZSA9IG5ldyBEYXRlKCkpIHsKICBpZiAoIShkYXRlIGluc3RhbmNlb2YgRGF0ZSkpIHsKICAgIGRhdGUgPSBuZXcgRGF0ZShkYXRlKTsKICB9CiAgY29uc3QgYnVmZmVyID0gW2RhdGUuZ2V0VVRDRnVsbFllYXIoKS50b1N0cmluZygpLCAoZGF0ZS5nZXRVVENNb250aCgpICsgMSkudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAiMCIpLCBkYXRlLmdldFVUQ0RhdGUoKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsICIwIiksIGRhdGUuZ2V0VVRDSG91cnMoKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsICIwIiksIGRhdGUuZ2V0VVRDTWludXRlcygpLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgIjAiKSwgZGF0ZS5nZXRVVENTZWNvbmRzKCkudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAiMCIpXTsKICByZXR1cm4gYnVmZmVyLmpvaW4oIiIpOwp9CmxldCBOb3JtYWxpemVSZWdleCA9IG51bGw7CmxldCBOb3JtYWxpemF0aW9uTWFwID0gbnVsbDsKZnVuY3Rpb24gbm9ybWFsaXplVW5pY29kZShzdHIpIHsKICBpZiAoIU5vcm1hbGl6ZVJlZ2V4KSB7CiAgICBOb3JtYWxpemVSZWdleCA9IC8oW1x1MDBhMFx1MDBiNVx1MDM3ZVx1MGViM1x1MjAwMC1cdTIwMGFcdTIwMmZcdTIxMjZcdWZiMDAtXHVmYjA0XHVmYjA2XHVmYjIwLVx1ZmIzNlx1ZmIzOC1cdWZiM2NcdWZiM2VcdWZiNDAtXHVmYjQxXHVmYjQzLVx1ZmI0NFx1ZmI0Ni1cdWZiYTFcdWZiYTQtXHVmYmE5XHVmYmFlLVx1ZmJiMVx1ZmJkMy1cdWZiZGNcdWZiZGUtXHVmYmU3XHVmYmVhLVx1ZmJmOFx1ZmJmYy1cdWZiZmRcdWZjMDAtXHVmYzVkXHVmYzY0LVx1ZmNmMVx1ZmNmNS1cdWZkM2RcdWZkODhcdWZkZjRcdWZkZmEtXHVmZGZiXHVmZTcxXHVmZTc3XHVmZTc5XHVmZTdiXHVmZTdkXSspfChcdWZiMDUrKS9ndTsKICAgIE5vcm1hbGl6YXRpb25NYXAgPSBuZXcgTWFwKFtbIu+shSIsICLFv3QiXV0pOwogIH0KICByZXR1cm4gc3RyLnJlcGxhY2VBbGwoTm9ybWFsaXplUmVnZXgsIChfLCBwMSwgcDIpID0+IHAxID8gcDEubm9ybWFsaXplKCJORktDIikgOiBOb3JtYWxpemF0aW9uTWFwLmdldChwMikpOwp9CmZ1bmN0aW9uIGdldFV1aWQoKSB7CiAgaWYgKHR5cGVvZiBjcnlwdG8ucmFuZG9tVVVJRCA9PT0gImZ1bmN0aW9uIikgewogICAgcmV0dXJuIGNyeXB0by5yYW5kb21VVUlEKCk7CiAgfQogIGNvbnN0IGJ1ZiA9IG5ldyBVaW50OEFycmF5KDMyKTsKICBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGJ1Zik7CiAgcmV0dXJuIGJ5dGVzVG9TdHJpbmcoYnVmKTsKfQpjb25zdCBBbm5vdGF0aW9uUHJlZml4ID0gInBkZmpzX2ludGVybmFsX2lkXyI7CmZ1bmN0aW9uIF9pc1ZhbGlkRXhwbGljaXREZXN0KHZhbGlkUmVmLCB2YWxpZE5hbWUsIGRlc3QpIHsKICBpZiAoIUFycmF5LmlzQXJyYXkoZGVzdCkgfHwgZGVzdC5sZW5ndGggPCAyKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQogIGNvbnN0IFtwYWdlLCB6b29tLCAuLi5hcmdzXSA9IGRlc3Q7CiAgaWYgKCF2YWxpZFJlZihwYWdlKSAmJiAhTnVtYmVyLmlzSW50ZWdlcihwYWdlKSkgewogICAgcmV0dXJuIGZhbHNlOwogIH0KICBpZiAoIXZhbGlkTmFtZSh6b29tKSkgewogICAgcmV0dXJuIGZhbHNlOwogIH0KICBjb25zdCBhcmdzTGVuID0gYXJncy5sZW5ndGg7CiAgbGV0IGFsbG93TnVsbCA9IHRydWU7CiAgc3dpdGNoICh6b29tLm5hbWUpIHsKICAgIGNhc2UgIlhZWiI6CiAgICAgIGlmIChhcmdzTGVuIDwgMiB8fCBhcmdzTGVuID4gMykgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgICBicmVhazsKICAgIGNhc2UgIkZpdCI6CiAgICBjYXNlICJGaXRCIjoKICAgICAgcmV0dXJuIGFyZ3NMZW4gPT09IDA7CiAgICBjYXNlICJGaXRIIjoKICAgIGNhc2UgIkZpdEJIIjoKICAgIGNhc2UgIkZpdFYiOgogICAgY2FzZSAiRml0QlYiOgogICAgICBpZiAoYXJnc0xlbiA+IDEpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgYnJlYWs7CiAgICBjYXNlICJGaXRSIjoKICAgICAgaWYgKGFyZ3NMZW4gIT09IDQpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgYWxsb3dOdWxsID0gZmFsc2U7CiAgICAgIGJyZWFrOwogICAgZGVmYXVsdDoKICAgICAgcmV0dXJuIGZhbHNlOwogIH0KICBmb3IgKGNvbnN0IGFyZyBvZiBhcmdzKSB7CiAgICBpZiAodHlwZW9mIGFyZyA9PT0gIm51bWJlciIgfHwgYWxsb3dOdWxsICYmIGFyZyA9PT0gbnVsbCkgewogICAgICBjb250aW51ZTsKICAgIH0KICAgIHJldHVybiBmYWxzZTsKICB9CiAgcmV0dXJuIHRydWU7Cn0KZnVuY3Rpb24gTWF0aENsYW1wKHYsIG1pbiwgbWF4KSB7CiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KHYsIG1pbiksIG1heCk7Cn0KZnVuY3Rpb24gdG9IZXhVdGlsKGFycikgewogIGlmIChVaW50OEFycmF5LnByb3RvdHlwZS50b0hleCkgewogICAgcmV0dXJuIGFyci50b0hleCgpOwogIH0KICByZXR1cm4gQXJyYXkuZnJvbShhcnIsIG51bSA9PiBoZXhOdW1iZXJzW251bV0pLmpvaW4oIiIpOwp9CmZ1bmN0aW9uIHRvQmFzZTY0VXRpbChhcnIpIHsKICBpZiAoVWludDhBcnJheS5wcm90b3R5cGUudG9CYXNlNjQpIHsKICAgIHJldHVybiBhcnIudG9CYXNlNjQoKTsKICB9CiAgcmV0dXJuIGJ0b2EoYnl0ZXNUb1N0cmluZyhhcnIpKTsKfQpmdW5jdGlvbiBmcm9tQmFzZTY0VXRpbChzdHIpIHsKICBpZiAoVWludDhBcnJheS5mcm9tQmFzZTY0KSB7CiAgICByZXR1cm4gVWludDhBcnJheS5mcm9tQmFzZTY0KHN0cik7CiAgfQogIHJldHVybiBzdHJpbmdUb0J5dGVzKGF0b2Ioc3RyKSk7Cn0KaWYgKHR5cGVvZiBNYXRoLnN1bVByZWNpc2UgIT09ICJmdW5jdGlvbiIpIHsKICBNYXRoLnN1bVByZWNpc2UgPSBmdW5jdGlvbiAobnVtYmVycykgewogICAgcmV0dXJuIG51bWJlcnMucmVkdWNlKChhLCBiKSA9PiBhICsgYiwgMCk7CiAgfTsKfQppZiAodHlwZW9mIEFib3J0U2lnbmFsLmFueSAhPT0gImZ1bmN0aW9uIikgewogIEFib3J0U2lnbmFsLmFueSA9IGZ1bmN0aW9uIChpdGVyYWJsZSkgewogICAgY29uc3QgYWMgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7CiAgICBjb25zdCB7CiAgICAgIHNpZ25hbAogICAgfSA9IGFjOwogICAgZm9yIChjb25zdCBzIG9mIGl0ZXJhYmxlKSB7CiAgICAgIGlmIChzLmFib3J0ZWQpIHsKICAgICAgICBhYy5hYm9ydChzLnJlYXNvbik7CiAgICAgICAgcmV0dXJuIHNpZ25hbDsKICAgICAgfQogICAgfQogICAgZm9yIChjb25zdCBzIG9mIGl0ZXJhYmxlKSB7CiAgICAgIHMuYWRkRXZlbnRMaXN0ZW5lcigiYWJvcnQiLCAoKSA9PiB7CiAgICAgICAgYWMuYWJvcnQocy5yZWFzb24pOwogICAgICB9LCB7CiAgICAgICAgc2lnbmFsCiAgICAgIH0pOwogICAgfQogICAgcmV0dXJuIHNpZ25hbDsKICB9Owp9CgovLyBFWFRFUk5BTCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5pdGVyYXRvci5ldmVyeS5qcwp2YXIgZXNfaXRlcmF0b3JfZXZlcnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExNDgpOwo7Ly8gLi9zcmMvY29yZS9wcmltaXRpdmVzLmpzCgoKCgoKCgoKCmNvbnN0IENJUkNVTEFSX1JFRiA9IFN5bWJvbCgiQ0lSQ1VMQVJfUkVGIik7CmNvbnN0IEVPRiA9IFN5bWJvbCgiRU9GIik7CmxldCBDbWRDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7CmxldCBOYW1lQ2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpOwpsZXQgUmVmQ2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpOwpmdW5jdGlvbiBjbGVhclByaW1pdGl2ZUNhY2hlcygpIHsKICBDbWRDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgTmFtZUNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICBSZWZDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7Cn0KY2xhc3MgTmFtZSB7CiAgY29uc3RydWN0b3IobmFtZSkgewogICAgdGhpcy5uYW1lID0gbmFtZTsKICB9CiAgc3RhdGljIGdldChuYW1lKSB7CiAgICByZXR1cm4gTmFtZUNhY2hlW25hbWVdIHx8PSBuZXcgTmFtZShuYW1lKTsKICB9Cn0KY2xhc3MgQ21kIHsKICBjb25zdHJ1Y3RvcihjbWQpIHsKICAgIHRoaXMuY21kID0gY21kOwogIH0KICBzdGF0aWMgZ2V0KGNtZCkgewogICAgcmV0dXJuIENtZENhY2hlW2NtZF0gfHw9IG5ldyBDbWQoY21kKTsKICB9Cn0KY29uc3Qgbm9uU2VyaWFsaXphYmxlID0gZnVuY3Rpb24gbm9uU2VyaWFsaXphYmxlQ2xvc3VyZSgpIHsKICByZXR1cm4gbm9uU2VyaWFsaXphYmxlOwp9OwpjbGFzcyBEaWN0IHsKICBjb25zdHJ1Y3Rvcih4cmVmID0gbnVsbCkgewogICAgdGhpcy5fbWFwID0gbmV3IE1hcCgpOwogICAgdGhpcy54cmVmID0geHJlZjsKICAgIHRoaXMub2JqSWQgPSBudWxsOwogICAgdGhpcy5zdXBwcmVzc0VuY3J5cHRpb24gPSBmYWxzZTsKICAgIHRoaXMuX19ub25TZXJpYWxpemFibGVfXyA9IG5vblNlcmlhbGl6YWJsZTsKICB9CiAgYXNzaWduWHJlZihuZXdYcmVmKSB7CiAgICB0aGlzLnhyZWYgPSBuZXdYcmVmOwogIH0KICBnZXQgc2l6ZSgpIHsKICAgIHJldHVybiB0aGlzLl9tYXAuc2l6ZTsKICB9CiAgZ2V0KGtleTEsIGtleTIsIGtleTMpIHsKICAgIGxldCB2YWx1ZSA9IHRoaXMuX21hcC5nZXQoa2V5MSk7CiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiBrZXkyICE9PSB1bmRlZmluZWQpIHsKICAgICAgdmFsdWUgPSB0aGlzLl9tYXAuZ2V0KGtleTIpOwogICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiBrZXkzICE9PSB1bmRlZmluZWQpIHsKICAgICAgICB2YWx1ZSA9IHRoaXMuX21hcC5nZXQoa2V5Myk7CiAgICAgIH0KICAgIH0KICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFJlZiAmJiB0aGlzLnhyZWYpIHsKICAgICAgcmV0dXJuIHRoaXMueHJlZi5mZXRjaCh2YWx1ZSwgdGhpcy5zdXBwcmVzc0VuY3J5cHRpb24pOwogICAgfQogICAgcmV0dXJuIHZhbHVlOwogIH0KICBhc3luYyBnZXRBc3luYyhrZXkxLCBrZXkyLCBrZXkzKSB7CiAgICBsZXQgdmFsdWUgPSB0aGlzLl9tYXAuZ2V0KGtleTEpOwogICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgJiYga2V5MiAhPT0gdW5kZWZpbmVkKSB7CiAgICAgIHZhbHVlID0gdGhpcy5fbWFwLmdldChrZXkyKTsKICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgJiYga2V5MyAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgdmFsdWUgPSB0aGlzLl9tYXAuZ2V0KGtleTMpOwogICAgICB9CiAgICB9CiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBSZWYgJiYgdGhpcy54cmVmKSB7CiAgICAgIHJldHVybiB0aGlzLnhyZWYuZmV0Y2hBc3luYyh2YWx1ZSwgdGhpcy5zdXBwcmVzc0VuY3J5cHRpb24pOwogICAgfQogICAgcmV0dXJuIHZhbHVlOwogIH0KICBnZXRBcnJheShrZXkxLCBrZXkyLCBrZXkzKSB7CiAgICBsZXQgdmFsdWUgPSB0aGlzLl9tYXAuZ2V0KGtleTEpOwogICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgJiYga2V5MiAhPT0gdW5kZWZpbmVkKSB7CiAgICAgIHZhbHVlID0gdGhpcy5fbWFwLmdldChrZXkyKTsKICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgJiYga2V5MyAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgdmFsdWUgPSB0aGlzLl9tYXAuZ2V0KGtleTMpOwogICAgICB9CiAgICB9CiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBSZWYgJiYgdGhpcy54cmVmKSB7CiAgICAgIHZhbHVlID0gdGhpcy54cmVmLmZldGNoKHZhbHVlLCB0aGlzLnN1cHByZXNzRW5jcnlwdGlvbik7CiAgICB9CiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHsKICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgpOwogICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSB2YWx1ZS5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgICAgaWYgKHZhbHVlW2ldIGluc3RhbmNlb2YgUmVmICYmIHRoaXMueHJlZikgewogICAgICAgICAgdmFsdWVbaV0gPSB0aGlzLnhyZWYuZmV0Y2godmFsdWVbaV0sIHRoaXMuc3VwcHJlc3NFbmNyeXB0aW9uKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIHJldHVybiB2YWx1ZTsKICB9CiAgZ2V0UmF3KGtleSkgewogICAgcmV0dXJuIHRoaXMuX21hcC5nZXQoa2V5KTsKICB9CiAgZ2V0S2V5cygpIHsKICAgIHJldHVybiBbLi4udGhpcy5fbWFwLmtleXMoKV07CiAgfQogIGdldFJhd1ZhbHVlcygpIHsKICAgIHJldHVybiBbLi4udGhpcy5fbWFwLnZhbHVlcygpXTsKICB9CiAgc2V0KGtleSwgdmFsdWUpIHsKICAgIHRoaXMuX21hcC5zZXQoa2V5LCB2YWx1ZSk7CiAgfQogIHNldElmTm90RXhpc3RzKGtleSwgdmFsdWUpIHsKICAgIGlmICghdGhpcy5oYXMoa2V5KSkgewogICAgICB0aGlzLnNldChrZXksIHZhbHVlKTsKICAgIH0KICB9CiAgc2V0SWZOdW1iZXIoa2V5LCB2YWx1ZSkgewogICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gIm51bWJlciIpIHsKICAgICAgdGhpcy5zZXQoa2V5LCB2YWx1ZSk7CiAgICB9CiAgfQogIHNldElmQXJyYXkoa2V5LCB2YWx1ZSkgewogICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpIHx8IEFycmF5QnVmZmVyLmlzVmlldyh2YWx1ZSkpIHsKICAgICAgdGhpcy5zZXQoa2V5LCB2YWx1ZSk7CiAgICB9CiAgfQogIHNldElmRGVmaW5lZChrZXksIHZhbHVlKSB7CiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCkgewogICAgICB0aGlzLnNldChrZXksIHZhbHVlKTsKICAgIH0KICB9CiAgc2V0SWZOYW1lKGtleSwgdmFsdWUpIHsKICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICJzdHJpbmciKSB7CiAgICAgIHRoaXMuc2V0KGtleSwgTmFtZS5nZXQodmFsdWUpKTsKICAgIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBOYW1lKSB7CiAgICAgIHRoaXMuc2V0KGtleSwgdmFsdWUpOwogICAgfQogIH0KICBoYXMoa2V5KSB7CiAgICByZXR1cm4gdGhpcy5fbWFwLmhhcyhrZXkpOwogIH0KICAqW1N5bWJvbC5pdGVyYXRvcl0oKSB7CiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiB0aGlzLl9tYXApIHsKICAgICAgeWllbGQgW2tleSwgdmFsdWUgaW5zdGFuY2VvZiBSZWYgJiYgdGhpcy54cmVmID8gdGhpcy54cmVmLmZldGNoKHZhbHVlLCB0aGlzLnN1cHByZXNzRW5jcnlwdGlvbikgOiB2YWx1ZV07CiAgICB9CiAgfQogIHN0YXRpYyBnZXQgZW1wdHkoKSB7CiAgICBjb25zdCBlbXB0eURpY3QgPSBuZXcgRGljdChudWxsKTsKICAgIGVtcHR5RGljdC5zZXQgPSAoa2V5LCB2YWx1ZSkgPT4gewogICAgICB1bnJlYWNoYWJsZSgiU2hvdWxkIG5vdCBjYWxsIGBzZXRgIG9uIHRoZSBlbXB0eSBkaWN0aW9uYXJ5LiIpOwogICAgfTsKICAgIHJldHVybiBzaGFkb3codGhpcywgImVtcHR5IiwgZW1wdHlEaWN0KTsKICB9CiAgc3RhdGljIG1lcmdlKHsKICAgIHhyZWYsCiAgICBkaWN0QXJyYXksCiAgICBtZXJnZVN1YkRpY3RzID0gZmFsc2UKICB9KSB7CiAgICBjb25zdCBtZXJnZWREaWN0ID0gbmV3IERpY3QoeHJlZiksCiAgICAgIHByb3BlcnRpZXMgPSBuZXcgTWFwKCk7CiAgICBmb3IgKGNvbnN0IGRpY3Qgb2YgZGljdEFycmF5KSB7CiAgICAgIGlmICghKGRpY3QgaW5zdGFuY2VvZiBEaWN0KSkgewogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGRpY3QuX21hcCkgewogICAgICAgIGxldCBwcm9wZXJ0eSA9IHByb3BlcnRpZXMuZ2V0KGtleSk7CiAgICAgICAgaWYgKHByb3BlcnR5ID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgIHByb3BlcnR5ID0gW107CiAgICAgICAgICBwcm9wZXJ0aWVzLnNldChrZXksIHByb3BlcnR5KTsKICAgICAgICB9IGVsc2UgaWYgKCFtZXJnZVN1YkRpY3RzIHx8ICEodmFsdWUgaW5zdGFuY2VvZiBEaWN0KSkgewogICAgICAgICAgY29udGludWU7CiAgICAgICAgfQogICAgICAgIHByb3BlcnR5LnB1c2godmFsdWUpOwogICAgICB9CiAgICB9CiAgICBmb3IgKGNvbnN0IFtuYW1lLCB2YWx1ZXNdIG9mIHByb3BlcnRpZXMpIHsKICAgICAgaWYgKHZhbHVlcy5sZW5ndGggPT09IDEgfHwgISh2YWx1ZXNbMF0gaW5zdGFuY2VvZiBEaWN0KSkgewogICAgICAgIG1lcmdlZERpY3QuX21hcC5zZXQobmFtZSwgdmFsdWVzWzBdKTsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBjb25zdCBzdWJEaWN0ID0gbmV3IERpY3QoeHJlZik7CiAgICAgIGZvciAoY29uc3QgZGljdCBvZiB2YWx1ZXMpIHsKICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBkaWN0Ll9tYXApIHsKICAgICAgICAgIGlmICghc3ViRGljdC5fbWFwLmhhcyhrZXkpKSB7CiAgICAgICAgICAgIHN1YkRpY3QuX21hcC5zZXQoa2V5LCB2YWx1ZSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmIChzdWJEaWN0LnNpemUgPiAwKSB7CiAgICAgICAgbWVyZ2VkRGljdC5fbWFwLnNldChuYW1lLCBzdWJEaWN0KTsKICAgICAgfQogICAgfQogICAgcHJvcGVydGllcy5jbGVhcigpOwogICAgcmV0dXJuIG1lcmdlZERpY3Quc2l6ZSA+IDAgPyBtZXJnZWREaWN0IDogRGljdC5lbXB0eTsKICB9CiAgY2xvbmUoKSB7CiAgICBjb25zdCBkaWN0ID0gbmV3IERpY3QodGhpcy54cmVmKTsKICAgIGZvciAoY29uc3Qga2V5IG9mIHRoaXMuZ2V0S2V5cygpKSB7CiAgICAgIGRpY3Quc2V0KGtleSwgdGhpcy5nZXRSYXcoa2V5KSk7CiAgICB9CiAgICByZXR1cm4gZGljdDsKICB9CiAgZGVsZXRlKGtleSkgewogICAgZGVsZXRlIHRoaXMuX21hcFtrZXldOwogIH0KfQpjbGFzcyBSZWYgewogIGNvbnN0cnVjdG9yKG51bSwgZ2VuKSB7CiAgICB0aGlzLm51bSA9IG51bTsKICAgIHRoaXMuZ2VuID0gZ2VuOwogIH0KICB0b1N0cmluZygpIHsKICAgIGlmICh0aGlzLmdlbiA9PT0gMCkgewogICAgICByZXR1cm4gYCR7dGhpcy5udW19UmA7CiAgICB9CiAgICByZXR1cm4gYCR7dGhpcy5udW19UiR7dGhpcy5nZW59YDsKICB9CiAgc3RhdGljIGZyb21TdHJpbmcoc3RyKSB7CiAgICBjb25zdCByZWYgPSBSZWZDYWNoZVtzdHJdOwogICAgaWYgKHJlZikgewogICAgICByZXR1cm4gcmVmOwogICAgfQogICAgY29uc3QgbSA9IC9eKFxkKylSKFxkKikkLy5leGVjKHN0cik7CiAgICBpZiAoIW0gfHwgbVsxXSA9PT0gIjAiKSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgcmV0dXJuIFJlZkNhY2hlW3N0cl0gPSBuZXcgUmVmKHBhcnNlSW50KG1bMV0pLCAhbVsyXSA/IDAgOiBwYXJzZUludChtWzJdKSk7CiAgfQogIHN0YXRpYyBnZXQobnVtLCBnZW4pIHsKICAgIGNvbnN0IGtleSA9IGdlbiA9PT0gMCA/IGAke251bX1SYCA6IGAke251bX1SJHtnZW59YDsKICAgIHJldHVybiBSZWZDYWNoZVtrZXldIHx8PSBuZXcgUmVmKG51bSwgZ2VuKTsKICB9Cn0KY2xhc3MgUmVmU2V0IHsKICBjb25zdHJ1Y3RvcihwYXJlbnQgPSBudWxsKSB7CiAgICB0aGlzLl9zZXQgPSBuZXcgU2V0KHBhcmVudD8uX3NldCk7CiAgfQogIGhhcyhyZWYpIHsKICAgIHJldHVybiB0aGlzLl9zZXQuaGFzKHJlZi50b1N0cmluZygpKTsKICB9CiAgcHV0KHJlZikgewogICAgdGhpcy5fc2V0LmFkZChyZWYudG9TdHJpbmcoKSk7CiAgfQogIHJlbW92ZShyZWYpIHsKICAgIHRoaXMuX3NldC5kZWxldGUocmVmLnRvU3RyaW5nKCkpOwogIH0KICBbU3ltYm9sLml0ZXJhdG9yXSgpIHsKICAgIHJldHVybiB0aGlzLl9zZXQudmFsdWVzKCk7CiAgfQogIGNsZWFyKCkgewogICAgdGhpcy5fc2V0LmNsZWFyKCk7CiAgfQp9CmNsYXNzIFJlZlNldENhY2hlIHsKICBjb25zdHJ1Y3RvcigpIHsKICAgIHRoaXMuX21hcCA9IG5ldyBNYXAoKTsKICB9CiAgZ2V0IHNpemUoKSB7CiAgICByZXR1cm4gdGhpcy5fbWFwLnNpemU7CiAgfQogIGdldChyZWYpIHsKICAgIHJldHVybiB0aGlzLl9tYXAuZ2V0KHJlZi50b1N0cmluZygpKTsKICB9CiAgaGFzKHJlZikgewogICAgcmV0dXJuIHRoaXMuX21hcC5oYXMocmVmLnRvU3RyaW5nKCkpOwogIH0KICBwdXQocmVmLCBvYmopIHsKICAgIHRoaXMuX21hcC5zZXQocmVmLnRvU3RyaW5nKCksIG9iaik7CiAgfQogIHB1dEFsaWFzKHJlZiwgYWxpYXNSZWYpIHsKICAgIHRoaXMuX21hcC5zZXQocmVmLnRvU3RyaW5nKCksIHRoaXMuZ2V0KGFsaWFzUmVmKSk7CiAgfQogIFtTeW1ib2wuaXRlcmF0b3JdKCkgewogICAgcmV0dXJuIHRoaXMuX21hcC52YWx1ZXMoKTsKICB9CiAgY2xlYXIoKSB7CiAgICB0aGlzLl9tYXAuY2xlYXIoKTsKICB9CiAgKnZhbHVlcygpIHsKICAgIHlpZWxkKiB0aGlzLl9tYXAudmFsdWVzKCk7CiAgfQogICppdGVtcygpIHsKICAgIGZvciAoY29uc3QgW3JlZiwgdmFsdWVdIG9mIHRoaXMuX21hcCkgewogICAgICB5aWVsZCBbUmVmLmZyb21TdHJpbmcocmVmKSwgdmFsdWVdOwogICAgfQogIH0KfQpmdW5jdGlvbiBpc05hbWUodiwgbmFtZSkgewogIHJldHVybiB2IGluc3RhbmNlb2YgTmFtZSAmJiAobmFtZSA9PT0gdW5kZWZpbmVkIHx8IHYubmFtZSA9PT0gbmFtZSk7Cn0KZnVuY3Rpb24gaXNDbWQodiwgY21kKSB7CiAgcmV0dXJuIHYgaW5zdGFuY2VvZiBDbWQgJiYgKGNtZCA9PT0gdW5kZWZpbmVkIHx8IHYuY21kID09PSBjbWQpOwp9CmZ1bmN0aW9uIGlzRGljdCh2LCB0eXBlKSB7CiAgcmV0dXJuIHYgaW5zdGFuY2VvZiBEaWN0ICYmICh0eXBlID09PSB1bmRlZmluZWQgfHwgaXNOYW1lKHYuZ2V0KCJUeXBlIiksIHR5cGUpKTsKfQpmdW5jdGlvbiBpc1JlZnNFcXVhbCh2MSwgdjIpIHsKICByZXR1cm4gdjEubnVtID09PSB2Mi5udW0gJiYgdjEuZ2VuID09PSB2Mi5nZW47Cn0KCjsvLyAuL3NyYy9jb3JlL2Jhc2Vfc3RyZWFtLmpzCgpjbGFzcyBCYXNlU3RyZWFtIHsKICBnZXQgbGVuZ3RoKCkgewogICAgdW5yZWFjaGFibGUoIkFic3RyYWN0IGdldHRlciBgbGVuZ3RoYCBhY2Nlc3NlZCIpOwogIH0KICBnZXQgaXNFbXB0eSgpIHsKICAgIHVucmVhY2hhYmxlKCJBYnN0cmFjdCBnZXR0ZXIgYGlzRW1wdHlgIGFjY2Vzc2VkIik7CiAgfQogIGdldCBpc0RhdGFMb2FkZWQoKSB7CiAgICByZXR1cm4gc2hhZG93KHRoaXMsICJpc0RhdGFMb2FkZWQiLCB0cnVlKTsKICB9CiAgZ2V0Qnl0ZSgpIHsKICAgIHVucmVhY2hhYmxlKCJBYnN0cmFjdCBtZXRob2QgYGdldEJ5dGVgIGNhbGxlZCIpOwogIH0KICBnZXRCeXRlcyhsZW5ndGgpIHsKICAgIHVucmVhY2hhYmxlKCJBYnN0cmFjdCBtZXRob2QgYGdldEJ5dGVzYCBjYWxsZWQiKTsKICB9CiAgYXN5bmMgZ2V0SW1hZ2VEYXRhKGxlbmd0aCwgZGVjb2Rlck9wdGlvbnMpIHsKICAgIHJldHVybiB0aGlzLmdldEJ5dGVzKGxlbmd0aCwgZGVjb2Rlck9wdGlvbnMpOwogIH0KICBhc3luYyBhc3luY0dldEJ5dGVzKCkgewogICAgdW5yZWFjaGFibGUoIkFic3RyYWN0IG1ldGhvZCBgYXN5bmNHZXRCeXRlc2AgY2FsbGVkIik7CiAgfQogIGdldCBpc0FzeW5jKCkgewogICAgcmV0dXJuIGZhbHNlOwogIH0KICBnZXQgaXNBc3luY0RlY29kZXIoKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQogIGdldCBjYW5Bc3luY0RlY29kZUltYWdlRnJvbUJ1ZmZlcigpIHsKICAgIHJldHVybiBmYWxzZTsKICB9CiAgYXN5bmMgZ2V0VHJhbnNmZXJhYmxlSW1hZ2UoKSB7CiAgICByZXR1cm4gbnVsbDsKICB9CiAgcGVla0J5dGUoKSB7CiAgICBjb25zdCBwZWVrZWRCeXRlID0gdGhpcy5nZXRCeXRlKCk7CiAgICBpZiAocGVla2VkQnl0ZSAhPT0gLTEpIHsKICAgICAgdGhpcy5wb3MtLTsKICAgIH0KICAgIHJldHVybiBwZWVrZWRCeXRlOwogIH0KICBwZWVrQnl0ZXMobGVuZ3RoKSB7CiAgICBjb25zdCBieXRlcyA9IHRoaXMuZ2V0Qnl0ZXMobGVuZ3RoKTsKICAgIHRoaXMucG9zIC09IGJ5dGVzLmxlbmd0aDsKICAgIHJldHVybiBieXRlczsKICB9CiAgZ2V0VWludDE2KCkgewogICAgY29uc3QgYjAgPSB0aGlzLmdldEJ5dGUoKTsKICAgIGNvbnN0IGIxID0gdGhpcy5nZXRCeXRlKCk7CiAgICBpZiAoYjAgPT09IC0xIHx8IGIxID09PSAtMSkgewogICAgICByZXR1cm4gLTE7CiAgICB9CiAgICByZXR1cm4gKGIwIDw8IDgpICsgYjE7CiAgfQogIGdldEludDMyKCkgewogICAgY29uc3QgYjAgPSB0aGlzLmdldEJ5dGUoKTsKICAgIGNvbnN0IGIxID0gdGhpcy5nZXRCeXRlKCk7CiAgICBjb25zdCBiMiA9IHRoaXMuZ2V0Qnl0ZSgpOwogICAgY29uc3QgYjMgPSB0aGlzLmdldEJ5dGUoKTsKICAgIHJldHVybiAoYjAgPDwgMjQpICsgKGIxIDw8IDE2KSArIChiMiA8PCA4KSArIGIzOwogIH0KICBnZXRCeXRlUmFuZ2UoYmVnaW4sIGVuZCkgewogICAgdW5yZWFjaGFibGUoIkFic3RyYWN0IG1ldGhvZCBgZ2V0Qnl0ZVJhbmdlYCBjYWxsZWQiKTsKICB9CiAgZ2V0U3RyaW5nKGxlbmd0aCkgewogICAgcmV0dXJuIGJ5dGVzVG9TdHJpbmcodGhpcy5nZXRCeXRlcyhsZW5ndGgpKTsKICB9CiAgc2tpcChuKSB7CiAgICB0aGlzLnBvcyArPSBuIHx8IDE7CiAgfQogIHJlc2V0KCkgewogICAgdW5yZWFjaGFibGUoIkFic3RyYWN0IG1ldGhvZCBgcmVzZXRgIGNhbGxlZCIpOwogIH0KICBtb3ZlU3RhcnQoKSB7CiAgICB1bnJlYWNoYWJsZSgiQWJzdHJhY3QgbWV0aG9kIGBtb3ZlU3RhcnRgIGNhbGxlZCIpOwogIH0KICBtYWtlU3ViU3RyZWFtKHN0YXJ0LCBsZW5ndGgsIGRpY3QgPSBudWxsKSB7CiAgICB1bnJlYWNoYWJsZSgiQWJzdHJhY3QgbWV0aG9kIGBtYWtlU3ViU3RyZWFtYCBjYWxsZWQiKTsKICB9CiAgZ2V0QmFzZVN0cmVhbXMoKSB7CiAgICByZXR1cm4gbnVsbDsKICB9Cn0KCjsvLyAuL3NyYy9jb3JlL2NvcmVfdXRpbHMuanMKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCmNvbnN0IFBERl9WRVJTSU9OX1JFR0VYUCA9IC9eWzEtOV1cLlxkJC87CmNvbnN0IE1BWF9JTlRfMzIgPSAyICoqIDMxIC0gMTsKY29uc3QgTUlOX0lOVF8zMiA9IC0oMiAqKiAzMSk7CmNvbnN0IElERU5USVRZX01BVFJJWCA9IFsxLCAwLCAwLCAxLCAwLCAwXTsKY29uc3QgUkVTT1VSQ0VTX0tFWVNfT1BFUkFUT1JfTElTVCA9IFsiQ29sb3JTcGFjZSIsICJFeHRHU3RhdGUiLCAiRm9udCIsICJQYXR0ZXJuIiwgIlByb3BlcnRpZXMiLCAiU2hhZGluZyIsICJYT2JqZWN0Il07CmNvbnN0IFJFU09VUkNFU19LRVlTX1RFWFRfQ09OVEVOVCA9IFsiRXh0R1N0YXRlIiwgIkZvbnQiLCAiUHJvcGVydGllcyIsICJYT2JqZWN0Il07CmZ1bmN0aW9uIGdldExvb2t1cFRhYmxlRmFjdG9yeShpbml0aWFsaXplcikgewogIGxldCBsb29rdXA7CiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgIGlmIChpbml0aWFsaXplcikgewogICAgICBsb29rdXAgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgICBpbml0aWFsaXplcihsb29rdXApOwogICAgICBpbml0aWFsaXplciA9IG51bGw7CiAgICB9CiAgICByZXR1cm4gbG9va3VwOwogIH07Cn0KY2xhc3MgTWlzc2luZ0RhdGFFeGNlcHRpb24gZXh0ZW5kcyBCYXNlRXhjZXB0aW9uIHsKICBjb25zdHJ1Y3RvcihiZWdpbiwgZW5kKSB7CiAgICBzdXBlcihgTWlzc2luZyBkYXRhIFske2JlZ2lufSwgJHtlbmR9KWAsICJNaXNzaW5nRGF0YUV4Y2VwdGlvbiIpOwogICAgdGhpcy5iZWdpbiA9IGJlZ2luOwogICAgdGhpcy5lbmQgPSBlbmQ7CiAgfQp9CmNsYXNzIFBhcnNlckVPRkV4Y2VwdGlvbiBleHRlbmRzIEJhc2VFeGNlcHRpb24gewogIGNvbnN0cnVjdG9yKG1zZykgewogICAgc3VwZXIobXNnLCAiUGFyc2VyRU9GRXhjZXB0aW9uIik7CiAgfQp9CmNsYXNzIFhSZWZFbnRyeUV4Y2VwdGlvbiBleHRlbmRzIEJhc2VFeGNlcHRpb24gewogIGNvbnN0cnVjdG9yKG1zZykgewogICAgc3VwZXIobXNnLCAiWFJlZkVudHJ5RXhjZXB0aW9uIik7CiAgfQp9CmNsYXNzIFhSZWZQYXJzZUV4Y2VwdGlvbiBleHRlbmRzIEJhc2VFeGNlcHRpb24gewogIGNvbnN0cnVjdG9yKG1zZykgewogICAgc3VwZXIobXNnLCAiWFJlZlBhcnNlRXhjZXB0aW9uIik7CiAgfQp9CmZ1bmN0aW9uIGFycmF5QnVmZmVyc1RvQnl0ZXMoYXJyKSB7CiAgY29uc3QgbGVuZ3RoID0gYXJyLmxlbmd0aDsKICBpZiAobGVuZ3RoID09PSAwKSB7CiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoMCk7CiAgfQogIGlmIChsZW5ndGggPT09IDEpIHsKICAgIHJldHVybiBuZXcgVWludDhBcnJheShhcnJbMF0pOwogIH0KICBsZXQgZGF0YUxlbmd0aCA9IDA7CiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgZGF0YUxlbmd0aCArPSBhcnJbaV0uYnl0ZUxlbmd0aDsKICB9CiAgY29uc3QgZGF0YSA9IG5ldyBVaW50OEFycmF5KGRhdGFMZW5ndGgpOwogIGxldCBwb3MgPSAwOwogIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgIGNvbnN0IGl0ZW0gPSBuZXcgVWludDhBcnJheShhcnJbaV0pOwogICAgZGF0YS5zZXQoaXRlbSwgcG9zKTsKICAgIHBvcyArPSBpdGVtLmJ5dGVMZW5ndGg7CiAgfQogIHJldHVybiBkYXRhOwp9CmFzeW5jIGZ1bmN0aW9uIGZldGNoQmluYXJ5RGF0YSh1cmwpIHsKICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCk7CiAgaWYgKCFyZXNwb25zZS5vaykgewogICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZmV0Y2ggZmlsZSAiJHt1cmx9IiB3aXRoICIke3Jlc3BvbnNlLnN0YXR1c1RleHR9Ii5gKTsKICB9CiAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGF3YWl0IHJlc3BvbnNlLmFycmF5QnVmZmVyKCkpOwp9CmZ1bmN0aW9uIGdldEluaGVyaXRhYmxlUHJvcGVydHkoewogIGRpY3QsCiAga2V5LAogIGdldEFycmF5ID0gZmFsc2UsCiAgc3RvcFdoZW5Gb3VuZCA9IHRydWUKfSkgewogIGxldCB2YWx1ZXM7CiAgY29uc3QgdmlzaXRlZCA9IG5ldyBSZWZTZXQoKTsKICB3aGlsZSAoZGljdCBpbnN0YW5jZW9mIERpY3QgJiYgIShkaWN0Lm9iaklkICYmIHZpc2l0ZWQuaGFzKGRpY3Qub2JqSWQpKSkgewogICAgaWYgKGRpY3Qub2JqSWQpIHsKICAgICAgdmlzaXRlZC5wdXQoZGljdC5vYmpJZCk7CiAgICB9CiAgICBjb25zdCB2YWx1ZSA9IGdldEFycmF5ID8gZGljdC5nZXRBcnJheShrZXkpIDogZGljdC5nZXQoa2V5KTsKICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgIGlmIChzdG9wV2hlbkZvdW5kKSB7CiAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICB9CiAgICAgICh2YWx1ZXMgfHw9IFtdKS5wdXNoKHZhbHVlKTsKICAgIH0KICAgIGRpY3QgPSBkaWN0LmdldCgiUGFyZW50Iik7CiAgfQogIHJldHVybiB2YWx1ZXM7Cn0KZnVuY3Rpb24gZ2V0UGFyZW50VG9VcGRhdGUoZGljdCwgcmVmLCB4cmVmKSB7CiAgY29uc3QgdmlzaXRlZCA9IG5ldyBSZWZTZXQoKTsKICBjb25zdCBmaXJzdERpY3QgPSBkaWN0OwogIGNvbnN0IHJlc3VsdCA9IHsKICAgIGRpY3Q6IG51bGwsCiAgICByZWY6IG51bGwKICB9OwogIHdoaWxlIChkaWN0IGluc3RhbmNlb2YgRGljdCAmJiAhdmlzaXRlZC5oYXMocmVmKSkgewogICAgdmlzaXRlZC5wdXQocmVmKTsKICAgIGlmIChkaWN0LmhhcygiVCIpKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgcmVmID0gZGljdC5nZXRSYXcoIlBhcmVudCIpOwogICAgaWYgKCEocmVmIGluc3RhbmNlb2YgUmVmKSkgewogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQogICAgZGljdCA9IHhyZWYuZmV0Y2gocmVmKTsKICB9CiAgaWYgKGRpY3QgaW5zdGFuY2VvZiBEaWN0ICYmIGRpY3QgIT09IGZpcnN0RGljdCkgewogICAgcmVzdWx0LmRpY3QgPSBkaWN0OwogICAgcmVzdWx0LnJlZiA9IHJlZjsKICB9CiAgcmV0dXJuIHJlc3VsdDsKfQpjb25zdCBST01BTl9OVU1CRVJfTUFQID0gWyIiLCAiQyIsICJDQyIsICJDQ0MiLCAiQ0QiLCAiRCIsICJEQyIsICJEQ0MiLCAiRENDQyIsICJDTSIsICIiLCAiWCIsICJYWCIsICJYWFgiLCAiWEwiLCAiTCIsICJMWCIsICJMWFgiLCAiTFhYWCIsICJYQyIsICIiLCAiSSIsICJJSSIsICJJSUkiLCAiSVYiLCAiViIsICJWSSIsICJWSUkiLCAiVklJSSIsICJJWCJdOwpmdW5jdGlvbiB0b1JvbWFuTnVtZXJhbHMobnVtYmVyLCBsb3dlckNhc2UgPSBmYWxzZSkgewogIGFzc2VydChOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcikgJiYgbnVtYmVyID4gMCwgIlRoZSBudW1iZXIgc2hvdWxkIGJlIGEgcG9zaXRpdmUgaW50ZWdlci4iKTsKICBjb25zdCByb21hbiA9ICJNIi5yZXBlYXQobnVtYmVyIC8gMTAwMCB8IDApICsgUk9NQU5fTlVNQkVSX01BUFtudW1iZXIgJSAxMDAwIC8gMTAwIHwgMF0gKyBST01BTl9OVU1CRVJfTUFQWzEwICsgKG51bWJlciAlIDEwMCAvIDEwIHwgMCldICsgUk9NQU5fTlVNQkVSX01BUFsyMCArIG51bWJlciAlIDEwXTsKICByZXR1cm4gbG93ZXJDYXNlID8gcm9tYW4udG9Mb3dlckNhc2UoKSA6IHJvbWFuOwp9CmZ1bmN0aW9uIGxvZzIoeCkgewogIHJldHVybiB4ID4gMCA/IE1hdGguY2VpbChNYXRoLmxvZzIoeCkpIDogMDsKfQpmdW5jdGlvbiByZWFkSW50OChkYXRhLCBvZmZzZXQpIHsKICByZXR1cm4gZGF0YVtvZmZzZXRdIDw8IDI0ID4+IDI0Owp9CmZ1bmN0aW9uIHJlYWRJbnQxNihkYXRhLCBvZmZzZXQpIHsKICByZXR1cm4gKGRhdGFbb2Zmc2V0XSA8PCAyNCB8IGRhdGFbb2Zmc2V0ICsgMV0gPDwgMTYpID4+IDE2Owp9CmZ1bmN0aW9uIHJlYWRVaW50MTYoZGF0YSwgb2Zmc2V0KSB7CiAgcmV0dXJuIGRhdGFbb2Zmc2V0XSA8PCA4IHwgZGF0YVtvZmZzZXQgKyAxXTsKfQpmdW5jdGlvbiByZWFkVWludDMyKGRhdGEsIG9mZnNldCkgewogIHJldHVybiAoZGF0YVtvZmZzZXRdIDw8IDI0IHwgZGF0YVtvZmZzZXQgKyAxXSA8PCAxNiB8IGRhdGFbb2Zmc2V0ICsgMl0gPDwgOCB8IGRhdGFbb2Zmc2V0ICsgM10pID4+PiAwOwp9CmZ1bmN0aW9uIGlzV2hpdGVTcGFjZShjaCkgewogIHJldHVybiBjaCA9PT0gMHgyMCB8fCBjaCA9PT0gMHgwOSB8fCBjaCA9PT0gMHgwZCB8fCBjaCA9PT0gMHgwYTsKfQpmdW5jdGlvbiBpc0Jvb2xlYW5BcnJheShhcnIsIGxlbikgewogIHJldHVybiBBcnJheS5pc0FycmF5KGFycikgJiYgKGxlbiA9PT0gbnVsbCB8fCBhcnIubGVuZ3RoID09PSBsZW4pICYmIGFyci5ldmVyeSh4ID0+IHR5cGVvZiB4ID09PSAiYm9vbGVhbiIpOwp9CmZ1bmN0aW9uIGlzTnVtYmVyQXJyYXkoYXJyLCBsZW4pIHsKICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7CiAgICByZXR1cm4gKGxlbiA9PT0gbnVsbCB8fCBhcnIubGVuZ3RoID09PSBsZW4pICYmIGFyci5ldmVyeSh4ID0+IHR5cGVvZiB4ID09PSAibnVtYmVyIik7CiAgfQogIHJldHVybiBBcnJheUJ1ZmZlci5pc1ZpZXcoYXJyKSAmJiAhKGFyciBpbnN0YW5jZW9mIEJpZ0ludDY0QXJyYXkgfHwgYXJyIGluc3RhbmNlb2YgQmlnVWludDY0QXJyYXkpICYmIChsZW4gPT09IG51bGwgfHwgYXJyLmxlbmd0aCA9PT0gbGVuKTsKfQpmdW5jdGlvbiBsb29rdXBNYXRyaXgoYXJyLCBmYWxsYmFjaykgewogIHJldHVybiBpc051bWJlckFycmF5KGFyciwgNikgPyBhcnIgOiBmYWxsYmFjazsKfQpmdW5jdGlvbiBsb29rdXBSZWN0KGFyciwgZmFsbGJhY2spIHsKICByZXR1cm4gaXNOdW1iZXJBcnJheShhcnIsIDQpID8gYXJyIDogZmFsbGJhY2s7Cn0KZnVuY3Rpb24gbG9va3VwTm9ybWFsUmVjdChhcnIsIGZhbGxiYWNrKSB7CiAgcmV0dXJuIGlzTnVtYmVyQXJyYXkoYXJyLCA0KSA/IFV0aWwubm9ybWFsaXplUmVjdChhcnIpIDogZmFsbGJhY2s7Cn0KZnVuY3Rpb24gcGFyc2VYRkFQYXRoKHBhdGgpIHsKICBjb25zdCBwb3NpdGlvblBhdHRlcm4gPSAvKC4rKVxbKFxkKylcXSQvOwogIHJldHVybiBwYXRoLnNwbGl0KCIuIikubWFwKGNvbXBvbmVudCA9PiB7CiAgICBjb25zdCBtID0gY29tcG9uZW50Lm1hdGNoKHBvc2l0aW9uUGF0dGVybik7CiAgICBpZiAobSkgewogICAgICByZXR1cm4gewogICAgICAgIG5hbWU6IG1bMV0sCiAgICAgICAgcG9zOiBwYXJzZUludChtWzJdLCAxMCkKICAgICAgfTsKICAgIH0KICAgIHJldHVybiB7CiAgICAgIG5hbWU6IGNvbXBvbmVudCwKICAgICAgcG9zOiAwCiAgICB9OwogIH0pOwp9CmZ1bmN0aW9uIGVzY2FwZVBERk5hbWUoc3RyKSB7CiAgY29uc3QgYnVmZmVyID0gW107CiAgbGV0IHN0YXJ0ID0gMDsKICBmb3IgKGxldCBpID0gMCwgaWkgPSBzdHIubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgY29uc3QgY2hhciA9IHN0ci5jaGFyQ29kZUF0KGkpOwogICAgaWYgKGNoYXIgPCAweDIxIHx8IGNoYXIgPiAweDdlIHx8IGNoYXIgPT09IDB4MjMgfHwgY2hhciA9PT0gMHgyOCB8fCBjaGFyID09PSAweDI5IHx8IGNoYXIgPT09IDB4M2MgfHwgY2hhciA9PT0gMHgzZSB8fCBjaGFyID09PSAweDViIHx8IGNoYXIgPT09IDB4NWQgfHwgY2hhciA9PT0gMHg3YiB8fCBjaGFyID09PSAweDdkIHx8IGNoYXIgPT09IDB4MmYgfHwgY2hhciA9PT0gMHgyNSkgewogICAgICBpZiAoc3RhcnQgPCBpKSB7CiAgICAgICAgYnVmZmVyLnB1c2goc3RyLnN1YnN0cmluZyhzdGFydCwgaSkpOwogICAgICB9CiAgICAgIGJ1ZmZlci5wdXNoKGAjJHtjaGFyLnRvU3RyaW5nKDE2KX1gKTsKICAgICAgc3RhcnQgPSBpICsgMTsKICAgIH0KICB9CiAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHsKICAgIHJldHVybiBzdHI7CiAgfQogIGlmIChzdGFydCA8IHN0ci5sZW5ndGgpIHsKICAgIGJ1ZmZlci5wdXNoKHN0ci5zdWJzdHJpbmcoc3RhcnQsIHN0ci5sZW5ndGgpKTsKICB9CiAgcmV0dXJuIGJ1ZmZlci5qb2luKCIiKTsKfQpmdW5jdGlvbiBlc2NhcGVTdHJpbmcoc3RyKSB7CiAgcmV0dXJuIHN0ci5yZXBsYWNlQWxsKC8oWygpXFxcblxyXSkvZywgbWF0Y2ggPT4gewogICAgaWYgKG1hdGNoID09PSAiXG4iKSB7CiAgICAgIHJldHVybiAiXFxuIjsKICAgIH0gZWxzZSBpZiAobWF0Y2ggPT09ICJcciIpIHsKICAgICAgcmV0dXJuICJcXHIiOwogICAgfQogICAgcmV0dXJuIGBcXCR7bWF0Y2h9YDsKICB9KTsKfQpmdW5jdGlvbiBfY29sbGVjdEpTKGVudHJ5LCB4cmVmLCBsaXN0LCBwYXJlbnRzKSB7CiAgaWYgKCFlbnRyeSkgewogICAgcmV0dXJuOwogIH0KICBsZXQgcGFyZW50ID0gbnVsbDsKICBpZiAoZW50cnkgaW5zdGFuY2VvZiBSZWYpIHsKICAgIGlmIChwYXJlbnRzLmhhcyhlbnRyeSkpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgcGFyZW50ID0gZW50cnk7CiAgICBwYXJlbnRzLnB1dChwYXJlbnQpOwogICAgZW50cnkgPSB4cmVmLmZldGNoKGVudHJ5KTsKICB9CiAgaWYgKEFycmF5LmlzQXJyYXkoZW50cnkpKSB7CiAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgZW50cnkpIHsKICAgICAgX2NvbGxlY3RKUyhlbGVtZW50LCB4cmVmLCBsaXN0LCBwYXJlbnRzKTsKICAgIH0KICB9IGVsc2UgaWYgKGVudHJ5IGluc3RhbmNlb2YgRGljdCkgewogICAgaWYgKGlzTmFtZShlbnRyeS5nZXQoIlMiKSwgIkphdmFTY3JpcHQiKSkgewogICAgICBjb25zdCBqcyA9IGVudHJ5LmdldCgiSlMiKTsKICAgICAgbGV0IGNvZGU7CiAgICAgIGlmIChqcyBpbnN0YW5jZW9mIEJhc2VTdHJlYW0pIHsKICAgICAgICBjb2RlID0ganMuZ2V0U3RyaW5nKCk7CiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGpzID09PSAic3RyaW5nIikgewogICAgICAgIGNvZGUgPSBqczsKICAgICAgfQogICAgICBjb2RlICYmPSBzdHJpbmdUb1BERlN0cmluZyhjb2RlLCB0cnVlKS5yZXBsYWNlQWxsKCJceDAwIiwgIiIpOwogICAgICBpZiAoY29kZSkgewogICAgICAgIGxpc3QucHVzaChjb2RlLnRyaW0oKSk7CiAgICAgIH0KICAgIH0KICAgIF9jb2xsZWN0SlMoZW50cnkuZ2V0UmF3KCJOZXh0IiksIHhyZWYsIGxpc3QsIHBhcmVudHMpOwogIH0KICBpZiAocGFyZW50KSB7CiAgICBwYXJlbnRzLnJlbW92ZShwYXJlbnQpOwogIH0KfQpmdW5jdGlvbiBjb2xsZWN0QWN0aW9ucyh4cmVmLCBkaWN0LCBldmVudFR5cGUpIHsKICBjb25zdCBhY3Rpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICBjb25zdCBhZGRpdGlvbmFsQWN0aW9uc0RpY3RzID0gZ2V0SW5oZXJpdGFibGVQcm9wZXJ0eSh7CiAgICBkaWN0LAogICAga2V5OiAiQUEiLAogICAgc3RvcFdoZW5Gb3VuZDogZmFsc2UKICB9KTsKICBpZiAoYWRkaXRpb25hbEFjdGlvbnNEaWN0cykgewogICAgZm9yIChsZXQgaSA9IGFkZGl0aW9uYWxBY3Rpb25zRGljdHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHsKICAgICAgY29uc3QgYWRkaXRpb25hbEFjdGlvbnMgPSBhZGRpdGlvbmFsQWN0aW9uc0RpY3RzW2ldOwogICAgICBpZiAoIShhZGRpdGlvbmFsQWN0aW9ucyBpbnN0YW5jZW9mIERpY3QpKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgZm9yIChjb25zdCBrZXkgb2YgYWRkaXRpb25hbEFjdGlvbnMuZ2V0S2V5cygpKSB7CiAgICAgICAgY29uc3QgYWN0aW9uID0gZXZlbnRUeXBlW2tleV07CiAgICAgICAgaWYgKCFhY3Rpb24pIHsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgICBjb25zdCBhY3Rpb25EaWN0ID0gYWRkaXRpb25hbEFjdGlvbnMuZ2V0UmF3KGtleSk7CiAgICAgICAgY29uc3QgcGFyZW50cyA9IG5ldyBSZWZTZXQoKTsKICAgICAgICBjb25zdCBsaXN0ID0gW107CiAgICAgICAgX2NvbGxlY3RKUyhhY3Rpb25EaWN0LCB4cmVmLCBsaXN0LCBwYXJlbnRzKTsKICAgICAgICBpZiAobGlzdC5sZW5ndGggPiAwKSB7CiAgICAgICAgICBhY3Rpb25zW2FjdGlvbl0gPSBsaXN0OwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KICBpZiAoZGljdC5oYXMoIkEiKSkgewogICAgY29uc3QgYWN0aW9uRGljdCA9IGRpY3QuZ2V0KCJBIik7CiAgICBjb25zdCBwYXJlbnRzID0gbmV3IFJlZlNldCgpOwogICAgY29uc3QgbGlzdCA9IFtdOwogICAgX2NvbGxlY3RKUyhhY3Rpb25EaWN0LCB4cmVmLCBsaXN0LCBwYXJlbnRzKTsKICAgIGlmIChsaXN0Lmxlbmd0aCA+IDApIHsKICAgICAgYWN0aW9ucy5BY3Rpb24gPSBsaXN0OwogICAgfQogIH0KICByZXR1cm4gb2JqZWN0U2l6ZShhY3Rpb25zKSA+IDAgPyBhY3Rpb25zIDogbnVsbDsKfQpjb25zdCBYTUxFbnRpdGllcyA9IHsKICAweDNjOiAiJmx0OyIsCiAgMHgzZTogIiZndDsiLAogIDB4MjY6ICImYW1wOyIsCiAgMHgyMjogIiZxdW90OyIsCiAgMHgyNzogIiZhcG9zOyIKfTsKZnVuY3Rpb24qIGNvZGVQb2ludEl0ZXIoc3RyKSB7CiAgZm9yIChsZXQgaSA9IDAsIGlpID0gc3RyLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgIGNvbnN0IGNoYXIgPSBzdHIuY29kZVBvaW50QXQoaSk7CiAgICBpZiAoY2hhciA+IDB4ZDdmZiAmJiAoY2hhciA8IDB4ZTAwMCB8fCBjaGFyID4gMHhmZmZkKSkgewogICAgICBpKys7CiAgICB9CiAgICB5aWVsZCBjaGFyOwogIH0KfQpmdW5jdGlvbiBlbmNvZGVUb1htbFN0cmluZyhzdHIpIHsKICBjb25zdCBidWZmZXIgPSBbXTsKICBsZXQgc3RhcnQgPSAwOwogIGZvciAobGV0IGkgPSAwLCBpaSA9IHN0ci5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICBjb25zdCBjaGFyID0gc3RyLmNvZGVQb2ludEF0KGkpOwogICAgaWYgKDB4MjAgPD0gY2hhciAmJiBjaGFyIDw9IDB4N2UpIHsKICAgICAgY29uc3QgZW50aXR5ID0gWE1MRW50aXRpZXNbY2hhcl07CiAgICAgIGlmIChlbnRpdHkpIHsKICAgICAgICBpZiAoc3RhcnQgPCBpKSB7CiAgICAgICAgICBidWZmZXIucHVzaChzdHIuc3Vic3RyaW5nKHN0YXJ0LCBpKSk7CiAgICAgICAgfQogICAgICAgIGJ1ZmZlci5wdXNoKGVudGl0eSk7CiAgICAgICAgc3RhcnQgPSBpICsgMTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgaWYgKHN0YXJ0IDwgaSkgewogICAgICAgIGJ1ZmZlci5wdXNoKHN0ci5zdWJzdHJpbmcoc3RhcnQsIGkpKTsKICAgICAgfQogICAgICBidWZmZXIucHVzaChgJiN4JHtjaGFyLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpfTtgKTsKICAgICAgaWYgKGNoYXIgPiAweGQ3ZmYgJiYgKGNoYXIgPCAweGUwMDAgfHwgY2hhciA+IDB4ZmZmZCkpIHsKICAgICAgICBpKys7CiAgICAgIH0KICAgICAgc3RhcnQgPSBpICsgMTsKICAgIH0KICB9CiAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHsKICAgIHJldHVybiBzdHI7CiAgfQogIGlmIChzdGFydCA8IHN0ci5sZW5ndGgpIHsKICAgIGJ1ZmZlci5wdXNoKHN0ci5zdWJzdHJpbmcoc3RhcnQsIHN0ci5sZW5ndGgpKTsKICB9CiAgcmV0dXJuIGJ1ZmZlci5qb2luKCIiKTsKfQpmdW5jdGlvbiB2YWxpZGF0ZUZvbnROYW1lKGZvbnRGYW1pbHksIG11c3RXYXJuID0gZmFsc2UpIHsKICBjb25zdCBtID0gL14oInwnKS4qKCJ8JykkLy5leGVjKGZvbnRGYW1pbHkpOwogIGlmIChtICYmIG1bMV0gPT09IG1bMl0pIHsKICAgIGNvbnN0IHJlID0gbmV3IFJlZ0V4cChgW15cXFxcXSR7bVsxXX1gKTsKICAgIGlmIChyZS50ZXN0KGZvbnRGYW1pbHkuc2xpY2UoMSwgLTEpKSkgewogICAgICBpZiAobXVzdFdhcm4pIHsKICAgICAgICB3YXJuKGBGb250RmFtaWx5IGNvbnRhaW5zIHVuZXNjYXBlZCAke21bMV19OiAke2ZvbnRGYW1pbHl9LmApOwogICAgICB9CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9IGVsc2UgewogICAgZm9yIChjb25zdCBpZGVudCBvZiBmb250RmFtaWx5LnNwbGl0KC9bIFx0XSsvKSkgewogICAgICBpZiAoL14oXGR8KC0oXGR8LSkpKS8udGVzdChpZGVudCkgfHwgIS9eW1x3LVxcXSskLy50ZXN0KGlkZW50KSkgewogICAgICAgIGlmIChtdXN0V2FybikgewogICAgICAgICAgd2FybihgRm9udEZhbWlseSBjb250YWlucyBpbnZhbGlkIDxjdXN0b20taWRlbnQ+OiAke2ZvbnRGYW1pbHl9LmApOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0KICB9CiAgcmV0dXJuIHRydWU7Cn0KZnVuY3Rpb24gdmFsaWRhdGVDU1NGb250KGNzc0ZvbnRJbmZvKSB7CiAgY29uc3QgREVGQVVMVF9DU1NfRk9OVF9PQkxJUVVFID0gIjE0IjsKICBjb25zdCBERUZBVUxUX0NTU19GT05UX1dFSUdIVCA9ICI0MDAiOwogIGNvbnN0IENTU19GT05UX1dFSUdIVF9WQUxVRVMgPSBuZXcgU2V0KFsiMTAwIiwgIjIwMCIsICIzMDAiLCAiNDAwIiwgIjUwMCIsICI2MDAiLCAiNzAwIiwgIjgwMCIsICI5MDAiLCAiMTAwMCIsICJub3JtYWwiLCAiYm9sZCIsICJib2xkZXIiLCAibGlnaHRlciJdKTsKICBjb25zdCB7CiAgICBmb250RmFtaWx5LAogICAgZm9udFdlaWdodCwKICAgIGl0YWxpY0FuZ2xlCiAgfSA9IGNzc0ZvbnRJbmZvOwogIGlmICghdmFsaWRhdGVGb250TmFtZShmb250RmFtaWx5LCB0cnVlKSkgewogICAgcmV0dXJuIGZhbHNlOwogIH0KICBjb25zdCB3ZWlnaHQgPSBmb250V2VpZ2h0ID8gZm9udFdlaWdodC50b1N0cmluZygpIDogIiI7CiAgY3NzRm9udEluZm8uZm9udFdlaWdodCA9IENTU19GT05UX1dFSUdIVF9WQUxVRVMuaGFzKHdlaWdodCkgPyB3ZWlnaHQgOiBERUZBVUxUX0NTU19GT05UX1dFSUdIVDsKICBjb25zdCBhbmdsZSA9IHBhcnNlRmxvYXQoaXRhbGljQW5nbGUpOwogIGNzc0ZvbnRJbmZvLml0YWxpY0FuZ2xlID0gaXNOYU4oYW5nbGUpIHx8IGFuZ2xlIDwgLTkwIHx8IGFuZ2xlID4gOTAgPyBERUZBVUxUX0NTU19GT05UX09CTElRVUUgOiBpdGFsaWNBbmdsZS50b1N0cmluZygpOwogIHJldHVybiB0cnVlOwp9CmZ1bmN0aW9uIHJlY292ZXJKc1VSTChzdHIpIHsKICBjb25zdCBVUkxfT1BFTl9NRVRIT0RTID0gWyJhcHAubGF1bmNoVVJMIiwgIndpbmRvdy5vcGVuIiwgInhmYS5ob3N0LmdvdG9VUkwiXTsKICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoIl5cXHMqKCIgKyBVUkxfT1BFTl9NRVRIT0RTLmpvaW4oInwiKS5yZXBsYWNlQWxsKCIuIiwgIlxcLiIpICsgIilcXCgoPzonfFwiKShbXidcIl0qKSg/Oid8XCIpKD86LFxccyooXFx3KylcXCl8XFwpKSIsICJpIik7CiAgY29uc3QganNVcmwgPSByZWdleC5leGVjKHN0cik7CiAgaWYgKGpzVXJsPy5bMl0pIHsKICAgIHJldHVybiB7CiAgICAgIHVybDoganNVcmxbMl0sCiAgICAgIG5ld1dpbmRvdzoganNVcmxbMV0gPT09ICJhcHAubGF1bmNoVVJMIiAmJiBqc1VybFszXSA9PT0gInRydWUiCiAgICB9OwogIH0KICByZXR1cm4gbnVsbDsKfQpmdW5jdGlvbiBudW1iZXJUb1N0cmluZyh2YWx1ZSkgewogIGlmIChOdW1iZXIuaXNJbnRlZ2VyKHZhbHVlKSkgewogICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7CiAgfQogIGNvbnN0IHJvdW5kZWRWYWx1ZSA9IE1hdGgucm91bmQodmFsdWUgKiAxMDApOwogIGlmIChyb3VuZGVkVmFsdWUgJSAxMDAgPT09IDApIHsKICAgIHJldHVybiAocm91bmRlZFZhbHVlIC8gMTAwKS50b1N0cmluZygpOwogIH0KICBpZiAocm91bmRlZFZhbHVlICUgMTAgPT09IDApIHsKICAgIHJldHVybiB2YWx1ZS50b0ZpeGVkKDEpOwogIH0KICByZXR1cm4gdmFsdWUudG9GaXhlZCgyKTsKfQpmdW5jdGlvbiBnZXROZXdBbm5vdGF0aW9uc01hcChhbm5vdGF0aW9uU3RvcmFnZSkgewogIGlmICghYW5ub3RhdGlvblN0b3JhZ2UpIHsKICAgIHJldHVybiBudWxsOwogIH0KICBjb25zdCBuZXdBbm5vdGF0aW9uc0J5UGFnZSA9IG5ldyBNYXAoKTsKICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBhbm5vdGF0aW9uU3RvcmFnZSkgewogICAgaWYgKCFrZXkuc3RhcnRzV2l0aChBbm5vdGF0aW9uRWRpdG9yUHJlZml4KSkgewogICAgICBjb250aW51ZTsKICAgIH0KICAgIGxldCBhbm5vdGF0aW9ucyA9IG5ld0Fubm90YXRpb25zQnlQYWdlLmdldCh2YWx1ZS5wYWdlSW5kZXgpOwogICAgaWYgKCFhbm5vdGF0aW9ucykgewogICAgICBhbm5vdGF0aW9ucyA9IFtdOwogICAgICBuZXdBbm5vdGF0aW9uc0J5UGFnZS5zZXQodmFsdWUucGFnZUluZGV4LCBhbm5vdGF0aW9ucyk7CiAgICB9CiAgICBhbm5vdGF0aW9ucy5wdXNoKHZhbHVlKTsKICB9CiAgcmV0dXJuIG5ld0Fubm90YXRpb25zQnlQYWdlLnNpemUgPiAwID8gbmV3QW5ub3RhdGlvbnNCeVBhZ2UgOiBudWxsOwp9CmZ1bmN0aW9uIHN0cmluZ1RvQXNjaWlPclVURjE2QkUoc3RyKSB7CiAgaWYgKHN0ciA9PT0gbnVsbCB8fCBzdHIgPT09IHVuZGVmaW5lZCkgewogICAgcmV0dXJuIHN0cjsKICB9CiAgcmV0dXJuIGlzQXNjaWkoc3RyKSA/IHN0ciA6IHN0cmluZ1RvVVRGMTZTdHJpbmcoc3RyLCB0cnVlKTsKfQpmdW5jdGlvbiBpc0FzY2lpKHN0cikgewogIGlmICh0eXBlb2Ygc3RyICE9PSAic3RyaW5nIikgewogICAgcmV0dXJuIGZhbHNlOwogIH0KICByZXR1cm4gIXN0ciB8fCAvXltceDAwLVx4N0ZdKiQvLnRlc3Qoc3RyKTsKfQpmdW5jdGlvbiBzdHJpbmdUb1VURjE2SGV4U3RyaW5nKHN0cikgewogIGNvbnN0IGJ1ZiA9IFtdOwogIGZvciAobGV0IGkgPSAwLCBpaSA9IHN0ci5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICBjb25zdCBjaGFyID0gc3RyLmNoYXJDb2RlQXQoaSk7CiAgICBidWYucHVzaChoZXhOdW1iZXJzW2NoYXIgPj4gOCAmIDB4ZmZdLCBoZXhOdW1iZXJzW2NoYXIgJiAweGZmXSk7CiAgfQogIHJldHVybiBidWYuam9pbigiIik7Cn0KZnVuY3Rpb24gc3RyaW5nVG9VVEYxNlN0cmluZyhzdHIsIGJpZ0VuZGlhbiA9IGZhbHNlKSB7CiAgY29uc3QgYnVmID0gW107CiAgaWYgKGJpZ0VuZGlhbikgewogICAgYnVmLnB1c2goIlx4RkVceEZGIik7CiAgfQogIGZvciAobGV0IGkgPSAwLCBpaSA9IHN0ci5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICBjb25zdCBjaGFyID0gc3RyLmNoYXJDb2RlQXQoaSk7CiAgICBidWYucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGNoYXIgPj4gOCAmIDB4ZmYpLCBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoYXIgJiAweGZmKSk7CiAgfQogIHJldHVybiBidWYuam9pbigiIik7Cn0KZnVuY3Rpb24gZ2V0Um90YXRpb25NYXRyaXgocm90YXRpb24sIHdpZHRoLCBoZWlnaHQpIHsKICBzd2l0Y2ggKHJvdGF0aW9uKSB7CiAgICBjYXNlIDkwOgogICAgICByZXR1cm4gWzAsIDEsIC0xLCAwLCB3aWR0aCwgMF07CiAgICBjYXNlIDE4MDoKICAgICAgcmV0dXJuIFstMSwgMCwgMCwgLTEsIHdpZHRoLCBoZWlnaHRdOwogICAgY2FzZSAyNzA6CiAgICAgIHJldHVybiBbMCwgLTEsIDEsIDAsIDAsIGhlaWdodF07CiAgICBkZWZhdWx0OgogICAgICB0aHJvdyBuZXcgRXJyb3IoIkludmFsaWQgcm90YXRpb24iKTsKICB9Cn0KZnVuY3Rpb24gZ2V0U2l6ZUluQnl0ZXMoeCkgewogIHJldHVybiBNYXRoLmNlaWwoTWF0aC5jZWlsKE1hdGgubG9nMigxICsgeCkpIC8gOCk7Cn0KCi8vIEVYVEVSTkFMIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi51cmwtc2VhcmNoLXBhcmFtcy5kZWxldGUuanMKdmFyIHdlYl91cmxfc2VhcmNoX3BhcmFtc19kZWxldGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ2MDMpOwovLyBFWFRFUk5BTCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudXJsLXNlYXJjaC1wYXJhbXMuaGFzLmpzCnZhciB3ZWJfdXJsX3NlYXJjaF9wYXJhbXNfaGFzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NTY2KTsKLy8gRVhURVJOQUwgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLnVybC1zZWFyY2gtcGFyYW1zLnNpemUuanMKdmFyIHdlYl91cmxfc2VhcmNoX3BhcmFtc19zaXplID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NzIxKTsKOy8vIC4vZXh0ZXJuYWwvcWNtcy9xY21zX3V0aWxzLmpzCgoKCgoKCgoKY2xhc3MgUUNNUyB7CiAgc3RhdGljICNtZW1vcnlBcnJheSA9IG51bGw7CiAgc3RhdGljIF9tZW1vcnkgPSBudWxsOwogIHN0YXRpYyBfbXVzdEFkZEFscGhhID0gZmFsc2U7CiAgc3RhdGljIF9kZXN0QnVmZmVyID0gbnVsbDsKICBzdGF0aWMgX2Rlc3RPZmZzZXQgPSAwOwogIHN0YXRpYyBfZGVzdExlbmd0aCA9IDA7CiAgc3RhdGljIF9jc3NDb2xvciA9ICIiOwogIHN0YXRpYyBfbWFrZUhleENvbG9yID0gbnVsbDsKICBzdGF0aWMgZ2V0IF9tZW1vcnlBcnJheSgpIHsKICAgIGNvbnN0IGFycmF5ID0gdGhpcy4jbWVtb3J5QXJyYXk7CiAgICBpZiAoYXJyYXk/LmJ5dGVMZW5ndGgpIHsKICAgICAgcmV0dXJuIGFycmF5OwogICAgfQogICAgcmV0dXJuIHRoaXMuI21lbW9yeUFycmF5ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5fbWVtb3J5LmJ1ZmZlcik7CiAgfQp9CmZ1bmN0aW9uIGNvcHlfcmVzdWx0KHB0ciwgbGVuKSB7CiAgY29uc3QgewogICAgX211c3RBZGRBbHBoYSwKICAgIF9kZXN0QnVmZmVyLAogICAgX2Rlc3RPZmZzZXQsCiAgICBfZGVzdExlbmd0aCwKICAgIF9tZW1vcnlBcnJheQogIH0gPSBRQ01TOwogIGlmIChsZW4gPT09IF9kZXN0TGVuZ3RoKSB7CiAgICBfZGVzdEJ1ZmZlci5zZXQoX21lbW9yeUFycmF5LnN1YmFycmF5KHB0ciwgcHRyICsgbGVuKSwgX2Rlc3RPZmZzZXQpOwogICAgcmV0dXJuOwogIH0KICBpZiAoX211c3RBZGRBbHBoYSkgewogICAgZm9yIChsZXQgaSA9IHB0ciwgaWkgPSBwdHIgKyBsZW4sIGogPSBfZGVzdE9mZnNldDsgaSA8IGlpOyBpICs9IDMsIGogKz0gNCkgewogICAgICBfZGVzdEJ1ZmZlcltqXSA9IF9tZW1vcnlBcnJheVtpXTsKICAgICAgX2Rlc3RCdWZmZXJbaiArIDFdID0gX21lbW9yeUFycmF5W2kgKyAxXTsKICAgICAgX2Rlc3RCdWZmZXJbaiArIDJdID0gX21lbW9yeUFycmF5W2kgKyAyXTsKICAgICAgX2Rlc3RCdWZmZXJbaiArIDNdID0gMjU1OwogICAgfQogIH0gZWxzZSB7CiAgICBmb3IgKGxldCBpID0gcHRyLCBpaSA9IHB0ciArIGxlbiwgaiA9IF9kZXN0T2Zmc2V0OyBpIDwgaWk7IGkgKz0gMywgaiArPSA0KSB7CiAgICAgIF9kZXN0QnVmZmVyW2pdID0gX21lbW9yeUFycmF5W2ldOwogICAgICBfZGVzdEJ1ZmZlcltqICsgMV0gPSBfbWVtb3J5QXJyYXlbaSArIDFdOwogICAgICBfZGVzdEJ1ZmZlcltqICsgMl0gPSBfbWVtb3J5QXJyYXlbaSArIDJdOwogICAgfQogIH0KfQpmdW5jdGlvbiBjb3B5X3JnYihwdHIpIHsKICBjb25zdCB7CiAgICBfZGVzdEJ1ZmZlciwKICAgIF9kZXN0T2Zmc2V0LAogICAgX21lbW9yeUFycmF5CiAgfSA9IFFDTVM7CiAgX2Rlc3RCdWZmZXJbX2Rlc3RPZmZzZXRdID0gX21lbW9yeUFycmF5W3B0cl07CiAgX2Rlc3RCdWZmZXJbX2Rlc3RPZmZzZXQgKyAxXSA9IF9tZW1vcnlBcnJheVtwdHIgKyAxXTsKICBfZGVzdEJ1ZmZlcltfZGVzdE9mZnNldCArIDJdID0gX21lbW9yeUFycmF5W3B0ciArIDJdOwp9CmZ1bmN0aW9uIG1ha2VfY3NzUkdCKHB0cikgewogIGNvbnN0IHsKICAgIF9tZW1vcnlBcnJheQogIH0gPSBRQ01TOwogIFFDTVMuX2Nzc0NvbG9yID0gUUNNUy5fbWFrZUhleENvbG9yKF9tZW1vcnlBcnJheVtwdHJdLCBfbWVtb3J5QXJyYXlbcHRyICsgMV0sIF9tZW1vcnlBcnJheVtwdHIgKyAyXSk7Cn0KCjsvLyAuL2V4dGVybmFsL3FjbXMvcWNtcy5qcwoKCgoKCgoKCgoKCgpsZXQgd2FzbTsKY29uc3QgY2FjaGVkVGV4dERlY29kZXIgPSB0eXBlb2YgVGV4dERlY29kZXIgIT09ICd1bmRlZmluZWQnID8gbmV3IFRleHREZWNvZGVyKCd1dGYtOCcsIHsKICBpZ25vcmVCT006IHRydWUsCiAgZmF0YWw6IHRydWUKfSkgOiB7CiAgZGVjb2RlOiAoKSA9PiB7CiAgICB0aHJvdyBFcnJvcignVGV4dERlY29kZXIgbm90IGF2YWlsYWJsZScpOwogIH0KfTsKaWYgKHR5cGVvZiBUZXh0RGVjb2RlciAhPT0gJ3VuZGVmaW5lZCcpIHsKICBjYWNoZWRUZXh0RGVjb2Rlci5kZWNvZGUoKTsKfQo7CmxldCBjYWNoZWRVaW50OEFycmF5TWVtb3J5MCA9IG51bGw7CmZ1bmN0aW9uIGdldFVpbnQ4QXJyYXlNZW1vcnkwKCkgewogIGlmIChjYWNoZWRVaW50OEFycmF5TWVtb3J5MCA9PT0gbnVsbCB8fCBjYWNoZWRVaW50OEFycmF5TWVtb3J5MC5ieXRlTGVuZ3RoID09PSAwKSB7CiAgICBjYWNoZWRVaW50OEFycmF5TWVtb3J5MCA9IG5ldyBVaW50OEFycmF5KHdhc20ubWVtb3J5LmJ1ZmZlcik7CiAgfQogIHJldHVybiBjYWNoZWRVaW50OEFycmF5TWVtb3J5MDsKfQpmdW5jdGlvbiBnZXRTdHJpbmdGcm9tV2FzbTAocHRyLCBsZW4pIHsKICBwdHIgPSBwdHIgPj4+IDA7CiAgcmV0dXJuIGNhY2hlZFRleHREZWNvZGVyLmRlY29kZShnZXRVaW50OEFycmF5TWVtb3J5MCgpLnN1YmFycmF5KHB0ciwgcHRyICsgbGVuKSk7Cn0KbGV0IFdBU01fVkVDVE9SX0xFTiA9IDA7CmZ1bmN0aW9uIHBhc3NBcnJheThUb1dhc20wKGFyZywgbWFsbG9jKSB7CiAgY29uc3QgcHRyID0gbWFsbG9jKGFyZy5sZW5ndGggKiAxLCAxKSA+Pj4gMDsKICBnZXRVaW50OEFycmF5TWVtb3J5MCgpLnNldChhcmcsIHB0ciAvIDEpOwogIFdBU01fVkVDVE9SX0xFTiA9IGFyZy5sZW5ndGg7CiAgcmV0dXJuIHB0cjsKfQpmdW5jdGlvbiBxY21zX2NvbnZlcnRfYXJyYXkodHJhbnNmb3JtZXIsIHNyYykgewogIGNvbnN0IHB0cjAgPSBwYXNzQXJyYXk4VG9XYXNtMChzcmMsIHdhc20uX193YmluZGdlbl9tYWxsb2MpOwogIGNvbnN0IGxlbjAgPSBXQVNNX1ZFQ1RPUl9MRU47CiAgd2FzbS5xY21zX2NvbnZlcnRfYXJyYXkodHJhbnNmb3JtZXIsIHB0cjAsIGxlbjApOwp9CmZ1bmN0aW9uIHFjbXNfY29udmVydF9vbmUodHJhbnNmb3JtZXIsIHNyYywgY3NzKSB7CiAgd2FzbS5xY21zX2NvbnZlcnRfb25lKHRyYW5zZm9ybWVyLCBzcmMsIGNzcyk7Cn0KZnVuY3Rpb24gcWNtc19jb252ZXJ0X3RocmVlKHRyYW5zZm9ybWVyLCBzcmMxLCBzcmMyLCBzcmMzLCBjc3MpIHsKICB3YXNtLnFjbXNfY29udmVydF90aHJlZSh0cmFuc2Zvcm1lciwgc3JjMSwgc3JjMiwgc3JjMywgY3NzKTsKfQpmdW5jdGlvbiBxY21zX2NvbnZlcnRfZm91cih0cmFuc2Zvcm1lciwgc3JjMSwgc3JjMiwgc3JjMywgc3JjNCwgY3NzKSB7CiAgd2FzbS5xY21zX2NvbnZlcnRfZm91cih0cmFuc2Zvcm1lciwgc3JjMSwgc3JjMiwgc3JjMywgc3JjNCwgY3NzKTsKfQpmdW5jdGlvbiBxY21zX3RyYW5zZm9ybWVyX2Zyb21fbWVtb3J5KG1lbSwgaW5fdHlwZSwgaW50ZW50KSB7CiAgY29uc3QgcHRyMCA9IHBhc3NBcnJheThUb1dhc20wKG1lbSwgd2FzbS5fX3diaW5kZ2VuX21hbGxvYyk7CiAgY29uc3QgbGVuMCA9IFdBU01fVkVDVE9SX0xFTjsKICBjb25zdCByZXQgPSB3YXNtLnFjbXNfdHJhbnNmb3JtZXJfZnJvbV9tZW1vcnkocHRyMCwgbGVuMCwgaW5fdHlwZSwgaW50ZW50KTsKICByZXR1cm4gcmV0ID4+PiAwOwp9CmZ1bmN0aW9uIHFjbXNfZHJvcF90cmFuc2Zvcm1lcih0cmFuc2Zvcm1lcikgewogIHdhc20ucWNtc19kcm9wX3RyYW5zZm9ybWVyKHRyYW5zZm9ybWVyKTsKfQpjb25zdCBEYXRhVHlwZSA9IE9iamVjdC5mcmVlemUoewogIFJHQjg6IDAsCiAgIjAiOiAiUkdCOCIsCiAgUkdCQTg6IDEsCiAgIjEiOiAiUkdCQTgiLAogIEJHUkE4OiAyLAogICIyIjogIkJHUkE4IiwKICBHcmF5ODogMywKICAiMyI6ICJHcmF5OCIsCiAgR3JheUE4OiA0LAogICI0IjogIkdyYXlBOCIsCiAgQ01ZSzogNSwKICAiNSI6ICJDTVlLIgp9KTsKY29uc3QgSW50ZW50ID0gT2JqZWN0LmZyZWV6ZSh7CiAgUGVyY2VwdHVhbDogMCwKICAiMCI6ICJQZXJjZXB0dWFsIiwKICBSZWxhdGl2ZUNvbG9yaW1ldHJpYzogMSwKICAiMSI6ICJSZWxhdGl2ZUNvbG9yaW1ldHJpYyIsCiAgU2F0dXJhdGlvbjogMiwKICAiMiI6ICJTYXR1cmF0aW9uIiwKICBBYnNvbHV0ZUNvbG9yaW1ldHJpYzogMywKICAiMyI6ICJBYnNvbHV0ZUNvbG9yaW1ldHJpYyIKfSk7CmFzeW5jIGZ1bmN0aW9uIF9fd2JnX2xvYWQobW9kdWxlLCBpbXBvcnRzKSB7CiAgaWYgKHR5cGVvZiBSZXNwb25zZSA9PT0gJ2Z1bmN0aW9uJyAmJiBtb2R1bGUgaW5zdGFuY2VvZiBSZXNwb25zZSkgewogICAgaWYgKHR5cGVvZiBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZVN0cmVhbWluZyA9PT0gJ2Z1bmN0aW9uJykgewogICAgICB0cnkgewogICAgICAgIHJldHVybiBhd2FpdCBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZVN0cmVhbWluZyhtb2R1bGUsIGltcG9ydHMpOwogICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgaWYgKG1vZHVsZS5oZWFkZXJzLmdldCgnQ29udGVudC1UeXBlJykgIT0gJ2FwcGxpY2F0aW9uL3dhc20nKSB7CiAgICAgICAgICBjb25zb2xlLndhcm4oImBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZVN0cmVhbWluZ2AgZmFpbGVkIGJlY2F1c2UgeW91ciBzZXJ2ZXIgZG9lcyBub3Qgc2VydmUgV2FzbSB3aXRoIGBhcHBsaWNhdGlvbi93YXNtYCBNSU1FIHR5cGUuIEZhbGxpbmcgYmFjayB0byBgV2ViQXNzZW1ibHkuaW5zdGFudGlhdGVgIHdoaWNoIGlzIHNsb3dlci4gT3JpZ2luYWwgZXJyb3I6XG4iLCBlKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhyb3cgZTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIGNvbnN0IGJ5dGVzID0gYXdhaXQgbW9kdWxlLmFycmF5QnVmZmVyKCk7CiAgICByZXR1cm4gYXdhaXQgV2ViQXNzZW1ibHkuaW5zdGFudGlhdGUoYnl0ZXMsIGltcG9ydHMpOwogIH0gZWxzZSB7CiAgICBjb25zdCBpbnN0YW5jZSA9IGF3YWl0IFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlKG1vZHVsZSwgaW1wb3J0cyk7CiAgICBpZiAoaW5zdGFuY2UgaW5zdGFuY2VvZiBXZWJBc3NlbWJseS5JbnN0YW5jZSkgewogICAgICByZXR1cm4gewogICAgICAgIGluc3RhbmNlLAogICAgICAgIG1vZHVsZQogICAgICB9OwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIGluc3RhbmNlOwogICAgfQogIH0KfQpmdW5jdGlvbiBfX3diZ19nZXRfaW1wb3J0cygpIHsKICBjb25zdCBpbXBvcnRzID0ge307CiAgaW1wb3J0cy53YmcgPSB7fTsKICBpbXBvcnRzLndiZy5fX3diZ19jb3B5cmVzdWx0X2IwOGVlN2QyNzNmMjk1ZGQgPSBmdW5jdGlvbiAoYXJnMCwgYXJnMSkgewogICAgY29weV9yZXN1bHQoYXJnMCA+Pj4gMCwgYXJnMSA+Pj4gMCk7CiAgfTsKICBpbXBvcnRzLndiZy5fX3diZ19jb3B5cmdiX2Q2MGNlMTdiYjA1ZDliNjcgPSBmdW5jdGlvbiAoYXJnMCkgewogICAgY29weV9yZ2IoYXJnMCA+Pj4gMCk7CiAgfTsKICBpbXBvcnRzLndiZy5fX3diZ19tYWtlY3NzUkdCXzg5M2JmMGNkOWZkYjMwMmQgPSBmdW5jdGlvbiAoYXJnMCkgewogICAgbWFrZV9jc3NSR0IoYXJnMCA+Pj4gMCk7CiAgfTsKICBpbXBvcnRzLndiZy5fX3diaW5kZ2VuX2luaXRfZXh0ZXJucmVmX3RhYmxlID0gZnVuY3Rpb24gKCkgewogICAgY29uc3QgdGFibGUgPSB3YXNtLl9fd2JpbmRnZW5fZXhwb3J0XzA7CiAgICBjb25zdCBvZmZzZXQgPSB0YWJsZS5ncm93KDQpOwogICAgdGFibGUuc2V0KDAsIHVuZGVmaW5lZCk7CiAgICB0YWJsZS5zZXQob2Zmc2V0ICsgMCwgdW5kZWZpbmVkKTsKICAgIHRhYmxlLnNldChvZmZzZXQgKyAxLCBudWxsKTsKICAgIHRhYmxlLnNldChvZmZzZXQgKyAyLCB0cnVlKTsKICAgIHRhYmxlLnNldChvZmZzZXQgKyAzLCBmYWxzZSk7CiAgfTsKICBpbXBvcnRzLndiZy5fX3diaW5kZ2VuX3Rocm93ID0gZnVuY3Rpb24gKGFyZzAsIGFyZzEpIHsKICAgIHRocm93IG5ldyBFcnJvcihnZXRTdHJpbmdGcm9tV2FzbTAoYXJnMCwgYXJnMSkpOwogIH07CiAgcmV0dXJuIGltcG9ydHM7Cn0KZnVuY3Rpb24gX193YmdfaW5pdF9tZW1vcnkoaW1wb3J0cywgbWVtb3J5KSB7fQpmdW5jdGlvbiBfX3diZ19maW5hbGl6ZV9pbml0KGluc3RhbmNlLCBtb2R1bGUpIHsKICB3YXNtID0gaW5zdGFuY2UuZXhwb3J0czsKICBfX3diZ19pbml0Ll9fd2JpbmRnZW5fd2FzbV9tb2R1bGUgPSBtb2R1bGU7CiAgY2FjaGVkVWludDhBcnJheU1lbW9yeTAgPSBudWxsOwogIHdhc20uX193YmluZGdlbl9zdGFydCgpOwogIHJldHVybiB3YXNtOwp9CmZ1bmN0aW9uIGluaXRTeW5jKG1vZHVsZSkgewogIGlmICh3YXNtICE9PSB1bmRlZmluZWQpIHJldHVybiB3YXNtOwogIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykgewogICAgaWYgKE9iamVjdC5nZXRQcm90b3R5cGVPZihtb2R1bGUpID09PSBPYmplY3QucHJvdG90eXBlKSB7CiAgICAgICh7CiAgICAgICAgbW9kdWxlCiAgICAgIH0gPSBtb2R1bGUpOwogICAgfSBlbHNlIHsKICAgICAgY29uc29sZS53YXJuKCd1c2luZyBkZXByZWNhdGVkIHBhcmFtZXRlcnMgZm9yIGBpbml0U3luYygpYDsgcGFzcyBhIHNpbmdsZSBvYmplY3QgaW5zdGVhZCcpOwogICAgfQogIH0KICBjb25zdCBpbXBvcnRzID0gX193YmdfZ2V0X2ltcG9ydHMoKTsKICBfX3diZ19pbml0X21lbW9yeShpbXBvcnRzKTsKICBpZiAoIShtb2R1bGUgaW5zdGFuY2VvZiBXZWJBc3NlbWJseS5Nb2R1bGUpKSB7CiAgICBtb2R1bGUgPSBuZXcgV2ViQXNzZW1ibHkuTW9kdWxlKG1vZHVsZSk7CiAgfQogIGNvbnN0IGluc3RhbmNlID0gbmV3IFdlYkFzc2VtYmx5Lkluc3RhbmNlKG1vZHVsZSwgaW1wb3J0cyk7CiAgcmV0dXJuIF9fd2JnX2ZpbmFsaXplX2luaXQoaW5zdGFuY2UsIG1vZHVsZSk7Cn0KYXN5bmMgZnVuY3Rpb24gX193YmdfaW5pdChtb2R1bGVfb3JfcGF0aCkgewogIGlmICh3YXNtICE9PSB1bmRlZmluZWQpIHJldHVybiB3YXNtOwogIGlmICh0eXBlb2YgbW9kdWxlX29yX3BhdGggIT09ICd1bmRlZmluZWQnKSB7CiAgICBpZiAoT2JqZWN0LmdldFByb3RvdHlwZU9mKG1vZHVsZV9vcl9wYXRoKSA9PT0gT2JqZWN0LnByb3RvdHlwZSkgewogICAgICAoewogICAgICAgIG1vZHVsZV9vcl9wYXRoCiAgICAgIH0gPSBtb2R1bGVfb3JfcGF0aCk7CiAgICB9IGVsc2UgewogICAgICBjb25zb2xlLndhcm4oJ3VzaW5nIGRlcHJlY2F0ZWQgcGFyYW1ldGVycyBmb3IgdGhlIGluaXRpYWxpemF0aW9uIGZ1bmN0aW9uOyBwYXNzIGEgc2luZ2xlIG9iamVjdCBpbnN0ZWFkJyk7CiAgICB9CiAgfQogIGNvbnN0IGltcG9ydHMgPSBfX3diZ19nZXRfaW1wb3J0cygpOwogIGlmICh0eXBlb2YgbW9kdWxlX29yX3BhdGggPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBSZXF1ZXN0ID09PSAnZnVuY3Rpb24nICYmIG1vZHVsZV9vcl9wYXRoIGluc3RhbmNlb2YgUmVxdWVzdCB8fCB0eXBlb2YgVVJMID09PSAnZnVuY3Rpb24nICYmIG1vZHVsZV9vcl9wYXRoIGluc3RhbmNlb2YgVVJMKSB7CiAgICBtb2R1bGVfb3JfcGF0aCA9IGZldGNoKG1vZHVsZV9vcl9wYXRoKTsKICB9CiAgX193YmdfaW5pdF9tZW1vcnkoaW1wb3J0cyk7CiAgY29uc3QgewogICAgaW5zdGFuY2UsCiAgICBtb2R1bGUKICB9ID0gYXdhaXQgX193YmdfbG9hZChhd2FpdCBtb2R1bGVfb3JfcGF0aCwgaW1wb3J0cyk7CiAgcmV0dXJuIF9fd2JnX2ZpbmFsaXplX2luaXQoaW5zdGFuY2UsIG1vZHVsZSk7Cn0KCi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gY29uc3QgcWNtcyA9ICgoLyogdW51c2VkIHB1cmUgZXhwcmVzc2lvbiBvciBzdXBlciAqLyBudWxsICYmIChfX3diZ19pbml0KSkpOwo7Ly8gLi9zcmMvY29yZS9jb2xvcnNwYWNlLmpzCgoKCgoKCgoKCgpmdW5jdGlvbiByZXNpemVSZ2JJbWFnZShzcmMsIGRlc3QsIHcxLCBoMSwgdzIsIGgyLCBhbHBoYTAxKSB7CiAgY29uc3QgQ09NUE9ORU5UUyA9IDM7CiAgYWxwaGEwMSA9IGFscGhhMDEgIT09IDEgPyAwIDogYWxwaGEwMTsKICBjb25zdCB4UmF0aW8gPSB3MSAvIHcyOwogIGNvbnN0IHlSYXRpbyA9IGgxIC8gaDI7CiAgbGV0IG5ld0luZGV4ID0gMCwKICAgIG9sZEluZGV4OwogIGNvbnN0IHhTY2FsZWQgPSBuZXcgVWludDE2QXJyYXkodzIpOwogIGNvbnN0IHcxU2NhbmxpbmUgPSB3MSAqIENPTVBPTkVOVFM7CiAgZm9yIChsZXQgaSA9IDA7IGkgPCB3MjsgaSsrKSB7CiAgICB4U2NhbGVkW2ldID0gTWF0aC5mbG9vcihpICogeFJhdGlvKSAqIENPTVBPTkVOVFM7CiAgfQogIGZvciAobGV0IGkgPSAwOyBpIDwgaDI7IGkrKykgewogICAgY29uc3QgcHkgPSBNYXRoLmZsb29yKGkgKiB5UmF0aW8pICogdzFTY2FubGluZTsKICAgIGZvciAobGV0IGogPSAwOyBqIDwgdzI7IGorKykgewogICAgICBvbGRJbmRleCA9IHB5ICsgeFNjYWxlZFtqXTsKICAgICAgZGVzdFtuZXdJbmRleCsrXSA9IHNyY1tvbGRJbmRleCsrXTsKICAgICAgZGVzdFtuZXdJbmRleCsrXSA9IHNyY1tvbGRJbmRleCsrXTsKICAgICAgZGVzdFtuZXdJbmRleCsrXSA9IHNyY1tvbGRJbmRleCsrXTsKICAgICAgbmV3SW5kZXggKz0gYWxwaGEwMTsKICAgIH0KICB9Cn0KZnVuY3Rpb24gcmVzaXplUmdiYUltYWdlKHNyYywgZGVzdCwgdzEsIGgxLCB3MiwgaDIsIGFscGhhMDEpIHsKICBjb25zdCB4UmF0aW8gPSB3MSAvIHcyOwogIGNvbnN0IHlSYXRpbyA9IGgxIC8gaDI7CiAgbGV0IG5ld0luZGV4ID0gMDsKICBjb25zdCB4U2NhbGVkID0gbmV3IFVpbnQxNkFycmF5KHcyKTsKICBpZiAoYWxwaGEwMSA9PT0gMSkgewogICAgZm9yIChsZXQgaSA9IDA7IGkgPCB3MjsgaSsrKSB7CiAgICAgIHhTY2FsZWRbaV0gPSBNYXRoLmZsb29yKGkgKiB4UmF0aW8pOwogICAgfQogICAgY29uc3Qgc3JjMzIgPSBuZXcgVWludDMyQXJyYXkoc3JjLmJ1ZmZlcik7CiAgICBjb25zdCBkZXN0MzIgPSBuZXcgVWludDMyQXJyYXkoZGVzdC5idWZmZXIpOwogICAgY29uc3QgcmdiTWFzayA9IEZlYXR1cmVUZXN0LmlzTGl0dGxlRW5kaWFuID8gMHgwMGZmZmZmZiA6IDB4ZmZmZmZmMDA7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGgyOyBpKyspIHsKICAgICAgY29uc3QgYnVmID0gc3JjMzIuc3ViYXJyYXkoTWF0aC5mbG9vcihpICogeVJhdGlvKSAqIHcxKTsKICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB3MjsgaisrKSB7CiAgICAgICAgZGVzdDMyW25ld0luZGV4KytdIHw9IGJ1Zlt4U2NhbGVkW2pdXSAmIHJnYk1hc2s7CiAgICAgIH0KICAgIH0KICB9IGVsc2UgewogICAgY29uc3QgQ09NUE9ORU5UUyA9IDQ7CiAgICBjb25zdCB3MVNjYW5saW5lID0gdzEgKiBDT01QT05FTlRTOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCB3MjsgaSsrKSB7CiAgICAgIHhTY2FsZWRbaV0gPSBNYXRoLmZsb29yKGkgKiB4UmF0aW8pICogQ09NUE9ORU5UUzsKICAgIH0KICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaDI7IGkrKykgewogICAgICBjb25zdCBidWYgPSBzcmMuc3ViYXJyYXkoTWF0aC5mbG9vcihpICogeVJhdGlvKSAqIHcxU2NhbmxpbmUpOwogICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHcyOyBqKyspIHsKICAgICAgICBjb25zdCBvbGRJbmRleCA9IHhTY2FsZWRbal07CiAgICAgICAgZGVzdFtuZXdJbmRleCsrXSA9IGJ1ZltvbGRJbmRleF07CiAgICAgICAgZGVzdFtuZXdJbmRleCsrXSA9IGJ1ZltvbGRJbmRleCArIDFdOwogICAgICAgIGRlc3RbbmV3SW5kZXgrK10gPSBidWZbb2xkSW5kZXggKyAyXTsKICAgICAgfQogICAgfQogIH0KfQpmdW5jdGlvbiBjb3B5UmdiYUltYWdlKHNyYywgZGVzdCwgYWxwaGEwMSkgewogIGlmIChhbHBoYTAxID09PSAxKSB7CiAgICBjb25zdCBzcmMzMiA9IG5ldyBVaW50MzJBcnJheShzcmMuYnVmZmVyKTsKICAgIGNvbnN0IGRlc3QzMiA9IG5ldyBVaW50MzJBcnJheShkZXN0LmJ1ZmZlcik7CiAgICBjb25zdCByZ2JNYXNrID0gRmVhdHVyZVRlc3QuaXNMaXR0bGVFbmRpYW4gPyAweDAwZmZmZmZmIDogMHhmZmZmZmYwMDsKICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IHNyYzMyLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgZGVzdDMyW2ldIHw9IHNyYzMyW2ldICYgcmdiTWFzazsKICAgIH0KICB9IGVsc2UgewogICAgbGV0IGogPSAwOwogICAgZm9yIChsZXQgaSA9IDAsIGlpID0gc3JjLmxlbmd0aDsgaSA8IGlpOyBpICs9IDQpIHsKICAgICAgZGVzdFtqKytdID0gc3JjW2ldOwogICAgICBkZXN0W2orK10gPSBzcmNbaSArIDFdOwogICAgICBkZXN0W2orK10gPSBzcmNbaSArIDJdOwogICAgfQogIH0KfQpjbGFzcyBDb2xvclNwYWNlIHsKICBzdGF0aWMgI3JnYkJ1ZiA9IG5ldyBVaW50OENsYW1wZWRBcnJheSgzKTsKICBjb25zdHJ1Y3RvcihuYW1lLCBudW1Db21wcykgewogICAgdGhpcy5uYW1lID0gbmFtZTsKICAgIHRoaXMubnVtQ29tcHMgPSBudW1Db21wczsKICB9CiAgZ2V0UmdiKHNyYywgc3JjT2Zmc2V0LCBvdXRwdXQgPSBuZXcgVWludDhDbGFtcGVkQXJyYXkoMykpIHsKICAgIHRoaXMuZ2V0UmdiSXRlbShzcmMsIHNyY09mZnNldCwgb3V0cHV0LCAwKTsKICAgIHJldHVybiBvdXRwdXQ7CiAgfQogIGdldFJnYkhleChzcmMsIHNyY09mZnNldCkgewogICAgY29uc3QgYnVmZmVyID0gdGhpcy5nZXRSZ2Ioc3JjLCBzcmNPZmZzZXQsIENvbG9yU3BhY2UuI3JnYkJ1Zik7CiAgICByZXR1cm4gVXRpbC5tYWtlSGV4Q29sb3IoYnVmZmVyWzBdLCBidWZmZXJbMV0sIGJ1ZmZlclsyXSk7CiAgfQogIGdldFJnYkl0ZW0oc3JjLCBzcmNPZmZzZXQsIGRlc3QsIGRlc3RPZmZzZXQpIHsKICAgIHVucmVhY2hhYmxlKCJTaG91bGQgbm90IGNhbGwgQ29sb3JTcGFjZS5nZXRSZ2JJdGVtIik7CiAgfQogIGdldFJnYkJ1ZmZlcihzcmMsIHNyY09mZnNldCwgY291bnQsIGRlc3QsIGRlc3RPZmZzZXQsIGJpdHMsIGFscGhhMDEpIHsKICAgIHVucmVhY2hhYmxlKCJTaG91bGQgbm90IGNhbGwgQ29sb3JTcGFjZS5nZXRSZ2JCdWZmZXIiKTsKICB9CiAgZ2V0T3V0cHV0TGVuZ3RoKGlucHV0TGVuZ3RoLCBhbHBoYTAxKSB7CiAgICB1bnJlYWNoYWJsZSgiU2hvdWxkIG5vdCBjYWxsIENvbG9yU3BhY2UuZ2V0T3V0cHV0TGVuZ3RoIik7CiAgfQogIGlzUGFzc3Rocm91Z2goYml0cykgewogICAgcmV0dXJuIGZhbHNlOwogIH0KICBpc0RlZmF1bHREZWNvZGUoZGVjb2RlTWFwLCBicGMpIHsKICAgIHJldHVybiBDb2xvclNwYWNlLmlzRGVmYXVsdERlY29kZShkZWNvZGVNYXAsIHRoaXMubnVtQ29tcHMpOwogIH0KICBmaWxsUmdiKGRlc3QsIG9yaWdpbmFsV2lkdGgsIG9yaWdpbmFsSGVpZ2h0LCB3aWR0aCwgaGVpZ2h0LCBhY3R1YWxIZWlnaHQsIGJwYywgY29tcHMsIGFscGhhMDEpIHsKICAgIGNvbnN0IGNvdW50ID0gb3JpZ2luYWxXaWR0aCAqIG9yaWdpbmFsSGVpZ2h0OwogICAgbGV0IHJnYkJ1ZiA9IG51bGw7CiAgICBjb25zdCBudW1Db21wb25lbnRDb2xvcnMgPSAxIDw8IGJwYzsKICAgIGNvbnN0IG5lZWRzUmVzaXppbmcgPSBvcmlnaW5hbEhlaWdodCAhPT0gaGVpZ2h0IHx8IG9yaWdpbmFsV2lkdGggIT09IHdpZHRoOwogICAgaWYgKHRoaXMuaXNQYXNzdGhyb3VnaChicGMpKSB7CiAgICAgIHJnYkJ1ZiA9IGNvbXBzOwogICAgfSBlbHNlIGlmICh0aGlzLm51bUNvbXBzID09PSAxICYmIGNvdW50ID4gbnVtQ29tcG9uZW50Q29sb3JzICYmIHRoaXMubmFtZSAhPT0gIkRldmljZUdyYXkiICYmIHRoaXMubmFtZSAhPT0gIkRldmljZVJHQiIpIHsKICAgICAgY29uc3QgYWxsQ29sb3JzID0gYnBjIDw9IDggPyBuZXcgVWludDhBcnJheShudW1Db21wb25lbnRDb2xvcnMpIDogbmV3IFVpbnQxNkFycmF5KG51bUNvbXBvbmVudENvbG9ycyk7CiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtQ29tcG9uZW50Q29sb3JzOyBpKyspIHsKICAgICAgICBhbGxDb2xvcnNbaV0gPSBpOwogICAgICB9CiAgICAgIGNvbnN0IGNvbG9yTWFwID0gbmV3IFVpbnQ4Q2xhbXBlZEFycmF5KG51bUNvbXBvbmVudENvbG9ycyAqIDMpOwogICAgICB0aGlzLmdldFJnYkJ1ZmZlcihhbGxDb2xvcnMsIDAsIG51bUNvbXBvbmVudENvbG9ycywgY29sb3JNYXAsIDAsIGJwYywgMCk7CiAgICAgIGlmICghbmVlZHNSZXNpemluZykgewogICAgICAgIGxldCBkZXN0UG9zID0gMDsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyArK2kpIHsKICAgICAgICAgIGNvbnN0IGtleSA9IGNvbXBzW2ldICogMzsKICAgICAgICAgIGRlc3RbZGVzdFBvcysrXSA9IGNvbG9yTWFwW2tleV07CiAgICAgICAgICBkZXN0W2Rlc3RQb3MrK10gPSBjb2xvck1hcFtrZXkgKyAxXTsKICAgICAgICAgIGRlc3RbZGVzdFBvcysrXSA9IGNvbG9yTWFwW2tleSArIDJdOwogICAgICAgICAgZGVzdFBvcyArPSBhbHBoYTAxOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICByZ2JCdWYgPSBuZXcgVWludDhBcnJheShjb3VudCAqIDMpOwogICAgICAgIGxldCByZ2JQb3MgPSAwOwogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7ICsraSkgewogICAgICAgICAgY29uc3Qga2V5ID0gY29tcHNbaV0gKiAzOwogICAgICAgICAgcmdiQnVmW3JnYlBvcysrXSA9IGNvbG9yTWFwW2tleV07CiAgICAgICAgICByZ2JCdWZbcmdiUG9zKytdID0gY29sb3JNYXBba2V5ICsgMV07CiAgICAgICAgICByZ2JCdWZbcmdiUG9zKytdID0gY29sb3JNYXBba2V5ICsgMl07CiAgICAgICAgfQogICAgICB9CiAgICB9IGVsc2UgaWYgKCFuZWVkc1Jlc2l6aW5nKSB7CiAgICAgIHRoaXMuZ2V0UmdiQnVmZmVyKGNvbXBzLCAwLCB3aWR0aCAqIGFjdHVhbEhlaWdodCwgZGVzdCwgMCwgYnBjLCBhbHBoYTAxKTsKICAgIH0gZWxzZSB7CiAgICAgIHJnYkJ1ZiA9IG5ldyBVaW50OENsYW1wZWRBcnJheShjb3VudCAqIDMpOwogICAgICB0aGlzLmdldFJnYkJ1ZmZlcihjb21wcywgMCwgY291bnQsIHJnYkJ1ZiwgMCwgYnBjLCAwKTsKICAgIH0KICAgIGlmIChyZ2JCdWYpIHsKICAgICAgaWYgKG5lZWRzUmVzaXppbmcpIHsKICAgICAgICByZXNpemVSZ2JJbWFnZShyZ2JCdWYsIGRlc3QsIG9yaWdpbmFsV2lkdGgsIG9yaWdpbmFsSGVpZ2h0LCB3aWR0aCwgaGVpZ2h0LCBhbHBoYTAxKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBsZXQgZGVzdFBvcyA9IDAsCiAgICAgICAgICByZ2JQb3MgPSAwOwogICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IHdpZHRoICogYWN0dWFsSGVpZ2h0OyBpIDwgaWk7IGkrKykgewogICAgICAgICAgZGVzdFtkZXN0UG9zKytdID0gcmdiQnVmW3JnYlBvcysrXTsKICAgICAgICAgIGRlc3RbZGVzdFBvcysrXSA9IHJnYkJ1ZltyZ2JQb3MrK107CiAgICAgICAgICBkZXN0W2Rlc3RQb3MrK10gPSByZ2JCdWZbcmdiUG9zKytdOwogICAgICAgICAgZGVzdFBvcyArPSBhbHBoYTAxOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KICBnZXQgdXNlc1plcm9Ub09uZVJhbmdlKCkgewogICAgcmV0dXJuIHNoYWRvdyh0aGlzLCAidXNlc1plcm9Ub09uZVJhbmdlIiwgdHJ1ZSk7CiAgfQogIHN0YXRpYyBpc0RlZmF1bHREZWNvZGUoZGVjb2RlLCBudW1Db21wcykgewogICAgaWYgKCFBcnJheS5pc0FycmF5KGRlY29kZSkpIHsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICBpZiAobnVtQ29tcHMgKiAyICE9PSBkZWNvZGUubGVuZ3RoKSB7CiAgICAgIHdhcm4oIlRoZSBkZWNvZGUgbWFwIGlzIG5vdCB0aGUgY29ycmVjdCBsZW5ndGgiKTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBkZWNvZGUubGVuZ3RoOyBpIDwgaWk7IGkgKz0gMikgewogICAgICBpZiAoZGVjb2RlW2ldICE9PSAwIHx8IGRlY29kZVtpICsgMV0gIT09IDEpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiB0cnVlOwogIH0KfQpjbGFzcyBBbHRlcm5hdGVDUyBleHRlbmRzIENvbG9yU3BhY2UgewogIGNvbnN0cnVjdG9yKG51bUNvbXBzLCBiYXNlLCB0aW50Rm4pIHsKICAgIHN1cGVyKCJBbHRlcm5hdGUiLCBudW1Db21wcyk7CiAgICB0aGlzLmJhc2UgPSBiYXNlOwogICAgdGhpcy50aW50Rm4gPSB0aW50Rm47CiAgICB0aGlzLnRtcEJ1ZiA9IG5ldyBGbG9hdDMyQXJyYXkoYmFzZS5udW1Db21wcyk7CiAgfQogIGdldFJnYkl0ZW0oc3JjLCBzcmNPZmZzZXQsIGRlc3QsIGRlc3RPZmZzZXQpIHsKICAgIGNvbnN0IHRtcEJ1ZiA9IHRoaXMudG1wQnVmOwogICAgdGhpcy50aW50Rm4oc3JjLCBzcmNPZmZzZXQsIHRtcEJ1ZiwgMCk7CiAgICB0aGlzLmJhc2UuZ2V0UmdiSXRlbSh0bXBCdWYsIDAsIGRlc3QsIGRlc3RPZmZzZXQpOwogIH0KICBnZXRSZ2JCdWZmZXIoc3JjLCBzcmNPZmZzZXQsIGNvdW50LCBkZXN0LCBkZXN0T2Zmc2V0LCBiaXRzLCBhbHBoYTAxKSB7CiAgICBjb25zdCB0aW50Rm4gPSB0aGlzLnRpbnRGbjsKICAgIGNvbnN0IGJhc2UgPSB0aGlzLmJhc2U7CiAgICBjb25zdCBzY2FsZSA9IDEgLyAoKDEgPDwgYml0cykgLSAxKTsKICAgIGNvbnN0IGJhc2VOdW1Db21wcyA9IGJhc2UubnVtQ29tcHM7CiAgICBjb25zdCB1c2VzWmVyb1RvT25lUmFuZ2UgPSBiYXNlLnVzZXNaZXJvVG9PbmVSYW5nZTsKICAgIGNvbnN0IGlzUGFzc3Rocm91Z2ggPSAoYmFzZS5pc1Bhc3N0aHJvdWdoKDgpIHx8ICF1c2VzWmVyb1RvT25lUmFuZ2UpICYmIGFscGhhMDEgPT09IDA7CiAgICBsZXQgcG9zID0gaXNQYXNzdGhyb3VnaCA/IGRlc3RPZmZzZXQgOiAwOwogICAgY29uc3QgYmFzZUJ1ZiA9IGlzUGFzc3Rocm91Z2ggPyBkZXN0IDogbmV3IFVpbnQ4Q2xhbXBlZEFycmF5KGJhc2VOdW1Db21wcyAqIGNvdW50KTsKICAgIGNvbnN0IG51bUNvbXBzID0gdGhpcy5udW1Db21wczsKICAgIGNvbnN0IHNjYWxlZCA9IG5ldyBGbG9hdDMyQXJyYXkobnVtQ29tcHMpOwogICAgY29uc3QgdGludGVkID0gbmV3IEZsb2F0MzJBcnJheShiYXNlTnVtQ29tcHMpOwogICAgbGV0IGksIGo7CiAgICBmb3IgKGkgPSAwOyBpIDwgY291bnQ7IGkrKykgewogICAgICBmb3IgKGogPSAwOyBqIDwgbnVtQ29tcHM7IGorKykgewogICAgICAgIHNjYWxlZFtqXSA9IHNyY1tzcmNPZmZzZXQrK10gKiBzY2FsZTsKICAgICAgfQogICAgICB0aW50Rm4oc2NhbGVkLCAwLCB0aW50ZWQsIDApOwogICAgICBpZiAodXNlc1plcm9Ub09uZVJhbmdlKSB7CiAgICAgICAgZm9yIChqID0gMDsgaiA8IGJhc2VOdW1Db21wczsgaisrKSB7CiAgICAgICAgICBiYXNlQnVmW3BvcysrXSA9IHRpbnRlZFtqXSAqIDI1NTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgYmFzZS5nZXRSZ2JJdGVtKHRpbnRlZCwgMCwgYmFzZUJ1ZiwgcG9zKTsKICAgICAgICBwb3MgKz0gYmFzZU51bUNvbXBzOwogICAgICB9CiAgICB9CiAgICBpZiAoIWlzUGFzc3Rocm91Z2gpIHsKICAgICAgYmFzZS5nZXRSZ2JCdWZmZXIoYmFzZUJ1ZiwgMCwgY291bnQsIGRlc3QsIGRlc3RPZmZzZXQsIDgsIGFscGhhMDEpOwogICAgfQogIH0KICBnZXRPdXRwdXRMZW5ndGgoaW5wdXRMZW5ndGgsIGFscGhhMDEpIHsKICAgIHJldHVybiB0aGlzLmJhc2UuZ2V0T3V0cHV0TGVuZ3RoKGlucHV0TGVuZ3RoICogdGhpcy5iYXNlLm51bUNvbXBzIC8gdGhpcy5udW1Db21wcywgYWxwaGEwMSk7CiAgfQp9CmNsYXNzIFBhdHRlcm5DUyBleHRlbmRzIENvbG9yU3BhY2UgewogIGNvbnN0cnVjdG9yKGJhc2VDUykgewogICAgc3VwZXIoIlBhdHRlcm4iLCBudWxsKTsKICAgIHRoaXMuYmFzZSA9IGJhc2VDUzsKICB9CiAgaXNEZWZhdWx0RGVjb2RlKGRlY29kZU1hcCwgYnBjKSB7CiAgICB1bnJlYWNoYWJsZSgiU2hvdWxkIG5vdCBjYWxsIFBhdHRlcm5DUy5pc0RlZmF1bHREZWNvZGUiKTsKICB9Cn0KY2xhc3MgSW5kZXhlZENTIGV4dGVuZHMgQ29sb3JTcGFjZSB7CiAgY29uc3RydWN0b3IoYmFzZSwgaGlnaFZhbCwgbG9va3VwKSB7CiAgICBzdXBlcigiSW5kZXhlZCIsIDEpOwogICAgdGhpcy5iYXNlID0gYmFzZTsKICAgIHRoaXMuaGlnaFZhbCA9IGhpZ2hWYWw7CiAgICBjb25zdCBsZW5ndGggPSBiYXNlLm51bUNvbXBzICogKGhpZ2hWYWwgKyAxKTsKICAgIHRoaXMubG9va3VwID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTsKICAgIGlmIChsb29rdXAgaW5zdGFuY2VvZiBCYXNlU3RyZWFtKSB7CiAgICAgIGNvbnN0IGJ5dGVzID0gbG9va3VwLmdldEJ5dGVzKGxlbmd0aCk7CiAgICAgIHRoaXMubG9va3VwLnNldChieXRlcyk7CiAgICB9IGVsc2UgaWYgKHR5cGVvZiBsb29rdXAgPT09ICJzdHJpbmciKSB7CiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgICB0aGlzLmxvb2t1cFtpXSA9IGxvb2t1cC5jaGFyQ29kZUF0KGkpICYgMHhmZjsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKGBJbmRleGVkQ1MgLSB1bnJlY29nbml6ZWQgbG9va3VwIHRhYmxlOiAke2xvb2t1cH1gKTsKICAgIH0KICB9CiAgZ2V0UmdiSXRlbShzcmMsIHNyY09mZnNldCwgZGVzdCwgZGVzdE9mZnNldCkgewogICAgY29uc3QgewogICAgICBiYXNlLAogICAgICBoaWdoVmFsLAogICAgICBsb29rdXAKICAgIH0gPSB0aGlzOwogICAgY29uc3Qgc3RhcnQgPSBNYXRoQ2xhbXAoTWF0aC5yb3VuZChzcmNbc3JjT2Zmc2V0XSksIDAsIGhpZ2hWYWwpICogYmFzZS5udW1Db21wczsKICAgIGJhc2UuZ2V0UmdiQnVmZmVyKGxvb2t1cCwgc3RhcnQsIDEsIGRlc3QsIGRlc3RPZmZzZXQsIDgsIDApOwogIH0KICBnZXRSZ2JCdWZmZXIoc3JjLCBzcmNPZmZzZXQsIGNvdW50LCBkZXN0LCBkZXN0T2Zmc2V0LCBiaXRzLCBhbHBoYTAxKSB7CiAgICBjb25zdCB7CiAgICAgIGJhc2UsCiAgICAgIGhpZ2hWYWwsCiAgICAgIGxvb2t1cAogICAgfSA9IHRoaXM7CiAgICBjb25zdCB7CiAgICAgIG51bUNvbXBzCiAgICB9ID0gYmFzZTsKICAgIGNvbnN0IG91dHB1dERlbHRhID0gYmFzZS5nZXRPdXRwdXRMZW5ndGgobnVtQ29tcHMsIGFscGhhMDEpOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgKytpKSB7CiAgICAgIGNvbnN0IGxvb2t1cFBvcyA9IE1hdGhDbGFtcChNYXRoLnJvdW5kKHNyY1tzcmNPZmZzZXQrK10pLCAwLCBoaWdoVmFsKSAqIG51bUNvbXBzOwogICAgICBiYXNlLmdldFJnYkJ1ZmZlcihsb29rdXAsIGxvb2t1cFBvcywgMSwgZGVzdCwgZGVzdE9mZnNldCwgOCwgYWxwaGEwMSk7CiAgICAgIGRlc3RPZmZzZXQgKz0gb3V0cHV0RGVsdGE7CiAgICB9CiAgfQogIGdldE91dHB1dExlbmd0aChpbnB1dExlbmd0aCwgYWxwaGEwMSkgewogICAgcmV0dXJuIHRoaXMuYmFzZS5nZXRPdXRwdXRMZW5ndGgoaW5wdXRMZW5ndGggKiB0aGlzLmJhc2UubnVtQ29tcHMsIGFscGhhMDEpOwogIH0KICBpc0RlZmF1bHREZWNvZGUoZGVjb2RlTWFwLCBicGMpIHsKICAgIGlmICghQXJyYXkuaXNBcnJheShkZWNvZGVNYXApKSB7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgaWYgKGRlY29kZU1hcC5sZW5ndGggIT09IDIpIHsKICAgICAgd2FybigiRGVjb2RlIG1hcCBsZW5ndGggaXMgbm90IGNvcnJlY3QiKTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICBpZiAoIU51bWJlci5pc0ludGVnZXIoYnBjKSB8fCBicGMgPCAxKSB7CiAgICAgIHdhcm4oIkJpdHMgcGVyIGNvbXBvbmVudCBpcyBub3QgY29ycmVjdCIpOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIHJldHVybiBkZWNvZGVNYXBbMF0gPT09IDAgJiYgZGVjb2RlTWFwWzFdID09PSAoMSA8PCBicGMpIC0gMTsKICB9Cn0KY2xhc3MgRGV2aWNlR3JheUNTIGV4dGVuZHMgQ29sb3JTcGFjZSB7CiAgY29uc3RydWN0b3IoKSB7CiAgICBzdXBlcigiRGV2aWNlR3JheSIsIDEpOwogIH0KICBnZXRSZ2JJdGVtKHNyYywgc3JjT2Zmc2V0LCBkZXN0LCBkZXN0T2Zmc2V0KSB7CiAgICBjb25zdCBjID0gc3JjW3NyY09mZnNldF0gKiAyNTU7CiAgICBkZXN0W2Rlc3RPZmZzZXRdID0gZGVzdFtkZXN0T2Zmc2V0ICsgMV0gPSBkZXN0W2Rlc3RPZmZzZXQgKyAyXSA9IGM7CiAgfQogIGdldFJnYkJ1ZmZlcihzcmMsIHNyY09mZnNldCwgY291bnQsIGRlc3QsIGRlc3RPZmZzZXQsIGJpdHMsIGFscGhhMDEpIHsKICAgIGNvbnN0IHNjYWxlID0gMjU1IC8gKCgxIDw8IGJpdHMpIC0gMSk7CiAgICBsZXQgaiA9IHNyY09mZnNldCwKICAgICAgcSA9IGRlc3RPZmZzZXQ7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyArK2kpIHsKICAgICAgY29uc3QgYyA9IHNjYWxlICogc3JjW2orK107CiAgICAgIGRlc3RbcSsrXSA9IGM7CiAgICAgIGRlc3RbcSsrXSA9IGM7CiAgICAgIGRlc3RbcSsrXSA9IGM7CiAgICAgIHEgKz0gYWxwaGEwMTsKICAgIH0KICB9CiAgZ2V0T3V0cHV0TGVuZ3RoKGlucHV0TGVuZ3RoLCBhbHBoYTAxKSB7CiAgICByZXR1cm4gaW5wdXRMZW5ndGggKiAoMyArIGFscGhhMDEpOwogIH0KfQpjbGFzcyBEZXZpY2VSZ2JDUyBleHRlbmRzIENvbG9yU3BhY2UgewogIGNvbnN0cnVjdG9yKCkgewogICAgc3VwZXIoIkRldmljZVJHQiIsIDMpOwogIH0KICBnZXRSZ2JJdGVtKHNyYywgc3JjT2Zmc2V0LCBkZXN0LCBkZXN0T2Zmc2V0KSB7CiAgICBkZXN0W2Rlc3RPZmZzZXRdID0gc3JjW3NyY09mZnNldF0gKiAyNTU7CiAgICBkZXN0W2Rlc3RPZmZzZXQgKyAxXSA9IHNyY1tzcmNPZmZzZXQgKyAxXSAqIDI1NTsKICAgIGRlc3RbZGVzdE9mZnNldCArIDJdID0gc3JjW3NyY09mZnNldCArIDJdICogMjU1OwogIH0KICBnZXRSZ2JCdWZmZXIoc3JjLCBzcmNPZmZzZXQsIGNvdW50LCBkZXN0LCBkZXN0T2Zmc2V0LCBiaXRzLCBhbHBoYTAxKSB7CiAgICBpZiAoYml0cyA9PT0gOCAmJiBhbHBoYTAxID09PSAwKSB7CiAgICAgIGRlc3Quc2V0KHNyYy5zdWJhcnJheShzcmNPZmZzZXQsIHNyY09mZnNldCArIGNvdW50ICogMyksIGRlc3RPZmZzZXQpOwogICAgICByZXR1cm47CiAgICB9CiAgICBjb25zdCBzY2FsZSA9IDI1NSAvICgoMSA8PCBiaXRzKSAtIDEpOwogICAgbGV0IGogPSBzcmNPZmZzZXQsCiAgICAgIHEgPSBkZXN0T2Zmc2V0OwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgKytpKSB7CiAgICAgIGRlc3RbcSsrXSA9IHNjYWxlICogc3JjW2orK107CiAgICAgIGRlc3RbcSsrXSA9IHNjYWxlICogc3JjW2orK107CiAgICAgIGRlc3RbcSsrXSA9IHNjYWxlICogc3JjW2orK107CiAgICAgIHEgKz0gYWxwaGEwMTsKICAgIH0KICB9CiAgZ2V0T3V0cHV0TGVuZ3RoKGlucHV0TGVuZ3RoLCBhbHBoYTAxKSB7CiAgICByZXR1cm4gaW5wdXRMZW5ndGggKiAoMyArIGFscGhhMDEpIC8gMyB8IDA7CiAgfQogIGlzUGFzc3Rocm91Z2goYml0cykgewogICAgcmV0dXJuIGJpdHMgPT09IDg7CiAgfQp9CmNsYXNzIERldmljZVJnYmFDUyBleHRlbmRzIENvbG9yU3BhY2UgewogIGNvbnN0cnVjdG9yKCkgewogICAgc3VwZXIoIkRldmljZVJHQkEiLCA0KTsKICB9CiAgZ2V0T3V0cHV0TGVuZ3RoKGlucHV0TGVuZ3RoLCBfYWxwaGEwMSkgewogICAgcmV0dXJuIGlucHV0TGVuZ3RoICogNDsKICB9CiAgaXNQYXNzdGhyb3VnaChiaXRzKSB7CiAgICByZXR1cm4gYml0cyA9PT0gODsKICB9CiAgZmlsbFJnYihkZXN0LCBvcmlnaW5hbFdpZHRoLCBvcmlnaW5hbEhlaWdodCwgd2lkdGgsIGhlaWdodCwgYWN0dWFsSGVpZ2h0LCBicGMsIGNvbXBzLCBhbHBoYTAxKSB7CiAgICBpZiAob3JpZ2luYWxIZWlnaHQgIT09IGhlaWdodCB8fCBvcmlnaW5hbFdpZHRoICE9PSB3aWR0aCkgewogICAgICByZXNpemVSZ2JhSW1hZ2UoY29tcHMsIGRlc3QsIG9yaWdpbmFsV2lkdGgsIG9yaWdpbmFsSGVpZ2h0LCB3aWR0aCwgaGVpZ2h0LCBhbHBoYTAxKTsKICAgIH0gZWxzZSB7CiAgICAgIGNvcHlSZ2JhSW1hZ2UoY29tcHMsIGRlc3QsIGFscGhhMDEpOwogICAgfQogIH0KfQpjbGFzcyBEZXZpY2VDbXlrQ1MgZXh0ZW5kcyBDb2xvclNwYWNlIHsKICBjb25zdHJ1Y3RvcigpIHsKICAgIHN1cGVyKCJEZXZpY2VDTVlLIiwgNCk7CiAgfQogICN0b1JnYihzcmMsIHNyY09mZnNldCwgc3JjU2NhbGUsIGRlc3QsIGRlc3RPZmZzZXQpIHsKICAgIGNvbnN0IGMgPSBzcmNbc3JjT2Zmc2V0XSAqIHNyY1NjYWxlOwogICAgY29uc3QgbSA9IHNyY1tzcmNPZmZzZXQgKyAxXSAqIHNyY1NjYWxlOwogICAgY29uc3QgeSA9IHNyY1tzcmNPZmZzZXQgKyAyXSAqIHNyY1NjYWxlOwogICAgY29uc3QgayA9IHNyY1tzcmNPZmZzZXQgKyAzXSAqIHNyY1NjYWxlOwogICAgZGVzdFtkZXN0T2Zmc2V0XSA9IDI1NSArIGMgKiAoLTQuMzg3MzMyMzg0NjA5OTg4ICogYyArIDU0LjQ4NjE1MTk0MTg5MTc2ICogbSArIDE4LjgyMjkwNTAyMTY1MzAyICogeSArIDIxMi4yNTY2MjQ1MTYzOTU4NSAqIGsgKyAtMjg1LjIzMzEwMjYxMzcwMDQpICsgbSAqICgxLjcxNDk3NjM0NzczNjIxMzQgKiBtIC0gNS42MDk2NzM2OTA0MDQ3MzE1ICogeSArIC0xNy44NzM4NzA4NjE0MTU0NDQgKiBrIC0gNS40OTcwMDY0MjcxOTYzNjYpICsgeSAqICgtMi41MjE3MzQwMTMxNjgzMDMzICogeSAtIDIxLjI0ODkyMzMzNzM1MzA3MyAqIGsgKyAxNy41MTE5MjcwODQxODEzKSArIGsgKiAoLTIxLjg2MTIyMTQ3NDYzNjA1ICogayAtIDE4OS40ODE4MDgzNTkyMjc0Nyk7CiAgICBkZXN0W2Rlc3RPZmZzZXQgKyAxXSA9IDI1NSArIGMgKiAoOC44NDEwNDE0MjIwMzYxNDkgKiBjICsgNjAuMTE4MDI3MDQ1NTk3MzY2ICogbSArIDYuODcxNDI1NTkyMDQ5MDA3ICogeSArIDMxLjE1OTEwMDEzMDA1NTkyMiAqIGsgKyAtNzkuMjk3MDg0NDgxNjU0OCkgKyBtICogKC0xNS4zMTAzNjEzMDY5Njc4MTcgKiBtICsgMTcuNTc1MjUxMjYxMTA5NDgyICogeSArIDEzMS4zNTI1MDkxMjQ5Mzk3NiAqIGsgLSAxOTAuOTQ1MzMwMjU4ODk1MSkgKyB5ICogKDQuNDQ0MzM5MTAyODUyNzM5ICogeSArIDkuODYzMjg2MTQ5MzQwNSAqIGsgLSAyNC44Njc0MTU4MjU1NTg3OCkgKyBrICogKC0yMC43MzczMjU0NzExODEwMzQgKiBrIC0gMTg3LjgwNDUzNzA5NzE5NTc4KTsKICAgIGRlc3RbZGVzdE9mZnNldCArIDJdID0gMjU1ICsgYyAqICgwLjg4NDI1MjI0MzAwMDMyOTYgKiBjICsgOC4wNzg2Nzc1MDMxMTI5MjggKiBtICsgMzAuODk5NzgzMDk3MDM3MjkgKiB5IC0gMC4yMzg4MzIzODY4OTE3ODkzNCAqIGsgKyAtMTQuMTgzNTc2Nzk5NjczMjg2KSArIG0gKiAoMTAuNDk1OTMyNzM0MzIwNzIgKiBtICsgNjMuMDIzNzg0OTQ3NTQwNTIgKiB5ICsgNTAuNjA2OTU3NjU2MzYwNzM0ICogayAtIDExMi4yMzg4NDI1MzcxOTI0OCkgKyB5ICogKDAuMDMyOTYwNDExMTQ4NzMyMTcgKiB5ICsgMTE1LjYwMzg0NDQ5NjQ2NjQxICogayArIC0xOTMuNTgyMDkzNTY4NjE1MDUpICsgayAqICgtMjIuMzM4MTY4MDczMDk4ODYgKiBrIC0gMTgwLjEyNjEzOTc0NzA4MzY3KTsKICB9CiAgZ2V0UmdiSXRlbShzcmMsIHNyY09mZnNldCwgZGVzdCwgZGVzdE9mZnNldCkgewogICAgdGhpcy4jdG9SZ2Ioc3JjLCBzcmNPZmZzZXQsIDEsIGRlc3QsIGRlc3RPZmZzZXQpOwogIH0KICBnZXRSZ2JCdWZmZXIoc3JjLCBzcmNPZmZzZXQsIGNvdW50LCBkZXN0LCBkZXN0T2Zmc2V0LCBiaXRzLCBhbHBoYTAxKSB7CiAgICBjb25zdCBzY2FsZSA9IDEgLyAoKDEgPDwgYml0cykgLSAxKTsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykgewogICAgICB0aGlzLiN0b1JnYihzcmMsIHNyY09mZnNldCwgc2NhbGUsIGRlc3QsIGRlc3RPZmZzZXQpOwogICAgICBzcmNPZmZzZXQgKz0gNDsKICAgICAgZGVzdE9mZnNldCArPSAzICsgYWxwaGEwMTsKICAgIH0KICB9CiAgZ2V0T3V0cHV0TGVuZ3RoKGlucHV0TGVuZ3RoLCBhbHBoYTAxKSB7CiAgICByZXR1cm4gaW5wdXRMZW5ndGggLyA0ICogKDMgKyBhbHBoYTAxKSB8IDA7CiAgfQp9CmNsYXNzIENhbEdyYXlDUyBleHRlbmRzIENvbG9yU3BhY2UgewogIGNvbnN0cnVjdG9yKHdoaXRlUG9pbnQsIGJsYWNrUG9pbnQsIGdhbW1hKSB7CiAgICBzdXBlcigiQ2FsR3JheSIsIDEpOwogICAgaWYgKCF3aGl0ZVBvaW50KSB7CiAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigiV2hpdGVQb2ludCBtaXNzaW5nIC0gcmVxdWlyZWQgZm9yIGNvbG9yIHNwYWNlIENhbEdyYXkiKTsKICAgIH0KICAgIFt0aGlzLlhXLCB0aGlzLllXLCB0aGlzLlpXXSA9IHdoaXRlUG9pbnQ7CiAgICBbdGhpcy5YQiwgdGhpcy5ZQiwgdGhpcy5aQl0gPSBibGFja1BvaW50IHx8IFswLCAwLCAwXTsKICAgIHRoaXMuRyA9IGdhbW1hIHx8IDE7CiAgICBpZiAodGhpcy5YVyA8IDAgfHwgdGhpcy5aVyA8IDAgfHwgdGhpcy5ZVyAhPT0gMSkgewogICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoYEludmFsaWQgV2hpdGVQb2ludCBjb21wb25lbnRzIGZvciAke3RoaXMubmFtZX0sIG5vIGZhbGxiYWNrIGF2YWlsYWJsZWApOwogICAgfQogICAgaWYgKHRoaXMuWEIgPCAwIHx8IHRoaXMuWUIgPCAwIHx8IHRoaXMuWkIgPCAwKSB7CiAgICAgIGluZm8oYEludmFsaWQgQmxhY2tQb2ludCBmb3IgJHt0aGlzLm5hbWV9LCBmYWxsaW5nIGJhY2sgdG8gZGVmYXVsdC5gKTsKICAgICAgdGhpcy5YQiA9IHRoaXMuWUIgPSB0aGlzLlpCID0gMDsKICAgIH0KICAgIGlmICh0aGlzLlhCICE9PSAwIHx8IHRoaXMuWUIgIT09IDAgfHwgdGhpcy5aQiAhPT0gMCkgewogICAgICB3YXJuKGAke3RoaXMubmFtZX0sIEJsYWNrUG9pbnQ6IFhCOiAke3RoaXMuWEJ9LCBZQjogJHt0aGlzLllCfSwgYCArIGBaQjogJHt0aGlzLlpCfSwgb25seSBkZWZhdWx0IHZhbHVlcyBhcmUgc3VwcG9ydGVkLmApOwogICAgfQogICAgaWYgKHRoaXMuRyA8IDEpIHsKICAgICAgaW5mbyhgSW52YWxpZCBHYW1tYTogJHt0aGlzLkd9IGZvciAke3RoaXMubmFtZX0sIGZhbGxpbmcgYmFjayB0byBkZWZhdWx0LmApOwogICAgICB0aGlzLkcgPSAxOwogICAgfQogIH0KICAjdG9SZ2Ioc3JjLCBzcmNPZmZzZXQsIGRlc3QsIGRlc3RPZmZzZXQsIHNjYWxlKSB7CiAgICBjb25zdCBBID0gc3JjW3NyY09mZnNldF0gKiBzY2FsZTsKICAgIGNvbnN0IEFHID0gQSAqKiB0aGlzLkc7CiAgICBjb25zdCBMID0gdGhpcy5ZVyAqIEFHOwogICAgY29uc3QgdmFsID0gTWF0aC5tYXgoMjk1LjggKiBMICoqIDAuMzMzMzMzMzMzMzMzMzMzMyAtIDQwLjgsIDApOwogICAgZGVzdFtkZXN0T2Zmc2V0XSA9IHZhbDsKICAgIGRlc3RbZGVzdE9mZnNldCArIDFdID0gdmFsOwogICAgZGVzdFtkZXN0T2Zmc2V0ICsgMl0gPSB2YWw7CiAgfQogIGdldFJnYkl0ZW0oc3JjLCBzcmNPZmZzZXQsIGRlc3QsIGRlc3RPZmZzZXQpIHsKICAgIHRoaXMuI3RvUmdiKHNyYywgc3JjT2Zmc2V0LCBkZXN0LCBkZXN0T2Zmc2V0LCAxKTsKICB9CiAgZ2V0UmdiQnVmZmVyKHNyYywgc3JjT2Zmc2V0LCBjb3VudCwgZGVzdCwgZGVzdE9mZnNldCwgYml0cywgYWxwaGEwMSkgewogICAgY29uc3Qgc2NhbGUgPSAxIC8gKCgxIDw8IGJpdHMpIC0gMSk7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyArK2kpIHsKICAgICAgdGhpcy4jdG9SZ2Ioc3JjLCBzcmNPZmZzZXQsIGRlc3QsIGRlc3RPZmZzZXQsIHNjYWxlKTsKICAgICAgc3JjT2Zmc2V0ICs9IDE7CiAgICAgIGRlc3RPZmZzZXQgKz0gMyArIGFscGhhMDE7CiAgICB9CiAgfQogIGdldE91dHB1dExlbmd0aChpbnB1dExlbmd0aCwgYWxwaGEwMSkgewogICAgcmV0dXJuIGlucHV0TGVuZ3RoICogKDMgKyBhbHBoYTAxKTsKICB9Cn0KY2xhc3MgQ2FsUkdCQ1MgZXh0ZW5kcyBDb2xvclNwYWNlIHsKICBzdGF0aWMgI0JSQURGT1JEX1NDQUxFX01BVFJJWCA9IG5ldyBGbG9hdDMyQXJyYXkoWzAuODk1MSwgMC4yNjY0LCAtMC4xNjE0LCAtMC43NTAyLCAxLjcxMzUsIDAuMDM2NywgMC4wMzg5LCAtMC4wNjg1LCAxLjAyOTZdKTsKICBzdGF0aWMgI0JSQURGT1JEX1NDQUxFX0lOVkVSU0VfTUFUUklYID0gbmV3IEZsb2F0MzJBcnJheShbMC45ODY5OTI5LCAtMC4xNDcwNTQzLCAwLjE1OTk2MjcsIDAuNDMyMzA1MywgMC41MTgzNjAzLCAwLjA0OTI5MTIsIC0wLjAwODUyODcsIDAuMDQwMDQyOCwgMC45Njg0ODY3XSk7CiAgc3RhdGljICNTUkdCX0Q2NV9YWVpfVE9fUkdCX01BVFJJWCA9IG5ldyBGbG9hdDMyQXJyYXkoWzMuMjQwNDU0MiwgLTEuNTM3MTM4NSwgLTAuNDk4NTMxNCwgLTAuOTY5MjY2MCwgMS44NzYwMTA4LCAwLjA0MTU1NjAsIDAuMDU1NjQzNCwgLTAuMjA0MDI1OSwgMS4wNTcyMjUyXSk7CiAgc3RhdGljICNGTEFUX1dISVRFUE9JTlRfTUFUUklYID0gbmV3IEZsb2F0MzJBcnJheShbMSwgMSwgMV0pOwogIHN0YXRpYyAjdGVtcE5vcm1hbGl6ZU1hdHJpeCA9IG5ldyBGbG9hdDMyQXJyYXkoMyk7CiAgc3RhdGljICN0ZW1wQ29udmVydE1hdHJpeDEgPSBuZXcgRmxvYXQzMkFycmF5KDMpOwogIHN0YXRpYyAjdGVtcENvbnZlcnRNYXRyaXgyID0gbmV3IEZsb2F0MzJBcnJheSgzKTsKICBzdGF0aWMgI0RFQ09ERV9MX0NPTlNUQU5UID0gKCg4ICsgMTYpIC8gMTE2KSAqKiAzIC8gOC4wOwogIGNvbnN0cnVjdG9yKHdoaXRlUG9pbnQsIGJsYWNrUG9pbnQsIGdhbW1hLCBtYXRyaXgpIHsKICAgIHN1cGVyKCJDYWxSR0IiLCAzKTsKICAgIGlmICghd2hpdGVQb2ludCkgewogICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoIldoaXRlUG9pbnQgbWlzc2luZyAtIHJlcXVpcmVkIGZvciBjb2xvciBzcGFjZSBDYWxSR0IiKTsKICAgIH0KICAgIGNvbnN0IFtYVywgWVcsIFpXXSA9IHRoaXMud2hpdGVQb2ludCA9IHdoaXRlUG9pbnQ7CiAgICBjb25zdCBbWEIsIFlCLCBaQl0gPSB0aGlzLmJsYWNrUG9pbnQgPSBibGFja1BvaW50IHx8IG5ldyBGbG9hdDMyQXJyYXkoMyk7CiAgICBbdGhpcy5HUiwgdGhpcy5HRywgdGhpcy5HQl0gPSBnYW1tYSB8fCBuZXcgRmxvYXQzMkFycmF5KFsxLCAxLCAxXSk7CiAgICBbdGhpcy5NWEEsIHRoaXMuTVlBLCB0aGlzLk1aQSwgdGhpcy5NWEIsIHRoaXMuTVlCLCB0aGlzLk1aQiwgdGhpcy5NWEMsIHRoaXMuTVlDLCB0aGlzLk1aQ10gPSBtYXRyaXggfHwgbmV3IEZsb2F0MzJBcnJheShbMSwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMV0pOwogICAgaWYgKFhXIDwgMCB8fCBaVyA8IDAgfHwgWVcgIT09IDEpIHsKICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKGBJbnZhbGlkIFdoaXRlUG9pbnQgY29tcG9uZW50cyBmb3IgJHt0aGlzLm5hbWV9LCBubyBmYWxsYmFjayBhdmFpbGFibGVgKTsKICAgIH0KICAgIGlmIChYQiA8IDAgfHwgWUIgPCAwIHx8IFpCIDwgMCkgewogICAgICBpbmZvKGBJbnZhbGlkIEJsYWNrUG9pbnQgZm9yICR7dGhpcy5uYW1lfSBbJHtYQn0sICR7WUJ9LCAke1pCfV0sIGAgKyAiZmFsbGluZyBiYWNrIHRvIGRlZmF1bHQuIik7CiAgICAgIHRoaXMuYmxhY2tQb2ludCA9IG5ldyBGbG9hdDMyQXJyYXkoMyk7CiAgICB9CiAgICBpZiAodGhpcy5HUiA8IDAgfHwgdGhpcy5HRyA8IDAgfHwgdGhpcy5HQiA8IDApIHsKICAgICAgaW5mbyhgSW52YWxpZCBHYW1tYSBbJHt0aGlzLkdSfSwgJHt0aGlzLkdHfSwgJHt0aGlzLkdCfV0gZm9yIGAgKyBgJHt0aGlzLm5hbWV9LCBmYWxsaW5nIGJhY2sgdG8gZGVmYXVsdC5gKTsKICAgICAgdGhpcy5HUiA9IHRoaXMuR0cgPSB0aGlzLkdCID0gMTsKICAgIH0KICB9CiAgI21hdHJpeFByb2R1Y3QoYSwgYiwgcmVzdWx0KSB7CiAgICByZXN1bHRbMF0gPSBhWzBdICogYlswXSArIGFbMV0gKiBiWzFdICsgYVsyXSAqIGJbMl07CiAgICByZXN1bHRbMV0gPSBhWzNdICogYlswXSArIGFbNF0gKiBiWzFdICsgYVs1XSAqIGJbMl07CiAgICByZXN1bHRbMl0gPSBhWzZdICogYlswXSArIGFbN10gKiBiWzFdICsgYVs4XSAqIGJbMl07CiAgfQogICN0b0ZsYXQoc291cmNlV2hpdGVQb2ludCwgTE1TLCByZXN1bHQpIHsKICAgIHJlc3VsdFswXSA9IExNU1swXSAqIDEgLyBzb3VyY2VXaGl0ZVBvaW50WzBdOwogICAgcmVzdWx0WzFdID0gTE1TWzFdICogMSAvIHNvdXJjZVdoaXRlUG9pbnRbMV07CiAgICByZXN1bHRbMl0gPSBMTVNbMl0gKiAxIC8gc291cmNlV2hpdGVQb2ludFsyXTsKICB9CiAgI3RvRDY1KHNvdXJjZVdoaXRlUG9pbnQsIExNUywgcmVzdWx0KSB7CiAgICBjb25zdCBENjVYID0gMC45NTA0NzsKICAgIGNvbnN0IEQ2NVkgPSAxOwogICAgY29uc3QgRDY1WiA9IDEuMDg4ODM7CiAgICByZXN1bHRbMF0gPSBMTVNbMF0gKiBENjVYIC8gc291cmNlV2hpdGVQb2ludFswXTsKICAgIHJlc3VsdFsxXSA9IExNU1sxXSAqIEQ2NVkgLyBzb3VyY2VXaGl0ZVBvaW50WzFdOwogICAgcmVzdWx0WzJdID0gTE1TWzJdICogRDY1WiAvIHNvdXJjZVdoaXRlUG9pbnRbMl07CiAgfQogICNzUkdCVHJhbnNmZXJGdW5jdGlvbihjb2xvcikgewogICAgaWYgKGNvbG9yIDw9IDAuMDAzMTMwOCkgewogICAgICByZXR1cm4gTWF0aENsYW1wKDEyLjkyICogY29sb3IsIDAsIDEpOwogICAgfQogICAgaWYgKGNvbG9yID49IDAuOTk1NTQ1MjUpIHsKICAgICAgcmV0dXJuIDE7CiAgICB9CiAgICByZXR1cm4gTWF0aENsYW1wKCgxICsgMC4wNTUpICogY29sb3IgKiogKDEgLyAyLjQpIC0gMC4wNTUsIDAsIDEpOwogIH0KICAjZGVjb2RlTChMKSB7CiAgICBpZiAoTCA8IDApIHsKICAgICAgcmV0dXJuIC10aGlzLiNkZWNvZGVMKC1MKTsKICAgIH0KICAgIGlmIChMID4gOC4wKSB7CiAgICAgIHJldHVybiAoKEwgKyAxNikgLyAxMTYpICoqIDM7CiAgICB9CiAgICByZXR1cm4gTCAqIENhbFJHQkNTLiNERUNPREVfTF9DT05TVEFOVDsKICB9CiAgI2NvbXBlbnNhdGVCbGFja1BvaW50KHNvdXJjZUJsYWNrUG9pbnQsIFhZWl9GbGF0LCByZXN1bHQpIHsKICAgIGlmIChzb3VyY2VCbGFja1BvaW50WzBdID09PSAwICYmIHNvdXJjZUJsYWNrUG9pbnRbMV0gPT09IDAgJiYgc291cmNlQmxhY2tQb2ludFsyXSA9PT0gMCkgewogICAgICByZXN1bHRbMF0gPSBYWVpfRmxhdFswXTsKICAgICAgcmVzdWx0WzFdID0gWFlaX0ZsYXRbMV07CiAgICAgIHJlc3VsdFsyXSA9IFhZWl9GbGF0WzJdOwogICAgICByZXR1cm47CiAgICB9CiAgICBjb25zdCB6ZXJvRGVjb2RlTCA9IHRoaXMuI2RlY29kZUwoMCk7CiAgICBjb25zdCBYX0RTVCA9IHplcm9EZWNvZGVMOwogICAgY29uc3QgWF9TUkMgPSB0aGlzLiNkZWNvZGVMKHNvdXJjZUJsYWNrUG9pbnRbMF0pOwogICAgY29uc3QgWV9EU1QgPSB6ZXJvRGVjb2RlTDsKICAgIGNvbnN0IFlfU1JDID0gdGhpcy4jZGVjb2RlTChzb3VyY2VCbGFja1BvaW50WzFdKTsKICAgIGNvbnN0IFpfRFNUID0gemVyb0RlY29kZUw7CiAgICBjb25zdCBaX1NSQyA9IHRoaXMuI2RlY29kZUwoc291cmNlQmxhY2tQb2ludFsyXSk7CiAgICBjb25zdCBYX1NjYWxlID0gKDEgLSBYX0RTVCkgLyAoMSAtIFhfU1JDKTsKICAgIGNvbnN0IFhfT2Zmc2V0ID0gMSAtIFhfU2NhbGU7CiAgICBjb25zdCBZX1NjYWxlID0gKDEgLSBZX0RTVCkgLyAoMSAtIFlfU1JDKTsKICAgIGNvbnN0IFlfT2Zmc2V0ID0gMSAtIFlfU2NhbGU7CiAgICBjb25zdCBaX1NjYWxlID0gKDEgLSBaX0RTVCkgLyAoMSAtIFpfU1JDKTsKICAgIGNvbnN0IFpfT2Zmc2V0ID0gMSAtIFpfU2NhbGU7CiAgICByZXN1bHRbMF0gPSBYWVpfRmxhdFswXSAqIFhfU2NhbGUgKyBYX09mZnNldDsKICAgIHJlc3VsdFsxXSA9IFhZWl9GbGF0WzFdICogWV9TY2FsZSArIFlfT2Zmc2V0OwogICAgcmVzdWx0WzJdID0gWFlaX0ZsYXRbMl0gKiBaX1NjYWxlICsgWl9PZmZzZXQ7CiAgfQogICNub3JtYWxpemVXaGl0ZVBvaW50VG9GbGF0KHNvdXJjZVdoaXRlUG9pbnQsIFhZWl9JbiwgcmVzdWx0KSB7CiAgICBpZiAoc291cmNlV2hpdGVQb2ludFswXSA9PT0gMSAmJiBzb3VyY2VXaGl0ZVBvaW50WzJdID09PSAxKSB7CiAgICAgIHJlc3VsdFswXSA9IFhZWl9JblswXTsKICAgICAgcmVzdWx0WzFdID0gWFlaX0luWzFdOwogICAgICByZXN1bHRbMl0gPSBYWVpfSW5bMl07CiAgICAgIHJldHVybjsKICAgIH0KICAgIGNvbnN0IExNUyA9IHJlc3VsdDsKICAgIHRoaXMuI21hdHJpeFByb2R1Y3QoQ2FsUkdCQ1MuI0JSQURGT1JEX1NDQUxFX01BVFJJWCwgWFlaX0luLCBMTVMpOwogICAgY29uc3QgTE1TX0ZsYXQgPSBDYWxSR0JDUy4jdGVtcE5vcm1hbGl6ZU1hdHJpeDsKICAgIHRoaXMuI3RvRmxhdChzb3VyY2VXaGl0ZVBvaW50LCBMTVMsIExNU19GbGF0KTsKICAgIHRoaXMuI21hdHJpeFByb2R1Y3QoQ2FsUkdCQ1MuI0JSQURGT1JEX1NDQUxFX0lOVkVSU0VfTUFUUklYLCBMTVNfRmxhdCwgcmVzdWx0KTsKICB9CiAgI25vcm1hbGl6ZVdoaXRlUG9pbnRUb0Q2NShzb3VyY2VXaGl0ZVBvaW50LCBYWVpfSW4sIHJlc3VsdCkgewogICAgY29uc3QgTE1TID0gcmVzdWx0OwogICAgdGhpcy4jbWF0cml4UHJvZHVjdChDYWxSR0JDUy4jQlJBREZPUkRfU0NBTEVfTUFUUklYLCBYWVpfSW4sIExNUyk7CiAgICBjb25zdCBMTVNfRDY1ID0gQ2FsUkdCQ1MuI3RlbXBOb3JtYWxpemVNYXRyaXg7CiAgICB0aGlzLiN0b0Q2NShzb3VyY2VXaGl0ZVBvaW50LCBMTVMsIExNU19ENjUpOwogICAgdGhpcy4jbWF0cml4UHJvZHVjdChDYWxSR0JDUy4jQlJBREZPUkRfU0NBTEVfSU5WRVJTRV9NQVRSSVgsIExNU19ENjUsIHJlc3VsdCk7CiAgfQogICN0b1JnYihzcmMsIHNyY09mZnNldCwgZGVzdCwgZGVzdE9mZnNldCwgc2NhbGUpIHsKICAgIGNvbnN0IEEgPSBNYXRoQ2xhbXAoc3JjW3NyY09mZnNldF0gKiBzY2FsZSwgMCwgMSk7CiAgICBjb25zdCBCID0gTWF0aENsYW1wKHNyY1tzcmNPZmZzZXQgKyAxXSAqIHNjYWxlLCAwLCAxKTsKICAgIGNvbnN0IEMgPSBNYXRoQ2xhbXAoc3JjW3NyY09mZnNldCArIDJdICogc2NhbGUsIDAsIDEpOwogICAgY29uc3QgQUdSID0gQSA9PT0gMSA/IDEgOiBBICoqIHRoaXMuR1I7CiAgICBjb25zdCBCR0cgPSBCID09PSAxID8gMSA6IEIgKiogdGhpcy5HRzsKICAgIGNvbnN0IENHQiA9IEMgPT09IDEgPyAxIDogQyAqKiB0aGlzLkdCOwogICAgY29uc3QgWCA9IHRoaXMuTVhBICogQUdSICsgdGhpcy5NWEIgKiBCR0cgKyB0aGlzLk1YQyAqIENHQjsKICAgIGNvbnN0IFkgPSB0aGlzLk1ZQSAqIEFHUiArIHRoaXMuTVlCICogQkdHICsgdGhpcy5NWUMgKiBDR0I7CiAgICBjb25zdCBaID0gdGhpcy5NWkEgKiBBR1IgKyB0aGlzLk1aQiAqIEJHRyArIHRoaXMuTVpDICogQ0dCOwogICAgY29uc3QgWFlaID0gQ2FsUkdCQ1MuI3RlbXBDb252ZXJ0TWF0cml4MTsKICAgIFhZWlswXSA9IFg7CiAgICBYWVpbMV0gPSBZOwogICAgWFlaWzJdID0gWjsKICAgIGNvbnN0IFhZWl9GbGF0ID0gQ2FsUkdCQ1MuI3RlbXBDb252ZXJ0TWF0cml4MjsKICAgIHRoaXMuI25vcm1hbGl6ZVdoaXRlUG9pbnRUb0ZsYXQodGhpcy53aGl0ZVBvaW50LCBYWVosIFhZWl9GbGF0KTsKICAgIGNvbnN0IFhZWl9CbGFjayA9IENhbFJHQkNTLiN0ZW1wQ29udmVydE1hdHJpeDE7CiAgICB0aGlzLiNjb21wZW5zYXRlQmxhY2tQb2ludCh0aGlzLmJsYWNrUG9pbnQsIFhZWl9GbGF0LCBYWVpfQmxhY2spOwogICAgY29uc3QgWFlaX0Q2NSA9IENhbFJHQkNTLiN0ZW1wQ29udmVydE1hdHJpeDI7CiAgICB0aGlzLiNub3JtYWxpemVXaGl0ZVBvaW50VG9ENjUoQ2FsUkdCQ1MuI0ZMQVRfV0hJVEVQT0lOVF9NQVRSSVgsIFhZWl9CbGFjaywgWFlaX0Q2NSk7CiAgICBjb25zdCBTUkdCID0gQ2FsUkdCQ1MuI3RlbXBDb252ZXJ0TWF0cml4MTsKICAgIHRoaXMuI21hdHJpeFByb2R1Y3QoQ2FsUkdCQ1MuI1NSR0JfRDY1X1hZWl9UT19SR0JfTUFUUklYLCBYWVpfRDY1LCBTUkdCKTsKICAgIGRlc3RbZGVzdE9mZnNldF0gPSB0aGlzLiNzUkdCVHJhbnNmZXJGdW5jdGlvbihTUkdCWzBdKSAqIDI1NTsKICAgIGRlc3RbZGVzdE9mZnNldCArIDFdID0gdGhpcy4jc1JHQlRyYW5zZmVyRnVuY3Rpb24oU1JHQlsxXSkgKiAyNTU7CiAgICBkZXN0W2Rlc3RPZmZzZXQgKyAyXSA9IHRoaXMuI3NSR0JUcmFuc2ZlckZ1bmN0aW9uKFNSR0JbMl0pICogMjU1OwogIH0KICBnZXRSZ2JJdGVtKHNyYywgc3JjT2Zmc2V0LCBkZXN0LCBkZXN0T2Zmc2V0KSB7CiAgICB0aGlzLiN0b1JnYihzcmMsIHNyY09mZnNldCwgZGVzdCwgZGVzdE9mZnNldCwgMSk7CiAgfQogIGdldFJnYkJ1ZmZlcihzcmMsIHNyY09mZnNldCwgY291bnQsIGRlc3QsIGRlc3RPZmZzZXQsIGJpdHMsIGFscGhhMDEpIHsKICAgIGNvbnN0IHNjYWxlID0gMSAvICgoMSA8PCBiaXRzKSAtIDEpOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgKytpKSB7CiAgICAgIHRoaXMuI3RvUmdiKHNyYywgc3JjT2Zmc2V0LCBkZXN0LCBkZXN0T2Zmc2V0LCBzY2FsZSk7CiAgICAgIHNyY09mZnNldCArPSAzOwogICAgICBkZXN0T2Zmc2V0ICs9IDMgKyBhbHBoYTAxOwogICAgfQogIH0KICBnZXRPdXRwdXRMZW5ndGgoaW5wdXRMZW5ndGgsIGFscGhhMDEpIHsKICAgIHJldHVybiBpbnB1dExlbmd0aCAqICgzICsgYWxwaGEwMSkgLyAzIHwgMDsKICB9Cn0KY2xhc3MgTGFiQ1MgZXh0ZW5kcyBDb2xvclNwYWNlIHsKICBjb25zdHJ1Y3Rvcih3aGl0ZVBvaW50LCBibGFja1BvaW50LCByYW5nZSkgewogICAgc3VwZXIoIkxhYiIsIDMpOwogICAgaWYgKCF3aGl0ZVBvaW50KSB7CiAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigiV2hpdGVQb2ludCBtaXNzaW5nIC0gcmVxdWlyZWQgZm9yIGNvbG9yIHNwYWNlIExhYiIpOwogICAgfQogICAgW3RoaXMuWFcsIHRoaXMuWVcsIHRoaXMuWlddID0gd2hpdGVQb2ludDsKICAgIFt0aGlzLmFtaW4sIHRoaXMuYW1heCwgdGhpcy5ibWluLCB0aGlzLmJtYXhdID0gcmFuZ2UgfHwgWy0xMDAsIDEwMCwgLTEwMCwgMTAwXTsKICAgIFt0aGlzLlhCLCB0aGlzLllCLCB0aGlzLlpCXSA9IGJsYWNrUG9pbnQgfHwgWzAsIDAsIDBdOwogICAgaWYgKHRoaXMuWFcgPCAwIHx8IHRoaXMuWlcgPCAwIHx8IHRoaXMuWVcgIT09IDEpIHsKICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCJJbnZhbGlkIFdoaXRlUG9pbnQgY29tcG9uZW50cywgbm8gZmFsbGJhY2sgYXZhaWxhYmxlIik7CiAgICB9CiAgICBpZiAodGhpcy5YQiA8IDAgfHwgdGhpcy5ZQiA8IDAgfHwgdGhpcy5aQiA8IDApIHsKICAgICAgaW5mbygiSW52YWxpZCBCbGFja1BvaW50LCBmYWxsaW5nIGJhY2sgdG8gZGVmYXVsdCIpOwogICAgICB0aGlzLlhCID0gdGhpcy5ZQiA9IHRoaXMuWkIgPSAwOwogICAgfQogICAgaWYgKHRoaXMuYW1pbiA+IHRoaXMuYW1heCB8fCB0aGlzLmJtaW4gPiB0aGlzLmJtYXgpIHsKICAgICAgaW5mbygiSW52YWxpZCBSYW5nZSwgZmFsbGluZyBiYWNrIHRvIGRlZmF1bHRzIik7CiAgICAgIHRoaXMuYW1pbiA9IC0xMDA7CiAgICAgIHRoaXMuYW1heCA9IDEwMDsKICAgICAgdGhpcy5ibWluID0gLTEwMDsKICAgICAgdGhpcy5ibWF4ID0gMTAwOwogICAgfQogIH0KICAjZm5fZyh4KSB7CiAgICByZXR1cm4geCA+PSA2IC8gMjkgPyB4ICoqIDMgOiAxMDggLyA4NDEgKiAoeCAtIDQgLyAyOSk7CiAgfQogICNkZWNvZGUodmFsdWUsIGhpZ2gxLCBsb3cyLCBoaWdoMikgewogICAgcmV0dXJuIGxvdzIgKyB2YWx1ZSAqIChoaWdoMiAtIGxvdzIpIC8gaGlnaDE7CiAgfQogICN0b1JnYihzcmMsIHNyY09mZnNldCwgbWF4VmFsLCBkZXN0LCBkZXN0T2Zmc2V0KSB7CiAgICBsZXQgTHMgPSBzcmNbc3JjT2Zmc2V0XTsKICAgIGxldCBhcyA9IHNyY1tzcmNPZmZzZXQgKyAxXTsKICAgIGxldCBicyA9IHNyY1tzcmNPZmZzZXQgKyAyXTsKICAgIGlmIChtYXhWYWwgIT09IGZhbHNlKSB7CiAgICAgIExzID0gdGhpcy4jZGVjb2RlKExzLCBtYXhWYWwsIDAsIDEwMCk7CiAgICAgIGFzID0gdGhpcy4jZGVjb2RlKGFzLCBtYXhWYWwsIHRoaXMuYW1pbiwgdGhpcy5hbWF4KTsKICAgICAgYnMgPSB0aGlzLiNkZWNvZGUoYnMsIG1heFZhbCwgdGhpcy5ibWluLCB0aGlzLmJtYXgpOwogICAgfQogICAgaWYgKGFzID4gdGhpcy5hbWF4KSB7CiAgICAgIGFzID0gdGhpcy5hbWF4OwogICAgfSBlbHNlIGlmIChhcyA8IHRoaXMuYW1pbikgewogICAgICBhcyA9IHRoaXMuYW1pbjsKICAgIH0KICAgIGlmIChicyA+IHRoaXMuYm1heCkgewogICAgICBicyA9IHRoaXMuYm1heDsKICAgIH0gZWxzZSBpZiAoYnMgPCB0aGlzLmJtaW4pIHsKICAgICAgYnMgPSB0aGlzLmJtaW47CiAgICB9CiAgICBjb25zdCBNID0gKExzICsgMTYpIC8gMTE2OwogICAgY29uc3QgTCA9IE0gKyBhcyAvIDUwMDsKICAgIGNvbnN0IE4gPSBNIC0gYnMgLyAyMDA7CiAgICBjb25zdCBYID0gdGhpcy5YVyAqIHRoaXMuI2ZuX2coTCk7CiAgICBjb25zdCBZID0gdGhpcy5ZVyAqIHRoaXMuI2ZuX2coTSk7CiAgICBjb25zdCBaID0gdGhpcy5aVyAqIHRoaXMuI2ZuX2coTik7CiAgICBsZXQgciwgZywgYjsKICAgIGlmICh0aGlzLlpXIDwgMSkgewogICAgICByID0gWCAqIDMuMTMzOSArIFkgKiAtMS42MTcgKyBaICogLTAuNDkwNjsKICAgICAgZyA9IFggKiAtMC45Nzg1ICsgWSAqIDEuOTE2ICsgWiAqIDAuMDMzMzsKICAgICAgYiA9IFggKiAwLjA3MiArIFkgKiAtMC4yMjkgKyBaICogMS40MDU3OwogICAgfSBlbHNlIHsKICAgICAgciA9IFggKiAzLjI0MDYgKyBZICogLTEuNTM3MiArIFogKiAtMC40OTg2OwogICAgICBnID0gWCAqIC0wLjk2ODkgKyBZICogMS44NzU4ICsgWiAqIDAuMDQxNTsKICAgICAgYiA9IFggKiAwLjA1NTcgKyBZICogLTAuMjA0ICsgWiAqIDEuMDU3OwogICAgfQogICAgZGVzdFtkZXN0T2Zmc2V0XSA9IE1hdGguc3FydChyKSAqIDI1NTsKICAgIGRlc3RbZGVzdE9mZnNldCArIDFdID0gTWF0aC5zcXJ0KGcpICogMjU1OwogICAgZGVzdFtkZXN0T2Zmc2V0ICsgMl0gPSBNYXRoLnNxcnQoYikgKiAyNTU7CiAgfQogIGdldFJnYkl0ZW0oc3JjLCBzcmNPZmZzZXQsIGRlc3QsIGRlc3RPZmZzZXQpIHsKICAgIHRoaXMuI3RvUmdiKHNyYywgc3JjT2Zmc2V0LCBmYWxzZSwgZGVzdCwgZGVzdE9mZnNldCk7CiAgfQogIGdldFJnYkJ1ZmZlcihzcmMsIHNyY09mZnNldCwgY291bnQsIGRlc3QsIGRlc3RPZmZzZXQsIGJpdHMsIGFscGhhMDEpIHsKICAgIGNvbnN0IG1heFZhbCA9ICgxIDw8IGJpdHMpIC0gMTsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykgewogICAgICB0aGlzLiN0b1JnYihzcmMsIHNyY09mZnNldCwgbWF4VmFsLCBkZXN0LCBkZXN0T2Zmc2V0KTsKICAgICAgc3JjT2Zmc2V0ICs9IDM7CiAgICAgIGRlc3RPZmZzZXQgKz0gMyArIGFscGhhMDE7CiAgICB9CiAgfQogIGdldE91dHB1dExlbmd0aChpbnB1dExlbmd0aCwgYWxwaGEwMSkgewogICAgcmV0dXJuIGlucHV0TGVuZ3RoICogKDMgKyBhbHBoYTAxKSAvIDMgfCAwOwogIH0KICBpc0RlZmF1bHREZWNvZGUoZGVjb2RlTWFwLCBicGMpIHsKICAgIHJldHVybiB0cnVlOwogIH0KICBnZXQgdXNlc1plcm9Ub09uZVJhbmdlKCkgewogICAgcmV0dXJuIHNoYWRvdyh0aGlzLCAidXNlc1plcm9Ub09uZVJhbmdlIiwgZmFsc2UpOwogIH0KfQoKOy8vIC4vc3JjL2NvcmUvaWNjX2NvbG9yc3BhY2UuanMKCgoKCgoKCgoKCgoKZnVuY3Rpb24gZmV0Y2hTeW5jKHVybCkgewogIGNvbnN0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpOwogIHhoci5vcGVuKCJHRVQiLCB1cmwsIGZhbHNlKTsKICB4aHIucmVzcG9uc2VUeXBlID0gImFycmF5YnVmZmVyIjsKICB4aHIuc2VuZChudWxsKTsKICByZXR1cm4geGhyLnJlc3BvbnNlOwp9CmNsYXNzIEljY0NvbG9yU3BhY2UgZXh0ZW5kcyBDb2xvclNwYWNlIHsKICAjdHJhbnNmb3JtZXI7CiAgI2NvbnZlcnRQaXhlbDsKICBzdGF0aWMgI3VzZVdhc20gPSB0cnVlOwogIHN0YXRpYyAjd2FzbVVybCA9IG51bGw7CiAgc3RhdGljICNmaW5hbGl6ZXIgPSBudWxsOwogIGNvbnN0cnVjdG9yKGljY1Byb2ZpbGUsIG5hbWUsIG51bUNvbXBzKSB7CiAgICBpZiAoIUljY0NvbG9yU3BhY2UuaXNVc2FibGUpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCJObyBJQ0MgY29sb3Igc3BhY2Ugc3VwcG9ydCIpOwogICAgfQogICAgc3VwZXIobmFtZSwgbnVtQ29tcHMpOwogICAgbGV0IGluVHlwZTsKICAgIHN3aXRjaCAobnVtQ29tcHMpIHsKICAgICAgY2FzZSAxOgogICAgICAgIGluVHlwZSA9IERhdGFUeXBlLkdyYXk4OwogICAgICAgIHRoaXMuI2NvbnZlcnRQaXhlbCA9IChzcmMsIHNyY09mZnNldCwgY3NzKSA9PiBxY21zX2NvbnZlcnRfb25lKHRoaXMuI3RyYW5zZm9ybWVyLCBzcmNbc3JjT2Zmc2V0XSAqIDI1NSwgY3NzKTsKICAgICAgICBicmVhazsKICAgICAgY2FzZSAzOgogICAgICAgIGluVHlwZSA9IERhdGFUeXBlLlJHQjg7CiAgICAgICAgdGhpcy4jY29udmVydFBpeGVsID0gKHNyYywgc3JjT2Zmc2V0LCBjc3MpID0+IHFjbXNfY29udmVydF90aHJlZSh0aGlzLiN0cmFuc2Zvcm1lciwgc3JjW3NyY09mZnNldF0gKiAyNTUsIHNyY1tzcmNPZmZzZXQgKyAxXSAqIDI1NSwgc3JjW3NyY09mZnNldCArIDJdICogMjU1LCBjc3MpOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlIDQ6CiAgICAgICAgaW5UeXBlID0gRGF0YVR5cGUuQ01ZSzsKICAgICAgICB0aGlzLiNjb252ZXJ0UGl4ZWwgPSAoc3JjLCBzcmNPZmZzZXQsIGNzcykgPT4gcWNtc19jb252ZXJ0X2ZvdXIodGhpcy4jdHJhbnNmb3JtZXIsIHNyY1tzcmNPZmZzZXRdICogMjU1LCBzcmNbc3JjT2Zmc2V0ICsgMV0gKiAyNTUsIHNyY1tzcmNPZmZzZXQgKyAyXSAqIDI1NSwgc3JjW3NyY09mZnNldCArIDNdICogMjU1LCBjc3MpOwogICAgICAgIGJyZWFrOwogICAgICBkZWZhdWx0OgogICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgbnVtYmVyIG9mIGNvbXBvbmVudHM6ICR7bnVtQ29tcHN9YCk7CiAgICB9CiAgICB0aGlzLiN0cmFuc2Zvcm1lciA9IHFjbXNfdHJhbnNmb3JtZXJfZnJvbV9tZW1vcnkoaWNjUHJvZmlsZSwgaW5UeXBlLCBJbnRlbnQuUGVyY2VwdHVhbCk7CiAgICBpZiAoIXRoaXMuI3RyYW5zZm9ybWVyKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcigiRmFpbGVkIHRvIGNyZWF0ZSBJQ0MgY29sb3Igc3BhY2UiKTsKICAgIH0KICAgIEljY0NvbG9yU3BhY2UuI2ZpbmFsaXplciB8fD0gbmV3IEZpbmFsaXphdGlvblJlZ2lzdHJ5KHRyYW5zZm9ybWVyID0+IHsKICAgICAgcWNtc19kcm9wX3RyYW5zZm9ybWVyKHRyYW5zZm9ybWVyKTsKICAgIH0pOwogICAgSWNjQ29sb3JTcGFjZS4jZmluYWxpemVyLnJlZ2lzdGVyKHRoaXMsIHRoaXMuI3RyYW5zZm9ybWVyKTsKICB9CiAgZ2V0UmdiSGV4KHNyYywgc3JjT2Zmc2V0KSB7CiAgICB0aGlzLiNjb252ZXJ0UGl4ZWwoc3JjLCBzcmNPZmZzZXQsIHRydWUpOwogICAgcmV0dXJuIFFDTVMuX2Nzc0NvbG9yOwogIH0KICBnZXRSZ2JJdGVtKHNyYywgc3JjT2Zmc2V0LCBkZXN0LCBkZXN0T2Zmc2V0KSB7CiAgICBRQ01TLl9kZXN0QnVmZmVyID0gZGVzdDsKICAgIFFDTVMuX2Rlc3RPZmZzZXQgPSBkZXN0T2Zmc2V0OwogICAgUUNNUy5fZGVzdExlbmd0aCA9IDM7CiAgICB0aGlzLiNjb252ZXJ0UGl4ZWwoc3JjLCBzcmNPZmZzZXQsIGZhbHNlKTsKICAgIFFDTVMuX2Rlc3RCdWZmZXIgPSBudWxsOwogIH0KICBnZXRSZ2JCdWZmZXIoc3JjLCBzcmNPZmZzZXQsIGNvdW50LCBkZXN0LCBkZXN0T2Zmc2V0LCBiaXRzLCBhbHBoYTAxKSB7CiAgICBzcmMgPSBzcmMuc3ViYXJyYXkoc3JjT2Zmc2V0LCBzcmNPZmZzZXQgKyBjb3VudCAqIHRoaXMubnVtQ29tcHMpOwogICAgaWYgKGJpdHMgIT09IDgpIHsKICAgICAgY29uc3Qgc2NhbGUgPSAyNTUgLyAoKDEgPDwgYml0cykgLSAxKTsKICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gc3JjLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgICBzcmNbaV0gKj0gc2NhbGU7CiAgICAgIH0KICAgIH0KICAgIFFDTVMuX211c3RBZGRBbHBoYSA9IGFscGhhMDEgJiYgZGVzdC5idWZmZXIgPT09IHNyYy5idWZmZXI7CiAgICBRQ01TLl9kZXN0QnVmZmVyID0gZGVzdDsKICAgIFFDTVMuX2Rlc3RPZmZzZXQgPSBkZXN0T2Zmc2V0OwogICAgUUNNUy5fZGVzdExlbmd0aCA9IGNvdW50ICogKDMgKyBhbHBoYTAxKTsKICAgIHFjbXNfY29udmVydF9hcnJheSh0aGlzLiN0cmFuc2Zvcm1lciwgc3JjKTsKICAgIFFDTVMuX211c3RBZGRBbHBoYSA9IGZhbHNlOwogICAgUUNNUy5fZGVzdEJ1ZmZlciA9IG51bGw7CiAgfQogIGdldE91dHB1dExlbmd0aChpbnB1dExlbmd0aCwgYWxwaGEwMSkgewogICAgcmV0dXJuIGlucHV0TGVuZ3RoIC8gdGhpcy5udW1Db21wcyAqICgzICsgYWxwaGEwMSkgfCAwOwogIH0KICBzdGF0aWMgc2V0T3B0aW9ucyh7CiAgICB1c2VXYXNtLAogICAgdXNlV29ya2VyRmV0Y2gsCiAgICB3YXNtVXJsCiAgfSkgewogICAgaWYgKCF1c2VXb3JrZXJGZXRjaCkgewogICAgICB0aGlzLiN1c2VXYXNtID0gZmFsc2U7CiAgICAgIHJldHVybjsKICAgIH0KICAgIHRoaXMuI3VzZVdhc20gPSB1c2VXYXNtOwogICAgdGhpcy4jd2FzbVVybCA9IHdhc21Vcmw7CiAgfQogIHN0YXRpYyBnZXQgaXNVc2FibGUoKSB7CiAgICBsZXQgaXNVc2FibGUgPSBmYWxzZTsKICAgIGlmICh0aGlzLiN1c2VXYXNtKSB7CiAgICAgIGlmICh0aGlzLiN3YXNtVXJsKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIHRoaXMuX21vZHVsZSA9IGluaXRTeW5jKHsKICAgICAgICAgICAgbW9kdWxlOiBmZXRjaFN5bmMoYCR7dGhpcy4jd2FzbVVybH1xY21zX2JnLndhc21gKQogICAgICAgICAgfSk7CiAgICAgICAgICBpc1VzYWJsZSA9ICEhdGhpcy5fbW9kdWxlOwogICAgICAgICAgUUNNUy5fbWVtb3J5ID0gdGhpcy5fbW9kdWxlLm1lbW9yeTsKICAgICAgICAgIFFDTVMuX21ha2VIZXhDb2xvciA9IFV0aWwubWFrZUhleENvbG9yOwogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgIHdhcm4oYElDQ0Jhc2VkIGNvbG9yIHNwYWNlOiAiJHtlfSIuYCk7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHdhcm4oIk5vIElDQyBjb2xvciBzcGFjZSBzdXBwb3J0IGR1ZSB0byBtaXNzaW5nIGB3YXNtVXJsYCBBUEkgb3B0aW9uIik7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBzaGFkb3codGhpcywgImlzVXNhYmxlIiwgaXNVc2FibGUpOwogIH0KfQpjbGFzcyBDbXlrSUNDQmFzZWRDUyBleHRlbmRzIEljY0NvbG9yU3BhY2UgewogIHN0YXRpYyAjaWNjVXJsOwogIGNvbnN0cnVjdG9yKCkgewogICAgY29uc3QgaWNjUHJvZmlsZSA9IG5ldyBVaW50OEFycmF5KGZldGNoU3luYyhgJHtDbXlrSUNDQmFzZWRDUy4jaWNjVXJsfUNHQVRTMDAxQ29tcGF0LXYyLW1pY3JvLmljY2ApKTsKICAgIHN1cGVyKGljY1Byb2ZpbGUsICJEZXZpY2VDTVlLIiwgNCk7CiAgfQogIHN0YXRpYyBzZXRPcHRpb25zKHsKICAgIGljY1VybAogIH0pIHsKICAgIHRoaXMuI2ljY1VybCA9IGljY1VybDsKICB9CiAgc3RhdGljIGdldCBpc1VzYWJsZSgpIHsKICAgIGxldCBpc1VzYWJsZSA9IGZhbHNlOwogICAgaWYgKEljY0NvbG9yU3BhY2UuaXNVc2FibGUpIHsKICAgICAgaWYgKHRoaXMuI2ljY1VybCkgewogICAgICAgIGlzVXNhYmxlID0gdHJ1ZTsKICAgICAgfSBlbHNlIHsKICAgICAgICB3YXJuKCJObyBDTVlLIElDQyBwcm9maWxlIHN1cHBvcnQgZHVlIHRvIG1pc3NpbmcgYGljY1VybGAgQVBJIG9wdGlvbiIpOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gc2hhZG93KHRoaXMsICJpc1VzYWJsZSIsIGlzVXNhYmxlKTsKICB9Cn0KCjsvLyAuL3NyYy9jb3JlL3N0cmVhbS5qcwoKCgoKCgoKCgoKY2xhc3MgU3RyZWFtIGV4dGVuZHMgQmFzZVN0cmVhbSB7CiAgY29uc3RydWN0b3IoYXJyYXlCdWZmZXIsIHN0YXJ0LCBsZW5ndGgsIGRpY3QpIHsKICAgIHN1cGVyKCk7CiAgICB0aGlzLmJ5dGVzID0gYXJyYXlCdWZmZXIgaW5zdGFuY2VvZiBVaW50OEFycmF5ID8gYXJyYXlCdWZmZXIgOiBuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcik7CiAgICB0aGlzLnN0YXJ0ID0gc3RhcnQgfHwgMDsKICAgIHRoaXMucG9zID0gdGhpcy5zdGFydDsKICAgIHRoaXMuZW5kID0gc3RhcnQgKyBsZW5ndGggfHwgdGhpcy5ieXRlcy5sZW5ndGg7CiAgICB0aGlzLmRpY3QgPSBkaWN0OwogIH0KICBnZXQgbGVuZ3RoKCkgewogICAgcmV0dXJuIHRoaXMuZW5kIC0gdGhpcy5zdGFydDsKICB9CiAgZ2V0IGlzRW1wdHkoKSB7CiAgICByZXR1cm4gdGhpcy5sZW5ndGggPT09IDA7CiAgfQogIGdldEJ5dGUoKSB7CiAgICBpZiAodGhpcy5wb3MgPj0gdGhpcy5lbmQpIHsKICAgICAgcmV0dXJuIC0xOwogICAgfQogICAgcmV0dXJuIHRoaXMuYnl0ZXNbdGhpcy5wb3MrK107CiAgfQogIGdldEJ5dGVzKGxlbmd0aCkgewogICAgY29uc3QgYnl0ZXMgPSB0aGlzLmJ5dGVzOwogICAgY29uc3QgcG9zID0gdGhpcy5wb3M7CiAgICBjb25zdCBzdHJFbmQgPSB0aGlzLmVuZDsKICAgIGlmICghbGVuZ3RoKSB7CiAgICAgIHJldHVybiBieXRlcy5zdWJhcnJheShwb3MsIHN0ckVuZCk7CiAgICB9CiAgICBsZXQgZW5kID0gcG9zICsgbGVuZ3RoOwogICAgaWYgKGVuZCA+IHN0ckVuZCkgewogICAgICBlbmQgPSBzdHJFbmQ7CiAgICB9CiAgICB0aGlzLnBvcyA9IGVuZDsKICAgIHJldHVybiBieXRlcy5zdWJhcnJheShwb3MsIGVuZCk7CiAgfQogIGdldEJ5dGVSYW5nZShiZWdpbiwgZW5kKSB7CiAgICBpZiAoYmVnaW4gPCAwKSB7CiAgICAgIGJlZ2luID0gMDsKICAgIH0KICAgIGlmIChlbmQgPiB0aGlzLmVuZCkgewogICAgICBlbmQgPSB0aGlzLmVuZDsKICAgIH0KICAgIHJldHVybiB0aGlzLmJ5dGVzLnN1YmFycmF5KGJlZ2luLCBlbmQpOwogIH0KICByZXNldCgpIHsKICAgIHRoaXMucG9zID0gdGhpcy5zdGFydDsKICB9CiAgbW92ZVN0YXJ0KCkgewogICAgdGhpcy5zdGFydCA9IHRoaXMucG9zOwogIH0KICBtYWtlU3ViU3RyZWFtKHN0YXJ0LCBsZW5ndGgsIGRpY3QgPSBudWxsKSB7CiAgICByZXR1cm4gbmV3IFN0cmVhbSh0aGlzLmJ5dGVzLmJ1ZmZlciwgc3RhcnQsIGxlbmd0aCwgZGljdCk7CiAgfQp9CmNsYXNzIFN0cmluZ1N0cmVhbSBleHRlbmRzIFN0cmVhbSB7CiAgY29uc3RydWN0b3Ioc3RyKSB7CiAgICBzdXBlcihzdHJpbmdUb0J5dGVzKHN0cikpOwogIH0KfQpjbGFzcyBOdWxsU3RyZWFtIGV4dGVuZHMgU3RyZWFtIHsKICBjb25zdHJ1Y3RvcigpIHsKICAgIHN1cGVyKG5ldyBVaW50OEFycmF5KDApKTsKICB9Cn0KCjsvLyAuL3NyYy9jb3JlL2NodW5rZWRfc3RyZWFtLmpzCgoKCgoKCgoKCgoKCgoKCgoKCgoKY2xhc3MgQ2h1bmtlZFN0cmVhbSBleHRlbmRzIFN0cmVhbSB7CiAgY29uc3RydWN0b3IobGVuZ3RoLCBjaHVua1NpemUsIG1hbmFnZXIpIHsKICAgIHN1cGVyKG5ldyBVaW50OEFycmF5KGxlbmd0aCksIDAsIGxlbmd0aCwgbnVsbCk7CiAgICB0aGlzLmNodW5rU2l6ZSA9IGNodW5rU2l6ZTsKICAgIHRoaXMuX2xvYWRlZENodW5rcyA9IG5ldyBTZXQoKTsKICAgIHRoaXMubnVtQ2h1bmtzID0gTWF0aC5jZWlsKGxlbmd0aCAvIGNodW5rU2l6ZSk7CiAgICB0aGlzLm1hbmFnZXIgPSBtYW5hZ2VyOwogICAgdGhpcy5wcm9ncmVzc2l2ZURhdGFMZW5ndGggPSAwOwogICAgdGhpcy5sYXN0U3VjY2Vzc2Z1bEVuc3VyZUJ5dGVDaHVuayA9IC0xOwogIH0KICBnZXRNaXNzaW5nQ2h1bmtzKCkgewogICAgY29uc3QgY2h1bmtzID0gW107CiAgICBmb3IgKGxldCBjaHVuayA9IDAsIG4gPSB0aGlzLm51bUNodW5rczsgY2h1bmsgPCBuOyArK2NodW5rKSB7CiAgICAgIGlmICghdGhpcy5fbG9hZGVkQ2h1bmtzLmhhcyhjaHVuaykpIHsKICAgICAgICBjaHVua3MucHVzaChjaHVuayk7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBjaHVua3M7CiAgfQogIGdldCBudW1DaHVua3NMb2FkZWQoKSB7CiAgICByZXR1cm4gdGhpcy5fbG9hZGVkQ2h1bmtzLnNpemU7CiAgfQogIGdldCBpc0RhdGFMb2FkZWQoKSB7CiAgICByZXR1cm4gdGhpcy5udW1DaHVua3NMb2FkZWQgPT09IHRoaXMubnVtQ2h1bmtzOwogIH0KICBvblJlY2VpdmVEYXRhKGJlZ2luLCBjaHVuaykgewogICAgY29uc3QgY2h1bmtTaXplID0gdGhpcy5jaHVua1NpemU7CiAgICBpZiAoYmVnaW4gJSBjaHVua1NpemUgIT09IDApIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKGBCYWQgYmVnaW4gb2Zmc2V0OiAke2JlZ2lufWApOwogICAgfQogICAgY29uc3QgZW5kID0gYmVnaW4gKyBjaHVuay5ieXRlTGVuZ3RoOwogICAgaWYgKGVuZCAlIGNodW5rU2l6ZSAhPT0gMCAmJiBlbmQgIT09IHRoaXMuYnl0ZXMubGVuZ3RoKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcihgQmFkIGVuZCBvZmZzZXQ6ICR7ZW5kfWApOwogICAgfQogICAgdGhpcy5ieXRlcy5zZXQobmV3IFVpbnQ4QXJyYXkoY2h1bmspLCBiZWdpbik7CiAgICBjb25zdCBiZWdpbkNodW5rID0gTWF0aC5mbG9vcihiZWdpbiAvIGNodW5rU2l6ZSk7CiAgICBjb25zdCBlbmRDaHVuayA9IE1hdGguZmxvb3IoKGVuZCAtIDEpIC8gY2h1bmtTaXplKSArIDE7CiAgICBmb3IgKGxldCBjdXJDaHVuayA9IGJlZ2luQ2h1bms7IGN1ckNodW5rIDwgZW5kQ2h1bms7ICsrY3VyQ2h1bmspIHsKICAgICAgdGhpcy5fbG9hZGVkQ2h1bmtzLmFkZChjdXJDaHVuayk7CiAgICB9CiAgfQogIG9uUmVjZWl2ZVByb2dyZXNzaXZlRGF0YShkYXRhKSB7CiAgICBsZXQgcG9zaXRpb24gPSB0aGlzLnByb2dyZXNzaXZlRGF0YUxlbmd0aDsKICAgIGNvbnN0IGJlZ2luQ2h1bmsgPSBNYXRoLmZsb29yKHBvc2l0aW9uIC8gdGhpcy5jaHVua1NpemUpOwogICAgdGhpcy5ieXRlcy5zZXQobmV3IFVpbnQ4QXJyYXkoZGF0YSksIHBvc2l0aW9uKTsKICAgIHBvc2l0aW9uICs9IGRhdGEuYnl0ZUxlbmd0aDsKICAgIHRoaXMucHJvZ3Jlc3NpdmVEYXRhTGVuZ3RoID0gcG9zaXRpb247CiAgICBjb25zdCBlbmRDaHVuayA9IHBvc2l0aW9uID49IHRoaXMuZW5kID8gdGhpcy5udW1DaHVua3MgOiBNYXRoLmZsb29yKHBvc2l0aW9uIC8gdGhpcy5jaHVua1NpemUpOwogICAgZm9yIChsZXQgY3VyQ2h1bmsgPSBiZWdpbkNodW5rOyBjdXJDaHVuayA8IGVuZENodW5rOyArK2N1ckNodW5rKSB7CiAgICAgIHRoaXMuX2xvYWRlZENodW5rcy5hZGQoY3VyQ2h1bmspOwogICAgfQogIH0KICBlbnN1cmVCeXRlKHBvcykgewogICAgaWYgKHBvcyA8IHRoaXMucHJvZ3Jlc3NpdmVEYXRhTGVuZ3RoKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGNvbnN0IGNodW5rID0gTWF0aC5mbG9vcihwb3MgLyB0aGlzLmNodW5rU2l6ZSk7CiAgICBpZiAoY2h1bmsgPiB0aGlzLm51bUNodW5rcykgewogICAgICByZXR1cm47CiAgICB9CiAgICBpZiAoY2h1bmsgPT09IHRoaXMubGFzdFN1Y2Nlc3NmdWxFbnN1cmVCeXRlQ2h1bmspIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgaWYgKCF0aGlzLl9sb2FkZWRDaHVua3MuaGFzKGNodW5rKSkgewogICAgICB0aHJvdyBuZXcgTWlzc2luZ0RhdGFFeGNlcHRpb24ocG9zLCBwb3MgKyAxKTsKICAgIH0KICAgIHRoaXMubGFzdFN1Y2Nlc3NmdWxFbnN1cmVCeXRlQ2h1bmsgPSBjaHVuazsKICB9CiAgZW5zdXJlUmFuZ2UoYmVnaW4sIGVuZCkgewogICAgaWYgKGJlZ2luID49IGVuZCkgewogICAgICByZXR1cm47CiAgICB9CiAgICBpZiAoZW5kIDw9IHRoaXMucHJvZ3Jlc3NpdmVEYXRhTGVuZ3RoKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGNvbnN0IGJlZ2luQ2h1bmsgPSBNYXRoLmZsb29yKGJlZ2luIC8gdGhpcy5jaHVua1NpemUpOwogICAgaWYgKGJlZ2luQ2h1bmsgPiB0aGlzLm51bUNodW5rcykgewogICAgICByZXR1cm47CiAgICB9CiAgICBjb25zdCBlbmRDaHVuayA9IE1hdGgubWluKE1hdGguZmxvb3IoKGVuZCAtIDEpIC8gdGhpcy5jaHVua1NpemUpICsgMSwgdGhpcy5udW1DaHVua3MpOwogICAgZm9yIChsZXQgY2h1bmsgPSBiZWdpbkNodW5rOyBjaHVuayA8IGVuZENodW5rOyArK2NodW5rKSB7CiAgICAgIGlmICghdGhpcy5fbG9hZGVkQ2h1bmtzLmhhcyhjaHVuaykpIHsKICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ0RhdGFFeGNlcHRpb24oYmVnaW4sIGVuZCk7CiAgICAgIH0KICAgIH0KICB9CiAgbmV4dEVtcHR5Q2h1bmsoYmVnaW5DaHVuaykgewogICAgY29uc3QgbnVtQ2h1bmtzID0gdGhpcy5udW1DaHVua3M7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUNodW5rczsgKytpKSB7CiAgICAgIGNvbnN0IGNodW5rID0gKGJlZ2luQ2h1bmsgKyBpKSAlIG51bUNodW5rczsKICAgICAgaWYgKCF0aGlzLl9sb2FkZWRDaHVua3MuaGFzKGNodW5rKSkgewogICAgICAgIHJldHVybiBjaHVuazsKICAgICAgfQogICAgfQogICAgcmV0dXJuIG51bGw7CiAgfQogIGhhc0NodW5rKGNodW5rKSB7CiAgICByZXR1cm4gdGhpcy5fbG9hZGVkQ2h1bmtzLmhhcyhjaHVuayk7CiAgfQogIGdldEJ5dGUoKSB7CiAgICBjb25zdCBwb3MgPSB0aGlzLnBvczsKICAgIGlmIChwb3MgPj0gdGhpcy5lbmQpIHsKICAgICAgcmV0dXJuIC0xOwogICAgfQogICAgaWYgKHBvcyA+PSB0aGlzLnByb2dyZXNzaXZlRGF0YUxlbmd0aCkgewogICAgICB0aGlzLmVuc3VyZUJ5dGUocG9zKTsKICAgIH0KICAgIHJldHVybiB0aGlzLmJ5dGVzW3RoaXMucG9zKytdOwogIH0KICBnZXRCeXRlcyhsZW5ndGgpIHsKICAgIGNvbnN0IGJ5dGVzID0gdGhpcy5ieXRlczsKICAgIGNvbnN0IHBvcyA9IHRoaXMucG9zOwogICAgY29uc3Qgc3RyRW5kID0gdGhpcy5lbmQ7CiAgICBpZiAoIWxlbmd0aCkgewogICAgICBpZiAoc3RyRW5kID4gdGhpcy5wcm9ncmVzc2l2ZURhdGFMZW5ndGgpIHsKICAgICAgICB0aGlzLmVuc3VyZVJhbmdlKHBvcywgc3RyRW5kKTsKICAgICAgfQogICAgICByZXR1cm4gYnl0ZXMuc3ViYXJyYXkocG9zLCBzdHJFbmQpOwogICAgfQogICAgbGV0IGVuZCA9IHBvcyArIGxlbmd0aDsKICAgIGlmIChlbmQgPiBzdHJFbmQpIHsKICAgICAgZW5kID0gc3RyRW5kOwogICAgfQogICAgaWYgKGVuZCA+IHRoaXMucHJvZ3Jlc3NpdmVEYXRhTGVuZ3RoKSB7CiAgICAgIHRoaXMuZW5zdXJlUmFuZ2UocG9zLCBlbmQpOwogICAgfQogICAgdGhpcy5wb3MgPSBlbmQ7CiAgICByZXR1cm4gYnl0ZXMuc3ViYXJyYXkocG9zLCBlbmQpOwogIH0KICBnZXRCeXRlUmFuZ2UoYmVnaW4sIGVuZCkgewogICAgaWYgKGJlZ2luIDwgMCkgewogICAgICBiZWdpbiA9IDA7CiAgICB9CiAgICBpZiAoZW5kID4gdGhpcy5lbmQpIHsKICAgICAgZW5kID0gdGhpcy5lbmQ7CiAgICB9CiAgICBpZiAoZW5kID4gdGhpcy5wcm9ncmVzc2l2ZURhdGFMZW5ndGgpIHsKICAgICAgdGhpcy5lbnN1cmVSYW5nZShiZWdpbiwgZW5kKTsKICAgIH0KICAgIHJldHVybiB0aGlzLmJ5dGVzLnN1YmFycmF5KGJlZ2luLCBlbmQpOwogIH0KICBtYWtlU3ViU3RyZWFtKHN0YXJ0LCBsZW5ndGgsIGRpY3QgPSBudWxsKSB7CiAgICBpZiAobGVuZ3RoKSB7CiAgICAgIGlmIChzdGFydCArIGxlbmd0aCA+IHRoaXMucHJvZ3Jlc3NpdmVEYXRhTGVuZ3RoKSB7CiAgICAgICAgdGhpcy5lbnN1cmVSYW5nZShzdGFydCwgc3RhcnQgKyBsZW5ndGgpOwogICAgICB9CiAgICB9IGVsc2UgaWYgKHN0YXJ0ID49IHRoaXMucHJvZ3Jlc3NpdmVEYXRhTGVuZ3RoKSB7CiAgICAgIHRoaXMuZW5zdXJlQnl0ZShzdGFydCk7CiAgICB9CiAgICBmdW5jdGlvbiBDaHVua2VkU3RyZWFtU3Vic3RyZWFtKCkge30KICAgIENodW5rZWRTdHJlYW1TdWJzdHJlYW0ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh0aGlzKTsKICAgIENodW5rZWRTdHJlYW1TdWJzdHJlYW0ucHJvdG90eXBlLmdldE1pc3NpbmdDaHVua3MgPSBmdW5jdGlvbiAoKSB7CiAgICAgIGNvbnN0IGNodW5rU2l6ZSA9IHRoaXMuY2h1bmtTaXplOwogICAgICBjb25zdCBiZWdpbkNodW5rID0gTWF0aC5mbG9vcih0aGlzLnN0YXJ0IC8gY2h1bmtTaXplKTsKICAgICAgY29uc3QgZW5kQ2h1bmsgPSBNYXRoLmZsb29yKCh0aGlzLmVuZCAtIDEpIC8gY2h1bmtTaXplKSArIDE7CiAgICAgIGNvbnN0IG1pc3NpbmdDaHVua3MgPSBbXTsKICAgICAgZm9yIChsZXQgY2h1bmsgPSBiZWdpbkNodW5rOyBjaHVuayA8IGVuZENodW5rOyArK2NodW5rKSB7CiAgICAgICAgaWYgKCF0aGlzLl9sb2FkZWRDaHVua3MuaGFzKGNodW5rKSkgewogICAgICAgICAgbWlzc2luZ0NodW5rcy5wdXNoKGNodW5rKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIG1pc3NpbmdDaHVua3M7CiAgICB9OwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENodW5rZWRTdHJlYW1TdWJzdHJlYW0ucHJvdG90eXBlLCAiaXNEYXRhTG9hZGVkIiwgewogICAgICBnZXQoKSB7CiAgICAgICAgaWYgKHRoaXMubnVtQ2h1bmtzTG9hZGVkID09PSB0aGlzLm51bUNodW5rcykgewogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICAgIHJldHVybiB0aGlzLmdldE1pc3NpbmdDaHVua3MoKS5sZW5ndGggPT09IDA7CiAgICAgIH0sCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZQogICAgfSk7CiAgICBjb25zdCBzdWJTdHJlYW0gPSBuZXcgQ2h1bmtlZFN0cmVhbVN1YnN0cmVhbSgpOwogICAgc3ViU3RyZWFtLnBvcyA9IHN1YlN0cmVhbS5zdGFydCA9IHN0YXJ0OwogICAgc3ViU3RyZWFtLmVuZCA9IHN0YXJ0ICsgbGVuZ3RoIHx8IHRoaXMuZW5kOwogICAgc3ViU3RyZWFtLmRpY3QgPSBkaWN0OwogICAgcmV0dXJuIHN1YlN0cmVhbTsKICB9CiAgZ2V0QmFzZVN0cmVhbXMoKSB7CiAgICByZXR1cm4gW3RoaXNdOwogIH0KfQpjbGFzcyBDaHVua2VkU3RyZWFtTWFuYWdlciB7CiAgY29uc3RydWN0b3IocGRmTmV0d29ya1N0cmVhbSwgYXJncykgewogICAgdGhpcy5sZW5ndGggPSBhcmdzLmxlbmd0aDsKICAgIHRoaXMuY2h1bmtTaXplID0gYXJncy5yYW5nZUNodW5rU2l6ZTsKICAgIHRoaXMuc3RyZWFtID0gbmV3IENodW5rZWRTdHJlYW0odGhpcy5sZW5ndGgsIHRoaXMuY2h1bmtTaXplLCB0aGlzKTsKICAgIHRoaXMucGRmTmV0d29ya1N0cmVhbSA9IHBkZk5ldHdvcmtTdHJlYW07CiAgICB0aGlzLmRpc2FibGVBdXRvRmV0Y2ggPSBhcmdzLmRpc2FibGVBdXRvRmV0Y2g7CiAgICB0aGlzLm1zZ0hhbmRsZXIgPSBhcmdzLm1zZ0hhbmRsZXI7CiAgICB0aGlzLmN1cnJSZXF1ZXN0SWQgPSAwOwogICAgdGhpcy5fY2h1bmtzTmVlZGVkQnlSZXF1ZXN0ID0gbmV3IE1hcCgpOwogICAgdGhpcy5fcmVxdWVzdHNCeUNodW5rID0gbmV3IE1hcCgpOwogICAgdGhpcy5fcHJvbWlzZXNCeVJlcXVlc3QgPSBuZXcgTWFwKCk7CiAgICB0aGlzLnByb2dyZXNzaXZlRGF0YUxlbmd0aCA9IDA7CiAgICB0aGlzLmFib3J0ZWQgPSBmYWxzZTsKICAgIHRoaXMuX2xvYWRlZFN0cmVhbUNhcGFiaWxpdHkgPSBQcm9taXNlLndpdGhSZXNvbHZlcnMoKTsKICB9CiAgc2VuZFJlcXVlc3QoYmVnaW4sIGVuZCkgewogICAgY29uc3QgcmFuZ2VSZWFkZXIgPSB0aGlzLnBkZk5ldHdvcmtTdHJlYW0uZ2V0UmFuZ2VSZWFkZXIoYmVnaW4sIGVuZCk7CiAgICBpZiAoIXJhbmdlUmVhZGVyLmlzU3RyZWFtaW5nU3VwcG9ydGVkKSB7CiAgICAgIHJhbmdlUmVhZGVyLm9uUHJvZ3Jlc3MgPSB0aGlzLm9uUHJvZ3Jlc3MuYmluZCh0aGlzKTsKICAgIH0KICAgIGxldCBjaHVua3MgPSBbXSwKICAgICAgbG9hZGVkID0gMDsKICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7CiAgICAgIGNvbnN0IHJlYWRDaHVuayA9ICh7CiAgICAgICAgdmFsdWUsCiAgICAgICAgZG9uZQogICAgICB9KSA9PiB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIGlmIChkb25lKSB7CiAgICAgICAgICAgIGNvbnN0IGNodW5rRGF0YSA9IGFycmF5QnVmZmVyc1RvQnl0ZXMoY2h1bmtzKTsKICAgICAgICAgICAgY2h1bmtzID0gbnVsbDsKICAgICAgICAgICAgcmVzb2x2ZShjaHVua0RhdGEpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CiAgICAgICAgICBsb2FkZWQgKz0gdmFsdWUuYnl0ZUxlbmd0aDsKICAgICAgICAgIGlmIChyYW5nZVJlYWRlci5pc1N0cmVhbWluZ1N1cHBvcnRlZCkgewogICAgICAgICAgICB0aGlzLm9uUHJvZ3Jlc3MoewogICAgICAgICAgICAgIGxvYWRlZAogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICAgIGNodW5rcy5wdXNoKHZhbHVlKTsKICAgICAgICAgIHJhbmdlUmVhZGVyLnJlYWQoKS50aGVuKHJlYWRDaHVuaywgcmVqZWN0KTsKICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICByZWplY3QoZSk7CiAgICAgICAgfQogICAgICB9OwogICAgICByYW5nZVJlYWRlci5yZWFkKCkudGhlbihyZWFkQ2h1bmssIHJlamVjdCk7CiAgICB9KS50aGVuKGRhdGEgPT4gewogICAgICBpZiAodGhpcy5hYm9ydGVkKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIHRoaXMub25SZWNlaXZlRGF0YSh7CiAgICAgICAgY2h1bms6IGRhdGEsCiAgICAgICAgYmVnaW4KICAgICAgfSk7CiAgICB9KTsKICB9CiAgcmVxdWVzdEFsbENodW5rcyhub0ZldGNoID0gZmFsc2UpIHsKICAgIGlmICghbm9GZXRjaCkgewogICAgICBjb25zdCBtaXNzaW5nQ2h1bmtzID0gdGhpcy5zdHJlYW0uZ2V0TWlzc2luZ0NodW5rcygpOwogICAgICB0aGlzLl9yZXF1ZXN0Q2h1bmtzKG1pc3NpbmdDaHVua3MpOwogICAgfQogICAgcmV0dXJuIHRoaXMuX2xvYWRlZFN0cmVhbUNhcGFiaWxpdHkucHJvbWlzZTsKICB9CiAgX3JlcXVlc3RDaHVua3MoY2h1bmtzKSB7CiAgICBjb25zdCByZXF1ZXN0SWQgPSB0aGlzLmN1cnJSZXF1ZXN0SWQrKzsKICAgIGNvbnN0IGNodW5rc05lZWRlZCA9IG5ldyBTZXQoKTsKICAgIHRoaXMuX2NodW5rc05lZWRlZEJ5UmVxdWVzdC5zZXQocmVxdWVzdElkLCBjaHVua3NOZWVkZWQpOwogICAgZm9yIChjb25zdCBjaHVuayBvZiBjaHVua3MpIHsKICAgICAgaWYgKCF0aGlzLnN0cmVhbS5oYXNDaHVuayhjaHVuaykpIHsKICAgICAgICBjaHVua3NOZWVkZWQuYWRkKGNodW5rKTsKICAgICAgfQogICAgfQogICAgaWYgKGNodW5rc05lZWRlZC5zaXplID09PSAwKSB7CiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTsKICAgIH0KICAgIGNvbnN0IGNhcGFiaWxpdHkgPSBQcm9taXNlLndpdGhSZXNvbHZlcnMoKTsKICAgIHRoaXMuX3Byb21pc2VzQnlSZXF1ZXN0LnNldChyZXF1ZXN0SWQsIGNhcGFiaWxpdHkpOwogICAgY29uc3QgY2h1bmtzVG9SZXF1ZXN0ID0gW107CiAgICBmb3IgKGNvbnN0IGNodW5rIG9mIGNodW5rc05lZWRlZCkgewogICAgICBsZXQgcmVxdWVzdElkcyA9IHRoaXMuX3JlcXVlc3RzQnlDaHVuay5nZXQoY2h1bmspOwogICAgICBpZiAoIXJlcXVlc3RJZHMpIHsKICAgICAgICByZXF1ZXN0SWRzID0gW107CiAgICAgICAgdGhpcy5fcmVxdWVzdHNCeUNodW5rLnNldChjaHVuaywgcmVxdWVzdElkcyk7CiAgICAgICAgY2h1bmtzVG9SZXF1ZXN0LnB1c2goY2h1bmspOwogICAgICB9CiAgICAgIHJlcXVlc3RJZHMucHVzaChyZXF1ZXN0SWQpOwogICAgfQogICAgaWYgKGNodW5rc1RvUmVxdWVzdC5sZW5ndGggPiAwKSB7CiAgICAgIGNvbnN0IGdyb3VwZWRDaHVua3NUb1JlcXVlc3QgPSB0aGlzLmdyb3VwQ2h1bmtzKGNodW5rc1RvUmVxdWVzdCk7CiAgICAgIGZvciAoY29uc3QgZ3JvdXBlZENodW5rIG9mIGdyb3VwZWRDaHVua3NUb1JlcXVlc3QpIHsKICAgICAgICBjb25zdCBiZWdpbiA9IGdyb3VwZWRDaHVuay5iZWdpbkNodW5rICogdGhpcy5jaHVua1NpemU7CiAgICAgICAgY29uc3QgZW5kID0gTWF0aC5taW4oZ3JvdXBlZENodW5rLmVuZENodW5rICogdGhpcy5jaHVua1NpemUsIHRoaXMubGVuZ3RoKTsKICAgICAgICB0aGlzLnNlbmRSZXF1ZXN0KGJlZ2luLCBlbmQpLmNhdGNoKGNhcGFiaWxpdHkucmVqZWN0KTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZS5jYXRjaChyZWFzb24gPT4gewogICAgICBpZiAodGhpcy5hYm9ydGVkKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIHRocm93IHJlYXNvbjsKICAgIH0pOwogIH0KICBnZXRTdHJlYW0oKSB7CiAgICByZXR1cm4gdGhpcy5zdHJlYW07CiAgfQogIHJlcXVlc3RSYW5nZShiZWdpbiwgZW5kKSB7CiAgICBlbmQgPSBNYXRoLm1pbihlbmQsIHRoaXMubGVuZ3RoKTsKICAgIGNvbnN0IGJlZ2luQ2h1bmsgPSB0aGlzLmdldEJlZ2luQ2h1bmsoYmVnaW4pOwogICAgY29uc3QgZW5kQ2h1bmsgPSB0aGlzLmdldEVuZENodW5rKGVuZCk7CiAgICBjb25zdCBjaHVua3MgPSBbXTsKICAgIGZvciAobGV0IGNodW5rID0gYmVnaW5DaHVuazsgY2h1bmsgPCBlbmRDaHVuazsgKytjaHVuaykgewogICAgICBjaHVua3MucHVzaChjaHVuayk7CiAgICB9CiAgICByZXR1cm4gdGhpcy5fcmVxdWVzdENodW5rcyhjaHVua3MpOwogIH0KICByZXF1ZXN0UmFuZ2VzKHJhbmdlcyA9IFtdKSB7CiAgICBjb25zdCBjaHVua3NUb1JlcXVlc3QgPSBbXTsKICAgIGZvciAoY29uc3QgcmFuZ2Ugb2YgcmFuZ2VzKSB7CiAgICAgIGNvbnN0IGJlZ2luQ2h1bmsgPSB0aGlzLmdldEJlZ2luQ2h1bmsocmFuZ2UuYmVnaW4pOwogICAgICBjb25zdCBlbmRDaHVuayA9IHRoaXMuZ2V0RW5kQ2h1bmsocmFuZ2UuZW5kKTsKICAgICAgZm9yIChsZXQgY2h1bmsgPSBiZWdpbkNodW5rOyBjaHVuayA8IGVuZENodW5rOyArK2NodW5rKSB7CiAgICAgICAgaWYgKCFjaHVua3NUb1JlcXVlc3QuaW5jbHVkZXMoY2h1bmspKSB7CiAgICAgICAgICBjaHVua3NUb1JlcXVlc3QucHVzaChjaHVuayk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBjaHVua3NUb1JlcXVlc3Quc29ydCgoYSwgYikgPT4gYSAtIGIpOwogICAgcmV0dXJuIHRoaXMuX3JlcXVlc3RDaHVua3MoY2h1bmtzVG9SZXF1ZXN0KTsKICB9CiAgZ3JvdXBDaHVua3MoY2h1bmtzKSB7CiAgICBjb25zdCBncm91cGVkQ2h1bmtzID0gW107CiAgICBsZXQgYmVnaW5DaHVuayA9IC0xOwogICAgbGV0IHByZXZDaHVuayA9IC0xOwogICAgZm9yIChsZXQgaSA9IDAsIGlpID0gY2h1bmtzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHsKICAgICAgY29uc3QgY2h1bmsgPSBjaHVua3NbaV07CiAgICAgIGlmIChiZWdpbkNodW5rIDwgMCkgewogICAgICAgIGJlZ2luQ2h1bmsgPSBjaHVuazsKICAgICAgfQogICAgICBpZiAocHJldkNodW5rID49IDAgJiYgcHJldkNodW5rICsgMSAhPT0gY2h1bmspIHsKICAgICAgICBncm91cGVkQ2h1bmtzLnB1c2goewogICAgICAgICAgYmVnaW5DaHVuaywKICAgICAgICAgIGVuZENodW5rOiBwcmV2Q2h1bmsgKyAxCiAgICAgICAgfSk7CiAgICAgICAgYmVnaW5DaHVuayA9IGNodW5rOwogICAgICB9CiAgICAgIGlmIChpICsgMSA9PT0gY2h1bmtzLmxlbmd0aCkgewogICAgICAgIGdyb3VwZWRDaHVua3MucHVzaCh7CiAgICAgICAgICBiZWdpbkNodW5rLAogICAgICAgICAgZW5kQ2h1bms6IGNodW5rICsgMQogICAgICAgIH0pOwogICAgICB9CiAgICAgIHByZXZDaHVuayA9IGNodW5rOwogICAgfQogICAgcmV0dXJuIGdyb3VwZWRDaHVua3M7CiAgfQogIG9uUHJvZ3Jlc3MoYXJncykgewogICAgdGhpcy5tc2dIYW5kbGVyLnNlbmQoIkRvY1Byb2dyZXNzIiwgewogICAgICBsb2FkZWQ6IHRoaXMuc3RyZWFtLm51bUNodW5rc0xvYWRlZCAqIHRoaXMuY2h1bmtTaXplICsgYXJncy5sb2FkZWQsCiAgICAgIHRvdGFsOiB0aGlzLmxlbmd0aAogICAgfSk7CiAgfQogIG9uUmVjZWl2ZURhdGEoYXJncykgewogICAgY29uc3QgY2h1bmsgPSBhcmdzLmNodW5rOwogICAgY29uc3QgaXNQcm9ncmVzc2l2ZSA9IGFyZ3MuYmVnaW4gPT09IHVuZGVmaW5lZDsKICAgIGNvbnN0IGJlZ2luID0gaXNQcm9ncmVzc2l2ZSA/IHRoaXMucHJvZ3Jlc3NpdmVEYXRhTGVuZ3RoIDogYXJncy5iZWdpbjsKICAgIGNvbnN0IGVuZCA9IGJlZ2luICsgY2h1bmsuYnl0ZUxlbmd0aDsKICAgIGNvbnN0IGJlZ2luQ2h1bmsgPSBNYXRoLmZsb29yKGJlZ2luIC8gdGhpcy5jaHVua1NpemUpOwogICAgY29uc3QgZW5kQ2h1bmsgPSBlbmQgPCB0aGlzLmxlbmd0aCA/IE1hdGguZmxvb3IoZW5kIC8gdGhpcy5jaHVua1NpemUpIDogTWF0aC5jZWlsKGVuZCAvIHRoaXMuY2h1bmtTaXplKTsKICAgIGlmIChpc1Byb2dyZXNzaXZlKSB7CiAgICAgIHRoaXMuc3RyZWFtLm9uUmVjZWl2ZVByb2dyZXNzaXZlRGF0YShjaHVuayk7CiAgICAgIHRoaXMucHJvZ3Jlc3NpdmVEYXRhTGVuZ3RoID0gZW5kOwogICAgfSBlbHNlIHsKICAgICAgdGhpcy5zdHJlYW0ub25SZWNlaXZlRGF0YShiZWdpbiwgY2h1bmspOwogICAgfQogICAgaWYgKHRoaXMuc3RyZWFtLmlzRGF0YUxvYWRlZCkgewogICAgICB0aGlzLl9sb2FkZWRTdHJlYW1DYXBhYmlsaXR5LnJlc29sdmUodGhpcy5zdHJlYW0pOwogICAgfQogICAgY29uc3QgbG9hZGVkUmVxdWVzdHMgPSBbXTsKICAgIGZvciAobGV0IGN1ckNodW5rID0gYmVnaW5DaHVuazsgY3VyQ2h1bmsgPCBlbmRDaHVuazsgKytjdXJDaHVuaykgewogICAgICBjb25zdCByZXF1ZXN0SWRzID0gdGhpcy5fcmVxdWVzdHNCeUNodW5rLmdldChjdXJDaHVuayk7CiAgICAgIGlmICghcmVxdWVzdElkcykgewogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIHRoaXMuX3JlcXVlc3RzQnlDaHVuay5kZWxldGUoY3VyQ2h1bmspOwogICAgICBmb3IgKGNvbnN0IHJlcXVlc3RJZCBvZiByZXF1ZXN0SWRzKSB7CiAgICAgICAgY29uc3QgY2h1bmtzTmVlZGVkID0gdGhpcy5fY2h1bmtzTmVlZGVkQnlSZXF1ZXN0LmdldChyZXF1ZXN0SWQpOwogICAgICAgIGlmIChjaHVua3NOZWVkZWQuaGFzKGN1ckNodW5rKSkgewogICAgICAgICAgY2h1bmtzTmVlZGVkLmRlbGV0ZShjdXJDaHVuayk7CiAgICAgICAgfQogICAgICAgIGlmIChjaHVua3NOZWVkZWQuc2l6ZSA+IDApIHsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgICBsb2FkZWRSZXF1ZXN0cy5wdXNoKHJlcXVlc3RJZCk7CiAgICAgIH0KICAgIH0KICAgIGlmICghdGhpcy5kaXNhYmxlQXV0b0ZldGNoICYmIHRoaXMuX3JlcXVlc3RzQnlDaHVuay5zaXplID09PSAwKSB7CiAgICAgIGxldCBuZXh0RW1wdHlDaHVuazsKICAgICAgaWYgKHRoaXMuc3RyZWFtLm51bUNodW5rc0xvYWRlZCA9PT0gMSkgewogICAgICAgIGNvbnN0IGxhc3RDaHVuayA9IHRoaXMuc3RyZWFtLm51bUNodW5rcyAtIDE7CiAgICAgICAgaWYgKCF0aGlzLnN0cmVhbS5oYXNDaHVuayhsYXN0Q2h1bmspKSB7CiAgICAgICAgICBuZXh0RW1wdHlDaHVuayA9IGxhc3RDaHVuazsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgbmV4dEVtcHR5Q2h1bmsgPSB0aGlzLnN0cmVhbS5uZXh0RW1wdHlDaHVuayhlbmRDaHVuayk7CiAgICAgIH0KICAgICAgaWYgKE51bWJlci5pc0ludGVnZXIobmV4dEVtcHR5Q2h1bmspKSB7CiAgICAgICAgdGhpcy5fcmVxdWVzdENodW5rcyhbbmV4dEVtcHR5Q2h1bmtdKTsKICAgICAgfQogICAgfQogICAgZm9yIChjb25zdCByZXF1ZXN0SWQgb2YgbG9hZGVkUmVxdWVzdHMpIHsKICAgICAgY29uc3QgY2FwYWJpbGl0eSA9IHRoaXMuX3Byb21pc2VzQnlSZXF1ZXN0LmdldChyZXF1ZXN0SWQpOwogICAgICB0aGlzLl9wcm9taXNlc0J5UmVxdWVzdC5kZWxldGUocmVxdWVzdElkKTsKICAgICAgY2FwYWJpbGl0eS5yZXNvbHZlKCk7CiAgICB9CiAgICB0aGlzLm1zZ0hhbmRsZXIuc2VuZCgiRG9jUHJvZ3Jlc3MiLCB7CiAgICAgIGxvYWRlZDogdGhpcy5zdHJlYW0ubnVtQ2h1bmtzTG9hZGVkICogdGhpcy5jaHVua1NpemUsCiAgICAgIHRvdGFsOiB0aGlzLmxlbmd0aAogICAgfSk7CiAgfQogIG9uRXJyb3IoZXJyKSB7CiAgICB0aGlzLl9sb2FkZWRTdHJlYW1DYXBhYmlsaXR5LnJlamVjdChlcnIpOwogIH0KICBnZXRCZWdpbkNodW5rKGJlZ2luKSB7CiAgICByZXR1cm4gTWF0aC5mbG9vcihiZWdpbiAvIHRoaXMuY2h1bmtTaXplKTsKICB9CiAgZ2V0RW5kQ2h1bmsoZW5kKSB7CiAgICByZXR1cm4gTWF0aC5mbG9vcigoZW5kIC0gMSkgLyB0aGlzLmNodW5rU2l6ZSkgKyAxOwogIH0KICBhYm9ydChyZWFzb24pIHsKICAgIHRoaXMuYWJvcnRlZCA9IHRydWU7CiAgICB0aGlzLnBkZk5ldHdvcmtTdHJlYW0/LmNhbmNlbEFsbFJlcXVlc3RzKHJlYXNvbik7CiAgICBmb3IgKGNvbnN0IGNhcGFiaWxpdHkgb2YgdGhpcy5fcHJvbWlzZXNCeVJlcXVlc3QudmFsdWVzKCkpIHsKICAgICAgY2FwYWJpbGl0eS5yZWplY3QocmVhc29uKTsKICAgIH0KICB9Cn0KCjsvLyAuL3NyYy9zaGFyZWQvaW1hZ2VfdXRpbHMuanMKCgoKCgpmdW5jdGlvbiBjb252ZXJ0VG9SR0JBKHBhcmFtcykgewogIHN3aXRjaCAocGFyYW1zLmtpbmQpIHsKICAgIGNhc2UgSW1hZ2VLaW5kLkdSQVlTQ0FMRV8xQlBQOgogICAgICByZXR1cm4gY29udmVydEJsYWNrQW5kV2hpdGVUb1JHQkEocGFyYW1zKTsKICAgIGNhc2UgSW1hZ2VLaW5kLlJHQl8yNEJQUDoKICAgICAgcmV0dXJuIGNvbnZlcnRSR0JUb1JHQkEocGFyYW1zKTsKICB9CiAgcmV0dXJuIG51bGw7Cn0KZnVuY3Rpb24gY29udmVydEJsYWNrQW5kV2hpdGVUb1JHQkEoewogIHNyYywKICBzcmNQb3MgPSAwLAogIGRlc3QsCiAgd2lkdGgsCiAgaGVpZ2h0LAogIG5vbkJsYWNrQ29sb3IgPSAweGZmZmZmZmZmLAogIGludmVyc2VEZWNvZGUgPSBmYWxzZQp9KSB7CiAgY29uc3QgYmxhY2sgPSBGZWF0dXJlVGVzdC5pc0xpdHRsZUVuZGlhbiA/IDB4ZmYwMDAwMDAgOiAweDAwMDAwMGZmOwogIGNvbnN0IFt6ZXJvTWFwcGluZywgb25lTWFwcGluZ10gPSBpbnZlcnNlRGVjb2RlID8gW25vbkJsYWNrQ29sb3IsIGJsYWNrXSA6IFtibGFjaywgbm9uQmxhY2tDb2xvcl07CiAgY29uc3Qgd2lkdGhJblNvdXJjZSA9IHdpZHRoID4+IDM7CiAgY29uc3Qgd2lkdGhSZW1haW5kZXIgPSB3aWR0aCAmIDc7CiAgY29uc3Qgc3JjTGVuZ3RoID0gc3JjLmxlbmd0aDsKICBkZXN0ID0gbmV3IFVpbnQzMkFycmF5KGRlc3QuYnVmZmVyKTsKICBsZXQgZGVzdFBvcyA9IDA7CiAgZm9yIChsZXQgaSA9IDA7IGkgPCBoZWlnaHQ7IGkrKykgewogICAgZm9yIChjb25zdCBtYXggPSBzcmNQb3MgKyB3aWR0aEluU291cmNlOyBzcmNQb3MgPCBtYXg7IHNyY1BvcysrKSB7CiAgICAgIGNvbnN0IGVsZW0gPSBzcmNQb3MgPCBzcmNMZW5ndGggPyBzcmNbc3JjUG9zXSA6IDI1NTsKICAgICAgZGVzdFtkZXN0UG9zKytdID0gZWxlbSAmIDBiMTAwMDAwMDAgPyBvbmVNYXBwaW5nIDogemVyb01hcHBpbmc7CiAgICAgIGRlc3RbZGVzdFBvcysrXSA9IGVsZW0gJiAwYjEwMDAwMDAgPyBvbmVNYXBwaW5nIDogemVyb01hcHBpbmc7CiAgICAgIGRlc3RbZGVzdFBvcysrXSA9IGVsZW0gJiAwYjEwMDAwMCA/IG9uZU1hcHBpbmcgOiB6ZXJvTWFwcGluZzsKICAgICAgZGVzdFtkZXN0UG9zKytdID0gZWxlbSAmIDBiMTAwMDAgPyBvbmVNYXBwaW5nIDogemVyb01hcHBpbmc7CiAgICAgIGRlc3RbZGVzdFBvcysrXSA9IGVsZW0gJiAwYjEwMDAgPyBvbmVNYXBwaW5nIDogemVyb01hcHBpbmc7CiAgICAgIGRlc3RbZGVzdFBvcysrXSA9IGVsZW0gJiAwYjEwMCA/IG9uZU1hcHBpbmcgOiB6ZXJvTWFwcGluZzsKICAgICAgZGVzdFtkZXN0UG9zKytdID0gZWxlbSAmIDBiMTAgPyBvbmVNYXBwaW5nIDogemVyb01hcHBpbmc7CiAgICAgIGRlc3RbZGVzdFBvcysrXSA9IGVsZW0gJiAwYjEgPyBvbmVNYXBwaW5nIDogemVyb01hcHBpbmc7CiAgICB9CiAgICBpZiAod2lkdGhSZW1haW5kZXIgPT09IDApIHsKICAgICAgY29udGludWU7CiAgICB9CiAgICBjb25zdCBlbGVtID0gc3JjUG9zIDwgc3JjTGVuZ3RoID8gc3JjW3NyY1BvcysrXSA6IDI1NTsKICAgIGZvciAobGV0IGogPSAwOyBqIDwgd2lkdGhSZW1haW5kZXI7IGorKykgewogICAgICBkZXN0W2Rlc3RQb3MrK10gPSBlbGVtICYgMSA8PCA3IC0gaiA/IG9uZU1hcHBpbmcgOiB6ZXJvTWFwcGluZzsKICAgIH0KICB9CiAgcmV0dXJuIHsKICAgIHNyY1BvcywKICAgIGRlc3RQb3MKICB9Owp9CmZ1bmN0aW9uIGNvbnZlcnRSR0JUb1JHQkEoewogIHNyYywKICBzcmNQb3MgPSAwLAogIGRlc3QsCiAgZGVzdFBvcyA9IDAsCiAgd2lkdGgsCiAgaGVpZ2h0Cn0pIHsKICBsZXQgaSA9IDA7CiAgY29uc3QgbGVuID0gd2lkdGggKiBoZWlnaHQgKiAzOwogIGNvbnN0IGxlbjMyID0gbGVuID4+IDI7CiAgY29uc3Qgc3JjMzIgPSBuZXcgVWludDMyQXJyYXkoc3JjLmJ1ZmZlciwgc3JjUG9zLCBsZW4zMik7CiAgaWYgKEZlYXR1cmVUZXN0LmlzTGl0dGxlRW5kaWFuKSB7CiAgICBmb3IgKDsgaSA8IGxlbjMyIC0gMjsgaSArPSAzLCBkZXN0UG9zICs9IDQpIHsKICAgICAgY29uc3QgczEgPSBzcmMzMltpXTsKICAgICAgY29uc3QgczIgPSBzcmMzMltpICsgMV07CiAgICAgIGNvbnN0IHMzID0gc3JjMzJbaSArIDJdOwogICAgICBkZXN0W2Rlc3RQb3NdID0gczEgfCAweGZmMDAwMDAwOwogICAgICBkZXN0W2Rlc3RQb3MgKyAxXSA9IHMxID4+PiAyNCB8IHMyIDw8IDggfCAweGZmMDAwMDAwOwogICAgICBkZXN0W2Rlc3RQb3MgKyAyXSA9IHMyID4+PiAxNiB8IHMzIDw8IDE2IHwgMHhmZjAwMDAwMDsKICAgICAgZGVzdFtkZXN0UG9zICsgM10gPSBzMyA+Pj4gOCB8IDB4ZmYwMDAwMDA7CiAgICB9CiAgICBmb3IgKGxldCBqID0gaSAqIDQsIGpqID0gc3JjUG9zICsgbGVuOyBqIDwgamo7IGogKz0gMykgewogICAgICBkZXN0W2Rlc3RQb3MrK10gPSBzcmNbal0gfCBzcmNbaiArIDFdIDw8IDggfCBzcmNbaiArIDJdIDw8IDE2IHwgMHhmZjAwMDAwMDsKICAgIH0KICB9IGVsc2UgewogICAgZm9yICg7IGkgPCBsZW4zMiAtIDI7IGkgKz0gMywgZGVzdFBvcyArPSA0KSB7CiAgICAgIGNvbnN0IHMxID0gc3JjMzJbaV07CiAgICAgIGNvbnN0IHMyID0gc3JjMzJbaSArIDFdOwogICAgICBjb25zdCBzMyA9IHNyYzMyW2kgKyAyXTsKICAgICAgZGVzdFtkZXN0UG9zXSA9IHMxIHwgMHhmZjsKICAgICAgZGVzdFtkZXN0UG9zICsgMV0gPSBzMSA8PCAyNCB8IHMyID4+PiA4IHwgMHhmZjsKICAgICAgZGVzdFtkZXN0UG9zICsgMl0gPSBzMiA8PCAxNiB8IHMzID4+PiAxNiB8IDB4ZmY7CiAgICAgIGRlc3RbZGVzdFBvcyArIDNdID0gczMgPDwgOCB8IDB4ZmY7CiAgICB9CiAgICBmb3IgKGxldCBqID0gaSAqIDQsIGpqID0gc3JjUG9zICsgbGVuOyBqIDwgamo7IGogKz0gMykgewogICAgICBkZXN0W2Rlc3RQb3MrK10gPSBzcmNbal0gPDwgMjQgfCBzcmNbaiArIDFdIDw8IDE2IHwgc3JjW2ogKyAyXSA8PCA4IHwgMHhmZjsKICAgIH0KICB9CiAgcmV0dXJuIHsKICAgIHNyY1Bvczogc3JjUG9zICsgbGVuLAogICAgZGVzdFBvcwogIH07Cn0KZnVuY3Rpb24gZ3JheVRvUkdCQShzcmMsIGRlc3QpIHsKICBpZiAoRmVhdHVyZVRlc3QuaXNMaXR0bGVFbmRpYW4pIHsKICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IHNyYy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgIGRlc3RbaV0gPSBzcmNbaV0gKiAweDEwMTAxIHwgMHhmZjAwMDAwMDsKICAgIH0KICB9IGVsc2UgewogICAgZm9yIChsZXQgaSA9IDAsIGlpID0gc3JjLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgZGVzdFtpXSA9IHNyY1tpXSAqIDB4MTAxMDEwMCB8IDB4MDAwMDAwZmY7CiAgICB9CiAgfQp9Cgo7Ly8gLi9zcmMvY29yZS9pbWFnZV9yZXNpemVyLmpzCgoKCgoKCgoKCgoKY29uc3QgTUlOX0lNQUdFX0RJTSA9IDIwNDg7CmNvbnN0IE1BWF9JTUFHRV9ESU0gPSA2NTUzNzsKY29uc3QgTUFYX0VSUk9SID0gMTI4OwpjbGFzcyBJbWFnZVJlc2l6ZXIgewogIHN0YXRpYyAjZ29vZFNxdWFyZUxlbmd0aCA9IE1JTl9JTUFHRV9ESU07CiAgc3RhdGljICNpc0ltYWdlRGVjb2RlclN1cHBvcnRlZCA9IEZlYXR1cmVUZXN0LmlzSW1hZ2VEZWNvZGVyU3VwcG9ydGVkOwogIGNvbnN0cnVjdG9yKGltZ0RhdGEsIGlzTWFzaykgewogICAgdGhpcy5faW1nRGF0YSA9IGltZ0RhdGE7CiAgICB0aGlzLl9pc01hc2sgPSBpc01hc2s7CiAgfQogIHN0YXRpYyBnZXQgY2FuVXNlSW1hZ2VEZWNvZGVyKCkgewogICAgcmV0dXJuIHNoYWRvdyh0aGlzLCAiY2FuVXNlSW1hZ2VEZWNvZGVyIiwgdGhpcy4jaXNJbWFnZURlY29kZXJTdXBwb3J0ZWQgPyBJbWFnZURlY29kZXIuaXNUeXBlU3VwcG9ydGVkKCJpbWFnZS9ibXAiKSA6IFByb21pc2UucmVzb2x2ZShmYWxzZSkpOwogIH0KICBzdGF0aWMgbmVlZHNUb0JlUmVzaXplZCh3aWR0aCwgaGVpZ2h0KSB7CiAgICBpZiAod2lkdGggPD0gdGhpcy4jZ29vZFNxdWFyZUxlbmd0aCAmJiBoZWlnaHQgPD0gdGhpcy4jZ29vZFNxdWFyZUxlbmd0aCkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgICBjb25zdCB7CiAgICAgIE1BWF9ESU0KICAgIH0gPSB0aGlzOwogICAgaWYgKHdpZHRoID4gTUFYX0RJTSB8fCBoZWlnaHQgPiBNQVhfRElNKSB7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgY29uc3QgYXJlYSA9IHdpZHRoICogaGVpZ2h0OwogICAgaWYgKHRoaXMuX2hhc01heEFyZWEpIHsKICAgICAgcmV0dXJuIGFyZWEgPiB0aGlzLk1BWF9BUkVBOwogICAgfQogICAgaWYgKGFyZWEgPCB0aGlzLiNnb29kU3F1YXJlTGVuZ3RoICoqIDIpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgaWYgKHRoaXMuX2FyZUdvb2REaW1zKHdpZHRoLCBoZWlnaHQpKSB7CiAgICAgIHRoaXMuI2dvb2RTcXVhcmVMZW5ndGggPSBNYXRoLm1heCh0aGlzLiNnb29kU3F1YXJlTGVuZ3RoLCBNYXRoLmZsb29yKE1hdGguc3FydCh3aWR0aCAqIGhlaWdodCkpKTsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgdGhpcy4jZ29vZFNxdWFyZUxlbmd0aCA9IHRoaXMuX2d1ZXNzTWF4KHRoaXMuI2dvb2RTcXVhcmVMZW5ndGgsIE1BWF9ESU0sIE1BWF9FUlJPUiwgMCk7CiAgICBjb25zdCBtYXhBcmVhID0gdGhpcy5NQVhfQVJFQSA9IHRoaXMuI2dvb2RTcXVhcmVMZW5ndGggKiogMjsKICAgIHJldHVybiBhcmVhID4gbWF4QXJlYTsKICB9CiAgc3RhdGljIGdldFJlZHVjZVBvd2VyRm9ySlBYKHdpZHRoLCBoZWlnaHQsIGNvbXBvbmVudHNDb3VudCkgewogICAgY29uc3QgYXJlYSA9IHdpZHRoICogaGVpZ2h0OwogICAgY29uc3QgbWF4SlBYQXJlYSA9IDIgKiogMzAgLyAoY29tcG9uZW50c0NvdW50ICogNCk7CiAgICBpZiAoIXRoaXMubmVlZHNUb0JlUmVzaXplZCh3aWR0aCwgaGVpZ2h0KSkgewogICAgICBpZiAoYXJlYSA+IG1heEpQWEFyZWEpIHsKICAgICAgICByZXR1cm4gTWF0aC5jZWlsKE1hdGgubG9nMihhcmVhIC8gbWF4SlBYQXJlYSkpOwogICAgICB9CiAgICAgIHJldHVybiAwOwogICAgfQogICAgY29uc3QgewogICAgICBNQVhfRElNLAogICAgICBNQVhfQVJFQQogICAgfSA9IHRoaXM7CiAgICBjb25zdCBtaW5GYWN0b3IgPSBNYXRoLm1heCh3aWR0aCAvIE1BWF9ESU0sIGhlaWdodCAvIE1BWF9ESU0sIE1hdGguc3FydChhcmVhIC8gTWF0aC5taW4obWF4SlBYQXJlYSwgTUFYX0FSRUEpKSk7CiAgICByZXR1cm4gTWF0aC5jZWlsKE1hdGgubG9nMihtaW5GYWN0b3IpKTsKICB9CiAgc3RhdGljIGdldCBNQVhfRElNKCkgewogICAgcmV0dXJuIHNoYWRvdyh0aGlzLCAiTUFYX0RJTSIsIHRoaXMuX2d1ZXNzTWF4KE1JTl9JTUFHRV9ESU0sIE1BWF9JTUFHRV9ESU0sIDAsIDEpKTsKICB9CiAgc3RhdGljIGdldCBNQVhfQVJFQSgpIHsKICAgIHRoaXMuX2hhc01heEFyZWEgPSB0cnVlOwogICAgcmV0dXJuIHNoYWRvdyh0aGlzLCAiTUFYX0FSRUEiLCB0aGlzLl9ndWVzc01heCh0aGlzLiNnb29kU3F1YXJlTGVuZ3RoLCB0aGlzLk1BWF9ESU0sIE1BWF9FUlJPUiwgMCkgKiogMik7CiAgfQogIHN0YXRpYyBzZXQgTUFYX0FSRUEoYXJlYSkgewogICAgaWYgKGFyZWEgPj0gMCkgewogICAgICB0aGlzLl9oYXNNYXhBcmVhID0gdHJ1ZTsKICAgICAgc2hhZG93KHRoaXMsICJNQVhfQVJFQSIsIGFyZWEpOwogICAgfQogIH0KICBzdGF0aWMgc2V0T3B0aW9ucyh7CiAgICBjYW52YXNNYXhBcmVhSW5CeXRlcyA9IC0xLAogICAgaXNJbWFnZURlY29kZXJTdXBwb3J0ZWQgPSBmYWxzZQogIH0pIHsKICAgIGlmICghdGhpcy5faGFzTWF4QXJlYSkgewogICAgICB0aGlzLk1BWF9BUkVBID0gY2FudmFzTWF4QXJlYUluQnl0ZXMgPj4gMjsKICAgIH0KICAgIHRoaXMuI2lzSW1hZ2VEZWNvZGVyU3VwcG9ydGVkID0gaXNJbWFnZURlY29kZXJTdXBwb3J0ZWQ7CiAgfQogIHN0YXRpYyBfYXJlR29vZERpbXMod2lkdGgsIGhlaWdodCkgewogICAgdHJ5IHsKICAgICAgY29uc3QgY2FudmFzID0gbmV3IE9mZnNjcmVlbkNhbnZhcyh3aWR0aCwgaGVpZ2h0KTsKICAgICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoIjJkIik7CiAgICAgIGN0eC5maWxsUmVjdCgwLCAwLCAxLCAxKTsKICAgICAgY29uc3Qgb3BhY2l0eSA9IGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgMSwgMSkuZGF0YVszXTsKICAgICAgY2FudmFzLndpZHRoID0gY2FudmFzLmhlaWdodCA9IDE7CiAgICAgIHJldHVybiBvcGFjaXR5ICE9PSAwOwogICAgfSBjYXRjaCB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9CiAgc3RhdGljIF9ndWVzc01heChzdGFydCwgZW5kLCB0b2xlcmFuY2UsIGRlZmF1bHRIZWlnaHQpIHsKICAgIHdoaWxlIChzdGFydCArIHRvbGVyYW5jZSArIDEgPCBlbmQpIHsKICAgICAgY29uc3QgbWlkZGxlID0gTWF0aC5mbG9vcigoc3RhcnQgKyBlbmQpIC8gMik7CiAgICAgIGNvbnN0IGhlaWdodCA9IGRlZmF1bHRIZWlnaHQgfHwgbWlkZGxlOwogICAgICBpZiAodGhpcy5fYXJlR29vZERpbXMobWlkZGxlLCBoZWlnaHQpKSB7CiAgICAgICAgc3RhcnQgPSBtaWRkbGU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZW5kID0gbWlkZGxlOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gc3RhcnQ7CiAgfQogIHN0YXRpYyBhc3luYyBjcmVhdGVJbWFnZShpbWdEYXRhLCBpc01hc2sgPSBmYWxzZSkgewogICAgcmV0dXJuIG5ldyBJbWFnZVJlc2l6ZXIoaW1nRGF0YSwgaXNNYXNrKS5fY3JlYXRlSW1hZ2UoKTsKICB9CiAgYXN5bmMgX2NyZWF0ZUltYWdlKCkgewogICAgY29uc3QgewogICAgICBfaW1nRGF0YTogaW1nRGF0YQogICAgfSA9IHRoaXM7CiAgICBjb25zdCB7CiAgICAgIHdpZHRoLAogICAgICBoZWlnaHQKICAgIH0gPSBpbWdEYXRhOwogICAgaWYgKHdpZHRoICogaGVpZ2h0ICogNCA+IE1BWF9JTlRfMzIpIHsKICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy4jcmVzY2FsZUltYWdlRGF0YSgpOwogICAgICBpZiAocmVzdWx0KSB7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfQogICAgfQogICAgY29uc3QgZGF0YSA9IHRoaXMuX2VuY29kZUJNUCgpOwogICAgbGV0IGRlY29kZXIsIGltYWdlUHJvbWlzZTsKICAgIGlmIChhd2FpdCBJbWFnZVJlc2l6ZXIuY2FuVXNlSW1hZ2VEZWNvZGVyKSB7CiAgICAgIGRlY29kZXIgPSBuZXcgSW1hZ2VEZWNvZGVyKHsKICAgICAgICBkYXRhLAogICAgICAgIHR5cGU6ICJpbWFnZS9ibXAiLAogICAgICAgIHByZWZlckFuaW1hdGlvbjogZmFsc2UsCiAgICAgICAgdHJhbnNmZXI6IFtkYXRhLmJ1ZmZlcl0KICAgICAgfSk7CiAgICAgIGltYWdlUHJvbWlzZSA9IGRlY29kZXIuZGVjb2RlKCkuY2F0Y2gocmVhc29uID0+IHsKICAgICAgICB3YXJuKGBCTVAgaW1hZ2UgZGVjb2RpbmcgZmFpbGVkOiAke3JlYXNvbn1gKTsKICAgICAgICByZXR1cm4gY3JlYXRlSW1hZ2VCaXRtYXAobmV3IEJsb2IoW3RoaXMuX2VuY29kZUJNUCgpLmJ1ZmZlcl0sIHsKICAgICAgICAgIHR5cGU6ICJpbWFnZS9ibXAiCiAgICAgICAgfSkpOwogICAgICB9KS5maW5hbGx5KCgpID0+IHsKICAgICAgICBkZWNvZGVyLmNsb3NlKCk7CiAgICAgIH0pOwogICAgfSBlbHNlIHsKICAgICAgaW1hZ2VQcm9taXNlID0gY3JlYXRlSW1hZ2VCaXRtYXAobmV3IEJsb2IoW2RhdGEuYnVmZmVyXSwgewogICAgICAgIHR5cGU6ICJpbWFnZS9ibXAiCiAgICAgIH0pKTsKICAgIH0KICAgIGNvbnN0IHsKICAgICAgTUFYX0FSRUEsCiAgICAgIE1BWF9ESU0KICAgIH0gPSBJbWFnZVJlc2l6ZXI7CiAgICBjb25zdCBtaW5GYWN0b3IgPSBNYXRoLm1heCh3aWR0aCAvIE1BWF9ESU0sIGhlaWdodCAvIE1BWF9ESU0sIE1hdGguc3FydCh3aWR0aCAqIGhlaWdodCAvIE1BWF9BUkVBKSk7CiAgICBjb25zdCBmaXJzdEZhY3RvciA9IE1hdGgubWF4KG1pbkZhY3RvciwgMik7CiAgICBjb25zdCBmYWN0b3IgPSBNYXRoLnJvdW5kKDEwICogKG1pbkZhY3RvciArIDEuMjUpKSAvIDEwIC8gZmlyc3RGYWN0b3I7CiAgICBjb25zdCBOID0gTWF0aC5mbG9vcihNYXRoLmxvZzIoZmFjdG9yKSk7CiAgICBjb25zdCBzdGVwcyA9IG5ldyBBcnJheShOICsgMikuZmlsbCgyKTsKICAgIHN0ZXBzWzBdID0gZmlyc3RGYWN0b3I7CiAgICBzdGVwcy5zcGxpY2UoLTEsIDEsIGZhY3RvciAvICgxIDw8IE4pKTsKICAgIGxldCBuZXdXaWR0aCA9IHdpZHRoOwogICAgbGV0IG5ld0hlaWdodCA9IGhlaWdodDsKICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGltYWdlUHJvbWlzZTsKICAgIGxldCBiaXRtYXAgPSByZXN1bHQuaW1hZ2UgfHwgcmVzdWx0OwogICAgZm9yIChjb25zdCBzdGVwIG9mIHN0ZXBzKSB7CiAgICAgIGNvbnN0IHByZXZXaWR0aCA9IG5ld1dpZHRoOwogICAgICBjb25zdCBwcmV2SGVpZ2h0ID0gbmV3SGVpZ2h0OwogICAgICBuZXdXaWR0aCA9IE1hdGguZmxvb3IobmV3V2lkdGggLyBzdGVwKSAtIDE7CiAgICAgIG5ld0hlaWdodCA9IE1hdGguZmxvb3IobmV3SGVpZ2h0IC8gc3RlcCkgLSAxOwogICAgICBjb25zdCBjYW52YXMgPSBuZXcgT2Zmc2NyZWVuQ2FudmFzKG5ld1dpZHRoLCBuZXdIZWlnaHQpOwogICAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgiMmQiKTsKICAgICAgY3R4LmRyYXdJbWFnZShiaXRtYXAsIDAsIDAsIHByZXZXaWR0aCwgcHJldkhlaWdodCwgMCwgMCwgbmV3V2lkdGgsIG5ld0hlaWdodCk7CiAgICAgIGJpdG1hcC5jbG9zZSgpOwogICAgICBiaXRtYXAgPSBjYW52YXMudHJhbnNmZXJUb0ltYWdlQml0bWFwKCk7CiAgICB9CiAgICBpbWdEYXRhLmRhdGEgPSBudWxsOwogICAgaW1nRGF0YS5iaXRtYXAgPSBiaXRtYXA7CiAgICBpbWdEYXRhLndpZHRoID0gbmV3V2lkdGg7CiAgICBpbWdEYXRhLmhlaWdodCA9IG5ld0hlaWdodDsKICAgIHJldHVybiBpbWdEYXRhOwogIH0KICAjcmVzY2FsZUltYWdlRGF0YSgpIHsKICAgIGNvbnN0IHsKICAgICAgX2ltZ0RhdGE6IGltZ0RhdGEKICAgIH0gPSB0aGlzOwogICAgY29uc3QgewogICAgICBkYXRhLAogICAgICB3aWR0aCwKICAgICAgaGVpZ2h0LAogICAgICBraW5kCiAgICB9ID0gaW1nRGF0YTsKICAgIGNvbnN0IHJnYmFTaXplID0gd2lkdGggKiBoZWlnaHQgKiA0OwogICAgY29uc3QgSyA9IE1hdGguY2VpbChNYXRoLmxvZzIocmdiYVNpemUgLyBNQVhfSU5UXzMyKSk7CiAgICBjb25zdCBuZXdXaWR0aCA9IHdpZHRoID4+IEs7CiAgICBjb25zdCBuZXdIZWlnaHQgPSBoZWlnaHQgPj4gSzsKICAgIGxldCByZ2JhRGF0YTsKICAgIGxldCBtYXhIZWlnaHQgPSBoZWlnaHQ7CiAgICB0cnkgewogICAgICByZ2JhRGF0YSA9IG5ldyBVaW50OEFycmF5KHJnYmFTaXplKTsKICAgIH0gY2F0Y2ggewogICAgICBsZXQgbiA9IE1hdGguZmxvb3IoTWF0aC5sb2cyKHJnYmFTaXplICsgMSkpOwogICAgICB3aGlsZSAodHJ1ZSkgewogICAgICAgIHRyeSB7CiAgICAgICAgICByZ2JhRGF0YSA9IG5ldyBVaW50OEFycmF5KDIgKiogbiAtIDEpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfSBjYXRjaCB7CiAgICAgICAgICBuIC09IDE7CiAgICAgICAgfQogICAgICB9CiAgICAgIG1heEhlaWdodCA9IE1hdGguZmxvb3IoKDIgKiogbiAtIDEpIC8gKHdpZHRoICogNCkpOwogICAgICBjb25zdCBuZXdTaXplID0gd2lkdGggKiBtYXhIZWlnaHQgKiA0OwogICAgICBpZiAobmV3U2l6ZSA8IHJnYmFEYXRhLmxlbmd0aCkgewogICAgICAgIHJnYmFEYXRhID0gbmV3IFVpbnQ4QXJyYXkobmV3U2l6ZSk7CiAgICAgIH0KICAgIH0KICAgIGNvbnN0IHNyYzMyID0gbmV3IFVpbnQzMkFycmF5KHJnYmFEYXRhLmJ1ZmZlcik7CiAgICBjb25zdCBkZXN0MzIgPSBuZXcgVWludDMyQXJyYXkobmV3V2lkdGggKiBuZXdIZWlnaHQpOwogICAgbGV0IHNyY1BvcyA9IDA7CiAgICBsZXQgbmV3SW5kZXggPSAwOwogICAgY29uc3Qgc3RlcCA9IE1hdGguY2VpbChoZWlnaHQgLyBtYXhIZWlnaHQpOwogICAgY29uc3QgcmVtYWluZGVyID0gaGVpZ2h0ICUgbWF4SGVpZ2h0ID09PSAwID8gaGVpZ2h0IDogaGVpZ2h0ICUgbWF4SGVpZ2h0OwogICAgZm9yIChsZXQgayA9IDA7IGsgPCBzdGVwOyBrKyspIHsKICAgICAgY29uc3QgaCA9IGsgPCBzdGVwIC0gMSA/IG1heEhlaWdodCA6IHJlbWFpbmRlcjsKICAgICAgKHsKICAgICAgICBzcmNQb3MKICAgICAgfSA9IGNvbnZlcnRUb1JHQkEoewogICAgICAgIGtpbmQsCiAgICAgICAgc3JjOiBkYXRhLAogICAgICAgIGRlc3Q6IHNyYzMyLAogICAgICAgIHdpZHRoLAogICAgICAgIGhlaWdodDogaCwKICAgICAgICBpbnZlcnNlRGVjb2RlOiB0aGlzLl9pc01hc2ssCiAgICAgICAgc3JjUG9zCiAgICAgIH0pKTsKICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gaCA+PiBLOyBpIDwgaWk7IGkrKykgewogICAgICAgIGNvbnN0IGJ1ZiA9IHNyYzMyLnN1YmFycmF5KChpIDw8IEspICogd2lkdGgpOwogICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbmV3V2lkdGg7IGorKykgewogICAgICAgICAgZGVzdDMyW25ld0luZGV4KytdID0gYnVmW2ogPDwgS107CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBpZiAoSW1hZ2VSZXNpemVyLm5lZWRzVG9CZVJlc2l6ZWQobmV3V2lkdGgsIG5ld0hlaWdodCkpIHsKICAgICAgaW1nRGF0YS5kYXRhID0gZGVzdDMyOwogICAgICBpbWdEYXRhLndpZHRoID0gbmV3V2lkdGg7CiAgICAgIGltZ0RhdGEuaGVpZ2h0ID0gbmV3SGVpZ2h0OwogICAgICBpbWdEYXRhLmtpbmQgPSBJbWFnZUtpbmQuUkdCQV8zMkJQUDsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICBjb25zdCBjYW52YXMgPSBuZXcgT2Zmc2NyZWVuQ2FudmFzKG5ld1dpZHRoLCBuZXdIZWlnaHQpOwogICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoIjJkIiwgewogICAgICB3aWxsUmVhZEZyZXF1ZW50bHk6IHRydWUKICAgIH0pOwogICAgY3R4LnB1dEltYWdlRGF0YShuZXcgSW1hZ2VEYXRhKG5ldyBVaW50OENsYW1wZWRBcnJheShkZXN0MzIuYnVmZmVyKSwgbmV3V2lkdGgsIG5ld0hlaWdodCksIDAsIDApOwogICAgaW1nRGF0YS5kYXRhID0gbnVsbDsKICAgIGltZ0RhdGEuYml0bWFwID0gY2FudmFzLnRyYW5zZmVyVG9JbWFnZUJpdG1hcCgpOwogICAgaW1nRGF0YS53aWR0aCA9IG5ld1dpZHRoOwogICAgaW1nRGF0YS5oZWlnaHQgPSBuZXdIZWlnaHQ7CiAgICByZXR1cm4gaW1nRGF0YTsKICB9CiAgX2VuY29kZUJNUCgpIHsKICAgIGNvbnN0IHsKICAgICAgd2lkdGgsCiAgICAgIGhlaWdodCwKICAgICAga2luZAogICAgfSA9IHRoaXMuX2ltZ0RhdGE7CiAgICBsZXQgZGF0YSA9IHRoaXMuX2ltZ0RhdGEuZGF0YTsKICAgIGxldCBiaXRQZXJQaXhlbDsKICAgIGxldCBjb2xvclRhYmxlID0gbmV3IFVpbnQ4QXJyYXkoMCk7CiAgICBsZXQgbWFza1RhYmxlID0gY29sb3JUYWJsZTsKICAgIGxldCBjb21wcmVzc2lvbiA9IDA7CiAgICBzd2l0Y2ggKGtpbmQpIHsKICAgICAgY2FzZSBJbWFnZUtpbmQuR1JBWVNDQUxFXzFCUFA6CiAgICAgICAgewogICAgICAgICAgYml0UGVyUGl4ZWwgPSAxOwogICAgICAgICAgY29sb3JUYWJsZSA9IG5ldyBVaW50OEFycmF5KHRoaXMuX2lzTWFzayA/IFsyNTUsIDI1NSwgMjU1LCAyNTUsIDAsIDAsIDAsIDBdIDogWzAsIDAsIDAsIDAsIDI1NSwgMjU1LCAyNTUsIDI1NV0pOwogICAgICAgICAgY29uc3Qgcm93TGVuID0gd2lkdGggKyA3ID4+IDM7CiAgICAgICAgICBjb25zdCByb3dTaXplID0gcm93TGVuICsgMyAmIC00OwogICAgICAgICAgaWYgKHJvd0xlbiAhPT0gcm93U2l6ZSkgewogICAgICAgICAgICBjb25zdCBuZXdEYXRhID0gbmV3IFVpbnQ4QXJyYXkocm93U2l6ZSAqIGhlaWdodCk7CiAgICAgICAgICAgIGxldCBrID0gMDsKICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gaGVpZ2h0ICogcm93TGVuOyBpIDwgaWk7IGkgKz0gcm93TGVuLCBrICs9IHJvd1NpemUpIHsKICAgICAgICAgICAgICBuZXdEYXRhLnNldChkYXRhLnN1YmFycmF5KGksIGkgKyByb3dMZW4pLCBrKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBkYXRhID0gbmV3RGF0YTsKICAgICAgICAgIH0KICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgY2FzZSBJbWFnZUtpbmQuUkdCXzI0QlBQOgogICAgICAgIHsKICAgICAgICAgIGJpdFBlclBpeGVsID0gMjQ7CiAgICAgICAgICBpZiAod2lkdGggJiAzKSB7CiAgICAgICAgICAgIGNvbnN0IHJvd0xlbiA9IDMgKiB3aWR0aDsKICAgICAgICAgICAgY29uc3Qgcm93U2l6ZSA9IHJvd0xlbiArIDMgJiAtNDsKICAgICAgICAgICAgY29uc3QgZXh0cmFMZW4gPSByb3dTaXplIC0gcm93TGVuOwogICAgICAgICAgICBjb25zdCBuZXdEYXRhID0gbmV3IFVpbnQ4QXJyYXkocm93U2l6ZSAqIGhlaWdodCk7CiAgICAgICAgICAgIGxldCBrID0gMDsKICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gaGVpZ2h0ICogcm93TGVuOyBpIDwgaWk7IGkgKz0gcm93TGVuKSB7CiAgICAgICAgICAgICAgY29uc3Qgcm93ID0gZGF0YS5zdWJhcnJheShpLCBpICsgcm93TGVuKTsKICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHJvd0xlbjsgaiArPSAzKSB7CiAgICAgICAgICAgICAgICBuZXdEYXRhW2srK10gPSByb3dbaiArIDJdOwogICAgICAgICAgICAgICAgbmV3RGF0YVtrKytdID0gcm93W2ogKyAxXTsKICAgICAgICAgICAgICAgIG5ld0RhdGFbaysrXSA9IHJvd1tqXTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgayArPSBleHRyYUxlbjsKICAgICAgICAgICAgfQogICAgICAgICAgICBkYXRhID0gbmV3RGF0YTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGRhdGEubGVuZ3RoOyBpIDwgaWk7IGkgKz0gMykgewogICAgICAgICAgICAgIGNvbnN0IHRtcCA9IGRhdGFbaV07CiAgICAgICAgICAgICAgZGF0YVtpXSA9IGRhdGFbaSArIDJdOwogICAgICAgICAgICAgIGRhdGFbaSArIDJdID0gdG1wOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIGNhc2UgSW1hZ2VLaW5kLlJHQkFfMzJCUFA6CiAgICAgICAgYml0UGVyUGl4ZWwgPSAzMjsKICAgICAgICBjb21wcmVzc2lvbiA9IDM7CiAgICAgICAgbWFza1RhYmxlID0gbmV3IFVpbnQ4QXJyYXkoNCArIDQgKyA0ICsgNCArIDUyKTsKICAgICAgICBjb25zdCB2aWV3ID0gbmV3IERhdGFWaWV3KG1hc2tUYWJsZS5idWZmZXIpOwogICAgICAgIGlmIChGZWF0dXJlVGVzdC5pc0xpdHRsZUVuZGlhbikgewogICAgICAgICAgdmlldy5zZXRVaW50MzIoMCwgMHgwMDAwMDBmZiwgdHJ1ZSk7CiAgICAgICAgICB2aWV3LnNldFVpbnQzMig0LCAweDAwMDBmZjAwLCB0cnVlKTsKICAgICAgICAgIHZpZXcuc2V0VWludDMyKDgsIDB4MDBmZjAwMDAsIHRydWUpOwogICAgICAgICAgdmlldy5zZXRVaW50MzIoMTIsIDB4ZmYwMDAwMDAsIHRydWUpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB2aWV3LnNldFVpbnQzMigwLCAweGZmMDAwMDAwLCB0cnVlKTsKICAgICAgICAgIHZpZXcuc2V0VWludDMyKDQsIDB4MDBmZjAwMDAsIHRydWUpOwogICAgICAgICAgdmlldy5zZXRVaW50MzIoOCwgMHgwMDAwZmYwMCwgdHJ1ZSk7CiAgICAgICAgICB2aWV3LnNldFVpbnQzMigxMiwgMHgwMDAwMDBmZiwgdHJ1ZSk7CiAgICAgICAgfQogICAgICAgIGJyZWFrOwogICAgICBkZWZhdWx0OgogICAgICAgIHRocm93IG5ldyBFcnJvcigiaW52YWxpZCBmb3JtYXQiKTsKICAgIH0KICAgIGxldCBpID0gMDsKICAgIGNvbnN0IGhlYWRlckxlbmd0aCA9IDQwICsgbWFza1RhYmxlLmxlbmd0aDsKICAgIGNvbnN0IGZpbGVMZW5ndGggPSAxNCArIGhlYWRlckxlbmd0aCArIGNvbG9yVGFibGUubGVuZ3RoICsgZGF0YS5sZW5ndGg7CiAgICBjb25zdCBibXBEYXRhID0gbmV3IFVpbnQ4QXJyYXkoZmlsZUxlbmd0aCk7CiAgICBjb25zdCB2aWV3ID0gbmV3IERhdGFWaWV3KGJtcERhdGEuYnVmZmVyKTsKICAgIHZpZXcuc2V0VWludDE2KGksIDB4NGQ0MiwgdHJ1ZSk7CiAgICBpICs9IDI7CiAgICB2aWV3LnNldFVpbnQzMihpLCBmaWxlTGVuZ3RoLCB0cnVlKTsKICAgIGkgKz0gNDsKICAgIHZpZXcuc2V0VWludDMyKGksIDAsIHRydWUpOwogICAgaSArPSA0OwogICAgdmlldy5zZXRVaW50MzIoaSwgMTQgKyBoZWFkZXJMZW5ndGggKyBjb2xvclRhYmxlLmxlbmd0aCwgdHJ1ZSk7CiAgICBpICs9IDQ7CiAgICB2aWV3LnNldFVpbnQzMihpLCBoZWFkZXJMZW5ndGgsIHRydWUpOwogICAgaSArPSA0OwogICAgdmlldy5zZXRJbnQzMihpLCB3aWR0aCwgdHJ1ZSk7CiAgICBpICs9IDQ7CiAgICB2aWV3LnNldEludDMyKGksIC1oZWlnaHQsIHRydWUpOwogICAgaSArPSA0OwogICAgdmlldy5zZXRVaW50MTYoaSwgMSwgdHJ1ZSk7CiAgICBpICs9IDI7CiAgICB2aWV3LnNldFVpbnQxNihpLCBiaXRQZXJQaXhlbCwgdHJ1ZSk7CiAgICBpICs9IDI7CiAgICB2aWV3LnNldFVpbnQzMihpLCBjb21wcmVzc2lvbiwgdHJ1ZSk7CiAgICBpICs9IDQ7CiAgICB2aWV3LnNldFVpbnQzMihpLCAwLCB0cnVlKTsKICAgIGkgKz0gNDsKICAgIHZpZXcuc2V0SW50MzIoaSwgMCwgdHJ1ZSk7CiAgICBpICs9IDQ7CiAgICB2aWV3LnNldEludDMyKGksIDAsIHRydWUpOwogICAgaSArPSA0OwogICAgdmlldy5zZXRVaW50MzIoaSwgY29sb3JUYWJsZS5sZW5ndGggLyA0LCB0cnVlKTsKICAgIGkgKz0gNDsKICAgIHZpZXcuc2V0VWludDMyKGksIDAsIHRydWUpOwogICAgaSArPSA0OwogICAgYm1wRGF0YS5zZXQobWFza1RhYmxlLCBpKTsKICAgIGkgKz0gbWFza1RhYmxlLmxlbmd0aDsKICAgIGJtcERhdGEuc2V0KGNvbG9yVGFibGUsIGkpOwogICAgaSArPSBjb2xvclRhYmxlLmxlbmd0aDsKICAgIGJtcERhdGEuc2V0KGRhdGEsIGkpOwogICAgcmV0dXJuIGJtcERhdGE7CiAgfQp9Cgo7Ly8gLi9zcmMvY29yZS9kZWNvZGVfc3RyZWFtLmpzCgoKCgoKCgoKCgoKCgpjb25zdCBlbXB0eUJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KDApOwpjbGFzcyBEZWNvZGVTdHJlYW0gZXh0ZW5kcyBCYXNlU3RyZWFtIHsKICBjb25zdHJ1Y3RvcihtYXliZU1pbkJ1ZmZlckxlbmd0aCkgewogICAgc3VwZXIoKTsKICAgIHRoaXMuX3Jhd01pbkJ1ZmZlckxlbmd0aCA9IG1heWJlTWluQnVmZmVyTGVuZ3RoIHx8IDA7CiAgICB0aGlzLnBvcyA9IDA7CiAgICB0aGlzLmJ1ZmZlckxlbmd0aCA9IDA7CiAgICB0aGlzLmVvZiA9IGZhbHNlOwogICAgdGhpcy5idWZmZXIgPSBlbXB0eUJ1ZmZlcjsKICAgIHRoaXMubWluQnVmZmVyTGVuZ3RoID0gNTEyOwogICAgaWYgKG1heWJlTWluQnVmZmVyTGVuZ3RoKSB7CiAgICAgIHdoaWxlICh0aGlzLm1pbkJ1ZmZlckxlbmd0aCA8IG1heWJlTWluQnVmZmVyTGVuZ3RoKSB7CiAgICAgICAgdGhpcy5taW5CdWZmZXJMZW5ndGggKj0gMjsKICAgICAgfQogICAgfQogIH0KICBnZXQgaXNFbXB0eSgpIHsKICAgIHdoaWxlICghdGhpcy5lb2YgJiYgdGhpcy5idWZmZXJMZW5ndGggPT09IDApIHsKICAgICAgdGhpcy5yZWFkQmxvY2soKTsKICAgIH0KICAgIHJldHVybiB0aGlzLmJ1ZmZlckxlbmd0aCA9PT0gMDsKICB9CiAgZW5zdXJlQnVmZmVyKHJlcXVlc3RlZCkgewogICAgY29uc3QgYnVmZmVyID0gdGhpcy5idWZmZXI7CiAgICBpZiAocmVxdWVzdGVkIDw9IGJ1ZmZlci5ieXRlTGVuZ3RoKSB7CiAgICAgIHJldHVybiBidWZmZXI7CiAgICB9CiAgICBsZXQgc2l6ZSA9IHRoaXMubWluQnVmZmVyTGVuZ3RoOwogICAgd2hpbGUgKHNpemUgPCByZXF1ZXN0ZWQpIHsKICAgICAgc2l6ZSAqPSAyOwogICAgfQogICAgY29uc3QgYnVmZmVyMiA9IG5ldyBVaW50OEFycmF5KHNpemUpOwogICAgYnVmZmVyMi5zZXQoYnVmZmVyKTsKICAgIHJldHVybiB0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjI7CiAgfQogIGdldEJ5dGUoKSB7CiAgICBjb25zdCBwb3MgPSB0aGlzLnBvczsKICAgIHdoaWxlICh0aGlzLmJ1ZmZlckxlbmd0aCA8PSBwb3MpIHsKICAgICAgaWYgKHRoaXMuZW9mKSB7CiAgICAgICAgcmV0dXJuIC0xOwogICAgICB9CiAgICAgIHRoaXMucmVhZEJsb2NrKCk7CiAgICB9CiAgICByZXR1cm4gdGhpcy5idWZmZXJbdGhpcy5wb3MrK107CiAgfQogIGdldEJ5dGVzKGxlbmd0aCwgZGVjb2Rlck9wdGlvbnMgPSBudWxsKSB7CiAgICBjb25zdCBwb3MgPSB0aGlzLnBvczsKICAgIGxldCBlbmQ7CiAgICBpZiAobGVuZ3RoKSB7CiAgICAgIHRoaXMuZW5zdXJlQnVmZmVyKHBvcyArIGxlbmd0aCk7CiAgICAgIGVuZCA9IHBvcyArIGxlbmd0aDsKICAgICAgd2hpbGUgKCF0aGlzLmVvZiAmJiB0aGlzLmJ1ZmZlckxlbmd0aCA8IGVuZCkgewogICAgICAgIHRoaXMucmVhZEJsb2NrKGRlY29kZXJPcHRpb25zKTsKICAgICAgfQogICAgICBjb25zdCBidWZFbmQgPSB0aGlzLmJ1ZmZlckxlbmd0aDsKICAgICAgaWYgKGVuZCA+IGJ1ZkVuZCkgewogICAgICAgIGVuZCA9IGJ1ZkVuZDsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgd2hpbGUgKCF0aGlzLmVvZikgewogICAgICAgIHRoaXMucmVhZEJsb2NrKGRlY29kZXJPcHRpb25zKTsKICAgICAgfQogICAgICBlbmQgPSB0aGlzLmJ1ZmZlckxlbmd0aDsKICAgIH0KICAgIHRoaXMucG9zID0gZW5kOwogICAgcmV0dXJuIHRoaXMuYnVmZmVyLnN1YmFycmF5KHBvcywgZW5kKTsKICB9CiAgYXN5bmMgZ2V0SW1hZ2VEYXRhKGxlbmd0aCwgZGVjb2Rlck9wdGlvbnMpIHsKICAgIGlmICghdGhpcy5jYW5Bc3luY0RlY29kZUltYWdlRnJvbUJ1ZmZlcikgewogICAgICBpZiAodGhpcy5pc0FzeW5jRGVjb2RlcikgewogICAgICAgIHJldHVybiB0aGlzLmRlY29kZUltYWdlKG51bGwsIGRlY29kZXJPcHRpb25zKTsKICAgICAgfQogICAgICByZXR1cm4gdGhpcy5nZXRCeXRlcyhsZW5ndGgsIGRlY29kZXJPcHRpb25zKTsKICAgIH0KICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLnN0cmVhbS5hc3luY0dldEJ5dGVzKCk7CiAgICByZXR1cm4gdGhpcy5kZWNvZGVJbWFnZShkYXRhLCBkZWNvZGVyT3B0aW9ucyk7CiAgfQogIHJlc2V0KCkgewogICAgdGhpcy5wb3MgPSAwOwogIH0KICBtYWtlU3ViU3RyZWFtKHN0YXJ0LCBsZW5ndGgsIGRpY3QgPSBudWxsKSB7CiAgICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHsKICAgICAgd2hpbGUgKCF0aGlzLmVvZikgewogICAgICAgIHRoaXMucmVhZEJsb2NrKCk7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGNvbnN0IGVuZCA9IHN0YXJ0ICsgbGVuZ3RoOwogICAgICB3aGlsZSAodGhpcy5idWZmZXJMZW5ndGggPD0gZW5kICYmICF0aGlzLmVvZikgewogICAgICAgIHRoaXMucmVhZEJsb2NrKCk7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBuZXcgU3RyZWFtKHRoaXMuYnVmZmVyLCBzdGFydCwgbGVuZ3RoLCBkaWN0KTsKICB9CiAgZ2V0QmFzZVN0cmVhbXMoKSB7CiAgICByZXR1cm4gdGhpcy5zdHIgPyB0aGlzLnN0ci5nZXRCYXNlU3RyZWFtcygpIDogbnVsbDsKICB9Cn0KY2xhc3MgU3RyZWFtc1NlcXVlbmNlU3RyZWFtIGV4dGVuZHMgRGVjb2RlU3RyZWFtIHsKICBjb25zdHJ1Y3RvcihzdHJlYW1zLCBvbkVycm9yID0gbnVsbCkgewogICAgc3RyZWFtcyA9IHN0cmVhbXMuZmlsdGVyKHMgPT4gcyBpbnN0YW5jZW9mIEJhc2VTdHJlYW0pOwogICAgbGV0IG1heWJlTGVuZ3RoID0gMDsKICAgIGZvciAoY29uc3Qgc3RyZWFtIG9mIHN0cmVhbXMpIHsKICAgICAgbWF5YmVMZW5ndGggKz0gc3RyZWFtIGluc3RhbmNlb2YgRGVjb2RlU3RyZWFtID8gc3RyZWFtLl9yYXdNaW5CdWZmZXJMZW5ndGggOiBzdHJlYW0ubGVuZ3RoOwogICAgfQogICAgc3VwZXIobWF5YmVMZW5ndGgpOwogICAgdGhpcy5zdHJlYW1zID0gc3RyZWFtczsKICAgIHRoaXMuX29uRXJyb3IgPSBvbkVycm9yOwogIH0KICByZWFkQmxvY2soKSB7CiAgICBjb25zdCBzdHJlYW1zID0gdGhpcy5zdHJlYW1zOwogICAgaWYgKHN0cmVhbXMubGVuZ3RoID09PSAwKSB7CiAgICAgIHRoaXMuZW9mID0gdHJ1ZTsKICAgICAgcmV0dXJuOwogICAgfQogICAgY29uc3Qgc3RyZWFtID0gc3RyZWFtcy5zaGlmdCgpOwogICAgbGV0IGNodW5rOwogICAgdHJ5IHsKICAgICAgY2h1bmsgPSBzdHJlYW0uZ2V0Qnl0ZXMoKTsKICAgIH0gY2F0Y2ggKHJlYXNvbikgewogICAgICBpZiAodGhpcy5fb25FcnJvcikgewogICAgICAgIHRoaXMuX29uRXJyb3IocmVhc29uLCBzdHJlYW0uZGljdD8ub2JqSWQpOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICB0aHJvdyByZWFzb247CiAgICB9CiAgICBjb25zdCBidWZmZXJMZW5ndGggPSB0aGlzLmJ1ZmZlckxlbmd0aDsKICAgIGNvbnN0IG5ld0xlbmd0aCA9IGJ1ZmZlckxlbmd0aCArIGNodW5rLmxlbmd0aDsKICAgIGNvbnN0IGJ1ZmZlciA9IHRoaXMuZW5zdXJlQnVmZmVyKG5ld0xlbmd0aCk7CiAgICBidWZmZXIuc2V0KGNodW5rLCBidWZmZXJMZW5ndGgpOwogICAgdGhpcy5idWZmZXJMZW5ndGggPSBuZXdMZW5ndGg7CiAgfQogIGdldEJhc2VTdHJlYW1zKCkgewogICAgY29uc3QgYmFzZVN0cmVhbXNCdWYgPSBbXTsKICAgIGZvciAoY29uc3Qgc3RyZWFtIG9mIHRoaXMuc3RyZWFtcykgewogICAgICBjb25zdCBiYXNlU3RyZWFtcyA9IHN0cmVhbS5nZXRCYXNlU3RyZWFtcygpOwogICAgICBpZiAoYmFzZVN0cmVhbXMpIHsKICAgICAgICBiYXNlU3RyZWFtc0J1Zi5wdXNoKC4uLmJhc2VTdHJlYW1zKTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIGJhc2VTdHJlYW1zQnVmLmxlbmd0aCA+IDAgPyBiYXNlU3RyZWFtc0J1ZiA6IG51bGw7CiAgfQp9Cgo7Ly8gLi9zcmMvY29yZS9jb2xvcnNwYWNlX3V0aWxzLmpzCgoKCgoKY2xhc3MgQ29sb3JTcGFjZVV0aWxzIHsKICBzdGF0aWMgcGFyc2UoewogICAgY3MsCiAgICB4cmVmLAogICAgcmVzb3VyY2VzID0gbnVsbCwKICAgIHBkZkZ1bmN0aW9uRmFjdG9yeSwKICAgIGdsb2JhbENvbG9yU3BhY2VDYWNoZSwKICAgIGxvY2FsQ29sb3JTcGFjZUNhY2hlLAogICAgYXN5bmNJZk5vdENhY2hlZCA9IGZhbHNlCiAgfSkgewogICAgY29uc3Qgb3B0aW9ucyA9IHsKICAgICAgeHJlZiwKICAgICAgcmVzb3VyY2VzLAogICAgICBwZGZGdW5jdGlvbkZhY3RvcnksCiAgICAgIGdsb2JhbENvbG9yU3BhY2VDYWNoZSwKICAgICAgbG9jYWxDb2xvclNwYWNlQ2FjaGUKICAgIH07CiAgICBsZXQgY3NOYW1lLCBjc1JlZiwgcGFyc2VkQ1M7CiAgICBpZiAoY3MgaW5zdGFuY2VvZiBSZWYpIHsKICAgICAgY3NSZWYgPSBjczsKICAgICAgY29uc3QgY2FjaGVkQ1MgPSBnbG9iYWxDb2xvclNwYWNlQ2FjaGUuZ2V0QnlSZWYoY3NSZWYpIHx8IGxvY2FsQ29sb3JTcGFjZUNhY2hlLmdldEJ5UmVmKGNzUmVmKTsKICAgICAgaWYgKGNhY2hlZENTKSB7CiAgICAgICAgcmV0dXJuIGNhY2hlZENTOwogICAgICB9CiAgICAgIGNzID0geHJlZi5mZXRjaChjcyk7CiAgICB9CiAgICBpZiAoY3MgaW5zdGFuY2VvZiBOYW1lKSB7CiAgICAgIGNzTmFtZSA9IGNzLm5hbWU7CiAgICAgIGNvbnN0IGNhY2hlZENTID0gbG9jYWxDb2xvclNwYWNlQ2FjaGUuZ2V0QnlOYW1lKGNzTmFtZSk7CiAgICAgIGlmIChjYWNoZWRDUykgewogICAgICAgIHJldHVybiBjYWNoZWRDUzsKICAgICAgfQogICAgfQogICAgdHJ5IHsKICAgICAgcGFyc2VkQ1MgPSB0aGlzLiNwYXJzZShjcywgb3B0aW9ucyk7CiAgICB9IGNhdGNoIChleCkgewogICAgICBpZiAoYXN5bmNJZk5vdENhY2hlZCAmJiAhKGV4IGluc3RhbmNlb2YgTWlzc2luZ0RhdGFFeGNlcHRpb24pKSB7CiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGV4KTsKICAgICAgfQogICAgICB0aHJvdyBleDsKICAgIH0KICAgIGlmIChjc05hbWUgfHwgY3NSZWYpIHsKICAgICAgbG9jYWxDb2xvclNwYWNlQ2FjaGUuc2V0KGNzTmFtZSwgY3NSZWYsIHBhcnNlZENTKTsKICAgICAgaWYgKGNzUmVmKSB7CiAgICAgICAgZ2xvYmFsQ29sb3JTcGFjZUNhY2hlLnNldChudWxsLCBjc1JlZiwgcGFyc2VkQ1MpOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gYXN5bmNJZk5vdENhY2hlZCA/IFByb21pc2UucmVzb2x2ZShwYXJzZWRDUykgOiBwYXJzZWRDUzsKICB9CiAgc3RhdGljICNzdWJQYXJzZShjcywgb3B0aW9ucykgewogICAgY29uc3QgewogICAgICBnbG9iYWxDb2xvclNwYWNlQ2FjaGUKICAgIH0gPSBvcHRpb25zOwogICAgbGV0IGNzUmVmOwogICAgaWYgKGNzIGluc3RhbmNlb2YgUmVmKSB7CiAgICAgIGNzUmVmID0gY3M7CiAgICAgIGNvbnN0IGNhY2hlZENTID0gZ2xvYmFsQ29sb3JTcGFjZUNhY2hlLmdldEJ5UmVmKGNzUmVmKTsKICAgICAgaWYgKGNhY2hlZENTKSB7CiAgICAgICAgcmV0dXJuIGNhY2hlZENTOwogICAgICB9CiAgICB9CiAgICBjb25zdCBwYXJzZWRDUyA9IHRoaXMuI3BhcnNlKGNzLCBvcHRpb25zKTsKICAgIGlmIChjc1JlZikgewogICAgICBnbG9iYWxDb2xvclNwYWNlQ2FjaGUuc2V0KG51bGwsIGNzUmVmLCBwYXJzZWRDUyk7CiAgICB9CiAgICByZXR1cm4gcGFyc2VkQ1M7CiAgfQogIHN0YXRpYyAjcGFyc2UoY3MsIG9wdGlvbnMpIHsKICAgIGNvbnN0IHsKICAgICAgeHJlZiwKICAgICAgcmVzb3VyY2VzLAogICAgICBwZGZGdW5jdGlvbkZhY3RvcnksCiAgICAgIGdsb2JhbENvbG9yU3BhY2VDYWNoZQogICAgfSA9IG9wdGlvbnM7CiAgICBjcyA9IHhyZWYuZmV0Y2hJZlJlZihjcyk7CiAgICBpZiAoY3MgaW5zdGFuY2VvZiBOYW1lKSB7CiAgICAgIHN3aXRjaCAoY3MubmFtZSkgewogICAgICAgIGNhc2UgIkciOgogICAgICAgIGNhc2UgIkRldmljZUdyYXkiOgogICAgICAgICAgcmV0dXJuIHRoaXMuZ3JheTsKICAgICAgICBjYXNlICJSR0IiOgogICAgICAgIGNhc2UgIkRldmljZVJHQiI6CiAgICAgICAgICByZXR1cm4gdGhpcy5yZ2I7CiAgICAgICAgY2FzZSAiRGV2aWNlUkdCQSI6CiAgICAgICAgICByZXR1cm4gdGhpcy5yZ2JhOwogICAgICAgIGNhc2UgIkNNWUsiOgogICAgICAgIGNhc2UgIkRldmljZUNNWUsiOgogICAgICAgICAgcmV0dXJuIHRoaXMuY215azsKICAgICAgICBjYXNlICJQYXR0ZXJuIjoKICAgICAgICAgIHJldHVybiBuZXcgUGF0dGVybkNTKG51bGwpOwogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICBpZiAocmVzb3VyY2VzIGluc3RhbmNlb2YgRGljdCkgewogICAgICAgICAgICBjb25zdCBjb2xvclNwYWNlcyA9IHJlc291cmNlcy5nZXQoIkNvbG9yU3BhY2UiKTsKICAgICAgICAgICAgaWYgKGNvbG9yU3BhY2VzIGluc3RhbmNlb2YgRGljdCkgewogICAgICAgICAgICAgIGNvbnN0IHJlc291cmNlc0NTID0gY29sb3JTcGFjZXMuZ2V0KGNzLm5hbWUpOwogICAgICAgICAgICAgIGlmIChyZXNvdXJjZXNDUykgewogICAgICAgICAgICAgICAgaWYgKHJlc291cmNlc0NTIGluc3RhbmNlb2YgTmFtZSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4jcGFyc2UocmVzb3VyY2VzQ1MsIG9wdGlvbnMpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY3MgPSByZXNvdXJjZXNDUzsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgd2FybihgVW5yZWNvZ25pemVkIENvbG9yU3BhY2U6ICR7Y3MubmFtZX1gKTsKICAgICAgICAgIHJldHVybiB0aGlzLmdyYXk7CiAgICAgIH0KICAgIH0KICAgIGlmIChBcnJheS5pc0FycmF5KGNzKSkgewogICAgICBjb25zdCBtb2RlID0geHJlZi5mZXRjaElmUmVmKGNzWzBdKS5uYW1lOwogICAgICBsZXQgcGFyYW1zLCBudW1Db21wcywgYmFzZUNTLCB3aGl0ZVBvaW50LCBibGFja1BvaW50LCBnYW1tYTsKICAgICAgc3dpdGNoIChtb2RlKSB7CiAgICAgICAgY2FzZSAiRyI6CiAgICAgICAgY2FzZSAiRGV2aWNlR3JheSI6CiAgICAgICAgICByZXR1cm4gdGhpcy5ncmF5OwogICAgICAgIGNhc2UgIlJHQiI6CiAgICAgICAgY2FzZSAiRGV2aWNlUkdCIjoKICAgICAgICAgIHJldHVybiB0aGlzLnJnYjsKICAgICAgICBjYXNlICJDTVlLIjoKICAgICAgICBjYXNlICJEZXZpY2VDTVlLIjoKICAgICAgICAgIHJldHVybiB0aGlzLmNteWs7CiAgICAgICAgY2FzZSAiQ2FsR3JheSI6CiAgICAgICAgICBwYXJhbXMgPSB4cmVmLmZldGNoSWZSZWYoY3NbMV0pOwogICAgICAgICAgd2hpdGVQb2ludCA9IHBhcmFtcy5nZXRBcnJheSgiV2hpdGVQb2ludCIpOwogICAgICAgICAgYmxhY2tQb2ludCA9IHBhcmFtcy5nZXRBcnJheSgiQmxhY2tQb2ludCIpOwogICAgICAgICAgZ2FtbWEgPSBwYXJhbXMuZ2V0KCJHYW1tYSIpOwogICAgICAgICAgcmV0dXJuIG5ldyBDYWxHcmF5Q1Mod2hpdGVQb2ludCwgYmxhY2tQb2ludCwgZ2FtbWEpOwogICAgICAgIGNhc2UgIkNhbFJHQiI6CiAgICAgICAgICBwYXJhbXMgPSB4cmVmLmZldGNoSWZSZWYoY3NbMV0pOwogICAgICAgICAgd2hpdGVQb2ludCA9IHBhcmFtcy5nZXRBcnJheSgiV2hpdGVQb2ludCIpOwogICAgICAgICAgYmxhY2tQb2ludCA9IHBhcmFtcy5nZXRBcnJheSgiQmxhY2tQb2ludCIpOwogICAgICAgICAgZ2FtbWEgPSBwYXJhbXMuZ2V0QXJyYXkoIkdhbW1hIik7CiAgICAgICAgICBjb25zdCBtYXRyaXggPSBwYXJhbXMuZ2V0QXJyYXkoIk1hdHJpeCIpOwogICAgICAgICAgcmV0dXJuIG5ldyBDYWxSR0JDUyh3aGl0ZVBvaW50LCBibGFja1BvaW50LCBnYW1tYSwgbWF0cml4KTsKICAgICAgICBjYXNlICJJQ0NCYXNlZCI6CiAgICAgICAgICBjb25zdCBpc1JlZiA9IGNzWzFdIGluc3RhbmNlb2YgUmVmOwogICAgICAgICAgaWYgKGlzUmVmKSB7CiAgICAgICAgICAgIGNvbnN0IGNhY2hlZENTID0gZ2xvYmFsQ29sb3JTcGFjZUNhY2hlLmdldEJ5UmVmKGNzWzFdKTsKICAgICAgICAgICAgaWYgKGNhY2hlZENTKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENTOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBjb25zdCBzdHJlYW0gPSB4cmVmLmZldGNoSWZSZWYoY3NbMV0pOwogICAgICAgICAgY29uc3QgZGljdCA9IHN0cmVhbS5kaWN0OwogICAgICAgICAgbnVtQ29tcHMgPSBkaWN0LmdldCgiTiIpOwogICAgICAgICAgaWYgKEljY0NvbG9yU3BhY2UuaXNVc2FibGUpIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICBjb25zdCBpY2NDUyA9IG5ldyBJY2NDb2xvclNwYWNlKHN0cmVhbS5nZXRCeXRlcygpLCAiSUNDQmFzZWQiLCBudW1Db21wcyk7CiAgICAgICAgICAgICAgaWYgKGlzUmVmKSB7CiAgICAgICAgICAgICAgICBnbG9iYWxDb2xvclNwYWNlQ2FjaGUuc2V0KG51bGwsIGNzWzFdLCBpY2NDUyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiBpY2NDUzsKICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHsKICAgICAgICAgICAgICBpZiAoZXggaW5zdGFuY2VvZiBNaXNzaW5nRGF0YUV4Y2VwdGlvbikgewogICAgICAgICAgICAgICAgdGhyb3cgZXg7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHdhcm4oYElDQ0Jhc2VkIGNvbG9yIHNwYWNlICgke2NzWzFdfSk6ICIke2V4fSIuYCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IGFsdFJhdyA9IGRpY3QuZ2V0UmF3KCJBbHRlcm5hdGUiKTsKICAgICAgICAgIGlmIChhbHRSYXcpIHsKICAgICAgICAgICAgY29uc3QgYWx0Q1MgPSB0aGlzLiNzdWJQYXJzZShhbHRSYXcsIG9wdGlvbnMpOwogICAgICAgICAgICBpZiAoYWx0Q1MubnVtQ29tcHMgPT09IG51bUNvbXBzKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGFsdENTOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHdhcm4oIklDQ0Jhc2VkIGNvbG9yIHNwYWNlOiBJZ25vcmluZyBpbmNvcnJlY3QgL0FsdGVybmF0ZSBlbnRyeS4iKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChudW1Db21wcyA9PT0gMSkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5ncmF5OwogICAgICAgICAgfSBlbHNlIGlmIChudW1Db21wcyA9PT0gMykgewogICAgICAgICAgICByZXR1cm4gdGhpcy5yZ2I7CiAgICAgICAgICB9IGVsc2UgaWYgKG51bUNvbXBzID09PSA0KSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmNteWs7CiAgICAgICAgICB9CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJQYXR0ZXJuIjoKICAgICAgICAgIGJhc2VDUyA9IGNzWzFdIHx8IG51bGw7CiAgICAgICAgICBpZiAoYmFzZUNTKSB7CiAgICAgICAgICAgIGJhc2VDUyA9IHRoaXMuI3N1YlBhcnNlKGJhc2VDUywgb3B0aW9ucyk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gbmV3IFBhdHRlcm5DUyhiYXNlQ1MpOwogICAgICAgIGNhc2UgIkkiOgogICAgICAgIGNhc2UgIkluZGV4ZWQiOgogICAgICAgICAgYmFzZUNTID0gdGhpcy4jc3ViUGFyc2UoY3NbMV0sIG9wdGlvbnMpOwogICAgICAgICAgY29uc3QgaGlWYWwgPSBNYXRoQ2xhbXAoeHJlZi5mZXRjaElmUmVmKGNzWzJdKSwgMCwgMjU1KTsKICAgICAgICAgIGNvbnN0IGxvb2t1cCA9IHhyZWYuZmV0Y2hJZlJlZihjc1szXSk7CiAgICAgICAgICByZXR1cm4gbmV3IEluZGV4ZWRDUyhiYXNlQ1MsIGhpVmFsLCBsb29rdXApOwogICAgICAgIGNhc2UgIlNlcGFyYXRpb24iOgogICAgICAgIGNhc2UgIkRldmljZU4iOgogICAgICAgICAgY29uc3QgbmFtZSA9IHhyZWYuZmV0Y2hJZlJlZihjc1sxXSk7CiAgICAgICAgICBudW1Db21wcyA9IEFycmF5LmlzQXJyYXkobmFtZSkgPyBuYW1lLmxlbmd0aCA6IDE7CiAgICAgICAgICBiYXNlQ1MgPSB0aGlzLiNzdWJQYXJzZShjc1syXSwgb3B0aW9ucyk7CiAgICAgICAgICBjb25zdCB0aW50Rm4gPSBwZGZGdW5jdGlvbkZhY3RvcnkuY3JlYXRlKGNzWzNdKTsKICAgICAgICAgIHJldHVybiBuZXcgQWx0ZXJuYXRlQ1MobnVtQ29tcHMsIGJhc2VDUywgdGludEZuKTsKICAgICAgICBjYXNlICJMYWIiOgogICAgICAgICAgcGFyYW1zID0geHJlZi5mZXRjaElmUmVmKGNzWzFdKTsKICAgICAgICAgIHdoaXRlUG9pbnQgPSBwYXJhbXMuZ2V0QXJyYXkoIldoaXRlUG9pbnQiKTsKICAgICAgICAgIGJsYWNrUG9pbnQgPSBwYXJhbXMuZ2V0QXJyYXkoIkJsYWNrUG9pbnQiKTsKICAgICAgICAgIGNvbnN0IHJhbmdlID0gcGFyYW1zLmdldEFycmF5KCJSYW5nZSIpOwogICAgICAgICAgcmV0dXJuIG5ldyBMYWJDUyh3aGl0ZVBvaW50LCBibGFja1BvaW50LCByYW5nZSk7CiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHdhcm4oYFVuaW1wbGVtZW50ZWQgQ29sb3JTcGFjZSBvYmplY3Q6ICR7bW9kZX1gKTsKICAgICAgICAgIHJldHVybiB0aGlzLmdyYXk7CiAgICAgIH0KICAgIH0KICAgIHdhcm4oYFVucmVjb2duaXplZCBDb2xvclNwYWNlIG9iamVjdDogJHtjc31gKTsKICAgIHJldHVybiB0aGlzLmdyYXk7CiAgfQogIHN0YXRpYyBnZXQgZ3JheSgpIHsKICAgIHJldHVybiBzaGFkb3codGhpcywgImdyYXkiLCBuZXcgRGV2aWNlR3JheUNTKCkpOwogIH0KICBzdGF0aWMgZ2V0IHJnYigpIHsKICAgIHJldHVybiBzaGFkb3codGhpcywgInJnYiIsIG5ldyBEZXZpY2VSZ2JDUygpKTsKICB9CiAgc3RhdGljIGdldCByZ2JhKCkgewogICAgcmV0dXJuIHNoYWRvdyh0aGlzLCAicmdiYSIsIG5ldyBEZXZpY2VSZ2JhQ1MoKSk7CiAgfQogIHN0YXRpYyBnZXQgY215aygpIHsKICAgIGlmIChDbXlrSUNDQmFzZWRDUy5pc1VzYWJsZSkgewogICAgICB0cnkgewogICAgICAgIHJldHVybiBzaGFkb3codGhpcywgImNteWsiLCBuZXcgQ215a0lDQ0Jhc2VkQ1MoKSk7CiAgICAgIH0gY2F0Y2ggewogICAgICAgIHdhcm4oIkNNWUsgZmFsbGJhY2s6IERldmljZUNNWUsiKTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIHNoYWRvdyh0aGlzLCAiY215ayIsIG5ldyBEZXZpY2VDbXlrQ1MoKSk7CiAgfQp9Cgo7Ly8gLi9zcmMvY29yZS9qcGcuanMKCgoKCgoKCgoKCgoKCgpjbGFzcyBKcGVnRXJyb3IgZXh0ZW5kcyBCYXNlRXhjZXB0aW9uIHsKICBjb25zdHJ1Y3Rvcihtc2cpIHsKICAgIHN1cGVyKG1zZywgIkpwZWdFcnJvciIpOwogIH0KfQpjbGFzcyBETkxNYXJrZXJFcnJvciBleHRlbmRzIEJhc2VFeGNlcHRpb24gewogIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIHNjYW5MaW5lcykgewogICAgc3VwZXIobWVzc2FnZSwgIkROTE1hcmtlckVycm9yIik7CiAgICB0aGlzLnNjYW5MaW5lcyA9IHNjYW5MaW5lczsKICB9Cn0KY2xhc3MgRU9JTWFya2VyRXJyb3IgZXh0ZW5kcyBCYXNlRXhjZXB0aW9uIHsKICBjb25zdHJ1Y3Rvcihtc2cpIHsKICAgIHN1cGVyKG1zZywgIkVPSU1hcmtlckVycm9yIik7CiAgfQp9CmNvbnN0IGRjdFppZ1phZyA9IG5ldyBVaW50OEFycmF5KFswLCAxLCA4LCAxNiwgOSwgMiwgMywgMTAsIDE3LCAyNCwgMzIsIDI1LCAxOCwgMTEsIDQsIDUsIDEyLCAxOSwgMjYsIDMzLCA0MCwgNDgsIDQxLCAzNCwgMjcsIDIwLCAxMywgNiwgNywgMTQsIDIxLCAyOCwgMzUsIDQyLCA0OSwgNTYsIDU3LCA1MCwgNDMsIDM2LCAyOSwgMjIsIDE1LCAyMywgMzAsIDM3LCA0NCwgNTEsIDU4LCA1OSwgNTIsIDQ1LCAzOCwgMzEsIDM5LCA0NiwgNTMsIDYwLCA2MSwgNTQsIDQ3LCA1NSwgNjIsIDYzXSk7CmNvbnN0IGRjdENvczEgPSA0MDE3Owpjb25zdCBkY3RTaW4xID0gNzk5Owpjb25zdCBkY3RDb3MzID0gMzQwNjsKY29uc3QgZGN0U2luMyA9IDIyNzY7CmNvbnN0IGRjdENvczYgPSAxNTY3Owpjb25zdCBkY3RTaW42ID0gMzc4NDsKY29uc3QgZGN0U3FydDIgPSA1NzkzOwpjb25zdCBkY3RTcXJ0MWQyID0gMjg5NjsKZnVuY3Rpb24gYnVpbGRIdWZmbWFuVGFibGUoY29kZUxlbmd0aHMsIHZhbHVlcykgewogIGxldCBrID0gMCwKICAgIGksCiAgICBqLAogICAgbGVuZ3RoID0gMTY7CiAgd2hpbGUgKGxlbmd0aCA+IDAgJiYgIWNvZGVMZW5ndGhzW2xlbmd0aCAtIDFdKSB7CiAgICBsZW5ndGgtLTsKICB9CiAgY29uc3QgY29kZSA9IFt7CiAgICBjaGlsZHJlbjogW10sCiAgICBpbmRleDogMAogIH1dOwogIGxldCBwID0gY29kZVswXSwKICAgIHE7CiAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICBmb3IgKGogPSAwOyBqIDwgY29kZUxlbmd0aHNbaV07IGorKykgewogICAgICBwID0gY29kZS5wb3AoKTsKICAgICAgcC5jaGlsZHJlbltwLmluZGV4XSA9IHZhbHVlc1trXTsKICAgICAgd2hpbGUgKHAuaW5kZXggPiAwKSB7CiAgICAgICAgcCA9IGNvZGUucG9wKCk7CiAgICAgIH0KICAgICAgcC5pbmRleCsrOwogICAgICBjb2RlLnB1c2gocCk7CiAgICAgIHdoaWxlIChjb2RlLmxlbmd0aCA8PSBpKSB7CiAgICAgICAgY29kZS5wdXNoKHEgPSB7CiAgICAgICAgICBjaGlsZHJlbjogW10sCiAgICAgICAgICBpbmRleDogMAogICAgICAgIH0pOwogICAgICAgIHAuY2hpbGRyZW5bcC5pbmRleF0gPSBxLmNoaWxkcmVuOwogICAgICAgIHAgPSBxOwogICAgICB9CiAgICAgIGsrKzsKICAgIH0KICAgIGlmIChpICsgMSA8IGxlbmd0aCkgewogICAgICBjb2RlLnB1c2gocSA9IHsKICAgICAgICBjaGlsZHJlbjogW10sCiAgICAgICAgaW5kZXg6IDAKICAgICAgfSk7CiAgICAgIHAuY2hpbGRyZW5bcC5pbmRleF0gPSBxLmNoaWxkcmVuOwogICAgICBwID0gcTsKICAgIH0KICB9CiAgcmV0dXJuIGNvZGVbMF0uY2hpbGRyZW47Cn0KZnVuY3Rpb24gZ2V0QmxvY2tCdWZmZXJPZmZzZXQoY29tcG9uZW50LCByb3csIGNvbCkgewogIHJldHVybiA2NCAqICgoY29tcG9uZW50LmJsb2Nrc1BlckxpbmUgKyAxKSAqIHJvdyArIGNvbCk7Cn0KZnVuY3Rpb24gZGVjb2RlU2NhbihkYXRhLCBvZmZzZXQsIGZyYW1lLCBjb21wb25lbnRzLCByZXNldEludGVydmFsLCBzcGVjdHJhbFN0YXJ0LCBzcGVjdHJhbEVuZCwgc3VjY2Vzc2l2ZVByZXYsIHN1Y2Nlc3NpdmUsIHBhcnNlRE5MTWFya2VyID0gZmFsc2UpIHsKICBjb25zdCBtY3VzUGVyTGluZSA9IGZyYW1lLm1jdXNQZXJMaW5lOwogIGNvbnN0IHByb2dyZXNzaXZlID0gZnJhbWUucHJvZ3Jlc3NpdmU7CiAgY29uc3Qgc3RhcnRPZmZzZXQgPSBvZmZzZXQ7CiAgbGV0IGJpdHNEYXRhID0gMCwKICAgIGJpdHNDb3VudCA9IDA7CiAgZnVuY3Rpb24gcmVhZEJpdCgpIHsKICAgIGlmIChiaXRzQ291bnQgPiAwKSB7CiAgICAgIGJpdHNDb3VudC0tOwogICAgICByZXR1cm4gYml0c0RhdGEgPj4gYml0c0NvdW50ICYgMTsKICAgIH0KICAgIGJpdHNEYXRhID0gZGF0YVtvZmZzZXQrK107CiAgICBpZiAoYml0c0RhdGEgPT09IDB4ZmYpIHsKICAgICAgY29uc3QgbmV4dEJ5dGUgPSBkYXRhW29mZnNldCsrXTsKICAgICAgaWYgKG5leHRCeXRlKSB7CiAgICAgICAgaWYgKG5leHRCeXRlID09PSAweGRjICYmIHBhcnNlRE5MTWFya2VyKSB7CiAgICAgICAgICBvZmZzZXQgKz0gMjsKICAgICAgICAgIGNvbnN0IHNjYW5MaW5lcyA9IHJlYWRVaW50MTYoZGF0YSwgb2Zmc2V0KTsKICAgICAgICAgIG9mZnNldCArPSAyOwogICAgICAgICAgaWYgKHNjYW5MaW5lcyA+IDAgJiYgc2NhbkxpbmVzICE9PSBmcmFtZS5zY2FuTGluZXMpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEROTE1hcmtlckVycm9yKCJGb3VuZCBETkwgbWFya2VyICgweEZGREMpIHdoaWxlIHBhcnNpbmcgc2NhbiBkYXRhIiwgc2NhbkxpbmVzKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKG5leHRCeXRlID09PSAweGQ5KSB7CiAgICAgICAgICBpZiAocGFyc2VETkxNYXJrZXIpIHsKICAgICAgICAgICAgY29uc3QgbWF5YmVTY2FuTGluZXMgPSBibG9ja1JvdyAqIChmcmFtZS5wcmVjaXNpb24gPT09IDggPyA4IDogMCk7CiAgICAgICAgICAgIGlmIChtYXliZVNjYW5MaW5lcyA+IDAgJiYgTWF0aC5yb3VuZChmcmFtZS5zY2FuTGluZXMgLyBtYXliZVNjYW5MaW5lcykgPj0gNSkgewogICAgICAgICAgICAgIHRocm93IG5ldyBETkxNYXJrZXJFcnJvcigiRm91bmQgRU9JIG1hcmtlciAoMHhGRkQ5KSB3aGlsZSBwYXJzaW5nIHNjYW4gZGF0YSwgIiArICJwb3NzaWJseSBjYXVzZWQgYnkgaW5jb3JyZWN0IGBzY2FuTGluZXNgIHBhcmFtZXRlciIsIG1heWJlU2NhbkxpbmVzKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgdGhyb3cgbmV3IEVPSU1hcmtlckVycm9yKCJGb3VuZCBFT0kgbWFya2VyICgweEZGRDkpIHdoaWxlIHBhcnNpbmcgc2NhbiBkYXRhIik7CiAgICAgICAgfQogICAgICAgIHRocm93IG5ldyBKcGVnRXJyb3IoYHVuZXhwZWN0ZWQgbWFya2VyICR7KGJpdHNEYXRhIDw8IDggfCBuZXh0Qnl0ZSkudG9TdHJpbmcoMTYpfWApOwogICAgICB9CiAgICB9CiAgICBiaXRzQ291bnQgPSA3OwogICAgcmV0dXJuIGJpdHNEYXRhID4+PiA3OwogIH0KICBmdW5jdGlvbiBkZWNvZGVIdWZmbWFuKHRyZWUpIHsKICAgIGxldCBub2RlID0gdHJlZTsKICAgIHdoaWxlICh0cnVlKSB7CiAgICAgIG5vZGUgPSBub2RlW3JlYWRCaXQoKV07CiAgICAgIHN3aXRjaCAodHlwZW9mIG5vZGUpIHsKICAgICAgICBjYXNlICJudW1iZXIiOgogICAgICAgICAgcmV0dXJuIG5vZGU7CiAgICAgICAgY2FzZSAib2JqZWN0IjoKICAgICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIHRocm93IG5ldyBKcGVnRXJyb3IoImludmFsaWQgaHVmZm1hbiBzZXF1ZW5jZSIpOwogICAgfQogIH0KICBmdW5jdGlvbiByZWNlaXZlKGxlbmd0aCkgewogICAgbGV0IG4gPSAwOwogICAgd2hpbGUgKGxlbmd0aCA+IDApIHsKICAgICAgbiA9IG4gPDwgMSB8IHJlYWRCaXQoKTsKICAgICAgbGVuZ3RoLS07CiAgICB9CiAgICByZXR1cm4gbjsKICB9CiAgZnVuY3Rpb24gcmVjZWl2ZUFuZEV4dGVuZChsZW5ndGgpIHsKICAgIGlmIChsZW5ndGggPT09IDEpIHsKICAgICAgcmV0dXJuIHJlYWRCaXQoKSA9PT0gMSA/IDEgOiAtMTsKICAgIH0KICAgIGNvbnN0IG4gPSByZWNlaXZlKGxlbmd0aCk7CiAgICBpZiAobiA+PSAxIDw8IGxlbmd0aCAtIDEpIHsKICAgICAgcmV0dXJuIG47CiAgICB9CiAgICByZXR1cm4gbiArICgtMSA8PCBsZW5ndGgpICsgMTsKICB9CiAgZnVuY3Rpb24gZGVjb2RlQmFzZWxpbmUoY29tcG9uZW50LCBibG9ja09mZnNldCkgewogICAgY29uc3QgdCA9IGRlY29kZUh1ZmZtYW4oY29tcG9uZW50Lmh1ZmZtYW5UYWJsZURDKTsKICAgIGNvbnN0IGRpZmYgPSB0ID09PSAwID8gMCA6IHJlY2VpdmVBbmRFeHRlbmQodCk7CiAgICBjb21wb25lbnQuYmxvY2tEYXRhW2Jsb2NrT2Zmc2V0XSA9IGNvbXBvbmVudC5wcmVkICs9IGRpZmY7CiAgICBsZXQgayA9IDE7CiAgICB3aGlsZSAoayA8IDY0KSB7CiAgICAgIGNvbnN0IHJzID0gZGVjb2RlSHVmZm1hbihjb21wb25lbnQuaHVmZm1hblRhYmxlQUMpOwogICAgICBjb25zdCBzID0gcnMgJiAxNSwKICAgICAgICByID0gcnMgPj4gNDsKICAgICAgaWYgKHMgPT09IDApIHsKICAgICAgICBpZiAociA8IDE1KSB7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgICAgayArPSAxNjsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBrICs9IHI7CiAgICAgIGNvbnN0IHogPSBkY3RaaWdaYWdba107CiAgICAgIGNvbXBvbmVudC5ibG9ja0RhdGFbYmxvY2tPZmZzZXQgKyB6XSA9IHJlY2VpdmVBbmRFeHRlbmQocyk7CiAgICAgIGsrKzsKICAgIH0KICB9CiAgZnVuY3Rpb24gZGVjb2RlRENGaXJzdChjb21wb25lbnQsIGJsb2NrT2Zmc2V0KSB7CiAgICBjb25zdCB0ID0gZGVjb2RlSHVmZm1hbihjb21wb25lbnQuaHVmZm1hblRhYmxlREMpOwogICAgY29uc3QgZGlmZiA9IHQgPT09IDAgPyAwIDogcmVjZWl2ZUFuZEV4dGVuZCh0KSA8PCBzdWNjZXNzaXZlOwogICAgY29tcG9uZW50LmJsb2NrRGF0YVtibG9ja09mZnNldF0gPSBjb21wb25lbnQucHJlZCArPSBkaWZmOwogIH0KICBmdW5jdGlvbiBkZWNvZGVEQ1N1Y2Nlc3NpdmUoY29tcG9uZW50LCBibG9ja09mZnNldCkgewogICAgY29tcG9uZW50LmJsb2NrRGF0YVtibG9ja09mZnNldF0gfD0gcmVhZEJpdCgpIDw8IHN1Y2Nlc3NpdmU7CiAgfQogIGxldCBlb2JydW4gPSAwOwogIGZ1bmN0aW9uIGRlY29kZUFDRmlyc3QoY29tcG9uZW50LCBibG9ja09mZnNldCkgewogICAgaWYgKGVvYnJ1biA+IDApIHsKICAgICAgZW9icnVuLS07CiAgICAgIHJldHVybjsKICAgIH0KICAgIGxldCBrID0gc3BlY3RyYWxTdGFydDsKICAgIGNvbnN0IGUgPSBzcGVjdHJhbEVuZDsKICAgIHdoaWxlIChrIDw9IGUpIHsKICAgICAgY29uc3QgcnMgPSBkZWNvZGVIdWZmbWFuKGNvbXBvbmVudC5odWZmbWFuVGFibGVBQyk7CiAgICAgIGNvbnN0IHMgPSBycyAmIDE1LAogICAgICAgIHIgPSBycyA+PiA0OwogICAgICBpZiAocyA9PT0gMCkgewogICAgICAgIGlmIChyIDwgMTUpIHsKICAgICAgICAgIGVvYnJ1biA9IHJlY2VpdmUocikgKyAoMSA8PCByKSAtIDE7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgICAgayArPSAxNjsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBrICs9IHI7CiAgICAgIGNvbnN0IHogPSBkY3RaaWdaYWdba107CiAgICAgIGNvbXBvbmVudC5ibG9ja0RhdGFbYmxvY2tPZmZzZXQgKyB6XSA9IHJlY2VpdmVBbmRFeHRlbmQocykgKiAoMSA8PCBzdWNjZXNzaXZlKTsKICAgICAgaysrOwogICAgfQogIH0KICBsZXQgc3VjY2Vzc2l2ZUFDU3RhdGUgPSAwLAogICAgc3VjY2Vzc2l2ZUFDTmV4dFZhbHVlOwogIGZ1bmN0aW9uIGRlY29kZUFDU3VjY2Vzc2l2ZShjb21wb25lbnQsIGJsb2NrT2Zmc2V0KSB7CiAgICBsZXQgayA9IHNwZWN0cmFsU3RhcnQ7CiAgICBjb25zdCBlID0gc3BlY3RyYWxFbmQ7CiAgICBsZXQgciA9IDA7CiAgICBsZXQgczsKICAgIGxldCByczsKICAgIHdoaWxlIChrIDw9IGUpIHsKICAgICAgY29uc3Qgb2Zmc2V0WiA9IGJsb2NrT2Zmc2V0ICsgZGN0WmlnWmFnW2tdOwogICAgICBjb25zdCBzaWduID0gY29tcG9uZW50LmJsb2NrRGF0YVtvZmZzZXRaXSA8IDAgPyAtMSA6IDE7CiAgICAgIHN3aXRjaCAoc3VjY2Vzc2l2ZUFDU3RhdGUpIHsKICAgICAgICBjYXNlIDA6CiAgICAgICAgICBycyA9IGRlY29kZUh1ZmZtYW4oY29tcG9uZW50Lmh1ZmZtYW5UYWJsZUFDKTsKICAgICAgICAgIHMgPSBycyAmIDE1OwogICAgICAgICAgciA9IHJzID4+IDQ7CiAgICAgICAgICBpZiAocyA9PT0gMCkgewogICAgICAgICAgICBpZiAociA8IDE1KSB7CiAgICAgICAgICAgICAgZW9icnVuID0gcmVjZWl2ZShyKSArICgxIDw8IHIpOwogICAgICAgICAgICAgIHN1Y2Nlc3NpdmVBQ1N0YXRlID0gNDsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICByID0gMTY7CiAgICAgICAgICAgICAgc3VjY2Vzc2l2ZUFDU3RhdGUgPSAxOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZiAocyAhPT0gMSkgewogICAgICAgICAgICAgIHRocm93IG5ldyBKcGVnRXJyb3IoImludmFsaWQgQUNuIGVuY29kaW5nIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgc3VjY2Vzc2l2ZUFDTmV4dFZhbHVlID0gcmVjZWl2ZUFuZEV4dGVuZChzKTsKICAgICAgICAgICAgc3VjY2Vzc2l2ZUFDU3RhdGUgPSByID8gMiA6IDM7CiAgICAgICAgICB9CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICBjYXNlIDE6CiAgICAgICAgY2FzZSAyOgogICAgICAgICAgaWYgKGNvbXBvbmVudC5ibG9ja0RhdGFbb2Zmc2V0Wl0pIHsKICAgICAgICAgICAgY29tcG9uZW50LmJsb2NrRGF0YVtvZmZzZXRaXSArPSBzaWduICogKHJlYWRCaXQoKSA8PCBzdWNjZXNzaXZlKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHItLTsKICAgICAgICAgICAgaWYgKHIgPT09IDApIHsKICAgICAgICAgICAgICBzdWNjZXNzaXZlQUNTdGF0ZSA9IHN1Y2Nlc3NpdmVBQ1N0YXRlID09PSAyID8gMyA6IDA7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgMzoKICAgICAgICAgIGlmIChjb21wb25lbnQuYmxvY2tEYXRhW29mZnNldFpdKSB7CiAgICAgICAgICAgIGNvbXBvbmVudC5ibG9ja0RhdGFbb2Zmc2V0Wl0gKz0gc2lnbiAqIChyZWFkQml0KCkgPDwgc3VjY2Vzc2l2ZSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjb21wb25lbnQuYmxvY2tEYXRhW29mZnNldFpdID0gc3VjY2Vzc2l2ZUFDTmV4dFZhbHVlIDw8IHN1Y2Nlc3NpdmU7CiAgICAgICAgICAgIHN1Y2Nlc3NpdmVBQ1N0YXRlID0gMDsKICAgICAgICAgIH0KICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgNDoKICAgICAgICAgIGlmIChjb21wb25lbnQuYmxvY2tEYXRhW29mZnNldFpdKSB7CiAgICAgICAgICAgIGNvbXBvbmVudC5ibG9ja0RhdGFbb2Zmc2V0Wl0gKz0gc2lnbiAqIChyZWFkQml0KCkgPDwgc3VjY2Vzc2l2ZSk7CiAgICAgICAgICB9CiAgICAgICAgICBicmVhazsKICAgICAgfQogICAgICBrKys7CiAgICB9CiAgICBpZiAoc3VjY2Vzc2l2ZUFDU3RhdGUgPT09IDQpIHsKICAgICAgZW9icnVuLS07CiAgICAgIGlmIChlb2JydW4gPT09IDApIHsKICAgICAgICBzdWNjZXNzaXZlQUNTdGF0ZSA9IDA7CiAgICAgIH0KICAgIH0KICB9CiAgbGV0IGJsb2NrUm93ID0gMDsKICBmdW5jdGlvbiBkZWNvZGVNY3UoY29tcG9uZW50LCBkZWNvZGUsIG1jdSwgcm93LCBjb2wpIHsKICAgIGNvbnN0IG1jdVJvdyA9IG1jdSAvIG1jdXNQZXJMaW5lIHwgMDsKICAgIGNvbnN0IG1jdUNvbCA9IG1jdSAlIG1jdXNQZXJMaW5lOwogICAgYmxvY2tSb3cgPSBtY3VSb3cgKiBjb21wb25lbnQudiArIHJvdzsKICAgIGNvbnN0IGJsb2NrQ29sID0gbWN1Q29sICogY29tcG9uZW50LmggKyBjb2w7CiAgICBjb25zdCBibG9ja09mZnNldCA9IGdldEJsb2NrQnVmZmVyT2Zmc2V0KGNvbXBvbmVudCwgYmxvY2tSb3csIGJsb2NrQ29sKTsKICAgIGRlY29kZShjb21wb25lbnQsIGJsb2NrT2Zmc2V0KTsKICB9CiAgZnVuY3Rpb24gZGVjb2RlQmxvY2soY29tcG9uZW50LCBkZWNvZGUsIG1jdSkgewogICAgYmxvY2tSb3cgPSBtY3UgLyBjb21wb25lbnQuYmxvY2tzUGVyTGluZSB8IDA7CiAgICBjb25zdCBibG9ja0NvbCA9IG1jdSAlIGNvbXBvbmVudC5ibG9ja3NQZXJMaW5lOwogICAgY29uc3QgYmxvY2tPZmZzZXQgPSBnZXRCbG9ja0J1ZmZlck9mZnNldChjb21wb25lbnQsIGJsb2NrUm93LCBibG9ja0NvbCk7CiAgICBkZWNvZGUoY29tcG9uZW50LCBibG9ja09mZnNldCk7CiAgfQogIGNvbnN0IGNvbXBvbmVudHNMZW5ndGggPSBjb21wb25lbnRzLmxlbmd0aDsKICBsZXQgY29tcG9uZW50LCBpLCBqLCBrLCBuOwogIGxldCBkZWNvZGVGbjsKICBpZiAocHJvZ3Jlc3NpdmUpIHsKICAgIGlmIChzcGVjdHJhbFN0YXJ0ID09PSAwKSB7CiAgICAgIGRlY29kZUZuID0gc3VjY2Vzc2l2ZVByZXYgPT09IDAgPyBkZWNvZGVEQ0ZpcnN0IDogZGVjb2RlRENTdWNjZXNzaXZlOwogICAgfSBlbHNlIHsKICAgICAgZGVjb2RlRm4gPSBzdWNjZXNzaXZlUHJldiA9PT0gMCA/IGRlY29kZUFDRmlyc3QgOiBkZWNvZGVBQ1N1Y2Nlc3NpdmU7CiAgICB9CiAgfSBlbHNlIHsKICAgIGRlY29kZUZuID0gZGVjb2RlQmFzZWxpbmU7CiAgfQogIGxldCBtY3UgPSAwLAogICAgZmlsZU1hcmtlcjsKICBjb25zdCBtY3VFeHBlY3RlZCA9IGNvbXBvbmVudHNMZW5ndGggPT09IDEgPyBjb21wb25lbnRzWzBdLmJsb2Nrc1BlckxpbmUgKiBjb21wb25lbnRzWzBdLmJsb2Nrc1BlckNvbHVtbiA6IG1jdXNQZXJMaW5lICogZnJhbWUubWN1c1BlckNvbHVtbjsKICBsZXQgaCwgdjsKICB3aGlsZSAobWN1IDw9IG1jdUV4cGVjdGVkKSB7CiAgICBjb25zdCBtY3VUb1JlYWQgPSByZXNldEludGVydmFsID8gTWF0aC5taW4obWN1RXhwZWN0ZWQgLSBtY3UsIHJlc2V0SW50ZXJ2YWwpIDogbWN1RXhwZWN0ZWQ7CiAgICBpZiAobWN1VG9SZWFkID4gMCkgewogICAgICBmb3IgKGkgPSAwOyBpIDwgY29tcG9uZW50c0xlbmd0aDsgaSsrKSB7CiAgICAgICAgY29tcG9uZW50c1tpXS5wcmVkID0gMDsKICAgICAgfQogICAgICBlb2JydW4gPSAwOwogICAgICBpZiAoY29tcG9uZW50c0xlbmd0aCA9PT0gMSkgewogICAgICAgIGNvbXBvbmVudCA9IGNvbXBvbmVudHNbMF07CiAgICAgICAgZm9yIChuID0gMDsgbiA8IG1jdVRvUmVhZDsgbisrKSB7CiAgICAgICAgICBkZWNvZGVCbG9jayhjb21wb25lbnQsIGRlY29kZUZuLCBtY3UpOwogICAgICAgICAgbWN1Kys7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIGZvciAobiA9IDA7IG4gPCBtY3VUb1JlYWQ7IG4rKykgewogICAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvbXBvbmVudHNMZW5ndGg7IGkrKykgewogICAgICAgICAgICBjb21wb25lbnQgPSBjb21wb25lbnRzW2ldOwogICAgICAgICAgICBoID0gY29tcG9uZW50Lmg7CiAgICAgICAgICAgIHYgPSBjb21wb25lbnQudjsKICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IHY7IGorKykgewogICAgICAgICAgICAgIGZvciAoayA9IDA7IGsgPCBoOyBrKyspIHsKICAgICAgICAgICAgICAgIGRlY29kZU1jdShjb21wb25lbnQsIGRlY29kZUZuLCBtY3UsIGosIGspOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgbWN1Kys7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBiaXRzQ291bnQgPSAwOwogICAgZmlsZU1hcmtlciA9IGZpbmROZXh0RmlsZU1hcmtlcihkYXRhLCBvZmZzZXQpOwogICAgaWYgKCFmaWxlTWFya2VyKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgaWYgKGZpbGVNYXJrZXIuaW52YWxpZCkgewogICAgICBjb25zdCBwYXJ0aWFsTXNnID0gbWN1VG9SZWFkID4gMCA/ICJ1bmV4cGVjdGVkIiA6ICJleGNlc3NpdmUiOwogICAgICB3YXJuKGBkZWNvZGVTY2FuIC0gJHtwYXJ0aWFsTXNnfSBNQ1UgZGF0YSwgY3VycmVudCBtYXJrZXIgaXM6ICR7ZmlsZU1hcmtlci5pbnZhbGlkfWApOwogICAgICBvZmZzZXQgPSBmaWxlTWFya2VyLm9mZnNldDsKICAgIH0KICAgIGlmIChmaWxlTWFya2VyLm1hcmtlciA+PSAweGZmZDAgJiYgZmlsZU1hcmtlci5tYXJrZXIgPD0gMHhmZmQ3KSB7CiAgICAgIG9mZnNldCArPSAyOwogICAgfSBlbHNlIHsKICAgICAgYnJlYWs7CiAgICB9CiAgfQogIHJldHVybiBvZmZzZXQgLSBzdGFydE9mZnNldDsKfQpmdW5jdGlvbiBxdWFudGl6ZUFuZEludmVyc2UoY29tcG9uZW50LCBibG9ja0J1ZmZlck9mZnNldCwgcCkgewogIGNvbnN0IHF0ID0gY29tcG9uZW50LnF1YW50aXphdGlvblRhYmxlLAogICAgYmxvY2tEYXRhID0gY29tcG9uZW50LmJsb2NrRGF0YTsKICBsZXQgdjAsIHYxLCB2MiwgdjMsIHY0LCB2NSwgdjYsIHY3OwogIGxldCBwMCwgcDEsIHAyLCBwMywgcDQsIHA1LCBwNiwgcDc7CiAgbGV0IHQ7CiAgaWYgKCFxdCkgewogICAgdGhyb3cgbmV3IEpwZWdFcnJvcigibWlzc2luZyByZXF1aXJlZCBRdWFudGl6YXRpb24gVGFibGUuIik7CiAgfQogIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8IDY0OyByb3cgKz0gOCkgewogICAgcDAgPSBibG9ja0RhdGFbYmxvY2tCdWZmZXJPZmZzZXQgKyByb3ddOwogICAgcDEgPSBibG9ja0RhdGFbYmxvY2tCdWZmZXJPZmZzZXQgKyByb3cgKyAxXTsKICAgIHAyID0gYmxvY2tEYXRhW2Jsb2NrQnVmZmVyT2Zmc2V0ICsgcm93ICsgMl07CiAgICBwMyA9IGJsb2NrRGF0YVtibG9ja0J1ZmZlck9mZnNldCArIHJvdyArIDNdOwogICAgcDQgPSBibG9ja0RhdGFbYmxvY2tCdWZmZXJPZmZzZXQgKyByb3cgKyA0XTsKICAgIHA1ID0gYmxvY2tEYXRhW2Jsb2NrQnVmZmVyT2Zmc2V0ICsgcm93ICsgNV07CiAgICBwNiA9IGJsb2NrRGF0YVtibG9ja0J1ZmZlck9mZnNldCArIHJvdyArIDZdOwogICAgcDcgPSBibG9ja0RhdGFbYmxvY2tCdWZmZXJPZmZzZXQgKyByb3cgKyA3XTsKICAgIHAwICo9IHF0W3Jvd107CiAgICBpZiAoKHAxIHwgcDIgfCBwMyB8IHA0IHwgcDUgfCBwNiB8IHA3KSA9PT0gMCkgewogICAgICB0ID0gZGN0U3FydDIgKiBwMCArIDUxMiA+PiAxMDsKICAgICAgcFtyb3ddID0gdDsKICAgICAgcFtyb3cgKyAxXSA9IHQ7CiAgICAgIHBbcm93ICsgMl0gPSB0OwogICAgICBwW3JvdyArIDNdID0gdDsKICAgICAgcFtyb3cgKyA0XSA9IHQ7CiAgICAgIHBbcm93ICsgNV0gPSB0OwogICAgICBwW3JvdyArIDZdID0gdDsKICAgICAgcFtyb3cgKyA3XSA9IHQ7CiAgICAgIGNvbnRpbnVlOwogICAgfQogICAgcDEgKj0gcXRbcm93ICsgMV07CiAgICBwMiAqPSBxdFtyb3cgKyAyXTsKICAgIHAzICo9IHF0W3JvdyArIDNdOwogICAgcDQgKj0gcXRbcm93ICsgNF07CiAgICBwNSAqPSBxdFtyb3cgKyA1XTsKICAgIHA2ICo9IHF0W3JvdyArIDZdOwogICAgcDcgKj0gcXRbcm93ICsgN107CiAgICB2MCA9IGRjdFNxcnQyICogcDAgKyAxMjggPj4gODsKICAgIHYxID0gZGN0U3FydDIgKiBwNCArIDEyOCA+PiA4OwogICAgdjIgPSBwMjsKICAgIHYzID0gcDY7CiAgICB2NCA9IGRjdFNxcnQxZDIgKiAocDEgLSBwNykgKyAxMjggPj4gODsKICAgIHY3ID0gZGN0U3FydDFkMiAqIChwMSArIHA3KSArIDEyOCA+PiA4OwogICAgdjUgPSBwMyA8PCA0OwogICAgdjYgPSBwNSA8PCA0OwogICAgdjAgPSB2MCArIHYxICsgMSA+PiAxOwogICAgdjEgPSB2MCAtIHYxOwogICAgdCA9IHYyICogZGN0U2luNiArIHYzICogZGN0Q29zNiArIDEyOCA+PiA4OwogICAgdjIgPSB2MiAqIGRjdENvczYgLSB2MyAqIGRjdFNpbjYgKyAxMjggPj4gODsKICAgIHYzID0gdDsKICAgIHY0ID0gdjQgKyB2NiArIDEgPj4gMTsKICAgIHY2ID0gdjQgLSB2NjsKICAgIHY3ID0gdjcgKyB2NSArIDEgPj4gMTsKICAgIHY1ID0gdjcgLSB2NTsKICAgIHYwID0gdjAgKyB2MyArIDEgPj4gMTsKICAgIHYzID0gdjAgLSB2MzsKICAgIHYxID0gdjEgKyB2MiArIDEgPj4gMTsKICAgIHYyID0gdjEgLSB2MjsKICAgIHQgPSB2NCAqIGRjdFNpbjMgKyB2NyAqIGRjdENvczMgKyAyMDQ4ID4+IDEyOwogICAgdjQgPSB2NCAqIGRjdENvczMgLSB2NyAqIGRjdFNpbjMgKyAyMDQ4ID4+IDEyOwogICAgdjcgPSB0OwogICAgdCA9IHY1ICogZGN0U2luMSArIHY2ICogZGN0Q29zMSArIDIwNDggPj4gMTI7CiAgICB2NSA9IHY1ICogZGN0Q29zMSAtIHY2ICogZGN0U2luMSArIDIwNDggPj4gMTI7CiAgICB2NiA9IHQ7CiAgICBwW3Jvd10gPSB2MCArIHY3OwogICAgcFtyb3cgKyA3XSA9IHYwIC0gdjc7CiAgICBwW3JvdyArIDFdID0gdjEgKyB2NjsKICAgIHBbcm93ICsgNl0gPSB2MSAtIHY2OwogICAgcFtyb3cgKyAyXSA9IHYyICsgdjU7CiAgICBwW3JvdyArIDVdID0gdjIgLSB2NTsKICAgIHBbcm93ICsgM10gPSB2MyArIHY0OwogICAgcFtyb3cgKyA0XSA9IHYzIC0gdjQ7CiAgfQogIGZvciAobGV0IGNvbCA9IDA7IGNvbCA8IDg7ICsrY29sKSB7CiAgICBwMCA9IHBbY29sXTsKICAgIHAxID0gcFtjb2wgKyA4XTsKICAgIHAyID0gcFtjb2wgKyAxNl07CiAgICBwMyA9IHBbY29sICsgMjRdOwogICAgcDQgPSBwW2NvbCArIDMyXTsKICAgIHA1ID0gcFtjb2wgKyA0MF07CiAgICBwNiA9IHBbY29sICsgNDhdOwogICAgcDcgPSBwW2NvbCArIDU2XTsKICAgIGlmICgocDEgfCBwMiB8IHAzIHwgcDQgfCBwNSB8IHA2IHwgcDcpID09PSAwKSB7CiAgICAgIHQgPSBkY3RTcXJ0MiAqIHAwICsgODE5MiA+PiAxNDsKICAgICAgaWYgKHQgPCAtMjA0MCkgewogICAgICAgIHQgPSAwOwogICAgICB9IGVsc2UgaWYgKHQgPj0gMjAyNCkgewogICAgICAgIHQgPSAyNTU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdCA9IHQgKyAyMDU2ID4+IDQ7CiAgICAgIH0KICAgICAgYmxvY2tEYXRhW2Jsb2NrQnVmZmVyT2Zmc2V0ICsgY29sXSA9IHQ7CiAgICAgIGJsb2NrRGF0YVtibG9ja0J1ZmZlck9mZnNldCArIGNvbCArIDhdID0gdDsKICAgICAgYmxvY2tEYXRhW2Jsb2NrQnVmZmVyT2Zmc2V0ICsgY29sICsgMTZdID0gdDsKICAgICAgYmxvY2tEYXRhW2Jsb2NrQnVmZmVyT2Zmc2V0ICsgY29sICsgMjRdID0gdDsKICAgICAgYmxvY2tEYXRhW2Jsb2NrQnVmZmVyT2Zmc2V0ICsgY29sICsgMzJdID0gdDsKICAgICAgYmxvY2tEYXRhW2Jsb2NrQnVmZmVyT2Zmc2V0ICsgY29sICsgNDBdID0gdDsKICAgICAgYmxvY2tEYXRhW2Jsb2NrQnVmZmVyT2Zmc2V0ICsgY29sICsgNDhdID0gdDsKICAgICAgYmxvY2tEYXRhW2Jsb2NrQnVmZmVyT2Zmc2V0ICsgY29sICsgNTZdID0gdDsKICAgICAgY29udGludWU7CiAgICB9CiAgICB2MCA9IGRjdFNxcnQyICogcDAgKyAyMDQ4ID4+IDEyOwogICAgdjEgPSBkY3RTcXJ0MiAqIHA0ICsgMjA0OCA+PiAxMjsKICAgIHYyID0gcDI7CiAgICB2MyA9IHA2OwogICAgdjQgPSBkY3RTcXJ0MWQyICogKHAxIC0gcDcpICsgMjA0OCA+PiAxMjsKICAgIHY3ID0gZGN0U3FydDFkMiAqIChwMSArIHA3KSArIDIwNDggPj4gMTI7CiAgICB2NSA9IHAzOwogICAgdjYgPSBwNTsKICAgIHYwID0gKHYwICsgdjEgKyAxID4+IDEpICsgNDExMjsKICAgIHYxID0gdjAgLSB2MTsKICAgIHQgPSB2MiAqIGRjdFNpbjYgKyB2MyAqIGRjdENvczYgKyAyMDQ4ID4+IDEyOwogICAgdjIgPSB2MiAqIGRjdENvczYgLSB2MyAqIGRjdFNpbjYgKyAyMDQ4ID4+IDEyOwogICAgdjMgPSB0OwogICAgdjQgPSB2NCArIHY2ICsgMSA+PiAxOwogICAgdjYgPSB2NCAtIHY2OwogICAgdjcgPSB2NyArIHY1ICsgMSA+PiAxOwogICAgdjUgPSB2NyAtIHY1OwogICAgdjAgPSB2MCArIHYzICsgMSA+PiAxOwogICAgdjMgPSB2MCAtIHYzOwogICAgdjEgPSB2MSArIHYyICsgMSA+PiAxOwogICAgdjIgPSB2MSAtIHYyOwogICAgdCA9IHY0ICogZGN0U2luMyArIHY3ICogZGN0Q29zMyArIDIwNDggPj4gMTI7CiAgICB2NCA9IHY0ICogZGN0Q29zMyAtIHY3ICogZGN0U2luMyArIDIwNDggPj4gMTI7CiAgICB2NyA9IHQ7CiAgICB0ID0gdjUgKiBkY3RTaW4xICsgdjYgKiBkY3RDb3MxICsgMjA0OCA+PiAxMjsKICAgIHY1ID0gdjUgKiBkY3RDb3MxIC0gdjYgKiBkY3RTaW4xICsgMjA0OCA+PiAxMjsKICAgIHY2ID0gdDsKICAgIHAwID0gdjAgKyB2NzsKICAgIHA3ID0gdjAgLSB2NzsKICAgIHAxID0gdjEgKyB2NjsKICAgIHA2ID0gdjEgLSB2NjsKICAgIHAyID0gdjIgKyB2NTsKICAgIHA1ID0gdjIgLSB2NTsKICAgIHAzID0gdjMgKyB2NDsKICAgIHA0ID0gdjMgLSB2NDsKICAgIGlmIChwMCA8IDE2KSB7CiAgICAgIHAwID0gMDsKICAgIH0gZWxzZSBpZiAocDAgPj0gNDA4MCkgewogICAgICBwMCA9IDI1NTsKICAgIH0gZWxzZSB7CiAgICAgIHAwID4+PSA0OwogICAgfQogICAgaWYgKHAxIDwgMTYpIHsKICAgICAgcDEgPSAwOwogICAgfSBlbHNlIGlmIChwMSA+PSA0MDgwKSB7CiAgICAgIHAxID0gMjU1OwogICAgfSBlbHNlIHsKICAgICAgcDEgPj49IDQ7CiAgICB9CiAgICBpZiAocDIgPCAxNikgewogICAgICBwMiA9IDA7CiAgICB9IGVsc2UgaWYgKHAyID49IDQwODApIHsKICAgICAgcDIgPSAyNTU7CiAgICB9IGVsc2UgewogICAgICBwMiA+Pj0gNDsKICAgIH0KICAgIGlmIChwMyA8IDE2KSB7CiAgICAgIHAzID0gMDsKICAgIH0gZWxzZSBpZiAocDMgPj0gNDA4MCkgewogICAgICBwMyA9IDI1NTsKICAgIH0gZWxzZSB7CiAgICAgIHAzID4+PSA0OwogICAgfQogICAgaWYgKHA0IDwgMTYpIHsKICAgICAgcDQgPSAwOwogICAgfSBlbHNlIGlmIChwNCA+PSA0MDgwKSB7CiAgICAgIHA0ID0gMjU1OwogICAgfSBlbHNlIHsKICAgICAgcDQgPj49IDQ7CiAgICB9CiAgICBpZiAocDUgPCAxNikgewogICAgICBwNSA9IDA7CiAgICB9IGVsc2UgaWYgKHA1ID49IDQwODApIHsKICAgICAgcDUgPSAyNTU7CiAgICB9IGVsc2UgewogICAgICBwNSA+Pj0gNDsKICAgIH0KICAgIGlmIChwNiA8IDE2KSB7CiAgICAgIHA2ID0gMDsKICAgIH0gZWxzZSBpZiAocDYgPj0gNDA4MCkgewogICAgICBwNiA9IDI1NTsKICAgIH0gZWxzZSB7CiAgICAgIHA2ID4+PSA0OwogICAgfQogICAgaWYgKHA3IDwgMTYpIHsKICAgICAgcDcgPSAwOwogICAgfSBlbHNlIGlmIChwNyA+PSA0MDgwKSB7CiAgICAgIHA3ID0gMjU1OwogICAgfSBlbHNlIHsKICAgICAgcDcgPj49IDQ7CiAgICB9CiAgICBibG9ja0RhdGFbYmxvY2tCdWZmZXJPZmZzZXQgKyBjb2xdID0gcDA7CiAgICBibG9ja0RhdGFbYmxvY2tCdWZmZXJPZmZzZXQgKyBjb2wgKyA4XSA9IHAxOwogICAgYmxvY2tEYXRhW2Jsb2NrQnVmZmVyT2Zmc2V0ICsgY29sICsgMTZdID0gcDI7CiAgICBibG9ja0RhdGFbYmxvY2tCdWZmZXJPZmZzZXQgKyBjb2wgKyAyNF0gPSBwMzsKICAgIGJsb2NrRGF0YVtibG9ja0J1ZmZlck9mZnNldCArIGNvbCArIDMyXSA9IHA0OwogICAgYmxvY2tEYXRhW2Jsb2NrQnVmZmVyT2Zmc2V0ICsgY29sICsgNDBdID0gcDU7CiAgICBibG9ja0RhdGFbYmxvY2tCdWZmZXJPZmZzZXQgKyBjb2wgKyA0OF0gPSBwNjsKICAgIGJsb2NrRGF0YVtibG9ja0J1ZmZlck9mZnNldCArIGNvbCArIDU2XSA9IHA3OwogIH0KfQpmdW5jdGlvbiBidWlsZENvbXBvbmVudERhdGEoZnJhbWUsIGNvbXBvbmVudCkgewogIGNvbnN0IGJsb2Nrc1BlckxpbmUgPSBjb21wb25lbnQuYmxvY2tzUGVyTGluZTsKICBjb25zdCBibG9ja3NQZXJDb2x1bW4gPSBjb21wb25lbnQuYmxvY2tzUGVyQ29sdW1uOwogIGNvbnN0IGNvbXB1dGF0aW9uQnVmZmVyID0gbmV3IEludDE2QXJyYXkoNjQpOwogIGZvciAobGV0IGJsb2NrUm93ID0gMDsgYmxvY2tSb3cgPCBibG9ja3NQZXJDb2x1bW47IGJsb2NrUm93KyspIHsKICAgIGZvciAobGV0IGJsb2NrQ29sID0gMDsgYmxvY2tDb2wgPCBibG9ja3NQZXJMaW5lOyBibG9ja0NvbCsrKSB7CiAgICAgIGNvbnN0IG9mZnNldCA9IGdldEJsb2NrQnVmZmVyT2Zmc2V0KGNvbXBvbmVudCwgYmxvY2tSb3csIGJsb2NrQ29sKTsKICAgICAgcXVhbnRpemVBbmRJbnZlcnNlKGNvbXBvbmVudCwgb2Zmc2V0LCBjb21wdXRhdGlvbkJ1ZmZlcik7CiAgICB9CiAgfQogIHJldHVybiBjb21wb25lbnQuYmxvY2tEYXRhOwp9CmZ1bmN0aW9uIGZpbmROZXh0RmlsZU1hcmtlcihkYXRhLCBjdXJyZW50UG9zLCBzdGFydFBvcyA9IGN1cnJlbnRQb3MpIHsKICBjb25zdCBtYXhQb3MgPSBkYXRhLmxlbmd0aCAtIDE7CiAgbGV0IG5ld1BvcyA9IHN0YXJ0UG9zIDwgY3VycmVudFBvcyA/IHN0YXJ0UG9zIDogY3VycmVudFBvczsKICBpZiAoY3VycmVudFBvcyA+PSBtYXhQb3MpIHsKICAgIHJldHVybiBudWxsOwogIH0KICBjb25zdCBjdXJyZW50TWFya2VyID0gcmVhZFVpbnQxNihkYXRhLCBjdXJyZW50UG9zKTsKICBpZiAoY3VycmVudE1hcmtlciA+PSAweGZmYzAgJiYgY3VycmVudE1hcmtlciA8PSAweGZmZmUpIHsKICAgIHJldHVybiB7CiAgICAgIGludmFsaWQ6IG51bGwsCiAgICAgIG1hcmtlcjogY3VycmVudE1hcmtlciwKICAgICAgb2Zmc2V0OiBjdXJyZW50UG9zCiAgICB9OwogIH0KICBsZXQgbmV3TWFya2VyID0gcmVhZFVpbnQxNihkYXRhLCBuZXdQb3MpOwogIHdoaWxlICghKG5ld01hcmtlciA+PSAweGZmYzAgJiYgbmV3TWFya2VyIDw9IDB4ZmZmZSkpIHsKICAgIGlmICgrK25ld1BvcyA+PSBtYXhQb3MpIHsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICBuZXdNYXJrZXIgPSByZWFkVWludDE2KGRhdGEsIG5ld1Bvcyk7CiAgfQogIHJldHVybiB7CiAgICBpbnZhbGlkOiBjdXJyZW50TWFya2VyLnRvU3RyaW5nKDE2KSwKICAgIG1hcmtlcjogbmV3TWFya2VyLAogICAgb2Zmc2V0OiBuZXdQb3MKICB9Owp9CmZ1bmN0aW9uIHByZXBhcmVDb21wb25lbnRzKGZyYW1lKSB7CiAgY29uc3QgbWN1c1BlckxpbmUgPSBNYXRoLmNlaWwoZnJhbWUuc2FtcGxlc1BlckxpbmUgLyA4IC8gZnJhbWUubWF4SCk7CiAgY29uc3QgbWN1c1BlckNvbHVtbiA9IE1hdGguY2VpbChmcmFtZS5zY2FuTGluZXMgLyA4IC8gZnJhbWUubWF4Vik7CiAgZm9yIChjb25zdCBjb21wb25lbnQgb2YgZnJhbWUuY29tcG9uZW50cykgewogICAgY29uc3QgYmxvY2tzUGVyTGluZSA9IE1hdGguY2VpbChNYXRoLmNlaWwoZnJhbWUuc2FtcGxlc1BlckxpbmUgLyA4KSAqIGNvbXBvbmVudC5oIC8gZnJhbWUubWF4SCk7CiAgICBjb25zdCBibG9ja3NQZXJDb2x1bW4gPSBNYXRoLmNlaWwoTWF0aC5jZWlsKGZyYW1lLnNjYW5MaW5lcyAvIDgpICogY29tcG9uZW50LnYgLyBmcmFtZS5tYXhWKTsKICAgIGNvbnN0IGJsb2Nrc1BlckxpbmVGb3JNY3UgPSBtY3VzUGVyTGluZSAqIGNvbXBvbmVudC5oOwogICAgY29uc3QgYmxvY2tzUGVyQ29sdW1uRm9yTWN1ID0gbWN1c1BlckNvbHVtbiAqIGNvbXBvbmVudC52OwogICAgY29uc3QgYmxvY2tzQnVmZmVyU2l6ZSA9IDY0ICogYmxvY2tzUGVyQ29sdW1uRm9yTWN1ICogKGJsb2Nrc1BlckxpbmVGb3JNY3UgKyAxKTsKICAgIGNvbXBvbmVudC5ibG9ja0RhdGEgPSBuZXcgSW50MTZBcnJheShibG9ja3NCdWZmZXJTaXplKTsKICAgIGNvbXBvbmVudC5ibG9ja3NQZXJMaW5lID0gYmxvY2tzUGVyTGluZTsKICAgIGNvbXBvbmVudC5ibG9ja3NQZXJDb2x1bW4gPSBibG9ja3NQZXJDb2x1bW47CiAgfQogIGZyYW1lLm1jdXNQZXJMaW5lID0gbWN1c1BlckxpbmU7CiAgZnJhbWUubWN1c1BlckNvbHVtbiA9IG1jdXNQZXJDb2x1bW47Cn0KZnVuY3Rpb24gcmVhZERhdGFCbG9jayhkYXRhLCBvZmZzZXQpIHsKICBjb25zdCBsZW5ndGggPSByZWFkVWludDE2KGRhdGEsIG9mZnNldCk7CiAgb2Zmc2V0ICs9IDI7CiAgbGV0IGVuZE9mZnNldCA9IG9mZnNldCArIGxlbmd0aCAtIDI7CiAgY29uc3QgZmlsZU1hcmtlciA9IGZpbmROZXh0RmlsZU1hcmtlcihkYXRhLCBlbmRPZmZzZXQsIG9mZnNldCk7CiAgaWYgKGZpbGVNYXJrZXI/LmludmFsaWQpIHsKICAgIHdhcm4oInJlYWREYXRhQmxvY2sgLSBpbmNvcnJlY3QgbGVuZ3RoLCBjdXJyZW50IG1hcmtlciBpczogIiArIGZpbGVNYXJrZXIuaW52YWxpZCk7CiAgICBlbmRPZmZzZXQgPSBmaWxlTWFya2VyLm9mZnNldDsKICB9CiAgY29uc3QgYXJyYXkgPSBkYXRhLnN1YmFycmF5KG9mZnNldCwgZW5kT2Zmc2V0KTsKICByZXR1cm4gewogICAgYXBwRGF0YTogYXJyYXksCiAgICBvbGRPZmZzZXQ6IG9mZnNldCwKICAgIG5ld09mZnNldDogb2Zmc2V0ICsgYXJyYXkubGVuZ3RoCiAgfTsKfQpmdW5jdGlvbiBza2lwRGF0YShkYXRhLCBvZmZzZXQpIHsKICBjb25zdCBsZW5ndGggPSByZWFkVWludDE2KGRhdGEsIG9mZnNldCk7CiAgb2Zmc2V0ICs9IDI7CiAgY29uc3QgZW5kT2Zmc2V0ID0gb2Zmc2V0ICsgbGVuZ3RoIC0gMjsKICBjb25zdCBmaWxlTWFya2VyID0gZmluZE5leHRGaWxlTWFya2VyKGRhdGEsIGVuZE9mZnNldCwgb2Zmc2V0KTsKICBpZiAoZmlsZU1hcmtlcj8uaW52YWxpZCkgewogICAgcmV0dXJuIGZpbGVNYXJrZXIub2Zmc2V0OwogIH0KICByZXR1cm4gZW5kT2Zmc2V0Owp9CmNsYXNzIEpwZWdJbWFnZSB7CiAgY29uc3RydWN0b3IoewogICAgZGVjb2RlVHJhbnNmb3JtID0gbnVsbCwKICAgIGNvbG9yVHJhbnNmb3JtID0gLTEKICB9ID0ge30pIHsKICAgIHRoaXMuX2RlY29kZVRyYW5zZm9ybSA9IGRlY29kZVRyYW5zZm9ybTsKICAgIHRoaXMuX2NvbG9yVHJhbnNmb3JtID0gY29sb3JUcmFuc2Zvcm07CiAgfQogIHN0YXRpYyBjYW5Vc2VJbWFnZURlY29kZXIoZGF0YSwgY29sb3JUcmFuc2Zvcm0gPSAtMSkgewogICAgbGV0IGV4aWZPZmZzZXRzID0gbnVsbDsKICAgIGxldCBvZmZzZXQgPSAwOwogICAgbGV0IG51bUNvbXBvbmVudHMgPSBudWxsOwogICAgbGV0IGZpbGVNYXJrZXIgPSByZWFkVWludDE2KGRhdGEsIG9mZnNldCk7CiAgICBvZmZzZXQgKz0gMjsKICAgIGlmIChmaWxlTWFya2VyICE9PSAweGZmZDgpIHsKICAgICAgdGhyb3cgbmV3IEpwZWdFcnJvcigiU09JIG5vdCBmb3VuZCIpOwogICAgfQogICAgZmlsZU1hcmtlciA9IHJlYWRVaW50MTYoZGF0YSwgb2Zmc2V0KTsKICAgIG9mZnNldCArPSAyOwogICAgbWFya2VyTG9vcDogd2hpbGUgKGZpbGVNYXJrZXIgIT09IDB4ZmZkOSkgewogICAgICBzd2l0Y2ggKGZpbGVNYXJrZXIpIHsKICAgICAgICBjYXNlIDB4ZmZlMToKICAgICAgICAgIGNvbnN0IHsKICAgICAgICAgICAgYXBwRGF0YSwKICAgICAgICAgICAgb2xkT2Zmc2V0LAogICAgICAgICAgICBuZXdPZmZzZXQKICAgICAgICAgIH0gPSByZWFkRGF0YUJsb2NrKGRhdGEsIG9mZnNldCk7CiAgICAgICAgICBvZmZzZXQgPSBuZXdPZmZzZXQ7CiAgICAgICAgICBpZiAoYXBwRGF0YVswXSA9PT0gMHg0NSAmJiBhcHBEYXRhWzFdID09PSAweDc4ICYmIGFwcERhdGFbMl0gPT09IDB4NjkgJiYgYXBwRGF0YVszXSA9PT0gMHg2NiAmJiBhcHBEYXRhWzRdID09PSAwICYmIGFwcERhdGFbNV0gPT09IDApIHsKICAgICAgICAgICAgaWYgKGV4aWZPZmZzZXRzKSB7CiAgICAgICAgICAgICAgdGhyb3cgbmV3IEpwZWdFcnJvcigiRHVwbGljYXRlIEVYSUYtYmxvY2tzIGZvdW5kLiIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGV4aWZPZmZzZXRzID0gewogICAgICAgICAgICAgIGV4aWZTdGFydDogb2xkT2Zmc2V0ICsgNiwKICAgICAgICAgICAgICBleGlmRW5kOiBuZXdPZmZzZXQKICAgICAgICAgICAgfTsKICAgICAgICAgIH0KICAgICAgICAgIGZpbGVNYXJrZXIgPSByZWFkVWludDE2KGRhdGEsIG9mZnNldCk7CiAgICAgICAgICBvZmZzZXQgKz0gMjsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIGNhc2UgMHhmZmMwOgogICAgICAgIGNhc2UgMHhmZmMxOgogICAgICAgIGNhc2UgMHhmZmMyOgogICAgICAgICAgbnVtQ29tcG9uZW50cyA9IGRhdGFbb2Zmc2V0ICsgKDIgKyAxICsgMiArIDIpXTsKICAgICAgICAgIGJyZWFrIG1hcmtlckxvb3A7CiAgICAgICAgY2FzZSAweGZmZmY6CiAgICAgICAgICBpZiAoZGF0YVtvZmZzZXRdICE9PSAweGZmKSB7CiAgICAgICAgICAgIG9mZnNldC0tOwogICAgICAgICAgfQogICAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgICAgb2Zmc2V0ID0gc2tpcERhdGEoZGF0YSwgb2Zmc2V0KTsKICAgICAgZmlsZU1hcmtlciA9IHJlYWRVaW50MTYoZGF0YSwgb2Zmc2V0KTsKICAgICAgb2Zmc2V0ICs9IDI7CiAgICB9CiAgICBpZiAobnVtQ29tcG9uZW50cyA9PT0gNCkgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIGlmIChudW1Db21wb25lbnRzID09PSAzICYmIGNvbG9yVHJhbnNmb3JtID09PSAwKSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgcmV0dXJuIGV4aWZPZmZzZXRzIHx8IHt9OwogIH0KICBwYXJzZShkYXRhLCB7CiAgICBkbmxTY2FuTGluZXMgPSBudWxsCiAgfSA9IHt9KSB7CiAgICBsZXQgb2Zmc2V0ID0gMDsKICAgIGxldCBqZmlmID0gbnVsbDsKICAgIGxldCBhZG9iZSA9IG51bGw7CiAgICBsZXQgZnJhbWUsIHJlc2V0SW50ZXJ2YWw7CiAgICBsZXQgbnVtU09TTWFya2VycyA9IDA7CiAgICBjb25zdCBxdWFudGl6YXRpb25UYWJsZXMgPSBbXTsKICAgIGNvbnN0IGh1ZmZtYW5UYWJsZXNBQyA9IFtdLAogICAgICBodWZmbWFuVGFibGVzREMgPSBbXTsKICAgIGxldCBmaWxlTWFya2VyID0gcmVhZFVpbnQxNihkYXRhLCBvZmZzZXQpOwogICAgb2Zmc2V0ICs9IDI7CiAgICBpZiAoZmlsZU1hcmtlciAhPT0gMHhmZmQ4KSB7CiAgICAgIHRocm93IG5ldyBKcGVnRXJyb3IoIlNPSSBub3QgZm91bmQiKTsKICAgIH0KICAgIGZpbGVNYXJrZXIgPSByZWFkVWludDE2KGRhdGEsIG9mZnNldCk7CiAgICBvZmZzZXQgKz0gMjsKICAgIG1hcmtlckxvb3A6IHdoaWxlIChmaWxlTWFya2VyICE9PSAweGZmZDkpIHsKICAgICAgbGV0IGksIGosIGw7CiAgICAgIHN3aXRjaCAoZmlsZU1hcmtlcikgewogICAgICAgIGNhc2UgMHhmZmUwOgogICAgICAgIGNhc2UgMHhmZmUxOgogICAgICAgIGNhc2UgMHhmZmUyOgogICAgICAgIGNhc2UgMHhmZmUzOgogICAgICAgIGNhc2UgMHhmZmU0OgogICAgICAgIGNhc2UgMHhmZmU1OgogICAgICAgIGNhc2UgMHhmZmU2OgogICAgICAgIGNhc2UgMHhmZmU3OgogICAgICAgIGNhc2UgMHhmZmU4OgogICAgICAgIGNhc2UgMHhmZmU5OgogICAgICAgIGNhc2UgMHhmZmVhOgogICAgICAgIGNhc2UgMHhmZmViOgogICAgICAgIGNhc2UgMHhmZmVjOgogICAgICAgIGNhc2UgMHhmZmVkOgogICAgICAgIGNhc2UgMHhmZmVlOgogICAgICAgIGNhc2UgMHhmZmVmOgogICAgICAgIGNhc2UgMHhmZmZlOgogICAgICAgICAgY29uc3QgewogICAgICAgICAgICBhcHBEYXRhLAogICAgICAgICAgICBuZXdPZmZzZXQKICAgICAgICAgIH0gPSByZWFkRGF0YUJsb2NrKGRhdGEsIG9mZnNldCk7CiAgICAgICAgICBvZmZzZXQgPSBuZXdPZmZzZXQ7CiAgICAgICAgICBpZiAoZmlsZU1hcmtlciA9PT0gMHhmZmUwKSB7CiAgICAgICAgICAgIGlmIChhcHBEYXRhWzBdID09PSAweDRhICYmIGFwcERhdGFbMV0gPT09IDB4NDYgJiYgYXBwRGF0YVsyXSA9PT0gMHg0OSAmJiBhcHBEYXRhWzNdID09PSAweDQ2ICYmIGFwcERhdGFbNF0gPT09IDApIHsKICAgICAgICAgICAgICBqZmlmID0gewogICAgICAgICAgICAgICAgdmVyc2lvbjogewogICAgICAgICAgICAgICAgICBtYWpvcjogYXBwRGF0YVs1XSwKICAgICAgICAgICAgICAgICAgbWlub3I6IGFwcERhdGFbNl0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBkZW5zaXR5VW5pdHM6IGFwcERhdGFbN10sCiAgICAgICAgICAgICAgICB4RGVuc2l0eTogYXBwRGF0YVs4XSA8PCA4IHwgYXBwRGF0YVs5XSwKICAgICAgICAgICAgICAgIHlEZW5zaXR5OiBhcHBEYXRhWzEwXSA8PCA4IHwgYXBwRGF0YVsxMV0sCiAgICAgICAgICAgICAgICB0aHVtYldpZHRoOiBhcHBEYXRhWzEyXSwKICAgICAgICAgICAgICAgIHRodW1iSGVpZ2h0OiBhcHBEYXRhWzEzXSwKICAgICAgICAgICAgICAgIHRodW1iRGF0YTogYXBwRGF0YS5zdWJhcnJheSgxNCwgMTQgKyAzICogYXBwRGF0YVsxMl0gKiBhcHBEYXRhWzEzXSkKICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoZmlsZU1hcmtlciA9PT0gMHhmZmVlKSB7CiAgICAgICAgICAgIGlmIChhcHBEYXRhWzBdID09PSAweDQxICYmIGFwcERhdGFbMV0gPT09IDB4NjQgJiYgYXBwRGF0YVsyXSA9PT0gMHg2ZiAmJiBhcHBEYXRhWzNdID09PSAweDYyICYmIGFwcERhdGFbNF0gPT09IDB4NjUpIHsKICAgICAgICAgICAgICBhZG9iZSA9IHsKICAgICAgICAgICAgICAgIHZlcnNpb246IGFwcERhdGFbNV0gPDwgOCB8IGFwcERhdGFbNl0sCiAgICAgICAgICAgICAgICBmbGFnczA6IGFwcERhdGFbN10gPDwgOCB8IGFwcERhdGFbOF0sCiAgICAgICAgICAgICAgICBmbGFnczE6IGFwcERhdGFbOV0gPDwgOCB8IGFwcERhdGFbMTBdLAogICAgICAgICAgICAgICAgdHJhbnNmb3JtQ29kZTogYXBwRGF0YVsxMV0KICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIDB4ZmZkYjoKICAgICAgICAgIGNvbnN0IHF1YW50aXphdGlvblRhYmxlc0xlbmd0aCA9IHJlYWRVaW50MTYoZGF0YSwgb2Zmc2V0KTsKICAgICAgICAgIG9mZnNldCArPSAyOwogICAgICAgICAgY29uc3QgcXVhbnRpemF0aW9uVGFibGVzRW5kID0gcXVhbnRpemF0aW9uVGFibGVzTGVuZ3RoICsgb2Zmc2V0IC0gMjsKICAgICAgICAgIGxldCB6OwogICAgICAgICAgd2hpbGUgKG9mZnNldCA8IHF1YW50aXphdGlvblRhYmxlc0VuZCkgewogICAgICAgICAgICBjb25zdCBxdWFudGl6YXRpb25UYWJsZVNwZWMgPSBkYXRhW29mZnNldCsrXTsKICAgICAgICAgICAgY29uc3QgdGFibGVEYXRhID0gbmV3IFVpbnQxNkFycmF5KDY0KTsKICAgICAgICAgICAgaWYgKHF1YW50aXphdGlvblRhYmxlU3BlYyA+PiA0ID09PSAwKSB7CiAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IDY0OyBqKyspIHsKICAgICAgICAgICAgICAgIHogPSBkY3RaaWdaYWdbal07CiAgICAgICAgICAgICAgICB0YWJsZURhdGFbel0gPSBkYXRhW29mZnNldCsrXTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSBpZiAocXVhbnRpemF0aW9uVGFibGVTcGVjID4+IDQgPT09IDEpIHsKICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgNjQ7IGorKykgewogICAgICAgICAgICAgICAgeiA9IGRjdFppZ1phZ1tqXTsKICAgICAgICAgICAgICAgIHRhYmxlRGF0YVt6XSA9IHJlYWRVaW50MTYoZGF0YSwgb2Zmc2V0KTsKICAgICAgICAgICAgICAgIG9mZnNldCArPSAyOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB0aHJvdyBuZXcgSnBlZ0Vycm9yKCJEUVQgLSBpbnZhbGlkIHRhYmxlIHNwZWMiKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBxdWFudGl6YXRpb25UYWJsZXNbcXVhbnRpemF0aW9uVGFibGVTcGVjICYgMTVdID0gdGFibGVEYXRhOwogICAgICAgICAgfQogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAweGZmYzA6CiAgICAgICAgY2FzZSAweGZmYzE6CiAgICAgICAgY2FzZSAweGZmYzI6CiAgICAgICAgICBpZiAoZnJhbWUpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEpwZWdFcnJvcigiT25seSBzaW5nbGUgZnJhbWUgSlBFR3Mgc3VwcG9ydGVkIik7CiAgICAgICAgICB9CiAgICAgICAgICBvZmZzZXQgKz0gMjsKICAgICAgICAgIGZyYW1lID0ge307CiAgICAgICAgICBmcmFtZS5leHRlbmRlZCA9IGZpbGVNYXJrZXIgPT09IDB4ZmZjMTsKICAgICAgICAgIGZyYW1lLnByb2dyZXNzaXZlID0gZmlsZU1hcmtlciA9PT0gMHhmZmMyOwogICAgICAgICAgZnJhbWUucHJlY2lzaW9uID0gZGF0YVtvZmZzZXQrK107CiAgICAgICAgICBjb25zdCBzb2ZTY2FuTGluZXMgPSByZWFkVWludDE2KGRhdGEsIG9mZnNldCk7CiAgICAgICAgICBvZmZzZXQgKz0gMjsKICAgICAgICAgIGZyYW1lLnNjYW5MaW5lcyA9IGRubFNjYW5MaW5lcyB8fCBzb2ZTY2FuTGluZXM7CiAgICAgICAgICBmcmFtZS5zYW1wbGVzUGVyTGluZSA9IHJlYWRVaW50MTYoZGF0YSwgb2Zmc2V0KTsKICAgICAgICAgIG9mZnNldCArPSAyOwogICAgICAgICAgZnJhbWUuY29tcG9uZW50cyA9IFtdOwogICAgICAgICAgZnJhbWUuY29tcG9uZW50SWRzID0ge307CiAgICAgICAgICBjb25zdCBjb21wb25lbnRzQ291bnQgPSBkYXRhW29mZnNldCsrXTsKICAgICAgICAgIGxldCBtYXhIID0gMCwKICAgICAgICAgICAgbWF4ViA9IDA7CiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29tcG9uZW50c0NvdW50OyBpKyspIHsKICAgICAgICAgICAgY29uc3QgY29tcG9uZW50SWQgPSBkYXRhW29mZnNldF07CiAgICAgICAgICAgIGNvbnN0IGggPSBkYXRhW29mZnNldCArIDFdID4+IDQ7CiAgICAgICAgICAgIGNvbnN0IHYgPSBkYXRhW29mZnNldCArIDFdICYgMTU7CiAgICAgICAgICAgIGlmIChtYXhIIDwgaCkgewogICAgICAgICAgICAgIG1heEggPSBoOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChtYXhWIDwgdikgewogICAgICAgICAgICAgIG1heFYgPSB2OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IHFJZCA9IGRhdGFbb2Zmc2V0ICsgMl07CiAgICAgICAgICAgIGwgPSBmcmFtZS5jb21wb25lbnRzLnB1c2goewogICAgICAgICAgICAgIGgsCiAgICAgICAgICAgICAgdiwKICAgICAgICAgICAgICBxdWFudGl6YXRpb25JZDogcUlkLAogICAgICAgICAgICAgIHF1YW50aXphdGlvblRhYmxlOiBudWxsCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBmcmFtZS5jb21wb25lbnRJZHNbY29tcG9uZW50SWRdID0gbCAtIDE7CiAgICAgICAgICAgIG9mZnNldCArPSAzOwogICAgICAgICAgfQogICAgICAgICAgZnJhbWUubWF4SCA9IG1heEg7CiAgICAgICAgICBmcmFtZS5tYXhWID0gbWF4VjsKICAgICAgICAgIHByZXBhcmVDb21wb25lbnRzKGZyYW1lKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgMHhmZmM0OgogICAgICAgICAgY29uc3QgaHVmZm1hbkxlbmd0aCA9IHJlYWRVaW50MTYoZGF0YSwgb2Zmc2V0KTsKICAgICAgICAgIG9mZnNldCArPSAyOwogICAgICAgICAgZm9yIChpID0gMjsgaSA8IGh1ZmZtYW5MZW5ndGg7KSB7CiAgICAgICAgICAgIGNvbnN0IGh1ZmZtYW5UYWJsZVNwZWMgPSBkYXRhW29mZnNldCsrXTsKICAgICAgICAgICAgY29uc3QgY29kZUxlbmd0aHMgPSBuZXcgVWludDhBcnJheSgxNik7CiAgICAgICAgICAgIGxldCBjb2RlTGVuZ3RoU3VtID0gMDsKICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IDE2OyBqKyssIG9mZnNldCsrKSB7CiAgICAgICAgICAgICAgY29kZUxlbmd0aFN1bSArPSBjb2RlTGVuZ3Roc1tqXSA9IGRhdGFbb2Zmc2V0XTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjb25zdCBodWZmbWFuVmFsdWVzID0gbmV3IFVpbnQ4QXJyYXkoY29kZUxlbmd0aFN1bSk7CiAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBjb2RlTGVuZ3RoU3VtOyBqKyssIG9mZnNldCsrKSB7CiAgICAgICAgICAgICAgaHVmZm1hblZhbHVlc1tqXSA9IGRhdGFbb2Zmc2V0XTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpICs9IDE3ICsgY29kZUxlbmd0aFN1bTsKICAgICAgICAgICAgKGh1ZmZtYW5UYWJsZVNwZWMgPj4gNCA9PT0gMCA/IGh1ZmZtYW5UYWJsZXNEQyA6IGh1ZmZtYW5UYWJsZXNBQylbaHVmZm1hblRhYmxlU3BlYyAmIDE1XSA9IGJ1aWxkSHVmZm1hblRhYmxlKGNvZGVMZW5ndGhzLCBodWZmbWFuVmFsdWVzKTsKICAgICAgICAgIH0KICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgMHhmZmRkOgogICAgICAgICAgb2Zmc2V0ICs9IDI7CiAgICAgICAgICByZXNldEludGVydmFsID0gcmVhZFVpbnQxNihkYXRhLCBvZmZzZXQpOwogICAgICAgICAgb2Zmc2V0ICs9IDI7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIDB4ZmZkYToKICAgICAgICAgIGNvbnN0IHBhcnNlRE5MTWFya2VyID0gKytudW1TT1NNYXJrZXJzID09PSAxICYmICFkbmxTY2FuTGluZXM7CiAgICAgICAgICBvZmZzZXQgKz0gMjsKICAgICAgICAgIGNvbnN0IHNlbGVjdG9yc0NvdW50ID0gZGF0YVtvZmZzZXQrK10sCiAgICAgICAgICAgIGNvbXBvbmVudHMgPSBbXTsKICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBzZWxlY3RvcnNDb3VudDsgaSsrKSB7CiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gZGF0YVtvZmZzZXQrK107CiAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudEluZGV4ID0gZnJhbWUuY29tcG9uZW50SWRzW2luZGV4XTsKICAgICAgICAgICAgY29uc3QgY29tcG9uZW50ID0gZnJhbWUuY29tcG9uZW50c1tjb21wb25lbnRJbmRleF07CiAgICAgICAgICAgIGNvbXBvbmVudC5pbmRleCA9IGluZGV4OwogICAgICAgICAgICBjb25zdCB0YWJsZVNwZWMgPSBkYXRhW29mZnNldCsrXTsKICAgICAgICAgICAgY29tcG9uZW50Lmh1ZmZtYW5UYWJsZURDID0gaHVmZm1hblRhYmxlc0RDW3RhYmxlU3BlYyA+PiA0XTsKICAgICAgICAgICAgY29tcG9uZW50Lmh1ZmZtYW5UYWJsZUFDID0gaHVmZm1hblRhYmxlc0FDW3RhYmxlU3BlYyAmIDE1XTsKICAgICAgICAgICAgY29tcG9uZW50cy5wdXNoKGNvbXBvbmVudCk7CiAgICAgICAgICB9CiAgICAgICAgICBjb25zdCBzcGVjdHJhbFN0YXJ0ID0gZGF0YVtvZmZzZXQrK10sCiAgICAgICAgICAgIHNwZWN0cmFsRW5kID0gZGF0YVtvZmZzZXQrK10sCiAgICAgICAgICAgIHN1Y2Nlc3NpdmVBcHByb3hpbWF0aW9uID0gZGF0YVtvZmZzZXQrK107CiAgICAgICAgICB0cnkgewogICAgICAgICAgICBjb25zdCBwcm9jZXNzZWQgPSBkZWNvZGVTY2FuKGRhdGEsIG9mZnNldCwgZnJhbWUsIGNvbXBvbmVudHMsIHJlc2V0SW50ZXJ2YWwsIHNwZWN0cmFsU3RhcnQsIHNwZWN0cmFsRW5kLCBzdWNjZXNzaXZlQXBwcm94aW1hdGlvbiA+PiA0LCBzdWNjZXNzaXZlQXBwcm94aW1hdGlvbiAmIDE1LCBwYXJzZUROTE1hcmtlcik7CiAgICAgICAgICAgIG9mZnNldCArPSBwcm9jZXNzZWQ7CiAgICAgICAgICB9IGNhdGNoIChleCkgewogICAgICAgICAgICBpZiAoZXggaW5zdGFuY2VvZiBETkxNYXJrZXJFcnJvcikgewogICAgICAgICAgICAgIHdhcm4oYCR7ZXgubWVzc2FnZX0gLS0gYXR0ZW1wdGluZyB0byByZS1wYXJzZSB0aGUgSlBFRyBpbWFnZS5gKTsKICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZShkYXRhLCB7CiAgICAgICAgICAgICAgICBkbmxTY2FuTGluZXM6IGV4LnNjYW5MaW5lcwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9IGVsc2UgaWYgKGV4IGluc3RhbmNlb2YgRU9JTWFya2VyRXJyb3IpIHsKICAgICAgICAgICAgICB3YXJuKGAke2V4Lm1lc3NhZ2V9IC0tIGlnbm9yaW5nIHRoZSByZXN0IG9mIHRoZSBpbWFnZSBkYXRhLmApOwogICAgICAgICAgICAgIGJyZWFrIG1hcmtlckxvb3A7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhyb3cgZXg7CiAgICAgICAgICB9CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIDB4ZmZkYzoKICAgICAgICAgIG9mZnNldCArPSA0OwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAweGZmZmY6CiAgICAgICAgICBpZiAoZGF0YVtvZmZzZXRdICE9PSAweGZmKSB7CiAgICAgICAgICAgIG9mZnNldC0tOwogICAgICAgICAgfQogICAgICAgICAgYnJlYWs7CiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIGNvbnN0IG5leHRGaWxlTWFya2VyID0gZmluZE5leHRGaWxlTWFya2VyKGRhdGEsIG9mZnNldCAtIDIsIG9mZnNldCAtIDMpOwogICAgICAgICAgaWYgKG5leHRGaWxlTWFya2VyPy5pbnZhbGlkKSB7CiAgICAgICAgICAgIHdhcm4oIkpwZWdJbWFnZS5wYXJzZSAtIHVuZXhwZWN0ZWQgZGF0YSwgY3VycmVudCBtYXJrZXIgaXM6ICIgKyBuZXh0RmlsZU1hcmtlci5pbnZhbGlkKTsKICAgICAgICAgICAgb2Zmc2V0ID0gbmV4dEZpbGVNYXJrZXIub2Zmc2V0OwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICAgIGlmICghbmV4dEZpbGVNYXJrZXIgfHwgb2Zmc2V0ID49IGRhdGEubGVuZ3RoIC0gMSkgewogICAgICAgICAgICB3YXJuKCJKcGVnSW1hZ2UucGFyc2UgLSByZWFjaGVkIHRoZSBlbmQgb2YgdGhlIGltYWdlIGRhdGEgIiArICJ3aXRob3V0IGZpbmRpbmcgYW4gRU9JIG1hcmtlciAoMHhGRkQ5KS4iKTsKICAgICAgICAgICAgYnJlYWsgbWFya2VyTG9vcDsKICAgICAgICAgIH0KICAgICAgICAgIHRocm93IG5ldyBKcGVnRXJyb3IoIkpwZWdJbWFnZS5wYXJzZSAtIHVua25vd24gbWFya2VyOiAiICsgZmlsZU1hcmtlci50b1N0cmluZygxNikpOwogICAgICB9CiAgICAgIGZpbGVNYXJrZXIgPSByZWFkVWludDE2KGRhdGEsIG9mZnNldCk7CiAgICAgIG9mZnNldCArPSAyOwogICAgfQogICAgaWYgKCFmcmFtZSkgewogICAgICB0aHJvdyBuZXcgSnBlZ0Vycm9yKCJKcGVnSW1hZ2UucGFyc2UgLSBubyBmcmFtZSBkYXRhIGZvdW5kLiIpOwogICAgfQogICAgdGhpcy53aWR0aCA9IGZyYW1lLnNhbXBsZXNQZXJMaW5lOwogICAgdGhpcy5oZWlnaHQgPSBmcmFtZS5zY2FuTGluZXM7CiAgICB0aGlzLmpmaWYgPSBqZmlmOwogICAgdGhpcy5hZG9iZSA9IGFkb2JlOwogICAgdGhpcy5jb21wb25lbnRzID0gW107CiAgICBmb3IgKGNvbnN0IGNvbXBvbmVudCBvZiBmcmFtZS5jb21wb25lbnRzKSB7CiAgICAgIGNvbnN0IHF1YW50aXphdGlvblRhYmxlID0gcXVhbnRpemF0aW9uVGFibGVzW2NvbXBvbmVudC5xdWFudGl6YXRpb25JZF07CiAgICAgIGlmIChxdWFudGl6YXRpb25UYWJsZSkgewogICAgICAgIGNvbXBvbmVudC5xdWFudGl6YXRpb25UYWJsZSA9IHF1YW50aXphdGlvblRhYmxlOwogICAgICB9CiAgICAgIHRoaXMuY29tcG9uZW50cy5wdXNoKHsKICAgICAgICBpbmRleDogY29tcG9uZW50LmluZGV4LAogICAgICAgIG91dHB1dDogYnVpbGRDb21wb25lbnREYXRhKGZyYW1lLCBjb21wb25lbnQpLAogICAgICAgIHNjYWxlWDogY29tcG9uZW50LmggLyBmcmFtZS5tYXhILAogICAgICAgIHNjYWxlWTogY29tcG9uZW50LnYgLyBmcmFtZS5tYXhWLAogICAgICAgIGJsb2Nrc1BlckxpbmU6IGNvbXBvbmVudC5ibG9ja3NQZXJMaW5lLAogICAgICAgIGJsb2Nrc1BlckNvbHVtbjogY29tcG9uZW50LmJsb2Nrc1BlckNvbHVtbgogICAgICB9KTsKICAgIH0KICAgIHRoaXMubnVtQ29tcG9uZW50cyA9IHRoaXMuY29tcG9uZW50cy5sZW5ndGg7CiAgICByZXR1cm4gdW5kZWZpbmVkOwogIH0KICBfZ2V0TGluZWFyaXplZEJsb2NrRGF0YSh3aWR0aCwgaGVpZ2h0LCBpc1NvdXJjZVBERiA9IGZhbHNlKSB7CiAgICBjb25zdCBzY2FsZVggPSB0aGlzLndpZHRoIC8gd2lkdGgsCiAgICAgIHNjYWxlWSA9IHRoaXMuaGVpZ2h0IC8gaGVpZ2h0OwogICAgbGV0IGNvbXBvbmVudCwgY29tcG9uZW50U2NhbGVYLCBjb21wb25lbnRTY2FsZVksIGJsb2Nrc1BlclNjYW5saW5lOwogICAgbGV0IHgsIHksIGksIGosIGs7CiAgICBsZXQgaW5kZXg7CiAgICBsZXQgb2Zmc2V0ID0gMDsKICAgIGxldCBvdXRwdXQ7CiAgICBjb25zdCBudW1Db21wb25lbnRzID0gdGhpcy5jb21wb25lbnRzLmxlbmd0aDsKICAgIGNvbnN0IGRhdGFMZW5ndGggPSB3aWR0aCAqIGhlaWdodCAqIG51bUNvbXBvbmVudHM7CiAgICBjb25zdCBkYXRhID0gbmV3IFVpbnQ4Q2xhbXBlZEFycmF5KGRhdGFMZW5ndGgpOwogICAgY29uc3QgeFNjYWxlQmxvY2tPZmZzZXQgPSBuZXcgVWludDMyQXJyYXkod2lkdGgpOwogICAgY29uc3QgbWFzazNMU0IgPSAweGZmZmZmZmY4OwogICAgbGV0IGxhc3RDb21wb25lbnRTY2FsZVg7CiAgICBmb3IgKGkgPSAwOyBpIDwgbnVtQ29tcG9uZW50czsgaSsrKSB7CiAgICAgIGNvbXBvbmVudCA9IHRoaXMuY29tcG9uZW50c1tpXTsKICAgICAgY29tcG9uZW50U2NhbGVYID0gY29tcG9uZW50LnNjYWxlWCAqIHNjYWxlWDsKICAgICAgY29tcG9uZW50U2NhbGVZID0gY29tcG9uZW50LnNjYWxlWSAqIHNjYWxlWTsKICAgICAgb2Zmc2V0ID0gaTsKICAgICAgb3V0cHV0ID0gY29tcG9uZW50Lm91dHB1dDsKICAgICAgYmxvY2tzUGVyU2NhbmxpbmUgPSBjb21wb25lbnQuYmxvY2tzUGVyTGluZSArIDEgPDwgMzsKICAgICAgaWYgKGNvbXBvbmVudFNjYWxlWCAhPT0gbGFzdENvbXBvbmVudFNjYWxlWCkgewogICAgICAgIGZvciAoeCA9IDA7IHggPCB3aWR0aDsgeCsrKSB7CiAgICAgICAgICBqID0gMCB8IHggKiBjb21wb25lbnRTY2FsZVg7CiAgICAgICAgICB4U2NhbGVCbG9ja09mZnNldFt4XSA9IChqICYgbWFzazNMU0IpIDw8IDMgfCBqICYgNzsKICAgICAgICB9CiAgICAgICAgbGFzdENvbXBvbmVudFNjYWxlWCA9IGNvbXBvbmVudFNjYWxlWDsKICAgICAgfQogICAgICBmb3IgKHkgPSAwOyB5IDwgaGVpZ2h0OyB5KyspIHsKICAgICAgICBqID0gMCB8IHkgKiBjb21wb25lbnRTY2FsZVk7CiAgICAgICAgaW5kZXggPSBibG9ja3NQZXJTY2FubGluZSAqIChqICYgbWFzazNMU0IpIHwgKGogJiA3KSA8PCAzOwogICAgICAgIGZvciAoeCA9IDA7IHggPCB3aWR0aDsgeCsrKSB7CiAgICAgICAgICBkYXRhW29mZnNldF0gPSBvdXRwdXRbaW5kZXggKyB4U2NhbGVCbG9ja09mZnNldFt4XV07CiAgICAgICAgICBvZmZzZXQgKz0gbnVtQ29tcG9uZW50czsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIGxldCB0cmFuc2Zvcm0gPSB0aGlzLl9kZWNvZGVUcmFuc2Zvcm07CiAgICBpZiAoIWlzU291cmNlUERGICYmIG51bUNvbXBvbmVudHMgPT09IDQgJiYgIXRyYW5zZm9ybSkgewogICAgICB0cmFuc2Zvcm0gPSBuZXcgSW50MzJBcnJheShbLTI1NiwgMjU1LCAtMjU2LCAyNTUsIC0yNTYsIDI1NSwgLTI1NiwgMjU1XSk7CiAgICB9CiAgICBpZiAodHJhbnNmb3JtKSB7CiAgICAgIGZvciAoaSA9IDA7IGkgPCBkYXRhTGVuZ3RoOykgewogICAgICAgIGZvciAoaiA9IDAsIGsgPSAwOyBqIDwgbnVtQ29tcG9uZW50czsgaisrLCBpKyssIGsgKz0gMikgewogICAgICAgICAgZGF0YVtpXSA9IChkYXRhW2ldICogdHJhbnNmb3JtW2tdID4+IDgpICsgdHJhbnNmb3JtW2sgKyAxXTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBkYXRhOwogIH0KICBnZXQgX2lzQ29sb3JDb252ZXJzaW9uTmVlZGVkKCkgewogICAgaWYgKHRoaXMuYWRvYmUpIHsKICAgICAgcmV0dXJuICEhdGhpcy5hZG9iZS50cmFuc2Zvcm1Db2RlOwogICAgfQogICAgaWYgKHRoaXMubnVtQ29tcG9uZW50cyA9PT0gMykgewogICAgICBpZiAodGhpcy5fY29sb3JUcmFuc2Zvcm0gPT09IDApIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0gZWxzZSBpZiAodGhpcy5jb21wb25lbnRzWzBdLmluZGV4ID09PSAweDUyICYmIHRoaXMuY29tcG9uZW50c1sxXS5pbmRleCA9PT0gMHg0NyAmJiB0aGlzLmNvbXBvbmVudHNbMl0uaW5kZXggPT09IDB4NDIpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICBpZiAodGhpcy5fY29sb3JUcmFuc2Zvcm0gPT09IDEpIHsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICByZXR1cm4gZmFsc2U7CiAgfQogIF9jb252ZXJ0WWNjVG9SZ2IoZGF0YSkgewogICAgbGV0IFksIENiLCBDcjsKICAgIGZvciAobGV0IGkgPSAwLCBsZW5ndGggPSBkYXRhLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSArPSAzKSB7CiAgICAgIFkgPSBkYXRhW2ldOwogICAgICBDYiA9IGRhdGFbaSArIDFdOwogICAgICBDciA9IGRhdGFbaSArIDJdOwogICAgICBkYXRhW2ldID0gWSAtIDE3OS40NTYgKyAxLjQwMiAqIENyOwogICAgICBkYXRhW2kgKyAxXSA9IFkgKyAxMzUuNDU5IC0gMC4zNDQgKiBDYiAtIDAuNzE0ICogQ3I7CiAgICAgIGRhdGFbaSArIDJdID0gWSAtIDIyNi44MTYgKyAxLjc3MiAqIENiOwogICAgfQogICAgcmV0dXJuIGRhdGE7CiAgfQogIF9jb252ZXJ0WWNjVG9SZ2JhKGRhdGEsIG91dCkgewogICAgZm9yIChsZXQgaSA9IDAsIGogPSAwLCBsZW5ndGggPSBkYXRhLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSArPSAzLCBqICs9IDQpIHsKICAgICAgY29uc3QgWSA9IGRhdGFbaV07CiAgICAgIGNvbnN0IENiID0gZGF0YVtpICsgMV07CiAgICAgIGNvbnN0IENyID0gZGF0YVtpICsgMl07CiAgICAgIG91dFtqXSA9IFkgLSAxNzkuNDU2ICsgMS40MDIgKiBDcjsKICAgICAgb3V0W2ogKyAxXSA9IFkgKyAxMzUuNDU5IC0gMC4zNDQgKiBDYiAtIDAuNzE0ICogQ3I7CiAgICAgIG91dFtqICsgMl0gPSBZIC0gMjI2LjgxNiArIDEuNzcyICogQ2I7CiAgICAgIG91dFtqICsgM10gPSAyNTU7CiAgICB9CiAgICByZXR1cm4gb3V0OwogIH0KICBfY29udmVydFljY2tUb1JnYihkYXRhKSB7CiAgICB0aGlzLl9jb252ZXJ0WWNja1RvQ215ayhkYXRhKTsKICAgIHJldHVybiB0aGlzLl9jb252ZXJ0Q215a1RvUmdiKGRhdGEpOwogIH0KICBfY29udmVydFljY2tUb1JnYmEoZGF0YSkgewogICAgdGhpcy5fY29udmVydFljY2tUb0NteWsoZGF0YSk7CiAgICByZXR1cm4gdGhpcy5fY29udmVydENteWtUb1JnYmEoZGF0YSk7CiAgfQogIF9jb252ZXJ0WWNja1RvQ215ayhkYXRhKSB7CiAgICBsZXQgWSwgQ2IsIENyOwogICAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IGRhdGEubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpICs9IDQpIHsKICAgICAgWSA9IGRhdGFbaV07CiAgICAgIENiID0gZGF0YVtpICsgMV07CiAgICAgIENyID0gZGF0YVtpICsgMl07CiAgICAgIGRhdGFbaV0gPSA0MzQuNDU2IC0gWSAtIDEuNDAyICogQ3I7CiAgICAgIGRhdGFbaSArIDFdID0gMTE5LjU0MSAtIFkgKyAwLjM0NCAqIENiICsgMC43MTQgKiBDcjsKICAgICAgZGF0YVtpICsgMl0gPSA0ODEuODE2IC0gWSAtIDEuNzcyICogQ2I7CiAgICB9CiAgICByZXR1cm4gZGF0YTsKICB9CiAgX2NvbnZlcnRDbXlrVG9SZ2IoZGF0YSkgewogICAgY29uc3QgY291bnQgPSBkYXRhLmxlbmd0aCAvIDQ7CiAgICBDb2xvclNwYWNlVXRpbHMuY215ay5nZXRSZ2JCdWZmZXIoZGF0YSwgMCwgY291bnQsIGRhdGEsIDAsIDgsIDApOwogICAgcmV0dXJuIGRhdGEuc3ViYXJyYXkoMCwgY291bnQgKiAzKTsKICB9CiAgX2NvbnZlcnRDbXlrVG9SZ2JhKGRhdGEpIHsKICAgIENvbG9yU3BhY2VVdGlscy5jbXlrLmdldFJnYkJ1ZmZlcihkYXRhLCAwLCBkYXRhLmxlbmd0aCAvIDQsIGRhdGEsIDAsIDgsIDEpOwogICAgaWYgKENvbG9yU3BhY2VVdGlscy5jbXlrIGluc3RhbmNlb2YgRGV2aWNlQ215a0NTKSB7CiAgICAgIGZvciAobGV0IGkgPSAzLCBpaSA9IGRhdGEubGVuZ3RoOyBpIDwgaWk7IGkgKz0gNCkgewogICAgICAgIGRhdGFbaV0gPSAyNTU7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBkYXRhOwogIH0KICBnZXREYXRhKHsKICAgIHdpZHRoLAogICAgaGVpZ2h0LAogICAgZm9yY2VSR0JBID0gZmFsc2UsCiAgICBmb3JjZVJHQiA9IGZhbHNlLAogICAgaXNTb3VyY2VQREYgPSBmYWxzZQogIH0pIHsKICAgIGlmICh0aGlzLm51bUNvbXBvbmVudHMgPiA0KSB7CiAgICAgIHRocm93IG5ldyBKcGVnRXJyb3IoIlVuc3VwcG9ydGVkIGNvbG9yIG1vZGUiKTsKICAgIH0KICAgIGNvbnN0IGRhdGEgPSB0aGlzLl9nZXRMaW5lYXJpemVkQmxvY2tEYXRhKHdpZHRoLCBoZWlnaHQsIGlzU291cmNlUERGKTsKICAgIGlmICh0aGlzLm51bUNvbXBvbmVudHMgPT09IDEgJiYgKGZvcmNlUkdCQSB8fCBmb3JjZVJHQikpIHsKICAgICAgY29uc3QgbGVuID0gZGF0YS5sZW5ndGggKiAoZm9yY2VSR0JBID8gNCA6IDMpOwogICAgICBjb25zdCByZ2JhRGF0YSA9IG5ldyBVaW50OENsYW1wZWRBcnJheShsZW4pOwogICAgICBsZXQgb2Zmc2V0ID0gMDsKICAgICAgaWYgKGZvcmNlUkdCQSkgewogICAgICAgIGdyYXlUb1JHQkEoZGF0YSwgbmV3IFVpbnQzMkFycmF5KHJnYmFEYXRhLmJ1ZmZlcikpOwogICAgICB9IGVsc2UgewogICAgICAgIGZvciAoY29uc3QgZ3JheUNvbG9yIG9mIGRhdGEpIHsKICAgICAgICAgIHJnYmFEYXRhW29mZnNldCsrXSA9IGdyYXlDb2xvcjsKICAgICAgICAgIHJnYmFEYXRhW29mZnNldCsrXSA9IGdyYXlDb2xvcjsKICAgICAgICAgIHJnYmFEYXRhW29mZnNldCsrXSA9IGdyYXlDb2xvcjsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIHJnYmFEYXRhOwogICAgfSBlbHNlIGlmICh0aGlzLm51bUNvbXBvbmVudHMgPT09IDMgJiYgdGhpcy5faXNDb2xvckNvbnZlcnNpb25OZWVkZWQpIHsKICAgICAgaWYgKGZvcmNlUkdCQSkgewogICAgICAgIGNvbnN0IHJnYmFEYXRhID0gbmV3IFVpbnQ4Q2xhbXBlZEFycmF5KGRhdGEubGVuZ3RoIC8gMyAqIDQpOwogICAgICAgIHJldHVybiB0aGlzLl9jb252ZXJ0WWNjVG9SZ2JhKGRhdGEsIHJnYmFEYXRhKTsKICAgICAgfQogICAgICByZXR1cm4gdGhpcy5fY29udmVydFljY1RvUmdiKGRhdGEpOwogICAgfSBlbHNlIGlmICh0aGlzLm51bUNvbXBvbmVudHMgPT09IDQpIHsKICAgICAgaWYgKHRoaXMuX2lzQ29sb3JDb252ZXJzaW9uTmVlZGVkKSB7CiAgICAgICAgaWYgKGZvcmNlUkdCQSkgewogICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnZlcnRZY2NrVG9SZ2JhKGRhdGEpOwogICAgICAgIH0KICAgICAgICBpZiAoZm9yY2VSR0IpIHsKICAgICAgICAgIHJldHVybiB0aGlzLl9jb252ZXJ0WWNja1RvUmdiKGRhdGEpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdGhpcy5fY29udmVydFljY2tUb0NteWsoZGF0YSk7CiAgICAgIH0gZWxzZSBpZiAoZm9yY2VSR0JBKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnZlcnRDbXlrVG9SZ2JhKGRhdGEpOwogICAgICB9IGVsc2UgaWYgKGZvcmNlUkdCKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnZlcnRDbXlrVG9SZ2IoZGF0YSk7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBkYXRhOwogIH0KfQoKOy8vIC4vc3JjL2NvcmUvanBlZ19zdHJlYW0uanMKCgoKCgoKCgpjbGFzcyBKcGVnU3RyZWFtIGV4dGVuZHMgRGVjb2RlU3RyZWFtIHsKICBzdGF0aWMgI2lzSW1hZ2VEZWNvZGVyU3VwcG9ydGVkID0gRmVhdHVyZVRlc3QuaXNJbWFnZURlY29kZXJTdXBwb3J0ZWQ7CiAgY29uc3RydWN0b3Ioc3RyZWFtLCBtYXliZUxlbmd0aCwgcGFyYW1zKSB7CiAgICBzdXBlcihtYXliZUxlbmd0aCk7CiAgICB0aGlzLnN0cmVhbSA9IHN0cmVhbTsKICAgIHRoaXMuZGljdCA9IHN0cmVhbS5kaWN0OwogICAgdGhpcy5tYXliZUxlbmd0aCA9IG1heWJlTGVuZ3RoOwogICAgdGhpcy5wYXJhbXMgPSBwYXJhbXM7CiAgfQogIHN0YXRpYyBnZXQgY2FuVXNlSW1hZ2VEZWNvZGVyKCkgewogICAgcmV0dXJuIHNoYWRvdyh0aGlzLCAiY2FuVXNlSW1hZ2VEZWNvZGVyIiwgdGhpcy4jaXNJbWFnZURlY29kZXJTdXBwb3J0ZWQgPyBJbWFnZURlY29kZXIuaXNUeXBlU3VwcG9ydGVkKCJpbWFnZS9qcGVnIikgOiBQcm9taXNlLnJlc29sdmUoZmFsc2UpKTsKICB9CiAgc3RhdGljIHNldE9wdGlvbnMoewogICAgaXNJbWFnZURlY29kZXJTdXBwb3J0ZWQgPSBmYWxzZQogIH0pIHsKICAgIHRoaXMuI2lzSW1hZ2VEZWNvZGVyU3VwcG9ydGVkID0gaXNJbWFnZURlY29kZXJTdXBwb3J0ZWQ7CiAgfQogIGdldCBieXRlcygpIHsKICAgIHJldHVybiBzaGFkb3codGhpcywgImJ5dGVzIiwgdGhpcy5zdHJlYW0uZ2V0Qnl0ZXModGhpcy5tYXliZUxlbmd0aCkpOwogIH0KICBlbnN1cmVCdWZmZXIocmVxdWVzdGVkKSB7fQogIHJlYWRCbG9jaygpIHsKICAgIHRoaXMuZGVjb2RlSW1hZ2UoKTsKICB9CiAgZ2V0IGpwZWdPcHRpb25zKCkgewogICAgY29uc3QganBlZ09wdGlvbnMgPSB7CiAgICAgIGRlY29kZVRyYW5zZm9ybTogdW5kZWZpbmVkLAogICAgICBjb2xvclRyYW5zZm9ybTogdW5kZWZpbmVkCiAgICB9OwogICAgY29uc3QgZGVjb2RlQXJyID0gdGhpcy5kaWN0LmdldEFycmF5KCJEIiwgIkRlY29kZSIpOwogICAgaWYgKCh0aGlzLmZvcmNlUkdCQSB8fCB0aGlzLmZvcmNlUkdCKSAmJiBBcnJheS5pc0FycmF5KGRlY29kZUFycikpIHsKICAgICAgY29uc3QgYml0c1BlckNvbXBvbmVudCA9IHRoaXMuZGljdC5nZXQoIkJQQyIsICJCaXRzUGVyQ29tcG9uZW50IikgfHwgODsKICAgICAgY29uc3QgZGVjb2RlQXJyTGVuZ3RoID0gZGVjb2RlQXJyLmxlbmd0aDsKICAgICAgY29uc3QgdHJhbnNmb3JtID0gbmV3IEludDMyQXJyYXkoZGVjb2RlQXJyTGVuZ3RoKTsKICAgICAgbGV0IHRyYW5zZm9ybU5lZWRlZCA9IGZhbHNlOwogICAgICBjb25zdCBtYXhWYWx1ZSA9ICgxIDw8IGJpdHNQZXJDb21wb25lbnQpIC0gMTsKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZWNvZGVBcnJMZW5ndGg7IGkgKz0gMikgewogICAgICAgIHRyYW5zZm9ybVtpXSA9IChkZWNvZGVBcnJbaSArIDFdIC0gZGVjb2RlQXJyW2ldKSAqIDI1NiB8IDA7CiAgICAgICAgdHJhbnNmb3JtW2kgKyAxXSA9IGRlY29kZUFycltpXSAqIG1heFZhbHVlIHwgMDsKICAgICAgICBpZiAodHJhbnNmb3JtW2ldICE9PSAyNTYgfHwgdHJhbnNmb3JtW2kgKyAxXSAhPT0gMCkgewogICAgICAgICAgdHJhbnNmb3JtTmVlZGVkID0gdHJ1ZTsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKHRyYW5zZm9ybU5lZWRlZCkgewogICAgICAgIGpwZWdPcHRpb25zLmRlY29kZVRyYW5zZm9ybSA9IHRyYW5zZm9ybTsKICAgICAgfQogICAgfQogICAgaWYgKHRoaXMucGFyYW1zIGluc3RhbmNlb2YgRGljdCkgewogICAgICBjb25zdCBjb2xvclRyYW5zZm9ybSA9IHRoaXMucGFyYW1zLmdldCgiQ29sb3JUcmFuc2Zvcm0iKTsKICAgICAgaWYgKE51bWJlci5pc0ludGVnZXIoY29sb3JUcmFuc2Zvcm0pKSB7CiAgICAgICAganBlZ09wdGlvbnMuY29sb3JUcmFuc2Zvcm0gPSBjb2xvclRyYW5zZm9ybTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIHNoYWRvdyh0aGlzLCAianBlZ09wdGlvbnMiLCBqcGVnT3B0aW9ucyk7CiAgfQogICNza2lwVXNlbGVzc0J5dGVzKGRhdGEpIHsKICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGRhdGEubGVuZ3RoIC0gMTsgaSA8IGlpOyBpKyspIHsKICAgICAgaWYgKGRhdGFbaV0gPT09IDB4ZmYgJiYgZGF0YVtpICsgMV0gPT09IDB4ZDgpIHsKICAgICAgICBpZiAoaSA+IDApIHsKICAgICAgICAgIGRhdGEgPSBkYXRhLnN1YmFycmF5KGkpOwogICAgICAgIH0KICAgICAgICBicmVhazsKICAgICAgfQogICAgfQogICAgcmV0dXJuIGRhdGE7CiAgfQogIGRlY29kZUltYWdlKGJ5dGVzKSB7CiAgICBpZiAodGhpcy5lb2YpIHsKICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyOwogICAgfQogICAgYnl0ZXMgPSB0aGlzLiNza2lwVXNlbGVzc0J5dGVzKGJ5dGVzIHx8IHRoaXMuYnl0ZXMpOwogICAgY29uc3QganBlZ0ltYWdlID0gbmV3IEpwZWdJbWFnZSh0aGlzLmpwZWdPcHRpb25zKTsKICAgIGpwZWdJbWFnZS5wYXJzZShieXRlcyk7CiAgICBjb25zdCBkYXRhID0ganBlZ0ltYWdlLmdldERhdGEoewogICAgICB3aWR0aDogdGhpcy5kcmF3V2lkdGgsCiAgICAgIGhlaWdodDogdGhpcy5kcmF3SGVpZ2h0LAogICAgICBmb3JjZVJHQkE6IHRoaXMuZm9yY2VSR0JBLAogICAgICBmb3JjZVJHQjogdGhpcy5mb3JjZVJHQiwKICAgICAgaXNTb3VyY2VQREY6IHRydWUKICAgIH0pOwogICAgdGhpcy5idWZmZXIgPSBkYXRhOwogICAgdGhpcy5idWZmZXJMZW5ndGggPSBkYXRhLmxlbmd0aDsKICAgIHRoaXMuZW9mID0gdHJ1ZTsKICAgIHJldHVybiB0aGlzLmJ1ZmZlcjsKICB9CiAgZ2V0IGNhbkFzeW5jRGVjb2RlSW1hZ2VGcm9tQnVmZmVyKCkgewogICAgcmV0dXJuIHRoaXMuc3RyZWFtLmlzQXN5bmM7CiAgfQogIGFzeW5jIGdldFRyYW5zZmVyYWJsZUltYWdlKCkgewogICAgaWYgKCEoYXdhaXQgSnBlZ1N0cmVhbS5jYW5Vc2VJbWFnZURlY29kZXIpKSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgY29uc3QganBlZ09wdGlvbnMgPSB0aGlzLmpwZWdPcHRpb25zOwogICAgaWYgKGpwZWdPcHRpb25zLmRlY29kZVRyYW5zZm9ybSkgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIGxldCBkZWNvZGVyOwogICAgdHJ5IHsKICAgICAgY29uc3QgYnl0ZXMgPSB0aGlzLmNhbkFzeW5jRGVjb2RlSW1hZ2VGcm9tQnVmZmVyICYmIChhd2FpdCB0aGlzLnN0cmVhbS5hc3luY0dldEJ5dGVzKCkpIHx8IHRoaXMuYnl0ZXM7CiAgICAgIGlmICghYnl0ZXMpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgICBsZXQgZGF0YSA9IHRoaXMuI3NraXBVc2VsZXNzQnl0ZXMoYnl0ZXMpOwogICAgICBjb25zdCB1c2VJbWFnZURlY29kZXIgPSBKcGVnSW1hZ2UuY2FuVXNlSW1hZ2VEZWNvZGVyKGRhdGEsIGpwZWdPcHRpb25zLmNvbG9yVHJhbnNmb3JtKTsKICAgICAgaWYgKCF1c2VJbWFnZURlY29kZXIpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgICBpZiAodXNlSW1hZ2VEZWNvZGVyLmV4aWZTdGFydCkgewogICAgICAgIGRhdGEgPSBkYXRhLnNsaWNlKCk7CiAgICAgICAgZGF0YS5maWxsKDB4MDAsIHVzZUltYWdlRGVjb2Rlci5leGlmU3RhcnQsIHVzZUltYWdlRGVjb2Rlci5leGlmRW5kKTsKICAgICAgfQogICAgICBkZWNvZGVyID0gbmV3IEltYWdlRGVjb2Rlcih7CiAgICAgICAgZGF0YSwKICAgICAgICB0eXBlOiAiaW1hZ2UvanBlZyIsCiAgICAgICAgcHJlZmVyQW5pbWF0aW9uOiBmYWxzZQogICAgICB9KTsKICAgICAgcmV0dXJuIChhd2FpdCBkZWNvZGVyLmRlY29kZSgpKS5pbWFnZTsKICAgIH0gY2F0Y2ggKHJlYXNvbikgewogICAgICB3YXJuKGBnZXRUcmFuc2ZlcmFibGVJbWFnZSAtIGZhaWxlZDogIiR7cmVhc29ufSIuYCk7CiAgICAgIHJldHVybiBudWxsOwogICAgfSBmaW5hbGx5IHsKICAgICAgZGVjb2Rlcj8uY2xvc2UoKTsKICAgIH0KICB9Cn0KCjsvLyAuL2V4dGVybmFsL29wZW5qcGVnL29wZW5qcGVnLmpzCgoKCgoKCgoKCgoKCnZhciBPcGVuSlBFRyA9ICgoKSA9PiB7CiAgcmV0dXJuIGFzeW5jIGZ1bmN0aW9uIChtb2R1bGVBcmcgPSB7fSkgewogICAgdmFyIG1vZHVsZVJ0bjsKICAgIHZhciBNb2R1bGUgPSBtb2R1bGVBcmc7CiAgICB2YXIgcmVhZHlQcm9taXNlUmVzb2x2ZSwgcmVhZHlQcm9taXNlUmVqZWN0OwogICAgdmFyIHJlYWR5UHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsKICAgICAgcmVhZHlQcm9taXNlUmVzb2x2ZSA9IHJlc29sdmU7CiAgICAgIHJlYWR5UHJvbWlzZVJlamVjdCA9IHJlamVjdDsKICAgIH0pOwogICAgdmFyIEVOVklST05NRU5UX0lTX1dFQiA9IHRydWU7CiAgICB2YXIgRU5WSVJPTk1FTlRfSVNfV09SS0VSID0gZmFsc2U7CiAgICB2YXIgYXJndW1lbnRzXyA9IFtdOwogICAgdmFyIHRoaXNQcm9ncmFtID0gIi4vdGhpcy5wcm9ncmFtIjsKICAgIHZhciBxdWl0XyA9IChzdGF0dXMsIHRvVGhyb3cpID0+IHsKICAgICAgdGhyb3cgdG9UaHJvdzsKICAgIH07CiAgICB2YXIgX3NjcmlwdE5hbWUgPSBpbXBvcnQubWV0YS51cmw7CiAgICB2YXIgc2NyaXB0RGlyZWN0b3J5ID0gIiI7CiAgICB2YXIgcmVhZEFzeW5jLCByZWFkQmluYXJ5OwogICAgaWYgKEVOVklST05NRU5UX0lTX1dFQiB8fCBFTlZJUk9OTUVOVF9JU19XT1JLRVIpIHsKICAgICAgdHJ5IHsKICAgICAgICBzY3JpcHREaXJlY3RvcnkgPSBuZXcgVVJMKCIuIiwgX3NjcmlwdE5hbWUpLmhyZWY7CiAgICAgIH0gY2F0Y2gge30KICAgICAgcmVhZEFzeW5jID0gYXN5bmMgdXJsID0+IHsKICAgICAgICB2YXIgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIHsKICAgICAgICAgIGNyZWRlbnRpYWxzOiAic2FtZS1vcmlnaW4iCiAgICAgICAgfSk7CiAgICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7CiAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKTsKICAgICAgICB9CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlc3BvbnNlLnN0YXR1cyArICIgOiAiICsgcmVzcG9uc2UudXJsKTsKICAgICAgfTsKICAgIH0gZWxzZSB7fQogICAgdmFyIG91dCA9IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSk7CiAgICB2YXIgZXJyID0gY29uc29sZS5lcnJvci5iaW5kKGNvbnNvbGUpOwogICAgdmFyIHdhc21CaW5hcnk7CiAgICB2YXIgd2FzbU1lbW9yeTsKICAgIHZhciBBQk9SVCA9IGZhbHNlOwogICAgdmFyIEVYSVRTVEFUVVM7CiAgICB2YXIgSEVBUDgsIEhFQVBVOCwgSEVBUDE2LCBIRUFQVTE2LCBIRUFQMzIsIEhFQVBVMzIsIEhFQVBGMzIsIEhFQVA2NCwgSEVBUFU2NCwgSEVBUEY2NDsKICAgIHZhciBydW50aW1lSW5pdGlhbGl6ZWQgPSBmYWxzZTsKICAgIGZ1bmN0aW9uIHVwZGF0ZU1lbW9yeVZpZXdzKCkgewogICAgICB2YXIgYiA9IHdhc21NZW1vcnkuYnVmZmVyOwogICAgICBIRUFQOCA9IG5ldyBJbnQ4QXJyYXkoYik7CiAgICAgIEhFQVAxNiA9IG5ldyBJbnQxNkFycmF5KGIpOwogICAgICBIRUFQVTggPSBuZXcgVWludDhBcnJheShiKTsKICAgICAgSEVBUFUxNiA9IG5ldyBVaW50MTZBcnJheShiKTsKICAgICAgSEVBUDMyID0gbmV3IEludDMyQXJyYXkoYik7CiAgICAgIEhFQVBVMzIgPSBuZXcgVWludDMyQXJyYXkoYik7CiAgICAgIEhFQVBGMzIgPSBuZXcgRmxvYXQzMkFycmF5KGIpOwogICAgICBIRUFQRjY0ID0gbmV3IEZsb2F0NjRBcnJheShiKTsKICAgICAgSEVBUDY0ID0gbmV3IEJpZ0ludDY0QXJyYXkoYik7CiAgICAgIEhFQVBVNjQgPSBuZXcgQmlnVWludDY0QXJyYXkoYik7CiAgICB9CiAgICBmdW5jdGlvbiBwcmVSdW4oKSB7CiAgICAgIGlmIChNb2R1bGVbInByZVJ1biJdKSB7CiAgICAgICAgaWYgKHR5cGVvZiBNb2R1bGVbInByZVJ1biJdID09ICJmdW5jdGlvbiIpIE1vZHVsZVsicHJlUnVuIl0gPSBbTW9kdWxlWyJwcmVSdW4iXV07CiAgICAgICAgd2hpbGUgKE1vZHVsZVsicHJlUnVuIl0ubGVuZ3RoKSB7CiAgICAgICAgICBhZGRPblByZVJ1bihNb2R1bGVbInByZVJ1biJdLnNoaWZ0KCkpOwogICAgICAgIH0KICAgICAgfQogICAgICBjYWxsUnVudGltZUNhbGxiYWNrcyhvblByZVJ1bnMpOwogICAgfQogICAgZnVuY3Rpb24gaW5pdFJ1bnRpbWUoKSB7CiAgICAgIHJ1bnRpbWVJbml0aWFsaXplZCA9IHRydWU7CiAgICAgIHdhc21FeHBvcnRzWyJ0Il0oKTsKICAgIH0KICAgIGZ1bmN0aW9uIHBvc3RSdW4oKSB7CiAgICAgIGlmIChNb2R1bGVbInBvc3RSdW4iXSkgewogICAgICAgIGlmICh0eXBlb2YgTW9kdWxlWyJwb3N0UnVuIl0gPT0gImZ1bmN0aW9uIikgTW9kdWxlWyJwb3N0UnVuIl0gPSBbTW9kdWxlWyJwb3N0UnVuIl1dOwogICAgICAgIHdoaWxlIChNb2R1bGVbInBvc3RSdW4iXS5sZW5ndGgpIHsKICAgICAgICAgIGFkZE9uUG9zdFJ1bihNb2R1bGVbInBvc3RSdW4iXS5zaGlmdCgpKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgY2FsbFJ1bnRpbWVDYWxsYmFja3Mob25Qb3N0UnVucyk7CiAgICB9CiAgICB2YXIgcnVuRGVwZW5kZW5jaWVzID0gMDsKICAgIHZhciBkZXBlbmRlbmNpZXNGdWxmaWxsZWQgPSBudWxsOwogICAgZnVuY3Rpb24gYWRkUnVuRGVwZW5kZW5jeShpZCkgewogICAgICBydW5EZXBlbmRlbmNpZXMrKzsKICAgICAgTW9kdWxlWyJtb25pdG9yUnVuRGVwZW5kZW5jaWVzIl0/LihydW5EZXBlbmRlbmNpZXMpOwogICAgfQogICAgZnVuY3Rpb24gcmVtb3ZlUnVuRGVwZW5kZW5jeShpZCkgewogICAgICBydW5EZXBlbmRlbmNpZXMtLTsKICAgICAgTW9kdWxlWyJtb25pdG9yUnVuRGVwZW5kZW5jaWVzIl0/LihydW5EZXBlbmRlbmNpZXMpOwogICAgICBpZiAocnVuRGVwZW5kZW5jaWVzID09IDApIHsKICAgICAgICBpZiAoZGVwZW5kZW5jaWVzRnVsZmlsbGVkKSB7CiAgICAgICAgICB2YXIgY2FsbGJhY2sgPSBkZXBlbmRlbmNpZXNGdWxmaWxsZWQ7CiAgICAgICAgICBkZXBlbmRlbmNpZXNGdWxmaWxsZWQgPSBudWxsOwogICAgICAgICAgY2FsbGJhY2soKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIGZ1bmN0aW9uIGFib3J0KHdoYXQpIHsKICAgICAgTW9kdWxlWyJvbkFib3J0Il0/Lih3aGF0KTsKICAgICAgd2hhdCA9ICJBYm9ydGVkKCIgKyB3aGF0ICsgIikiOwogICAgICBlcnIod2hhdCk7CiAgICAgIEFCT1JUID0gdHJ1ZTsKICAgICAgd2hhdCArPSAiLiBCdWlsZCB3aXRoIC1zQVNTRVJUSU9OUyBmb3IgbW9yZSBpbmZvLiI7CiAgICAgIHZhciBlID0gbmV3IFdlYkFzc2VtYmx5LlJ1bnRpbWVFcnJvcih3aGF0KTsKICAgICAgcmVhZHlQcm9taXNlUmVqZWN0KGUpOwogICAgICB0aHJvdyBlOwogICAgfQogICAgdmFyIHdhc21CaW5hcnlGaWxlOwogICAgZnVuY3Rpb24gZ2V0V2FzbUltcG9ydHMoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgYTogd2FzbUltcG9ydHMKICAgICAgfTsKICAgIH0KICAgIGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVdhc20oKSB7CiAgICAgIGZ1bmN0aW9uIHJlY2VpdmVJbnN0YW5jZShpbnN0YW5jZSwgbW9kdWxlKSB7CiAgICAgICAgd2FzbUV4cG9ydHMgPSBpbnN0YW5jZS5leHBvcnRzOwogICAgICAgIHdhc21NZW1vcnkgPSB3YXNtRXhwb3J0c1sicyJdOwogICAgICAgIHVwZGF0ZU1lbW9yeVZpZXdzKCk7CiAgICAgICAgcmVtb3ZlUnVuRGVwZW5kZW5jeSgid2FzbS1pbnN0YW50aWF0ZSIpOwogICAgICAgIHJldHVybiB3YXNtRXhwb3J0czsKICAgICAgfQogICAgICBhZGRSdW5EZXBlbmRlbmN5KCJ3YXNtLWluc3RhbnRpYXRlIik7CiAgICAgIHZhciBpbmZvID0gZ2V0V2FzbUltcG9ydHMoKTsKICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsKICAgICAgICBNb2R1bGVbImluc3RhbnRpYXRlV2FzbSJdKGluZm8sIChtb2QsIGluc3QpID0+IHsKICAgICAgICAgIHJlc29sdmUocmVjZWl2ZUluc3RhbmNlKG1vZCwgaW5zdCkpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICAgIGNsYXNzIEV4aXRTdGF0dXMgewogICAgICBuYW1lID0gIkV4aXRTdGF0dXMiOwogICAgICBjb25zdHJ1Y3RvcihzdGF0dXMpIHsKICAgICAgICB0aGlzLm1lc3NhZ2UgPSBgUHJvZ3JhbSB0ZXJtaW5hdGVkIHdpdGggZXhpdCgke3N0YXR1c30pYDsKICAgICAgICB0aGlzLnN0YXR1cyA9IHN0YXR1czsKICAgICAgfQogICAgfQogICAgdmFyIGNhbGxSdW50aW1lQ2FsbGJhY2tzID0gY2FsbGJhY2tzID0+IHsKICAgICAgd2hpbGUgKGNhbGxiYWNrcy5sZW5ndGggPiAwKSB7CiAgICAgICAgY2FsbGJhY2tzLnNoaWZ0KCkoTW9kdWxlKTsKICAgICAgfQogICAgfTsKICAgIHZhciBvblBvc3RSdW5zID0gW107CiAgICB2YXIgYWRkT25Qb3N0UnVuID0gY2IgPT4gb25Qb3N0UnVucy5wdXNoKGNiKTsKICAgIHZhciBvblByZVJ1bnMgPSBbXTsKICAgIHZhciBhZGRPblByZVJ1biA9IGNiID0+IG9uUHJlUnVucy5wdXNoKGNiKTsKICAgIHZhciBub0V4aXRSdW50aW1lID0gdHJ1ZTsKICAgIHZhciBfX2Fib3J0X2pzID0gKCkgPT4gYWJvcnQoIiIpOwogICAgdmFyIHJ1bnRpbWVLZWVwYWxpdmVDb3VudGVyID0gMDsKICAgIHZhciBfX2Vtc2NyaXB0ZW5fcnVudGltZV9rZWVwYWxpdmVfY2xlYXIgPSAoKSA9PiB7CiAgICAgIG5vRXhpdFJ1bnRpbWUgPSBmYWxzZTsKICAgICAgcnVudGltZUtlZXBhbGl2ZUNvdW50ZXIgPSAwOwogICAgfTsKICAgIHZhciB0aW1lcnMgPSB7fTsKICAgIHZhciBoYW5kbGVFeGNlcHRpb24gPSBlID0+IHsKICAgICAgaWYgKGUgaW5zdGFuY2VvZiBFeGl0U3RhdHVzIHx8IGUgPT0gInVud2luZCIpIHsKICAgICAgICByZXR1cm4gRVhJVFNUQVRVUzsKICAgICAgfQogICAgICBxdWl0XygxLCBlKTsKICAgIH07CiAgICB2YXIga2VlcFJ1bnRpbWVBbGl2ZSA9ICgpID0+IG5vRXhpdFJ1bnRpbWUgfHwgcnVudGltZUtlZXBhbGl2ZUNvdW50ZXIgPiAwOwogICAgdmFyIF9wcm9jX2V4aXQgPSBjb2RlID0+IHsKICAgICAgRVhJVFNUQVRVUyA9IGNvZGU7CiAgICAgIGlmICgha2VlcFJ1bnRpbWVBbGl2ZSgpKSB7CiAgICAgICAgTW9kdWxlWyJvbkV4aXQiXT8uKGNvZGUpOwogICAgICAgIEFCT1JUID0gdHJ1ZTsKICAgICAgfQogICAgICBxdWl0Xyhjb2RlLCBuZXcgRXhpdFN0YXR1cyhjb2RlKSk7CiAgICB9OwogICAgdmFyIGV4aXRKUyA9IChzdGF0dXMsIGltcGxpY2l0KSA9PiB7CiAgICAgIEVYSVRTVEFUVVMgPSBzdGF0dXM7CiAgICAgIF9wcm9jX2V4aXQoc3RhdHVzKTsKICAgIH07CiAgICB2YXIgX2V4aXQgPSBleGl0SlM7CiAgICB2YXIgbWF5YmVFeGl0ID0gKCkgPT4gewogICAgICBpZiAoIWtlZXBSdW50aW1lQWxpdmUoKSkgewogICAgICAgIHRyeSB7CiAgICAgICAgICBfZXhpdChFWElUU1RBVFVTKTsKICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICBoYW5kbGVFeGNlcHRpb24oZSk7CiAgICAgICAgfQogICAgICB9CiAgICB9OwogICAgdmFyIGNhbGxVc2VyQ2FsbGJhY2sgPSBmdW5jID0+IHsKICAgICAgaWYgKEFCT1JUKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIHRyeSB7CiAgICAgICAgZnVuYygpOwogICAgICAgIG1heWJlRXhpdCgpOwogICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgaGFuZGxlRXhjZXB0aW9uKGUpOwogICAgICB9CiAgICB9OwogICAgdmFyIF9lbXNjcmlwdGVuX2dldF9ub3cgPSAoKSA9PiBwZXJmb3JtYW5jZS5ub3coKTsKICAgIHZhciBfX3NldGl0aW1lcl9qcyA9ICh3aGljaCwgdGltZW91dF9tcykgPT4gewogICAgICBpZiAodGltZXJzW3doaWNoXSkgewogICAgICAgIGNsZWFyVGltZW91dCh0aW1lcnNbd2hpY2hdLmlkKTsKICAgICAgICBkZWxldGUgdGltZXJzW3doaWNoXTsKICAgICAgfQogICAgICBpZiAoIXRpbWVvdXRfbXMpIHJldHVybiAwOwogICAgICB2YXIgaWQgPSBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICBkZWxldGUgdGltZXJzW3doaWNoXTsKICAgICAgICBjYWxsVXNlckNhbGxiYWNrKCgpID0+IF9fZW1zY3JpcHRlbl90aW1lb3V0KHdoaWNoLCBfZW1zY3JpcHRlbl9nZXRfbm93KCkpKTsKICAgICAgfSwgdGltZW91dF9tcyk7CiAgICAgIHRpbWVyc1t3aGljaF0gPSB7CiAgICAgICAgaWQsCiAgICAgICAgdGltZW91dF9tcwogICAgICB9OwogICAgICByZXR1cm4gMDsKICAgIH07CiAgICBmdW5jdGlvbiBfY29weV9waXhlbHNfMShjb21wR19wdHIsIG5iX3BpeGVscykgewogICAgICBjb21wR19wdHIgPj49IDI7CiAgICAgIGNvbnN0IGltYWdlRGF0YSA9IE1vZHVsZS5pbWFnZURhdGEgPSBuZXcgVWludDhDbGFtcGVkQXJyYXkobmJfcGl4ZWxzKTsKICAgICAgY29uc3QgY29tcEcgPSBIRUFQMzIuc3ViYXJyYXkoY29tcEdfcHRyLCBjb21wR19wdHIgKyBuYl9waXhlbHMpOwogICAgICBpbWFnZURhdGEuc2V0KGNvbXBHKTsKICAgIH0KICAgIGZ1bmN0aW9uIF9jb3B5X3BpeGVsc18zKGNvbXBSX3B0ciwgY29tcEdfcHRyLCBjb21wQl9wdHIsIG5iX3BpeGVscykgewogICAgICBjb21wUl9wdHIgPj49IDI7CiAgICAgIGNvbXBHX3B0ciA+Pj0gMjsKICAgICAgY29tcEJfcHRyID4+PSAyOwogICAgICBjb25zdCBpbWFnZURhdGEgPSBNb2R1bGUuaW1hZ2VEYXRhID0gbmV3IFVpbnQ4Q2xhbXBlZEFycmF5KG5iX3BpeGVscyAqIDMpOwogICAgICBjb25zdCBjb21wUiA9IEhFQVAzMi5zdWJhcnJheShjb21wUl9wdHIsIGNvbXBSX3B0ciArIG5iX3BpeGVscyk7CiAgICAgIGNvbnN0IGNvbXBHID0gSEVBUDMyLnN1YmFycmF5KGNvbXBHX3B0ciwgY29tcEdfcHRyICsgbmJfcGl4ZWxzKTsKICAgICAgY29uc3QgY29tcEIgPSBIRUFQMzIuc3ViYXJyYXkoY29tcEJfcHRyLCBjb21wQl9wdHIgKyBuYl9waXhlbHMpOwogICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5iX3BpeGVsczsgaSsrKSB7CiAgICAgICAgaW1hZ2VEYXRhWzMgKiBpXSA9IGNvbXBSW2ldOwogICAgICAgIGltYWdlRGF0YVszICogaSArIDFdID0gY29tcEdbaV07CiAgICAgICAgaW1hZ2VEYXRhWzMgKiBpICsgMl0gPSBjb21wQltpXTsKICAgICAgfQogICAgfQogICAgZnVuY3Rpb24gX2NvcHlfcGl4ZWxzXzQoY29tcFJfcHRyLCBjb21wR19wdHIsIGNvbXBCX3B0ciwgY29tcEFfcHRyLCBuYl9waXhlbHMpIHsKICAgICAgY29tcFJfcHRyID4+PSAyOwogICAgICBjb21wR19wdHIgPj49IDI7CiAgICAgIGNvbXBCX3B0ciA+Pj0gMjsKICAgICAgY29tcEFfcHRyID4+PSAyOwogICAgICBjb25zdCBpbWFnZURhdGEgPSBNb2R1bGUuaW1hZ2VEYXRhID0gbmV3IFVpbnQ4Q2xhbXBlZEFycmF5KG5iX3BpeGVscyAqIDQpOwogICAgICBjb25zdCBjb21wUiA9IEhFQVAzMi5zdWJhcnJheShjb21wUl9wdHIsIGNvbXBSX3B0ciArIG5iX3BpeGVscyk7CiAgICAgIGNvbnN0IGNvbXBHID0gSEVBUDMyLnN1YmFycmF5KGNvbXBHX3B0ciwgY29tcEdfcHRyICsgbmJfcGl4ZWxzKTsKICAgICAgY29uc3QgY29tcEIgPSBIRUFQMzIuc3ViYXJyYXkoY29tcEJfcHRyLCBjb21wQl9wdHIgKyBuYl9waXhlbHMpOwogICAgICBjb25zdCBjb21wQSA9IEhFQVAzMi5zdWJhcnJheShjb21wQV9wdHIsIGNvbXBBX3B0ciArIG5iX3BpeGVscyk7CiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmJfcGl4ZWxzOyBpKyspIHsKICAgICAgICBpbWFnZURhdGFbNCAqIGldID0gY29tcFJbaV07CiAgICAgICAgaW1hZ2VEYXRhWzQgKiBpICsgMV0gPSBjb21wR1tpXTsKICAgICAgICBpbWFnZURhdGFbNCAqIGkgKyAyXSA9IGNvbXBCW2ldOwogICAgICAgIGltYWdlRGF0YVs0ICogaSArIDNdID0gY29tcEFbaV07CiAgICAgIH0KICAgIH0KICAgIHZhciBnZXRIZWFwTWF4ID0gKCkgPT4gMjE0NzQ4MzY0ODsKICAgIHZhciBhbGlnbk1lbW9yeSA9IChzaXplLCBhbGlnbm1lbnQpID0+IE1hdGguY2VpbChzaXplIC8gYWxpZ25tZW50KSAqIGFsaWdubWVudDsKICAgIHZhciBncm93TWVtb3J5ID0gc2l6ZSA9PiB7CiAgICAgIHZhciBiID0gd2FzbU1lbW9yeS5idWZmZXI7CiAgICAgIHZhciBwYWdlcyA9IChzaXplIC0gYi5ieXRlTGVuZ3RoICsgNjU1MzUpIC8gNjU1MzYgfCAwOwogICAgICB0cnkgewogICAgICAgIHdhc21NZW1vcnkuZ3JvdyhwYWdlcyk7CiAgICAgICAgdXBkYXRlTWVtb3J5Vmlld3MoKTsKICAgICAgICByZXR1cm4gMTsKICAgICAgfSBjYXRjaCAoZSkge30KICAgIH07CiAgICB2YXIgX2Vtc2NyaXB0ZW5fcmVzaXplX2hlYXAgPSByZXF1ZXN0ZWRTaXplID0+IHsKICAgICAgdmFyIG9sZFNpemUgPSBIRUFQVTgubGVuZ3RoOwogICAgICByZXF1ZXN0ZWRTaXplID4+Pj0gMDsKICAgICAgdmFyIG1heEhlYXBTaXplID0gZ2V0SGVhcE1heCgpOwogICAgICBpZiAocmVxdWVzdGVkU2l6ZSA+IG1heEhlYXBTaXplKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICAgIGZvciAodmFyIGN1dERvd24gPSAxOyBjdXREb3duIDw9IDQ7IGN1dERvd24gKj0gMikgewogICAgICAgIHZhciBvdmVyR3Jvd25IZWFwU2l6ZSA9IG9sZFNpemUgKiAoMSArIC4yIC8gY3V0RG93bik7CiAgICAgICAgb3Zlckdyb3duSGVhcFNpemUgPSBNYXRoLm1pbihvdmVyR3Jvd25IZWFwU2l6ZSwgcmVxdWVzdGVkU2l6ZSArIDEwMDY2MzI5Nik7CiAgICAgICAgdmFyIG5ld1NpemUgPSBNYXRoLm1pbihtYXhIZWFwU2l6ZSwgYWxpZ25NZW1vcnkoTWF0aC5tYXgocmVxdWVzdGVkU2l6ZSwgb3Zlckdyb3duSGVhcFNpemUpLCA2NTUzNikpOwogICAgICAgIHZhciByZXBsYWNlbWVudCA9IGdyb3dNZW1vcnkobmV3U2l6ZSk7CiAgICAgICAgaWYgKHJlcGxhY2VtZW50KSB7CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIGZhbHNlOwogICAgfTsKICAgIHZhciBFTlYgPSB7fTsKICAgIHZhciBnZXRFeGVjdXRhYmxlTmFtZSA9ICgpID0+IHRoaXNQcm9ncmFtIHx8ICIuL3RoaXMucHJvZ3JhbSI7CiAgICB2YXIgZ2V0RW52U3RyaW5ncyA9ICgpID0+IHsKICAgICAgaWYgKCFnZXRFbnZTdHJpbmdzLnN0cmluZ3MpIHsKICAgICAgICB2YXIgbGFuZyA9ICh0eXBlb2YgbmF2aWdhdG9yID09ICJvYmplY3QiICYmIG5hdmlnYXRvci5sYW5ndWFnZXMgJiYgbmF2aWdhdG9yLmxhbmd1YWdlc1swXSB8fCAiQyIpLnJlcGxhY2UoIi0iLCAiXyIpICsgIi5VVEYtOCI7CiAgICAgICAgdmFyIGVudiA9IHsKICAgICAgICAgIFVTRVI6ICJ3ZWJfdXNlciIsCiAgICAgICAgICBMT0dOQU1FOiAid2ViX3VzZXIiLAogICAgICAgICAgUEFUSDogIi8iLAogICAgICAgICAgUFdEOiAiLyIsCiAgICAgICAgICBIT01FOiAiL2hvbWUvd2ViX3VzZXIiLAogICAgICAgICAgTEFORzogbGFuZywKICAgICAgICAgIF86IGdldEV4ZWN1dGFibGVOYW1lKCkKICAgICAgICB9OwogICAgICAgIGZvciAodmFyIHggaW4gRU5WKSB7CiAgICAgICAgICBpZiAoRU5WW3hdID09PSB1bmRlZmluZWQpIGRlbGV0ZSBlbnZbeF07ZWxzZSBlbnZbeF0gPSBFTlZbeF07CiAgICAgICAgfQogICAgICAgIHZhciBzdHJpbmdzID0gW107CiAgICAgICAgZm9yICh2YXIgeCBpbiBlbnYpIHsKICAgICAgICAgIHN0cmluZ3MucHVzaChgJHt4fT0ke2Vudlt4XX1gKTsKICAgICAgICB9CiAgICAgICAgZ2V0RW52U3RyaW5ncy5zdHJpbmdzID0gc3RyaW5nczsKICAgICAgfQogICAgICByZXR1cm4gZ2V0RW52U3RyaW5ncy5zdHJpbmdzOwogICAgfTsKICAgIHZhciBzdHJpbmdUb1VURjhBcnJheSA9IChzdHIsIGhlYXAsIG91dElkeCwgbWF4Qnl0ZXNUb1dyaXRlKSA9PiB7CiAgICAgIGlmICghKG1heEJ5dGVzVG9Xcml0ZSA+IDApKSByZXR1cm4gMDsKICAgICAgdmFyIHN0YXJ0SWR4ID0gb3V0SWR4OwogICAgICB2YXIgZW5kSWR4ID0gb3V0SWR4ICsgbWF4Qnl0ZXNUb1dyaXRlIC0gMTsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHsKICAgICAgICB2YXIgdSA9IHN0ci5jaGFyQ29kZUF0KGkpOwogICAgICAgIGlmICh1ID49IDU1Mjk2ICYmIHUgPD0gNTczNDMpIHsKICAgICAgICAgIHZhciB1MSA9IHN0ci5jaGFyQ29kZUF0KCsraSk7CiAgICAgICAgICB1ID0gNjU1MzYgKyAoKHUgJiAxMDIzKSA8PCAxMCkgfCB1MSAmIDEwMjM7CiAgICAgICAgfQogICAgICAgIGlmICh1IDw9IDEyNykgewogICAgICAgICAgaWYgKG91dElkeCA+PSBlbmRJZHgpIGJyZWFrOwogICAgICAgICAgaGVhcFtvdXRJZHgrK10gPSB1OwogICAgICAgIH0gZWxzZSBpZiAodSA8PSAyMDQ3KSB7CiAgICAgICAgICBpZiAob3V0SWR4ICsgMSA+PSBlbmRJZHgpIGJyZWFrOwogICAgICAgICAgaGVhcFtvdXRJZHgrK10gPSAxOTIgfCB1ID4+IDY7CiAgICAgICAgICBoZWFwW291dElkeCsrXSA9IDEyOCB8IHUgJiA2MzsKICAgICAgICB9IGVsc2UgaWYgKHUgPD0gNjU1MzUpIHsKICAgICAgICAgIGlmIChvdXRJZHggKyAyID49IGVuZElkeCkgYnJlYWs7CiAgICAgICAgICBoZWFwW291dElkeCsrXSA9IDIyNCB8IHUgPj4gMTI7CiAgICAgICAgICBoZWFwW291dElkeCsrXSA9IDEyOCB8IHUgPj4gNiAmIDYzOwogICAgICAgICAgaGVhcFtvdXRJZHgrK10gPSAxMjggfCB1ICYgNjM7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGlmIChvdXRJZHggKyAzID49IGVuZElkeCkgYnJlYWs7CiAgICAgICAgICBoZWFwW291dElkeCsrXSA9IDI0MCB8IHUgPj4gMTg7CiAgICAgICAgICBoZWFwW291dElkeCsrXSA9IDEyOCB8IHUgPj4gMTIgJiA2MzsKICAgICAgICAgIGhlYXBbb3V0SWR4KytdID0gMTI4IHwgdSA+PiA2ICYgNjM7CiAgICAgICAgICBoZWFwW291dElkeCsrXSA9IDEyOCB8IHUgJiA2MzsKICAgICAgICB9CiAgICAgIH0KICAgICAgaGVhcFtvdXRJZHhdID0gMDsKICAgICAgcmV0dXJuIG91dElkeCAtIHN0YXJ0SWR4OwogICAgfTsKICAgIHZhciBzdHJpbmdUb1VURjggPSAoc3RyLCBvdXRQdHIsIG1heEJ5dGVzVG9Xcml0ZSkgPT4gc3RyaW5nVG9VVEY4QXJyYXkoc3RyLCBIRUFQVTgsIG91dFB0ciwgbWF4Qnl0ZXNUb1dyaXRlKTsKICAgIHZhciBfZW52aXJvbl9nZXQgPSAoX19lbnZpcm9uLCBlbnZpcm9uX2J1ZikgPT4gewogICAgICB2YXIgYnVmU2l6ZSA9IDA7CiAgICAgIHZhciBlbnZwID0gMDsKICAgICAgZm9yICh2YXIgc3RyaW5nIG9mIGdldEVudlN0cmluZ3MoKSkgewogICAgICAgIHZhciBwdHIgPSBlbnZpcm9uX2J1ZiArIGJ1ZlNpemU7CiAgICAgICAgSEVBUFUzMltfX2Vudmlyb24gKyBlbnZwID4+IDJdID0gcHRyOwogICAgICAgIGJ1ZlNpemUgKz0gc3RyaW5nVG9VVEY4KHN0cmluZywgcHRyLCBJbmZpbml0eSkgKyAxOwogICAgICAgIGVudnAgKz0gNDsKICAgICAgfQogICAgICByZXR1cm4gMDsKICAgIH07CiAgICB2YXIgbGVuZ3RoQnl0ZXNVVEY4ID0gc3RyID0+IHsKICAgICAgdmFyIGxlbiA9IDA7CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7CiAgICAgICAgdmFyIGMgPSBzdHIuY2hhckNvZGVBdChpKTsKICAgICAgICBpZiAoYyA8PSAxMjcpIHsKICAgICAgICAgIGxlbisrOwogICAgICAgIH0gZWxzZSBpZiAoYyA8PSAyMDQ3KSB7CiAgICAgICAgICBsZW4gKz0gMjsKICAgICAgICB9IGVsc2UgaWYgKGMgPj0gNTUyOTYgJiYgYyA8PSA1NzM0MykgewogICAgICAgICAgbGVuICs9IDQ7CiAgICAgICAgICArK2k7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGxlbiArPSAzOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gbGVuOwogICAgfTsKICAgIHZhciBfZW52aXJvbl9zaXplc19nZXQgPSAocGVudmlyb25fY291bnQsIHBlbnZpcm9uX2J1Zl9zaXplKSA9PiB7CiAgICAgIHZhciBzdHJpbmdzID0gZ2V0RW52U3RyaW5ncygpOwogICAgICBIRUFQVTMyW3BlbnZpcm9uX2NvdW50ID4+IDJdID0gc3RyaW5ncy5sZW5ndGg7CiAgICAgIHZhciBidWZTaXplID0gMDsKICAgICAgZm9yICh2YXIgc3RyaW5nIG9mIHN0cmluZ3MpIHsKICAgICAgICBidWZTaXplICs9IGxlbmd0aEJ5dGVzVVRGOChzdHJpbmcpICsgMTsKICAgICAgfQogICAgICBIRUFQVTMyW3BlbnZpcm9uX2J1Zl9zaXplID4+IDJdID0gYnVmU2l6ZTsKICAgICAgcmV0dXJuIDA7CiAgICB9OwogICAgdmFyIF9mZF9jbG9zZSA9IGZkID0+IDUyOwogICAgdmFyIElOVDUzX01BWCA9IDkwMDcxOTkyNTQ3NDA5OTI7CiAgICB2YXIgSU5UNTNfTUlOID0gLTkwMDcxOTkyNTQ3NDA5OTI7CiAgICB2YXIgYmlnaW50VG9JNTNDaGVja2VkID0gbnVtID0+IG51bSA8IElOVDUzX01JTiB8fCBudW0gPiBJTlQ1M19NQVggPyBOYU4gOiBOdW1iZXIobnVtKTsKICAgIGZ1bmN0aW9uIF9mZF9zZWVrKGZkLCBvZmZzZXQsIHdoZW5jZSwgbmV3T2Zmc2V0KSB7CiAgICAgIG9mZnNldCA9IGJpZ2ludFRvSTUzQ2hlY2tlZChvZmZzZXQpOwogICAgICByZXR1cm4gNzA7CiAgICB9CiAgICB2YXIgcHJpbnRDaGFyQnVmZmVycyA9IFtudWxsLCBbXSwgW11dOwogICAgdmFyIFVURjhEZWNvZGVyID0gdHlwZW9mIFRleHREZWNvZGVyICE9ICJ1bmRlZmluZWQiID8gbmV3IFRleHREZWNvZGVyKCkgOiB1bmRlZmluZWQ7CiAgICB2YXIgVVRGOEFycmF5VG9TdHJpbmcgPSAoaGVhcE9yQXJyYXksIGlkeCA9IDAsIG1heEJ5dGVzVG9SZWFkID0gTmFOKSA9PiB7CiAgICAgIHZhciBlbmRJZHggPSBpZHggKyBtYXhCeXRlc1RvUmVhZDsKICAgICAgdmFyIGVuZFB0ciA9IGlkeDsKICAgICAgd2hpbGUgKGhlYXBPckFycmF5W2VuZFB0cl0gJiYgIShlbmRQdHIgPj0gZW5kSWR4KSkgKytlbmRQdHI7CiAgICAgIGlmIChlbmRQdHIgLSBpZHggPiAxNiAmJiBoZWFwT3JBcnJheS5idWZmZXIgJiYgVVRGOERlY29kZXIpIHsKICAgICAgICByZXR1cm4gVVRGOERlY29kZXIuZGVjb2RlKGhlYXBPckFycmF5LnN1YmFycmF5KGlkeCwgZW5kUHRyKSk7CiAgICAgIH0KICAgICAgdmFyIHN0ciA9ICIiOwogICAgICB3aGlsZSAoaWR4IDwgZW5kUHRyKSB7CiAgICAgICAgdmFyIHUwID0gaGVhcE9yQXJyYXlbaWR4KytdOwogICAgICAgIGlmICghKHUwICYgMTI4KSkgewogICAgICAgICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUodTApOwogICAgICAgICAgY29udGludWU7CiAgICAgICAgfQogICAgICAgIHZhciB1MSA9IGhlYXBPckFycmF5W2lkeCsrXSAmIDYzOwogICAgICAgIGlmICgodTAgJiAyMjQpID09IDE5MikgewogICAgICAgICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKHUwICYgMzEpIDw8IDYgfCB1MSk7CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CiAgICAgICAgdmFyIHUyID0gaGVhcE9yQXJyYXlbaWR4KytdICYgNjM7CiAgICAgICAgaWYgKCh1MCAmIDI0MCkgPT0gMjI0KSB7CiAgICAgICAgICB1MCA9ICh1MCAmIDE1KSA8PCAxMiB8IHUxIDw8IDYgfCB1MjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdTAgPSAodTAgJiA3KSA8PCAxOCB8IHUxIDw8IDEyIHwgdTIgPDwgNiB8IGhlYXBPckFycmF5W2lkeCsrXSAmIDYzOwogICAgICAgIH0KICAgICAgICBpZiAodTAgPCA2NTUzNikgewogICAgICAgICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUodTApOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB2YXIgY2ggPSB1MCAtIDY1NTM2OwogICAgICAgICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoNTUyOTYgfCBjaCA+PiAxMCwgNTYzMjAgfCBjaCAmIDEwMjMpOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gc3RyOwogICAgfTsKICAgIHZhciBwcmludENoYXIgPSAoc3RyZWFtLCBjdXJyKSA9PiB7CiAgICAgIHZhciBidWZmZXIgPSBwcmludENoYXJCdWZmZXJzW3N0cmVhbV07CiAgICAgIGlmIChjdXJyID09PSAwIHx8IGN1cnIgPT09IDEwKSB7CiAgICAgICAgKHN0cmVhbSA9PT0gMSA/IG91dCA6IGVycikoVVRGOEFycmF5VG9TdHJpbmcoYnVmZmVyKSk7CiAgICAgICAgYnVmZmVyLmxlbmd0aCA9IDA7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgYnVmZmVyLnB1c2goY3Vycik7CiAgICAgIH0KICAgIH07CiAgICB2YXIgVVRGOFRvU3RyaW5nID0gKHB0ciwgbWF4Qnl0ZXNUb1JlYWQpID0+IHB0ciA/IFVURjhBcnJheVRvU3RyaW5nKEhFQVBVOCwgcHRyLCBtYXhCeXRlc1RvUmVhZCkgOiAiIjsKICAgIHZhciBfZmRfd3JpdGUgPSAoZmQsIGlvdiwgaW92Y250LCBwbnVtKSA9PiB7CiAgICAgIHZhciBudW0gPSAwOwogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlvdmNudDsgaSsrKSB7CiAgICAgICAgdmFyIHB0ciA9IEhFQVBVMzJbaW92ID4+IDJdOwogICAgICAgIHZhciBsZW4gPSBIRUFQVTMyW2lvdiArIDQgPj4gMl07CiAgICAgICAgaW92ICs9IDg7CiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBsZW47IGorKykgewogICAgICAgICAgcHJpbnRDaGFyKGZkLCBIRUFQVThbcHRyICsgal0pOwogICAgICAgIH0KICAgICAgICBudW0gKz0gbGVuOwogICAgICB9CiAgICAgIEhFQVBVMzJbcG51bSA+PiAyXSA9IG51bTsKICAgICAgcmV0dXJuIDA7CiAgICB9OwogICAgZnVuY3Rpb24gX2dyYXlfdG9fcmdiYShjb21wR19wdHIsIG5iX3BpeGVscykgewogICAgICBjb21wR19wdHIgPj49IDI7CiAgICAgIGNvbnN0IGltYWdlRGF0YSA9IE1vZHVsZS5pbWFnZURhdGEgPSBuZXcgVWludDhDbGFtcGVkQXJyYXkobmJfcGl4ZWxzICogNCk7CiAgICAgIGNvbnN0IGNvbXBHID0gSEVBUDMyLnN1YmFycmF5KGNvbXBHX3B0ciwgY29tcEdfcHRyICsgbmJfcGl4ZWxzKTsKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuYl9waXhlbHM7IGkrKykgewogICAgICAgIGltYWdlRGF0YVs0ICogaV0gPSBpbWFnZURhdGFbNCAqIGkgKyAxXSA9IGltYWdlRGF0YVs0ICogaSArIDJdID0gY29tcEdbaV07CiAgICAgICAgaW1hZ2VEYXRhWzQgKiBpICsgM10gPSAyNTU7CiAgICAgIH0KICAgIH0KICAgIGZ1bmN0aW9uIF9ncmF5YV90b19yZ2JhKGNvbXBHX3B0ciwgY29tcEFfcHRyLCBuYl9waXhlbHMpIHsKICAgICAgY29tcEdfcHRyID4+PSAyOwogICAgICBjb21wQV9wdHIgPj49IDI7CiAgICAgIGNvbnN0IGltYWdlRGF0YSA9IE1vZHVsZS5pbWFnZURhdGEgPSBuZXcgVWludDhDbGFtcGVkQXJyYXkobmJfcGl4ZWxzICogNCk7CiAgICAgIGNvbnN0IGNvbXBHID0gSEVBUDMyLnN1YmFycmF5KGNvbXBHX3B0ciwgY29tcEdfcHRyICsgbmJfcGl4ZWxzKTsKICAgICAgY29uc3QgY29tcEEgPSBIRUFQMzIuc3ViYXJyYXkoY29tcEFfcHRyLCBjb21wQV9wdHIgKyBuYl9waXhlbHMpOwogICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5iX3BpeGVsczsgaSsrKSB7CiAgICAgICAgaW1hZ2VEYXRhWzQgKiBpXSA9IGltYWdlRGF0YVs0ICogaSArIDFdID0gaW1hZ2VEYXRhWzQgKiBpICsgMl0gPSBjb21wR1tpXTsKICAgICAgICBpbWFnZURhdGFbNCAqIGkgKyAzXSA9IGNvbXBBW2ldOwogICAgICB9CiAgICB9CiAgICBmdW5jdGlvbiBfanNQcmludFdhcm5pbmcobWVzc2FnZV9wdHIpIHsKICAgICAgY29uc3QgbWVzc2FnZSA9IFVURjhUb1N0cmluZyhtZXNzYWdlX3B0cik7CiAgICAgIChNb2R1bGUud2FybiB8fCBjb25zb2xlLndhcm4pKGBPcGVuSlBFRzogJHttZXNzYWdlfWApOwogICAgfQogICAgZnVuY3Rpb24gX3JnYl90b19yZ2JhKGNvbXBSX3B0ciwgY29tcEdfcHRyLCBjb21wQl9wdHIsIG5iX3BpeGVscykgewogICAgICBjb21wUl9wdHIgPj49IDI7CiAgICAgIGNvbXBHX3B0ciA+Pj0gMjsKICAgICAgY29tcEJfcHRyID4+PSAyOwogICAgICBjb25zdCBpbWFnZURhdGEgPSBNb2R1bGUuaW1hZ2VEYXRhID0gbmV3IFVpbnQ4Q2xhbXBlZEFycmF5KG5iX3BpeGVscyAqIDQpOwogICAgICBjb25zdCBjb21wUiA9IEhFQVAzMi5zdWJhcnJheShjb21wUl9wdHIsIGNvbXBSX3B0ciArIG5iX3BpeGVscyk7CiAgICAgIGNvbnN0IGNvbXBHID0gSEVBUDMyLnN1YmFycmF5KGNvbXBHX3B0ciwgY29tcEdfcHRyICsgbmJfcGl4ZWxzKTsKICAgICAgY29uc3QgY29tcEIgPSBIRUFQMzIuc3ViYXJyYXkoY29tcEJfcHRyLCBjb21wQl9wdHIgKyBuYl9waXhlbHMpOwogICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5iX3BpeGVsczsgaSsrKSB7CiAgICAgICAgaW1hZ2VEYXRhWzQgKiBpXSA9IGNvbXBSW2ldOwogICAgICAgIGltYWdlRGF0YVs0ICogaSArIDFdID0gY29tcEdbaV07CiAgICAgICAgaW1hZ2VEYXRhWzQgKiBpICsgMl0gPSBjb21wQltpXTsKICAgICAgICBpbWFnZURhdGFbNCAqIGkgKyAzXSA9IDI1NTsKICAgICAgfQogICAgfQogICAgZnVuY3Rpb24gX3N0b3JlRXJyb3JNZXNzYWdlKG1lc3NhZ2VfcHRyKSB7CiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBVVEY4VG9TdHJpbmcobWVzc2FnZV9wdHIpOwogICAgICBpZiAoIU1vZHVsZS5lcnJvck1lc3NhZ2VzKSB7CiAgICAgICAgTW9kdWxlLmVycm9yTWVzc2FnZXMgPSBtZXNzYWdlOwogICAgICB9IGVsc2UgewogICAgICAgIE1vZHVsZS5lcnJvck1lc3NhZ2VzICs9ICJcbiIgKyBtZXNzYWdlOwogICAgICB9CiAgICB9CiAgICB2YXIgd3JpdGVBcnJheVRvTWVtb3J5ID0gKGFycmF5LCBidWZmZXIpID0+IHsKICAgICAgSEVBUDguc2V0KGFycmF5LCBidWZmZXIpOwogICAgfTsKICAgIGlmIChNb2R1bGVbIm5vRXhpdFJ1bnRpbWUiXSkgbm9FeGl0UnVudGltZSA9IE1vZHVsZVsibm9FeGl0UnVudGltZSJdOwogICAgaWYgKE1vZHVsZVsicHJpbnQiXSkgb3V0ID0gTW9kdWxlWyJwcmludCJdOwogICAgaWYgKE1vZHVsZVsicHJpbnRFcnIiXSkgZXJyID0gTW9kdWxlWyJwcmludEVyciJdOwogICAgaWYgKE1vZHVsZVsid2FzbUJpbmFyeSJdKSB3YXNtQmluYXJ5ID0gTW9kdWxlWyJ3YXNtQmluYXJ5Il07CiAgICBpZiAoTW9kdWxlWyJhcmd1bWVudHMiXSkgYXJndW1lbnRzXyA9IE1vZHVsZVsiYXJndW1lbnRzIl07CiAgICBpZiAoTW9kdWxlWyJ0aGlzUHJvZ3JhbSJdKSB0aGlzUHJvZ3JhbSA9IE1vZHVsZVsidGhpc1Byb2dyYW0iXTsKICAgIE1vZHVsZVsid3JpdGVBcnJheVRvTWVtb3J5Il0gPSB3cml0ZUFycmF5VG9NZW1vcnk7CiAgICB2YXIgd2FzbUltcG9ydHMgPSB7CiAgICAgIGw6IF9fYWJvcnRfanMsCiAgICAgIGs6IF9fZW1zY3JpcHRlbl9ydW50aW1lX2tlZXBhbGl2ZV9jbGVhciwKICAgICAgbTogX19zZXRpdGltZXJfanMsCiAgICAgIGc6IF9jb3B5X3BpeGVsc18xLAogICAgICBmOiBfY29weV9waXhlbHNfMywKICAgICAgZTogX2NvcHlfcGl4ZWxzXzQsCiAgICAgIG46IF9lbXNjcmlwdGVuX3Jlc2l6ZV9oZWFwLAogICAgICBwOiBfZW52aXJvbl9nZXQsCiAgICAgIHE6IF9lbnZpcm9uX3NpemVzX2dldCwKICAgICAgYjogX2ZkX2Nsb3NlLAogICAgICBvOiBfZmRfc2VlaywKICAgICAgYzogX2ZkX3dyaXRlLAogICAgICByOiBfZ3JheV90b19yZ2JhLAogICAgICBpOiBfZ3JheWFfdG9fcmdiYSwKICAgICAgZDogX2pzUHJpbnRXYXJuaW5nLAogICAgICBqOiBfcHJvY19leGl0LAogICAgICBoOiBfcmdiX3RvX3JnYmEsCiAgICAgIGE6IF9zdG9yZUVycm9yTWVzc2FnZQogICAgfTsKICAgIHZhciB3YXNtRXhwb3J0cyA9IGF3YWl0IGNyZWF0ZVdhc20oKTsKICAgIHZhciBfX193YXNtX2NhbGxfY3RvcnMgPSB3YXNtRXhwb3J0c1sidCJdOwogICAgdmFyIF9tYWxsb2MgPSBNb2R1bGVbIl9tYWxsb2MiXSA9IHdhc21FeHBvcnRzWyJ1Il07CiAgICB2YXIgX2ZyZWUgPSBNb2R1bGVbIl9mcmVlIl0gPSB3YXNtRXhwb3J0c1sidiJdOwogICAgdmFyIF9qcDJfZGVjb2RlID0gTW9kdWxlWyJfanAyX2RlY29kZSJdID0gd2FzbUV4cG9ydHNbInciXTsKICAgIHZhciBfX2Vtc2NyaXB0ZW5fdGltZW91dCA9IHdhc21FeHBvcnRzWyJ4Il07CiAgICBmdW5jdGlvbiBydW4oKSB7CiAgICAgIGlmIChydW5EZXBlbmRlbmNpZXMgPiAwKSB7CiAgICAgICAgZGVwZW5kZW5jaWVzRnVsZmlsbGVkID0gcnVuOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBwcmVSdW4oKTsKICAgICAgaWYgKHJ1bkRlcGVuZGVuY2llcyA+IDApIHsKICAgICAgICBkZXBlbmRlbmNpZXNGdWxmaWxsZWQgPSBydW47CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIGRvUnVuKCkgewogICAgICAgIE1vZHVsZVsiY2FsbGVkUnVuIl0gPSB0cnVlOwogICAgICAgIGlmIChBQk9SVCkgcmV0dXJuOwogICAgICAgIGluaXRSdW50aW1lKCk7CiAgICAgICAgcmVhZHlQcm9taXNlUmVzb2x2ZShNb2R1bGUpOwogICAgICAgIE1vZHVsZVsib25SdW50aW1lSW5pdGlhbGl6ZWQiXT8uKCk7CiAgICAgICAgcG9zdFJ1bigpOwogICAgICB9CiAgICAgIGlmIChNb2R1bGVbInNldFN0YXR1cyJdKSB7CiAgICAgICAgTW9kdWxlWyJzZXRTdGF0dXMiXSgiUnVubmluZy4uLiIpOwogICAgICAgIHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgICAgc2V0VGltZW91dCgoKSA9PiBNb2R1bGVbInNldFN0YXR1cyJdKCIiKSwgMSk7CiAgICAgICAgICBkb1J1bigpOwogICAgICAgIH0sIDEpOwogICAgICB9IGVsc2UgewogICAgICAgIGRvUnVuKCk7CiAgICAgIH0KICAgIH0KICAgIGZ1bmN0aW9uIHByZUluaXQoKSB7CiAgICAgIGlmIChNb2R1bGVbInByZUluaXQiXSkgewogICAgICAgIGlmICh0eXBlb2YgTW9kdWxlWyJwcmVJbml0Il0gPT0gImZ1bmN0aW9uIikgTW9kdWxlWyJwcmVJbml0Il0gPSBbTW9kdWxlWyJwcmVJbml0Il1dOwogICAgICAgIHdoaWxlIChNb2R1bGVbInByZUluaXQiXS5sZW5ndGggPiAwKSB7CiAgICAgICAgICBNb2R1bGVbInByZUluaXQiXS5zaGlmdCgpKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBwcmVJbml0KCk7CiAgICBydW4oKTsKICAgIG1vZHVsZVJ0biA9IHJlYWR5UHJvbWlzZTsKICAgIHJldHVybiBtb2R1bGVSdG47CiAgfTsKfSkoKTsKLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBjb25zdCBvcGVuanBlZyA9IChPcGVuSlBFRyk7CjsvLyAuL3NyYy9jb3JlL2pweC5qcwoKCgoKCgoKCgpjbGFzcyBKcHhFcnJvciBleHRlbmRzIEJhc2VFeGNlcHRpb24gewogIGNvbnN0cnVjdG9yKG1zZykgewogICAgc3VwZXIobXNnLCAiSnB4RXJyb3IiKTsKICB9Cn0KY2xhc3MgSnB4SW1hZ2UgewogIHN0YXRpYyAjYnVmZmVyID0gbnVsbDsKICBzdGF0aWMgI2hhbmRsZXIgPSBudWxsOwogIHN0YXRpYyAjbW9kdWxlUHJvbWlzZSA9IG51bGw7CiAgc3RhdGljICN1c2VXYXNtID0gdHJ1ZTsKICBzdGF0aWMgI3VzZVdvcmtlckZldGNoID0gdHJ1ZTsKICBzdGF0aWMgI3dhc21VcmwgPSBudWxsOwogIHN0YXRpYyBzZXRPcHRpb25zKHsKICAgIGhhbmRsZXIsCiAgICB1c2VXYXNtLAogICAgdXNlV29ya2VyRmV0Y2gsCiAgICB3YXNtVXJsCiAgfSkgewogICAgdGhpcy4jdXNlV2FzbSA9IHVzZVdhc207CiAgICB0aGlzLiN1c2VXb3JrZXJGZXRjaCA9IHVzZVdvcmtlckZldGNoOwogICAgdGhpcy4jd2FzbVVybCA9IHdhc21Vcmw7CiAgICBpZiAoIXVzZVdvcmtlckZldGNoKSB7CiAgICAgIHRoaXMuI2hhbmRsZXIgPSBoYW5kbGVyOwogICAgfQogIH0KICBzdGF0aWMgYXN5bmMgI2dldEpzTW9kdWxlKGZhbGxiYWNrQ2FsbGJhY2spIHsKICAgIGNvbnN0IHBhdGggPSBgJHt0aGlzLiN3YXNtVXJsfW9wZW5qcGVnX25vd2FzbV9mYWxsYmFjay5qc2A7CiAgICBsZXQgaW5zdGFuY2UgPSBudWxsOwogICAgdHJ5IHsKICAgICAgY29uc3QgbW9kID0gYXdhaXQgaW1wb3J0KAogICAgICAvKndlYnBhY2tJZ25vcmU6IHRydWUqLwogICAgICAvKkB2aXRlLWlnbm9yZSovCiAgICAgIHBhdGgpOwogICAgICBpbnN0YW5jZSA9IG1vZC5kZWZhdWx0KCk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHdhcm4oYEpweEltYWdlI2dldEpzTW9kdWxlOiAke2V9YCk7CiAgICB9CiAgICBmYWxsYmFja0NhbGxiYWNrKGluc3RhbmNlKTsKICB9CiAgc3RhdGljIGFzeW5jICNpbnN0YW50aWF0ZVdhc20oZmFsbGJhY2tDYWxsYmFjaywgaW1wb3J0cywgc3VjY2Vzc0NhbGxiYWNrKSB7CiAgICBjb25zdCBmaWxlbmFtZSA9ICJvcGVuanBlZy53YXNtIjsKICAgIHRyeSB7CiAgICAgIGlmICghdGhpcy4jYnVmZmVyKSB7CiAgICAgICAgaWYgKHRoaXMuI3VzZVdvcmtlckZldGNoKSB7CiAgICAgICAgICB0aGlzLiNidWZmZXIgPSBhd2FpdCBmZXRjaEJpbmFyeURhdGEoYCR7dGhpcy4jd2FzbVVybH0ke2ZpbGVuYW1lfWApOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLiNidWZmZXIgPSBhd2FpdCB0aGlzLiNoYW5kbGVyLnNlbmRXaXRoUHJvbWlzZSgiRmV0Y2hCaW5hcnlEYXRhIiwgewogICAgICAgICAgICB0eXBlOiAid2FzbUZhY3RvcnkiLAogICAgICAgICAgICBmaWxlbmFtZQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9CiAgICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZSh0aGlzLiNidWZmZXIsIGltcG9ydHMpOwogICAgICByZXR1cm4gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdHMuaW5zdGFuY2UpOwogICAgfSBjYXRjaCAocmVhc29uKSB7CiAgICAgIHdhcm4oYEpweEltYWdlI2luc3RhbnRpYXRlV2FzbTogJHtyZWFzb259YCk7CiAgICAgIHRoaXMuI2dldEpzTW9kdWxlKGZhbGxiYWNrQ2FsbGJhY2spOwogICAgICByZXR1cm4gbnVsbDsKICAgIH0gZmluYWxseSB7CiAgICAgIHRoaXMuI2hhbmRsZXIgPSBudWxsOwogICAgfQogIH0KICBzdGF0aWMgYXN5bmMgZGVjb2RlKGJ5dGVzLCB7CiAgICBudW1Db21wb25lbnRzID0gNCwKICAgIGlzSW5kZXhlZENvbG9ybWFwID0gZmFsc2UsCiAgICBzbWFza0luRGF0YSA9IGZhbHNlLAogICAgcmVkdWNlUG93ZXIgPSAwCiAgfSA9IHt9KSB7CiAgICBpZiAoIXRoaXMuI21vZHVsZVByb21pc2UpIHsKICAgICAgY29uc3QgewogICAgICAgIHByb21pc2UsCiAgICAgICAgcmVzb2x2ZQogICAgICB9ID0gUHJvbWlzZS53aXRoUmVzb2x2ZXJzKCk7CiAgICAgIGNvbnN0IHByb21pc2VzID0gW3Byb21pc2VdOwogICAgICBpZiAoIXRoaXMuI3VzZVdhc20pIHsKICAgICAgICB0aGlzLiNnZXRKc01vZHVsZShyZXNvbHZlKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBwcm9taXNlcy5wdXNoKG9wZW5qcGVnKHsKICAgICAgICAgIHdhcm46IHdhcm4sCiAgICAgICAgICBpbnN0YW50aWF0ZVdhc206IHRoaXMuI2luc3RhbnRpYXRlV2FzbS5iaW5kKHRoaXMsIHJlc29sdmUpCiAgICAgICAgfSkpOwogICAgICB9CiAgICAgIHRoaXMuI21vZHVsZVByb21pc2UgPSBQcm9taXNlLnJhY2UocHJvbWlzZXMpOwogICAgfQogICAgY29uc3QgbW9kdWxlID0gYXdhaXQgdGhpcy4jbW9kdWxlUHJvbWlzZTsKICAgIGlmICghbW9kdWxlKSB7CiAgICAgIHRocm93IG5ldyBKcHhFcnJvcigiT3BlbkpQRUcgZmFpbGVkIHRvIGluaXRpYWxpemUiKTsKICAgIH0KICAgIGxldCBwdHI7CiAgICB0cnkgewogICAgICBjb25zdCBzaXplID0gYnl0ZXMubGVuZ3RoOwogICAgICBwdHIgPSBtb2R1bGUuX21hbGxvYyhzaXplKTsKICAgICAgbW9kdWxlLndyaXRlQXJyYXlUb01lbW9yeShieXRlcywgcHRyKTsKICAgICAgY29uc3QgcmV0ID0gbW9kdWxlLl9qcDJfZGVjb2RlKHB0ciwgc2l6ZSwgbnVtQ29tcG9uZW50cyA+IDAgPyBudW1Db21wb25lbnRzIDogMCwgISFpc0luZGV4ZWRDb2xvcm1hcCwgISFzbWFza0luRGF0YSwgcmVkdWNlUG93ZXIpOwogICAgICBpZiAocmV0KSB7CiAgICAgICAgY29uc3QgewogICAgICAgICAgZXJyb3JNZXNzYWdlcwogICAgICAgIH0gPSBtb2R1bGU7CiAgICAgICAgaWYgKGVycm9yTWVzc2FnZXMpIHsKICAgICAgICAgIGRlbGV0ZSBtb2R1bGUuZXJyb3JNZXNzYWdlczsKICAgICAgICAgIHRocm93IG5ldyBKcHhFcnJvcihlcnJvck1lc3NhZ2VzKTsKICAgICAgICB9CiAgICAgICAgdGhyb3cgbmV3IEpweEVycm9yKCJVbmtub3duIGVycm9yIik7CiAgICAgIH0KICAgICAgY29uc3QgewogICAgICAgIGltYWdlRGF0YQogICAgICB9ID0gbW9kdWxlOwogICAgICBtb2R1bGUuaW1hZ2VEYXRhID0gbnVsbDsKICAgICAgcmV0dXJuIGltYWdlRGF0YTsKICAgIH0gZmluYWxseSB7CiAgICAgIGlmIChwdHIpIHsKICAgICAgICBtb2R1bGUuX2ZyZWUocHRyKTsKICAgICAgfQogICAgfQogIH0KICBzdGF0aWMgY2xlYW51cCgpIHsKICAgIHRoaXMuI21vZHVsZVByb21pc2UgPSBudWxsOwogIH0KICBzdGF0aWMgcGFyc2VJbWFnZVByb3BlcnRpZXMoc3RyZWFtKSB7CiAgICBsZXQgbmV3Qnl0ZSA9IHN0cmVhbS5nZXRCeXRlKCk7CiAgICB3aGlsZSAobmV3Qnl0ZSA+PSAwKSB7CiAgICAgIGNvbnN0IG9sZEJ5dGUgPSBuZXdCeXRlOwogICAgICBuZXdCeXRlID0gc3RyZWFtLmdldEJ5dGUoKTsKICAgICAgY29uc3QgY29kZSA9IG9sZEJ5dGUgPDwgOCB8IG5ld0J5dGU7CiAgICAgIGlmIChjb2RlID09PSAweGZmNTEpIHsKICAgICAgICBzdHJlYW0uc2tpcCg0KTsKICAgICAgICBjb25zdCBYc2l6ID0gc3RyZWFtLmdldEludDMyKCkgPj4+IDA7CiAgICAgICAgY29uc3QgWXNpeiA9IHN0cmVhbS5nZXRJbnQzMigpID4+PiAwOwogICAgICAgIGNvbnN0IFhPc2l6ID0gc3RyZWFtLmdldEludDMyKCkgPj4+IDA7CiAgICAgICAgY29uc3QgWU9zaXogPSBzdHJlYW0uZ2V0SW50MzIoKSA+Pj4gMDsKICAgICAgICBzdHJlYW0uc2tpcCgxNik7CiAgICAgICAgY29uc3QgQ3NpeiA9IHN0cmVhbS5nZXRVaW50MTYoKTsKICAgICAgICByZXR1cm4gewogICAgICAgICAgd2lkdGg6IFhzaXogLSBYT3NpeiwKICAgICAgICAgIGhlaWdodDogWXNpeiAtIFlPc2l6LAogICAgICAgICAgYml0c1BlckNvbXBvbmVudDogOCwKICAgICAgICAgIGNvbXBvbmVudHNDb3VudDogQ3NpegogICAgICAgIH07CiAgICAgIH0KICAgIH0KICAgIHRocm93IG5ldyBKcHhFcnJvcigiTm8gc2l6ZSBtYXJrZXIgZm91bmQgaW4gSlBYIHN0cmVhbSIpOwogIH0KfQoKOy8vIC4vc3JjL2NvcmUvb3BlcmF0b3JfbGlzdC5qcwoKCgoKCgoKCgoKCgoKCgoKCmZ1bmN0aW9uIGFkZFN0YXRlKHBhcmVudFN0YXRlLCBwYXR0ZXJuLCBjaGVja0ZuLCBpdGVyYXRlRm4sIHByb2Nlc3NGbikgewogIGxldCBzdGF0ZSA9IHBhcmVudFN0YXRlOwogIGZvciAobGV0IGkgPSAwLCBpaSA9IHBhdHRlcm4ubGVuZ3RoIC0gMTsgaSA8IGlpOyBpKyspIHsKICAgIGNvbnN0IGl0ZW0gPSBwYXR0ZXJuW2ldOwogICAgc3RhdGUgPSBzdGF0ZVtpdGVtXSB8fD0gW107CiAgfQogIHN0YXRlW3BhdHRlcm4uYXQoLTEpXSA9IHsKICAgIGNoZWNrRm4sCiAgICBpdGVyYXRlRm4sCiAgICBwcm9jZXNzRm4KICB9Owp9CmNvbnN0IEluaXRpYWxTdGF0ZSA9IFtdOwphZGRTdGF0ZShJbml0aWFsU3RhdGUsIFtPUFMuc2F2ZSwgT1BTLnRyYW5zZm9ybSwgT1BTLnBhaW50SW5saW5lSW1hZ2VYT2JqZWN0LCBPUFMucmVzdG9yZV0sIG51bGwsIGZ1bmN0aW9uIGl0ZXJhdGVJbmxpbmVJbWFnZUdyb3VwKGNvbnRleHQsIGkpIHsKICBjb25zdCBmbkFycmF5ID0gY29udGV4dC5mbkFycmF5OwogIGNvbnN0IGlGaXJzdFNhdmUgPSBjb250ZXh0LmlDdXJyIC0gMzsKICBjb25zdCBwb3MgPSAoaSAtIGlGaXJzdFNhdmUpICUgNDsKICBzd2l0Y2ggKHBvcykgewogICAgY2FzZSAwOgogICAgICByZXR1cm4gZm5BcnJheVtpXSA9PT0gT1BTLnNhdmU7CiAgICBjYXNlIDE6CiAgICAgIHJldHVybiBmbkFycmF5W2ldID09PSBPUFMudHJhbnNmb3JtOwogICAgY2FzZSAyOgogICAgICByZXR1cm4gZm5BcnJheVtpXSA9PT0gT1BTLnBhaW50SW5saW5lSW1hZ2VYT2JqZWN0OwogICAgY2FzZSAzOgogICAgICByZXR1cm4gZm5BcnJheVtpXSA9PT0gT1BTLnJlc3RvcmU7CiAgfQogIHRocm93IG5ldyBFcnJvcihgaXRlcmF0ZUlubGluZUltYWdlR3JvdXAgLSBpbnZhbGlkIHBvczogJHtwb3N9YCk7Cn0sIGZ1bmN0aW9uIGZvdW5kSW5saW5lSW1hZ2VHcm91cChjb250ZXh0LCBpKSB7CiAgY29uc3QgTUlOX0lNQUdFU19JTl9JTkxJTkVfSU1BR0VTX0JMT0NLID0gMTA7CiAgY29uc3QgTUFYX0lNQUdFU19JTl9JTkxJTkVfSU1BR0VTX0JMT0NLID0gMjAwOwogIGNvbnN0IE1BWF9XSURUSCA9IDEwMDA7CiAgY29uc3QgSU1BR0VfUEFERElORyA9IDE7CiAgY29uc3QgZm5BcnJheSA9IGNvbnRleHQuZm5BcnJheSwKICAgIGFyZ3NBcnJheSA9IGNvbnRleHQuYXJnc0FycmF5OwogIGNvbnN0IGN1cnIgPSBjb250ZXh0LmlDdXJyOwogIGNvbnN0IGlGaXJzdFNhdmUgPSBjdXJyIC0gMzsKICBjb25zdCBpRmlyc3RUcmFuc2Zvcm0gPSBjdXJyIC0gMjsKICBjb25zdCBpRmlyc3RQSUlYTyA9IGN1cnIgLSAxOwogIGNvbnN0IGNvdW50ID0gTWF0aC5taW4oTWF0aC5mbG9vcigoaSAtIGlGaXJzdFNhdmUpIC8gNCksIE1BWF9JTUFHRVNfSU5fSU5MSU5FX0lNQUdFU19CTE9DSyk7CiAgaWYgKGNvdW50IDwgTUlOX0lNQUdFU19JTl9JTkxJTkVfSU1BR0VTX0JMT0NLKSB7CiAgICByZXR1cm4gaSAtIChpIC0gaUZpcnN0U2F2ZSkgJSA0OwogIH0KICBsZXQgbWF4WCA9IDA7CiAgY29uc3QgbWFwID0gW107CiAgbGV0IG1heExpbmVIZWlnaHQgPSAwOwogIGxldCBjdXJyZW50WCA9IElNQUdFX1BBRERJTkcsCiAgICBjdXJyZW50WSA9IElNQUdFX1BBRERJTkc7CiAgZm9yIChsZXQgcSA9IDA7IHEgPCBjb3VudDsgcSsrKSB7CiAgICBjb25zdCB0cmFuc2Zvcm0gPSBhcmdzQXJyYXlbaUZpcnN0VHJhbnNmb3JtICsgKHEgPDwgMildOwogICAgY29uc3QgaW1nID0gYXJnc0FycmF5W2lGaXJzdFBJSVhPICsgKHEgPDwgMildWzBdOwogICAgaWYgKGN1cnJlbnRYICsgaW1nLndpZHRoID4gTUFYX1dJRFRIKSB7CiAgICAgIG1heFggPSBNYXRoLm1heChtYXhYLCBjdXJyZW50WCk7CiAgICAgIGN1cnJlbnRZICs9IG1heExpbmVIZWlnaHQgKyAyICogSU1BR0VfUEFERElORzsKICAgICAgY3VycmVudFggPSAwOwogICAgICBtYXhMaW5lSGVpZ2h0ID0gMDsKICAgIH0KICAgIG1hcC5wdXNoKHsKICAgICAgdHJhbnNmb3JtLAogICAgICB4OiBjdXJyZW50WCwKICAgICAgeTogY3VycmVudFksCiAgICAgIHc6IGltZy53aWR0aCwKICAgICAgaDogaW1nLmhlaWdodAogICAgfSk7CiAgICBjdXJyZW50WCArPSBpbWcud2lkdGggKyAyICogSU1BR0VfUEFERElORzsKICAgIG1heExpbmVIZWlnaHQgPSBNYXRoLm1heChtYXhMaW5lSGVpZ2h0LCBpbWcuaGVpZ2h0KTsKICB9CiAgY29uc3QgaW1nV2lkdGggPSBNYXRoLm1heChtYXhYLCBjdXJyZW50WCkgKyBJTUFHRV9QQURESU5HOwogIGNvbnN0IGltZ0hlaWdodCA9IGN1cnJlbnRZICsgbWF4TGluZUhlaWdodCArIElNQUdFX1BBRERJTkc7CiAgY29uc3QgaW1nRGF0YSA9IG5ldyBVaW50OEFycmF5KGltZ1dpZHRoICogaW1nSGVpZ2h0ICogNCk7CiAgY29uc3QgaW1nUm93U2l6ZSA9IGltZ1dpZHRoIDw8IDI7CiAgZm9yIChsZXQgcSA9IDA7IHEgPCBjb3VudDsgcSsrKSB7CiAgICBjb25zdCBkYXRhID0gYXJnc0FycmF5W2lGaXJzdFBJSVhPICsgKHEgPDwgMildWzBdLmRhdGE7CiAgICBjb25zdCByb3dTaXplID0gbWFwW3FdLncgPDwgMjsKICAgIGxldCBkYXRhT2Zmc2V0ID0gMDsKICAgIGxldCBvZmZzZXQgPSBtYXBbcV0ueCArIG1hcFtxXS55ICogaW1nV2lkdGggPDwgMjsKICAgIGltZ0RhdGEuc2V0KGRhdGEuc3ViYXJyYXkoMCwgcm93U2l6ZSksIG9mZnNldCAtIGltZ1Jvd1NpemUpOwogICAgZm9yIChsZXQgayA9IDAsIGtrID0gbWFwW3FdLmg7IGsgPCBrazsgaysrKSB7CiAgICAgIGltZ0RhdGEuc2V0KGRhdGEuc3ViYXJyYXkoZGF0YU9mZnNldCwgZGF0YU9mZnNldCArIHJvd1NpemUpLCBvZmZzZXQpOwogICAgICBkYXRhT2Zmc2V0ICs9IHJvd1NpemU7CiAgICAgIG9mZnNldCArPSBpbWdSb3dTaXplOwogICAgfQogICAgaW1nRGF0YS5zZXQoZGF0YS5zdWJhcnJheShkYXRhT2Zmc2V0IC0gcm93U2l6ZSwgZGF0YU9mZnNldCksIG9mZnNldCk7CiAgICB3aGlsZSAob2Zmc2V0ID49IDApIHsKICAgICAgZGF0YVtvZmZzZXQgLSA0XSA9IGRhdGFbb2Zmc2V0XTsKICAgICAgZGF0YVtvZmZzZXQgLSAzXSA9IGRhdGFbb2Zmc2V0ICsgMV07CiAgICAgIGRhdGFbb2Zmc2V0IC0gMl0gPSBkYXRhW29mZnNldCArIDJdOwogICAgICBkYXRhW29mZnNldCAtIDFdID0gZGF0YVtvZmZzZXQgKyAzXTsKICAgICAgZGF0YVtvZmZzZXQgKyByb3dTaXplXSA9IGRhdGFbb2Zmc2V0ICsgcm93U2l6ZSAtIDRdOwogICAgICBkYXRhW29mZnNldCArIHJvd1NpemUgKyAxXSA9IGRhdGFbb2Zmc2V0ICsgcm93U2l6ZSAtIDNdOwogICAgICBkYXRhW29mZnNldCArIHJvd1NpemUgKyAyXSA9IGRhdGFbb2Zmc2V0ICsgcm93U2l6ZSAtIDJdOwogICAgICBkYXRhW29mZnNldCArIHJvd1NpemUgKyAzXSA9IGRhdGFbb2Zmc2V0ICsgcm93U2l6ZSAtIDFdOwogICAgICBvZmZzZXQgLT0gaW1nUm93U2l6ZTsKICAgIH0KICB9CiAgY29uc3QgaW1nID0gewogICAgd2lkdGg6IGltZ1dpZHRoLAogICAgaGVpZ2h0OiBpbWdIZWlnaHQKICB9OwogIGlmIChjb250ZXh0LmlzT2Zmc2NyZWVuQ2FudmFzU3VwcG9ydGVkKSB7CiAgICBjb25zdCBjYW52YXMgPSBuZXcgT2Zmc2NyZWVuQ2FudmFzKGltZ1dpZHRoLCBpbWdIZWlnaHQpOwogICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoIjJkIik7CiAgICBjdHgucHV0SW1hZ2VEYXRhKG5ldyBJbWFnZURhdGEobmV3IFVpbnQ4Q2xhbXBlZEFycmF5KGltZ0RhdGEuYnVmZmVyKSwgaW1nV2lkdGgsIGltZ0hlaWdodCksIDAsIDApOwogICAgaW1nLmJpdG1hcCA9IGNhbnZhcy50cmFuc2ZlclRvSW1hZ2VCaXRtYXAoKTsKICAgIGltZy5kYXRhID0gbnVsbDsKICB9IGVsc2UgewogICAgaW1nLmtpbmQgPSBJbWFnZUtpbmQuUkdCQV8zMkJQUDsKICAgIGltZy5kYXRhID0gaW1nRGF0YTsKICB9CiAgZm5BcnJheS5zcGxpY2UoaUZpcnN0U2F2ZSwgY291bnQgKiA0LCBPUFMucGFpbnRJbmxpbmVJbWFnZVhPYmplY3RHcm91cCk7CiAgYXJnc0FycmF5LnNwbGljZShpRmlyc3RTYXZlLCBjb3VudCAqIDQsIFtpbWcsIG1hcF0pOwogIHJldHVybiBpRmlyc3RTYXZlICsgMTsKfSk7CmFkZFN0YXRlKEluaXRpYWxTdGF0ZSwgW09QUy5zYXZlLCBPUFMudHJhbnNmb3JtLCBPUFMucGFpbnRJbWFnZU1hc2tYT2JqZWN0LCBPUFMucmVzdG9yZV0sIG51bGwsIGZ1bmN0aW9uIGl0ZXJhdGVJbWFnZU1hc2tHcm91cChjb250ZXh0LCBpKSB7CiAgY29uc3QgZm5BcnJheSA9IGNvbnRleHQuZm5BcnJheTsKICBjb25zdCBpRmlyc3RTYXZlID0gY29udGV4dC5pQ3VyciAtIDM7CiAgY29uc3QgcG9zID0gKGkgLSBpRmlyc3RTYXZlKSAlIDQ7CiAgc3dpdGNoIChwb3MpIHsKICAgIGNhc2UgMDoKICAgICAgcmV0dXJuIGZuQXJyYXlbaV0gPT09IE9QUy5zYXZlOwogICAgY2FzZSAxOgogICAgICByZXR1cm4gZm5BcnJheVtpXSA9PT0gT1BTLnRyYW5zZm9ybTsKICAgIGNhc2UgMjoKICAgICAgcmV0dXJuIGZuQXJyYXlbaV0gPT09IE9QUy5wYWludEltYWdlTWFza1hPYmplY3Q7CiAgICBjYXNlIDM6CiAgICAgIHJldHVybiBmbkFycmF5W2ldID09PSBPUFMucmVzdG9yZTsKICB9CiAgdGhyb3cgbmV3IEVycm9yKGBpdGVyYXRlSW1hZ2VNYXNrR3JvdXAgLSBpbnZhbGlkIHBvczogJHtwb3N9YCk7Cn0sIGZ1bmN0aW9uIGZvdW5kSW1hZ2VNYXNrR3JvdXAoY29udGV4dCwgaSkgewogIGNvbnN0IE1JTl9JTUFHRVNfSU5fTUFTS1NfQkxPQ0sgPSAxMDsKICBjb25zdCBNQVhfSU1BR0VTX0lOX01BU0tTX0JMT0NLID0gMTAwOwogIGNvbnN0IE1BWF9TQU1FX0lNQUdFU19JTl9NQVNLU19CTE9DSyA9IDEwMDA7CiAgY29uc3QgZm5BcnJheSA9IGNvbnRleHQuZm5BcnJheSwKICAgIGFyZ3NBcnJheSA9IGNvbnRleHQuYXJnc0FycmF5OwogIGNvbnN0IGN1cnIgPSBjb250ZXh0LmlDdXJyOwogIGNvbnN0IGlGaXJzdFNhdmUgPSBjdXJyIC0gMzsKICBjb25zdCBpRmlyc3RUcmFuc2Zvcm0gPSBjdXJyIC0gMjsKICBjb25zdCBpRmlyc3RQSU1YTyA9IGN1cnIgLSAxOwogIGxldCBjb3VudCA9IE1hdGguZmxvb3IoKGkgLSBpRmlyc3RTYXZlKSAvIDQpOwogIGlmIChjb3VudCA8IE1JTl9JTUFHRVNfSU5fTUFTS1NfQkxPQ0spIHsKICAgIHJldHVybiBpIC0gKGkgLSBpRmlyc3RTYXZlKSAlIDQ7CiAgfQogIGxldCBpc1NhbWVJbWFnZSA9IGZhbHNlOwogIGxldCBpVHJhbnNmb3JtLCB0cmFuc2Zvcm1BcmdzOwogIGNvbnN0IGZpcnN0UElNWE9BcmcwID0gYXJnc0FycmF5W2lGaXJzdFBJTVhPXVswXTsKICBjb25zdCBmaXJzdFRyYW5zZm9ybUFyZzAgPSBhcmdzQXJyYXlbaUZpcnN0VHJhbnNmb3JtXVswXSwKICAgIGZpcnN0VHJhbnNmb3JtQXJnMSA9IGFyZ3NBcnJheVtpRmlyc3RUcmFuc2Zvcm1dWzFdLAogICAgZmlyc3RUcmFuc2Zvcm1BcmcyID0gYXJnc0FycmF5W2lGaXJzdFRyYW5zZm9ybV1bMl0sCiAgICBmaXJzdFRyYW5zZm9ybUFyZzMgPSBhcmdzQXJyYXlbaUZpcnN0VHJhbnNmb3JtXVszXTsKICBpZiAoZmlyc3RUcmFuc2Zvcm1BcmcxID09PSBmaXJzdFRyYW5zZm9ybUFyZzIpIHsKICAgIGlzU2FtZUltYWdlID0gdHJ1ZTsKICAgIGlUcmFuc2Zvcm0gPSBpRmlyc3RUcmFuc2Zvcm0gKyA0OwogICAgbGV0IGlQSU1YTyA9IGlGaXJzdFBJTVhPICsgNDsKICAgIGZvciAobGV0IHEgPSAxOyBxIDwgY291bnQ7IHErKywgaVRyYW5zZm9ybSArPSA0LCBpUElNWE8gKz0gNCkgewogICAgICB0cmFuc2Zvcm1BcmdzID0gYXJnc0FycmF5W2lUcmFuc2Zvcm1dOwogICAgICBpZiAoYXJnc0FycmF5W2lQSU1YT11bMF0gIT09IGZpcnN0UElNWE9BcmcwIHx8IHRyYW5zZm9ybUFyZ3NbMF0gIT09IGZpcnN0VHJhbnNmb3JtQXJnMCB8fCB0cmFuc2Zvcm1BcmdzWzFdICE9PSBmaXJzdFRyYW5zZm9ybUFyZzEgfHwgdHJhbnNmb3JtQXJnc1syXSAhPT0gZmlyc3RUcmFuc2Zvcm1BcmcyIHx8IHRyYW5zZm9ybUFyZ3NbM10gIT09IGZpcnN0VHJhbnNmb3JtQXJnMykgewogICAgICAgIGlmIChxIDwgTUlOX0lNQUdFU19JTl9NQVNLU19CTE9DSykgewogICAgICAgICAgaXNTYW1lSW1hZ2UgPSBmYWxzZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY291bnQgPSBxOwogICAgICAgIH0KICAgICAgICBicmVhazsKICAgICAgfQogICAgfQogIH0KICBpZiAoaXNTYW1lSW1hZ2UpIHsKICAgIGNvdW50ID0gTWF0aC5taW4oY291bnQsIE1BWF9TQU1FX0lNQUdFU19JTl9NQVNLU19CTE9DSyk7CiAgICBjb25zdCBwb3NpdGlvbnMgPSBuZXcgRmxvYXQzMkFycmF5KGNvdW50ICogMik7CiAgICBpVHJhbnNmb3JtID0gaUZpcnN0VHJhbnNmb3JtOwogICAgZm9yIChsZXQgcSA9IDA7IHEgPCBjb3VudDsgcSsrLCBpVHJhbnNmb3JtICs9IDQpIHsKICAgICAgdHJhbnNmb3JtQXJncyA9IGFyZ3NBcnJheVtpVHJhbnNmb3JtXTsKICAgICAgcG9zaXRpb25zW3EgPDwgMV0gPSB0cmFuc2Zvcm1BcmdzWzRdOwogICAgICBwb3NpdGlvbnNbKHEgPDwgMSkgKyAxXSA9IHRyYW5zZm9ybUFyZ3NbNV07CiAgICB9CiAgICBmbkFycmF5LnNwbGljZShpRmlyc3RTYXZlLCBjb3VudCAqIDQsIE9QUy5wYWludEltYWdlTWFza1hPYmplY3RSZXBlYXQpOwogICAgYXJnc0FycmF5LnNwbGljZShpRmlyc3RTYXZlLCBjb3VudCAqIDQsIFtmaXJzdFBJTVhPQXJnMCwgZmlyc3RUcmFuc2Zvcm1BcmcwLCBmaXJzdFRyYW5zZm9ybUFyZzEsIGZpcnN0VHJhbnNmb3JtQXJnMiwgZmlyc3RUcmFuc2Zvcm1BcmczLCBwb3NpdGlvbnNdKTsKICB9IGVsc2UgewogICAgY291bnQgPSBNYXRoLm1pbihjb3VudCwgTUFYX0lNQUdFU19JTl9NQVNLU19CTE9DSyk7CiAgICBjb25zdCBpbWFnZXMgPSBbXTsKICAgIGZvciAobGV0IHEgPSAwOyBxIDwgY291bnQ7IHErKykgewogICAgICB0cmFuc2Zvcm1BcmdzID0gYXJnc0FycmF5W2lGaXJzdFRyYW5zZm9ybSArIChxIDw8IDIpXTsKICAgICAgY29uc3QgbWFza1BhcmFtcyA9IGFyZ3NBcnJheVtpRmlyc3RQSU1YTyArIChxIDw8IDIpXVswXTsKICAgICAgaW1hZ2VzLnB1c2goewogICAgICAgIGRhdGE6IG1hc2tQYXJhbXMuZGF0YSwKICAgICAgICB3aWR0aDogbWFza1BhcmFtcy53aWR0aCwKICAgICAgICBoZWlnaHQ6IG1hc2tQYXJhbXMuaGVpZ2h0LAogICAgICAgIGludGVycG9sYXRlOiBtYXNrUGFyYW1zLmludGVycG9sYXRlLAogICAgICAgIGNvdW50OiBtYXNrUGFyYW1zLmNvdW50LAogICAgICAgIHRyYW5zZm9ybTogdHJhbnNmb3JtQXJncwogICAgICB9KTsKICAgIH0KICAgIGZuQXJyYXkuc3BsaWNlKGlGaXJzdFNhdmUsIGNvdW50ICogNCwgT1BTLnBhaW50SW1hZ2VNYXNrWE9iamVjdEdyb3VwKTsKICAgIGFyZ3NBcnJheS5zcGxpY2UoaUZpcnN0U2F2ZSwgY291bnQgKiA0LCBbaW1hZ2VzXSk7CiAgfQogIHJldHVybiBpRmlyc3RTYXZlICsgMTsKfSk7CmFkZFN0YXRlKEluaXRpYWxTdGF0ZSwgW09QUy5zYXZlLCBPUFMudHJhbnNmb3JtLCBPUFMucGFpbnRJbWFnZVhPYmplY3QsIE9QUy5yZXN0b3JlXSwgZnVuY3Rpb24gKGNvbnRleHQpIHsKICBjb25zdCBhcmdzQXJyYXkgPSBjb250ZXh0LmFyZ3NBcnJheTsKICBjb25zdCBpRmlyc3RUcmFuc2Zvcm0gPSBjb250ZXh0LmlDdXJyIC0gMjsKICByZXR1cm4gYXJnc0FycmF5W2lGaXJzdFRyYW5zZm9ybV1bMV0gPT09IDAgJiYgYXJnc0FycmF5W2lGaXJzdFRyYW5zZm9ybV1bMl0gPT09IDA7Cn0sIGZ1bmN0aW9uIGl0ZXJhdGVJbWFnZUdyb3VwKGNvbnRleHQsIGkpIHsKICBjb25zdCBmbkFycmF5ID0gY29udGV4dC5mbkFycmF5LAogICAgYXJnc0FycmF5ID0gY29udGV4dC5hcmdzQXJyYXk7CiAgY29uc3QgaUZpcnN0U2F2ZSA9IGNvbnRleHQuaUN1cnIgLSAzOwogIGNvbnN0IHBvcyA9IChpIC0gaUZpcnN0U2F2ZSkgJSA0OwogIHN3aXRjaCAocG9zKSB7CiAgICBjYXNlIDA6CiAgICAgIHJldHVybiBmbkFycmF5W2ldID09PSBPUFMuc2F2ZTsKICAgIGNhc2UgMToKICAgICAgaWYgKGZuQXJyYXlbaV0gIT09IE9QUy50cmFuc2Zvcm0pIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgY29uc3QgaUZpcnN0VHJhbnNmb3JtID0gY29udGV4dC5pQ3VyciAtIDI7CiAgICAgIGNvbnN0IGZpcnN0VHJhbnNmb3JtQXJnMCA9IGFyZ3NBcnJheVtpRmlyc3RUcmFuc2Zvcm1dWzBdOwogICAgICBjb25zdCBmaXJzdFRyYW5zZm9ybUFyZzMgPSBhcmdzQXJyYXlbaUZpcnN0VHJhbnNmb3JtXVszXTsKICAgICAgaWYgKGFyZ3NBcnJheVtpXVswXSAhPT0gZmlyc3RUcmFuc2Zvcm1BcmcwIHx8IGFyZ3NBcnJheVtpXVsxXSAhPT0gMCB8fCBhcmdzQXJyYXlbaV1bMl0gIT09IDAgfHwgYXJnc0FycmF5W2ldWzNdICE9PSBmaXJzdFRyYW5zZm9ybUFyZzMpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgcmV0dXJuIHRydWU7CiAgICBjYXNlIDI6CiAgICAgIGlmIChmbkFycmF5W2ldICE9PSBPUFMucGFpbnRJbWFnZVhPYmplY3QpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgY29uc3QgaUZpcnN0UElYTyA9IGNvbnRleHQuaUN1cnIgLSAxOwogICAgICBjb25zdCBmaXJzdFBJWE9BcmcwID0gYXJnc0FycmF5W2lGaXJzdFBJWE9dWzBdOwogICAgICBpZiAoYXJnc0FycmF5W2ldWzBdICE9PSBmaXJzdFBJWE9BcmcwKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICAgIHJldHVybiB0cnVlOwogICAgY2FzZSAzOgogICAgICByZXR1cm4gZm5BcnJheVtpXSA9PT0gT1BTLnJlc3RvcmU7CiAgfQogIHRocm93IG5ldyBFcnJvcihgaXRlcmF0ZUltYWdlR3JvdXAgLSBpbnZhbGlkIHBvczogJHtwb3N9YCk7Cn0sIGZ1bmN0aW9uIChjb250ZXh0LCBpKSB7CiAgY29uc3QgTUlOX0lNQUdFU19JTl9CTE9DSyA9IDM7CiAgY29uc3QgTUFYX0lNQUdFU19JTl9CTE9DSyA9IDEwMDA7CiAgY29uc3QgZm5BcnJheSA9IGNvbnRleHQuZm5BcnJheSwKICAgIGFyZ3NBcnJheSA9IGNvbnRleHQuYXJnc0FycmF5OwogIGNvbnN0IGN1cnIgPSBjb250ZXh0LmlDdXJyOwogIGNvbnN0IGlGaXJzdFNhdmUgPSBjdXJyIC0gMzsKICBjb25zdCBpRmlyc3RUcmFuc2Zvcm0gPSBjdXJyIC0gMjsKICBjb25zdCBpRmlyc3RQSVhPID0gY3VyciAtIDE7CiAgY29uc3QgZmlyc3RQSVhPQXJnMCA9IGFyZ3NBcnJheVtpRmlyc3RQSVhPXVswXTsKICBjb25zdCBmaXJzdFRyYW5zZm9ybUFyZzAgPSBhcmdzQXJyYXlbaUZpcnN0VHJhbnNmb3JtXVswXTsKICBjb25zdCBmaXJzdFRyYW5zZm9ybUFyZzMgPSBhcmdzQXJyYXlbaUZpcnN0VHJhbnNmb3JtXVszXTsKICBjb25zdCBjb3VudCA9IE1hdGgubWluKE1hdGguZmxvb3IoKGkgLSBpRmlyc3RTYXZlKSAvIDQpLCBNQVhfSU1BR0VTX0lOX0JMT0NLKTsKICBpZiAoY291bnQgPCBNSU5fSU1BR0VTX0lOX0JMT0NLKSB7CiAgICByZXR1cm4gaSAtIChpIC0gaUZpcnN0U2F2ZSkgJSA0OwogIH0KICBjb25zdCBwb3NpdGlvbnMgPSBuZXcgRmxvYXQzMkFycmF5KGNvdW50ICogMik7CiAgbGV0IGlUcmFuc2Zvcm0gPSBpRmlyc3RUcmFuc2Zvcm07CiAgZm9yIChsZXQgcSA9IDA7IHEgPCBjb3VudDsgcSsrLCBpVHJhbnNmb3JtICs9IDQpIHsKICAgIGNvbnN0IHRyYW5zZm9ybUFyZ3MgPSBhcmdzQXJyYXlbaVRyYW5zZm9ybV07CiAgICBwb3NpdGlvbnNbcSA8PCAxXSA9IHRyYW5zZm9ybUFyZ3NbNF07CiAgICBwb3NpdGlvbnNbKHEgPDwgMSkgKyAxXSA9IHRyYW5zZm9ybUFyZ3NbNV07CiAgfQogIGNvbnN0IGFyZ3MgPSBbZmlyc3RQSVhPQXJnMCwgZmlyc3RUcmFuc2Zvcm1BcmcwLCBmaXJzdFRyYW5zZm9ybUFyZzMsIHBvc2l0aW9uc107CiAgZm5BcnJheS5zcGxpY2UoaUZpcnN0U2F2ZSwgY291bnQgKiA0LCBPUFMucGFpbnRJbWFnZVhPYmplY3RSZXBlYXQpOwogIGFyZ3NBcnJheS5zcGxpY2UoaUZpcnN0U2F2ZSwgY291bnQgKiA0LCBhcmdzKTsKICByZXR1cm4gaUZpcnN0U2F2ZSArIDE7Cn0pOwphZGRTdGF0ZShJbml0aWFsU3RhdGUsIFtPUFMuYmVnaW5UZXh0LCBPUFMuc2V0Rm9udCwgT1BTLnNldFRleHRNYXRyaXgsIE9QUy5zaG93VGV4dCwgT1BTLmVuZFRleHRdLCBudWxsLCBmdW5jdGlvbiBpdGVyYXRlU2hvd1RleHRHcm91cChjb250ZXh0LCBpKSB7CiAgY29uc3QgZm5BcnJheSA9IGNvbnRleHQuZm5BcnJheSwKICAgIGFyZ3NBcnJheSA9IGNvbnRleHQuYXJnc0FycmF5OwogIGNvbnN0IGlGaXJzdFNhdmUgPSBjb250ZXh0LmlDdXJyIC0gNDsKICBjb25zdCBwb3MgPSAoaSAtIGlGaXJzdFNhdmUpICUgNTsKICBzd2l0Y2ggKHBvcykgewogICAgY2FzZSAwOgogICAgICByZXR1cm4gZm5BcnJheVtpXSA9PT0gT1BTLmJlZ2luVGV4dDsKICAgIGNhc2UgMToKICAgICAgcmV0dXJuIGZuQXJyYXlbaV0gPT09IE9QUy5zZXRGb250OwogICAgY2FzZSAyOgogICAgICByZXR1cm4gZm5BcnJheVtpXSA9PT0gT1BTLnNldFRleHRNYXRyaXg7CiAgICBjYXNlIDM6CiAgICAgIGlmIChmbkFycmF5W2ldICE9PSBPUFMuc2hvd1RleHQpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgY29uc3QgaUZpcnN0U2V0Rm9udCA9IGNvbnRleHQuaUN1cnIgLSAzOwogICAgICBjb25zdCBmaXJzdFNldEZvbnRBcmcwID0gYXJnc0FycmF5W2lGaXJzdFNldEZvbnRdWzBdOwogICAgICBjb25zdCBmaXJzdFNldEZvbnRBcmcxID0gYXJnc0FycmF5W2lGaXJzdFNldEZvbnRdWzFdOwogICAgICBpZiAoYXJnc0FycmF5W2ldWzBdICE9PSBmaXJzdFNldEZvbnRBcmcwIHx8IGFyZ3NBcnJheVtpXVsxXSAhPT0gZmlyc3RTZXRGb250QXJnMSkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgICByZXR1cm4gdHJ1ZTsKICAgIGNhc2UgNDoKICAgICAgcmV0dXJuIGZuQXJyYXlbaV0gPT09IE9QUy5lbmRUZXh0OwogIH0KICB0aHJvdyBuZXcgRXJyb3IoYGl0ZXJhdGVTaG93VGV4dEdyb3VwIC0gaW52YWxpZCBwb3M6ICR7cG9zfWApOwp9LCBmdW5jdGlvbiAoY29udGV4dCwgaSkgewogIGNvbnN0IE1JTl9DSEFSU19JTl9CTE9DSyA9IDM7CiAgY29uc3QgTUFYX0NIQVJTX0lOX0JMT0NLID0gMTAwMDsKICBjb25zdCBmbkFycmF5ID0gY29udGV4dC5mbkFycmF5LAogICAgYXJnc0FycmF5ID0gY29udGV4dC5hcmdzQXJyYXk7CiAgY29uc3QgY3VyciA9IGNvbnRleHQuaUN1cnI7CiAgY29uc3QgaUZpcnN0QmVnaW5UZXh0ID0gY3VyciAtIDQ7CiAgY29uc3QgaUZpcnN0U2V0Rm9udCA9IGN1cnIgLSAzOwogIGNvbnN0IGlGaXJzdFNldFRleHRNYXRyaXggPSBjdXJyIC0gMjsKICBjb25zdCBpRmlyc3RTaG93VGV4dCA9IGN1cnIgLSAxOwogIGNvbnN0IGlGaXJzdEVuZFRleHQgPSBjdXJyOwogIGNvbnN0IGZpcnN0U2V0Rm9udEFyZzAgPSBhcmdzQXJyYXlbaUZpcnN0U2V0Rm9udF1bMF07CiAgY29uc3QgZmlyc3RTZXRGb250QXJnMSA9IGFyZ3NBcnJheVtpRmlyc3RTZXRGb250XVsxXTsKICBsZXQgY291bnQgPSBNYXRoLm1pbihNYXRoLmZsb29yKChpIC0gaUZpcnN0QmVnaW5UZXh0KSAvIDUpLCBNQVhfQ0hBUlNfSU5fQkxPQ0spOwogIGlmIChjb3VudCA8IE1JTl9DSEFSU19JTl9CTE9DSykgewogICAgcmV0dXJuIGkgLSAoaSAtIGlGaXJzdEJlZ2luVGV4dCkgJSA1OwogIH0KICBsZXQgaUZpcnN0ID0gaUZpcnN0QmVnaW5UZXh0OwogIGlmIChpRmlyc3RCZWdpblRleHQgPj0gNCAmJiBmbkFycmF5W2lGaXJzdEJlZ2luVGV4dCAtIDRdID09PSBmbkFycmF5W2lGaXJzdFNldEZvbnRdICYmIGZuQXJyYXlbaUZpcnN0QmVnaW5UZXh0IC0gM10gPT09IGZuQXJyYXlbaUZpcnN0U2V0VGV4dE1hdHJpeF0gJiYgZm5BcnJheVtpRmlyc3RCZWdpblRleHQgLSAyXSA9PT0gZm5BcnJheVtpRmlyc3RTaG93VGV4dF0gJiYgZm5BcnJheVtpRmlyc3RCZWdpblRleHQgLSAxXSA9PT0gZm5BcnJheVtpRmlyc3RFbmRUZXh0XSAmJiBhcmdzQXJyYXlbaUZpcnN0QmVnaW5UZXh0IC0gNF1bMF0gPT09IGZpcnN0U2V0Rm9udEFyZzAgJiYgYXJnc0FycmF5W2lGaXJzdEJlZ2luVGV4dCAtIDRdWzFdID09PSBmaXJzdFNldEZvbnRBcmcxKSB7CiAgICBjb3VudCsrOwogICAgaUZpcnN0IC09IDU7CiAgfQogIGxldCBpRW5kVGV4dCA9IGlGaXJzdCArIDQ7CiAgZm9yIChsZXQgcSA9IDE7IHEgPCBjb3VudDsgcSsrKSB7CiAgICBmbkFycmF5LnNwbGljZShpRW5kVGV4dCwgMyk7CiAgICBhcmdzQXJyYXkuc3BsaWNlKGlFbmRUZXh0LCAzKTsKICAgIGlFbmRUZXh0ICs9IDI7CiAgfQogIHJldHVybiBpRW5kVGV4dCArIDE7Cn0pOwphZGRTdGF0ZShJbml0aWFsU3RhdGUsIFtPUFMuc2F2ZSwgT1BTLnRyYW5zZm9ybSwgT1BTLmNvbnN0cnVjdFBhdGgsIE9QUy5yZXN0b3JlXSwgY29udGV4dCA9PiB7CiAgY29uc3QgYXJnc0FycmF5ID0gY29udGV4dC5hcmdzQXJyYXk7CiAgY29uc3QgaUZpcnN0Q29uc3RydWN0UGF0aCA9IGNvbnRleHQuaUN1cnIgLSAxOwogIGNvbnN0IG9wID0gYXJnc0FycmF5W2lGaXJzdENvbnN0cnVjdFBhdGhdWzBdOwogIGlmIChvcCAhPT0gT1BTLnN0cm9rZSAmJiBvcCAhPT0gT1BTLmNsb3NlU3Ryb2tlICYmIG9wICE9PSBPUFMuZmlsbFN0cm9rZSAmJiBvcCAhPT0gT1BTLmVvRmlsbFN0cm9rZSAmJiBvcCAhPT0gT1BTLmNsb3NlRmlsbFN0cm9rZSAmJiBvcCAhPT0gT1BTLmNsb3NlRU9GaWxsU3Ryb2tlKSB7CiAgICByZXR1cm4gdHJ1ZTsKICB9CiAgY29uc3QgaUZpcnN0VHJhbnNmb3JtID0gY29udGV4dC5pQ3VyciAtIDI7CiAgY29uc3QgdHJhbnNmb3JtID0gYXJnc0FycmF5W2lGaXJzdFRyYW5zZm9ybV07CiAgcmV0dXJuIHRyYW5zZm9ybVswXSA9PT0gMSAmJiB0cmFuc2Zvcm1bMV0gPT09IDAgJiYgdHJhbnNmb3JtWzJdID09PSAwICYmIHRyYW5zZm9ybVszXSA9PT0gMTsKfSwgKCkgPT4gZmFsc2UsIChjb250ZXh0LCBpKSA9PiB7CiAgY29uc3QgewogICAgZm5BcnJheSwKICAgIGFyZ3NBcnJheQogIH0gPSBjb250ZXh0OwogIGNvbnN0IGN1cnIgPSBjb250ZXh0LmlDdXJyOwogIGNvbnN0IGlGaXJzdFNhdmUgPSBjdXJyIC0gMzsKICBjb25zdCBpRmlyc3RUcmFuc2Zvcm0gPSBjdXJyIC0gMjsKICBjb25zdCBpRmlyc3RDb25zdHJ1Y3RQYXRoID0gY3VyciAtIDE7CiAgY29uc3QgYXJncyA9IGFyZ3NBcnJheVtpRmlyc3RDb25zdHJ1Y3RQYXRoXTsKICBjb25zdCB0cmFuc2Zvcm0gPSBhcmdzQXJyYXlbaUZpcnN0VHJhbnNmb3JtXTsKICBjb25zdCBbLCBbYnVmZmVyXSwgbWluTWF4XSA9IGFyZ3M7CiAgaWYgKG1pbk1heCkgewogICAgVXRpbC5zY2FsZU1pbk1heCh0cmFuc2Zvcm0sIG1pbk1heCk7CiAgICBmb3IgKGxldCBrID0gMCwga2sgPSBidWZmZXIubGVuZ3RoOyBrIDwga2s7KSB7CiAgICAgIHN3aXRjaCAoYnVmZmVyW2srK10pIHsKICAgICAgICBjYXNlIERyYXdPUFMubW92ZVRvOgogICAgICAgIGNhc2UgRHJhd09QUy5saW5lVG86CiAgICAgICAgICBVdGlsLmFwcGx5VHJhbnNmb3JtKGJ1ZmZlciwgdHJhbnNmb3JtLCBrKTsKICAgICAgICAgIGsgKz0gMjsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgRHJhd09QUy5jdXJ2ZVRvOgogICAgICAgICAgVXRpbC5hcHBseVRyYW5zZm9ybVRvQmV6aWVyKGJ1ZmZlciwgdHJhbnNmb3JtLCBrKTsKICAgICAgICAgIGsgKz0gNjsKICAgICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CiAgfQogIGZuQXJyYXkuc3BsaWNlKGlGaXJzdFNhdmUsIDQsIE9QUy5jb25zdHJ1Y3RQYXRoKTsKICBhcmdzQXJyYXkuc3BsaWNlKGlGaXJzdFNhdmUsIDQsIGFyZ3MpOwogIHJldHVybiBpRmlyc3RTYXZlICsgMTsKfSk7CmNsYXNzIE51bGxPcHRpbWl6ZXIgewogIGNvbnN0cnVjdG9yKHF1ZXVlKSB7CiAgICB0aGlzLnF1ZXVlID0gcXVldWU7CiAgfQogIF9vcHRpbWl6ZSgpIHt9CiAgcHVzaChmbiwgYXJncykgewogICAgdGhpcy5xdWV1ZS5mbkFycmF5LnB1c2goZm4pOwogICAgdGhpcy5xdWV1ZS5hcmdzQXJyYXkucHVzaChhcmdzKTsKICAgIHRoaXMuX29wdGltaXplKCk7CiAgfQogIGZsdXNoKCkge30KICByZXNldCgpIHt9Cn0KY2xhc3MgUXVldWVPcHRpbWl6ZXIgZXh0ZW5kcyBOdWxsT3B0aW1pemVyIHsKICBjb25zdHJ1Y3RvcihxdWV1ZSkgewogICAgc3VwZXIocXVldWUpOwogICAgdGhpcy5zdGF0ZSA9IG51bGw7CiAgICB0aGlzLmNvbnRleHQgPSB7CiAgICAgIGlDdXJyOiAwLAogICAgICBmbkFycmF5OiBxdWV1ZS5mbkFycmF5LAogICAgICBhcmdzQXJyYXk6IHF1ZXVlLmFyZ3NBcnJheSwKICAgICAgaXNPZmZzY3JlZW5DYW52YXNTdXBwb3J0ZWQ6IE9wZXJhdG9yTGlzdC5pc09mZnNjcmVlbkNhbnZhc1N1cHBvcnRlZAogICAgfTsKICAgIHRoaXMubWF0Y2ggPSBudWxsOwogICAgdGhpcy5sYXN0UHJvY2Vzc2VkID0gMDsKICB9CiAgX29wdGltaXplKCkgewogICAgY29uc3QgZm5BcnJheSA9IHRoaXMucXVldWUuZm5BcnJheTsKICAgIGxldCBpID0gdGhpcy5sYXN0UHJvY2Vzc2VkLAogICAgICBpaSA9IGZuQXJyYXkubGVuZ3RoOwogICAgbGV0IHN0YXRlID0gdGhpcy5zdGF0ZTsKICAgIGxldCBtYXRjaCA9IHRoaXMubWF0Y2g7CiAgICBpZiAoIXN0YXRlICYmICFtYXRjaCAmJiBpICsgMSA9PT0gaWkgJiYgIUluaXRpYWxTdGF0ZVtmbkFycmF5W2ldXSkgewogICAgICB0aGlzLmxhc3RQcm9jZXNzZWQgPSBpaTsKICAgICAgcmV0dXJuOwogICAgfQogICAgY29uc3QgY29udGV4dCA9IHRoaXMuY29udGV4dDsKICAgIHdoaWxlIChpIDwgaWkpIHsKICAgICAgaWYgKG1hdGNoKSB7CiAgICAgICAgY29uc3QgaXRlcmF0ZSA9ICgwLCBtYXRjaC5pdGVyYXRlRm4pKGNvbnRleHQsIGkpOwogICAgICAgIGlmIChpdGVyYXRlKSB7CiAgICAgICAgICBpKys7CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CiAgICAgICAgaSA9ICgwLCBtYXRjaC5wcm9jZXNzRm4pKGNvbnRleHQsIGkgKyAxKTsKICAgICAgICBpaSA9IGZuQXJyYXkubGVuZ3RoOwogICAgICAgIG1hdGNoID0gbnVsbDsKICAgICAgICBzdGF0ZSA9IG51bGw7CiAgICAgICAgaWYgKGkgPj0gaWkpIHsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgfQogICAgICBzdGF0ZSA9IChzdGF0ZSB8fCBJbml0aWFsU3RhdGUpW2ZuQXJyYXlbaV1dOwogICAgICBpZiAoIXN0YXRlIHx8IEFycmF5LmlzQXJyYXkoc3RhdGUpKSB7CiAgICAgICAgaSsrOwogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGNvbnRleHQuaUN1cnIgPSBpOwogICAgICBpKys7CiAgICAgIGlmIChzdGF0ZS5jaGVja0ZuICYmICEoMCwgc3RhdGUuY2hlY2tGbikoY29udGV4dCkpIHsKICAgICAgICBzdGF0ZSA9IG51bGw7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgbWF0Y2ggPSBzdGF0ZTsKICAgICAgc3RhdGUgPSBudWxsOwogICAgfQogICAgdGhpcy5zdGF0ZSA9IHN0YXRlOwogICAgdGhpcy5tYXRjaCA9IG1hdGNoOwogICAgdGhpcy5sYXN0UHJvY2Vzc2VkID0gaTsKICB9CiAgZmx1c2goKSB7CiAgICB3aGlsZSAodGhpcy5tYXRjaCkgewogICAgICBjb25zdCBsZW5ndGggPSB0aGlzLnF1ZXVlLmZuQXJyYXkubGVuZ3RoOwogICAgICB0aGlzLmxhc3RQcm9jZXNzZWQgPSAoMCwgdGhpcy5tYXRjaC5wcm9jZXNzRm4pKHRoaXMuY29udGV4dCwgbGVuZ3RoKTsKICAgICAgdGhpcy5tYXRjaCA9IG51bGw7CiAgICAgIHRoaXMuc3RhdGUgPSBudWxsOwogICAgICB0aGlzLl9vcHRpbWl6ZSgpOwogICAgfQogIH0KICByZXNldCgpIHsKICAgIHRoaXMuc3RhdGUgPSBudWxsOwogICAgdGhpcy5tYXRjaCA9IG51bGw7CiAgICB0aGlzLmxhc3RQcm9jZXNzZWQgPSAwOwogIH0KfQpjbGFzcyBPcGVyYXRvckxpc3QgewogIHN0YXRpYyBDSFVOS19TSVpFID0gMTAwMDsKICBzdGF0aWMgQ0hVTktfU0laRV9BQk9VVCA9IHRoaXMuQ0hVTktfU0laRSAtIDU7CiAgc3RhdGljIGlzT2Zmc2NyZWVuQ2FudmFzU3VwcG9ydGVkID0gZmFsc2U7CiAgY29uc3RydWN0b3IoaW50ZW50ID0gMCwgc3RyZWFtU2luaykgewogICAgdGhpcy5fc3RyZWFtU2luayA9IHN0cmVhbVNpbms7CiAgICB0aGlzLmZuQXJyYXkgPSBbXTsKICAgIHRoaXMuYXJnc0FycmF5ID0gW107CiAgICB0aGlzLm9wdGltaXplciA9IHN0cmVhbVNpbmsgJiYgIShpbnRlbnQgJiBSZW5kZXJpbmdJbnRlbnRGbGFnLk9QTElTVCkgPyBuZXcgUXVldWVPcHRpbWl6ZXIodGhpcykgOiBuZXcgTnVsbE9wdGltaXplcih0aGlzKTsKICAgIHRoaXMuZGVwZW5kZW5jaWVzID0gbmV3IFNldCgpOwogICAgdGhpcy5fdG90YWxMZW5ndGggPSAwOwogICAgdGhpcy53ZWlnaHQgPSAwOwogICAgdGhpcy5fcmVzb2x2ZWQgPSBzdHJlYW1TaW5rID8gbnVsbCA6IFByb21pc2UucmVzb2x2ZSgpOwogIH0KICBzdGF0aWMgc2V0T3B0aW9ucyh7CiAgICBpc09mZnNjcmVlbkNhbnZhc1N1cHBvcnRlZAogIH0pIHsKICAgIHRoaXMuaXNPZmZzY3JlZW5DYW52YXNTdXBwb3J0ZWQgPSBpc09mZnNjcmVlbkNhbnZhc1N1cHBvcnRlZDsKICB9CiAgZ2V0IGxlbmd0aCgpIHsKICAgIHJldHVybiB0aGlzLmFyZ3NBcnJheS5sZW5ndGg7CiAgfQogIGdldCByZWFkeSgpIHsKICAgIHJldHVybiB0aGlzLl9yZXNvbHZlZCB8fCB0aGlzLl9zdHJlYW1TaW5rLnJlYWR5OwogIH0KICBnZXQgdG90YWxMZW5ndGgoKSB7CiAgICByZXR1cm4gdGhpcy5fdG90YWxMZW5ndGggKyB0aGlzLmxlbmd0aDsKICB9CiAgYWRkT3AoZm4sIGFyZ3MpIHsKICAgIHRoaXMub3B0aW1pemVyLnB1c2goZm4sIGFyZ3MpOwogICAgdGhpcy53ZWlnaHQrKzsKICAgIGlmICh0aGlzLl9zdHJlYW1TaW5rKSB7CiAgICAgIGlmICh0aGlzLndlaWdodCA+PSBPcGVyYXRvckxpc3QuQ0hVTktfU0laRSkgewogICAgICAgIHRoaXMuZmx1c2goKTsKICAgICAgfSBlbHNlIGlmICh0aGlzLndlaWdodCA+PSBPcGVyYXRvckxpc3QuQ0hVTktfU0laRV9BQk9VVCAmJiAoZm4gPT09IE9QUy5yZXN0b3JlIHx8IGZuID09PSBPUFMuZW5kVGV4dCkpIHsKICAgICAgICB0aGlzLmZsdXNoKCk7CiAgICAgIH0KICAgIH0KICB9CiAgYWRkSW1hZ2VPcHMoZm4sIGFyZ3MsIG9wdGlvbmFsQ29udGVudCwgaGFzTWFzayA9IGZhbHNlKSB7CiAgICBpZiAoaGFzTWFzaykgewogICAgICB0aGlzLmFkZE9wKE9QUy5zYXZlKTsKICAgICAgdGhpcy5hZGRPcChPUFMuc2V0R1N0YXRlLCBbW1siU01hc2siLCBmYWxzZV1dXSk7CiAgICB9CiAgICBpZiAob3B0aW9uYWxDb250ZW50ICE9PSB1bmRlZmluZWQpIHsKICAgICAgdGhpcy5hZGRPcChPUFMuYmVnaW5NYXJrZWRDb250ZW50UHJvcHMsIFsiT0MiLCBvcHRpb25hbENvbnRlbnRdKTsKICAgIH0KICAgIHRoaXMuYWRkT3AoZm4sIGFyZ3MpOwogICAgaWYgKG9wdGlvbmFsQ29udGVudCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgIHRoaXMuYWRkT3AoT1BTLmVuZE1hcmtlZENvbnRlbnQsIFtdKTsKICAgIH0KICAgIGlmIChoYXNNYXNrKSB7CiAgICAgIHRoaXMuYWRkT3AoT1BTLnJlc3RvcmUpOwogICAgfQogIH0KICBhZGREZXBlbmRlbmN5KGRlcGVuZGVuY3kpIHsKICAgIGlmICh0aGlzLmRlcGVuZGVuY2llcy5oYXMoZGVwZW5kZW5jeSkpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgdGhpcy5kZXBlbmRlbmNpZXMuYWRkKGRlcGVuZGVuY3kpOwogICAgdGhpcy5hZGRPcChPUFMuZGVwZW5kZW5jeSwgW2RlcGVuZGVuY3ldKTsKICB9CiAgYWRkRGVwZW5kZW5jaWVzKGRlcGVuZGVuY2llcykgewogICAgZm9yIChjb25zdCBkZXBlbmRlbmN5IG9mIGRlcGVuZGVuY2llcykgewogICAgICB0aGlzLmFkZERlcGVuZGVuY3koZGVwZW5kZW5jeSk7CiAgICB9CiAgfQogIGFkZE9wTGlzdChvcExpc3QpIHsKICAgIGlmICghKG9wTGlzdCBpbnN0YW5jZW9mIE9wZXJhdG9yTGlzdCkpIHsKICAgICAgd2FybignYWRkT3BMaXN0IC0gaWdub3JpbmcgaW52YWxpZCAib3BMaXN0IiBwYXJhbWV0ZXIuJyk7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGZvciAoY29uc3QgZGVwZW5kZW5jeSBvZiBvcExpc3QuZGVwZW5kZW5jaWVzKSB7CiAgICAgIHRoaXMuZGVwZW5kZW5jaWVzLmFkZChkZXBlbmRlbmN5KTsKICAgIH0KICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IG9wTGlzdC5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgIHRoaXMuYWRkT3Aob3BMaXN0LmZuQXJyYXlbaV0sIG9wTGlzdC5hcmdzQXJyYXlbaV0pOwogICAgfQogIH0KICBnZXRJUigpIHsKICAgIHJldHVybiB7CiAgICAgIGZuQXJyYXk6IHRoaXMuZm5BcnJheSwKICAgICAgYXJnc0FycmF5OiB0aGlzLmFyZ3NBcnJheSwKICAgICAgbGVuZ3RoOiB0aGlzLmxlbmd0aAogICAgfTsKICB9CiAgZ2V0IF90cmFuc2ZlcnMoKSB7CiAgICBjb25zdCB0cmFuc2ZlcnMgPSBbXTsKICAgIGNvbnN0IHsKICAgICAgZm5BcnJheSwKICAgICAgYXJnc0FycmF5LAogICAgICBsZW5ndGgKICAgIH0gPSB0aGlzOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICBzd2l0Y2ggKGZuQXJyYXlbaV0pIHsKICAgICAgICBjYXNlIE9QUy5wYWludElubGluZUltYWdlWE9iamVjdDoKICAgICAgICBjYXNlIE9QUy5wYWludElubGluZUltYWdlWE9iamVjdEdyb3VwOgogICAgICAgIGNhc2UgT1BTLnBhaW50SW1hZ2VNYXNrWE9iamVjdDoKICAgICAgICAgIHsKICAgICAgICAgICAgY29uc3QgewogICAgICAgICAgICAgIGJpdG1hcCwKICAgICAgICAgICAgICBkYXRhCiAgICAgICAgICAgIH0gPSBhcmdzQXJyYXlbaV1bMF07CiAgICAgICAgICAgIGlmIChiaXRtYXAgfHwgZGF0YT8uYnVmZmVyKSB7CiAgICAgICAgICAgICAgdHJhbnNmZXJzLnB1c2goYml0bWFwIHx8IGRhdGEuYnVmZmVyKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICBjYXNlIE9QUy5jb25zdHJ1Y3RQYXRoOgogICAgICAgICAgewogICAgICAgICAgICBjb25zdCBbLCBbZGF0YV0sIG1pbk1heF0gPSBhcmdzQXJyYXlbaV07CiAgICAgICAgICAgIGlmIChkYXRhKSB7CiAgICAgICAgICAgICAgdHJhbnNmZXJzLnB1c2goZGF0YS5idWZmZXIsIG1pbk1heC5idWZmZXIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgIGNhc2UgT1BTLnBhaW50Rm9ybVhPYmplY3RCZWdpbjoKICAgICAgICAgIGNvbnN0IFttYXRyaXgsIGJib3hdID0gYXJnc0FycmF5W2ldOwogICAgICAgICAgaWYgKG1hdHJpeCkgewogICAgICAgICAgICB0cmFuc2ZlcnMucHVzaChtYXRyaXguYnVmZmVyKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChiYm94KSB7CiAgICAgICAgICAgIHRyYW5zZmVycy5wdXNoKGJib3guYnVmZmVyKTsKICAgICAgICAgIH0KICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgT1BTLnNldFRleHRNYXRyaXg6CiAgICAgICAgICB0cmFuc2ZlcnMucHVzaChhcmdzQXJyYXlbaV1bMF0uYnVmZmVyKTsKICAgICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gdHJhbnNmZXJzOwogIH0KICBmbHVzaChsYXN0Q2h1bmsgPSBmYWxzZSwgc2VwYXJhdGVBbm5vdHMgPSBudWxsKSB7CiAgICB0aGlzLm9wdGltaXplci5mbHVzaCgpOwogICAgY29uc3QgbGVuZ3RoID0gdGhpcy5sZW5ndGg7CiAgICB0aGlzLl90b3RhbExlbmd0aCArPSBsZW5ndGg7CiAgICB0aGlzLl9zdHJlYW1TaW5rLmVucXVldWUoewogICAgICBmbkFycmF5OiB0aGlzLmZuQXJyYXksCiAgICAgIGFyZ3NBcnJheTogdGhpcy5hcmdzQXJyYXksCiAgICAgIGxhc3RDaHVuaywKICAgICAgc2VwYXJhdGVBbm5vdHMsCiAgICAgIGxlbmd0aAogICAgfSwgMSwgdGhpcy5fdHJhbnNmZXJzKTsKICAgIHRoaXMuZGVwZW5kZW5jaWVzLmNsZWFyKCk7CiAgICB0aGlzLmZuQXJyYXkubGVuZ3RoID0gMDsKICAgIHRoaXMuYXJnc0FycmF5Lmxlbmd0aCA9IDA7CiAgICB0aGlzLndlaWdodCA9IDA7CiAgICB0aGlzLm9wdGltaXplci5yZXNldCgpOwogIH0KfQoKLy8gRVhURVJOQUwgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuaXRlcmF0b3IuZmluZC5qcwp2YXIgZXNfaXRlcmF0b3JfZmluZCA9IF9fd2VicGFja19yZXF1aXJlX18oMTE2KTsKLy8gRVhURVJOQUwgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmZsYWdzLmpzCnZhciBlc19yZWdleHBfZmxhZ3MgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk0NzkpOwovLyBFWFRFUk5BTCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5pdGVyYXRvci5mb3ItZWFjaC5qcwp2YXIgZXNfaXRlcmF0b3JfZm9yX2VhY2ggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc1ODgpOwo7Ly8gLi9zcmMvY29yZS9iaW5hcnlfY21hcC5qcwoKCgoKCgoKCgpmdW5jdGlvbiBoZXhUb0ludChhLCBzaXplKSB7CiAgbGV0IG4gPSAwOwogIGZvciAobGV0IGkgPSAwOyBpIDw9IHNpemU7IGkrKykgewogICAgbiA9IG4gPDwgOCB8IGFbaV07CiAgfQogIHJldHVybiBuID4+PiAwOwp9CmZ1bmN0aW9uIGhleFRvU3RyKGEsIHNpemUpIHsKICBpZiAoc2l6ZSA9PT0gMSkgewogICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYVswXSwgYVsxXSk7CiAgfQogIGlmIChzaXplID09PSAzKSB7CiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShhWzBdLCBhWzFdLCBhWzJdLCBhWzNdKTsKICB9CiAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoLi4uYS5zdWJhcnJheSgwLCBzaXplICsgMSkpOwp9CmZ1bmN0aW9uIGFkZEhleChhLCBiLCBzaXplKSB7CiAgbGV0IGMgPSAwOwogIGZvciAobGV0IGkgPSBzaXplOyBpID49IDA7IGktLSkgewogICAgYyArPSBhW2ldICsgYltpXTsKICAgIGFbaV0gPSBjICYgMjU1OwogICAgYyA+Pj0gODsKICB9Cn0KZnVuY3Rpb24gaW5jSGV4KGEsIHNpemUpIHsKICBsZXQgYyA9IDE7CiAgZm9yIChsZXQgaSA9IHNpemU7IGkgPj0gMCAmJiBjID4gMDsgaS0tKSB7CiAgICBjICs9IGFbaV07CiAgICBhW2ldID0gYyAmIDI1NTsKICAgIGMgPj49IDg7CiAgfQp9CmNvbnN0IE1BWF9OVU1fU0laRSA9IDE2Owpjb25zdCBNQVhfRU5DT0RFRF9OVU1fU0laRSA9IDE5OwpjbGFzcyBCaW5hcnlDTWFwU3RyZWFtIHsKICBjb25zdHJ1Y3RvcihkYXRhKSB7CiAgICB0aGlzLmJ1ZmZlciA9IGRhdGE7CiAgICB0aGlzLnBvcyA9IDA7CiAgICB0aGlzLmVuZCA9IGRhdGEubGVuZ3RoOwogICAgdGhpcy50bXBCdWYgPSBuZXcgVWludDhBcnJheShNQVhfRU5DT0RFRF9OVU1fU0laRSk7CiAgfQogIHJlYWRCeXRlKCkgewogICAgaWYgKHRoaXMucG9zID49IHRoaXMuZW5kKSB7CiAgICAgIHJldHVybiAtMTsKICAgIH0KICAgIHJldHVybiB0aGlzLmJ1ZmZlclt0aGlzLnBvcysrXTsKICB9CiAgcmVhZE51bWJlcigpIHsKICAgIGxldCBuID0gMDsKICAgIGxldCBsYXN0OwogICAgZG8gewogICAgICBjb25zdCBiID0gdGhpcy5yZWFkQnl0ZSgpOwogICAgICBpZiAoYiA8IDApIHsKICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoInVuZXhwZWN0ZWQgRU9GIGluIGJjbWFwIik7CiAgICAgIH0KICAgICAgbGFzdCA9ICEoYiAmIDB4ODApOwogICAgICBuID0gbiA8PCA3IHwgYiAmIDB4N2Y7CiAgICB9IHdoaWxlICghbGFzdCk7CiAgICByZXR1cm4gbjsKICB9CiAgcmVhZFNpZ25lZCgpIHsKICAgIGNvbnN0IG4gPSB0aGlzLnJlYWROdW1iZXIoKTsKICAgIHJldHVybiBuICYgMSA/IH4obiA+Pj4gMSkgOiBuID4+PiAxOwogIH0KICByZWFkSGV4KG51bSwgc2l6ZSkgewogICAgbnVtLnNldCh0aGlzLmJ1ZmZlci5zdWJhcnJheSh0aGlzLnBvcywgdGhpcy5wb3MgKyBzaXplICsgMSkpOwogICAgdGhpcy5wb3MgKz0gc2l6ZSArIDE7CiAgfQogIHJlYWRIZXhOdW1iZXIobnVtLCBzaXplKSB7CiAgICBsZXQgbGFzdDsKICAgIGNvbnN0IHN0YWNrID0gdGhpcy50bXBCdWY7CiAgICBsZXQgc3AgPSAwOwogICAgZG8gewogICAgICBjb25zdCBiID0gdGhpcy5yZWFkQnl0ZSgpOwogICAgICBpZiAoYiA8IDApIHsKICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoInVuZXhwZWN0ZWQgRU9GIGluIGJjbWFwIik7CiAgICAgIH0KICAgICAgbGFzdCA9ICEoYiAmIDB4ODApOwogICAgICBzdGFja1tzcCsrXSA9IGIgJiAweDdmOwogICAgfSB3aGlsZSAoIWxhc3QpOwogICAgbGV0IGkgPSBzaXplLAogICAgICBidWZmZXIgPSAwLAogICAgICBidWZmZXJTaXplID0gMDsKICAgIHdoaWxlIChpID49IDApIHsKICAgICAgd2hpbGUgKGJ1ZmZlclNpemUgPCA4ICYmIHN0YWNrLmxlbmd0aCA+IDApIHsKICAgICAgICBidWZmZXIgfD0gc3RhY2tbLS1zcF0gPDwgYnVmZmVyU2l6ZTsKICAgICAgICBidWZmZXJTaXplICs9IDc7CiAgICAgIH0KICAgICAgbnVtW2ldID0gYnVmZmVyICYgMjU1OwogICAgICBpLS07CiAgICAgIGJ1ZmZlciA+Pj0gODsKICAgICAgYnVmZmVyU2l6ZSAtPSA4OwogICAgfQogIH0KICByZWFkSGV4U2lnbmVkKG51bSwgc2l6ZSkgewogICAgdGhpcy5yZWFkSGV4TnVtYmVyKG51bSwgc2l6ZSk7CiAgICBjb25zdCBzaWduID0gbnVtW3NpemVdICYgMSA/IDI1NSA6IDA7CiAgICBsZXQgYyA9IDA7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBzaXplOyBpKyspIHsKICAgICAgYyA9IChjICYgMSkgPDwgOCB8IG51bVtpXTsKICAgICAgbnVtW2ldID0gYyA+PiAxIF4gc2lnbjsKICAgIH0KICB9CiAgcmVhZFN0cmluZygpIHsKICAgIGNvbnN0IGxlbiA9IHRoaXMucmVhZE51bWJlcigpLAogICAgICBidWYgPSBuZXcgQXJyYXkobGVuKTsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHsKICAgICAgYnVmW2ldID0gdGhpcy5yZWFkTnVtYmVyKCk7CiAgICB9CiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSguLi5idWYpOwogIH0KfQpjbGFzcyBCaW5hcnlDTWFwUmVhZGVyIHsKICBhc3luYyBwcm9jZXNzKGRhdGEsIGNNYXAsIGV4dGVuZCkgewogICAgY29uc3Qgc3RyZWFtID0gbmV3IEJpbmFyeUNNYXBTdHJlYW0oZGF0YSk7CiAgICBjb25zdCBoZWFkZXIgPSBzdHJlYW0ucmVhZEJ5dGUoKTsKICAgIGNNYXAudmVydGljYWwgPSAhIShoZWFkZXIgJiAxKTsKICAgIGxldCB1c2VDTWFwID0gbnVsbDsKICAgIGNvbnN0IHN0YXJ0ID0gbmV3IFVpbnQ4QXJyYXkoTUFYX05VTV9TSVpFKTsKICAgIGNvbnN0IGVuZCA9IG5ldyBVaW50OEFycmF5KE1BWF9OVU1fU0laRSk7CiAgICBjb25zdCBjaGFyID0gbmV3IFVpbnQ4QXJyYXkoTUFYX05VTV9TSVpFKTsKICAgIGNvbnN0IGNoYXJDb2RlID0gbmV3IFVpbnQ4QXJyYXkoTUFYX05VTV9TSVpFKTsKICAgIGNvbnN0IHRtcCA9IG5ldyBVaW50OEFycmF5KE1BWF9OVU1fU0laRSk7CiAgICBsZXQgY29kZTsKICAgIGxldCBiOwogICAgd2hpbGUgKChiID0gc3RyZWFtLnJlYWRCeXRlKCkpID49IDApIHsKICAgICAgY29uc3QgdHlwZSA9IGIgPj4gNTsKICAgICAgaWYgKHR5cGUgPT09IDcpIHsKICAgICAgICBzd2l0Y2ggKGIgJiAweDFmKSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIHN0cmVhbS5yZWFkU3RyaW5nKCk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICB1c2VDTWFwID0gc3RyZWFtLnJlYWRTdHJpbmcoKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGNvbnN0IHNlcXVlbmNlID0gISEoYiAmIDB4MTApOwogICAgICBjb25zdCBkYXRhU2l6ZSA9IGIgJiAxNTsKICAgICAgaWYgKGRhdGFTaXplICsgMSA+IE1BWF9OVU1fU0laRSkgewogICAgICAgIHRocm93IG5ldyBFcnJvcigiQmluYXJ5Q01hcFJlYWRlci5wcm9jZXNzOiBJbnZhbGlkIGRhdGFTaXplLiIpOwogICAgICB9CiAgICAgIGNvbnN0IHVjczJEYXRhU2l6ZSA9IDE7CiAgICAgIGNvbnN0IHN1Yml0ZW1zQ291bnQgPSBzdHJlYW0ucmVhZE51bWJlcigpOwogICAgICBzd2l0Y2ggKHR5cGUpIHsKICAgICAgICBjYXNlIDA6CiAgICAgICAgICBzdHJlYW0ucmVhZEhleChzdGFydCwgZGF0YVNpemUpOwogICAgICAgICAgc3RyZWFtLnJlYWRIZXhOdW1iZXIoZW5kLCBkYXRhU2l6ZSk7CiAgICAgICAgICBhZGRIZXgoZW5kLCBzdGFydCwgZGF0YVNpemUpOwogICAgICAgICAgY01hcC5hZGRDb2Rlc3BhY2VSYW5nZShkYXRhU2l6ZSArIDEsIGhleFRvSW50KHN0YXJ0LCBkYXRhU2l6ZSksIGhleFRvSW50KGVuZCwgZGF0YVNpemUpKTsKICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgc3ViaXRlbXNDb3VudDsgaSsrKSB7CiAgICAgICAgICAgIGluY0hleChlbmQsIGRhdGFTaXplKTsKICAgICAgICAgICAgc3RyZWFtLnJlYWRIZXhOdW1iZXIoc3RhcnQsIGRhdGFTaXplKTsKICAgICAgICAgICAgYWRkSGV4KHN0YXJ0LCBlbmQsIGRhdGFTaXplKTsKICAgICAgICAgICAgc3RyZWFtLnJlYWRIZXhOdW1iZXIoZW5kLCBkYXRhU2l6ZSk7CiAgICAgICAgICAgIGFkZEhleChlbmQsIHN0YXJ0LCBkYXRhU2l6ZSk7CiAgICAgICAgICAgIGNNYXAuYWRkQ29kZXNwYWNlUmFuZ2UoZGF0YVNpemUgKyAxLCBoZXhUb0ludChzdGFydCwgZGF0YVNpemUpLCBoZXhUb0ludChlbmQsIGRhdGFTaXplKSk7CiAgICAgICAgICB9CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIDE6CiAgICAgICAgICBzdHJlYW0ucmVhZEhleChzdGFydCwgZGF0YVNpemUpOwogICAgICAgICAgc3RyZWFtLnJlYWRIZXhOdW1iZXIoZW5kLCBkYXRhU2l6ZSk7CiAgICAgICAgICBhZGRIZXgoZW5kLCBzdGFydCwgZGF0YVNpemUpOwogICAgICAgICAgc3RyZWFtLnJlYWROdW1iZXIoKTsKICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgc3ViaXRlbXNDb3VudDsgaSsrKSB7CiAgICAgICAgICAgIGluY0hleChlbmQsIGRhdGFTaXplKTsKICAgICAgICAgICAgc3RyZWFtLnJlYWRIZXhOdW1iZXIoc3RhcnQsIGRhdGFTaXplKTsKICAgICAgICAgICAgYWRkSGV4KHN0YXJ0LCBlbmQsIGRhdGFTaXplKTsKICAgICAgICAgICAgc3RyZWFtLnJlYWRIZXhOdW1iZXIoZW5kLCBkYXRhU2l6ZSk7CiAgICAgICAgICAgIGFkZEhleChlbmQsIHN0YXJ0LCBkYXRhU2l6ZSk7CiAgICAgICAgICAgIHN0cmVhbS5yZWFkTnVtYmVyKCk7CiAgICAgICAgICB9CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIDI6CiAgICAgICAgICBzdHJlYW0ucmVhZEhleChjaGFyLCBkYXRhU2l6ZSk7CiAgICAgICAgICBjb2RlID0gc3RyZWFtLnJlYWROdW1iZXIoKTsKICAgICAgICAgIGNNYXAubWFwT25lKGhleFRvSW50KGNoYXIsIGRhdGFTaXplKSwgY29kZSk7CiAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHN1Yml0ZW1zQ291bnQ7IGkrKykgewogICAgICAgICAgICBpbmNIZXgoY2hhciwgZGF0YVNpemUpOwogICAgICAgICAgICBpZiAoIXNlcXVlbmNlKSB7CiAgICAgICAgICAgICAgc3RyZWFtLnJlYWRIZXhOdW1iZXIodG1wLCBkYXRhU2l6ZSk7CiAgICAgICAgICAgICAgYWRkSGV4KGNoYXIsIHRtcCwgZGF0YVNpemUpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvZGUgPSBzdHJlYW0ucmVhZFNpZ25lZCgpICsgKGNvZGUgKyAxKTsKICAgICAgICAgICAgY01hcC5tYXBPbmUoaGV4VG9JbnQoY2hhciwgZGF0YVNpemUpLCBjb2RlKTsKICAgICAgICAgIH0KICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgMzoKICAgICAgICAgIHN0cmVhbS5yZWFkSGV4KHN0YXJ0LCBkYXRhU2l6ZSk7CiAgICAgICAgICBzdHJlYW0ucmVhZEhleE51bWJlcihlbmQsIGRhdGFTaXplKTsKICAgICAgICAgIGFkZEhleChlbmQsIHN0YXJ0LCBkYXRhU2l6ZSk7CiAgICAgICAgICBjb2RlID0gc3RyZWFtLnJlYWROdW1iZXIoKTsKICAgICAgICAgIGNNYXAubWFwQ2lkUmFuZ2UoaGV4VG9JbnQoc3RhcnQsIGRhdGFTaXplKSwgaGV4VG9JbnQoZW5kLCBkYXRhU2l6ZSksIGNvZGUpOwogICAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBzdWJpdGVtc0NvdW50OyBpKyspIHsKICAgICAgICAgICAgaW5jSGV4KGVuZCwgZGF0YVNpemUpOwogICAgICAgICAgICBpZiAoIXNlcXVlbmNlKSB7CiAgICAgICAgICAgICAgc3RyZWFtLnJlYWRIZXhOdW1iZXIoc3RhcnQsIGRhdGFTaXplKTsKICAgICAgICAgICAgICBhZGRIZXgoc3RhcnQsIGVuZCwgZGF0YVNpemUpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHN0YXJ0LnNldChlbmQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHN0cmVhbS5yZWFkSGV4TnVtYmVyKGVuZCwgZGF0YVNpemUpOwogICAgICAgICAgICBhZGRIZXgoZW5kLCBzdGFydCwgZGF0YVNpemUpOwogICAgICAgICAgICBjb2RlID0gc3RyZWFtLnJlYWROdW1iZXIoKTsKICAgICAgICAgICAgY01hcC5tYXBDaWRSYW5nZShoZXhUb0ludChzdGFydCwgZGF0YVNpemUpLCBoZXhUb0ludChlbmQsIGRhdGFTaXplKSwgY29kZSk7CiAgICAgICAgICB9CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIDQ6CiAgICAgICAgICBzdHJlYW0ucmVhZEhleChjaGFyLCB1Y3MyRGF0YVNpemUpOwogICAgICAgICAgc3RyZWFtLnJlYWRIZXgoY2hhckNvZGUsIGRhdGFTaXplKTsKICAgICAgICAgIGNNYXAubWFwT25lKGhleFRvSW50KGNoYXIsIHVjczJEYXRhU2l6ZSksIGhleFRvU3RyKGNoYXJDb2RlLCBkYXRhU2l6ZSkpOwogICAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBzdWJpdGVtc0NvdW50OyBpKyspIHsKICAgICAgICAgICAgaW5jSGV4KGNoYXIsIHVjczJEYXRhU2l6ZSk7CiAgICAgICAgICAgIGlmICghc2VxdWVuY2UpIHsKICAgICAgICAgICAgICBzdHJlYW0ucmVhZEhleE51bWJlcih0bXAsIHVjczJEYXRhU2l6ZSk7CiAgICAgICAgICAgICAgYWRkSGV4KGNoYXIsIHRtcCwgdWNzMkRhdGFTaXplKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpbmNIZXgoY2hhckNvZGUsIGRhdGFTaXplKTsKICAgICAgICAgICAgc3RyZWFtLnJlYWRIZXhTaWduZWQodG1wLCBkYXRhU2l6ZSk7CiAgICAgICAgICAgIGFkZEhleChjaGFyQ29kZSwgdG1wLCBkYXRhU2l6ZSk7CiAgICAgICAgICAgIGNNYXAubWFwT25lKGhleFRvSW50KGNoYXIsIHVjczJEYXRhU2l6ZSksIGhleFRvU3RyKGNoYXJDb2RlLCBkYXRhU2l6ZSkpOwogICAgICAgICAgfQogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSA1OgogICAgICAgICAgc3RyZWFtLnJlYWRIZXgoc3RhcnQsIHVjczJEYXRhU2l6ZSk7CiAgICAgICAgICBzdHJlYW0ucmVhZEhleE51bWJlcihlbmQsIHVjczJEYXRhU2l6ZSk7CiAgICAgICAgICBhZGRIZXgoZW5kLCBzdGFydCwgdWNzMkRhdGFTaXplKTsKICAgICAgICAgIHN0cmVhbS5yZWFkSGV4KGNoYXJDb2RlLCBkYXRhU2l6ZSk7CiAgICAgICAgICBjTWFwLm1hcEJmUmFuZ2UoaGV4VG9JbnQoc3RhcnQsIHVjczJEYXRhU2l6ZSksIGhleFRvSW50KGVuZCwgdWNzMkRhdGFTaXplKSwgaGV4VG9TdHIoY2hhckNvZGUsIGRhdGFTaXplKSk7CiAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHN1Yml0ZW1zQ291bnQ7IGkrKykgewogICAgICAgICAgICBpbmNIZXgoZW5kLCB1Y3MyRGF0YVNpemUpOwogICAgICAgICAgICBpZiAoIXNlcXVlbmNlKSB7CiAgICAgICAgICAgICAgc3RyZWFtLnJlYWRIZXhOdW1iZXIoc3RhcnQsIHVjczJEYXRhU2l6ZSk7CiAgICAgICAgICAgICAgYWRkSGV4KHN0YXJ0LCBlbmQsIHVjczJEYXRhU2l6ZSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgc3RhcnQuc2V0KGVuZCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgc3RyZWFtLnJlYWRIZXhOdW1iZXIoZW5kLCB1Y3MyRGF0YVNpemUpOwogICAgICAgICAgICBhZGRIZXgoZW5kLCBzdGFydCwgdWNzMkRhdGFTaXplKTsKICAgICAgICAgICAgc3RyZWFtLnJlYWRIZXgoY2hhckNvZGUsIGRhdGFTaXplKTsKICAgICAgICAgICAgY01hcC5tYXBCZlJhbmdlKGhleFRvSW50KHN0YXJ0LCB1Y3MyRGF0YVNpemUpLCBoZXhUb0ludChlbmQsIHVjczJEYXRhU2l6ZSksIGhleFRvU3RyKGNoYXJDb2RlLCBkYXRhU2l6ZSkpOwogICAgICAgICAgfQogICAgICAgICAgYnJlYWs7CiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQmluYXJ5Q01hcFJlYWRlci5wcm9jZXNzIC0gdW5rbm93biB0eXBlOiAke3R5cGV9YCk7CiAgICAgIH0KICAgIH0KICAgIGlmICh1c2VDTWFwKSB7CiAgICAgIHJldHVybiBleHRlbmQodXNlQ01hcCk7CiAgICB9CiAgICByZXR1cm4gY01hcDsKICB9Cn0KCjsvLyAuL3NyYy9jb3JlL2FzY2lpXzg1X3N0cmVhbS5qcwoKCgoKCgoKCgoKY2xhc3MgQXNjaWk4NVN0cmVhbSBleHRlbmRzIERlY29kZVN0cmVhbSB7CiAgY29uc3RydWN0b3Ioc3RyLCBtYXliZUxlbmd0aCkgewogICAgaWYgKG1heWJlTGVuZ3RoKSB7CiAgICAgIG1heWJlTGVuZ3RoICo9IDAuODsKICAgIH0KICAgIHN1cGVyKG1heWJlTGVuZ3RoKTsKICAgIHRoaXMuc3RyID0gc3RyOwogICAgdGhpcy5kaWN0ID0gc3RyLmRpY3Q7CiAgICB0aGlzLmlucHV0ID0gbmV3IFVpbnQ4QXJyYXkoNSk7CiAgfQogIHJlYWRCbG9jaygpIHsKICAgIGNvbnN0IFRJTERBX0NIQVIgPSAweDdlOwogICAgY29uc3QgWl9MT1dFUl9DSEFSID0gMHg3YTsKICAgIGNvbnN0IEVPRiA9IC0xOwogICAgY29uc3Qgc3RyID0gdGhpcy5zdHI7CiAgICBsZXQgYyA9IHN0ci5nZXRCeXRlKCk7CiAgICB3aGlsZSAoaXNXaGl0ZVNwYWNlKGMpKSB7CiAgICAgIGMgPSBzdHIuZ2V0Qnl0ZSgpOwogICAgfQogICAgaWYgKGMgPT09IEVPRiB8fCBjID09PSBUSUxEQV9DSEFSKSB7CiAgICAgIHRoaXMuZW9mID0gdHJ1ZTsKICAgICAgcmV0dXJuOwogICAgfQogICAgY29uc3QgYnVmZmVyTGVuZ3RoID0gdGhpcy5idWZmZXJMZW5ndGg7CiAgICBsZXQgYnVmZmVyLCBpOwogICAgaWYgKGMgPT09IFpfTE9XRVJfQ0hBUikgewogICAgICBidWZmZXIgPSB0aGlzLmVuc3VyZUJ1ZmZlcihidWZmZXJMZW5ndGggKyA0KTsKICAgICAgZm9yIChpID0gMDsgaSA8IDQ7ICsraSkgewogICAgICAgIGJ1ZmZlcltidWZmZXJMZW5ndGggKyBpXSA9IDA7CiAgICAgIH0KICAgICAgdGhpcy5idWZmZXJMZW5ndGggKz0gNDsKICAgIH0gZWxzZSB7CiAgICAgIGNvbnN0IGlucHV0ID0gdGhpcy5pbnB1dDsKICAgICAgaW5wdXRbMF0gPSBjOwogICAgICBmb3IgKGkgPSAxOyBpIDwgNTsgKytpKSB7CiAgICAgICAgYyA9IHN0ci5nZXRCeXRlKCk7CiAgICAgICAgd2hpbGUgKGlzV2hpdGVTcGFjZShjKSkgewogICAgICAgICAgYyA9IHN0ci5nZXRCeXRlKCk7CiAgICAgICAgfQogICAgICAgIGlucHV0W2ldID0gYzsKICAgICAgICBpZiAoYyA9PT0gRU9GIHx8IGMgPT09IFRJTERBX0NIQVIpIHsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgfQogICAgICBidWZmZXIgPSB0aGlzLmVuc3VyZUJ1ZmZlcihidWZmZXJMZW5ndGggKyBpIC0gMSk7CiAgICAgIHRoaXMuYnVmZmVyTGVuZ3RoICs9IGkgLSAxOwogICAgICBpZiAoaSA8IDUpIHsKICAgICAgICBmb3IgKDsgaSA8IDU7ICsraSkgewogICAgICAgICAgaW5wdXRbaV0gPSAweDIxICsgODQ7CiAgICAgICAgfQogICAgICAgIHRoaXMuZW9mID0gdHJ1ZTsKICAgICAgfQogICAgICBsZXQgdCA9IDA7CiAgICAgIGZvciAoaSA9IDA7IGkgPCA1OyArK2kpIHsKICAgICAgICB0ID0gdCAqIDg1ICsgKGlucHV0W2ldIC0gMHgyMSk7CiAgICAgIH0KICAgICAgZm9yIChpID0gMzsgaSA+PSAwOyAtLWkpIHsKICAgICAgICBidWZmZXJbYnVmZmVyTGVuZ3RoICsgaV0gPSB0ICYgMHhmZjsKICAgICAgICB0ID4+PSA4OwogICAgICB9CiAgICB9CiAgfQp9Cgo7Ly8gLi9zcmMvY29yZS9hc2NpaV9oZXhfc3RyZWFtLmpzCgpjbGFzcyBBc2NpaUhleFN0cmVhbSBleHRlbmRzIERlY29kZVN0cmVhbSB7CiAgY29uc3RydWN0b3Ioc3RyLCBtYXliZUxlbmd0aCkgewogICAgaWYgKG1heWJlTGVuZ3RoKSB7CiAgICAgIG1heWJlTGVuZ3RoICo9IDAuNTsKICAgIH0KICAgIHN1cGVyKG1heWJlTGVuZ3RoKTsKICAgIHRoaXMuc3RyID0gc3RyOwogICAgdGhpcy5kaWN0ID0gc3RyLmRpY3Q7CiAgICB0aGlzLmZpcnN0RGlnaXQgPSAtMTsKICB9CiAgcmVhZEJsb2NrKCkgewogICAgY29uc3QgVVBTVFJFQU1fQkxPQ0tfU0laRSA9IDgwMDA7CiAgICBjb25zdCBieXRlcyA9IHRoaXMuc3RyLmdldEJ5dGVzKFVQU1RSRUFNX0JMT0NLX1NJWkUpOwogICAgaWYgKCFieXRlcy5sZW5ndGgpIHsKICAgICAgdGhpcy5lb2YgPSB0cnVlOwogICAgICByZXR1cm47CiAgICB9CiAgICBjb25zdCBtYXhEZWNvZGVMZW5ndGggPSBieXRlcy5sZW5ndGggKyAxID4+IDE7CiAgICBjb25zdCBidWZmZXIgPSB0aGlzLmVuc3VyZUJ1ZmZlcih0aGlzLmJ1ZmZlckxlbmd0aCArIG1heERlY29kZUxlbmd0aCk7CiAgICBsZXQgYnVmZmVyTGVuZ3RoID0gdGhpcy5idWZmZXJMZW5ndGg7CiAgICBsZXQgZmlyc3REaWdpdCA9IHRoaXMuZmlyc3REaWdpdDsKICAgIGZvciAoY29uc3QgY2ggb2YgYnl0ZXMpIHsKICAgICAgbGV0IGRpZ2l0OwogICAgICBpZiAoY2ggPj0gMHgzMCAmJiBjaCA8PSAweDM5KSB7CiAgICAgICAgZGlnaXQgPSBjaCAmIDB4MGY7CiAgICAgIH0gZWxzZSBpZiAoY2ggPj0gMHg0MSAmJiBjaCA8PSAweDQ2IHx8IGNoID49IDB4NjEgJiYgY2ggPD0gMHg2NikgewogICAgICAgIGRpZ2l0ID0gKGNoICYgMHgwZikgKyA5OwogICAgICB9IGVsc2UgaWYgKGNoID09PSAweDNlKSB7CiAgICAgICAgdGhpcy5lb2YgPSB0cnVlOwogICAgICAgIGJyZWFrOwogICAgICB9IGVsc2UgewogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGlmIChmaXJzdERpZ2l0IDwgMCkgewogICAgICAgIGZpcnN0RGlnaXQgPSBkaWdpdDsKICAgICAgfSBlbHNlIHsKICAgICAgICBidWZmZXJbYnVmZmVyTGVuZ3RoKytdID0gZmlyc3REaWdpdCA8PCA0IHwgZGlnaXQ7CiAgICAgICAgZmlyc3REaWdpdCA9IC0xOwogICAgICB9CiAgICB9CiAgICBpZiAoZmlyc3REaWdpdCA+PSAwICYmIHRoaXMuZW9mKSB7CiAgICAgIGJ1ZmZlcltidWZmZXJMZW5ndGgrK10gPSBmaXJzdERpZ2l0IDw8IDQ7CiAgICAgIGZpcnN0RGlnaXQgPSAtMTsKICAgIH0KICAgIHRoaXMuZmlyc3REaWdpdCA9IGZpcnN0RGlnaXQ7CiAgICB0aGlzLmJ1ZmZlckxlbmd0aCA9IGJ1ZmZlckxlbmd0aDsKICB9Cn0KCjsvLyAuL3NyYy9jb3JlL2NjaXR0LmpzCgoKCgoKY29uc3QgY2NpdHRFT0wgPSAtMjsKY29uc3QgY2NpdHRFT0YgPSAtMTsKY29uc3QgdHdvRGltUGFzcyA9IDA7CmNvbnN0IHR3b0RpbUhvcml6ID0gMTsKY29uc3QgdHdvRGltVmVydDAgPSAyOwpjb25zdCB0d29EaW1WZXJ0UjEgPSAzOwpjb25zdCB0d29EaW1WZXJ0TDEgPSA0Owpjb25zdCB0d29EaW1WZXJ0UjIgPSA1Owpjb25zdCB0d29EaW1WZXJ0TDIgPSA2Owpjb25zdCB0d29EaW1WZXJ0UjMgPSA3Owpjb25zdCB0d29EaW1WZXJ0TDMgPSA4Owpjb25zdCB0d29EaW1UYWJsZSA9IFtbLTEsIC0xXSwgWy0xLCAtMV0sIFs3LCB0d29EaW1WZXJ0TDNdLCBbNywgdHdvRGltVmVydFIzXSwgWzYsIHR3b0RpbVZlcnRMMl0sIFs2LCB0d29EaW1WZXJ0TDJdLCBbNiwgdHdvRGltVmVydFIyXSwgWzYsIHR3b0RpbVZlcnRSMl0sIFs0LCB0d29EaW1QYXNzXSwgWzQsIHR3b0RpbVBhc3NdLCBbNCwgdHdvRGltUGFzc10sIFs0LCB0d29EaW1QYXNzXSwgWzQsIHR3b0RpbVBhc3NdLCBbNCwgdHdvRGltUGFzc10sIFs0LCB0d29EaW1QYXNzXSwgWzQsIHR3b0RpbVBhc3NdLCBbMywgdHdvRGltSG9yaXpdLCBbMywgdHdvRGltSG9yaXpdLCBbMywgdHdvRGltSG9yaXpdLCBbMywgdHdvRGltSG9yaXpdLCBbMywgdHdvRGltSG9yaXpdLCBbMywgdHdvRGltSG9yaXpdLCBbMywgdHdvRGltSG9yaXpdLCBbMywgdHdvRGltSG9yaXpdLCBbMywgdHdvRGltSG9yaXpdLCBbMywgdHdvRGltSG9yaXpdLCBbMywgdHdvRGltSG9yaXpdLCBbMywgdHdvRGltSG9yaXpdLCBbMywgdHdvRGltSG9yaXpdLCBbMywgdHdvRGltSG9yaXpdLCBbMywgdHdvRGltSG9yaXpdLCBbMywgdHdvRGltSG9yaXpdLCBbMywgdHdvRGltVmVydEwxXSwgWzMsIHR3b0RpbVZlcnRMMV0sIFszLCB0d29EaW1WZXJ0TDFdLCBbMywgdHdvRGltVmVydEwxXSwgWzMsIHR3b0RpbVZlcnRMMV0sIFszLCB0d29EaW1WZXJ0TDFdLCBbMywgdHdvRGltVmVydEwxXSwgWzMsIHR3b0RpbVZlcnRMMV0sIFszLCB0d29EaW1WZXJ0TDFdLCBbMywgdHdvRGltVmVydEwxXSwgWzMsIHR3b0RpbVZlcnRMMV0sIFszLCB0d29EaW1WZXJ0TDFdLCBbMywgdHdvRGltVmVydEwxXSwgWzMsIHR3b0RpbVZlcnRMMV0sIFszLCB0d29EaW1WZXJ0TDFdLCBbMywgdHdvRGltVmVydEwxXSwgWzMsIHR3b0RpbVZlcnRSMV0sIFszLCB0d29EaW1WZXJ0UjFdLCBbMywgdHdvRGltVmVydFIxXSwgWzMsIHR3b0RpbVZlcnRSMV0sIFszLCB0d29EaW1WZXJ0UjFdLCBbMywgdHdvRGltVmVydFIxXSwgWzMsIHR3b0RpbVZlcnRSMV0sIFszLCB0d29EaW1WZXJ0UjFdLCBbMywgdHdvRGltVmVydFIxXSwgWzMsIHR3b0RpbVZlcnRSMV0sIFszLCB0d29EaW1WZXJ0UjFdLCBbMywgdHdvRGltVmVydFIxXSwgWzMsIHR3b0RpbVZlcnRSMV0sIFszLCB0d29EaW1WZXJ0UjFdLCBbMywgdHdvRGltVmVydFIxXSwgWzMsIHR3b0RpbVZlcnRSMV0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF0sIFsxLCB0d29EaW1WZXJ0MF1dOwpjb25zdCB3aGl0ZVRhYmxlMSA9IFtbLTEsIC0xXSwgWzEyLCBjY2l0dEVPTF0sIFstMSwgLTFdLCBbLTEsIC0xXSwgWy0xLCAtMV0sIFstMSwgLTFdLCBbLTEsIC0xXSwgWy0xLCAtMV0sIFstMSwgLTFdLCBbLTEsIC0xXSwgWy0xLCAtMV0sIFstMSwgLTFdLCBbLTEsIC0xXSwgWy0xLCAtMV0sIFstMSwgLTFdLCBbLTEsIC0xXSwgWzExLCAxNzkyXSwgWzExLCAxNzkyXSwgWzEyLCAxOTg0XSwgWzEyLCAyMDQ4XSwgWzEyLCAyMTEyXSwgWzEyLCAyMTc2XSwgWzEyLCAyMjQwXSwgWzEyLCAyMzA0XSwgWzExLCAxODU2XSwgWzExLCAxODU2XSwgWzExLCAxOTIwXSwgWzExLCAxOTIwXSwgWzEyLCAyMzY4XSwgWzEyLCAyNDMyXSwgWzEyLCAyNDk2XSwgWzEyLCAyNTYwXV07CmNvbnN0IHdoaXRlVGFibGUyID0gW1stMSwgLTFdLCBbLTEsIC0xXSwgWy0xLCAtMV0sIFstMSwgLTFdLCBbOCwgMjldLCBbOCwgMjldLCBbOCwgMzBdLCBbOCwgMzBdLCBbOCwgNDVdLCBbOCwgNDVdLCBbOCwgNDZdLCBbOCwgNDZdLCBbNywgMjJdLCBbNywgMjJdLCBbNywgMjJdLCBbNywgMjJdLCBbNywgMjNdLCBbNywgMjNdLCBbNywgMjNdLCBbNywgMjNdLCBbOCwgNDddLCBbOCwgNDddLCBbOCwgNDhdLCBbOCwgNDhdLCBbNiwgMTNdLCBbNiwgMTNdLCBbNiwgMTNdLCBbNiwgMTNdLCBbNiwgMTNdLCBbNiwgMTNdLCBbNiwgMTNdLCBbNiwgMTNdLCBbNywgMjBdLCBbNywgMjBdLCBbNywgMjBdLCBbNywgMjBdLCBbOCwgMzNdLCBbOCwgMzNdLCBbOCwgMzRdLCBbOCwgMzRdLCBbOCwgMzVdLCBbOCwgMzVdLCBbOCwgMzZdLCBbOCwgMzZdLCBbOCwgMzddLCBbOCwgMzddLCBbOCwgMzhdLCBbOCwgMzhdLCBbNywgMTldLCBbNywgMTldLCBbNywgMTldLCBbNywgMTldLCBbOCwgMzFdLCBbOCwgMzFdLCBbOCwgMzJdLCBbOCwgMzJdLCBbNiwgMV0sIFs2LCAxXSwgWzYsIDFdLCBbNiwgMV0sIFs2LCAxXSwgWzYsIDFdLCBbNiwgMV0sIFs2LCAxXSwgWzYsIDEyXSwgWzYsIDEyXSwgWzYsIDEyXSwgWzYsIDEyXSwgWzYsIDEyXSwgWzYsIDEyXSwgWzYsIDEyXSwgWzYsIDEyXSwgWzgsIDUzXSwgWzgsIDUzXSwgWzgsIDU0XSwgWzgsIDU0XSwgWzcsIDI2XSwgWzcsIDI2XSwgWzcsIDI2XSwgWzcsIDI2XSwgWzgsIDM5XSwgWzgsIDM5XSwgWzgsIDQwXSwgWzgsIDQwXSwgWzgsIDQxXSwgWzgsIDQxXSwgWzgsIDQyXSwgWzgsIDQyXSwgWzgsIDQzXSwgWzgsIDQzXSwgWzgsIDQ0XSwgWzgsIDQ0XSwgWzcsIDIxXSwgWzcsIDIxXSwgWzcsIDIxXSwgWzcsIDIxXSwgWzcsIDI4XSwgWzcsIDI4XSwgWzcsIDI4XSwgWzcsIDI4XSwgWzgsIDYxXSwgWzgsIDYxXSwgWzgsIDYyXSwgWzgsIDYyXSwgWzgsIDYzXSwgWzgsIDYzXSwgWzgsIDBdLCBbOCwgMF0sIFs4LCAzMjBdLCBbOCwgMzIwXSwgWzgsIDM4NF0sIFs4LCAzODRdLCBbNSwgMTBdLCBbNSwgMTBdLCBbNSwgMTBdLCBbNSwgMTBdLCBbNSwgMTBdLCBbNSwgMTBdLCBbNSwgMTBdLCBbNSwgMTBdLCBbNSwgMTBdLCBbNSwgMTBdLCBbNSwgMTBdLCBbNSwgMTBdLCBbNSwgMTBdLCBbNSwgMTBdLCBbNSwgMTBdLCBbNSwgMTBdLCBbNSwgMTFdLCBbNSwgMTFdLCBbNSwgMTFdLCBbNSwgMTFdLCBbNSwgMTFdLCBbNSwgMTFdLCBbNSwgMTFdLCBbNSwgMTFdLCBbNSwgMTFdLCBbNSwgMTFdLCBbNSwgMTFdLCBbNSwgMTFdLCBbNSwgMTFdLCBbNSwgMTFdLCBbNSwgMTFdLCBbNSwgMTFdLCBbNywgMjddLCBbNywgMjddLCBbNywgMjddLCBbNywgMjddLCBbOCwgNTldLCBbOCwgNTldLCBbOCwgNjBdLCBbOCwgNjBdLCBbOSwgMTQ3Ml0sIFs5LCAxNTM2XSwgWzksIDE2MDBdLCBbOSwgMTcyOF0sIFs3LCAxOF0sIFs3LCAxOF0sIFs3LCAxOF0sIFs3LCAxOF0sIFs3LCAyNF0sIFs3LCAyNF0sIFs3LCAyNF0sIFs3LCAyNF0sIFs4LCA0OV0sIFs4LCA0OV0sIFs4LCA1MF0sIFs4LCA1MF0sIFs4LCA1MV0sIFs4LCA1MV0sIFs4LCA1Ml0sIFs4LCA1Ml0sIFs3LCAyNV0sIFs3LCAyNV0sIFs3LCAyNV0sIFs3LCAyNV0sIFs4LCA1NV0sIFs4LCA1NV0sIFs4LCA1Nl0sIFs4LCA1Nl0sIFs4LCA1N10sIFs4LCA1N10sIFs4LCA1OF0sIFs4LCA1OF0sIFs2LCAxOTJdLCBbNiwgMTkyXSwgWzYsIDE5Ml0sIFs2LCAxOTJdLCBbNiwgMTkyXSwgWzYsIDE5Ml0sIFs2LCAxOTJdLCBbNiwgMTkyXSwgWzYsIDE2NjRdLCBbNiwgMTY2NF0sIFs2LCAxNjY0XSwgWzYsIDE2NjRdLCBbNiwgMTY2NF0sIFs2LCAxNjY0XSwgWzYsIDE2NjRdLCBbNiwgMTY2NF0sIFs4LCA0NDhdLCBbOCwgNDQ4XSwgWzgsIDUxMl0sIFs4LCA1MTJdLCBbOSwgNzA0XSwgWzksIDc2OF0sIFs4LCA2NDBdLCBbOCwgNjQwXSwgWzgsIDU3Nl0sIFs4LCA1NzZdLCBbOSwgODMyXSwgWzksIDg5Nl0sIFs5LCA5NjBdLCBbOSwgMTAyNF0sIFs5LCAxMDg4XSwgWzksIDExNTJdLCBbOSwgMTIxNl0sIFs5LCAxMjgwXSwgWzksIDEzNDRdLCBbOSwgMTQwOF0sIFs3LCAyNTZdLCBbNywgMjU2XSwgWzcsIDI1Nl0sIFs3LCAyNTZdLCBbNCwgMl0sIFs0LCAyXSwgWzQsIDJdLCBbNCwgMl0sIFs0LCAyXSwgWzQsIDJdLCBbNCwgMl0sIFs0LCAyXSwgWzQsIDJdLCBbNCwgMl0sIFs0LCAyXSwgWzQsIDJdLCBbNCwgMl0sIFs0LCAyXSwgWzQsIDJdLCBbNCwgMl0sIFs0LCAyXSwgWzQsIDJdLCBbNCwgMl0sIFs0LCAyXSwgWzQsIDJdLCBbNCwgMl0sIFs0LCAyXSwgWzQsIDJdLCBbNCwgMl0sIFs0LCAyXSwgWzQsIDJdLCBbNCwgMl0sIFs0LCAyXSwgWzQsIDJdLCBbNCwgMl0sIFs0LCAyXSwgWzQsIDNdLCBbNCwgM10sIFs0LCAzXSwgWzQsIDNdLCBbNCwgM10sIFs0LCAzXSwgWzQsIDNdLCBbNCwgM10sIFs0LCAzXSwgWzQsIDNdLCBbNCwgM10sIFs0LCAzXSwgWzQsIDNdLCBbNCwgM10sIFs0LCAzXSwgWzQsIDNdLCBbNCwgM10sIFs0LCAzXSwgWzQsIDNdLCBbNCwgM10sIFs0LCAzXSwgWzQsIDNdLCBbNCwgM10sIFs0LCAzXSwgWzQsIDNdLCBbNCwgM10sIFs0LCAzXSwgWzQsIDNdLCBbNCwgM10sIFs0LCAzXSwgWzQsIDNdLCBbNCwgM10sIFs1LCAxMjhdLCBbNSwgMTI4XSwgWzUsIDEyOF0sIFs1LCAxMjhdLCBbNSwgMTI4XSwgWzUsIDEyOF0sIFs1LCAxMjhdLCBbNSwgMTI4XSwgWzUsIDEyOF0sIFs1LCAxMjhdLCBbNSwgMTI4XSwgWzUsIDEyOF0sIFs1LCAxMjhdLCBbNSwgMTI4XSwgWzUsIDEyOF0sIFs1LCAxMjhdLCBbNSwgOF0sIFs1LCA4XSwgWzUsIDhdLCBbNSwgOF0sIFs1LCA4XSwgWzUsIDhdLCBbNSwgOF0sIFs1LCA4XSwgWzUsIDhdLCBbNSwgOF0sIFs1LCA4XSwgWzUsIDhdLCBbNSwgOF0sIFs1LCA4XSwgWzUsIDhdLCBbNSwgOF0sIFs1LCA5XSwgWzUsIDldLCBbNSwgOV0sIFs1LCA5XSwgWzUsIDldLCBbNSwgOV0sIFs1LCA5XSwgWzUsIDldLCBbNSwgOV0sIFs1LCA5XSwgWzUsIDldLCBbNSwgOV0sIFs1LCA5XSwgWzUsIDldLCBbNSwgOV0sIFs1LCA5XSwgWzYsIDE2XSwgWzYsIDE2XSwgWzYsIDE2XSwgWzYsIDE2XSwgWzYsIDE2XSwgWzYsIDE2XSwgWzYsIDE2XSwgWzYsIDE2XSwgWzYsIDE3XSwgWzYsIDE3XSwgWzYsIDE3XSwgWzYsIDE3XSwgWzYsIDE3XSwgWzYsIDE3XSwgWzYsIDE3XSwgWzYsIDE3XSwgWzQsIDRdLCBbNCwgNF0sIFs0LCA0XSwgWzQsIDRdLCBbNCwgNF0sIFs0LCA0XSwgWzQsIDRdLCBbNCwgNF0sIFs0LCA0XSwgWzQsIDRdLCBbNCwgNF0sIFs0LCA0XSwgWzQsIDRdLCBbNCwgNF0sIFs0LCA0XSwgWzQsIDRdLCBbNCwgNF0sIFs0LCA0XSwgWzQsIDRdLCBbNCwgNF0sIFs0LCA0XSwgWzQsIDRdLCBbNCwgNF0sIFs0LCA0XSwgWzQsIDRdLCBbNCwgNF0sIFs0LCA0XSwgWzQsIDRdLCBbNCwgNF0sIFs0LCA0XSwgWzQsIDRdLCBbNCwgNF0sIFs0LCA1XSwgWzQsIDVdLCBbNCwgNV0sIFs0LCA1XSwgWzQsIDVdLCBbNCwgNV0sIFs0LCA1XSwgWzQsIDVdLCBbNCwgNV0sIFs0LCA1XSwgWzQsIDVdLCBbNCwgNV0sIFs0LCA1XSwgWzQsIDVdLCBbNCwgNV0sIFs0LCA1XSwgWzQsIDVdLCBbNCwgNV0sIFs0LCA1XSwgWzQsIDVdLCBbNCwgNV0sIFs0LCA1XSwgWzQsIDVdLCBbNCwgNV0sIFs0LCA1XSwgWzQsIDVdLCBbNCwgNV0sIFs0LCA1XSwgWzQsIDVdLCBbNCwgNV0sIFs0LCA1XSwgWzQsIDVdLCBbNiwgMTRdLCBbNiwgMTRdLCBbNiwgMTRdLCBbNiwgMTRdLCBbNiwgMTRdLCBbNiwgMTRdLCBbNiwgMTRdLCBbNiwgMTRdLCBbNiwgMTVdLCBbNiwgMTVdLCBbNiwgMTVdLCBbNiwgMTVdLCBbNiwgMTVdLCBbNiwgMTVdLCBbNiwgMTVdLCBbNiwgMTVdLCBbNSwgNjRdLCBbNSwgNjRdLCBbNSwgNjRdLCBbNSwgNjRdLCBbNSwgNjRdLCBbNSwgNjRdLCBbNSwgNjRdLCBbNSwgNjRdLCBbNSwgNjRdLCBbNSwgNjRdLCBbNSwgNjRdLCBbNSwgNjRdLCBbNSwgNjRdLCBbNSwgNjRdLCBbNSwgNjRdLCBbNSwgNjRdLCBbNCwgNl0sIFs0LCA2XSwgWzQsIDZdLCBbNCwgNl0sIFs0LCA2XSwgWzQsIDZdLCBbNCwgNl0sIFs0LCA2XSwgWzQsIDZdLCBbNCwgNl0sIFs0LCA2XSwgWzQsIDZdLCBbNCwgNl0sIFs0LCA2XSwgWzQsIDZdLCBbNCwgNl0sIFs0LCA2XSwgWzQsIDZdLCBbNCwgNl0sIFs0LCA2XSwgWzQsIDZdLCBbNCwgNl0sIFs0LCA2XSwgWzQsIDZdLCBbNCwgNl0sIFs0LCA2XSwgWzQsIDZdLCBbNCwgNl0sIFs0LCA2XSwgWzQsIDZdLCBbNCwgNl0sIFs0LCA2XSwgWzQsIDddLCBbNCwgN10sIFs0LCA3XSwgWzQsIDddLCBbNCwgN10sIFs0LCA3XSwgWzQsIDddLCBbNCwgN10sIFs0LCA3XSwgWzQsIDddLCBbNCwgN10sIFs0LCA3XSwgWzQsIDddLCBbNCwgN10sIFs0LCA3XSwgWzQsIDddLCBbNCwgN10sIFs0LCA3XSwgWzQsIDddLCBbNCwgN10sIFs0LCA3XSwgWzQsIDddLCBbNCwgN10sIFs0LCA3XSwgWzQsIDddLCBbNCwgN10sIFs0LCA3XSwgWzQsIDddLCBbNCwgN10sIFs0LCA3XSwgWzQsIDddLCBbNCwgN11dOwpjb25zdCBibGFja1RhYmxlMSA9IFtbLTEsIC0xXSwgWy0xLCAtMV0sIFsxMiwgY2NpdHRFT0xdLCBbMTIsIGNjaXR0RU9MXSwgWy0xLCAtMV0sIFstMSwgLTFdLCBbLTEsIC0xXSwgWy0xLCAtMV0sIFstMSwgLTFdLCBbLTEsIC0xXSwgWy0xLCAtMV0sIFstMSwgLTFdLCBbLTEsIC0xXSwgWy0xLCAtMV0sIFstMSwgLTFdLCBbLTEsIC0xXSwgWy0xLCAtMV0sIFstMSwgLTFdLCBbLTEsIC0xXSwgWy0xLCAtMV0sIFstMSwgLTFdLCBbLTEsIC0xXSwgWy0xLCAtMV0sIFstMSwgLTFdLCBbLTEsIC0xXSwgWy0xLCAtMV0sIFstMSwgLTFdLCBbLTEsIC0xXSwgWy0xLCAtMV0sIFstMSwgLTFdLCBbLTEsIC0xXSwgWy0xLCAtMV0sIFsxMSwgMTc5Ml0sIFsxMSwgMTc5Ml0sIFsxMSwgMTc5Ml0sIFsxMSwgMTc5Ml0sIFsxMiwgMTk4NF0sIFsxMiwgMTk4NF0sIFsxMiwgMjA0OF0sIFsxMiwgMjA0OF0sIFsxMiwgMjExMl0sIFsxMiwgMjExMl0sIFsxMiwgMjE3Nl0sIFsxMiwgMjE3Nl0sIFsxMiwgMjI0MF0sIFsxMiwgMjI0MF0sIFsxMiwgMjMwNF0sIFsxMiwgMjMwNF0sIFsxMSwgMTg1Nl0sIFsxMSwgMTg1Nl0sIFsxMSwgMTg1Nl0sIFsxMSwgMTg1Nl0sIFsxMSwgMTkyMF0sIFsxMSwgMTkyMF0sIFsxMSwgMTkyMF0sIFsxMSwgMTkyMF0sIFsxMiwgMjM2OF0sIFsxMiwgMjM2OF0sIFsxMiwgMjQzMl0sIFsxMiwgMjQzMl0sIFsxMiwgMjQ5Nl0sIFsxMiwgMjQ5Nl0sIFsxMiwgMjU2MF0sIFsxMiwgMjU2MF0sIFsxMCwgMThdLCBbMTAsIDE4XSwgWzEwLCAxOF0sIFsxMCwgMThdLCBbMTAsIDE4XSwgWzEwLCAxOF0sIFsxMCwgMThdLCBbMTAsIDE4XSwgWzEyLCA1Ml0sIFsxMiwgNTJdLCBbMTMsIDY0MF0sIFsxMywgNzA0XSwgWzEzLCA3NjhdLCBbMTMsIDgzMl0sIFsxMiwgNTVdLCBbMTIsIDU1XSwgWzEyLCA1Nl0sIFsxMiwgNTZdLCBbMTMsIDEyODBdLCBbMTMsIDEzNDRdLCBbMTMsIDE0MDhdLCBbMTMsIDE0NzJdLCBbMTIsIDU5XSwgWzEyLCA1OV0sIFsxMiwgNjBdLCBbMTIsIDYwXSwgWzEzLCAxNTM2XSwgWzEzLCAxNjAwXSwgWzExLCAyNF0sIFsxMSwgMjRdLCBbMTEsIDI0XSwgWzExLCAyNF0sIFsxMSwgMjVdLCBbMTEsIDI1XSwgWzExLCAyNV0sIFsxMSwgMjVdLCBbMTMsIDE2NjRdLCBbMTMsIDE3MjhdLCBbMTIsIDMyMF0sIFsxMiwgMzIwXSwgWzEyLCAzODRdLCBbMTIsIDM4NF0sIFsxMiwgNDQ4XSwgWzEyLCA0NDhdLCBbMTMsIDUxMl0sIFsxMywgNTc2XSwgWzEyLCA1M10sIFsxMiwgNTNdLCBbMTIsIDU0XSwgWzEyLCA1NF0sIFsxMywgODk2XSwgWzEzLCA5NjBdLCBbMTMsIDEwMjRdLCBbMTMsIDEwODhdLCBbMTMsIDExNTJdLCBbMTMsIDEyMTZdLCBbMTAsIDY0XSwgWzEwLCA2NF0sIFsxMCwgNjRdLCBbMTAsIDY0XSwgWzEwLCA2NF0sIFsxMCwgNjRdLCBbMTAsIDY0XSwgWzEwLCA2NF1dOwpjb25zdCBibGFja1RhYmxlMiA9IFtbOCwgMTNdLCBbOCwgMTNdLCBbOCwgMTNdLCBbOCwgMTNdLCBbOCwgMTNdLCBbOCwgMTNdLCBbOCwgMTNdLCBbOCwgMTNdLCBbOCwgMTNdLCBbOCwgMTNdLCBbOCwgMTNdLCBbOCwgMTNdLCBbOCwgMTNdLCBbOCwgMTNdLCBbOCwgMTNdLCBbOCwgMTNdLCBbMTEsIDIzXSwgWzExLCAyM10sIFsxMiwgNTBdLCBbMTIsIDUxXSwgWzEyLCA0NF0sIFsxMiwgNDVdLCBbMTIsIDQ2XSwgWzEyLCA0N10sIFsxMiwgNTddLCBbMTIsIDU4XSwgWzEyLCA2MV0sIFsxMiwgMjU2XSwgWzEwLCAxNl0sIFsxMCwgMTZdLCBbMTAsIDE2XSwgWzEwLCAxNl0sIFsxMCwgMTddLCBbMTAsIDE3XSwgWzEwLCAxN10sIFsxMCwgMTddLCBbMTIsIDQ4XSwgWzEyLCA0OV0sIFsxMiwgNjJdLCBbMTIsIDYzXSwgWzEyLCAzMF0sIFsxMiwgMzFdLCBbMTIsIDMyXSwgWzEyLCAzM10sIFsxMiwgNDBdLCBbMTIsIDQxXSwgWzExLCAyMl0sIFsxMSwgMjJdLCBbOCwgMTRdLCBbOCwgMTRdLCBbOCwgMTRdLCBbOCwgMTRdLCBbOCwgMTRdLCBbOCwgMTRdLCBbOCwgMTRdLCBbOCwgMTRdLCBbOCwgMTRdLCBbOCwgMTRdLCBbOCwgMTRdLCBbOCwgMTRdLCBbOCwgMTRdLCBbOCwgMTRdLCBbOCwgMTRdLCBbOCwgMTRdLCBbNywgMTBdLCBbNywgMTBdLCBbNywgMTBdLCBbNywgMTBdLCBbNywgMTBdLCBbNywgMTBdLCBbNywgMTBdLCBbNywgMTBdLCBbNywgMTBdLCBbNywgMTBdLCBbNywgMTBdLCBbNywgMTBdLCBbNywgMTBdLCBbNywgMTBdLCBbNywgMTBdLCBbNywgMTBdLCBbNywgMTBdLCBbNywgMTBdLCBbNywgMTBdLCBbNywgMTBdLCBbNywgMTBdLCBbNywgMTBdLCBbNywgMTBdLCBbNywgMTBdLCBbNywgMTBdLCBbNywgMTBdLCBbNywgMTBdLCBbNywgMTBdLCBbNywgMTBdLCBbNywgMTBdLCBbNywgMTBdLCBbNywgMTBdLCBbNywgMTFdLCBbNywgMTFdLCBbNywgMTFdLCBbNywgMTFdLCBbNywgMTFdLCBbNywgMTFdLCBbNywgMTFdLCBbNywgMTFdLCBbNywgMTFdLCBbNywgMTFdLCBbNywgMTFdLCBbNywgMTFdLCBbNywgMTFdLCBbNywgMTFdLCBbNywgMTFdLCBbNywgMTFdLCBbNywgMTFdLCBbNywgMTFdLCBbNywgMTFdLCBbNywgMTFdLCBbNywgMTFdLCBbNywgMTFdLCBbNywgMTFdLCBbNywgMTFdLCBbNywgMTFdLCBbNywgMTFdLCBbNywgMTFdLCBbNywgMTFdLCBbNywgMTFdLCBbNywgMTFdLCBbNywgMTFdLCBbNywgMTFdLCBbOSwgMTVdLCBbOSwgMTVdLCBbOSwgMTVdLCBbOSwgMTVdLCBbOSwgMTVdLCBbOSwgMTVdLCBbOSwgMTVdLCBbOSwgMTVdLCBbMTIsIDEyOF0sIFsxMiwgMTkyXSwgWzEyLCAyNl0sIFsxMiwgMjddLCBbMTIsIDI4XSwgWzEyLCAyOV0sIFsxMSwgMTldLCBbMTEsIDE5XSwgWzExLCAyMF0sIFsxMSwgMjBdLCBbMTIsIDM0XSwgWzEyLCAzNV0sIFsxMiwgMzZdLCBbMTIsIDM3XSwgWzEyLCAzOF0sIFsxMiwgMzldLCBbMTEsIDIxXSwgWzExLCAyMV0sIFsxMiwgNDJdLCBbMTIsIDQzXSwgWzEwLCAwXSwgWzEwLCAwXSwgWzEwLCAwXSwgWzEwLCAwXSwgWzcsIDEyXSwgWzcsIDEyXSwgWzcsIDEyXSwgWzcsIDEyXSwgWzcsIDEyXSwgWzcsIDEyXSwgWzcsIDEyXSwgWzcsIDEyXSwgWzcsIDEyXSwgWzcsIDEyXSwgWzcsIDEyXSwgWzcsIDEyXSwgWzcsIDEyXSwgWzcsIDEyXSwgWzcsIDEyXSwgWzcsIDEyXSwgWzcsIDEyXSwgWzcsIDEyXSwgWzcsIDEyXSwgWzcsIDEyXSwgWzcsIDEyXSwgWzcsIDEyXSwgWzcsIDEyXSwgWzcsIDEyXSwgWzcsIDEyXSwgWzcsIDEyXSwgWzcsIDEyXSwgWzcsIDEyXSwgWzcsIDEyXSwgWzcsIDEyXSwgWzcsIDEyXSwgWzcsIDEyXV07CmNvbnN0IGJsYWNrVGFibGUzID0gW1stMSwgLTFdLCBbLTEsIC0xXSwgWy0xLCAtMV0sIFstMSwgLTFdLCBbNiwgOV0sIFs2LCA4XSwgWzUsIDddLCBbNSwgN10sIFs0LCA2XSwgWzQsIDZdLCBbNCwgNl0sIFs0LCA2XSwgWzQsIDVdLCBbNCwgNV0sIFs0LCA1XSwgWzQsIDVdLCBbMywgMV0sIFszLCAxXSwgWzMsIDFdLCBbMywgMV0sIFszLCAxXSwgWzMsIDFdLCBbMywgMV0sIFszLCAxXSwgWzMsIDRdLCBbMywgNF0sIFszLCA0XSwgWzMsIDRdLCBbMywgNF0sIFszLCA0XSwgWzMsIDRdLCBbMywgNF0sIFsyLCAzXSwgWzIsIDNdLCBbMiwgM10sIFsyLCAzXSwgWzIsIDNdLCBbMiwgM10sIFsyLCAzXSwgWzIsIDNdLCBbMiwgM10sIFsyLCAzXSwgWzIsIDNdLCBbMiwgM10sIFsyLCAzXSwgWzIsIDNdLCBbMiwgM10sIFsyLCAzXSwgWzIsIDJdLCBbMiwgMl0sIFsyLCAyXSwgWzIsIDJdLCBbMiwgMl0sIFsyLCAyXSwgWzIsIDJdLCBbMiwgMl0sIFsyLCAyXSwgWzIsIDJdLCBbMiwgMl0sIFsyLCAyXSwgWzIsIDJdLCBbMiwgMl0sIFsyLCAyXSwgWzIsIDJdXTsKY2xhc3MgQ0NJVFRGYXhEZWNvZGVyIHsKICBjb25zdHJ1Y3Rvcihzb3VyY2UsIG9wdGlvbnMgPSB7fSkgewogICAgaWYgKHR5cGVvZiBzb3VyY2U/Lm5leHQgIT09ICJmdW5jdGlvbiIpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCdDQ0lUVEZheERlY29kZXIgLSBpbnZhbGlkICJzb3VyY2UiIHBhcmFtZXRlci4nKTsKICAgIH0KICAgIHRoaXMuc291cmNlID0gc291cmNlOwogICAgdGhpcy5lb2YgPSBmYWxzZTsKICAgIHRoaXMuZW5jb2RpbmcgPSBvcHRpb25zLksgfHwgMDsKICAgIHRoaXMuZW9saW5lID0gb3B0aW9ucy5FbmRPZkxpbmUgfHwgZmFsc2U7CiAgICB0aGlzLmJ5dGVBbGlnbiA9IG9wdGlvbnMuRW5jb2RlZEJ5dGVBbGlnbiB8fCBmYWxzZTsKICAgIHRoaXMuY29sdW1ucyA9IG9wdGlvbnMuQ29sdW1ucyB8fCAxNzI4OwogICAgdGhpcy5yb3dzID0gb3B0aW9ucy5Sb3dzIHx8IDA7CiAgICB0aGlzLmVvYmxvY2sgPSBvcHRpb25zLkVuZE9mQmxvY2sgPz8gdHJ1ZTsKICAgIHRoaXMuYmxhY2sgPSBvcHRpb25zLkJsYWNrSXMxIHx8IGZhbHNlOwogICAgdGhpcy5jb2RpbmdMaW5lID0gbmV3IFVpbnQzMkFycmF5KHRoaXMuY29sdW1ucyArIDEpOwogICAgdGhpcy5yZWZMaW5lID0gbmV3IFVpbnQzMkFycmF5KHRoaXMuY29sdW1ucyArIDIpOwogICAgdGhpcy5jb2RpbmdMaW5lWzBdID0gdGhpcy5jb2x1bW5zOwogICAgdGhpcy5jb2RpbmdQb3MgPSAwOwogICAgdGhpcy5yb3cgPSAwOwogICAgdGhpcy5uZXh0TGluZTJEID0gdGhpcy5lbmNvZGluZyA8IDA7CiAgICB0aGlzLmlucHV0Qml0cyA9IDA7CiAgICB0aGlzLmlucHV0QnVmID0gMDsKICAgIHRoaXMub3V0cHV0Qml0cyA9IDA7CiAgICB0aGlzLnJvd3NEb25lID0gZmFsc2U7CiAgICBsZXQgY29kZTE7CiAgICB3aGlsZSAoKGNvZGUxID0gdGhpcy5fbG9va0JpdHMoMTIpKSA9PT0gMCkgewogICAgICB0aGlzLl9lYXRCaXRzKDEpOwogICAgfQogICAgaWYgKGNvZGUxID09PSAxKSB7CiAgICAgIHRoaXMuX2VhdEJpdHMoMTIpOwogICAgfQogICAgaWYgKHRoaXMuZW5jb2RpbmcgPiAwKSB7CiAgICAgIHRoaXMubmV4dExpbmUyRCA9ICF0aGlzLl9sb29rQml0cygxKTsKICAgICAgdGhpcy5fZWF0Qml0cygxKTsKICAgIH0KICB9CiAgcmVhZE5leHRDaGFyKCkgewogICAgaWYgKHRoaXMuZW9mKSB7CiAgICAgIHJldHVybiAtMTsKICAgIH0KICAgIGNvbnN0IHJlZkxpbmUgPSB0aGlzLnJlZkxpbmU7CiAgICBjb25zdCBjb2RpbmdMaW5lID0gdGhpcy5jb2RpbmdMaW5lOwogICAgY29uc3QgY29sdW1ucyA9IHRoaXMuY29sdW1uczsKICAgIGxldCByZWZQb3MsIGJsYWNrUGl4ZWxzLCBiaXRzLCBpOwogICAgaWYgKHRoaXMub3V0cHV0Qml0cyA9PT0gMCkgewogICAgICBpZiAodGhpcy5yb3dzRG9uZSkgewogICAgICAgIHRoaXMuZW9mID0gdHJ1ZTsKICAgICAgfQogICAgICBpZiAodGhpcy5lb2YpIHsKICAgICAgICByZXR1cm4gLTE7CiAgICAgIH0KICAgICAgdGhpcy5lcnIgPSBmYWxzZTsKICAgICAgbGV0IGNvZGUxLCBjb2RlMiwgY29kZTM7CiAgICAgIGlmICh0aGlzLm5leHRMaW5lMkQpIHsKICAgICAgICBmb3IgKGkgPSAwOyBjb2RpbmdMaW5lW2ldIDwgY29sdW1uczsgKytpKSB7CiAgICAgICAgICByZWZMaW5lW2ldID0gY29kaW5nTGluZVtpXTsKICAgICAgICB9CiAgICAgICAgcmVmTGluZVtpKytdID0gY29sdW1uczsKICAgICAgICByZWZMaW5lW2ldID0gY29sdW1uczsKICAgICAgICBjb2RpbmdMaW5lWzBdID0gMDsKICAgICAgICB0aGlzLmNvZGluZ1BvcyA9IDA7CiAgICAgICAgcmVmUG9zID0gMDsKICAgICAgICBibGFja1BpeGVscyA9IDA7CiAgICAgICAgd2hpbGUgKGNvZGluZ0xpbmVbdGhpcy5jb2RpbmdQb3NdIDwgY29sdW1ucykgewogICAgICAgICAgY29kZTEgPSB0aGlzLl9nZXRUd29EaW1Db2RlKCk7CiAgICAgICAgICBzd2l0Y2ggKGNvZGUxKSB7CiAgICAgICAgICAgIGNhc2UgdHdvRGltUGFzczoKICAgICAgICAgICAgICB0aGlzLl9hZGRQaXhlbHMocmVmTGluZVtyZWZQb3MgKyAxXSwgYmxhY2tQaXhlbHMpOwogICAgICAgICAgICAgIGlmIChyZWZMaW5lW3JlZlBvcyArIDFdIDwgY29sdW1ucykgewogICAgICAgICAgICAgICAgcmVmUG9zICs9IDI7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIHR3b0RpbUhvcml6OgogICAgICAgICAgICAgIGNvZGUxID0gY29kZTIgPSAwOwogICAgICAgICAgICAgIGlmIChibGFja1BpeGVscykgewogICAgICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgICAgICBjb2RlMSArPSBjb2RlMyA9IHRoaXMuX2dldEJsYWNrQ29kZSgpOwogICAgICAgICAgICAgICAgfSB3aGlsZSAoY29kZTMgPj0gNjQpOwogICAgICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgICAgICBjb2RlMiArPSBjb2RlMyA9IHRoaXMuX2dldFdoaXRlQ29kZSgpOwogICAgICAgICAgICAgICAgfSB3aGlsZSAoY29kZTMgPj0gNjQpOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICAgIGNvZGUxICs9IGNvZGUzID0gdGhpcy5fZ2V0V2hpdGVDb2RlKCk7CiAgICAgICAgICAgICAgICB9IHdoaWxlIChjb2RlMyA+PSA2NCk7CiAgICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICAgIGNvZGUyICs9IGNvZGUzID0gdGhpcy5fZ2V0QmxhY2tDb2RlKCk7CiAgICAgICAgICAgICAgICB9IHdoaWxlIChjb2RlMyA+PSA2NCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHRoaXMuX2FkZFBpeGVscyhjb2RpbmdMaW5lW3RoaXMuY29kaW5nUG9zXSArIGNvZGUxLCBibGFja1BpeGVscyk7CiAgICAgICAgICAgICAgaWYgKGNvZGluZ0xpbmVbdGhpcy5jb2RpbmdQb3NdIDwgY29sdW1ucykgewogICAgICAgICAgICAgICAgdGhpcy5fYWRkUGl4ZWxzKGNvZGluZ0xpbmVbdGhpcy5jb2RpbmdQb3NdICsgY29kZTIsIGJsYWNrUGl4ZWxzIF4gMSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHdoaWxlIChyZWZMaW5lW3JlZlBvc10gPD0gY29kaW5nTGluZVt0aGlzLmNvZGluZ1Bvc10gJiYgcmVmTGluZVtyZWZQb3NdIDwgY29sdW1ucykgewogICAgICAgICAgICAgICAgcmVmUG9zICs9IDI7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIHR3b0RpbVZlcnRSMzoKICAgICAgICAgICAgICB0aGlzLl9hZGRQaXhlbHMocmVmTGluZVtyZWZQb3NdICsgMywgYmxhY2tQaXhlbHMpOwogICAgICAgICAgICAgIGJsYWNrUGl4ZWxzIF49IDE7CiAgICAgICAgICAgICAgaWYgKGNvZGluZ0xpbmVbdGhpcy5jb2RpbmdQb3NdIDwgY29sdW1ucykgewogICAgICAgICAgICAgICAgKytyZWZQb3M7CiAgICAgICAgICAgICAgICB3aGlsZSAocmVmTGluZVtyZWZQb3NdIDw9IGNvZGluZ0xpbmVbdGhpcy5jb2RpbmdQb3NdICYmIHJlZkxpbmVbcmVmUG9zXSA8IGNvbHVtbnMpIHsKICAgICAgICAgICAgICAgICAgcmVmUG9zICs9IDI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIHR3b0RpbVZlcnRSMjoKICAgICAgICAgICAgICB0aGlzLl9hZGRQaXhlbHMocmVmTGluZVtyZWZQb3NdICsgMiwgYmxhY2tQaXhlbHMpOwogICAgICAgICAgICAgIGJsYWNrUGl4ZWxzIF49IDE7CiAgICAgICAgICAgICAgaWYgKGNvZGluZ0xpbmVbdGhpcy5jb2RpbmdQb3NdIDwgY29sdW1ucykgewogICAgICAgICAgICAgICAgKytyZWZQb3M7CiAgICAgICAgICAgICAgICB3aGlsZSAocmVmTGluZVtyZWZQb3NdIDw9IGNvZGluZ0xpbmVbdGhpcy5jb2RpbmdQb3NdICYmIHJlZkxpbmVbcmVmUG9zXSA8IGNvbHVtbnMpIHsKICAgICAgICAgICAgICAgICAgcmVmUG9zICs9IDI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIHR3b0RpbVZlcnRSMToKICAgICAgICAgICAgICB0aGlzLl9hZGRQaXhlbHMocmVmTGluZVtyZWZQb3NdICsgMSwgYmxhY2tQaXhlbHMpOwogICAgICAgICAgICAgIGJsYWNrUGl4ZWxzIF49IDE7CiAgICAgICAgICAgICAgaWYgKGNvZGluZ0xpbmVbdGhpcy5jb2RpbmdQb3NdIDwgY29sdW1ucykgewogICAgICAgICAgICAgICAgKytyZWZQb3M7CiAgICAgICAgICAgICAgICB3aGlsZSAocmVmTGluZVtyZWZQb3NdIDw9IGNvZGluZ0xpbmVbdGhpcy5jb2RpbmdQb3NdICYmIHJlZkxpbmVbcmVmUG9zXSA8IGNvbHVtbnMpIHsKICAgICAgICAgICAgICAgICAgcmVmUG9zICs9IDI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIHR3b0RpbVZlcnQwOgogICAgICAgICAgICAgIHRoaXMuX2FkZFBpeGVscyhyZWZMaW5lW3JlZlBvc10sIGJsYWNrUGl4ZWxzKTsKICAgICAgICAgICAgICBibGFja1BpeGVscyBePSAxOwogICAgICAgICAgICAgIGlmIChjb2RpbmdMaW5lW3RoaXMuY29kaW5nUG9zXSA8IGNvbHVtbnMpIHsKICAgICAgICAgICAgICAgICsrcmVmUG9zOwogICAgICAgICAgICAgICAgd2hpbGUgKHJlZkxpbmVbcmVmUG9zXSA8PSBjb2RpbmdMaW5lW3RoaXMuY29kaW5nUG9zXSAmJiByZWZMaW5lW3JlZlBvc10gPCBjb2x1bW5zKSB7CiAgICAgICAgICAgICAgICAgIHJlZlBvcyArPSAyOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSB0d29EaW1WZXJ0TDM6CiAgICAgICAgICAgICAgdGhpcy5fYWRkUGl4ZWxzTmVnKHJlZkxpbmVbcmVmUG9zXSAtIDMsIGJsYWNrUGl4ZWxzKTsKICAgICAgICAgICAgICBibGFja1BpeGVscyBePSAxOwogICAgICAgICAgICAgIGlmIChjb2RpbmdMaW5lW3RoaXMuY29kaW5nUG9zXSA8IGNvbHVtbnMpIHsKICAgICAgICAgICAgICAgIGlmIChyZWZQb3MgPiAwKSB7CiAgICAgICAgICAgICAgICAgIC0tcmVmUG9zOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgKytyZWZQb3M7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB3aGlsZSAocmVmTGluZVtyZWZQb3NdIDw9IGNvZGluZ0xpbmVbdGhpcy5jb2RpbmdQb3NdICYmIHJlZkxpbmVbcmVmUG9zXSA8IGNvbHVtbnMpIHsKICAgICAgICAgICAgICAgICAgcmVmUG9zICs9IDI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIHR3b0RpbVZlcnRMMjoKICAgICAgICAgICAgICB0aGlzLl9hZGRQaXhlbHNOZWcocmVmTGluZVtyZWZQb3NdIC0gMiwgYmxhY2tQaXhlbHMpOwogICAgICAgICAgICAgIGJsYWNrUGl4ZWxzIF49IDE7CiAgICAgICAgICAgICAgaWYgKGNvZGluZ0xpbmVbdGhpcy5jb2RpbmdQb3NdIDwgY29sdW1ucykgewogICAgICAgICAgICAgICAgaWYgKHJlZlBvcyA+IDApIHsKICAgICAgICAgICAgICAgICAgLS1yZWZQb3M7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICArK3JlZlBvczsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHdoaWxlIChyZWZMaW5lW3JlZlBvc10gPD0gY29kaW5nTGluZVt0aGlzLmNvZGluZ1Bvc10gJiYgcmVmTGluZVtyZWZQb3NdIDwgY29sdW1ucykgewogICAgICAgICAgICAgICAgICByZWZQb3MgKz0gMjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgdHdvRGltVmVydEwxOgogICAgICAgICAgICAgIHRoaXMuX2FkZFBpeGVsc05lZyhyZWZMaW5lW3JlZlBvc10gLSAxLCBibGFja1BpeGVscyk7CiAgICAgICAgICAgICAgYmxhY2tQaXhlbHMgXj0gMTsKICAgICAgICAgICAgICBpZiAoY29kaW5nTGluZVt0aGlzLmNvZGluZ1Bvc10gPCBjb2x1bW5zKSB7CiAgICAgICAgICAgICAgICBpZiAocmVmUG9zID4gMCkgewogICAgICAgICAgICAgICAgICAtLXJlZlBvczsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICsrcmVmUG9zOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgd2hpbGUgKHJlZkxpbmVbcmVmUG9zXSA8PSBjb2RpbmdMaW5lW3RoaXMuY29kaW5nUG9zXSAmJiByZWZMaW5lW3JlZlBvc10gPCBjb2x1bW5zKSB7CiAgICAgICAgICAgICAgICAgIHJlZlBvcyArPSAyOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSBjY2l0dEVPRjoKICAgICAgICAgICAgICB0aGlzLl9hZGRQaXhlbHMoY29sdW1ucywgMCk7CiAgICAgICAgICAgICAgdGhpcy5lb2YgPSB0cnVlOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgIGluZm8oImJhZCAyZCBjb2RlIik7CiAgICAgICAgICAgICAgdGhpcy5fYWRkUGl4ZWxzKGNvbHVtbnMsIDApOwogICAgICAgICAgICAgIHRoaXMuZXJyID0gdHJ1ZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY29kaW5nTGluZVswXSA9IDA7CiAgICAgICAgdGhpcy5jb2RpbmdQb3MgPSAwOwogICAgICAgIGJsYWNrUGl4ZWxzID0gMDsKICAgICAgICB3aGlsZSAoY29kaW5nTGluZVt0aGlzLmNvZGluZ1Bvc10gPCBjb2x1bW5zKSB7CiAgICAgICAgICBjb2RlMSA9IDA7CiAgICAgICAgICBpZiAoYmxhY2tQaXhlbHMpIHsKICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgIGNvZGUxICs9IGNvZGUzID0gdGhpcy5fZ2V0QmxhY2tDb2RlKCk7CiAgICAgICAgICAgIH0gd2hpbGUgKGNvZGUzID49IDY0KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGRvIHsKICAgICAgICAgICAgICBjb2RlMSArPSBjb2RlMyA9IHRoaXMuX2dldFdoaXRlQ29kZSgpOwogICAgICAgICAgICB9IHdoaWxlIChjb2RlMyA+PSA2NCk7CiAgICAgICAgICB9CiAgICAgICAgICB0aGlzLl9hZGRQaXhlbHMoY29kaW5nTGluZVt0aGlzLmNvZGluZ1Bvc10gKyBjb2RlMSwgYmxhY2tQaXhlbHMpOwogICAgICAgICAgYmxhY2tQaXhlbHMgXj0gMTsKICAgICAgICB9CiAgICAgIH0KICAgICAgbGV0IGdvdEVPTCA9IGZhbHNlOwogICAgICBpZiAodGhpcy5ieXRlQWxpZ24pIHsKICAgICAgICB0aGlzLmlucHV0Qml0cyAmPSB+NzsKICAgICAgfQogICAgICBpZiAoIXRoaXMuZW9ibG9jayAmJiB0aGlzLnJvdyA9PT0gdGhpcy5yb3dzIC0gMSkgewogICAgICAgIHRoaXMucm93c0RvbmUgPSB0cnVlOwogICAgICB9IGVsc2UgewogICAgICAgIGNvZGUxID0gdGhpcy5fbG9va0JpdHMoMTIpOwogICAgICAgIGlmICh0aGlzLmVvbGluZSkgewogICAgICAgICAgd2hpbGUgKGNvZGUxICE9PSBjY2l0dEVPRiAmJiBjb2RlMSAhPT0gMSkgewogICAgICAgICAgICB0aGlzLl9lYXRCaXRzKDEpOwogICAgICAgICAgICBjb2RlMSA9IHRoaXMuX2xvb2tCaXRzKDEyKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgd2hpbGUgKGNvZGUxID09PSAwKSB7CiAgICAgICAgICAgIHRoaXMuX2VhdEJpdHMoMSk7CiAgICAgICAgICAgIGNvZGUxID0gdGhpcy5fbG9va0JpdHMoMTIpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoY29kZTEgPT09IDEpIHsKICAgICAgICAgIHRoaXMuX2VhdEJpdHMoMTIpOwogICAgICAgICAgZ290RU9MID0gdHJ1ZTsKICAgICAgICB9IGVsc2UgaWYgKGNvZGUxID09PSBjY2l0dEVPRikgewogICAgICAgICAgdGhpcy5lb2YgPSB0cnVlOwogICAgICAgIH0KICAgICAgfQogICAgICBpZiAoIXRoaXMuZW9mICYmIHRoaXMuZW5jb2RpbmcgPiAwICYmICF0aGlzLnJvd3NEb25lKSB7CiAgICAgICAgdGhpcy5uZXh0TGluZTJEID0gIXRoaXMuX2xvb2tCaXRzKDEpOwogICAgICAgIHRoaXMuX2VhdEJpdHMoMSk7CiAgICAgIH0KICAgICAgaWYgKHRoaXMuZW9ibG9jayAmJiBnb3RFT0wgJiYgdGhpcy5ieXRlQWxpZ24pIHsKICAgICAgICBjb2RlMSA9IHRoaXMuX2xvb2tCaXRzKDEyKTsKICAgICAgICBpZiAoY29kZTEgPT09IDEpIHsKICAgICAgICAgIHRoaXMuX2VhdEJpdHMoMTIpOwogICAgICAgICAgaWYgKHRoaXMuZW5jb2RpbmcgPiAwKSB7CiAgICAgICAgICAgIHRoaXMuX2xvb2tCaXRzKDEpOwogICAgICAgICAgICB0aGlzLl9lYXRCaXRzKDEpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHRoaXMuZW5jb2RpbmcgPj0gMCkgewogICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNDsgKytpKSB7CiAgICAgICAgICAgICAgY29kZTEgPSB0aGlzLl9sb29rQml0cygxMik7CiAgICAgICAgICAgICAgaWYgKGNvZGUxICE9PSAxKSB7CiAgICAgICAgICAgICAgICBpbmZvKCJiYWQgcnRjIGNvZGU6ICIgKyBjb2RlMSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHRoaXMuX2VhdEJpdHMoMTIpOwogICAgICAgICAgICAgIGlmICh0aGlzLmVuY29kaW5nID4gMCkgewogICAgICAgICAgICAgICAgdGhpcy5fbG9va0JpdHMoMSk7CiAgICAgICAgICAgICAgICB0aGlzLl9lYXRCaXRzKDEpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgdGhpcy5lb2YgPSB0cnVlOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmICh0aGlzLmVyciAmJiB0aGlzLmVvbGluZSkgewogICAgICAgIHdoaWxlICh0cnVlKSB7CiAgICAgICAgICBjb2RlMSA9IHRoaXMuX2xvb2tCaXRzKDEzKTsKICAgICAgICAgIGlmIChjb2RlMSA9PT0gY2NpdHRFT0YpIHsKICAgICAgICAgICAgdGhpcy5lb2YgPSB0cnVlOwogICAgICAgICAgICByZXR1cm4gLTE7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoY29kZTEgPj4gMSA9PT0gMSkgewogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICAgIHRoaXMuX2VhdEJpdHMoMSk7CiAgICAgICAgfQogICAgICAgIHRoaXMuX2VhdEJpdHMoMTIpOwogICAgICAgIGlmICh0aGlzLmVuY29kaW5nID4gMCkgewogICAgICAgICAgdGhpcy5fZWF0Qml0cygxKTsKICAgICAgICAgIHRoaXMubmV4dExpbmUyRCA9ICEoY29kZTEgJiAxKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgdGhpcy5vdXRwdXRCaXRzID0gY29kaW5nTGluZVswXSA+IDAgPyBjb2RpbmdMaW5lW3RoaXMuY29kaW5nUG9zID0gMF0gOiBjb2RpbmdMaW5lW3RoaXMuY29kaW5nUG9zID0gMV07CiAgICAgIHRoaXMucm93Kys7CiAgICB9CiAgICBsZXQgYzsKICAgIGlmICh0aGlzLm91dHB1dEJpdHMgPj0gOCkgewogICAgICBjID0gdGhpcy5jb2RpbmdQb3MgJiAxID8gMCA6IDB4ZmY7CiAgICAgIHRoaXMub3V0cHV0Qml0cyAtPSA4OwogICAgICBpZiAodGhpcy5vdXRwdXRCaXRzID09PSAwICYmIGNvZGluZ0xpbmVbdGhpcy5jb2RpbmdQb3NdIDwgY29sdW1ucykgewogICAgICAgIHRoaXMuY29kaW5nUG9zKys7CiAgICAgICAgdGhpcy5vdXRwdXRCaXRzID0gY29kaW5nTGluZVt0aGlzLmNvZGluZ1Bvc10gLSBjb2RpbmdMaW5lW3RoaXMuY29kaW5nUG9zIC0gMV07CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGJpdHMgPSA4OwogICAgICBjID0gMDsKICAgICAgZG8gewogICAgICAgIGlmICh0eXBlb2YgdGhpcy5vdXRwdXRCaXRzICE9PSAibnVtYmVyIikgewogICAgICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCdJbnZhbGlkIC9DQ0lUVEZheERlY29kZSBkYXRhLCAib3V0cHV0Qml0cyIgbXVzdCBiZSBhIG51bWJlci4nKTsKICAgICAgICB9CiAgICAgICAgaWYgKHRoaXMub3V0cHV0Qml0cyA+IGJpdHMpIHsKICAgICAgICAgIGMgPDw9IGJpdHM7CiAgICAgICAgICBpZiAoISh0aGlzLmNvZGluZ1BvcyAmIDEpKSB7CiAgICAgICAgICAgIGMgfD0gMHhmZiA+PiA4IC0gYml0czsKICAgICAgICAgIH0KICAgICAgICAgIHRoaXMub3V0cHV0Qml0cyAtPSBiaXRzOwogICAgICAgICAgYml0cyA9IDA7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGMgPDw9IHRoaXMub3V0cHV0Qml0czsKICAgICAgICAgIGlmICghKHRoaXMuY29kaW5nUG9zICYgMSkpIHsKICAgICAgICAgICAgYyB8PSAweGZmID4+IDggLSB0aGlzLm91dHB1dEJpdHM7CiAgICAgICAgICB9CiAgICAgICAgICBiaXRzIC09IHRoaXMub3V0cHV0Qml0czsKICAgICAgICAgIHRoaXMub3V0cHV0Qml0cyA9IDA7CiAgICAgICAgICBpZiAoY29kaW5nTGluZVt0aGlzLmNvZGluZ1Bvc10gPCBjb2x1bW5zKSB7CiAgICAgICAgICAgIHRoaXMuY29kaW5nUG9zKys7CiAgICAgICAgICAgIHRoaXMub3V0cHV0Qml0cyA9IGNvZGluZ0xpbmVbdGhpcy5jb2RpbmdQb3NdIC0gY29kaW5nTGluZVt0aGlzLmNvZGluZ1BvcyAtIDFdOwogICAgICAgICAgfSBlbHNlIGlmIChiaXRzID4gMCkgewogICAgICAgICAgICBjIDw8PSBiaXRzOwogICAgICAgICAgICBiaXRzID0gMDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gd2hpbGUgKGJpdHMpOwogICAgfQogICAgaWYgKHRoaXMuYmxhY2spIHsKICAgICAgYyBePSAweGZmOwogICAgfQogICAgcmV0dXJuIGM7CiAgfQogIF9hZGRQaXhlbHMoYTEsIGJsYWNrUGl4ZWxzKSB7CiAgICBjb25zdCBjb2RpbmdMaW5lID0gdGhpcy5jb2RpbmdMaW5lOwogICAgbGV0IGNvZGluZ1BvcyA9IHRoaXMuY29kaW5nUG9zOwogICAgaWYgKGExID4gY29kaW5nTGluZVtjb2RpbmdQb3NdKSB7CiAgICAgIGlmIChhMSA+IHRoaXMuY29sdW1ucykgewogICAgICAgIGluZm8oInJvdyBpcyB3cm9uZyBsZW5ndGgiKTsKICAgICAgICB0aGlzLmVyciA9IHRydWU7CiAgICAgICAgYTEgPSB0aGlzLmNvbHVtbnM7CiAgICAgIH0KICAgICAgaWYgKGNvZGluZ1BvcyAmIDEgXiBibGFja1BpeGVscykgewogICAgICAgICsrY29kaW5nUG9zOwogICAgICB9CiAgICAgIGNvZGluZ0xpbmVbY29kaW5nUG9zXSA9IGExOwogICAgfQogICAgdGhpcy5jb2RpbmdQb3MgPSBjb2RpbmdQb3M7CiAgfQogIF9hZGRQaXhlbHNOZWcoYTEsIGJsYWNrUGl4ZWxzKSB7CiAgICBjb25zdCBjb2RpbmdMaW5lID0gdGhpcy5jb2RpbmdMaW5lOwogICAgbGV0IGNvZGluZ1BvcyA9IHRoaXMuY29kaW5nUG9zOwogICAgaWYgKGExID4gY29kaW5nTGluZVtjb2RpbmdQb3NdKSB7CiAgICAgIGlmIChhMSA+IHRoaXMuY29sdW1ucykgewogICAgICAgIGluZm8oInJvdyBpcyB3cm9uZyBsZW5ndGgiKTsKICAgICAgICB0aGlzLmVyciA9IHRydWU7CiAgICAgICAgYTEgPSB0aGlzLmNvbHVtbnM7CiAgICAgIH0KICAgICAgaWYgKGNvZGluZ1BvcyAmIDEgXiBibGFja1BpeGVscykgewogICAgICAgICsrY29kaW5nUG9zOwogICAgICB9CiAgICAgIGNvZGluZ0xpbmVbY29kaW5nUG9zXSA9IGExOwogICAgfSBlbHNlIGlmIChhMSA8IGNvZGluZ0xpbmVbY29kaW5nUG9zXSkgewogICAgICBpZiAoYTEgPCAwKSB7CiAgICAgICAgaW5mbygiaW52YWxpZCBjb2RlIik7CiAgICAgICAgdGhpcy5lcnIgPSB0cnVlOwogICAgICAgIGExID0gMDsKICAgICAgfQogICAgICB3aGlsZSAoY29kaW5nUG9zID4gMCAmJiBhMSA8IGNvZGluZ0xpbmVbY29kaW5nUG9zIC0gMV0pIHsKICAgICAgICAtLWNvZGluZ1BvczsKICAgICAgfQogICAgICBjb2RpbmdMaW5lW2NvZGluZ1Bvc10gPSBhMTsKICAgIH0KICAgIHRoaXMuY29kaW5nUG9zID0gY29kaW5nUG9zOwogIH0KICBfZmluZFRhYmxlQ29kZShzdGFydCwgZW5kLCB0YWJsZSwgbGltaXQpIHsKICAgIGNvbnN0IGxpbWl0VmFsdWUgPSBsaW1pdCB8fCAwOwogICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDw9IGVuZDsgKytpKSB7CiAgICAgIGxldCBjb2RlID0gdGhpcy5fbG9va0JpdHMoaSk7CiAgICAgIGlmIChjb2RlID09PSBjY2l0dEVPRikgewogICAgICAgIHJldHVybiBbdHJ1ZSwgMSwgZmFsc2VdOwogICAgICB9CiAgICAgIGlmIChpIDwgZW5kKSB7CiAgICAgICAgY29kZSA8PD0gZW5kIC0gaTsKICAgICAgfQogICAgICBpZiAoIWxpbWl0VmFsdWUgfHwgY29kZSA+PSBsaW1pdFZhbHVlKSB7CiAgICAgICAgY29uc3QgcCA9IHRhYmxlW2NvZGUgLSBsaW1pdFZhbHVlXTsKICAgICAgICBpZiAocFswXSA9PT0gaSkgewogICAgICAgICAgdGhpcy5fZWF0Qml0cyhpKTsKICAgICAgICAgIHJldHVybiBbdHJ1ZSwgcFsxXSwgdHJ1ZV07CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICByZXR1cm4gW2ZhbHNlLCAwLCBmYWxzZV07CiAgfQogIF9nZXRUd29EaW1Db2RlKCkgewogICAgbGV0IGNvZGUgPSAwOwogICAgbGV0IHA7CiAgICBpZiAodGhpcy5lb2Jsb2NrKSB7CiAgICAgIGNvZGUgPSB0aGlzLl9sb29rQml0cyg3KTsKICAgICAgcCA9IHR3b0RpbVRhYmxlW2NvZGVdOwogICAgICBpZiAocD8uWzBdID4gMCkgewogICAgICAgIHRoaXMuX2VhdEJpdHMocFswXSk7CiAgICAgICAgcmV0dXJuIHBbMV07CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX2ZpbmRUYWJsZUNvZGUoMSwgNywgdHdvRGltVGFibGUpOwogICAgICBpZiAocmVzdWx0WzBdICYmIHJlc3VsdFsyXSkgewogICAgICAgIHJldHVybiByZXN1bHRbMV07CiAgICAgIH0KICAgIH0KICAgIGluZm8oIkJhZCB0d28gZGltIGNvZGUiKTsKICAgIHJldHVybiBjY2l0dEVPRjsKICB9CiAgX2dldFdoaXRlQ29kZSgpIHsKICAgIGxldCBjb2RlID0gMDsKICAgIGxldCBwOwogICAgaWYgKHRoaXMuZW9ibG9jaykgewogICAgICBjb2RlID0gdGhpcy5fbG9va0JpdHMoMTIpOwogICAgICBpZiAoY29kZSA9PT0gY2NpdHRFT0YpIHsKICAgICAgICByZXR1cm4gMTsKICAgICAgfQogICAgICBwID0gY29kZSA+PiA1ID09PSAwID8gd2hpdGVUYWJsZTFbY29kZV0gOiB3aGl0ZVRhYmxlMltjb2RlID4+IDNdOwogICAgICBpZiAocFswXSA+IDApIHsKICAgICAgICB0aGlzLl9lYXRCaXRzKHBbMF0pOwogICAgICAgIHJldHVybiBwWzFdOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBsZXQgcmVzdWx0ID0gdGhpcy5fZmluZFRhYmxlQ29kZSgxLCA5LCB3aGl0ZVRhYmxlMik7CiAgICAgIGlmIChyZXN1bHRbMF0pIHsKICAgICAgICByZXR1cm4gcmVzdWx0WzFdOwogICAgICB9CiAgICAgIHJlc3VsdCA9IHRoaXMuX2ZpbmRUYWJsZUNvZGUoMTEsIDEyLCB3aGl0ZVRhYmxlMSk7CiAgICAgIGlmIChyZXN1bHRbMF0pIHsKICAgICAgICByZXR1cm4gcmVzdWx0WzFdOwogICAgICB9CiAgICB9CiAgICBpbmZvKCJiYWQgd2hpdGUgY29kZSIpOwogICAgdGhpcy5fZWF0Qml0cygxKTsKICAgIHJldHVybiAxOwogIH0KICBfZ2V0QmxhY2tDb2RlKCkgewogICAgbGV0IGNvZGUsIHA7CiAgICBpZiAodGhpcy5lb2Jsb2NrKSB7CiAgICAgIGNvZGUgPSB0aGlzLl9sb29rQml0cygxMyk7CiAgICAgIGlmIChjb2RlID09PSBjY2l0dEVPRikgewogICAgICAgIHJldHVybiAxOwogICAgICB9CiAgICAgIGlmIChjb2RlID4+IDcgPT09IDApIHsKICAgICAgICBwID0gYmxhY2tUYWJsZTFbY29kZV07CiAgICAgIH0gZWxzZSBpZiAoY29kZSA+PiA5ID09PSAwICYmIGNvZGUgPj4gNyAhPT0gMCkgewogICAgICAgIHAgPSBibGFja1RhYmxlMlsoY29kZSA+PiAxKSAtIDY0XTsKICAgICAgfSBlbHNlIHsKICAgICAgICBwID0gYmxhY2tUYWJsZTNbY29kZSA+PiA3XTsKICAgICAgfQogICAgICBpZiAocFswXSA+IDApIHsKICAgICAgICB0aGlzLl9lYXRCaXRzKHBbMF0pOwogICAgICAgIHJldHVybiBwWzFdOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBsZXQgcmVzdWx0ID0gdGhpcy5fZmluZFRhYmxlQ29kZSgyLCA2LCBibGFja1RhYmxlMyk7CiAgICAgIGlmIChyZXN1bHRbMF0pIHsKICAgICAgICByZXR1cm4gcmVzdWx0WzFdOwogICAgICB9CiAgICAgIHJlc3VsdCA9IHRoaXMuX2ZpbmRUYWJsZUNvZGUoNywgMTIsIGJsYWNrVGFibGUyLCA2NCk7CiAgICAgIGlmIChyZXN1bHRbMF0pIHsKICAgICAgICByZXR1cm4gcmVzdWx0WzFdOwogICAgICB9CiAgICAgIHJlc3VsdCA9IHRoaXMuX2ZpbmRUYWJsZUNvZGUoMTAsIDEzLCBibGFja1RhYmxlMSk7CiAgICAgIGlmIChyZXN1bHRbMF0pIHsKICAgICAgICByZXR1cm4gcmVzdWx0WzFdOwogICAgICB9CiAgICB9CiAgICBpbmZvKCJiYWQgYmxhY2sgY29kZSIpOwogICAgdGhpcy5fZWF0Qml0cygxKTsKICAgIHJldHVybiAxOwogIH0KICBfbG9va0JpdHMobikgewogICAgbGV0IGM7CiAgICB3aGlsZSAodGhpcy5pbnB1dEJpdHMgPCBuKSB7CiAgICAgIGlmICgoYyA9IHRoaXMuc291cmNlLm5leHQoKSkgPT09IC0xKSB7CiAgICAgICAgaWYgKHRoaXMuaW5wdXRCaXRzID09PSAwKSB7CiAgICAgICAgICByZXR1cm4gY2NpdHRFT0Y7CiAgICAgICAgfQogICAgICAgIHJldHVybiB0aGlzLmlucHV0QnVmIDw8IG4gLSB0aGlzLmlucHV0Qml0cyAmIDB4ZmZmZiA+PiAxNiAtIG47CiAgICAgIH0KICAgICAgdGhpcy5pbnB1dEJ1ZiA9IHRoaXMuaW5wdXRCdWYgPDwgOCB8IGM7CiAgICAgIHRoaXMuaW5wdXRCaXRzICs9IDg7CiAgICB9CiAgICByZXR1cm4gdGhpcy5pbnB1dEJ1ZiA+PiB0aGlzLmlucHV0Qml0cyAtIG4gJiAweGZmZmYgPj4gMTYgLSBuOwogIH0KICBfZWF0Qml0cyhuKSB7CiAgICBpZiAoKHRoaXMuaW5wdXRCaXRzIC09IG4pIDwgMCkgewogICAgICB0aGlzLmlucHV0Qml0cyA9IDA7CiAgICB9CiAgfQp9Cgo7Ly8gLi9zcmMvY29yZS9jY2l0dF9zdHJlYW0uanMKCgoKY2xhc3MgQ0NJVFRGYXhTdHJlYW0gZXh0ZW5kcyBEZWNvZGVTdHJlYW0gewogIGNvbnN0cnVjdG9yKHN0ciwgbWF5YmVMZW5ndGgsIHBhcmFtcykgewogICAgc3VwZXIobWF5YmVMZW5ndGgpOwogICAgdGhpcy5zdHIgPSBzdHI7CiAgICB0aGlzLmRpY3QgPSBzdHIuZGljdDsKICAgIGlmICghKHBhcmFtcyBpbnN0YW5jZW9mIERpY3QpKSB7CiAgICAgIHBhcmFtcyA9IERpY3QuZW1wdHk7CiAgICB9CiAgICBjb25zdCBzb3VyY2UgPSB7CiAgICAgIG5leHQoKSB7CiAgICAgICAgcmV0dXJuIHN0ci5nZXRCeXRlKCk7CiAgICAgIH0KICAgIH07CiAgICB0aGlzLmNjaXR0RmF4RGVjb2RlciA9IG5ldyBDQ0lUVEZheERlY29kZXIoc291cmNlLCB7CiAgICAgIEs6IHBhcmFtcy5nZXQoIksiKSwKICAgICAgRW5kT2ZMaW5lOiBwYXJhbXMuZ2V0KCJFbmRPZkxpbmUiKSwKICAgICAgRW5jb2RlZEJ5dGVBbGlnbjogcGFyYW1zLmdldCgiRW5jb2RlZEJ5dGVBbGlnbiIpLAogICAgICBDb2x1bW5zOiBwYXJhbXMuZ2V0KCJDb2x1bW5zIiksCiAgICAgIFJvd3M6IHBhcmFtcy5nZXQoIlJvd3MiKSwKICAgICAgRW5kT2ZCbG9jazogcGFyYW1zLmdldCgiRW5kT2ZCbG9jayIpLAogICAgICBCbGFja0lzMTogcGFyYW1zLmdldCgiQmxhY2tJczEiKQogICAgfSk7CiAgfQogIHJlYWRCbG9jaygpIHsKICAgIHdoaWxlICghdGhpcy5lb2YpIHsKICAgICAgY29uc3QgYyA9IHRoaXMuY2NpdHRGYXhEZWNvZGVyLnJlYWROZXh0Q2hhcigpOwogICAgICBpZiAoYyA9PT0gLTEpIHsKICAgICAgICB0aGlzLmVvZiA9IHRydWU7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIHRoaXMuZW5zdXJlQnVmZmVyKHRoaXMuYnVmZmVyTGVuZ3RoICsgMSk7CiAgICAgIHRoaXMuYnVmZmVyW3RoaXMuYnVmZmVyTGVuZ3RoKytdID0gYzsKICAgIH0KICB9Cn0KCjsvLyAuL3NyYy9jb3JlL2ZsYXRlX3N0cmVhbS5qcwoKCgoKCgoKCgoKCgpjb25zdCBjb2RlTGVuQ29kZU1hcCA9IG5ldyBJbnQzMkFycmF5KFsxNiwgMTcsIDE4LCAwLCA4LCA3LCA5LCA2LCAxMCwgNSwgMTEsIDQsIDEyLCAzLCAxMywgMiwgMTQsIDEsIDE1XSk7CmNvbnN0IGxlbmd0aERlY29kZSA9IG5ldyBJbnQzMkFycmF5KFsweDAwMDAzLCAweDAwMDA0LCAweDAwMDA1LCAweDAwMDA2LCAweDAwMDA3LCAweDAwMDA4LCAweDAwMDA5LCAweDAwMDBhLCAweDEwMDBiLCAweDEwMDBkLCAweDEwMDBmLCAweDEwMDExLCAweDIwMDEzLCAweDIwMDE3LCAweDIwMDFiLCAweDIwMDFmLCAweDMwMDIzLCAweDMwMDJiLCAweDMwMDMzLCAweDMwMDNiLCAweDQwMDQzLCAweDQwMDUzLCAweDQwMDYzLCAweDQwMDczLCAweDUwMDgzLCAweDUwMGEzLCAweDUwMGMzLCAweDUwMGUzLCAweDAwMTAyLCAweDAwMTAyLCAweDAwMTAyXSk7CmNvbnN0IGRpc3REZWNvZGUgPSBuZXcgSW50MzJBcnJheShbMHgwMDAwMSwgMHgwMDAwMiwgMHgwMDAwMywgMHgwMDAwNCwgMHgxMDAwNSwgMHgxMDAwNywgMHgyMDAwOSwgMHgyMDAwZCwgMHgzMDAxMSwgMHgzMDAxOSwgMHg0MDAyMSwgMHg0MDAzMSwgMHg1MDA0MSwgMHg1MDA2MSwgMHg2MDA4MSwgMHg2MDBjMSwgMHg3MDEwMSwgMHg3MDE4MSwgMHg4MDIwMSwgMHg4MDMwMSwgMHg5MDQwMSwgMHg5MDYwMSwgMHhhMDgwMSwgMHhhMGMwMSwgMHhiMTAwMSwgMHhiMTgwMSwgMHhjMjAwMSwgMHhjMzAwMSwgMHhkNDAwMSwgMHhkNjAwMV0pOwpjb25zdCBmaXhlZExpdENvZGVUYWIgPSBbbmV3IEludDMyQXJyYXkoWzB4NzAxMDAsIDB4ODAwNTAsIDB4ODAwMTAsIDB4ODAxMTgsIDB4NzAxMTAsIDB4ODAwNzAsIDB4ODAwMzAsIDB4OTAwYzAsIDB4NzAxMDgsIDB4ODAwNjAsIDB4ODAwMjAsIDB4OTAwYTAsIDB4ODAwMDAsIDB4ODAwODAsIDB4ODAwNDAsIDB4OTAwZTAsIDB4NzAxMDQsIDB4ODAwNTgsIDB4ODAwMTgsIDB4OTAwOTAsIDB4NzAxMTQsIDB4ODAwNzgsIDB4ODAwMzgsIDB4OTAwZDAsIDB4NzAxMGMsIDB4ODAwNjgsIDB4ODAwMjgsIDB4OTAwYjAsIDB4ODAwMDgsIDB4ODAwODgsIDB4ODAwNDgsIDB4OTAwZjAsIDB4NzAxMDIsIDB4ODAwNTQsIDB4ODAwMTQsIDB4ODAxMWMsIDB4NzAxMTIsIDB4ODAwNzQsIDB4ODAwMzQsIDB4OTAwYzgsIDB4NzAxMGEsIDB4ODAwNjQsIDB4ODAwMjQsIDB4OTAwYTgsIDB4ODAwMDQsIDB4ODAwODQsIDB4ODAwNDQsIDB4OTAwZTgsIDB4NzAxMDYsIDB4ODAwNWMsIDB4ODAwMWMsIDB4OTAwOTgsIDB4NzAxMTYsIDB4ODAwN2MsIDB4ODAwM2MsIDB4OTAwZDgsIDB4NzAxMGUsIDB4ODAwNmMsIDB4ODAwMmMsIDB4OTAwYjgsIDB4ODAwMGMsIDB4ODAwOGMsIDB4ODAwNGMsIDB4OTAwZjgsIDB4NzAxMDEsIDB4ODAwNTIsIDB4ODAwMTIsIDB4ODAxMWEsIDB4NzAxMTEsIDB4ODAwNzIsIDB4ODAwMzIsIDB4OTAwYzQsIDB4NzAxMDksIDB4ODAwNjIsIDB4ODAwMjIsIDB4OTAwYTQsIDB4ODAwMDIsIDB4ODAwODIsIDB4ODAwNDIsIDB4OTAwZTQsIDB4NzAxMDUsIDB4ODAwNWEsIDB4ODAwMWEsIDB4OTAwOTQsIDB4NzAxMTUsIDB4ODAwN2EsIDB4ODAwM2EsIDB4OTAwZDQsIDB4NzAxMGQsIDB4ODAwNmEsIDB4ODAwMmEsIDB4OTAwYjQsIDB4ODAwMGEsIDB4ODAwOGEsIDB4ODAwNGEsIDB4OTAwZjQsIDB4NzAxMDMsIDB4ODAwNTYsIDB4ODAwMTYsIDB4ODAxMWUsIDB4NzAxMTMsIDB4ODAwNzYsIDB4ODAwMzYsIDB4OTAwY2MsIDB4NzAxMGIsIDB4ODAwNjYsIDB4ODAwMjYsIDB4OTAwYWMsIDB4ODAwMDYsIDB4ODAwODYsIDB4ODAwNDYsIDB4OTAwZWMsIDB4NzAxMDcsIDB4ODAwNWUsIDB4ODAwMWUsIDB4OTAwOWMsIDB4NzAxMTcsIDB4ODAwN2UsIDB4ODAwM2UsIDB4OTAwZGMsIDB4NzAxMGYsIDB4ODAwNmUsIDB4ODAwMmUsIDB4OTAwYmMsIDB4ODAwMGUsIDB4ODAwOGUsIDB4ODAwNGUsIDB4OTAwZmMsIDB4NzAxMDAsIDB4ODAwNTEsIDB4ODAwMTEsIDB4ODAxMTksIDB4NzAxMTAsIDB4ODAwNzEsIDB4ODAwMzEsIDB4OTAwYzIsIDB4NzAxMDgsIDB4ODAwNjEsIDB4ODAwMjEsIDB4OTAwYTIsIDB4ODAwMDEsIDB4ODAwODEsIDB4ODAwNDEsIDB4OTAwZTIsIDB4NzAxMDQsIDB4ODAwNTksIDB4ODAwMTksIDB4OTAwOTIsIDB4NzAxMTQsIDB4ODAwNzksIDB4ODAwMzksIDB4OTAwZDIsIDB4NzAxMGMsIDB4ODAwNjksIDB4ODAwMjksIDB4OTAwYjIsIDB4ODAwMDksIDB4ODAwODksIDB4ODAwNDksIDB4OTAwZjIsIDB4NzAxMDIsIDB4ODAwNTUsIDB4ODAwMTUsIDB4ODAxMWQsIDB4NzAxMTIsIDB4ODAwNzUsIDB4ODAwMzUsIDB4OTAwY2EsIDB4NzAxMGEsIDB4ODAwNjUsIDB4ODAwMjUsIDB4OTAwYWEsIDB4ODAwMDUsIDB4ODAwODUsIDB4ODAwNDUsIDB4OTAwZWEsIDB4NzAxMDYsIDB4ODAwNWQsIDB4ODAwMWQsIDB4OTAwOWEsIDB4NzAxMTYsIDB4ODAwN2QsIDB4ODAwM2QsIDB4OTAwZGEsIDB4NzAxMGUsIDB4ODAwNmQsIDB4ODAwMmQsIDB4OTAwYmEsIDB4ODAwMGQsIDB4ODAwOGQsIDB4ODAwNGQsIDB4OTAwZmEsIDB4NzAxMDEsIDB4ODAwNTMsIDB4ODAwMTMsIDB4ODAxMWIsIDB4NzAxMTEsIDB4ODAwNzMsIDB4ODAwMzMsIDB4OTAwYzYsIDB4NzAxMDksIDB4ODAwNjMsIDB4ODAwMjMsIDB4OTAwYTYsIDB4ODAwMDMsIDB4ODAwODMsIDB4ODAwNDMsIDB4OTAwZTYsIDB4NzAxMDUsIDB4ODAwNWIsIDB4ODAwMWIsIDB4OTAwOTYsIDB4NzAxMTUsIDB4ODAwN2IsIDB4ODAwM2IsIDB4OTAwZDYsIDB4NzAxMGQsIDB4ODAwNmIsIDB4ODAwMmIsIDB4OTAwYjYsIDB4ODAwMGIsIDB4ODAwOGIsIDB4ODAwNGIsIDB4OTAwZjYsIDB4NzAxMDMsIDB4ODAwNTcsIDB4ODAwMTcsIDB4ODAxMWYsIDB4NzAxMTMsIDB4ODAwNzcsIDB4ODAwMzcsIDB4OTAwY2UsIDB4NzAxMGIsIDB4ODAwNjcsIDB4ODAwMjcsIDB4OTAwYWUsIDB4ODAwMDcsIDB4ODAwODcsIDB4ODAwNDcsIDB4OTAwZWUsIDB4NzAxMDcsIDB4ODAwNWYsIDB4ODAwMWYsIDB4OTAwOWUsIDB4NzAxMTcsIDB4ODAwN2YsIDB4ODAwM2YsIDB4OTAwZGUsIDB4NzAxMGYsIDB4ODAwNmYsIDB4ODAwMmYsIDB4OTAwYmUsIDB4ODAwMGYsIDB4ODAwOGYsIDB4ODAwNGYsIDB4OTAwZmUsIDB4NzAxMDAsIDB4ODAwNTAsIDB4ODAwMTAsIDB4ODAxMTgsIDB4NzAxMTAsIDB4ODAwNzAsIDB4ODAwMzAsIDB4OTAwYzEsIDB4NzAxMDgsIDB4ODAwNjAsIDB4ODAwMjAsIDB4OTAwYTEsIDB4ODAwMDAsIDB4ODAwODAsIDB4ODAwNDAsIDB4OTAwZTEsIDB4NzAxMDQsIDB4ODAwNTgsIDB4ODAwMTgsIDB4OTAwOTEsIDB4NzAxMTQsIDB4ODAwNzgsIDB4ODAwMzgsIDB4OTAwZDEsIDB4NzAxMGMsIDB4ODAwNjgsIDB4ODAwMjgsIDB4OTAwYjEsIDB4ODAwMDgsIDB4ODAwODgsIDB4ODAwNDgsIDB4OTAwZjEsIDB4NzAxMDIsIDB4ODAwNTQsIDB4ODAwMTQsIDB4ODAxMWMsIDB4NzAxMTIsIDB4ODAwNzQsIDB4ODAwMzQsIDB4OTAwYzksIDB4NzAxMGEsIDB4ODAwNjQsIDB4ODAwMjQsIDB4OTAwYTksIDB4ODAwMDQsIDB4ODAwODQsIDB4ODAwNDQsIDB4OTAwZTksIDB4NzAxMDYsIDB4ODAwNWMsIDB4ODAwMWMsIDB4OTAwOTksIDB4NzAxMTYsIDB4ODAwN2MsIDB4ODAwM2MsIDB4OTAwZDksIDB4NzAxMGUsIDB4ODAwNmMsIDB4ODAwMmMsIDB4OTAwYjksIDB4ODAwMGMsIDB4ODAwOGMsIDB4ODAwNGMsIDB4OTAwZjksIDB4NzAxMDEsIDB4ODAwNTIsIDB4ODAwMTIsIDB4ODAxMWEsIDB4NzAxMTEsIDB4ODAwNzIsIDB4ODAwMzIsIDB4OTAwYzUsIDB4NzAxMDksIDB4ODAwNjIsIDB4ODAwMjIsIDB4OTAwYTUsIDB4ODAwMDIsIDB4ODAwODIsIDB4ODAwNDIsIDB4OTAwZTUsIDB4NzAxMDUsIDB4ODAwNWEsIDB4ODAwMWEsIDB4OTAwOTUsIDB4NzAxMTUsIDB4ODAwN2EsIDB4ODAwM2EsIDB4OTAwZDUsIDB4NzAxMGQsIDB4ODAwNmEsIDB4ODAwMmEsIDB4OTAwYjUsIDB4ODAwMGEsIDB4ODAwOGEsIDB4ODAwNGEsIDB4OTAwZjUsIDB4NzAxMDMsIDB4ODAwNTYsIDB4ODAwMTYsIDB4ODAxMWUsIDB4NzAxMTMsIDB4ODAwNzYsIDB4ODAwMzYsIDB4OTAwY2QsIDB4NzAxMGIsIDB4ODAwNjYsIDB4ODAwMjYsIDB4OTAwYWQsIDB4ODAwMDYsIDB4ODAwODYsIDB4ODAwNDYsIDB4OTAwZWQsIDB4NzAxMDcsIDB4ODAwNWUsIDB4ODAwMWUsIDB4OTAwOWQsIDB4NzAxMTcsIDB4ODAwN2UsIDB4ODAwM2UsIDB4OTAwZGQsIDB4NzAxMGYsIDB4ODAwNmUsIDB4ODAwMmUsIDB4OTAwYmQsIDB4ODAwMGUsIDB4ODAwOGUsIDB4ODAwNGUsIDB4OTAwZmQsIDB4NzAxMDAsIDB4ODAwNTEsIDB4ODAwMTEsIDB4ODAxMTksIDB4NzAxMTAsIDB4ODAwNzEsIDB4ODAwMzEsIDB4OTAwYzMsIDB4NzAxMDgsIDB4ODAwNjEsIDB4ODAwMjEsIDB4OTAwYTMsIDB4ODAwMDEsIDB4ODAwODEsIDB4ODAwNDEsIDB4OTAwZTMsIDB4NzAxMDQsIDB4ODAwNTksIDB4ODAwMTksIDB4OTAwOTMsIDB4NzAxMTQsIDB4ODAwNzksIDB4ODAwMzksIDB4OTAwZDMsIDB4NzAxMGMsIDB4ODAwNjksIDB4ODAwMjksIDB4OTAwYjMsIDB4ODAwMDksIDB4ODAwODksIDB4ODAwNDksIDB4OTAwZjMsIDB4NzAxMDIsIDB4ODAwNTUsIDB4ODAwMTUsIDB4ODAxMWQsIDB4NzAxMTIsIDB4ODAwNzUsIDB4ODAwMzUsIDB4OTAwY2IsIDB4NzAxMGEsIDB4ODAwNjUsIDB4ODAwMjUsIDB4OTAwYWIsIDB4ODAwMDUsIDB4ODAwODUsIDB4ODAwNDUsIDB4OTAwZWIsIDB4NzAxMDYsIDB4ODAwNWQsIDB4ODAwMWQsIDB4OTAwOWIsIDB4NzAxMTYsIDB4ODAwN2QsIDB4ODAwM2QsIDB4OTAwZGIsIDB4NzAxMGUsIDB4ODAwNmQsIDB4ODAwMmQsIDB4OTAwYmIsIDB4ODAwMGQsIDB4ODAwOGQsIDB4ODAwNGQsIDB4OTAwZmIsIDB4NzAxMDEsIDB4ODAwNTMsIDB4ODAwMTMsIDB4ODAxMWIsIDB4NzAxMTEsIDB4ODAwNzMsIDB4ODAwMzMsIDB4OTAwYzcsIDB4NzAxMDksIDB4ODAwNjMsIDB4ODAwMjMsIDB4OTAwYTcsIDB4ODAwMDMsIDB4ODAwODMsIDB4ODAwNDMsIDB4OTAwZTcsIDB4NzAxMDUsIDB4ODAwNWIsIDB4ODAwMWIsIDB4OTAwOTcsIDB4NzAxMTUsIDB4ODAwN2IsIDB4ODAwM2IsIDB4OTAwZDcsIDB4NzAxMGQsIDB4ODAwNmIsIDB4ODAwMmIsIDB4OTAwYjcsIDB4ODAwMGIsIDB4ODAwOGIsIDB4ODAwNGIsIDB4OTAwZjcsIDB4NzAxMDMsIDB4ODAwNTcsIDB4ODAwMTcsIDB4ODAxMWYsIDB4NzAxMTMsIDB4ODAwNzcsIDB4ODAwMzcsIDB4OTAwY2YsIDB4NzAxMGIsIDB4ODAwNjcsIDB4ODAwMjcsIDB4OTAwYWYsIDB4ODAwMDcsIDB4ODAwODcsIDB4ODAwNDcsIDB4OTAwZWYsIDB4NzAxMDcsIDB4ODAwNWYsIDB4ODAwMWYsIDB4OTAwOWYsIDB4NzAxMTcsIDB4ODAwN2YsIDB4ODAwM2YsIDB4OTAwZGYsIDB4NzAxMGYsIDB4ODAwNmYsIDB4ODAwMmYsIDB4OTAwYmYsIDB4ODAwMGYsIDB4ODAwOGYsIDB4ODAwNGYsIDB4OTAwZmZdKSwgOV07CmNvbnN0IGZpeGVkRGlzdENvZGVUYWIgPSBbbmV3IEludDMyQXJyYXkoWzB4NTAwMDAsIDB4NTAwMTAsIDB4NTAwMDgsIDB4NTAwMTgsIDB4NTAwMDQsIDB4NTAwMTQsIDB4NTAwMGMsIDB4NTAwMWMsIDB4NTAwMDIsIDB4NTAwMTIsIDB4NTAwMGEsIDB4NTAwMWEsIDB4NTAwMDYsIDB4NTAwMTYsIDB4NTAwMGUsIDB4MDAwMDAsIDB4NTAwMDEsIDB4NTAwMTEsIDB4NTAwMDksIDB4NTAwMTksIDB4NTAwMDUsIDB4NTAwMTUsIDB4NTAwMGQsIDB4NTAwMWQsIDB4NTAwMDMsIDB4NTAwMTMsIDB4NTAwMGIsIDB4NTAwMWIsIDB4NTAwMDcsIDB4NTAwMTcsIDB4NTAwMGYsIDB4MDAwMDBdKSwgNV07CmNsYXNzIEZsYXRlU3RyZWFtIGV4dGVuZHMgRGVjb2RlU3RyZWFtIHsKICBjb25zdHJ1Y3RvcihzdHIsIG1heWJlTGVuZ3RoKSB7CiAgICBzdXBlcihtYXliZUxlbmd0aCk7CiAgICB0aGlzLnN0ciA9IHN0cjsKICAgIHRoaXMuZGljdCA9IHN0ci5kaWN0OwogICAgY29uc3QgY21mID0gc3RyLmdldEJ5dGUoKTsKICAgIGNvbnN0IGZsZyA9IHN0ci5nZXRCeXRlKCk7CiAgICBpZiAoY21mID09PSAtMSB8fCBmbGcgPT09IC0xKSB7CiAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcihgSW52YWxpZCBoZWFkZXIgaW4gZmxhdGUgc3RyZWFtOiAke2NtZn0sICR7ZmxnfWApOwogICAgfQogICAgaWYgKChjbWYgJiAweDBmKSAhPT0gMHgwOCkgewogICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoYFVua25vd24gY29tcHJlc3Npb24gbWV0aG9kIGluIGZsYXRlIHN0cmVhbTogJHtjbWZ9LCAke2ZsZ31gKTsKICAgIH0KICAgIGlmICgoKGNtZiA8PCA4KSArIGZsZykgJSAzMSAhPT0gMCkgewogICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoYEJhZCBGQ0hFQ0sgaW4gZmxhdGUgc3RyZWFtOiAke2NtZn0sICR7ZmxnfWApOwogICAgfQogICAgaWYgKGZsZyAmIDB4MjApIHsKICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKGBGRElDVCBiaXQgc2V0IGluIGZsYXRlIHN0cmVhbTogJHtjbWZ9LCAke2ZsZ31gKTsKICAgIH0KICAgIHRoaXMuY29kZVNpemUgPSAwOwogICAgdGhpcy5jb2RlQnVmID0gMDsKICB9CiAgYXN5bmMgZ2V0SW1hZ2VEYXRhKGxlbmd0aCwgX2RlY29kZXJPcHRpb25zKSB7CiAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5hc3luY0dldEJ5dGVzKCk7CiAgICBpZiAoIWRhdGEpIHsKICAgICAgcmV0dXJuIHRoaXMuZ2V0Qnl0ZXMobGVuZ3RoKTsKICAgIH0KICAgIGlmIChkYXRhLmxlbmd0aCA8PSBsZW5ndGgpIHsKICAgICAgcmV0dXJuIGRhdGE7CiAgICB9CiAgICByZXR1cm4gZGF0YS5zdWJhcnJheSgwLCBsZW5ndGgpOwogIH0KICBhc3luYyBhc3luY0dldEJ5dGVzKCkgewogICAgdGhpcy5zdHIucmVzZXQoKTsKICAgIGNvbnN0IGJ5dGVzID0gdGhpcy5zdHIuZ2V0Qnl0ZXMoKTsKICAgIHRyeSB7CiAgICAgIGNvbnN0IHsKICAgICAgICByZWFkYWJsZSwKICAgICAgICB3cml0YWJsZQogICAgICB9ID0gbmV3IERlY29tcHJlc3Npb25TdHJlYW0oImRlZmxhdGUiKTsKICAgICAgY29uc3Qgd3JpdGVyID0gd3JpdGFibGUuZ2V0V3JpdGVyKCk7CiAgICAgIGF3YWl0IHdyaXRlci5yZWFkeTsKICAgICAgd3JpdGVyLndyaXRlKGJ5dGVzKS50aGVuKGFzeW5jICgpID0+IHsKICAgICAgICBhd2FpdCB3cml0ZXIucmVhZHk7CiAgICAgICAgYXdhaXQgd3JpdGVyLmNsb3NlKCk7CiAgICAgIH0pLmNhdGNoKCgpID0+IHt9KTsKICAgICAgY29uc3QgY2h1bmtzID0gW107CiAgICAgIGxldCB0b3RhbExlbmd0aCA9IDA7CiAgICAgIGZvciBhd2FpdCAoY29uc3QgY2h1bmsgb2YgcmVhZGFibGUpIHsKICAgICAgICBjaHVua3MucHVzaChjaHVuayk7CiAgICAgICAgdG90YWxMZW5ndGggKz0gY2h1bmsuYnl0ZUxlbmd0aDsKICAgICAgfQogICAgICBjb25zdCBkYXRhID0gbmV3IFVpbnQ4QXJyYXkodG90YWxMZW5ndGgpOwogICAgICBsZXQgb2Zmc2V0ID0gMDsKICAgICAgZm9yIChjb25zdCBjaHVuayBvZiBjaHVua3MpIHsKICAgICAgICBkYXRhLnNldChjaHVuaywgb2Zmc2V0KTsKICAgICAgICBvZmZzZXQgKz0gY2h1bmsuYnl0ZUxlbmd0aDsKICAgICAgfQogICAgICByZXR1cm4gZGF0YTsKICAgIH0gY2F0Y2ggewogICAgICB0aGlzLnN0ciA9IG5ldyBTdHJlYW0oYnl0ZXMsIDIsIGJ5dGVzLmxlbmd0aCwgdGhpcy5zdHIuZGljdCk7CiAgICAgIHRoaXMucmVzZXQoKTsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgfQogIGdldCBpc0FzeW5jKCkgewogICAgcmV0dXJuIHRydWU7CiAgfQogIGdldEJpdHMoYml0cykgewogICAgY29uc3Qgc3RyID0gdGhpcy5zdHI7CiAgICBsZXQgY29kZVNpemUgPSB0aGlzLmNvZGVTaXplOwogICAgbGV0IGNvZGVCdWYgPSB0aGlzLmNvZGVCdWY7CiAgICBsZXQgYjsKICAgIHdoaWxlIChjb2RlU2l6ZSA8IGJpdHMpIHsKICAgICAgaWYgKChiID0gc3RyLmdldEJ5dGUoKSkgPT09IC0xKSB7CiAgICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCJCYWQgZW5jb2RpbmcgaW4gZmxhdGUgc3RyZWFtIik7CiAgICAgIH0KICAgICAgY29kZUJ1ZiB8PSBiIDw8IGNvZGVTaXplOwogICAgICBjb2RlU2l6ZSArPSA4OwogICAgfQogICAgYiA9IGNvZGVCdWYgJiAoMSA8PCBiaXRzKSAtIDE7CiAgICB0aGlzLmNvZGVCdWYgPSBjb2RlQnVmID4+IGJpdHM7CiAgICB0aGlzLmNvZGVTaXplID0gY29kZVNpemUgLT0gYml0czsKICAgIHJldHVybiBiOwogIH0KICBnZXRDb2RlKHRhYmxlKSB7CiAgICBjb25zdCBzdHIgPSB0aGlzLnN0cjsKICAgIGNvbnN0IGNvZGVzID0gdGFibGVbMF07CiAgICBjb25zdCBtYXhMZW4gPSB0YWJsZVsxXTsKICAgIGxldCBjb2RlU2l6ZSA9IHRoaXMuY29kZVNpemU7CiAgICBsZXQgY29kZUJ1ZiA9IHRoaXMuY29kZUJ1ZjsKICAgIGxldCBiOwogICAgd2hpbGUgKGNvZGVTaXplIDwgbWF4TGVuKSB7CiAgICAgIGlmICgoYiA9IHN0ci5nZXRCeXRlKCkpID09PSAtMSkgewogICAgICAgIGJyZWFrOwogICAgICB9CiAgICAgIGNvZGVCdWYgfD0gYiA8PCBjb2RlU2l6ZTsKICAgICAgY29kZVNpemUgKz0gODsKICAgIH0KICAgIGNvbnN0IGNvZGUgPSBjb2Rlc1tjb2RlQnVmICYgKDEgPDwgbWF4TGVuKSAtIDFdOwogICAgY29uc3QgY29kZUxlbiA9IGNvZGUgPj4gMTY7CiAgICBjb25zdCBjb2RlVmFsID0gY29kZSAmIDB4ZmZmZjsKICAgIGlmIChjb2RlTGVuIDwgMSB8fCBjb2RlU2l6ZSA8IGNvZGVMZW4pIHsKICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCJCYWQgZW5jb2RpbmcgaW4gZmxhdGUgc3RyZWFtIik7CiAgICB9CiAgICB0aGlzLmNvZGVCdWYgPSBjb2RlQnVmID4+IGNvZGVMZW47CiAgICB0aGlzLmNvZGVTaXplID0gY29kZVNpemUgLSBjb2RlTGVuOwogICAgcmV0dXJuIGNvZGVWYWw7CiAgfQogIGdlbmVyYXRlSHVmZm1hblRhYmxlKGxlbmd0aHMpIHsKICAgIGNvbnN0IG4gPSBsZW5ndGhzLmxlbmd0aDsKICAgIGxldCBtYXhMZW4gPSAwOwogICAgbGV0IGk7CiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7CiAgICAgIGlmIChsZW5ndGhzW2ldID4gbWF4TGVuKSB7CiAgICAgICAgbWF4TGVuID0gbGVuZ3Roc1tpXTsKICAgICAgfQogICAgfQogICAgY29uc3Qgc2l6ZSA9IDEgPDwgbWF4TGVuOwogICAgY29uc3QgY29kZXMgPSBuZXcgSW50MzJBcnJheShzaXplKTsKICAgIGZvciAobGV0IGxlbiA9IDEsIGNvZGUgPSAwLCBza2lwID0gMjsgbGVuIDw9IG1heExlbjsgKytsZW4sIGNvZGUgPDw9IDEsIHNraXAgPDw9IDEpIHsKICAgICAgZm9yIChsZXQgdmFsID0gMDsgdmFsIDwgbjsgKyt2YWwpIHsKICAgICAgICBpZiAobGVuZ3Roc1t2YWxdID09PSBsZW4pIHsKICAgICAgICAgIGxldCBjb2RlMiA9IDA7CiAgICAgICAgICBsZXQgdCA9IGNvZGU7CiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHsKICAgICAgICAgICAgY29kZTIgPSBjb2RlMiA8PCAxIHwgdCAmIDE7CiAgICAgICAgICAgIHQgPj49IDE7CiAgICAgICAgICB9CiAgICAgICAgICBmb3IgKGkgPSBjb2RlMjsgaSA8IHNpemU7IGkgKz0gc2tpcCkgewogICAgICAgICAgICBjb2Rlc1tpXSA9IGxlbiA8PCAxNiB8IHZhbDsKICAgICAgICAgIH0KICAgICAgICAgICsrY29kZTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBbY29kZXMsIG1heExlbl07CiAgfQogICNlbmRzU3RyZWFtT25FcnJvcihlcnIpIHsKICAgIGluZm8oZXJyKTsKICAgIHRoaXMuZW9mID0gdHJ1ZTsKICB9CiAgcmVhZEJsb2NrKCkgewogICAgbGV0IGJ1ZmZlciwgaGRyLCBsZW47CiAgICBjb25zdCBzdHIgPSB0aGlzLnN0cjsKICAgIHRyeSB7CiAgICAgIGhkciA9IHRoaXMuZ2V0Qml0cygzKTsKICAgIH0gY2F0Y2ggKGV4KSB7CiAgICAgIHRoaXMuI2VuZHNTdHJlYW1PbkVycm9yKGV4Lm1lc3NhZ2UpOwogICAgICByZXR1cm47CiAgICB9CiAgICBpZiAoaGRyICYgMSkgewogICAgICB0aGlzLmVvZiA9IHRydWU7CiAgICB9CiAgICBoZHIgPj49IDE7CiAgICBpZiAoaGRyID09PSAwKSB7CiAgICAgIGxldCBiOwogICAgICBpZiAoKGIgPSBzdHIuZ2V0Qnl0ZSgpKSA9PT0gLTEpIHsKICAgICAgICB0aGlzLiNlbmRzU3RyZWFtT25FcnJvcigiQmFkIGJsb2NrIGhlYWRlciBpbiBmbGF0ZSBzdHJlYW0iKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgbGV0IGJsb2NrTGVuID0gYjsKICAgICAgaWYgKChiID0gc3RyLmdldEJ5dGUoKSkgPT09IC0xKSB7CiAgICAgICAgdGhpcy4jZW5kc1N0cmVhbU9uRXJyb3IoIkJhZCBibG9jayBoZWFkZXIgaW4gZmxhdGUgc3RyZWFtIik7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIGJsb2NrTGVuIHw9IGIgPDwgODsKICAgICAgaWYgKChiID0gc3RyLmdldEJ5dGUoKSkgPT09IC0xKSB7CiAgICAgICAgdGhpcy4jZW5kc1N0cmVhbU9uRXJyb3IoIkJhZCBibG9jayBoZWFkZXIgaW4gZmxhdGUgc3RyZWFtIik7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIGxldCBjaGVjayA9IGI7CiAgICAgIGlmICgoYiA9IHN0ci5nZXRCeXRlKCkpID09PSAtMSkgewogICAgICAgIHRoaXMuI2VuZHNTdHJlYW1PbkVycm9yKCJCYWQgYmxvY2sgaGVhZGVyIGluIGZsYXRlIHN0cmVhbSIpOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBjaGVjayB8PSBiIDw8IDg7CiAgICAgIGlmIChjaGVjayAhPT0gKH5ibG9ja0xlbiAmIDB4ZmZmZikgJiYgKGJsb2NrTGVuICE9PSAwIHx8IGNoZWNrICE9PSAwKSkgewogICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigiQmFkIHVuY29tcHJlc3NlZCBibG9jayBsZW5ndGggaW4gZmxhdGUgc3RyZWFtIik7CiAgICAgIH0KICAgICAgdGhpcy5jb2RlQnVmID0gMDsKICAgICAgdGhpcy5jb2RlU2l6ZSA9IDA7CiAgICAgIGNvbnN0IGJ1ZmZlckxlbmd0aCA9IHRoaXMuYnVmZmVyTGVuZ3RoLAogICAgICAgIGVuZCA9IGJ1ZmZlckxlbmd0aCArIGJsb2NrTGVuOwogICAgICBidWZmZXIgPSB0aGlzLmVuc3VyZUJ1ZmZlcihlbmQpOwogICAgICB0aGlzLmJ1ZmZlckxlbmd0aCA9IGVuZDsKICAgICAgaWYgKGJsb2NrTGVuID09PSAwKSB7CiAgICAgICAgaWYgKHN0ci5wZWVrQnl0ZSgpID09PSAtMSkgewogICAgICAgICAgdGhpcy5lb2YgPSB0cnVlOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBjb25zdCBibG9jayA9IHN0ci5nZXRCeXRlcyhibG9ja0xlbik7CiAgICAgICAgYnVmZmVyLnNldChibG9jaywgYnVmZmVyTGVuZ3RoKTsKICAgICAgICBpZiAoYmxvY2subGVuZ3RoIDwgYmxvY2tMZW4pIHsKICAgICAgICAgIHRoaXMuZW9mID0gdHJ1ZTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuOwogICAgfQogICAgbGV0IGxpdENvZGVUYWJsZTsKICAgIGxldCBkaXN0Q29kZVRhYmxlOwogICAgaWYgKGhkciA9PT0gMSkgewogICAgICBsaXRDb2RlVGFibGUgPSBmaXhlZExpdENvZGVUYWI7CiAgICAgIGRpc3RDb2RlVGFibGUgPSBmaXhlZERpc3RDb2RlVGFiOwogICAgfSBlbHNlIGlmIChoZHIgPT09IDIpIHsKICAgICAgY29uc3QgbnVtTGl0Q29kZXMgPSB0aGlzLmdldEJpdHMoNSkgKyAyNTc7CiAgICAgIGNvbnN0IG51bURpc3RDb2RlcyA9IHRoaXMuZ2V0Qml0cyg1KSArIDE7CiAgICAgIGNvbnN0IG51bUNvZGVMZW5Db2RlcyA9IHRoaXMuZ2V0Qml0cyg0KSArIDQ7CiAgICAgIGNvbnN0IGNvZGVMZW5Db2RlTGVuZ3RocyA9IG5ldyBVaW50OEFycmF5KGNvZGVMZW5Db2RlTWFwLmxlbmd0aCk7CiAgICAgIGxldCBpOwogICAgICBmb3IgKGkgPSAwOyBpIDwgbnVtQ29kZUxlbkNvZGVzOyArK2kpIHsKICAgICAgICBjb2RlTGVuQ29kZUxlbmd0aHNbY29kZUxlbkNvZGVNYXBbaV1dID0gdGhpcy5nZXRCaXRzKDMpOwogICAgICB9CiAgICAgIGNvbnN0IGNvZGVMZW5Db2RlVGFiID0gdGhpcy5nZW5lcmF0ZUh1ZmZtYW5UYWJsZShjb2RlTGVuQ29kZUxlbmd0aHMpOwogICAgICBsZW4gPSAwOwogICAgICBpID0gMDsKICAgICAgY29uc3QgY29kZXMgPSBudW1MaXRDb2RlcyArIG51bURpc3RDb2RlczsKICAgICAgY29uc3QgY29kZUxlbmd0aHMgPSBuZXcgVWludDhBcnJheShjb2Rlcyk7CiAgICAgIGxldCBiaXRzTGVuZ3RoLCBiaXRzT2Zmc2V0LCB3aGF0OwogICAgICB3aGlsZSAoaSA8IGNvZGVzKSB7CiAgICAgICAgY29uc3QgY29kZSA9IHRoaXMuZ2V0Q29kZShjb2RlTGVuQ29kZVRhYik7CiAgICAgICAgaWYgKGNvZGUgPT09IDE2KSB7CiAgICAgICAgICBiaXRzTGVuZ3RoID0gMjsKICAgICAgICAgIGJpdHNPZmZzZXQgPSAzOwogICAgICAgICAgd2hhdCA9IGxlbjsKICAgICAgICB9IGVsc2UgaWYgKGNvZGUgPT09IDE3KSB7CiAgICAgICAgICBiaXRzTGVuZ3RoID0gMzsKICAgICAgICAgIGJpdHNPZmZzZXQgPSAzOwogICAgICAgICAgd2hhdCA9IGxlbiA9IDA7CiAgICAgICAgfSBlbHNlIGlmIChjb2RlID09PSAxOCkgewogICAgICAgICAgYml0c0xlbmd0aCA9IDc7CiAgICAgICAgICBiaXRzT2Zmc2V0ID0gMTE7CiAgICAgICAgICB3aGF0ID0gbGVuID0gMDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY29kZUxlbmd0aHNbaSsrXSA9IGxlbiA9IGNvZGU7CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CiAgICAgICAgbGV0IHJlcGVhdExlbmd0aCA9IHRoaXMuZ2V0Qml0cyhiaXRzTGVuZ3RoKSArIGJpdHNPZmZzZXQ7CiAgICAgICAgd2hpbGUgKHJlcGVhdExlbmd0aC0tID4gMCkgewogICAgICAgICAgY29kZUxlbmd0aHNbaSsrXSA9IHdoYXQ7CiAgICAgICAgfQogICAgICB9CiAgICAgIGxpdENvZGVUYWJsZSA9IHRoaXMuZ2VuZXJhdGVIdWZmbWFuVGFibGUoY29kZUxlbmd0aHMuc3ViYXJyYXkoMCwgbnVtTGl0Q29kZXMpKTsKICAgICAgZGlzdENvZGVUYWJsZSA9IHRoaXMuZ2VuZXJhdGVIdWZmbWFuVGFibGUoY29kZUxlbmd0aHMuc3ViYXJyYXkobnVtTGl0Q29kZXMsIGNvZGVzKSk7CiAgICB9IGVsc2UgewogICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoIlVua25vd24gYmxvY2sgdHlwZSBpbiBmbGF0ZSBzdHJlYW0iKTsKICAgIH0KICAgIGJ1ZmZlciA9IHRoaXMuYnVmZmVyOwogICAgbGV0IGxpbWl0ID0gYnVmZmVyID8gYnVmZmVyLmxlbmd0aCA6IDA7CiAgICBsZXQgcG9zID0gdGhpcy5idWZmZXJMZW5ndGg7CiAgICB3aGlsZSAodHJ1ZSkgewogICAgICBsZXQgY29kZTEgPSB0aGlzLmdldENvZGUobGl0Q29kZVRhYmxlKTsKICAgICAgaWYgKGNvZGUxIDwgMjU2KSB7CiAgICAgICAgaWYgKHBvcyArIDEgPj0gbGltaXQpIHsKICAgICAgICAgIGJ1ZmZlciA9IHRoaXMuZW5zdXJlQnVmZmVyKHBvcyArIDEpOwogICAgICAgICAgbGltaXQgPSBidWZmZXIubGVuZ3RoOwogICAgICAgIH0KICAgICAgICBidWZmZXJbcG9zKytdID0gY29kZTE7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgaWYgKGNvZGUxID09PSAyNTYpIHsKICAgICAgICB0aGlzLmJ1ZmZlckxlbmd0aCA9IHBvczsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgY29kZTEgLT0gMjU3OwogICAgICBjb2RlMSA9IGxlbmd0aERlY29kZVtjb2RlMV07CiAgICAgIGxldCBjb2RlMiA9IGNvZGUxID4+IDE2OwogICAgICBpZiAoY29kZTIgPiAwKSB7CiAgICAgICAgY29kZTIgPSB0aGlzLmdldEJpdHMoY29kZTIpOwogICAgICB9CiAgICAgIGxlbiA9IChjb2RlMSAmIDB4ZmZmZikgKyBjb2RlMjsKICAgICAgY29kZTEgPSB0aGlzLmdldENvZGUoZGlzdENvZGVUYWJsZSk7CiAgICAgIGNvZGUxID0gZGlzdERlY29kZVtjb2RlMV07CiAgICAgIGNvZGUyID0gY29kZTEgPj4gMTY7CiAgICAgIGlmIChjb2RlMiA+IDApIHsKICAgICAgICBjb2RlMiA9IHRoaXMuZ2V0Qml0cyhjb2RlMik7CiAgICAgIH0KICAgICAgY29uc3QgZGlzdCA9IChjb2RlMSAmIDB4ZmZmZikgKyBjb2RlMjsKICAgICAgaWYgKHBvcyArIGxlbiA+PSBsaW1pdCkgewogICAgICAgIGJ1ZmZlciA9IHRoaXMuZW5zdXJlQnVmZmVyKHBvcyArIGxlbik7CiAgICAgICAgbGltaXQgPSBidWZmZXIubGVuZ3RoOwogICAgICB9CiAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgbGVuOyArK2ssICsrcG9zKSB7CiAgICAgICAgYnVmZmVyW3Bvc10gPSBidWZmZXJbcG9zIC0gZGlzdF07CiAgICAgIH0KICAgIH0KICB9Cn0KCjsvLyAuL3NyYy9jb3JlL2FyaXRobWV0aWNfZGVjb2Rlci5qcwpjb25zdCBRZVRhYmxlID0gW3sKICBxZTogMHg1NjAxLAogIG5tcHM6IDEsCiAgbmxwczogMSwKICBzd2l0Y2hGbGFnOiAxCn0sIHsKICBxZTogMHgzNDAxLAogIG5tcHM6IDIsCiAgbmxwczogNiwKICBzd2l0Y2hGbGFnOiAwCn0sIHsKICBxZTogMHgxODAxLAogIG5tcHM6IDMsCiAgbmxwczogOSwKICBzd2l0Y2hGbGFnOiAwCn0sIHsKICBxZTogMHgwYWMxLAogIG5tcHM6IDQsCiAgbmxwczogMTIsCiAgc3dpdGNoRmxhZzogMAp9LCB7CiAgcWU6IDB4MDUyMSwKICBubXBzOiA1LAogIG5scHM6IDI5LAogIHN3aXRjaEZsYWc6IDAKfSwgewogIHFlOiAweDAyMjEsCiAgbm1wczogMzgsCiAgbmxwczogMzMsCiAgc3dpdGNoRmxhZzogMAp9LCB7CiAgcWU6IDB4NTYwMSwKICBubXBzOiA3LAogIG5scHM6IDYsCiAgc3dpdGNoRmxhZzogMQp9LCB7CiAgcWU6IDB4NTQwMSwKICBubXBzOiA4LAogIG5scHM6IDE0LAogIHN3aXRjaEZsYWc6IDAKfSwgewogIHFlOiAweDQ4MDEsCiAgbm1wczogOSwKICBubHBzOiAxNCwKICBzd2l0Y2hGbGFnOiAwCn0sIHsKICBxZTogMHgzODAxLAogIG5tcHM6IDEwLAogIG5scHM6IDE0LAogIHN3aXRjaEZsYWc6IDAKfSwgewogIHFlOiAweDMwMDEsCiAgbm1wczogMTEsCiAgbmxwczogMTcsCiAgc3dpdGNoRmxhZzogMAp9LCB7CiAgcWU6IDB4MjQwMSwKICBubXBzOiAxMiwKICBubHBzOiAxOCwKICBzd2l0Y2hGbGFnOiAwCn0sIHsKICBxZTogMHgxYzAxLAogIG5tcHM6IDEzLAogIG5scHM6IDIwLAogIHN3aXRjaEZsYWc6IDAKfSwgewogIHFlOiAweDE2MDEsCiAgbm1wczogMjksCiAgbmxwczogMjEsCiAgc3dpdGNoRmxhZzogMAp9LCB7CiAgcWU6IDB4NTYwMSwKICBubXBzOiAxNSwKICBubHBzOiAxNCwKICBzd2l0Y2hGbGFnOiAxCn0sIHsKICBxZTogMHg1NDAxLAogIG5tcHM6IDE2LAogIG5scHM6IDE0LAogIHN3aXRjaEZsYWc6IDAKfSwgewogIHFlOiAweDUxMDEsCiAgbm1wczogMTcsCiAgbmxwczogMTUsCiAgc3dpdGNoRmxhZzogMAp9LCB7CiAgcWU6IDB4NDgwMSwKICBubXBzOiAxOCwKICBubHBzOiAxNiwKICBzd2l0Y2hGbGFnOiAwCn0sIHsKICBxZTogMHgzODAxLAogIG5tcHM6IDE5LAogIG5scHM6IDE3LAogIHN3aXRjaEZsYWc6IDAKfSwgewogIHFlOiAweDM0MDEsCiAgbm1wczogMjAsCiAgbmxwczogMTgsCiAgc3dpdGNoRmxhZzogMAp9LCB7CiAgcWU6IDB4MzAwMSwKICBubXBzOiAyMSwKICBubHBzOiAxOSwKICBzd2l0Y2hGbGFnOiAwCn0sIHsKICBxZTogMHgyODAxLAogIG5tcHM6IDIyLAogIG5scHM6IDE5LAogIHN3aXRjaEZsYWc6IDAKfSwgewogIHFlOiAweDI0MDEsCiAgbm1wczogMjMsCiAgbmxwczogMjAsCiAgc3dpdGNoRmxhZzogMAp9LCB7CiAgcWU6IDB4MjIwMSwKICBubXBzOiAyNCwKICBubHBzOiAyMSwKICBzd2l0Y2hGbGFnOiAwCn0sIHsKICBxZTogMHgxYzAxLAogIG5tcHM6IDI1LAogIG5scHM6IDIyLAogIHN3aXRjaEZsYWc6IDAKfSwgewogIHFlOiAweDE4MDEsCiAgbm1wczogMjYsCiAgbmxwczogMjMsCiAgc3dpdGNoRmxhZzogMAp9LCB7CiAgcWU6IDB4MTYwMSwKICBubXBzOiAyNywKICBubHBzOiAyNCwKICBzd2l0Y2hGbGFnOiAwCn0sIHsKICBxZTogMHgxNDAxLAogIG5tcHM6IDI4LAogIG5scHM6IDI1LAogIHN3aXRjaEZsYWc6IDAKfSwgewogIHFlOiAweDEyMDEsCiAgbm1wczogMjksCiAgbmxwczogMjYsCiAgc3dpdGNoRmxhZzogMAp9LCB7CiAgcWU6IDB4MTEwMSwKICBubXBzOiAzMCwKICBubHBzOiAyNywKICBzd2l0Y2hGbGFnOiAwCn0sIHsKICBxZTogMHgwYWMxLAogIG5tcHM6IDMxLAogIG5scHM6IDI4LAogIHN3aXRjaEZsYWc6IDAKfSwgewogIHFlOiAweDA5YzEsCiAgbm1wczogMzIsCiAgbmxwczogMjksCiAgc3dpdGNoRmxhZzogMAp9LCB7CiAgcWU6IDB4MDhhMSwKICBubXBzOiAzMywKICBubHBzOiAzMCwKICBzd2l0Y2hGbGFnOiAwCn0sIHsKICBxZTogMHgwNTIxLAogIG5tcHM6IDM0LAogIG5scHM6IDMxLAogIHN3aXRjaEZsYWc6IDAKfSwgewogIHFlOiAweDA0NDEsCiAgbm1wczogMzUsCiAgbmxwczogMzIsCiAgc3dpdGNoRmxhZzogMAp9LCB7CiAgcWU6IDB4MDJhMSwKICBubXBzOiAzNiwKICBubHBzOiAzMywKICBzd2l0Y2hGbGFnOiAwCn0sIHsKICBxZTogMHgwMjIxLAogIG5tcHM6IDM3LAogIG5scHM6IDM0LAogIHN3aXRjaEZsYWc6IDAKfSwgewogIHFlOiAweDAxNDEsCiAgbm1wczogMzgsCiAgbmxwczogMzUsCiAgc3dpdGNoRmxhZzogMAp9LCB7CiAgcWU6IDB4MDExMSwKICBubXBzOiAzOSwKICBubHBzOiAzNiwKICBzd2l0Y2hGbGFnOiAwCn0sIHsKICBxZTogMHgwMDg1LAogIG5tcHM6IDQwLAogIG5scHM6IDM3LAogIHN3aXRjaEZsYWc6IDAKfSwgewogIHFlOiAweDAwNDksCiAgbm1wczogNDEsCiAgbmxwczogMzgsCiAgc3dpdGNoRmxhZzogMAp9LCB7CiAgcWU6IDB4MDAyNSwKICBubXBzOiA0MiwKICBubHBzOiAzOSwKICBzd2l0Y2hGbGFnOiAwCn0sIHsKICBxZTogMHgwMDE1LAogIG5tcHM6IDQzLAogIG5scHM6IDQwLAogIHN3aXRjaEZsYWc6IDAKfSwgewogIHFlOiAweDAwMDksCiAgbm1wczogNDQsCiAgbmxwczogNDEsCiAgc3dpdGNoRmxhZzogMAp9LCB7CiAgcWU6IDB4MDAwNSwKICBubXBzOiA0NSwKICBubHBzOiA0MiwKICBzd2l0Y2hGbGFnOiAwCn0sIHsKICBxZTogMHgwMDAxLAogIG5tcHM6IDQ1LAogIG5scHM6IDQzLAogIHN3aXRjaEZsYWc6IDAKfSwgewogIHFlOiAweDU2MDEsCiAgbm1wczogNDYsCiAgbmxwczogNDYsCiAgc3dpdGNoRmxhZzogMAp9XTsKY2xhc3MgQXJpdGhtZXRpY0RlY29kZXIgewogIGNvbnN0cnVjdG9yKGRhdGEsIHN0YXJ0LCBlbmQpIHsKICAgIHRoaXMuZGF0YSA9IGRhdGE7CiAgICB0aGlzLmJwID0gc3RhcnQ7CiAgICB0aGlzLmRhdGFFbmQgPSBlbmQ7CiAgICB0aGlzLmNoaWdoID0gZGF0YVtzdGFydF07CiAgICB0aGlzLmNsb3cgPSAwOwogICAgdGhpcy5ieXRlSW4oKTsKICAgIHRoaXMuY2hpZ2ggPSB0aGlzLmNoaWdoIDw8IDcgJiAweGZmZmYgfCB0aGlzLmNsb3cgPj4gOSAmIDB4N2Y7CiAgICB0aGlzLmNsb3cgPSB0aGlzLmNsb3cgPDwgNyAmIDB4ZmZmZjsKICAgIHRoaXMuY3QgLT0gNzsKICAgIHRoaXMuYSA9IDB4ODAwMDsKICB9CiAgYnl0ZUluKCkgewogICAgY29uc3QgZGF0YSA9IHRoaXMuZGF0YTsKICAgIGxldCBicCA9IHRoaXMuYnA7CiAgICBpZiAoZGF0YVticF0gPT09IDB4ZmYpIHsKICAgICAgaWYgKGRhdGFbYnAgKyAxXSA+IDB4OGYpIHsKICAgICAgICB0aGlzLmNsb3cgKz0gMHhmZjAwOwogICAgICAgIHRoaXMuY3QgPSA4OwogICAgICB9IGVsc2UgewogICAgICAgIGJwKys7CiAgICAgICAgdGhpcy5jbG93ICs9IGRhdGFbYnBdIDw8IDk7CiAgICAgICAgdGhpcy5jdCA9IDc7CiAgICAgICAgdGhpcy5icCA9IGJwOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBicCsrOwogICAgICB0aGlzLmNsb3cgKz0gYnAgPCB0aGlzLmRhdGFFbmQgPyBkYXRhW2JwXSA8PCA4IDogMHhmZjAwOwogICAgICB0aGlzLmN0ID0gODsKICAgICAgdGhpcy5icCA9IGJwOwogICAgfQogICAgaWYgKHRoaXMuY2xvdyA+IDB4ZmZmZikgewogICAgICB0aGlzLmNoaWdoICs9IHRoaXMuY2xvdyA+PiAxNjsKICAgICAgdGhpcy5jbG93ICY9IDB4ZmZmZjsKICAgIH0KICB9CiAgcmVhZEJpdChjb250ZXh0cywgcG9zKSB7CiAgICBsZXQgY3hfaW5kZXggPSBjb250ZXh0c1twb3NdID4+IDEsCiAgICAgIGN4X21wcyA9IGNvbnRleHRzW3Bvc10gJiAxOwogICAgY29uc3QgcWVUYWJsZUljeCA9IFFlVGFibGVbY3hfaW5kZXhdOwogICAgY29uc3QgcWVJY3ggPSBxZVRhYmxlSWN4LnFlOwogICAgbGV0IGQ7CiAgICBsZXQgYSA9IHRoaXMuYSAtIHFlSWN4OwogICAgaWYgKHRoaXMuY2hpZ2ggPCBxZUljeCkgewogICAgICBpZiAoYSA8IHFlSWN4KSB7CiAgICAgICAgYSA9IHFlSWN4OwogICAgICAgIGQgPSBjeF9tcHM7CiAgICAgICAgY3hfaW5kZXggPSBxZVRhYmxlSWN4Lm5tcHM7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgYSA9IHFlSWN4OwogICAgICAgIGQgPSAxIF4gY3hfbXBzOwogICAgICAgIGlmIChxZVRhYmxlSWN4LnN3aXRjaEZsYWcgPT09IDEpIHsKICAgICAgICAgIGN4X21wcyA9IGQ7CiAgICAgICAgfQogICAgICAgIGN4X2luZGV4ID0gcWVUYWJsZUljeC5ubHBzOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICB0aGlzLmNoaWdoIC09IHFlSWN4OwogICAgICBpZiAoKGEgJiAweDgwMDApICE9PSAwKSB7CiAgICAgICAgdGhpcy5hID0gYTsKICAgICAgICByZXR1cm4gY3hfbXBzOwogICAgICB9CiAgICAgIGlmIChhIDwgcWVJY3gpIHsKICAgICAgICBkID0gMSBeIGN4X21wczsKICAgICAgICBpZiAocWVUYWJsZUljeC5zd2l0Y2hGbGFnID09PSAxKSB7CiAgICAgICAgICBjeF9tcHMgPSBkOwogICAgICAgIH0KICAgICAgICBjeF9pbmRleCA9IHFlVGFibGVJY3gubmxwczsKICAgICAgfSBlbHNlIHsKICAgICAgICBkID0gY3hfbXBzOwogICAgICAgIGN4X2luZGV4ID0gcWVUYWJsZUljeC5ubXBzOwogICAgICB9CiAgICB9CiAgICBkbyB7CiAgICAgIGlmICh0aGlzLmN0ID09PSAwKSB7CiAgICAgICAgdGhpcy5ieXRlSW4oKTsKICAgICAgfQogICAgICBhIDw8PSAxOwogICAgICB0aGlzLmNoaWdoID0gdGhpcy5jaGlnaCA8PCAxICYgMHhmZmZmIHwgdGhpcy5jbG93ID4+IDE1ICYgMTsKICAgICAgdGhpcy5jbG93ID0gdGhpcy5jbG93IDw8IDEgJiAweGZmZmY7CiAgICAgIHRoaXMuY3QtLTsKICAgIH0gd2hpbGUgKChhICYgMHg4MDAwKSA9PT0gMCk7CiAgICB0aGlzLmEgPSBhOwogICAgY29udGV4dHNbcG9zXSA9IGN4X2luZGV4IDw8IDEgfCBjeF9tcHM7CiAgICByZXR1cm4gZDsKICB9Cn0KCjsvLyAuL3NyYy9jb3JlL2piaWcyLmpzCgoKCgoKCgoKCgoKCgpjbGFzcyBKYmlnMkVycm9yIGV4dGVuZHMgQmFzZUV4Y2VwdGlvbiB7CiAgY29uc3RydWN0b3IobXNnKSB7CiAgICBzdXBlcihtc2csICJKYmlnMkVycm9yIik7CiAgfQp9CmNsYXNzIENvbnRleHRDYWNoZSB7CiAgZ2V0Q29udGV4dHMoaWQpIHsKICAgIGlmIChpZCBpbiB0aGlzKSB7CiAgICAgIHJldHVybiB0aGlzW2lkXTsKICAgIH0KICAgIHJldHVybiB0aGlzW2lkXSA9IG5ldyBJbnQ4QXJyYXkoMSA8PCAxNik7CiAgfQp9CmNsYXNzIERlY29kaW5nQ29udGV4dCB7CiAgY29uc3RydWN0b3IoZGF0YSwgc3RhcnQsIGVuZCkgewogICAgdGhpcy5kYXRhID0gZGF0YTsKICAgIHRoaXMuc3RhcnQgPSBzdGFydDsKICAgIHRoaXMuZW5kID0gZW5kOwogIH0KICBnZXQgZGVjb2RlcigpIHsKICAgIGNvbnN0IGRlY29kZXIgPSBuZXcgQXJpdGhtZXRpY0RlY29kZXIodGhpcy5kYXRhLCB0aGlzLnN0YXJ0LCB0aGlzLmVuZCk7CiAgICByZXR1cm4gc2hhZG93KHRoaXMsICJkZWNvZGVyIiwgZGVjb2Rlcik7CiAgfQogIGdldCBjb250ZXh0Q2FjaGUoKSB7CiAgICBjb25zdCBjYWNoZSA9IG5ldyBDb250ZXh0Q2FjaGUoKTsKICAgIHJldHVybiBzaGFkb3codGhpcywgImNvbnRleHRDYWNoZSIsIGNhY2hlKTsKICB9Cn0KZnVuY3Rpb24gZGVjb2RlSW50ZWdlcihjb250ZXh0Q2FjaGUsIHByb2NlZHVyZSwgZGVjb2RlcikgewogIGNvbnN0IGNvbnRleHRzID0gY29udGV4dENhY2hlLmdldENvbnRleHRzKHByb2NlZHVyZSk7CiAgbGV0IHByZXYgPSAxOwogIGZ1bmN0aW9uIHJlYWRCaXRzKGxlbmd0aCkgewogICAgbGV0IHYgPSAwOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICBjb25zdCBiaXQgPSBkZWNvZGVyLnJlYWRCaXQoY29udGV4dHMsIHByZXYpOwogICAgICBwcmV2ID0gcHJldiA8IDI1NiA/IHByZXYgPDwgMSB8IGJpdCA6IChwcmV2IDw8IDEgfCBiaXQpICYgNTExIHwgMjU2OwogICAgICB2ID0gdiA8PCAxIHwgYml0OwogICAgfQogICAgcmV0dXJuIHYgPj4+IDA7CiAgfQogIGNvbnN0IHNpZ24gPSByZWFkQml0cygxKTsKICBjb25zdCB2YWx1ZSA9IHJlYWRCaXRzKDEpID8gcmVhZEJpdHMoMSkgPyByZWFkQml0cygxKSA/IHJlYWRCaXRzKDEpID8gcmVhZEJpdHMoMSkgPyByZWFkQml0cygzMikgKyA0NDM2IDogcmVhZEJpdHMoMTIpICsgMzQwIDogcmVhZEJpdHMoOCkgKyA4NCA6IHJlYWRCaXRzKDYpICsgMjAgOiByZWFkQml0cyg0KSArIDQgOiByZWFkQml0cygyKTsKICBsZXQgc2lnbmVkVmFsdWU7CiAgaWYgKHNpZ24gPT09IDApIHsKICAgIHNpZ25lZFZhbHVlID0gdmFsdWU7CiAgfSBlbHNlIGlmICh2YWx1ZSA+IDApIHsKICAgIHNpZ25lZFZhbHVlID0gLXZhbHVlOwogIH0KICBpZiAoc2lnbmVkVmFsdWUgPj0gTUlOX0lOVF8zMiAmJiBzaWduZWRWYWx1ZSA8PSBNQVhfSU5UXzMyKSB7CiAgICByZXR1cm4gc2lnbmVkVmFsdWU7CiAgfQogIHJldHVybiBudWxsOwp9CmZ1bmN0aW9uIGRlY29kZUlBSUQoY29udGV4dENhY2hlLCBkZWNvZGVyLCBjb2RlTGVuZ3RoKSB7CiAgY29uc3QgY29udGV4dHMgPSBjb250ZXh0Q2FjaGUuZ2V0Q29udGV4dHMoIklBSUQiKTsKICBsZXQgcHJldiA9IDE7CiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb2RlTGVuZ3RoOyBpKyspIHsKICAgIGNvbnN0IGJpdCA9IGRlY29kZXIucmVhZEJpdChjb250ZXh0cywgcHJldik7CiAgICBwcmV2ID0gcHJldiA8PCAxIHwgYml0OwogIH0KICBpZiAoY29kZUxlbmd0aCA8IDMxKSB7CiAgICByZXR1cm4gcHJldiAmICgxIDw8IGNvZGVMZW5ndGgpIC0gMTsKICB9CiAgcmV0dXJuIHByZXYgJiAweDdmZmZmZmZmOwp9CmNvbnN0IFNlZ21lbnRUeXBlcyA9IFsiU3ltYm9sRGljdGlvbmFyeSIsIG51bGwsIG51bGwsIG51bGwsICJJbnRlcm1lZGlhdGVUZXh0UmVnaW9uIiwgbnVsbCwgIkltbWVkaWF0ZVRleHRSZWdpb24iLCAiSW1tZWRpYXRlTG9zc2xlc3NUZXh0UmVnaW9uIiwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgIlBhdHRlcm5EaWN0aW9uYXJ5IiwgbnVsbCwgbnVsbCwgbnVsbCwgIkludGVybWVkaWF0ZUhhbGZ0b25lUmVnaW9uIiwgbnVsbCwgIkltbWVkaWF0ZUhhbGZ0b25lUmVnaW9uIiwgIkltbWVkaWF0ZUxvc3NsZXNzSGFsZnRvbmVSZWdpb24iLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCAiSW50ZXJtZWRpYXRlR2VuZXJpY1JlZ2lvbiIsIG51bGwsICJJbW1lZGlhdGVHZW5lcmljUmVnaW9uIiwgIkltbWVkaWF0ZUxvc3NsZXNzR2VuZXJpY1JlZ2lvbiIsICJJbnRlcm1lZGlhdGVHZW5lcmljUmVmaW5lbWVudFJlZ2lvbiIsIG51bGwsICJJbW1lZGlhdGVHZW5lcmljUmVmaW5lbWVudFJlZ2lvbiIsICJJbW1lZGlhdGVMb3NzbGVzc0dlbmVyaWNSZWZpbmVtZW50UmVnaW9uIiwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgIlBhZ2VJbmZvcm1hdGlvbiIsICJFbmRPZlBhZ2UiLCAiRW5kT2ZTdHJpcGUiLCAiRW5kT2ZGaWxlIiwgIlByb2ZpbGVzIiwgIlRhYmxlcyIsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsICJFeHRlbnNpb24iXTsKY29uc3QgQ29kaW5nVGVtcGxhdGVzID0gW1t7CiAgeDogLTEsCiAgeTogLTIKfSwgewogIHg6IDAsCiAgeTogLTIKfSwgewogIHg6IDEsCiAgeTogLTIKfSwgewogIHg6IC0yLAogIHk6IC0xCn0sIHsKICB4OiAtMSwKICB5OiAtMQp9LCB7CiAgeDogMCwKICB5OiAtMQp9LCB7CiAgeDogMSwKICB5OiAtMQp9LCB7CiAgeDogMiwKICB5OiAtMQp9LCB7CiAgeDogLTQsCiAgeTogMAp9LCB7CiAgeDogLTMsCiAgeTogMAp9LCB7CiAgeDogLTIsCiAgeTogMAp9LCB7CiAgeDogLTEsCiAgeTogMAp9XSwgW3sKICB4OiAtMSwKICB5OiAtMgp9LCB7CiAgeDogMCwKICB5OiAtMgp9LCB7CiAgeDogMSwKICB5OiAtMgp9LCB7CiAgeDogMiwKICB5OiAtMgp9LCB7CiAgeDogLTIsCiAgeTogLTEKfSwgewogIHg6IC0xLAogIHk6IC0xCn0sIHsKICB4OiAwLAogIHk6IC0xCn0sIHsKICB4OiAxLAogIHk6IC0xCn0sIHsKICB4OiAyLAogIHk6IC0xCn0sIHsKICB4OiAtMywKICB5OiAwCn0sIHsKICB4OiAtMiwKICB5OiAwCn0sIHsKICB4OiAtMSwKICB5OiAwCn1dLCBbewogIHg6IC0xLAogIHk6IC0yCn0sIHsKICB4OiAwLAogIHk6IC0yCn0sIHsKICB4OiAxLAogIHk6IC0yCn0sIHsKICB4OiAtMiwKICB5OiAtMQp9LCB7CiAgeDogLTEsCiAgeTogLTEKfSwgewogIHg6IDAsCiAgeTogLTEKfSwgewogIHg6IDEsCiAgeTogLTEKfSwgewogIHg6IC0yLAogIHk6IDAKfSwgewogIHg6IC0xLAogIHk6IDAKfV0sIFt7CiAgeDogLTMsCiAgeTogLTEKfSwgewogIHg6IC0yLAogIHk6IC0xCn0sIHsKICB4OiAtMSwKICB5OiAtMQp9LCB7CiAgeDogMCwKICB5OiAtMQp9LCB7CiAgeDogMSwKICB5OiAtMQp9LCB7CiAgeDogLTQsCiAgeTogMAp9LCB7CiAgeDogLTMsCiAgeTogMAp9LCB7CiAgeDogLTIsCiAgeTogMAp9LCB7CiAgeDogLTEsCiAgeTogMAp9XV07CmNvbnN0IFJlZmluZW1lbnRUZW1wbGF0ZXMgPSBbewogIGNvZGluZzogW3sKICAgIHg6IDAsCiAgICB5OiAtMQogIH0sIHsKICAgIHg6IDEsCiAgICB5OiAtMQogIH0sIHsKICAgIHg6IC0xLAogICAgeTogMAogIH1dLAogIHJlZmVyZW5jZTogW3sKICAgIHg6IDAsCiAgICB5OiAtMQogIH0sIHsKICAgIHg6IDEsCiAgICB5OiAtMQogIH0sIHsKICAgIHg6IC0xLAogICAgeTogMAogIH0sIHsKICAgIHg6IDAsCiAgICB5OiAwCiAgfSwgewogICAgeDogMSwKICAgIHk6IDAKICB9LCB7CiAgICB4OiAtMSwKICAgIHk6IDEKICB9LCB7CiAgICB4OiAwLAogICAgeTogMQogIH0sIHsKICAgIHg6IDEsCiAgICB5OiAxCiAgfV0KfSwgewogIGNvZGluZzogW3sKICAgIHg6IC0xLAogICAgeTogLTEKICB9LCB7CiAgICB4OiAwLAogICAgeTogLTEKICB9LCB7CiAgICB4OiAxLAogICAgeTogLTEKICB9LCB7CiAgICB4OiAtMSwKICAgIHk6IDAKICB9XSwKICByZWZlcmVuY2U6IFt7CiAgICB4OiAwLAogICAgeTogLTEKICB9LCB7CiAgICB4OiAtMSwKICAgIHk6IDAKICB9LCB7CiAgICB4OiAwLAogICAgeTogMAogIH0sIHsKICAgIHg6IDEsCiAgICB5OiAwCiAgfSwgewogICAgeDogMCwKICAgIHk6IDEKICB9LCB7CiAgICB4OiAxLAogICAgeTogMQogIH1dCn1dOwpjb25zdCBSZXVzZWRDb250ZXh0cyA9IFsweDliMjUsIDB4MDc5NSwgMHgwMGU1LCAweDAxOTVdOwpjb25zdCBSZWZpbmVtZW50UmV1c2VkQ29udGV4dHMgPSBbMHgwMDIwLCAweDAwMDhdOwpmdW5jdGlvbiBkZWNvZGVCaXRtYXBUZW1wbGF0ZTAod2lkdGgsIGhlaWdodCwgZGVjb2RpbmdDb250ZXh0KSB7CiAgY29uc3QgZGVjb2RlciA9IGRlY29kaW5nQ29udGV4dC5kZWNvZGVyOwogIGNvbnN0IGNvbnRleHRzID0gZGVjb2RpbmdDb250ZXh0LmNvbnRleHRDYWNoZS5nZXRDb250ZXh0cygiR0IiKTsKICBjb25zdCBiaXRtYXAgPSBbXTsKICBsZXQgY29udGV4dExhYmVsLCBpLCBqLCBwaXhlbCwgcm93LCByb3cxLCByb3cyOwogIGNvbnN0IE9MRF9QSVhFTF9NQVNLID0gMHg3YmY3OwogIGZvciAoaSA9IDA7IGkgPCBoZWlnaHQ7IGkrKykgewogICAgcm93ID0gYml0bWFwW2ldID0gbmV3IFVpbnQ4QXJyYXkod2lkdGgpOwogICAgcm93MSA9IGkgPCAxID8gcm93IDogYml0bWFwW2kgLSAxXTsKICAgIHJvdzIgPSBpIDwgMiA/IHJvdyA6IGJpdG1hcFtpIC0gMl07CiAgICBjb250ZXh0TGFiZWwgPSByb3cyWzBdIDw8IDEzIHwgcm93MlsxXSA8PCAxMiB8IHJvdzJbMl0gPDwgMTEgfCByb3cxWzBdIDw8IDcgfCByb3cxWzFdIDw8IDYgfCByb3cxWzJdIDw8IDUgfCByb3cxWzNdIDw8IDQ7CiAgICBmb3IgKGogPSAwOyBqIDwgd2lkdGg7IGorKykgewogICAgICByb3dbal0gPSBwaXhlbCA9IGRlY29kZXIucmVhZEJpdChjb250ZXh0cywgY29udGV4dExhYmVsKTsKICAgICAgY29udGV4dExhYmVsID0gKGNvbnRleHRMYWJlbCAmIE9MRF9QSVhFTF9NQVNLKSA8PCAxIHwgKGogKyAzIDwgd2lkdGggPyByb3cyW2ogKyAzXSA8PCAxMSA6IDApIHwgKGogKyA0IDwgd2lkdGggPyByb3cxW2ogKyA0XSA8PCA0IDogMCkgfCBwaXhlbDsKICAgIH0KICB9CiAgcmV0dXJuIGJpdG1hcDsKfQpmdW5jdGlvbiBkZWNvZGVCaXRtYXAobW1yLCB3aWR0aCwgaGVpZ2h0LCB0ZW1wbGF0ZUluZGV4LCBwcmVkaWN0aW9uLCBza2lwLCBhdCwgZGVjb2RpbmdDb250ZXh0KSB7CiAgaWYgKG1tcikgewogICAgY29uc3QgaW5wdXQgPSBuZXcgUmVhZGVyKGRlY29kaW5nQ29udGV4dC5kYXRhLCBkZWNvZGluZ0NvbnRleHQuc3RhcnQsIGRlY29kaW5nQ29udGV4dC5lbmQpOwogICAgcmV0dXJuIGRlY29kZU1NUkJpdG1hcChpbnB1dCwgd2lkdGgsIGhlaWdodCwgZmFsc2UpOwogIH0KICBpZiAodGVtcGxhdGVJbmRleCA9PT0gMCAmJiAhc2tpcCAmJiAhcHJlZGljdGlvbiAmJiBhdC5sZW5ndGggPT09IDQgJiYgYXRbMF0ueCA9PT0gMyAmJiBhdFswXS55ID09PSAtMSAmJiBhdFsxXS54ID09PSAtMyAmJiBhdFsxXS55ID09PSAtMSAmJiBhdFsyXS54ID09PSAyICYmIGF0WzJdLnkgPT09IC0yICYmIGF0WzNdLnggPT09IC0yICYmIGF0WzNdLnkgPT09IC0yKSB7CiAgICByZXR1cm4gZGVjb2RlQml0bWFwVGVtcGxhdGUwKHdpZHRoLCBoZWlnaHQsIGRlY29kaW5nQ29udGV4dCk7CiAgfQogIGNvbnN0IHVzZXNraXAgPSAhIXNraXA7CiAgY29uc3QgdGVtcGxhdGUgPSBDb2RpbmdUZW1wbGF0ZXNbdGVtcGxhdGVJbmRleF0uY29uY2F0KGF0KTsKICB0ZW1wbGF0ZS5zb3J0KChhLCBiKSA9PiBhLnkgLSBiLnkgfHwgYS54IC0gYi54KTsKICBjb25zdCB0ZW1wbGF0ZUxlbmd0aCA9IHRlbXBsYXRlLmxlbmd0aDsKICBjb25zdCB0ZW1wbGF0ZVggPSBuZXcgSW50OEFycmF5KHRlbXBsYXRlTGVuZ3RoKTsKICBjb25zdCB0ZW1wbGF0ZVkgPSBuZXcgSW50OEFycmF5KHRlbXBsYXRlTGVuZ3RoKTsKICBjb25zdCBjaGFuZ2luZ1RlbXBsYXRlRW50cmllcyA9IFtdOwogIGxldCByZXVzZU1hc2sgPSAwLAogICAgbWluWCA9IDAsCiAgICBtYXhYID0gMCwKICAgIG1pblkgPSAwOwogIGxldCBjLCBrOwogIGZvciAoayA9IDA7IGsgPCB0ZW1wbGF0ZUxlbmd0aDsgaysrKSB7CiAgICB0ZW1wbGF0ZVhba10gPSB0ZW1wbGF0ZVtrXS54OwogICAgdGVtcGxhdGVZW2tdID0gdGVtcGxhdGVba10ueTsKICAgIG1pblggPSBNYXRoLm1pbihtaW5YLCB0ZW1wbGF0ZVtrXS54KTsKICAgIG1heFggPSBNYXRoLm1heChtYXhYLCB0ZW1wbGF0ZVtrXS54KTsKICAgIG1pblkgPSBNYXRoLm1pbihtaW5ZLCB0ZW1wbGF0ZVtrXS55KTsKICAgIGlmIChrIDwgdGVtcGxhdGVMZW5ndGggLSAxICYmIHRlbXBsYXRlW2tdLnkgPT09IHRlbXBsYXRlW2sgKyAxXS55ICYmIHRlbXBsYXRlW2tdLnggPT09IHRlbXBsYXRlW2sgKyAxXS54IC0gMSkgewogICAgICByZXVzZU1hc2sgfD0gMSA8PCB0ZW1wbGF0ZUxlbmd0aCAtIDEgLSBrOwogICAgfSBlbHNlIHsKICAgICAgY2hhbmdpbmdUZW1wbGF0ZUVudHJpZXMucHVzaChrKTsKICAgIH0KICB9CiAgY29uc3QgY2hhbmdpbmdFbnRyaWVzTGVuZ3RoID0gY2hhbmdpbmdUZW1wbGF0ZUVudHJpZXMubGVuZ3RoOwogIGNvbnN0IGNoYW5naW5nVGVtcGxhdGVYID0gbmV3IEludDhBcnJheShjaGFuZ2luZ0VudHJpZXNMZW5ndGgpOwogIGNvbnN0IGNoYW5naW5nVGVtcGxhdGVZID0gbmV3IEludDhBcnJheShjaGFuZ2luZ0VudHJpZXNMZW5ndGgpOwogIGNvbnN0IGNoYW5naW5nVGVtcGxhdGVCaXQgPSBuZXcgVWludDE2QXJyYXkoY2hhbmdpbmdFbnRyaWVzTGVuZ3RoKTsKICBmb3IgKGMgPSAwOyBjIDwgY2hhbmdpbmdFbnRyaWVzTGVuZ3RoOyBjKyspIHsKICAgIGsgPSBjaGFuZ2luZ1RlbXBsYXRlRW50cmllc1tjXTsKICAgIGNoYW5naW5nVGVtcGxhdGVYW2NdID0gdGVtcGxhdGVba10ueDsKICAgIGNoYW5naW5nVGVtcGxhdGVZW2NdID0gdGVtcGxhdGVba10ueTsKICAgIGNoYW5naW5nVGVtcGxhdGVCaXRbY10gPSAxIDw8IHRlbXBsYXRlTGVuZ3RoIC0gMSAtIGs7CiAgfQogIGNvbnN0IHNiYl9sZWZ0ID0gLW1pblg7CiAgY29uc3Qgc2JiX3RvcCA9IC1taW5ZOwogIGNvbnN0IHNiYl9yaWdodCA9IHdpZHRoIC0gbWF4WDsKICBjb25zdCBwc2V1ZG9QaXhlbENvbnRleHQgPSBSZXVzZWRDb250ZXh0c1t0ZW1wbGF0ZUluZGV4XTsKICBsZXQgcm93ID0gbmV3IFVpbnQ4QXJyYXkod2lkdGgpOwogIGNvbnN0IGJpdG1hcCA9IFtdOwogIGNvbnN0IGRlY29kZXIgPSBkZWNvZGluZ0NvbnRleHQuZGVjb2RlcjsKICBjb25zdCBjb250ZXh0cyA9IGRlY29kaW5nQ29udGV4dC5jb250ZXh0Q2FjaGUuZ2V0Q29udGV4dHMoIkdCIik7CiAgbGV0IGx0cCA9IDAsCiAgICBqLAogICAgaTAsCiAgICBqMCwKICAgIGNvbnRleHRMYWJlbCA9IDAsCiAgICBiaXQsCiAgICBzaGlmdDsKICBmb3IgKGxldCBpID0gMDsgaSA8IGhlaWdodDsgaSsrKSB7CiAgICBpZiAocHJlZGljdGlvbikgewogICAgICBjb25zdCBzbHRwID0gZGVjb2Rlci5yZWFkQml0KGNvbnRleHRzLCBwc2V1ZG9QaXhlbENvbnRleHQpOwogICAgICBsdHAgXj0gc2x0cDsKICAgICAgaWYgKGx0cCkgewogICAgICAgIGJpdG1hcC5wdXNoKHJvdyk7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgIH0KICAgIHJvdyA9IG5ldyBVaW50OEFycmF5KHJvdyk7CiAgICBiaXRtYXAucHVzaChyb3cpOwogICAgZm9yIChqID0gMDsgaiA8IHdpZHRoOyBqKyspIHsKICAgICAgaWYgKHVzZXNraXAgJiYgc2tpcFtpXVtqXSkgewogICAgICAgIHJvd1tqXSA9IDA7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgaWYgKGogPj0gc2JiX2xlZnQgJiYgaiA8IHNiYl9yaWdodCAmJiBpID49IHNiYl90b3ApIHsKICAgICAgICBjb250ZXh0TGFiZWwgPSBjb250ZXh0TGFiZWwgPDwgMSAmIHJldXNlTWFzazsKICAgICAgICBmb3IgKGsgPSAwOyBrIDwgY2hhbmdpbmdFbnRyaWVzTGVuZ3RoOyBrKyspIHsKICAgICAgICAgIGkwID0gaSArIGNoYW5naW5nVGVtcGxhdGVZW2tdOwogICAgICAgICAgajAgPSBqICsgY2hhbmdpbmdUZW1wbGF0ZVhba107CiAgICAgICAgICBiaXQgPSBiaXRtYXBbaTBdW2owXTsKICAgICAgICAgIGlmIChiaXQpIHsKICAgICAgICAgICAgYml0ID0gY2hhbmdpbmdUZW1wbGF0ZUJpdFtrXTsKICAgICAgICAgICAgY29udGV4dExhYmVsIHw9IGJpdDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY29udGV4dExhYmVsID0gMDsKICAgICAgICBzaGlmdCA9IHRlbXBsYXRlTGVuZ3RoIC0gMTsKICAgICAgICBmb3IgKGsgPSAwOyBrIDwgdGVtcGxhdGVMZW5ndGg7IGsrKywgc2hpZnQtLSkgewogICAgICAgICAgajAgPSBqICsgdGVtcGxhdGVYW2tdOwogICAgICAgICAgaWYgKGowID49IDAgJiYgajAgPCB3aWR0aCkgewogICAgICAgICAgICBpMCA9IGkgKyB0ZW1wbGF0ZVlba107CiAgICAgICAgICAgIGlmIChpMCA+PSAwKSB7CiAgICAgICAgICAgICAgYml0ID0gYml0bWFwW2kwXVtqMF07CiAgICAgICAgICAgICAgaWYgKGJpdCkgewogICAgICAgICAgICAgICAgY29udGV4dExhYmVsIHw9IGJpdCA8PCBzaGlmdDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgY29uc3QgcGl4ZWwgPSBkZWNvZGVyLnJlYWRCaXQoY29udGV4dHMsIGNvbnRleHRMYWJlbCk7CiAgICAgIHJvd1tqXSA9IHBpeGVsOwogICAgfQogIH0KICByZXR1cm4gYml0bWFwOwp9CmZ1bmN0aW9uIGRlY29kZVJlZmluZW1lbnQod2lkdGgsIGhlaWdodCwgdGVtcGxhdGVJbmRleCwgcmVmZXJlbmNlQml0bWFwLCBvZmZzZXRYLCBvZmZzZXRZLCBwcmVkaWN0aW9uLCBhdCwgZGVjb2RpbmdDb250ZXh0KSB7CiAgbGV0IGNvZGluZ1RlbXBsYXRlID0gUmVmaW5lbWVudFRlbXBsYXRlc1t0ZW1wbGF0ZUluZGV4XS5jb2Rpbmc7CiAgaWYgKHRlbXBsYXRlSW5kZXggPT09IDApIHsKICAgIGNvZGluZ1RlbXBsYXRlID0gY29kaW5nVGVtcGxhdGUuY29uY2F0KFthdFswXV0pOwogIH0KICBjb25zdCBjb2RpbmdUZW1wbGF0ZUxlbmd0aCA9IGNvZGluZ1RlbXBsYXRlLmxlbmd0aDsKICBjb25zdCBjb2RpbmdUZW1wbGF0ZVggPSBuZXcgSW50MzJBcnJheShjb2RpbmdUZW1wbGF0ZUxlbmd0aCk7CiAgY29uc3QgY29kaW5nVGVtcGxhdGVZID0gbmV3IEludDMyQXJyYXkoY29kaW5nVGVtcGxhdGVMZW5ndGgpOwogIGxldCBrOwogIGZvciAoayA9IDA7IGsgPCBjb2RpbmdUZW1wbGF0ZUxlbmd0aDsgaysrKSB7CiAgICBjb2RpbmdUZW1wbGF0ZVhba10gPSBjb2RpbmdUZW1wbGF0ZVtrXS54OwogICAgY29kaW5nVGVtcGxhdGVZW2tdID0gY29kaW5nVGVtcGxhdGVba10ueTsKICB9CiAgbGV0IHJlZmVyZW5jZVRlbXBsYXRlID0gUmVmaW5lbWVudFRlbXBsYXRlc1t0ZW1wbGF0ZUluZGV4XS5yZWZlcmVuY2U7CiAgaWYgKHRlbXBsYXRlSW5kZXggPT09IDApIHsKICAgIHJlZmVyZW5jZVRlbXBsYXRlID0gcmVmZXJlbmNlVGVtcGxhdGUuY29uY2F0KFthdFsxXV0pOwogIH0KICBjb25zdCByZWZlcmVuY2VUZW1wbGF0ZUxlbmd0aCA9IHJlZmVyZW5jZVRlbXBsYXRlLmxlbmd0aDsKICBjb25zdCByZWZlcmVuY2VUZW1wbGF0ZVggPSBuZXcgSW50MzJBcnJheShyZWZlcmVuY2VUZW1wbGF0ZUxlbmd0aCk7CiAgY29uc3QgcmVmZXJlbmNlVGVtcGxhdGVZID0gbmV3IEludDMyQXJyYXkocmVmZXJlbmNlVGVtcGxhdGVMZW5ndGgpOwogIGZvciAoayA9IDA7IGsgPCByZWZlcmVuY2VUZW1wbGF0ZUxlbmd0aDsgaysrKSB7CiAgICByZWZlcmVuY2VUZW1wbGF0ZVhba10gPSByZWZlcmVuY2VUZW1wbGF0ZVtrXS54OwogICAgcmVmZXJlbmNlVGVtcGxhdGVZW2tdID0gcmVmZXJlbmNlVGVtcGxhdGVba10ueTsKICB9CiAgY29uc3QgcmVmZXJlbmNlV2lkdGggPSByZWZlcmVuY2VCaXRtYXBbMF0ubGVuZ3RoOwogIGNvbnN0IHJlZmVyZW5jZUhlaWdodCA9IHJlZmVyZW5jZUJpdG1hcC5sZW5ndGg7CiAgY29uc3QgcHNldWRvUGl4ZWxDb250ZXh0ID0gUmVmaW5lbWVudFJldXNlZENvbnRleHRzW3RlbXBsYXRlSW5kZXhdOwogIGNvbnN0IGJpdG1hcCA9IFtdOwogIGNvbnN0IGRlY29kZXIgPSBkZWNvZGluZ0NvbnRleHQuZGVjb2RlcjsKICBjb25zdCBjb250ZXh0cyA9IGRlY29kaW5nQ29udGV4dC5jb250ZXh0Q2FjaGUuZ2V0Q29udGV4dHMoIkdSIik7CiAgbGV0IGx0cCA9IDA7CiAgZm9yIChsZXQgaSA9IDA7IGkgPCBoZWlnaHQ7IGkrKykgewogICAgaWYgKHByZWRpY3Rpb24pIHsKICAgICAgY29uc3Qgc2x0cCA9IGRlY29kZXIucmVhZEJpdChjb250ZXh0cywgcHNldWRvUGl4ZWxDb250ZXh0KTsKICAgICAgbHRwIF49IHNsdHA7CiAgICAgIGlmIChsdHApIHsKICAgICAgICB0aHJvdyBuZXcgSmJpZzJFcnJvcigicHJlZGljdGlvbiBpcyBub3Qgc3VwcG9ydGVkIik7CiAgICAgIH0KICAgIH0KICAgIGNvbnN0IHJvdyA9IG5ldyBVaW50OEFycmF5KHdpZHRoKTsKICAgIGJpdG1hcC5wdXNoKHJvdyk7CiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHdpZHRoOyBqKyspIHsKICAgICAgbGV0IGkwLCBqMDsKICAgICAgbGV0IGNvbnRleHRMYWJlbCA9IDA7CiAgICAgIGZvciAoayA9IDA7IGsgPCBjb2RpbmdUZW1wbGF0ZUxlbmd0aDsgaysrKSB7CiAgICAgICAgaTAgPSBpICsgY29kaW5nVGVtcGxhdGVZW2tdOwogICAgICAgIGowID0gaiArIGNvZGluZ1RlbXBsYXRlWFtrXTsKICAgICAgICBpZiAoaTAgPCAwIHx8IGowIDwgMCB8fCBqMCA+PSB3aWR0aCkgewogICAgICAgICAgY29udGV4dExhYmVsIDw8PSAxOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjb250ZXh0TGFiZWwgPSBjb250ZXh0TGFiZWwgPDwgMSB8IGJpdG1hcFtpMF1bajBdOwogICAgICAgIH0KICAgICAgfQogICAgICBmb3IgKGsgPSAwOyBrIDwgcmVmZXJlbmNlVGVtcGxhdGVMZW5ndGg7IGsrKykgewogICAgICAgIGkwID0gaSArIHJlZmVyZW5jZVRlbXBsYXRlWVtrXSAtIG9mZnNldFk7CiAgICAgICAgajAgPSBqICsgcmVmZXJlbmNlVGVtcGxhdGVYW2tdIC0gb2Zmc2V0WDsKICAgICAgICBpZiAoaTAgPCAwIHx8IGkwID49IHJlZmVyZW5jZUhlaWdodCB8fCBqMCA8IDAgfHwgajAgPj0gcmVmZXJlbmNlV2lkdGgpIHsKICAgICAgICAgIGNvbnRleHRMYWJlbCA8PD0gMTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY29udGV4dExhYmVsID0gY29udGV4dExhYmVsIDw8IDEgfCByZWZlcmVuY2VCaXRtYXBbaTBdW2owXTsKICAgICAgICB9CiAgICAgIH0KICAgICAgY29uc3QgcGl4ZWwgPSBkZWNvZGVyLnJlYWRCaXQoY29udGV4dHMsIGNvbnRleHRMYWJlbCk7CiAgICAgIHJvd1tqXSA9IHBpeGVsOwogICAgfQogIH0KICByZXR1cm4gYml0bWFwOwp9CmZ1bmN0aW9uIGRlY29kZVN5bWJvbERpY3Rpb25hcnkoaHVmZm1hbiwgcmVmaW5lbWVudCwgc3ltYm9scywgbnVtYmVyT2ZOZXdTeW1ib2xzLCBudW1iZXJPZkV4cG9ydGVkU3ltYm9scywgaHVmZm1hblRhYmxlcywgdGVtcGxhdGVJbmRleCwgYXQsIHJlZmluZW1lbnRUZW1wbGF0ZUluZGV4LCByZWZpbmVtZW50QXQsIGRlY29kaW5nQ29udGV4dCwgaHVmZm1hbklucHV0KSB7CiAgaWYgKGh1ZmZtYW4gJiYgcmVmaW5lbWVudCkgewogICAgdGhyb3cgbmV3IEpiaWcyRXJyb3IoInN5bWJvbCByZWZpbmVtZW50IHdpdGggSHVmZm1hbiBpcyBub3Qgc3VwcG9ydGVkIik7CiAgfQogIGNvbnN0IG5ld1N5bWJvbHMgPSBbXTsKICBsZXQgY3VycmVudEhlaWdodCA9IDA7CiAgbGV0IHN5bWJvbENvZGVMZW5ndGggPSBsb2cyKHN5bWJvbHMubGVuZ3RoICsgbnVtYmVyT2ZOZXdTeW1ib2xzKTsKICBjb25zdCBkZWNvZGVyID0gZGVjb2RpbmdDb250ZXh0LmRlY29kZXI7CiAgY29uc3QgY29udGV4dENhY2hlID0gZGVjb2RpbmdDb250ZXh0LmNvbnRleHRDYWNoZTsKICBsZXQgdGFibGVCMSwgc3ltYm9sV2lkdGhzOwogIGlmIChodWZmbWFuKSB7CiAgICB0YWJsZUIxID0gZ2V0U3RhbmRhcmRUYWJsZSgxKTsKICAgIHN5bWJvbFdpZHRocyA9IFtdOwogICAgc3ltYm9sQ29kZUxlbmd0aCA9IE1hdGgubWF4KHN5bWJvbENvZGVMZW5ndGgsIDEpOwogIH0KICB3aGlsZSAobmV3U3ltYm9scy5sZW5ndGggPCBudW1iZXJPZk5ld1N5bWJvbHMpIHsKICAgIGNvbnN0IGRlbHRhSGVpZ2h0ID0gaHVmZm1hbiA/IGh1ZmZtYW5UYWJsZXMudGFibGVEZWx0YUhlaWdodC5kZWNvZGUoaHVmZm1hbklucHV0KSA6IGRlY29kZUludGVnZXIoY29udGV4dENhY2hlLCAiSUFESCIsIGRlY29kZXIpOwogICAgY3VycmVudEhlaWdodCArPSBkZWx0YUhlaWdodDsKICAgIGxldCBjdXJyZW50V2lkdGggPSAwLAogICAgICB0b3RhbFdpZHRoID0gMDsKICAgIGNvbnN0IGZpcnN0U3ltYm9sID0gaHVmZm1hbiA/IHN5bWJvbFdpZHRocy5sZW5ndGggOiAwOwogICAgd2hpbGUgKHRydWUpIHsKICAgICAgY29uc3QgZGVsdGFXaWR0aCA9IGh1ZmZtYW4gPyBodWZmbWFuVGFibGVzLnRhYmxlRGVsdGFXaWR0aC5kZWNvZGUoaHVmZm1hbklucHV0KSA6IGRlY29kZUludGVnZXIoY29udGV4dENhY2hlLCAiSUFEVyIsIGRlY29kZXIpOwogICAgICBpZiAoZGVsdGFXaWR0aCA9PT0gbnVsbCkgewogICAgICAgIGJyZWFrOwogICAgICB9CiAgICAgIGN1cnJlbnRXaWR0aCArPSBkZWx0YVdpZHRoOwogICAgICB0b3RhbFdpZHRoICs9IGN1cnJlbnRXaWR0aDsKICAgICAgbGV0IGJpdG1hcDsKICAgICAgaWYgKHJlZmluZW1lbnQpIHsKICAgICAgICBjb25zdCBudW1iZXJPZkluc3RhbmNlcyA9IGRlY29kZUludGVnZXIoY29udGV4dENhY2hlLCAiSUFBSSIsIGRlY29kZXIpOwogICAgICAgIGlmIChudW1iZXJPZkluc3RhbmNlcyA+IDEpIHsKICAgICAgICAgIGJpdG1hcCA9IGRlY29kZVRleHRSZWdpb24oaHVmZm1hbiwgcmVmaW5lbWVudCwgY3VycmVudFdpZHRoLCBjdXJyZW50SGVpZ2h0LCAwLCBudW1iZXJPZkluc3RhbmNlcywgMSwgc3ltYm9scy5jb25jYXQobmV3U3ltYm9scyksIHN5bWJvbENvZGVMZW5ndGgsIDAsIDAsIDEsIDAsIGh1ZmZtYW5UYWJsZXMsIHJlZmluZW1lbnRUZW1wbGF0ZUluZGV4LCByZWZpbmVtZW50QXQsIGRlY29kaW5nQ29udGV4dCwgMCwgaHVmZm1hbklucHV0KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY29uc3Qgc3ltYm9sSWQgPSBkZWNvZGVJQUlEKGNvbnRleHRDYWNoZSwgZGVjb2Rlciwgc3ltYm9sQ29kZUxlbmd0aCk7CiAgICAgICAgICBjb25zdCByZHggPSBkZWNvZGVJbnRlZ2VyKGNvbnRleHRDYWNoZSwgIklBUkRYIiwgZGVjb2Rlcik7CiAgICAgICAgICBjb25zdCByZHkgPSBkZWNvZGVJbnRlZ2VyKGNvbnRleHRDYWNoZSwgIklBUkRZIiwgZGVjb2Rlcik7CiAgICAgICAgICBjb25zdCBzeW1ib2wgPSBzeW1ib2xJZCA8IHN5bWJvbHMubGVuZ3RoID8gc3ltYm9sc1tzeW1ib2xJZF0gOiBuZXdTeW1ib2xzW3N5bWJvbElkIC0gc3ltYm9scy5sZW5ndGhdOwogICAgICAgICAgYml0bWFwID0gZGVjb2RlUmVmaW5lbWVudChjdXJyZW50V2lkdGgsIGN1cnJlbnRIZWlnaHQsIHJlZmluZW1lbnRUZW1wbGF0ZUluZGV4LCBzeW1ib2wsIHJkeCwgcmR5LCBmYWxzZSwgcmVmaW5lbWVudEF0LCBkZWNvZGluZ0NvbnRleHQpOwogICAgICAgIH0KICAgICAgICBuZXdTeW1ib2xzLnB1c2goYml0bWFwKTsKICAgICAgfSBlbHNlIGlmIChodWZmbWFuKSB7CiAgICAgICAgc3ltYm9sV2lkdGhzLnB1c2goY3VycmVudFdpZHRoKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBiaXRtYXAgPSBkZWNvZGVCaXRtYXAoZmFsc2UsIGN1cnJlbnRXaWR0aCwgY3VycmVudEhlaWdodCwgdGVtcGxhdGVJbmRleCwgZmFsc2UsIG51bGwsIGF0LCBkZWNvZGluZ0NvbnRleHQpOwogICAgICAgIG5ld1N5bWJvbHMucHVzaChiaXRtYXApOwogICAgICB9CiAgICB9CiAgICBpZiAoaHVmZm1hbiAmJiAhcmVmaW5lbWVudCkgewogICAgICBjb25zdCBiaXRtYXBTaXplID0gaHVmZm1hblRhYmxlcy50YWJsZUJpdG1hcFNpemUuZGVjb2RlKGh1ZmZtYW5JbnB1dCk7CiAgICAgIGh1ZmZtYW5JbnB1dC5ieXRlQWxpZ24oKTsKICAgICAgbGV0IGNvbGxlY3RpdmVCaXRtYXA7CiAgICAgIGlmIChiaXRtYXBTaXplID09PSAwKSB7CiAgICAgICAgY29sbGVjdGl2ZUJpdG1hcCA9IHJlYWRVbmNvbXByZXNzZWRCaXRtYXAoaHVmZm1hbklucHV0LCB0b3RhbFdpZHRoLCBjdXJyZW50SGVpZ2h0KTsKICAgICAgfSBlbHNlIHsKICAgICAgICBjb25zdCBvcmlnaW5hbEVuZCA9IGh1ZmZtYW5JbnB1dC5lbmQ7CiAgICAgICAgY29uc3QgYml0bWFwRW5kID0gaHVmZm1hbklucHV0LnBvc2l0aW9uICsgYml0bWFwU2l6ZTsKICAgICAgICBodWZmbWFuSW5wdXQuZW5kID0gYml0bWFwRW5kOwogICAgICAgIGNvbGxlY3RpdmVCaXRtYXAgPSBkZWNvZGVNTVJCaXRtYXAoaHVmZm1hbklucHV0LCB0b3RhbFdpZHRoLCBjdXJyZW50SGVpZ2h0LCBmYWxzZSk7CiAgICAgICAgaHVmZm1hbklucHV0LmVuZCA9IG9yaWdpbmFsRW5kOwogICAgICAgIGh1ZmZtYW5JbnB1dC5wb3NpdGlvbiA9IGJpdG1hcEVuZDsKICAgICAgfQogICAgICBjb25zdCBudW1iZXJPZlN5bWJvbHNEZWNvZGVkID0gc3ltYm9sV2lkdGhzLmxlbmd0aDsKICAgICAgaWYgKGZpcnN0U3ltYm9sID09PSBudW1iZXJPZlN5bWJvbHNEZWNvZGVkIC0gMSkgewogICAgICAgIG5ld1N5bWJvbHMucHVzaChjb2xsZWN0aXZlQml0bWFwKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBsZXQgaSwKICAgICAgICAgIHksCiAgICAgICAgICB4TWluID0gMCwKICAgICAgICAgIHhNYXgsCiAgICAgICAgICBiaXRtYXBXaWR0aCwKICAgICAgICAgIHN5bWJvbEJpdG1hcDsKICAgICAgICBmb3IgKGkgPSBmaXJzdFN5bWJvbDsgaSA8IG51bWJlck9mU3ltYm9sc0RlY29kZWQ7IGkrKykgewogICAgICAgICAgYml0bWFwV2lkdGggPSBzeW1ib2xXaWR0aHNbaV07CiAgICAgICAgICB4TWF4ID0geE1pbiArIGJpdG1hcFdpZHRoOwogICAgICAgICAgc3ltYm9sQml0bWFwID0gW107CiAgICAgICAgICBmb3IgKHkgPSAwOyB5IDwgY3VycmVudEhlaWdodDsgeSsrKSB7CiAgICAgICAgICAgIHN5bWJvbEJpdG1hcC5wdXNoKGNvbGxlY3RpdmVCaXRtYXBbeV0uc3ViYXJyYXkoeE1pbiwgeE1heCkpOwogICAgICAgICAgfQogICAgICAgICAgbmV3U3ltYm9scy5wdXNoKHN5bWJvbEJpdG1hcCk7CiAgICAgICAgICB4TWluID0geE1heDsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9CiAgY29uc3QgZXhwb3J0ZWRTeW1ib2xzID0gW10sCiAgICBmbGFncyA9IFtdOwogIGxldCBjdXJyZW50RmxhZyA9IGZhbHNlLAogICAgaSwKICAgIGlpOwogIGNvbnN0IHRvdGFsU3ltYm9sc0xlbmd0aCA9IHN5bWJvbHMubGVuZ3RoICsgbnVtYmVyT2ZOZXdTeW1ib2xzOwogIHdoaWxlIChmbGFncy5sZW5ndGggPCB0b3RhbFN5bWJvbHNMZW5ndGgpIHsKICAgIGxldCBydW5MZW5ndGggPSBodWZmbWFuID8gdGFibGVCMS5kZWNvZGUoaHVmZm1hbklucHV0KSA6IGRlY29kZUludGVnZXIoY29udGV4dENhY2hlLCAiSUFFWCIsIGRlY29kZXIpOwogICAgd2hpbGUgKHJ1bkxlbmd0aC0tKSB7CiAgICAgIGZsYWdzLnB1c2goY3VycmVudEZsYWcpOwogICAgfQogICAgY3VycmVudEZsYWcgPSAhY3VycmVudEZsYWc7CiAgfQogIGZvciAoaSA9IDAsIGlpID0gc3ltYm9scy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICBpZiAoZmxhZ3NbaV0pIHsKICAgICAgZXhwb3J0ZWRTeW1ib2xzLnB1c2goc3ltYm9sc1tpXSk7CiAgICB9CiAgfQogIGZvciAobGV0IGogPSAwOyBqIDwgbnVtYmVyT2ZOZXdTeW1ib2xzOyBpKyssIGorKykgewogICAgaWYgKGZsYWdzW2ldKSB7CiAgICAgIGV4cG9ydGVkU3ltYm9scy5wdXNoKG5ld1N5bWJvbHNbal0pOwogICAgfQogIH0KICByZXR1cm4gZXhwb3J0ZWRTeW1ib2xzOwp9CmZ1bmN0aW9uIGRlY29kZVRleHRSZWdpb24oaHVmZm1hbiwgcmVmaW5lbWVudCwgd2lkdGgsIGhlaWdodCwgZGVmYXVsdFBpeGVsVmFsdWUsIG51bWJlck9mU3ltYm9sSW5zdGFuY2VzLCBzdHJpcFNpemUsIGlucHV0U3ltYm9scywgc3ltYm9sQ29kZUxlbmd0aCwgdHJhbnNwb3NlZCwgZHNPZmZzZXQsIHJlZmVyZW5jZUNvcm5lciwgY29tYmluYXRpb25PcGVyYXRvciwgaHVmZm1hblRhYmxlcywgcmVmaW5lbWVudFRlbXBsYXRlSW5kZXgsIHJlZmluZW1lbnRBdCwgZGVjb2RpbmdDb250ZXh0LCBsb2dTdHJpcFNpemUsIGh1ZmZtYW5JbnB1dCkgewogIGlmIChodWZmbWFuICYmIHJlZmluZW1lbnQpIHsKICAgIHRocm93IG5ldyBKYmlnMkVycm9yKCJyZWZpbmVtZW50IHdpdGggSHVmZm1hbiBpcyBub3Qgc3VwcG9ydGVkIik7CiAgfQogIGNvbnN0IGJpdG1hcCA9IFtdOwogIGxldCBpLCByb3c7CiAgZm9yIChpID0gMDsgaSA8IGhlaWdodDsgaSsrKSB7CiAgICByb3cgPSBuZXcgVWludDhBcnJheSh3aWR0aCk7CiAgICBpZiAoZGVmYXVsdFBpeGVsVmFsdWUpIHsKICAgICAgcm93LmZpbGwoZGVmYXVsdFBpeGVsVmFsdWUpOwogICAgfQogICAgYml0bWFwLnB1c2gocm93KTsKICB9CiAgY29uc3QgZGVjb2RlciA9IGRlY29kaW5nQ29udGV4dC5kZWNvZGVyOwogIGNvbnN0IGNvbnRleHRDYWNoZSA9IGRlY29kaW5nQ29udGV4dC5jb250ZXh0Q2FjaGU7CiAgbGV0IHN0cmlwVCA9IGh1ZmZtYW4gPyAtaHVmZm1hblRhYmxlcy50YWJsZURlbHRhVC5kZWNvZGUoaHVmZm1hbklucHV0KSA6IC1kZWNvZGVJbnRlZ2VyKGNvbnRleHRDYWNoZSwgIklBRFQiLCBkZWNvZGVyKTsKICBsZXQgZmlyc3RTID0gMDsKICBpID0gMDsKICB3aGlsZSAoaSA8IG51bWJlck9mU3ltYm9sSW5zdGFuY2VzKSB7CiAgICBjb25zdCBkZWx0YVQgPSBodWZmbWFuID8gaHVmZm1hblRhYmxlcy50YWJsZURlbHRhVC5kZWNvZGUoaHVmZm1hbklucHV0KSA6IGRlY29kZUludGVnZXIoY29udGV4dENhY2hlLCAiSUFEVCIsIGRlY29kZXIpOwogICAgc3RyaXBUICs9IGRlbHRhVDsKICAgIGNvbnN0IGRlbHRhRmlyc3RTID0gaHVmZm1hbiA/IGh1ZmZtYW5UYWJsZXMudGFibGVGaXJzdFMuZGVjb2RlKGh1ZmZtYW5JbnB1dCkgOiBkZWNvZGVJbnRlZ2VyKGNvbnRleHRDYWNoZSwgIklBRlMiLCBkZWNvZGVyKTsKICAgIGZpcnN0UyArPSBkZWx0YUZpcnN0UzsKICAgIGxldCBjdXJyZW50UyA9IGZpcnN0UzsKICAgIGRvIHsKICAgICAgbGV0IGN1cnJlbnRUID0gMDsKICAgICAgaWYgKHN0cmlwU2l6ZSA+IDEpIHsKICAgICAgICBjdXJyZW50VCA9IGh1ZmZtYW4gPyBodWZmbWFuSW5wdXQucmVhZEJpdHMobG9nU3RyaXBTaXplKSA6IGRlY29kZUludGVnZXIoY29udGV4dENhY2hlLCAiSUFJVCIsIGRlY29kZXIpOwogICAgICB9CiAgICAgIGNvbnN0IHQgPSBzdHJpcFNpemUgKiBzdHJpcFQgKyBjdXJyZW50VDsKICAgICAgY29uc3Qgc3ltYm9sSWQgPSBodWZmbWFuID8gaHVmZm1hblRhYmxlcy5zeW1ib2xJRFRhYmxlLmRlY29kZShodWZmbWFuSW5wdXQpIDogZGVjb2RlSUFJRChjb250ZXh0Q2FjaGUsIGRlY29kZXIsIHN5bWJvbENvZGVMZW5ndGgpOwogICAgICBjb25zdCBhcHBseVJlZmluZW1lbnQgPSByZWZpbmVtZW50ICYmIChodWZmbWFuID8gaHVmZm1hbklucHV0LnJlYWRCaXQoKSA6IGRlY29kZUludGVnZXIoY29udGV4dENhY2hlLCAiSUFSSSIsIGRlY29kZXIpKTsKICAgICAgbGV0IHN5bWJvbEJpdG1hcCA9IGlucHV0U3ltYm9sc1tzeW1ib2xJZF07CiAgICAgIGxldCBzeW1ib2xXaWR0aCA9IHN5bWJvbEJpdG1hcFswXS5sZW5ndGg7CiAgICAgIGxldCBzeW1ib2xIZWlnaHQgPSBzeW1ib2xCaXRtYXAubGVuZ3RoOwogICAgICBpZiAoYXBwbHlSZWZpbmVtZW50KSB7CiAgICAgICAgY29uc3QgcmR3ID0gZGVjb2RlSW50ZWdlcihjb250ZXh0Q2FjaGUsICJJQVJEVyIsIGRlY29kZXIpOwogICAgICAgIGNvbnN0IHJkaCA9IGRlY29kZUludGVnZXIoY29udGV4dENhY2hlLCAiSUFSREgiLCBkZWNvZGVyKTsKICAgICAgICBjb25zdCByZHggPSBkZWNvZGVJbnRlZ2VyKGNvbnRleHRDYWNoZSwgIklBUkRYIiwgZGVjb2Rlcik7CiAgICAgICAgY29uc3QgcmR5ID0gZGVjb2RlSW50ZWdlcihjb250ZXh0Q2FjaGUsICJJQVJEWSIsIGRlY29kZXIpOwogICAgICAgIHN5bWJvbFdpZHRoICs9IHJkdzsKICAgICAgICBzeW1ib2xIZWlnaHQgKz0gcmRoOwogICAgICAgIHN5bWJvbEJpdG1hcCA9IGRlY29kZVJlZmluZW1lbnQoc3ltYm9sV2lkdGgsIHN5bWJvbEhlaWdodCwgcmVmaW5lbWVudFRlbXBsYXRlSW5kZXgsIHN5bWJvbEJpdG1hcCwgKHJkdyA+PiAxKSArIHJkeCwgKHJkaCA+PiAxKSArIHJkeSwgZmFsc2UsIHJlZmluZW1lbnRBdCwgZGVjb2RpbmdDb250ZXh0KTsKICAgICAgfQogICAgICBsZXQgaW5jcmVtZW50ID0gMDsKICAgICAgaWYgKCF0cmFuc3Bvc2VkKSB7CiAgICAgICAgaWYgKHJlZmVyZW5jZUNvcm5lciA+IDEpIHsKICAgICAgICAgIGN1cnJlbnRTICs9IHN5bWJvbFdpZHRoIC0gMTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgaW5jcmVtZW50ID0gc3ltYm9sV2lkdGggLSAxOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmICghKHJlZmVyZW5jZUNvcm5lciAmIDEpKSB7CiAgICAgICAgY3VycmVudFMgKz0gc3ltYm9sSGVpZ2h0IC0gMTsKICAgICAgfSBlbHNlIHsKICAgICAgICBpbmNyZW1lbnQgPSBzeW1ib2xIZWlnaHQgLSAxOwogICAgICB9CiAgICAgIGNvbnN0IG9mZnNldFQgPSB0IC0gKHJlZmVyZW5jZUNvcm5lciAmIDEgPyAwIDogc3ltYm9sSGVpZ2h0IC0gMSk7CiAgICAgIGNvbnN0IG9mZnNldFMgPSBjdXJyZW50UyAtIChyZWZlcmVuY2VDb3JuZXIgJiAyID8gc3ltYm9sV2lkdGggLSAxIDogMCk7CiAgICAgIGxldCBzMiwgdDIsIHN5bWJvbFJvdzsKICAgICAgaWYgKHRyYW5zcG9zZWQpIHsKICAgICAgICBmb3IgKHMyID0gMDsgczIgPCBzeW1ib2xIZWlnaHQ7IHMyKyspIHsKICAgICAgICAgIHJvdyA9IGJpdG1hcFtvZmZzZXRTICsgczJdOwogICAgICAgICAgaWYgKCFyb3cpIHsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICBzeW1ib2xSb3cgPSBzeW1ib2xCaXRtYXBbczJdOwogICAgICAgICAgY29uc3QgbWF4V2lkdGggPSBNYXRoLm1pbih3aWR0aCAtIG9mZnNldFQsIHN5bWJvbFdpZHRoKTsKICAgICAgICAgIHN3aXRjaCAoY29tYmluYXRpb25PcGVyYXRvcikgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgZm9yICh0MiA9IDA7IHQyIDwgbWF4V2lkdGg7IHQyKyspIHsKICAgICAgICAgICAgICAgIHJvd1tvZmZzZXRUICsgdDJdIHw9IHN5bWJvbFJvd1t0Ml07CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgZm9yICh0MiA9IDA7IHQyIDwgbWF4V2lkdGg7IHQyKyspIHsKICAgICAgICAgICAgICAgIHJvd1tvZmZzZXRUICsgdDJdIF49IHN5bWJvbFJvd1t0Ml07CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgIHRocm93IG5ldyBKYmlnMkVycm9yKGBvcGVyYXRvciAke2NvbWJpbmF0aW9uT3BlcmF0b3J9IGlzIG5vdCBzdXBwb3J0ZWRgKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZm9yICh0MiA9IDA7IHQyIDwgc3ltYm9sSGVpZ2h0OyB0MisrKSB7CiAgICAgICAgICByb3cgPSBiaXRtYXBbb2Zmc2V0VCArIHQyXTsKICAgICAgICAgIGlmICghcm93KSB7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgICAgc3ltYm9sUm93ID0gc3ltYm9sQml0bWFwW3QyXTsKICAgICAgICAgIHN3aXRjaCAoY29tYmluYXRpb25PcGVyYXRvcikgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgZm9yIChzMiA9IDA7IHMyIDwgc3ltYm9sV2lkdGg7IHMyKyspIHsKICAgICAgICAgICAgICAgIHJvd1tvZmZzZXRTICsgczJdIHw9IHN5bWJvbFJvd1tzMl07CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgZm9yIChzMiA9IDA7IHMyIDwgc3ltYm9sV2lkdGg7IHMyKyspIHsKICAgICAgICAgICAgICAgIHJvd1tvZmZzZXRTICsgczJdIF49IHN5bWJvbFJvd1tzMl07CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgIHRocm93IG5ldyBKYmlnMkVycm9yKGBvcGVyYXRvciAke2NvbWJpbmF0aW9uT3BlcmF0b3J9IGlzIG5vdCBzdXBwb3J0ZWRgKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgaSsrOwogICAgICBjb25zdCBkZWx0YVMgPSBodWZmbWFuID8gaHVmZm1hblRhYmxlcy50YWJsZURlbHRhUy5kZWNvZGUoaHVmZm1hbklucHV0KSA6IGRlY29kZUludGVnZXIoY29udGV4dENhY2hlLCAiSUFEUyIsIGRlY29kZXIpOwogICAgICBpZiAoZGVsdGFTID09PSBudWxsKSB7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgICAgY3VycmVudFMgKz0gaW5jcmVtZW50ICsgZGVsdGFTICsgZHNPZmZzZXQ7CiAgICB9IHdoaWxlICh0cnVlKTsKICB9CiAgcmV0dXJuIGJpdG1hcDsKfQpmdW5jdGlvbiBkZWNvZGVQYXR0ZXJuRGljdGlvbmFyeShtbXIsIHBhdHRlcm5XaWR0aCwgcGF0dGVybkhlaWdodCwgbWF4UGF0dGVybkluZGV4LCB0ZW1wbGF0ZSwgZGVjb2RpbmdDb250ZXh0KSB7CiAgY29uc3QgYXQgPSBbXTsKICBpZiAoIW1tcikgewogICAgYXQucHVzaCh7CiAgICAgIHg6IC1wYXR0ZXJuV2lkdGgsCiAgICAgIHk6IDAKICAgIH0pOwogICAgaWYgKHRlbXBsYXRlID09PSAwKSB7CiAgICAgIGF0LnB1c2goewogICAgICAgIHg6IC0zLAogICAgICAgIHk6IC0xCiAgICAgIH0sIHsKICAgICAgICB4OiAyLAogICAgICAgIHk6IC0yCiAgICAgIH0sIHsKICAgICAgICB4OiAtMiwKICAgICAgICB5OiAtMgogICAgICB9KTsKICAgIH0KICB9CiAgY29uc3QgY29sbGVjdGl2ZVdpZHRoID0gKG1heFBhdHRlcm5JbmRleCArIDEpICogcGF0dGVybldpZHRoOwogIGNvbnN0IGNvbGxlY3RpdmVCaXRtYXAgPSBkZWNvZGVCaXRtYXAobW1yLCBjb2xsZWN0aXZlV2lkdGgsIHBhdHRlcm5IZWlnaHQsIHRlbXBsYXRlLCBmYWxzZSwgbnVsbCwgYXQsIGRlY29kaW5nQ29udGV4dCk7CiAgY29uc3QgcGF0dGVybnMgPSBbXTsKICBmb3IgKGxldCBpID0gMDsgaSA8PSBtYXhQYXR0ZXJuSW5kZXg7IGkrKykgewogICAgY29uc3QgcGF0dGVybkJpdG1hcCA9IFtdOwogICAgY29uc3QgeE1pbiA9IHBhdHRlcm5XaWR0aCAqIGk7CiAgICBjb25zdCB4TWF4ID0geE1pbiArIHBhdHRlcm5XaWR0aDsKICAgIGZvciAobGV0IHkgPSAwOyB5IDwgcGF0dGVybkhlaWdodDsgeSsrKSB7CiAgICAgIHBhdHRlcm5CaXRtYXAucHVzaChjb2xsZWN0aXZlQml0bWFwW3ldLnN1YmFycmF5KHhNaW4sIHhNYXgpKTsKICAgIH0KICAgIHBhdHRlcm5zLnB1c2gocGF0dGVybkJpdG1hcCk7CiAgfQogIHJldHVybiBwYXR0ZXJuczsKfQpmdW5jdGlvbiBkZWNvZGVIYWxmdG9uZVJlZ2lvbihtbXIsIHBhdHRlcm5zLCB0ZW1wbGF0ZSwgcmVnaW9uV2lkdGgsIHJlZ2lvbkhlaWdodCwgZGVmYXVsdFBpeGVsVmFsdWUsIGVuYWJsZVNraXAsIGNvbWJpbmF0aW9uT3BlcmF0b3IsIGdyaWRXaWR0aCwgZ3JpZEhlaWdodCwgZ3JpZE9mZnNldFgsIGdyaWRPZmZzZXRZLCBncmlkVmVjdG9yWCwgZ3JpZFZlY3RvclksIGRlY29kaW5nQ29udGV4dCkgewogIGNvbnN0IHNraXAgPSBudWxsOwogIGlmIChlbmFibGVTa2lwKSB7CiAgICB0aHJvdyBuZXcgSmJpZzJFcnJvcigic2tpcCBpcyBub3Qgc3VwcG9ydGVkIik7CiAgfQogIGlmIChjb21iaW5hdGlvbk9wZXJhdG9yICE9PSAwKSB7CiAgICB0aHJvdyBuZXcgSmJpZzJFcnJvcihgb3BlcmF0b3IgIiR7Y29tYmluYXRpb25PcGVyYXRvcn0iIGlzIG5vdCBzdXBwb3J0ZWQgaW4gaGFsZnRvbmUgcmVnaW9uYCk7CiAgfQogIGNvbnN0IHJlZ2lvbkJpdG1hcCA9IFtdOwogIGxldCBpLCBqLCByb3c7CiAgZm9yIChpID0gMDsgaSA8IHJlZ2lvbkhlaWdodDsgaSsrKSB7CiAgICByb3cgPSBuZXcgVWludDhBcnJheShyZWdpb25XaWR0aCk7CiAgICBpZiAoZGVmYXVsdFBpeGVsVmFsdWUpIHsKICAgICAgcm93LmZpbGwoZGVmYXVsdFBpeGVsVmFsdWUpOwogICAgfQogICAgcmVnaW9uQml0bWFwLnB1c2gocm93KTsKICB9CiAgY29uc3QgbnVtYmVyT2ZQYXR0ZXJucyA9IHBhdHRlcm5zLmxlbmd0aDsKICBjb25zdCBwYXR0ZXJuMCA9IHBhdHRlcm5zWzBdOwogIGNvbnN0IHBhdHRlcm5XaWR0aCA9IHBhdHRlcm4wWzBdLmxlbmd0aCwKICAgIHBhdHRlcm5IZWlnaHQgPSBwYXR0ZXJuMC5sZW5ndGg7CiAgY29uc3QgYml0c1BlclZhbHVlID0gbG9nMihudW1iZXJPZlBhdHRlcm5zKTsKICBjb25zdCBhdCA9IFtdOwogIGlmICghbW1yKSB7CiAgICBhdC5wdXNoKHsKICAgICAgeDogdGVtcGxhdGUgPD0gMSA/IDMgOiAyLAogICAgICB5OiAtMQogICAgfSk7CiAgICBpZiAodGVtcGxhdGUgPT09IDApIHsKICAgICAgYXQucHVzaCh7CiAgICAgICAgeDogLTMsCiAgICAgICAgeTogLTEKICAgICAgfSwgewogICAgICAgIHg6IDIsCiAgICAgICAgeTogLTIKICAgICAgfSwgewogICAgICAgIHg6IC0yLAogICAgICAgIHk6IC0yCiAgICAgIH0pOwogICAgfQogIH0KICBjb25zdCBncmF5U2NhbGVCaXRQbGFuZXMgPSBbXTsKICBsZXQgbW1ySW5wdXQsIGJpdG1hcDsKICBpZiAobW1yKSB7CiAgICBtbXJJbnB1dCA9IG5ldyBSZWFkZXIoZGVjb2RpbmdDb250ZXh0LmRhdGEsIGRlY29kaW5nQ29udGV4dC5zdGFydCwgZGVjb2RpbmdDb250ZXh0LmVuZCk7CiAgfQogIGZvciAoaSA9IGJpdHNQZXJWYWx1ZSAtIDE7IGkgPj0gMDsgaS0tKSB7CiAgICBpZiAobW1yKSB7CiAgICAgIGJpdG1hcCA9IGRlY29kZU1NUkJpdG1hcChtbXJJbnB1dCwgZ3JpZFdpZHRoLCBncmlkSGVpZ2h0LCB0cnVlKTsKICAgIH0gZWxzZSB7CiAgICAgIGJpdG1hcCA9IGRlY29kZUJpdG1hcChmYWxzZSwgZ3JpZFdpZHRoLCBncmlkSGVpZ2h0LCB0ZW1wbGF0ZSwgZmFsc2UsIHNraXAsIGF0LCBkZWNvZGluZ0NvbnRleHQpOwogICAgfQogICAgZ3JheVNjYWxlQml0UGxhbmVzW2ldID0gYml0bWFwOwogIH0KICBsZXQgbWcsIG5nLCBiaXQsIHBhdHRlcm5JbmRleCwgcGF0dGVybkJpdG1hcCwgeCwgeSwgcGF0dGVyblJvdywgcmVnaW9uUm93OwogIGZvciAobWcgPSAwOyBtZyA8IGdyaWRIZWlnaHQ7IG1nKyspIHsKICAgIGZvciAobmcgPSAwOyBuZyA8IGdyaWRXaWR0aDsgbmcrKykgewogICAgICBiaXQgPSAwOwogICAgICBwYXR0ZXJuSW5kZXggPSAwOwogICAgICBmb3IgKGogPSBiaXRzUGVyVmFsdWUgLSAxOyBqID49IDA7IGotLSkgewogICAgICAgIGJpdCBePSBncmF5U2NhbGVCaXRQbGFuZXNbal1bbWddW25nXTsKICAgICAgICBwYXR0ZXJuSW5kZXggfD0gYml0IDw8IGo7CiAgICAgIH0KICAgICAgcGF0dGVybkJpdG1hcCA9IHBhdHRlcm5zW3BhdHRlcm5JbmRleF07CiAgICAgIHggPSBncmlkT2Zmc2V0WCArIG1nICogZ3JpZFZlY3RvclkgKyBuZyAqIGdyaWRWZWN0b3JYID4+IDg7CiAgICAgIHkgPSBncmlkT2Zmc2V0WSArIG1nICogZ3JpZFZlY3RvclggLSBuZyAqIGdyaWRWZWN0b3JZID4+IDg7CiAgICAgIGlmICh4ID49IDAgJiYgeCArIHBhdHRlcm5XaWR0aCA8PSByZWdpb25XaWR0aCAmJiB5ID49IDAgJiYgeSArIHBhdHRlcm5IZWlnaHQgPD0gcmVnaW9uSGVpZ2h0KSB7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IHBhdHRlcm5IZWlnaHQ7IGkrKykgewogICAgICAgICAgcmVnaW9uUm93ID0gcmVnaW9uQml0bWFwW3kgKyBpXTsKICAgICAgICAgIHBhdHRlcm5Sb3cgPSBwYXR0ZXJuQml0bWFwW2ldOwogICAgICAgICAgZm9yIChqID0gMDsgaiA8IHBhdHRlcm5XaWR0aDsgaisrKSB7CiAgICAgICAgICAgIHJlZ2lvblJvd1t4ICsgal0gfD0gcGF0dGVyblJvd1tqXTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgbGV0IHJlZ2lvblgsIHJlZ2lvblk7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IHBhdHRlcm5IZWlnaHQ7IGkrKykgewogICAgICAgICAgcmVnaW9uWSA9IHkgKyBpOwogICAgICAgICAgaWYgKHJlZ2lvblkgPCAwIHx8IHJlZ2lvblkgPj0gcmVnaW9uSGVpZ2h0KSB7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgICAgcmVnaW9uUm93ID0gcmVnaW9uQml0bWFwW3JlZ2lvblldOwogICAgICAgICAgcGF0dGVyblJvdyA9IHBhdHRlcm5CaXRtYXBbaV07CiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgcGF0dGVybldpZHRoOyBqKyspIHsKICAgICAgICAgICAgcmVnaW9uWCA9IHggKyBqOwogICAgICAgICAgICBpZiAocmVnaW9uWCA+PSAwICYmIHJlZ2lvblggPCByZWdpb25XaWR0aCkgewogICAgICAgICAgICAgIHJlZ2lvblJvd1tyZWdpb25YXSB8PSBwYXR0ZXJuUm93W2pdOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQogIHJldHVybiByZWdpb25CaXRtYXA7Cn0KZnVuY3Rpb24gcmVhZFNlZ21lbnRIZWFkZXIoZGF0YSwgc3RhcnQpIHsKICBjb25zdCBzZWdtZW50SGVhZGVyID0ge307CiAgc2VnbWVudEhlYWRlci5udW1iZXIgPSByZWFkVWludDMyKGRhdGEsIHN0YXJ0KTsKICBjb25zdCBmbGFncyA9IGRhdGFbc3RhcnQgKyA0XTsKICBjb25zdCBzZWdtZW50VHlwZSA9IGZsYWdzICYgMHgzZjsKICBpZiAoIVNlZ21lbnRUeXBlc1tzZWdtZW50VHlwZV0pIHsKICAgIHRocm93IG5ldyBKYmlnMkVycm9yKCJpbnZhbGlkIHNlZ21lbnQgdHlwZTogIiArIHNlZ21lbnRUeXBlKTsKICB9CiAgc2VnbWVudEhlYWRlci50eXBlID0gc2VnbWVudFR5cGU7CiAgc2VnbWVudEhlYWRlci50eXBlTmFtZSA9IFNlZ21lbnRUeXBlc1tzZWdtZW50VHlwZV07CiAgc2VnbWVudEhlYWRlci5kZWZlcnJlZE5vblJldGFpbiA9ICEhKGZsYWdzICYgMHg4MCk7CiAgY29uc3QgcGFnZUFzc29jaWF0aW9uRmllbGRTaXplID0gISEoZmxhZ3MgJiAweDQwKTsKICBjb25zdCByZWZlcnJlZEZsYWdzID0gZGF0YVtzdGFydCArIDVdOwogIGxldCByZWZlcnJlZFRvQ291bnQgPSByZWZlcnJlZEZsYWdzID4+IDUgJiA3OwogIGNvbnN0IHJldGFpbkJpdHMgPSBbcmVmZXJyZWRGbGFncyAmIDMxXTsKICBsZXQgcG9zaXRpb24gPSBzdGFydCArIDY7CiAgaWYgKHJlZmVycmVkRmxhZ3MgPT09IDcpIHsKICAgIHJlZmVycmVkVG9Db3VudCA9IHJlYWRVaW50MzIoZGF0YSwgcG9zaXRpb24gLSAxKSAmIDB4MWZmZmZmZmY7CiAgICBwb3NpdGlvbiArPSAzOwogICAgbGV0IGJ5dGVzID0gcmVmZXJyZWRUb0NvdW50ICsgNyA+PiAzOwogICAgcmV0YWluQml0c1swXSA9IGRhdGFbcG9zaXRpb24rK107CiAgICB3aGlsZSAoLS1ieXRlcyA+IDApIHsKICAgICAgcmV0YWluQml0cy5wdXNoKGRhdGFbcG9zaXRpb24rK10pOwogICAgfQogIH0gZWxzZSBpZiAocmVmZXJyZWRGbGFncyA9PT0gNSB8fCByZWZlcnJlZEZsYWdzID09PSA2KSB7CiAgICB0aHJvdyBuZXcgSmJpZzJFcnJvcigiaW52YWxpZCByZWZlcnJlZC10byBmbGFncyIpOwogIH0KICBzZWdtZW50SGVhZGVyLnJldGFpbkJpdHMgPSByZXRhaW5CaXRzOwogIGxldCByZWZlcnJlZFRvU2VnbWVudE51bWJlclNpemUgPSA0OwogIGlmIChzZWdtZW50SGVhZGVyLm51bWJlciA8PSAyNTYpIHsKICAgIHJlZmVycmVkVG9TZWdtZW50TnVtYmVyU2l6ZSA9IDE7CiAgfSBlbHNlIGlmIChzZWdtZW50SGVhZGVyLm51bWJlciA8PSA2NTUzNikgewogICAgcmVmZXJyZWRUb1NlZ21lbnROdW1iZXJTaXplID0gMjsKICB9CiAgY29uc3QgcmVmZXJyZWRUbyA9IFtdOwogIGxldCBpLCBpaTsKICBmb3IgKGkgPSAwOyBpIDwgcmVmZXJyZWRUb0NvdW50OyBpKyspIHsKICAgIGxldCBudW1iZXI7CiAgICBpZiAocmVmZXJyZWRUb1NlZ21lbnROdW1iZXJTaXplID09PSAxKSB7CiAgICAgIG51bWJlciA9IGRhdGFbcG9zaXRpb25dOwogICAgfSBlbHNlIGlmIChyZWZlcnJlZFRvU2VnbWVudE51bWJlclNpemUgPT09IDIpIHsKICAgICAgbnVtYmVyID0gcmVhZFVpbnQxNihkYXRhLCBwb3NpdGlvbik7CiAgICB9IGVsc2UgewogICAgICBudW1iZXIgPSByZWFkVWludDMyKGRhdGEsIHBvc2l0aW9uKTsKICAgIH0KICAgIHJlZmVycmVkVG8ucHVzaChudW1iZXIpOwogICAgcG9zaXRpb24gKz0gcmVmZXJyZWRUb1NlZ21lbnROdW1iZXJTaXplOwogIH0KICBzZWdtZW50SGVhZGVyLnJlZmVycmVkVG8gPSByZWZlcnJlZFRvOwogIGlmICghcGFnZUFzc29jaWF0aW9uRmllbGRTaXplKSB7CiAgICBzZWdtZW50SGVhZGVyLnBhZ2VBc3NvY2lhdGlvbiA9IGRhdGFbcG9zaXRpb24rK107CiAgfSBlbHNlIHsKICAgIHNlZ21lbnRIZWFkZXIucGFnZUFzc29jaWF0aW9uID0gcmVhZFVpbnQzMihkYXRhLCBwb3NpdGlvbik7CiAgICBwb3NpdGlvbiArPSA0OwogIH0KICBzZWdtZW50SGVhZGVyLmxlbmd0aCA9IHJlYWRVaW50MzIoZGF0YSwgcG9zaXRpb24pOwogIHBvc2l0aW9uICs9IDQ7CiAgaWYgKHNlZ21lbnRIZWFkZXIubGVuZ3RoID09PSAweGZmZmZmZmZmKSB7CiAgICBpZiAoc2VnbWVudFR5cGUgPT09IDM4KSB7CiAgICAgIGNvbnN0IGdlbmVyaWNSZWdpb25JbmZvID0gcmVhZFJlZ2lvblNlZ21lbnRJbmZvcm1hdGlvbihkYXRhLCBwb3NpdGlvbik7CiAgICAgIGNvbnN0IGdlbmVyaWNSZWdpb25TZWdtZW50RmxhZ3MgPSBkYXRhW3Bvc2l0aW9uICsgUmVnaW9uU2VnbWVudEluZm9ybWF0aW9uRmllbGRMZW5ndGhdOwogICAgICBjb25zdCBnZW5lcmljUmVnaW9uTW1yID0gISEoZ2VuZXJpY1JlZ2lvblNlZ21lbnRGbGFncyAmIDEpOwogICAgICBjb25zdCBzZWFyY2hQYXR0ZXJuTGVuZ3RoID0gNjsKICAgICAgY29uc3Qgc2VhcmNoUGF0dGVybiA9IG5ldyBVaW50OEFycmF5KHNlYXJjaFBhdHRlcm5MZW5ndGgpOwogICAgICBpZiAoIWdlbmVyaWNSZWdpb25NbXIpIHsKICAgICAgICBzZWFyY2hQYXR0ZXJuWzBdID0gMHhmZjsKICAgICAgICBzZWFyY2hQYXR0ZXJuWzFdID0gMHhhYzsKICAgICAgfQogICAgICBzZWFyY2hQYXR0ZXJuWzJdID0gZ2VuZXJpY1JlZ2lvbkluZm8uaGVpZ2h0ID4+PiAyNCAmIDB4ZmY7CiAgICAgIHNlYXJjaFBhdHRlcm5bM10gPSBnZW5lcmljUmVnaW9uSW5mby5oZWlnaHQgPj4gMTYgJiAweGZmOwogICAgICBzZWFyY2hQYXR0ZXJuWzRdID0gZ2VuZXJpY1JlZ2lvbkluZm8uaGVpZ2h0ID4+IDggJiAweGZmOwogICAgICBzZWFyY2hQYXR0ZXJuWzVdID0gZ2VuZXJpY1JlZ2lvbkluZm8uaGVpZ2h0ICYgMHhmZjsKICAgICAgZm9yIChpID0gcG9zaXRpb24sIGlpID0gZGF0YS5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgICAgbGV0IGogPSAwOwogICAgICAgIHdoaWxlIChqIDwgc2VhcmNoUGF0dGVybkxlbmd0aCAmJiBzZWFyY2hQYXR0ZXJuW2pdID09PSBkYXRhW2kgKyBqXSkgewogICAgICAgICAgaisrOwogICAgICAgIH0KICAgICAgICBpZiAoaiA9PT0gc2VhcmNoUGF0dGVybkxlbmd0aCkgewogICAgICAgICAgc2VnbWVudEhlYWRlci5sZW5ndGggPSBpICsgc2VhcmNoUGF0dGVybkxlbmd0aDsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgfQogICAgICBpZiAoc2VnbWVudEhlYWRlci5sZW5ndGggPT09IDB4ZmZmZmZmZmYpIHsKICAgICAgICB0aHJvdyBuZXcgSmJpZzJFcnJvcigic2VnbWVudCBlbmQgd2FzIG5vdCBmb3VuZCIpOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICB0aHJvdyBuZXcgSmJpZzJFcnJvcigiaW52YWxpZCB1bmtub3duIHNlZ21lbnQgbGVuZ3RoIik7CiAgICB9CiAgfQogIHNlZ21lbnRIZWFkZXIuaGVhZGVyRW5kID0gcG9zaXRpb247CiAgcmV0dXJuIHNlZ21lbnRIZWFkZXI7Cn0KZnVuY3Rpb24gcmVhZFNlZ21lbnRzKGhlYWRlciwgZGF0YSwgc3RhcnQsIGVuZCkgewogIGNvbnN0IHNlZ21lbnRzID0gW107CiAgbGV0IHBvc2l0aW9uID0gc3RhcnQ7CiAgd2hpbGUgKHBvc2l0aW9uIDwgZW5kKSB7CiAgICBjb25zdCBzZWdtZW50SGVhZGVyID0gcmVhZFNlZ21lbnRIZWFkZXIoZGF0YSwgcG9zaXRpb24pOwogICAgcG9zaXRpb24gPSBzZWdtZW50SGVhZGVyLmhlYWRlckVuZDsKICAgIGNvbnN0IHNlZ21lbnQgPSB7CiAgICAgIGhlYWRlcjogc2VnbWVudEhlYWRlciwKICAgICAgZGF0YQogICAgfTsKICAgIGlmICghaGVhZGVyLnJhbmRvbUFjY2VzcykgewogICAgICBzZWdtZW50LnN0YXJ0ID0gcG9zaXRpb247CiAgICAgIHBvc2l0aW9uICs9IHNlZ21lbnRIZWFkZXIubGVuZ3RoOwogICAgICBzZWdtZW50LmVuZCA9IHBvc2l0aW9uOwogICAgfQogICAgc2VnbWVudHMucHVzaChzZWdtZW50KTsKICAgIGlmIChzZWdtZW50SGVhZGVyLnR5cGUgPT09IDUxKSB7CiAgICAgIGJyZWFrOwogICAgfQogIH0KICBpZiAoaGVhZGVyLnJhbmRvbUFjY2VzcykgewogICAgZm9yIChsZXQgaSA9IDAsIGlpID0gc2VnbWVudHMubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgICBzZWdtZW50c1tpXS5zdGFydCA9IHBvc2l0aW9uOwogICAgICBwb3NpdGlvbiArPSBzZWdtZW50c1tpXS5oZWFkZXIubGVuZ3RoOwogICAgICBzZWdtZW50c1tpXS5lbmQgPSBwb3NpdGlvbjsKICAgIH0KICB9CiAgcmV0dXJuIHNlZ21lbnRzOwp9CmZ1bmN0aW9uIHJlYWRSZWdpb25TZWdtZW50SW5mb3JtYXRpb24oZGF0YSwgc3RhcnQpIHsKICByZXR1cm4gewogICAgd2lkdGg6IHJlYWRVaW50MzIoZGF0YSwgc3RhcnQpLAogICAgaGVpZ2h0OiByZWFkVWludDMyKGRhdGEsIHN0YXJ0ICsgNCksCiAgICB4OiByZWFkVWludDMyKGRhdGEsIHN0YXJ0ICsgOCksCiAgICB5OiByZWFkVWludDMyKGRhdGEsIHN0YXJ0ICsgMTIpLAogICAgY29tYmluYXRpb25PcGVyYXRvcjogZGF0YVtzdGFydCArIDE2XSAmIDcKICB9Owp9CmNvbnN0IFJlZ2lvblNlZ21lbnRJbmZvcm1hdGlvbkZpZWxkTGVuZ3RoID0gMTc7CmZ1bmN0aW9uIHByb2Nlc3NTZWdtZW50KHNlZ21lbnQsIHZpc2l0b3IpIHsKICBjb25zdCBoZWFkZXIgPSBzZWdtZW50LmhlYWRlcjsKICBjb25zdCBkYXRhID0gc2VnbWVudC5kYXRhLAogICAgZW5kID0gc2VnbWVudC5lbmQ7CiAgbGV0IHBvc2l0aW9uID0gc2VnbWVudC5zdGFydDsKICBsZXQgYXJncywgYXQsIGksIGF0TGVuZ3RoOwogIHN3aXRjaCAoaGVhZGVyLnR5cGUpIHsKICAgIGNhc2UgMDoKICAgICAgY29uc3QgZGljdGlvbmFyeSA9IHt9OwogICAgICBjb25zdCBkaWN0aW9uYXJ5RmxhZ3MgPSByZWFkVWludDE2KGRhdGEsIHBvc2l0aW9uKTsKICAgICAgZGljdGlvbmFyeS5odWZmbWFuID0gISEoZGljdGlvbmFyeUZsYWdzICYgMSk7CiAgICAgIGRpY3Rpb25hcnkucmVmaW5lbWVudCA9ICEhKGRpY3Rpb25hcnlGbGFncyAmIDIpOwogICAgICBkaWN0aW9uYXJ5Lmh1ZmZtYW5ESFNlbGVjdG9yID0gZGljdGlvbmFyeUZsYWdzID4+IDIgJiAzOwogICAgICBkaWN0aW9uYXJ5Lmh1ZmZtYW5EV1NlbGVjdG9yID0gZGljdGlvbmFyeUZsYWdzID4+IDQgJiAzOwogICAgICBkaWN0aW9uYXJ5LmJpdG1hcFNpemVTZWxlY3RvciA9IGRpY3Rpb25hcnlGbGFncyA+PiA2ICYgMTsKICAgICAgZGljdGlvbmFyeS5hZ2dyZWdhdGlvbkluc3RhbmNlc1NlbGVjdG9yID0gZGljdGlvbmFyeUZsYWdzID4+IDcgJiAxOwogICAgICBkaWN0aW9uYXJ5LmJpdG1hcENvZGluZ0NvbnRleHRVc2VkID0gISEoZGljdGlvbmFyeUZsYWdzICYgMjU2KTsKICAgICAgZGljdGlvbmFyeS5iaXRtYXBDb2RpbmdDb250ZXh0UmV0YWluZWQgPSAhIShkaWN0aW9uYXJ5RmxhZ3MgJiA1MTIpOwogICAgICBkaWN0aW9uYXJ5LnRlbXBsYXRlID0gZGljdGlvbmFyeUZsYWdzID4+IDEwICYgMzsKICAgICAgZGljdGlvbmFyeS5yZWZpbmVtZW50VGVtcGxhdGUgPSBkaWN0aW9uYXJ5RmxhZ3MgPj4gMTIgJiAxOwogICAgICBwb3NpdGlvbiArPSAyOwogICAgICBpZiAoIWRpY3Rpb25hcnkuaHVmZm1hbikgewogICAgICAgIGF0TGVuZ3RoID0gZGljdGlvbmFyeS50ZW1wbGF0ZSA9PT0gMCA/IDQgOiAxOwogICAgICAgIGF0ID0gW107CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGF0TGVuZ3RoOyBpKyspIHsKICAgICAgICAgIGF0LnB1c2goewogICAgICAgICAgICB4OiByZWFkSW50OChkYXRhLCBwb3NpdGlvbiksCiAgICAgICAgICAgIHk6IHJlYWRJbnQ4KGRhdGEsIHBvc2l0aW9uICsgMSkKICAgICAgICAgIH0pOwogICAgICAgICAgcG9zaXRpb24gKz0gMjsKICAgICAgICB9CiAgICAgICAgZGljdGlvbmFyeS5hdCA9IGF0OwogICAgICB9CiAgICAgIGlmIChkaWN0aW9uYXJ5LnJlZmluZW1lbnQgJiYgIWRpY3Rpb25hcnkucmVmaW5lbWVudFRlbXBsYXRlKSB7CiAgICAgICAgYXQgPSBbXTsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMjsgaSsrKSB7CiAgICAgICAgICBhdC5wdXNoKHsKICAgICAgICAgICAgeDogcmVhZEludDgoZGF0YSwgcG9zaXRpb24pLAogICAgICAgICAgICB5OiByZWFkSW50OChkYXRhLCBwb3NpdGlvbiArIDEpCiAgICAgICAgICB9KTsKICAgICAgICAgIHBvc2l0aW9uICs9IDI7CiAgICAgICAgfQogICAgICAgIGRpY3Rpb25hcnkucmVmaW5lbWVudEF0ID0gYXQ7CiAgICAgIH0KICAgICAgZGljdGlvbmFyeS5udW1iZXJPZkV4cG9ydGVkU3ltYm9scyA9IHJlYWRVaW50MzIoZGF0YSwgcG9zaXRpb24pOwogICAgICBwb3NpdGlvbiArPSA0OwogICAgICBkaWN0aW9uYXJ5Lm51bWJlck9mTmV3U3ltYm9scyA9IHJlYWRVaW50MzIoZGF0YSwgcG9zaXRpb24pOwogICAgICBwb3NpdGlvbiArPSA0OwogICAgICBhcmdzID0gW2RpY3Rpb25hcnksIGhlYWRlci5udW1iZXIsIGhlYWRlci5yZWZlcnJlZFRvLCBkYXRhLCBwb3NpdGlvbiwgZW5kXTsKICAgICAgYnJlYWs7CiAgICBjYXNlIDY6CiAgICBjYXNlIDc6CiAgICAgIGNvbnN0IHRleHRSZWdpb24gPSB7fTsKICAgICAgdGV4dFJlZ2lvbi5pbmZvID0gcmVhZFJlZ2lvblNlZ21lbnRJbmZvcm1hdGlvbihkYXRhLCBwb3NpdGlvbik7CiAgICAgIHBvc2l0aW9uICs9IFJlZ2lvblNlZ21lbnRJbmZvcm1hdGlvbkZpZWxkTGVuZ3RoOwogICAgICBjb25zdCB0ZXh0UmVnaW9uU2VnbWVudEZsYWdzID0gcmVhZFVpbnQxNihkYXRhLCBwb3NpdGlvbik7CiAgICAgIHBvc2l0aW9uICs9IDI7CiAgICAgIHRleHRSZWdpb24uaHVmZm1hbiA9ICEhKHRleHRSZWdpb25TZWdtZW50RmxhZ3MgJiAxKTsKICAgICAgdGV4dFJlZ2lvbi5yZWZpbmVtZW50ID0gISEodGV4dFJlZ2lvblNlZ21lbnRGbGFncyAmIDIpOwogICAgICB0ZXh0UmVnaW9uLmxvZ1N0cmlwU2l6ZSA9IHRleHRSZWdpb25TZWdtZW50RmxhZ3MgPj4gMiAmIDM7CiAgICAgIHRleHRSZWdpb24uc3RyaXBTaXplID0gMSA8PCB0ZXh0UmVnaW9uLmxvZ1N0cmlwU2l6ZTsKICAgICAgdGV4dFJlZ2lvbi5yZWZlcmVuY2VDb3JuZXIgPSB0ZXh0UmVnaW9uU2VnbWVudEZsYWdzID4+IDQgJiAzOwogICAgICB0ZXh0UmVnaW9uLnRyYW5zcG9zZWQgPSAhISh0ZXh0UmVnaW9uU2VnbWVudEZsYWdzICYgNjQpOwogICAgICB0ZXh0UmVnaW9uLmNvbWJpbmF0aW9uT3BlcmF0b3IgPSB0ZXh0UmVnaW9uU2VnbWVudEZsYWdzID4+IDcgJiAzOwogICAgICB0ZXh0UmVnaW9uLmRlZmF1bHRQaXhlbFZhbHVlID0gdGV4dFJlZ2lvblNlZ21lbnRGbGFncyA+PiA5ICYgMTsKICAgICAgdGV4dFJlZ2lvbi5kc09mZnNldCA9IHRleHRSZWdpb25TZWdtZW50RmxhZ3MgPDwgMTcgPj4gMjc7CiAgICAgIHRleHRSZWdpb24ucmVmaW5lbWVudFRlbXBsYXRlID0gdGV4dFJlZ2lvblNlZ21lbnRGbGFncyA+PiAxNSAmIDE7CiAgICAgIGlmICh0ZXh0UmVnaW9uLmh1ZmZtYW4pIHsKICAgICAgICBjb25zdCB0ZXh0UmVnaW9uSHVmZm1hbkZsYWdzID0gcmVhZFVpbnQxNihkYXRhLCBwb3NpdGlvbik7CiAgICAgICAgcG9zaXRpb24gKz0gMjsKICAgICAgICB0ZXh0UmVnaW9uLmh1ZmZtYW5GUyA9IHRleHRSZWdpb25IdWZmbWFuRmxhZ3MgJiAzOwogICAgICAgIHRleHRSZWdpb24uaHVmZm1hbkRTID0gdGV4dFJlZ2lvbkh1ZmZtYW5GbGFncyA+PiAyICYgMzsKICAgICAgICB0ZXh0UmVnaW9uLmh1ZmZtYW5EVCA9IHRleHRSZWdpb25IdWZmbWFuRmxhZ3MgPj4gNCAmIDM7CiAgICAgICAgdGV4dFJlZ2lvbi5odWZmbWFuUmVmaW5lbWVudERXID0gdGV4dFJlZ2lvbkh1ZmZtYW5GbGFncyA+PiA2ICYgMzsKICAgICAgICB0ZXh0UmVnaW9uLmh1ZmZtYW5SZWZpbmVtZW50REggPSB0ZXh0UmVnaW9uSHVmZm1hbkZsYWdzID4+IDggJiAzOwogICAgICAgIHRleHRSZWdpb24uaHVmZm1hblJlZmluZW1lbnREWCA9IHRleHRSZWdpb25IdWZmbWFuRmxhZ3MgPj4gMTAgJiAzOwogICAgICAgIHRleHRSZWdpb24uaHVmZm1hblJlZmluZW1lbnREWSA9IHRleHRSZWdpb25IdWZmbWFuRmxhZ3MgPj4gMTIgJiAzOwogICAgICAgIHRleHRSZWdpb24uaHVmZm1hblJlZmluZW1lbnRTaXplU2VsZWN0b3IgPSAhISh0ZXh0UmVnaW9uSHVmZm1hbkZsYWdzICYgMHg0MDAwKTsKICAgICAgfQogICAgICBpZiAodGV4dFJlZ2lvbi5yZWZpbmVtZW50ICYmICF0ZXh0UmVnaW9uLnJlZmluZW1lbnRUZW1wbGF0ZSkgewogICAgICAgIGF0ID0gW107CiAgICAgICAgZm9yIChpID0gMDsgaSA8IDI7IGkrKykgewogICAgICAgICAgYXQucHVzaCh7CiAgICAgICAgICAgIHg6IHJlYWRJbnQ4KGRhdGEsIHBvc2l0aW9uKSwKICAgICAgICAgICAgeTogcmVhZEludDgoZGF0YSwgcG9zaXRpb24gKyAxKQogICAgICAgICAgfSk7CiAgICAgICAgICBwb3NpdGlvbiArPSAyOwogICAgICAgIH0KICAgICAgICB0ZXh0UmVnaW9uLnJlZmluZW1lbnRBdCA9IGF0OwogICAgICB9CiAgICAgIHRleHRSZWdpb24ubnVtYmVyT2ZTeW1ib2xJbnN0YW5jZXMgPSByZWFkVWludDMyKGRhdGEsIHBvc2l0aW9uKTsKICAgICAgcG9zaXRpb24gKz0gNDsKICAgICAgYXJncyA9IFt0ZXh0UmVnaW9uLCBoZWFkZXIucmVmZXJyZWRUbywgZGF0YSwgcG9zaXRpb24sIGVuZF07CiAgICAgIGJyZWFrOwogICAgY2FzZSAxNjoKICAgICAgY29uc3QgcGF0dGVybkRpY3Rpb25hcnkgPSB7fTsKICAgICAgY29uc3QgcGF0dGVybkRpY3Rpb25hcnlGbGFncyA9IGRhdGFbcG9zaXRpb24rK107CiAgICAgIHBhdHRlcm5EaWN0aW9uYXJ5Lm1tciA9ICEhKHBhdHRlcm5EaWN0aW9uYXJ5RmxhZ3MgJiAxKTsKICAgICAgcGF0dGVybkRpY3Rpb25hcnkudGVtcGxhdGUgPSBwYXR0ZXJuRGljdGlvbmFyeUZsYWdzID4+IDEgJiAzOwogICAgICBwYXR0ZXJuRGljdGlvbmFyeS5wYXR0ZXJuV2lkdGggPSBkYXRhW3Bvc2l0aW9uKytdOwogICAgICBwYXR0ZXJuRGljdGlvbmFyeS5wYXR0ZXJuSGVpZ2h0ID0gZGF0YVtwb3NpdGlvbisrXTsKICAgICAgcGF0dGVybkRpY3Rpb25hcnkubWF4UGF0dGVybkluZGV4ID0gcmVhZFVpbnQzMihkYXRhLCBwb3NpdGlvbik7CiAgICAgIHBvc2l0aW9uICs9IDQ7CiAgICAgIGFyZ3MgPSBbcGF0dGVybkRpY3Rpb25hcnksIGhlYWRlci5udW1iZXIsIGRhdGEsIHBvc2l0aW9uLCBlbmRdOwogICAgICBicmVhazsKICAgIGNhc2UgMjI6CiAgICBjYXNlIDIzOgogICAgICBjb25zdCBoYWxmdG9uZVJlZ2lvbiA9IHt9OwogICAgICBoYWxmdG9uZVJlZ2lvbi5pbmZvID0gcmVhZFJlZ2lvblNlZ21lbnRJbmZvcm1hdGlvbihkYXRhLCBwb3NpdGlvbik7CiAgICAgIHBvc2l0aW9uICs9IFJlZ2lvblNlZ21lbnRJbmZvcm1hdGlvbkZpZWxkTGVuZ3RoOwogICAgICBjb25zdCBoYWxmdG9uZVJlZ2lvbkZsYWdzID0gZGF0YVtwb3NpdGlvbisrXTsKICAgICAgaGFsZnRvbmVSZWdpb24ubW1yID0gISEoaGFsZnRvbmVSZWdpb25GbGFncyAmIDEpOwogICAgICBoYWxmdG9uZVJlZ2lvbi50ZW1wbGF0ZSA9IGhhbGZ0b25lUmVnaW9uRmxhZ3MgPj4gMSAmIDM7CiAgICAgIGhhbGZ0b25lUmVnaW9uLmVuYWJsZVNraXAgPSAhIShoYWxmdG9uZVJlZ2lvbkZsYWdzICYgOCk7CiAgICAgIGhhbGZ0b25lUmVnaW9uLmNvbWJpbmF0aW9uT3BlcmF0b3IgPSBoYWxmdG9uZVJlZ2lvbkZsYWdzID4+IDQgJiA3OwogICAgICBoYWxmdG9uZVJlZ2lvbi5kZWZhdWx0UGl4ZWxWYWx1ZSA9IGhhbGZ0b25lUmVnaW9uRmxhZ3MgPj4gNyAmIDE7CiAgICAgIGhhbGZ0b25lUmVnaW9uLmdyaWRXaWR0aCA9IHJlYWRVaW50MzIoZGF0YSwgcG9zaXRpb24pOwogICAgICBwb3NpdGlvbiArPSA0OwogICAgICBoYWxmdG9uZVJlZ2lvbi5ncmlkSGVpZ2h0ID0gcmVhZFVpbnQzMihkYXRhLCBwb3NpdGlvbik7CiAgICAgIHBvc2l0aW9uICs9IDQ7CiAgICAgIGhhbGZ0b25lUmVnaW9uLmdyaWRPZmZzZXRYID0gcmVhZFVpbnQzMihkYXRhLCBwb3NpdGlvbikgJiAweGZmZmZmZmZmOwogICAgICBwb3NpdGlvbiArPSA0OwogICAgICBoYWxmdG9uZVJlZ2lvbi5ncmlkT2Zmc2V0WSA9IHJlYWRVaW50MzIoZGF0YSwgcG9zaXRpb24pICYgMHhmZmZmZmZmZjsKICAgICAgcG9zaXRpb24gKz0gNDsKICAgICAgaGFsZnRvbmVSZWdpb24uZ3JpZFZlY3RvclggPSByZWFkVWludDE2KGRhdGEsIHBvc2l0aW9uKTsKICAgICAgcG9zaXRpb24gKz0gMjsKICAgICAgaGFsZnRvbmVSZWdpb24uZ3JpZFZlY3RvclkgPSByZWFkVWludDE2KGRhdGEsIHBvc2l0aW9uKTsKICAgICAgcG9zaXRpb24gKz0gMjsKICAgICAgYXJncyA9IFtoYWxmdG9uZVJlZ2lvbiwgaGVhZGVyLnJlZmVycmVkVG8sIGRhdGEsIHBvc2l0aW9uLCBlbmRdOwogICAgICBicmVhazsKICAgIGNhc2UgMzg6CiAgICBjYXNlIDM5OgogICAgICBjb25zdCBnZW5lcmljUmVnaW9uID0ge307CiAgICAgIGdlbmVyaWNSZWdpb24uaW5mbyA9IHJlYWRSZWdpb25TZWdtZW50SW5mb3JtYXRpb24oZGF0YSwgcG9zaXRpb24pOwogICAgICBwb3NpdGlvbiArPSBSZWdpb25TZWdtZW50SW5mb3JtYXRpb25GaWVsZExlbmd0aDsKICAgICAgY29uc3QgZ2VuZXJpY1JlZ2lvblNlZ21lbnRGbGFncyA9IGRhdGFbcG9zaXRpb24rK107CiAgICAgIGdlbmVyaWNSZWdpb24ubW1yID0gISEoZ2VuZXJpY1JlZ2lvblNlZ21lbnRGbGFncyAmIDEpOwogICAgICBnZW5lcmljUmVnaW9uLnRlbXBsYXRlID0gZ2VuZXJpY1JlZ2lvblNlZ21lbnRGbGFncyA+PiAxICYgMzsKICAgICAgZ2VuZXJpY1JlZ2lvbi5wcmVkaWN0aW9uID0gISEoZ2VuZXJpY1JlZ2lvblNlZ21lbnRGbGFncyAmIDgpOwogICAgICBpZiAoIWdlbmVyaWNSZWdpb24ubW1yKSB7CiAgICAgICAgYXRMZW5ndGggPSBnZW5lcmljUmVnaW9uLnRlbXBsYXRlID09PSAwID8gNCA6IDE7CiAgICAgICAgYXQgPSBbXTsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYXRMZW5ndGg7IGkrKykgewogICAgICAgICAgYXQucHVzaCh7CiAgICAgICAgICAgIHg6IHJlYWRJbnQ4KGRhdGEsIHBvc2l0aW9uKSwKICAgICAgICAgICAgeTogcmVhZEludDgoZGF0YSwgcG9zaXRpb24gKyAxKQogICAgICAgICAgfSk7CiAgICAgICAgICBwb3NpdGlvbiArPSAyOwogICAgICAgIH0KICAgICAgICBnZW5lcmljUmVnaW9uLmF0ID0gYXQ7CiAgICAgIH0KICAgICAgYXJncyA9IFtnZW5lcmljUmVnaW9uLCBkYXRhLCBwb3NpdGlvbiwgZW5kXTsKICAgICAgYnJlYWs7CiAgICBjYXNlIDQ4OgogICAgICBjb25zdCBwYWdlSW5mbyA9IHsKICAgICAgICB3aWR0aDogcmVhZFVpbnQzMihkYXRhLCBwb3NpdGlvbiksCiAgICAgICAgaGVpZ2h0OiByZWFkVWludDMyKGRhdGEsIHBvc2l0aW9uICsgNCksCiAgICAgICAgcmVzb2x1dGlvblg6IHJlYWRVaW50MzIoZGF0YSwgcG9zaXRpb24gKyA4KSwKICAgICAgICByZXNvbHV0aW9uWTogcmVhZFVpbnQzMihkYXRhLCBwb3NpdGlvbiArIDEyKQogICAgICB9OwogICAgICBpZiAocGFnZUluZm8uaGVpZ2h0ID09PSAweGZmZmZmZmZmKSB7CiAgICAgICAgZGVsZXRlIHBhZ2VJbmZvLmhlaWdodDsKICAgICAgfQogICAgICBjb25zdCBwYWdlU2VnbWVudEZsYWdzID0gZGF0YVtwb3NpdGlvbiArIDE2XTsKICAgICAgcmVhZFVpbnQxNihkYXRhLCBwb3NpdGlvbiArIDE3KTsKICAgICAgcGFnZUluZm8ubG9zc2xlc3MgPSAhIShwYWdlU2VnbWVudEZsYWdzICYgMSk7CiAgICAgIHBhZ2VJbmZvLnJlZmluZW1lbnQgPSAhIShwYWdlU2VnbWVudEZsYWdzICYgMik7CiAgICAgIHBhZ2VJbmZvLmRlZmF1bHRQaXhlbFZhbHVlID0gcGFnZVNlZ21lbnRGbGFncyA+PiAyICYgMTsKICAgICAgcGFnZUluZm8uY29tYmluYXRpb25PcGVyYXRvciA9IHBhZ2VTZWdtZW50RmxhZ3MgPj4gMyAmIDM7CiAgICAgIHBhZ2VJbmZvLnJlcXVpcmVzQnVmZmVyID0gISEocGFnZVNlZ21lbnRGbGFncyAmIDMyKTsKICAgICAgcGFnZUluZm8uY29tYmluYXRpb25PcGVyYXRvck92ZXJyaWRlID0gISEocGFnZVNlZ21lbnRGbGFncyAmIDY0KTsKICAgICAgYXJncyA9IFtwYWdlSW5mb107CiAgICAgIGJyZWFrOwogICAgY2FzZSA0OToKICAgICAgYnJlYWs7CiAgICBjYXNlIDUwOgogICAgICBicmVhazsKICAgIGNhc2UgNTE6CiAgICAgIGJyZWFrOwogICAgY2FzZSA1MzoKICAgICAgYXJncyA9IFtoZWFkZXIubnVtYmVyLCBkYXRhLCBwb3NpdGlvbiwgZW5kXTsKICAgICAgYnJlYWs7CiAgICBjYXNlIDYyOgogICAgICBicmVhazsKICAgIGRlZmF1bHQ6CiAgICAgIHRocm93IG5ldyBKYmlnMkVycm9yKGBzZWdtZW50IHR5cGUgJHtoZWFkZXIudHlwZU5hbWV9KCR7aGVhZGVyLnR5cGV9KSBpcyBub3QgaW1wbGVtZW50ZWRgKTsKICB9CiAgY29uc3QgY2FsbGJhY2tOYW1lID0gIm9uIiArIGhlYWRlci50eXBlTmFtZTsKICBpZiAoY2FsbGJhY2tOYW1lIGluIHZpc2l0b3IpIHsKICAgIHZpc2l0b3JbY2FsbGJhY2tOYW1lXS5hcHBseSh2aXNpdG9yLCBhcmdzKTsKICB9Cn0KZnVuY3Rpb24gcHJvY2Vzc1NlZ21lbnRzKHNlZ21lbnRzLCB2aXNpdG9yKSB7CiAgZm9yIChsZXQgaSA9IDAsIGlpID0gc2VnbWVudHMubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgcHJvY2Vzc1NlZ21lbnQoc2VnbWVudHNbaV0sIHZpc2l0b3IpOwogIH0KfQpmdW5jdGlvbiBwYXJzZUpiaWcyQ2h1bmtzKGNodW5rcykgewogIGNvbnN0IHZpc2l0b3IgPSBuZXcgU2ltcGxlU2VnbWVudFZpc2l0b3IoKTsKICBmb3IgKGxldCBpID0gMCwgaWkgPSBjaHVua3MubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgY29uc3QgY2h1bmsgPSBjaHVua3NbaV07CiAgICBjb25zdCBzZWdtZW50cyA9IHJlYWRTZWdtZW50cyh7fSwgY2h1bmsuZGF0YSwgY2h1bmsuc3RhcnQsIGNodW5rLmVuZCk7CiAgICBwcm9jZXNzU2VnbWVudHMoc2VnbWVudHMsIHZpc2l0b3IpOwogIH0KICByZXR1cm4gdmlzaXRvci5idWZmZXI7Cn0KY2xhc3MgU2ltcGxlU2VnbWVudFZpc2l0b3IgewogIG9uUGFnZUluZm9ybWF0aW9uKGluZm8pIHsKICAgIHRoaXMuY3VycmVudFBhZ2VJbmZvID0gaW5mbzsKICAgIGNvbnN0IHJvd1NpemUgPSBpbmZvLndpZHRoICsgNyA+PiAzOwogICAgY29uc3QgYnVmZmVyID0gbmV3IFVpbnQ4Q2xhbXBlZEFycmF5KHJvd1NpemUgKiBpbmZvLmhlaWdodCk7CiAgICBpZiAoaW5mby5kZWZhdWx0UGl4ZWxWYWx1ZSkgewogICAgICBidWZmZXIuZmlsbCgweGZmKTsKICAgIH0KICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyOwogIH0KICBkcmF3Qml0bWFwKHJlZ2lvbkluZm8sIGJpdG1hcCkgewogICAgY29uc3QgcGFnZUluZm8gPSB0aGlzLmN1cnJlbnRQYWdlSW5mbzsKICAgIGNvbnN0IHdpZHRoID0gcmVnaW9uSW5mby53aWR0aCwKICAgICAgaGVpZ2h0ID0gcmVnaW9uSW5mby5oZWlnaHQ7CiAgICBjb25zdCByb3dTaXplID0gcGFnZUluZm8ud2lkdGggKyA3ID4+IDM7CiAgICBjb25zdCBjb21iaW5hdGlvbk9wZXJhdG9yID0gcGFnZUluZm8uY29tYmluYXRpb25PcGVyYXRvck92ZXJyaWRlID8gcmVnaW9uSW5mby5jb21iaW5hdGlvbk9wZXJhdG9yIDogcGFnZUluZm8uY29tYmluYXRpb25PcGVyYXRvcjsKICAgIGNvbnN0IGJ1ZmZlciA9IHRoaXMuYnVmZmVyOwogICAgY29uc3QgbWFzazAgPSAxMjggPj4gKHJlZ2lvbkluZm8ueCAmIDcpOwogICAgbGV0IG9mZnNldDAgPSByZWdpb25JbmZvLnkgKiByb3dTaXplICsgKHJlZ2lvbkluZm8ueCA+PiAzKTsKICAgIGxldCBpLCBqLCBtYXNrLCBvZmZzZXQ7CiAgICBzd2l0Y2ggKGNvbWJpbmF0aW9uT3BlcmF0b3IpIHsKICAgICAgY2FzZSAwOgogICAgICAgIGZvciAoaSA9IDA7IGkgPCBoZWlnaHQ7IGkrKykgewogICAgICAgICAgbWFzayA9IG1hc2swOwogICAgICAgICAgb2Zmc2V0ID0gb2Zmc2V0MDsKICAgICAgICAgIGZvciAoaiA9IDA7IGogPCB3aWR0aDsgaisrKSB7CiAgICAgICAgICAgIGlmIChiaXRtYXBbaV1bal0pIHsKICAgICAgICAgICAgICBidWZmZXJbb2Zmc2V0XSB8PSBtYXNrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG1hc2sgPj49IDE7CiAgICAgICAgICAgIGlmICghbWFzaykgewogICAgICAgICAgICAgIG1hc2sgPSAxMjg7CiAgICAgICAgICAgICAgb2Zmc2V0Kys7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIG9mZnNldDAgKz0gcm93U2l6ZTsKICAgICAgICB9CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgMjoKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaGVpZ2h0OyBpKyspIHsKICAgICAgICAgIG1hc2sgPSBtYXNrMDsKICAgICAgICAgIG9mZnNldCA9IG9mZnNldDA7CiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgd2lkdGg7IGorKykgewogICAgICAgICAgICBpZiAoYml0bWFwW2ldW2pdKSB7CiAgICAgICAgICAgICAgYnVmZmVyW29mZnNldF0gXj0gbWFzazsKICAgICAgICAgICAgfQogICAgICAgICAgICBtYXNrID4+PSAxOwogICAgICAgICAgICBpZiAoIW1hc2spIHsKICAgICAgICAgICAgICBtYXNrID0gMTI4OwogICAgICAgICAgICAgIG9mZnNldCsrOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBvZmZzZXQwICs9IHJvd1NpemU7CiAgICAgICAgfQogICAgICAgIGJyZWFrOwogICAgICBkZWZhdWx0OgogICAgICAgIHRocm93IG5ldyBKYmlnMkVycm9yKGBvcGVyYXRvciAke2NvbWJpbmF0aW9uT3BlcmF0b3J9IGlzIG5vdCBzdXBwb3J0ZWRgKTsKICAgIH0KICB9CiAgb25JbW1lZGlhdGVHZW5lcmljUmVnaW9uKHJlZ2lvbiwgZGF0YSwgc3RhcnQsIGVuZCkgewogICAgY29uc3QgcmVnaW9uSW5mbyA9IHJlZ2lvbi5pbmZvOwogICAgY29uc3QgZGVjb2RpbmdDb250ZXh0ID0gbmV3IERlY29kaW5nQ29udGV4dChkYXRhLCBzdGFydCwgZW5kKTsKICAgIGNvbnN0IGJpdG1hcCA9IGRlY29kZUJpdG1hcChyZWdpb24ubW1yLCByZWdpb25JbmZvLndpZHRoLCByZWdpb25JbmZvLmhlaWdodCwgcmVnaW9uLnRlbXBsYXRlLCByZWdpb24ucHJlZGljdGlvbiwgbnVsbCwgcmVnaW9uLmF0LCBkZWNvZGluZ0NvbnRleHQpOwogICAgdGhpcy5kcmF3Qml0bWFwKHJlZ2lvbkluZm8sIGJpdG1hcCk7CiAgfQogIG9uSW1tZWRpYXRlTG9zc2xlc3NHZW5lcmljUmVnaW9uKCkgewogICAgdGhpcy5vbkltbWVkaWF0ZUdlbmVyaWNSZWdpb24oLi4uYXJndW1lbnRzKTsKICB9CiAgb25TeW1ib2xEaWN0aW9uYXJ5KGRpY3Rpb25hcnksIGN1cnJlbnRTZWdtZW50LCByZWZlcnJlZFNlZ21lbnRzLCBkYXRhLCBzdGFydCwgZW5kKSB7CiAgICBsZXQgaHVmZm1hblRhYmxlcywgaHVmZm1hbklucHV0OwogICAgaWYgKGRpY3Rpb25hcnkuaHVmZm1hbikgewogICAgICBodWZmbWFuVGFibGVzID0gZ2V0U3ltYm9sRGljdGlvbmFyeUh1ZmZtYW5UYWJsZXMoZGljdGlvbmFyeSwgcmVmZXJyZWRTZWdtZW50cywgdGhpcy5jdXN0b21UYWJsZXMpOwogICAgICBodWZmbWFuSW5wdXQgPSBuZXcgUmVhZGVyKGRhdGEsIHN0YXJ0LCBlbmQpOwogICAgfQogICAgbGV0IHN5bWJvbHMgPSB0aGlzLnN5bWJvbHM7CiAgICBpZiAoIXN5bWJvbHMpIHsKICAgICAgdGhpcy5zeW1ib2xzID0gc3ltYm9scyA9IHt9OwogICAgfQogICAgY29uc3QgaW5wdXRTeW1ib2xzID0gW107CiAgICBmb3IgKGNvbnN0IHJlZmVycmVkU2VnbWVudCBvZiByZWZlcnJlZFNlZ21lbnRzKSB7CiAgICAgIGNvbnN0IHJlZmVycmVkU3ltYm9scyA9IHN5bWJvbHNbcmVmZXJyZWRTZWdtZW50XTsKICAgICAgaWYgKHJlZmVycmVkU3ltYm9scykgewogICAgICAgIGlucHV0U3ltYm9scy5wdXNoKC4uLnJlZmVycmVkU3ltYm9scyk7CiAgICAgIH0KICAgIH0KICAgIGNvbnN0IGRlY29kaW5nQ29udGV4dCA9IG5ldyBEZWNvZGluZ0NvbnRleHQoZGF0YSwgc3RhcnQsIGVuZCk7CiAgICBzeW1ib2xzW2N1cnJlbnRTZWdtZW50XSA9IGRlY29kZVN5bWJvbERpY3Rpb25hcnkoZGljdGlvbmFyeS5odWZmbWFuLCBkaWN0aW9uYXJ5LnJlZmluZW1lbnQsIGlucHV0U3ltYm9scywgZGljdGlvbmFyeS5udW1iZXJPZk5ld1N5bWJvbHMsIGRpY3Rpb25hcnkubnVtYmVyT2ZFeHBvcnRlZFN5bWJvbHMsIGh1ZmZtYW5UYWJsZXMsIGRpY3Rpb25hcnkudGVtcGxhdGUsIGRpY3Rpb25hcnkuYXQsIGRpY3Rpb25hcnkucmVmaW5lbWVudFRlbXBsYXRlLCBkaWN0aW9uYXJ5LnJlZmluZW1lbnRBdCwgZGVjb2RpbmdDb250ZXh0LCBodWZmbWFuSW5wdXQpOwogIH0KICBvbkltbWVkaWF0ZVRleHRSZWdpb24ocmVnaW9uLCByZWZlcnJlZFNlZ21lbnRzLCBkYXRhLCBzdGFydCwgZW5kKSB7CiAgICBjb25zdCByZWdpb25JbmZvID0gcmVnaW9uLmluZm87CiAgICBsZXQgaHVmZm1hblRhYmxlcywgaHVmZm1hbklucHV0OwogICAgY29uc3Qgc3ltYm9scyA9IHRoaXMuc3ltYm9sczsKICAgIGNvbnN0IGlucHV0U3ltYm9scyA9IFtdOwogICAgZm9yIChjb25zdCByZWZlcnJlZFNlZ21lbnQgb2YgcmVmZXJyZWRTZWdtZW50cykgewogICAgICBjb25zdCByZWZlcnJlZFN5bWJvbHMgPSBzeW1ib2xzW3JlZmVycmVkU2VnbWVudF07CiAgICAgIGlmIChyZWZlcnJlZFN5bWJvbHMpIHsKICAgICAgICBpbnB1dFN5bWJvbHMucHVzaCguLi5yZWZlcnJlZFN5bWJvbHMpOwogICAgICB9CiAgICB9CiAgICBjb25zdCBzeW1ib2xDb2RlTGVuZ3RoID0gbG9nMihpbnB1dFN5bWJvbHMubGVuZ3RoKTsKICAgIGlmIChyZWdpb24uaHVmZm1hbikgewogICAgICBodWZmbWFuSW5wdXQgPSBuZXcgUmVhZGVyKGRhdGEsIHN0YXJ0LCBlbmQpOwogICAgICBodWZmbWFuVGFibGVzID0gZ2V0VGV4dFJlZ2lvbkh1ZmZtYW5UYWJsZXMocmVnaW9uLCByZWZlcnJlZFNlZ21lbnRzLCB0aGlzLmN1c3RvbVRhYmxlcywgaW5wdXRTeW1ib2xzLmxlbmd0aCwgaHVmZm1hbklucHV0KTsKICAgIH0KICAgIGNvbnN0IGRlY29kaW5nQ29udGV4dCA9IG5ldyBEZWNvZGluZ0NvbnRleHQoZGF0YSwgc3RhcnQsIGVuZCk7CiAgICBjb25zdCBiaXRtYXAgPSBkZWNvZGVUZXh0UmVnaW9uKHJlZ2lvbi5odWZmbWFuLCByZWdpb24ucmVmaW5lbWVudCwgcmVnaW9uSW5mby53aWR0aCwgcmVnaW9uSW5mby5oZWlnaHQsIHJlZ2lvbi5kZWZhdWx0UGl4ZWxWYWx1ZSwgcmVnaW9uLm51bWJlck9mU3ltYm9sSW5zdGFuY2VzLCByZWdpb24uc3RyaXBTaXplLCBpbnB1dFN5bWJvbHMsIHN5bWJvbENvZGVMZW5ndGgsIHJlZ2lvbi50cmFuc3Bvc2VkLCByZWdpb24uZHNPZmZzZXQsIHJlZ2lvbi5yZWZlcmVuY2VDb3JuZXIsIHJlZ2lvbi5jb21iaW5hdGlvbk9wZXJhdG9yLCBodWZmbWFuVGFibGVzLCByZWdpb24ucmVmaW5lbWVudFRlbXBsYXRlLCByZWdpb24ucmVmaW5lbWVudEF0LCBkZWNvZGluZ0NvbnRleHQsIHJlZ2lvbi5sb2dTdHJpcFNpemUsIGh1ZmZtYW5JbnB1dCk7CiAgICB0aGlzLmRyYXdCaXRtYXAocmVnaW9uSW5mbywgYml0bWFwKTsKICB9CiAgb25JbW1lZGlhdGVMb3NzbGVzc1RleHRSZWdpb24oKSB7CiAgICB0aGlzLm9uSW1tZWRpYXRlVGV4dFJlZ2lvbiguLi5hcmd1bWVudHMpOwogIH0KICBvblBhdHRlcm5EaWN0aW9uYXJ5KGRpY3Rpb25hcnksIGN1cnJlbnRTZWdtZW50LCBkYXRhLCBzdGFydCwgZW5kKSB7CiAgICBsZXQgcGF0dGVybnMgPSB0aGlzLnBhdHRlcm5zOwogICAgaWYgKCFwYXR0ZXJucykgewogICAgICB0aGlzLnBhdHRlcm5zID0gcGF0dGVybnMgPSB7fTsKICAgIH0KICAgIGNvbnN0IGRlY29kaW5nQ29udGV4dCA9IG5ldyBEZWNvZGluZ0NvbnRleHQoZGF0YSwgc3RhcnQsIGVuZCk7CiAgICBwYXR0ZXJuc1tjdXJyZW50U2VnbWVudF0gPSBkZWNvZGVQYXR0ZXJuRGljdGlvbmFyeShkaWN0aW9uYXJ5Lm1tciwgZGljdGlvbmFyeS5wYXR0ZXJuV2lkdGgsIGRpY3Rpb25hcnkucGF0dGVybkhlaWdodCwgZGljdGlvbmFyeS5tYXhQYXR0ZXJuSW5kZXgsIGRpY3Rpb25hcnkudGVtcGxhdGUsIGRlY29kaW5nQ29udGV4dCk7CiAgfQogIG9uSW1tZWRpYXRlSGFsZnRvbmVSZWdpb24ocmVnaW9uLCByZWZlcnJlZFNlZ21lbnRzLCBkYXRhLCBzdGFydCwgZW5kKSB7CiAgICBjb25zdCBwYXR0ZXJucyA9IHRoaXMucGF0dGVybnNbcmVmZXJyZWRTZWdtZW50c1swXV07CiAgICBjb25zdCByZWdpb25JbmZvID0gcmVnaW9uLmluZm87CiAgICBjb25zdCBkZWNvZGluZ0NvbnRleHQgPSBuZXcgRGVjb2RpbmdDb250ZXh0KGRhdGEsIHN0YXJ0LCBlbmQpOwogICAgY29uc3QgYml0bWFwID0gZGVjb2RlSGFsZnRvbmVSZWdpb24ocmVnaW9uLm1tciwgcGF0dGVybnMsIHJlZ2lvbi50ZW1wbGF0ZSwgcmVnaW9uSW5mby53aWR0aCwgcmVnaW9uSW5mby5oZWlnaHQsIHJlZ2lvbi5kZWZhdWx0UGl4ZWxWYWx1ZSwgcmVnaW9uLmVuYWJsZVNraXAsIHJlZ2lvbi5jb21iaW5hdGlvbk9wZXJhdG9yLCByZWdpb24uZ3JpZFdpZHRoLCByZWdpb24uZ3JpZEhlaWdodCwgcmVnaW9uLmdyaWRPZmZzZXRYLCByZWdpb24uZ3JpZE9mZnNldFksIHJlZ2lvbi5ncmlkVmVjdG9yWCwgcmVnaW9uLmdyaWRWZWN0b3JZLCBkZWNvZGluZ0NvbnRleHQpOwogICAgdGhpcy5kcmF3Qml0bWFwKHJlZ2lvbkluZm8sIGJpdG1hcCk7CiAgfQogIG9uSW1tZWRpYXRlTG9zc2xlc3NIYWxmdG9uZVJlZ2lvbigpIHsKICAgIHRoaXMub25JbW1lZGlhdGVIYWxmdG9uZVJlZ2lvbiguLi5hcmd1bWVudHMpOwogIH0KICBvblRhYmxlcyhjdXJyZW50U2VnbWVudCwgZGF0YSwgc3RhcnQsIGVuZCkgewogICAgbGV0IGN1c3RvbVRhYmxlcyA9IHRoaXMuY3VzdG9tVGFibGVzOwogICAgaWYgKCFjdXN0b21UYWJsZXMpIHsKICAgICAgdGhpcy5jdXN0b21UYWJsZXMgPSBjdXN0b21UYWJsZXMgPSB7fTsKICAgIH0KICAgIGN1c3RvbVRhYmxlc1tjdXJyZW50U2VnbWVudF0gPSBkZWNvZGVUYWJsZXNTZWdtZW50KGRhdGEsIHN0YXJ0LCBlbmQpOwogIH0KfQpjbGFzcyBIdWZmbWFuTGluZSB7CiAgY29uc3RydWN0b3IobGluZURhdGEpIHsKICAgIGlmIChsaW5lRGF0YS5sZW5ndGggPT09IDIpIHsKICAgICAgdGhpcy5pc09PQiA9IHRydWU7CiAgICAgIHRoaXMucmFuZ2VMb3cgPSAwOwogICAgICB0aGlzLnByZWZpeExlbmd0aCA9IGxpbmVEYXRhWzBdOwogICAgICB0aGlzLnJhbmdlTGVuZ3RoID0gMDsKICAgICAgdGhpcy5wcmVmaXhDb2RlID0gbGluZURhdGFbMV07CiAgICAgIHRoaXMuaXNMb3dlclJhbmdlID0gZmFsc2U7CiAgICB9IGVsc2UgewogICAgICB0aGlzLmlzT09CID0gZmFsc2U7CiAgICAgIHRoaXMucmFuZ2VMb3cgPSBsaW5lRGF0YVswXTsKICAgICAgdGhpcy5wcmVmaXhMZW5ndGggPSBsaW5lRGF0YVsxXTsKICAgICAgdGhpcy5yYW5nZUxlbmd0aCA9IGxpbmVEYXRhWzJdOwogICAgICB0aGlzLnByZWZpeENvZGUgPSBsaW5lRGF0YVszXTsKICAgICAgdGhpcy5pc0xvd2VyUmFuZ2UgPSBsaW5lRGF0YVs0XSA9PT0gImxvd2VyIjsKICAgIH0KICB9Cn0KY2xhc3MgSHVmZm1hblRyZWVOb2RlIHsKICBjb25zdHJ1Y3RvcihsaW5lKSB7CiAgICB0aGlzLmNoaWxkcmVuID0gW107CiAgICBpZiAobGluZSkgewogICAgICB0aGlzLmlzTGVhZiA9IHRydWU7CiAgICAgIHRoaXMucmFuZ2VMZW5ndGggPSBsaW5lLnJhbmdlTGVuZ3RoOwogICAgICB0aGlzLnJhbmdlTG93ID0gbGluZS5yYW5nZUxvdzsKICAgICAgdGhpcy5pc0xvd2VyUmFuZ2UgPSBsaW5lLmlzTG93ZXJSYW5nZTsKICAgICAgdGhpcy5pc09PQiA9IGxpbmUuaXNPT0I7CiAgICB9IGVsc2UgewogICAgICB0aGlzLmlzTGVhZiA9IGZhbHNlOwogICAgfQogIH0KICBidWlsZFRyZWUobGluZSwgc2hpZnQpIHsKICAgIGNvbnN0IGJpdCA9IGxpbmUucHJlZml4Q29kZSA+PiBzaGlmdCAmIDE7CiAgICBpZiAoc2hpZnQgPD0gMCkgewogICAgICB0aGlzLmNoaWxkcmVuW2JpdF0gPSBuZXcgSHVmZm1hblRyZWVOb2RlKGxpbmUpOwogICAgfSBlbHNlIHsKICAgICAgbGV0IG5vZGUgPSB0aGlzLmNoaWxkcmVuW2JpdF07CiAgICAgIGlmICghbm9kZSkgewogICAgICAgIHRoaXMuY2hpbGRyZW5bYml0XSA9IG5vZGUgPSBuZXcgSHVmZm1hblRyZWVOb2RlKG51bGwpOwogICAgICB9CiAgICAgIG5vZGUuYnVpbGRUcmVlKGxpbmUsIHNoaWZ0IC0gMSk7CiAgICB9CiAgfQogIGRlY29kZU5vZGUocmVhZGVyKSB7CiAgICBpZiAodGhpcy5pc0xlYWYpIHsKICAgICAgaWYgKHRoaXMuaXNPT0IpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgICBjb25zdCBodE9mZnNldCA9IHJlYWRlci5yZWFkQml0cyh0aGlzLnJhbmdlTGVuZ3RoKTsKICAgICAgcmV0dXJuIHRoaXMucmFuZ2VMb3cgKyAodGhpcy5pc0xvd2VyUmFuZ2UgPyAtaHRPZmZzZXQgOiBodE9mZnNldCk7CiAgICB9CiAgICBjb25zdCBub2RlID0gdGhpcy5jaGlsZHJlbltyZWFkZXIucmVhZEJpdCgpXTsKICAgIGlmICghbm9kZSkgewogICAgICB0aHJvdyBuZXcgSmJpZzJFcnJvcigiaW52YWxpZCBIdWZmbWFuIGRhdGEiKTsKICAgIH0KICAgIHJldHVybiBub2RlLmRlY29kZU5vZGUocmVhZGVyKTsKICB9Cn0KY2xhc3MgSHVmZm1hblRhYmxlIHsKICBjb25zdHJ1Y3RvcihsaW5lcywgcHJlZml4Q29kZXNEb25lKSB7CiAgICBpZiAoIXByZWZpeENvZGVzRG9uZSkgewogICAgICB0aGlzLmFzc2lnblByZWZpeENvZGVzKGxpbmVzKTsKICAgIH0KICAgIHRoaXMucm9vdE5vZGUgPSBuZXcgSHVmZm1hblRyZWVOb2RlKG51bGwpOwogICAgZm9yIChsZXQgaSA9IDAsIGlpID0gbGluZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgICBjb25zdCBsaW5lID0gbGluZXNbaV07CiAgICAgIGlmIChsaW5lLnByZWZpeExlbmd0aCA+IDApIHsKICAgICAgICB0aGlzLnJvb3ROb2RlLmJ1aWxkVHJlZShsaW5lLCBsaW5lLnByZWZpeExlbmd0aCAtIDEpOwogICAgICB9CiAgICB9CiAgfQogIGRlY29kZShyZWFkZXIpIHsKICAgIHJldHVybiB0aGlzLnJvb3ROb2RlLmRlY29kZU5vZGUocmVhZGVyKTsKICB9CiAgYXNzaWduUHJlZml4Q29kZXMobGluZXMpIHsKICAgIGNvbnN0IGxpbmVzTGVuZ3RoID0gbGluZXMubGVuZ3RoOwogICAgbGV0IHByZWZpeExlbmd0aE1heCA9IDA7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzTGVuZ3RoOyBpKyspIHsKICAgICAgcHJlZml4TGVuZ3RoTWF4ID0gTWF0aC5tYXgocHJlZml4TGVuZ3RoTWF4LCBsaW5lc1tpXS5wcmVmaXhMZW5ndGgpOwogICAgfQogICAgY29uc3QgaGlzdG9ncmFtID0gbmV3IFVpbnQzMkFycmF5KHByZWZpeExlbmd0aE1heCArIDEpOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lc0xlbmd0aDsgaSsrKSB7CiAgICAgIGhpc3RvZ3JhbVtsaW5lc1tpXS5wcmVmaXhMZW5ndGhdKys7CiAgICB9CiAgICBsZXQgY3VycmVudExlbmd0aCA9IDEsCiAgICAgIGZpcnN0Q29kZSA9IDAsCiAgICAgIGN1cnJlbnRDb2RlLAogICAgICBjdXJyZW50VGVtcCwKICAgICAgbGluZTsKICAgIGhpc3RvZ3JhbVswXSA9IDA7CiAgICB3aGlsZSAoY3VycmVudExlbmd0aCA8PSBwcmVmaXhMZW5ndGhNYXgpIHsKICAgICAgZmlyc3RDb2RlID0gZmlyc3RDb2RlICsgaGlzdG9ncmFtW2N1cnJlbnRMZW5ndGggLSAxXSA8PCAxOwogICAgICBjdXJyZW50Q29kZSA9IGZpcnN0Q29kZTsKICAgICAgY3VycmVudFRlbXAgPSAwOwogICAgICB3aGlsZSAoY3VycmVudFRlbXAgPCBsaW5lc0xlbmd0aCkgewogICAgICAgIGxpbmUgPSBsaW5lc1tjdXJyZW50VGVtcF07CiAgICAgICAgaWYgKGxpbmUucHJlZml4TGVuZ3RoID09PSBjdXJyZW50TGVuZ3RoKSB7CiAgICAgICAgICBsaW5lLnByZWZpeENvZGUgPSBjdXJyZW50Q29kZTsKICAgICAgICAgIGN1cnJlbnRDb2RlKys7CiAgICAgICAgfQogICAgICAgIGN1cnJlbnRUZW1wKys7CiAgICAgIH0KICAgICAgY3VycmVudExlbmd0aCsrOwogICAgfQogIH0KfQpmdW5jdGlvbiBkZWNvZGVUYWJsZXNTZWdtZW50KGRhdGEsIHN0YXJ0LCBlbmQpIHsKICBjb25zdCBmbGFncyA9IGRhdGFbc3RhcnRdOwogIGNvbnN0IGxvd2VzdFZhbHVlID0gcmVhZFVpbnQzMihkYXRhLCBzdGFydCArIDEpICYgMHhmZmZmZmZmZjsKICBjb25zdCBoaWdoZXN0VmFsdWUgPSByZWFkVWludDMyKGRhdGEsIHN0YXJ0ICsgNSkgJiAweGZmZmZmZmZmOwogIGNvbnN0IHJlYWRlciA9IG5ldyBSZWFkZXIoZGF0YSwgc3RhcnQgKyA5LCBlbmQpOwogIGNvbnN0IHByZWZpeFNpemVCaXRzID0gKGZsYWdzID4+IDEgJiA3KSArIDE7CiAgY29uc3QgcmFuZ2VTaXplQml0cyA9IChmbGFncyA+PiA0ICYgNykgKyAxOwogIGNvbnN0IGxpbmVzID0gW107CiAgbGV0IHByZWZpeExlbmd0aCwKICAgIHJhbmdlTGVuZ3RoLAogICAgY3VycmVudFJhbmdlTG93ID0gbG93ZXN0VmFsdWU7CiAgZG8gewogICAgcHJlZml4TGVuZ3RoID0gcmVhZGVyLnJlYWRCaXRzKHByZWZpeFNpemVCaXRzKTsKICAgIHJhbmdlTGVuZ3RoID0gcmVhZGVyLnJlYWRCaXRzKHJhbmdlU2l6ZUJpdHMpOwogICAgbGluZXMucHVzaChuZXcgSHVmZm1hbkxpbmUoW2N1cnJlbnRSYW5nZUxvdywgcHJlZml4TGVuZ3RoLCByYW5nZUxlbmd0aCwgMF0pKTsKICAgIGN1cnJlbnRSYW5nZUxvdyArPSAxIDw8IHJhbmdlTGVuZ3RoOwogIH0gd2hpbGUgKGN1cnJlbnRSYW5nZUxvdyA8IGhpZ2hlc3RWYWx1ZSk7CiAgcHJlZml4TGVuZ3RoID0gcmVhZGVyLnJlYWRCaXRzKHByZWZpeFNpemVCaXRzKTsKICBsaW5lcy5wdXNoKG5ldyBIdWZmbWFuTGluZShbbG93ZXN0VmFsdWUgLSAxLCBwcmVmaXhMZW5ndGgsIDMyLCAwLCAibG93ZXIiXSkpOwogIHByZWZpeExlbmd0aCA9IHJlYWRlci5yZWFkQml0cyhwcmVmaXhTaXplQml0cyk7CiAgbGluZXMucHVzaChuZXcgSHVmZm1hbkxpbmUoW2hpZ2hlc3RWYWx1ZSwgcHJlZml4TGVuZ3RoLCAzMiwgMF0pKTsKICBpZiAoZmxhZ3MgJiAxKSB7CiAgICBwcmVmaXhMZW5ndGggPSByZWFkZXIucmVhZEJpdHMocHJlZml4U2l6ZUJpdHMpOwogICAgbGluZXMucHVzaChuZXcgSHVmZm1hbkxpbmUoW3ByZWZpeExlbmd0aCwgMF0pKTsKICB9CiAgcmV0dXJuIG5ldyBIdWZmbWFuVGFibGUobGluZXMsIGZhbHNlKTsKfQpjb25zdCBzdGFuZGFyZFRhYmxlc0NhY2hlID0ge307CmZ1bmN0aW9uIGdldFN0YW5kYXJkVGFibGUobnVtYmVyKSB7CiAgbGV0IHRhYmxlID0gc3RhbmRhcmRUYWJsZXNDYWNoZVtudW1iZXJdOwogIGlmICh0YWJsZSkgewogICAgcmV0dXJuIHRhYmxlOwogIH0KICBsZXQgbGluZXM7CiAgc3dpdGNoIChudW1iZXIpIHsKICAgIGNhc2UgMToKICAgICAgbGluZXMgPSBbWzAsIDEsIDQsIDB4MF0sIFsxNiwgMiwgOCwgMHgyXSwgWzI3MiwgMywgMTYsIDB4Nl0sIFs2NTgwOCwgMywgMzIsIDB4N11dOwogICAgICBicmVhazsKICAgIGNhc2UgMjoKICAgICAgbGluZXMgPSBbWzAsIDEsIDAsIDB4MF0sIFsxLCAyLCAwLCAweDJdLCBbMiwgMywgMCwgMHg2XSwgWzMsIDQsIDMsIDB4ZV0sIFsxMSwgNSwgNiwgMHgxZV0sIFs3NSwgNiwgMzIsIDB4M2VdLCBbNiwgMHgzZl1dOwogICAgICBicmVhazsKICAgIGNhc2UgMzoKICAgICAgbGluZXMgPSBbWy0yNTYsIDgsIDgsIDB4ZmVdLCBbMCwgMSwgMCwgMHgwXSwgWzEsIDIsIDAsIDB4Ml0sIFsyLCAzLCAwLCAweDZdLCBbMywgNCwgMywgMHhlXSwgWzExLCA1LCA2LCAweDFlXSwgWy0yNTcsIDgsIDMyLCAweGZmLCAibG93ZXIiXSwgWzc1LCA3LCAzMiwgMHg3ZV0sIFs2LCAweDNlXV07CiAgICAgIGJyZWFrOwogICAgY2FzZSA0OgogICAgICBsaW5lcyA9IFtbMSwgMSwgMCwgMHgwXSwgWzIsIDIsIDAsIDB4Ml0sIFszLCAzLCAwLCAweDZdLCBbNCwgNCwgMywgMHhlXSwgWzEyLCA1LCA2LCAweDFlXSwgWzc2LCA1LCAzMiwgMHgxZl1dOwogICAgICBicmVhazsKICAgIGNhc2UgNToKICAgICAgbGluZXMgPSBbWy0yNTUsIDcsIDgsIDB4N2VdLCBbMSwgMSwgMCwgMHgwXSwgWzIsIDIsIDAsIDB4Ml0sIFszLCAzLCAwLCAweDZdLCBbNCwgNCwgMywgMHhlXSwgWzEyLCA1LCA2LCAweDFlXSwgWy0yNTYsIDcsIDMyLCAweDdmLCAibG93ZXIiXSwgWzc2LCA2LCAzMiwgMHgzZV1dOwogICAgICBicmVhazsKICAgIGNhc2UgNjoKICAgICAgbGluZXMgPSBbWy0yMDQ4LCA1LCAxMCwgMHgxY10sIFstMTAyNCwgNCwgOSwgMHg4XSwgWy01MTIsIDQsIDgsIDB4OV0sIFstMjU2LCA0LCA3LCAweGFdLCBbLTEyOCwgNSwgNiwgMHgxZF0sIFstNjQsIDUsIDUsIDB4MWVdLCBbLTMyLCA0LCA1LCAweGJdLCBbMCwgMiwgNywgMHgwXSwgWzEyOCwgMywgNywgMHgyXSwgWzI1NiwgMywgOCwgMHgzXSwgWzUxMiwgNCwgOSwgMHhjXSwgWzEwMjQsIDQsIDEwLCAweGRdLCBbLTIwNDksIDYsIDMyLCAweDNlLCAibG93ZXIiXSwgWzIwNDgsIDYsIDMyLCAweDNmXV07CiAgICAgIGJyZWFrOwogICAgY2FzZSA3OgogICAgICBsaW5lcyA9IFtbLTEwMjQsIDQsIDksIDB4OF0sIFstNTEyLCAzLCA4LCAweDBdLCBbLTI1NiwgNCwgNywgMHg5XSwgWy0xMjgsIDUsIDYsIDB4MWFdLCBbLTY0LCA1LCA1LCAweDFiXSwgWy0zMiwgNCwgNSwgMHhhXSwgWzAsIDQsIDUsIDB4Yl0sIFszMiwgNSwgNSwgMHgxY10sIFs2NCwgNSwgNiwgMHgxZF0sIFsxMjgsIDQsIDcsIDB4Y10sIFsyNTYsIDMsIDgsIDB4MV0sIFs1MTIsIDMsIDksIDB4Ml0sIFsxMDI0LCAzLCAxMCwgMHgzXSwgWy0xMDI1LCA1LCAzMiwgMHgxZSwgImxvd2VyIl0sIFsyMDQ4LCA1LCAzMiwgMHgxZl1dOwogICAgICBicmVhazsKICAgIGNhc2UgODoKICAgICAgbGluZXMgPSBbWy0xNSwgOCwgMywgMHhmY10sIFstNywgOSwgMSwgMHgxZmNdLCBbLTUsIDgsIDEsIDB4ZmRdLCBbLTMsIDksIDAsIDB4MWZkXSwgWy0yLCA3LCAwLCAweDdjXSwgWy0xLCA0LCAwLCAweGFdLCBbMCwgMiwgMSwgMHgwXSwgWzIsIDUsIDAsIDB4MWFdLCBbMywgNiwgMCwgMHgzYV0sIFs0LCAzLCA0LCAweDRdLCBbMjAsIDYsIDEsIDB4M2JdLCBbMjIsIDQsIDQsIDB4Yl0sIFszOCwgNCwgNSwgMHhjXSwgWzcwLCA1LCA2LCAweDFiXSwgWzEzNCwgNSwgNywgMHgxY10sIFsyNjIsIDYsIDcsIDB4M2NdLCBbMzkwLCA3LCA4LCAweDdkXSwgWzY0NiwgNiwgMTAsIDB4M2RdLCBbLTE2LCA5LCAzMiwgMHgxZmUsICJsb3dlciJdLCBbMTY3MCwgOSwgMzIsIDB4MWZmXSwgWzIsIDB4MV1dOwogICAgICBicmVhazsKICAgIGNhc2UgOToKICAgICAgbGluZXMgPSBbWy0zMSwgOCwgNCwgMHhmY10sIFstMTUsIDksIDIsIDB4MWZjXSwgWy0xMSwgOCwgMiwgMHhmZF0sIFstNywgOSwgMSwgMHgxZmRdLCBbLTUsIDcsIDEsIDB4N2NdLCBbLTMsIDQsIDEsIDB4YV0sIFstMSwgMywgMSwgMHgyXSwgWzEsIDMsIDEsIDB4M10sIFszLCA1LCAxLCAweDFhXSwgWzUsIDYsIDEsIDB4M2FdLCBbNywgMywgNSwgMHg0XSwgWzM5LCA2LCAyLCAweDNiXSwgWzQzLCA0LCA1LCAweGJdLCBbNzUsIDQsIDYsIDB4Y10sIFsxMzksIDUsIDcsIDB4MWJdLCBbMjY3LCA1LCA4LCAweDFjXSwgWzUyMywgNiwgOCwgMHgzY10sIFs3NzksIDcsIDksIDB4N2RdLCBbMTI5MSwgNiwgMTEsIDB4M2RdLCBbLTMyLCA5LCAzMiwgMHgxZmUsICJsb3dlciJdLCBbMzMzOSwgOSwgMzIsIDB4MWZmXSwgWzIsIDB4MF1dOwogICAgICBicmVhazsKICAgIGNhc2UgMTA6CiAgICAgIGxpbmVzID0gW1stMjEsIDcsIDQsIDB4N2FdLCBbLTUsIDgsIDAsIDB4ZmNdLCBbLTQsIDcsIDAsIDB4N2JdLCBbLTMsIDUsIDAsIDB4MThdLCBbLTIsIDIsIDIsIDB4MF0sIFsyLCA1LCAwLCAweDE5XSwgWzMsIDYsIDAsIDB4MzZdLCBbNCwgNywgMCwgMHg3Y10sIFs1LCA4LCAwLCAweGZkXSwgWzYsIDIsIDYsIDB4MV0sIFs3MCwgNSwgNSwgMHgxYV0sIFsxMDIsIDYsIDUsIDB4MzddLCBbMTM0LCA2LCA2LCAweDM4XSwgWzE5OCwgNiwgNywgMHgzOV0sIFszMjYsIDYsIDgsIDB4M2FdLCBbNTgyLCA2LCA5LCAweDNiXSwgWzEwOTQsIDYsIDEwLCAweDNjXSwgWzIxMTgsIDcsIDExLCAweDdkXSwgWy0yMiwgOCwgMzIsIDB4ZmUsICJsb3dlciJdLCBbNDE2NiwgOCwgMzIsIDB4ZmZdLCBbMiwgMHgyXV07CiAgICAgIGJyZWFrOwogICAgY2FzZSAxMToKICAgICAgbGluZXMgPSBbWzEsIDEsIDAsIDB4MF0sIFsyLCAyLCAxLCAweDJdLCBbNCwgNCwgMCwgMHhjXSwgWzUsIDQsIDEsIDB4ZF0sIFs3LCA1LCAxLCAweDFjXSwgWzksIDUsIDIsIDB4MWRdLCBbMTMsIDYsIDIsIDB4M2NdLCBbMTcsIDcsIDIsIDB4N2FdLCBbMjEsIDcsIDMsIDB4N2JdLCBbMjksIDcsIDQsIDB4N2NdLCBbNDUsIDcsIDUsIDB4N2RdLCBbNzcsIDcsIDYsIDB4N2VdLCBbMTQxLCA3LCAzMiwgMHg3Zl1dOwogICAgICBicmVhazsKICAgIGNhc2UgMTI6CiAgICAgIGxpbmVzID0gW1sxLCAxLCAwLCAweDBdLCBbMiwgMiwgMCwgMHgyXSwgWzMsIDMsIDEsIDB4Nl0sIFs1LCA1LCAwLCAweDFjXSwgWzYsIDUsIDEsIDB4MWRdLCBbOCwgNiwgMSwgMHgzY10sIFsxMCwgNywgMCwgMHg3YV0sIFsxMSwgNywgMSwgMHg3Yl0sIFsxMywgNywgMiwgMHg3Y10sIFsxNywgNywgMywgMHg3ZF0sIFsyNSwgNywgNCwgMHg3ZV0sIFs0MSwgOCwgNSwgMHhmZV0sIFs3MywgOCwgMzIsIDB4ZmZdXTsKICAgICAgYnJlYWs7CiAgICBjYXNlIDEzOgogICAgICBsaW5lcyA9IFtbMSwgMSwgMCwgMHgwXSwgWzIsIDMsIDAsIDB4NF0sIFszLCA0LCAwLCAweGNdLCBbNCwgNSwgMCwgMHgxY10sIFs1LCA0LCAxLCAweGRdLCBbNywgMywgMywgMHg1XSwgWzE1LCA2LCAxLCAweDNhXSwgWzE3LCA2LCAyLCAweDNiXSwgWzIxLCA2LCAzLCAweDNjXSwgWzI5LCA2LCA0LCAweDNkXSwgWzQ1LCA2LCA1LCAweDNlXSwgWzc3LCA3LCA2LCAweDdlXSwgWzE0MSwgNywgMzIsIDB4N2ZdXTsKICAgICAgYnJlYWs7CiAgICBjYXNlIDE0OgogICAgICBsaW5lcyA9IFtbLTIsIDMsIDAsIDB4NF0sIFstMSwgMywgMCwgMHg1XSwgWzAsIDEsIDAsIDB4MF0sIFsxLCAzLCAwLCAweDZdLCBbMiwgMywgMCwgMHg3XV07CiAgICAgIGJyZWFrOwogICAgY2FzZSAxNToKICAgICAgbGluZXMgPSBbWy0yNCwgNywgNCwgMHg3Y10sIFstOCwgNiwgMiwgMHgzY10sIFstNCwgNSwgMSwgMHgxY10sIFstMiwgNCwgMCwgMHhjXSwgWy0xLCAzLCAwLCAweDRdLCBbMCwgMSwgMCwgMHgwXSwgWzEsIDMsIDAsIDB4NV0sIFsyLCA0LCAwLCAweGRdLCBbMywgNSwgMSwgMHgxZF0sIFs1LCA2LCAyLCAweDNkXSwgWzksIDcsIDQsIDB4N2RdLCBbLTI1LCA3LCAzMiwgMHg3ZSwgImxvd2VyIl0sIFsyNSwgNywgMzIsIDB4N2ZdXTsKICAgICAgYnJlYWs7CiAgICBkZWZhdWx0OgogICAgICB0aHJvdyBuZXcgSmJpZzJFcnJvcihgc3RhbmRhcmQgdGFibGUgQi4ke251bWJlcn0gZG9lcyBub3QgZXhpc3RgKTsKICB9CiAgZm9yIChsZXQgaSA9IDAsIGlpID0gbGluZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgbGluZXNbaV0gPSBuZXcgSHVmZm1hbkxpbmUobGluZXNbaV0pOwogIH0KICB0YWJsZSA9IG5ldyBIdWZmbWFuVGFibGUobGluZXMsIHRydWUpOwogIHN0YW5kYXJkVGFibGVzQ2FjaGVbbnVtYmVyXSA9IHRhYmxlOwogIHJldHVybiB0YWJsZTsKfQpjbGFzcyBSZWFkZXIgewogIGNvbnN0cnVjdG9yKGRhdGEsIHN0YXJ0LCBlbmQpIHsKICAgIHRoaXMuZGF0YSA9IGRhdGE7CiAgICB0aGlzLnN0YXJ0ID0gc3RhcnQ7CiAgICB0aGlzLmVuZCA9IGVuZDsKICAgIHRoaXMucG9zaXRpb24gPSBzdGFydDsKICAgIHRoaXMuc2hpZnQgPSAtMTsKICAgIHRoaXMuY3VycmVudEJ5dGUgPSAwOwogIH0KICByZWFkQml0KCkgewogICAgaWYgKHRoaXMuc2hpZnQgPCAwKSB7CiAgICAgIGlmICh0aGlzLnBvc2l0aW9uID49IHRoaXMuZW5kKSB7CiAgICAgICAgdGhyb3cgbmV3IEpiaWcyRXJyb3IoImVuZCBvZiBkYXRhIHdoaWxlIHJlYWRpbmcgYml0Iik7CiAgICAgIH0KICAgICAgdGhpcy5jdXJyZW50Qnl0ZSA9IHRoaXMuZGF0YVt0aGlzLnBvc2l0aW9uKytdOwogICAgICB0aGlzLnNoaWZ0ID0gNzsKICAgIH0KICAgIGNvbnN0IGJpdCA9IHRoaXMuY3VycmVudEJ5dGUgPj4gdGhpcy5zaGlmdCAmIDE7CiAgICB0aGlzLnNoaWZ0LS07CiAgICByZXR1cm4gYml0OwogIH0KICByZWFkQml0cyhudW1CaXRzKSB7CiAgICBsZXQgcmVzdWx0ID0gMCwKICAgICAgaTsKICAgIGZvciAoaSA9IG51bUJpdHMgLSAxOyBpID49IDA7IGktLSkgewogICAgICByZXN1bHQgfD0gdGhpcy5yZWFkQml0KCkgPDwgaTsKICAgIH0KICAgIHJldHVybiByZXN1bHQ7CiAgfQogIGJ5dGVBbGlnbigpIHsKICAgIHRoaXMuc2hpZnQgPSAtMTsKICB9CiAgbmV4dCgpIHsKICAgIGlmICh0aGlzLnBvc2l0aW9uID49IHRoaXMuZW5kKSB7CiAgICAgIHJldHVybiAtMTsKICAgIH0KICAgIHJldHVybiB0aGlzLmRhdGFbdGhpcy5wb3NpdGlvbisrXTsKICB9Cn0KZnVuY3Rpb24gZ2V0Q3VzdG9tSHVmZm1hblRhYmxlKGluZGV4LCByZWZlcnJlZFRvLCBjdXN0b21UYWJsZXMpIHsKICBsZXQgY3VycmVudEluZGV4ID0gMDsKICBmb3IgKGxldCBpID0gMCwgaWkgPSByZWZlcnJlZFRvLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgIGNvbnN0IHRhYmxlID0gY3VzdG9tVGFibGVzW3JlZmVycmVkVG9baV1dOwogICAgaWYgKHRhYmxlKSB7CiAgICAgIGlmIChpbmRleCA9PT0gY3VycmVudEluZGV4KSB7CiAgICAgICAgcmV0dXJuIHRhYmxlOwogICAgICB9CiAgICAgIGN1cnJlbnRJbmRleCsrOwogICAgfQogIH0KICB0aHJvdyBuZXcgSmJpZzJFcnJvcigiY2FuJ3QgZmluZCBjdXN0b20gSHVmZm1hbiB0YWJsZSIpOwp9CmZ1bmN0aW9uIGdldFRleHRSZWdpb25IdWZmbWFuVGFibGVzKHRleHRSZWdpb24sIHJlZmVycmVkVG8sIGN1c3RvbVRhYmxlcywgbnVtYmVyT2ZTeW1ib2xzLCByZWFkZXIpIHsKICBjb25zdCBjb2RlcyA9IFtdOwogIGZvciAobGV0IGkgPSAwOyBpIDw9IDM0OyBpKyspIHsKICAgIGNvbnN0IGNvZGVMZW5ndGggPSByZWFkZXIucmVhZEJpdHMoNCk7CiAgICBjb2Rlcy5wdXNoKG5ldyBIdWZmbWFuTGluZShbaSwgY29kZUxlbmd0aCwgMCwgMF0pKTsKICB9CiAgY29uc3QgcnVuQ29kZXNUYWJsZSA9IG5ldyBIdWZmbWFuVGFibGUoY29kZXMsIGZhbHNlKTsKICBjb2Rlcy5sZW5ndGggPSAwOwogIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtYmVyT2ZTeW1ib2xzOykgewogICAgY29uc3QgY29kZUxlbmd0aCA9IHJ1bkNvZGVzVGFibGUuZGVjb2RlKHJlYWRlcik7CiAgICBpZiAoY29kZUxlbmd0aCA+PSAzMikgewogICAgICBsZXQgcmVwZWF0ZWRMZW5ndGgsIG51bWJlck9mUmVwZWF0cywgajsKICAgICAgc3dpdGNoIChjb2RlTGVuZ3RoKSB7CiAgICAgICAgY2FzZSAzMjoKICAgICAgICAgIGlmIChpID09PSAwKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBKYmlnMkVycm9yKCJubyBwcmV2aW91cyB2YWx1ZSBpbiBzeW1ib2wgSUQgdGFibGUiKTsKICAgICAgICAgIH0KICAgICAgICAgIG51bWJlck9mUmVwZWF0cyA9IHJlYWRlci5yZWFkQml0cygyKSArIDM7CiAgICAgICAgICByZXBlYXRlZExlbmd0aCA9IGNvZGVzW2kgLSAxXS5wcmVmaXhMZW5ndGg7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIDMzOgogICAgICAgICAgbnVtYmVyT2ZSZXBlYXRzID0gcmVhZGVyLnJlYWRCaXRzKDMpICsgMzsKICAgICAgICAgIHJlcGVhdGVkTGVuZ3RoID0gMDsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgMzQ6CiAgICAgICAgICBudW1iZXJPZlJlcGVhdHMgPSByZWFkZXIucmVhZEJpdHMoNykgKyAxMTsKICAgICAgICAgIHJlcGVhdGVkTGVuZ3RoID0gMDsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICB0aHJvdyBuZXcgSmJpZzJFcnJvcigiaW52YWxpZCBjb2RlIGxlbmd0aCBpbiBzeW1ib2wgSUQgdGFibGUiKTsKICAgICAgfQogICAgICBmb3IgKGogPSAwOyBqIDwgbnVtYmVyT2ZSZXBlYXRzOyBqKyspIHsKICAgICAgICBjb2Rlcy5wdXNoKG5ldyBIdWZmbWFuTGluZShbaSwgcmVwZWF0ZWRMZW5ndGgsIDAsIDBdKSk7CiAgICAgICAgaSsrOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBjb2Rlcy5wdXNoKG5ldyBIdWZmbWFuTGluZShbaSwgY29kZUxlbmd0aCwgMCwgMF0pKTsKICAgICAgaSsrOwogICAgfQogIH0KICByZWFkZXIuYnl0ZUFsaWduKCk7CiAgY29uc3Qgc3ltYm9sSURUYWJsZSA9IG5ldyBIdWZmbWFuVGFibGUoY29kZXMsIGZhbHNlKTsKICBsZXQgY3VzdG9tSW5kZXggPSAwLAogICAgdGFibGVGaXJzdFMsCiAgICB0YWJsZURlbHRhUywKICAgIHRhYmxlRGVsdGFUOwogIHN3aXRjaCAodGV4dFJlZ2lvbi5odWZmbWFuRlMpIHsKICAgIGNhc2UgMDoKICAgIGNhc2UgMToKICAgICAgdGFibGVGaXJzdFMgPSBnZXRTdGFuZGFyZFRhYmxlKHRleHRSZWdpb24uaHVmZm1hbkZTICsgNik7CiAgICAgIGJyZWFrOwogICAgY2FzZSAzOgogICAgICB0YWJsZUZpcnN0UyA9IGdldEN1c3RvbUh1ZmZtYW5UYWJsZShjdXN0b21JbmRleCwgcmVmZXJyZWRUbywgY3VzdG9tVGFibGVzKTsKICAgICAgY3VzdG9tSW5kZXgrKzsKICAgICAgYnJlYWs7CiAgICBkZWZhdWx0OgogICAgICB0aHJvdyBuZXcgSmJpZzJFcnJvcigiaW52YWxpZCBIdWZmbWFuIEZTIHNlbGVjdG9yIik7CiAgfQogIHN3aXRjaCAodGV4dFJlZ2lvbi5odWZmbWFuRFMpIHsKICAgIGNhc2UgMDoKICAgIGNhc2UgMToKICAgIGNhc2UgMjoKICAgICAgdGFibGVEZWx0YVMgPSBnZXRTdGFuZGFyZFRhYmxlKHRleHRSZWdpb24uaHVmZm1hbkRTICsgOCk7CiAgICAgIGJyZWFrOwogICAgY2FzZSAzOgogICAgICB0YWJsZURlbHRhUyA9IGdldEN1c3RvbUh1ZmZtYW5UYWJsZShjdXN0b21JbmRleCwgcmVmZXJyZWRUbywgY3VzdG9tVGFibGVzKTsKICAgICAgY3VzdG9tSW5kZXgrKzsKICAgICAgYnJlYWs7CiAgICBkZWZhdWx0OgogICAgICB0aHJvdyBuZXcgSmJpZzJFcnJvcigiaW52YWxpZCBIdWZmbWFuIERTIHNlbGVjdG9yIik7CiAgfQogIHN3aXRjaCAodGV4dFJlZ2lvbi5odWZmbWFuRFQpIHsKICAgIGNhc2UgMDoKICAgIGNhc2UgMToKICAgIGNhc2UgMjoKICAgICAgdGFibGVEZWx0YVQgPSBnZXRTdGFuZGFyZFRhYmxlKHRleHRSZWdpb24uaHVmZm1hbkRUICsgMTEpOwogICAgICBicmVhazsKICAgIGNhc2UgMzoKICAgICAgdGFibGVEZWx0YVQgPSBnZXRDdXN0b21IdWZmbWFuVGFibGUoY3VzdG9tSW5kZXgsIHJlZmVycmVkVG8sIGN1c3RvbVRhYmxlcyk7CiAgICAgIGN1c3RvbUluZGV4Kys7CiAgICAgIGJyZWFrOwogICAgZGVmYXVsdDoKICAgICAgdGhyb3cgbmV3IEpiaWcyRXJyb3IoImludmFsaWQgSHVmZm1hbiBEVCBzZWxlY3RvciIpOwogIH0KICBpZiAodGV4dFJlZ2lvbi5yZWZpbmVtZW50KSB7CiAgICB0aHJvdyBuZXcgSmJpZzJFcnJvcigicmVmaW5lbWVudCB3aXRoIEh1ZmZtYW4gaXMgbm90IHN1cHBvcnRlZCIpOwogIH0KICByZXR1cm4gewogICAgc3ltYm9sSURUYWJsZSwKICAgIHRhYmxlRmlyc3RTLAogICAgdGFibGVEZWx0YVMsCiAgICB0YWJsZURlbHRhVAogIH07Cn0KZnVuY3Rpb24gZ2V0U3ltYm9sRGljdGlvbmFyeUh1ZmZtYW5UYWJsZXMoZGljdGlvbmFyeSwgcmVmZXJyZWRUbywgY3VzdG9tVGFibGVzKSB7CiAgbGV0IGN1c3RvbUluZGV4ID0gMCwKICAgIHRhYmxlRGVsdGFIZWlnaHQsCiAgICB0YWJsZURlbHRhV2lkdGg7CiAgc3dpdGNoIChkaWN0aW9uYXJ5Lmh1ZmZtYW5ESFNlbGVjdG9yKSB7CiAgICBjYXNlIDA6CiAgICBjYXNlIDE6CiAgICAgIHRhYmxlRGVsdGFIZWlnaHQgPSBnZXRTdGFuZGFyZFRhYmxlKGRpY3Rpb25hcnkuaHVmZm1hbkRIU2VsZWN0b3IgKyA0KTsKICAgICAgYnJlYWs7CiAgICBjYXNlIDM6CiAgICAgIHRhYmxlRGVsdGFIZWlnaHQgPSBnZXRDdXN0b21IdWZmbWFuVGFibGUoY3VzdG9tSW5kZXgsIHJlZmVycmVkVG8sIGN1c3RvbVRhYmxlcyk7CiAgICAgIGN1c3RvbUluZGV4Kys7CiAgICAgIGJyZWFrOwogICAgZGVmYXVsdDoKICAgICAgdGhyb3cgbmV3IEpiaWcyRXJyb3IoImludmFsaWQgSHVmZm1hbiBESCBzZWxlY3RvciIpOwogIH0KICBzd2l0Y2ggKGRpY3Rpb25hcnkuaHVmZm1hbkRXU2VsZWN0b3IpIHsKICAgIGNhc2UgMDoKICAgIGNhc2UgMToKICAgICAgdGFibGVEZWx0YVdpZHRoID0gZ2V0U3RhbmRhcmRUYWJsZShkaWN0aW9uYXJ5Lmh1ZmZtYW5EV1NlbGVjdG9yICsgMik7CiAgICAgIGJyZWFrOwogICAgY2FzZSAzOgogICAgICB0YWJsZURlbHRhV2lkdGggPSBnZXRDdXN0b21IdWZmbWFuVGFibGUoY3VzdG9tSW5kZXgsIHJlZmVycmVkVG8sIGN1c3RvbVRhYmxlcyk7CiAgICAgIGN1c3RvbUluZGV4Kys7CiAgICAgIGJyZWFrOwogICAgZGVmYXVsdDoKICAgICAgdGhyb3cgbmV3IEpiaWcyRXJyb3IoImludmFsaWQgSHVmZm1hbiBEVyBzZWxlY3RvciIpOwogIH0KICBsZXQgdGFibGVCaXRtYXBTaXplLCB0YWJsZUFnZ3JlZ2F0ZUluc3RhbmNlczsKICBpZiAoZGljdGlvbmFyeS5iaXRtYXBTaXplU2VsZWN0b3IpIHsKICAgIHRhYmxlQml0bWFwU2l6ZSA9IGdldEN1c3RvbUh1ZmZtYW5UYWJsZShjdXN0b21JbmRleCwgcmVmZXJyZWRUbywgY3VzdG9tVGFibGVzKTsKICAgIGN1c3RvbUluZGV4Kys7CiAgfSBlbHNlIHsKICAgIHRhYmxlQml0bWFwU2l6ZSA9IGdldFN0YW5kYXJkVGFibGUoMSk7CiAgfQogIGlmIChkaWN0aW9uYXJ5LmFnZ3JlZ2F0aW9uSW5zdGFuY2VzU2VsZWN0b3IpIHsKICAgIHRhYmxlQWdncmVnYXRlSW5zdGFuY2VzID0gZ2V0Q3VzdG9tSHVmZm1hblRhYmxlKGN1c3RvbUluZGV4LCByZWZlcnJlZFRvLCBjdXN0b21UYWJsZXMpOwogIH0gZWxzZSB7CiAgICB0YWJsZUFnZ3JlZ2F0ZUluc3RhbmNlcyA9IGdldFN0YW5kYXJkVGFibGUoMSk7CiAgfQogIHJldHVybiB7CiAgICB0YWJsZURlbHRhSGVpZ2h0LAogICAgdGFibGVEZWx0YVdpZHRoLAogICAgdGFibGVCaXRtYXBTaXplLAogICAgdGFibGVBZ2dyZWdhdGVJbnN0YW5jZXMKICB9Owp9CmZ1bmN0aW9uIHJlYWRVbmNvbXByZXNzZWRCaXRtYXAocmVhZGVyLCB3aWR0aCwgaGVpZ2h0KSB7CiAgY29uc3QgYml0bWFwID0gW107CiAgZm9yIChsZXQgeSA9IDA7IHkgPCBoZWlnaHQ7IHkrKykgewogICAgY29uc3Qgcm93ID0gbmV3IFVpbnQ4QXJyYXkod2lkdGgpOwogICAgYml0bWFwLnB1c2gocm93KTsKICAgIGZvciAobGV0IHggPSAwOyB4IDwgd2lkdGg7IHgrKykgewogICAgICByb3dbeF0gPSByZWFkZXIucmVhZEJpdCgpOwogICAgfQogICAgcmVhZGVyLmJ5dGVBbGlnbigpOwogIH0KICByZXR1cm4gYml0bWFwOwp9CmZ1bmN0aW9uIGRlY29kZU1NUkJpdG1hcChpbnB1dCwgd2lkdGgsIGhlaWdodCwgZW5kT2ZCbG9jaykgewogIGNvbnN0IHBhcmFtcyA9IHsKICAgIEs6IC0xLAogICAgQ29sdW1uczogd2lkdGgsCiAgICBSb3dzOiBoZWlnaHQsCiAgICBCbGFja0lzMTogdHJ1ZSwKICAgIEVuZE9mQmxvY2s6IGVuZE9mQmxvY2sKICB9OwogIGNvbnN0IGRlY29kZXIgPSBuZXcgQ0NJVFRGYXhEZWNvZGVyKGlucHV0LCBwYXJhbXMpOwogIGNvbnN0IGJpdG1hcCA9IFtdOwogIGxldCBjdXJyZW50Qnl0ZSwKICAgIGVvZiA9IGZhbHNlOwogIGZvciAobGV0IHkgPSAwOyB5IDwgaGVpZ2h0OyB5KyspIHsKICAgIGNvbnN0IHJvdyA9IG5ldyBVaW50OEFycmF5KHdpZHRoKTsKICAgIGJpdG1hcC5wdXNoKHJvdyk7CiAgICBsZXQgc2hpZnQgPSAtMTsKICAgIGZvciAobGV0IHggPSAwOyB4IDwgd2lkdGg7IHgrKykgewogICAgICBpZiAoc2hpZnQgPCAwKSB7CiAgICAgICAgY3VycmVudEJ5dGUgPSBkZWNvZGVyLnJlYWROZXh0Q2hhcigpOwogICAgICAgIGlmIChjdXJyZW50Qnl0ZSA9PT0gLTEpIHsKICAgICAgICAgIGN1cnJlbnRCeXRlID0gMDsKICAgICAgICAgIGVvZiA9IHRydWU7CiAgICAgICAgfQogICAgICAgIHNoaWZ0ID0gNzsKICAgICAgfQogICAgICByb3dbeF0gPSBjdXJyZW50Qnl0ZSA+PiBzaGlmdCAmIDE7CiAgICAgIHNoaWZ0LS07CiAgICB9CiAgfQogIGlmIChlbmRPZkJsb2NrICYmICFlb2YpIHsKICAgIGNvbnN0IGxvb2tGb3JFT0ZMaW1pdCA9IDU7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxvb2tGb3JFT0ZMaW1pdDsgaSsrKSB7CiAgICAgIGlmIChkZWNvZGVyLnJlYWROZXh0Q2hhcigpID09PSAtMSkgewogICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CiAgfQogIHJldHVybiBiaXRtYXA7Cn0KY2xhc3MgSmJpZzJJbWFnZSB7CiAgcGFyc2VDaHVua3MoY2h1bmtzKSB7CiAgICByZXR1cm4gcGFyc2VKYmlnMkNodW5rcyhjaHVua3MpOwogIH0KICBwYXJzZShkYXRhKSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoIk5vdCBpbXBsZW1lbnRlZDogSmJpZzJJbWFnZS5wYXJzZSIpOwogIH0KfQoKOy8vIC4vc3JjL2NvcmUvamJpZzJfc3RyZWFtLmpzCgoKCgoKCmNsYXNzIEpiaWcyU3RyZWFtIGV4dGVuZHMgRGVjb2RlU3RyZWFtIHsKICBjb25zdHJ1Y3RvcihzdHJlYW0sIG1heWJlTGVuZ3RoLCBwYXJhbXMpIHsKICAgIHN1cGVyKG1heWJlTGVuZ3RoKTsKICAgIHRoaXMuc3RyZWFtID0gc3RyZWFtOwogICAgdGhpcy5kaWN0ID0gc3RyZWFtLmRpY3Q7CiAgICB0aGlzLm1heWJlTGVuZ3RoID0gbWF5YmVMZW5ndGg7CiAgICB0aGlzLnBhcmFtcyA9IHBhcmFtczsKICB9CiAgZ2V0IGJ5dGVzKCkgewogICAgcmV0dXJuIHNoYWRvdyh0aGlzLCAiYnl0ZXMiLCB0aGlzLnN0cmVhbS5nZXRCeXRlcyh0aGlzLm1heWJlTGVuZ3RoKSk7CiAgfQogIGVuc3VyZUJ1ZmZlcihyZXF1ZXN0ZWQpIHt9CiAgcmVhZEJsb2NrKCkgewogICAgdGhpcy5kZWNvZGVJbWFnZSgpOwogIH0KICBkZWNvZGVJbWFnZShieXRlcykgewogICAgaWYgKHRoaXMuZW9mKSB7CiAgICAgIHJldHVybiB0aGlzLmJ1ZmZlcjsKICAgIH0KICAgIGJ5dGVzIHx8PSB0aGlzLmJ5dGVzOwogICAgY29uc3QgamJpZzJJbWFnZSA9IG5ldyBKYmlnMkltYWdlKCk7CiAgICBjb25zdCBjaHVua3MgPSBbXTsKICAgIGlmICh0aGlzLnBhcmFtcyBpbnN0YW5jZW9mIERpY3QpIHsKICAgICAgY29uc3QgZ2xvYmFsc1N0cmVhbSA9IHRoaXMucGFyYW1zLmdldCgiSkJJRzJHbG9iYWxzIik7CiAgICAgIGlmIChnbG9iYWxzU3RyZWFtIGluc3RhbmNlb2YgQmFzZVN0cmVhbSkgewogICAgICAgIGNvbnN0IGdsb2JhbHMgPSBnbG9iYWxzU3RyZWFtLmdldEJ5dGVzKCk7CiAgICAgICAgY2h1bmtzLnB1c2goewogICAgICAgICAgZGF0YTogZ2xvYmFscywKICAgICAgICAgIHN0YXJ0OiAwLAogICAgICAgICAgZW5kOiBnbG9iYWxzLmxlbmd0aAogICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgICBjaHVua3MucHVzaCh7CiAgICAgIGRhdGE6IGJ5dGVzLAogICAgICBzdGFydDogMCwKICAgICAgZW5kOiBieXRlcy5sZW5ndGgKICAgIH0pOwogICAgY29uc3QgZGF0YSA9IGpiaWcySW1hZ2UucGFyc2VDaHVua3MoY2h1bmtzKTsKICAgIGNvbnN0IGRhdGFMZW5ndGggPSBkYXRhLmxlbmd0aDsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YUxlbmd0aDsgaSsrKSB7CiAgICAgIGRhdGFbaV0gXj0gMHhmZjsKICAgIH0KICAgIHRoaXMuYnVmZmVyID0gZGF0YTsKICAgIHRoaXMuYnVmZmVyTGVuZ3RoID0gZGF0YUxlbmd0aDsKICAgIHRoaXMuZW9mID0gdHJ1ZTsKICAgIHJldHVybiB0aGlzLmJ1ZmZlcjsKICB9CiAgZ2V0IGNhbkFzeW5jRGVjb2RlSW1hZ2VGcm9tQnVmZmVyKCkgewogICAgcmV0dXJuIHRoaXMuc3RyZWFtLmlzQXN5bmM7CiAgfQp9Cgo7Ly8gLi9zcmMvY29yZS9qcHhfc3RyZWFtLmpzCgoKCmNsYXNzIEpweFN0cmVhbSBleHRlbmRzIERlY29kZVN0cmVhbSB7CiAgY29uc3RydWN0b3Ioc3RyZWFtLCBtYXliZUxlbmd0aCwgcGFyYW1zKSB7CiAgICBzdXBlcihtYXliZUxlbmd0aCk7CiAgICB0aGlzLnN0cmVhbSA9IHN0cmVhbTsKICAgIHRoaXMuZGljdCA9IHN0cmVhbS5kaWN0OwogICAgdGhpcy5tYXliZUxlbmd0aCA9IG1heWJlTGVuZ3RoOwogICAgdGhpcy5wYXJhbXMgPSBwYXJhbXM7CiAgfQogIGdldCBieXRlcygpIHsKICAgIHJldHVybiBzaGFkb3codGhpcywgImJ5dGVzIiwgdGhpcy5zdHJlYW0uZ2V0Qnl0ZXModGhpcy5tYXliZUxlbmd0aCkpOwogIH0KICBlbnN1cmVCdWZmZXIocmVxdWVzdGVkKSB7fQogIHJlYWRCbG9jayhkZWNvZGVyT3B0aW9ucykgewogICAgdW5yZWFjaGFibGUoIkpweFN0cmVhbS5yZWFkQmxvY2siKTsKICB9CiAgZ2V0IGlzQXN5bmNEZWNvZGVyKCkgewogICAgcmV0dXJuIHRydWU7CiAgfQogIGFzeW5jIGRlY29kZUltYWdlKGJ5dGVzLCBkZWNvZGVyT3B0aW9ucykgewogICAgaWYgKHRoaXMuZW9mKSB7CiAgICAgIHJldHVybiB0aGlzLmJ1ZmZlcjsKICAgIH0KICAgIGJ5dGVzIHx8PSB0aGlzLmJ5dGVzOwogICAgdGhpcy5idWZmZXIgPSBhd2FpdCBKcHhJbWFnZS5kZWNvZGUoYnl0ZXMsIGRlY29kZXJPcHRpb25zKTsKICAgIHRoaXMuYnVmZmVyTGVuZ3RoID0gdGhpcy5idWZmZXIubGVuZ3RoOwogICAgdGhpcy5lb2YgPSB0cnVlOwogICAgcmV0dXJuIHRoaXMuYnVmZmVyOwogIH0KICBnZXQgY2FuQXN5bmNEZWNvZGVJbWFnZUZyb21CdWZmZXIoKSB7CiAgICByZXR1cm4gdGhpcy5zdHJlYW0uaXNBc3luYzsKICB9Cn0KCjsvLyAuL3NyYy9jb3JlL2x6d19zdHJlYW0uanMKCgoKCgoKCgoKY2xhc3MgTFpXU3RyZWFtIGV4dGVuZHMgRGVjb2RlU3RyZWFtIHsKICBjb25zdHJ1Y3RvcihzdHIsIG1heWJlTGVuZ3RoLCBlYXJseUNoYW5nZSkgewogICAgc3VwZXIobWF5YmVMZW5ndGgpOwogICAgdGhpcy5zdHIgPSBzdHI7CiAgICB0aGlzLmRpY3QgPSBzdHIuZGljdDsKICAgIHRoaXMuY2FjaGVkRGF0YSA9IDA7CiAgICB0aGlzLmJpdHNDYWNoZWQgPSAwOwogICAgY29uc3QgbWF4THp3RGljdGlvbmFyeVNpemUgPSA0MDk2OwogICAgY29uc3QgbHp3U3RhdGUgPSB7CiAgICAgIGVhcmx5Q2hhbmdlLAogICAgICBjb2RlTGVuZ3RoOiA5LAogICAgICBuZXh0Q29kZTogMjU4LAogICAgICBkaWN0aW9uYXJ5VmFsdWVzOiBuZXcgVWludDhBcnJheShtYXhMendEaWN0aW9uYXJ5U2l6ZSksCiAgICAgIGRpY3Rpb25hcnlMZW5ndGhzOiBuZXcgVWludDE2QXJyYXkobWF4THp3RGljdGlvbmFyeVNpemUpLAogICAgICBkaWN0aW9uYXJ5UHJldkNvZGVzOiBuZXcgVWludDE2QXJyYXkobWF4THp3RGljdGlvbmFyeVNpemUpLAogICAgICBjdXJyZW50U2VxdWVuY2U6IG5ldyBVaW50OEFycmF5KG1heEx6d0RpY3Rpb25hcnlTaXplKSwKICAgICAgY3VycmVudFNlcXVlbmNlTGVuZ3RoOiAwCiAgICB9OwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyNTY7ICsraSkgewogICAgICBsendTdGF0ZS5kaWN0aW9uYXJ5VmFsdWVzW2ldID0gaTsKICAgICAgbHp3U3RhdGUuZGljdGlvbmFyeUxlbmd0aHNbaV0gPSAxOwogICAgfQogICAgdGhpcy5sendTdGF0ZSA9IGx6d1N0YXRlOwogIH0KICByZWFkQml0cyhuKSB7CiAgICBsZXQgYml0c0NhY2hlZCA9IHRoaXMuYml0c0NhY2hlZDsKICAgIGxldCBjYWNoZWREYXRhID0gdGhpcy5jYWNoZWREYXRhOwogICAgd2hpbGUgKGJpdHNDYWNoZWQgPCBuKSB7CiAgICAgIGNvbnN0IGMgPSB0aGlzLnN0ci5nZXRCeXRlKCk7CiAgICAgIGlmIChjID09PSAtMSkgewogICAgICAgIHRoaXMuZW9mID0gdHJ1ZTsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgICBjYWNoZWREYXRhID0gY2FjaGVkRGF0YSA8PCA4IHwgYzsKICAgICAgYml0c0NhY2hlZCArPSA4OwogICAgfQogICAgdGhpcy5iaXRzQ2FjaGVkID0gYml0c0NhY2hlZCAtPSBuOwogICAgdGhpcy5jYWNoZWREYXRhID0gY2FjaGVkRGF0YTsKICAgIHRoaXMubGFzdENvZGUgPSBudWxsOwogICAgcmV0dXJuIGNhY2hlZERhdGEgPj4+IGJpdHNDYWNoZWQgJiAoMSA8PCBuKSAtIDE7CiAgfQogIHJlYWRCbG9jaygpIHsKICAgIGNvbnN0IGJsb2NrU2l6ZSA9IDUxMiwKICAgICAgZGVjb2RlZFNpemVEZWx0YSA9IGJsb2NrU2l6ZTsKICAgIGxldCBlc3RpbWF0ZWREZWNvZGVkU2l6ZSA9IGJsb2NrU2l6ZSAqIDI7CiAgICBsZXQgaSwgaiwgcTsKICAgIGNvbnN0IGx6d1N0YXRlID0gdGhpcy5sendTdGF0ZTsKICAgIGlmICghbHp3U3RhdGUpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgY29uc3QgZWFybHlDaGFuZ2UgPSBsendTdGF0ZS5lYXJseUNoYW5nZTsKICAgIGxldCBuZXh0Q29kZSA9IGx6d1N0YXRlLm5leHRDb2RlOwogICAgY29uc3QgZGljdGlvbmFyeVZhbHVlcyA9IGx6d1N0YXRlLmRpY3Rpb25hcnlWYWx1ZXM7CiAgICBjb25zdCBkaWN0aW9uYXJ5TGVuZ3RocyA9IGx6d1N0YXRlLmRpY3Rpb25hcnlMZW5ndGhzOwogICAgY29uc3QgZGljdGlvbmFyeVByZXZDb2RlcyA9IGx6d1N0YXRlLmRpY3Rpb25hcnlQcmV2Q29kZXM7CiAgICBsZXQgY29kZUxlbmd0aCA9IGx6d1N0YXRlLmNvZGVMZW5ndGg7CiAgICBsZXQgcHJldkNvZGUgPSBsendTdGF0ZS5wcmV2Q29kZTsKICAgIGNvbnN0IGN1cnJlbnRTZXF1ZW5jZSA9IGx6d1N0YXRlLmN1cnJlbnRTZXF1ZW5jZTsKICAgIGxldCBjdXJyZW50U2VxdWVuY2VMZW5ndGggPSBsendTdGF0ZS5jdXJyZW50U2VxdWVuY2VMZW5ndGg7CiAgICBsZXQgZGVjb2RlZExlbmd0aCA9IDA7CiAgICBsZXQgY3VycmVudEJ1ZmZlckxlbmd0aCA9IHRoaXMuYnVmZmVyTGVuZ3RoOwogICAgbGV0IGJ1ZmZlciA9IHRoaXMuZW5zdXJlQnVmZmVyKHRoaXMuYnVmZmVyTGVuZ3RoICsgZXN0aW1hdGVkRGVjb2RlZFNpemUpOwogICAgZm9yIChpID0gMDsgaSA8IGJsb2NrU2l6ZTsgaSsrKSB7CiAgICAgIGNvbnN0IGNvZGUgPSB0aGlzLnJlYWRCaXRzKGNvZGVMZW5ndGgpOwogICAgICBjb25zdCBoYXNQcmV2ID0gY3VycmVudFNlcXVlbmNlTGVuZ3RoID4gMDsKICAgICAgaWYgKGNvZGUgPCAyNTYpIHsKICAgICAgICBjdXJyZW50U2VxdWVuY2VbMF0gPSBjb2RlOwogICAgICAgIGN1cnJlbnRTZXF1ZW5jZUxlbmd0aCA9IDE7CiAgICAgIH0gZWxzZSBpZiAoY29kZSA+PSAyNTgpIHsKICAgICAgICBpZiAoY29kZSA8IG5leHRDb2RlKSB7CiAgICAgICAgICBjdXJyZW50U2VxdWVuY2VMZW5ndGggPSBkaWN0aW9uYXJ5TGVuZ3Roc1tjb2RlXTsKICAgICAgICAgIGZvciAoaiA9IGN1cnJlbnRTZXF1ZW5jZUxlbmd0aCAtIDEsIHEgPSBjb2RlOyBqID49IDA7IGotLSkgewogICAgICAgICAgICBjdXJyZW50U2VxdWVuY2Vbal0gPSBkaWN0aW9uYXJ5VmFsdWVzW3FdOwogICAgICAgICAgICBxID0gZGljdGlvbmFyeVByZXZDb2Rlc1txXTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgY3VycmVudFNlcXVlbmNlW2N1cnJlbnRTZXF1ZW5jZUxlbmd0aCsrXSA9IGN1cnJlbnRTZXF1ZW5jZVswXTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAoY29kZSA9PT0gMjU2KSB7CiAgICAgICAgY29kZUxlbmd0aCA9IDk7CiAgICAgICAgbmV4dENvZGUgPSAyNTg7CiAgICAgICAgY3VycmVudFNlcXVlbmNlTGVuZ3RoID0gMDsKICAgICAgICBjb250aW51ZTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmVvZiA9IHRydWU7CiAgICAgICAgZGVsZXRlIHRoaXMubHp3U3RhdGU7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgICAgaWYgKGhhc1ByZXYpIHsKICAgICAgICBkaWN0aW9uYXJ5UHJldkNvZGVzW25leHRDb2RlXSA9IHByZXZDb2RlOwogICAgICAgIGRpY3Rpb25hcnlMZW5ndGhzW25leHRDb2RlXSA9IGRpY3Rpb25hcnlMZW5ndGhzW3ByZXZDb2RlXSArIDE7CiAgICAgICAgZGljdGlvbmFyeVZhbHVlc1tuZXh0Q29kZV0gPSBjdXJyZW50U2VxdWVuY2VbMF07CiAgICAgICAgbmV4dENvZGUrKzsKICAgICAgICBjb2RlTGVuZ3RoID0gbmV4dENvZGUgKyBlYXJseUNoYW5nZSAmIG5leHRDb2RlICsgZWFybHlDaGFuZ2UgLSAxID8gY29kZUxlbmd0aCA6IE1hdGgubWluKE1hdGgubG9nKG5leHRDb2RlICsgZWFybHlDaGFuZ2UpIC8gMC42OTMxNDcxODA1NTk5NDUzICsgMSwgMTIpIHwgMDsKICAgICAgfQogICAgICBwcmV2Q29kZSA9IGNvZGU7CiAgICAgIGRlY29kZWRMZW5ndGggKz0gY3VycmVudFNlcXVlbmNlTGVuZ3RoOwogICAgICBpZiAoZXN0aW1hdGVkRGVjb2RlZFNpemUgPCBkZWNvZGVkTGVuZ3RoKSB7CiAgICAgICAgZG8gewogICAgICAgICAgZXN0aW1hdGVkRGVjb2RlZFNpemUgKz0gZGVjb2RlZFNpemVEZWx0YTsKICAgICAgICB9IHdoaWxlIChlc3RpbWF0ZWREZWNvZGVkU2l6ZSA8IGRlY29kZWRMZW5ndGgpOwogICAgICAgIGJ1ZmZlciA9IHRoaXMuZW5zdXJlQnVmZmVyKHRoaXMuYnVmZmVyTGVuZ3RoICsgZXN0aW1hdGVkRGVjb2RlZFNpemUpOwogICAgICB9CiAgICAgIGZvciAoaiA9IDA7IGogPCBjdXJyZW50U2VxdWVuY2VMZW5ndGg7IGorKykgewogICAgICAgIGJ1ZmZlcltjdXJyZW50QnVmZmVyTGVuZ3RoKytdID0gY3VycmVudFNlcXVlbmNlW2pdOwogICAgICB9CiAgICB9CiAgICBsendTdGF0ZS5uZXh0Q29kZSA9IG5leHRDb2RlOwogICAgbHp3U3RhdGUuY29kZUxlbmd0aCA9IGNvZGVMZW5ndGg7CiAgICBsendTdGF0ZS5wcmV2Q29kZSA9IHByZXZDb2RlOwogICAgbHp3U3RhdGUuY3VycmVudFNlcXVlbmNlTGVuZ3RoID0gY3VycmVudFNlcXVlbmNlTGVuZ3RoOwogICAgdGhpcy5idWZmZXJMZW5ndGggPSBjdXJyZW50QnVmZmVyTGVuZ3RoOwogIH0KfQoKOy8vIC4vc3JjL2NvcmUvcHJlZGljdG9yX3N0cmVhbS5qcwoKCgoKCgoKCgoKCmNsYXNzIFByZWRpY3RvclN0cmVhbSBleHRlbmRzIERlY29kZVN0cmVhbSB7CiAgY29uc3RydWN0b3Ioc3RyLCBtYXliZUxlbmd0aCwgcGFyYW1zKSB7CiAgICBzdXBlcihtYXliZUxlbmd0aCk7CiAgICBpZiAoIShwYXJhbXMgaW5zdGFuY2VvZiBEaWN0KSkgewogICAgICByZXR1cm4gc3RyOwogICAgfQogICAgY29uc3QgcHJlZGljdG9yID0gdGhpcy5wcmVkaWN0b3IgPSBwYXJhbXMuZ2V0KCJQcmVkaWN0b3IiKSB8fCAxOwogICAgaWYgKHByZWRpY3RvciA8PSAxKSB7CiAgICAgIHJldHVybiBzdHI7CiAgICB9CiAgICBpZiAocHJlZGljdG9yICE9PSAyICYmIChwcmVkaWN0b3IgPCAxMCB8fCBwcmVkaWN0b3IgPiAxNSkpIHsKICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKGBVbnN1cHBvcnRlZCBwcmVkaWN0b3I6ICR7cHJlZGljdG9yfWApOwogICAgfQogICAgdGhpcy5yZWFkQmxvY2sgPSBwcmVkaWN0b3IgPT09IDIgPyB0aGlzLnJlYWRCbG9ja1RpZmYgOiB0aGlzLnJlYWRCbG9ja1BuZzsKICAgIHRoaXMuc3RyID0gc3RyOwogICAgdGhpcy5kaWN0ID0gc3RyLmRpY3Q7CiAgICBjb25zdCBjb2xvcnMgPSB0aGlzLmNvbG9ycyA9IHBhcmFtcy5nZXQoIkNvbG9ycyIpIHx8IDE7CiAgICBjb25zdCBiaXRzID0gdGhpcy5iaXRzID0gcGFyYW1zLmdldCgiQlBDIiwgIkJpdHNQZXJDb21wb25lbnQiKSB8fCA4OwogICAgY29uc3QgY29sdW1ucyA9IHRoaXMuY29sdW1ucyA9IHBhcmFtcy5nZXQoIkNvbHVtbnMiKSB8fCAxOwogICAgdGhpcy5waXhCeXRlcyA9IGNvbG9ycyAqIGJpdHMgKyA3ID4+IDM7CiAgICB0aGlzLnJvd0J5dGVzID0gY29sdW1ucyAqIGNvbG9ycyAqIGJpdHMgKyA3ID4+IDM7CiAgICByZXR1cm4gdGhpczsKICB9CiAgcmVhZEJsb2NrVGlmZigpIHsKICAgIGNvbnN0IHJvd0J5dGVzID0gdGhpcy5yb3dCeXRlczsKICAgIGNvbnN0IGJ1ZmZlckxlbmd0aCA9IHRoaXMuYnVmZmVyTGVuZ3RoOwogICAgY29uc3QgYnVmZmVyID0gdGhpcy5lbnN1cmVCdWZmZXIoYnVmZmVyTGVuZ3RoICsgcm93Qnl0ZXMpOwogICAgY29uc3QgYml0cyA9IHRoaXMuYml0czsKICAgIGNvbnN0IGNvbG9ycyA9IHRoaXMuY29sb3JzOwogICAgY29uc3QgcmF3Qnl0ZXMgPSB0aGlzLnN0ci5nZXRCeXRlcyhyb3dCeXRlcyk7CiAgICB0aGlzLmVvZiA9ICFyYXdCeXRlcy5sZW5ndGg7CiAgICBpZiAodGhpcy5lb2YpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgbGV0IGluYnVmID0gMCwKICAgICAgb3V0YnVmID0gMDsKICAgIGxldCBpbmJpdHMgPSAwLAogICAgICBvdXRiaXRzID0gMDsKICAgIGxldCBwb3MgPSBidWZmZXJMZW5ndGg7CiAgICBsZXQgaTsKICAgIGlmIChiaXRzID09PSAxICYmIGNvbG9ycyA9PT0gMSkgewogICAgICBmb3IgKGkgPSAwOyBpIDwgcm93Qnl0ZXM7ICsraSkgewogICAgICAgIGxldCBjID0gcmF3Qnl0ZXNbaV0gXiBpbmJ1ZjsKICAgICAgICBjIF49IGMgPj4gMTsKICAgICAgICBjIF49IGMgPj4gMjsKICAgICAgICBjIF49IGMgPj4gNDsKICAgICAgICBpbmJ1ZiA9IChjICYgMSkgPDwgNzsKICAgICAgICBidWZmZXJbcG9zKytdID0gYzsKICAgICAgfQogICAgfSBlbHNlIGlmIChiaXRzID09PSA4KSB7CiAgICAgIGZvciAoaSA9IDA7IGkgPCBjb2xvcnM7ICsraSkgewogICAgICAgIGJ1ZmZlcltwb3MrK10gPSByYXdCeXRlc1tpXTsKICAgICAgfQogICAgICBmb3IgKDsgaSA8IHJvd0J5dGVzOyArK2kpIHsKICAgICAgICBidWZmZXJbcG9zXSA9IGJ1ZmZlcltwb3MgLSBjb2xvcnNdICsgcmF3Qnl0ZXNbaV07CiAgICAgICAgcG9zKys7CiAgICAgIH0KICAgIH0gZWxzZSBpZiAoYml0cyA9PT0gMTYpIHsKICAgICAgY29uc3QgYnl0ZXNQZXJQaXhlbCA9IGNvbG9ycyAqIDI7CiAgICAgIGZvciAoaSA9IDA7IGkgPCBieXRlc1BlclBpeGVsOyArK2kpIHsKICAgICAgICBidWZmZXJbcG9zKytdID0gcmF3Qnl0ZXNbaV07CiAgICAgIH0KICAgICAgZm9yICg7IGkgPCByb3dCeXRlczsgaSArPSAyKSB7CiAgICAgICAgY29uc3Qgc3VtID0gKChyYXdCeXRlc1tpXSAmIDB4ZmYpIDw8IDgpICsgKHJhd0J5dGVzW2kgKyAxXSAmIDB4ZmYpICsgKChidWZmZXJbcG9zIC0gYnl0ZXNQZXJQaXhlbF0gJiAweGZmKSA8PCA4KSArIChidWZmZXJbcG9zIC0gYnl0ZXNQZXJQaXhlbCArIDFdICYgMHhmZik7CiAgICAgICAgYnVmZmVyW3BvcysrXSA9IHN1bSA+PiA4ICYgMHhmZjsKICAgICAgICBidWZmZXJbcG9zKytdID0gc3VtICYgMHhmZjsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgY29uc3QgY29tcEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoY29sb3JzICsgMSk7CiAgICAgIGNvbnN0IGJpdE1hc2sgPSAoMSA8PCBiaXRzKSAtIDE7CiAgICAgIGxldCBqID0gMCwKICAgICAgICBrID0gYnVmZmVyTGVuZ3RoOwogICAgICBjb25zdCBjb2x1bW5zID0gdGhpcy5jb2x1bW5zOwogICAgICBmb3IgKGkgPSAwOyBpIDwgY29sdW1uczsgKytpKSB7CiAgICAgICAgZm9yIChsZXQga2sgPSAwOyBrayA8IGNvbG9yczsgKytraykgewogICAgICAgICAgaWYgKGluYml0cyA8IGJpdHMpIHsKICAgICAgICAgICAgaW5idWYgPSBpbmJ1ZiA8PCA4IHwgcmF3Qnl0ZXNbaisrXSAmIDB4ZmY7CiAgICAgICAgICAgIGluYml0cyArPSA4OwogICAgICAgICAgfQogICAgICAgICAgY29tcEFycmF5W2trXSA9IGNvbXBBcnJheVtra10gKyAoaW5idWYgPj4gaW5iaXRzIC0gYml0cykgJiBiaXRNYXNrOwogICAgICAgICAgaW5iaXRzIC09IGJpdHM7CiAgICAgICAgICBvdXRidWYgPSBvdXRidWYgPDwgYml0cyB8IGNvbXBBcnJheVtra107CiAgICAgICAgICBvdXRiaXRzICs9IGJpdHM7CiAgICAgICAgICBpZiAob3V0Yml0cyA+PSA4KSB7CiAgICAgICAgICAgIGJ1ZmZlcltrKytdID0gb3V0YnVmID4+IG91dGJpdHMgLSA4ICYgMHhmZjsKICAgICAgICAgICAgb3V0Yml0cyAtPSA4OwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICBpZiAob3V0Yml0cyA+IDApIHsKICAgICAgICBidWZmZXJbaysrXSA9IChvdXRidWYgPDwgOCAtIG91dGJpdHMpICsgKGluYnVmICYgKDEgPDwgOCAtIG91dGJpdHMpIC0gMSk7CiAgICAgIH0KICAgIH0KICAgIHRoaXMuYnVmZmVyTGVuZ3RoICs9IHJvd0J5dGVzOwogIH0KICByZWFkQmxvY2tQbmcoKSB7CiAgICBjb25zdCByb3dCeXRlcyA9IHRoaXMucm93Qnl0ZXM7CiAgICBjb25zdCBwaXhCeXRlcyA9IHRoaXMucGl4Qnl0ZXM7CiAgICBjb25zdCBwcmVkaWN0b3IgPSB0aGlzLnN0ci5nZXRCeXRlKCk7CiAgICBjb25zdCByYXdCeXRlcyA9IHRoaXMuc3RyLmdldEJ5dGVzKHJvd0J5dGVzKTsKICAgIHRoaXMuZW9mID0gIXJhd0J5dGVzLmxlbmd0aDsKICAgIGlmICh0aGlzLmVvZikgewogICAgICByZXR1cm47CiAgICB9CiAgICBjb25zdCBidWZmZXJMZW5ndGggPSB0aGlzLmJ1ZmZlckxlbmd0aDsKICAgIGNvbnN0IGJ1ZmZlciA9IHRoaXMuZW5zdXJlQnVmZmVyKGJ1ZmZlckxlbmd0aCArIHJvd0J5dGVzKTsKICAgIGxldCBwcmV2Um93ID0gYnVmZmVyLnN1YmFycmF5KGJ1ZmZlckxlbmd0aCAtIHJvd0J5dGVzLCBidWZmZXJMZW5ndGgpOwogICAgaWYgKHByZXZSb3cubGVuZ3RoID09PSAwKSB7CiAgICAgIHByZXZSb3cgPSBuZXcgVWludDhBcnJheShyb3dCeXRlcyk7CiAgICB9CiAgICBsZXQgaSwKICAgICAgaiA9IGJ1ZmZlckxlbmd0aCwKICAgICAgdXAsCiAgICAgIGM7CiAgICBzd2l0Y2ggKHByZWRpY3RvcikgewogICAgICBjYXNlIDA6CiAgICAgICAgZm9yIChpID0gMDsgaSA8IHJvd0J5dGVzOyArK2kpIHsKICAgICAgICAgIGJ1ZmZlcltqKytdID0gcmF3Qnl0ZXNbaV07CiAgICAgICAgfQogICAgICAgIGJyZWFrOwogICAgICBjYXNlIDE6CiAgICAgICAgZm9yIChpID0gMDsgaSA8IHBpeEJ5dGVzOyArK2kpIHsKICAgICAgICAgIGJ1ZmZlcltqKytdID0gcmF3Qnl0ZXNbaV07CiAgICAgICAgfQogICAgICAgIGZvciAoOyBpIDwgcm93Qnl0ZXM7ICsraSkgewogICAgICAgICAgYnVmZmVyW2pdID0gYnVmZmVyW2ogLSBwaXhCeXRlc10gKyByYXdCeXRlc1tpXSAmIDB4ZmY7CiAgICAgICAgICBqKys7CiAgICAgICAgfQogICAgICAgIGJyZWFrOwogICAgICBjYXNlIDI6CiAgICAgICAgZm9yIChpID0gMDsgaSA8IHJvd0J5dGVzOyArK2kpIHsKICAgICAgICAgIGJ1ZmZlcltqKytdID0gcHJldlJvd1tpXSArIHJhd0J5dGVzW2ldICYgMHhmZjsKICAgICAgICB9CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgMzoKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcGl4Qnl0ZXM7ICsraSkgewogICAgICAgICAgYnVmZmVyW2orK10gPSAocHJldlJvd1tpXSA+PiAxKSArIHJhd0J5dGVzW2ldOwogICAgICAgIH0KICAgICAgICBmb3IgKDsgaSA8IHJvd0J5dGVzOyArK2kpIHsKICAgICAgICAgIGJ1ZmZlcltqXSA9IChwcmV2Um93W2ldICsgYnVmZmVyW2ogLSBwaXhCeXRlc10gPj4gMSkgKyByYXdCeXRlc1tpXSAmIDB4ZmY7CiAgICAgICAgICBqKys7CiAgICAgICAgfQogICAgICAgIGJyZWFrOwogICAgICBjYXNlIDQ6CiAgICAgICAgZm9yIChpID0gMDsgaSA8IHBpeEJ5dGVzOyArK2kpIHsKICAgICAgICAgIHVwID0gcHJldlJvd1tpXTsKICAgICAgICAgIGMgPSByYXdCeXRlc1tpXTsKICAgICAgICAgIGJ1ZmZlcltqKytdID0gdXAgKyBjOwogICAgICAgIH0KICAgICAgICBmb3IgKDsgaSA8IHJvd0J5dGVzOyArK2kpIHsKICAgICAgICAgIHVwID0gcHJldlJvd1tpXTsKICAgICAgICAgIGNvbnN0IHVwTGVmdCA9IHByZXZSb3dbaSAtIHBpeEJ5dGVzXTsKICAgICAgICAgIGNvbnN0IGxlZnQgPSBidWZmZXJbaiAtIHBpeEJ5dGVzXTsKICAgICAgICAgIGNvbnN0IHAgPSBsZWZ0ICsgdXAgLSB1cExlZnQ7CiAgICAgICAgICBsZXQgcGEgPSBwIC0gbGVmdDsKICAgICAgICAgIGlmIChwYSA8IDApIHsKICAgICAgICAgICAgcGEgPSAtcGE7CiAgICAgICAgICB9CiAgICAgICAgICBsZXQgcGIgPSBwIC0gdXA7CiAgICAgICAgICBpZiAocGIgPCAwKSB7CiAgICAgICAgICAgIHBiID0gLXBiOwogICAgICAgICAgfQogICAgICAgICAgbGV0IHBjID0gcCAtIHVwTGVmdDsKICAgICAgICAgIGlmIChwYyA8IDApIHsKICAgICAgICAgICAgcGMgPSAtcGM7CiAgICAgICAgICB9CiAgICAgICAgICBjID0gcmF3Qnl0ZXNbaV07CiAgICAgICAgICBpZiAocGEgPD0gcGIgJiYgcGEgPD0gcGMpIHsKICAgICAgICAgICAgYnVmZmVyW2orK10gPSBsZWZ0ICsgYzsKICAgICAgICAgIH0gZWxzZSBpZiAocGIgPD0gcGMpIHsKICAgICAgICAgICAgYnVmZmVyW2orK10gPSB1cCArIGM7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBidWZmZXJbaisrXSA9IHVwTGVmdCArIGM7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGJyZWFrOwogICAgICBkZWZhdWx0OgogICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcihgVW5zdXBwb3J0ZWQgcHJlZGljdG9yOiAke3ByZWRpY3Rvcn1gKTsKICAgIH0KICAgIHRoaXMuYnVmZmVyTGVuZ3RoICs9IHJvd0J5dGVzOwogIH0KfQoKOy8vIC4vc3JjL2NvcmUvcnVuX2xlbmd0aF9zdHJlYW0uanMKCmNsYXNzIFJ1bkxlbmd0aFN0cmVhbSBleHRlbmRzIERlY29kZVN0cmVhbSB7CiAgY29uc3RydWN0b3Ioc3RyLCBtYXliZUxlbmd0aCkgewogICAgc3VwZXIobWF5YmVMZW5ndGgpOwogICAgdGhpcy5zdHIgPSBzdHI7CiAgICB0aGlzLmRpY3QgPSBzdHIuZGljdDsKICB9CiAgcmVhZEJsb2NrKCkgewogICAgY29uc3QgcmVwZWF0SGVhZGVyID0gdGhpcy5zdHIuZ2V0Qnl0ZXMoMik7CiAgICBpZiAoIXJlcGVhdEhlYWRlciB8fCByZXBlYXRIZWFkZXIubGVuZ3RoIDwgMiB8fCByZXBlYXRIZWFkZXJbMF0gPT09IDEyOCkgewogICAgICB0aGlzLmVvZiA9IHRydWU7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGxldCBidWZmZXI7CiAgICBsZXQgYnVmZmVyTGVuZ3RoID0gdGhpcy5idWZmZXJMZW5ndGg7CiAgICBsZXQgbiA9IHJlcGVhdEhlYWRlclswXTsKICAgIGlmIChuIDwgMTI4KSB7CiAgICAgIGJ1ZmZlciA9IHRoaXMuZW5zdXJlQnVmZmVyKGJ1ZmZlckxlbmd0aCArIG4gKyAxKTsKICAgICAgYnVmZmVyW2J1ZmZlckxlbmd0aCsrXSA9IHJlcGVhdEhlYWRlclsxXTsKICAgICAgaWYgKG4gPiAwKSB7CiAgICAgICAgY29uc3Qgc291cmNlID0gdGhpcy5zdHIuZ2V0Qnl0ZXMobik7CiAgICAgICAgYnVmZmVyLnNldChzb3VyY2UsIGJ1ZmZlckxlbmd0aCk7CiAgICAgICAgYnVmZmVyTGVuZ3RoICs9IG47CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIG4gPSAyNTcgLSBuOwogICAgICBidWZmZXIgPSB0aGlzLmVuc3VyZUJ1ZmZlcihidWZmZXJMZW5ndGggKyBuICsgMSk7CiAgICAgIGJ1ZmZlci5maWxsKHJlcGVhdEhlYWRlclsxXSwgYnVmZmVyTGVuZ3RoLCBidWZmZXJMZW5ndGggKyBuKTsKICAgICAgYnVmZmVyTGVuZ3RoICs9IG47CiAgICB9CiAgICB0aGlzLmJ1ZmZlckxlbmd0aCA9IGJ1ZmZlckxlbmd0aDsKICB9Cn0KCjsvLyAuL3NyYy9jb3JlL3BhcnNlci5qcwoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKY29uc3QgTUFYX0xFTkdUSF9UT19DQUNIRSA9IDEwMDA7CmZ1bmN0aW9uIGdldElubGluZUltYWdlQ2FjaGVLZXkoYnl0ZXMpIHsKICBjb25zdCBzdHJCdWYgPSBbXSwKICAgIGlpID0gYnl0ZXMubGVuZ3RoOwogIGxldCBpID0gMDsKICB3aGlsZSAoaSA8IGlpIC0gMSkgewogICAgc3RyQnVmLnB1c2goYnl0ZXNbaSsrXSA8PCA4IHwgYnl0ZXNbaSsrXSk7CiAgfQogIGlmIChpIDwgaWkpIHsKICAgIHN0ckJ1Zi5wdXNoKGJ5dGVzW2ldKTsKICB9CiAgcmV0dXJuIGlpICsgIl8iICsgU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBzdHJCdWYpOwp9CmNsYXNzIFBhcnNlciB7CiAgY29uc3RydWN0b3IoewogICAgbGV4ZXIsCiAgICB4cmVmLAogICAgYWxsb3dTdHJlYW1zID0gZmFsc2UsCiAgICByZWNvdmVyeU1vZGUgPSBmYWxzZQogIH0pIHsKICAgIHRoaXMubGV4ZXIgPSBsZXhlcjsKICAgIHRoaXMueHJlZiA9IHhyZWY7CiAgICB0aGlzLmFsbG93U3RyZWFtcyA9IGFsbG93U3RyZWFtczsKICAgIHRoaXMucmVjb3ZlcnlNb2RlID0gcmVjb3ZlcnlNb2RlOwogICAgdGhpcy5pbWFnZUNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgIHRoaXMuX2ltYWdlSWQgPSAwOwogICAgdGhpcy5yZWZpbGwoKTsKICB9CiAgcmVmaWxsKCkgewogICAgdGhpcy5idWYxID0gdGhpcy5sZXhlci5nZXRPYmooKTsKICAgIHRoaXMuYnVmMiA9IHRoaXMubGV4ZXIuZ2V0T2JqKCk7CiAgfQogIHNoaWZ0KCkgewogICAgaWYgKHRoaXMuYnVmMiBpbnN0YW5jZW9mIENtZCAmJiB0aGlzLmJ1ZjIuY21kID09PSAiSUQiKSB7CiAgICAgIHRoaXMuYnVmMSA9IHRoaXMuYnVmMjsKICAgICAgdGhpcy5idWYyID0gbnVsbDsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMuYnVmMSA9IHRoaXMuYnVmMjsKICAgICAgdGhpcy5idWYyID0gdGhpcy5sZXhlci5nZXRPYmooKTsKICAgIH0KICB9CiAgdHJ5U2hpZnQoKSB7CiAgICB0cnkgewogICAgICB0aGlzLnNoaWZ0KCk7CiAgICAgIHJldHVybiB0cnVlOwogICAgfSBjYXRjaCAoZSkgewogICAgICBpZiAoZSBpbnN0YW5jZW9mIE1pc3NpbmdEYXRhRXhjZXB0aW9uKSB7CiAgICAgICAgdGhyb3cgZTsKICAgICAgfQogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfQogIGdldE9iaihjaXBoZXJUcmFuc2Zvcm0gPSBudWxsKSB7CiAgICBjb25zdCBidWYxID0gdGhpcy5idWYxOwogICAgdGhpcy5zaGlmdCgpOwogICAgaWYgKGJ1ZjEgaW5zdGFuY2VvZiBDbWQpIHsKICAgICAgc3dpdGNoIChidWYxLmNtZCkgewogICAgICAgIGNhc2UgIkJJIjoKICAgICAgICAgIHJldHVybiB0aGlzLm1ha2VJbmxpbmVJbWFnZShjaXBoZXJUcmFuc2Zvcm0pOwogICAgICAgIGNhc2UgIlsiOgogICAgICAgICAgY29uc3QgYXJyYXkgPSBbXTsKICAgICAgICAgIHdoaWxlICghaXNDbWQodGhpcy5idWYxLCAiXSIpICYmIHRoaXMuYnVmMSAhPT0gRU9GKSB7CiAgICAgICAgICAgIGFycmF5LnB1c2godGhpcy5nZXRPYmooY2lwaGVyVHJhbnNmb3JtKSk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodGhpcy5idWYxID09PSBFT0YpIHsKICAgICAgICAgICAgaWYgKHRoaXMucmVjb3ZlcnlNb2RlKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGFycmF5OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRocm93IG5ldyBQYXJzZXJFT0ZFeGNlcHRpb24oIkVuZCBvZiBmaWxlIGluc2lkZSBhcnJheS4iKTsKICAgICAgICAgIH0KICAgICAgICAgIHRoaXMuc2hpZnQoKTsKICAgICAgICAgIHJldHVybiBhcnJheTsKICAgICAgICBjYXNlICI8PCI6CiAgICAgICAgICBjb25zdCBkaWN0ID0gbmV3IERpY3QodGhpcy54cmVmKTsKICAgICAgICAgIHdoaWxlICghaXNDbWQodGhpcy5idWYxLCAiPj4iKSAmJiB0aGlzLmJ1ZjEgIT09IEVPRikgewogICAgICAgICAgICBpZiAoISh0aGlzLmJ1ZjEgaW5zdGFuY2VvZiBOYW1lKSkgewogICAgICAgICAgICAgIGluZm8oIk1hbGZvcm1lZCBkaWN0aW9uYXJ5OiBrZXkgbXVzdCBiZSBhIG5hbWUgb2JqZWN0Iik7CiAgICAgICAgICAgICAgdGhpcy5zaGlmdCgpOwogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IGtleSA9IHRoaXMuYnVmMS5uYW1lOwogICAgICAgICAgICB0aGlzLnNoaWZ0KCk7CiAgICAgICAgICAgIGlmICh0aGlzLmJ1ZjEgPT09IEVPRikgewogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGRpY3Quc2V0KGtleSwgdGhpcy5nZXRPYmooY2lwaGVyVHJhbnNmb3JtKSk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodGhpcy5idWYxID09PSBFT0YpIHsKICAgICAgICAgICAgaWYgKHRoaXMucmVjb3ZlcnlNb2RlKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGRpY3Q7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhyb3cgbmV3IFBhcnNlckVPRkV4Y2VwdGlvbigiRW5kIG9mIGZpbGUgaW5zaWRlIGRpY3Rpb25hcnkuIik7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoaXNDbWQodGhpcy5idWYyLCAic3RyZWFtIikpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWxsb3dTdHJlYW1zID8gdGhpcy5tYWtlU3RyZWFtKGRpY3QsIGNpcGhlclRyYW5zZm9ybSkgOiBkaWN0OwogICAgICAgICAgfQogICAgICAgICAgdGhpcy5zaGlmdCgpOwogICAgICAgICAgcmV0dXJuIGRpY3Q7CiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHJldHVybiBidWYxOwogICAgICB9CiAgICB9CiAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcihidWYxKSkgewogICAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcih0aGlzLmJ1ZjEpICYmIGlzQ21kKHRoaXMuYnVmMiwgIlIiKSkgewogICAgICAgIGNvbnN0IHJlZiA9IFJlZi5nZXQoYnVmMSwgdGhpcy5idWYxKTsKICAgICAgICB0aGlzLnNoaWZ0KCk7CiAgICAgICAgdGhpcy5zaGlmdCgpOwogICAgICAgIHJldHVybiByZWY7CiAgICAgIH0KICAgICAgcmV0dXJuIGJ1ZjE7CiAgICB9CiAgICBpZiAodHlwZW9mIGJ1ZjEgPT09ICJzdHJpbmciKSB7CiAgICAgIGlmIChjaXBoZXJUcmFuc2Zvcm0pIHsKICAgICAgICByZXR1cm4gY2lwaGVyVHJhbnNmb3JtLmRlY3J5cHRTdHJpbmcoYnVmMSk7CiAgICAgIH0KICAgICAgcmV0dXJuIGJ1ZjE7CiAgICB9CiAgICByZXR1cm4gYnVmMTsKICB9CiAgZmluZERlZmF1bHRJbmxpbmVTdHJlYW1FbmQoc3RyZWFtKSB7CiAgICBjb25zdCBFID0gMHg0NSwKICAgICAgSSA9IDB4NDksCiAgICAgIFNQQUNFID0gMHgyMCwKICAgICAgTEYgPSAweGEsCiAgICAgIENSID0gMHhkLAogICAgICBOVUwgPSAweDA7CiAgICBjb25zdCB7CiAgICAgICAga25vd25Db21tYW5kcwogICAgICB9ID0gdGhpcy5sZXhlciwKICAgICAgc3RhcnRQb3MgPSBzdHJlYW0ucG9zLAogICAgICBuID0gMTU7CiAgICBsZXQgc3RhdGUgPSAwLAogICAgICBjaCwKICAgICAgbWF5YmVFSVBvczsKICAgIHdoaWxlICgoY2ggPSBzdHJlYW0uZ2V0Qnl0ZSgpKSAhPT0gLTEpIHsKICAgICAgaWYgKHN0YXRlID09PSAwKSB7CiAgICAgICAgc3RhdGUgPSBjaCA9PT0gRSA/IDEgOiAwOwogICAgICB9IGVsc2UgaWYgKHN0YXRlID09PSAxKSB7CiAgICAgICAgc3RhdGUgPSBjaCA9PT0gSSA/IDIgOiAwOwogICAgICB9IGVsc2UgewogICAgICAgIGlmIChjaCA9PT0gU1BBQ0UgfHwgY2ggPT09IExGIHx8IGNoID09PSBDUikgewogICAgICAgICAgbWF5YmVFSVBvcyA9IHN0cmVhbS5wb3M7CiAgICAgICAgICBjb25zdCBmb2xsb3dpbmdCeXRlcyA9IHN0cmVhbS5wZWVrQnl0ZXMobik7CiAgICAgICAgICBjb25zdCBpaSA9IGZvbGxvd2luZ0J5dGVzLmxlbmd0aDsKICAgICAgICAgIGlmIChpaSA9PT0gMCkgewogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaWk7IGkrKykgewogICAgICAgICAgICBjaCA9IGZvbGxvd2luZ0J5dGVzW2ldOwogICAgICAgICAgICBpZiAoY2ggPT09IE5VTCAmJiBmb2xsb3dpbmdCeXRlc1tpICsgMV0gIT09IE5VTCkgewogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChjaCAhPT0gTEYgJiYgY2ggIT09IENSICYmIChjaCA8IFNQQUNFIHx8IGNoID4gMHg3ZikpIHsKICAgICAgICAgICAgICBzdGF0ZSA9IDA7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmIChzdGF0ZSAhPT0gMikgewogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICgha25vd25Db21tYW5kcykgewogICAgICAgICAgICB3YXJuKCJmaW5kRGVmYXVsdElubGluZVN0cmVhbUVuZCAtIGBsZXhlci5rbm93bkNvbW1hbmRzYCBpcyB1bmRlZmluZWQuIik7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgICAgY29uc3QgdG1wTGV4ZXIgPSBuZXcgTGV4ZXIobmV3IFN0cmVhbShzdHJlYW0ucGVla0J5dGVzKDUgKiBuKSksIGtub3duQ29tbWFuZHMpOwogICAgICAgICAgdG1wTGV4ZXIuX2hleFN0cmluZ1dhcm4gPSAoKSA9PiB7fTsKICAgICAgICAgIGxldCBudW1BcmdzID0gMDsKICAgICAgICAgIHdoaWxlICh0cnVlKSB7CiAgICAgICAgICAgIGNvbnN0IG5leHRPYmogPSB0bXBMZXhlci5nZXRPYmooKTsKICAgICAgICAgICAgaWYgKG5leHRPYmogPT09IEVPRikgewogICAgICAgICAgICAgIHN0YXRlID0gMDsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAobmV4dE9iaiBpbnN0YW5jZW9mIENtZCkgewogICAgICAgICAgICAgIGNvbnN0IGtub3duQ29tbWFuZCA9IGtub3duQ29tbWFuZHNbbmV4dE9iai5jbWRdOwogICAgICAgICAgICAgIGlmICgha25vd25Db21tYW5kKSB7CiAgICAgICAgICAgICAgICBzdGF0ZSA9IDA7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9IGVsc2UgaWYgKGtub3duQ29tbWFuZC52YXJpYWJsZUFyZ3MgPyBudW1BcmdzIDw9IGtub3duQ29tbWFuZC5udW1BcmdzIDogbnVtQXJncyA9PT0ga25vd25Db21tYW5kLm51bUFyZ3MpIHsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBudW1BcmdzID0gMDsKICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBudW1BcmdzKys7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoc3RhdGUgPT09IDIpIHsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHN0YXRlID0gMDsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIGlmIChjaCA9PT0gLTEpIHsKICAgICAgd2FybigiZmluZERlZmF1bHRJbmxpbmVTdHJlYW1FbmQ6ICIgKyAiUmVhY2hlZCB0aGUgZW5kIG9mIHRoZSBzdHJlYW0gd2l0aG91dCBmaW5kaW5nIGEgdmFsaWQgRUkgbWFya2VyIik7CiAgICAgIGlmIChtYXliZUVJUG9zKSB7CiAgICAgICAgd2FybignLi4uIHRyeWluZyB0byByZWNvdmVyIGJ5IHVzaW5nIHRoZSBsYXN0ICJFSSIgb2NjdXJyZW5jZS4nKTsKICAgICAgICBzdHJlYW0uc2tpcCgtKHN0cmVhbS5wb3MgLSBtYXliZUVJUG9zKSk7CiAgICAgIH0KICAgIH0KICAgIGxldCBlbmRPZmZzZXQgPSA0OwogICAgc3RyZWFtLnNraXAoLWVuZE9mZnNldCk7CiAgICBjaCA9IHN0cmVhbS5wZWVrQnl0ZSgpOwogICAgc3RyZWFtLnNraXAoZW5kT2Zmc2V0KTsKICAgIGlmICghaXNXaGl0ZVNwYWNlKGNoKSkgewogICAgICBlbmRPZmZzZXQtLTsKICAgIH0KICAgIHJldHVybiBzdHJlYW0ucG9zIC0gZW5kT2Zmc2V0IC0gc3RhcnRQb3M7CiAgfQogIGZpbmREQ1REZWNvZGVJbmxpbmVTdHJlYW1FbmQoc3RyZWFtKSB7CiAgICBjb25zdCBzdGFydFBvcyA9IHN0cmVhbS5wb3M7CiAgICBsZXQgZm91bmRFT0kgPSBmYWxzZSwKICAgICAgYiwKICAgICAgbWFya2VyTGVuZ3RoOwogICAgd2hpbGUgKChiID0gc3RyZWFtLmdldEJ5dGUoKSkgIT09IC0xKSB7CiAgICAgIGlmIChiICE9PSAweGZmKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgc3dpdGNoIChzdHJlYW0uZ2V0Qnl0ZSgpKSB7CiAgICAgICAgY2FzZSAweDAwOgogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAweGZmOgogICAgICAgICAgc3RyZWFtLnNraXAoLTEpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAweGQ5OgogICAgICAgICAgZm91bmRFT0kgPSB0cnVlOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAweGMwOgogICAgICAgIGNhc2UgMHhjMToKICAgICAgICBjYXNlIDB4YzI6CiAgICAgICAgY2FzZSAweGMzOgogICAgICAgIGNhc2UgMHhjNToKICAgICAgICBjYXNlIDB4YzY6CiAgICAgICAgY2FzZSAweGM3OgogICAgICAgIGNhc2UgMHhjOToKICAgICAgICBjYXNlIDB4Y2E6CiAgICAgICAgY2FzZSAweGNiOgogICAgICAgIGNhc2UgMHhjZDoKICAgICAgICBjYXNlIDB4Y2U6CiAgICAgICAgY2FzZSAweGNmOgogICAgICAgIGNhc2UgMHhjNDoKICAgICAgICBjYXNlIDB4Y2M6CiAgICAgICAgY2FzZSAweGRhOgogICAgICAgIGNhc2UgMHhkYjoKICAgICAgICBjYXNlIDB4ZGM6CiAgICAgICAgY2FzZSAweGRkOgogICAgICAgIGNhc2UgMHhkZToKICAgICAgICBjYXNlIDB4ZGY6CiAgICAgICAgY2FzZSAweGUwOgogICAgICAgIGNhc2UgMHhlMToKICAgICAgICBjYXNlIDB4ZTI6CiAgICAgICAgY2FzZSAweGUzOgogICAgICAgIGNhc2UgMHhlNDoKICAgICAgICBjYXNlIDB4ZTU6CiAgICAgICAgY2FzZSAweGU2OgogICAgICAgIGNhc2UgMHhlNzoKICAgICAgICBjYXNlIDB4ZTg6CiAgICAgICAgY2FzZSAweGU5OgogICAgICAgIGNhc2UgMHhlYToKICAgICAgICBjYXNlIDB4ZWI6CiAgICAgICAgY2FzZSAweGVjOgogICAgICAgIGNhc2UgMHhlZDoKICAgICAgICBjYXNlIDB4ZWU6CiAgICAgICAgY2FzZSAweGVmOgogICAgICAgIGNhc2UgMHhmZToKICAgICAgICAgIG1hcmtlckxlbmd0aCA9IHN0cmVhbS5nZXRVaW50MTYoKTsKICAgICAgICAgIGlmIChtYXJrZXJMZW5ndGggPiAyKSB7CiAgICAgICAgICAgIHN0cmVhbS5za2lwKG1hcmtlckxlbmd0aCAtIDIpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgc3RyZWFtLnNraXAoLTIpOwogICAgICAgICAgfQogICAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgICAgaWYgKGZvdW5kRU9JKSB7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KICAgIGNvbnN0IGxlbmd0aCA9IHN0cmVhbS5wb3MgLSBzdGFydFBvczsKICAgIGlmIChiID09PSAtMSkgewogICAgICB3YXJuKCJJbmxpbmUgRENURGVjb2RlIGltYWdlIHN0cmVhbTogIiArICJFT0kgbWFya2VyIG5vdCBmb3VuZCwgc2VhcmNoaW5nIGZvciAvRUkvIGluc3RlYWQuIik7CiAgICAgIHN0cmVhbS5za2lwKC1sZW5ndGgpOwogICAgICByZXR1cm4gdGhpcy5maW5kRGVmYXVsdElubGluZVN0cmVhbUVuZChzdHJlYW0pOwogICAgfQogICAgdGhpcy5pbmxpbmVTdHJlYW1Ta2lwRUkoc3RyZWFtKTsKICAgIHJldHVybiBsZW5ndGg7CiAgfQogIGZpbmRBU0NJSTg1RGVjb2RlSW5saW5lU3RyZWFtRW5kKHN0cmVhbSkgewogICAgY29uc3QgVElMREUgPSAweDdlLAogICAgICBHVCA9IDB4M2U7CiAgICBjb25zdCBzdGFydFBvcyA9IHN0cmVhbS5wb3M7CiAgICBsZXQgY2g7CiAgICB3aGlsZSAoKGNoID0gc3RyZWFtLmdldEJ5dGUoKSkgIT09IC0xKSB7CiAgICAgIGlmIChjaCA9PT0gVElMREUpIHsKICAgICAgICBjb25zdCB0aWxkZVBvcyA9IHN0cmVhbS5wb3M7CiAgICAgICAgY2ggPSBzdHJlYW0ucGVla0J5dGUoKTsKICAgICAgICB3aGlsZSAoaXNXaGl0ZVNwYWNlKGNoKSkgewogICAgICAgICAgc3RyZWFtLnNraXAoKTsKICAgICAgICAgIGNoID0gc3RyZWFtLnBlZWtCeXRlKCk7CiAgICAgICAgfQogICAgICAgIGlmIChjaCA9PT0gR1QpIHsKICAgICAgICAgIHN0cmVhbS5za2lwKCk7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgICAgaWYgKHN0cmVhbS5wb3MgPiB0aWxkZVBvcykgewogICAgICAgICAgY29uc3QgbWF5YmVFSSA9IHN0cmVhbS5wZWVrQnl0ZXMoMik7CiAgICAgICAgICBpZiAobWF5YmVFSVswXSA9PT0gMHg0NSAmJiBtYXliZUVJWzFdID09PSAweDQ5KSB7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQogICAgY29uc3QgbGVuZ3RoID0gc3RyZWFtLnBvcyAtIHN0YXJ0UG9zOwogICAgaWYgKGNoID09PSAtMSkgewogICAgICB3YXJuKCJJbmxpbmUgQVNDSUk4NURlY29kZSBpbWFnZSBzdHJlYW06ICIgKyAiRU9EIG1hcmtlciBub3QgZm91bmQsIHNlYXJjaGluZyBmb3IgL0VJLyBpbnN0ZWFkLiIpOwogICAgICBzdHJlYW0uc2tpcCgtbGVuZ3RoKTsKICAgICAgcmV0dXJuIHRoaXMuZmluZERlZmF1bHRJbmxpbmVTdHJlYW1FbmQoc3RyZWFtKTsKICAgIH0KICAgIHRoaXMuaW5saW5lU3RyZWFtU2tpcEVJKHN0cmVhbSk7CiAgICByZXR1cm4gbGVuZ3RoOwogIH0KICBmaW5kQVNDSUlIZXhEZWNvZGVJbmxpbmVTdHJlYW1FbmQoc3RyZWFtKSB7CiAgICBjb25zdCBHVCA9IDB4M2U7CiAgICBjb25zdCBzdGFydFBvcyA9IHN0cmVhbS5wb3M7CiAgICBsZXQgY2g7CiAgICB3aGlsZSAoKGNoID0gc3RyZWFtLmdldEJ5dGUoKSkgIT09IC0xKSB7CiAgICAgIGlmIChjaCA9PT0gR1QpIHsKICAgICAgICBicmVhazsKICAgICAgfQogICAgfQogICAgY29uc3QgbGVuZ3RoID0gc3RyZWFtLnBvcyAtIHN0YXJ0UG9zOwogICAgaWYgKGNoID09PSAtMSkgewogICAgICB3YXJuKCJJbmxpbmUgQVNDSUlIZXhEZWNvZGUgaW1hZ2Ugc3RyZWFtOiAiICsgIkVPRCBtYXJrZXIgbm90IGZvdW5kLCBzZWFyY2hpbmcgZm9yIC9FSS8gaW5zdGVhZC4iKTsKICAgICAgc3RyZWFtLnNraXAoLWxlbmd0aCk7CiAgICAgIHJldHVybiB0aGlzLmZpbmREZWZhdWx0SW5saW5lU3RyZWFtRW5kKHN0cmVhbSk7CiAgICB9CiAgICB0aGlzLmlubGluZVN0cmVhbVNraXBFSShzdHJlYW0pOwogICAgcmV0dXJuIGxlbmd0aDsKICB9CiAgaW5saW5lU3RyZWFtU2tpcEVJKHN0cmVhbSkgewogICAgY29uc3QgRSA9IDB4NDUsCiAgICAgIEkgPSAweDQ5OwogICAgbGV0IHN0YXRlID0gMCwKICAgICAgY2g7CiAgICB3aGlsZSAoKGNoID0gc3RyZWFtLmdldEJ5dGUoKSkgIT09IC0xKSB7CiAgICAgIGlmIChzdGF0ZSA9PT0gMCkgewogICAgICAgIHN0YXRlID0gY2ggPT09IEUgPyAxIDogMDsKICAgICAgfSBlbHNlIGlmIChzdGF0ZSA9PT0gMSkgewogICAgICAgIHN0YXRlID0gY2ggPT09IEkgPyAyIDogMDsKICAgICAgfSBlbHNlIGlmIChzdGF0ZSA9PT0gMikgewogICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CiAgfQogIG1ha2VJbmxpbmVJbWFnZShjaXBoZXJUcmFuc2Zvcm0pIHsKICAgIGNvbnN0IGxleGVyID0gdGhpcy5sZXhlcjsKICAgIGNvbnN0IHN0cmVhbSA9IGxleGVyLnN0cmVhbTsKICAgIGNvbnN0IGRpY3RNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgbGV0IGRpY3RMZW5ndGg7CiAgICB3aGlsZSAoIWlzQ21kKHRoaXMuYnVmMSwgIklEIikgJiYgdGhpcy5idWYxICE9PSBFT0YpIHsKICAgICAgaWYgKCEodGhpcy5idWYxIGluc3RhbmNlb2YgTmFtZSkpIHsKICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoIkRpY3Rpb25hcnkga2V5IG11c3QgYmUgYSBuYW1lIG9iamVjdCIpOwogICAgICB9CiAgICAgIGNvbnN0IGtleSA9IHRoaXMuYnVmMS5uYW1lOwogICAgICB0aGlzLnNoaWZ0KCk7CiAgICAgIGlmICh0aGlzLmJ1ZjEgPT09IEVPRikgewogICAgICAgIGJyZWFrOwogICAgICB9CiAgICAgIGRpY3RNYXBba2V5XSA9IHRoaXMuZ2V0T2JqKGNpcGhlclRyYW5zZm9ybSk7CiAgICB9CiAgICBpZiAobGV4ZXIuYmVnaW5JbmxpbmVJbWFnZVBvcyAhPT0gLTEpIHsKICAgICAgZGljdExlbmd0aCA9IHN0cmVhbS5wb3MgLSBsZXhlci5iZWdpbklubGluZUltYWdlUG9zOwogICAgfQogICAgY29uc3QgZmlsdGVyID0gdGhpcy54cmVmLmZldGNoSWZSZWYoZGljdE1hcC5GIHx8IGRpY3RNYXAuRmlsdGVyKTsKICAgIGxldCBmaWx0ZXJOYW1lOwogICAgaWYgKGZpbHRlciBpbnN0YW5jZW9mIE5hbWUpIHsKICAgICAgZmlsdGVyTmFtZSA9IGZpbHRlci5uYW1lOwogICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGZpbHRlcikpIHsKICAgICAgY29uc3QgZmlsdGVyWmVybyA9IHRoaXMueHJlZi5mZXRjaElmUmVmKGZpbHRlclswXSk7CiAgICAgIGlmIChmaWx0ZXJaZXJvIGluc3RhbmNlb2YgTmFtZSkgewogICAgICAgIGZpbHRlck5hbWUgPSBmaWx0ZXJaZXJvLm5hbWU7CiAgICAgIH0KICAgIH0KICAgIGNvbnN0IHN0YXJ0UG9zID0gc3RyZWFtLnBvczsKICAgIGxldCBsZW5ndGg7CiAgICBzd2l0Y2ggKGZpbHRlck5hbWUpIHsKICAgICAgY2FzZSAiRENUIjoKICAgICAgY2FzZSAiRENURGVjb2RlIjoKICAgICAgICBsZW5ndGggPSB0aGlzLmZpbmREQ1REZWNvZGVJbmxpbmVTdHJlYW1FbmQoc3RyZWFtKTsKICAgICAgICBicmVhazsKICAgICAgY2FzZSAiQTg1IjoKICAgICAgY2FzZSAiQVNDSUk4NURlY29kZSI6CiAgICAgICAgbGVuZ3RoID0gdGhpcy5maW5kQVNDSUk4NURlY29kZUlubGluZVN0cmVhbUVuZChzdHJlYW0pOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlICJBSHgiOgogICAgICBjYXNlICJBU0NJSUhleERlY29kZSI6CiAgICAgICAgbGVuZ3RoID0gdGhpcy5maW5kQVNDSUlIZXhEZWNvZGVJbmxpbmVTdHJlYW1FbmQoc3RyZWFtKTsKICAgICAgICBicmVhazsKICAgICAgZGVmYXVsdDoKICAgICAgICBsZW5ndGggPSB0aGlzLmZpbmREZWZhdWx0SW5saW5lU3RyZWFtRW5kKHN0cmVhbSk7CiAgICB9CiAgICBsZXQgY2FjaGVLZXk7CiAgICBpZiAobGVuZ3RoIDwgTUFYX0xFTkdUSF9UT19DQUNIRSAmJiBkaWN0TGVuZ3RoID4gMCkgewogICAgICBjb25zdCBpbml0aWFsU3RyZWFtUG9zID0gc3RyZWFtLnBvczsKICAgICAgc3RyZWFtLnBvcyA9IGxleGVyLmJlZ2luSW5saW5lSW1hZ2VQb3M7CiAgICAgIGNhY2hlS2V5ID0gZ2V0SW5saW5lSW1hZ2VDYWNoZUtleShzdHJlYW0uZ2V0Qnl0ZXMoZGljdExlbmd0aCArIGxlbmd0aCkpOwogICAgICBzdHJlYW0ucG9zID0gaW5pdGlhbFN0cmVhbVBvczsKICAgICAgY29uc3QgY2FjaGVFbnRyeSA9IHRoaXMuaW1hZ2VDYWNoZVtjYWNoZUtleV07CiAgICAgIGlmIChjYWNoZUVudHJ5ICE9PSB1bmRlZmluZWQpIHsKICAgICAgICB0aGlzLmJ1ZjIgPSBDbWQuZ2V0KCJFSSIpOwogICAgICAgIHRoaXMuc2hpZnQoKTsKICAgICAgICBjYWNoZUVudHJ5LnJlc2V0KCk7CiAgICAgICAgcmV0dXJuIGNhY2hlRW50cnk7CiAgICAgIH0KICAgIH0KICAgIGNvbnN0IGRpY3QgPSBuZXcgRGljdCh0aGlzLnhyZWYpOwogICAgZm9yIChjb25zdCBrZXkgaW4gZGljdE1hcCkgewogICAgICBkaWN0LnNldChrZXksIGRpY3RNYXBba2V5XSk7CiAgICB9CiAgICBsZXQgaW1hZ2VTdHJlYW0gPSBzdHJlYW0ubWFrZVN1YlN0cmVhbShzdGFydFBvcywgbGVuZ3RoLCBkaWN0KTsKICAgIGlmIChjaXBoZXJUcmFuc2Zvcm0pIHsKICAgICAgaW1hZ2VTdHJlYW0gPSBjaXBoZXJUcmFuc2Zvcm0uY3JlYXRlU3RyZWFtKGltYWdlU3RyZWFtLCBsZW5ndGgpOwogICAgfQogICAgaW1hZ2VTdHJlYW0gPSB0aGlzLmZpbHRlcihpbWFnZVN0cmVhbSwgZGljdCwgbGVuZ3RoKTsKICAgIGltYWdlU3RyZWFtLmRpY3QgPSBkaWN0OwogICAgaWYgKGNhY2hlS2V5ICE9PSB1bmRlZmluZWQpIHsKICAgICAgaW1hZ2VTdHJlYW0uY2FjaGVLZXkgPSBgaW5saW5lX2ltZ18keysrdGhpcy5faW1hZ2VJZH1gOwogICAgICB0aGlzLmltYWdlQ2FjaGVbY2FjaGVLZXldID0gaW1hZ2VTdHJlYW07CiAgICB9CiAgICB0aGlzLmJ1ZjIgPSBDbWQuZ2V0KCJFSSIpOwogICAgdGhpcy5zaGlmdCgpOwogICAgcmV0dXJuIGltYWdlU3RyZWFtOwogIH0KICAjZmluZFN0cmVhbUxlbmd0aChzdGFydFBvcykgewogICAgY29uc3QgewogICAgICBzdHJlYW0KICAgIH0gPSB0aGlzLmxleGVyOwogICAgc3RyZWFtLnBvcyA9IHN0YXJ0UG9zOwogICAgY29uc3QgU0NBTl9CTE9DS19MRU5HVEggPSAyMDQ4OwogICAgY29uc3Qgc2lnbmF0dXJlTGVuZ3RoID0gImVuZHN0cmVhbSIubGVuZ3RoOwogICAgY29uc3QgRU5EX1NJR05BVFVSRSA9IG5ldyBVaW50OEFycmF5KFsweDY1LCAweDZlLCAweDY0XSk7CiAgICBjb25zdCBlbmRMZW5ndGggPSBFTkRfU0lHTkFUVVJFLmxlbmd0aDsKICAgIGNvbnN0IFBBUlRJQUxfU0lHTkFUVVJFID0gW25ldyBVaW50OEFycmF5KFsweDczLCAweDc0LCAweDcyLCAweDY1LCAweDYxLCAweDZkXSksIG5ldyBVaW50OEFycmF5KFsweDczLCAweDc0LCAweDY1LCAweDYxLCAweDZkXSksIG5ldyBVaW50OEFycmF5KFsweDczLCAweDc0LCAweDcyLCAweDY1LCAweDYxXSldOwogICAgY29uc3Qgbm9ybWFsTGVuZ3RoID0gc2lnbmF0dXJlTGVuZ3RoIC0gZW5kTGVuZ3RoOwogICAgd2hpbGUgKHN0cmVhbS5wb3MgPCBzdHJlYW0uZW5kKSB7CiAgICAgIGNvbnN0IHNjYW5CeXRlcyA9IHN0cmVhbS5wZWVrQnl0ZXMoU0NBTl9CTE9DS19MRU5HVEgpOwogICAgICBjb25zdCBzY2FuTGVuZ3RoID0gc2NhbkJ5dGVzLmxlbmd0aCAtIHNpZ25hdHVyZUxlbmd0aDsKICAgICAgaWYgKHNjYW5MZW5ndGggPD0gMCkgewogICAgICAgIGJyZWFrOwogICAgICB9CiAgICAgIGxldCBwb3MgPSAwOwogICAgICB3aGlsZSAocG9zIDwgc2Nhbkxlbmd0aCkgewogICAgICAgIGxldCBqID0gMDsKICAgICAgICB3aGlsZSAoaiA8IGVuZExlbmd0aCAmJiBzY2FuQnl0ZXNbcG9zICsgal0gPT09IEVORF9TSUdOQVRVUkVbal0pIHsKICAgICAgICAgIGorKzsKICAgICAgICB9CiAgICAgICAgaWYgKGogPj0gZW5kTGVuZ3RoKSB7CiAgICAgICAgICBsZXQgZm91bmQgPSBmYWxzZTsKICAgICAgICAgIGZvciAoY29uc3QgcGFydCBvZiBQQVJUSUFMX1NJR05BVFVSRSkgewogICAgICAgICAgICBjb25zdCBwYXJ0TGVuID0gcGFydC5sZW5ndGg7CiAgICAgICAgICAgIGxldCBrID0gMDsKICAgICAgICAgICAgd2hpbGUgKGsgPCBwYXJ0TGVuICYmIHNjYW5CeXRlc1twb3MgKyBqICsga10gPT09IHBhcnRba10pIHsKICAgICAgICAgICAgICBrKys7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGsgPj0gbm9ybWFsTGVuZ3RoKSB7CiAgICAgICAgICAgICAgZm91bmQgPSB0cnVlOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChrID49IHBhcnRMZW4pIHsKICAgICAgICAgICAgICBjb25zdCBsYXN0Qnl0ZSA9IHNjYW5CeXRlc1twb3MgKyBqICsga107CiAgICAgICAgICAgICAgaWYgKGlzV2hpdGVTcGFjZShsYXN0Qnl0ZSkpIHsKICAgICAgICAgICAgICAgIGluZm8oYEZvdW5kICIke2J5dGVzVG9TdHJpbmcoWy4uLkVORF9TSUdOQVRVUkUsIC4uLnBhcnRdKX0iIHdoZW4gYCArICJzZWFyY2hpbmcgZm9yIGVuZHN0cmVhbSBjb21tYW5kLiIpOwogICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgaWYgKGZvdW5kKSB7CiAgICAgICAgICAgIHN0cmVhbS5wb3MgKz0gcG9zOwogICAgICAgICAgICByZXR1cm4gc3RyZWFtLnBvcyAtIHN0YXJ0UG9zOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBwb3MrKzsKICAgICAgfQogICAgICBzdHJlYW0ucG9zICs9IHNjYW5MZW5ndGg7CiAgICB9CiAgICByZXR1cm4gLTE7CiAgfQogIG1ha2VTdHJlYW0oZGljdCwgY2lwaGVyVHJhbnNmb3JtKSB7CiAgICBjb25zdCBsZXhlciA9IHRoaXMubGV4ZXI7CiAgICBsZXQgc3RyZWFtID0gbGV4ZXIuc3RyZWFtOwogICAgbGV4ZXIuc2tpcFRvTmV4dExpbmUoKTsKICAgIGNvbnN0IHN0YXJ0UG9zID0gc3RyZWFtLnBvcyAtIDE7CiAgICBsZXQgbGVuZ3RoID0gZGljdC5nZXQoIkxlbmd0aCIpOwogICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKGxlbmd0aCkpIHsKICAgICAgaW5mbyhgQmFkIGxlbmd0aCAiJHtsZW5ndGggJiYgbGVuZ3RoLnRvU3RyaW5nKCl9IiBpbiBzdHJlYW0uYCk7CiAgICAgIGxlbmd0aCA9IDA7CiAgICB9CiAgICBzdHJlYW0ucG9zID0gc3RhcnRQb3MgKyBsZW5ndGg7CiAgICBsZXhlci5uZXh0Q2hhcigpOwogICAgaWYgKHRoaXMudHJ5U2hpZnQoKSAmJiBpc0NtZCh0aGlzLmJ1ZjIsICJlbmRzdHJlYW0iKSkgewogICAgICB0aGlzLnNoaWZ0KCk7CiAgICB9IGVsc2UgewogICAgICBsZW5ndGggPSB0aGlzLiNmaW5kU3RyZWFtTGVuZ3RoKHN0YXJ0UG9zKTsKICAgICAgaWYgKGxlbmd0aCA8IDApIHsKICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoIk1pc3NpbmcgZW5kc3RyZWFtIGNvbW1hbmQuIik7CiAgICAgIH0KICAgICAgbGV4ZXIubmV4dENoYXIoKTsKICAgICAgdGhpcy5zaGlmdCgpOwogICAgICB0aGlzLnNoaWZ0KCk7CiAgICB9CiAgICB0aGlzLnNoaWZ0KCk7CiAgICBzdHJlYW0gPSBzdHJlYW0ubWFrZVN1YlN0cmVhbShzdGFydFBvcywgbGVuZ3RoLCBkaWN0KTsKICAgIGlmIChjaXBoZXJUcmFuc2Zvcm0pIHsKICAgICAgc3RyZWFtID0gY2lwaGVyVHJhbnNmb3JtLmNyZWF0ZVN0cmVhbShzdHJlYW0sIGxlbmd0aCk7CiAgICB9CiAgICBzdHJlYW0gPSB0aGlzLmZpbHRlcihzdHJlYW0sIGRpY3QsIGxlbmd0aCk7CiAgICBzdHJlYW0uZGljdCA9IGRpY3Q7CiAgICByZXR1cm4gc3RyZWFtOwogIH0KICBmaWx0ZXIoc3RyZWFtLCBkaWN0LCBsZW5ndGgpIHsKICAgIGxldCBmaWx0ZXIgPSBkaWN0LmdldCgiRiIsICJGaWx0ZXIiKTsKICAgIGxldCBwYXJhbXMgPSBkaWN0LmdldCgiRFAiLCAiRGVjb2RlUGFybXMiKTsKICAgIGlmIChmaWx0ZXIgaW5zdGFuY2VvZiBOYW1lKSB7CiAgICAgIGlmIChBcnJheS5pc0FycmF5KHBhcmFtcykpIHsKICAgICAgICB3YXJuKCIvRGVjb2RlUGFybXMgc2hvdWxkIG5vdCBiZSBhbiBBcnJheSwgd2hlbiAvRmlsdGVyIGlzIGEgTmFtZS4iKTsKICAgICAgfQogICAgICByZXR1cm4gdGhpcy5tYWtlRmlsdGVyKHN0cmVhbSwgZmlsdGVyLm5hbWUsIGxlbmd0aCwgcGFyYW1zKTsKICAgIH0KICAgIGxldCBtYXliZUxlbmd0aCA9IGxlbmd0aDsKICAgIGlmIChBcnJheS5pc0FycmF5KGZpbHRlcikpIHsKICAgICAgY29uc3QgZmlsdGVyQXJyYXkgPSBmaWx0ZXI7CiAgICAgIGNvbnN0IHBhcmFtc0FycmF5ID0gcGFyYW1zOwogICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBmaWx0ZXJBcnJheS5sZW5ndGg7IGkgPCBpaTsgKytpKSB7CiAgICAgICAgZmlsdGVyID0gdGhpcy54cmVmLmZldGNoSWZSZWYoZmlsdGVyQXJyYXlbaV0pOwogICAgICAgIGlmICghKGZpbHRlciBpbnN0YW5jZW9mIE5hbWUpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoYEJhZCBmaWx0ZXIgbmFtZSAiJHtmaWx0ZXJ9ImApOwogICAgICAgIH0KICAgICAgICBwYXJhbXMgPSBudWxsOwogICAgICAgIGlmIChBcnJheS5pc0FycmF5KHBhcmFtc0FycmF5KSAmJiBpIGluIHBhcmFtc0FycmF5KSB7CiAgICAgICAgICBwYXJhbXMgPSB0aGlzLnhyZWYuZmV0Y2hJZlJlZihwYXJhbXNBcnJheVtpXSk7CiAgICAgICAgfQogICAgICAgIHN0cmVhbSA9IHRoaXMubWFrZUZpbHRlcihzdHJlYW0sIGZpbHRlci5uYW1lLCBtYXliZUxlbmd0aCwgcGFyYW1zKTsKICAgICAgICBtYXliZUxlbmd0aCA9IG51bGw7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBzdHJlYW07CiAgfQogIG1ha2VGaWx0ZXIoc3RyZWFtLCBuYW1lLCBtYXliZUxlbmd0aCwgcGFyYW1zKSB7CiAgICBpZiAobWF5YmVMZW5ndGggPT09IDApIHsKICAgICAgd2FybihgRW1wdHkgIiR7bmFtZX0iIHN0cmVhbS5gKTsKICAgICAgcmV0dXJuIG5ldyBOdWxsU3RyZWFtKCk7CiAgICB9CiAgICB0cnkgewogICAgICBzd2l0Y2ggKG5hbWUpIHsKICAgICAgICBjYXNlICJGbCI6CiAgICAgICAgY2FzZSAiRmxhdGVEZWNvZGUiOgogICAgICAgICAgaWYgKHBhcmFtcykgewogICAgICAgICAgICByZXR1cm4gbmV3IFByZWRpY3RvclN0cmVhbShuZXcgRmxhdGVTdHJlYW0oc3RyZWFtLCBtYXliZUxlbmd0aCksIG1heWJlTGVuZ3RoLCBwYXJhbXMpOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIG5ldyBGbGF0ZVN0cmVhbShzdHJlYW0sIG1heWJlTGVuZ3RoKTsKICAgICAgICBjYXNlICJMWlciOgogICAgICAgIGNhc2UgIkxaV0RlY29kZSI6CiAgICAgICAgICBsZXQgZWFybHlDaGFuZ2UgPSAxOwogICAgICAgICAgaWYgKHBhcmFtcykgewogICAgICAgICAgICBpZiAocGFyYW1zLmhhcygiRWFybHlDaGFuZ2UiKSkgewogICAgICAgICAgICAgIGVhcmx5Q2hhbmdlID0gcGFyYW1zLmdldCgiRWFybHlDaGFuZ2UiKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gbmV3IFByZWRpY3RvclN0cmVhbShuZXcgTFpXU3RyZWFtKHN0cmVhbSwgbWF5YmVMZW5ndGgsIGVhcmx5Q2hhbmdlKSwgbWF5YmVMZW5ndGgsIHBhcmFtcyk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gbmV3IExaV1N0cmVhbShzdHJlYW0sIG1heWJlTGVuZ3RoLCBlYXJseUNoYW5nZSk7CiAgICAgICAgY2FzZSAiRENUIjoKICAgICAgICBjYXNlICJEQ1REZWNvZGUiOgogICAgICAgICAgcmV0dXJuIG5ldyBKcGVnU3RyZWFtKHN0cmVhbSwgbWF5YmVMZW5ndGgsIHBhcmFtcyk7CiAgICAgICAgY2FzZSAiSlBYIjoKICAgICAgICBjYXNlICJKUFhEZWNvZGUiOgogICAgICAgICAgcmV0dXJuIG5ldyBKcHhTdHJlYW0oc3RyZWFtLCBtYXliZUxlbmd0aCwgcGFyYW1zKTsKICAgICAgICBjYXNlICJBODUiOgogICAgICAgIGNhc2UgIkFTQ0lJODVEZWNvZGUiOgogICAgICAgICAgcmV0dXJuIG5ldyBBc2NpaTg1U3RyZWFtKHN0cmVhbSwgbWF5YmVMZW5ndGgpOwogICAgICAgIGNhc2UgIkFIeCI6CiAgICAgICAgY2FzZSAiQVNDSUlIZXhEZWNvZGUiOgogICAgICAgICAgcmV0dXJuIG5ldyBBc2NpaUhleFN0cmVhbShzdHJlYW0sIG1heWJlTGVuZ3RoKTsKICAgICAgICBjYXNlICJDQ0YiOgogICAgICAgIGNhc2UgIkNDSVRURmF4RGVjb2RlIjoKICAgICAgICAgIHJldHVybiBuZXcgQ0NJVFRGYXhTdHJlYW0oc3RyZWFtLCBtYXliZUxlbmd0aCwgcGFyYW1zKTsKICAgICAgICBjYXNlICJSTCI6CiAgICAgICAgY2FzZSAiUnVuTGVuZ3RoRGVjb2RlIjoKICAgICAgICAgIHJldHVybiBuZXcgUnVuTGVuZ3RoU3RyZWFtKHN0cmVhbSwgbWF5YmVMZW5ndGgpOwogICAgICAgIGNhc2UgIkpCSUcyRGVjb2RlIjoKICAgICAgICAgIHJldHVybiBuZXcgSmJpZzJTdHJlYW0oc3RyZWFtLCBtYXliZUxlbmd0aCwgcGFyYW1zKTsKICAgICAgfQogICAgICB3YXJuKGBGaWx0ZXIgIiR7bmFtZX0iIGlzIG5vdCBzdXBwb3J0ZWQuYCk7CiAgICAgIHJldHVybiBzdHJlYW07CiAgICB9IGNhdGNoIChleCkgewogICAgICBpZiAoZXggaW5zdGFuY2VvZiBNaXNzaW5nRGF0YUV4Y2VwdGlvbikgewogICAgICAgIHRocm93IGV4OwogICAgICB9CiAgICAgIHdhcm4oYEludmFsaWQgc3RyZWFtOiAiJHtleH0iYCk7CiAgICAgIHJldHVybiBuZXcgTnVsbFN0cmVhbSgpOwogICAgfQogIH0KfQpjb25zdCBzcGVjaWFsQ2hhcnMgPSBbMSwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMSwgMSwgMCwgMSwgMSwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMCwgMiwgMCwgMCwgMiwgMiwgMCwgMCwgMCwgMCwgMCwgMiwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMiwgMCwgMiwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMiwgMCwgMiwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMiwgMCwgMiwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF07CmZ1bmN0aW9uIHRvSGV4RGlnaXQoY2gpIHsKICBpZiAoY2ggPj0gMHgzMCAmJiBjaCA8PSAweDM5KSB7CiAgICByZXR1cm4gY2ggJiAweDBmOwogIH0KICBpZiAoY2ggPj0gMHg0MSAmJiBjaCA8PSAweDQ2IHx8IGNoID49IDB4NjEgJiYgY2ggPD0gMHg2NikgewogICAgcmV0dXJuIChjaCAmIDB4MGYpICsgOTsKICB9CiAgcmV0dXJuIC0xOwp9CmNsYXNzIExleGVyIHsKICBjb25zdHJ1Y3RvcihzdHJlYW0sIGtub3duQ29tbWFuZHMgPSBudWxsKSB7CiAgICB0aGlzLnN0cmVhbSA9IHN0cmVhbTsKICAgIHRoaXMubmV4dENoYXIoKTsKICAgIHRoaXMuc3RyQnVmID0gW107CiAgICB0aGlzLmtub3duQ29tbWFuZHMgPSBrbm93bkNvbW1hbmRzOwogICAgdGhpcy5faGV4U3RyaW5nTnVtV2FybiA9IDA7CiAgICB0aGlzLmJlZ2luSW5saW5lSW1hZ2VQb3MgPSAtMTsKICB9CiAgbmV4dENoYXIoKSB7CiAgICByZXR1cm4gdGhpcy5jdXJyZW50Q2hhciA9IHRoaXMuc3RyZWFtLmdldEJ5dGUoKTsKICB9CiAgcGVla0NoYXIoKSB7CiAgICByZXR1cm4gdGhpcy5zdHJlYW0ucGVla0J5dGUoKTsKICB9CiAgZ2V0TnVtYmVyKCkgewogICAgbGV0IGNoID0gdGhpcy5jdXJyZW50Q2hhcjsKICAgIGxldCBlTm90YXRpb24gPSBmYWxzZTsKICAgIGxldCBkaXZpZGVCeSA9IDA7CiAgICBsZXQgc2lnbiA9IDE7CiAgICBpZiAoY2ggPT09IDB4MmQpIHsKICAgICAgc2lnbiA9IC0xOwogICAgICBjaCA9IHRoaXMubmV4dENoYXIoKTsKICAgICAgaWYgKGNoID09PSAweDJkKSB7CiAgICAgICAgY2ggPSB0aGlzLm5leHRDaGFyKCk7CiAgICAgIH0KICAgIH0gZWxzZSBpZiAoY2ggPT09IDB4MmIpIHsKICAgICAgY2ggPSB0aGlzLm5leHRDaGFyKCk7CiAgICB9CiAgICBpZiAoY2ggPT09IDB4MGEgfHwgY2ggPT09IDB4MGQpIHsKICAgICAgZG8gewogICAgICAgIGNoID0gdGhpcy5uZXh0Q2hhcigpOwogICAgICB9IHdoaWxlIChjaCA9PT0gMHgwYSB8fCBjaCA9PT0gMHgwZCk7CiAgICB9CiAgICBpZiAoY2ggPT09IDB4MmUpIHsKICAgICAgZGl2aWRlQnkgPSAxMDsKICAgICAgY2ggPSB0aGlzLm5leHRDaGFyKCk7CiAgICB9CiAgICBpZiAoY2ggPCAweDMwIHx8IGNoID4gMHgzOSkgewogICAgICBjb25zdCBtc2cgPSBgSW52YWxpZCBudW1iZXI6ICR7U3RyaW5nLmZyb21DaGFyQ29kZShjaCl9IChjaGFyQ29kZSAke2NofSlgOwogICAgICBpZiAoaXNXaGl0ZVNwYWNlKGNoKSB8fCBjaCA9PT0gMHgyOCB8fCBjaCA9PT0gMHgzYyB8fCBjaCA9PT0gLTEpIHsKICAgICAgICBpbmZvKGBMZXhlci5nZXROdW1iZXIgLSAiJHttc2d9Ii5gKTsKICAgICAgICByZXR1cm4gMDsKICAgICAgfQogICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IobXNnKTsKICAgIH0KICAgIGxldCBiYXNlVmFsdWUgPSBjaCAtIDB4MzA7CiAgICBsZXQgcG93ZXJWYWx1ZSA9IDA7CiAgICBsZXQgcG93ZXJWYWx1ZVNpZ24gPSAxOwogICAgd2hpbGUgKChjaCA9IHRoaXMubmV4dENoYXIoKSkgPj0gMCkgewogICAgICBpZiAoY2ggPj0gMHgzMCAmJiBjaCA8PSAweDM5KSB7CiAgICAgICAgY29uc3QgY3VycmVudERpZ2l0ID0gY2ggLSAweDMwOwogICAgICAgIGlmIChlTm90YXRpb24pIHsKICAgICAgICAgIHBvd2VyVmFsdWUgPSBwb3dlclZhbHVlICogMTAgKyBjdXJyZW50RGlnaXQ7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGlmIChkaXZpZGVCeSAhPT0gMCkgewogICAgICAgICAgICBkaXZpZGVCeSAqPSAxMDsKICAgICAgICAgIH0KICAgICAgICAgIGJhc2VWYWx1ZSA9IGJhc2VWYWx1ZSAqIDEwICsgY3VycmVudERpZ2l0OwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmIChjaCA9PT0gMHgyZSkgewogICAgICAgIGlmIChkaXZpZGVCeSA9PT0gMCkgewogICAgICAgICAgZGl2aWRlQnkgPSAxOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAoY2ggPT09IDB4MmQpIHsKICAgICAgICB3YXJuKCJCYWRseSBmb3JtYXR0ZWQgbnVtYmVyOiBtaW51cyBzaWduIGluIHRoZSBtaWRkbGUiKTsKICAgICAgfSBlbHNlIGlmIChjaCA9PT0gMHg0NSB8fCBjaCA9PT0gMHg2NSkgewogICAgICAgIGNoID0gdGhpcy5wZWVrQ2hhcigpOwogICAgICAgIGlmIChjaCA9PT0gMHgyYiB8fCBjaCA9PT0gMHgyZCkgewogICAgICAgICAgcG93ZXJWYWx1ZVNpZ24gPSBjaCA9PT0gMHgyZCA/IC0xIDogMTsKICAgICAgICAgIHRoaXMubmV4dENoYXIoKTsKICAgICAgICB9IGVsc2UgaWYgKGNoIDwgMHgzMCB8fCBjaCA+IDB4MzkpIHsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgICBlTm90YXRpb24gPSB0cnVlOwogICAgICB9IGVsc2UgewogICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CiAgICBpZiAoZGl2aWRlQnkgIT09IDApIHsKICAgICAgYmFzZVZhbHVlIC89IGRpdmlkZUJ5OwogICAgfQogICAgaWYgKGVOb3RhdGlvbikgewogICAgICBiYXNlVmFsdWUgKj0gMTAgKiogKHBvd2VyVmFsdWVTaWduICogcG93ZXJWYWx1ZSk7CiAgICB9CiAgICByZXR1cm4gc2lnbiAqIGJhc2VWYWx1ZTsKICB9CiAgZ2V0U3RyaW5nKCkgewogICAgbGV0IG51bVBhcmVuID0gMTsKICAgIGxldCBkb25lID0gZmFsc2U7CiAgICBjb25zdCBzdHJCdWYgPSB0aGlzLnN0ckJ1ZjsKICAgIHN0ckJ1Zi5sZW5ndGggPSAwOwogICAgbGV0IGNoID0gdGhpcy5uZXh0Q2hhcigpOwogICAgd2hpbGUgKHRydWUpIHsKICAgICAgbGV0IGNoYXJCdWZmZXJlZCA9IGZhbHNlOwogICAgICBzd2l0Y2ggKGNoIHwgMCkgewogICAgICAgIGNhc2UgLTE6CiAgICAgICAgICB3YXJuKCJVbnRlcm1pbmF0ZWQgc3RyaW5nIik7CiAgICAgICAgICBkb25lID0gdHJ1ZTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgMHgyODoKICAgICAgICAgICsrbnVtUGFyZW47CiAgICAgICAgICBzdHJCdWYucHVzaCgiKCIpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAweDI5OgogICAgICAgICAgaWYgKC0tbnVtUGFyZW4gPT09IDApIHsKICAgICAgICAgICAgdGhpcy5uZXh0Q2hhcigpOwogICAgICAgICAgICBkb25lID0gdHJ1ZTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHN0ckJ1Zi5wdXNoKCIpIik7CiAgICAgICAgICB9CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIDB4NWM6CiAgICAgICAgICBjaCA9IHRoaXMubmV4dENoYXIoKTsKICAgICAgICAgIHN3aXRjaCAoY2gpIHsKICAgICAgICAgICAgY2FzZSAtMToKICAgICAgICAgICAgICB3YXJuKCJVbnRlcm1pbmF0ZWQgc3RyaW5nIik7CiAgICAgICAgICAgICAgZG9uZSA9IHRydWU7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgMHg2ZToKICAgICAgICAgICAgICBzdHJCdWYucHVzaCgiXG4iKTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAweDcyOgogICAgICAgICAgICAgIHN0ckJ1Zi5wdXNoKCJcciIpOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIDB4NzQ6CiAgICAgICAgICAgICAgc3RyQnVmLnB1c2goIlx0Iik7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgMHg2MjoKICAgICAgICAgICAgICBzdHJCdWYucHVzaCgiXGIiKTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAweDY2OgogICAgICAgICAgICAgIHN0ckJ1Zi5wdXNoKCJcZiIpOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIDB4NWM6CiAgICAgICAgICAgIGNhc2UgMHgyODoKICAgICAgICAgICAgY2FzZSAweDI5OgogICAgICAgICAgICAgIHN0ckJ1Zi5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoY2gpKTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAweDMwOgogICAgICAgICAgICBjYXNlIDB4MzE6CiAgICAgICAgICAgIGNhc2UgMHgzMjoKICAgICAgICAgICAgY2FzZSAweDMzOgogICAgICAgICAgICBjYXNlIDB4MzQ6CiAgICAgICAgICAgIGNhc2UgMHgzNToKICAgICAgICAgICAgY2FzZSAweDM2OgogICAgICAgICAgICBjYXNlIDB4Mzc6CiAgICAgICAgICAgICAgbGV0IHggPSBjaCAmIDB4MGY7CiAgICAgICAgICAgICAgY2ggPSB0aGlzLm5leHRDaGFyKCk7CiAgICAgICAgICAgICAgY2hhckJ1ZmZlcmVkID0gdHJ1ZTsKICAgICAgICAgICAgICBpZiAoY2ggPj0gMHgzMCAmJiBjaCA8PSAweDM3KSB7CiAgICAgICAgICAgICAgICB4ID0gKHggPDwgMykgKyAoY2ggJiAweDBmKTsKICAgICAgICAgICAgICAgIGNoID0gdGhpcy5uZXh0Q2hhcigpOwogICAgICAgICAgICAgICAgaWYgKGNoID49IDB4MzAgJiYgY2ggPD0gMHgzNykgewogICAgICAgICAgICAgICAgICBjaGFyQnVmZmVyZWQgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgeCA9ICh4IDw8IDMpICsgKGNoICYgMHgwZik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHN0ckJ1Zi5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoeCkpOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIDB4MGQ6CiAgICAgICAgICAgICAgaWYgKHRoaXMucGVla0NoYXIoKSA9PT0gMHgwYSkgewogICAgICAgICAgICAgICAgdGhpcy5uZXh0Q2hhcigpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAweDBhOgogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgIHN0ckJ1Zi5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoY2gpKTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICAgIGJyZWFrOwogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICBzdHJCdWYucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGNoKSk7CiAgICAgICAgICBicmVhazsKICAgICAgfQogICAgICBpZiAoZG9uZSkgewogICAgICAgIGJyZWFrOwogICAgICB9CiAgICAgIGlmICghY2hhckJ1ZmZlcmVkKSB7CiAgICAgICAgY2ggPSB0aGlzLm5leHRDaGFyKCk7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBzdHJCdWYuam9pbigiIik7CiAgfQogIGdldE5hbWUoKSB7CiAgICBsZXQgY2gsIHByZXZpb3VzQ2g7CiAgICBjb25zdCBzdHJCdWYgPSB0aGlzLnN0ckJ1ZjsKICAgIHN0ckJ1Zi5sZW5ndGggPSAwOwogICAgd2hpbGUgKChjaCA9IHRoaXMubmV4dENoYXIoKSkgPj0gMCAmJiAhc3BlY2lhbENoYXJzW2NoXSkgewogICAgICBpZiAoY2ggPT09IDB4MjMpIHsKICAgICAgICBjaCA9IHRoaXMubmV4dENoYXIoKTsKICAgICAgICBpZiAoc3BlY2lhbENoYXJzW2NoXSkgewogICAgICAgICAgd2FybigiTGV4ZXJfZ2V0TmFtZTogIiArICJOVU1CRVIgU0lHTiAoIykgc2hvdWxkIGJlIGZvbGxvd2VkIGJ5IGEgaGV4YWRlY2ltYWwgbnVtYmVyLiIpOwogICAgICAgICAgc3RyQnVmLnB1c2goIiMiKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgICBjb25zdCB4ID0gdG9IZXhEaWdpdChjaCk7CiAgICAgICAgaWYgKHggIT09IC0xKSB7CiAgICAgICAgICBwcmV2aW91c0NoID0gY2g7CiAgICAgICAgICBjaCA9IHRoaXMubmV4dENoYXIoKTsKICAgICAgICAgIGNvbnN0IHgyID0gdG9IZXhEaWdpdChjaCk7CiAgICAgICAgICBpZiAoeDIgPT09IC0xKSB7CiAgICAgICAgICAgIHdhcm4oYExleGVyX2dldE5hbWU6IElsbGVnYWwgZGlnaXQgKCR7U3RyaW5nLmZyb21DaGFyQ29kZShjaCl9KSBgICsgImluIGhleGFkZWNpbWFsIG51bWJlci4iKTsKICAgICAgICAgICAgc3RyQnVmLnB1c2goIiMiLCBTdHJpbmcuZnJvbUNoYXJDb2RlKHByZXZpb3VzQ2gpKTsKICAgICAgICAgICAgaWYgKHNwZWNpYWxDaGFyc1tjaF0pIHsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICBzdHJCdWYucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGNoKSk7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgICAgc3RyQnVmLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSh4IDw8IDQgfCB4MikpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzdHJCdWYucHVzaCgiIyIsIFN0cmluZy5mcm9tQ2hhckNvZGUoY2gpKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgc3RyQnVmLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShjaCkpOwogICAgICB9CiAgICB9CiAgICBpZiAoc3RyQnVmLmxlbmd0aCA+IDEyNykgewogICAgICB3YXJuKGBOYW1lIHRva2VuIGlzIGxvbmdlciB0aGFuIGFsbG93ZWQgYnkgdGhlIHNwZWM6ICR7c3RyQnVmLmxlbmd0aH1gKTsKICAgIH0KICAgIHJldHVybiBOYW1lLmdldChzdHJCdWYuam9pbigiIikpOwogIH0KICBfaGV4U3RyaW5nV2FybihjaCkgewogICAgY29uc3QgTUFYX0hFWF9TVFJJTkdfTlVNX1dBUk4gPSA1OwogICAgaWYgKHRoaXMuX2hleFN0cmluZ051bVdhcm4rKyA9PT0gTUFYX0hFWF9TVFJJTkdfTlVNX1dBUk4pIHsKICAgICAgd2FybigiZ2V0SGV4U3RyaW5nIC0gaWdub3JpbmcgYWRkaXRpb25hbCBpbnZhbGlkIGNoYXJhY3RlcnMuIik7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGlmICh0aGlzLl9oZXhTdHJpbmdOdW1XYXJuID4gTUFYX0hFWF9TVFJJTkdfTlVNX1dBUk4pIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgd2FybihgZ2V0SGV4U3RyaW5nIC0gaWdub3JpbmcgaW52YWxpZCBjaGFyYWN0ZXI6ICR7Y2h9YCk7CiAgfQogIGdldEhleFN0cmluZygpIHsKICAgIGNvbnN0IHN0ckJ1ZiA9IHRoaXMuc3RyQnVmOwogICAgc3RyQnVmLmxlbmd0aCA9IDA7CiAgICBsZXQgY2ggPSB0aGlzLmN1cnJlbnRDaGFyOwogICAgbGV0IGZpcnN0RGlnaXQgPSAtMSwKICAgICAgZGlnaXQgPSAtMTsKICAgIHRoaXMuX2hleFN0cmluZ051bVdhcm4gPSAwOwogICAgd2hpbGUgKHRydWUpIHsKICAgICAgaWYgKGNoIDwgMCkgewogICAgICAgIHdhcm4oIlVudGVybWluYXRlZCBoZXggc3RyaW5nIik7CiAgICAgICAgYnJlYWs7CiAgICAgIH0gZWxzZSBpZiAoY2ggPT09IDB4M2UpIHsKICAgICAgICB0aGlzLm5leHRDaGFyKCk7CiAgICAgICAgYnJlYWs7CiAgICAgIH0gZWxzZSBpZiAoc3BlY2lhbENoYXJzW2NoXSA9PT0gMSkgewogICAgICAgIGNoID0gdGhpcy5uZXh0Q2hhcigpOwogICAgICAgIGNvbnRpbnVlOwogICAgICB9IGVsc2UgewogICAgICAgIGRpZ2l0ID0gdG9IZXhEaWdpdChjaCk7CiAgICAgICAgaWYgKGRpZ2l0ID09PSAtMSkgewogICAgICAgICAgdGhpcy5faGV4U3RyaW5nV2FybihjaCk7CiAgICAgICAgfSBlbHNlIGlmIChmaXJzdERpZ2l0ID09PSAtMSkgewogICAgICAgICAgZmlyc3REaWdpdCA9IGRpZ2l0OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzdHJCdWYucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGZpcnN0RGlnaXQgPDwgNCB8IGRpZ2l0KSk7CiAgICAgICAgICBmaXJzdERpZ2l0ID0gLTE7CiAgICAgICAgfQogICAgICAgIGNoID0gdGhpcy5uZXh0Q2hhcigpOwogICAgICB9CiAgICB9CiAgICBpZiAoZmlyc3REaWdpdCAhPT0gLTEpIHsKICAgICAgc3RyQnVmLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShmaXJzdERpZ2l0IDw8IDQpKTsKICAgIH0KICAgIHJldHVybiBzdHJCdWYuam9pbigiIik7CiAgfQogIGdldE9iaigpIHsKICAgIGxldCBjb21tZW50ID0gZmFsc2U7CiAgICBsZXQgY2ggPSB0aGlzLmN1cnJlbnRDaGFyOwogICAgd2hpbGUgKHRydWUpIHsKICAgICAgaWYgKGNoIDwgMCkgewogICAgICAgIHJldHVybiBFT0Y7CiAgICAgIH0KICAgICAgaWYgKGNvbW1lbnQpIHsKICAgICAgICBpZiAoY2ggPT09IDB4MGEgfHwgY2ggPT09IDB4MGQpIHsKICAgICAgICAgIGNvbW1lbnQgPSBmYWxzZTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAoY2ggPT09IDB4MjUpIHsKICAgICAgICBjb21tZW50ID0gdHJ1ZTsKICAgICAgfSBlbHNlIGlmIChzcGVjaWFsQ2hhcnNbY2hdICE9PSAxKSB7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgICAgY2ggPSB0aGlzLm5leHRDaGFyKCk7CiAgICB9CiAgICBzd2l0Y2ggKGNoIHwgMCkgewogICAgICBjYXNlIDB4MzA6CiAgICAgIGNhc2UgMHgzMToKICAgICAgY2FzZSAweDMyOgogICAgICBjYXNlIDB4MzM6CiAgICAgIGNhc2UgMHgzNDoKICAgICAgY2FzZSAweDM1OgogICAgICBjYXNlIDB4MzY6CiAgICAgIGNhc2UgMHgzNzoKICAgICAgY2FzZSAweDM4OgogICAgICBjYXNlIDB4Mzk6CiAgICAgIGNhc2UgMHgyYjoKICAgICAgY2FzZSAweDJkOgogICAgICBjYXNlIDB4MmU6CiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TnVtYmVyKCk7CiAgICAgIGNhc2UgMHgyODoKICAgICAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmcoKTsKICAgICAgY2FzZSAweDJmOgogICAgICAgIHJldHVybiB0aGlzLmdldE5hbWUoKTsKICAgICAgY2FzZSAweDViOgogICAgICAgIHRoaXMubmV4dENoYXIoKTsKICAgICAgICByZXR1cm4gQ21kLmdldCgiWyIpOwogICAgICBjYXNlIDB4NWQ6CiAgICAgICAgdGhpcy5uZXh0Q2hhcigpOwogICAgICAgIHJldHVybiBDbWQuZ2V0KCJdIik7CiAgICAgIGNhc2UgMHgzYzoKICAgICAgICBjaCA9IHRoaXMubmV4dENoYXIoKTsKICAgICAgICBpZiAoY2ggPT09IDB4M2MpIHsKICAgICAgICAgIHRoaXMubmV4dENoYXIoKTsKICAgICAgICAgIHJldHVybiBDbWQuZ2V0KCI8PCIpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdGhpcy5nZXRIZXhTdHJpbmcoKTsKICAgICAgY2FzZSAweDNlOgogICAgICAgIGNoID0gdGhpcy5uZXh0Q2hhcigpOwogICAgICAgIGlmIChjaCA9PT0gMHgzZSkgewogICAgICAgICAgdGhpcy5uZXh0Q2hhcigpOwogICAgICAgICAgcmV0dXJuIENtZC5nZXQoIj4+Iik7CiAgICAgICAgfQogICAgICAgIHJldHVybiBDbWQuZ2V0KCI+Iik7CiAgICAgIGNhc2UgMHg3YjoKICAgICAgICB0aGlzLm5leHRDaGFyKCk7CiAgICAgICAgcmV0dXJuIENtZC5nZXQoInsiKTsKICAgICAgY2FzZSAweDdkOgogICAgICAgIHRoaXMubmV4dENoYXIoKTsKICAgICAgICByZXR1cm4gQ21kLmdldCgifSIpOwogICAgICBjYXNlIDB4Mjk6CiAgICAgICAgdGhpcy5uZXh0Q2hhcigpOwogICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcihgSWxsZWdhbCBjaGFyYWN0ZXI6ICR7Y2h9YCk7CiAgICB9CiAgICBsZXQgc3RyID0gU3RyaW5nLmZyb21DaGFyQ29kZShjaCk7CiAgICBpZiAoY2ggPCAweDIwIHx8IGNoID4gMHg3ZikgewogICAgICBjb25zdCBuZXh0Q2ggPSB0aGlzLnBlZWtDaGFyKCk7CiAgICAgIGlmIChuZXh0Q2ggPj0gMHgyMCAmJiBuZXh0Q2ggPD0gMHg3ZikgewogICAgICAgIHRoaXMubmV4dENoYXIoKTsKICAgICAgICByZXR1cm4gQ21kLmdldChzdHIpOwogICAgICB9CiAgICB9CiAgICBjb25zdCBrbm93bkNvbW1hbmRzID0gdGhpcy5rbm93bkNvbW1hbmRzOwogICAgbGV0IGtub3duQ29tbWFuZEZvdW5kID0ga25vd25Db21tYW5kcz8uW3N0cl0gIT09IHVuZGVmaW5lZDsKICAgIHdoaWxlICgoY2ggPSB0aGlzLm5leHRDaGFyKCkpID49IDAgJiYgIXNwZWNpYWxDaGFyc1tjaF0pIHsKICAgICAgY29uc3QgcG9zc2libGVDb21tYW5kID0gc3RyICsgU3RyaW5nLmZyb21DaGFyQ29kZShjaCk7CiAgICAgIGlmIChrbm93bkNvbW1hbmRGb3VuZCAmJiBrbm93bkNvbW1hbmRzW3Bvc3NpYmxlQ29tbWFuZF0gPT09IHVuZGVmaW5lZCkgewogICAgICAgIGJyZWFrOwogICAgICB9CiAgICAgIGlmIChzdHIubGVuZ3RoID09PSAxMjgpIHsKICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoYENvbW1hbmQgdG9rZW4gdG9vIGxvbmc6ICR7c3RyLmxlbmd0aH1gKTsKICAgICAgfQogICAgICBzdHIgPSBwb3NzaWJsZUNvbW1hbmQ7CiAgICAgIGtub3duQ29tbWFuZEZvdW5kID0ga25vd25Db21tYW5kcz8uW3N0cl0gIT09IHVuZGVmaW5lZDsKICAgIH0KICAgIGlmIChzdHIgPT09ICJ0cnVlIikgewogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIGlmIChzdHIgPT09ICJmYWxzZSIpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgaWYgKHN0ciA9PT0gIm51bGwiKSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgaWYgKHN0ciA9PT0gIkJJIikgewogICAgICB0aGlzLmJlZ2luSW5saW5lSW1hZ2VQb3MgPSB0aGlzLnN0cmVhbS5wb3M7CiAgICB9CiAgICByZXR1cm4gQ21kLmdldChzdHIpOwogIH0KICBza2lwVG9OZXh0TGluZSgpIHsKICAgIGxldCBjaCA9IHRoaXMuY3VycmVudENoYXI7CiAgICB3aGlsZSAoY2ggPj0gMCkgewogICAgICBpZiAoY2ggPT09IDB4MGQpIHsKICAgICAgICBjaCA9IHRoaXMubmV4dENoYXIoKTsKICAgICAgICBpZiAoY2ggPT09IDB4MGEpIHsKICAgICAgICAgIHRoaXMubmV4dENoYXIoKTsKICAgICAgICB9CiAgICAgICAgYnJlYWs7CiAgICAgIH0gZWxzZSBpZiAoY2ggPT09IDB4MGEpIHsKICAgICAgICB0aGlzLm5leHRDaGFyKCk7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgICAgY2ggPSB0aGlzLm5leHRDaGFyKCk7CiAgICB9CiAgfQp9CmNsYXNzIExpbmVhcml6YXRpb24gewogIHN0YXRpYyBjcmVhdGUoc3RyZWFtKSB7CiAgICBmdW5jdGlvbiBnZXRJbnQobGluRGljdCwgbmFtZSwgYWxsb3daZXJvVmFsdWUgPSBmYWxzZSkgewogICAgICBjb25zdCBvYmogPSBsaW5EaWN0LmdldChuYW1lKTsKICAgICAgaWYgKE51bWJlci5pc0ludGVnZXIob2JqKSAmJiAoYWxsb3daZXJvVmFsdWUgPyBvYmogPj0gMCA6IG9iaiA+IDApKSB7CiAgICAgICAgcmV0dXJuIG9iajsKICAgICAgfQogICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSAiJHtuYW1lfSIgcGFyYW1ldGVyIGluIHRoZSBsaW5lYXJpemF0aW9uIGAgKyAiZGljdGlvbmFyeSBpcyBpbnZhbGlkLiIpOwogICAgfQogICAgZnVuY3Rpb24gZ2V0SGludHMobGluRGljdCkgewogICAgICBjb25zdCBoaW50cyA9IGxpbkRpY3QuZ2V0KCJIIik7CiAgICAgIGxldCBoaW50c0xlbmd0aDsKICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaGludHMpICYmICgoaGludHNMZW5ndGggPSBoaW50cy5sZW5ndGgpID09PSAyIHx8IGhpbnRzTGVuZ3RoID09PSA0KSkgewogICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBoaW50c0xlbmd0aDsgaW5kZXgrKykgewogICAgICAgICAgY29uc3QgaGludCA9IGhpbnRzW2luZGV4XTsKICAgICAgICAgIGlmICghKE51bWJlci5pc0ludGVnZXIoaGludCkgJiYgaGludCA+IDApKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSGludCAoJHtpbmRleH0pIGluIHRoZSBsaW5lYXJpemF0aW9uIGRpY3Rpb25hcnkgaXMgaW52YWxpZC5gKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGhpbnRzOwogICAgICB9CiAgICAgIHRocm93IG5ldyBFcnJvcigiSGludCBhcnJheSBpbiB0aGUgbGluZWFyaXphdGlvbiBkaWN0aW9uYXJ5IGlzIGludmFsaWQuIik7CiAgICB9CiAgICBjb25zdCBwYXJzZXIgPSBuZXcgUGFyc2VyKHsKICAgICAgbGV4ZXI6IG5ldyBMZXhlcihzdHJlYW0pLAogICAgICB4cmVmOiBudWxsCiAgICB9KTsKICAgIGNvbnN0IG9iajEgPSBwYXJzZXIuZ2V0T2JqKCk7CiAgICBjb25zdCBvYmoyID0gcGFyc2VyLmdldE9iaigpOwogICAgY29uc3Qgb2JqMyA9IHBhcnNlci5nZXRPYmooKTsKICAgIGNvbnN0IGxpbkRpY3QgPSBwYXJzZXIuZ2V0T2JqKCk7CiAgICBsZXQgb2JqLCBsZW5ndGg7CiAgICBpZiAoIShOdW1iZXIuaXNJbnRlZ2VyKG9iajEpICYmIE51bWJlci5pc0ludGVnZXIob2JqMikgJiYgaXNDbWQob2JqMywgIm9iaiIpICYmIGxpbkRpY3QgaW5zdGFuY2VvZiBEaWN0ICYmIHR5cGVvZiAob2JqID0gbGluRGljdC5nZXQoIkxpbmVhcml6ZWQiKSkgPT09ICJudW1iZXIiICYmIG9iaiA+IDApKSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfSBlbHNlIGlmICgobGVuZ3RoID0gZ2V0SW50KGxpbkRpY3QsICJMIikpICE9PSBzdHJlYW0ubGVuZ3RoKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcignVGhlICJMIiBwYXJhbWV0ZXIgaW4gdGhlIGxpbmVhcml6YXRpb24gZGljdGlvbmFyeSAnICsgImRvZXMgbm90IGVxdWFsIHRoZSBzdHJlYW0gbGVuZ3RoLiIpOwogICAgfQogICAgcmV0dXJuIHsKICAgICAgbGVuZ3RoLAogICAgICBoaW50czogZ2V0SGludHMobGluRGljdCksCiAgICAgIG9iamVjdE51bWJlckZpcnN0OiBnZXRJbnQobGluRGljdCwgIk8iKSwKICAgICAgZW5kRmlyc3Q6IGdldEludChsaW5EaWN0LCAiRSIpLAogICAgICBudW1QYWdlczogZ2V0SW50KGxpbkRpY3QsICJOIiksCiAgICAgIG1haW5YUmVmRW50cmllc09mZnNldDogZ2V0SW50KGxpbkRpY3QsICJUIiksCiAgICAgIHBhZ2VGaXJzdDogbGluRGljdC5oYXMoIlAiKSA/IGdldEludChsaW5EaWN0LCAiUCIsIHRydWUpIDogMAogICAgfTsKICB9Cn0KCjsvLyAuL3NyYy9jb3JlL2NtYXAuanMKCgoKCgoKCgoKCmNvbnN0IEJVSUxUX0lOX0NNQVBTID0gWyJBZG9iZS1HQjEtVUNTMiIsICJBZG9iZS1DTlMxLVVDUzIiLCAiQWRvYmUtSmFwYW4xLVVDUzIiLCAiQWRvYmUtS29yZWExLVVDUzIiLCAiNzgtRVVDLUgiLCAiNzgtRVVDLVYiLCAiNzgtSCIsICI3OC1SS1NKLUgiLCAiNzgtUktTSi1WIiwgIjc4LVYiLCAiNzhtcy1SS1NKLUgiLCAiNzhtcy1SS1NKLVYiLCAiODNwdi1SS1NKLUgiLCAiOTBtcy1SS1NKLUgiLCAiOTBtcy1SS1NKLVYiLCAiOTBtc3AtUktTSi1IIiwgIjkwbXNwLVJLU0otViIsICI5MHB2LVJLU0otSCIsICI5MHB2LVJLU0otViIsICJBZGQtSCIsICJBZGQtUktTSi1IIiwgIkFkZC1SS1NKLVYiLCAiQWRkLVYiLCAiQWRvYmUtQ05TMS0wIiwgIkFkb2JlLUNOUzEtMSIsICJBZG9iZS1DTlMxLTIiLCAiQWRvYmUtQ05TMS0zIiwgIkFkb2JlLUNOUzEtNCIsICJBZG9iZS1DTlMxLTUiLCAiQWRvYmUtQ05TMS02IiwgIkFkb2JlLUdCMS0wIiwgIkFkb2JlLUdCMS0xIiwgIkFkb2JlLUdCMS0yIiwgIkFkb2JlLUdCMS0zIiwgIkFkb2JlLUdCMS00IiwgIkFkb2JlLUdCMS01IiwgIkFkb2JlLUphcGFuMS0wIiwgIkFkb2JlLUphcGFuMS0xIiwgIkFkb2JlLUphcGFuMS0yIiwgIkFkb2JlLUphcGFuMS0zIiwgIkFkb2JlLUphcGFuMS00IiwgIkFkb2JlLUphcGFuMS01IiwgIkFkb2JlLUphcGFuMS02IiwgIkFkb2JlLUtvcmVhMS0wIiwgIkFkb2JlLUtvcmVhMS0xIiwgIkFkb2JlLUtvcmVhMS0yIiwgIkI1LUgiLCAiQjUtViIsICJCNXBjLUgiLCAiQjVwYy1WIiwgIkNOUy1FVUMtSCIsICJDTlMtRVVDLVYiLCAiQ05TMS1IIiwgIkNOUzEtViIsICJDTlMyLUgiLCAiQ05TMi1WIiwgIkVUSEstQjUtSCIsICJFVEhLLUI1LVYiLCAiRVRlbi1CNS1IIiwgIkVUZW4tQjUtViIsICJFVGVubXMtQjUtSCIsICJFVGVubXMtQjUtViIsICJFVUMtSCIsICJFVUMtViIsICJFeHQtSCIsICJFeHQtUktTSi1IIiwgIkV4dC1SS1NKLVYiLCAiRXh0LVYiLCAiR0ItRVVDLUgiLCAiR0ItRVVDLVYiLCAiR0ItSCIsICJHQi1WIiwgIkdCSy1FVUMtSCIsICJHQkstRVVDLVYiLCAiR0JLMkstSCIsICJHQksySy1WIiwgIkdCS3AtRVVDLUgiLCAiR0JLcC1FVUMtViIsICJHQlQtRVVDLUgiLCAiR0JULUVVQy1WIiwgIkdCVC1IIiwgIkdCVC1WIiwgIkdCVHBjLUVVQy1IIiwgIkdCVHBjLUVVQy1WIiwgIkdCcGMtRVVDLUgiLCAiR0JwYy1FVUMtViIsICJIIiwgIkhLZGxhLUI1LUgiLCAiSEtkbGEtQjUtViIsICJIS2RsYi1CNS1IIiwgIkhLZGxiLUI1LVYiLCAiSEtnY2NzLUI1LUgiLCAiSEtnY2NzLUI1LVYiLCAiSEttMzE0LUI1LUgiLCAiSEttMzE0LUI1LVYiLCAiSEttNDcxLUI1LUgiLCAiSEttNDcxLUI1LVYiLCAiSEtzY3MtQjUtSCIsICJIS3Njcy1CNS1WIiwgIkhhbmtha3UiLCAiSGlyYWdhbmEiLCAiS1NDLUVVQy1IIiwgIktTQy1FVUMtViIsICJLU0MtSCIsICJLU0MtSm9oYWItSCIsICJLU0MtSm9oYWItViIsICJLU0MtViIsICJLU0Ntcy1VSEMtSCIsICJLU0Ntcy1VSEMtSFctSCIsICJLU0Ntcy1VSEMtSFctViIsICJLU0Ntcy1VSEMtViIsICJLU0NwYy1FVUMtSCIsICJLU0NwYy1FVUMtViIsICJLYXRha2FuYSIsICJOV1AtSCIsICJOV1AtViIsICJSS1NKLUgiLCAiUktTSi1WIiwgIlJvbWFuIiwgIlVuaUNOUy1VQ1MyLUgiLCAiVW5pQ05TLVVDUzItViIsICJVbmlDTlMtVVRGMTYtSCIsICJVbmlDTlMtVVRGMTYtViIsICJVbmlDTlMtVVRGMzItSCIsICJVbmlDTlMtVVRGMzItViIsICJVbmlDTlMtVVRGOC1IIiwgIlVuaUNOUy1VVEY4LVYiLCAiVW5pR0ItVUNTMi1IIiwgIlVuaUdCLVVDUzItViIsICJVbmlHQi1VVEYxNi1IIiwgIlVuaUdCLVVURjE2LVYiLCAiVW5pR0ItVVRGMzItSCIsICJVbmlHQi1VVEYzMi1WIiwgIlVuaUdCLVVURjgtSCIsICJVbmlHQi1VVEY4LVYiLCAiVW5pSklTLVVDUzItSCIsICJVbmlKSVMtVUNTMi1IVy1IIiwgIlVuaUpJUy1VQ1MyLUhXLVYiLCAiVW5pSklTLVVDUzItViIsICJVbmlKSVMtVVRGMTYtSCIsICJVbmlKSVMtVVRGMTYtViIsICJVbmlKSVMtVVRGMzItSCIsICJVbmlKSVMtVVRGMzItViIsICJVbmlKSVMtVVRGOC1IIiwgIlVuaUpJUy1VVEY4LVYiLCAiVW5pSklTMjAwNC1VVEYxNi1IIiwgIlVuaUpJUzIwMDQtVVRGMTYtViIsICJVbmlKSVMyMDA0LVVURjMyLUgiLCAiVW5pSklTMjAwNC1VVEYzMi1WIiwgIlVuaUpJUzIwMDQtVVRGOC1IIiwgIlVuaUpJUzIwMDQtVVRGOC1WIiwgIlVuaUpJU1Byby1VQ1MyLUhXLVYiLCAiVW5pSklTUHJvLVVDUzItViIsICJVbmlKSVNQcm8tVVRGOC1WIiwgIlVuaUpJU1gwMjEzLVVURjMyLUgiLCAiVW5pSklTWDAyMTMtVVRGMzItViIsICJVbmlKSVNYMDIxMzIwMDQtVVRGMzItSCIsICJVbmlKSVNYMDIxMzIwMDQtVVRGMzItViIsICJVbmlLUy1VQ1MyLUgiLCAiVW5pS1MtVUNTMi1WIiwgIlVuaUtTLVVURjE2LUgiLCAiVW5pS1MtVVRGMTYtViIsICJVbmlLUy1VVEYzMi1IIiwgIlVuaUtTLVVURjMyLVYiLCAiVW5pS1MtVVRGOC1IIiwgIlVuaUtTLVVURjgtViIsICJWIiwgIldQLVN5bWJvbCJdOwpjb25zdCBNQVhfTUFQX1JBTkdFID0gMiAqKiAyNCAtIDE7CmNsYXNzIENNYXAgewogIGNvbnN0cnVjdG9yKGJ1aWx0SW5DTWFwID0gZmFsc2UpIHsKICAgIHRoaXMuY29kZXNwYWNlUmFuZ2VzID0gW1tdLCBbXSwgW10sIFtdXTsKICAgIHRoaXMubnVtQ29kZXNwYWNlUmFuZ2VzID0gMDsKICAgIHRoaXMuX21hcCA9IFtdOwogICAgdGhpcy5uYW1lID0gIiI7CiAgICB0aGlzLnZlcnRpY2FsID0gZmFsc2U7CiAgICB0aGlzLnVzZUNNYXAgPSBudWxsOwogICAgdGhpcy5idWlsdEluQ01hcCA9IGJ1aWx0SW5DTWFwOwogIH0KICBhZGRDb2Rlc3BhY2VSYW5nZShuLCBsb3csIGhpZ2gpIHsKICAgIHRoaXMuY29kZXNwYWNlUmFuZ2VzW24gLSAxXS5wdXNoKGxvdywgaGlnaCk7CiAgICB0aGlzLm51bUNvZGVzcGFjZVJhbmdlcysrOwogIH0KICBtYXBDaWRSYW5nZShsb3csIGhpZ2gsIGRzdExvdykgewogICAgaWYgKGhpZ2ggLSBsb3cgPiBNQVhfTUFQX1JBTkdFKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcigibWFwQ2lkUmFuZ2UgLSBpZ25vcmluZyBkYXRhIGFib3ZlIE1BWF9NQVBfUkFOR0UuIik7CiAgICB9CiAgICB3aGlsZSAobG93IDw9IGhpZ2gpIHsKICAgICAgdGhpcy5fbWFwW2xvdysrXSA9IGRzdExvdysrOwogICAgfQogIH0KICBtYXBCZlJhbmdlKGxvdywgaGlnaCwgZHN0TG93KSB7CiAgICBpZiAoaGlnaCAtIGxvdyA+IE1BWF9NQVBfUkFOR0UpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCJtYXBCZlJhbmdlIC0gaWdub3JpbmcgZGF0YSBhYm92ZSBNQVhfTUFQX1JBTkdFLiIpOwogICAgfQogICAgY29uc3QgbGFzdEJ5dGUgPSBkc3RMb3cubGVuZ3RoIC0gMTsKICAgIHdoaWxlIChsb3cgPD0gaGlnaCkgewogICAgICB0aGlzLl9tYXBbbG93KytdID0gZHN0TG93OwogICAgICBjb25zdCBuZXh0Q2hhckNvZGUgPSBkc3RMb3cuY2hhckNvZGVBdChsYXN0Qnl0ZSkgKyAxOwogICAgICBpZiAobmV4dENoYXJDb2RlID4gMHhmZikgewogICAgICAgIGRzdExvdyA9IGRzdExvdy5zdWJzdHJpbmcoMCwgbGFzdEJ5dGUgLSAxKSArIFN0cmluZy5mcm9tQ2hhckNvZGUoZHN0TG93LmNoYXJDb2RlQXQobGFzdEJ5dGUgLSAxKSArIDEpICsgIlx4MDAiOwogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGRzdExvdyA9IGRzdExvdy5zdWJzdHJpbmcoMCwgbGFzdEJ5dGUpICsgU3RyaW5nLmZyb21DaGFyQ29kZShuZXh0Q2hhckNvZGUpOwogICAgfQogIH0KICBtYXBCZlJhbmdlVG9BcnJheShsb3csIGhpZ2gsIGFycmF5KSB7CiAgICBpZiAoaGlnaCAtIGxvdyA+IE1BWF9NQVBfUkFOR0UpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCJtYXBCZlJhbmdlVG9BcnJheSAtIGlnbm9yaW5nIGRhdGEgYWJvdmUgTUFYX01BUF9SQU5HRS4iKTsKICAgIH0KICAgIGNvbnN0IGlpID0gYXJyYXkubGVuZ3RoOwogICAgbGV0IGkgPSAwOwogICAgd2hpbGUgKGxvdyA8PSBoaWdoICYmIGkgPCBpaSkgewogICAgICB0aGlzLl9tYXBbbG93XSA9IGFycmF5W2krK107CiAgICAgICsrbG93OwogICAgfQogIH0KICBtYXBPbmUoc3JjLCBkc3QpIHsKICAgIHRoaXMuX21hcFtzcmNdID0gZHN0OwogIH0KICBsb29rdXAoY29kZSkgewogICAgcmV0dXJuIHRoaXMuX21hcFtjb2RlXTsKICB9CiAgY29udGFpbnMoY29kZSkgewogICAgcmV0dXJuIHRoaXMuX21hcFtjb2RlXSAhPT0gdW5kZWZpbmVkOwogIH0KICBmb3JFYWNoKGNhbGxiYWNrKSB7CiAgICBjb25zdCBtYXAgPSB0aGlzLl9tYXA7CiAgICBjb25zdCBsZW5ndGggPSBtYXAubGVuZ3RoOwogICAgaWYgKGxlbmd0aCA8PSAweDEwMDAwKSB7CiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICBpZiAobWFwW2ldICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgIGNhbGxiYWNrKGksIG1hcFtpXSk7CiAgICAgICAgfQogICAgICB9CiAgICB9IGVsc2UgewogICAgICBmb3IgKGNvbnN0IGkgaW4gbWFwKSB7CiAgICAgICAgY2FsbGJhY2soaSwgbWFwW2ldKTsKICAgICAgfQogICAgfQogIH0KICBjaGFyQ29kZU9mKHZhbHVlKSB7CiAgICBjb25zdCBtYXAgPSB0aGlzLl9tYXA7CiAgICBpZiAobWFwLmxlbmd0aCA8PSAweDEwMDAwKSB7CiAgICAgIHJldHVybiBtYXAuaW5kZXhPZih2YWx1ZSk7CiAgICB9CiAgICBmb3IgKGNvbnN0IGNoYXJDb2RlIGluIG1hcCkgewogICAgICBpZiAobWFwW2NoYXJDb2RlXSA9PT0gdmFsdWUpIHsKICAgICAgICByZXR1cm4gY2hhckNvZGUgfCAwOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gLTE7CiAgfQogIGdldE1hcCgpIHsKICAgIHJldHVybiB0aGlzLl9tYXA7CiAgfQogIHJlYWRDaGFyQ29kZShzdHIsIG9mZnNldCwgb3V0KSB7CiAgICBsZXQgYyA9IDA7CiAgICBjb25zdCBjb2Rlc3BhY2VSYW5nZXMgPSB0aGlzLmNvZGVzcGFjZVJhbmdlczsKICAgIGZvciAobGV0IG4gPSAwLCBubiA9IGNvZGVzcGFjZVJhbmdlcy5sZW5ndGg7IG4gPCBubjsgbisrKSB7CiAgICAgIGMgPSAoYyA8PCA4IHwgc3RyLmNoYXJDb2RlQXQob2Zmc2V0ICsgbikpID4+PiAwOwogICAgICBjb25zdCBjb2Rlc3BhY2VSYW5nZSA9IGNvZGVzcGFjZVJhbmdlc1tuXTsKICAgICAgZm9yIChsZXQgayA9IDAsIGtrID0gY29kZXNwYWNlUmFuZ2UubGVuZ3RoOyBrIDwga2s7KSB7CiAgICAgICAgY29uc3QgbG93ID0gY29kZXNwYWNlUmFuZ2VbaysrXTsKICAgICAgICBjb25zdCBoaWdoID0gY29kZXNwYWNlUmFuZ2VbaysrXTsKICAgICAgICBpZiAoYyA+PSBsb3cgJiYgYyA8PSBoaWdoKSB7CiAgICAgICAgICBvdXQuY2hhcmNvZGUgPSBjOwogICAgICAgICAgb3V0Lmxlbmd0aCA9IG4gKyAxOwogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgb3V0LmNoYXJjb2RlID0gMDsKICAgIG91dC5sZW5ndGggPSAxOwogIH0KICBnZXRDaGFyQ29kZUxlbmd0aChjaGFyQ29kZSkgewogICAgY29uc3QgY29kZXNwYWNlUmFuZ2VzID0gdGhpcy5jb2Rlc3BhY2VSYW5nZXM7CiAgICBmb3IgKGxldCBuID0gMCwgbm4gPSBjb2Rlc3BhY2VSYW5nZXMubGVuZ3RoOyBuIDwgbm47IG4rKykgewogICAgICBjb25zdCBjb2Rlc3BhY2VSYW5nZSA9IGNvZGVzcGFjZVJhbmdlc1tuXTsKICAgICAgZm9yIChsZXQgayA9IDAsIGtrID0gY29kZXNwYWNlUmFuZ2UubGVuZ3RoOyBrIDwga2s7KSB7CiAgICAgICAgY29uc3QgbG93ID0gY29kZXNwYWNlUmFuZ2VbaysrXTsKICAgICAgICBjb25zdCBoaWdoID0gY29kZXNwYWNlUmFuZ2VbaysrXTsKICAgICAgICBpZiAoY2hhckNvZGUgPj0gbG93ICYmIGNoYXJDb2RlIDw9IGhpZ2gpIHsKICAgICAgICAgIHJldHVybiBuICsgMTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIHJldHVybiAxOwogIH0KICBnZXQgbGVuZ3RoKCkgewogICAgcmV0dXJuIHRoaXMuX21hcC5sZW5ndGg7CiAgfQogIGdldCBpc0lkZW50aXR5Q01hcCgpIHsKICAgIGlmICghKHRoaXMubmFtZSA9PT0gIklkZW50aXR5LUgiIHx8IHRoaXMubmFtZSA9PT0gIklkZW50aXR5LVYiKSkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgICBpZiAodGhpcy5fbWFwLmxlbmd0aCAhPT0gMHgxMDAwMCkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDB4MTAwMDA7IGkrKykgewogICAgICBpZiAodGhpcy5fbWFwW2ldICE9PSBpKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gdHJ1ZTsKICB9Cn0KY2xhc3MgSWRlbnRpdHlDTWFwIGV4dGVuZHMgQ01hcCB7CiAgY29uc3RydWN0b3IodmVydGljYWwsIG4pIHsKICAgIHN1cGVyKCk7CiAgICB0aGlzLnZlcnRpY2FsID0gdmVydGljYWw7CiAgICB0aGlzLmFkZENvZGVzcGFjZVJhbmdlKG4sIDAsIDB4ZmZmZik7CiAgfQogIG1hcENpZFJhbmdlKGxvdywgaGlnaCwgZHN0TG93KSB7CiAgICB1bnJlYWNoYWJsZSgic2hvdWxkIG5vdCBjYWxsIG1hcENpZFJhbmdlIik7CiAgfQogIG1hcEJmUmFuZ2UobG93LCBoaWdoLCBkc3RMb3cpIHsKICAgIHVucmVhY2hhYmxlKCJzaG91bGQgbm90IGNhbGwgbWFwQmZSYW5nZSIpOwogIH0KICBtYXBCZlJhbmdlVG9BcnJheShsb3csIGhpZ2gsIGFycmF5KSB7CiAgICB1bnJlYWNoYWJsZSgic2hvdWxkIG5vdCBjYWxsIG1hcEJmUmFuZ2VUb0FycmF5Iik7CiAgfQogIG1hcE9uZShzcmMsIGRzdCkgewogICAgdW5yZWFjaGFibGUoInNob3VsZCBub3QgY2FsbCBtYXBDaWRPbmUiKTsKICB9CiAgbG9va3VwKGNvZGUpIHsKICAgIHJldHVybiBOdW1iZXIuaXNJbnRlZ2VyKGNvZGUpICYmIGNvZGUgPD0gMHhmZmZmID8gY29kZSA6IHVuZGVmaW5lZDsKICB9CiAgY29udGFpbnMoY29kZSkgewogICAgcmV0dXJuIE51bWJlci5pc0ludGVnZXIoY29kZSkgJiYgY29kZSA8PSAweGZmZmY7CiAgfQogIGZvckVhY2goY2FsbGJhY2spIHsKICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IDB4ZmZmZjsgaSsrKSB7CiAgICAgIGNhbGxiYWNrKGksIGkpOwogICAgfQogIH0KICBjaGFyQ29kZU9mKHZhbHVlKSB7CiAgICByZXR1cm4gTnVtYmVyLmlzSW50ZWdlcih2YWx1ZSkgJiYgdmFsdWUgPD0gMHhmZmZmID8gdmFsdWUgOiAtMTsKICB9CiAgZ2V0TWFwKCkgewogICAgY29uc3QgbWFwID0gbmV3IEFycmF5KDB4MTAwMDApOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gMHhmZmZmOyBpKyspIHsKICAgICAgbWFwW2ldID0gaTsKICAgIH0KICAgIHJldHVybiBtYXA7CiAgfQogIGdldCBsZW5ndGgoKSB7CiAgICByZXR1cm4gMHgxMDAwMDsKICB9CiAgZ2V0IGlzSWRlbnRpdHlDTWFwKCkgewogICAgdW5yZWFjaGFibGUoInNob3VsZCBub3QgYWNjZXNzIC5pc0lkZW50aXR5Q01hcCIpOwogIH0KfQpmdW5jdGlvbiBzdHJUb0ludChzdHIpIHsKICBsZXQgYSA9IDA7CiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHsKICAgIGEgPSBhIDw8IDggfCBzdHIuY2hhckNvZGVBdChpKTsKICB9CiAgcmV0dXJuIGEgPj4+IDA7Cn0KZnVuY3Rpb24gZXhwZWN0U3RyaW5nKG9iaikgewogIGlmICh0eXBlb2Ygb2JqICE9PSAic3RyaW5nIikgewogICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCJNYWxmb3JtZWQgQ01hcDogZXhwZWN0ZWQgc3RyaW5nLiIpOwogIH0KfQpmdW5jdGlvbiBleHBlY3RJbnQob2JqKSB7CiAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKG9iaikpIHsKICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigiTWFsZm9ybWVkIENNYXA6IGV4cGVjdGVkIGludC4iKTsKICB9Cn0KZnVuY3Rpb24gcGFyc2VCZkNoYXIoY01hcCwgbGV4ZXIpIHsKICB3aGlsZSAodHJ1ZSkgewogICAgbGV0IG9iaiA9IGxleGVyLmdldE9iaigpOwogICAgaWYgKG9iaiA9PT0gRU9GKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgaWYgKGlzQ21kKG9iaiwgImVuZGJmY2hhciIpKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGV4cGVjdFN0cmluZyhvYmopOwogICAgY29uc3Qgc3JjID0gc3RyVG9JbnQob2JqKTsKICAgIG9iaiA9IGxleGVyLmdldE9iaigpOwogICAgZXhwZWN0U3RyaW5nKG9iaik7CiAgICBjb25zdCBkc3QgPSBvYmo7CiAgICBjTWFwLm1hcE9uZShzcmMsIGRzdCk7CiAgfQp9CmZ1bmN0aW9uIHBhcnNlQmZSYW5nZShjTWFwLCBsZXhlcikgewogIHdoaWxlICh0cnVlKSB7CiAgICBsZXQgb2JqID0gbGV4ZXIuZ2V0T2JqKCk7CiAgICBpZiAob2JqID09PSBFT0YpIHsKICAgICAgYnJlYWs7CiAgICB9CiAgICBpZiAoaXNDbWQob2JqLCAiZW5kYmZyYW5nZSIpKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGV4cGVjdFN0cmluZyhvYmopOwogICAgY29uc3QgbG93ID0gc3RyVG9JbnQob2JqKTsKICAgIG9iaiA9IGxleGVyLmdldE9iaigpOwogICAgZXhwZWN0U3RyaW5nKG9iaik7CiAgICBjb25zdCBoaWdoID0gc3RyVG9JbnQob2JqKTsKICAgIG9iaiA9IGxleGVyLmdldE9iaigpOwogICAgaWYgKE51bWJlci5pc0ludGVnZXIob2JqKSB8fCB0eXBlb2Ygb2JqID09PSAic3RyaW5nIikgewogICAgICBjb25zdCBkc3RMb3cgPSBOdW1iZXIuaXNJbnRlZ2VyKG9iaikgPyBTdHJpbmcuZnJvbUNoYXJDb2RlKG9iaikgOiBvYmo7CiAgICAgIGNNYXAubWFwQmZSYW5nZShsb3csIGhpZ2gsIGRzdExvdyk7CiAgICB9IGVsc2UgaWYgKGlzQ21kKG9iaiwgIlsiKSkgewogICAgICBvYmogPSBsZXhlci5nZXRPYmooKTsKICAgICAgY29uc3QgYXJyYXkgPSBbXTsKICAgICAgd2hpbGUgKCFpc0NtZChvYmosICJdIikgJiYgb2JqICE9PSBFT0YpIHsKICAgICAgICBhcnJheS5wdXNoKG9iaik7CiAgICAgICAgb2JqID0gbGV4ZXIuZ2V0T2JqKCk7CiAgICAgIH0KICAgICAgY01hcC5tYXBCZlJhbmdlVG9BcnJheShsb3csIGhpZ2gsIGFycmF5KTsKICAgIH0gZWxzZSB7CiAgICAgIGJyZWFrOwogICAgfQogIH0KICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoIkludmFsaWQgYmYgcmFuZ2UuIik7Cn0KZnVuY3Rpb24gcGFyc2VDaWRDaGFyKGNNYXAsIGxleGVyKSB7CiAgd2hpbGUgKHRydWUpIHsKICAgIGxldCBvYmogPSBsZXhlci5nZXRPYmooKTsKICAgIGlmIChvYmogPT09IEVPRikgewogICAgICBicmVhazsKICAgIH0KICAgIGlmIChpc0NtZChvYmosICJlbmRjaWRjaGFyIikpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgZXhwZWN0U3RyaW5nKG9iaik7CiAgICBjb25zdCBzcmMgPSBzdHJUb0ludChvYmopOwogICAgb2JqID0gbGV4ZXIuZ2V0T2JqKCk7CiAgICBleHBlY3RJbnQob2JqKTsKICAgIGNvbnN0IGRzdCA9IG9iajsKICAgIGNNYXAubWFwT25lKHNyYywgZHN0KTsKICB9Cn0KZnVuY3Rpb24gcGFyc2VDaWRSYW5nZShjTWFwLCBsZXhlcikgewogIHdoaWxlICh0cnVlKSB7CiAgICBsZXQgb2JqID0gbGV4ZXIuZ2V0T2JqKCk7CiAgICBpZiAob2JqID09PSBFT0YpIHsKICAgICAgYnJlYWs7CiAgICB9CiAgICBpZiAoaXNDbWQob2JqLCAiZW5kY2lkcmFuZ2UiKSkgewogICAgICByZXR1cm47CiAgICB9CiAgICBleHBlY3RTdHJpbmcob2JqKTsKICAgIGNvbnN0IGxvdyA9IHN0clRvSW50KG9iaik7CiAgICBvYmogPSBsZXhlci5nZXRPYmooKTsKICAgIGV4cGVjdFN0cmluZyhvYmopOwogICAgY29uc3QgaGlnaCA9IHN0clRvSW50KG9iaik7CiAgICBvYmogPSBsZXhlci5nZXRPYmooKTsKICAgIGV4cGVjdEludChvYmopOwogICAgY29uc3QgZHN0TG93ID0gb2JqOwogICAgY01hcC5tYXBDaWRSYW5nZShsb3csIGhpZ2gsIGRzdExvdyk7CiAgfQp9CmZ1bmN0aW9uIHBhcnNlQ29kZXNwYWNlUmFuZ2UoY01hcCwgbGV4ZXIpIHsKICB3aGlsZSAodHJ1ZSkgewogICAgbGV0IG9iaiA9IGxleGVyLmdldE9iaigpOwogICAgaWYgKG9iaiA9PT0gRU9GKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgaWYgKGlzQ21kKG9iaiwgImVuZGNvZGVzcGFjZXJhbmdlIikpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgaWYgKHR5cGVvZiBvYmogIT09ICJzdHJpbmciKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgY29uc3QgbG93ID0gc3RyVG9JbnQob2JqKTsKICAgIG9iaiA9IGxleGVyLmdldE9iaigpOwogICAgaWYgKHR5cGVvZiBvYmogIT09ICJzdHJpbmciKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgY29uc3QgaGlnaCA9IHN0clRvSW50KG9iaik7CiAgICBjTWFwLmFkZENvZGVzcGFjZVJhbmdlKG9iai5sZW5ndGgsIGxvdywgaGlnaCk7CiAgfQogIHRocm93IG5ldyBGb3JtYXRFcnJvcigiSW52YWxpZCBjb2Rlc3BhY2UgcmFuZ2UuIik7Cn0KZnVuY3Rpb24gcGFyc2VXTW9kZShjTWFwLCBsZXhlcikgewogIGNvbnN0IG9iaiA9IGxleGVyLmdldE9iaigpOwogIGlmIChOdW1iZXIuaXNJbnRlZ2VyKG9iaikpIHsKICAgIGNNYXAudmVydGljYWwgPSAhIW9iajsKICB9Cn0KZnVuY3Rpb24gcGFyc2VDTWFwTmFtZShjTWFwLCBsZXhlcikgewogIGNvbnN0IG9iaiA9IGxleGVyLmdldE9iaigpOwogIGlmIChvYmogaW5zdGFuY2VvZiBOYW1lKSB7CiAgICBjTWFwLm5hbWUgPSBvYmoubmFtZTsKICB9Cn0KYXN5bmMgZnVuY3Rpb24gcGFyc2VDTWFwKGNNYXAsIGxleGVyLCBmZXRjaEJ1aWx0SW5DTWFwLCB1c2VDTWFwKSB7CiAgbGV0IHByZXZpb3VzLCBlbWJlZGRlZFVzZUNNYXA7CiAgb2JqTG9vcDogd2hpbGUgKHRydWUpIHsKICAgIHRyeSB7CiAgICAgIGNvbnN0IG9iaiA9IGxleGVyLmdldE9iaigpOwogICAgICBpZiAob2JqID09PSBFT0YpIHsKICAgICAgICBicmVhazsKICAgICAgfSBlbHNlIGlmIChvYmogaW5zdGFuY2VvZiBOYW1lKSB7CiAgICAgICAgaWYgKG9iai5uYW1lID09PSAiV01vZGUiKSB7CiAgICAgICAgICBwYXJzZVdNb2RlKGNNYXAsIGxleGVyKTsKICAgICAgICB9IGVsc2UgaWYgKG9iai5uYW1lID09PSAiQ01hcE5hbWUiKSB7CiAgICAgICAgICBwYXJzZUNNYXBOYW1lKGNNYXAsIGxleGVyKTsKICAgICAgICB9CiAgICAgICAgcHJldmlvdXMgPSBvYmo7CiAgICAgIH0gZWxzZSBpZiAob2JqIGluc3RhbmNlb2YgQ21kKSB7CiAgICAgICAgc3dpdGNoIChvYmouY21kKSB7CiAgICAgICAgICBjYXNlICJlbmRjbWFwIjoKICAgICAgICAgICAgYnJlYWsgb2JqTG9vcDsKICAgICAgICAgIGNhc2UgInVzZWNtYXAiOgogICAgICAgICAgICBpZiAocHJldmlvdXMgaW5zdGFuY2VvZiBOYW1lKSB7CiAgICAgICAgICAgICAgZW1iZWRkZWRVc2VDTWFwID0gcHJldmlvdXMubmFtZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgImJlZ2luY29kZXNwYWNlcmFuZ2UiOgogICAgICAgICAgICBwYXJzZUNvZGVzcGFjZVJhbmdlKGNNYXAsIGxleGVyKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlICJiZWdpbmJmY2hhciI6CiAgICAgICAgICAgIHBhcnNlQmZDaGFyKGNNYXAsIGxleGVyKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlICJiZWdpbmNpZGNoYXIiOgogICAgICAgICAgICBwYXJzZUNpZENoYXIoY01hcCwgbGV4ZXIpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgImJlZ2luYmZyYW5nZSI6CiAgICAgICAgICAgIHBhcnNlQmZSYW5nZShjTWFwLCBsZXhlcik7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSAiYmVnaW5jaWRyYW5nZSI6CiAgICAgICAgICAgIHBhcnNlQ2lkUmFuZ2UoY01hcCwgbGV4ZXIpOwogICAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0KICAgIH0gY2F0Y2ggKGV4KSB7CiAgICAgIGlmIChleCBpbnN0YW5jZW9mIE1pc3NpbmdEYXRhRXhjZXB0aW9uKSB7CiAgICAgICAgdGhyb3cgZXg7CiAgICAgIH0KICAgICAgd2FybigiSW52YWxpZCBjTWFwIGRhdGE6ICIgKyBleCk7CiAgICAgIGNvbnRpbnVlOwogICAgfQogIH0KICBpZiAoIXVzZUNNYXAgJiYgZW1iZWRkZWRVc2VDTWFwKSB7CiAgICB1c2VDTWFwID0gZW1iZWRkZWRVc2VDTWFwOwogIH0KICBpZiAodXNlQ01hcCkgewogICAgcmV0dXJuIGV4dGVuZENNYXAoY01hcCwgZmV0Y2hCdWlsdEluQ01hcCwgdXNlQ01hcCk7CiAgfQogIHJldHVybiBjTWFwOwp9CmFzeW5jIGZ1bmN0aW9uIGV4dGVuZENNYXAoY01hcCwgZmV0Y2hCdWlsdEluQ01hcCwgdXNlQ01hcCkgewogIGNNYXAudXNlQ01hcCA9IGF3YWl0IGNyZWF0ZUJ1aWx0SW5DTWFwKHVzZUNNYXAsIGZldGNoQnVpbHRJbkNNYXApOwogIGlmIChjTWFwLm51bUNvZGVzcGFjZVJhbmdlcyA9PT0gMCkgewogICAgY29uc3QgdXNlQ29kZXNwYWNlUmFuZ2VzID0gY01hcC51c2VDTWFwLmNvZGVzcGFjZVJhbmdlczsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdXNlQ29kZXNwYWNlUmFuZ2VzLmxlbmd0aDsgaSsrKSB7CiAgICAgIGNNYXAuY29kZXNwYWNlUmFuZ2VzW2ldID0gdXNlQ29kZXNwYWNlUmFuZ2VzW2ldLnNsaWNlKCk7CiAgICB9CiAgICBjTWFwLm51bUNvZGVzcGFjZVJhbmdlcyA9IGNNYXAudXNlQ01hcC5udW1Db2Rlc3BhY2VSYW5nZXM7CiAgfQogIGNNYXAudXNlQ01hcC5mb3JFYWNoKGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7CiAgICBpZiAoIWNNYXAuY29udGFpbnMoa2V5KSkgewogICAgICBjTWFwLm1hcE9uZShrZXksIHZhbHVlKTsKICAgIH0KICB9KTsKICByZXR1cm4gY01hcDsKfQphc3luYyBmdW5jdGlvbiBjcmVhdGVCdWlsdEluQ01hcChuYW1lLCBmZXRjaEJ1aWx0SW5DTWFwKSB7CiAgaWYgKG5hbWUgPT09ICJJZGVudGl0eS1IIikgewogICAgcmV0dXJuIG5ldyBJZGVudGl0eUNNYXAoZmFsc2UsIDIpOwogIH0gZWxzZSBpZiAobmFtZSA9PT0gIklkZW50aXR5LVYiKSB7CiAgICByZXR1cm4gbmV3IElkZW50aXR5Q01hcCh0cnVlLCAyKTsKICB9CiAgaWYgKCFCVUlMVF9JTl9DTUFQUy5pbmNsdWRlcyhuYW1lKSkgewogICAgdGhyb3cgbmV3IEVycm9yKCJVbmtub3duIENNYXAgbmFtZTogIiArIG5hbWUpOwogIH0KICBpZiAoIWZldGNoQnVpbHRJbkNNYXApIHsKICAgIHRocm93IG5ldyBFcnJvcigiQnVpbHQtaW4gQ01hcCBwYXJhbWV0ZXJzIGFyZSBub3QgcHJvdmlkZWQuIik7CiAgfQogIGNvbnN0IHsKICAgIGNNYXBEYXRhLAogICAgaXNDb21wcmVzc2VkCiAgfSA9IGF3YWl0IGZldGNoQnVpbHRJbkNNYXAobmFtZSk7CiAgY29uc3QgY01hcCA9IG5ldyBDTWFwKHRydWUpOwogIGlmIChpc0NvbXByZXNzZWQpIHsKICAgIHJldHVybiBuZXcgQmluYXJ5Q01hcFJlYWRlcigpLnByb2Nlc3MoY01hcERhdGEsIGNNYXAsIHVzZUNNYXAgPT4gZXh0ZW5kQ01hcChjTWFwLCBmZXRjaEJ1aWx0SW5DTWFwLCB1c2VDTWFwKSk7CiAgfQogIGNvbnN0IGxleGVyID0gbmV3IExleGVyKG5ldyBTdHJlYW0oY01hcERhdGEpKTsKICByZXR1cm4gcGFyc2VDTWFwKGNNYXAsIGxleGVyLCBmZXRjaEJ1aWx0SW5DTWFwLCBudWxsKTsKfQpjbGFzcyBDTWFwRmFjdG9yeSB7CiAgc3RhdGljIGFzeW5jIGNyZWF0ZSh7CiAgICBlbmNvZGluZywKICAgIGZldGNoQnVpbHRJbkNNYXAsCiAgICB1c2VDTWFwCiAgfSkgewogICAgaWYgKGVuY29kaW5nIGluc3RhbmNlb2YgTmFtZSkgewogICAgICByZXR1cm4gY3JlYXRlQnVpbHRJbkNNYXAoZW5jb2RpbmcubmFtZSwgZmV0Y2hCdWlsdEluQ01hcCk7CiAgICB9IGVsc2UgaWYgKGVuY29kaW5nIGluc3RhbmNlb2YgQmFzZVN0cmVhbSkgewogICAgICBjb25zdCBwYXJzZWRDTWFwID0gYXdhaXQgcGFyc2VDTWFwKG5ldyBDTWFwKCksIG5ldyBMZXhlcihlbmNvZGluZyksIGZldGNoQnVpbHRJbkNNYXAsIHVzZUNNYXApOwogICAgICBpZiAocGFyc2VkQ01hcC5pc0lkZW50aXR5Q01hcCkgewogICAgICAgIHJldHVybiBjcmVhdGVCdWlsdEluQ01hcChwYXJzZWRDTWFwLm5hbWUsIGZldGNoQnVpbHRJbkNNYXApOwogICAgICB9CiAgICAgIHJldHVybiBwYXJzZWRDTWFwOwogICAgfQogICAgdGhyb3cgbmV3IEVycm9yKCJFbmNvZGluZyByZXF1aXJlZC4iKTsKICB9Cn0KCjsvLyAuL3NyYy9jb3JlL2VuY29kaW5ncy5qcwpjb25zdCBFeHBlcnRFbmNvZGluZyA9IFsiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICJzcGFjZSIsICJleGNsYW1zbWFsbCIsICJIdW5nYXJ1bWxhdXRzbWFsbCIsICIiLCAiZG9sbGFyb2xkc3R5bGUiLCAiZG9sbGFyc3VwZXJpb3IiLCAiYW1wZXJzYW5kc21hbGwiLCAiQWN1dGVzbWFsbCIsICJwYXJlbmxlZnRzdXBlcmlvciIsICJwYXJlbnJpZ2h0c3VwZXJpb3IiLCAidHdvZG90ZW5sZWFkZXIiLCAib25lZG90ZW5sZWFkZXIiLCAiY29tbWEiLCAiaHlwaGVuIiwgInBlcmlvZCIsICJmcmFjdGlvbiIsICJ6ZXJvb2xkc3R5bGUiLCAib25lb2xkc3R5bGUiLCAidHdvb2xkc3R5bGUiLCAidGhyZWVvbGRzdHlsZSIsICJmb3Vyb2xkc3R5bGUiLCAiZml2ZW9sZHN0eWxlIiwgInNpeG9sZHN0eWxlIiwgInNldmVub2xkc3R5bGUiLCAiZWlnaHRvbGRzdHlsZSIsICJuaW5lb2xkc3R5bGUiLCAiY29sb24iLCAic2VtaWNvbG9uIiwgImNvbW1hc3VwZXJpb3IiLCAidGhyZWVxdWFydGVyc2VtZGFzaCIsICJwZXJpb2RzdXBlcmlvciIsICJxdWVzdGlvbnNtYWxsIiwgIiIsICJhc3VwZXJpb3IiLCAiYnN1cGVyaW9yIiwgImNlbnRzdXBlcmlvciIsICJkc3VwZXJpb3IiLCAiZXN1cGVyaW9yIiwgIiIsICIiLCAiIiwgImlzdXBlcmlvciIsICIiLCAiIiwgImxzdXBlcmlvciIsICJtc3VwZXJpb3IiLCAibnN1cGVyaW9yIiwgIm9zdXBlcmlvciIsICIiLCAiIiwgInJzdXBlcmlvciIsICJzc3VwZXJpb3IiLCAidHN1cGVyaW9yIiwgIiIsICJmZiIsICJmaSIsICJmbCIsICJmZmkiLCAiZmZsIiwgInBhcmVubGVmdGluZmVyaW9yIiwgIiIsICJwYXJlbnJpZ2h0aW5mZXJpb3IiLCAiQ2lyY3VtZmxleHNtYWxsIiwgImh5cGhlbnN1cGVyaW9yIiwgIkdyYXZlc21hbGwiLCAiQXNtYWxsIiwgIkJzbWFsbCIsICJDc21hbGwiLCAiRHNtYWxsIiwgIkVzbWFsbCIsICJGc21hbGwiLCAiR3NtYWxsIiwgIkhzbWFsbCIsICJJc21hbGwiLCAiSnNtYWxsIiwgIktzbWFsbCIsICJMc21hbGwiLCAiTXNtYWxsIiwgIk5zbWFsbCIsICJPc21hbGwiLCAiUHNtYWxsIiwgIlFzbWFsbCIsICJSc21hbGwiLCAiU3NtYWxsIiwgIlRzbWFsbCIsICJVc21hbGwiLCAiVnNtYWxsIiwgIldzbWFsbCIsICJYc21hbGwiLCAiWXNtYWxsIiwgIlpzbWFsbCIsICJjb2xvbm1vbmV0YXJ5IiwgIm9uZWZpdHRlZCIsICJydXBpYWgiLCAiVGlsZGVzbWFsbCIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiZXhjbGFtZG93bnNtYWxsIiwgImNlbnRvbGRzdHlsZSIsICJMc2xhc2hzbWFsbCIsICIiLCAiIiwgIlNjYXJvbnNtYWxsIiwgIlpjYXJvbnNtYWxsIiwgIkRpZXJlc2lzc21hbGwiLCAiQnJldmVzbWFsbCIsICJDYXJvbnNtYWxsIiwgIiIsICJEb3RhY2NlbnRzbWFsbCIsICIiLCAiIiwgIk1hY3JvbnNtYWxsIiwgIiIsICIiLCAiZmlndXJlZGFzaCIsICJoeXBoZW5pbmZlcmlvciIsICIiLCAiIiwgIk9nb25la3NtYWxsIiwgIlJpbmdzbWFsbCIsICJDZWRpbGxhc21hbGwiLCAiIiwgIiIsICIiLCAib25lcXVhcnRlciIsICJvbmVoYWxmIiwgInRocmVlcXVhcnRlcnMiLCAicXVlc3Rpb25kb3duc21hbGwiLCAib25lZWlnaHRoIiwgInRocmVlZWlnaHRocyIsICJmaXZlZWlnaHRocyIsICJzZXZlbmVpZ2h0aHMiLCAib25ldGhpcmQiLCAidHdvdGhpcmRzIiwgIiIsICIiLCAiemVyb3N1cGVyaW9yIiwgIm9uZXN1cGVyaW9yIiwgInR3b3N1cGVyaW9yIiwgInRocmVlc3VwZXJpb3IiLCAiZm91cnN1cGVyaW9yIiwgImZpdmVzdXBlcmlvciIsICJzaXhzdXBlcmlvciIsICJzZXZlbnN1cGVyaW9yIiwgImVpZ2h0c3VwZXJpb3IiLCAibmluZXN1cGVyaW9yIiwgInplcm9pbmZlcmlvciIsICJvbmVpbmZlcmlvciIsICJ0d29pbmZlcmlvciIsICJ0aHJlZWluZmVyaW9yIiwgImZvdXJpbmZlcmlvciIsICJmaXZlaW5mZXJpb3IiLCAic2l4aW5mZXJpb3IiLCAic2V2ZW5pbmZlcmlvciIsICJlaWdodGluZmVyaW9yIiwgIm5pbmVpbmZlcmlvciIsICJjZW50aW5mZXJpb3IiLCAiZG9sbGFyaW5mZXJpb3IiLCAicGVyaW9kaW5mZXJpb3IiLCAiY29tbWFpbmZlcmlvciIsICJBZ3JhdmVzbWFsbCIsICJBYWN1dGVzbWFsbCIsICJBY2lyY3VtZmxleHNtYWxsIiwgIkF0aWxkZXNtYWxsIiwgIkFkaWVyZXNpc3NtYWxsIiwgIkFyaW5nc21hbGwiLCAiQUVzbWFsbCIsICJDY2VkaWxsYXNtYWxsIiwgIkVncmF2ZXNtYWxsIiwgIkVhY3V0ZXNtYWxsIiwgIkVjaXJjdW1mbGV4c21hbGwiLCAiRWRpZXJlc2lzc21hbGwiLCAiSWdyYXZlc21hbGwiLCAiSWFjdXRlc21hbGwiLCAiSWNpcmN1bWZsZXhzbWFsbCIsICJJZGllcmVzaXNzbWFsbCIsICJFdGhzbWFsbCIsICJOdGlsZGVzbWFsbCIsICJPZ3JhdmVzbWFsbCIsICJPYWN1dGVzbWFsbCIsICJPY2lyY3VtZmxleHNtYWxsIiwgIk90aWxkZXNtYWxsIiwgIk9kaWVyZXNpc3NtYWxsIiwgIk9Fc21hbGwiLCAiT3NsYXNoc21hbGwiLCAiVWdyYXZlc21hbGwiLCAiVWFjdXRlc21hbGwiLCAiVWNpcmN1bWZsZXhzbWFsbCIsICJVZGllcmVzaXNzbWFsbCIsICJZYWN1dGVzbWFsbCIsICJUaG9ybnNtYWxsIiwgIllkaWVyZXNpc3NtYWxsIl07CmNvbnN0IE1hY0V4cGVydEVuY29kaW5nID0gWyIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgInNwYWNlIiwgImV4Y2xhbXNtYWxsIiwgIkh1bmdhcnVtbGF1dHNtYWxsIiwgImNlbnRvbGRzdHlsZSIsICJkb2xsYXJvbGRzdHlsZSIsICJkb2xsYXJzdXBlcmlvciIsICJhbXBlcnNhbmRzbWFsbCIsICJBY3V0ZXNtYWxsIiwgInBhcmVubGVmdHN1cGVyaW9yIiwgInBhcmVucmlnaHRzdXBlcmlvciIsICJ0d29kb3RlbmxlYWRlciIsICJvbmVkb3RlbmxlYWRlciIsICJjb21tYSIsICJoeXBoZW4iLCAicGVyaW9kIiwgImZyYWN0aW9uIiwgInplcm9vbGRzdHlsZSIsICJvbmVvbGRzdHlsZSIsICJ0d29vbGRzdHlsZSIsICJ0aHJlZW9sZHN0eWxlIiwgImZvdXJvbGRzdHlsZSIsICJmaXZlb2xkc3R5bGUiLCAic2l4b2xkc3R5bGUiLCAic2V2ZW5vbGRzdHlsZSIsICJlaWdodG9sZHN0eWxlIiwgIm5pbmVvbGRzdHlsZSIsICJjb2xvbiIsICJzZW1pY29sb24iLCAiIiwgInRocmVlcXVhcnRlcnNlbWRhc2giLCAiIiwgInF1ZXN0aW9uc21hbGwiLCAiIiwgIiIsICIiLCAiIiwgIkV0aHNtYWxsIiwgIiIsICIiLCAib25lcXVhcnRlciIsICJvbmVoYWxmIiwgInRocmVlcXVhcnRlcnMiLCAib25lZWlnaHRoIiwgInRocmVlZWlnaHRocyIsICJmaXZlZWlnaHRocyIsICJzZXZlbmVpZ2h0aHMiLCAib25ldGhpcmQiLCAidHdvdGhpcmRzIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgImZmIiwgImZpIiwgImZsIiwgImZmaSIsICJmZmwiLCAicGFyZW5sZWZ0aW5mZXJpb3IiLCAiIiwgInBhcmVucmlnaHRpbmZlcmlvciIsICJDaXJjdW1mbGV4c21hbGwiLCAiaHlwaGVuaW5mZXJpb3IiLCAiR3JhdmVzbWFsbCIsICJBc21hbGwiLCAiQnNtYWxsIiwgIkNzbWFsbCIsICJEc21hbGwiLCAiRXNtYWxsIiwgIkZzbWFsbCIsICJHc21hbGwiLCAiSHNtYWxsIiwgIklzbWFsbCIsICJKc21hbGwiLCAiS3NtYWxsIiwgIkxzbWFsbCIsICJNc21hbGwiLCAiTnNtYWxsIiwgIk9zbWFsbCIsICJQc21hbGwiLCAiUXNtYWxsIiwgIlJzbWFsbCIsICJTc21hbGwiLCAiVHNtYWxsIiwgIlVzbWFsbCIsICJWc21hbGwiLCAiV3NtYWxsIiwgIlhzbWFsbCIsICJZc21hbGwiLCAiWnNtYWxsIiwgImNvbG9ubW9uZXRhcnkiLCAib25lZml0dGVkIiwgInJ1cGlhaCIsICJUaWxkZXNtYWxsIiwgIiIsICIiLCAiYXN1cGVyaW9yIiwgImNlbnRzdXBlcmlvciIsICIiLCAiIiwgIiIsICIiLCAiQWFjdXRlc21hbGwiLCAiQWdyYXZlc21hbGwiLCAiQWNpcmN1bWZsZXhzbWFsbCIsICJBZGllcmVzaXNzbWFsbCIsICJBdGlsZGVzbWFsbCIsICJBcmluZ3NtYWxsIiwgIkNjZWRpbGxhc21hbGwiLCAiRWFjdXRlc21hbGwiLCAiRWdyYXZlc21hbGwiLCAiRWNpcmN1bWZsZXhzbWFsbCIsICJFZGllcmVzaXNzbWFsbCIsICJJYWN1dGVzbWFsbCIsICJJZ3JhdmVzbWFsbCIsICJJY2lyY3VtZmxleHNtYWxsIiwgIklkaWVyZXNpc3NtYWxsIiwgIk50aWxkZXNtYWxsIiwgIk9hY3V0ZXNtYWxsIiwgIk9ncmF2ZXNtYWxsIiwgIk9jaXJjdW1mbGV4c21hbGwiLCAiT2RpZXJlc2lzc21hbGwiLCAiT3RpbGRlc21hbGwiLCAiVWFjdXRlc21hbGwiLCAiVWdyYXZlc21hbGwiLCAiVWNpcmN1bWZsZXhzbWFsbCIsICJVZGllcmVzaXNzbWFsbCIsICIiLCAiZWlnaHRzdXBlcmlvciIsICJmb3VyaW5mZXJpb3IiLCAidGhyZWVpbmZlcmlvciIsICJzaXhpbmZlcmlvciIsICJlaWdodGluZmVyaW9yIiwgInNldmVuaW5mZXJpb3IiLCAiU2Nhcm9uc21hbGwiLCAiIiwgImNlbnRpbmZlcmlvciIsICJ0d29pbmZlcmlvciIsICIiLCAiRGllcmVzaXNzbWFsbCIsICIiLCAiQ2Fyb25zbWFsbCIsICJvc3VwZXJpb3IiLCAiZml2ZWluZmVyaW9yIiwgIiIsICJjb21tYWluZmVyaW9yIiwgInBlcmlvZGluZmVyaW9yIiwgIllhY3V0ZXNtYWxsIiwgIiIsICJkb2xsYXJpbmZlcmlvciIsICIiLCAiIiwgIlRob3Juc21hbGwiLCAiIiwgIm5pbmVpbmZlcmlvciIsICJ6ZXJvaW5mZXJpb3IiLCAiWmNhcm9uc21hbGwiLCAiQUVzbWFsbCIsICJPc2xhc2hzbWFsbCIsICJxdWVzdGlvbmRvd25zbWFsbCIsICJvbmVpbmZlcmlvciIsICJMc2xhc2hzbWFsbCIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICJDZWRpbGxhc21hbGwiLCAiIiwgIiIsICIiLCAiIiwgIiIsICJPRXNtYWxsIiwgImZpZ3VyZWRhc2giLCAiaHlwaGVuc3VwZXJpb3IiLCAiIiwgIiIsICIiLCAiIiwgImV4Y2xhbWRvd25zbWFsbCIsICIiLCAiWWRpZXJlc2lzc21hbGwiLCAiIiwgIm9uZXN1cGVyaW9yIiwgInR3b3N1cGVyaW9yIiwgInRocmVlc3VwZXJpb3IiLCAiZm91cnN1cGVyaW9yIiwgImZpdmVzdXBlcmlvciIsICJzaXhzdXBlcmlvciIsICJzZXZlbnN1cGVyaW9yIiwgIm5pbmVzdXBlcmlvciIsICJ6ZXJvc3VwZXJpb3IiLCAiIiwgImVzdXBlcmlvciIsICJyc3VwZXJpb3IiLCAidHN1cGVyaW9yIiwgIiIsICIiLCAiaXN1cGVyaW9yIiwgInNzdXBlcmlvciIsICJkc3VwZXJpb3IiLCAiIiwgIiIsICIiLCAiIiwgIiIsICJsc3VwZXJpb3IiLCAiT2dvbmVrc21hbGwiLCAiQnJldmVzbWFsbCIsICJNYWNyb25zbWFsbCIsICJic3VwZXJpb3IiLCAibnN1cGVyaW9yIiwgIm1zdXBlcmlvciIsICJjb21tYXN1cGVyaW9yIiwgInBlcmlvZHN1cGVyaW9yIiwgIkRvdGFjY2VudHNtYWxsIiwgIlJpbmdzbWFsbCIsICIiLCAiIiwgIiIsICIiXTsKY29uc3QgTWFjUm9tYW5FbmNvZGluZyA9IFsiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICJzcGFjZSIsICJleGNsYW0iLCAicXVvdGVkYmwiLCAibnVtYmVyc2lnbiIsICJkb2xsYXIiLCAicGVyY2VudCIsICJhbXBlcnNhbmQiLCAicXVvdGVzaW5nbGUiLCAicGFyZW5sZWZ0IiwgInBhcmVucmlnaHQiLCAiYXN0ZXJpc2siLCAicGx1cyIsICJjb21tYSIsICJoeXBoZW4iLCAicGVyaW9kIiwgInNsYXNoIiwgInplcm8iLCAib25lIiwgInR3byIsICJ0aHJlZSIsICJmb3VyIiwgImZpdmUiLCAic2l4IiwgInNldmVuIiwgImVpZ2h0IiwgIm5pbmUiLCAiY29sb24iLCAic2VtaWNvbG9uIiwgImxlc3MiLCAiZXF1YWwiLCAiZ3JlYXRlciIsICJxdWVzdGlvbiIsICJhdCIsICJBIiwgIkIiLCAiQyIsICJEIiwgIkUiLCAiRiIsICJHIiwgIkgiLCAiSSIsICJKIiwgIksiLCAiTCIsICJNIiwgIk4iLCAiTyIsICJQIiwgIlEiLCAiUiIsICJTIiwgIlQiLCAiVSIsICJWIiwgIlciLCAiWCIsICJZIiwgIloiLCAiYnJhY2tldGxlZnQiLCAiYmFja3NsYXNoIiwgImJyYWNrZXRyaWdodCIsICJhc2NpaWNpcmN1bSIsICJ1bmRlcnNjb3JlIiwgImdyYXZlIiwgImEiLCAiYiIsICJjIiwgImQiLCAiZSIsICJmIiwgImciLCAiaCIsICJpIiwgImoiLCAiayIsICJsIiwgIm0iLCAibiIsICJvIiwgInAiLCAicSIsICJyIiwgInMiLCAidCIsICJ1IiwgInYiLCAidyIsICJ4IiwgInkiLCAieiIsICJicmFjZWxlZnQiLCAiYmFyIiwgImJyYWNlcmlnaHQiLCAiYXNjaWl0aWxkZSIsICIiLCAiQWRpZXJlc2lzIiwgIkFyaW5nIiwgIkNjZWRpbGxhIiwgIkVhY3V0ZSIsICJOdGlsZGUiLCAiT2RpZXJlc2lzIiwgIlVkaWVyZXNpcyIsICJhYWN1dGUiLCAiYWdyYXZlIiwgImFjaXJjdW1mbGV4IiwgImFkaWVyZXNpcyIsICJhdGlsZGUiLCAiYXJpbmciLCAiY2NlZGlsbGEiLCAiZWFjdXRlIiwgImVncmF2ZSIsICJlY2lyY3VtZmxleCIsICJlZGllcmVzaXMiLCAiaWFjdXRlIiwgImlncmF2ZSIsICJpY2lyY3VtZmxleCIsICJpZGllcmVzaXMiLCAibnRpbGRlIiwgIm9hY3V0ZSIsICJvZ3JhdmUiLCAib2NpcmN1bWZsZXgiLCAib2RpZXJlc2lzIiwgIm90aWxkZSIsICJ1YWN1dGUiLCAidWdyYXZlIiwgInVjaXJjdW1mbGV4IiwgInVkaWVyZXNpcyIsICJkYWdnZXIiLCAiZGVncmVlIiwgImNlbnQiLCAic3RlcmxpbmciLCAic2VjdGlvbiIsICJidWxsZXQiLCAicGFyYWdyYXBoIiwgImdlcm1hbmRibHMiLCAicmVnaXN0ZXJlZCIsICJjb3B5cmlnaHQiLCAidHJhZGVtYXJrIiwgImFjdXRlIiwgImRpZXJlc2lzIiwgIm5vdGVxdWFsIiwgIkFFIiwgIk9zbGFzaCIsICJpbmZpbml0eSIsICJwbHVzbWludXMiLCAibGVzc2VxdWFsIiwgImdyZWF0ZXJlcXVhbCIsICJ5ZW4iLCAibXUiLCAicGFydGlhbGRpZmYiLCAic3VtbWF0aW9uIiwgInByb2R1Y3QiLCAicGkiLCAiaW50ZWdyYWwiLCAib3JkZmVtaW5pbmUiLCAib3JkbWFzY3VsaW5lIiwgIk9tZWdhIiwgImFlIiwgIm9zbGFzaCIsICJxdWVzdGlvbmRvd24iLCAiZXhjbGFtZG93biIsICJsb2dpY2Fsbm90IiwgInJhZGljYWwiLCAiZmxvcmluIiwgImFwcHJveGVxdWFsIiwgIkRlbHRhIiwgImd1aWxsZW1vdGxlZnQiLCAiZ3VpbGxlbW90cmlnaHQiLCAiZWxsaXBzaXMiLCAic3BhY2UiLCAiQWdyYXZlIiwgIkF0aWxkZSIsICJPdGlsZGUiLCAiT0UiLCAib2UiLCAiZW5kYXNoIiwgImVtZGFzaCIsICJxdW90ZWRibGxlZnQiLCAicXVvdGVkYmxyaWdodCIsICJxdW90ZWxlZnQiLCAicXVvdGVyaWdodCIsICJkaXZpZGUiLCAibG96ZW5nZSIsICJ5ZGllcmVzaXMiLCAiWWRpZXJlc2lzIiwgImZyYWN0aW9uIiwgImN1cnJlbmN5IiwgImd1aWxzaW5nbGxlZnQiLCAiZ3VpbHNpbmdscmlnaHQiLCAiZmkiLCAiZmwiLCAiZGFnZ2VyZGJsIiwgInBlcmlvZGNlbnRlcmVkIiwgInF1b3Rlc2luZ2xiYXNlIiwgInF1b3RlZGJsYmFzZSIsICJwZXJ0aG91c2FuZCIsICJBY2lyY3VtZmxleCIsICJFY2lyY3VtZmxleCIsICJBYWN1dGUiLCAiRWRpZXJlc2lzIiwgIkVncmF2ZSIsICJJYWN1dGUiLCAiSWNpcmN1bWZsZXgiLCAiSWRpZXJlc2lzIiwgIklncmF2ZSIsICJPYWN1dGUiLCAiT2NpcmN1bWZsZXgiLCAiYXBwbGUiLCAiT2dyYXZlIiwgIlVhY3V0ZSIsICJVY2lyY3VtZmxleCIsICJVZ3JhdmUiLCAiZG90bGVzc2kiLCAiY2lyY3VtZmxleCIsICJ0aWxkZSIsICJtYWNyb24iLCAiYnJldmUiLCAiZG90YWNjZW50IiwgInJpbmciLCAiY2VkaWxsYSIsICJodW5nYXJ1bWxhdXQiLCAib2dvbmVrIiwgImNhcm9uIl07CmNvbnN0IFN0YW5kYXJkRW5jb2RpbmcgPSBbIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAic3BhY2UiLCAiZXhjbGFtIiwgInF1b3RlZGJsIiwgIm51bWJlcnNpZ24iLCAiZG9sbGFyIiwgInBlcmNlbnQiLCAiYW1wZXJzYW5kIiwgInF1b3RlcmlnaHQiLCAicGFyZW5sZWZ0IiwgInBhcmVucmlnaHQiLCAiYXN0ZXJpc2siLCAicGx1cyIsICJjb21tYSIsICJoeXBoZW4iLCAicGVyaW9kIiwgInNsYXNoIiwgInplcm8iLCAib25lIiwgInR3byIsICJ0aHJlZSIsICJmb3VyIiwgImZpdmUiLCAic2l4IiwgInNldmVuIiwgImVpZ2h0IiwgIm5pbmUiLCAiY29sb24iLCAic2VtaWNvbG9uIiwgImxlc3MiLCAiZXF1YWwiLCAiZ3JlYXRlciIsICJxdWVzdGlvbiIsICJhdCIsICJBIiwgIkIiLCAiQyIsICJEIiwgIkUiLCAiRiIsICJHIiwgIkgiLCAiSSIsICJKIiwgIksiLCAiTCIsICJNIiwgIk4iLCAiTyIsICJQIiwgIlEiLCAiUiIsICJTIiwgIlQiLCAiVSIsICJWIiwgIlciLCAiWCIsICJZIiwgIloiLCAiYnJhY2tldGxlZnQiLCAiYmFja3NsYXNoIiwgImJyYWNrZXRyaWdodCIsICJhc2NpaWNpcmN1bSIsICJ1bmRlcnNjb3JlIiwgInF1b3RlbGVmdCIsICJhIiwgImIiLCAiYyIsICJkIiwgImUiLCAiZiIsICJnIiwgImgiLCAiaSIsICJqIiwgImsiLCAibCIsICJtIiwgIm4iLCAibyIsICJwIiwgInEiLCAiciIsICJzIiwgInQiLCAidSIsICJ2IiwgInciLCAieCIsICJ5IiwgInoiLCAiYnJhY2VsZWZ0IiwgImJhciIsICJicmFjZXJpZ2h0IiwgImFzY2lpdGlsZGUiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgImV4Y2xhbWRvd24iLCAiY2VudCIsICJzdGVybGluZyIsICJmcmFjdGlvbiIsICJ5ZW4iLCAiZmxvcmluIiwgInNlY3Rpb24iLCAiY3VycmVuY3kiLCAicXVvdGVzaW5nbGUiLCAicXVvdGVkYmxsZWZ0IiwgImd1aWxsZW1vdGxlZnQiLCAiZ3VpbHNpbmdsbGVmdCIsICJndWlsc2luZ2xyaWdodCIsICJmaSIsICJmbCIsICIiLCAiZW5kYXNoIiwgImRhZ2dlciIsICJkYWdnZXJkYmwiLCAicGVyaW9kY2VudGVyZWQiLCAiIiwgInBhcmFncmFwaCIsICJidWxsZXQiLCAicXVvdGVzaW5nbGJhc2UiLCAicXVvdGVkYmxiYXNlIiwgInF1b3RlZGJscmlnaHQiLCAiZ3VpbGxlbW90cmlnaHQiLCAiZWxsaXBzaXMiLCAicGVydGhvdXNhbmQiLCAiIiwgInF1ZXN0aW9uZG93biIsICIiLCAiZ3JhdmUiLCAiYWN1dGUiLCAiY2lyY3VtZmxleCIsICJ0aWxkZSIsICJtYWNyb24iLCAiYnJldmUiLCAiZG90YWNjZW50IiwgImRpZXJlc2lzIiwgIiIsICJyaW5nIiwgImNlZGlsbGEiLCAiIiwgImh1bmdhcnVtbGF1dCIsICJvZ29uZWsiLCAiY2Fyb24iLCAiZW1kYXNoIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICJBRSIsICIiLCAib3JkZmVtaW5pbmUiLCAiIiwgIiIsICIiLCAiIiwgIkxzbGFzaCIsICJPc2xhc2giLCAiT0UiLCAib3JkbWFzY3VsaW5lIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiYWUiLCAiIiwgIiIsICIiLCAiZG90bGVzc2kiLCAiIiwgIiIsICJsc2xhc2giLCAib3NsYXNoIiwgIm9lIiwgImdlcm1hbmRibHMiLCAiIiwgIiIsICIiLCAiIl07CmNvbnN0IFdpbkFuc2lFbmNvZGluZyA9IFsiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICJzcGFjZSIsICJleGNsYW0iLCAicXVvdGVkYmwiLCAibnVtYmVyc2lnbiIsICJkb2xsYXIiLCAicGVyY2VudCIsICJhbXBlcnNhbmQiLCAicXVvdGVzaW5nbGUiLCAicGFyZW5sZWZ0IiwgInBhcmVucmlnaHQiLCAiYXN0ZXJpc2siLCAicGx1cyIsICJjb21tYSIsICJoeXBoZW4iLCAicGVyaW9kIiwgInNsYXNoIiwgInplcm8iLCAib25lIiwgInR3byIsICJ0aHJlZSIsICJmb3VyIiwgImZpdmUiLCAic2l4IiwgInNldmVuIiwgImVpZ2h0IiwgIm5pbmUiLCAiY29sb24iLCAic2VtaWNvbG9uIiwgImxlc3MiLCAiZXF1YWwiLCAiZ3JlYXRlciIsICJxdWVzdGlvbiIsICJhdCIsICJBIiwgIkIiLCAiQyIsICJEIiwgIkUiLCAiRiIsICJHIiwgIkgiLCAiSSIsICJKIiwgIksiLCAiTCIsICJNIiwgIk4iLCAiTyIsICJQIiwgIlEiLCAiUiIsICJTIiwgIlQiLCAiVSIsICJWIiwgIlciLCAiWCIsICJZIiwgIloiLCAiYnJhY2tldGxlZnQiLCAiYmFja3NsYXNoIiwgImJyYWNrZXRyaWdodCIsICJhc2NpaWNpcmN1bSIsICJ1bmRlcnNjb3JlIiwgImdyYXZlIiwgImEiLCAiYiIsICJjIiwgImQiLCAiZSIsICJmIiwgImciLCAiaCIsICJpIiwgImoiLCAiayIsICJsIiwgIm0iLCAibiIsICJvIiwgInAiLCAicSIsICJyIiwgInMiLCAidCIsICJ1IiwgInYiLCAidyIsICJ4IiwgInkiLCAieiIsICJicmFjZWxlZnQiLCAiYmFyIiwgImJyYWNlcmlnaHQiLCAiYXNjaWl0aWxkZSIsICJidWxsZXQiLCAiRXVybyIsICJidWxsZXQiLCAicXVvdGVzaW5nbGJhc2UiLCAiZmxvcmluIiwgInF1b3RlZGJsYmFzZSIsICJlbGxpcHNpcyIsICJkYWdnZXIiLCAiZGFnZ2VyZGJsIiwgImNpcmN1bWZsZXgiLCAicGVydGhvdXNhbmQiLCAiU2Nhcm9uIiwgImd1aWxzaW5nbGxlZnQiLCAiT0UiLCAiYnVsbGV0IiwgIlpjYXJvbiIsICJidWxsZXQiLCAiYnVsbGV0IiwgInF1b3RlbGVmdCIsICJxdW90ZXJpZ2h0IiwgInF1b3RlZGJsbGVmdCIsICJxdW90ZWRibHJpZ2h0IiwgImJ1bGxldCIsICJlbmRhc2giLCAiZW1kYXNoIiwgInRpbGRlIiwgInRyYWRlbWFyayIsICJzY2Fyb24iLCAiZ3VpbHNpbmdscmlnaHQiLCAib2UiLCAiYnVsbGV0IiwgInpjYXJvbiIsICJZZGllcmVzaXMiLCAic3BhY2UiLCAiZXhjbGFtZG93biIsICJjZW50IiwgInN0ZXJsaW5nIiwgImN1cnJlbmN5IiwgInllbiIsICJicm9rZW5iYXIiLCAic2VjdGlvbiIsICJkaWVyZXNpcyIsICJjb3B5cmlnaHQiLCAib3JkZmVtaW5pbmUiLCAiZ3VpbGxlbW90bGVmdCIsICJsb2dpY2Fsbm90IiwgImh5cGhlbiIsICJyZWdpc3RlcmVkIiwgIm1hY3JvbiIsICJkZWdyZWUiLCAicGx1c21pbnVzIiwgInR3b3N1cGVyaW9yIiwgInRocmVlc3VwZXJpb3IiLCAiYWN1dGUiLCAibXUiLCAicGFyYWdyYXBoIiwgInBlcmlvZGNlbnRlcmVkIiwgImNlZGlsbGEiLCAib25lc3VwZXJpb3IiLCAib3JkbWFzY3VsaW5lIiwgImd1aWxsZW1vdHJpZ2h0IiwgIm9uZXF1YXJ0ZXIiLCAib25laGFsZiIsICJ0aHJlZXF1YXJ0ZXJzIiwgInF1ZXN0aW9uZG93biIsICJBZ3JhdmUiLCAiQWFjdXRlIiwgIkFjaXJjdW1mbGV4IiwgIkF0aWxkZSIsICJBZGllcmVzaXMiLCAiQXJpbmciLCAiQUUiLCAiQ2NlZGlsbGEiLCAiRWdyYXZlIiwgIkVhY3V0ZSIsICJFY2lyY3VtZmxleCIsICJFZGllcmVzaXMiLCAiSWdyYXZlIiwgIklhY3V0ZSIsICJJY2lyY3VtZmxleCIsICJJZGllcmVzaXMiLCAiRXRoIiwgIk50aWxkZSIsICJPZ3JhdmUiLCAiT2FjdXRlIiwgIk9jaXJjdW1mbGV4IiwgIk90aWxkZSIsICJPZGllcmVzaXMiLCAibXVsdGlwbHkiLCAiT3NsYXNoIiwgIlVncmF2ZSIsICJVYWN1dGUiLCAiVWNpcmN1bWZsZXgiLCAiVWRpZXJlc2lzIiwgIllhY3V0ZSIsICJUaG9ybiIsICJnZXJtYW5kYmxzIiwgImFncmF2ZSIsICJhYWN1dGUiLCAiYWNpcmN1bWZsZXgiLCAiYXRpbGRlIiwgImFkaWVyZXNpcyIsICJhcmluZyIsICJhZSIsICJjY2VkaWxsYSIsICJlZ3JhdmUiLCAiZWFjdXRlIiwgImVjaXJjdW1mbGV4IiwgImVkaWVyZXNpcyIsICJpZ3JhdmUiLCAiaWFjdXRlIiwgImljaXJjdW1mbGV4IiwgImlkaWVyZXNpcyIsICJldGgiLCAibnRpbGRlIiwgIm9ncmF2ZSIsICJvYWN1dGUiLCAib2NpcmN1bWZsZXgiLCAib3RpbGRlIiwgIm9kaWVyZXNpcyIsICJkaXZpZGUiLCAib3NsYXNoIiwgInVncmF2ZSIsICJ1YWN1dGUiLCAidWNpcmN1bWZsZXgiLCAidWRpZXJlc2lzIiwgInlhY3V0ZSIsICJ0aG9ybiIsICJ5ZGllcmVzaXMiXTsKY29uc3QgU3ltYm9sU2V0RW5jb2RpbmcgPSBbIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAic3BhY2UiLCAiZXhjbGFtIiwgInVuaXZlcnNhbCIsICJudW1iZXJzaWduIiwgImV4aXN0ZW50aWFsIiwgInBlcmNlbnQiLCAiYW1wZXJzYW5kIiwgInN1Y2h0aGF0IiwgInBhcmVubGVmdCIsICJwYXJlbnJpZ2h0IiwgImFzdGVyaXNrbWF0aCIsICJwbHVzIiwgImNvbW1hIiwgIm1pbnVzIiwgInBlcmlvZCIsICJzbGFzaCIsICJ6ZXJvIiwgIm9uZSIsICJ0d28iLCAidGhyZWUiLCAiZm91ciIsICJmaXZlIiwgInNpeCIsICJzZXZlbiIsICJlaWdodCIsICJuaW5lIiwgImNvbG9uIiwgInNlbWljb2xvbiIsICJsZXNzIiwgImVxdWFsIiwgImdyZWF0ZXIiLCAicXVlc3Rpb24iLCAiY29uZ3J1ZW50IiwgIkFscGhhIiwgIkJldGEiLCAiQ2hpIiwgIkRlbHRhIiwgIkVwc2lsb24iLCAiUGhpIiwgIkdhbW1hIiwgIkV0YSIsICJJb3RhIiwgInRoZXRhMSIsICJLYXBwYSIsICJMYW1iZGEiLCAiTXUiLCAiTnUiLCAiT21pY3JvbiIsICJQaSIsICJUaGV0YSIsICJSaG8iLCAiU2lnbWEiLCAiVGF1IiwgIlVwc2lsb24iLCAic2lnbWExIiwgIk9tZWdhIiwgIlhpIiwgIlBzaSIsICJaZXRhIiwgImJyYWNrZXRsZWZ0IiwgInRoZXJlZm9yZSIsICJicmFja2V0cmlnaHQiLCAicGVycGVuZGljdWxhciIsICJ1bmRlcnNjb3JlIiwgInJhZGljYWxleCIsICJhbHBoYSIsICJiZXRhIiwgImNoaSIsICJkZWx0YSIsICJlcHNpbG9uIiwgInBoaSIsICJnYW1tYSIsICJldGEiLCAiaW90YSIsICJwaGkxIiwgImthcHBhIiwgImxhbWJkYSIsICJtdSIsICJudSIsICJvbWljcm9uIiwgInBpIiwgInRoZXRhIiwgInJobyIsICJzaWdtYSIsICJ0YXUiLCAidXBzaWxvbiIsICJvbWVnYTEiLCAib21lZ2EiLCAieGkiLCAicHNpIiwgInpldGEiLCAiYnJhY2VsZWZ0IiwgImJhciIsICJicmFjZXJpZ2h0IiwgInNpbWlsYXIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiRXVybyIsICJVcHNpbG9uMSIsICJtaW51dGUiLCAibGVzc2VxdWFsIiwgImZyYWN0aW9uIiwgImluZmluaXR5IiwgImZsb3JpbiIsICJjbHViIiwgImRpYW1vbmQiLCAiaGVhcnQiLCAic3BhZGUiLCAiYXJyb3dib3RoIiwgImFycm93bGVmdCIsICJhcnJvd3VwIiwgImFycm93cmlnaHQiLCAiYXJyb3dkb3duIiwgImRlZ3JlZSIsICJwbHVzbWludXMiLCAic2Vjb25kIiwgImdyZWF0ZXJlcXVhbCIsICJtdWx0aXBseSIsICJwcm9wb3J0aW9uYWwiLCAicGFydGlhbGRpZmYiLCAiYnVsbGV0IiwgImRpdmlkZSIsICJub3RlcXVhbCIsICJlcXVpdmFsZW5jZSIsICJhcHByb3hlcXVhbCIsICJlbGxpcHNpcyIsICJhcnJvd3ZlcnRleCIsICJhcnJvd2hvcml6ZXgiLCAiY2FycmlhZ2VyZXR1cm4iLCAiYWxlcGgiLCAiSWZyYWt0dXIiLCAiUmZyYWt0dXIiLCAid2VpZXJzdHJhc3MiLCAiY2lyY2xlbXVsdGlwbHkiLCAiY2lyY2xlcGx1cyIsICJlbXB0eXNldCIsICJpbnRlcnNlY3Rpb24iLCAidW5pb24iLCAicHJvcGVyc3VwZXJzZXQiLCAicmVmbGV4c3VwZXJzZXQiLCAibm90c3Vic2V0IiwgInByb3BlcnN1YnNldCIsICJyZWZsZXhzdWJzZXQiLCAiZWxlbWVudCIsICJub3RlbGVtZW50IiwgImFuZ2xlIiwgImdyYWRpZW50IiwgInJlZ2lzdGVyc2VyaWYiLCAiY29weXJpZ2h0c2VyaWYiLCAidHJhZGVtYXJrc2VyaWYiLCAicHJvZHVjdCIsICJyYWRpY2FsIiwgImRvdG1hdGgiLCAibG9naWNhbG5vdCIsICJsb2dpY2FsYW5kIiwgImxvZ2ljYWxvciIsICJhcnJvd2RibGJvdGgiLCAiYXJyb3dkYmxsZWZ0IiwgImFycm93ZGJsdXAiLCAiYXJyb3dkYmxyaWdodCIsICJhcnJvd2RibGRvd24iLCAibG96ZW5nZSIsICJhbmdsZWxlZnQiLCAicmVnaXN0ZXJzYW5zIiwgImNvcHlyaWdodHNhbnMiLCAidHJhZGVtYXJrc2FucyIsICJzdW1tYXRpb24iLCAicGFyZW5sZWZ0dHAiLCAicGFyZW5sZWZ0ZXgiLCAicGFyZW5sZWZ0YnQiLCAiYnJhY2tldGxlZnR0cCIsICJicmFja2V0bGVmdGV4IiwgImJyYWNrZXRsZWZ0YnQiLCAiYnJhY2VsZWZ0dHAiLCAiYnJhY2VsZWZ0bWlkIiwgImJyYWNlbGVmdGJ0IiwgImJyYWNlZXgiLCAiIiwgImFuZ2xlcmlnaHQiLCAiaW50ZWdyYWwiLCAiaW50ZWdyYWx0cCIsICJpbnRlZ3JhbGV4IiwgImludGVncmFsYnQiLCAicGFyZW5yaWdodHRwIiwgInBhcmVucmlnaHRleCIsICJwYXJlbnJpZ2h0YnQiLCAiYnJhY2tldHJpZ2h0dHAiLCAiYnJhY2tldHJpZ2h0ZXgiLCAiYnJhY2tldHJpZ2h0YnQiLCAiYnJhY2VyaWdodHRwIiwgImJyYWNlcmlnaHRtaWQiLCAiYnJhY2VyaWdodGJ0IiwgIiJdOwpjb25zdCBaYXBmRGluZ2JhdHNFbmNvZGluZyA9IFsiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICJzcGFjZSIsICJhMSIsICJhMiIsICJhMjAyIiwgImEzIiwgImE0IiwgImE1IiwgImExMTkiLCAiYTExOCIsICJhMTE3IiwgImExMSIsICJhMTIiLCAiYTEzIiwgImExNCIsICJhMTUiLCAiYTE2IiwgImExMDUiLCAiYTE3IiwgImExOCIsICJhMTkiLCAiYTIwIiwgImEyMSIsICJhMjIiLCAiYTIzIiwgImEyNCIsICJhMjUiLCAiYTI2IiwgImEyNyIsICJhMjgiLCAiYTYiLCAiYTciLCAiYTgiLCAiYTkiLCAiYTEwIiwgImEyOSIsICJhMzAiLCAiYTMxIiwgImEzMiIsICJhMzMiLCAiYTM0IiwgImEzNSIsICJhMzYiLCAiYTM3IiwgImEzOCIsICJhMzkiLCAiYTQwIiwgImE0MSIsICJhNDIiLCAiYTQzIiwgImE0NCIsICJhNDUiLCAiYTQ2IiwgImE0NyIsICJhNDgiLCAiYTQ5IiwgImE1MCIsICJhNTEiLCAiYTUyIiwgImE1MyIsICJhNTQiLCAiYTU1IiwgImE1NiIsICJhNTciLCAiYTU4IiwgImE1OSIsICJhNjAiLCAiYTYxIiwgImE2MiIsICJhNjMiLCAiYTY0IiwgImE2NSIsICJhNjYiLCAiYTY3IiwgImE2OCIsICJhNjkiLCAiYTcwIiwgImE3MSIsICJhNzIiLCAiYTczIiwgImE3NCIsICJhMjAzIiwgImE3NSIsICJhMjA0IiwgImE3NiIsICJhNzciLCAiYTc4IiwgImE3OSIsICJhODEiLCAiYTgyIiwgImE4MyIsICJhODQiLCAiYTk3IiwgImE5OCIsICJhOTkiLCAiYTEwMCIsICIiLCAiYTg5IiwgImE5MCIsICJhOTMiLCAiYTk0IiwgImE5MSIsICJhOTIiLCAiYTIwNSIsICJhODUiLCAiYTIwNiIsICJhODYiLCAiYTg3IiwgImE4OCIsICJhOTUiLCAiYTk2IiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICJhMTAxIiwgImExMDIiLCAiYTEwMyIsICJhMTA0IiwgImExMDYiLCAiYTEwNyIsICJhMTA4IiwgImExMTIiLCAiYTExMSIsICJhMTEwIiwgImExMDkiLCAiYTEyMCIsICJhMTIxIiwgImExMjIiLCAiYTEyMyIsICJhMTI0IiwgImExMjUiLCAiYTEyNiIsICJhMTI3IiwgImExMjgiLCAiYTEyOSIsICJhMTMwIiwgImExMzEiLCAiYTEzMiIsICJhMTMzIiwgImExMzQiLCAiYTEzNSIsICJhMTM2IiwgImExMzciLCAiYTEzOCIsICJhMTM5IiwgImExNDAiLCAiYTE0MSIsICJhMTQyIiwgImExNDMiLCAiYTE0NCIsICJhMTQ1IiwgImExNDYiLCAiYTE0NyIsICJhMTQ4IiwgImExNDkiLCAiYTE1MCIsICJhMTUxIiwgImExNTIiLCAiYTE1MyIsICJhMTU0IiwgImExNTUiLCAiYTE1NiIsICJhMTU3IiwgImExNTgiLCAiYTE1OSIsICJhMTYwIiwgImExNjEiLCAiYTE2MyIsICJhMTY0IiwgImExOTYiLCAiYTE2NSIsICJhMTkyIiwgImExNjYiLCAiYTE2NyIsICJhMTY4IiwgImExNjkiLCAiYTE3MCIsICJhMTcxIiwgImExNzIiLCAiYTE3MyIsICJhMTYyIiwgImExNzQiLCAiYTE3NSIsICJhMTc2IiwgImExNzciLCAiYTE3OCIsICJhMTc5IiwgImExOTMiLCAiYTE4MCIsICJhMTk5IiwgImExODEiLCAiYTIwMCIsICJhMTgyIiwgIiIsICJhMjAxIiwgImExODMiLCAiYTE4NCIsICJhMTk3IiwgImExODUiLCAiYTE5NCIsICJhMTk4IiwgImExODYiLCAiYTE5NSIsICJhMTg3IiwgImExODgiLCAiYTE4OSIsICJhMTkwIiwgImExOTEiLCAiIl07CmZ1bmN0aW9uIGdldEVuY29kaW5nKGVuY29kaW5nTmFtZSkgewogIHN3aXRjaCAoZW5jb2RpbmdOYW1lKSB7CiAgICBjYXNlICJXaW5BbnNpRW5jb2RpbmciOgogICAgICByZXR1cm4gV2luQW5zaUVuY29kaW5nOwogICAgY2FzZSAiU3RhbmRhcmRFbmNvZGluZyI6CiAgICAgIHJldHVybiBTdGFuZGFyZEVuY29kaW5nOwogICAgY2FzZSAiTWFjUm9tYW5FbmNvZGluZyI6CiAgICAgIHJldHVybiBNYWNSb21hbkVuY29kaW5nOwogICAgY2FzZSAiU3ltYm9sU2V0RW5jb2RpbmciOgogICAgICByZXR1cm4gU3ltYm9sU2V0RW5jb2Rpbmc7CiAgICBjYXNlICJaYXBmRGluZ2JhdHNFbmNvZGluZyI6CiAgICAgIHJldHVybiBaYXBmRGluZ2JhdHNFbmNvZGluZzsKICAgIGNhc2UgIkV4cGVydEVuY29kaW5nIjoKICAgICAgcmV0dXJuIEV4cGVydEVuY29kaW5nOwogICAgY2FzZSAiTWFjRXhwZXJ0RW5jb2RpbmciOgogICAgICByZXR1cm4gTWFjRXhwZXJ0RW5jb2Rpbmc7CiAgICBkZWZhdWx0OgogICAgICByZXR1cm4gbnVsbDsKICB9Cn0KCjsvLyAuL3NyYy9jb3JlL2dseXBobGlzdC5qcwoKY29uc3QgZ2V0R2x5cGhzVW5pY29kZSA9IGdldExvb2t1cFRhYmxlRmFjdG9yeShmdW5jdGlvbiAodCkgewogIHQuQSA9IDB4MDA0MTsKICB0LkFFID0gMHgwMGM2OwogIHQuQUVhY3V0ZSA9IDB4MDFmYzsKICB0LkFFbWFjcm9uID0gMHgwMWUyOwogIHQuQUVzbWFsbCA9IDB4ZjdlNjsKICB0LkFhY3V0ZSA9IDB4MDBjMTsKICB0LkFhY3V0ZXNtYWxsID0gMHhmN2UxOwogIHQuQWJyZXZlID0gMHgwMTAyOwogIHQuQWJyZXZlYWN1dGUgPSAweDFlYWU7CiAgdC5BYnJldmVjeXJpbGxpYyA9IDB4MDRkMDsKICB0LkFicmV2ZWRvdGJlbG93ID0gMHgxZWI2OwogIHQuQWJyZXZlZ3JhdmUgPSAweDFlYjA7CiAgdC5BYnJldmVob29rYWJvdmUgPSAweDFlYjI7CiAgdC5BYnJldmV0aWxkZSA9IDB4MWViNDsKICB0LkFjYXJvbiA9IDB4MDFjZDsKICB0LkFjaXJjbGUgPSAweDI0YjY7CiAgdC5BY2lyY3VtZmxleCA9IDB4MDBjMjsKICB0LkFjaXJjdW1mbGV4YWN1dGUgPSAweDFlYTQ7CiAgdC5BY2lyY3VtZmxleGRvdGJlbG93ID0gMHgxZWFjOwogIHQuQWNpcmN1bWZsZXhncmF2ZSA9IDB4MWVhNjsKICB0LkFjaXJjdW1mbGV4aG9va2Fib3ZlID0gMHgxZWE4OwogIHQuQWNpcmN1bWZsZXhzbWFsbCA9IDB4ZjdlMjsKICB0LkFjaXJjdW1mbGV4dGlsZGUgPSAweDFlYWE7CiAgdC5BY3V0ZSA9IDB4ZjZjOTsKICB0LkFjdXRlc21hbGwgPSAweGY3YjQ7CiAgdC5BY3lyaWxsaWMgPSAweDA0MTA7CiAgdC5BZGJsZ3JhdmUgPSAweDAyMDA7CiAgdC5BZGllcmVzaXMgPSAweDAwYzQ7CiAgdC5BZGllcmVzaXNjeXJpbGxpYyA9IDB4MDRkMjsKICB0LkFkaWVyZXNpc21hY3JvbiA9IDB4MDFkZTsKICB0LkFkaWVyZXNpc3NtYWxsID0gMHhmN2U0OwogIHQuQWRvdGJlbG93ID0gMHgxZWEwOwogIHQuQWRvdG1hY3JvbiA9IDB4MDFlMDsKICB0LkFncmF2ZSA9IDB4MDBjMDsKICB0LkFncmF2ZXNtYWxsID0gMHhmN2UwOwogIHQuQWhvb2thYm92ZSA9IDB4MWVhMjsKICB0LkFpZWN5cmlsbGljID0gMHgwNGQ0OwogIHQuQWludmVydGVkYnJldmUgPSAweDAyMDI7CiAgdC5BbHBoYSA9IDB4MDM5MTsKICB0LkFscGhhdG9ub3MgPSAweDAzODY7CiAgdC5BbWFjcm9uID0gMHgwMTAwOwogIHQuQW1vbm9zcGFjZSA9IDB4ZmYyMTsKICB0LkFvZ29uZWsgPSAweDAxMDQ7CiAgdC5BcmluZyA9IDB4MDBjNTsKICB0LkFyaW5nYWN1dGUgPSAweDAxZmE7CiAgdC5BcmluZ2JlbG93ID0gMHgxZTAwOwogIHQuQXJpbmdzbWFsbCA9IDB4ZjdlNTsKICB0LkFzbWFsbCA9IDB4Zjc2MTsKICB0LkF0aWxkZSA9IDB4MDBjMzsKICB0LkF0aWxkZXNtYWxsID0gMHhmN2UzOwogIHQuQXliYXJtZW5pYW4gPSAweDA1MzE7CiAgdC5CID0gMHgwMDQyOwogIHQuQmNpcmNsZSA9IDB4MjRiNzsKICB0LkJkb3RhY2NlbnQgPSAweDFlMDI7CiAgdC5CZG90YmVsb3cgPSAweDFlMDQ7CiAgdC5CZWN5cmlsbGljID0gMHgwNDExOwogIHQuQmVuYXJtZW5pYW4gPSAweDA1MzI7CiAgdC5CZXRhID0gMHgwMzkyOwogIHQuQmhvb2sgPSAweDAxODE7CiAgdC5CbGluZWJlbG93ID0gMHgxZTA2OwogIHQuQm1vbm9zcGFjZSA9IDB4ZmYyMjsKICB0LkJyZXZlc21hbGwgPSAweGY2ZjQ7CiAgdC5Cc21hbGwgPSAweGY3NjI7CiAgdC5CdG9wYmFyID0gMHgwMTgyOwogIHQuQyA9IDB4MDA0MzsKICB0LkNhYXJtZW5pYW4gPSAweDA1M2U7CiAgdC5DYWN1dGUgPSAweDAxMDY7CiAgdC5DYXJvbiA9IDB4ZjZjYTsKICB0LkNhcm9uc21hbGwgPSAweGY2ZjU7CiAgdC5DY2Fyb24gPSAweDAxMGM7CiAgdC5DY2VkaWxsYSA9IDB4MDBjNzsKICB0LkNjZWRpbGxhYWN1dGUgPSAweDFlMDg7CiAgdC5DY2VkaWxsYXNtYWxsID0gMHhmN2U3OwogIHQuQ2NpcmNsZSA9IDB4MjRiODsKICB0LkNjaXJjdW1mbGV4ID0gMHgwMTA4OwogIHQuQ2RvdCA9IDB4MDEwYTsKICB0LkNkb3RhY2NlbnQgPSAweDAxMGE7CiAgdC5DZWRpbGxhc21hbGwgPSAweGY3Yjg7CiAgdC5DaGFhcm1lbmlhbiA9IDB4MDU0OTsKICB0LkNoZWFia2hhc2lhbmN5cmlsbGljID0gMHgwNGJjOwogIHQuQ2hlY3lyaWxsaWMgPSAweDA0Mjc7CiAgdC5DaGVkZXNjZW5kZXJhYmtoYXNpYW5jeXJpbGxpYyA9IDB4MDRiZTsKICB0LkNoZWRlc2NlbmRlcmN5cmlsbGljID0gMHgwNGI2OwogIHQuQ2hlZGllcmVzaXNjeXJpbGxpYyA9IDB4MDRmNDsKICB0LkNoZWhhcm1lbmlhbiA9IDB4MDU0MzsKICB0LkNoZWtoYWthc3NpYW5jeXJpbGxpYyA9IDB4MDRjYjsKICB0LkNoZXZlcnRpY2Fsc3Ryb2tlY3lyaWxsaWMgPSAweDA0Yjg7CiAgdC5DaGkgPSAweDAzYTc7CiAgdC5DaG9vayA9IDB4MDE4NzsKICB0LkNpcmN1bWZsZXhzbWFsbCA9IDB4ZjZmNjsKICB0LkNtb25vc3BhY2UgPSAweGZmMjM7CiAgdC5Db2FybWVuaWFuID0gMHgwNTUxOwogIHQuQ3NtYWxsID0gMHhmNzYzOwogIHQuRCA9IDB4MDA0NDsKICB0LkRaID0gMHgwMWYxOwogIHQuRFpjYXJvbiA9IDB4MDFjNDsKICB0LkRhYXJtZW5pYW4gPSAweDA1MzQ7CiAgdC5EYWZyaWNhbiA9IDB4MDE4OTsKICB0LkRjYXJvbiA9IDB4MDEwZTsKICB0LkRjZWRpbGxhID0gMHgxZTEwOwogIHQuRGNpcmNsZSA9IDB4MjRiOTsKICB0LkRjaXJjdW1mbGV4YmVsb3cgPSAweDFlMTI7CiAgdC5EY3JvYXQgPSAweDAxMTA7CiAgdC5EZG90YWNjZW50ID0gMHgxZTBhOwogIHQuRGRvdGJlbG93ID0gMHgxZTBjOwogIHQuRGVjeXJpbGxpYyA9IDB4MDQxNDsKICB0LkRlaWNvcHRpYyA9IDB4MDNlZTsKICB0LkRlbHRhID0gMHgyMjA2OwogIHQuRGVsdGFncmVlayA9IDB4MDM5NDsKICB0LkRob29rID0gMHgwMThhOwogIHQuRGllcmVzaXMgPSAweGY2Y2I7CiAgdC5EaWVyZXNpc0FjdXRlID0gMHhmNmNjOwogIHQuRGllcmVzaXNHcmF2ZSA9IDB4ZjZjZDsKICB0LkRpZXJlc2lzc21hbGwgPSAweGY3YTg7CiAgdC5EaWdhbW1hZ3JlZWsgPSAweDAzZGM7CiAgdC5EamVjeXJpbGxpYyA9IDB4MDQwMjsKICB0LkRsaW5lYmVsb3cgPSAweDFlMGU7CiAgdC5EbW9ub3NwYWNlID0gMHhmZjI0OwogIHQuRG90YWNjZW50c21hbGwgPSAweGY2Zjc7CiAgdC5Ec2xhc2ggPSAweDAxMTA7CiAgdC5Ec21hbGwgPSAweGY3NjQ7CiAgdC5EdG9wYmFyID0gMHgwMThiOwogIHQuRHogPSAweDAxZjI7CiAgdC5EemNhcm9uID0gMHgwMWM1OwogIHQuRHplYWJraGFzaWFuY3lyaWxsaWMgPSAweDA0ZTA7CiAgdC5EemVjeXJpbGxpYyA9IDB4MDQwNTsKICB0LkR6aGVjeXJpbGxpYyA9IDB4MDQwZjsKICB0LkUgPSAweDAwNDU7CiAgdC5FYWN1dGUgPSAweDAwYzk7CiAgdC5FYWN1dGVzbWFsbCA9IDB4ZjdlOTsKICB0LkVicmV2ZSA9IDB4MDExNDsKICB0LkVjYXJvbiA9IDB4MDExYTsKICB0LkVjZWRpbGxhYnJldmUgPSAweDFlMWM7CiAgdC5FY2hhcm1lbmlhbiA9IDB4MDUzNTsKICB0LkVjaXJjbGUgPSAweDI0YmE7CiAgdC5FY2lyY3VtZmxleCA9IDB4MDBjYTsKICB0LkVjaXJjdW1mbGV4YWN1dGUgPSAweDFlYmU7CiAgdC5FY2lyY3VtZmxleGJlbG93ID0gMHgxZTE4OwogIHQuRWNpcmN1bWZsZXhkb3RiZWxvdyA9IDB4MWVjNjsKICB0LkVjaXJjdW1mbGV4Z3JhdmUgPSAweDFlYzA7CiAgdC5FY2lyY3VtZmxleGhvb2thYm92ZSA9IDB4MWVjMjsKICB0LkVjaXJjdW1mbGV4c21hbGwgPSAweGY3ZWE7CiAgdC5FY2lyY3VtZmxleHRpbGRlID0gMHgxZWM0OwogIHQuRWN5cmlsbGljID0gMHgwNDA0OwogIHQuRWRibGdyYXZlID0gMHgwMjA0OwogIHQuRWRpZXJlc2lzID0gMHgwMGNiOwogIHQuRWRpZXJlc2lzc21hbGwgPSAweGY3ZWI7CiAgdC5FZG90ID0gMHgwMTE2OwogIHQuRWRvdGFjY2VudCA9IDB4MDExNjsKICB0LkVkb3RiZWxvdyA9IDB4MWViODsKICB0LkVmY3lyaWxsaWMgPSAweDA0MjQ7CiAgdC5FZ3JhdmUgPSAweDAwYzg7CiAgdC5FZ3JhdmVzbWFsbCA9IDB4ZjdlODsKICB0LkVoYXJtZW5pYW4gPSAweDA1Mzc7CiAgdC5FaG9va2Fib3ZlID0gMHgxZWJhOwogIHQuRWlnaHRyb21hbiA9IDB4MjE2NzsKICB0LkVpbnZlcnRlZGJyZXZlID0gMHgwMjA2OwogIHQuRWlvdGlmaWVkY3lyaWxsaWMgPSAweDA0NjQ7CiAgdC5FbGN5cmlsbGljID0gMHgwNDFiOwogIHQuRWxldmVucm9tYW4gPSAweDIxNmE7CiAgdC5FbWFjcm9uID0gMHgwMTEyOwogIHQuRW1hY3JvbmFjdXRlID0gMHgxZTE2OwogIHQuRW1hY3JvbmdyYXZlID0gMHgxZTE0OwogIHQuRW1jeXJpbGxpYyA9IDB4MDQxYzsKICB0LkVtb25vc3BhY2UgPSAweGZmMjU7CiAgdC5FbmN5cmlsbGljID0gMHgwNDFkOwogIHQuRW5kZXNjZW5kZXJjeXJpbGxpYyA9IDB4MDRhMjsKICB0LkVuZyA9IDB4MDE0YTsKICB0LkVuZ2hlY3lyaWxsaWMgPSAweDA0YTQ7CiAgdC5Fbmhvb2tjeXJpbGxpYyA9IDB4MDRjNzsKICB0LkVvZ29uZWsgPSAweDAxMTg7CiAgdC5Fb3BlbiA9IDB4MDE5MDsKICB0LkVwc2lsb24gPSAweDAzOTU7CiAgdC5FcHNpbG9udG9ub3MgPSAweDAzODg7CiAgdC5FcmN5cmlsbGljID0gMHgwNDIwOwogIHQuRXJldmVyc2VkID0gMHgwMThlOwogIHQuRXJldmVyc2VkY3lyaWxsaWMgPSAweDA0MmQ7CiAgdC5Fc2N5cmlsbGljID0gMHgwNDIxOwogIHQuRXNkZXNjZW5kZXJjeXJpbGxpYyA9IDB4MDRhYTsKICB0LkVzaCA9IDB4MDFhOTsKICB0LkVzbWFsbCA9IDB4Zjc2NTsKICB0LkV0YSA9IDB4MDM5NzsKICB0LkV0YXJtZW5pYW4gPSAweDA1Mzg7CiAgdC5FdGF0b25vcyA9IDB4MDM4OTsKICB0LkV0aCA9IDB4MDBkMDsKICB0LkV0aHNtYWxsID0gMHhmN2YwOwogIHQuRXRpbGRlID0gMHgxZWJjOwogIHQuRXRpbGRlYmVsb3cgPSAweDFlMWE7CiAgdC5FdXJvID0gMHgyMGFjOwogIHQuRXpoID0gMHgwMWI3OwogIHQuRXpoY2Fyb24gPSAweDAxZWU7CiAgdC5FemhyZXZlcnNlZCA9IDB4MDFiODsKICB0LkYgPSAweDAwNDY7CiAgdC5GY2lyY2xlID0gMHgyNGJiOwogIHQuRmRvdGFjY2VudCA9IDB4MWUxZTsKICB0LkZlaGFybWVuaWFuID0gMHgwNTU2OwogIHQuRmVpY29wdGljID0gMHgwM2U0OwogIHQuRmhvb2sgPSAweDAxOTE7CiAgdC5GaXRhY3lyaWxsaWMgPSAweDA0NzI7CiAgdC5GaXZlcm9tYW4gPSAweDIxNjQ7CiAgdC5GbW9ub3NwYWNlID0gMHhmZjI2OwogIHQuRm91cnJvbWFuID0gMHgyMTYzOwogIHQuRnNtYWxsID0gMHhmNzY2OwogIHQuRyA9IDB4MDA0NzsKICB0LkdCc3F1YXJlID0gMHgzMzg3OwogIHQuR2FjdXRlID0gMHgwMWY0OwogIHQuR2FtbWEgPSAweDAzOTM7CiAgdC5HYW1tYWFmcmljYW4gPSAweDAxOTQ7CiAgdC5HYW5naWFjb3B0aWMgPSAweDAzZWE7CiAgdC5HYnJldmUgPSAweDAxMWU7CiAgdC5HY2Fyb24gPSAweDAxZTY7CiAgdC5HY2VkaWxsYSA9IDB4MDEyMjsKICB0LkdjaXJjbGUgPSAweDI0YmM7CiAgdC5HY2lyY3VtZmxleCA9IDB4MDExYzsKICB0Lkdjb21tYWFjY2VudCA9IDB4MDEyMjsKICB0Lkdkb3QgPSAweDAxMjA7CiAgdC5HZG90YWNjZW50ID0gMHgwMTIwOwogIHQuR2VjeXJpbGxpYyA9IDB4MDQxMzsKICB0LkdoYWRhcm1lbmlhbiA9IDB4MDU0MjsKICB0LkdoZW1pZGRsZWhvb2tjeXJpbGxpYyA9IDB4MDQ5NDsKICB0LkdoZXN0cm9rZWN5cmlsbGljID0gMHgwNDkyOwogIHQuR2hldXB0dXJuY3lyaWxsaWMgPSAweDA0OTA7CiAgdC5HaG9vayA9IDB4MDE5MzsKICB0LkdpbWFybWVuaWFuID0gMHgwNTMzOwogIHQuR2plY3lyaWxsaWMgPSAweDA0MDM7CiAgdC5HbWFjcm9uID0gMHgxZTIwOwogIHQuR21vbm9zcGFjZSA9IDB4ZmYyNzsKICB0LkdyYXZlID0gMHhmNmNlOwogIHQuR3JhdmVzbWFsbCA9IDB4Zjc2MDsKICB0LkdzbWFsbCA9IDB4Zjc2NzsKICB0LkdzbWFsbGhvb2sgPSAweDAyOWI7CiAgdC5Hc3Ryb2tlID0gMHgwMWU0OwogIHQuSCA9IDB4MDA0ODsKICB0LkgxODUzMyA9IDB4MjVjZjsKICB0LkgxODU0MyA9IDB4MjVhYTsKICB0LkgxODU1MSA9IDB4MjVhYjsKICB0LkgyMjA3MyA9IDB4MjVhMTsKICB0LkhQc3F1YXJlID0gMHgzM2NiOwogIHQuSGFhYmtoYXNpYW5jeXJpbGxpYyA9IDB4MDRhODsKICB0LkhhZGVzY2VuZGVyY3lyaWxsaWMgPSAweDA0YjI7CiAgdC5IYXJkc2lnbmN5cmlsbGljID0gMHgwNDJhOwogIHQuSGJhciA9IDB4MDEyNjsKICB0LkhicmV2ZWJlbG93ID0gMHgxZTJhOwogIHQuSGNlZGlsbGEgPSAweDFlMjg7CiAgdC5IY2lyY2xlID0gMHgyNGJkOwogIHQuSGNpcmN1bWZsZXggPSAweDAxMjQ7CiAgdC5IZGllcmVzaXMgPSAweDFlMjY7CiAgdC5IZG90YWNjZW50ID0gMHgxZTIyOwogIHQuSGRvdGJlbG93ID0gMHgxZTI0OwogIHQuSG1vbm9zcGFjZSA9IDB4ZmYyODsKICB0LkhvYXJtZW5pYW4gPSAweDA1NDA7CiAgdC5Ib3JpY29wdGljID0gMHgwM2U4OwogIHQuSHNtYWxsID0gMHhmNzY4OwogIHQuSHVuZ2FydW1sYXV0ID0gMHhmNmNmOwogIHQuSHVuZ2FydW1sYXV0c21hbGwgPSAweGY2Zjg7CiAgdC5IenNxdWFyZSA9IDB4MzM5MDsKICB0LkkgPSAweDAwNDk7CiAgdC5JQWN5cmlsbGljID0gMHgwNDJmOwogIHQuSUogPSAweDAxMzI7CiAgdC5JVWN5cmlsbGljID0gMHgwNDJlOwogIHQuSWFjdXRlID0gMHgwMGNkOwogIHQuSWFjdXRlc21hbGwgPSAweGY3ZWQ7CiAgdC5JYnJldmUgPSAweDAxMmM7CiAgdC5JY2Fyb24gPSAweDAxY2Y7CiAgdC5JY2lyY2xlID0gMHgyNGJlOwogIHQuSWNpcmN1bWZsZXggPSAweDAwY2U7CiAgdC5JY2lyY3VtZmxleHNtYWxsID0gMHhmN2VlOwogIHQuSWN5cmlsbGljID0gMHgwNDA2OwogIHQuSWRibGdyYXZlID0gMHgwMjA4OwogIHQuSWRpZXJlc2lzID0gMHgwMGNmOwogIHQuSWRpZXJlc2lzYWN1dGUgPSAweDFlMmU7CiAgdC5JZGllcmVzaXNjeXJpbGxpYyA9IDB4MDRlNDsKICB0LklkaWVyZXNpc3NtYWxsID0gMHhmN2VmOwogIHQuSWRvdCA9IDB4MDEzMDsKICB0Lklkb3RhY2NlbnQgPSAweDAxMzA7CiAgdC5JZG90YmVsb3cgPSAweDFlY2E7CiAgdC5JZWJyZXZlY3lyaWxsaWMgPSAweDA0ZDY7CiAgdC5JZWN5cmlsbGljID0gMHgwNDE1OwogIHQuSWZyYWt0dXIgPSAweDIxMTE7CiAgdC5JZ3JhdmUgPSAweDAwY2M7CiAgdC5JZ3JhdmVzbWFsbCA9IDB4ZjdlYzsKICB0Lklob29rYWJvdmUgPSAweDFlYzg7CiAgdC5JaWN5cmlsbGljID0gMHgwNDE4OwogIHQuSWludmVydGVkYnJldmUgPSAweDAyMGE7CiAgdC5JaXNob3J0Y3lyaWxsaWMgPSAweDA0MTk7CiAgdC5JbWFjcm9uID0gMHgwMTJhOwogIHQuSW1hY3JvbmN5cmlsbGljID0gMHgwNGUyOwogIHQuSW1vbm9zcGFjZSA9IDB4ZmYyOTsKICB0LkluaWFybWVuaWFuID0gMHgwNTNiOwogIHQuSW9jeXJpbGxpYyA9IDB4MDQwMTsKICB0LklvZ29uZWsgPSAweDAxMmU7CiAgdC5Jb3RhID0gMHgwMzk5OwogIHQuSW90YWFmcmljYW4gPSAweDAxOTY7CiAgdC5Jb3RhZGllcmVzaXMgPSAweDAzYWE7CiAgdC5Jb3RhdG9ub3MgPSAweDAzOGE7CiAgdC5Jc21hbGwgPSAweGY3Njk7CiAgdC5Jc3Ryb2tlID0gMHgwMTk3OwogIHQuSXRpbGRlID0gMHgwMTI4OwogIHQuSXRpbGRlYmVsb3cgPSAweDFlMmM7CiAgdC5JemhpdHNhY3lyaWxsaWMgPSAweDA0NzQ7CiAgdC5JemhpdHNhZGJsZ3JhdmVjeXJpbGxpYyA9IDB4MDQ3NjsKICB0LkogPSAweDAwNGE7CiAgdC5KYWFybWVuaWFuID0gMHgwNTQxOwogIHQuSmNpcmNsZSA9IDB4MjRiZjsKICB0LkpjaXJjdW1mbGV4ID0gMHgwMTM0OwogIHQuSmVjeXJpbGxpYyA9IDB4MDQwODsKICB0LkpoZWhhcm1lbmlhbiA9IDB4MDU0YjsKICB0Lkptb25vc3BhY2UgPSAweGZmMmE7CiAgdC5Kc21hbGwgPSAweGY3NmE7CiAgdC5LID0gMHgwMDRiOwogIHQuS0JzcXVhcmUgPSAweDMzODU7CiAgdC5LS3NxdWFyZSA9IDB4MzNjZDsKICB0LkthYmFzaGtpcmN5cmlsbGljID0gMHgwNGEwOwogIHQuS2FjdXRlID0gMHgxZTMwOwogIHQuS2FjeXJpbGxpYyA9IDB4MDQxYTsKICB0LkthZGVzY2VuZGVyY3lyaWxsaWMgPSAweDA0OWE7CiAgdC5LYWhvb2tjeXJpbGxpYyA9IDB4MDRjMzsKICB0LkthcHBhID0gMHgwMzlhOwogIHQuS2FzdHJva2VjeXJpbGxpYyA9IDB4MDQ5ZTsKICB0LkthdmVydGljYWxzdHJva2VjeXJpbGxpYyA9IDB4MDQ5YzsKICB0LktjYXJvbiA9IDB4MDFlODsKICB0LktjZWRpbGxhID0gMHgwMTM2OwogIHQuS2NpcmNsZSA9IDB4MjRjMDsKICB0Lktjb21tYWFjY2VudCA9IDB4MDEzNjsKICB0Lktkb3RiZWxvdyA9IDB4MWUzMjsKICB0LktlaGFybWVuaWFuID0gMHgwNTU0OwogIHQuS2VuYXJtZW5pYW4gPSAweDA1M2Y7CiAgdC5LaGFjeXJpbGxpYyA9IDB4MDQyNTsKICB0LktoZWljb3B0aWMgPSAweDAzZTY7CiAgdC5LaG9vayA9IDB4MDE5ODsKICB0LktqZWN5cmlsbGljID0gMHgwNDBjOwogIHQuS2xpbmViZWxvdyA9IDB4MWUzNDsKICB0Lkttb25vc3BhY2UgPSAweGZmMmI7CiAgdC5Lb3BwYWN5cmlsbGljID0gMHgwNDgwOwogIHQuS29wcGFncmVlayA9IDB4MDNkZTsKICB0LktzaWN5cmlsbGljID0gMHgwNDZlOwogIHQuS3NtYWxsID0gMHhmNzZiOwogIHQuTCA9IDB4MDA0YzsKICB0LkxKID0gMHgwMWM3OwogIHQuTEwgPSAweGY2YmY7CiAgdC5MYWN1dGUgPSAweDAxMzk7CiAgdC5MYW1iZGEgPSAweDAzOWI7CiAgdC5MY2Fyb24gPSAweDAxM2Q7CiAgdC5MY2VkaWxsYSA9IDB4MDEzYjsKICB0LkxjaXJjbGUgPSAweDI0YzE7CiAgdC5MY2lyY3VtZmxleGJlbG93ID0gMHgxZTNjOwogIHQuTGNvbW1hYWNjZW50ID0gMHgwMTNiOwogIHQuTGRvdCA9IDB4MDEzZjsKICB0Lkxkb3RhY2NlbnQgPSAweDAxM2Y7CiAgdC5MZG90YmVsb3cgPSAweDFlMzY7CiAgdC5MZG90YmVsb3dtYWNyb24gPSAweDFlMzg7CiAgdC5MaXduYXJtZW5pYW4gPSAweDA1M2M7CiAgdC5MaiA9IDB4MDFjODsKICB0LkxqZWN5cmlsbGljID0gMHgwNDA5OwogIHQuTGxpbmViZWxvdyA9IDB4MWUzYTsKICB0Lkxtb25vc3BhY2UgPSAweGZmMmM7CiAgdC5Mc2xhc2ggPSAweDAxNDE7CiAgdC5Mc2xhc2hzbWFsbCA9IDB4ZjZmOTsKICB0LkxzbWFsbCA9IDB4Zjc2YzsKICB0Lk0gPSAweDAwNGQ7CiAgdC5NQnNxdWFyZSA9IDB4MzM4NjsKICB0Lk1hY3JvbiA9IDB4ZjZkMDsKICB0Lk1hY3JvbnNtYWxsID0gMHhmN2FmOwogIHQuTWFjdXRlID0gMHgxZTNlOwogIHQuTWNpcmNsZSA9IDB4MjRjMjsKICB0Lk1kb3RhY2NlbnQgPSAweDFlNDA7CiAgdC5NZG90YmVsb3cgPSAweDFlNDI7CiAgdC5NZW5hcm1lbmlhbiA9IDB4MDU0NDsKICB0Lk1tb25vc3BhY2UgPSAweGZmMmQ7CiAgdC5Nc21hbGwgPSAweGY3NmQ7CiAgdC5NdHVybmVkID0gMHgwMTljOwogIHQuTXUgPSAweDAzOWM7CiAgdC5OID0gMHgwMDRlOwogIHQuTkogPSAweDAxY2E7CiAgdC5OYWN1dGUgPSAweDAxNDM7CiAgdC5OY2Fyb24gPSAweDAxNDc7CiAgdC5OY2VkaWxsYSA9IDB4MDE0NTsKICB0Lk5jaXJjbGUgPSAweDI0YzM7CiAgdC5OY2lyY3VtZmxleGJlbG93ID0gMHgxZTRhOwogIHQuTmNvbW1hYWNjZW50ID0gMHgwMTQ1OwogIHQuTmRvdGFjY2VudCA9IDB4MWU0NDsKICB0Lk5kb3RiZWxvdyA9IDB4MWU0NjsKICB0Lk5ob29rbGVmdCA9IDB4MDE5ZDsKICB0Lk5pbmVyb21hbiA9IDB4MjE2ODsKICB0Lk5qID0gMHgwMWNiOwogIHQuTmplY3lyaWxsaWMgPSAweDA0MGE7CiAgdC5ObGluZWJlbG93ID0gMHgxZTQ4OwogIHQuTm1vbm9zcGFjZSA9IDB4ZmYyZTsKICB0Lk5vd2FybWVuaWFuID0gMHgwNTQ2OwogIHQuTnNtYWxsID0gMHhmNzZlOwogIHQuTnRpbGRlID0gMHgwMGQxOwogIHQuTnRpbGRlc21hbGwgPSAweGY3ZjE7CiAgdC5OdSA9IDB4MDM5ZDsKICB0Lk8gPSAweDAwNGY7CiAgdC5PRSA9IDB4MDE1MjsKICB0Lk9Fc21hbGwgPSAweGY2ZmE7CiAgdC5PYWN1dGUgPSAweDAwZDM7CiAgdC5PYWN1dGVzbWFsbCA9IDB4ZjdmMzsKICB0Lk9iYXJyZWRjeXJpbGxpYyA9IDB4MDRlODsKICB0Lk9iYXJyZWRkaWVyZXNpc2N5cmlsbGljID0gMHgwNGVhOwogIHQuT2JyZXZlID0gMHgwMTRlOwogIHQuT2Nhcm9uID0gMHgwMWQxOwogIHQuT2NlbnRlcmVkdGlsZGUgPSAweDAxOWY7CiAgdC5PY2lyY2xlID0gMHgyNGM0OwogIHQuT2NpcmN1bWZsZXggPSAweDAwZDQ7CiAgdC5PY2lyY3VtZmxleGFjdXRlID0gMHgxZWQwOwogIHQuT2NpcmN1bWZsZXhkb3RiZWxvdyA9IDB4MWVkODsKICB0Lk9jaXJjdW1mbGV4Z3JhdmUgPSAweDFlZDI7CiAgdC5PY2lyY3VtZmxleGhvb2thYm92ZSA9IDB4MWVkNDsKICB0Lk9jaXJjdW1mbGV4c21hbGwgPSAweGY3ZjQ7CiAgdC5PY2lyY3VtZmxleHRpbGRlID0gMHgxZWQ2OwogIHQuT2N5cmlsbGljID0gMHgwNDFlOwogIHQuT2RibGFjdXRlID0gMHgwMTUwOwogIHQuT2RibGdyYXZlID0gMHgwMjBjOwogIHQuT2RpZXJlc2lzID0gMHgwMGQ2OwogIHQuT2RpZXJlc2lzY3lyaWxsaWMgPSAweDA0ZTY7CiAgdC5PZGllcmVzaXNzbWFsbCA9IDB4ZjdmNjsKICB0Lk9kb3RiZWxvdyA9IDB4MWVjYzsKICB0Lk9nb25la3NtYWxsID0gMHhmNmZiOwogIHQuT2dyYXZlID0gMHgwMGQyOwogIHQuT2dyYXZlc21hbGwgPSAweGY3ZjI7CiAgdC5PaGFybWVuaWFuID0gMHgwNTU1OwogIHQuT2htID0gMHgyMTI2OwogIHQuT2hvb2thYm92ZSA9IDB4MWVjZTsKICB0Lk9ob3JuID0gMHgwMWEwOwogIHQuT2hvcm5hY3V0ZSA9IDB4MWVkYTsKICB0Lk9ob3JuZG90YmVsb3cgPSAweDFlZTI7CiAgdC5PaG9ybmdyYXZlID0gMHgxZWRjOwogIHQuT2hvcm5ob29rYWJvdmUgPSAweDFlZGU7CiAgdC5PaG9ybnRpbGRlID0gMHgxZWUwOwogIHQuT2h1bmdhcnVtbGF1dCA9IDB4MDE1MDsKICB0Lk9pID0gMHgwMWEyOwogIHQuT2ludmVydGVkYnJldmUgPSAweDAyMGU7CiAgdC5PbWFjcm9uID0gMHgwMTRjOwogIHQuT21hY3JvbmFjdXRlID0gMHgxZTUyOwogIHQuT21hY3JvbmdyYXZlID0gMHgxZTUwOwogIHQuT21lZ2EgPSAweDIxMjY7CiAgdC5PbWVnYWN5cmlsbGljID0gMHgwNDYwOwogIHQuT21lZ2FncmVlayA9IDB4MDNhOTsKICB0Lk9tZWdhcm91bmRjeXJpbGxpYyA9IDB4MDQ3YTsKICB0Lk9tZWdhdGl0bG9jeXJpbGxpYyA9IDB4MDQ3YzsKICB0Lk9tZWdhdG9ub3MgPSAweDAzOGY7CiAgdC5PbWljcm9uID0gMHgwMzlmOwogIHQuT21pY3JvbnRvbm9zID0gMHgwMzhjOwogIHQuT21vbm9zcGFjZSA9IDB4ZmYyZjsKICB0Lk9uZXJvbWFuID0gMHgyMTYwOwogIHQuT29nb25layA9IDB4MDFlYTsKICB0Lk9vZ29uZWttYWNyb24gPSAweDAxZWM7CiAgdC5Pb3BlbiA9IDB4MDE4NjsKICB0Lk9zbGFzaCA9IDB4MDBkODsKICB0Lk9zbGFzaGFjdXRlID0gMHgwMWZlOwogIHQuT3NsYXNoc21hbGwgPSAweGY3Zjg7CiAgdC5Pc21hbGwgPSAweGY3NmY7CiAgdC5Pc3Ryb2tlYWN1dGUgPSAweDAxZmU7CiAgdC5PdGN5cmlsbGljID0gMHgwNDdlOwogIHQuT3RpbGRlID0gMHgwMGQ1OwogIHQuT3RpbGRlYWN1dGUgPSAweDFlNGM7CiAgdC5PdGlsZGVkaWVyZXNpcyA9IDB4MWU0ZTsKICB0Lk90aWxkZXNtYWxsID0gMHhmN2Y1OwogIHQuUCA9IDB4MDA1MDsKICB0LlBhY3V0ZSA9IDB4MWU1NDsKICB0LlBjaXJjbGUgPSAweDI0YzU7CiAgdC5QZG90YWNjZW50ID0gMHgxZTU2OwogIHQuUGVjeXJpbGxpYyA9IDB4MDQxZjsKICB0LlBlaGFybWVuaWFuID0gMHgwNTRhOwogIHQuUGVtaWRkbGVob29rY3lyaWxsaWMgPSAweDA0YTY7CiAgdC5QaGkgPSAweDAzYTY7CiAgdC5QaG9vayA9IDB4MDFhNDsKICB0LlBpID0gMHgwM2EwOwogIHQuUGl3cmFybWVuaWFuID0gMHgwNTUzOwogIHQuUG1vbm9zcGFjZSA9IDB4ZmYzMDsKICB0LlBzaSA9IDB4MDNhODsKICB0LlBzaWN5cmlsbGljID0gMHgwNDcwOwogIHQuUHNtYWxsID0gMHhmNzcwOwogIHQuUSA9IDB4MDA1MTsKICB0LlFjaXJjbGUgPSAweDI0YzY7CiAgdC5RbW9ub3NwYWNlID0gMHhmZjMxOwogIHQuUXNtYWxsID0gMHhmNzcxOwogIHQuUiA9IDB4MDA1MjsKICB0LlJhYXJtZW5pYW4gPSAweDA1NGM7CiAgdC5SYWN1dGUgPSAweDAxNTQ7CiAgdC5SY2Fyb24gPSAweDAxNTg7CiAgdC5SY2VkaWxsYSA9IDB4MDE1NjsKICB0LlJjaXJjbGUgPSAweDI0Yzc7CiAgdC5SY29tbWFhY2NlbnQgPSAweDAxNTY7CiAgdC5SZGJsZ3JhdmUgPSAweDAyMTA7CiAgdC5SZG90YWNjZW50ID0gMHgxZTU4OwogIHQuUmRvdGJlbG93ID0gMHgxZTVhOwogIHQuUmRvdGJlbG93bWFjcm9uID0gMHgxZTVjOwogIHQuUmVoYXJtZW5pYW4gPSAweDA1NTA7CiAgdC5SZnJha3R1ciA9IDB4MjExYzsKICB0LlJobyA9IDB4MDNhMTsKICB0LlJpbmdzbWFsbCA9IDB4ZjZmYzsKICB0LlJpbnZlcnRlZGJyZXZlID0gMHgwMjEyOwogIHQuUmxpbmViZWxvdyA9IDB4MWU1ZTsKICB0LlJtb25vc3BhY2UgPSAweGZmMzI7CiAgdC5Sc21hbGwgPSAweGY3NzI7CiAgdC5Sc21hbGxpbnZlcnRlZCA9IDB4MDI4MTsKICB0LlJzbWFsbGludmVydGVkc3VwZXJpb3IgPSAweDAyYjY7CiAgdC5TID0gMHgwMDUzOwogIHQuU0YwMTAwMDAgPSAweDI1MGM7CiAgdC5TRjAyMDAwMCA9IDB4MjUxNDsKICB0LlNGMDMwMDAwID0gMHgyNTEwOwogIHQuU0YwNDAwMDAgPSAweDI1MTg7CiAgdC5TRjA1MDAwMCA9IDB4MjUzYzsKICB0LlNGMDYwMDAwID0gMHgyNTJjOwogIHQuU0YwNzAwMDAgPSAweDI1MzQ7CiAgdC5TRjA4MDAwMCA9IDB4MjUxYzsKICB0LlNGMDkwMDAwID0gMHgyNTI0OwogIHQuU0YxMDAwMDAgPSAweDI1MDA7CiAgdC5TRjExMDAwMCA9IDB4MjUwMjsKICB0LlNGMTkwMDAwID0gMHgyNTYxOwogIHQuU0YyMDAwMDAgPSAweDI1NjI7CiAgdC5TRjIxMDAwMCA9IDB4MjU1NjsKICB0LlNGMjIwMDAwID0gMHgyNTU1OwogIHQuU0YyMzAwMDAgPSAweDI1NjM7CiAgdC5TRjI0MDAwMCA9IDB4MjU1MTsKICB0LlNGMjUwMDAwID0gMHgyNTU3OwogIHQuU0YyNjAwMDAgPSAweDI1NWQ7CiAgdC5TRjI3MDAwMCA9IDB4MjU1YzsKICB0LlNGMjgwMDAwID0gMHgyNTViOwogIHQuU0YzNjAwMDAgPSAweDI1NWU7CiAgdC5TRjM3MDAwMCA9IDB4MjU1ZjsKICB0LlNGMzgwMDAwID0gMHgyNTVhOwogIHQuU0YzOTAwMDAgPSAweDI1NTQ7CiAgdC5TRjQwMDAwMCA9IDB4MjU2OTsKICB0LlNGNDEwMDAwID0gMHgyNTY2OwogIHQuU0Y0MjAwMDAgPSAweDI1NjA7CiAgdC5TRjQzMDAwMCA9IDB4MjU1MDsKICB0LlNGNDQwMDAwID0gMHgyNTZjOwogIHQuU0Y0NTAwMDAgPSAweDI1Njc7CiAgdC5TRjQ2MDAwMCA9IDB4MjU2ODsKICB0LlNGNDcwMDAwID0gMHgyNTY0OwogIHQuU0Y0ODAwMDAgPSAweDI1NjU7CiAgdC5TRjQ5MDAwMCA9IDB4MjU1OTsKICB0LlNGNTAwMDAwID0gMHgyNTU4OwogIHQuU0Y1MTAwMDAgPSAweDI1NTI7CiAgdC5TRjUyMDAwMCA9IDB4MjU1MzsKICB0LlNGNTMwMDAwID0gMHgyNTZiOwogIHQuU0Y1NDAwMDAgPSAweDI1NmE7CiAgdC5TYWN1dGUgPSAweDAxNWE7CiAgdC5TYWN1dGVkb3RhY2NlbnQgPSAweDFlNjQ7CiAgdC5TYW1waWdyZWVrID0gMHgwM2UwOwogIHQuU2Nhcm9uID0gMHgwMTYwOwogIHQuU2Nhcm9uZG90YWNjZW50ID0gMHgxZTY2OwogIHQuU2Nhcm9uc21hbGwgPSAweGY2ZmQ7CiAgdC5TY2VkaWxsYSA9IDB4MDE1ZTsKICB0LlNjaHdhID0gMHgwMThmOwogIHQuU2Nod2FjeXJpbGxpYyA9IDB4MDRkODsKICB0LlNjaHdhZGllcmVzaXNjeXJpbGxpYyA9IDB4MDRkYTsKICB0LlNjaXJjbGUgPSAweDI0Yzg7CiAgdC5TY2lyY3VtZmxleCA9IDB4MDE1YzsKICB0LlNjb21tYWFjY2VudCA9IDB4MDIxODsKICB0LlNkb3RhY2NlbnQgPSAweDFlNjA7CiAgdC5TZG90YmVsb3cgPSAweDFlNjI7CiAgdC5TZG90YmVsb3dkb3RhY2NlbnQgPSAweDFlNjg7CiAgdC5TZWhhcm1lbmlhbiA9IDB4MDU0ZDsKICB0LlNldmVucm9tYW4gPSAweDIxNjY7CiAgdC5TaGFhcm1lbmlhbiA9IDB4MDU0NzsKICB0LlNoYWN5cmlsbGljID0gMHgwNDI4OwogIHQuU2hjaGFjeXJpbGxpYyA9IDB4MDQyOTsKICB0LlNoZWljb3B0aWMgPSAweDAzZTI7CiAgdC5TaGhhY3lyaWxsaWMgPSAweDA0YmE7CiAgdC5TaGltYWNvcHRpYyA9IDB4MDNlYzsKICB0LlNpZ21hID0gMHgwM2EzOwogIHQuU2l4cm9tYW4gPSAweDIxNjU7CiAgdC5TbW9ub3NwYWNlID0gMHhmZjMzOwogIHQuU29mdHNpZ25jeXJpbGxpYyA9IDB4MDQyYzsKICB0LlNzbWFsbCA9IDB4Zjc3MzsKICB0LlN0aWdtYWdyZWVrID0gMHgwM2RhOwogIHQuVCA9IDB4MDA1NDsKICB0LlRhdSA9IDB4MDNhNDsKICB0LlRiYXIgPSAweDAxNjY7CiAgdC5UY2Fyb24gPSAweDAxNjQ7CiAgdC5UY2VkaWxsYSA9IDB4MDE2MjsKICB0LlRjaXJjbGUgPSAweDI0Yzk7CiAgdC5UY2lyY3VtZmxleGJlbG93ID0gMHgxZTcwOwogIHQuVGNvbW1hYWNjZW50ID0gMHgwMTYyOwogIHQuVGRvdGFjY2VudCA9IDB4MWU2YTsKICB0LlRkb3RiZWxvdyA9IDB4MWU2YzsKICB0LlRlY3lyaWxsaWMgPSAweDA0MjI7CiAgdC5UZWRlc2NlbmRlcmN5cmlsbGljID0gMHgwNGFjOwogIHQuVGVucm9tYW4gPSAweDIxNjk7CiAgdC5UZXRzZWN5cmlsbGljID0gMHgwNGI0OwogIHQuVGhldGEgPSAweDAzOTg7CiAgdC5UaG9vayA9IDB4MDFhYzsKICB0LlRob3JuID0gMHgwMGRlOwogIHQuVGhvcm5zbWFsbCA9IDB4ZjdmZTsKICB0LlRocmVlcm9tYW4gPSAweDIxNjI7CiAgdC5UaWxkZXNtYWxsID0gMHhmNmZlOwogIHQuVGl3bmFybWVuaWFuID0gMHgwNTRmOwogIHQuVGxpbmViZWxvdyA9IDB4MWU2ZTsKICB0LlRtb25vc3BhY2UgPSAweGZmMzQ7CiAgdC5Ub2FybWVuaWFuID0gMHgwNTM5OwogIHQuVG9uZWZpdmUgPSAweDAxYmM7CiAgdC5Ub25lc2l4ID0gMHgwMTg0OwogIHQuVG9uZXR3byA9IDB4MDFhNzsKICB0LlRyZXRyb2ZsZXhob29rID0gMHgwMWFlOwogIHQuVHNlY3lyaWxsaWMgPSAweDA0MjY7CiAgdC5Uc2hlY3lyaWxsaWMgPSAweDA0MGI7CiAgdC5Uc21hbGwgPSAweGY3NzQ7CiAgdC5Ud2VsdmVyb21hbiA9IDB4MjE2YjsKICB0LlR3b3JvbWFuID0gMHgyMTYxOwogIHQuVSA9IDB4MDA1NTsKICB0LlVhY3V0ZSA9IDB4MDBkYTsKICB0LlVhY3V0ZXNtYWxsID0gMHhmN2ZhOwogIHQuVWJyZXZlID0gMHgwMTZjOwogIHQuVWNhcm9uID0gMHgwMWQzOwogIHQuVWNpcmNsZSA9IDB4MjRjYTsKICB0LlVjaXJjdW1mbGV4ID0gMHgwMGRiOwogIHQuVWNpcmN1bWZsZXhiZWxvdyA9IDB4MWU3NjsKICB0LlVjaXJjdW1mbGV4c21hbGwgPSAweGY3ZmI7CiAgdC5VY3lyaWxsaWMgPSAweDA0MjM7CiAgdC5VZGJsYWN1dGUgPSAweDAxNzA7CiAgdC5VZGJsZ3JhdmUgPSAweDAyMTQ7CiAgdC5VZGllcmVzaXMgPSAweDAwZGM7CiAgdC5VZGllcmVzaXNhY3V0ZSA9IDB4MDFkNzsKICB0LlVkaWVyZXNpc2JlbG93ID0gMHgxZTcyOwogIHQuVWRpZXJlc2lzY2Fyb24gPSAweDAxZDk7CiAgdC5VZGllcmVzaXNjeXJpbGxpYyA9IDB4MDRmMDsKICB0LlVkaWVyZXNpc2dyYXZlID0gMHgwMWRiOwogIHQuVWRpZXJlc2lzbWFjcm9uID0gMHgwMWQ1OwogIHQuVWRpZXJlc2lzc21hbGwgPSAweGY3ZmM7CiAgdC5VZG90YmVsb3cgPSAweDFlZTQ7CiAgdC5VZ3JhdmUgPSAweDAwZDk7CiAgdC5VZ3JhdmVzbWFsbCA9IDB4ZjdmOTsKICB0LlVob29rYWJvdmUgPSAweDFlZTY7CiAgdC5VaG9ybiA9IDB4MDFhZjsKICB0LlVob3JuYWN1dGUgPSAweDFlZTg7CiAgdC5VaG9ybmRvdGJlbG93ID0gMHgxZWYwOwogIHQuVWhvcm5ncmF2ZSA9IDB4MWVlYTsKICB0LlVob3JuaG9va2Fib3ZlID0gMHgxZWVjOwogIHQuVWhvcm50aWxkZSA9IDB4MWVlZTsKICB0LlVodW5nYXJ1bWxhdXQgPSAweDAxNzA7CiAgdC5VaHVuZ2FydW1sYXV0Y3lyaWxsaWMgPSAweDA0ZjI7CiAgdC5VaW52ZXJ0ZWRicmV2ZSA9IDB4MDIxNjsKICB0LlVrY3lyaWxsaWMgPSAweDA0Nzg7CiAgdC5VbWFjcm9uID0gMHgwMTZhOwogIHQuVW1hY3JvbmN5cmlsbGljID0gMHgwNGVlOwogIHQuVW1hY3JvbmRpZXJlc2lzID0gMHgxZTdhOwogIHQuVW1vbm9zcGFjZSA9IDB4ZmYzNTsKICB0LlVvZ29uZWsgPSAweDAxNzI7CiAgdC5VcHNpbG9uID0gMHgwM2E1OwogIHQuVXBzaWxvbjEgPSAweDAzZDI7CiAgdC5VcHNpbG9uYWN1dGVob29rc3ltYm9sZ3JlZWsgPSAweDAzZDM7CiAgdC5VcHNpbG9uYWZyaWNhbiA9IDB4MDFiMTsKICB0LlVwc2lsb25kaWVyZXNpcyA9IDB4MDNhYjsKICB0LlVwc2lsb25kaWVyZXNpc2hvb2tzeW1ib2xncmVlayA9IDB4MDNkNDsKICB0LlVwc2lsb25ob29rc3ltYm9sID0gMHgwM2QyOwogIHQuVXBzaWxvbnRvbm9zID0gMHgwMzhlOwogIHQuVXJpbmcgPSAweDAxNmU7CiAgdC5Vc2hvcnRjeXJpbGxpYyA9IDB4MDQwZTsKICB0LlVzbWFsbCA9IDB4Zjc3NTsKICB0LlVzdHJhaWdodGN5cmlsbGljID0gMHgwNGFlOwogIHQuVXN0cmFpZ2h0c3Ryb2tlY3lyaWxsaWMgPSAweDA0YjA7CiAgdC5VdGlsZGUgPSAweDAxNjg7CiAgdC5VdGlsZGVhY3V0ZSA9IDB4MWU3ODsKICB0LlV0aWxkZWJlbG93ID0gMHgxZTc0OwogIHQuViA9IDB4MDA1NjsKICB0LlZjaXJjbGUgPSAweDI0Y2I7CiAgdC5WZG90YmVsb3cgPSAweDFlN2U7CiAgdC5WZWN5cmlsbGljID0gMHgwNDEyOwogIHQuVmV3YXJtZW5pYW4gPSAweDA1NGU7CiAgdC5WaG9vayA9IDB4MDFiMjsKICB0LlZtb25vc3BhY2UgPSAweGZmMzY7CiAgdC5Wb2FybWVuaWFuID0gMHgwNTQ4OwogIHQuVnNtYWxsID0gMHhmNzc2OwogIHQuVnRpbGRlID0gMHgxZTdjOwogIHQuVyA9IDB4MDA1NzsKICB0LldhY3V0ZSA9IDB4MWU4MjsKICB0LldjaXJjbGUgPSAweDI0Y2M7CiAgdC5XY2lyY3VtZmxleCA9IDB4MDE3NDsKICB0LldkaWVyZXNpcyA9IDB4MWU4NDsKICB0Lldkb3RhY2NlbnQgPSAweDFlODY7CiAgdC5XZG90YmVsb3cgPSAweDFlODg7CiAgdC5XZ3JhdmUgPSAweDFlODA7CiAgdC5XbW9ub3NwYWNlID0gMHhmZjM3OwogIHQuV3NtYWxsID0gMHhmNzc3OwogIHQuWCA9IDB4MDA1ODsKICB0LlhjaXJjbGUgPSAweDI0Y2Q7CiAgdC5YZGllcmVzaXMgPSAweDFlOGM7CiAgdC5YZG90YWNjZW50ID0gMHgxZThhOwogIHQuWGVoYXJtZW5pYW4gPSAweDA1M2Q7CiAgdC5YaSA9IDB4MDM5ZTsKICB0Llhtb25vc3BhY2UgPSAweGZmMzg7CiAgdC5Yc21hbGwgPSAweGY3Nzg7CiAgdC5ZID0gMHgwMDU5OwogIHQuWWFjdXRlID0gMHgwMGRkOwogIHQuWWFjdXRlc21hbGwgPSAweGY3ZmQ7CiAgdC5ZYXRjeXJpbGxpYyA9IDB4MDQ2MjsKICB0LlljaXJjbGUgPSAweDI0Y2U7CiAgdC5ZY2lyY3VtZmxleCA9IDB4MDE3NjsKICB0LllkaWVyZXNpcyA9IDB4MDE3ODsKICB0LllkaWVyZXNpc3NtYWxsID0gMHhmN2ZmOwogIHQuWWRvdGFjY2VudCA9IDB4MWU4ZTsKICB0Lllkb3RiZWxvdyA9IDB4MWVmNDsKICB0LlllcmljeXJpbGxpYyA9IDB4MDQyYjsKICB0LlllcnVkaWVyZXNpc2N5cmlsbGljID0gMHgwNGY4OwogIHQuWWdyYXZlID0gMHgxZWYyOwogIHQuWWhvb2sgPSAweDAxYjM7CiAgdC5ZaG9va2Fib3ZlID0gMHgxZWY2OwogIHQuWWlhcm1lbmlhbiA9IDB4MDU0NTsKICB0LllpY3lyaWxsaWMgPSAweDA0MDc7CiAgdC5ZaXduYXJtZW5pYW4gPSAweDA1NTI7CiAgdC5ZbW9ub3NwYWNlID0gMHhmZjM5OwogIHQuWXNtYWxsID0gMHhmNzc5OwogIHQuWXRpbGRlID0gMHgxZWY4OwogIHQuWXVzYmlnY3lyaWxsaWMgPSAweDA0NmE7CiAgdC5ZdXNiaWdpb3RpZmllZGN5cmlsbGljID0gMHgwNDZjOwogIHQuWXVzbGl0dGxlY3lyaWxsaWMgPSAweDA0NjY7CiAgdC5ZdXNsaXR0bGVpb3RpZmllZGN5cmlsbGljID0gMHgwNDY4OwogIHQuWiA9IDB4MDA1YTsKICB0LlphYXJtZW5pYW4gPSAweDA1MzY7CiAgdC5aYWN1dGUgPSAweDAxNzk7CiAgdC5aY2Fyb24gPSAweDAxN2Q7CiAgdC5aY2Fyb25zbWFsbCA9IDB4ZjZmZjsKICB0LlpjaXJjbGUgPSAweDI0Y2Y7CiAgdC5aY2lyY3VtZmxleCA9IDB4MWU5MDsKICB0Llpkb3QgPSAweDAxN2I7CiAgdC5aZG90YWNjZW50ID0gMHgwMTdiOwogIHQuWmRvdGJlbG93ID0gMHgxZTkyOwogIHQuWmVjeXJpbGxpYyA9IDB4MDQxNzsKICB0LlplZGVzY2VuZGVyY3lyaWxsaWMgPSAweDA0OTg7CiAgdC5aZWRpZXJlc2lzY3lyaWxsaWMgPSAweDA0ZGU7CiAgdC5aZXRhID0gMHgwMzk2OwogIHQuWmhlYXJtZW5pYW4gPSAweDA1M2E7CiAgdC5aaGVicmV2ZWN5cmlsbGljID0gMHgwNGMxOwogIHQuWmhlY3lyaWxsaWMgPSAweDA0MTY7CiAgdC5aaGVkZXNjZW5kZXJjeXJpbGxpYyA9IDB4MDQ5NjsKICB0LlpoZWRpZXJlc2lzY3lyaWxsaWMgPSAweDA0ZGM7CiAgdC5abGluZWJlbG93ID0gMHgxZTk0OwogIHQuWm1vbm9zcGFjZSA9IDB4ZmYzYTsKICB0LlpzbWFsbCA9IDB4Zjc3YTsKICB0LlpzdHJva2UgPSAweDAxYjU7CiAgdC5hID0gMHgwMDYxOwogIHQuYWFiZW5nYWxpID0gMHgwOTg2OwogIHQuYWFjdXRlID0gMHgwMGUxOwogIHQuYWFkZXZhID0gMHgwOTA2OwogIHQuYWFndWphcmF0aSA9IDB4MGE4NjsKICB0LmFhZ3VybXVraGkgPSAweDBhMDY7CiAgdC5hYW1hdHJhZ3VybXVraGkgPSAweDBhM2U7CiAgdC5hYXJ1c3F1YXJlID0gMHgzMzAzOwogIHQuYWF2b3dlbHNpZ25iZW5nYWxpID0gMHgwOWJlOwogIHQuYWF2b3dlbHNpZ25kZXZhID0gMHgwOTNlOwogIHQuYWF2b3dlbHNpZ25ndWphcmF0aSA9IDB4MGFiZTsKICB0LmFiYnJldmlhdGlvbm1hcmthcm1lbmlhbiA9IDB4MDU1ZjsKICB0LmFiYnJldmlhdGlvbnNpZ25kZXZhID0gMHgwOTcwOwogIHQuYWJlbmdhbGkgPSAweDA5ODU7CiAgdC5hYm9wb21vZm8gPSAweDMxMWE7CiAgdC5hYnJldmUgPSAweDAxMDM7CiAgdC5hYnJldmVhY3V0ZSA9IDB4MWVhZjsKICB0LmFicmV2ZWN5cmlsbGljID0gMHgwNGQxOwogIHQuYWJyZXZlZG90YmVsb3cgPSAweDFlYjc7CiAgdC5hYnJldmVncmF2ZSA9IDB4MWViMTsKICB0LmFicmV2ZWhvb2thYm92ZSA9IDB4MWViMzsKICB0LmFicmV2ZXRpbGRlID0gMHgxZWI1OwogIHQuYWNhcm9uID0gMHgwMWNlOwogIHQuYWNpcmNsZSA9IDB4MjRkMDsKICB0LmFjaXJjdW1mbGV4ID0gMHgwMGUyOwogIHQuYWNpcmN1bWZsZXhhY3V0ZSA9IDB4MWVhNTsKICB0LmFjaXJjdW1mbGV4ZG90YmVsb3cgPSAweDFlYWQ7CiAgdC5hY2lyY3VtZmxleGdyYXZlID0gMHgxZWE3OwogIHQuYWNpcmN1bWZsZXhob29rYWJvdmUgPSAweDFlYTk7CiAgdC5hY2lyY3VtZmxleHRpbGRlID0gMHgxZWFiOwogIHQuYWN1dGUgPSAweDAwYjQ7CiAgdC5hY3V0ZWJlbG93Y21iID0gMHgwMzE3OwogIHQuYWN1dGVjbWIgPSAweDAzMDE7CiAgdC5hY3V0ZWNvbWIgPSAweDAzMDE7CiAgdC5hY3V0ZWRldmEgPSAweDA5NTQ7CiAgdC5hY3V0ZWxvd21vZCA9IDB4MDJjZjsKICB0LmFjdXRldG9uZWNtYiA9IDB4MDM0MTsKICB0LmFjeXJpbGxpYyA9IDB4MDQzMDsKICB0LmFkYmxncmF2ZSA9IDB4MDIwMTsKICB0LmFkZGFrZ3VybXVraGkgPSAweDBhNzE7CiAgdC5hZGV2YSA9IDB4MDkwNTsKICB0LmFkaWVyZXNpcyA9IDB4MDBlNDsKICB0LmFkaWVyZXNpc2N5cmlsbGljID0gMHgwNGQzOwogIHQuYWRpZXJlc2lzbWFjcm9uID0gMHgwMWRmOwogIHQuYWRvdGJlbG93ID0gMHgxZWExOwogIHQuYWRvdG1hY3JvbiA9IDB4MDFlMTsKICB0LmFlID0gMHgwMGU2OwogIHQuYWVhY3V0ZSA9IDB4MDFmZDsKICB0LmFla29yZWFuID0gMHgzMTUwOwogIHQuYWVtYWNyb24gPSAweDAxZTM7CiAgdC5hZmlpMDAyMDggPSAweDIwMTU7CiAgdC5hZmlpMDg5NDEgPSAweDIwYTQ7CiAgdC5hZmlpMTAwMTcgPSAweDA0MTA7CiAgdC5hZmlpMTAwMTggPSAweDA0MTE7CiAgdC5hZmlpMTAwMTkgPSAweDA0MTI7CiAgdC5hZmlpMTAwMjAgPSAweDA0MTM7CiAgdC5hZmlpMTAwMjEgPSAweDA0MTQ7CiAgdC5hZmlpMTAwMjIgPSAweDA0MTU7CiAgdC5hZmlpMTAwMjMgPSAweDA0MDE7CiAgdC5hZmlpMTAwMjQgPSAweDA0MTY7CiAgdC5hZmlpMTAwMjUgPSAweDA0MTc7CiAgdC5hZmlpMTAwMjYgPSAweDA0MTg7CiAgdC5hZmlpMTAwMjcgPSAweDA0MTk7CiAgdC5hZmlpMTAwMjggPSAweDA0MWE7CiAgdC5hZmlpMTAwMjkgPSAweDA0MWI7CiAgdC5hZmlpMTAwMzAgPSAweDA0MWM7CiAgdC5hZmlpMTAwMzEgPSAweDA0MWQ7CiAgdC5hZmlpMTAwMzIgPSAweDA0MWU7CiAgdC5hZmlpMTAwMzMgPSAweDA0MWY7CiAgdC5hZmlpMTAwMzQgPSAweDA0MjA7CiAgdC5hZmlpMTAwMzUgPSAweDA0MjE7CiAgdC5hZmlpMTAwMzYgPSAweDA0MjI7CiAgdC5hZmlpMTAwMzcgPSAweDA0MjM7CiAgdC5hZmlpMTAwMzggPSAweDA0MjQ7CiAgdC5hZmlpMTAwMzkgPSAweDA0MjU7CiAgdC5hZmlpMTAwNDAgPSAweDA0MjY7CiAgdC5hZmlpMTAwNDEgPSAweDA0Mjc7CiAgdC5hZmlpMTAwNDIgPSAweDA0Mjg7CiAgdC5hZmlpMTAwNDMgPSAweDA0Mjk7CiAgdC5hZmlpMTAwNDQgPSAweDA0MmE7CiAgdC5hZmlpMTAwNDUgPSAweDA0MmI7CiAgdC5hZmlpMTAwNDYgPSAweDA0MmM7CiAgdC5hZmlpMTAwNDcgPSAweDA0MmQ7CiAgdC5hZmlpMTAwNDggPSAweDA0MmU7CiAgdC5hZmlpMTAwNDkgPSAweDA0MmY7CiAgdC5hZmlpMTAwNTAgPSAweDA0OTA7CiAgdC5hZmlpMTAwNTEgPSAweDA0MDI7CiAgdC5hZmlpMTAwNTIgPSAweDA0MDM7CiAgdC5hZmlpMTAwNTMgPSAweDA0MDQ7CiAgdC5hZmlpMTAwNTQgPSAweDA0MDU7CiAgdC5hZmlpMTAwNTUgPSAweDA0MDY7CiAgdC5hZmlpMTAwNTYgPSAweDA0MDc7CiAgdC5hZmlpMTAwNTcgPSAweDA0MDg7CiAgdC5hZmlpMTAwNTggPSAweDA0MDk7CiAgdC5hZmlpMTAwNTkgPSAweDA0MGE7CiAgdC5hZmlpMTAwNjAgPSAweDA0MGI7CiAgdC5hZmlpMTAwNjEgPSAweDA0MGM7CiAgdC5hZmlpMTAwNjIgPSAweDA0MGU7CiAgdC5hZmlpMTAwNjMgPSAweGY2YzQ7CiAgdC5hZmlpMTAwNjQgPSAweGY2YzU7CiAgdC5hZmlpMTAwNjUgPSAweDA0MzA7CiAgdC5hZmlpMTAwNjYgPSAweDA0MzE7CiAgdC5hZmlpMTAwNjcgPSAweDA0MzI7CiAgdC5hZmlpMTAwNjggPSAweDA0MzM7CiAgdC5hZmlpMTAwNjkgPSAweDA0MzQ7CiAgdC5hZmlpMTAwNzAgPSAweDA0MzU7CiAgdC5hZmlpMTAwNzEgPSAweDA0NTE7CiAgdC5hZmlpMTAwNzIgPSAweDA0MzY7CiAgdC5hZmlpMTAwNzMgPSAweDA0Mzc7CiAgdC5hZmlpMTAwNzQgPSAweDA0Mzg7CiAgdC5hZmlpMTAwNzUgPSAweDA0Mzk7CiAgdC5hZmlpMTAwNzYgPSAweDA0M2E7CiAgdC5hZmlpMTAwNzcgPSAweDA0M2I7CiAgdC5hZmlpMTAwNzggPSAweDA0M2M7CiAgdC5hZmlpMTAwNzkgPSAweDA0M2Q7CiAgdC5hZmlpMTAwODAgPSAweDA0M2U7CiAgdC5hZmlpMTAwODEgPSAweDA0M2Y7CiAgdC5hZmlpMTAwODIgPSAweDA0NDA7CiAgdC5hZmlpMTAwODMgPSAweDA0NDE7CiAgdC5hZmlpMTAwODQgPSAweDA0NDI7CiAgdC5hZmlpMTAwODUgPSAweDA0NDM7CiAgdC5hZmlpMTAwODYgPSAweDA0NDQ7CiAgdC5hZmlpMTAwODcgPSAweDA0NDU7CiAgdC5hZmlpMTAwODggPSAweDA0NDY7CiAgdC5hZmlpMTAwODkgPSAweDA0NDc7CiAgdC5hZmlpMTAwOTAgPSAweDA0NDg7CiAgdC5hZmlpMTAwOTEgPSAweDA0NDk7CiAgdC5hZmlpMTAwOTIgPSAweDA0NGE7CiAgdC5hZmlpMTAwOTMgPSAweDA0NGI7CiAgdC5hZmlpMTAwOTQgPSAweDA0NGM7CiAgdC5hZmlpMTAwOTUgPSAweDA0NGQ7CiAgdC5hZmlpMTAwOTYgPSAweDA0NGU7CiAgdC5hZmlpMTAwOTcgPSAweDA0NGY7CiAgdC5hZmlpMTAwOTggPSAweDA0OTE7CiAgdC5hZmlpMTAwOTkgPSAweDA0NTI7CiAgdC5hZmlpMTAxMDAgPSAweDA0NTM7CiAgdC5hZmlpMTAxMDEgPSAweDA0NTQ7CiAgdC5hZmlpMTAxMDIgPSAweDA0NTU7CiAgdC5hZmlpMTAxMDMgPSAweDA0NTY7CiAgdC5hZmlpMTAxMDQgPSAweDA0NTc7CiAgdC5hZmlpMTAxMDUgPSAweDA0NTg7CiAgdC5hZmlpMTAxMDYgPSAweDA0NTk7CiAgdC5hZmlpMTAxMDcgPSAweDA0NWE7CiAgdC5hZmlpMTAxMDggPSAweDA0NWI7CiAgdC5hZmlpMTAxMDkgPSAweDA0NWM7CiAgdC5hZmlpMTAxMTAgPSAweDA0NWU7CiAgdC5hZmlpMTAxNDUgPSAweDA0MGY7CiAgdC5hZmlpMTAxNDYgPSAweDA0NjI7CiAgdC5hZmlpMTAxNDcgPSAweDA0NzI7CiAgdC5hZmlpMTAxNDggPSAweDA0NzQ7CiAgdC5hZmlpMTAxOTIgPSAweGY2YzY7CiAgdC5hZmlpMTAxOTMgPSAweDA0NWY7CiAgdC5hZmlpMTAxOTQgPSAweDA0NjM7CiAgdC5hZmlpMTAxOTUgPSAweDA0NzM7CiAgdC5hZmlpMTAxOTYgPSAweDA0NzU7CiAgdC5hZmlpMTA4MzEgPSAweGY2Yzc7CiAgdC5hZmlpMTA4MzIgPSAweGY2Yzg7CiAgdC5hZmlpMTA4NDYgPSAweDA0ZDk7CiAgdC5hZmlpMjk5ID0gMHgyMDBlOwogIHQuYWZpaTMwMCA9IDB4MjAwZjsKICB0LmFmaWkzMDEgPSAweDIwMGQ7CiAgdC5hZmlpNTczODEgPSAweDA2NmE7CiAgdC5hZmlpNTczODggPSAweDA2MGM7CiAgdC5hZmlpNTczOTIgPSAweDA2NjA7CiAgdC5hZmlpNTczOTMgPSAweDA2NjE7CiAgdC5hZmlpNTczOTQgPSAweDA2NjI7CiAgdC5hZmlpNTczOTUgPSAweDA2NjM7CiAgdC5hZmlpNTczOTYgPSAweDA2NjQ7CiAgdC5hZmlpNTczOTcgPSAweDA2NjU7CiAgdC5hZmlpNTczOTggPSAweDA2NjY7CiAgdC5hZmlpNTczOTkgPSAweDA2Njc7CiAgdC5hZmlpNTc0MDAgPSAweDA2Njg7CiAgdC5hZmlpNTc0MDEgPSAweDA2Njk7CiAgdC5hZmlpNTc0MDMgPSAweDA2MWI7CiAgdC5hZmlpNTc0MDcgPSAweDA2MWY7CiAgdC5hZmlpNTc0MDkgPSAweDA2MjE7CiAgdC5hZmlpNTc0MTAgPSAweDA2MjI7CiAgdC5hZmlpNTc0MTEgPSAweDA2MjM7CiAgdC5hZmlpNTc0MTIgPSAweDA2MjQ7CiAgdC5hZmlpNTc0MTMgPSAweDA2MjU7CiAgdC5hZmlpNTc0MTQgPSAweDA2MjY7CiAgdC5hZmlpNTc0MTUgPSAweDA2Mjc7CiAgdC5hZmlpNTc0MTYgPSAweDA2Mjg7CiAgdC5hZmlpNTc0MTcgPSAweDA2Mjk7CiAgdC5hZmlpNTc0MTggPSAweDA2MmE7CiAgdC5hZmlpNTc0MTkgPSAweDA2MmI7CiAgdC5hZmlpNTc0MjAgPSAweDA2MmM7CiAgdC5hZmlpNTc0MjEgPSAweDA2MmQ7CiAgdC5hZmlpNTc0MjIgPSAweDA2MmU7CiAgdC5hZmlpNTc0MjMgPSAweDA2MmY7CiAgdC5hZmlpNTc0MjQgPSAweDA2MzA7CiAgdC5hZmlpNTc0MjUgPSAweDA2MzE7CiAgdC5hZmlpNTc0MjYgPSAweDA2MzI7CiAgdC5hZmlpNTc0MjcgPSAweDA2MzM7CiAgdC5hZmlpNTc0MjggPSAweDA2MzQ7CiAgdC5hZmlpNTc0MjkgPSAweDA2MzU7CiAgdC5hZmlpNTc0MzAgPSAweDA2MzY7CiAgdC5hZmlpNTc0MzEgPSAweDA2Mzc7CiAgdC5hZmlpNTc0MzIgPSAweDA2Mzg7CiAgdC5hZmlpNTc0MzMgPSAweDA2Mzk7CiAgdC5hZmlpNTc0MzQgPSAweDA2M2E7CiAgdC5hZmlpNTc0NDAgPSAweDA2NDA7CiAgdC5hZmlpNTc0NDEgPSAweDA2NDE7CiAgdC5hZmlpNTc0NDIgPSAweDA2NDI7CiAgdC5hZmlpNTc0NDMgPSAweDA2NDM7CiAgdC5hZmlpNTc0NDQgPSAweDA2NDQ7CiAgdC5hZmlpNTc0NDUgPSAweDA2NDU7CiAgdC5hZmlpNTc0NDYgPSAweDA2NDY7CiAgdC5hZmlpNTc0NDggPSAweDA2NDg7CiAgdC5hZmlpNTc0NDkgPSAweDA2NDk7CiAgdC5hZmlpNTc0NTAgPSAweDA2NGE7CiAgdC5hZmlpNTc0NTEgPSAweDA2NGI7CiAgdC5hZmlpNTc0NTIgPSAweDA2NGM7CiAgdC5hZmlpNTc0NTMgPSAweDA2NGQ7CiAgdC5hZmlpNTc0NTQgPSAweDA2NGU7CiAgdC5hZmlpNTc0NTUgPSAweDA2NGY7CiAgdC5hZmlpNTc0NTYgPSAweDA2NTA7CiAgdC5hZmlpNTc0NTcgPSAweDA2NTE7CiAgdC5hZmlpNTc0NTggPSAweDA2NTI7CiAgdC5hZmlpNTc0NzAgPSAweDA2NDc7CiAgdC5hZmlpNTc1MDUgPSAweDA2YTQ7CiAgdC5hZmlpNTc1MDYgPSAweDA2N2U7CiAgdC5hZmlpNTc1MDcgPSAweDA2ODY7CiAgdC5hZmlpNTc1MDggPSAweDA2OTg7CiAgdC5hZmlpNTc1MDkgPSAweDA2YWY7CiAgdC5hZmlpNTc1MTEgPSAweDA2Nzk7CiAgdC5hZmlpNTc1MTIgPSAweDA2ODg7CiAgdC5hZmlpNTc1MTMgPSAweDA2OTE7CiAgdC5hZmlpNTc1MTQgPSAweDA2YmE7CiAgdC5hZmlpNTc1MTkgPSAweDA2ZDI7CiAgdC5hZmlpNTc1MzQgPSAweDA2ZDU7CiAgdC5hZmlpNTc2MzYgPSAweDIwYWE7CiAgdC5hZmlpNTc2NDUgPSAweDA1YmU7CiAgdC5hZmlpNTc2NTggPSAweDA1YzM7CiAgdC5hZmlpNTc2NjQgPSAweDA1ZDA7CiAgdC5hZmlpNTc2NjUgPSAweDA1ZDE7CiAgdC5hZmlpNTc2NjYgPSAweDA1ZDI7CiAgdC5hZmlpNTc2NjcgPSAweDA1ZDM7CiAgdC5hZmlpNTc2NjggPSAweDA1ZDQ7CiAgdC5hZmlpNTc2NjkgPSAweDA1ZDU7CiAgdC5hZmlpNTc2NzAgPSAweDA1ZDY7CiAgdC5hZmlpNTc2NzEgPSAweDA1ZDc7CiAgdC5hZmlpNTc2NzIgPSAweDA1ZDg7CiAgdC5hZmlpNTc2NzMgPSAweDA1ZDk7CiAgdC5hZmlpNTc2NzQgPSAweDA1ZGE7CiAgdC5hZmlpNTc2NzUgPSAweDA1ZGI7CiAgdC5hZmlpNTc2NzYgPSAweDA1ZGM7CiAgdC5hZmlpNTc2NzcgPSAweDA1ZGQ7CiAgdC5hZmlpNTc2NzggPSAweDA1ZGU7CiAgdC5hZmlpNTc2NzkgPSAweDA1ZGY7CiAgdC5hZmlpNTc2ODAgPSAweDA1ZTA7CiAgdC5hZmlpNTc2ODEgPSAweDA1ZTE7CiAgdC5hZmlpNTc2ODIgPSAweDA1ZTI7CiAgdC5hZmlpNTc2ODMgPSAweDA1ZTM7CiAgdC5hZmlpNTc2ODQgPSAweDA1ZTQ7CiAgdC5hZmlpNTc2ODUgPSAweDA1ZTU7CiAgdC5hZmlpNTc2ODYgPSAweDA1ZTY7CiAgdC5hZmlpNTc2ODcgPSAweDA1ZTc7CiAgdC5hZmlpNTc2ODggPSAweDA1ZTg7CiAgdC5hZmlpNTc2ODkgPSAweDA1ZTk7CiAgdC5hZmlpNTc2OTAgPSAweDA1ZWE7CiAgdC5hZmlpNTc2OTQgPSAweGZiMmE7CiAgdC5hZmlpNTc2OTUgPSAweGZiMmI7CiAgdC5hZmlpNTc3MDAgPSAweGZiNGI7CiAgdC5hZmlpNTc3MDUgPSAweGZiMWY7CiAgdC5hZmlpNTc3MTYgPSAweDA1ZjA7CiAgdC5hZmlpNTc3MTcgPSAweDA1ZjE7CiAgdC5hZmlpNTc3MTggPSAweDA1ZjI7CiAgdC5hZmlpNTc3MjMgPSAweGZiMzU7CiAgdC5hZmlpNTc3OTMgPSAweDA1YjQ7CiAgdC5hZmlpNTc3OTQgPSAweDA1YjU7CiAgdC5hZmlpNTc3OTUgPSAweDA1YjY7CiAgdC5hZmlpNTc3OTYgPSAweDA1YmI7CiAgdC5hZmlpNTc3OTcgPSAweDA1Yjg7CiAgdC5hZmlpNTc3OTggPSAweDA1Yjc7CiAgdC5hZmlpNTc3OTkgPSAweDA1YjA7CiAgdC5hZmlpNTc4MDAgPSAweDA1YjI7CiAgdC5hZmlpNTc4MDEgPSAweDA1YjE7CiAgdC5hZmlpNTc4MDIgPSAweDA1YjM7CiAgdC5hZmlpNTc4MDMgPSAweDA1YzI7CiAgdC5hZmlpNTc4MDQgPSAweDA1YzE7CiAgdC5hZmlpNTc4MDYgPSAweDA1Yjk7CiAgdC5hZmlpNTc4MDcgPSAweDA1YmM7CiAgdC5hZmlpNTc4MzkgPSAweDA1YmQ7CiAgdC5hZmlpNTc4NDEgPSAweDA1YmY7CiAgdC5hZmlpNTc4NDIgPSAweDA1YzA7CiAgdC5hZmlpNTc5MjkgPSAweDAyYmM7CiAgdC5hZmlpNjEyNDggPSAweDIxMDU7CiAgdC5hZmlpNjEyODkgPSAweDIxMTM7CiAgdC5hZmlpNjEzNTIgPSAweDIxMTY7CiAgdC5hZmlpNjE1NzMgPSAweDIwMmM7CiAgdC5hZmlpNjE1NzQgPSAweDIwMmQ7CiAgdC5hZmlpNjE1NzUgPSAweDIwMmU7CiAgdC5hZmlpNjE2NjQgPSAweDIwMGM7CiAgdC5hZmlpNjMxNjcgPSAweDA2NmQ7CiAgdC5hZmlpNjQ5MzcgPSAweDAyYmQ7CiAgdC5hZ3JhdmUgPSAweDAwZTA7CiAgdC5hZ3VqYXJhdGkgPSAweDBhODU7CiAgdC5hZ3VybXVraGkgPSAweDBhMDU7CiAgdC5haGlyYWdhbmEgPSAweDMwNDI7CiAgdC5haG9va2Fib3ZlID0gMHgxZWEzOwogIHQuYWliZW5nYWxpID0gMHgwOTkwOwogIHQuYWlib3BvbW9mbyA9IDB4MzExZTsKICB0LmFpZGV2YSA9IDB4MDkxMDsKICB0LmFpZWN5cmlsbGljID0gMHgwNGQ1OwogIHQuYWlndWphcmF0aSA9IDB4MGE5MDsKICB0LmFpZ3VybXVraGkgPSAweDBhMTA7CiAgdC5haW1hdHJhZ3VybXVraGkgPSAweDBhNDg7CiAgdC5haW5hcmFiaWMgPSAweDA2Mzk7CiAgdC5haW5maW5hbGFyYWJpYyA9IDB4ZmVjYTsKICB0LmFpbmluaXRpYWxhcmFiaWMgPSAweGZlY2I7CiAgdC5haW5tZWRpYWxhcmFiaWMgPSAweGZlY2M7CiAgdC5haW52ZXJ0ZWRicmV2ZSA9IDB4MDIwMzsKICB0LmFpdm93ZWxzaWduYmVuZ2FsaSA9IDB4MDljODsKICB0LmFpdm93ZWxzaWduZGV2YSA9IDB4MDk0ODsKICB0LmFpdm93ZWxzaWduZ3VqYXJhdGkgPSAweDBhYzg7CiAgdC5ha2F0YWthbmEgPSAweDMwYTI7CiAgdC5ha2F0YWthbmFoYWxmd2lkdGggPSAweGZmNzE7CiAgdC5ha29yZWFuID0gMHgzMTRmOwogIHQuYWxlZiA9IDB4MDVkMDsKICB0LmFsZWZhcmFiaWMgPSAweDA2Mjc7CiAgdC5hbGVmZGFnZXNoaGVicmV3ID0gMHhmYjMwOwogIHQuYWxlZmZpbmFsYXJhYmljID0gMHhmZThlOwogIHQuYWxlZmhhbXphYWJvdmVhcmFiaWMgPSAweDA2MjM7CiAgdC5hbGVmaGFtemFhYm92ZWZpbmFsYXJhYmljID0gMHhmZTg0OwogIHQuYWxlZmhhbXphYmVsb3dhcmFiaWMgPSAweDA2MjU7CiAgdC5hbGVmaGFtemFiZWxvd2ZpbmFsYXJhYmljID0gMHhmZTg4OwogIHQuYWxlZmhlYnJldyA9IDB4MDVkMDsKICB0LmFsZWZsYW1lZGhlYnJldyA9IDB4ZmI0ZjsKICB0LmFsZWZtYWRkYWFib3ZlYXJhYmljID0gMHgwNjIyOwogIHQuYWxlZm1hZGRhYWJvdmVmaW5hbGFyYWJpYyA9IDB4ZmU4MjsKICB0LmFsZWZtYWtzdXJhYXJhYmljID0gMHgwNjQ5OwogIHQuYWxlZm1ha3N1cmFmaW5hbGFyYWJpYyA9IDB4ZmVmMDsKICB0LmFsZWZtYWtzdXJhaW5pdGlhbGFyYWJpYyA9IDB4ZmVmMzsKICB0LmFsZWZtYWtzdXJhbWVkaWFsYXJhYmljID0gMHhmZWY0OwogIHQuYWxlZnBhdGFoaGVicmV3ID0gMHhmYjJlOwogIHQuYWxlZnFhbWF0c2hlYnJldyA9IDB4ZmIyZjsKICB0LmFsZXBoID0gMHgyMTM1OwogIHQuYWxsZXF1YWwgPSAweDIyNGM7CiAgdC5hbHBoYSA9IDB4MDNiMTsKICB0LmFscGhhdG9ub3MgPSAweDAzYWM7CiAgdC5hbWFjcm9uID0gMHgwMTAxOwogIHQuYW1vbm9zcGFjZSA9IDB4ZmY0MTsKICB0LmFtcGVyc2FuZCA9IDB4MDAyNjsKICB0LmFtcGVyc2FuZG1vbm9zcGFjZSA9IDB4ZmYwNjsKICB0LmFtcGVyc2FuZHNtYWxsID0gMHhmNzI2OwogIHQuYW1zcXVhcmUgPSAweDMzYzI7CiAgdC5hbmJvcG9tb2ZvID0gMHgzMTIyOwogIHQuYW5nYm9wb21vZm8gPSAweDMxMjQ7CiAgdC5hbmdicmFja2V0bGVmdCA9IDB4MzAwODsKICB0LmFuZ2JyYWNrZXRyaWdodCA9IDB4MzAwOTsKICB0LmFuZ2toYW5raHV0aGFpID0gMHgwZTVhOwogIHQuYW5nbGUgPSAweDIyMjA7CiAgdC5hbmdsZWJyYWNrZXRsZWZ0ID0gMHgzMDA4OwogIHQuYW5nbGVicmFja2V0bGVmdHZlcnRpY2FsID0gMHhmZTNmOwogIHQuYW5nbGVicmFja2V0cmlnaHQgPSAweDMwMDk7CiAgdC5hbmdsZWJyYWNrZXRyaWdodHZlcnRpY2FsID0gMHhmZTQwOwogIHQuYW5nbGVsZWZ0ID0gMHgyMzI5OwogIHQuYW5nbGVyaWdodCA9IDB4MjMyYTsKICB0LmFuZ3N0cm9tID0gMHgyMTJiOwogIHQuYW5vdGVsZWlhID0gMHgwMzg3OwogIHQuYW51ZGF0dGFkZXZhID0gMHgwOTUyOwogIHQuYW51c3ZhcmFiZW5nYWxpID0gMHgwOTgyOwogIHQuYW51c3ZhcmFkZXZhID0gMHgwOTAyOwogIHQuYW51c3ZhcmFndWphcmF0aSA9IDB4MGE4MjsKICB0LmFvZ29uZWsgPSAweDAxMDU7CiAgdC5hcGFhdG9zcXVhcmUgPSAweDMzMDA7CiAgdC5hcGFyZW4gPSAweDI0OWM7CiAgdC5hcG9zdHJvcGhlYXJtZW5pYW4gPSAweDA1NWE7CiAgdC5hcG9zdHJvcGhlbW9kID0gMHgwMmJjOwogIHQuYXBwbGUgPSAweGY4ZmY7CiAgdC5hcHByb2FjaGVzID0gMHgyMjUwOwogIHQuYXBwcm94ZXF1YWwgPSAweDIyNDg7CiAgdC5hcHByb3hlcXVhbG9yaW1hZ2UgPSAweDIyNTI7CiAgdC5hcHByb3hpbWF0ZWx5ZXF1YWwgPSAweDIyNDU7CiAgdC5hcmFlYWVrb3JlYW4gPSAweDMxOGU7CiAgdC5hcmFlYWtvcmVhbiA9IDB4MzE4ZDsKICB0LmFyYyA9IDB4MjMxMjsKICB0LmFyaWdodGhhbGZyaW5nID0gMHgxZTlhOwogIHQuYXJpbmcgPSAweDAwZTU7CiAgdC5hcmluZ2FjdXRlID0gMHgwMWZiOwogIHQuYXJpbmdiZWxvdyA9IDB4MWUwMTsKICB0LmFycm93Ym90aCA9IDB4MjE5NDsKICB0LmFycm93ZGFzaGRvd24gPSAweDIxZTM7CiAgdC5hcnJvd2Rhc2hsZWZ0ID0gMHgyMWUwOwogIHQuYXJyb3dkYXNocmlnaHQgPSAweDIxZTI7CiAgdC5hcnJvd2Rhc2h1cCA9IDB4MjFlMTsKICB0LmFycm93ZGJsYm90aCA9IDB4MjFkNDsKICB0LmFycm93ZGJsZG93biA9IDB4MjFkMzsKICB0LmFycm93ZGJsbGVmdCA9IDB4MjFkMDsKICB0LmFycm93ZGJscmlnaHQgPSAweDIxZDI7CiAgdC5hcnJvd2RibHVwID0gMHgyMWQxOwogIHQuYXJyb3dkb3duID0gMHgyMTkzOwogIHQuYXJyb3dkb3dubGVmdCA9IDB4MjE5OTsKICB0LmFycm93ZG93bnJpZ2h0ID0gMHgyMTk4OwogIHQuYXJyb3dkb3dud2hpdGUgPSAweDIxZTk7CiAgdC5hcnJvd2hlYWRkb3dubW9kID0gMHgwMmM1OwogIHQuYXJyb3doZWFkbGVmdG1vZCA9IDB4MDJjMjsKICB0LmFycm93aGVhZHJpZ2h0bW9kID0gMHgwMmMzOwogIHQuYXJyb3doZWFkdXBtb2QgPSAweDAyYzQ7CiAgdC5hcnJvd2hvcml6ZXggPSAweGY4ZTc7CiAgdC5hcnJvd2xlZnQgPSAweDIxOTA7CiAgdC5hcnJvd2xlZnRkYmwgPSAweDIxZDA7CiAgdC5hcnJvd2xlZnRkYmxzdHJva2UgPSAweDIxY2Q7CiAgdC5hcnJvd2xlZnRvdmVycmlnaHQgPSAweDIxYzY7CiAgdC5hcnJvd2xlZnR3aGl0ZSA9IDB4MjFlNjsKICB0LmFycm93cmlnaHQgPSAweDIxOTI7CiAgdC5hcnJvd3JpZ2h0ZGJsc3Ryb2tlID0gMHgyMWNmOwogIHQuYXJyb3dyaWdodGhlYXZ5ID0gMHgyNzllOwogIHQuYXJyb3dyaWdodG92ZXJsZWZ0ID0gMHgyMWM0OwogIHQuYXJyb3dyaWdodHdoaXRlID0gMHgyMWU4OwogIHQuYXJyb3d0YWJsZWZ0ID0gMHgyMWU0OwogIHQuYXJyb3d0YWJyaWdodCA9IDB4MjFlNTsKICB0LmFycm93dXAgPSAweDIxOTE7CiAgdC5hcnJvd3VwZG4gPSAweDIxOTU7CiAgdC5hcnJvd3VwZG5ic2UgPSAweDIxYTg7CiAgdC5hcnJvd3VwZG93bmJhc2UgPSAweDIxYTg7CiAgdC5hcnJvd3VwbGVmdCA9IDB4MjE5NjsKICB0LmFycm93dXBsZWZ0b2Zkb3duID0gMHgyMWM1OwogIHQuYXJyb3d1cHJpZ2h0ID0gMHgyMTk3OwogIHQuYXJyb3d1cHdoaXRlID0gMHgyMWU3OwogIHQuYXJyb3d2ZXJ0ZXggPSAweGY4ZTY7CiAgdC5hc2NpaWNpcmN1bSA9IDB4MDA1ZTsKICB0LmFzY2lpY2lyY3VtbW9ub3NwYWNlID0gMHhmZjNlOwogIHQuYXNjaWl0aWxkZSA9IDB4MDA3ZTsKICB0LmFzY2lpdGlsZGVtb25vc3BhY2UgPSAweGZmNWU7CiAgdC5hc2NyaXB0ID0gMHgwMjUxOwogIHQuYXNjcmlwdHR1cm5lZCA9IDB4MDI1MjsKICB0LmFzbWFsbGhpcmFnYW5hID0gMHgzMDQxOwogIHQuYXNtYWxsa2F0YWthbmEgPSAweDMwYTE7CiAgdC5hc21hbGxrYXRha2FuYWhhbGZ3aWR0aCA9IDB4ZmY2NzsKICB0LmFzdGVyaXNrID0gMHgwMDJhOwogIHQuYXN0ZXJpc2thbHRvbmVhcmFiaWMgPSAweDA2NmQ7CiAgdC5hc3Rlcmlza2FyYWJpYyA9IDB4MDY2ZDsKICB0LmFzdGVyaXNrbWF0aCA9IDB4MjIxNzsKICB0LmFzdGVyaXNrbW9ub3NwYWNlID0gMHhmZjBhOwogIHQuYXN0ZXJpc2tzbWFsbCA9IDB4ZmU2MTsKICB0LmFzdGVyaXNtID0gMHgyMDQyOwogIHQuYXN1cGVyaW9yID0gMHhmNmU5OwogIHQuYXN5bXB0b3RpY2FsbHllcXVhbCA9IDB4MjI0MzsKICB0LmF0ID0gMHgwMDQwOwogIHQuYXRpbGRlID0gMHgwMGUzOwogIHQuYXRtb25vc3BhY2UgPSAweGZmMjA7CiAgdC5hdHNtYWxsID0gMHhmZTZiOwogIHQuYXR1cm5lZCA9IDB4MDI1MDsKICB0LmF1YmVuZ2FsaSA9IDB4MDk5NDsKICB0LmF1Ym9wb21vZm8gPSAweDMxMjA7CiAgdC5hdWRldmEgPSAweDA5MTQ7CiAgdC5hdWd1amFyYXRpID0gMHgwYTk0OwogIHQuYXVndXJtdWtoaSA9IDB4MGExNDsKICB0LmF1bGVuZ3RobWFya2JlbmdhbGkgPSAweDA5ZDc7CiAgdC5hdW1hdHJhZ3VybXVraGkgPSAweDBhNGM7CiAgdC5hdXZvd2Vsc2lnbmJlbmdhbGkgPSAweDA5Y2M7CiAgdC5hdXZvd2Vsc2lnbmRldmEgPSAweDA5NGM7CiAgdC5hdXZvd2Vsc2lnbmd1amFyYXRpID0gMHgwYWNjOwogIHQuYXZhZ3JhaGFkZXZhID0gMHgwOTNkOwogIHQuYXliYXJtZW5pYW4gPSAweDA1NjE7CiAgdC5heWluID0gMHgwNWUyOwogIHQuYXlpbmFsdG9uZWhlYnJldyA9IDB4ZmIyMDsKICB0LmF5aW5oZWJyZXcgPSAweDA1ZTI7CiAgdC5iID0gMHgwMDYyOwogIHQuYmFiZW5nYWxpID0gMHgwOWFjOwogIHQuYmFja3NsYXNoID0gMHgwMDVjOwogIHQuYmFja3NsYXNobW9ub3NwYWNlID0gMHhmZjNjOwogIHQuYmFkZXZhID0gMHgwOTJjOwogIHQuYmFndWphcmF0aSA9IDB4MGFhYzsKICB0LmJhZ3VybXVraGkgPSAweDBhMmM7CiAgdC5iYWhpcmFnYW5hID0gMHgzMDcwOwogIHQuYmFodHRoYWkgPSAweDBlM2Y7CiAgdC5iYWthdGFrYW5hID0gMHgzMGQwOwogIHQuYmFyID0gMHgwMDdjOwogIHQuYmFybW9ub3NwYWNlID0gMHhmZjVjOwogIHQuYmJvcG9tb2ZvID0gMHgzMTA1OwogIHQuYmNpcmNsZSA9IDB4MjRkMTsKICB0LmJkb3RhY2NlbnQgPSAweDFlMDM7CiAgdC5iZG90YmVsb3cgPSAweDFlMDU7CiAgdC5iZWFtZWRzaXh0ZWVudGhub3RlcyA9IDB4MjY2YzsKICB0LmJlY2F1c2UgPSAweDIyMzU7CiAgdC5iZWN5cmlsbGljID0gMHgwNDMxOwogIHQuYmVoYXJhYmljID0gMHgwNjI4OwogIHQuYmVoZmluYWxhcmFiaWMgPSAweGZlOTA7CiAgdC5iZWhpbml0aWFsYXJhYmljID0gMHhmZTkxOwogIHQuYmVoaXJhZ2FuYSA9IDB4MzA3OTsKICB0LmJlaG1lZGlhbGFyYWJpYyA9IDB4ZmU5MjsKICB0LmJlaG1lZW1pbml0aWFsYXJhYmljID0gMHhmYzlmOwogIHQuYmVobWVlbWlzb2xhdGVkYXJhYmljID0gMHhmYzA4OwogIHQuYmVobm9vbmZpbmFsYXJhYmljID0gMHhmYzZkOwogIHQuYmVrYXRha2FuYSA9IDB4MzBkOTsKICB0LmJlbmFybWVuaWFuID0gMHgwNTYyOwogIHQuYmV0ID0gMHgwNWQxOwogIHQuYmV0YSA9IDB4MDNiMjsKICB0LmJldGFzeW1ib2xncmVlayA9IDB4MDNkMDsKICB0LmJldGRhZ2VzaCA9IDB4ZmIzMTsKICB0LmJldGRhZ2VzaGhlYnJldyA9IDB4ZmIzMTsKICB0LmJldGhlYnJldyA9IDB4MDVkMTsKICB0LmJldHJhZmVoZWJyZXcgPSAweGZiNGM7CiAgdC5iaGFiZW5nYWxpID0gMHgwOWFkOwogIHQuYmhhZGV2YSA9IDB4MDkyZDsKICB0LmJoYWd1amFyYXRpID0gMHgwYWFkOwogIHQuYmhhZ3VybXVraGkgPSAweDBhMmQ7CiAgdC5iaG9vayA9IDB4MDI1MzsKICB0LmJpaGlyYWdhbmEgPSAweDMwNzM7CiAgdC5iaWthdGFrYW5hID0gMHgzMGQzOwogIHQuYmlsYWJpYWxjbGljayA9IDB4MDI5ODsKICB0LmJpbmRpZ3VybXVraGkgPSAweDBhMDI7CiAgdC5iaXJ1c3F1YXJlID0gMHgzMzMxOwogIHQuYmxhY2tjaXJjbGUgPSAweDI1Y2Y7CiAgdC5ibGFja2RpYW1vbmQgPSAweDI1YzY7CiAgdC5ibGFja2Rvd25wb2ludGluZ3RyaWFuZ2xlID0gMHgyNWJjOwogIHQuYmxhY2tsZWZ0cG9pbnRpbmdwb2ludGVyID0gMHgyNWM0OwogIHQuYmxhY2tsZWZ0cG9pbnRpbmd0cmlhbmdsZSA9IDB4MjVjMDsKICB0LmJsYWNrbGVudGljdWxhcmJyYWNrZXRsZWZ0ID0gMHgzMDEwOwogIHQuYmxhY2tsZW50aWN1bGFyYnJhY2tldGxlZnR2ZXJ0aWNhbCA9IDB4ZmUzYjsKICB0LmJsYWNrbGVudGljdWxhcmJyYWNrZXRyaWdodCA9IDB4MzAxMTsKICB0LmJsYWNrbGVudGljdWxhcmJyYWNrZXRyaWdodHZlcnRpY2FsID0gMHhmZTNjOwogIHQuYmxhY2tsb3dlcmxlZnR0cmlhbmdsZSA9IDB4MjVlMzsKICB0LmJsYWNrbG93ZXJyaWdodHRyaWFuZ2xlID0gMHgyNWUyOwogIHQuYmxhY2tyZWN0YW5nbGUgPSAweDI1YWM7CiAgdC5ibGFja3JpZ2h0cG9pbnRpbmdwb2ludGVyID0gMHgyNWJhOwogIHQuYmxhY2tyaWdodHBvaW50aW5ndHJpYW5nbGUgPSAweDI1YjY7CiAgdC5ibGFja3NtYWxsc3F1YXJlID0gMHgyNWFhOwogIHQuYmxhY2tzbWlsaW5nZmFjZSA9IDB4MjYzYjsKICB0LmJsYWNrc3F1YXJlID0gMHgyNWEwOwogIHQuYmxhY2tzdGFyID0gMHgyNjA1OwogIHQuYmxhY2t1cHBlcmxlZnR0cmlhbmdsZSA9IDB4MjVlNDsKICB0LmJsYWNrdXBwZXJyaWdodHRyaWFuZ2xlID0gMHgyNWU1OwogIHQuYmxhY2t1cHBvaW50aW5nc21hbGx0cmlhbmdsZSA9IDB4MjViNDsKICB0LmJsYWNrdXBwb2ludGluZ3RyaWFuZ2xlID0gMHgyNWIyOwogIHQuYmxhbmsgPSAweDI0MjM7CiAgdC5ibGluZWJlbG93ID0gMHgxZTA3OwogIHQuYmxvY2sgPSAweDI1ODg7CiAgdC5ibW9ub3NwYWNlID0gMHhmZjQyOwogIHQuYm9iYWltYWl0aGFpID0gMHgwZTFhOwogIHQuYm9oaXJhZ2FuYSA9IDB4MzA3YzsKICB0LmJva2F0YWthbmEgPSAweDMwZGM7CiAgdC5icGFyZW4gPSAweDI0OWQ7CiAgdC5icXNxdWFyZSA9IDB4MzNjMzsKICB0LmJyYWNlZXggPSAweGY4ZjQ7CiAgdC5icmFjZWxlZnQgPSAweDAwN2I7CiAgdC5icmFjZWxlZnRidCA9IDB4ZjhmMzsKICB0LmJyYWNlbGVmdG1pZCA9IDB4ZjhmMjsKICB0LmJyYWNlbGVmdG1vbm9zcGFjZSA9IDB4ZmY1YjsKICB0LmJyYWNlbGVmdHNtYWxsID0gMHhmZTViOwogIHQuYnJhY2VsZWZ0dHAgPSAweGY4ZjE7CiAgdC5icmFjZWxlZnR2ZXJ0aWNhbCA9IDB4ZmUzNzsKICB0LmJyYWNlcmlnaHQgPSAweDAwN2Q7CiAgdC5icmFjZXJpZ2h0YnQgPSAweGY4ZmU7CiAgdC5icmFjZXJpZ2h0bWlkID0gMHhmOGZkOwogIHQuYnJhY2VyaWdodG1vbm9zcGFjZSA9IDB4ZmY1ZDsKICB0LmJyYWNlcmlnaHRzbWFsbCA9IDB4ZmU1YzsKICB0LmJyYWNlcmlnaHR0cCA9IDB4ZjhmYzsKICB0LmJyYWNlcmlnaHR2ZXJ0aWNhbCA9IDB4ZmUzODsKICB0LmJyYWNrZXRsZWZ0ID0gMHgwMDViOwogIHQuYnJhY2tldGxlZnRidCA9IDB4ZjhmMDsKICB0LmJyYWNrZXRsZWZ0ZXggPSAweGY4ZWY7CiAgdC5icmFja2V0bGVmdG1vbm9zcGFjZSA9IDB4ZmYzYjsKICB0LmJyYWNrZXRsZWZ0dHAgPSAweGY4ZWU7CiAgdC5icmFja2V0cmlnaHQgPSAweDAwNWQ7CiAgdC5icmFja2V0cmlnaHRidCA9IDB4ZjhmYjsKICB0LmJyYWNrZXRyaWdodGV4ID0gMHhmOGZhOwogIHQuYnJhY2tldHJpZ2h0bW9ub3NwYWNlID0gMHhmZjNkOwogIHQuYnJhY2tldHJpZ2h0dHAgPSAweGY4Zjk7CiAgdC5icmV2ZSA9IDB4MDJkODsKICB0LmJyZXZlYmVsb3djbWIgPSAweDAzMmU7CiAgdC5icmV2ZWNtYiA9IDB4MDMwNjsKICB0LmJyZXZlaW52ZXJ0ZWRiZWxvd2NtYiA9IDB4MDMyZjsKICB0LmJyZXZlaW52ZXJ0ZWRjbWIgPSAweDAzMTE7CiAgdC5icmV2ZWludmVydGVkZG91YmxlY21iID0gMHgwMzYxOwogIHQuYnJpZGdlYmVsb3djbWIgPSAweDAzMmE7CiAgdC5icmlkZ2VpbnZlcnRlZGJlbG93Y21iID0gMHgwMzNhOwogIHQuYnJva2VuYmFyID0gMHgwMGE2OwogIHQuYnN0cm9rZSA9IDB4MDE4MDsKICB0LmJzdXBlcmlvciA9IDB4ZjZlYTsKICB0LmJ0b3BiYXIgPSAweDAxODM7CiAgdC5idWhpcmFnYW5hID0gMHgzMDc2OwogIHQuYnVrYXRha2FuYSA9IDB4MzBkNjsKICB0LmJ1bGxldCA9IDB4MjAyMjsKICB0LmJ1bGxldGludmVyc2UgPSAweDI1ZDg7CiAgdC5idWxsZXRvcGVyYXRvciA9IDB4MjIxOTsKICB0LmJ1bGxzZXllID0gMHgyNWNlOwogIHQuYyA9IDB4MDA2MzsKICB0LmNhYXJtZW5pYW4gPSAweDA1NmU7CiAgdC5jYWJlbmdhbGkgPSAweDA5OWE7CiAgdC5jYWN1dGUgPSAweDAxMDc7CiAgdC5jYWRldmEgPSAweDA5MWE7CiAgdC5jYWd1amFyYXRpID0gMHgwYTlhOwogIHQuY2FndXJtdWtoaSA9IDB4MGExYTsKICB0LmNhbHNxdWFyZSA9IDB4MzM4ODsKICB0LmNhbmRyYWJpbmR1YmVuZ2FsaSA9IDB4MDk4MTsKICB0LmNhbmRyYWJpbmR1Y21iID0gMHgwMzEwOwogIHQuY2FuZHJhYmluZHVkZXZhID0gMHgwOTAxOwogIHQuY2FuZHJhYmluZHVndWphcmF0aSA9IDB4MGE4MTsKICB0LmNhcHNsb2NrID0gMHgyMWVhOwogIHQuY2FyZW9mID0gMHgyMTA1OwogIHQuY2Fyb24gPSAweDAyYzc7CiAgdC5jYXJvbmJlbG93Y21iID0gMHgwMzJjOwogIHQuY2Fyb25jbWIgPSAweDAzMGM7CiAgdC5jYXJyaWFnZXJldHVybiA9IDB4MjFiNTsKICB0LmNib3BvbW9mbyA9IDB4MzExODsKICB0LmNjYXJvbiA9IDB4MDEwZDsKICB0LmNjZWRpbGxhID0gMHgwMGU3OwogIHQuY2NlZGlsbGFhY3V0ZSA9IDB4MWUwOTsKICB0LmNjaXJjbGUgPSAweDI0ZDI7CiAgdC5jY2lyY3VtZmxleCA9IDB4MDEwOTsKICB0LmNjdXJsID0gMHgwMjU1OwogIHQuY2RvdCA9IDB4MDEwYjsKICB0LmNkb3RhY2NlbnQgPSAweDAxMGI7CiAgdC5jZHNxdWFyZSA9IDB4MzNjNTsKICB0LmNlZGlsbGEgPSAweDAwYjg7CiAgdC5jZWRpbGxhY21iID0gMHgwMzI3OwogIHQuY2VudCA9IDB4MDBhMjsKICB0LmNlbnRpZ3JhZGUgPSAweDIxMDM7CiAgdC5jZW50aW5mZXJpb3IgPSAweGY2ZGY7CiAgdC5jZW50bW9ub3NwYWNlID0gMHhmZmUwOwogIHQuY2VudG9sZHN0eWxlID0gMHhmN2EyOwogIHQuY2VudHN1cGVyaW9yID0gMHhmNmUwOwogIHQuY2hhYXJtZW5pYW4gPSAweDA1Nzk7CiAgdC5jaGFiZW5nYWxpID0gMHgwOTliOwogIHQuY2hhZGV2YSA9IDB4MDkxYjsKICB0LmNoYWd1amFyYXRpID0gMHgwYTliOwogIHQuY2hhZ3VybXVraGkgPSAweDBhMWI7CiAgdC5jaGJvcG9tb2ZvID0gMHgzMTE0OwogIHQuY2hlYWJraGFzaWFuY3lyaWxsaWMgPSAweDA0YmQ7CiAgdC5jaGVja21hcmsgPSAweDI3MTM7CiAgdC5jaGVjeXJpbGxpYyA9IDB4MDQ0NzsKICB0LmNoZWRlc2NlbmRlcmFia2hhc2lhbmN5cmlsbGljID0gMHgwNGJmOwogIHQuY2hlZGVzY2VuZGVyY3lyaWxsaWMgPSAweDA0Yjc7CiAgdC5jaGVkaWVyZXNpc2N5cmlsbGljID0gMHgwNGY1OwogIHQuY2hlaGFybWVuaWFuID0gMHgwNTczOwogIHQuY2hla2hha2Fzc2lhbmN5cmlsbGljID0gMHgwNGNjOwogIHQuY2hldmVydGljYWxzdHJva2VjeXJpbGxpYyA9IDB4MDRiOTsKICB0LmNoaSA9IDB4MDNjNzsKICB0LmNoaWV1Y2hhY2lyY2xla29yZWFuID0gMHgzMjc3OwogIHQuY2hpZXVjaGFwYXJlbmtvcmVhbiA9IDB4MzIxNzsKICB0LmNoaWV1Y2hjaXJjbGVrb3JlYW4gPSAweDMyNjk7CiAgdC5jaGlldWNoa29yZWFuID0gMHgzMTRhOwogIHQuY2hpZXVjaHBhcmVua29yZWFuID0gMHgzMjA5OwogIHQuY2hvY2hhbmd0aGFpID0gMHgwZTBhOwogIHQuY2hvY2hhbnRoYWkgPSAweDBlMDg7CiAgdC5jaG9jaGluZ3RoYWkgPSAweDBlMDk7CiAgdC5jaG9jaG9ldGhhaSA9IDB4MGUwYzsKICB0LmNob29rID0gMHgwMTg4OwogIHQuY2lldWNhY2lyY2xla29yZWFuID0gMHgzMjc2OwogIHQuY2lldWNhcGFyZW5rb3JlYW4gPSAweDMyMTY7CiAgdC5jaWV1Y2NpcmNsZWtvcmVhbiA9IDB4MzI2ODsKICB0LmNpZXVja29yZWFuID0gMHgzMTQ4OwogIHQuY2lldWNwYXJlbmtvcmVhbiA9IDB4MzIwODsKICB0LmNpZXVjdXBhcmVua29yZWFuID0gMHgzMjFjOwogIHQuY2lyY2xlID0gMHgyNWNiOwogIHQuY2lyY2xlY29weXJ0ID0gMHgwMGE5OwogIHQuY2lyY2xlbXVsdGlwbHkgPSAweDIyOTc7CiAgdC5jaXJjbGVvdCA9IDB4MjI5OTsKICB0LmNpcmNsZXBsdXMgPSAweDIyOTU7CiAgdC5jaXJjbGVwb3N0YWxtYXJrID0gMHgzMDM2OwogIHQuY2lyY2xld2l0aGxlZnRoYWxmYmxhY2sgPSAweDI1ZDA7CiAgdC5jaXJjbGV3aXRocmlnaHRoYWxmYmxhY2sgPSAweDI1ZDE7CiAgdC5jaXJjdW1mbGV4ID0gMHgwMmM2OwogIHQuY2lyY3VtZmxleGJlbG93Y21iID0gMHgwMzJkOwogIHQuY2lyY3VtZmxleGNtYiA9IDB4MDMwMjsKICB0LmNsZWFyID0gMHgyMzI3OwogIHQuY2xpY2thbHZlb2xhciA9IDB4MDFjMjsKICB0LmNsaWNrZGVudGFsID0gMHgwMWMwOwogIHQuY2xpY2tsYXRlcmFsID0gMHgwMWMxOwogIHQuY2xpY2tyZXRyb2ZsZXggPSAweDAxYzM7CiAgdC5jbHViID0gMHgyNjYzOwogIHQuY2x1YnN1aXRibGFjayA9IDB4MjY2MzsKICB0LmNsdWJzdWl0d2hpdGUgPSAweDI2Njc7CiAgdC5jbWN1YmVkc3F1YXJlID0gMHgzM2E0OwogIHQuY21vbm9zcGFjZSA9IDB4ZmY0MzsKICB0LmNtc3F1YXJlZHNxdWFyZSA9IDB4MzNhMDsKICB0LmNvYXJtZW5pYW4gPSAweDA1ODE7CiAgdC5jb2xvbiA9IDB4MDAzYTsKICB0LmNvbG9ubW9uZXRhcnkgPSAweDIwYTE7CiAgdC5jb2xvbm1vbm9zcGFjZSA9IDB4ZmYxYTsKICB0LmNvbG9uc2lnbiA9IDB4MjBhMTsKICB0LmNvbG9uc21hbGwgPSAweGZlNTU7CiAgdC5jb2xvbnRyaWFuZ3VsYXJoYWxmbW9kID0gMHgwMmQxOwogIHQuY29sb250cmlhbmd1bGFybW9kID0gMHgwMmQwOwogIHQuY29tbWEgPSAweDAwMmM7CiAgdC5jb21tYWFib3ZlY21iID0gMHgwMzEzOwogIHQuY29tbWFhYm92ZXJpZ2h0Y21iID0gMHgwMzE1OwogIHQuY29tbWFhY2NlbnQgPSAweGY2YzM7CiAgdC5jb21tYWFyYWJpYyA9IDB4MDYwYzsKICB0LmNvbW1hYXJtZW5pYW4gPSAweDA1NWQ7CiAgdC5jb21tYWluZmVyaW9yID0gMHhmNmUxOwogIHQuY29tbWFtb25vc3BhY2UgPSAweGZmMGM7CiAgdC5jb21tYXJldmVyc2VkYWJvdmVjbWIgPSAweDAzMTQ7CiAgdC5jb21tYXJldmVyc2VkbW9kID0gMHgwMmJkOwogIHQuY29tbWFzbWFsbCA9IDB4ZmU1MDsKICB0LmNvbW1hc3VwZXJpb3IgPSAweGY2ZTI7CiAgdC5jb21tYXR1cm5lZGFib3ZlY21iID0gMHgwMzEyOwogIHQuY29tbWF0dXJuZWRtb2QgPSAweDAyYmI7CiAgdC5jb21wYXNzID0gMHgyNjNjOwogIHQuY29uZ3J1ZW50ID0gMHgyMjQ1OwogIHQuY29udG91cmludGVncmFsID0gMHgyMjJlOwogIHQuY29udHJvbCA9IDB4MjMwMzsKICB0LmNvbnRyb2xBQ0sgPSAweDAwMDY7CiAgdC5jb250cm9sQkVMID0gMHgwMDA3OwogIHQuY29udHJvbEJTID0gMHgwMDA4OwogIHQuY29udHJvbENBTiA9IDB4MDAxODsKICB0LmNvbnRyb2xDUiA9IDB4MDAwZDsKICB0LmNvbnRyb2xEQzEgPSAweDAwMTE7CiAgdC5jb250cm9sREMyID0gMHgwMDEyOwogIHQuY29udHJvbERDMyA9IDB4MDAxMzsKICB0LmNvbnRyb2xEQzQgPSAweDAwMTQ7CiAgdC5jb250cm9sREVMID0gMHgwMDdmOwogIHQuY29udHJvbERMRSA9IDB4MDAxMDsKICB0LmNvbnRyb2xFTSA9IDB4MDAxOTsKICB0LmNvbnRyb2xFTlEgPSAweDAwMDU7CiAgdC5jb250cm9sRU9UID0gMHgwMDA0OwogIHQuY29udHJvbEVTQyA9IDB4MDAxYjsKICB0LmNvbnRyb2xFVEIgPSAweDAwMTc7CiAgdC5jb250cm9sRVRYID0gMHgwMDAzOwogIHQuY29udHJvbEZGID0gMHgwMDBjOwogIHQuY29udHJvbEZTID0gMHgwMDFjOwogIHQuY29udHJvbEdTID0gMHgwMDFkOwogIHQuY29udHJvbEhUID0gMHgwMDA5OwogIHQuY29udHJvbExGID0gMHgwMDBhOwogIHQuY29udHJvbE5BSyA9IDB4MDAxNTsKICB0LmNvbnRyb2xOVUxMID0gMHgwMDAwOwogIHQuY29udHJvbFJTID0gMHgwMDFlOwogIHQuY29udHJvbFNJID0gMHgwMDBmOwogIHQuY29udHJvbFNPID0gMHgwMDBlOwogIHQuY29udHJvbFNPVCA9IDB4MDAwMjsKICB0LmNvbnRyb2xTVFggPSAweDAwMDE7CiAgdC5jb250cm9sU1VCID0gMHgwMDFhOwogIHQuY29udHJvbFNZTiA9IDB4MDAxNjsKICB0LmNvbnRyb2xVUyA9IDB4MDAxZjsKICB0LmNvbnRyb2xWVCA9IDB4MDAwYjsKICB0LmNvcHlyaWdodCA9IDB4MDBhOTsKICB0LmNvcHlyaWdodHNhbnMgPSAweGY4ZTk7CiAgdC5jb3B5cmlnaHRzZXJpZiA9IDB4ZjZkOTsKICB0LmNvcm5lcmJyYWNrZXRsZWZ0ID0gMHgzMDBjOwogIHQuY29ybmVyYnJhY2tldGxlZnRoYWxmd2lkdGggPSAweGZmNjI7CiAgdC5jb3JuZXJicmFja2V0bGVmdHZlcnRpY2FsID0gMHhmZTQxOwogIHQuY29ybmVyYnJhY2tldHJpZ2h0ID0gMHgzMDBkOwogIHQuY29ybmVyYnJhY2tldHJpZ2h0aGFsZndpZHRoID0gMHhmZjYzOwogIHQuY29ybmVyYnJhY2tldHJpZ2h0dmVydGljYWwgPSAweGZlNDI7CiAgdC5jb3Jwb3JhdGlvbnNxdWFyZSA9IDB4MzM3ZjsKICB0LmNvc3F1YXJlID0gMHgzM2M3OwogIHQuY292ZXJrZ3NxdWFyZSA9IDB4MzNjNjsKICB0LmNwYXJlbiA9IDB4MjQ5ZTsKICB0LmNydXplaXJvID0gMHgyMGEyOwogIHQuY3N0cmV0Y2hlZCA9IDB4MDI5NzsKICB0LmN1cmx5YW5kID0gMHgyMmNmOwogIHQuY3VybHlvciA9IDB4MjJjZTsKICB0LmN1cnJlbmN5ID0gMHgwMGE0OwogIHQuY3lyQnJldmUgPSAweGY2ZDE7CiAgdC5jeXJGbGV4ID0gMHhmNmQyOwogIHQuY3lyYnJldmUgPSAweGY2ZDQ7CiAgdC5jeXJmbGV4ID0gMHhmNmQ1OwogIHQuZCA9IDB4MDA2NDsKICB0LmRhYXJtZW5pYW4gPSAweDA1NjQ7CiAgdC5kYWJlbmdhbGkgPSAweDA5YTY7CiAgdC5kYWRhcmFiaWMgPSAweDA2MzY7CiAgdC5kYWRldmEgPSAweDA5MjY7CiAgdC5kYWRmaW5hbGFyYWJpYyA9IDB4ZmViZTsKICB0LmRhZGluaXRpYWxhcmFiaWMgPSAweGZlYmY7CiAgdC5kYWRtZWRpYWxhcmFiaWMgPSAweGZlYzA7CiAgdC5kYWdlc2ggPSAweDA1YmM7CiAgdC5kYWdlc2hoZWJyZXcgPSAweDA1YmM7CiAgdC5kYWdnZXIgPSAweDIwMjA7CiAgdC5kYWdnZXJkYmwgPSAweDIwMjE7CiAgdC5kYWd1amFyYXRpID0gMHgwYWE2OwogIHQuZGFndXJtdWtoaSA9IDB4MGEyNjsKICB0LmRhaGlyYWdhbmEgPSAweDMwNjA7CiAgdC5kYWthdGFrYW5hID0gMHgzMGMwOwogIHQuZGFsYXJhYmljID0gMHgwNjJmOwogIHQuZGFsZXQgPSAweDA1ZDM7CiAgdC5kYWxldGRhZ2VzaCA9IDB4ZmIzMzsKICB0LmRhbGV0ZGFnZXNoaGVicmV3ID0gMHhmYjMzOwogIHQuZGFsZXRoZWJyZXcgPSAweDA1ZDM7CiAgdC5kYWxmaW5hbGFyYWJpYyA9IDB4ZmVhYTsKICB0LmRhbW1hYXJhYmljID0gMHgwNjRmOwogIHQuZGFtbWFsb3dhcmFiaWMgPSAweDA2NGY7CiAgdC5kYW1tYXRhbmFsdG9uZWFyYWJpYyA9IDB4MDY0YzsKICB0LmRhbW1hdGFuYXJhYmljID0gMHgwNjRjOwogIHQuZGFuZGEgPSAweDA5NjQ7CiAgdC5kYXJnYWhlYnJldyA9IDB4MDVhNzsKICB0LmRhcmdhbGVmdGhlYnJldyA9IDB4MDVhNzsKICB0LmRhc2lhcG5ldW1hdGFjeXJpbGxpY2NtYiA9IDB4MDQ4NTsKICB0LmRibEdyYXZlID0gMHhmNmQzOwogIHQuZGJsYW5nbGVicmFja2V0bGVmdCA9IDB4MzAwYTsKICB0LmRibGFuZ2xlYnJhY2tldGxlZnR2ZXJ0aWNhbCA9IDB4ZmUzZDsKICB0LmRibGFuZ2xlYnJhY2tldHJpZ2h0ID0gMHgzMDBiOwogIHQuZGJsYW5nbGVicmFja2V0cmlnaHR2ZXJ0aWNhbCA9IDB4ZmUzZTsKICB0LmRibGFyY2hpbnZlcnRlZGJlbG93Y21iID0gMHgwMzJiOwogIHQuZGJsYXJyb3dsZWZ0ID0gMHgyMWQ0OwogIHQuZGJsYXJyb3dyaWdodCA9IDB4MjFkMjsKICB0LmRibGRhbmRhID0gMHgwOTY1OwogIHQuZGJsZ3JhdmUgPSAweGY2ZDY7CiAgdC5kYmxncmF2ZWNtYiA9IDB4MDMwZjsKICB0LmRibGludGVncmFsID0gMHgyMjJjOwogIHQuZGJsbG93bGluZSA9IDB4MjAxNzsKICB0LmRibGxvd2xpbmVjbWIgPSAweDAzMzM7CiAgdC5kYmxvdmVybGluZWNtYiA9IDB4MDMzZjsKICB0LmRibHByaW1lbW9kID0gMHgwMmJhOwogIHQuZGJsdmVydGljYWxiYXIgPSAweDIwMTY7CiAgdC5kYmx2ZXJ0aWNhbGxpbmVhYm92ZWNtYiA9IDB4MDMwZTsKICB0LmRib3BvbW9mbyA9IDB4MzEwOTsKICB0LmRic3F1YXJlID0gMHgzM2M4OwogIHQuZGNhcm9uID0gMHgwMTBmOwogIHQuZGNlZGlsbGEgPSAweDFlMTE7CiAgdC5kY2lyY2xlID0gMHgyNGQzOwogIHQuZGNpcmN1bWZsZXhiZWxvdyA9IDB4MWUxMzsKICB0LmRjcm9hdCA9IDB4MDExMTsKICB0LmRkYWJlbmdhbGkgPSAweDA5YTE7CiAgdC5kZGFkZXZhID0gMHgwOTIxOwogIHQuZGRhZ3VqYXJhdGkgPSAweDBhYTE7CiAgdC5kZGFndXJtdWtoaSA9IDB4MGEyMTsKICB0LmRkYWxhcmFiaWMgPSAweDA2ODg7CiAgdC5kZGFsZmluYWxhcmFiaWMgPSAweGZiODk7CiAgdC5kZGRoYWRldmEgPSAweDA5NWM7CiAgdC5kZGhhYmVuZ2FsaSA9IDB4MDlhMjsKICB0LmRkaGFkZXZhID0gMHgwOTIyOwogIHQuZGRoYWd1amFyYXRpID0gMHgwYWEyOwogIHQuZGRoYWd1cm11a2hpID0gMHgwYTIyOwogIHQuZGRvdGFjY2VudCA9IDB4MWUwYjsKICB0LmRkb3RiZWxvdyA9IDB4MWUwZDsKICB0LmRlY2ltYWxzZXBhcmF0b3JhcmFiaWMgPSAweDA2NmI7CiAgdC5kZWNpbWFsc2VwYXJhdG9ycGVyc2lhbiA9IDB4MDY2YjsKICB0LmRlY3lyaWxsaWMgPSAweDA0MzQ7CiAgdC5kZWdyZWUgPSAweDAwYjA7CiAgdC5kZWhpaGVicmV3ID0gMHgwNWFkOwogIHQuZGVoaXJhZ2FuYSA9IDB4MzA2NzsKICB0LmRlaWNvcHRpYyA9IDB4MDNlZjsKICB0LmRla2F0YWthbmEgPSAweDMwYzc7CiAgdC5kZWxldGVsZWZ0ID0gMHgyMzJiOwogIHQuZGVsZXRlcmlnaHQgPSAweDIzMjY7CiAgdC5kZWx0YSA9IDB4MDNiNDsKICB0LmRlbHRhdHVybmVkID0gMHgwMThkOwogIHQuZGVub21pbmF0b3JtaW51c29uZW51bWVyYXRvcmJlbmdhbGkgPSAweDA5Zjg7CiAgdC5kZXpoID0gMHgwMmE0OwogIHQuZGhhYmVuZ2FsaSA9IDB4MDlhNzsKICB0LmRoYWRldmEgPSAweDA5Mjc7CiAgdC5kaGFndWphcmF0aSA9IDB4MGFhNzsKICB0LmRoYWd1cm11a2hpID0gMHgwYTI3OwogIHQuZGhvb2sgPSAweDAyNTc7CiAgdC5kaWFseXRpa2F0b25vcyA9IDB4MDM4NTsKICB0LmRpYWx5dGlrYXRvbm9zY21iID0gMHgwMzQ0OwogIHQuZGlhbW9uZCA9IDB4MjY2NjsKICB0LmRpYW1vbmRzdWl0d2hpdGUgPSAweDI2NjI7CiAgdC5kaWVyZXNpcyA9IDB4MDBhODsKICB0LmRpZXJlc2lzYWN1dGUgPSAweGY2ZDc7CiAgdC5kaWVyZXNpc2JlbG93Y21iID0gMHgwMzI0OwogIHQuZGllcmVzaXNjbWIgPSAweDAzMDg7CiAgdC5kaWVyZXNpc2dyYXZlID0gMHhmNmQ4OwogIHQuZGllcmVzaXN0b25vcyA9IDB4MDM4NTsKICB0LmRpaGlyYWdhbmEgPSAweDMwNjI7CiAgdC5kaWthdGFrYW5hID0gMHgzMGMyOwogIHQuZGl0dG9tYXJrID0gMHgzMDAzOwogIHQuZGl2aWRlID0gMHgwMGY3OwogIHQuZGl2aWRlcyA9IDB4MjIyMzsKICB0LmRpdmlzaW9uc2xhc2ggPSAweDIyMTU7CiAgdC5kamVjeXJpbGxpYyA9IDB4MDQ1MjsKICB0LmRrc2hhZGUgPSAweDI1OTM7CiAgdC5kbGluZWJlbG93ID0gMHgxZTBmOwogIHQuZGxzcXVhcmUgPSAweDMzOTc7CiAgdC5kbWFjcm9uID0gMHgwMTExOwogIHQuZG1vbm9zcGFjZSA9IDB4ZmY0NDsKICB0LmRuYmxvY2sgPSAweDI1ODQ7CiAgdC5kb2NoYWRhdGhhaSA9IDB4MGUwZTsKICB0LmRvZGVrdGhhaSA9IDB4MGUxNDsKICB0LmRvaGlyYWdhbmEgPSAweDMwNjk7CiAgdC5kb2thdGFrYW5hID0gMHgzMGM5OwogIHQuZG9sbGFyID0gMHgwMDI0OwogIHQuZG9sbGFyaW5mZXJpb3IgPSAweGY2ZTM7CiAgdC5kb2xsYXJtb25vc3BhY2UgPSAweGZmMDQ7CiAgdC5kb2xsYXJvbGRzdHlsZSA9IDB4ZjcyNDsKICB0LmRvbGxhcnNtYWxsID0gMHhmZTY5OwogIHQuZG9sbGFyc3VwZXJpb3IgPSAweGY2ZTQ7CiAgdC5kb25nID0gMHgyMGFiOwogIHQuZG9ydXNxdWFyZSA9IDB4MzMyNjsKICB0LmRvdGFjY2VudCA9IDB4MDJkOTsKICB0LmRvdGFjY2VudGNtYiA9IDB4MDMwNzsKICB0LmRvdGJlbG93Y21iID0gMHgwMzIzOwogIHQuZG90YmVsb3djb21iID0gMHgwMzIzOwogIHQuZG90a2F0YWthbmEgPSAweDMwZmI7CiAgdC5kb3RsZXNzaSA9IDB4MDEzMTsKICB0LmRvdGxlc3NqID0gMHhmNmJlOwogIHQuZG90bGVzc2pzdHJva2Vob29rID0gMHgwMjg0OwogIHQuZG90bWF0aCA9IDB4MjJjNTsKICB0LmRvdHRlZGNpcmNsZSA9IDB4MjVjYzsKICB0LmRvdWJsZXlvZHBhdGFoID0gMHhmYjFmOwogIHQuZG91YmxleW9kcGF0YWhoZWJyZXcgPSAweGZiMWY7CiAgdC5kb3dudGFja2JlbG93Y21iID0gMHgwMzFlOwogIHQuZG93bnRhY2ttb2QgPSAweDAyZDU7CiAgdC5kcGFyZW4gPSAweDI0OWY7CiAgdC5kc3VwZXJpb3IgPSAweGY2ZWI7CiAgdC5kdGFpbCA9IDB4MDI1NjsKICB0LmR0b3BiYXIgPSAweDAxOGM7CiAgdC5kdWhpcmFnYW5hID0gMHgzMDY1OwogIHQuZHVrYXRha2FuYSA9IDB4MzBjNTsKICB0LmR6ID0gMHgwMWYzOwogIHQuZHphbHRvbmUgPSAweDAyYTM7CiAgdC5kemNhcm9uID0gMHgwMWM2OwogIHQuZHpjdXJsID0gMHgwMmE1OwogIHQuZHplYWJraGFzaWFuY3lyaWxsaWMgPSAweDA0ZTE7CiAgdC5kemVjeXJpbGxpYyA9IDB4MDQ1NTsKICB0LmR6aGVjeXJpbGxpYyA9IDB4MDQ1ZjsKICB0LmUgPSAweDAwNjU7CiAgdC5lYWN1dGUgPSAweDAwZTk7CiAgdC5lYXJ0aCA9IDB4MjY0MTsKICB0LmViZW5nYWxpID0gMHgwOThmOwogIHQuZWJvcG9tb2ZvID0gMHgzMTFjOwogIHQuZWJyZXZlID0gMHgwMTE1OwogIHQuZWNhbmRyYWRldmEgPSAweDA5MGQ7CiAgdC5lY2FuZHJhZ3VqYXJhdGkgPSAweDBhOGQ7CiAgdC5lY2FuZHJhdm93ZWxzaWduZGV2YSA9IDB4MDk0NTsKICB0LmVjYW5kcmF2b3dlbHNpZ25ndWphcmF0aSA9IDB4MGFjNTsKICB0LmVjYXJvbiA9IDB4MDExYjsKICB0LmVjZWRpbGxhYnJldmUgPSAweDFlMWQ7CiAgdC5lY2hhcm1lbmlhbiA9IDB4MDU2NTsKICB0LmVjaHlpd25hcm1lbmlhbiA9IDB4MDU4NzsKICB0LmVjaXJjbGUgPSAweDI0ZDQ7CiAgdC5lY2lyY3VtZmxleCA9IDB4MDBlYTsKICB0LmVjaXJjdW1mbGV4YWN1dGUgPSAweDFlYmY7CiAgdC5lY2lyY3VtZmxleGJlbG93ID0gMHgxZTE5OwogIHQuZWNpcmN1bWZsZXhkb3RiZWxvdyA9IDB4MWVjNzsKICB0LmVjaXJjdW1mbGV4Z3JhdmUgPSAweDFlYzE7CiAgdC5lY2lyY3VtZmxleGhvb2thYm92ZSA9IDB4MWVjMzsKICB0LmVjaXJjdW1mbGV4dGlsZGUgPSAweDFlYzU7CiAgdC5lY3lyaWxsaWMgPSAweDA0NTQ7CiAgdC5lZGJsZ3JhdmUgPSAweDAyMDU7CiAgdC5lZGV2YSA9IDB4MDkwZjsKICB0LmVkaWVyZXNpcyA9IDB4MDBlYjsKICB0LmVkb3QgPSAweDAxMTc7CiAgdC5lZG90YWNjZW50ID0gMHgwMTE3OwogIHQuZWRvdGJlbG93ID0gMHgxZWI5OwogIHQuZWVndXJtdWtoaSA9IDB4MGEwZjsKICB0LmVlbWF0cmFndXJtdWtoaSA9IDB4MGE0NzsKICB0LmVmY3lyaWxsaWMgPSAweDA0NDQ7CiAgdC5lZ3JhdmUgPSAweDAwZTg7CiAgdC5lZ3VqYXJhdGkgPSAweDBhOGY7CiAgdC5laGFybWVuaWFuID0gMHgwNTY3OwogIHQuZWhib3BvbW9mbyA9IDB4MzExZDsKICB0LmVoaXJhZ2FuYSA9IDB4MzA0ODsKICB0LmVob29rYWJvdmUgPSAweDFlYmI7CiAgdC5laWJvcG9tb2ZvID0gMHgzMTFmOwogIHQuZWlnaHQgPSAweDAwMzg7CiAgdC5laWdodGFyYWJpYyA9IDB4MDY2ODsKICB0LmVpZ2h0YmVuZ2FsaSA9IDB4MDllZTsKICB0LmVpZ2h0Y2lyY2xlID0gMHgyNDY3OwogIHQuZWlnaHRjaXJjbGVpbnZlcnNlc2Fuc3NlcmlmID0gMHgyNzkxOwogIHQuZWlnaHRkZXZhID0gMHgwOTZlOwogIHQuZWlnaHRlZW5jaXJjbGUgPSAweDI0NzE7CiAgdC5laWdodGVlbnBhcmVuID0gMHgyNDg1OwogIHQuZWlnaHRlZW5wZXJpb2QgPSAweDI0OTk7CiAgdC5laWdodGd1amFyYXRpID0gMHgwYWVlOwogIHQuZWlnaHRndXJtdWtoaSA9IDB4MGE2ZTsKICB0LmVpZ2h0aGFja2FyYWJpYyA9IDB4MDY2ODsKICB0LmVpZ2h0aGFuZ3pob3UgPSAweDMwMjg7CiAgdC5laWdodGhub3RlYmVhbWVkID0gMHgyNjZiOwogIHQuZWlnaHRpZGVvZ3JhcGhpY3BhcmVuID0gMHgzMjI3OwogIHQuZWlnaHRpbmZlcmlvciA9IDB4MjA4ODsKICB0LmVpZ2h0bW9ub3NwYWNlID0gMHhmZjE4OwogIHQuZWlnaHRvbGRzdHlsZSA9IDB4ZjczODsKICB0LmVpZ2h0cGFyZW4gPSAweDI0N2I7CiAgdC5laWdodHBlcmlvZCA9IDB4MjQ4ZjsKICB0LmVpZ2h0cGVyc2lhbiA9IDB4MDZmODsKICB0LmVpZ2h0cm9tYW4gPSAweDIxNzc7CiAgdC5laWdodHN1cGVyaW9yID0gMHgyMDc4OwogIHQuZWlnaHR0aGFpID0gMHgwZTU4OwogIHQuZWludmVydGVkYnJldmUgPSAweDAyMDc7CiAgdC5laW90aWZpZWRjeXJpbGxpYyA9IDB4MDQ2NTsKICB0LmVrYXRha2FuYSA9IDB4MzBhODsKICB0LmVrYXRha2FuYWhhbGZ3aWR0aCA9IDB4ZmY3NDsKICB0LmVrb25rYXJndXJtdWtoaSA9IDB4MGE3NDsKICB0LmVrb3JlYW4gPSAweDMxNTQ7CiAgdC5lbGN5cmlsbGljID0gMHgwNDNiOwogIHQuZWxlbWVudCA9IDB4MjIwODsKICB0LmVsZXZlbmNpcmNsZSA9IDB4MjQ2YTsKICB0LmVsZXZlbnBhcmVuID0gMHgyNDdlOwogIHQuZWxldmVucGVyaW9kID0gMHgyNDkyOwogIHQuZWxldmVucm9tYW4gPSAweDIxN2E7CiAgdC5lbGxpcHNpcyA9IDB4MjAyNjsKICB0LmVsbGlwc2lzdmVydGljYWwgPSAweDIyZWU7CiAgdC5lbWFjcm9uID0gMHgwMTEzOwogIHQuZW1hY3JvbmFjdXRlID0gMHgxZTE3OwogIHQuZW1hY3JvbmdyYXZlID0gMHgxZTE1OwogIHQuZW1jeXJpbGxpYyA9IDB4MDQzYzsKICB0LmVtZGFzaCA9IDB4MjAxNDsKICB0LmVtZGFzaHZlcnRpY2FsID0gMHhmZTMxOwogIHQuZW1vbm9zcGFjZSA9IDB4ZmY0NTsKICB0LmVtcGhhc2lzbWFya2FybWVuaWFuID0gMHgwNTViOwogIHQuZW1wdHlzZXQgPSAweDIyMDU7CiAgdC5lbmJvcG9tb2ZvID0gMHgzMTIzOwogIHQuZW5jeXJpbGxpYyA9IDB4MDQzZDsKICB0LmVuZGFzaCA9IDB4MjAxMzsKICB0LmVuZGFzaHZlcnRpY2FsID0gMHhmZTMyOwogIHQuZW5kZXNjZW5kZXJjeXJpbGxpYyA9IDB4MDRhMzsKICB0LmVuZyA9IDB4MDE0YjsKICB0LmVuZ2JvcG9tb2ZvID0gMHgzMTI1OwogIHQuZW5naGVjeXJpbGxpYyA9IDB4MDRhNTsKICB0LmVuaG9va2N5cmlsbGljID0gMHgwNGM4OwogIHQuZW5zcGFjZSA9IDB4MjAwMjsKICB0LmVvZ29uZWsgPSAweDAxMTk7CiAgdC5lb2tvcmVhbiA9IDB4MzE1MzsKICB0LmVvcGVuID0gMHgwMjViOwogIHQuZW9wZW5jbG9zZWQgPSAweDAyOWE7CiAgdC5lb3BlbnJldmVyc2VkID0gMHgwMjVjOwogIHQuZW9wZW5yZXZlcnNlZGNsb3NlZCA9IDB4MDI1ZTsKICB0LmVvcGVucmV2ZXJzZWRob29rID0gMHgwMjVkOwogIHQuZXBhcmVuID0gMHgyNGEwOwogIHQuZXBzaWxvbiA9IDB4MDNiNTsKICB0LmVwc2lsb250b25vcyA9IDB4MDNhZDsKICB0LmVxdWFsID0gMHgwMDNkOwogIHQuZXF1YWxtb25vc3BhY2UgPSAweGZmMWQ7CiAgdC5lcXVhbHNtYWxsID0gMHhmZTY2OwogIHQuZXF1YWxzdXBlcmlvciA9IDB4MjA3YzsKICB0LmVxdWl2YWxlbmNlID0gMHgyMjYxOwogIHQuZXJib3BvbW9mbyA9IDB4MzEyNjsKICB0LmVyY3lyaWxsaWMgPSAweDA0NDA7CiAgdC5lcmV2ZXJzZWQgPSAweDAyNTg7CiAgdC5lcmV2ZXJzZWRjeXJpbGxpYyA9IDB4MDQ0ZDsKICB0LmVzY3lyaWxsaWMgPSAweDA0NDE7CiAgdC5lc2Rlc2NlbmRlcmN5cmlsbGljID0gMHgwNGFiOwogIHQuZXNoID0gMHgwMjgzOwogIHQuZXNoY3VybCA9IDB4MDI4NjsKICB0LmVzaG9ydGRldmEgPSAweDA5MGU7CiAgdC5lc2hvcnR2b3dlbHNpZ25kZXZhID0gMHgwOTQ2OwogIHQuZXNocmV2ZXJzZWRsb29wID0gMHgwMWFhOwogIHQuZXNoc3F1YXRyZXZlcnNlZCA9IDB4MDI4NTsKICB0LmVzbWFsbGhpcmFnYW5hID0gMHgzMDQ3OwogIHQuZXNtYWxsa2F0YWthbmEgPSAweDMwYTc7CiAgdC5lc21hbGxrYXRha2FuYWhhbGZ3aWR0aCA9IDB4ZmY2YTsKICB0LmVzdGltYXRlZCA9IDB4MjEyZTsKICB0LmVzdXBlcmlvciA9IDB4ZjZlYzsKICB0LmV0YSA9IDB4MDNiNzsKICB0LmV0YXJtZW5pYW4gPSAweDA1Njg7CiAgdC5ldGF0b25vcyA9IDB4MDNhZTsKICB0LmV0aCA9IDB4MDBmMDsKICB0LmV0aWxkZSA9IDB4MWViZDsKICB0LmV0aWxkZWJlbG93ID0gMHgxZTFiOwogIHQuZXRuYWh0YWZvdWtoaGVicmV3ID0gMHgwNTkxOwogIHQuZXRuYWh0YWZvdWtobGVmdGhlYnJldyA9IDB4MDU5MTsKICB0LmV0bmFodGFoZWJyZXcgPSAweDA1OTE7CiAgdC5ldG5haHRhbGVmdGhlYnJldyA9IDB4MDU5MTsKICB0LmV0dXJuZWQgPSAweDAxZGQ7CiAgdC5ldWtvcmVhbiA9IDB4MzE2MTsKICB0LmV1cm8gPSAweDIwYWM7CiAgdC5ldm93ZWxzaWduYmVuZ2FsaSA9IDB4MDljNzsKICB0LmV2b3dlbHNpZ25kZXZhID0gMHgwOTQ3OwogIHQuZXZvd2Vsc2lnbmd1amFyYXRpID0gMHgwYWM3OwogIHQuZXhjbGFtID0gMHgwMDIxOwogIHQuZXhjbGFtYXJtZW5pYW4gPSAweDA1NWM7CiAgdC5leGNsYW1kYmwgPSAweDIwM2M7CiAgdC5leGNsYW1kb3duID0gMHgwMGExOwogIHQuZXhjbGFtZG93bnNtYWxsID0gMHhmN2ExOwogIHQuZXhjbGFtbW9ub3NwYWNlID0gMHhmZjAxOwogIHQuZXhjbGFtc21hbGwgPSAweGY3MjE7CiAgdC5leGlzdGVudGlhbCA9IDB4MjIwMzsKICB0LmV6aCA9IDB4MDI5MjsKICB0LmV6aGNhcm9uID0gMHgwMWVmOwogIHQuZXpoY3VybCA9IDB4MDI5MzsKICB0LmV6aHJldmVyc2VkID0gMHgwMWI5OwogIHQuZXpodGFpbCA9IDB4MDFiYTsKICB0LmYgPSAweDAwNjY7CiAgdC5mYWRldmEgPSAweDA5NWU7CiAgdC5mYWd1cm11a2hpID0gMHgwYTVlOwogIHQuZmFocmVuaGVpdCA9IDB4MjEwOTsKICB0LmZhdGhhYXJhYmljID0gMHgwNjRlOwogIHQuZmF0aGFsb3dhcmFiaWMgPSAweDA2NGU7CiAgdC5mYXRoYXRhbmFyYWJpYyA9IDB4MDY0YjsKICB0LmZib3BvbW9mbyA9IDB4MzEwODsKICB0LmZjaXJjbGUgPSAweDI0ZDU7CiAgdC5mZG90YWNjZW50ID0gMHgxZTFmOwogIHQuZmVoYXJhYmljID0gMHgwNjQxOwogIHQuZmVoYXJtZW5pYW4gPSAweDA1ODY7CiAgdC5mZWhmaW5hbGFyYWJpYyA9IDB4ZmVkMjsKICB0LmZlaGluaXRpYWxhcmFiaWMgPSAweGZlZDM7CiAgdC5mZWhtZWRpYWxhcmFiaWMgPSAweGZlZDQ7CiAgdC5mZWljb3B0aWMgPSAweDAzZTU7CiAgdC5mZW1hbGUgPSAweDI2NDA7CiAgdC5mZiA9IDB4ZmIwMDsKICB0LmZfZiA9IDB4ZmIwMDsKICB0LmZmaSA9IDB4ZmIwMzsKICB0LmZfZl9pID0gMHhmYjAzOwogIHQuZmZsID0gMHhmYjA0OwogIHQuZl9mX2wgPSAweGZiMDQ7CiAgdC5maSA9IDB4ZmIwMTsKICB0LmZfaSA9IDB4ZmIwMTsKICB0LmZpZnRlZW5jaXJjbGUgPSAweDI0NmU7CiAgdC5maWZ0ZWVucGFyZW4gPSAweDI0ODI7CiAgdC5maWZ0ZWVucGVyaW9kID0gMHgyNDk2OwogIHQuZmlndXJlZGFzaCA9IDB4MjAxMjsKICB0LmZpbGxlZGJveCA9IDB4MjVhMDsKICB0LmZpbGxlZHJlY3QgPSAweDI1YWM7CiAgdC5maW5hbGthZiA9IDB4MDVkYTsKICB0LmZpbmFsa2FmZGFnZXNoID0gMHhmYjNhOwogIHQuZmluYWxrYWZkYWdlc2hoZWJyZXcgPSAweGZiM2E7CiAgdC5maW5hbGthZmhlYnJldyA9IDB4MDVkYTsKICB0LmZpbmFsbWVtID0gMHgwNWRkOwogIHQuZmluYWxtZW1oZWJyZXcgPSAweDA1ZGQ7CiAgdC5maW5hbG51biA9IDB4MDVkZjsKICB0LmZpbmFsbnVuaGVicmV3ID0gMHgwNWRmOwogIHQuZmluYWxwZSA9IDB4MDVlMzsKICB0LmZpbmFscGVoZWJyZXcgPSAweDA1ZTM7CiAgdC5maW5hbHRzYWRpID0gMHgwNWU1OwogIHQuZmluYWx0c2FkaWhlYnJldyA9IDB4MDVlNTsKICB0LmZpcnN0dG9uZWNoaW5lc2UgPSAweDAyYzk7CiAgdC5maXNoZXllID0gMHgyNWM5OwogIHQuZml0YWN5cmlsbGljID0gMHgwNDczOwogIHQuZml2ZSA9IDB4MDAzNTsKICB0LmZpdmVhcmFiaWMgPSAweDA2NjU7CiAgdC5maXZlYmVuZ2FsaSA9IDB4MDllYjsKICB0LmZpdmVjaXJjbGUgPSAweDI0NjQ7CiAgdC5maXZlY2lyY2xlaW52ZXJzZXNhbnNzZXJpZiA9IDB4Mjc4ZTsKICB0LmZpdmVkZXZhID0gMHgwOTZiOwogIHQuZml2ZWVpZ2h0aHMgPSAweDIxNWQ7CiAgdC5maXZlZ3VqYXJhdGkgPSAweDBhZWI7CiAgdC5maXZlZ3VybXVraGkgPSAweDBhNmI7CiAgdC5maXZlaGFja2FyYWJpYyA9IDB4MDY2NTsKICB0LmZpdmVoYW5nemhvdSA9IDB4MzAyNTsKICB0LmZpdmVpZGVvZ3JhcGhpY3BhcmVuID0gMHgzMjI0OwogIHQuZml2ZWluZmVyaW9yID0gMHgyMDg1OwogIHQuZml2ZW1vbm9zcGFjZSA9IDB4ZmYxNTsKICB0LmZpdmVvbGRzdHlsZSA9IDB4ZjczNTsKICB0LmZpdmVwYXJlbiA9IDB4MjQ3ODsKICB0LmZpdmVwZXJpb2QgPSAweDI0OGM7CiAgdC5maXZlcGVyc2lhbiA9IDB4MDZmNTsKICB0LmZpdmVyb21hbiA9IDB4MjE3NDsKICB0LmZpdmVzdXBlcmlvciA9IDB4MjA3NTsKICB0LmZpdmV0aGFpID0gMHgwZTU1OwogIHQuZmwgPSAweGZiMDI7CiAgdC5mX2wgPSAweGZiMDI7CiAgdC5mbG9yaW4gPSAweDAxOTI7CiAgdC5mbW9ub3NwYWNlID0gMHhmZjQ2OwogIHQuZm1zcXVhcmUgPSAweDMzOTk7CiAgdC5mb2ZhbnRoYWkgPSAweDBlMWY7CiAgdC5mb2ZhdGhhaSA9IDB4MGUxZDsKICB0LmZvbmdtYW50aGFpID0gMHgwZTRmOwogIHQuZm9yYWxsID0gMHgyMjAwOwogIHQuZm91ciA9IDB4MDAzNDsKICB0LmZvdXJhcmFiaWMgPSAweDA2NjQ7CiAgdC5mb3VyYmVuZ2FsaSA9IDB4MDllYTsKICB0LmZvdXJjaXJjbGUgPSAweDI0NjM7CiAgdC5mb3VyY2lyY2xlaW52ZXJzZXNhbnNzZXJpZiA9IDB4Mjc4ZDsKICB0LmZvdXJkZXZhID0gMHgwOTZhOwogIHQuZm91cmd1amFyYXRpID0gMHgwYWVhOwogIHQuZm91cmd1cm11a2hpID0gMHgwYTZhOwogIHQuZm91cmhhY2thcmFiaWMgPSAweDA2NjQ7CiAgdC5mb3VyaGFuZ3pob3UgPSAweDMwMjQ7CiAgdC5mb3VyaWRlb2dyYXBoaWNwYXJlbiA9IDB4MzIyMzsKICB0LmZvdXJpbmZlcmlvciA9IDB4MjA4NDsKICB0LmZvdXJtb25vc3BhY2UgPSAweGZmMTQ7CiAgdC5mb3VybnVtZXJhdG9yYmVuZ2FsaSA9IDB4MDlmNzsKICB0LmZvdXJvbGRzdHlsZSA9IDB4ZjczNDsKICB0LmZvdXJwYXJlbiA9IDB4MjQ3NzsKICB0LmZvdXJwZXJpb2QgPSAweDI0OGI7CiAgdC5mb3VycGVyc2lhbiA9IDB4MDZmNDsKICB0LmZvdXJyb21hbiA9IDB4MjE3MzsKICB0LmZvdXJzdXBlcmlvciA9IDB4MjA3NDsKICB0LmZvdXJ0ZWVuY2lyY2xlID0gMHgyNDZkOwogIHQuZm91cnRlZW5wYXJlbiA9IDB4MjQ4MTsKICB0LmZvdXJ0ZWVucGVyaW9kID0gMHgyNDk1OwogIHQuZm91cnRoYWkgPSAweDBlNTQ7CiAgdC5mb3VydGh0b25lY2hpbmVzZSA9IDB4MDJjYjsKICB0LmZwYXJlbiA9IDB4MjRhMTsKICB0LmZyYWN0aW9uID0gMHgyMDQ0OwogIHQuZnJhbmMgPSAweDIwYTM7CiAgdC5nID0gMHgwMDY3OwogIHQuZ2FiZW5nYWxpID0gMHgwOTk3OwogIHQuZ2FjdXRlID0gMHgwMWY1OwogIHQuZ2FkZXZhID0gMHgwOTE3OwogIHQuZ2FmYXJhYmljID0gMHgwNmFmOwogIHQuZ2FmZmluYWxhcmFiaWMgPSAweGZiOTM7CiAgdC5nYWZpbml0aWFsYXJhYmljID0gMHhmYjk0OwogIHQuZ2FmbWVkaWFsYXJhYmljID0gMHhmYjk1OwogIHQuZ2FndWphcmF0aSA9IDB4MGE5NzsKICB0LmdhZ3VybXVraGkgPSAweDBhMTc7CiAgdC5nYWhpcmFnYW5hID0gMHgzMDRjOwogIHQuZ2FrYXRha2FuYSA9IDB4MzBhYzsKICB0LmdhbW1hID0gMHgwM2IzOwogIHQuZ2FtbWFsYXRpbnNtYWxsID0gMHgwMjYzOwogIHQuZ2FtbWFzdXBlcmlvciA9IDB4MDJlMDsKICB0LmdhbmdpYWNvcHRpYyA9IDB4MDNlYjsKICB0Lmdib3BvbW9mbyA9IDB4MzEwZDsKICB0LmdicmV2ZSA9IDB4MDExZjsKICB0LmdjYXJvbiA9IDB4MDFlNzsKICB0LmdjZWRpbGxhID0gMHgwMTIzOwogIHQuZ2NpcmNsZSA9IDB4MjRkNjsKICB0LmdjaXJjdW1mbGV4ID0gMHgwMTFkOwogIHQuZ2NvbW1hYWNjZW50ID0gMHgwMTIzOwogIHQuZ2RvdCA9IDB4MDEyMTsKICB0Lmdkb3RhY2NlbnQgPSAweDAxMjE7CiAgdC5nZWN5cmlsbGljID0gMHgwNDMzOwogIHQuZ2VoaXJhZ2FuYSA9IDB4MzA1MjsKICB0Lmdla2F0YWthbmEgPSAweDMwYjI7CiAgdC5nZW9tZXRyaWNhbGx5ZXF1YWwgPSAweDIyNTE7CiAgdC5nZXJlc2hhY2NlbnRoZWJyZXcgPSAweDA1OWM7CiAgdC5nZXJlc2hoZWJyZXcgPSAweDA1ZjM7CiAgdC5nZXJlc2htdXFkYW1oZWJyZXcgPSAweDA1OWQ7CiAgdC5nZXJtYW5kYmxzID0gMHgwMGRmOwogIHQuZ2Vyc2hheWltYWNjZW50aGVicmV3ID0gMHgwNTllOwogIHQuZ2Vyc2hheWltaGVicmV3ID0gMHgwNWY0OwogIHQuZ2V0YW1hcmsgPSAweDMwMTM7CiAgdC5naGFiZW5nYWxpID0gMHgwOTk4OwogIHQuZ2hhZGFybWVuaWFuID0gMHgwNTcyOwogIHQuZ2hhZGV2YSA9IDB4MDkxODsKICB0LmdoYWd1amFyYXRpID0gMHgwYTk4OwogIHQuZ2hhZ3VybXVraGkgPSAweDBhMTg7CiAgdC5naGFpbmFyYWJpYyA9IDB4MDYzYTsKICB0LmdoYWluZmluYWxhcmFiaWMgPSAweGZlY2U7CiAgdC5naGFpbmluaXRpYWxhcmFiaWMgPSAweGZlY2Y7CiAgdC5naGFpbm1lZGlhbGFyYWJpYyA9IDB4ZmVkMDsKICB0LmdoZW1pZGRsZWhvb2tjeXJpbGxpYyA9IDB4MDQ5NTsKICB0LmdoZXN0cm9rZWN5cmlsbGljID0gMHgwNDkzOwogIHQuZ2hldXB0dXJuY3lyaWxsaWMgPSAweDA0OTE7CiAgdC5naGhhZGV2YSA9IDB4MDk1YTsKICB0LmdoaGFndXJtdWtoaSA9IDB4MGE1YTsKICB0Lmdob29rID0gMHgwMjYwOwogIHQuZ2h6c3F1YXJlID0gMHgzMzkzOwogIHQuZ2loaXJhZ2FuYSA9IDB4MzA0ZTsKICB0Lmdpa2F0YWthbmEgPSAweDMwYWU7CiAgdC5naW1hcm1lbmlhbiA9IDB4MDU2MzsKICB0LmdpbWVsID0gMHgwNWQyOwogIHQuZ2ltZWxkYWdlc2ggPSAweGZiMzI7CiAgdC5naW1lbGRhZ2VzaGhlYnJldyA9IDB4ZmIzMjsKICB0LmdpbWVsaGVicmV3ID0gMHgwNWQyOwogIHQuZ2plY3lyaWxsaWMgPSAweDA0NTM7CiAgdC5nbG90dGFsaW52ZXJ0ZWRzdHJva2UgPSAweDAxYmU7CiAgdC5nbG90dGFsc3RvcCA9IDB4MDI5NDsKICB0Lmdsb3R0YWxzdG9waW52ZXJ0ZWQgPSAweDAyOTY7CiAgdC5nbG90dGFsc3RvcG1vZCA9IDB4MDJjMDsKICB0Lmdsb3R0YWxzdG9wcmV2ZXJzZWQgPSAweDAyOTU7CiAgdC5nbG90dGFsc3RvcHJldmVyc2VkbW9kID0gMHgwMmMxOwogIHQuZ2xvdHRhbHN0b3ByZXZlcnNlZHN1cGVyaW9yID0gMHgwMmU0OwogIHQuZ2xvdHRhbHN0b3BzdHJva2UgPSAweDAyYTE7CiAgdC5nbG90dGFsc3RvcHN0cm9rZXJldmVyc2VkID0gMHgwMmEyOwogIHQuZ21hY3JvbiA9IDB4MWUyMTsKICB0Lmdtb25vc3BhY2UgPSAweGZmNDc7CiAgdC5nb2hpcmFnYW5hID0gMHgzMDU0OwogIHQuZ29rYXRha2FuYSA9IDB4MzBiNDsKICB0LmdwYXJlbiA9IDB4MjRhMjsKICB0LmdwYXNxdWFyZSA9IDB4MzNhYzsKICB0LmdyYWRpZW50ID0gMHgyMjA3OwogIHQuZ3JhdmUgPSAweDAwNjA7CiAgdC5ncmF2ZWJlbG93Y21iID0gMHgwMzE2OwogIHQuZ3JhdmVjbWIgPSAweDAzMDA7CiAgdC5ncmF2ZWNvbWIgPSAweDAzMDA7CiAgdC5ncmF2ZWRldmEgPSAweDA5NTM7CiAgdC5ncmF2ZWxvd21vZCA9IDB4MDJjZTsKICB0LmdyYXZlbW9ub3NwYWNlID0gMHhmZjQwOwogIHQuZ3JhdmV0b25lY21iID0gMHgwMzQwOwogIHQuZ3JlYXRlciA9IDB4MDAzZTsKICB0LmdyZWF0ZXJlcXVhbCA9IDB4MjI2NTsKICB0LmdyZWF0ZXJlcXVhbG9ybGVzcyA9IDB4MjJkYjsKICB0LmdyZWF0ZXJtb25vc3BhY2UgPSAweGZmMWU7CiAgdC5ncmVhdGVyb3JlcXVpdmFsZW50ID0gMHgyMjczOwogIHQuZ3JlYXRlcm9ybGVzcyA9IDB4MjI3NzsKICB0LmdyZWF0ZXJvdmVyZXF1YWwgPSAweDIyNjc7CiAgdC5ncmVhdGVyc21hbGwgPSAweGZlNjU7CiAgdC5nc2NyaXB0ID0gMHgwMjYxOwogIHQuZ3N0cm9rZSA9IDB4MDFlNTsKICB0Lmd1aGlyYWdhbmEgPSAweDMwNTA7CiAgdC5ndWlsbGVtb3RsZWZ0ID0gMHgwMGFiOwogIHQuZ3VpbGxlbW90cmlnaHQgPSAweDAwYmI7CiAgdC5ndWlsc2luZ2xsZWZ0ID0gMHgyMDM5OwogIHQuZ3VpbHNpbmdscmlnaHQgPSAweDIwM2E7CiAgdC5ndWthdGFrYW5hID0gMHgzMGIwOwogIHQuZ3VyYW11c3F1YXJlID0gMHgzMzE4OwogIHQuZ3lzcXVhcmUgPSAweDMzYzk7CiAgdC5oID0gMHgwMDY4OwogIHQuaGFhYmtoYXNpYW5jeXJpbGxpYyA9IDB4MDRhOTsKICB0LmhhYWx0b25lYXJhYmljID0gMHgwNmMxOwogIHQuaGFiZW5nYWxpID0gMHgwOWI5OwogIHQuaGFkZXNjZW5kZXJjeXJpbGxpYyA9IDB4MDRiMzsKICB0LmhhZGV2YSA9IDB4MDkzOTsKICB0LmhhZ3VqYXJhdGkgPSAweDBhYjk7CiAgdC5oYWd1cm11a2hpID0gMHgwYTM5OwogIHQuaGFoYXJhYmljID0gMHgwNjJkOwogIHQuaGFoZmluYWxhcmFiaWMgPSAweGZlYTI7CiAgdC5oYWhpbml0aWFsYXJhYmljID0gMHhmZWEzOwogIHQuaGFoaXJhZ2FuYSA9IDB4MzA2ZjsKICB0LmhhaG1lZGlhbGFyYWJpYyA9IDB4ZmVhNDsKICB0LmhhaXR1c3F1YXJlID0gMHgzMzJhOwogIHQuaGFrYXRha2FuYSA9IDB4MzBjZjsKICB0Lmhha2F0YWthbmFoYWxmd2lkdGggPSAweGZmOGE7CiAgdC5oYWxhbnRndXJtdWtoaSA9IDB4MGE0ZDsKICB0LmhhbXphYXJhYmljID0gMHgwNjIxOwogIHQuaGFtemFsb3dhcmFiaWMgPSAweDA2MjE7CiAgdC5oYW5ndWxmaWxsZXIgPSAweDMxNjQ7CiAgdC5oYXJkc2lnbmN5cmlsbGljID0gMHgwNDRhOwogIHQuaGFycG9vbmxlZnRiYXJidXAgPSAweDIxYmM7CiAgdC5oYXJwb29ucmlnaHRiYXJidXAgPSAweDIxYzA7CiAgdC5oYXNxdWFyZSA9IDB4MzNjYTsKICB0LmhhdGFmcGF0YWggPSAweDA1YjI7CiAgdC5oYXRhZnBhdGFoMTYgPSAweDA1YjI7CiAgdC5oYXRhZnBhdGFoMjMgPSAweDA1YjI7CiAgdC5oYXRhZnBhdGFoMmYgPSAweDA1YjI7CiAgdC5oYXRhZnBhdGFoaGVicmV3ID0gMHgwNWIyOwogIHQuaGF0YWZwYXRhaG5hcnJvd2hlYnJldyA9IDB4MDViMjsKICB0LmhhdGFmcGF0YWhxdWFydGVyaGVicmV3ID0gMHgwNWIyOwogIHQuaGF0YWZwYXRhaHdpZGVoZWJyZXcgPSAweDA1YjI7CiAgdC5oYXRhZnFhbWF0cyA9IDB4MDViMzsKICB0LmhhdGFmcWFtYXRzMWIgPSAweDA1YjM7CiAgdC5oYXRhZnFhbWF0czI4ID0gMHgwNWIzOwogIHQuaGF0YWZxYW1hdHMzNCA9IDB4MDViMzsKICB0LmhhdGFmcWFtYXRzaGVicmV3ID0gMHgwNWIzOwogIHQuaGF0YWZxYW1hdHNuYXJyb3doZWJyZXcgPSAweDA1YjM7CiAgdC5oYXRhZnFhbWF0c3F1YXJ0ZXJoZWJyZXcgPSAweDA1YjM7CiAgdC5oYXRhZnFhbWF0c3dpZGVoZWJyZXcgPSAweDA1YjM7CiAgdC5oYXRhZnNlZ29sID0gMHgwNWIxOwogIHQuaGF0YWZzZWdvbDE3ID0gMHgwNWIxOwogIHQuaGF0YWZzZWdvbDI0ID0gMHgwNWIxOwogIHQuaGF0YWZzZWdvbDMwID0gMHgwNWIxOwogIHQuaGF0YWZzZWdvbGhlYnJldyA9IDB4MDViMTsKICB0LmhhdGFmc2Vnb2xuYXJyb3doZWJyZXcgPSAweDA1YjE7CiAgdC5oYXRhZnNlZ29scXVhcnRlcmhlYnJldyA9IDB4MDViMTsKICB0LmhhdGFmc2Vnb2x3aWRlaGVicmV3ID0gMHgwNWIxOwogIHQuaGJhciA9IDB4MDEyNzsKICB0Lmhib3BvbW9mbyA9IDB4MzEwZjsKICB0LmhicmV2ZWJlbG93ID0gMHgxZTJiOwogIHQuaGNlZGlsbGEgPSAweDFlMjk7CiAgdC5oY2lyY2xlID0gMHgyNGQ3OwogIHQuaGNpcmN1bWZsZXggPSAweDAxMjU7CiAgdC5oZGllcmVzaXMgPSAweDFlMjc7CiAgdC5oZG90YWNjZW50ID0gMHgxZTIzOwogIHQuaGRvdGJlbG93ID0gMHgxZTI1OwogIHQuaGUgPSAweDA1ZDQ7CiAgdC5oZWFydCA9IDB4MjY2NTsKICB0LmhlYXJ0c3VpdGJsYWNrID0gMHgyNjY1OwogIHQuaGVhcnRzdWl0d2hpdGUgPSAweDI2NjE7CiAgdC5oZWRhZ2VzaCA9IDB4ZmIzNDsKICB0LmhlZGFnZXNoaGVicmV3ID0gMHhmYjM0OwogIHQuaGVoYWx0b25lYXJhYmljID0gMHgwNmMxOwogIHQuaGVoYXJhYmljID0gMHgwNjQ3OwogIHQuaGVoZWJyZXcgPSAweDA1ZDQ7CiAgdC5oZWhmaW5hbGFsdG9uZWFyYWJpYyA9IDB4ZmJhNzsKICB0LmhlaGZpbmFsYWx0dHdvYXJhYmljID0gMHhmZWVhOwogIHQuaGVoZmluYWxhcmFiaWMgPSAweGZlZWE7CiAgdC5oZWhoYW16YWFib3ZlZmluYWxhcmFiaWMgPSAweGZiYTU7CiAgdC5oZWhoYW16YWFib3ZlaXNvbGF0ZWRhcmFiaWMgPSAweGZiYTQ7CiAgdC5oZWhpbml0aWFsYWx0b25lYXJhYmljID0gMHhmYmE4OwogIHQuaGVoaW5pdGlhbGFyYWJpYyA9IDB4ZmVlYjsKICB0LmhlaGlyYWdhbmEgPSAweDMwNzg7CiAgdC5oZWhtZWRpYWxhbHRvbmVhcmFiaWMgPSAweGZiYTk7CiAgdC5oZWhtZWRpYWxhcmFiaWMgPSAweGZlZWM7CiAgdC5oZWlzZWllcmFzcXVhcmUgPSAweDMzN2I7CiAgdC5oZWthdGFrYW5hID0gMHgzMGQ4OwogIHQuaGVrYXRha2FuYWhhbGZ3aWR0aCA9IDB4ZmY4ZDsKICB0Lmhla3V0YWFydXNxdWFyZSA9IDB4MzMzNjsKICB0Lmhlbmdob29rID0gMHgwMjY3OwogIHQuaGVydXR1c3F1YXJlID0gMHgzMzM5OwogIHQuaGV0ID0gMHgwNWQ3OwogIHQuaGV0aGVicmV3ID0gMHgwNWQ3OwogIHQuaGhvb2sgPSAweDAyNjY7CiAgdC5oaG9va3N1cGVyaW9yID0gMHgwMmIxOwogIHQuaGlldWhhY2lyY2xla29yZWFuID0gMHgzMjdiOwogIHQuaGlldWhhcGFyZW5rb3JlYW4gPSAweDMyMWI7CiAgdC5oaWV1aGNpcmNsZWtvcmVhbiA9IDB4MzI2ZDsKICB0LmhpZXVoa29yZWFuID0gMHgzMTRlOwogIHQuaGlldWhwYXJlbmtvcmVhbiA9IDB4MzIwZDsKICB0LmhpaGlyYWdhbmEgPSAweDMwNzI7CiAgdC5oaWthdGFrYW5hID0gMHgzMGQyOwogIHQuaGlrYXRha2FuYWhhbGZ3aWR0aCA9IDB4ZmY4YjsKICB0LmhpcmlxID0gMHgwNWI0OwogIHQuaGlyaXExNCA9IDB4MDViNDsKICB0LmhpcmlxMjEgPSAweDA1YjQ7CiAgdC5oaXJpcTJkID0gMHgwNWI0OwogIHQuaGlyaXFoZWJyZXcgPSAweDA1YjQ7CiAgdC5oaXJpcW5hcnJvd2hlYnJldyA9IDB4MDViNDsKICB0LmhpcmlxcXVhcnRlcmhlYnJldyA9IDB4MDViNDsKICB0Lmhpcmlxd2lkZWhlYnJldyA9IDB4MDViNDsKICB0LmhsaW5lYmVsb3cgPSAweDFlOTY7CiAgdC5obW9ub3NwYWNlID0gMHhmZjQ4OwogIHQuaG9hcm1lbmlhbiA9IDB4MDU3MDsKICB0LmhvaGlwdGhhaSA9IDB4MGUyYjsKICB0LmhvaGlyYWdhbmEgPSAweDMwN2I7CiAgdC5ob2thdGFrYW5hID0gMHgzMGRiOwogIHQuaG9rYXRha2FuYWhhbGZ3aWR0aCA9IDB4ZmY4ZTsKICB0LmhvbGFtID0gMHgwNWI5OwogIHQuaG9sYW0xOSA9IDB4MDViOTsKICB0LmhvbGFtMjYgPSAweDA1Yjk7CiAgdC5ob2xhbTMyID0gMHgwNWI5OwogIHQuaG9sYW1oZWJyZXcgPSAweDA1Yjk7CiAgdC5ob2xhbW5hcnJvd2hlYnJldyA9IDB4MDViOTsKICB0LmhvbGFtcXVhcnRlcmhlYnJldyA9IDB4MDViOTsKICB0LmhvbGFtd2lkZWhlYnJldyA9IDB4MDViOTsKICB0Lmhvbm9raHVrdGhhaSA9IDB4MGUyZTsKICB0Lmhvb2thYm92ZWNvbWIgPSAweDAzMDk7CiAgdC5ob29rY21iID0gMHgwMzA5OwogIHQuaG9va3BhbGF0YWxpemVkYmVsb3djbWIgPSAweDAzMjE7CiAgdC5ob29rcmV0cm9mbGV4YmVsb3djbWIgPSAweDAzMjI7CiAgdC5ob29uc3F1YXJlID0gMHgzMzQyOwogIHQuaG9yaWNvcHRpYyA9IDB4MDNlOTsKICB0Lmhvcml6b250YWxiYXIgPSAweDIwMTU7CiAgdC5ob3JuY21iID0gMHgwMzFiOwogIHQuaG90c3ByaW5ncyA9IDB4MjY2ODsKICB0LmhvdXNlID0gMHgyMzAyOwogIHQuaHBhcmVuID0gMHgyNGEzOwogIHQuaHN1cGVyaW9yID0gMHgwMmIwOwogIHQuaHR1cm5lZCA9IDB4MDI2NTsKICB0Lmh1aGlyYWdhbmEgPSAweDMwNzU7CiAgdC5odWlpdG9zcXVhcmUgPSAweDMzMzM7CiAgdC5odWthdGFrYW5hID0gMHgzMGQ1OwogIHQuaHVrYXRha2FuYWhhbGZ3aWR0aCA9IDB4ZmY4YzsKICB0Lmh1bmdhcnVtbGF1dCA9IDB4MDJkZDsKICB0Lmh1bmdhcnVtbGF1dGNtYiA9IDB4MDMwYjsKICB0Lmh2ID0gMHgwMTk1OwogIHQuaHlwaGVuID0gMHgwMDJkOwogIHQuaHlwaGVuaW5mZXJpb3IgPSAweGY2ZTU7CiAgdC5oeXBoZW5tb25vc3BhY2UgPSAweGZmMGQ7CiAgdC5oeXBoZW5zbWFsbCA9IDB4ZmU2MzsKICB0Lmh5cGhlbnN1cGVyaW9yID0gMHhmNmU2OwogIHQuaHlwaGVudHdvID0gMHgyMDEwOwogIHQuaSA9IDB4MDA2OTsKICB0LmlhY3V0ZSA9IDB4MDBlZDsKICB0LmlhY3lyaWxsaWMgPSAweDA0NGY7CiAgdC5pYmVuZ2FsaSA9IDB4MDk4NzsKICB0Lmlib3BvbW9mbyA9IDB4MzEyNzsKICB0LmlicmV2ZSA9IDB4MDEyZDsKICB0LmljYXJvbiA9IDB4MDFkMDsKICB0LmljaXJjbGUgPSAweDI0ZDg7CiAgdC5pY2lyY3VtZmxleCA9IDB4MDBlZTsKICB0LmljeXJpbGxpYyA9IDB4MDQ1NjsKICB0LmlkYmxncmF2ZSA9IDB4MDIwOTsKICB0LmlkZW9ncmFwaGVhcnRoY2lyY2xlID0gMHgzMjhmOwogIHQuaWRlb2dyYXBoZmlyZWNpcmNsZSA9IDB4MzI4YjsKICB0LmlkZW9ncmFwaGljYWxsaWFuY2VwYXJlbiA9IDB4MzIzZjsKICB0LmlkZW9ncmFwaGljY2FsbHBhcmVuID0gMHgzMjNhOwogIHQuaWRlb2dyYXBoaWNjZW50cmVjaXJjbGUgPSAweDMyYTU7CiAgdC5pZGVvZ3JhcGhpY2Nsb3NlID0gMHgzMDA2OwogIHQuaWRlb2dyYXBoaWNjb21tYSA9IDB4MzAwMTsKICB0LmlkZW9ncmFwaGljY29tbWFsZWZ0ID0gMHhmZjY0OwogIHQuaWRlb2dyYXBoaWNjb25ncmF0dWxhdGlvbnBhcmVuID0gMHgzMjM3OwogIHQuaWRlb2dyYXBoaWNjb3JyZWN0Y2lyY2xlID0gMHgzMmEzOwogIHQuaWRlb2dyYXBoaWNlYXJ0aHBhcmVuID0gMHgzMjJmOwogIHQuaWRlb2dyYXBoaWNlbnRlcnByaXNlcGFyZW4gPSAweDMyM2Q7CiAgdC5pZGVvZ3JhcGhpY2V4Y2VsbGVudGNpcmNsZSA9IDB4MzI5ZDsKICB0LmlkZW9ncmFwaGljZmVzdGl2YWxwYXJlbiA9IDB4MzI0MDsKICB0LmlkZW9ncmFwaGljZmluYW5jaWFsY2lyY2xlID0gMHgzMjk2OwogIHQuaWRlb2dyYXBoaWNmaW5hbmNpYWxwYXJlbiA9IDB4MzIzNjsKICB0LmlkZW9ncmFwaGljZmlyZXBhcmVuID0gMHgzMjJiOwogIHQuaWRlb2dyYXBoaWNoYXZlcGFyZW4gPSAweDMyMzI7CiAgdC5pZGVvZ3JhcGhpY2hpZ2hjaXJjbGUgPSAweDMyYTQ7CiAgdC5pZGVvZ3JhcGhpY2l0ZXJhdGlvbm1hcmsgPSAweDMwMDU7CiAgdC5pZGVvZ3JhcGhpY2xhYm9yY2lyY2xlID0gMHgzMjk4OwogIHQuaWRlb2dyYXBoaWNsYWJvcnBhcmVuID0gMHgzMjM4OwogIHQuaWRlb2dyYXBoaWNsZWZ0Y2lyY2xlID0gMHgzMmE3OwogIHQuaWRlb2dyYXBoaWNsb3djaXJjbGUgPSAweDMyYTY7CiAgdC5pZGVvZ3JhcGhpY21lZGljaW5lY2lyY2xlID0gMHgzMmE5OwogIHQuaWRlb2dyYXBoaWNtZXRhbHBhcmVuID0gMHgzMjJlOwogIHQuaWRlb2dyYXBoaWNtb29ucGFyZW4gPSAweDMyMmE7CiAgdC5pZGVvZ3JhcGhpY25hbWVwYXJlbiA9IDB4MzIzNDsKICB0LmlkZW9ncmFwaGljcGVyaW9kID0gMHgzMDAyOwogIHQuaWRlb2dyYXBoaWNwcmludGNpcmNsZSA9IDB4MzI5ZTsKICB0LmlkZW9ncmFwaGljcmVhY2hwYXJlbiA9IDB4MzI0MzsKICB0LmlkZW9ncmFwaGljcmVwcmVzZW50cGFyZW4gPSAweDMyMzk7CiAgdC5pZGVvZ3JhcGhpY3Jlc291cmNlcGFyZW4gPSAweDMyM2U7CiAgdC5pZGVvZ3JhcGhpY3JpZ2h0Y2lyY2xlID0gMHgzMmE4OwogIHQuaWRlb2dyYXBoaWNzZWNyZXRjaXJjbGUgPSAweDMyOTk7CiAgdC5pZGVvZ3JhcGhpY3NlbGZwYXJlbiA9IDB4MzI0MjsKICB0LmlkZW9ncmFwaGljc29jaWV0eXBhcmVuID0gMHgzMjMzOwogIHQuaWRlb2dyYXBoaWNzcGFjZSA9IDB4MzAwMDsKICB0LmlkZW9ncmFwaGljc3BlY2lhbHBhcmVuID0gMHgzMjM1OwogIHQuaWRlb2dyYXBoaWNzdG9ja3BhcmVuID0gMHgzMjMxOwogIHQuaWRlb2dyYXBoaWNzdHVkeXBhcmVuID0gMHgzMjNiOwogIHQuaWRlb2dyYXBoaWNzdW5wYXJlbiA9IDB4MzIzMDsKICB0LmlkZW9ncmFwaGljc3VwZXJ2aXNlcGFyZW4gPSAweDMyM2M7CiAgdC5pZGVvZ3JhcGhpY3dhdGVycGFyZW4gPSAweDMyMmM7CiAgdC5pZGVvZ3JhcGhpY3dvb2RwYXJlbiA9IDB4MzIyZDsKICB0LmlkZW9ncmFwaGljemVybyA9IDB4MzAwNzsKICB0LmlkZW9ncmFwaG1ldGFsY2lyY2xlID0gMHgzMjhlOwogIHQuaWRlb2dyYXBobW9vbmNpcmNsZSA9IDB4MzI4YTsKICB0LmlkZW9ncmFwaG5hbWVjaXJjbGUgPSAweDMyOTQ7CiAgdC5pZGVvZ3JhcGhzdW5jaXJjbGUgPSAweDMyOTA7CiAgdC5pZGVvZ3JhcGh3YXRlcmNpcmNsZSA9IDB4MzI4YzsKICB0LmlkZW9ncmFwaHdvb2RjaXJjbGUgPSAweDMyOGQ7CiAgdC5pZGV2YSA9IDB4MDkwNzsKICB0LmlkaWVyZXNpcyA9IDB4MDBlZjsKICB0LmlkaWVyZXNpc2FjdXRlID0gMHgxZTJmOwogIHQuaWRpZXJlc2lzY3lyaWxsaWMgPSAweDA0ZTU7CiAgdC5pZG90YmVsb3cgPSAweDFlY2I7CiAgdC5pZWJyZXZlY3lyaWxsaWMgPSAweDA0ZDc7CiAgdC5pZWN5cmlsbGljID0gMHgwNDM1OwogIHQuaWV1bmdhY2lyY2xla29yZWFuID0gMHgzMjc1OwogIHQuaWV1bmdhcGFyZW5rb3JlYW4gPSAweDMyMTU7CiAgdC5pZXVuZ2NpcmNsZWtvcmVhbiA9IDB4MzI2NzsKICB0LmlldW5na29yZWFuID0gMHgzMTQ3OwogIHQuaWV1bmdwYXJlbmtvcmVhbiA9IDB4MzIwNzsKICB0LmlncmF2ZSA9IDB4MDBlYzsKICB0LmlndWphcmF0aSA9IDB4MGE4NzsKICB0LmlndXJtdWtoaSA9IDB4MGEwNzsKICB0LmloaXJhZ2FuYSA9IDB4MzA0NDsKICB0Lmlob29rYWJvdmUgPSAweDFlYzk7CiAgdC5paWJlbmdhbGkgPSAweDA5ODg7CiAgdC5paWN5cmlsbGljID0gMHgwNDM4OwogIHQuaWlkZXZhID0gMHgwOTA4OwogIHQuaWlndWphcmF0aSA9IDB4MGE4ODsKICB0LmlpZ3VybXVraGkgPSAweDBhMDg7CiAgdC5paW1hdHJhZ3VybXVraGkgPSAweDBhNDA7CiAgdC5paW52ZXJ0ZWRicmV2ZSA9IDB4MDIwYjsKICB0Lmlpc2hvcnRjeXJpbGxpYyA9IDB4MDQzOTsKICB0Lmlpdm93ZWxzaWduYmVuZ2FsaSA9IDB4MDljMDsKICB0Lmlpdm93ZWxzaWduZGV2YSA9IDB4MDk0MDsKICB0Lmlpdm93ZWxzaWduZ3VqYXJhdGkgPSAweDBhYzA7CiAgdC5paiA9IDB4MDEzMzsKICB0LmlrYXRha2FuYSA9IDB4MzBhNDsKICB0LmlrYXRha2FuYWhhbGZ3aWR0aCA9IDB4ZmY3MjsKICB0Lmlrb3JlYW4gPSAweDMxNjM7CiAgdC5pbGRlID0gMHgwMmRjOwogIHQuaWx1eWhlYnJldyA9IDB4MDVhYzsKICB0LmltYWNyb24gPSAweDAxMmI7CiAgdC5pbWFjcm9uY3lyaWxsaWMgPSAweDA0ZTM7CiAgdC5pbWFnZW9yYXBwcm94aW1hdGVseWVxdWFsID0gMHgyMjUzOwogIHQuaW1hdHJhZ3VybXVraGkgPSAweDBhM2Y7CiAgdC5pbW9ub3NwYWNlID0gMHhmZjQ5OwogIHQuaW5jcmVtZW50ID0gMHgyMjA2OwogIHQuaW5maW5pdHkgPSAweDIyMWU7CiAgdC5pbmlhcm1lbmlhbiA9IDB4MDU2YjsKICB0LmludGVncmFsID0gMHgyMjJiOwogIHQuaW50ZWdyYWxib3R0b20gPSAweDIzMjE7CiAgdC5pbnRlZ3JhbGJ0ID0gMHgyMzIxOwogIHQuaW50ZWdyYWxleCA9IDB4ZjhmNTsKICB0LmludGVncmFsdG9wID0gMHgyMzIwOwogIHQuaW50ZWdyYWx0cCA9IDB4MjMyMDsKICB0LmludGVyc2VjdGlvbiA9IDB4MjIyOTsKICB0LmludGlzcXVhcmUgPSAweDMzMDU7CiAgdC5pbnZidWxsZXQgPSAweDI1ZDg7CiAgdC5pbnZjaXJjbGUgPSAweDI1ZDk7CiAgdC5pbnZzbWlsZWZhY2UgPSAweDI2M2I7CiAgdC5pb2N5cmlsbGljID0gMHgwNDUxOwogIHQuaW9nb25layA9IDB4MDEyZjsKICB0LmlvdGEgPSAweDAzYjk7CiAgdC5pb3RhZGllcmVzaXMgPSAweDAzY2E7CiAgdC5pb3RhZGllcmVzaXN0b25vcyA9IDB4MDM5MDsKICB0LmlvdGFsYXRpbiA9IDB4MDI2OTsKICB0LmlvdGF0b25vcyA9IDB4MDNhZjsKICB0LmlwYXJlbiA9IDB4MjRhNDsKICB0LmlyaWd1cm11a2hpID0gMHgwYTcyOwogIHQuaXNtYWxsaGlyYWdhbmEgPSAweDMwNDM7CiAgdC5pc21hbGxrYXRha2FuYSA9IDB4MzBhMzsKICB0LmlzbWFsbGthdGFrYW5haGFsZndpZHRoID0gMHhmZjY4OwogIHQuaXNzaGFyYmVuZ2FsaSA9IDB4MDlmYTsKICB0LmlzdHJva2UgPSAweDAyNjg7CiAgdC5pc3VwZXJpb3IgPSAweGY2ZWQ7CiAgdC5pdGVyYXRpb25oaXJhZ2FuYSA9IDB4MzA5ZDsKICB0Lml0ZXJhdGlvbmthdGFrYW5hID0gMHgzMGZkOwogIHQuaXRpbGRlID0gMHgwMTI5OwogIHQuaXRpbGRlYmVsb3cgPSAweDFlMmQ7CiAgdC5pdWJvcG9tb2ZvID0gMHgzMTI5OwogIHQuaXVjeXJpbGxpYyA9IDB4MDQ0ZTsKICB0Lml2b3dlbHNpZ25iZW5nYWxpID0gMHgwOWJmOwogIHQuaXZvd2Vsc2lnbmRldmEgPSAweDA5M2Y7CiAgdC5pdm93ZWxzaWduZ3VqYXJhdGkgPSAweDBhYmY7CiAgdC5pemhpdHNhY3lyaWxsaWMgPSAweDA0NzU7CiAgdC5pemhpdHNhZGJsZ3JhdmVjeXJpbGxpYyA9IDB4MDQ3NzsKICB0LmogPSAweDAwNmE7CiAgdC5qYWFybWVuaWFuID0gMHgwNTcxOwogIHQuamFiZW5nYWxpID0gMHgwOTljOwogIHQuamFkZXZhID0gMHgwOTFjOwogIHQuamFndWphcmF0aSA9IDB4MGE5YzsKICB0LmphZ3VybXVraGkgPSAweDBhMWM7CiAgdC5qYm9wb21vZm8gPSAweDMxMTA7CiAgdC5qY2Fyb24gPSAweDAxZjA7CiAgdC5qY2lyY2xlID0gMHgyNGQ5OwogIHQuamNpcmN1bWZsZXggPSAweDAxMzU7CiAgdC5qY3Jvc3NlZHRhaWwgPSAweDAyOWQ7CiAgdC5qZG90bGVzc3N0cm9rZSA9IDB4MDI1ZjsKICB0LmplY3lyaWxsaWMgPSAweDA0NTg7CiAgdC5qZWVtYXJhYmljID0gMHgwNjJjOwogIHQuamVlbWZpbmFsYXJhYmljID0gMHhmZTllOwogIHQuamVlbWluaXRpYWxhcmFiaWMgPSAweGZlOWY7CiAgdC5qZWVtbWVkaWFsYXJhYmljID0gMHhmZWEwOwogIHQuamVoYXJhYmljID0gMHgwNjk4OwogIHQuamVoZmluYWxhcmFiaWMgPSAweGZiOGI7CiAgdC5qaGFiZW5nYWxpID0gMHgwOTlkOwogIHQuamhhZGV2YSA9IDB4MDkxZDsKICB0LmpoYWd1amFyYXRpID0gMHgwYTlkOwogIHQuamhhZ3VybXVraGkgPSAweDBhMWQ7CiAgdC5qaGVoYXJtZW5pYW4gPSAweDA1N2I7CiAgdC5qaXMgPSAweDMwMDQ7CiAgdC5qbW9ub3NwYWNlID0gMHhmZjRhOwogIHQuanBhcmVuID0gMHgyNGE1OwogIHQuanN1cGVyaW9yID0gMHgwMmIyOwogIHQuayA9IDB4MDA2YjsKICB0LmthYmFzaGtpcmN5cmlsbGljID0gMHgwNGExOwogIHQua2FiZW5nYWxpID0gMHgwOTk1OwogIHQua2FjdXRlID0gMHgxZTMxOwogIHQua2FjeXJpbGxpYyA9IDB4MDQzYTsKICB0LmthZGVzY2VuZGVyY3lyaWxsaWMgPSAweDA0OWI7CiAgdC5rYWRldmEgPSAweDA5MTU7CiAgdC5rYWYgPSAweDA1ZGI7CiAgdC5rYWZhcmFiaWMgPSAweDA2NDM7CiAgdC5rYWZkYWdlc2ggPSAweGZiM2I7CiAgdC5rYWZkYWdlc2hoZWJyZXcgPSAweGZiM2I7CiAgdC5rYWZmaW5hbGFyYWJpYyA9IDB4ZmVkYTsKICB0LmthZmhlYnJldyA9IDB4MDVkYjsKICB0LmthZmluaXRpYWxhcmFiaWMgPSAweGZlZGI7CiAgdC5rYWZtZWRpYWxhcmFiaWMgPSAweGZlZGM7CiAgdC5rYWZyYWZlaGVicmV3ID0gMHhmYjRkOwogIHQua2FndWphcmF0aSA9IDB4MGE5NTsKICB0LmthZ3VybXVraGkgPSAweDBhMTU7CiAgdC5rYWhpcmFnYW5hID0gMHgzMDRiOwogIHQua2Fob29rY3lyaWxsaWMgPSAweDA0YzQ7CiAgdC5rYWthdGFrYW5hID0gMHgzMGFiOwogIHQua2FrYXRha2FuYWhhbGZ3aWR0aCA9IDB4ZmY3NjsKICB0LmthcHBhID0gMHgwM2JhOwogIHQua2FwcGFzeW1ib2xncmVlayA9IDB4MDNmMDsKICB0LmthcHllb3VubWlldW1rb3JlYW4gPSAweDMxNzE7CiAgdC5rYXB5ZW91bnBoaWV1cGhrb3JlYW4gPSAweDMxODQ7CiAgdC5rYXB5ZW91bnBpZXVwa29yZWFuID0gMHgzMTc4OwogIHQua2FweWVvdW5zc2FuZ3BpZXVwa29yZWFuID0gMHgzMTc5OwogIHQua2Fyb3JpaXNxdWFyZSA9IDB4MzMwZDsKICB0Lmthc2hpZGFhdXRvYXJhYmljID0gMHgwNjQwOwogIHQua2FzaGlkYWF1dG9ub3NpZGViZWFyaW5nYXJhYmljID0gMHgwNjQwOwogIHQua2FzbWFsbGthdGFrYW5hID0gMHgzMGY1OwogIHQua2FzcXVhcmUgPSAweDMzODQ7CiAgdC5rYXNyYWFyYWJpYyA9IDB4MDY1MDsKICB0Lmthc3JhdGFuYXJhYmljID0gMHgwNjRkOwogIHQua2FzdHJva2VjeXJpbGxpYyA9IDB4MDQ5ZjsKICB0LmthdGFoaXJhcHJvbG9uZ21hcmtoYWxmd2lkdGggPSAweGZmNzA7CiAgdC5rYXZlcnRpY2Fsc3Ryb2tlY3lyaWxsaWMgPSAweDA0OWQ7CiAgdC5rYm9wb21vZm8gPSAweDMxMGU7CiAgdC5rY2Fsc3F1YXJlID0gMHgzMzg5OwogIHQua2Nhcm9uID0gMHgwMWU5OwogIHQua2NlZGlsbGEgPSAweDAxMzc7CiAgdC5rY2lyY2xlID0gMHgyNGRhOwogIHQua2NvbW1hYWNjZW50ID0gMHgwMTM3OwogIHQua2RvdGJlbG93ID0gMHgxZTMzOwogIHQua2VoYXJtZW5pYW4gPSAweDA1ODQ7CiAgdC5rZWhpcmFnYW5hID0gMHgzMDUxOwogIHQua2VrYXRha2FuYSA9IDB4MzBiMTsKICB0Lmtla2F0YWthbmFoYWxmd2lkdGggPSAweGZmNzk7CiAgdC5rZW5hcm1lbmlhbiA9IDB4MDU2ZjsKICB0Lmtlc21hbGxrYXRha2FuYSA9IDB4MzBmNjsKICB0LmtncmVlbmxhbmRpYyA9IDB4MDEzODsKICB0LmtoYWJlbmdhbGkgPSAweDA5OTY7CiAgdC5raGFjeXJpbGxpYyA9IDB4MDQ0NTsKICB0LmtoYWRldmEgPSAweDA5MTY7CiAgdC5raGFndWphcmF0aSA9IDB4MGE5NjsKICB0LmtoYWd1cm11a2hpID0gMHgwYTE2OwogIHQua2hhaGFyYWJpYyA9IDB4MDYyZTsKICB0LmtoYWhmaW5hbGFyYWJpYyA9IDB4ZmVhNjsKICB0LmtoYWhpbml0aWFsYXJhYmljID0gMHhmZWE3OwogIHQua2hhaG1lZGlhbGFyYWJpYyA9IDB4ZmVhODsKICB0LmtoZWljb3B0aWMgPSAweDAzZTc7CiAgdC5raGhhZGV2YSA9IDB4MDk1OTsKICB0LmtoaGFndXJtdWtoaSA9IDB4MGE1OTsKICB0LmtoaWV1a2hhY2lyY2xla29yZWFuID0gMHgzMjc4OwogIHQua2hpZXVraGFwYXJlbmtvcmVhbiA9IDB4MzIxODsKICB0LmtoaWV1a2hjaXJjbGVrb3JlYW4gPSAweDMyNmE7CiAgdC5raGlldWtoa29yZWFuID0gMHgzMTRiOwogIHQua2hpZXVraHBhcmVua29yZWFuID0gMHgzMjBhOwogIHQua2hva2hhaXRoYWkgPSAweDBlMDI7CiAgdC5raG9raG9udGhhaSA9IDB4MGUwNTsKICB0Lmtob2todWF0dGhhaSA9IDB4MGUwMzsKICB0Lmtob2tod2FpdGhhaSA9IDB4MGUwNDsKICB0Lmtob211dHRoYWkgPSAweDBlNWI7CiAgdC5raG9vayA9IDB4MDE5OTsKICB0Lmtob3Jha2hhbmd0aGFpID0gMHgwZTA2OwogIHQua2h6c3F1YXJlID0gMHgzMzkxOwogIHQua2loaXJhZ2FuYSA9IDB4MzA0ZDsKICB0Lmtpa2F0YWthbmEgPSAweDMwYWQ7CiAgdC5raWthdGFrYW5haGFsZndpZHRoID0gMHhmZjc3OwogIHQua2lyb2d1cmFtdXNxdWFyZSA9IDB4MzMxNTsKICB0Lmtpcm9tZWV0b3J1c3F1YXJlID0gMHgzMzE2OwogIHQua2lyb3NxdWFyZSA9IDB4MzMxNDsKICB0LmtpeWVva2FjaXJjbGVrb3JlYW4gPSAweDMyNmU7CiAgdC5raXllb2thcGFyZW5rb3JlYW4gPSAweDMyMGU7CiAgdC5raXllb2tjaXJjbGVrb3JlYW4gPSAweDMyNjA7CiAgdC5raXllb2trb3JlYW4gPSAweDMxMzE7CiAgdC5raXllb2twYXJlbmtvcmVhbiA9IDB4MzIwMDsKICB0LmtpeWVva3Npb3Nrb3JlYW4gPSAweDMxMzM7CiAgdC5ramVjeXJpbGxpYyA9IDB4MDQ1YzsKICB0LmtsaW5lYmVsb3cgPSAweDFlMzU7CiAgdC5rbHNxdWFyZSA9IDB4MzM5ODsKICB0LmttY3ViZWRzcXVhcmUgPSAweDMzYTY7CiAgdC5rbW9ub3NwYWNlID0gMHhmZjRiOwogIHQua21zcXVhcmVkc3F1YXJlID0gMHgzM2EyOwogIHQua29oaXJhZ2FuYSA9IDB4MzA1MzsKICB0LmtvaG1zcXVhcmUgPSAweDMzYzA7CiAgdC5rb2thaXRoYWkgPSAweDBlMDE7CiAgdC5rb2thdGFrYW5hID0gMHgzMGIzOwogIHQua29rYXRha2FuYWhhbGZ3aWR0aCA9IDB4ZmY3YTsKICB0Lmtvb3Bvc3F1YXJlID0gMHgzMzFlOwogIHQua29wcGFjeXJpbGxpYyA9IDB4MDQ4MTsKICB0LmtvcmVhbnN0YW5kYXJkc3ltYm9sID0gMHgzMjdmOwogIHQua29yb25pc2NtYiA9IDB4MDM0MzsKICB0LmtwYXJlbiA9IDB4MjRhNjsKICB0LmtwYXNxdWFyZSA9IDB4MzNhYTsKICB0LmtzaWN5cmlsbGljID0gMHgwNDZmOwogIHQua3RzcXVhcmUgPSAweDMzY2Y7CiAgdC5rdHVybmVkID0gMHgwMjllOwogIHQua3VoaXJhZ2FuYSA9IDB4MzA0ZjsKICB0Lmt1a2F0YWthbmEgPSAweDMwYWY7CiAgdC5rdWthdGFrYW5haGFsZndpZHRoID0gMHhmZjc4OwogIHQua3ZzcXVhcmUgPSAweDMzYjg7CiAgdC5rd3NxdWFyZSA9IDB4MzNiZTsKICB0LmwgPSAweDAwNmM7CiAgdC5sYWJlbmdhbGkgPSAweDA5YjI7CiAgdC5sYWN1dGUgPSAweDAxM2E7CiAgdC5sYWRldmEgPSAweDA5MzI7CiAgdC5sYWd1amFyYXRpID0gMHgwYWIyOwogIHQubGFndXJtdWtoaSA9IDB4MGEzMjsKICB0Lmxha2toYW5neWFvdGhhaSA9IDB4MGU0NTsKICB0LmxhbWFsZWZmaW5hbGFyYWJpYyA9IDB4ZmVmYzsKICB0LmxhbWFsZWZoYW16YWFib3ZlZmluYWxhcmFiaWMgPSAweGZlZjg7CiAgdC5sYW1hbGVmaGFtemFhYm92ZWlzb2xhdGVkYXJhYmljID0gMHhmZWY3OwogIHQubGFtYWxlZmhhbXphYmVsb3dmaW5hbGFyYWJpYyA9IDB4ZmVmYTsKICB0LmxhbWFsZWZoYW16YWJlbG93aXNvbGF0ZWRhcmFiaWMgPSAweGZlZjk7CiAgdC5sYW1hbGVmaXNvbGF0ZWRhcmFiaWMgPSAweGZlZmI7CiAgdC5sYW1hbGVmbWFkZGFhYm92ZWZpbmFsYXJhYmljID0gMHhmZWY2OwogIHQubGFtYWxlZm1hZGRhYWJvdmVpc29sYXRlZGFyYWJpYyA9IDB4ZmVmNTsKICB0LmxhbWFyYWJpYyA9IDB4MDY0NDsKICB0LmxhbWJkYSA9IDB4MDNiYjsKICB0LmxhbWJkYXN0cm9rZSA9IDB4MDE5YjsKICB0LmxhbWVkID0gMHgwNWRjOwogIHQubGFtZWRkYWdlc2ggPSAweGZiM2M7CiAgdC5sYW1lZGRhZ2VzaGhlYnJldyA9IDB4ZmIzYzsKICB0LmxhbWVkaGVicmV3ID0gMHgwNWRjOwogIHQubGFtZmluYWxhcmFiaWMgPSAweGZlZGU7CiAgdC5sYW1oYWhpbml0aWFsYXJhYmljID0gMHhmY2NhOwogIHQubGFtaW5pdGlhbGFyYWJpYyA9IDB4ZmVkZjsKICB0LmxhbWplZW1pbml0aWFsYXJhYmljID0gMHhmY2M5OwogIHQubGFta2hhaGluaXRpYWxhcmFiaWMgPSAweGZjY2I7CiAgdC5sYW1sYW1oZWhpc29sYXRlZGFyYWJpYyA9IDB4ZmRmMjsKICB0LmxhbW1lZGlhbGFyYWJpYyA9IDB4ZmVlMDsKICB0LmxhbW1lZW1oYWhpbml0aWFsYXJhYmljID0gMHhmZDg4OwogIHQubGFtbWVlbWluaXRpYWxhcmFiaWMgPSAweGZjY2M7CiAgdC5sYXJnZWNpcmNsZSA9IDB4MjVlZjsKICB0LmxiYXIgPSAweDAxOWE7CiAgdC5sYmVsdCA9IDB4MDI2YzsKICB0Lmxib3BvbW9mbyA9IDB4MzEwYzsKICB0LmxjYXJvbiA9IDB4MDEzZTsKICB0LmxjZWRpbGxhID0gMHgwMTNjOwogIHQubGNpcmNsZSA9IDB4MjRkYjsKICB0LmxjaXJjdW1mbGV4YmVsb3cgPSAweDFlM2Q7CiAgdC5sY29tbWFhY2NlbnQgPSAweDAxM2M7CiAgdC5sZG90ID0gMHgwMTQwOwogIHQubGRvdGFjY2VudCA9IDB4MDE0MDsKICB0Lmxkb3RiZWxvdyA9IDB4MWUzNzsKICB0Lmxkb3RiZWxvd21hY3JvbiA9IDB4MWUzOTsKICB0LmxlZnRhbmdsZWFib3ZlY21iID0gMHgwMzFhOwogIHQubGVmdHRhY2tiZWxvd2NtYiA9IDB4MDMxODsKICB0Lmxlc3MgPSAweDAwM2M7CiAgdC5sZXNzZXF1YWwgPSAweDIyNjQ7CiAgdC5sZXNzZXF1YWxvcmdyZWF0ZXIgPSAweDIyZGE7CiAgdC5sZXNzbW9ub3NwYWNlID0gMHhmZjFjOwogIHQubGVzc29yZXF1aXZhbGVudCA9IDB4MjI3MjsKICB0Lmxlc3NvcmdyZWF0ZXIgPSAweDIyNzY7CiAgdC5sZXNzb3ZlcmVxdWFsID0gMHgyMjY2OwogIHQubGVzc3NtYWxsID0gMHhmZTY0OwogIHQubGV6aCA9IDB4MDI2ZTsKICB0LmxmYmxvY2sgPSAweDI1OGM7CiAgdC5saG9va3JldHJvZmxleCA9IDB4MDI2ZDsKICB0LmxpcmEgPSAweDIwYTQ7CiAgdC5saXduYXJtZW5pYW4gPSAweDA1NmM7CiAgdC5saiA9IDB4MDFjOTsKICB0LmxqZWN5cmlsbGljID0gMHgwNDU5OwogIHQubGwgPSAweGY2YzA7CiAgdC5sbGFkZXZhID0gMHgwOTMzOwogIHQubGxhZ3VqYXJhdGkgPSAweDBhYjM7CiAgdC5sbGluZWJlbG93ID0gMHgxZTNiOwogIHQubGxsYWRldmEgPSAweDA5MzQ7CiAgdC5sbHZvY2FsaWNiZW5nYWxpID0gMHgwOWUxOwogIHQubGx2b2NhbGljZGV2YSA9IDB4MDk2MTsKICB0Lmxsdm9jYWxpY3Zvd2Vsc2lnbmJlbmdhbGkgPSAweDA5ZTM7CiAgdC5sbHZvY2FsaWN2b3dlbHNpZ25kZXZhID0gMHgwOTYzOwogIHQubG1pZGRsZXRpbGRlID0gMHgwMjZiOwogIHQubG1vbm9zcGFjZSA9IDB4ZmY0YzsKICB0Lmxtc3F1YXJlID0gMHgzM2QwOwogIHQubG9jaHVsYXRoYWkgPSAweDBlMmM7CiAgdC5sb2dpY2FsYW5kID0gMHgyMjI3OwogIHQubG9naWNhbG5vdCA9IDB4MDBhYzsKICB0LmxvZ2ljYWxub3RyZXZlcnNlZCA9IDB4MjMxMDsKICB0LmxvZ2ljYWxvciA9IDB4MjIyODsKICB0LmxvbGluZ3RoYWkgPSAweDBlMjU7CiAgdC5sb25ncyA9IDB4MDE3ZjsKICB0Lmxvd2xpbmVjZW50ZXJsaW5lID0gMHhmZTRlOwogIHQubG93bGluZWNtYiA9IDB4MDMzMjsKICB0Lmxvd2xpbmVkYXNoZWQgPSAweGZlNGQ7CiAgdC5sb3plbmdlID0gMHgyNWNhOwogIHQubHBhcmVuID0gMHgyNGE3OwogIHQubHNsYXNoID0gMHgwMTQyOwogIHQubHNxdWFyZSA9IDB4MjExMzsKICB0LmxzdXBlcmlvciA9IDB4ZjZlZTsKICB0Lmx0c2hhZGUgPSAweDI1OTE7CiAgdC5sdXRoYWkgPSAweDBlMjY7CiAgdC5sdm9jYWxpY2JlbmdhbGkgPSAweDA5OGM7CiAgdC5sdm9jYWxpY2RldmEgPSAweDA5MGM7CiAgdC5sdm9jYWxpY3Zvd2Vsc2lnbmJlbmdhbGkgPSAweDA5ZTI7CiAgdC5sdm9jYWxpY3Zvd2Vsc2lnbmRldmEgPSAweDA5NjI7CiAgdC5seHNxdWFyZSA9IDB4MzNkMzsKICB0Lm0gPSAweDAwNmQ7CiAgdC5tYWJlbmdhbGkgPSAweDA5YWU7CiAgdC5tYWNyb24gPSAweDAwYWY7CiAgdC5tYWNyb25iZWxvd2NtYiA9IDB4MDMzMTsKICB0Lm1hY3JvbmNtYiA9IDB4MDMwNDsKICB0Lm1hY3Jvbmxvd21vZCA9IDB4MDJjZDsKICB0Lm1hY3Jvbm1vbm9zcGFjZSA9IDB4ZmZlMzsKICB0Lm1hY3V0ZSA9IDB4MWUzZjsKICB0Lm1hZGV2YSA9IDB4MDkyZTsKICB0Lm1hZ3VqYXJhdGkgPSAweDBhYWU7CiAgdC5tYWd1cm11a2hpID0gMHgwYTJlOwogIHQubWFoYXBha2hoZWJyZXcgPSAweDA1YTQ7CiAgdC5tYWhhcGFraGxlZnRoZWJyZXcgPSAweDA1YTQ7CiAgdC5tYWhpcmFnYW5hID0gMHgzMDdlOwogIHQubWFpY2hhdHRhd2Fsb3dsZWZ0dGhhaSA9IDB4Zjg5NTsKICB0Lm1haWNoYXR0YXdhbG93cmlnaHR0aGFpID0gMHhmODk0OwogIHQubWFpY2hhdHRhd2F0aGFpID0gMHgwZTRiOwogIHQubWFpY2hhdHRhd2F1cHBlcmxlZnR0aGFpID0gMHhmODkzOwogIHQubWFpZWtsb3dsZWZ0dGhhaSA9IDB4Zjg4YzsKICB0Lm1haWVrbG93cmlnaHR0aGFpID0gMHhmODhiOwogIHQubWFpZWt0aGFpID0gMHgwZTQ4OwogIHQubWFpZWt1cHBlcmxlZnR0aGFpID0gMHhmODhhOwogIHQubWFpaGFuYWthdGxlZnR0aGFpID0gMHhmODg0OwogIHQubWFpaGFuYWthdHRoYWkgPSAweDBlMzE7CiAgdC5tYWl0YWlraHVsZWZ0dGhhaSA9IDB4Zjg4OTsKICB0Lm1haXRhaWtodXRoYWkgPSAweDBlNDc7CiAgdC5tYWl0aG9sb3dsZWZ0dGhhaSA9IDB4Zjg4ZjsKICB0Lm1haXRob2xvd3JpZ2h0dGhhaSA9IDB4Zjg4ZTsKICB0Lm1haXRob3RoYWkgPSAweDBlNDk7CiAgdC5tYWl0aG91cHBlcmxlZnR0aGFpID0gMHhmODhkOwogIHQubWFpdHJpbG93bGVmdHRoYWkgPSAweGY4OTI7CiAgdC5tYWl0cmlsb3dyaWdodHRoYWkgPSAweGY4OTE7CiAgdC5tYWl0cml0aGFpID0gMHgwZTRhOwogIHQubWFpdHJpdXBwZXJsZWZ0dGhhaSA9IDB4Zjg5MDsKICB0Lm1haXlhbW9rdGhhaSA9IDB4MGU0NjsKICB0Lm1ha2F0YWthbmEgPSAweDMwZGU7CiAgdC5tYWthdGFrYW5haGFsZndpZHRoID0gMHhmZjhmOwogIHQubWFsZSA9IDB4MjY0MjsKICB0Lm1hbnN5b25zcXVhcmUgPSAweDMzNDc7CiAgdC5tYXFhZmhlYnJldyA9IDB4MDViZTsKICB0Lm1hcnMgPSAweDI2NDI7CiAgdC5tYXNvcmFjaXJjbGVoZWJyZXcgPSAweDA1YWY7CiAgdC5tYXNxdWFyZSA9IDB4MzM4MzsKICB0Lm1ib3BvbW9mbyA9IDB4MzEwNzsKICB0Lm1ic3F1YXJlID0gMHgzM2Q0OwogIHQubWNpcmNsZSA9IDB4MjRkYzsKICB0Lm1jdWJlZHNxdWFyZSA9IDB4MzNhNTsKICB0Lm1kb3RhY2NlbnQgPSAweDFlNDE7CiAgdC5tZG90YmVsb3cgPSAweDFlNDM7CiAgdC5tZWVtYXJhYmljID0gMHgwNjQ1OwogIHQubWVlbWZpbmFsYXJhYmljID0gMHhmZWUyOwogIHQubWVlbWluaXRpYWxhcmFiaWMgPSAweGZlZTM7CiAgdC5tZWVtbWVkaWFsYXJhYmljID0gMHhmZWU0OwogIHQubWVlbW1lZW1pbml0aWFsYXJhYmljID0gMHhmY2QxOwogIHQubWVlbW1lZW1pc29sYXRlZGFyYWJpYyA9IDB4ZmM0ODsKICB0Lm1lZXRvcnVzcXVhcmUgPSAweDMzNGQ7CiAgdC5tZWhpcmFnYW5hID0gMHgzMDgxOwogIHQubWVpemllcmFzcXVhcmUgPSAweDMzN2U7CiAgdC5tZWthdGFrYW5hID0gMHgzMGUxOwogIHQubWVrYXRha2FuYWhhbGZ3aWR0aCA9IDB4ZmY5MjsKICB0Lm1lbSA9IDB4MDVkZTsKICB0Lm1lbWRhZ2VzaCA9IDB4ZmIzZTsKICB0Lm1lbWRhZ2VzaGhlYnJldyA9IDB4ZmIzZTsKICB0Lm1lbWhlYnJldyA9IDB4MDVkZTsKICB0Lm1lbmFybWVuaWFuID0gMHgwNTc0OwogIHQubWVya2hhaGVicmV3ID0gMHgwNWE1OwogIHQubWVya2hha2VmdWxhaGVicmV3ID0gMHgwNWE2OwogIHQubWVya2hha2VmdWxhbGVmdGhlYnJldyA9IDB4MDVhNjsKICB0Lm1lcmtoYWxlZnRoZWJyZXcgPSAweDA1YTU7CiAgdC5taG9vayA9IDB4MDI3MTsKICB0Lm1oenNxdWFyZSA9IDB4MzM5MjsKICB0Lm1pZGRsZWRvdGthdGFrYW5haGFsZndpZHRoID0gMHhmZjY1OwogIHQubWlkZG90ID0gMHgwMGI3OwogIHQubWlldW1hY2lyY2xla29yZWFuID0gMHgzMjcyOwogIHQubWlldW1hcGFyZW5rb3JlYW4gPSAweDMyMTI7CiAgdC5taWV1bWNpcmNsZWtvcmVhbiA9IDB4MzI2NDsKICB0Lm1pZXVta29yZWFuID0gMHgzMTQxOwogIHQubWlldW1wYW5zaW9za29yZWFuID0gMHgzMTcwOwogIHQubWlldW1wYXJlbmtvcmVhbiA9IDB4MzIwNDsKICB0Lm1pZXVtcGlldXBrb3JlYW4gPSAweDMxNmU7CiAgdC5taWV1bXNpb3Nrb3JlYW4gPSAweDMxNmY7CiAgdC5taWhpcmFnYW5hID0gMHgzMDdmOwogIHQubWlrYXRha2FuYSA9IDB4MzBkZjsKICB0Lm1pa2F0YWthbmFoYWxmd2lkdGggPSAweGZmOTA7CiAgdC5taW51cyA9IDB4MjIxMjsKICB0Lm1pbnVzYmVsb3djbWIgPSAweDAzMjA7CiAgdC5taW51c2NpcmNsZSA9IDB4MjI5NjsKICB0Lm1pbnVzbW9kID0gMHgwMmQ3OwogIHQubWludXNwbHVzID0gMHgyMjEzOwogIHQubWludXRlID0gMHgyMDMyOwogIHQubWlyaWJhYXJ1c3F1YXJlID0gMHgzMzRhOwogIHQubWlyaXNxdWFyZSA9IDB4MzM0OTsKICB0Lm1sb25nbGVndHVybmVkID0gMHgwMjcwOwogIHQubWxzcXVhcmUgPSAweDMzOTY7CiAgdC5tbWN1YmVkc3F1YXJlID0gMHgzM2EzOwogIHQubW1vbm9zcGFjZSA9IDB4ZmY0ZDsKICB0Lm1tc3F1YXJlZHNxdWFyZSA9IDB4MzM5ZjsKICB0Lm1vaGlyYWdhbmEgPSAweDMwODI7CiAgdC5tb2htc3F1YXJlID0gMHgzM2MxOwogIHQubW9rYXRha2FuYSA9IDB4MzBlMjsKICB0Lm1va2F0YWthbmFoYWxmd2lkdGggPSAweGZmOTM7CiAgdC5tb2xzcXVhcmUgPSAweDMzZDY7CiAgdC5tb21hdGhhaSA9IDB4MGUyMTsKICB0Lm1vdmVyc3NxdWFyZSA9IDB4MzNhNzsKICB0Lm1vdmVyc3NxdWFyZWRzcXVhcmUgPSAweDMzYTg7CiAgdC5tcGFyZW4gPSAweDI0YTg7CiAgdC5tcGFzcXVhcmUgPSAweDMzYWI7CiAgdC5tc3NxdWFyZSA9IDB4MzNiMzsKICB0Lm1zdXBlcmlvciA9IDB4ZjZlZjsKICB0Lm10dXJuZWQgPSAweDAyNmY7CiAgdC5tdSA9IDB4MDBiNTsKICB0Lm11MSA9IDB4MDBiNTsKICB0Lm11YXNxdWFyZSA9IDB4MzM4MjsKICB0Lm11Y2hncmVhdGVyID0gMHgyMjZiOwogIHQubXVjaGxlc3MgPSAweDIyNmE7CiAgdC5tdWZzcXVhcmUgPSAweDMzOGM7CiAgdC5tdWdyZWVrID0gMHgwM2JjOwogIHQubXVnc3F1YXJlID0gMHgzMzhkOwogIHQubXVoaXJhZ2FuYSA9IDB4MzA4MDsKICB0Lm11a2F0YWthbmEgPSAweDMwZTA7CiAgdC5tdWthdGFrYW5haGFsZndpZHRoID0gMHhmZjkxOwogIHQubXVsc3F1YXJlID0gMHgzMzk1OwogIHQubXVsdGlwbHkgPSAweDAwZDc7CiAgdC5tdW1zcXVhcmUgPSAweDMzOWI7CiAgdC5tdW5haGhlYnJldyA9IDB4MDVhMzsKICB0Lm11bmFobGVmdGhlYnJldyA9IDB4MDVhMzsKICB0Lm11c2ljYWxub3RlID0gMHgyNjZhOwogIHQubXVzaWNhbG5vdGVkYmwgPSAweDI2NmI7CiAgdC5tdXNpY2ZsYXRzaWduID0gMHgyNjZkOwogIHQubXVzaWNzaGFycHNpZ24gPSAweDI2NmY7CiAgdC5tdXNzcXVhcmUgPSAweDMzYjI7CiAgdC5tdXZzcXVhcmUgPSAweDMzYjY7CiAgdC5tdXdzcXVhcmUgPSAweDMzYmM7CiAgdC5tdm1lZ2FzcXVhcmUgPSAweDMzYjk7CiAgdC5tdnNxdWFyZSA9IDB4MzNiNzsKICB0Lm13bWVnYXNxdWFyZSA9IDB4MzNiZjsKICB0Lm13c3F1YXJlID0gMHgzM2JkOwogIHQubiA9IDB4MDA2ZTsKICB0Lm5hYmVuZ2FsaSA9IDB4MDlhODsKICB0Lm5hYmxhID0gMHgyMjA3OwogIHQubmFjdXRlID0gMHgwMTQ0OwogIHQubmFkZXZhID0gMHgwOTI4OwogIHQubmFndWphcmF0aSA9IDB4MGFhODsKICB0Lm5hZ3VybXVraGkgPSAweDBhMjg7CiAgdC5uYWhpcmFnYW5hID0gMHgzMDZhOwogIHQubmFrYXRha2FuYSA9IDB4MzBjYTsKICB0Lm5ha2F0YWthbmFoYWxmd2lkdGggPSAweGZmODU7CiAgdC5uYXBvc3Ryb3BoZSA9IDB4MDE0OTsKICB0Lm5hc3F1YXJlID0gMHgzMzgxOwogIHQubmJvcG9tb2ZvID0gMHgzMTBiOwogIHQubmJzcGFjZSA9IDB4MDBhMDsKICB0Lm5jYXJvbiA9IDB4MDE0ODsKICB0Lm5jZWRpbGxhID0gMHgwMTQ2OwogIHQubmNpcmNsZSA9IDB4MjRkZDsKICB0Lm5jaXJjdW1mbGV4YmVsb3cgPSAweDFlNGI7CiAgdC5uY29tbWFhY2NlbnQgPSAweDAxNDY7CiAgdC5uZG90YWNjZW50ID0gMHgxZTQ1OwogIHQubmRvdGJlbG93ID0gMHgxZTQ3OwogIHQubmVoaXJhZ2FuYSA9IDB4MzA2ZDsKICB0Lm5la2F0YWthbmEgPSAweDMwY2Q7CiAgdC5uZWthdGFrYW5haGFsZndpZHRoID0gMHhmZjg4OwogIHQubmV3c2hlcWVsc2lnbiA9IDB4MjBhYTsKICB0Lm5mc3F1YXJlID0gMHgzMzhiOwogIHQubmdhYmVuZ2FsaSA9IDB4MDk5OTsKICB0Lm5nYWRldmEgPSAweDA5MTk7CiAgdC5uZ2FndWphcmF0aSA9IDB4MGE5OTsKICB0Lm5nYWd1cm11a2hpID0gMHgwYTE5OwogIHQubmdvbmd1dGhhaSA9IDB4MGUwNzsKICB0Lm5oaXJhZ2FuYSA9IDB4MzA5MzsKICB0Lm5ob29rbGVmdCA9IDB4MDI3MjsKICB0Lm5ob29rcmV0cm9mbGV4ID0gMHgwMjczOwogIHQubmlldW5hY2lyY2xla29yZWFuID0gMHgzMjZmOwogIHQubmlldW5hcGFyZW5rb3JlYW4gPSAweDMyMGY7CiAgdC5uaWV1bmNpZXVja29yZWFuID0gMHgzMTM1OwogIHQubmlldW5jaXJjbGVrb3JlYW4gPSAweDMyNjE7CiAgdC5uaWV1bmhpZXVoa29yZWFuID0gMHgzMTM2OwogIHQubmlldW5rb3JlYW4gPSAweDMxMzQ7CiAgdC5uaWV1bnBhbnNpb3Nrb3JlYW4gPSAweDMxNjg7CiAgdC5uaWV1bnBhcmVua29yZWFuID0gMHgzMjAxOwogIHQubmlldW5zaW9za29yZWFuID0gMHgzMTY3OwogIHQubmlldW50aWtldXRrb3JlYW4gPSAweDMxNjY7CiAgdC5uaWhpcmFnYW5hID0gMHgzMDZiOwogIHQubmlrYXRha2FuYSA9IDB4MzBjYjsKICB0Lm5pa2F0YWthbmFoYWxmd2lkdGggPSAweGZmODY7CiAgdC5uaWtoYWhpdGxlZnR0aGFpID0gMHhmODk5OwogIHQubmlraGFoaXR0aGFpID0gMHgwZTRkOwogIHQubmluZSA9IDB4MDAzOTsKICB0Lm5pbmVhcmFiaWMgPSAweDA2Njk7CiAgdC5uaW5lYmVuZ2FsaSA9IDB4MDllZjsKICB0Lm5pbmVjaXJjbGUgPSAweDI0Njg7CiAgdC5uaW5lY2lyY2xlaW52ZXJzZXNhbnNzZXJpZiA9IDB4Mjc5MjsKICB0Lm5pbmVkZXZhID0gMHgwOTZmOwogIHQubmluZWd1amFyYXRpID0gMHgwYWVmOwogIHQubmluZWd1cm11a2hpID0gMHgwYTZmOwogIHQubmluZWhhY2thcmFiaWMgPSAweDA2Njk7CiAgdC5uaW5laGFuZ3pob3UgPSAweDMwMjk7CiAgdC5uaW5laWRlb2dyYXBoaWNwYXJlbiA9IDB4MzIyODsKICB0Lm5pbmVpbmZlcmlvciA9IDB4MjA4OTsKICB0Lm5pbmVtb25vc3BhY2UgPSAweGZmMTk7CiAgdC5uaW5lb2xkc3R5bGUgPSAweGY3Mzk7CiAgdC5uaW5lcGFyZW4gPSAweDI0N2M7CiAgdC5uaW5lcGVyaW9kID0gMHgyNDkwOwogIHQubmluZXBlcnNpYW4gPSAweDA2Zjk7CiAgdC5uaW5lcm9tYW4gPSAweDIxNzg7CiAgdC5uaW5lc3VwZXJpb3IgPSAweDIwNzk7CiAgdC5uaW5ldGVlbmNpcmNsZSA9IDB4MjQ3MjsKICB0Lm5pbmV0ZWVucGFyZW4gPSAweDI0ODY7CiAgdC5uaW5ldGVlbnBlcmlvZCA9IDB4MjQ5YTsKICB0Lm5pbmV0aGFpID0gMHgwZTU5OwogIHQubmogPSAweDAxY2M7CiAgdC5uamVjeXJpbGxpYyA9IDB4MDQ1YTsKICB0Lm5rYXRha2FuYSA9IDB4MzBmMzsKICB0Lm5rYXRha2FuYWhhbGZ3aWR0aCA9IDB4ZmY5ZDsKICB0Lm5sZWdyaWdodGxvbmcgPSAweDAxOWU7CiAgdC5ubGluZWJlbG93ID0gMHgxZTQ5OwogIHQubm1vbm9zcGFjZSA9IDB4ZmY0ZTsKICB0Lm5tc3F1YXJlID0gMHgzMzlhOwogIHQubm5hYmVuZ2FsaSA9IDB4MDlhMzsKICB0Lm5uYWRldmEgPSAweDA5MjM7CiAgdC5ubmFndWphcmF0aSA9IDB4MGFhMzsKICB0Lm5uYWd1cm11a2hpID0gMHgwYTIzOwogIHQubm5uYWRldmEgPSAweDA5Mjk7CiAgdC5ub2hpcmFnYW5hID0gMHgzMDZlOwogIHQubm9rYXRha2FuYSA9IDB4MzBjZTsKICB0Lm5va2F0YWthbmFoYWxmd2lkdGggPSAweGZmODk7CiAgdC5ub25icmVha2luZ3NwYWNlID0gMHgwMGEwOwogIHQubm9uZW50aGFpID0gMHgwZTEzOwogIHQubm9udXRoYWkgPSAweDBlMTk7CiAgdC5ub29uYXJhYmljID0gMHgwNjQ2OwogIHQubm9vbmZpbmFsYXJhYmljID0gMHhmZWU2OwogIHQubm9vbmdodW5uYWFyYWJpYyA9IDB4MDZiYTsKICB0Lm5vb25naHVubmFmaW5hbGFyYWJpYyA9IDB4ZmI5ZjsKICB0Lm5vb25pbml0aWFsYXJhYmljID0gMHhmZWU3OwogIHQubm9vbmplZW1pbml0aWFsYXJhYmljID0gMHhmY2QyOwogIHQubm9vbmplZW1pc29sYXRlZGFyYWJpYyA9IDB4ZmM0YjsKICB0Lm5vb25tZWRpYWxhcmFiaWMgPSAweGZlZTg7CiAgdC5ub29ubWVlbWluaXRpYWxhcmFiaWMgPSAweGZjZDU7CiAgdC5ub29ubWVlbWlzb2xhdGVkYXJhYmljID0gMHhmYzRlOwogIHQubm9vbm5vb25maW5hbGFyYWJpYyA9IDB4ZmM4ZDsKICB0Lm5vdGNvbnRhaW5zID0gMHgyMjBjOwogIHQubm90ZWxlbWVudCA9IDB4MjIwOTsKICB0Lm5vdGVsZW1lbnRvZiA9IDB4MjIwOTsKICB0Lm5vdGVxdWFsID0gMHgyMjYwOwogIHQubm90Z3JlYXRlciA9IDB4MjI2ZjsKICB0Lm5vdGdyZWF0ZXJub3JlcXVhbCA9IDB4MjI3MTsKICB0Lm5vdGdyZWF0ZXJub3JsZXNzID0gMHgyMjc5OwogIHQubm90aWRlbnRpY2FsID0gMHgyMjYyOwogIHQubm90bGVzcyA9IDB4MjI2ZTsKICB0Lm5vdGxlc3Nub3JlcXVhbCA9IDB4MjI3MDsKICB0Lm5vdHBhcmFsbGVsID0gMHgyMjI2OwogIHQubm90cHJlY2VkZXMgPSAweDIyODA7CiAgdC5ub3RzdWJzZXQgPSAweDIyODQ7CiAgdC5ub3RzdWNjZWVkcyA9IDB4MjI4MTsKICB0Lm5vdHN1cGVyc2V0ID0gMHgyMjg1OwogIHQubm93YXJtZW5pYW4gPSAweDA1NzY7CiAgdC5ucGFyZW4gPSAweDI0YTk7CiAgdC5uc3NxdWFyZSA9IDB4MzNiMTsKICB0Lm5zdXBlcmlvciA9IDB4MjA3ZjsKICB0Lm50aWxkZSA9IDB4MDBmMTsKICB0Lm51ID0gMHgwM2JkOwogIHQubnVoaXJhZ2FuYSA9IDB4MzA2YzsKICB0Lm51a2F0YWthbmEgPSAweDMwY2M7CiAgdC5udWthdGFrYW5haGFsZndpZHRoID0gMHhmZjg3OwogIHQubnVrdGFiZW5nYWxpID0gMHgwOWJjOwogIHQubnVrdGFkZXZhID0gMHgwOTNjOwogIHQubnVrdGFndWphcmF0aSA9IDB4MGFiYzsKICB0Lm51a3RhZ3VybXVraGkgPSAweDBhM2M7CiAgdC5udW1iZXJzaWduID0gMHgwMDIzOwogIHQubnVtYmVyc2lnbm1vbm9zcGFjZSA9IDB4ZmYwMzsKICB0Lm51bWJlcnNpZ25zbWFsbCA9IDB4ZmU1ZjsKICB0Lm51bWVyYWxzaWduZ3JlZWsgPSAweDAzNzQ7CiAgdC5udW1lcmFsc2lnbmxvd2VyZ3JlZWsgPSAweDAzNzU7CiAgdC5udW1lcm8gPSAweDIxMTY7CiAgdC5udW4gPSAweDA1ZTA7CiAgdC5udW5kYWdlc2ggPSAweGZiNDA7CiAgdC5udW5kYWdlc2hoZWJyZXcgPSAweGZiNDA7CiAgdC5udW5oZWJyZXcgPSAweDA1ZTA7CiAgdC5udnNxdWFyZSA9IDB4MzNiNTsKICB0Lm53c3F1YXJlID0gMHgzM2JiOwogIHQubnlhYmVuZ2FsaSA9IDB4MDk5ZTsKICB0Lm55YWRldmEgPSAweDA5MWU7CiAgdC5ueWFndWphcmF0aSA9IDB4MGE5ZTsKICB0Lm55YWd1cm11a2hpID0gMHgwYTFlOwogIHQubyA9IDB4MDA2ZjsKICB0Lm9hY3V0ZSA9IDB4MDBmMzsKICB0Lm9hbmd0aGFpID0gMHgwZTJkOwogIHQub2JhcnJlZCA9IDB4MDI3NTsKICB0Lm9iYXJyZWRjeXJpbGxpYyA9IDB4MDRlOTsKICB0Lm9iYXJyZWRkaWVyZXNpc2N5cmlsbGljID0gMHgwNGViOwogIHQub2JlbmdhbGkgPSAweDA5OTM7CiAgdC5vYm9wb21vZm8gPSAweDMxMWI7CiAgdC5vYnJldmUgPSAweDAxNGY7CiAgdC5vY2FuZHJhZGV2YSA9IDB4MDkxMTsKICB0Lm9jYW5kcmFndWphcmF0aSA9IDB4MGE5MTsKICB0Lm9jYW5kcmF2b3dlbHNpZ25kZXZhID0gMHgwOTQ5OwogIHQub2NhbmRyYXZvd2Vsc2lnbmd1amFyYXRpID0gMHgwYWM5OwogIHQub2Nhcm9uID0gMHgwMWQyOwogIHQub2NpcmNsZSA9IDB4MjRkZTsKICB0Lm9jaXJjdW1mbGV4ID0gMHgwMGY0OwogIHQub2NpcmN1bWZsZXhhY3V0ZSA9IDB4MWVkMTsKICB0Lm9jaXJjdW1mbGV4ZG90YmVsb3cgPSAweDFlZDk7CiAgdC5vY2lyY3VtZmxleGdyYXZlID0gMHgxZWQzOwogIHQub2NpcmN1bWZsZXhob29rYWJvdmUgPSAweDFlZDU7CiAgdC5vY2lyY3VtZmxleHRpbGRlID0gMHgxZWQ3OwogIHQub2N5cmlsbGljID0gMHgwNDNlOwogIHQub2RibGFjdXRlID0gMHgwMTUxOwogIHQub2RibGdyYXZlID0gMHgwMjBkOwogIHQub2RldmEgPSAweDA5MTM7CiAgdC5vZGllcmVzaXMgPSAweDAwZjY7CiAgdC5vZGllcmVzaXNjeXJpbGxpYyA9IDB4MDRlNzsKICB0Lm9kb3RiZWxvdyA9IDB4MWVjZDsKICB0Lm9lID0gMHgwMTUzOwogIHQub2Vrb3JlYW4gPSAweDMxNWE7CiAgdC5vZ29uZWsgPSAweDAyZGI7CiAgdC5vZ29uZWtjbWIgPSAweDAzMjg7CiAgdC5vZ3JhdmUgPSAweDAwZjI7CiAgdC5vZ3VqYXJhdGkgPSAweDBhOTM7CiAgdC5vaGFybWVuaWFuID0gMHgwNTg1OwogIHQub2hpcmFnYW5hID0gMHgzMDRhOwogIHQub2hvb2thYm92ZSA9IDB4MWVjZjsKICB0Lm9ob3JuID0gMHgwMWExOwogIHQub2hvcm5hY3V0ZSA9IDB4MWVkYjsKICB0Lm9ob3JuZG90YmVsb3cgPSAweDFlZTM7CiAgdC5vaG9ybmdyYXZlID0gMHgxZWRkOwogIHQub2hvcm5ob29rYWJvdmUgPSAweDFlZGY7CiAgdC5vaG9ybnRpbGRlID0gMHgxZWUxOwogIHQub2h1bmdhcnVtbGF1dCA9IDB4MDE1MTsKICB0Lm9pID0gMHgwMWEzOwogIHQub2ludmVydGVkYnJldmUgPSAweDAyMGY7CiAgdC5va2F0YWthbmEgPSAweDMwYWE7CiAgdC5va2F0YWthbmFoYWxmd2lkdGggPSAweGZmNzU7CiAgdC5va29yZWFuID0gMHgzMTU3OwogIHQub2xlaGVicmV3ID0gMHgwNWFiOwogIHQub21hY3JvbiA9IDB4MDE0ZDsKICB0Lm9tYWNyb25hY3V0ZSA9IDB4MWU1MzsKICB0Lm9tYWNyb25ncmF2ZSA9IDB4MWU1MTsKICB0Lm9tZGV2YSA9IDB4MDk1MDsKICB0Lm9tZWdhID0gMHgwM2M5OwogIHQub21lZ2ExID0gMHgwM2Q2OwogIHQub21lZ2FjeXJpbGxpYyA9IDB4MDQ2MTsKICB0Lm9tZWdhbGF0aW5jbG9zZWQgPSAweDAyNzc7CiAgdC5vbWVnYXJvdW5kY3lyaWxsaWMgPSAweDA0N2I7CiAgdC5vbWVnYXRpdGxvY3lyaWxsaWMgPSAweDA0N2Q7CiAgdC5vbWVnYXRvbm9zID0gMHgwM2NlOwogIHQub21ndWphcmF0aSA9IDB4MGFkMDsKICB0Lm9taWNyb24gPSAweDAzYmY7CiAgdC5vbWljcm9udG9ub3MgPSAweDAzY2M7CiAgdC5vbW9ub3NwYWNlID0gMHhmZjRmOwogIHQub25lID0gMHgwMDMxOwogIHQub25lYXJhYmljID0gMHgwNjYxOwogIHQub25lYmVuZ2FsaSA9IDB4MDllNzsKICB0Lm9uZWNpcmNsZSA9IDB4MjQ2MDsKICB0Lm9uZWNpcmNsZWludmVyc2VzYW5zc2VyaWYgPSAweDI3OGE7CiAgdC5vbmVkZXZhID0gMHgwOTY3OwogIHQub25lZG90ZW5sZWFkZXIgPSAweDIwMjQ7CiAgdC5vbmVlaWdodGggPSAweDIxNWI7CiAgdC5vbmVmaXR0ZWQgPSAweGY2ZGM7CiAgdC5vbmVndWphcmF0aSA9IDB4MGFlNzsKICB0Lm9uZWd1cm11a2hpID0gMHgwYTY3OwogIHQub25laGFja2FyYWJpYyA9IDB4MDY2MTsKICB0Lm9uZWhhbGYgPSAweDAwYmQ7CiAgdC5vbmVoYW5nemhvdSA9IDB4MzAyMTsKICB0Lm9uZWlkZW9ncmFwaGljcGFyZW4gPSAweDMyMjA7CiAgdC5vbmVpbmZlcmlvciA9IDB4MjA4MTsKICB0Lm9uZW1vbm9zcGFjZSA9IDB4ZmYxMTsKICB0Lm9uZW51bWVyYXRvcmJlbmdhbGkgPSAweDA5ZjQ7CiAgdC5vbmVvbGRzdHlsZSA9IDB4ZjczMTsKICB0Lm9uZXBhcmVuID0gMHgyNDc0OwogIHQub25lcGVyaW9kID0gMHgyNDg4OwogIHQub25lcGVyc2lhbiA9IDB4MDZmMTsKICB0Lm9uZXF1YXJ0ZXIgPSAweDAwYmM7CiAgdC5vbmVyb21hbiA9IDB4MjE3MDsKICB0Lm9uZXN1cGVyaW9yID0gMHgwMGI5OwogIHQub25ldGhhaSA9IDB4MGU1MTsKICB0Lm9uZXRoaXJkID0gMHgyMTUzOwogIHQub29nb25layA9IDB4MDFlYjsKICB0Lm9vZ29uZWttYWNyb24gPSAweDAxZWQ7CiAgdC5vb2d1cm11a2hpID0gMHgwYTEzOwogIHQub29tYXRyYWd1cm11a2hpID0gMHgwYTRiOwogIHQub29wZW4gPSAweDAyNTQ7CiAgdC5vcGFyZW4gPSAweDI0YWE7CiAgdC5vcGVuYnVsbGV0ID0gMHgyNWU2OwogIHQub3B0aW9uID0gMHgyMzI1OwogIHQub3JkZmVtaW5pbmUgPSAweDAwYWE7CiAgdC5vcmRtYXNjdWxpbmUgPSAweDAwYmE7CiAgdC5vcnRob2dvbmFsID0gMHgyMjFmOwogIHQub3Nob3J0ZGV2YSA9IDB4MDkxMjsKICB0Lm9zaG9ydHZvd2Vsc2lnbmRldmEgPSAweDA5NGE7CiAgdC5vc2xhc2ggPSAweDAwZjg7CiAgdC5vc2xhc2hhY3V0ZSA9IDB4MDFmZjsKICB0Lm9zbWFsbGhpcmFnYW5hID0gMHgzMDQ5OwogIHQub3NtYWxsa2F0YWthbmEgPSAweDMwYTk7CiAgdC5vc21hbGxrYXRha2FuYWhhbGZ3aWR0aCA9IDB4ZmY2YjsKICB0Lm9zdHJva2VhY3V0ZSA9IDB4MDFmZjsKICB0Lm9zdXBlcmlvciA9IDB4ZjZmMDsKICB0Lm90Y3lyaWxsaWMgPSAweDA0N2Y7CiAgdC5vdGlsZGUgPSAweDAwZjU7CiAgdC5vdGlsZGVhY3V0ZSA9IDB4MWU0ZDsKICB0Lm90aWxkZWRpZXJlc2lzID0gMHgxZTRmOwogIHQub3Vib3BvbW9mbyA9IDB4MzEyMTsKICB0Lm92ZXJsaW5lID0gMHgyMDNlOwogIHQub3ZlcmxpbmVjZW50ZXJsaW5lID0gMHhmZTRhOwogIHQub3ZlcmxpbmVjbWIgPSAweDAzMDU7CiAgdC5vdmVybGluZWRhc2hlZCA9IDB4ZmU0OTsKICB0Lm92ZXJsaW5lZGJsd2F2eSA9IDB4ZmU0YzsKICB0Lm92ZXJsaW5ld2F2eSA9IDB4ZmU0YjsKICB0Lm92ZXJzY29yZSA9IDB4MDBhZjsKICB0Lm92b3dlbHNpZ25iZW5nYWxpID0gMHgwOWNiOwogIHQub3Zvd2Vsc2lnbmRldmEgPSAweDA5NGI7CiAgdC5vdm93ZWxzaWduZ3VqYXJhdGkgPSAweDBhY2I7CiAgdC5wID0gMHgwMDcwOwogIHQucGFhbXBzc3F1YXJlID0gMHgzMzgwOwogIHQucGFhc2VudG9zcXVhcmUgPSAweDMzMmI7CiAgdC5wYWJlbmdhbGkgPSAweDA5YWE7CiAgdC5wYWN1dGUgPSAweDFlNTU7CiAgdC5wYWRldmEgPSAweDA5MmE7CiAgdC5wYWdlZG93biA9IDB4MjFkZjsKICB0LnBhZ2V1cCA9IDB4MjFkZTsKICB0LnBhZ3VqYXJhdGkgPSAweDBhYWE7CiAgdC5wYWd1cm11a2hpID0gMHgwYTJhOwogIHQucGFoaXJhZ2FuYSA9IDB4MzA3MTsKICB0LnBhaXlhbm5vaXRoYWkgPSAweDBlMmY7CiAgdC5wYWthdGFrYW5hID0gMHgzMGQxOwogIHQucGFsYXRhbGl6YXRpb25jeXJpbGxpY2NtYiA9IDB4MDQ4NDsKICB0LnBhbG9jaGthY3lyaWxsaWMgPSAweDA0YzA7CiAgdC5wYW5zaW9za29yZWFuID0gMHgzMTdmOwogIHQucGFyYWdyYXBoID0gMHgwMGI2OwogIHQucGFyYWxsZWwgPSAweDIyMjU7CiAgdC5wYXJlbmxlZnQgPSAweDAwMjg7CiAgdC5wYXJlbmxlZnRhbHRvbmVhcmFiaWMgPSAweGZkM2U7CiAgdC5wYXJlbmxlZnRidCA9IDB4ZjhlZDsKICB0LnBhcmVubGVmdGV4ID0gMHhmOGVjOwogIHQucGFyZW5sZWZ0aW5mZXJpb3IgPSAweDIwOGQ7CiAgdC5wYXJlbmxlZnRtb25vc3BhY2UgPSAweGZmMDg7CiAgdC5wYXJlbmxlZnRzbWFsbCA9IDB4ZmU1OTsKICB0LnBhcmVubGVmdHN1cGVyaW9yID0gMHgyMDdkOwogIHQucGFyZW5sZWZ0dHAgPSAweGY4ZWI7CiAgdC5wYXJlbmxlZnR2ZXJ0aWNhbCA9IDB4ZmUzNTsKICB0LnBhcmVucmlnaHQgPSAweDAwMjk7CiAgdC5wYXJlbnJpZ2h0YWx0b25lYXJhYmljID0gMHhmZDNmOwogIHQucGFyZW5yaWdodGJ0ID0gMHhmOGY4OwogIHQucGFyZW5yaWdodGV4ID0gMHhmOGY3OwogIHQucGFyZW5yaWdodGluZmVyaW9yID0gMHgyMDhlOwogIHQucGFyZW5yaWdodG1vbm9zcGFjZSA9IDB4ZmYwOTsKICB0LnBhcmVucmlnaHRzbWFsbCA9IDB4ZmU1YTsKICB0LnBhcmVucmlnaHRzdXBlcmlvciA9IDB4MjA3ZTsKICB0LnBhcmVucmlnaHR0cCA9IDB4ZjhmNjsKICB0LnBhcmVucmlnaHR2ZXJ0aWNhbCA9IDB4ZmUzNjsKICB0LnBhcnRpYWxkaWZmID0gMHgyMjAyOwogIHQucGFzZXFoZWJyZXcgPSAweDA1YzA7CiAgdC5wYXNodGFoZWJyZXcgPSAweDA1OTk7CiAgdC5wYXNxdWFyZSA9IDB4MzNhOTsKICB0LnBhdGFoID0gMHgwNWI3OwogIHQucGF0YWgxMSA9IDB4MDViNzsKICB0LnBhdGFoMWQgPSAweDA1Yjc7CiAgdC5wYXRhaDJhID0gMHgwNWI3OwogIHQucGF0YWhoZWJyZXcgPSAweDA1Yjc7CiAgdC5wYXRhaG5hcnJvd2hlYnJldyA9IDB4MDViNzsKICB0LnBhdGFocXVhcnRlcmhlYnJldyA9IDB4MDViNzsKICB0LnBhdGFod2lkZWhlYnJldyA9IDB4MDViNzsKICB0LnBhemVyaGVicmV3ID0gMHgwNWExOwogIHQucGJvcG9tb2ZvID0gMHgzMTA2OwogIHQucGNpcmNsZSA9IDB4MjRkZjsKICB0LnBkb3RhY2NlbnQgPSAweDFlNTc7CiAgdC5wZSA9IDB4MDVlNDsKICB0LnBlY3lyaWxsaWMgPSAweDA0M2Y7CiAgdC5wZWRhZ2VzaCA9IDB4ZmI0NDsKICB0LnBlZGFnZXNoaGVicmV3ID0gMHhmYjQ0OwogIHQucGVlemlzcXVhcmUgPSAweDMzM2I7CiAgdC5wZWZpbmFsZGFnZXNoaGVicmV3ID0gMHhmYjQzOwogIHQucGVoYXJhYmljID0gMHgwNjdlOwogIHQucGVoYXJtZW5pYW4gPSAweDA1N2E7CiAgdC5wZWhlYnJldyA9IDB4MDVlNDsKICB0LnBlaGZpbmFsYXJhYmljID0gMHhmYjU3OwogIHQucGVoaW5pdGlhbGFyYWJpYyA9IDB4ZmI1ODsKICB0LnBlaGlyYWdhbmEgPSAweDMwN2E7CiAgdC5wZWhtZWRpYWxhcmFiaWMgPSAweGZiNTk7CiAgdC5wZWthdGFrYW5hID0gMHgzMGRhOwogIHQucGVtaWRkbGVob29rY3lyaWxsaWMgPSAweDA0YTc7CiAgdC5wZXJhZmVoZWJyZXcgPSAweGZiNGU7CiAgdC5wZXJjZW50ID0gMHgwMDI1OwogIHQucGVyY2VudGFyYWJpYyA9IDB4MDY2YTsKICB0LnBlcmNlbnRtb25vc3BhY2UgPSAweGZmMDU7CiAgdC5wZXJjZW50c21hbGwgPSAweGZlNmE7CiAgdC5wZXJpb2QgPSAweDAwMmU7CiAgdC5wZXJpb2Rhcm1lbmlhbiA9IDB4MDU4OTsKICB0LnBlcmlvZGNlbnRlcmVkID0gMHgwMGI3OwogIHQucGVyaW9kaGFsZndpZHRoID0gMHhmZjYxOwogIHQucGVyaW9kaW5mZXJpb3IgPSAweGY2ZTc7CiAgdC5wZXJpb2Rtb25vc3BhY2UgPSAweGZmMGU7CiAgdC5wZXJpb2RzbWFsbCA9IDB4ZmU1MjsKICB0LnBlcmlvZHN1cGVyaW9yID0gMHhmNmU4OwogIHQucGVyaXNwb21lbmlncmVla2NtYiA9IDB4MDM0MjsKICB0LnBlcnBlbmRpY3VsYXIgPSAweDIyYTU7CiAgdC5wZXJ0aG91c2FuZCA9IDB4MjAzMDsKICB0LnBlc2V0YSA9IDB4MjBhNzsKICB0LnBmc3F1YXJlID0gMHgzMzhhOwogIHQucGhhYmVuZ2FsaSA9IDB4MDlhYjsKICB0LnBoYWRldmEgPSAweDA5MmI7CiAgdC5waGFndWphcmF0aSA9IDB4MGFhYjsKICB0LnBoYWd1cm11a2hpID0gMHgwYTJiOwogIHQucGhpID0gMHgwM2M2OwogIHQucGhpMSA9IDB4MDNkNTsKICB0LnBoaWV1cGhhY2lyY2xla29yZWFuID0gMHgzMjdhOwogIHQucGhpZXVwaGFwYXJlbmtvcmVhbiA9IDB4MzIxYTsKICB0LnBoaWV1cGhjaXJjbGVrb3JlYW4gPSAweDMyNmM7CiAgdC5waGlldXBoa29yZWFuID0gMHgzMTRkOwogIHQucGhpZXVwaHBhcmVua29yZWFuID0gMHgzMjBjOwogIHQucGhpbGF0aW4gPSAweDAyNzg7CiAgdC5waGludGh1dGhhaSA9IDB4MGUzYTsKICB0LnBoaXN5bWJvbGdyZWVrID0gMHgwM2Q1OwogIHQucGhvb2sgPSAweDAxYTU7CiAgdC5waG9waGFudGhhaSA9IDB4MGUxZTsKICB0LnBob3BodW5ndGhhaSA9IDB4MGUxYzsKICB0LnBob3NhbXBoYW90aGFpID0gMHgwZTIwOwogIHQucGkgPSAweDAzYzA7CiAgdC5waWV1cGFjaXJjbGVrb3JlYW4gPSAweDMyNzM7CiAgdC5waWV1cGFwYXJlbmtvcmVhbiA9IDB4MzIxMzsKICB0LnBpZXVwY2lldWNrb3JlYW4gPSAweDMxNzY7CiAgdC5waWV1cGNpcmNsZWtvcmVhbiA9IDB4MzI2NTsKICB0LnBpZXVwa2l5ZW9ra29yZWFuID0gMHgzMTcyOwogIHQucGlldXBrb3JlYW4gPSAweDMxNDI7CiAgdC5waWV1cHBhcmVua29yZWFuID0gMHgzMjA1OwogIHQucGlldXBzaW9za2l5ZW9ra29yZWFuID0gMHgzMTc0OwogIHQucGlldXBzaW9za29yZWFuID0gMHgzMTQ0OwogIHQucGlldXBzaW9zdGlrZXV0a29yZWFuID0gMHgzMTc1OwogIHQucGlldXB0aGlldXRoa29yZWFuID0gMHgzMTc3OwogIHQucGlldXB0aWtldXRrb3JlYW4gPSAweDMxNzM7CiAgdC5waWhpcmFnYW5hID0gMHgzMDc0OwogIHQucGlrYXRha2FuYSA9IDB4MzBkNDsKICB0LnBpc3ltYm9sZ3JlZWsgPSAweDAzZDY7CiAgdC5waXdyYXJtZW5pYW4gPSAweDA1ODM7CiAgdC5wbGFuY2tvdmVyMnBpID0gMHgyMTBmOwogIHQucGxhbmNrb3ZlcjJwaTEgPSAweDIxMGY7CiAgdC5wbHVzID0gMHgwMDJiOwogIHQucGx1c2JlbG93Y21iID0gMHgwMzFmOwogIHQucGx1c2NpcmNsZSA9IDB4MjI5NTsKICB0LnBsdXNtaW51cyA9IDB4MDBiMTsKICB0LnBsdXNtb2QgPSAweDAyZDY7CiAgdC5wbHVzbW9ub3NwYWNlID0gMHhmZjBiOwogIHQucGx1c3NtYWxsID0gMHhmZTYyOwogIHQucGx1c3N1cGVyaW9yID0gMHgyMDdhOwogIHQucG1vbm9zcGFjZSA9IDB4ZmY1MDsKICB0LnBtc3F1YXJlID0gMHgzM2Q4OwogIHQucG9oaXJhZ2FuYSA9IDB4MzA3ZDsKICB0LnBvaW50aW5naW5kZXhkb3dud2hpdGUgPSAweDI2MWY7CiAgdC5wb2ludGluZ2luZGV4bGVmdHdoaXRlID0gMHgyNjFjOwogIHQucG9pbnRpbmdpbmRleHJpZ2h0d2hpdGUgPSAweDI2MWU7CiAgdC5wb2ludGluZ2luZGV4dXB3aGl0ZSA9IDB4MjYxZDsKICB0LnBva2F0YWthbmEgPSAweDMwZGQ7CiAgdC5wb3BsYXRoYWkgPSAweDBlMWI7CiAgdC5wb3N0YWxtYXJrID0gMHgzMDEyOwogIHQucG9zdGFsbWFya2ZhY2UgPSAweDMwMjA7CiAgdC5wcGFyZW4gPSAweDI0YWI7CiAgdC5wcmVjZWRlcyA9IDB4MjI3YTsKICB0LnByZXNjcmlwdGlvbiA9IDB4MjExZTsKICB0LnByaW1lbW9kID0gMHgwMmI5OwogIHQucHJpbWVyZXZlcnNlZCA9IDB4MjAzNTsKICB0LnByb2R1Y3QgPSAweDIyMGY7CiAgdC5wcm9qZWN0aXZlID0gMHgyMzA1OwogIHQucHJvbG9uZ2Vka2FuYSA9IDB4MzBmYzsKICB0LnByb3BlbGxvciA9IDB4MjMxODsKICB0LnByb3BlcnN1YnNldCA9IDB4MjI4MjsKICB0LnByb3BlcnN1cGVyc2V0ID0gMHgyMjgzOwogIHQucHJvcG9ydGlvbiA9IDB4MjIzNzsKICB0LnByb3BvcnRpb25hbCA9IDB4MjIxZDsKICB0LnBzaSA9IDB4MDNjODsKICB0LnBzaWN5cmlsbGljID0gMHgwNDcxOwogIHQucHNpbGlwbmV1bWF0YWN5cmlsbGljY21iID0gMHgwNDg2OwogIHQucHNzcXVhcmUgPSAweDMzYjA7CiAgdC5wdWhpcmFnYW5hID0gMHgzMDc3OwogIHQucHVrYXRha2FuYSA9IDB4MzBkNzsKICB0LnB2c3F1YXJlID0gMHgzM2I0OwogIHQucHdzcXVhcmUgPSAweDMzYmE7CiAgdC5xID0gMHgwMDcxOwogIHQucWFkZXZhID0gMHgwOTU4OwogIHQucWFkbWFoZWJyZXcgPSAweDA1YTg7CiAgdC5xYWZhcmFiaWMgPSAweDA2NDI7CiAgdC5xYWZmaW5hbGFyYWJpYyA9IDB4ZmVkNjsKICB0LnFhZmluaXRpYWxhcmFiaWMgPSAweGZlZDc7CiAgdC5xYWZtZWRpYWxhcmFiaWMgPSAweGZlZDg7CiAgdC5xYW1hdHMgPSAweDA1Yjg7CiAgdC5xYW1hdHMxMCA9IDB4MDViODsKICB0LnFhbWF0czFhID0gMHgwNWI4OwogIHQucWFtYXRzMWMgPSAweDA1Yjg7CiAgdC5xYW1hdHMyNyA9IDB4MDViODsKICB0LnFhbWF0czI5ID0gMHgwNWI4OwogIHQucWFtYXRzMzMgPSAweDA1Yjg7CiAgdC5xYW1hdHNkZSA9IDB4MDViODsKICB0LnFhbWF0c2hlYnJldyA9IDB4MDViODsKICB0LnFhbWF0c25hcnJvd2hlYnJldyA9IDB4MDViODsKICB0LnFhbWF0c3FhdGFuaGVicmV3ID0gMHgwNWI4OwogIHQucWFtYXRzcWF0YW5uYXJyb3doZWJyZXcgPSAweDA1Yjg7CiAgdC5xYW1hdHNxYXRhbnF1YXJ0ZXJoZWJyZXcgPSAweDA1Yjg7CiAgdC5xYW1hdHNxYXRhbndpZGVoZWJyZXcgPSAweDA1Yjg7CiAgdC5xYW1hdHNxdWFydGVyaGVicmV3ID0gMHgwNWI4OwogIHQucWFtYXRzd2lkZWhlYnJldyA9IDB4MDViODsKICB0LnFhcm5leXBhcmFoZWJyZXcgPSAweDA1OWY7CiAgdC5xYm9wb21vZm8gPSAweDMxMTE7CiAgdC5xY2lyY2xlID0gMHgyNGUwOwogIHQucWhvb2sgPSAweDAyYTA7CiAgdC5xbW9ub3NwYWNlID0gMHhmZjUxOwogIHQucW9mID0gMHgwNWU3OwogIHQucW9mZGFnZXNoID0gMHhmYjQ3OwogIHQucW9mZGFnZXNoaGVicmV3ID0gMHhmYjQ3OwogIHQucW9maGVicmV3ID0gMHgwNWU3OwogIHQucXBhcmVuID0gMHgyNGFjOwogIHQucXVhcnRlcm5vdGUgPSAweDI2Njk7CiAgdC5xdWJ1dHMgPSAweDA1YmI7CiAgdC5xdWJ1dHMxOCA9IDB4MDViYjsKICB0LnF1YnV0czI1ID0gMHgwNWJiOwogIHQucXVidXRzMzEgPSAweDA1YmI7CiAgdC5xdWJ1dHNoZWJyZXcgPSAweDA1YmI7CiAgdC5xdWJ1dHNuYXJyb3doZWJyZXcgPSAweDA1YmI7CiAgdC5xdWJ1dHNxdWFydGVyaGVicmV3ID0gMHgwNWJiOwogIHQucXVidXRzd2lkZWhlYnJldyA9IDB4MDViYjsKICB0LnF1ZXN0aW9uID0gMHgwMDNmOwogIHQucXVlc3Rpb25hcmFiaWMgPSAweDA2MWY7CiAgdC5xdWVzdGlvbmFybWVuaWFuID0gMHgwNTVlOwogIHQucXVlc3Rpb25kb3duID0gMHgwMGJmOwogIHQucXVlc3Rpb25kb3duc21hbGwgPSAweGY3YmY7CiAgdC5xdWVzdGlvbmdyZWVrID0gMHgwMzdlOwogIHQucXVlc3Rpb25tb25vc3BhY2UgPSAweGZmMWY7CiAgdC5xdWVzdGlvbnNtYWxsID0gMHhmNzNmOwogIHQucXVvdGVkYmwgPSAweDAwMjI7CiAgdC5xdW90ZWRibGJhc2UgPSAweDIwMWU7CiAgdC5xdW90ZWRibGxlZnQgPSAweDIwMWM7CiAgdC5xdW90ZWRibG1vbm9zcGFjZSA9IDB4ZmYwMjsKICB0LnF1b3RlZGJscHJpbWUgPSAweDMwMWU7CiAgdC5xdW90ZWRibHByaW1lcmV2ZXJzZWQgPSAweDMwMWQ7CiAgdC5xdW90ZWRibHJpZ2h0ID0gMHgyMDFkOwogIHQucXVvdGVsZWZ0ID0gMHgyMDE4OwogIHQucXVvdGVsZWZ0cmV2ZXJzZWQgPSAweDIwMWI7CiAgdC5xdW90ZXJldmVyc2VkID0gMHgyMDFiOwogIHQucXVvdGVyaWdodCA9IDB4MjAxOTsKICB0LnF1b3RlcmlnaHRuID0gMHgwMTQ5OwogIHQucXVvdGVzaW5nbGJhc2UgPSAweDIwMWE7CiAgdC5xdW90ZXNpbmdsZSA9IDB4MDAyNzsKICB0LnF1b3Rlc2luZ2xlbW9ub3NwYWNlID0gMHhmZjA3OwogIHQuciA9IDB4MDA3MjsKICB0LnJhYXJtZW5pYW4gPSAweDA1N2M7CiAgdC5yYWJlbmdhbGkgPSAweDA5YjA7CiAgdC5yYWN1dGUgPSAweDAxNTU7CiAgdC5yYWRldmEgPSAweDA5MzA7CiAgdC5yYWRpY2FsID0gMHgyMjFhOwogIHQucmFkaWNhbGV4ID0gMHhmOGU1OwogIHQucmFkb3ZlcnNzcXVhcmUgPSAweDMzYWU7CiAgdC5yYWRvdmVyc3NxdWFyZWRzcXVhcmUgPSAweDMzYWY7CiAgdC5yYWRzcXVhcmUgPSAweDMzYWQ7CiAgdC5yYWZlID0gMHgwNWJmOwogIHQucmFmZWhlYnJldyA9IDB4MDViZjsKICB0LnJhZ3VqYXJhdGkgPSAweDBhYjA7CiAgdC5yYWd1cm11a2hpID0gMHgwYTMwOwogIHQucmFoaXJhZ2FuYSA9IDB4MzA4OTsKICB0LnJha2F0YWthbmEgPSAweDMwZTk7CiAgdC5yYWthdGFrYW5haGFsZndpZHRoID0gMHhmZjk3OwogIHQucmFsb3dlcmRpYWdvbmFsYmVuZ2FsaSA9IDB4MDlmMTsKICB0LnJhbWlkZGxlZGlhZ29uYWxiZW5nYWxpID0gMHgwOWYwOwogIHQucmFtc2hvcm4gPSAweDAyNjQ7CiAgdC5yYXRpbyA9IDB4MjIzNjsKICB0LnJib3BvbW9mbyA9IDB4MzExNjsKICB0LnJjYXJvbiA9IDB4MDE1OTsKICB0LnJjZWRpbGxhID0gMHgwMTU3OwogIHQucmNpcmNsZSA9IDB4MjRlMTsKICB0LnJjb21tYWFjY2VudCA9IDB4MDE1NzsKICB0LnJkYmxncmF2ZSA9IDB4MDIxMTsKICB0LnJkb3RhY2NlbnQgPSAweDFlNTk7CiAgdC5yZG90YmVsb3cgPSAweDFlNWI7CiAgdC5yZG90YmVsb3dtYWNyb24gPSAweDFlNWQ7CiAgdC5yZWZlcmVuY2VtYXJrID0gMHgyMDNiOwogIHQucmVmbGV4c3Vic2V0ID0gMHgyMjg2OwogIHQucmVmbGV4c3VwZXJzZXQgPSAweDIyODc7CiAgdC5yZWdpc3RlcmVkID0gMHgwMGFlOwogIHQucmVnaXN0ZXJzYW5zID0gMHhmOGU4OwogIHQucmVnaXN0ZXJzZXJpZiA9IDB4ZjZkYTsKICB0LnJlaGFyYWJpYyA9IDB4MDYzMTsKICB0LnJlaGFybWVuaWFuID0gMHgwNTgwOwogIHQucmVoZmluYWxhcmFiaWMgPSAweGZlYWU7CiAgdC5yZWhpcmFnYW5hID0gMHgzMDhjOwogIHQucmVrYXRha2FuYSA9IDB4MzBlYzsKICB0LnJla2F0YWthbmFoYWxmd2lkdGggPSAweGZmOWE7CiAgdC5yZXNoID0gMHgwNWU4OwogIHQucmVzaGRhZ2VzaGhlYnJldyA9IDB4ZmI0ODsKICB0LnJlc2hoZWJyZXcgPSAweDA1ZTg7CiAgdC5yZXZlcnNlZHRpbGRlID0gMHgyMjNkOwogIHQucmV2aWFoZWJyZXcgPSAweDA1OTc7CiAgdC5yZXZpYW11Z3Jhc2hoZWJyZXcgPSAweDA1OTc7CiAgdC5yZXZsb2dpY2Fsbm90ID0gMHgyMzEwOwogIHQucmZpc2hob29rID0gMHgwMjdlOwogIHQucmZpc2hob29rcmV2ZXJzZWQgPSAweDAyN2Y7CiAgdC5yaGFiZW5nYWxpID0gMHgwOWRkOwogIHQucmhhZGV2YSA9IDB4MDk1ZDsKICB0LnJobyA9IDB4MDNjMTsKICB0LnJob29rID0gMHgwMjdkOwogIHQucmhvb2t0dXJuZWQgPSAweDAyN2I7CiAgdC5yaG9va3R1cm5lZHN1cGVyaW9yID0gMHgwMmI1OwogIHQucmhvc3ltYm9sZ3JlZWsgPSAweDAzZjE7CiAgdC5yaG90aWNob29rbW9kID0gMHgwMmRlOwogIHQucmlldWxhY2lyY2xla29yZWFuID0gMHgzMjcxOwogIHQucmlldWxhcGFyZW5rb3JlYW4gPSAweDMyMTE7CiAgdC5yaWV1bGNpcmNsZWtvcmVhbiA9IDB4MzI2MzsKICB0LnJpZXVsaGlldWhrb3JlYW4gPSAweDMxNDA7CiAgdC5yaWV1bGtpeWVva2tvcmVhbiA9IDB4MzEzYTsKICB0LnJpZXVsa2l5ZW9rc2lvc2tvcmVhbiA9IDB4MzE2OTsKICB0LnJpZXVsa29yZWFuID0gMHgzMTM5OwogIHQucmlldWxtaWV1bWtvcmVhbiA9IDB4MzEzYjsKICB0LnJpZXVscGFuc2lvc2tvcmVhbiA9IDB4MzE2YzsKICB0LnJpZXVscGFyZW5rb3JlYW4gPSAweDMyMDM7CiAgdC5yaWV1bHBoaWV1cGhrb3JlYW4gPSAweDMxM2Y7CiAgdC5yaWV1bHBpZXVwa29yZWFuID0gMHgzMTNjOwogIHQucmlldWxwaWV1cHNpb3Nrb3JlYW4gPSAweDMxNmI7CiAgdC5yaWV1bHNpb3Nrb3JlYW4gPSAweDMxM2Q7CiAgdC5yaWV1bHRoaWV1dGhrb3JlYW4gPSAweDMxM2U7CiAgdC5yaWV1bHRpa2V1dGtvcmVhbiA9IDB4MzE2YTsKICB0LnJpZXVseWVvcmluaGlldWhrb3JlYW4gPSAweDMxNmQ7CiAgdC5yaWdodGFuZ2xlID0gMHgyMjFmOwogIHQucmlnaHR0YWNrYmVsb3djbWIgPSAweDAzMTk7CiAgdC5yaWdodHRyaWFuZ2xlID0gMHgyMmJmOwogIHQucmloaXJhZ2FuYSA9IDB4MzA4YTsKICB0LnJpa2F0YWthbmEgPSAweDMwZWE7CiAgdC5yaWthdGFrYW5haGFsZndpZHRoID0gMHhmZjk4OwogIHQucmluZyA9IDB4MDJkYTsKICB0LnJpbmdiZWxvd2NtYiA9IDB4MDMyNTsKICB0LnJpbmdjbWIgPSAweDAzMGE7CiAgdC5yaW5naGFsZmxlZnQgPSAweDAyYmY7CiAgdC5yaW5naGFsZmxlZnRhcm1lbmlhbiA9IDB4MDU1OTsKICB0LnJpbmdoYWxmbGVmdGJlbG93Y21iID0gMHgwMzFjOwogIHQucmluZ2hhbGZsZWZ0Y2VudGVyZWQgPSAweDAyZDM7CiAgdC5yaW5naGFsZnJpZ2h0ID0gMHgwMmJlOwogIHQucmluZ2hhbGZyaWdodGJlbG93Y21iID0gMHgwMzM5OwogIHQucmluZ2hhbGZyaWdodGNlbnRlcmVkID0gMHgwMmQyOwogIHQucmludmVydGVkYnJldmUgPSAweDAyMTM7CiAgdC5yaXR0b3J1c3F1YXJlID0gMHgzMzUxOwogIHQucmxpbmViZWxvdyA9IDB4MWU1ZjsKICB0LnJsb25nbGVnID0gMHgwMjdjOwogIHQucmxvbmdsZWd0dXJuZWQgPSAweDAyN2E7CiAgdC5ybW9ub3NwYWNlID0gMHhmZjUyOwogIHQucm9oaXJhZ2FuYSA9IDB4MzA4ZDsKICB0LnJva2F0YWthbmEgPSAweDMwZWQ7CiAgdC5yb2thdGFrYW5haGFsZndpZHRoID0gMHhmZjliOwogIHQucm9ydWF0aGFpID0gMHgwZTIzOwogIHQucnBhcmVuID0gMHgyNGFkOwogIHQucnJhYmVuZ2FsaSA9IDB4MDlkYzsKICB0LnJyYWRldmEgPSAweDA5MzE7CiAgdC5ycmFndXJtdWtoaSA9IDB4MGE1YzsKICB0LnJyZWhhcmFiaWMgPSAweDA2OTE7CiAgdC5ycmVoZmluYWxhcmFiaWMgPSAweGZiOGQ7CiAgdC5ycnZvY2FsaWNiZW5nYWxpID0gMHgwOWUwOwogIHQucnJ2b2NhbGljZGV2YSA9IDB4MDk2MDsKICB0LnJydm9jYWxpY2d1amFyYXRpID0gMHgwYWUwOwogIHQucnJ2b2NhbGljdm93ZWxzaWduYmVuZ2FsaSA9IDB4MDljNDsKICB0LnJydm9jYWxpY3Zvd2Vsc2lnbmRldmEgPSAweDA5NDQ7CiAgdC5ycnZvY2FsaWN2b3dlbHNpZ25ndWphcmF0aSA9IDB4MGFjNDsKICB0LnJzdXBlcmlvciA9IDB4ZjZmMTsKICB0LnJ0YmxvY2sgPSAweDI1OTA7CiAgdC5ydHVybmVkID0gMHgwMjc5OwogIHQucnR1cm5lZHN1cGVyaW9yID0gMHgwMmI0OwogIHQucnVoaXJhZ2FuYSA9IDB4MzA4YjsKICB0LnJ1a2F0YWthbmEgPSAweDMwZWI7CiAgdC5ydWthdGFrYW5haGFsZndpZHRoID0gMHhmZjk5OwogIHQucnVwZWVtYXJrYmVuZ2FsaSA9IDB4MDlmMjsKICB0LnJ1cGVlc2lnbmJlbmdhbGkgPSAweDA5ZjM7CiAgdC5ydXBpYWggPSAweGY2ZGQ7CiAgdC5ydXRoYWkgPSAweDBlMjQ7CiAgdC5ydm9jYWxpY2JlbmdhbGkgPSAweDA5OGI7CiAgdC5ydm9jYWxpY2RldmEgPSAweDA5MGI7CiAgdC5ydm9jYWxpY2d1amFyYXRpID0gMHgwYThiOwogIHQucnZvY2FsaWN2b3dlbHNpZ25iZW5nYWxpID0gMHgwOWMzOwogIHQucnZvY2FsaWN2b3dlbHNpZ25kZXZhID0gMHgwOTQzOwogIHQucnZvY2FsaWN2b3dlbHNpZ25ndWphcmF0aSA9IDB4MGFjMzsKICB0LnMgPSAweDAwNzM7CiAgdC5zYWJlbmdhbGkgPSAweDA5Yjg7CiAgdC5zYWN1dGUgPSAweDAxNWI7CiAgdC5zYWN1dGVkb3RhY2NlbnQgPSAweDFlNjU7CiAgdC5zYWRhcmFiaWMgPSAweDA2MzU7CiAgdC5zYWRldmEgPSAweDA5Mzg7CiAgdC5zYWRmaW5hbGFyYWJpYyA9IDB4ZmViYTsKICB0LnNhZGluaXRpYWxhcmFiaWMgPSAweGZlYmI7CiAgdC5zYWRtZWRpYWxhcmFiaWMgPSAweGZlYmM7CiAgdC5zYWd1amFyYXRpID0gMHgwYWI4OwogIHQuc2FndXJtdWtoaSA9IDB4MGEzODsKICB0LnNhaGlyYWdhbmEgPSAweDMwNTU7CiAgdC5zYWthdGFrYW5hID0gMHgzMGI1OwogIHQuc2FrYXRha2FuYWhhbGZ3aWR0aCA9IDB4ZmY3YjsKICB0LnNhbGxhbGxhaG91YWxheWhld2FzYWxsYW1hcmFiaWMgPSAweGZkZmE7CiAgdC5zYW1la2ggPSAweDA1ZTE7CiAgdC5zYW1la2hkYWdlc2ggPSAweGZiNDE7CiAgdC5zYW1la2hkYWdlc2hoZWJyZXcgPSAweGZiNDE7CiAgdC5zYW1la2hoZWJyZXcgPSAweDA1ZTE7CiAgdC5zYXJhYWF0aGFpID0gMHgwZTMyOwogIHQuc2FyYWFldGhhaSA9IDB4MGU0MTsKICB0LnNhcmFhaW1haW1hbGFpdGhhaSA9IDB4MGU0NDsKICB0LnNhcmFhaW1haW11YW50aGFpID0gMHgwZTQzOwogIHQuc2FyYWFtdGhhaSA9IDB4MGUzMzsKICB0LnNhcmFhdGhhaSA9IDB4MGUzMDsKICB0LnNhcmFldGhhaSA9IDB4MGU0MDsKICB0LnNhcmFpaWxlZnR0aGFpID0gMHhmODg2OwogIHQuc2FyYWlpdGhhaSA9IDB4MGUzNTsKICB0LnNhcmFpbGVmdHRoYWkgPSAweGY4ODU7CiAgdC5zYXJhaXRoYWkgPSAweDBlMzQ7CiAgdC5zYXJhb3RoYWkgPSAweDBlNDI7CiAgdC5zYXJhdWVlbGVmdHRoYWkgPSAweGY4ODg7CiAgdC5zYXJhdWVldGhhaSA9IDB4MGUzNzsKICB0LnNhcmF1ZWxlZnR0aGFpID0gMHhmODg3OwogIHQuc2FyYXVldGhhaSA9IDB4MGUzNjsKICB0LnNhcmF1dGhhaSA9IDB4MGUzODsKICB0LnNhcmF1dXRoYWkgPSAweDBlMzk7CiAgdC5zYm9wb21vZm8gPSAweDMxMTk7CiAgdC5zY2Fyb24gPSAweDAxNjE7CiAgdC5zY2Fyb25kb3RhY2NlbnQgPSAweDFlNjc7CiAgdC5zY2VkaWxsYSA9IDB4MDE1ZjsKICB0LnNjaHdhID0gMHgwMjU5OwogIHQuc2Nod2FjeXJpbGxpYyA9IDB4MDRkOTsKICB0LnNjaHdhZGllcmVzaXNjeXJpbGxpYyA9IDB4MDRkYjsKICB0LnNjaHdhaG9vayA9IDB4MDI1YTsKICB0LnNjaXJjbGUgPSAweDI0ZTI7CiAgdC5zY2lyY3VtZmxleCA9IDB4MDE1ZDsKICB0LnNjb21tYWFjY2VudCA9IDB4MDIxOTsKICB0LnNkb3RhY2NlbnQgPSAweDFlNjE7CiAgdC5zZG90YmVsb3cgPSAweDFlNjM7CiAgdC5zZG90YmVsb3dkb3RhY2NlbnQgPSAweDFlNjk7CiAgdC5zZWFndWxsYmVsb3djbWIgPSAweDAzM2M7CiAgdC5zZWNvbmQgPSAweDIwMzM7CiAgdC5zZWNvbmR0b25lY2hpbmVzZSA9IDB4MDJjYTsKICB0LnNlY3Rpb24gPSAweDAwYTc7CiAgdC5zZWVuYXJhYmljID0gMHgwNjMzOwogIHQuc2VlbmZpbmFsYXJhYmljID0gMHhmZWIyOwogIHQuc2VlbmluaXRpYWxhcmFiaWMgPSAweGZlYjM7CiAgdC5zZWVubWVkaWFsYXJhYmljID0gMHhmZWI0OwogIHQuc2Vnb2wgPSAweDA1YjY7CiAgdC5zZWdvbDEzID0gMHgwNWI2OwogIHQuc2Vnb2wxZiA9IDB4MDViNjsKICB0LnNlZ29sMmMgPSAweDA1YjY7CiAgdC5zZWdvbGhlYnJldyA9IDB4MDViNjsKICB0LnNlZ29sbmFycm93aGVicmV3ID0gMHgwNWI2OwogIHQuc2Vnb2xxdWFydGVyaGVicmV3ID0gMHgwNWI2OwogIHQuc2Vnb2x0YWhlYnJldyA9IDB4MDU5MjsKICB0LnNlZ29sd2lkZWhlYnJldyA9IDB4MDViNjsKICB0LnNlaGFybWVuaWFuID0gMHgwNTdkOwogIHQuc2VoaXJhZ2FuYSA9IDB4MzA1YjsKICB0LnNla2F0YWthbmEgPSAweDMwYmI7CiAgdC5zZWthdGFrYW5haGFsZndpZHRoID0gMHhmZjdlOwogIHQuc2VtaWNvbG9uID0gMHgwMDNiOwogIHQuc2VtaWNvbG9uYXJhYmljID0gMHgwNjFiOwogIHQuc2VtaWNvbG9ubW9ub3NwYWNlID0gMHhmZjFiOwogIHQuc2VtaWNvbG9uc21hbGwgPSAweGZlNTQ7CiAgdC5zZW1pdm9pY2VkbWFya2thbmEgPSAweDMwOWM7CiAgdC5zZW1pdm9pY2VkbWFya2thbmFoYWxmd2lkdGggPSAweGZmOWY7CiAgdC5zZW50aXNxdWFyZSA9IDB4MzMyMjsKICB0LnNlbnRvc3F1YXJlID0gMHgzMzIzOwogIHQuc2V2ZW4gPSAweDAwMzc7CiAgdC5zZXZlbmFyYWJpYyA9IDB4MDY2NzsKICB0LnNldmVuYmVuZ2FsaSA9IDB4MDllZDsKICB0LnNldmVuY2lyY2xlID0gMHgyNDY2OwogIHQuc2V2ZW5jaXJjbGVpbnZlcnNlc2Fuc3NlcmlmID0gMHgyNzkwOwogIHQuc2V2ZW5kZXZhID0gMHgwOTZkOwogIHQuc2V2ZW5laWdodGhzID0gMHgyMTVlOwogIHQuc2V2ZW5ndWphcmF0aSA9IDB4MGFlZDsKICB0LnNldmVuZ3VybXVraGkgPSAweDBhNmQ7CiAgdC5zZXZlbmhhY2thcmFiaWMgPSAweDA2Njc7CiAgdC5zZXZlbmhhbmd6aG91ID0gMHgzMDI3OwogIHQuc2V2ZW5pZGVvZ3JhcGhpY3BhcmVuID0gMHgzMjI2OwogIHQuc2V2ZW5pbmZlcmlvciA9IDB4MjA4NzsKICB0LnNldmVubW9ub3NwYWNlID0gMHhmZjE3OwogIHQuc2V2ZW5vbGRzdHlsZSA9IDB4ZjczNzsKICB0LnNldmVucGFyZW4gPSAweDI0N2E7CiAgdC5zZXZlbnBlcmlvZCA9IDB4MjQ4ZTsKICB0LnNldmVucGVyc2lhbiA9IDB4MDZmNzsKICB0LnNldmVucm9tYW4gPSAweDIxNzY7CiAgdC5zZXZlbnN1cGVyaW9yID0gMHgyMDc3OwogIHQuc2V2ZW50ZWVuY2lyY2xlID0gMHgyNDcwOwogIHQuc2V2ZW50ZWVucGFyZW4gPSAweDI0ODQ7CiAgdC5zZXZlbnRlZW5wZXJpb2QgPSAweDI0OTg7CiAgdC5zZXZlbnRoYWkgPSAweDBlNTc7CiAgdC5zZnRoeXBoZW4gPSAweDAwYWQ7CiAgdC5zaGFhcm1lbmlhbiA9IDB4MDU3NzsKICB0LnNoYWJlbmdhbGkgPSAweDA5YjY7CiAgdC5zaGFjeXJpbGxpYyA9IDB4MDQ0ODsKICB0LnNoYWRkYWFyYWJpYyA9IDB4MDY1MTsKICB0LnNoYWRkYWRhbW1hYXJhYmljID0gMHhmYzYxOwogIHQuc2hhZGRhZGFtbWF0YW5hcmFiaWMgPSAweGZjNWU7CiAgdC5zaGFkZGFmYXRoYWFyYWJpYyA9IDB4ZmM2MDsKICB0LnNoYWRkYWthc3JhYXJhYmljID0gMHhmYzYyOwogIHQuc2hhZGRha2FzcmF0YW5hcmFiaWMgPSAweGZjNWY7CiAgdC5zaGFkZSA9IDB4MjU5MjsKICB0LnNoYWRlZGFyayA9IDB4MjU5MzsKICB0LnNoYWRlbGlnaHQgPSAweDI1OTE7CiAgdC5zaGFkZW1lZGl1bSA9IDB4MjU5MjsKICB0LnNoYWRldmEgPSAweDA5MzY7CiAgdC5zaGFndWphcmF0aSA9IDB4MGFiNjsKICB0LnNoYWd1cm11a2hpID0gMHgwYTM2OwogIHQuc2hhbHNoZWxldGhlYnJldyA9IDB4MDU5MzsKICB0LnNoYm9wb21vZm8gPSAweDMxMTU7CiAgdC5zaGNoYWN5cmlsbGljID0gMHgwNDQ5OwogIHQuc2hlZW5hcmFiaWMgPSAweDA2MzQ7CiAgdC5zaGVlbmZpbmFsYXJhYmljID0gMHhmZWI2OwogIHQuc2hlZW5pbml0aWFsYXJhYmljID0gMHhmZWI3OwogIHQuc2hlZW5tZWRpYWxhcmFiaWMgPSAweGZlYjg7CiAgdC5zaGVpY29wdGljID0gMHgwM2UzOwogIHQuc2hlcWVsID0gMHgyMGFhOwogIHQuc2hlcWVsaGVicmV3ID0gMHgyMGFhOwogIHQuc2hldmEgPSAweDA1YjA7CiAgdC5zaGV2YTExNSA9IDB4MDViMDsKICB0LnNoZXZhMTUgPSAweDA1YjA7CiAgdC5zaGV2YTIyID0gMHgwNWIwOwogIHQuc2hldmEyZSA9IDB4MDViMDsKICB0LnNoZXZhaGVicmV3ID0gMHgwNWIwOwogIHQuc2hldmFuYXJyb3doZWJyZXcgPSAweDA1YjA7CiAgdC5zaGV2YXF1YXJ0ZXJoZWJyZXcgPSAweDA1YjA7CiAgdC5zaGV2YXdpZGVoZWJyZXcgPSAweDA1YjA7CiAgdC5zaGhhY3lyaWxsaWMgPSAweDA0YmI7CiAgdC5zaGltYWNvcHRpYyA9IDB4MDNlZDsKICB0LnNoaW4gPSAweDA1ZTk7CiAgdC5zaGluZGFnZXNoID0gMHhmYjQ5OwogIHQuc2hpbmRhZ2VzaGhlYnJldyA9IDB4ZmI0OTsKICB0LnNoaW5kYWdlc2hzaGluZG90ID0gMHhmYjJjOwogIHQuc2hpbmRhZ2VzaHNoaW5kb3RoZWJyZXcgPSAweGZiMmM7CiAgdC5zaGluZGFnZXNoc2luZG90ID0gMHhmYjJkOwogIHQuc2hpbmRhZ2VzaHNpbmRvdGhlYnJldyA9IDB4ZmIyZDsKICB0LnNoaW5kb3RoZWJyZXcgPSAweDA1YzE7CiAgdC5zaGluaGVicmV3ID0gMHgwNWU5OwogIHQuc2hpbnNoaW5kb3QgPSAweGZiMmE7CiAgdC5zaGluc2hpbmRvdGhlYnJldyA9IDB4ZmIyYTsKICB0LnNoaW5zaW5kb3QgPSAweGZiMmI7CiAgdC5zaGluc2luZG90aGVicmV3ID0gMHhmYjJiOwogIHQuc2hvb2sgPSAweDAyODI7CiAgdC5zaWdtYSA9IDB4MDNjMzsKICB0LnNpZ21hMSA9IDB4MDNjMjsKICB0LnNpZ21hZmluYWwgPSAweDAzYzI7CiAgdC5zaWdtYWx1bmF0ZXN5bWJvbGdyZWVrID0gMHgwM2YyOwogIHQuc2loaXJhZ2FuYSA9IDB4MzA1NzsKICB0LnNpa2F0YWthbmEgPSAweDMwYjc7CiAgdC5zaWthdGFrYW5haGFsZndpZHRoID0gMHhmZjdjOwogIHQuc2lsdXFoZWJyZXcgPSAweDA1YmQ7CiAgdC5zaWx1cWxlZnRoZWJyZXcgPSAweDA1YmQ7CiAgdC5zaW1pbGFyID0gMHgyMjNjOwogIHQuc2luZG90aGVicmV3ID0gMHgwNWMyOwogIHQuc2lvc2FjaXJjbGVrb3JlYW4gPSAweDMyNzQ7CiAgdC5zaW9zYXBhcmVua29yZWFuID0gMHgzMjE0OwogIHQuc2lvc2NpZXVja29yZWFuID0gMHgzMTdlOwogIHQuc2lvc2NpcmNsZWtvcmVhbiA9IDB4MzI2NjsKICB0LnNpb3NraXllb2trb3JlYW4gPSAweDMxN2E7CiAgdC5zaW9za29yZWFuID0gMHgzMTQ1OwogIHQuc2lvc25pZXVua29yZWFuID0gMHgzMTdiOwogIHQuc2lvc3BhcmVua29yZWFuID0gMHgzMjA2OwogIHQuc2lvc3BpZXVwa29yZWFuID0gMHgzMTdkOwogIHQuc2lvc3Rpa2V1dGtvcmVhbiA9IDB4MzE3YzsKICB0LnNpeCA9IDB4MDAzNjsKICB0LnNpeGFyYWJpYyA9IDB4MDY2NjsKICB0LnNpeGJlbmdhbGkgPSAweDA5ZWM7CiAgdC5zaXhjaXJjbGUgPSAweDI0NjU7CiAgdC5zaXhjaXJjbGVpbnZlcnNlc2Fuc3NlcmlmID0gMHgyNzhmOwogIHQuc2l4ZGV2YSA9IDB4MDk2YzsKICB0LnNpeGd1amFyYXRpID0gMHgwYWVjOwogIHQuc2l4Z3VybXVraGkgPSAweDBhNmM7CiAgdC5zaXhoYWNrYXJhYmljID0gMHgwNjY2OwogIHQuc2l4aGFuZ3pob3UgPSAweDMwMjY7CiAgdC5zaXhpZGVvZ3JhcGhpY3BhcmVuID0gMHgzMjI1OwogIHQuc2l4aW5mZXJpb3IgPSAweDIwODY7CiAgdC5zaXhtb25vc3BhY2UgPSAweGZmMTY7CiAgdC5zaXhvbGRzdHlsZSA9IDB4ZjczNjsKICB0LnNpeHBhcmVuID0gMHgyNDc5OwogIHQuc2l4cGVyaW9kID0gMHgyNDhkOwogIHQuc2l4cGVyc2lhbiA9IDB4MDZmNjsKICB0LnNpeHJvbWFuID0gMHgyMTc1OwogIHQuc2l4c3VwZXJpb3IgPSAweDIwNzY7CiAgdC5zaXh0ZWVuY2lyY2xlID0gMHgyNDZmOwogIHQuc2l4dGVlbmN1cnJlbmN5ZGVub21pbmF0b3JiZW5nYWxpID0gMHgwOWY5OwogIHQuc2l4dGVlbnBhcmVuID0gMHgyNDgzOwogIHQuc2l4dGVlbnBlcmlvZCA9IDB4MjQ5NzsKICB0LnNpeHRoYWkgPSAweDBlNTY7CiAgdC5zbGFzaCA9IDB4MDAyZjsKICB0LnNsYXNobW9ub3NwYWNlID0gMHhmZjBmOwogIHQuc2xvbmcgPSAweDAxN2Y7CiAgdC5zbG9uZ2RvdGFjY2VudCA9IDB4MWU5YjsKICB0LnNtaWxlZmFjZSA9IDB4MjYzYTsKICB0LnNtb25vc3BhY2UgPSAweGZmNTM7CiAgdC5zb2ZwYXN1cWhlYnJldyA9IDB4MDVjMzsKICB0LnNvZnRoeXBoZW4gPSAweDAwYWQ7CiAgdC5zb2Z0c2lnbmN5cmlsbGljID0gMHgwNDRjOwogIHQuc29oaXJhZ2FuYSA9IDB4MzA1ZDsKICB0LnNva2F0YWthbmEgPSAweDMwYmQ7CiAgdC5zb2thdGFrYW5haGFsZndpZHRoID0gMHhmZjdmOwogIHQuc29saWR1c2xvbmdvdmVybGF5Y21iID0gMHgwMzM4OwogIHQuc29saWR1c3Nob3J0b3ZlcmxheWNtYiA9IDB4MDMzNzsKICB0LnNvcnVzaXRoYWkgPSAweDBlMjk7CiAgdC5zb3NhbGF0aGFpID0gMHgwZTI4OwogIHQuc29zb3RoYWkgPSAweDBlMGI7CiAgdC5zb3N1YXRoYWkgPSAweDBlMmE7CiAgdC5zcGFjZSA9IDB4MDAyMDsKICB0LnNwYWNlaGFja2FyYWJpYyA9IDB4MDAyMDsKICB0LnNwYWRlID0gMHgyNjYwOwogIHQuc3BhZGVzdWl0YmxhY2sgPSAweDI2NjA7CiAgdC5zcGFkZXN1aXR3aGl0ZSA9IDB4MjY2NDsKICB0LnNwYXJlbiA9IDB4MjRhZTsKICB0LnNxdWFyZWJlbG93Y21iID0gMHgwMzNiOwogIHQuc3F1YXJlY2MgPSAweDMzYzQ7CiAgdC5zcXVhcmVjbSA9IDB4MzM5ZDsKICB0LnNxdWFyZWRpYWdvbmFsY3Jvc3NoYXRjaGZpbGwgPSAweDI1YTk7CiAgdC5zcXVhcmVob3Jpem9udGFsZmlsbCA9IDB4MjVhNDsKICB0LnNxdWFyZWtnID0gMHgzMzhmOwogIHQuc3F1YXJla20gPSAweDMzOWU7CiAgdC5zcXVhcmVrbWNhcGl0YWwgPSAweDMzY2U7CiAgdC5zcXVhcmVsbiA9IDB4MzNkMTsKICB0LnNxdWFyZWxvZyA9IDB4MzNkMjsKICB0LnNxdWFyZW1nID0gMHgzMzhlOwogIHQuc3F1YXJlbWlsID0gMHgzM2Q1OwogIHQuc3F1YXJlbW0gPSAweDMzOWM7CiAgdC5zcXVhcmVtc3F1YXJlZCA9IDB4MzNhMTsKICB0LnNxdWFyZW9ydGhvZ29uYWxjcm9zc2hhdGNoZmlsbCA9IDB4MjVhNjsKICB0LnNxdWFyZXVwcGVybGVmdHRvbG93ZXJyaWdodGZpbGwgPSAweDI1YTc7CiAgdC5zcXVhcmV1cHBlcnJpZ2h0dG9sb3dlcmxlZnRmaWxsID0gMHgyNWE4OwogIHQuc3F1YXJldmVydGljYWxmaWxsID0gMHgyNWE1OwogIHQuc3F1YXJld2hpdGV3aXRoc21hbGxibGFjayA9IDB4MjVhMzsKICB0LnNyc3F1YXJlID0gMHgzM2RiOwogIHQuc3NhYmVuZ2FsaSA9IDB4MDliNzsKICB0LnNzYWRldmEgPSAweDA5Mzc7CiAgdC5zc2FndWphcmF0aSA9IDB4MGFiNzsKICB0LnNzYW5nY2lldWNrb3JlYW4gPSAweDMxNDk7CiAgdC5zc2FuZ2hpZXVoa29yZWFuID0gMHgzMTg1OwogIHQuc3NhbmdpZXVuZ2tvcmVhbiA9IDB4MzE4MDsKICB0LnNzYW5na2l5ZW9ra29yZWFuID0gMHgzMTMyOwogIHQuc3NhbmduaWV1bmtvcmVhbiA9IDB4MzE2NTsKICB0LnNzYW5ncGlldXBrb3JlYW4gPSAweDMxNDM7CiAgdC5zc2FuZ3Npb3Nrb3JlYW4gPSAweDMxNDY7CiAgdC5zc2FuZ3Rpa2V1dGtvcmVhbiA9IDB4MzEzODsKICB0LnNzdXBlcmlvciA9IDB4ZjZmMjsKICB0LnN0ZXJsaW5nID0gMHgwMGEzOwogIHQuc3Rlcmxpbmdtb25vc3BhY2UgPSAweGZmZTE7CiAgdC5zdHJva2Vsb25nb3ZlcmxheWNtYiA9IDB4MDMzNjsKICB0LnN0cm9rZXNob3J0b3ZlcmxheWNtYiA9IDB4MDMzNTsKICB0LnN1YnNldCA9IDB4MjI4MjsKICB0LnN1YnNldG5vdGVxdWFsID0gMHgyMjhhOwogIHQuc3Vic2V0b3JlcXVhbCA9IDB4MjI4NjsKICB0LnN1Y2NlZWRzID0gMHgyMjdiOwogIHQuc3VjaHRoYXQgPSAweDIyMGI7CiAgdC5zdWhpcmFnYW5hID0gMHgzMDU5OwogIHQuc3VrYXRha2FuYSA9IDB4MzBiOTsKICB0LnN1a2F0YWthbmFoYWxmd2lkdGggPSAweGZmN2Q7CiAgdC5zdWt1bmFyYWJpYyA9IDB4MDY1MjsKICB0LnN1bW1hdGlvbiA9IDB4MjIxMTsKICB0LnN1biA9IDB4MjYzYzsKICB0LnN1cGVyc2V0ID0gMHgyMjgzOwogIHQuc3VwZXJzZXRub3RlcXVhbCA9IDB4MjI4YjsKICB0LnN1cGVyc2V0b3JlcXVhbCA9IDB4MjI4NzsKICB0LnN2c3F1YXJlID0gMHgzM2RjOwogIHQuc3lvdXdhZXJhc3F1YXJlID0gMHgzMzdjOwogIHQudCA9IDB4MDA3NDsKICB0LnRhYmVuZ2FsaSA9IDB4MDlhNDsKICB0LnRhY2tkb3duID0gMHgyMmE0OwogIHQudGFja2xlZnQgPSAweDIyYTM7CiAgdC50YWRldmEgPSAweDA5MjQ7CiAgdC50YWd1amFyYXRpID0gMHgwYWE0OwogIHQudGFndXJtdWtoaSA9IDB4MGEyNDsKICB0LnRhaGFyYWJpYyA9IDB4MDYzNzsKICB0LnRhaGZpbmFsYXJhYmljID0gMHhmZWMyOwogIHQudGFoaW5pdGlhbGFyYWJpYyA9IDB4ZmVjMzsKICB0LnRhaGlyYWdhbmEgPSAweDMwNWY7CiAgdC50YWhtZWRpYWxhcmFiaWMgPSAweGZlYzQ7CiAgdC50YWlzeW91ZXJhc3F1YXJlID0gMHgzMzdkOwogIHQudGFrYXRha2FuYSA9IDB4MzBiZjsKICB0LnRha2F0YWthbmFoYWxmd2lkdGggPSAweGZmODA7CiAgdC50YXR3ZWVsYXJhYmljID0gMHgwNjQwOwogIHQudGF1ID0gMHgwM2M0OwogIHQudGF2ID0gMHgwNWVhOwogIHQudGF2ZGFnZXMgPSAweGZiNGE7CiAgdC50YXZkYWdlc2ggPSAweGZiNGE7CiAgdC50YXZkYWdlc2hoZWJyZXcgPSAweGZiNGE7CiAgdC50YXZoZWJyZXcgPSAweDA1ZWE7CiAgdC50YmFyID0gMHgwMTY3OwogIHQudGJvcG9tb2ZvID0gMHgzMTBhOwogIHQudGNhcm9uID0gMHgwMTY1OwogIHQudGNjdXJsID0gMHgwMmE4OwogIHQudGNlZGlsbGEgPSAweDAxNjM7CiAgdC50Y2hlaGFyYWJpYyA9IDB4MDY4NjsKICB0LnRjaGVoZmluYWxhcmFiaWMgPSAweGZiN2I7CiAgdC50Y2hlaGluaXRpYWxhcmFiaWMgPSAweGZiN2M7CiAgdC50Y2hlaG1lZGlhbGFyYWJpYyA9IDB4ZmI3ZDsKICB0LnRjaXJjbGUgPSAweDI0ZTM7CiAgdC50Y2lyY3VtZmxleGJlbG93ID0gMHgxZTcxOwogIHQudGNvbW1hYWNjZW50ID0gMHgwMTYzOwogIHQudGRpZXJlc2lzID0gMHgxZTk3OwogIHQudGRvdGFjY2VudCA9IDB4MWU2YjsKICB0LnRkb3RiZWxvdyA9IDB4MWU2ZDsKICB0LnRlY3lyaWxsaWMgPSAweDA0NDI7CiAgdC50ZWRlc2NlbmRlcmN5cmlsbGljID0gMHgwNGFkOwogIHQudGVoYXJhYmljID0gMHgwNjJhOwogIHQudGVoZmluYWxhcmFiaWMgPSAweGZlOTY7CiAgdC50ZWhoYWhpbml0aWFsYXJhYmljID0gMHhmY2EyOwogIHQudGVoaGFoaXNvbGF0ZWRhcmFiaWMgPSAweGZjMGM7CiAgdC50ZWhpbml0aWFsYXJhYmljID0gMHhmZTk3OwogIHQudGVoaXJhZ2FuYSA9IDB4MzA2NjsKICB0LnRlaGplZW1pbml0aWFsYXJhYmljID0gMHhmY2ExOwogIHQudGVoamVlbWlzb2xhdGVkYXJhYmljID0gMHhmYzBiOwogIHQudGVobWFyYnV0YWFyYWJpYyA9IDB4MDYyOTsKICB0LnRlaG1hcmJ1dGFmaW5hbGFyYWJpYyA9IDB4ZmU5NDsKICB0LnRlaG1lZGlhbGFyYWJpYyA9IDB4ZmU5ODsKICB0LnRlaG1lZW1pbml0aWFsYXJhYmljID0gMHhmY2E0OwogIHQudGVobWVlbWlzb2xhdGVkYXJhYmljID0gMHhmYzBlOwogIHQudGVobm9vbmZpbmFsYXJhYmljID0gMHhmYzczOwogIHQudGVrYXRha2FuYSA9IDB4MzBjNjsKICB0LnRla2F0YWthbmFoYWxmd2lkdGggPSAweGZmODM7CiAgdC50ZWxlcGhvbmUgPSAweDIxMjE7CiAgdC50ZWxlcGhvbmVibGFjayA9IDB4MjYwZTsKICB0LnRlbGlzaGFnZWRvbGFoZWJyZXcgPSAweDA1YTA7CiAgdC50ZWxpc2hhcWV0YW5haGVicmV3ID0gMHgwNWE5OwogIHQudGVuY2lyY2xlID0gMHgyNDY5OwogIHQudGVuaWRlb2dyYXBoaWNwYXJlbiA9IDB4MzIyOTsKICB0LnRlbnBhcmVuID0gMHgyNDdkOwogIHQudGVucGVyaW9kID0gMHgyNDkxOwogIHQudGVucm9tYW4gPSAweDIxNzk7CiAgdC50ZXNoID0gMHgwMmE3OwogIHQudGV0ID0gMHgwNWQ4OwogIHQudGV0ZGFnZXNoID0gMHhmYjM4OwogIHQudGV0ZGFnZXNoaGVicmV3ID0gMHhmYjM4OwogIHQudGV0aGVicmV3ID0gMHgwNWQ4OwogIHQudGV0c2VjeXJpbGxpYyA9IDB4MDRiNTsKICB0LnRldmlyaGVicmV3ID0gMHgwNTliOwogIHQudGV2aXJsZWZ0aGVicmV3ID0gMHgwNTliOwogIHQudGhhYmVuZ2FsaSA9IDB4MDlhNTsKICB0LnRoYWRldmEgPSAweDA5MjU7CiAgdC50aGFndWphcmF0aSA9IDB4MGFhNTsKICB0LnRoYWd1cm11a2hpID0gMHgwYTI1OwogIHQudGhhbGFyYWJpYyA9IDB4MDYzMDsKICB0LnRoYWxmaW5hbGFyYWJpYyA9IDB4ZmVhYzsKICB0LnRoYW50aGFraGF0bG93bGVmdHRoYWkgPSAweGY4OTg7CiAgdC50aGFudGhha2hhdGxvd3JpZ2h0dGhhaSA9IDB4Zjg5NzsKICB0LnRoYW50aGFraGF0dGhhaSA9IDB4MGU0YzsKICB0LnRoYW50aGFraGF0dXBwZXJsZWZ0dGhhaSA9IDB4Zjg5NjsKICB0LnRoZWhhcmFiaWMgPSAweDA2MmI7CiAgdC50aGVoZmluYWxhcmFiaWMgPSAweGZlOWE7CiAgdC50aGVoaW5pdGlhbGFyYWJpYyA9IDB4ZmU5YjsKICB0LnRoZWhtZWRpYWxhcmFiaWMgPSAweGZlOWM7CiAgdC50aGVyZWV4aXN0cyA9IDB4MjIwMzsKICB0LnRoZXJlZm9yZSA9IDB4MjIzNDsKICB0LnRoZXRhID0gMHgwM2I4OwogIHQudGhldGExID0gMHgwM2QxOwogIHQudGhldGFzeW1ib2xncmVlayA9IDB4MDNkMTsKICB0LnRoaWV1dGhhY2lyY2xla29yZWFuID0gMHgzMjc5OwogIHQudGhpZXV0aGFwYXJlbmtvcmVhbiA9IDB4MzIxOTsKICB0LnRoaWV1dGhjaXJjbGVrb3JlYW4gPSAweDMyNmI7CiAgdC50aGlldXRoa29yZWFuID0gMHgzMTRjOwogIHQudGhpZXV0aHBhcmVua29yZWFuID0gMHgzMjBiOwogIHQudGhpcnRlZW5jaXJjbGUgPSAweDI0NmM7CiAgdC50aGlydGVlbnBhcmVuID0gMHgyNDgwOwogIHQudGhpcnRlZW5wZXJpb2QgPSAweDI0OTQ7CiAgdC50aG9uYW5nbW9udGhvdGhhaSA9IDB4MGUxMTsKICB0LnRob29rID0gMHgwMWFkOwogIHQudGhvcGh1dGhhb3RoYWkgPSAweDBlMTI7CiAgdC50aG9ybiA9IDB4MDBmZTsKICB0LnRob3RoYWhhbnRoYWkgPSAweDBlMTc7CiAgdC50aG90aGFudGhhaSA9IDB4MGUxMDsKICB0LnRob3Rob25ndGhhaSA9IDB4MGUxODsKICB0LnRob3RodW5ndGhhaSA9IDB4MGUxNjsKICB0LnRob3VzYW5kY3lyaWxsaWMgPSAweDA0ODI7CiAgdC50aG91c2FuZHNzZXBhcmF0b3JhcmFiaWMgPSAweDA2NmM7CiAgdC50aG91c2FuZHNzZXBhcmF0b3JwZXJzaWFuID0gMHgwNjZjOwogIHQudGhyZWUgPSAweDAwMzM7CiAgdC50aHJlZWFyYWJpYyA9IDB4MDY2MzsKICB0LnRocmVlYmVuZ2FsaSA9IDB4MDllOTsKICB0LnRocmVlY2lyY2xlID0gMHgyNDYyOwogIHQudGhyZWVjaXJjbGVpbnZlcnNlc2Fuc3NlcmlmID0gMHgyNzhjOwogIHQudGhyZWVkZXZhID0gMHgwOTY5OwogIHQudGhyZWVlaWdodGhzID0gMHgyMTVjOwogIHQudGhyZWVndWphcmF0aSA9IDB4MGFlOTsKICB0LnRocmVlZ3VybXVraGkgPSAweDBhNjk7CiAgdC50aHJlZWhhY2thcmFiaWMgPSAweDA2NjM7CiAgdC50aHJlZWhhbmd6aG91ID0gMHgzMDIzOwogIHQudGhyZWVpZGVvZ3JhcGhpY3BhcmVuID0gMHgzMjIyOwogIHQudGhyZWVpbmZlcmlvciA9IDB4MjA4MzsKICB0LnRocmVlbW9ub3NwYWNlID0gMHhmZjEzOwogIHQudGhyZWVudW1lcmF0b3JiZW5nYWxpID0gMHgwOWY2OwogIHQudGhyZWVvbGRzdHlsZSA9IDB4ZjczMzsKICB0LnRocmVlcGFyZW4gPSAweDI0NzY7CiAgdC50aHJlZXBlcmlvZCA9IDB4MjQ4YTsKICB0LnRocmVlcGVyc2lhbiA9IDB4MDZmMzsKICB0LnRocmVlcXVhcnRlcnMgPSAweDAwYmU7CiAgdC50aHJlZXF1YXJ0ZXJzZW1kYXNoID0gMHhmNmRlOwogIHQudGhyZWVyb21hbiA9IDB4MjE3MjsKICB0LnRocmVlc3VwZXJpb3IgPSAweDAwYjM7CiAgdC50aHJlZXRoYWkgPSAweDBlNTM7CiAgdC50aHpzcXVhcmUgPSAweDMzOTQ7CiAgdC50aWhpcmFnYW5hID0gMHgzMDYxOwogIHQudGlrYXRha2FuYSA9IDB4MzBjMTsKICB0LnRpa2F0YWthbmFoYWxmd2lkdGggPSAweGZmODE7CiAgdC50aWtldXRhY2lyY2xla29yZWFuID0gMHgzMjcwOwogIHQudGlrZXV0YXBhcmVua29yZWFuID0gMHgzMjEwOwogIHQudGlrZXV0Y2lyY2xla29yZWFuID0gMHgzMjYyOwogIHQudGlrZXV0a29yZWFuID0gMHgzMTM3OwogIHQudGlrZXV0cGFyZW5rb3JlYW4gPSAweDMyMDI7CiAgdC50aWxkZSA9IDB4MDJkYzsKICB0LnRpbGRlYmVsb3djbWIgPSAweDAzMzA7CiAgdC50aWxkZWNtYiA9IDB4MDMwMzsKICB0LnRpbGRlY29tYiA9IDB4MDMwMzsKICB0LnRpbGRlZG91YmxlY21iID0gMHgwMzYwOwogIHQudGlsZGVvcGVyYXRvciA9IDB4MjIzYzsKICB0LnRpbGRlb3ZlcmxheWNtYiA9IDB4MDMzNDsKICB0LnRpbGRldmVydGljYWxjbWIgPSAweDAzM2U7CiAgdC50aW1lc2NpcmNsZSA9IDB4MjI5NzsKICB0LnRpcGVoYWhlYnJldyA9IDB4MDU5NjsKICB0LnRpcGVoYWxlZnRoZWJyZXcgPSAweDA1OTY7CiAgdC50aXBwaWd1cm11a2hpID0gMHgwYTcwOwogIHQudGl0bG9jeXJpbGxpY2NtYiA9IDB4MDQ4MzsKICB0LnRpd25hcm1lbmlhbiA9IDB4MDU3ZjsKICB0LnRsaW5lYmVsb3cgPSAweDFlNmY7CiAgdC50bW9ub3NwYWNlID0gMHhmZjU0OwogIHQudG9hcm1lbmlhbiA9IDB4MDU2OTsKICB0LnRvaGlyYWdhbmEgPSAweDMwNjg7CiAgdC50b2thdGFrYW5hID0gMHgzMGM4OwogIHQudG9rYXRha2FuYWhhbGZ3aWR0aCA9IDB4ZmY4NDsKICB0LnRvbmViYXJleHRyYWhpZ2htb2QgPSAweDAyZTU7CiAgdC50b25lYmFyZXh0cmFsb3dtb2QgPSAweDAyZTk7CiAgdC50b25lYmFyaGlnaG1vZCA9IDB4MDJlNjsKICB0LnRvbmViYXJsb3dtb2QgPSAweDAyZTg7CiAgdC50b25lYmFybWlkbW9kID0gMHgwMmU3OwogIHQudG9uZWZpdmUgPSAweDAxYmQ7CiAgdC50b25lc2l4ID0gMHgwMTg1OwogIHQudG9uZXR3byA9IDB4MDFhODsKICB0LnRvbm9zID0gMHgwMzg0OwogIHQudG9uc3F1YXJlID0gMHgzMzI3OwogIHQudG9wYXRha3RoYWkgPSAweDBlMGY7CiAgdC50b3J0b2lzZXNoZWxsYnJhY2tldGxlZnQgPSAweDMwMTQ7CiAgdC50b3J0b2lzZXNoZWxsYnJhY2tldGxlZnRzbWFsbCA9IDB4ZmU1ZDsKICB0LnRvcnRvaXNlc2hlbGxicmFja2V0bGVmdHZlcnRpY2FsID0gMHhmZTM5OwogIHQudG9ydG9pc2VzaGVsbGJyYWNrZXRyaWdodCA9IDB4MzAxNTsKICB0LnRvcnRvaXNlc2hlbGxicmFja2V0cmlnaHRzbWFsbCA9IDB4ZmU1ZTsKICB0LnRvcnRvaXNlc2hlbGxicmFja2V0cmlnaHR2ZXJ0aWNhbCA9IDB4ZmUzYTsKICB0LnRvdGFvdGhhaSA9IDB4MGUxNTsKICB0LnRwYWxhdGFsaG9vayA9IDB4MDFhYjsKICB0LnRwYXJlbiA9IDB4MjRhZjsKICB0LnRyYWRlbWFyayA9IDB4MjEyMjsKICB0LnRyYWRlbWFya3NhbnMgPSAweGY4ZWE7CiAgdC50cmFkZW1hcmtzZXJpZiA9IDB4ZjZkYjsKICB0LnRyZXRyb2ZsZXhob29rID0gMHgwMjg4OwogIHQudHJpYWdkbiA9IDB4MjViYzsKICB0LnRyaWFnbGYgPSAweDI1YzQ7CiAgdC50cmlhZ3J0ID0gMHgyNWJhOwogIHQudHJpYWd1cCA9IDB4MjViMjsKICB0LnRzID0gMHgwMmE2OwogIHQudHNhZGkgPSAweDA1ZTY7CiAgdC50c2FkaWRhZ2VzaCA9IDB4ZmI0NjsKICB0LnRzYWRpZGFnZXNoaGVicmV3ID0gMHhmYjQ2OwogIHQudHNhZGloZWJyZXcgPSAweDA1ZTY7CiAgdC50c2VjeXJpbGxpYyA9IDB4MDQ0NjsKICB0LnRzZXJlID0gMHgwNWI1OwogIHQudHNlcmUxMiA9IDB4MDViNTsKICB0LnRzZXJlMWUgPSAweDA1YjU7CiAgdC50c2VyZTJiID0gMHgwNWI1OwogIHQudHNlcmVoZWJyZXcgPSAweDA1YjU7CiAgdC50c2VyZW5hcnJvd2hlYnJldyA9IDB4MDViNTsKICB0LnRzZXJlcXVhcnRlcmhlYnJldyA9IDB4MDViNTsKICB0LnRzZXJld2lkZWhlYnJldyA9IDB4MDViNTsKICB0LnRzaGVjeXJpbGxpYyA9IDB4MDQ1YjsKICB0LnRzdXBlcmlvciA9IDB4ZjZmMzsKICB0LnR0YWJlbmdhbGkgPSAweDA5OWY7CiAgdC50dGFkZXZhID0gMHgwOTFmOwogIHQudHRhZ3VqYXJhdGkgPSAweDBhOWY7CiAgdC50dGFndXJtdWtoaSA9IDB4MGExZjsKICB0LnR0ZWhhcmFiaWMgPSAweDA2Nzk7CiAgdC50dGVoZmluYWxhcmFiaWMgPSAweGZiNjc7CiAgdC50dGVoaW5pdGlhbGFyYWJpYyA9IDB4ZmI2ODsKICB0LnR0ZWhtZWRpYWxhcmFiaWMgPSAweGZiNjk7CiAgdC50dGhhYmVuZ2FsaSA9IDB4MDlhMDsKICB0LnR0aGFkZXZhID0gMHgwOTIwOwogIHQudHRoYWd1amFyYXRpID0gMHgwYWEwOwogIHQudHRoYWd1cm11a2hpID0gMHgwYTIwOwogIHQudHR1cm5lZCA9IDB4MDI4NzsKICB0LnR1aGlyYWdhbmEgPSAweDMwNjQ7CiAgdC50dWthdGFrYW5hID0gMHgzMGM0OwogIHQudHVrYXRha2FuYWhhbGZ3aWR0aCA9IDB4ZmY4MjsKICB0LnR1c21hbGxoaXJhZ2FuYSA9IDB4MzA2MzsKICB0LnR1c21hbGxrYXRha2FuYSA9IDB4MzBjMzsKICB0LnR1c21hbGxrYXRha2FuYWhhbGZ3aWR0aCA9IDB4ZmY2ZjsKICB0LnR3ZWx2ZWNpcmNsZSA9IDB4MjQ2YjsKICB0LnR3ZWx2ZXBhcmVuID0gMHgyNDdmOwogIHQudHdlbHZlcGVyaW9kID0gMHgyNDkzOwogIHQudHdlbHZlcm9tYW4gPSAweDIxN2I7CiAgdC50d2VudHljaXJjbGUgPSAweDI0NzM7CiAgdC50d2VudHloYW5nemhvdSA9IDB4NTM0NDsKICB0LnR3ZW50eXBhcmVuID0gMHgyNDg3OwogIHQudHdlbnR5cGVyaW9kID0gMHgyNDliOwogIHQudHdvID0gMHgwMDMyOwogIHQudHdvYXJhYmljID0gMHgwNjYyOwogIHQudHdvYmVuZ2FsaSA9IDB4MDllODsKICB0LnR3b2NpcmNsZSA9IDB4MjQ2MTsKICB0LnR3b2NpcmNsZWludmVyc2VzYW5zc2VyaWYgPSAweDI3OGI7CiAgdC50d29kZXZhID0gMHgwOTY4OwogIHQudHdvZG90ZW5sZWFkZXIgPSAweDIwMjU7CiAgdC50d29kb3RsZWFkZXIgPSAweDIwMjU7CiAgdC50d29kb3RsZWFkZXJ2ZXJ0aWNhbCA9IDB4ZmUzMDsKICB0LnR3b2d1amFyYXRpID0gMHgwYWU4OwogIHQudHdvZ3VybXVraGkgPSAweDBhNjg7CiAgdC50d29oYWNrYXJhYmljID0gMHgwNjYyOwogIHQudHdvaGFuZ3pob3UgPSAweDMwMjI7CiAgdC50d29pZGVvZ3JhcGhpY3BhcmVuID0gMHgzMjIxOwogIHQudHdvaW5mZXJpb3IgPSAweDIwODI7CiAgdC50d29tb25vc3BhY2UgPSAweGZmMTI7CiAgdC50d29udW1lcmF0b3JiZW5nYWxpID0gMHgwOWY1OwogIHQudHdvb2xkc3R5bGUgPSAweGY3MzI7CiAgdC50d29wYXJlbiA9IDB4MjQ3NTsKICB0LnR3b3BlcmlvZCA9IDB4MjQ4OTsKICB0LnR3b3BlcnNpYW4gPSAweDA2ZjI7CiAgdC50d29yb21hbiA9IDB4MjE3MTsKICB0LnR3b3N0cm9rZSA9IDB4MDFiYjsKICB0LnR3b3N1cGVyaW9yID0gMHgwMGIyOwogIHQudHdvdGhhaSA9IDB4MGU1MjsKICB0LnR3b3RoaXJkcyA9IDB4MjE1NDsKICB0LnUgPSAweDAwNzU7CiAgdC51YWN1dGUgPSAweDAwZmE7CiAgdC51YmFyID0gMHgwMjg5OwogIHQudWJlbmdhbGkgPSAweDA5ODk7CiAgdC51Ym9wb21vZm8gPSAweDMxMjg7CiAgdC51YnJldmUgPSAweDAxNmQ7CiAgdC51Y2Fyb24gPSAweDAxZDQ7CiAgdC51Y2lyY2xlID0gMHgyNGU0OwogIHQudWNpcmN1bWZsZXggPSAweDAwZmI7CiAgdC51Y2lyY3VtZmxleGJlbG93ID0gMHgxZTc3OwogIHQudWN5cmlsbGljID0gMHgwNDQzOwogIHQudWRhdHRhZGV2YSA9IDB4MDk1MTsKICB0LnVkYmxhY3V0ZSA9IDB4MDE3MTsKICB0LnVkYmxncmF2ZSA9IDB4MDIxNTsKICB0LnVkZXZhID0gMHgwOTA5OwogIHQudWRpZXJlc2lzID0gMHgwMGZjOwogIHQudWRpZXJlc2lzYWN1dGUgPSAweDAxZDg7CiAgdC51ZGllcmVzaXNiZWxvdyA9IDB4MWU3MzsKICB0LnVkaWVyZXNpc2Nhcm9uID0gMHgwMWRhOwogIHQudWRpZXJlc2lzY3lyaWxsaWMgPSAweDA0ZjE7CiAgdC51ZGllcmVzaXNncmF2ZSA9IDB4MDFkYzsKICB0LnVkaWVyZXNpc21hY3JvbiA9IDB4MDFkNjsKICB0LnVkb3RiZWxvdyA9IDB4MWVlNTsKICB0LnVncmF2ZSA9IDB4MDBmOTsKICB0LnVndWphcmF0aSA9IDB4MGE4OTsKICB0LnVndXJtdWtoaSA9IDB4MGEwOTsKICB0LnVoaXJhZ2FuYSA9IDB4MzA0NjsKICB0LnVob29rYWJvdmUgPSAweDFlZTc7CiAgdC51aG9ybiA9IDB4MDFiMDsKICB0LnVob3JuYWN1dGUgPSAweDFlZTk7CiAgdC51aG9ybmRvdGJlbG93ID0gMHgxZWYxOwogIHQudWhvcm5ncmF2ZSA9IDB4MWVlYjsKICB0LnVob3JuaG9va2Fib3ZlID0gMHgxZWVkOwogIHQudWhvcm50aWxkZSA9IDB4MWVlZjsKICB0LnVodW5nYXJ1bWxhdXQgPSAweDAxNzE7CiAgdC51aHVuZ2FydW1sYXV0Y3lyaWxsaWMgPSAweDA0ZjM7CiAgdC51aW52ZXJ0ZWRicmV2ZSA9IDB4MDIxNzsKICB0LnVrYXRha2FuYSA9IDB4MzBhNjsKICB0LnVrYXRha2FuYWhhbGZ3aWR0aCA9IDB4ZmY3MzsKICB0LnVrY3lyaWxsaWMgPSAweDA0Nzk7CiAgdC51a29yZWFuID0gMHgzMTVjOwogIHQudW1hY3JvbiA9IDB4MDE2YjsKICB0LnVtYWNyb25jeXJpbGxpYyA9IDB4MDRlZjsKICB0LnVtYWNyb25kaWVyZXNpcyA9IDB4MWU3YjsKICB0LnVtYXRyYWd1cm11a2hpID0gMHgwYTQxOwogIHQudW1vbm9zcGFjZSA9IDB4ZmY1NTsKICB0LnVuZGVyc2NvcmUgPSAweDAwNWY7CiAgdC51bmRlcnNjb3JlZGJsID0gMHgyMDE3OwogIHQudW5kZXJzY29yZW1vbm9zcGFjZSA9IDB4ZmYzZjsKICB0LnVuZGVyc2NvcmV2ZXJ0aWNhbCA9IDB4ZmUzMzsKICB0LnVuZGVyc2NvcmV3YXZ5ID0gMHhmZTRmOwogIHQudW5pb24gPSAweDIyMmE7CiAgdC51bml2ZXJzYWwgPSAweDIyMDA7CiAgdC51b2dvbmVrID0gMHgwMTczOwogIHQudXBhcmVuID0gMHgyNGIwOwogIHQudXBibG9jayA9IDB4MjU4MDsKICB0LnVwcGVyZG90aGVicmV3ID0gMHgwNWM0OwogIHQudXBzaWxvbiA9IDB4MDNjNTsKICB0LnVwc2lsb25kaWVyZXNpcyA9IDB4MDNjYjsKICB0LnVwc2lsb25kaWVyZXNpc3Rvbm9zID0gMHgwM2IwOwogIHQudXBzaWxvbmxhdGluID0gMHgwMjhhOwogIHQudXBzaWxvbnRvbm9zID0gMHgwM2NkOwogIHQudXB0YWNrYmVsb3djbWIgPSAweDAzMWQ7CiAgdC51cHRhY2ttb2QgPSAweDAyZDQ7CiAgdC51cmFndXJtdWtoaSA9IDB4MGE3MzsKICB0LnVyaW5nID0gMHgwMTZmOwogIHQudXNob3J0Y3lyaWxsaWMgPSAweDA0NWU7CiAgdC51c21hbGxoaXJhZ2FuYSA9IDB4MzA0NTsKICB0LnVzbWFsbGthdGFrYW5hID0gMHgzMGE1OwogIHQudXNtYWxsa2F0YWthbmFoYWxmd2lkdGggPSAweGZmNjk7CiAgdC51c3RyYWlnaHRjeXJpbGxpYyA9IDB4MDRhZjsKICB0LnVzdHJhaWdodHN0cm9rZWN5cmlsbGljID0gMHgwNGIxOwogIHQudXRpbGRlID0gMHgwMTY5OwogIHQudXRpbGRlYWN1dGUgPSAweDFlNzk7CiAgdC51dGlsZGViZWxvdyA9IDB4MWU3NTsKICB0LnV1YmVuZ2FsaSA9IDB4MDk4YTsKICB0LnV1ZGV2YSA9IDB4MDkwYTsKICB0LnV1Z3VqYXJhdGkgPSAweDBhOGE7CiAgdC51dWd1cm11a2hpID0gMHgwYTBhOwogIHQudXVtYXRyYWd1cm11a2hpID0gMHgwYTQyOwogIHQudXV2b3dlbHNpZ25iZW5nYWxpID0gMHgwOWMyOwogIHQudXV2b3dlbHNpZ25kZXZhID0gMHgwOTQyOwogIHQudXV2b3dlbHNpZ25ndWphcmF0aSA9IDB4MGFjMjsKICB0LnV2b3dlbHNpZ25iZW5nYWxpID0gMHgwOWMxOwogIHQudXZvd2Vsc2lnbmRldmEgPSAweDA5NDE7CiAgdC51dm93ZWxzaWduZ3VqYXJhdGkgPSAweDBhYzE7CiAgdC52ID0gMHgwMDc2OwogIHQudmFkZXZhID0gMHgwOTM1OwogIHQudmFndWphcmF0aSA9IDB4MGFiNTsKICB0LnZhZ3VybXVraGkgPSAweDBhMzU7CiAgdC52YWthdGFrYW5hID0gMHgzMGY3OwogIHQudmF2ID0gMHgwNWQ1OwogIHQudmF2ZGFnZXNoID0gMHhmYjM1OwogIHQudmF2ZGFnZXNoNjUgPSAweGZiMzU7CiAgdC52YXZkYWdlc2hoZWJyZXcgPSAweGZiMzU7CiAgdC52YXZoZWJyZXcgPSAweDA1ZDU7CiAgdC52YXZob2xhbSA9IDB4ZmI0YjsKICB0LnZhdmhvbGFtaGVicmV3ID0gMHhmYjRiOwogIHQudmF2dmF2aGVicmV3ID0gMHgwNWYwOwogIHQudmF2eW9kaGVicmV3ID0gMHgwNWYxOwogIHQudmNpcmNsZSA9IDB4MjRlNTsKICB0LnZkb3RiZWxvdyA9IDB4MWU3ZjsKICB0LnZlY3lyaWxsaWMgPSAweDA0MzI7CiAgdC52ZWhhcmFiaWMgPSAweDA2YTQ7CiAgdC52ZWhmaW5hbGFyYWJpYyA9IDB4ZmI2YjsKICB0LnZlaGluaXRpYWxhcmFiaWMgPSAweGZiNmM7CiAgdC52ZWhtZWRpYWxhcmFiaWMgPSAweGZiNmQ7CiAgdC52ZWthdGFrYW5hID0gMHgzMGY5OwogIHQudmVudXMgPSAweDI2NDA7CiAgdC52ZXJ0aWNhbGJhciA9IDB4MDA3YzsKICB0LnZlcnRpY2FsbGluZWFib3ZlY21iID0gMHgwMzBkOwogIHQudmVydGljYWxsaW5lYmVsb3djbWIgPSAweDAzMjk7CiAgdC52ZXJ0aWNhbGxpbmVsb3dtb2QgPSAweDAyY2M7CiAgdC52ZXJ0aWNhbGxpbmVtb2QgPSAweDAyYzg7CiAgdC52ZXdhcm1lbmlhbiA9IDB4MDU3ZTsKICB0LnZob29rID0gMHgwMjhiOwogIHQudmlrYXRha2FuYSA9IDB4MzBmODsKICB0LnZpcmFtYWJlbmdhbGkgPSAweDA5Y2Q7CiAgdC52aXJhbWFkZXZhID0gMHgwOTRkOwogIHQudmlyYW1hZ3VqYXJhdGkgPSAweDBhY2Q7CiAgdC52aXNhcmdhYmVuZ2FsaSA9IDB4MDk4MzsKICB0LnZpc2FyZ2FkZXZhID0gMHgwOTAzOwogIHQudmlzYXJnYWd1amFyYXRpID0gMHgwYTgzOwogIHQudm1vbm9zcGFjZSA9IDB4ZmY1NjsKICB0LnZvYXJtZW5pYW4gPSAweDA1Nzg7CiAgdC52b2ljZWRpdGVyYXRpb25oaXJhZ2FuYSA9IDB4MzA5ZTsKICB0LnZvaWNlZGl0ZXJhdGlvbmthdGFrYW5hID0gMHgzMGZlOwogIHQudm9pY2VkbWFya2thbmEgPSAweDMwOWI7CiAgdC52b2ljZWRtYXJra2FuYWhhbGZ3aWR0aCA9IDB4ZmY5ZTsKICB0LnZva2F0YWthbmEgPSAweDMwZmE7CiAgdC52cGFyZW4gPSAweDI0YjE7CiAgdC52dGlsZGUgPSAweDFlN2Q7CiAgdC52dHVybmVkID0gMHgwMjhjOwogIHQudnVoaXJhZ2FuYSA9IDB4MzA5NDsKICB0LnZ1a2F0YWthbmEgPSAweDMwZjQ7CiAgdC53ID0gMHgwMDc3OwogIHQud2FjdXRlID0gMHgxZTgzOwogIHQud2Fla29yZWFuID0gMHgzMTU5OwogIHQud2FoaXJhZ2FuYSA9IDB4MzA4ZjsKICB0Lndha2F0YWthbmEgPSAweDMwZWY7CiAgdC53YWthdGFrYW5haGFsZndpZHRoID0gMHhmZjljOwogIHQud2Frb3JlYW4gPSAweDMxNTg7CiAgdC53YXNtYWxsaGlyYWdhbmEgPSAweDMwOGU7CiAgdC53YXNtYWxsa2F0YWthbmEgPSAweDMwZWU7CiAgdC53YXR0b3NxdWFyZSA9IDB4MzM1NzsKICB0LndhdmVkYXNoID0gMHgzMDFjOwogIHQud2F2eXVuZGVyc2NvcmV2ZXJ0aWNhbCA9IDB4ZmUzNDsKICB0Lndhd2FyYWJpYyA9IDB4MDY0ODsKICB0Lndhd2ZpbmFsYXJhYmljID0gMHhmZWVlOwogIHQud2F3aGFtemFhYm92ZWFyYWJpYyA9IDB4MDYyNDsKICB0Lndhd2hhbXphYWJvdmVmaW5hbGFyYWJpYyA9IDB4ZmU4NjsKICB0Lndic3F1YXJlID0gMHgzM2RkOwogIHQud2NpcmNsZSA9IDB4MjRlNjsKICB0LndjaXJjdW1mbGV4ID0gMHgwMTc1OwogIHQud2RpZXJlc2lzID0gMHgxZTg1OwogIHQud2RvdGFjY2VudCA9IDB4MWU4NzsKICB0Lndkb3RiZWxvdyA9IDB4MWU4OTsKICB0LndlaGlyYWdhbmEgPSAweDMwOTE7CiAgdC53ZWllcnN0cmFzcyA9IDB4MjExODsKICB0Lndla2F0YWthbmEgPSAweDMwZjE7CiAgdC53ZWtvcmVhbiA9IDB4MzE1ZTsKICB0Lndlb2tvcmVhbiA9IDB4MzE1ZDsKICB0LndncmF2ZSA9IDB4MWU4MTsKICB0LndoaXRlYnVsbGV0ID0gMHgyNWU2OwogIHQud2hpdGVjaXJjbGUgPSAweDI1Y2I7CiAgdC53aGl0ZWNpcmNsZWludmVyc2UgPSAweDI1ZDk7CiAgdC53aGl0ZWNvcm5lcmJyYWNrZXRsZWZ0ID0gMHgzMDBlOwogIHQud2hpdGVjb3JuZXJicmFja2V0bGVmdHZlcnRpY2FsID0gMHhmZTQzOwogIHQud2hpdGVjb3JuZXJicmFja2V0cmlnaHQgPSAweDMwMGY7CiAgdC53aGl0ZWNvcm5lcmJyYWNrZXRyaWdodHZlcnRpY2FsID0gMHhmZTQ0OwogIHQud2hpdGVkaWFtb25kID0gMHgyNWM3OwogIHQud2hpdGVkaWFtb25kY29udGFpbmluZ2JsYWNrc21hbGxkaWFtb25kID0gMHgyNWM4OwogIHQud2hpdGVkb3ducG9pbnRpbmdzbWFsbHRyaWFuZ2xlID0gMHgyNWJmOwogIHQud2hpdGVkb3ducG9pbnRpbmd0cmlhbmdsZSA9IDB4MjViZDsKICB0LndoaXRlbGVmdHBvaW50aW5nc21hbGx0cmlhbmdsZSA9IDB4MjVjMzsKICB0LndoaXRlbGVmdHBvaW50aW5ndHJpYW5nbGUgPSAweDI1YzE7CiAgdC53aGl0ZWxlbnRpY3VsYXJicmFja2V0bGVmdCA9IDB4MzAxNjsKICB0LndoaXRlbGVudGljdWxhcmJyYWNrZXRyaWdodCA9IDB4MzAxNzsKICB0LndoaXRlcmlnaHRwb2ludGluZ3NtYWxsdHJpYW5nbGUgPSAweDI1Yjk7CiAgdC53aGl0ZXJpZ2h0cG9pbnRpbmd0cmlhbmdsZSA9IDB4MjViNzsKICB0LndoaXRlc21hbGxzcXVhcmUgPSAweDI1YWI7CiAgdC53aGl0ZXNtaWxpbmdmYWNlID0gMHgyNjNhOwogIHQud2hpdGVzcXVhcmUgPSAweDI1YTE7CiAgdC53aGl0ZXN0YXIgPSAweDI2MDY7CiAgdC53aGl0ZXRlbGVwaG9uZSA9IDB4MjYwZjsKICB0LndoaXRldG9ydG9pc2VzaGVsbGJyYWNrZXRsZWZ0ID0gMHgzMDE4OwogIHQud2hpdGV0b3J0b2lzZXNoZWxsYnJhY2tldHJpZ2h0ID0gMHgzMDE5OwogIHQud2hpdGV1cHBvaW50aW5nc21hbGx0cmlhbmdsZSA9IDB4MjViNTsKICB0LndoaXRldXBwb2ludGluZ3RyaWFuZ2xlID0gMHgyNWIzOwogIHQud2loaXJhZ2FuYSA9IDB4MzA5MDsKICB0Lndpa2F0YWthbmEgPSAweDMwZjA7CiAgdC53aWtvcmVhbiA9IDB4MzE1ZjsKICB0Lndtb25vc3BhY2UgPSAweGZmNTc7CiAgdC53b2hpcmFnYW5hID0gMHgzMDkyOwogIHQud29rYXRha2FuYSA9IDB4MzBmMjsKICB0Lndva2F0YWthbmFoYWxmd2lkdGggPSAweGZmNjY7CiAgdC53b24gPSAweDIwYTk7CiAgdC53b25tb25vc3BhY2UgPSAweGZmZTY7CiAgdC53b3dhZW50aGFpID0gMHgwZTI3OwogIHQud3BhcmVuID0gMHgyNGIyOwogIHQud3JpbmcgPSAweDFlOTg7CiAgdC53c3VwZXJpb3IgPSAweDAyYjc7CiAgdC53dHVybmVkID0gMHgwMjhkOwogIHQud3lubiA9IDB4MDFiZjsKICB0LnggPSAweDAwNzg7CiAgdC54YWJvdmVjbWIgPSAweDAzM2Q7CiAgdC54Ym9wb21vZm8gPSAweDMxMTI7CiAgdC54Y2lyY2xlID0gMHgyNGU3OwogIHQueGRpZXJlc2lzID0gMHgxZThkOwogIHQueGRvdGFjY2VudCA9IDB4MWU4YjsKICB0LnhlaGFybWVuaWFuID0gMHgwNTZkOwogIHQueGkgPSAweDAzYmU7CiAgdC54bW9ub3NwYWNlID0gMHhmZjU4OwogIHQueHBhcmVuID0gMHgyNGIzOwogIHQueHN1cGVyaW9yID0gMHgwMmUzOwogIHQueSA9IDB4MDA3OTsKICB0LnlhYWRvc3F1YXJlID0gMHgzMzRlOwogIHQueWFiZW5nYWxpID0gMHgwOWFmOwogIHQueWFjdXRlID0gMHgwMGZkOwogIHQueWFkZXZhID0gMHgwOTJmOwogIHQueWFla29yZWFuID0gMHgzMTUyOwogIHQueWFndWphcmF0aSA9IDB4MGFhZjsKICB0LnlhZ3VybXVraGkgPSAweDBhMmY7CiAgdC55YWhpcmFnYW5hID0gMHgzMDg0OwogIHQueWFrYXRha2FuYSA9IDB4MzBlNDsKICB0Lnlha2F0YWthbmFoYWxmd2lkdGggPSAweGZmOTQ7CiAgdC55YWtvcmVhbiA9IDB4MzE1MTsKICB0LnlhbWFra2FudGhhaSA9IDB4MGU0ZTsKICB0Lnlhc21hbGxoaXJhZ2FuYSA9IDB4MzA4MzsKICB0Lnlhc21hbGxrYXRha2FuYSA9IDB4MzBlMzsKICB0Lnlhc21hbGxrYXRha2FuYWhhbGZ3aWR0aCA9IDB4ZmY2YzsKICB0LnlhdGN5cmlsbGljID0gMHgwNDYzOwogIHQueWNpcmNsZSA9IDB4MjRlODsKICB0LnljaXJjdW1mbGV4ID0gMHgwMTc3OwogIHQueWRpZXJlc2lzID0gMHgwMGZmOwogIHQueWRvdGFjY2VudCA9IDB4MWU4ZjsKICB0Lnlkb3RiZWxvdyA9IDB4MWVmNTsKICB0LnllaGFyYWJpYyA9IDB4MDY0YTsKICB0LnllaGJhcnJlZWFyYWJpYyA9IDB4MDZkMjsKICB0LnllaGJhcnJlZWZpbmFsYXJhYmljID0gMHhmYmFmOwogIHQueWVoZmluYWxhcmFiaWMgPSAweGZlZjI7CiAgdC55ZWhoYW16YWFib3ZlYXJhYmljID0gMHgwNjI2OwogIHQueWVoaGFtemFhYm92ZWZpbmFsYXJhYmljID0gMHhmZThhOwogIHQueWVoaGFtemFhYm92ZWluaXRpYWxhcmFiaWMgPSAweGZlOGI7CiAgdC55ZWhoYW16YWFib3ZlbWVkaWFsYXJhYmljID0gMHhmZThjOwogIHQueWVoaW5pdGlhbGFyYWJpYyA9IDB4ZmVmMzsKICB0LnllaG1lZGlhbGFyYWJpYyA9IDB4ZmVmNDsKICB0LnllaG1lZW1pbml0aWFsYXJhYmljID0gMHhmY2RkOwogIHQueWVobWVlbWlzb2xhdGVkYXJhYmljID0gMHhmYzU4OwogIHQueWVobm9vbmZpbmFsYXJhYmljID0gMHhmYzk0OwogIHQueWVodGhyZWVkb3RzYmVsb3dhcmFiaWMgPSAweDA2ZDE7CiAgdC55ZWtvcmVhbiA9IDB4MzE1NjsKICB0LnllbiA9IDB4MDBhNTsKICB0Lnllbm1vbm9zcGFjZSA9IDB4ZmZlNTsKICB0Lnllb2tvcmVhbiA9IDB4MzE1NTsKICB0Lnllb3JpbmhpZXVoa29yZWFuID0gMHgzMTg2OwogIHQueWVyYWhiZW55b21vaGVicmV3ID0gMHgwNWFhOwogIHQueWVyYWhiZW55b21vbGVmdGhlYnJldyA9IDB4MDVhYTsKICB0LnllcmljeXJpbGxpYyA9IDB4MDQ0YjsKICB0LnllcnVkaWVyZXNpc2N5cmlsbGljID0gMHgwNGY5OwogIHQueWVzaWV1bmdrb3JlYW4gPSAweDMxODE7CiAgdC55ZXNpZXVuZ3BhbnNpb3Nrb3JlYW4gPSAweDMxODM7CiAgdC55ZXNpZXVuZ3Npb3Nrb3JlYW4gPSAweDMxODI7CiAgdC55ZXRpdmhlYnJldyA9IDB4MDU5YTsKICB0LnlncmF2ZSA9IDB4MWVmMzsKICB0Lnlob29rID0gMHgwMWI0OwogIHQueWhvb2thYm92ZSA9IDB4MWVmNzsKICB0LnlpYXJtZW5pYW4gPSAweDA1NzU7CiAgdC55aWN5cmlsbGljID0gMHgwNDU3OwogIHQueWlrb3JlYW4gPSAweDMxNjI7CiAgdC55aW55YW5nID0gMHgyNjJmOwogIHQueWl3bmFybWVuaWFuID0gMHgwNTgyOwogIHQueW1vbm9zcGFjZSA9IDB4ZmY1OTsKICB0LnlvZCA9IDB4MDVkOTsKICB0LnlvZGRhZ2VzaCA9IDB4ZmIzOTsKICB0LnlvZGRhZ2VzaGhlYnJldyA9IDB4ZmIzOTsKICB0LnlvZGhlYnJldyA9IDB4MDVkOTsKICB0LnlvZHlvZGhlYnJldyA9IDB4MDVmMjsKICB0LnlvZHlvZHBhdGFoaGVicmV3ID0gMHhmYjFmOwogIHQueW9oaXJhZ2FuYSA9IDB4MzA4ODsKICB0LnlvaWtvcmVhbiA9IDB4MzE4OTsKICB0Lnlva2F0YWthbmEgPSAweDMwZTg7CiAgdC55b2thdGFrYW5haGFsZndpZHRoID0gMHhmZjk2OwogIHQueW9rb3JlYW4gPSAweDMxNWI7CiAgdC55b3NtYWxsaGlyYWdhbmEgPSAweDMwODc7CiAgdC55b3NtYWxsa2F0YWthbmEgPSAweDMwZTc7CiAgdC55b3NtYWxsa2F0YWthbmFoYWxmd2lkdGggPSAweGZmNmU7CiAgdC55b3RncmVlayA9IDB4MDNmMzsKICB0LnlveWFla29yZWFuID0gMHgzMTg4OwogIHQueW95YWtvcmVhbiA9IDB4MzE4NzsKICB0LnlveWFrdGhhaSA9IDB4MGUyMjsKICB0LnlveWluZ3RoYWkgPSAweDBlMGQ7CiAgdC55cGFyZW4gPSAweDI0YjQ7CiAgdC55cG9nZWdyYW1tZW5pID0gMHgwMzdhOwogIHQueXBvZ2VncmFtbWVuaWdyZWVrY21iID0gMHgwMzQ1OwogIHQueXIgPSAweDAxYTY7CiAgdC55cmluZyA9IDB4MWU5OTsKICB0LnlzdXBlcmlvciA9IDB4MDJiODsKICB0Lnl0aWxkZSA9IDB4MWVmOTsKICB0Lnl0dXJuZWQgPSAweDAyOGU7CiAgdC55dWhpcmFnYW5hID0gMHgzMDg2OwogIHQueXVpa29yZWFuID0gMHgzMThjOwogIHQueXVrYXRha2FuYSA9IDB4MzBlNjsKICB0Lnl1a2F0YWthbmFoYWxmd2lkdGggPSAweGZmOTU7CiAgdC55dWtvcmVhbiA9IDB4MzE2MDsKICB0Lnl1c2JpZ2N5cmlsbGljID0gMHgwNDZiOwogIHQueXVzYmlnaW90aWZpZWRjeXJpbGxpYyA9IDB4MDQ2ZDsKICB0Lnl1c2xpdHRsZWN5cmlsbGljID0gMHgwNDY3OwogIHQueXVzbGl0dGxlaW90aWZpZWRjeXJpbGxpYyA9IDB4MDQ2OTsKICB0Lnl1c21hbGxoaXJhZ2FuYSA9IDB4MzA4NTsKICB0Lnl1c21hbGxrYXRha2FuYSA9IDB4MzBlNTsKICB0Lnl1c21hbGxrYXRha2FuYWhhbGZ3aWR0aCA9IDB4ZmY2ZDsKICB0Lnl1eWVrb3JlYW4gPSAweDMxOGI7CiAgdC55dXllb2tvcmVhbiA9IDB4MzE4YTsKICB0Lnl5YWJlbmdhbGkgPSAweDA5ZGY7CiAgdC55eWFkZXZhID0gMHgwOTVmOwogIHQueiA9IDB4MDA3YTsKICB0LnphYXJtZW5pYW4gPSAweDA1NjY7CiAgdC56YWN1dGUgPSAweDAxN2E7CiAgdC56YWRldmEgPSAweDA5NWI7CiAgdC56YWd1cm11a2hpID0gMHgwYTViOwogIHQuemFoYXJhYmljID0gMHgwNjM4OwogIHQuemFoZmluYWxhcmFiaWMgPSAweGZlYzY7CiAgdC56YWhpbml0aWFsYXJhYmljID0gMHhmZWM3OwogIHQuemFoaXJhZ2FuYSA9IDB4MzA1NjsKICB0LnphaG1lZGlhbGFyYWJpYyA9IDB4ZmVjODsKICB0LnphaW5hcmFiaWMgPSAweDA2MzI7CiAgdC56YWluZmluYWxhcmFiaWMgPSAweGZlYjA7CiAgdC56YWthdGFrYW5hID0gMHgzMGI2OwogIHQuemFxZWZnYWRvbGhlYnJldyA9IDB4MDU5NTsKICB0LnphcWVmcWF0YW5oZWJyZXcgPSAweDA1OTQ7CiAgdC56YXJxYWhlYnJldyA9IDB4MDU5ODsKICB0LnpheWluID0gMHgwNWQ2OwogIHQuemF5aW5kYWdlc2ggPSAweGZiMzY7CiAgdC56YXlpbmRhZ2VzaGhlYnJldyA9IDB4ZmIzNjsKICB0LnpheWluaGVicmV3ID0gMHgwNWQ2OwogIHQuemJvcG9tb2ZvID0gMHgzMTE3OwogIHQuemNhcm9uID0gMHgwMTdlOwogIHQuemNpcmNsZSA9IDB4MjRlOTsKICB0LnpjaXJjdW1mbGV4ID0gMHgxZTkxOwogIHQuemN1cmwgPSAweDAyOTE7CiAgdC56ZG90ID0gMHgwMTdjOwogIHQuemRvdGFjY2VudCA9IDB4MDE3YzsKICB0Lnpkb3RiZWxvdyA9IDB4MWU5MzsKICB0LnplY3lyaWxsaWMgPSAweDA0Mzc7CiAgdC56ZWRlc2NlbmRlcmN5cmlsbGljID0gMHgwNDk5OwogIHQuemVkaWVyZXNpc2N5cmlsbGljID0gMHgwNGRmOwogIHQuemVoaXJhZ2FuYSA9IDB4MzA1YzsKICB0Lnpla2F0YWthbmEgPSAweDMwYmM7CiAgdC56ZXJvID0gMHgwMDMwOwogIHQuemVyb2FyYWJpYyA9IDB4MDY2MDsKICB0Lnplcm9iZW5nYWxpID0gMHgwOWU2OwogIHQuemVyb2RldmEgPSAweDA5NjY7CiAgdC56ZXJvZ3VqYXJhdGkgPSAweDBhZTY7CiAgdC56ZXJvZ3VybXVraGkgPSAweDBhNjY7CiAgdC56ZXJvaGFja2FyYWJpYyA9IDB4MDY2MDsKICB0Lnplcm9pbmZlcmlvciA9IDB4MjA4MDsKICB0Lnplcm9tb25vc3BhY2UgPSAweGZmMTA7CiAgdC56ZXJvb2xkc3R5bGUgPSAweGY3MzA7CiAgdC56ZXJvcGVyc2lhbiA9IDB4MDZmMDsKICB0Lnplcm9zdXBlcmlvciA9IDB4MjA3MDsKICB0Lnplcm90aGFpID0gMHgwZTUwOwogIHQuemVyb3dpZHRoam9pbmVyID0gMHhmZWZmOwogIHQuemVyb3dpZHRobm9uam9pbmVyID0gMHgyMDBjOwogIHQuemVyb3dpZHRoc3BhY2UgPSAweDIwMGI7CiAgdC56ZXRhID0gMHgwM2I2OwogIHQuemhib3BvbW9mbyA9IDB4MzExMzsKICB0LnpoZWFybWVuaWFuID0gMHgwNTZhOwogIHQuemhlYnJldmVjeXJpbGxpYyA9IDB4MDRjMjsKICB0LnpoZWN5cmlsbGljID0gMHgwNDM2OwogIHQuemhlZGVzY2VuZGVyY3lyaWxsaWMgPSAweDA0OTc7CiAgdC56aGVkaWVyZXNpc2N5cmlsbGljID0gMHgwNGRkOwogIHQuemloaXJhZ2FuYSA9IDB4MzA1ODsKICB0Lnppa2F0YWthbmEgPSAweDMwYjg7CiAgdC56aW5vcmhlYnJldyA9IDB4MDVhZTsKICB0LnpsaW5lYmVsb3cgPSAweDFlOTU7CiAgdC56bW9ub3NwYWNlID0gMHhmZjVhOwogIHQuem9oaXJhZ2FuYSA9IDB4MzA1ZTsKICB0Lnpva2F0YWthbmEgPSAweDMwYmU7CiAgdC56cGFyZW4gPSAweDI0YjU7CiAgdC56cmV0cm9mbGV4aG9vayA9IDB4MDI5MDsKICB0LnpzdHJva2UgPSAweDAxYjY7CiAgdC56dWhpcmFnYW5hID0gMHgzMDVhOwogIHQuenVrYXRha2FuYSA9IDB4MzBiYTsKICB0WyIubm90ZGVmIl0gPSAweDAwMDA7CiAgdC5hbmdicmFja2V0bGVmdGJpZyA9IDB4MjMyOTsKICB0LmFuZ2JyYWNrZXRsZWZ0QmlnID0gMHgyMzI5OwogIHQuYW5nYnJhY2tldGxlZnRiaWdnID0gMHgyMzI5OwogIHQuYW5nYnJhY2tldGxlZnRCaWdnID0gMHgyMzI5OwogIHQuYW5nYnJhY2tldHJpZ2h0QmlnID0gMHgyMzJhOwogIHQuYW5nYnJhY2tldHJpZ2h0YmlnID0gMHgyMzJhOwogIHQuYW5nYnJhY2tldHJpZ2h0QmlnZyA9IDB4MjMyYTsKICB0LmFuZ2JyYWNrZXRyaWdodGJpZ2cgPSAweDIzMmE7CiAgdC5hcnJvd2hvb2tsZWZ0ID0gMHgyMWFhOwogIHQuYXJyb3dob29rcmlnaHQgPSAweDIxYTk7CiAgdC5hcnJvd2xlZnR0b3BoYWxmID0gMHgyMWJjOwogIHQuYXJyb3dsZWZ0Ym90aGFsZiA9IDB4MjFiZDsKICB0LmFycm93bm9ydGhlYXN0ID0gMHgyMTk3OwogIHQuYXJyb3dub3J0aHdlc3QgPSAweDIxOTY7CiAgdC5hcnJvd3JpZ2h0dG9waGFsZiA9IDB4MjFjMDsKICB0LmFycm93cmlnaHRib3RoYWxmID0gMHgyMWMxOwogIHQuYXJyb3dzb3V0aGVhc3QgPSAweDIxOTg7CiAgdC5hcnJvd3NvdXRod2VzdCA9IDB4MjE5OTsKICB0LmJhY2tzbGFzaGJpZyA9IDB4MjIxNjsKICB0LmJhY2tzbGFzaEJpZyA9IDB4MjIxNjsKICB0LmJhY2tzbGFzaEJpZ2cgPSAweDIyMTY7CiAgdC5iYWNrc2xhc2hiaWdnID0gMHgyMjE2OwogIHQuYmFyZGJsID0gMHgyMDE2OwogIHQuYnJhY2VodGlwZG93bmxlZnQgPSAweGZlMzc7CiAgdC5icmFjZWh0aXBkb3ducmlnaHQgPSAweGZlMzc7CiAgdC5icmFjZWh0aXB1cGxlZnQgPSAweGZlMzg7CiAgdC5icmFjZWh0aXB1cHJpZ2h0ID0gMHhmZTM4OwogIHQuYnJhY2VsZWZ0QmlnID0gMHgwMDdiOwogIHQuYnJhY2VsZWZ0YmlnID0gMHgwMDdiOwogIHQuYnJhY2VsZWZ0YmlnZyA9IDB4MDA3YjsKICB0LmJyYWNlbGVmdEJpZ2cgPSAweDAwN2I7CiAgdC5icmFjZXJpZ2h0QmlnID0gMHgwMDdkOwogIHQuYnJhY2VyaWdodGJpZyA9IDB4MDA3ZDsKICB0LmJyYWNlcmlnaHRiaWdnID0gMHgwMDdkOwogIHQuYnJhY2VyaWdodEJpZ2cgPSAweDAwN2Q7CiAgdC5icmFja2V0bGVmdGJpZyA9IDB4MDA1YjsKICB0LmJyYWNrZXRsZWZ0QmlnID0gMHgwMDViOwogIHQuYnJhY2tldGxlZnRiaWdnID0gMHgwMDViOwogIHQuYnJhY2tldGxlZnRCaWdnID0gMHgwMDViOwogIHQuYnJhY2tldHJpZ2h0QmlnID0gMHgwMDVkOwogIHQuYnJhY2tldHJpZ2h0YmlnID0gMHgwMDVkOwogIHQuYnJhY2tldHJpZ2h0YmlnZyA9IDB4MDA1ZDsKICB0LmJyYWNrZXRyaWdodEJpZ2cgPSAweDAwNWQ7CiAgdC5jZWlsaW5nbGVmdGJpZyA9IDB4MjMwODsKICB0LmNlaWxpbmdsZWZ0QmlnID0gMHgyMzA4OwogIHQuY2VpbGluZ2xlZnRCaWdnID0gMHgyMzA4OwogIHQuY2VpbGluZ2xlZnRiaWdnID0gMHgyMzA4OwogIHQuY2VpbGluZ3JpZ2h0YmlnID0gMHgyMzA5OwogIHQuY2VpbGluZ3JpZ2h0QmlnID0gMHgyMzA5OwogIHQuY2VpbGluZ3JpZ2h0YmlnZyA9IDB4MjMwOTsKICB0LmNlaWxpbmdyaWdodEJpZ2cgPSAweDIzMDk7CiAgdC5jaXJjbGVkb3RkaXNwbGF5ID0gMHgyMjk5OwogIHQuY2lyY2xlZG90dGV4dCA9IDB4MjI5OTsKICB0LmNpcmNsZW11bHRpcGx5ZGlzcGxheSA9IDB4MjI5NzsKICB0LmNpcmNsZW11bHRpcGx5dGV4dCA9IDB4MjI5NzsKICB0LmNpcmNsZXBsdXNkaXNwbGF5ID0gMHgyMjk1OwogIHQuY2lyY2xlcGx1c3RleHQgPSAweDIyOTU7CiAgdC5jb250aW50ZWdyYWxkaXNwbGF5ID0gMHgyMjJlOwogIHQuY29udGludGVncmFsdGV4dCA9IDB4MjIyZTsKICB0LmNvcHJvZHVjdGRpc3BsYXkgPSAweDIyMTA7CiAgdC5jb3Byb2R1Y3R0ZXh0ID0gMHgyMjEwOwogIHQuZmxvb3JsZWZ0QmlnID0gMHgyMzBhOwogIHQuZmxvb3JsZWZ0YmlnID0gMHgyMzBhOwogIHQuZmxvb3JsZWZ0YmlnZyA9IDB4MjMwYTsKICB0LmZsb29ybGVmdEJpZ2cgPSAweDIzMGE7CiAgdC5mbG9vcnJpZ2h0YmlnID0gMHgyMzBiOwogIHQuZmxvb3JyaWdodEJpZyA9IDB4MjMwYjsKICB0LmZsb29ycmlnaHRCaWdnID0gMHgyMzBiOwogIHQuZmxvb3JyaWdodGJpZ2cgPSAweDIzMGI7CiAgdC5oYXR3aWRlID0gMHgwMzAyOwogIHQuaGF0d2lkZXIgPSAweDAzMDI7CiAgdC5oYXR3aWRlc3QgPSAweDAzMDI7CiAgdC5pbnRlcmNhbCA9IDB4MWQ0MDsKICB0LmludGVncmFsZGlzcGxheSA9IDB4MjIyYjsKICB0LmludGVncmFsdGV4dCA9IDB4MjIyYjsKICB0LmludGVyc2VjdGlvbmRpc3BsYXkgPSAweDIyYzI7CiAgdC5pbnRlcnNlY3Rpb250ZXh0ID0gMHgyMmMyOwogIHQubG9naWNhbGFuZGRpc3BsYXkgPSAweDIyMjc7CiAgdC5sb2dpY2FsYW5kdGV4dCA9IDB4MjIyNzsKICB0LmxvZ2ljYWxvcmRpc3BsYXkgPSAweDIyMjg7CiAgdC5sb2dpY2Fsb3J0ZXh0ID0gMHgyMjI4OwogIHQucGFyZW5sZWZ0QmlnID0gMHgwMDI4OwogIHQucGFyZW5sZWZ0YmlnID0gMHgwMDI4OwogIHQucGFyZW5sZWZ0QmlnZyA9IDB4MDAyODsKICB0LnBhcmVubGVmdGJpZ2cgPSAweDAwMjg7CiAgdC5wYXJlbnJpZ2h0QmlnID0gMHgwMDI5OwogIHQucGFyZW5yaWdodGJpZyA9IDB4MDAyOTsKICB0LnBhcmVucmlnaHRCaWdnID0gMHgwMDI5OwogIHQucGFyZW5yaWdodGJpZ2cgPSAweDAwMjk7CiAgdC5wcmltZSA9IDB4MjAzMjsKICB0LnByb2R1Y3RkaXNwbGF5ID0gMHgyMjBmOwogIHQucHJvZHVjdHRleHQgPSAweDIyMGY7CiAgdC5yYWRpY2FsYmlnID0gMHgyMjFhOwogIHQucmFkaWNhbEJpZyA9IDB4MjIxYTsKICB0LnJhZGljYWxCaWdnID0gMHgyMjFhOwogIHQucmFkaWNhbGJpZ2cgPSAweDIyMWE7CiAgdC5yYWRpY2FsYnQgPSAweDIyMWE7CiAgdC5yYWRpY2FsdHAgPSAweDIyMWE7CiAgdC5yYWRpY2FsdmVydGV4ID0gMHgyMjFhOwogIHQuc2xhc2hiaWcgPSAweDAwMmY7CiAgdC5zbGFzaEJpZyA9IDB4MDAyZjsKICB0LnNsYXNoQmlnZyA9IDB4MDAyZjsKICB0LnNsYXNoYmlnZyA9IDB4MDAyZjsKICB0LnN1bW1hdGlvbmRpc3BsYXkgPSAweDIyMTE7CiAgdC5zdW1tYXRpb250ZXh0ID0gMHgyMjExOwogIHQudGlsZGV3aWRlID0gMHgwMmRjOwogIHQudGlsZGV3aWRlciA9IDB4MDJkYzsKICB0LnRpbGRld2lkZXN0ID0gMHgwMmRjOwogIHQudW5pb25kaXNwbGF5ID0gMHgyMmMzOwogIHQudW5pb25tdWx0aWRpc3BsYXkgPSAweDIyOGU7CiAgdC51bmlvbm11bHRpdGV4dCA9IDB4MjI4ZTsKICB0LnVuaW9uc3FkaXNwbGF5ID0gMHgyMjk0OwogIHQudW5pb25zcXRleHQgPSAweDIyOTQ7CiAgdC51bmlvbnRleHQgPSAweDIyYzM7CiAgdC52ZXh0ZW5kZG91YmxlID0gMHgyMjI1OwogIHQudmV4dGVuZHNpbmdsZSA9IDB4MjIyMzsKfSk7CmNvbnN0IGdldERpbmdiYXRzR2x5cGhzVW5pY29kZSA9IGdldExvb2t1cFRhYmxlRmFjdG9yeShmdW5jdGlvbiAodCkgewogIHQuc3BhY2UgPSAweDAwMjA7CiAgdC5hMSA9IDB4MjcwMTsKICB0LmEyID0gMHgyNzAyOwogIHQuYTIwMiA9IDB4MjcwMzsKICB0LmEzID0gMHgyNzA0OwogIHQuYTQgPSAweDI2MGU7CiAgdC5hNSA9IDB4MjcwNjsKICB0LmExMTkgPSAweDI3MDc7CiAgdC5hMTE4ID0gMHgyNzA4OwogIHQuYTExNyA9IDB4MjcwOTsKICB0LmExMSA9IDB4MjYxYjsKICB0LmExMiA9IDB4MjYxZTsKICB0LmExMyA9IDB4MjcwYzsKICB0LmExNCA9IDB4MjcwZDsKICB0LmExNSA9IDB4MjcwZTsKICB0LmExNiA9IDB4MjcwZjsKICB0LmExMDUgPSAweDI3MTA7CiAgdC5hMTcgPSAweDI3MTE7CiAgdC5hMTggPSAweDI3MTI7CiAgdC5hMTkgPSAweDI3MTM7CiAgdC5hMjAgPSAweDI3MTQ7CiAgdC5hMjEgPSAweDI3MTU7CiAgdC5hMjIgPSAweDI3MTY7CiAgdC5hMjMgPSAweDI3MTc7CiAgdC5hMjQgPSAweDI3MTg7CiAgdC5hMjUgPSAweDI3MTk7CiAgdC5hMjYgPSAweDI3MWE7CiAgdC5hMjcgPSAweDI3MWI7CiAgdC5hMjggPSAweDI3MWM7CiAgdC5hNiA9IDB4MjcxZDsKICB0LmE3ID0gMHgyNzFlOwogIHQuYTggPSAweDI3MWY7CiAgdC5hOSA9IDB4MjcyMDsKICB0LmExMCA9IDB4MjcyMTsKICB0LmEyOSA9IDB4MjcyMjsKICB0LmEzMCA9IDB4MjcyMzsKICB0LmEzMSA9IDB4MjcyNDsKICB0LmEzMiA9IDB4MjcyNTsKICB0LmEzMyA9IDB4MjcyNjsKICB0LmEzNCA9IDB4MjcyNzsKICB0LmEzNSA9IDB4MjYwNTsKICB0LmEzNiA9IDB4MjcyOTsKICB0LmEzNyA9IDB4MjcyYTsKICB0LmEzOCA9IDB4MjcyYjsKICB0LmEzOSA9IDB4MjcyYzsKICB0LmE0MCA9IDB4MjcyZDsKICB0LmE0MSA9IDB4MjcyZTsKICB0LmE0MiA9IDB4MjcyZjsKICB0LmE0MyA9IDB4MjczMDsKICB0LmE0NCA9IDB4MjczMTsKICB0LmE0NSA9IDB4MjczMjsKICB0LmE0NiA9IDB4MjczMzsKICB0LmE0NyA9IDB4MjczNDsKICB0LmE0OCA9IDB4MjczNTsKICB0LmE0OSA9IDB4MjczNjsKICB0LmE1MCA9IDB4MjczNzsKICB0LmE1MSA9IDB4MjczODsKICB0LmE1MiA9IDB4MjczOTsKICB0LmE1MyA9IDB4MjczYTsKICB0LmE1NCA9IDB4MjczYjsKICB0LmE1NSA9IDB4MjczYzsKICB0LmE1NiA9IDB4MjczZDsKICB0LmE1NyA9IDB4MjczZTsKICB0LmE1OCA9IDB4MjczZjsKICB0LmE1OSA9IDB4Mjc0MDsKICB0LmE2MCA9IDB4Mjc0MTsKICB0LmE2MSA9IDB4Mjc0MjsKICB0LmE2MiA9IDB4Mjc0MzsKICB0LmE2MyA9IDB4Mjc0NDsKICB0LmE2NCA9IDB4Mjc0NTsKICB0LmE2NSA9IDB4Mjc0NjsKICB0LmE2NiA9IDB4Mjc0NzsKICB0LmE2NyA9IDB4Mjc0ODsKICB0LmE2OCA9IDB4Mjc0OTsKICB0LmE2OSA9IDB4Mjc0YTsKICB0LmE3MCA9IDB4Mjc0YjsKICB0LmE3MSA9IDB4MjVjZjsKICB0LmE3MiA9IDB4Mjc0ZDsKICB0LmE3MyA9IDB4MjVhMDsKICB0LmE3NCA9IDB4Mjc0ZjsKICB0LmEyMDMgPSAweDI3NTA7CiAgdC5hNzUgPSAweDI3NTE7CiAgdC5hMjA0ID0gMHgyNzUyOwogIHQuYTc2ID0gMHgyNWIyOwogIHQuYTc3ID0gMHgyNWJjOwogIHQuYTc4ID0gMHgyNWM2OwogIHQuYTc5ID0gMHgyNzU2OwogIHQuYTgxID0gMHgyNWQ3OwogIHQuYTgyID0gMHgyNzU4OwogIHQuYTgzID0gMHgyNzU5OwogIHQuYTg0ID0gMHgyNzVhOwogIHQuYTk3ID0gMHgyNzViOwogIHQuYTk4ID0gMHgyNzVjOwogIHQuYTk5ID0gMHgyNzVkOwogIHQuYTEwMCA9IDB4Mjc1ZTsKICB0LmExMDEgPSAweDI3NjE7CiAgdC5hMTAyID0gMHgyNzYyOwogIHQuYTEwMyA9IDB4Mjc2MzsKICB0LmExMDQgPSAweDI3NjQ7CiAgdC5hMTA2ID0gMHgyNzY1OwogIHQuYTEwNyA9IDB4Mjc2NjsKICB0LmExMDggPSAweDI3Njc7CiAgdC5hMTEyID0gMHgyNjYzOwogIHQuYTExMSA9IDB4MjY2NjsKICB0LmExMTAgPSAweDI2NjU7CiAgdC5hMTA5ID0gMHgyNjYwOwogIHQuYTEyMCA9IDB4MjQ2MDsKICB0LmExMjEgPSAweDI0NjE7CiAgdC5hMTIyID0gMHgyNDYyOwogIHQuYTEyMyA9IDB4MjQ2MzsKICB0LmExMjQgPSAweDI0NjQ7CiAgdC5hMTI1ID0gMHgyNDY1OwogIHQuYTEyNiA9IDB4MjQ2NjsKICB0LmExMjcgPSAweDI0Njc7CiAgdC5hMTI4ID0gMHgyNDY4OwogIHQuYTEyOSA9IDB4MjQ2OTsKICB0LmExMzAgPSAweDI3NzY7CiAgdC5hMTMxID0gMHgyNzc3OwogIHQuYTEzMiA9IDB4Mjc3ODsKICB0LmExMzMgPSAweDI3Nzk7CiAgdC5hMTM0ID0gMHgyNzdhOwogIHQuYTEzNSA9IDB4Mjc3YjsKICB0LmExMzYgPSAweDI3N2M7CiAgdC5hMTM3ID0gMHgyNzdkOwogIHQuYTEzOCA9IDB4Mjc3ZTsKICB0LmExMzkgPSAweDI3N2Y7CiAgdC5hMTQwID0gMHgyNzgwOwogIHQuYTE0MSA9IDB4Mjc4MTsKICB0LmExNDIgPSAweDI3ODI7CiAgdC5hMTQzID0gMHgyNzgzOwogIHQuYTE0NCA9IDB4Mjc4NDsKICB0LmExNDUgPSAweDI3ODU7CiAgdC5hMTQ2ID0gMHgyNzg2OwogIHQuYTE0NyA9IDB4Mjc4NzsKICB0LmExNDggPSAweDI3ODg7CiAgdC5hMTQ5ID0gMHgyNzg5OwogIHQuYTE1MCA9IDB4Mjc4YTsKICB0LmExNTEgPSAweDI3OGI7CiAgdC5hMTUyID0gMHgyNzhjOwogIHQuYTE1MyA9IDB4Mjc4ZDsKICB0LmExNTQgPSAweDI3OGU7CiAgdC5hMTU1ID0gMHgyNzhmOwogIHQuYTE1NiA9IDB4Mjc5MDsKICB0LmExNTcgPSAweDI3OTE7CiAgdC5hMTU4ID0gMHgyNzkyOwogIHQuYTE1OSA9IDB4Mjc5MzsKICB0LmExNjAgPSAweDI3OTQ7CiAgdC5hMTYxID0gMHgyMTkyOwogIHQuYTE2MyA9IDB4MjE5NDsKICB0LmExNjQgPSAweDIxOTU7CiAgdC5hMTk2ID0gMHgyNzk4OwogIHQuYTE2NSA9IDB4Mjc5OTsKICB0LmExOTIgPSAweDI3OWE7CiAgdC5hMTY2ID0gMHgyNzliOwogIHQuYTE2NyA9IDB4Mjc5YzsKICB0LmExNjggPSAweDI3OWQ7CiAgdC5hMTY5ID0gMHgyNzllOwogIHQuYTE3MCA9IDB4Mjc5ZjsKICB0LmExNzEgPSAweDI3YTA7CiAgdC5hMTcyID0gMHgyN2ExOwogIHQuYTE3MyA9IDB4MjdhMjsKICB0LmExNjIgPSAweDI3YTM7CiAgdC5hMTc0ID0gMHgyN2E0OwogIHQuYTE3NSA9IDB4MjdhNTsKICB0LmExNzYgPSAweDI3YTY7CiAgdC5hMTc3ID0gMHgyN2E3OwogIHQuYTE3OCA9IDB4MjdhODsKICB0LmExNzkgPSAweDI3YTk7CiAgdC5hMTkzID0gMHgyN2FhOwogIHQuYTE4MCA9IDB4MjdhYjsKICB0LmExOTkgPSAweDI3YWM7CiAgdC5hMTgxID0gMHgyN2FkOwogIHQuYTIwMCA9IDB4MjdhZTsKICB0LmExODIgPSAweDI3YWY7CiAgdC5hMjAxID0gMHgyN2IxOwogIHQuYTE4MyA9IDB4MjdiMjsKICB0LmExODQgPSAweDI3YjM7CiAgdC5hMTk3ID0gMHgyN2I0OwogIHQuYTE4NSA9IDB4MjdiNTsKICB0LmExOTQgPSAweDI3YjY7CiAgdC5hMTk4ID0gMHgyN2I3OwogIHQuYTE4NiA9IDB4MjdiODsKICB0LmExOTUgPSAweDI3Yjk7CiAgdC5hMTg3ID0gMHgyN2JhOwogIHQuYTE4OCA9IDB4MjdiYjsKICB0LmExODkgPSAweDI3YmM7CiAgdC5hMTkwID0gMHgyN2JkOwogIHQuYTE5MSA9IDB4MjdiZTsKICB0LmE4OSA9IDB4Mjc2ODsKICB0LmE5MCA9IDB4Mjc2OTsKICB0LmE5MyA9IDB4Mjc2YTsKICB0LmE5NCA9IDB4Mjc2YjsKICB0LmE5MSA9IDB4Mjc2YzsKICB0LmE5MiA9IDB4Mjc2ZDsKICB0LmEyMDUgPSAweDI3NmU7CiAgdC5hODUgPSAweDI3NmY7CiAgdC5hMjA2ID0gMHgyNzcwOwogIHQuYTg2ID0gMHgyNzcxOwogIHQuYTg3ID0gMHgyNzcyOwogIHQuYTg4ID0gMHgyNzczOwogIHQuYTk1ID0gMHgyNzc0OwogIHQuYTk2ID0gMHgyNzc1OwogIHRbIi5ub3RkZWYiXSA9IDB4MDAwMDsKfSk7Cgo7Ly8gLi9zcmMvY29yZS91bmljb2RlLmpzCgpjb25zdCBnZXRTcGVjaWFsUFVBU3ltYm9scyA9IGdldExvb2t1cFRhYmxlRmFjdG9yeShmdW5jdGlvbiAodCkgewogIHRbNjM3MjFdID0gMHgwMGE5OwogIHRbNjMxOTNdID0gMHgwMGE5OwogIHRbNjM3MjBdID0gMHgwMGFlOwogIHRbNjMxOTRdID0gMHgwMGFlOwogIHRbNjM3MjJdID0gMHgyMTIyOwogIHRbNjMxOTVdID0gMHgyMTIyOwogIHRbNjM3MjldID0gMHgyM2E3OwogIHRbNjM3MzBdID0gMHgyM2E4OwogIHRbNjM3MzFdID0gMHgyM2E5OwogIHRbNjM3NDBdID0gMHgyM2FiOwogIHRbNjM3NDFdID0gMHgyM2FjOwogIHRbNjM3NDJdID0gMHgyM2FkOwogIHRbNjM3MjZdID0gMHgyM2ExOwogIHRbNjM3MjddID0gMHgyM2EyOwogIHRbNjM3MjhdID0gMHgyM2EzOwogIHRbNjM3MzddID0gMHgyM2E0OwogIHRbNjM3MzhdID0gMHgyM2E1OwogIHRbNjM3MzldID0gMHgyM2E2OwogIHRbNjM3MjNdID0gMHgyMzliOwogIHRbNjM3MjRdID0gMHgyMzljOwogIHRbNjM3MjVdID0gMHgyMzlkOwogIHRbNjM3MzRdID0gMHgyMzllOwogIHRbNjM3MzVdID0gMHgyMzlmOwogIHRbNjM3MzZdID0gMHgyM2EwOwp9KTsKZnVuY3Rpb24gbWFwU3BlY2lhbFVuaWNvZGVWYWx1ZXMoY29kZSkgewogIGlmIChjb2RlID49IDB4ZmZmMCAmJiBjb2RlIDw9IDB4ZmZmZikgewogICAgcmV0dXJuIDA7CiAgfSBlbHNlIGlmIChjb2RlID49IDB4ZjYwMCAmJiBjb2RlIDw9IDB4ZjhmZikgewogICAgcmV0dXJuIGdldFNwZWNpYWxQVUFTeW1ib2xzKClbY29kZV0gfHwgY29kZTsKICB9IGVsc2UgaWYgKGNvZGUgPT09IDB4MDBhZCkgewogICAgcmV0dXJuIDB4MDAyZDsKICB9CiAgcmV0dXJuIGNvZGU7Cn0KZnVuY3Rpb24gZ2V0VW5pY29kZUZvckdseXBoKG5hbWUsIGdseXBoc1VuaWNvZGVNYXApIHsKICBsZXQgdW5pY29kZSA9IGdseXBoc1VuaWNvZGVNYXBbbmFtZV07CiAgaWYgKHVuaWNvZGUgIT09IHVuZGVmaW5lZCkgewogICAgcmV0dXJuIHVuaWNvZGU7CiAgfQogIGlmICghbmFtZSkgewogICAgcmV0dXJuIC0xOwogIH0KICBpZiAobmFtZVswXSA9PT0gInUiKSB7CiAgICBjb25zdCBuYW1lTGVuID0gbmFtZS5sZW5ndGg7CiAgICBsZXQgaGV4U3RyOwogICAgaWYgKG5hbWVMZW4gPT09IDcgJiYgbmFtZVsxXSA9PT0gIm4iICYmIG5hbWVbMl0gPT09ICJpIikgewogICAgICBoZXhTdHIgPSBuYW1lLnN1YnN0cmluZygzKTsKICAgIH0gZWxzZSBpZiAobmFtZUxlbiA+PSA1ICYmIG5hbWVMZW4gPD0gNykgewogICAgICBoZXhTdHIgPSBuYW1lLnN1YnN0cmluZygxKTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiAtMTsKICAgIH0KICAgIGlmIChoZXhTdHIgPT09IGhleFN0ci50b1VwcGVyQ2FzZSgpKSB7CiAgICAgIHVuaWNvZGUgPSBwYXJzZUludChoZXhTdHIsIDE2KTsKICAgICAgaWYgKHVuaWNvZGUgPj0gMCkgewogICAgICAgIHJldHVybiB1bmljb2RlOwogICAgICB9CiAgICB9CiAgfQogIHJldHVybiAtMTsKfQpjb25zdCBVbmljb2RlUmFuZ2VzID0gW1sweDAwMDAsIDB4MDA3Zl0sIFsweDAwODAsIDB4MDBmZl0sIFsweDAxMDAsIDB4MDE3Zl0sIFsweDAxODAsIDB4MDI0Zl0sIFsweDAyNTAsIDB4MDJhZiwgMHgxZDAwLCAweDFkN2YsIDB4MWQ4MCwgMHgxZGJmXSwgWzB4MDJiMCwgMHgwMmZmLCAweGE3MDAsIDB4YTcxZl0sIFsweDAzMDAsIDB4MDM2ZiwgMHgxZGMwLCAweDFkZmZdLCBbMHgwMzcwLCAweDAzZmZdLCBbMHgyYzgwLCAweDJjZmZdLCBbMHgwNDAwLCAweDA0ZmYsIDB4MDUwMCwgMHgwNTJmLCAweDJkZTAsIDB4MmRmZiwgMHhhNjQwLCAweGE2OWZdLCBbMHgwNTMwLCAweDA1OGZdLCBbMHgwNTkwLCAweDA1ZmZdLCBbMHhhNTAwLCAweGE2M2ZdLCBbMHgwNjAwLCAweDA2ZmYsIDB4MDc1MCwgMHgwNzdmXSwgWzB4MDdjMCwgMHgwN2ZmXSwgWzB4MDkwMCwgMHgwOTdmXSwgWzB4MDk4MCwgMHgwOWZmXSwgWzB4MGEwMCwgMHgwYTdmXSwgWzB4MGE4MCwgMHgwYWZmXSwgWzB4MGIwMCwgMHgwYjdmXSwgWzB4MGI4MCwgMHgwYmZmXSwgWzB4MGMwMCwgMHgwYzdmXSwgWzB4MGM4MCwgMHgwY2ZmXSwgWzB4MGQwMCwgMHgwZDdmXSwgWzB4MGUwMCwgMHgwZTdmXSwgWzB4MGU4MCwgMHgwZWZmXSwgWzB4MTBhMCwgMHgxMGZmLCAweDJkMDAsIDB4MmQyZl0sIFsweDFiMDAsIDB4MWI3Zl0sIFsweDExMDAsIDB4MTFmZl0sIFsweDFlMDAsIDB4MWVmZiwgMHgyYzYwLCAweDJjN2YsIDB4YTcyMCwgMHhhN2ZmXSwgWzB4MWYwMCwgMHgxZmZmXSwgWzB4MjAwMCwgMHgyMDZmLCAweDJlMDAsIDB4MmU3Zl0sIFsweDIwNzAsIDB4MjA5Zl0sIFsweDIwYTAsIDB4MjBjZl0sIFsweDIwZDAsIDB4MjBmZl0sIFsweDIxMDAsIDB4MjE0Zl0sIFsweDIxNTAsIDB4MjE4Zl0sIFsweDIxOTAsIDB4MjFmZiwgMHgyN2YwLCAweDI3ZmYsIDB4MjkwMCwgMHgyOTdmLCAweDJiMDAsIDB4MmJmZl0sIFsweDIyMDAsIDB4MjJmZiwgMHgyYTAwLCAweDJhZmYsIDB4MjdjMCwgMHgyN2VmLCAweDI5ODAsIDB4MjlmZl0sIFsweDIzMDAsIDB4MjNmZl0sIFsweDI0MDAsIDB4MjQzZl0sIFsweDI0NDAsIDB4MjQ1Zl0sIFsweDI0NjAsIDB4MjRmZl0sIFsweDI1MDAsIDB4MjU3Zl0sIFsweDI1ODAsIDB4MjU5Zl0sIFsweDI1YTAsIDB4MjVmZl0sIFsweDI2MDAsIDB4MjZmZl0sIFsweDI3MDAsIDB4MjdiZl0sIFsweDMwMDAsIDB4MzAzZl0sIFsweDMwNDAsIDB4MzA5Zl0sIFsweDMwYTAsIDB4MzBmZiwgMHgzMWYwLCAweDMxZmZdLCBbMHgzMTAwLCAweDMxMmYsIDB4MzFhMCwgMHgzMWJmXSwgWzB4MzEzMCwgMHgzMThmXSwgWzB4YTg0MCwgMHhhODdmXSwgWzB4MzIwMCwgMHgzMmZmXSwgWzB4MzMwMCwgMHgzM2ZmXSwgWzB4YWMwMCwgMHhkN2FmXSwgWzB4ZDgwMCwgMHhkZmZmXSwgWzB4MTA5MDAsIDB4MTA5MWZdLCBbMHg0ZTAwLCAweDlmZmYsIDB4MmU4MCwgMHgyZWZmLCAweDJmMDAsIDB4MmZkZiwgMHgyZmYwLCAweDJmZmYsIDB4MzQwMCwgMHg0ZGJmLCAweDIwMDAwLCAweDJhNmRmLCAweDMxOTAsIDB4MzE5Zl0sIFsweGUwMDAsIDB4ZjhmZl0sIFsweDMxYzAsIDB4MzFlZiwgMHhmOTAwLCAweGZhZmYsIDB4MmY4MDAsIDB4MmZhMWZdLCBbMHhmYjAwLCAweGZiNGZdLCBbMHhmYjUwLCAweGZkZmZdLCBbMHhmZTIwLCAweGZlMmZdLCBbMHhmZTEwLCAweGZlMWZdLCBbMHhmZTUwLCAweGZlNmZdLCBbMHhmZTcwLCAweGZlZmZdLCBbMHhmZjAwLCAweGZmZWZdLCBbMHhmZmYwLCAweGZmZmZdLCBbMHgwZjAwLCAweDBmZmZdLCBbMHgwNzAwLCAweDA3NGZdLCBbMHgwNzgwLCAweDA3YmZdLCBbMHgwZDgwLCAweDBkZmZdLCBbMHgxMDAwLCAweDEwOWZdLCBbMHgxMjAwLCAweDEzN2YsIDB4MTM4MCwgMHgxMzlmLCAweDJkODAsIDB4MmRkZl0sIFsweDEzYTAsIDB4MTNmZl0sIFsweDE0MDAsIDB4MTY3Zl0sIFsweDE2ODAsIDB4MTY5Zl0sIFsweDE2YTAsIDB4MTZmZl0sIFsweDE3ODAsIDB4MTdmZl0sIFsweDE4MDAsIDB4MThhZl0sIFsweDI4MDAsIDB4MjhmZl0sIFsweGEwMDAsIDB4YTQ4Zl0sIFsweDE3MDAsIDB4MTcxZiwgMHgxNzIwLCAweDE3M2YsIDB4MTc0MCwgMHgxNzVmLCAweDE3NjAsIDB4MTc3Zl0sIFsweDEwMzAwLCAweDEwMzJmXSwgWzB4MTAzMzAsIDB4MTAzNGZdLCBbMHgxMDQwMCwgMHgxMDQ0Zl0sIFsweDFkMDAwLCAweDFkMGZmLCAweDFkMTAwLCAweDFkMWZmLCAweDFkMjAwLCAweDFkMjRmXSwgWzB4MWQ0MDAsIDB4MWQ3ZmZdLCBbMHhmZjAwMCwgMHhmZmZmZF0sIFsweGZlMDAsIDB4ZmUwZiwgMHhlMDEwMCwgMHhlMDFlZl0sIFsweGUwMDAwLCAweGUwMDdmXSwgWzB4MTkwMCwgMHgxOTRmXSwgWzB4MTk1MCwgMHgxOTdmXSwgWzB4MTk4MCwgMHgxOWRmXSwgWzB4MWEwMCwgMHgxYTFmXSwgWzB4MmMwMCwgMHgyYzVmXSwgWzB4MmQzMCwgMHgyZDdmXSwgWzB4NGRjMCwgMHg0ZGZmXSwgWzB4YTgwMCwgMHhhODJmXSwgWzB4MTAwMDAsIDB4MTAwN2YsIDB4MTAwODAsIDB4MTAwZmYsIDB4MTAxMDAsIDB4MTAxM2ZdLCBbMHgxMDE0MCwgMHgxMDE4Zl0sIFsweDEwMzgwLCAweDEwMzlmXSwgWzB4MTAzYTAsIDB4MTAzZGZdLCBbMHgxMDQ1MCwgMHgxMDQ3Zl0sIFsweDEwNDgwLCAweDEwNGFmXSwgWzB4MTA4MDAsIDB4MTA4M2ZdLCBbMHgxMGEwMCwgMHgxMGE1Zl0sIFsweDFkMzAwLCAweDFkMzVmXSwgWzB4MTIwMDAsIDB4MTIzZmYsIDB4MTI0MDAsIDB4MTI0N2ZdLCBbMHgxZDM2MCwgMHgxZDM3Zl0sIFsweDFiODAsIDB4MWJiZl0sIFsweDFjMDAsIDB4MWM0Zl0sIFsweDFjNTAsIDB4MWM3Zl0sIFsweGE4ODAsIDB4YThkZl0sIFsweGE5MDAsIDB4YTkyZl0sIFsweGE5MzAsIDB4YTk1Zl0sIFsweGFhMDAsIDB4YWE1Zl0sIFsweDEwMTkwLCAweDEwMWNmXSwgWzB4MTAxZDAsIDB4MTAxZmZdLCBbMHgxMDJhMCwgMHgxMDJkZiwgMHgxMDI4MCwgMHgxMDI5ZiwgMHgxMDkyMCwgMHgxMDkzZl0sIFsweDFmMDMwLCAweDFmMDlmLCAweDFmMDAwLCAweDFmMDJmXV07CmZ1bmN0aW9uIGdldFVuaWNvZGVSYW5nZUZvcih2YWx1ZSwgbGFzdFBvc2l0aW9uID0gLTEpIHsKICBpZiAobGFzdFBvc2l0aW9uICE9PSAtMSkgewogICAgY29uc3QgcmFuZ2UgPSBVbmljb2RlUmFuZ2VzW2xhc3RQb3NpdGlvbl07CiAgICBmb3IgKGxldCBpID0gMCwgaWkgPSByYW5nZS5sZW5ndGg7IGkgPCBpaTsgaSArPSAyKSB7CiAgICAgIGlmICh2YWx1ZSA+PSByYW5nZVtpXSAmJiB2YWx1ZSA8PSByYW5nZVtpICsgMV0pIHsKICAgICAgICByZXR1cm4gbGFzdFBvc2l0aW9uOwogICAgICB9CiAgICB9CiAgfQogIGZvciAobGV0IGkgPSAwLCBpaSA9IFVuaWNvZGVSYW5nZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgY29uc3QgcmFuZ2UgPSBVbmljb2RlUmFuZ2VzW2ldOwogICAgZm9yIChsZXQgaiA9IDAsIGpqID0gcmFuZ2UubGVuZ3RoOyBqIDwgamo7IGogKz0gMikgewogICAgICBpZiAodmFsdWUgPj0gcmFuZ2Vbal0gJiYgdmFsdWUgPD0gcmFuZ2VbaiArIDFdKSB7CiAgICAgICAgcmV0dXJuIGk7CiAgICAgIH0KICAgIH0KICB9CiAgcmV0dXJuIC0xOwp9CmNvbnN0IFNwZWNpYWxDaGFyUmVnRXhwID0gbmV3IFJlZ0V4cCgiXihcXHMpfChcXHB7TW59KXwoXFxwe0NmfSkkIiwgInUiKTsKY29uc3QgQ2F0ZWdvcnlDYWNoZSA9IG5ldyBNYXAoKTsKZnVuY3Rpb24gZ2V0Q2hhclVuaWNvZGVDYXRlZ29yeShjaGFyKSB7CiAgY29uc3QgY2FjaGVkQ2F0ZWdvcnkgPSBDYXRlZ29yeUNhY2hlLmdldChjaGFyKTsKICBpZiAoY2FjaGVkQ2F0ZWdvcnkpIHsKICAgIHJldHVybiBjYWNoZWRDYXRlZ29yeTsKICB9CiAgY29uc3QgZ3JvdXBzID0gY2hhci5tYXRjaChTcGVjaWFsQ2hhclJlZ0V4cCk7CiAgY29uc3QgY2F0ZWdvcnkgPSB7CiAgICBpc1doaXRlc3BhY2U6ICEhZ3JvdXBzPy5bMV0sCiAgICBpc1plcm9XaWR0aERpYWNyaXRpYzogISFncm91cHM/LlsyXSwKICAgIGlzSW52aXNpYmxlRm9ybWF0TWFyazogISFncm91cHM/LlszXQogIH07CiAgQ2F0ZWdvcnlDYWNoZS5zZXQoY2hhciwgY2F0ZWdvcnkpOwogIHJldHVybiBjYXRlZ29yeTsKfQpmdW5jdGlvbiBjbGVhclVuaWNvZGVDYWNoZXMoKSB7CiAgQ2F0ZWdvcnlDYWNoZS5jbGVhcigpOwp9Cgo7Ly8gLi9zcmMvY29yZS9mb250c191dGlscy5qcwoKCgoKCgoKCgoKCgoKCgpjb25zdCBTRUFDX0FOQUxZU0lTX0VOQUJMRUQgPSB0cnVlOwpjb25zdCBGb250RmxhZ3MgPSB7CiAgRml4ZWRQaXRjaDogMSwKICBTZXJpZjogMiwKICBTeW1ib2xpYzogNCwKICBTY3JpcHQ6IDgsCiAgTm9uc3ltYm9saWM6IDMyLAogIEl0YWxpYzogNjQsCiAgQWxsQ2FwOiA2NTUzNiwKICBTbWFsbENhcDogMTMxMDcyLAogIEZvcmNlQm9sZDogMjYyMTQ0Cn07CmNvbnN0IE1hY1N0YW5kYXJkR2x5cGhPcmRlcmluZyA9IFsiLm5vdGRlZiIsICIubnVsbCIsICJub25tYXJraW5ncmV0dXJuIiwgInNwYWNlIiwgImV4Y2xhbSIsICJxdW90ZWRibCIsICJudW1iZXJzaWduIiwgImRvbGxhciIsICJwZXJjZW50IiwgImFtcGVyc2FuZCIsICJxdW90ZXNpbmdsZSIsICJwYXJlbmxlZnQiLCAicGFyZW5yaWdodCIsICJhc3RlcmlzayIsICJwbHVzIiwgImNvbW1hIiwgImh5cGhlbiIsICJwZXJpb2QiLCAic2xhc2giLCAiemVybyIsICJvbmUiLCAidHdvIiwgInRocmVlIiwgImZvdXIiLCAiZml2ZSIsICJzaXgiLCAic2V2ZW4iLCAiZWlnaHQiLCAibmluZSIsICJjb2xvbiIsICJzZW1pY29sb24iLCAibGVzcyIsICJlcXVhbCIsICJncmVhdGVyIiwgInF1ZXN0aW9uIiwgImF0IiwgIkEiLCAiQiIsICJDIiwgIkQiLCAiRSIsICJGIiwgIkciLCAiSCIsICJJIiwgIkoiLCAiSyIsICJMIiwgIk0iLCAiTiIsICJPIiwgIlAiLCAiUSIsICJSIiwgIlMiLCAiVCIsICJVIiwgIlYiLCAiVyIsICJYIiwgIlkiLCAiWiIsICJicmFja2V0bGVmdCIsICJiYWNrc2xhc2giLCAiYnJhY2tldHJpZ2h0IiwgImFzY2lpY2lyY3VtIiwgInVuZGVyc2NvcmUiLCAiZ3JhdmUiLCAiYSIsICJiIiwgImMiLCAiZCIsICJlIiwgImYiLCAiZyIsICJoIiwgImkiLCAiaiIsICJrIiwgImwiLCAibSIsICJuIiwgIm8iLCAicCIsICJxIiwgInIiLCAicyIsICJ0IiwgInUiLCAidiIsICJ3IiwgIngiLCAieSIsICJ6IiwgImJyYWNlbGVmdCIsICJiYXIiLCAiYnJhY2VyaWdodCIsICJhc2NpaXRpbGRlIiwgIkFkaWVyZXNpcyIsICJBcmluZyIsICJDY2VkaWxsYSIsICJFYWN1dGUiLCAiTnRpbGRlIiwgIk9kaWVyZXNpcyIsICJVZGllcmVzaXMiLCAiYWFjdXRlIiwgImFncmF2ZSIsICJhY2lyY3VtZmxleCIsICJhZGllcmVzaXMiLCAiYXRpbGRlIiwgImFyaW5nIiwgImNjZWRpbGxhIiwgImVhY3V0ZSIsICJlZ3JhdmUiLCAiZWNpcmN1bWZsZXgiLCAiZWRpZXJlc2lzIiwgImlhY3V0ZSIsICJpZ3JhdmUiLCAiaWNpcmN1bWZsZXgiLCAiaWRpZXJlc2lzIiwgIm50aWxkZSIsICJvYWN1dGUiLCAib2dyYXZlIiwgIm9jaXJjdW1mbGV4IiwgIm9kaWVyZXNpcyIsICJvdGlsZGUiLCAidWFjdXRlIiwgInVncmF2ZSIsICJ1Y2lyY3VtZmxleCIsICJ1ZGllcmVzaXMiLCAiZGFnZ2VyIiwgImRlZ3JlZSIsICJjZW50IiwgInN0ZXJsaW5nIiwgInNlY3Rpb24iLCAiYnVsbGV0IiwgInBhcmFncmFwaCIsICJnZXJtYW5kYmxzIiwgInJlZ2lzdGVyZWQiLCAiY29weXJpZ2h0IiwgInRyYWRlbWFyayIsICJhY3V0ZSIsICJkaWVyZXNpcyIsICJub3RlcXVhbCIsICJBRSIsICJPc2xhc2giLCAiaW5maW5pdHkiLCAicGx1c21pbnVzIiwgImxlc3NlcXVhbCIsICJncmVhdGVyZXF1YWwiLCAieWVuIiwgIm11IiwgInBhcnRpYWxkaWZmIiwgInN1bW1hdGlvbiIsICJwcm9kdWN0IiwgInBpIiwgImludGVncmFsIiwgIm9yZGZlbWluaW5lIiwgIm9yZG1hc2N1bGluZSIsICJPbWVnYSIsICJhZSIsICJvc2xhc2giLCAicXVlc3Rpb25kb3duIiwgImV4Y2xhbWRvd24iLCAibG9naWNhbG5vdCIsICJyYWRpY2FsIiwgImZsb3JpbiIsICJhcHByb3hlcXVhbCIsICJEZWx0YSIsICJndWlsbGVtb3RsZWZ0IiwgImd1aWxsZW1vdHJpZ2h0IiwgImVsbGlwc2lzIiwgIm5vbmJyZWFraW5nc3BhY2UiLCAiQWdyYXZlIiwgIkF0aWxkZSIsICJPdGlsZGUiLCAiT0UiLCAib2UiLCAiZW5kYXNoIiwgImVtZGFzaCIsICJxdW90ZWRibGxlZnQiLCAicXVvdGVkYmxyaWdodCIsICJxdW90ZWxlZnQiLCAicXVvdGVyaWdodCIsICJkaXZpZGUiLCAibG96ZW5nZSIsICJ5ZGllcmVzaXMiLCAiWWRpZXJlc2lzIiwgImZyYWN0aW9uIiwgImN1cnJlbmN5IiwgImd1aWxzaW5nbGxlZnQiLCAiZ3VpbHNpbmdscmlnaHQiLCAiZmkiLCAiZmwiLCAiZGFnZ2VyZGJsIiwgInBlcmlvZGNlbnRlcmVkIiwgInF1b3Rlc2luZ2xiYXNlIiwgInF1b3RlZGJsYmFzZSIsICJwZXJ0aG91c2FuZCIsICJBY2lyY3VtZmxleCIsICJFY2lyY3VtZmxleCIsICJBYWN1dGUiLCAiRWRpZXJlc2lzIiwgIkVncmF2ZSIsICJJYWN1dGUiLCAiSWNpcmN1bWZsZXgiLCAiSWRpZXJlc2lzIiwgIklncmF2ZSIsICJPYWN1dGUiLCAiT2NpcmN1bWZsZXgiLCAiYXBwbGUiLCAiT2dyYXZlIiwgIlVhY3V0ZSIsICJVY2lyY3VtZmxleCIsICJVZ3JhdmUiLCAiZG90bGVzc2kiLCAiY2lyY3VtZmxleCIsICJ0aWxkZSIsICJtYWNyb24iLCAiYnJldmUiLCAiZG90YWNjZW50IiwgInJpbmciLCAiY2VkaWxsYSIsICJodW5nYXJ1bWxhdXQiLCAib2dvbmVrIiwgImNhcm9uIiwgIkxzbGFzaCIsICJsc2xhc2giLCAiU2Nhcm9uIiwgInNjYXJvbiIsICJaY2Fyb24iLCAiemNhcm9uIiwgImJyb2tlbmJhciIsICJFdGgiLCAiZXRoIiwgIllhY3V0ZSIsICJ5YWN1dGUiLCAiVGhvcm4iLCAidGhvcm4iLCAibWludXMiLCAibXVsdGlwbHkiLCAib25lc3VwZXJpb3IiLCAidHdvc3VwZXJpb3IiLCAidGhyZWVzdXBlcmlvciIsICJvbmVoYWxmIiwgIm9uZXF1YXJ0ZXIiLCAidGhyZWVxdWFydGVycyIsICJmcmFuYyIsICJHYnJldmUiLCAiZ2JyZXZlIiwgIklkb3RhY2NlbnQiLCAiU2NlZGlsbGEiLCAic2NlZGlsbGEiLCAiQ2FjdXRlIiwgImNhY3V0ZSIsICJDY2Fyb24iLCAiY2Nhcm9uIiwgImRjcm9hdCJdOwpmdW5jdGlvbiByZWNvdmVyR2x5cGhOYW1lKG5hbWUsIGdseXBoc1VuaWNvZGVNYXApIHsKICBpZiAoZ2x5cGhzVW5pY29kZU1hcFtuYW1lXSAhPT0gdW5kZWZpbmVkKSB7CiAgICByZXR1cm4gbmFtZTsKICB9CiAgY29uc3QgdW5pY29kZSA9IGdldFVuaWNvZGVGb3JHbHlwaChuYW1lLCBnbHlwaHNVbmljb2RlTWFwKTsKICBpZiAodW5pY29kZSAhPT0gLTEpIHsKICAgIGZvciAoY29uc3Qga2V5IGluIGdseXBoc1VuaWNvZGVNYXApIHsKICAgICAgaWYgKGdseXBoc1VuaWNvZGVNYXBba2V5XSA9PT0gdW5pY29kZSkgewogICAgICAgIHJldHVybiBrZXk7CiAgICAgIH0KICAgIH0KICB9CiAgaW5mbygiVW5hYmxlIHRvIHJlY292ZXIgYSBzdGFuZGFyZCBnbHlwaCBuYW1lIGZvcjogIiArIG5hbWUpOwogIHJldHVybiBuYW1lOwp9CmZ1bmN0aW9uIHR5cGUxRm9udEdseXBoTWFwcGluZyhwcm9wZXJ0aWVzLCBidWlsdEluRW5jb2RpbmcsIGdseXBoTmFtZXMpIHsKICBjb25zdCBjaGFyQ29kZVRvR2x5cGhJZCA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgbGV0IGdseXBoSWQsIGNoYXJDb2RlLCBiYXNlRW5jb2Rpbmc7CiAgY29uc3QgaXNTeW1ib2xpY0ZvbnQgPSAhIShwcm9wZXJ0aWVzLmZsYWdzICYgRm9udEZsYWdzLlN5bWJvbGljKTsKICBpZiAocHJvcGVydGllcy5pc0ludGVybmFsRm9udCkgewogICAgYmFzZUVuY29kaW5nID0gYnVpbHRJbkVuY29kaW5nOwogICAgZm9yIChjaGFyQ29kZSA9IDA7IGNoYXJDb2RlIDwgYmFzZUVuY29kaW5nLmxlbmd0aDsgY2hhckNvZGUrKykgewogICAgICBnbHlwaElkID0gZ2x5cGhOYW1lcy5pbmRleE9mKGJhc2VFbmNvZGluZ1tjaGFyQ29kZV0pOwogICAgICBjaGFyQ29kZVRvR2x5cGhJZFtjaGFyQ29kZV0gPSBnbHlwaElkID49IDAgPyBnbHlwaElkIDogMDsKICAgIH0KICB9IGVsc2UgaWYgKHByb3BlcnRpZXMuYmFzZUVuY29kaW5nTmFtZSkgewogICAgYmFzZUVuY29kaW5nID0gZ2V0RW5jb2RpbmcocHJvcGVydGllcy5iYXNlRW5jb2RpbmdOYW1lKTsKICAgIGZvciAoY2hhckNvZGUgPSAwOyBjaGFyQ29kZSA8IGJhc2VFbmNvZGluZy5sZW5ndGg7IGNoYXJDb2RlKyspIHsKICAgICAgZ2x5cGhJZCA9IGdseXBoTmFtZXMuaW5kZXhPZihiYXNlRW5jb2RpbmdbY2hhckNvZGVdKTsKICAgICAgY2hhckNvZGVUb0dseXBoSWRbY2hhckNvZGVdID0gZ2x5cGhJZCA+PSAwID8gZ2x5cGhJZCA6IDA7CiAgICB9CiAgfSBlbHNlIGlmIChpc1N5bWJvbGljRm9udCkgewogICAgZm9yIChjaGFyQ29kZSBpbiBidWlsdEluRW5jb2RpbmcpIHsKICAgICAgY2hhckNvZGVUb0dseXBoSWRbY2hhckNvZGVdID0gYnVpbHRJbkVuY29kaW5nW2NoYXJDb2RlXTsKICAgIH0KICB9IGVsc2UgewogICAgYmFzZUVuY29kaW5nID0gU3RhbmRhcmRFbmNvZGluZzsKICAgIGZvciAoY2hhckNvZGUgPSAwOyBjaGFyQ29kZSA8IGJhc2VFbmNvZGluZy5sZW5ndGg7IGNoYXJDb2RlKyspIHsKICAgICAgZ2x5cGhJZCA9IGdseXBoTmFtZXMuaW5kZXhPZihiYXNlRW5jb2RpbmdbY2hhckNvZGVdKTsKICAgICAgY2hhckNvZGVUb0dseXBoSWRbY2hhckNvZGVdID0gZ2x5cGhJZCA+PSAwID8gZ2x5cGhJZCA6IDA7CiAgICB9CiAgfQogIGNvbnN0IGRpZmZlcmVuY2VzID0gcHJvcGVydGllcy5kaWZmZXJlbmNlczsKICBsZXQgZ2x5cGhzVW5pY29kZU1hcDsKICBpZiAoZGlmZmVyZW5jZXMpIHsKICAgIGZvciAoY2hhckNvZGUgaW4gZGlmZmVyZW5jZXMpIHsKICAgICAgY29uc3QgZ2x5cGhOYW1lID0gZGlmZmVyZW5jZXNbY2hhckNvZGVdOwogICAgICBnbHlwaElkID0gZ2x5cGhOYW1lcy5pbmRleE9mKGdseXBoTmFtZSk7CiAgICAgIGlmIChnbHlwaElkID09PSAtMSkgewogICAgICAgIGlmICghZ2x5cGhzVW5pY29kZU1hcCkgewogICAgICAgICAgZ2x5cGhzVW5pY29kZU1hcCA9IGdldEdseXBoc1VuaWNvZGUoKTsKICAgICAgICB9CiAgICAgICAgY29uc3Qgc3RhbmRhcmRHbHlwaE5hbWUgPSByZWNvdmVyR2x5cGhOYW1lKGdseXBoTmFtZSwgZ2x5cGhzVW5pY29kZU1hcCk7CiAgICAgICAgaWYgKHN0YW5kYXJkR2x5cGhOYW1lICE9PSBnbHlwaE5hbWUpIHsKICAgICAgICAgIGdseXBoSWQgPSBnbHlwaE5hbWVzLmluZGV4T2Yoc3RhbmRhcmRHbHlwaE5hbWUpOwogICAgICAgIH0KICAgICAgfQogICAgICBjaGFyQ29kZVRvR2x5cGhJZFtjaGFyQ29kZV0gPSBnbHlwaElkID49IDAgPyBnbHlwaElkIDogMDsKICAgIH0KICB9CiAgcmV0dXJuIGNoYXJDb2RlVG9HbHlwaElkOwp9CmZ1bmN0aW9uIG5vcm1hbGl6ZUZvbnROYW1lKG5hbWUpIHsKICByZXR1cm4gbmFtZS5yZXBsYWNlQWxsKC9bLF9dL2csICItIikucmVwbGFjZUFsbCgvXHMvZywgIiIpOwp9CmNvbnN0IGdldFZlcnRpY2FsUHJlc2VudGF0aW9uRm9ybSA9IGdldExvb2t1cFRhYmxlRmFjdG9yeSh0ID0+IHsKICB0WzB4MjAxM10gPSAweGZlMzI7CiAgdFsweDIwMTRdID0gMHhmZTMxOwogIHRbMHgyMDI1XSA9IDB4ZmUzMDsKICB0WzB4MjAyNl0gPSAweGZlMTk7CiAgdFsweDMwMDFdID0gMHhmZTExOwogIHRbMHgzMDAyXSA9IDB4ZmUxMjsKICB0WzB4MzAwOF0gPSAweGZlM2Y7CiAgdFsweDMwMDldID0gMHhmZTQwOwogIHRbMHgzMDBhXSA9IDB4ZmUzZDsKICB0WzB4MzAwYl0gPSAweGZlM2U7CiAgdFsweDMwMGNdID0gMHhmZTQxOwogIHRbMHgzMDBkXSA9IDB4ZmU0MjsKICB0WzB4MzAwZV0gPSAweGZlNDM7CiAgdFsweDMwMGZdID0gMHhmZTQ0OwogIHRbMHgzMDEwXSA9IDB4ZmUzYjsKICB0WzB4MzAxMV0gPSAweGZlM2M7CiAgdFsweDMwMTRdID0gMHhmZTM5OwogIHRbMHgzMDE1XSA9IDB4ZmUzYTsKICB0WzB4MzAxNl0gPSAweGZlMTc7CiAgdFsweDMwMTddID0gMHhmZTE4OwogIHRbMHhmZTRmXSA9IDB4ZmUzNDsKICB0WzB4ZmYwMV0gPSAweGZlMTU7CiAgdFsweGZmMDhdID0gMHhmZTM1OwogIHRbMHhmZjA5XSA9IDB4ZmUzNjsKICB0WzB4ZmYwY10gPSAweGZlMTA7CiAgdFsweGZmMWFdID0gMHhmZTEzOwogIHRbMHhmZjFiXSA9IDB4ZmUxNDsKICB0WzB4ZmYxZl0gPSAweGZlMTY7CiAgdFsweGZmM2JdID0gMHhmZTQ3OwogIHRbMHhmZjNkXSA9IDB4ZmU0ODsKICB0WzB4ZmYzZl0gPSAweGZlMzM7CiAgdFsweGZmNWJdID0gMHhmZTM3OwogIHRbMHhmZjVkXSA9IDB4ZmUzODsKfSk7CmNvbnN0IE1BWF9TSVpFX1RPX0NPTVBJTEUgPSAxMDAwOwpmdW5jdGlvbiBjb21waWxlVHlwZTNHbHlwaCh7CiAgZGF0YTogaW1nLAogIHdpZHRoLAogIGhlaWdodAp9KSB7CiAgaWYgKHdpZHRoID4gTUFYX1NJWkVfVE9fQ09NUElMRSB8fCBoZWlnaHQgPiBNQVhfU0laRV9UT19DT01QSUxFKSB7CiAgICByZXR1cm4gbnVsbDsKICB9CiAgY29uc3QgUE9JTlRfVE9fUFJPQ0VTU19MSU1JVCA9IDEwMDA7CiAgY29uc3QgUE9JTlRfVFlQRVMgPSBuZXcgVWludDhBcnJheShbMCwgMiwgNCwgMCwgMSwgMCwgNSwgNCwgOCwgMTAsIDAsIDgsIDAsIDIsIDEsIDBdKTsKICBjb25zdCB3aWR0aDEgPSB3aWR0aCArIDE7CiAgY29uc3QgcG9pbnRzID0gbmV3IFVpbnQ4QXJyYXkod2lkdGgxICogKGhlaWdodCArIDEpKTsKICBsZXQgaSwgaiwgajA7CiAgY29uc3QgbGluZVNpemUgPSB3aWR0aCArIDcgJiB+NzsKICBjb25zdCBkYXRhID0gbmV3IFVpbnQ4QXJyYXkobGluZVNpemUgKiBoZWlnaHQpOwogIGxldCBwb3MgPSAwOwogIGZvciAoY29uc3QgZWxlbSBvZiBpbWcpIHsKICAgIGxldCBtYXNrID0gMTI4OwogICAgd2hpbGUgKG1hc2sgPiAwKSB7CiAgICAgIGRhdGFbcG9zKytdID0gZWxlbSAmIG1hc2sgPyAwIDogMjU1OwogICAgICBtYXNrID4+PSAxOwogICAgfQogIH0KICBsZXQgY291bnQgPSAwOwogIHBvcyA9IDA7CiAgaWYgKGRhdGFbcG9zXSAhPT0gMCkgewogICAgcG9pbnRzWzBdID0gMTsKICAgICsrY291bnQ7CiAgfQogIGZvciAoaiA9IDE7IGogPCB3aWR0aDsgaisrKSB7CiAgICBpZiAoZGF0YVtwb3NdICE9PSBkYXRhW3BvcyArIDFdKSB7CiAgICAgIHBvaW50c1tqXSA9IGRhdGFbcG9zXSA/IDIgOiAxOwogICAgICArK2NvdW50OwogICAgfQogICAgcG9zKys7CiAgfQogIGlmIChkYXRhW3Bvc10gIT09IDApIHsKICAgIHBvaW50c1tqXSA9IDI7CiAgICArK2NvdW50OwogIH0KICBmb3IgKGkgPSAxOyBpIDwgaGVpZ2h0OyBpKyspIHsKICAgIHBvcyA9IGkgKiBsaW5lU2l6ZTsKICAgIGowID0gaSAqIHdpZHRoMTsKICAgIGlmIChkYXRhW3BvcyAtIGxpbmVTaXplXSAhPT0gZGF0YVtwb3NdKSB7CiAgICAgIHBvaW50c1tqMF0gPSBkYXRhW3Bvc10gPyAxIDogODsKICAgICAgKytjb3VudDsKICAgIH0KICAgIGxldCBzdW0gPSAoZGF0YVtwb3NdID8gNCA6IDApICsgKGRhdGFbcG9zIC0gbGluZVNpemVdID8gOCA6IDApOwogICAgZm9yIChqID0gMTsgaiA8IHdpZHRoOyBqKyspIHsKICAgICAgc3VtID0gKHN1bSA+PiAyKSArIChkYXRhW3BvcyArIDFdID8gNCA6IDApICsgKGRhdGFbcG9zIC0gbGluZVNpemUgKyAxXSA/IDggOiAwKTsKICAgICAgaWYgKFBPSU5UX1RZUEVTW3N1bV0pIHsKICAgICAgICBwb2ludHNbajAgKyBqXSA9IFBPSU5UX1RZUEVTW3N1bV07CiAgICAgICAgKytjb3VudDsKICAgICAgfQogICAgICBwb3MrKzsKICAgIH0KICAgIGlmIChkYXRhW3BvcyAtIGxpbmVTaXplXSAhPT0gZGF0YVtwb3NdKSB7CiAgICAgIHBvaW50c1tqMCArIGpdID0gZGF0YVtwb3NdID8gMiA6IDQ7CiAgICAgICsrY291bnQ7CiAgICB9CiAgICBpZiAoY291bnQgPiBQT0lOVF9UT19QUk9DRVNTX0xJTUlUKSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfQogIH0KICBwb3MgPSBsaW5lU2l6ZSAqIChoZWlnaHQgLSAxKTsKICBqMCA9IGkgKiB3aWR0aDE7CiAgaWYgKGRhdGFbcG9zXSAhPT0gMCkgewogICAgcG9pbnRzW2owXSA9IDg7CiAgICArK2NvdW50OwogIH0KICBmb3IgKGogPSAxOyBqIDwgd2lkdGg7IGorKykgewogICAgaWYgKGRhdGFbcG9zXSAhPT0gZGF0YVtwb3MgKyAxXSkgewogICAgICBwb2ludHNbajAgKyBqXSA9IGRhdGFbcG9zXSA/IDQgOiA4OwogICAgICArK2NvdW50OwogICAgfQogICAgcG9zKys7CiAgfQogIGlmIChkYXRhW3Bvc10gIT09IDApIHsKICAgIHBvaW50c1tqMCArIGpdID0gNDsKICAgICsrY291bnQ7CiAgfQogIGlmIChjb3VudCA+IFBPSU5UX1RPX1BST0NFU1NfTElNSVQpIHsKICAgIHJldHVybiBudWxsOwogIH0KICBjb25zdCBzdGVwcyA9IG5ldyBJbnQzMkFycmF5KFswLCB3aWR0aDEsIC0xLCAwLCAtd2lkdGgxLCAwLCAwLCAwLCAxXSk7CiAgY29uc3QgcGF0aEJ1ZiA9IFtdOwogIGNvbnN0IHsKICAgIGEsCiAgICBiLAogICAgYywKICAgIGQsCiAgICBlLAogICAgZgogIH0gPSBuZXcgRE9NTWF0cml4KCkuc2NhbGVTZWxmKDEgLyB3aWR0aCwgLTEgLyBoZWlnaHQpLnRyYW5zbGF0ZVNlbGYoMCwgLWhlaWdodCk7CiAgZm9yIChpID0gMDsgY291bnQgJiYgaSA8PSBoZWlnaHQ7IGkrKykgewogICAgbGV0IHAgPSBpICogd2lkdGgxOwogICAgY29uc3QgZW5kID0gcCArIHdpZHRoOwogICAgd2hpbGUgKHAgPCBlbmQgJiYgIXBvaW50c1twXSkgewogICAgICBwKys7CiAgICB9CiAgICBpZiAocCA9PT0gZW5kKSB7CiAgICAgIGNvbnRpbnVlOwogICAgfQogICAgbGV0IHggPSBwICUgd2lkdGgxOwogICAgbGV0IHkgPSBpOwogICAgcGF0aEJ1Zi5wdXNoKERyYXdPUFMubW92ZVRvLCBhICogeCArIGMgKiB5ICsgZSwgYiAqIHggKyBkICogeSArIGYpOwogICAgY29uc3QgcDAgPSBwOwogICAgbGV0IHR5cGUgPSBwb2ludHNbcF07CiAgICBkbyB7CiAgICAgIGNvbnN0IHN0ZXAgPSBzdGVwc1t0eXBlXTsKICAgICAgZG8gewogICAgICAgIHAgKz0gc3RlcDsKICAgICAgfSB3aGlsZSAoIXBvaW50c1twXSk7CiAgICAgIGNvbnN0IHBwID0gcG9pbnRzW3BdOwogICAgICBpZiAocHAgIT09IDUgJiYgcHAgIT09IDEwKSB7CiAgICAgICAgdHlwZSA9IHBwOwogICAgICAgIHBvaW50c1twXSA9IDA7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdHlwZSA9IHBwICYgMHgzMyAqIHR5cGUgPj4gNDsKICAgICAgICBwb2ludHNbcF0gJj0gdHlwZSA+PiAyIHwgdHlwZSA8PCAyOwogICAgICB9CiAgICAgIHggPSBwICUgd2lkdGgxOwogICAgICB5ID0gcCAvIHdpZHRoMSB8IDA7CiAgICAgIHBhdGhCdWYucHVzaChEcmF3T1BTLmxpbmVUbywgYSAqIHggKyBjICogeSArIGUsIGIgKiB4ICsgZCAqIHkgKyBmKTsKICAgICAgaWYgKCFwb2ludHNbcF0pIHsKICAgICAgICAtLWNvdW50OwogICAgICB9CiAgICB9IHdoaWxlIChwMCAhPT0gcCk7CiAgICAtLWk7CiAgfQogIHJldHVybiBbT1BTLnJhd0ZpbGxQYXRoLCBbbmV3IEZsb2F0MzJBcnJheShwYXRoQnVmKV0sIG5ldyBGbG9hdDMyQXJyYXkoWzAsIDAsIHdpZHRoLCBoZWlnaHRdKV07Cn0KCi8vIEVYVEVSTkFMIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLml0ZXJhdG9yLnRvLWFycmF5LmpzCnZhciBlc19pdGVyYXRvcl90b19hcnJheSA9IF9fd2VicGFja19yZXF1aXJlX18oMTgwNik7CjsvLyAuL3NyYy9jb3JlL2NoYXJzZXRzLmpzCmNvbnN0IElTT0Fkb2JlQ2hhcnNldCA9IFsiLm5vdGRlZiIsICJzcGFjZSIsICJleGNsYW0iLCAicXVvdGVkYmwiLCAibnVtYmVyc2lnbiIsICJkb2xsYXIiLCAicGVyY2VudCIsICJhbXBlcnNhbmQiLCAicXVvdGVyaWdodCIsICJwYXJlbmxlZnQiLCAicGFyZW5yaWdodCIsICJhc3RlcmlzayIsICJwbHVzIiwgImNvbW1hIiwgImh5cGhlbiIsICJwZXJpb2QiLCAic2xhc2giLCAiemVybyIsICJvbmUiLCAidHdvIiwgInRocmVlIiwgImZvdXIiLCAiZml2ZSIsICJzaXgiLCAic2V2ZW4iLCAiZWlnaHQiLCAibmluZSIsICJjb2xvbiIsICJzZW1pY29sb24iLCAibGVzcyIsICJlcXVhbCIsICJncmVhdGVyIiwgInF1ZXN0aW9uIiwgImF0IiwgIkEiLCAiQiIsICJDIiwgIkQiLCAiRSIsICJGIiwgIkciLCAiSCIsICJJIiwgIkoiLCAiSyIsICJMIiwgIk0iLCAiTiIsICJPIiwgIlAiLCAiUSIsICJSIiwgIlMiLCAiVCIsICJVIiwgIlYiLCAiVyIsICJYIiwgIlkiLCAiWiIsICJicmFja2V0bGVmdCIsICJiYWNrc2xhc2giLCAiYnJhY2tldHJpZ2h0IiwgImFzY2lpY2lyY3VtIiwgInVuZGVyc2NvcmUiLCAicXVvdGVsZWZ0IiwgImEiLCAiYiIsICJjIiwgImQiLCAiZSIsICJmIiwgImciLCAiaCIsICJpIiwgImoiLCAiayIsICJsIiwgIm0iLCAibiIsICJvIiwgInAiLCAicSIsICJyIiwgInMiLCAidCIsICJ1IiwgInYiLCAidyIsICJ4IiwgInkiLCAieiIsICJicmFjZWxlZnQiLCAiYmFyIiwgImJyYWNlcmlnaHQiLCAiYXNjaWl0aWxkZSIsICJleGNsYW1kb3duIiwgImNlbnQiLCAic3RlcmxpbmciLCAiZnJhY3Rpb24iLCAieWVuIiwgImZsb3JpbiIsICJzZWN0aW9uIiwgImN1cnJlbmN5IiwgInF1b3Rlc2luZ2xlIiwgInF1b3RlZGJsbGVmdCIsICJndWlsbGVtb3RsZWZ0IiwgImd1aWxzaW5nbGxlZnQiLCAiZ3VpbHNpbmdscmlnaHQiLCAiZmkiLCAiZmwiLCAiZW5kYXNoIiwgImRhZ2dlciIsICJkYWdnZXJkYmwiLCAicGVyaW9kY2VudGVyZWQiLCAicGFyYWdyYXBoIiwgImJ1bGxldCIsICJxdW90ZXNpbmdsYmFzZSIsICJxdW90ZWRibGJhc2UiLCAicXVvdGVkYmxyaWdodCIsICJndWlsbGVtb3RyaWdodCIsICJlbGxpcHNpcyIsICJwZXJ0aG91c2FuZCIsICJxdWVzdGlvbmRvd24iLCAiZ3JhdmUiLCAiYWN1dGUiLCAiY2lyY3VtZmxleCIsICJ0aWxkZSIsICJtYWNyb24iLCAiYnJldmUiLCAiZG90YWNjZW50IiwgImRpZXJlc2lzIiwgInJpbmciLCAiY2VkaWxsYSIsICJodW5nYXJ1bWxhdXQiLCAib2dvbmVrIiwgImNhcm9uIiwgImVtZGFzaCIsICJBRSIsICJvcmRmZW1pbmluZSIsICJMc2xhc2giLCAiT3NsYXNoIiwgIk9FIiwgIm9yZG1hc2N1bGluZSIsICJhZSIsICJkb3RsZXNzaSIsICJsc2xhc2giLCAib3NsYXNoIiwgIm9lIiwgImdlcm1hbmRibHMiLCAib25lc3VwZXJpb3IiLCAibG9naWNhbG5vdCIsICJtdSIsICJ0cmFkZW1hcmsiLCAiRXRoIiwgIm9uZWhhbGYiLCAicGx1c21pbnVzIiwgIlRob3JuIiwgIm9uZXF1YXJ0ZXIiLCAiZGl2aWRlIiwgImJyb2tlbmJhciIsICJkZWdyZWUiLCAidGhvcm4iLCAidGhyZWVxdWFydGVycyIsICJ0d29zdXBlcmlvciIsICJyZWdpc3RlcmVkIiwgIm1pbnVzIiwgImV0aCIsICJtdWx0aXBseSIsICJ0aHJlZXN1cGVyaW9yIiwgImNvcHlyaWdodCIsICJBYWN1dGUiLCAiQWNpcmN1bWZsZXgiLCAiQWRpZXJlc2lzIiwgIkFncmF2ZSIsICJBcmluZyIsICJBdGlsZGUiLCAiQ2NlZGlsbGEiLCAiRWFjdXRlIiwgIkVjaXJjdW1mbGV4IiwgIkVkaWVyZXNpcyIsICJFZ3JhdmUiLCAiSWFjdXRlIiwgIkljaXJjdW1mbGV4IiwgIklkaWVyZXNpcyIsICJJZ3JhdmUiLCAiTnRpbGRlIiwgIk9hY3V0ZSIsICJPY2lyY3VtZmxleCIsICJPZGllcmVzaXMiLCAiT2dyYXZlIiwgIk90aWxkZSIsICJTY2Fyb24iLCAiVWFjdXRlIiwgIlVjaXJjdW1mbGV4IiwgIlVkaWVyZXNpcyIsICJVZ3JhdmUiLCAiWWFjdXRlIiwgIllkaWVyZXNpcyIsICJaY2Fyb24iLCAiYWFjdXRlIiwgImFjaXJjdW1mbGV4IiwgImFkaWVyZXNpcyIsICJhZ3JhdmUiLCAiYXJpbmciLCAiYXRpbGRlIiwgImNjZWRpbGxhIiwgImVhY3V0ZSIsICJlY2lyY3VtZmxleCIsICJlZGllcmVzaXMiLCAiZWdyYXZlIiwgImlhY3V0ZSIsICJpY2lyY3VtZmxleCIsICJpZGllcmVzaXMiLCAiaWdyYXZlIiwgIm50aWxkZSIsICJvYWN1dGUiLCAib2NpcmN1bWZsZXgiLCAib2RpZXJlc2lzIiwgIm9ncmF2ZSIsICJvdGlsZGUiLCAic2Nhcm9uIiwgInVhY3V0ZSIsICJ1Y2lyY3VtZmxleCIsICJ1ZGllcmVzaXMiLCAidWdyYXZlIiwgInlhY3V0ZSIsICJ5ZGllcmVzaXMiLCAiemNhcm9uIl07CmNvbnN0IEV4cGVydENoYXJzZXQgPSBbIi5ub3RkZWYiLCAic3BhY2UiLCAiZXhjbGFtc21hbGwiLCAiSHVuZ2FydW1sYXV0c21hbGwiLCAiZG9sbGFyb2xkc3R5bGUiLCAiZG9sbGFyc3VwZXJpb3IiLCAiYW1wZXJzYW5kc21hbGwiLCAiQWN1dGVzbWFsbCIsICJwYXJlbmxlZnRzdXBlcmlvciIsICJwYXJlbnJpZ2h0c3VwZXJpb3IiLCAidHdvZG90ZW5sZWFkZXIiLCAib25lZG90ZW5sZWFkZXIiLCAiY29tbWEiLCAiaHlwaGVuIiwgInBlcmlvZCIsICJmcmFjdGlvbiIsICJ6ZXJvb2xkc3R5bGUiLCAib25lb2xkc3R5bGUiLCAidHdvb2xkc3R5bGUiLCAidGhyZWVvbGRzdHlsZSIsICJmb3Vyb2xkc3R5bGUiLCAiZml2ZW9sZHN0eWxlIiwgInNpeG9sZHN0eWxlIiwgInNldmVub2xkc3R5bGUiLCAiZWlnaHRvbGRzdHlsZSIsICJuaW5lb2xkc3R5bGUiLCAiY29sb24iLCAic2VtaWNvbG9uIiwgImNvbW1hc3VwZXJpb3IiLCAidGhyZWVxdWFydGVyc2VtZGFzaCIsICJwZXJpb2RzdXBlcmlvciIsICJxdWVzdGlvbnNtYWxsIiwgImFzdXBlcmlvciIsICJic3VwZXJpb3IiLCAiY2VudHN1cGVyaW9yIiwgImRzdXBlcmlvciIsICJlc3VwZXJpb3IiLCAiaXN1cGVyaW9yIiwgImxzdXBlcmlvciIsICJtc3VwZXJpb3IiLCAibnN1cGVyaW9yIiwgIm9zdXBlcmlvciIsICJyc3VwZXJpb3IiLCAic3N1cGVyaW9yIiwgInRzdXBlcmlvciIsICJmZiIsICJmaSIsICJmbCIsICJmZmkiLCAiZmZsIiwgInBhcmVubGVmdGluZmVyaW9yIiwgInBhcmVucmlnaHRpbmZlcmlvciIsICJDaXJjdW1mbGV4c21hbGwiLCAiaHlwaGVuc3VwZXJpb3IiLCAiR3JhdmVzbWFsbCIsICJBc21hbGwiLCAiQnNtYWxsIiwgIkNzbWFsbCIsICJEc21hbGwiLCAiRXNtYWxsIiwgIkZzbWFsbCIsICJHc21hbGwiLCAiSHNtYWxsIiwgIklzbWFsbCIsICJKc21hbGwiLCAiS3NtYWxsIiwgIkxzbWFsbCIsICJNc21hbGwiLCAiTnNtYWxsIiwgIk9zbWFsbCIsICJQc21hbGwiLCAiUXNtYWxsIiwgIlJzbWFsbCIsICJTc21hbGwiLCAiVHNtYWxsIiwgIlVzbWFsbCIsICJWc21hbGwiLCAiV3NtYWxsIiwgIlhzbWFsbCIsICJZc21hbGwiLCAiWnNtYWxsIiwgImNvbG9ubW9uZXRhcnkiLCAib25lZml0dGVkIiwgInJ1cGlhaCIsICJUaWxkZXNtYWxsIiwgImV4Y2xhbWRvd25zbWFsbCIsICJjZW50b2xkc3R5bGUiLCAiTHNsYXNoc21hbGwiLCAiU2Nhcm9uc21hbGwiLCAiWmNhcm9uc21hbGwiLCAiRGllcmVzaXNzbWFsbCIsICJCcmV2ZXNtYWxsIiwgIkNhcm9uc21hbGwiLCAiRG90YWNjZW50c21hbGwiLCAiTWFjcm9uc21hbGwiLCAiZmlndXJlZGFzaCIsICJoeXBoZW5pbmZlcmlvciIsICJPZ29uZWtzbWFsbCIsICJSaW5nc21hbGwiLCAiQ2VkaWxsYXNtYWxsIiwgIm9uZXF1YXJ0ZXIiLCAib25laGFsZiIsICJ0aHJlZXF1YXJ0ZXJzIiwgInF1ZXN0aW9uZG93bnNtYWxsIiwgIm9uZWVpZ2h0aCIsICJ0aHJlZWVpZ2h0aHMiLCAiZml2ZWVpZ2h0aHMiLCAic2V2ZW5laWdodGhzIiwgIm9uZXRoaXJkIiwgInR3b3RoaXJkcyIsICJ6ZXJvc3VwZXJpb3IiLCAib25lc3VwZXJpb3IiLCAidHdvc3VwZXJpb3IiLCAidGhyZWVzdXBlcmlvciIsICJmb3Vyc3VwZXJpb3IiLCAiZml2ZXN1cGVyaW9yIiwgInNpeHN1cGVyaW9yIiwgInNldmVuc3VwZXJpb3IiLCAiZWlnaHRzdXBlcmlvciIsICJuaW5lc3VwZXJpb3IiLCAiemVyb2luZmVyaW9yIiwgIm9uZWluZmVyaW9yIiwgInR3b2luZmVyaW9yIiwgInRocmVlaW5mZXJpb3IiLCAiZm91cmluZmVyaW9yIiwgImZpdmVpbmZlcmlvciIsICJzaXhpbmZlcmlvciIsICJzZXZlbmluZmVyaW9yIiwgImVpZ2h0aW5mZXJpb3IiLCAibmluZWluZmVyaW9yIiwgImNlbnRpbmZlcmlvciIsICJkb2xsYXJpbmZlcmlvciIsICJwZXJpb2RpbmZlcmlvciIsICJjb21tYWluZmVyaW9yIiwgIkFncmF2ZXNtYWxsIiwgIkFhY3V0ZXNtYWxsIiwgIkFjaXJjdW1mbGV4c21hbGwiLCAiQXRpbGRlc21hbGwiLCAiQWRpZXJlc2lzc21hbGwiLCAiQXJpbmdzbWFsbCIsICJBRXNtYWxsIiwgIkNjZWRpbGxhc21hbGwiLCAiRWdyYXZlc21hbGwiLCAiRWFjdXRlc21hbGwiLCAiRWNpcmN1bWZsZXhzbWFsbCIsICJFZGllcmVzaXNzbWFsbCIsICJJZ3JhdmVzbWFsbCIsICJJYWN1dGVzbWFsbCIsICJJY2lyY3VtZmxleHNtYWxsIiwgIklkaWVyZXNpc3NtYWxsIiwgIkV0aHNtYWxsIiwgIk50aWxkZXNtYWxsIiwgIk9ncmF2ZXNtYWxsIiwgIk9hY3V0ZXNtYWxsIiwgIk9jaXJjdW1mbGV4c21hbGwiLCAiT3RpbGRlc21hbGwiLCAiT2RpZXJlc2lzc21hbGwiLCAiT0VzbWFsbCIsICJPc2xhc2hzbWFsbCIsICJVZ3JhdmVzbWFsbCIsICJVYWN1dGVzbWFsbCIsICJVY2lyY3VtZmxleHNtYWxsIiwgIlVkaWVyZXNpc3NtYWxsIiwgIllhY3V0ZXNtYWxsIiwgIlRob3Juc21hbGwiLCAiWWRpZXJlc2lzc21hbGwiXTsKY29uc3QgRXhwZXJ0U3Vic2V0Q2hhcnNldCA9IFsiLm5vdGRlZiIsICJzcGFjZSIsICJkb2xsYXJvbGRzdHlsZSIsICJkb2xsYXJzdXBlcmlvciIsICJwYXJlbmxlZnRzdXBlcmlvciIsICJwYXJlbnJpZ2h0c3VwZXJpb3IiLCAidHdvZG90ZW5sZWFkZXIiLCAib25lZG90ZW5sZWFkZXIiLCAiY29tbWEiLCAiaHlwaGVuIiwgInBlcmlvZCIsICJmcmFjdGlvbiIsICJ6ZXJvb2xkc3R5bGUiLCAib25lb2xkc3R5bGUiLCAidHdvb2xkc3R5bGUiLCAidGhyZWVvbGRzdHlsZSIsICJmb3Vyb2xkc3R5bGUiLCAiZml2ZW9sZHN0eWxlIiwgInNpeG9sZHN0eWxlIiwgInNldmVub2xkc3R5bGUiLCAiZWlnaHRvbGRzdHlsZSIsICJuaW5lb2xkc3R5bGUiLCAiY29sb24iLCAic2VtaWNvbG9uIiwgImNvbW1hc3VwZXJpb3IiLCAidGhyZWVxdWFydGVyc2VtZGFzaCIsICJwZXJpb2RzdXBlcmlvciIsICJhc3VwZXJpb3IiLCAiYnN1cGVyaW9yIiwgImNlbnRzdXBlcmlvciIsICJkc3VwZXJpb3IiLCAiZXN1cGVyaW9yIiwgImlzdXBlcmlvciIsICJsc3VwZXJpb3IiLCAibXN1cGVyaW9yIiwgIm5zdXBlcmlvciIsICJvc3VwZXJpb3IiLCAicnN1cGVyaW9yIiwgInNzdXBlcmlvciIsICJ0c3VwZXJpb3IiLCAiZmYiLCAiZmkiLCAiZmwiLCAiZmZpIiwgImZmbCIsICJwYXJlbmxlZnRpbmZlcmlvciIsICJwYXJlbnJpZ2h0aW5mZXJpb3IiLCAiaHlwaGVuc3VwZXJpb3IiLCAiY29sb25tb25ldGFyeSIsICJvbmVmaXR0ZWQiLCAicnVwaWFoIiwgImNlbnRvbGRzdHlsZSIsICJmaWd1cmVkYXNoIiwgImh5cGhlbmluZmVyaW9yIiwgIm9uZXF1YXJ0ZXIiLCAib25laGFsZiIsICJ0aHJlZXF1YXJ0ZXJzIiwgIm9uZWVpZ2h0aCIsICJ0aHJlZWVpZ2h0aHMiLCAiZml2ZWVpZ2h0aHMiLCAic2V2ZW5laWdodGhzIiwgIm9uZXRoaXJkIiwgInR3b3RoaXJkcyIsICJ6ZXJvc3VwZXJpb3IiLCAib25lc3VwZXJpb3IiLCAidHdvc3VwZXJpb3IiLCAidGhyZWVzdXBlcmlvciIsICJmb3Vyc3VwZXJpb3IiLCAiZml2ZXN1cGVyaW9yIiwgInNpeHN1cGVyaW9yIiwgInNldmVuc3VwZXJpb3IiLCAiZWlnaHRzdXBlcmlvciIsICJuaW5lc3VwZXJpb3IiLCAiemVyb2luZmVyaW9yIiwgIm9uZWluZmVyaW9yIiwgInR3b2luZmVyaW9yIiwgInRocmVlaW5mZXJpb3IiLCAiZm91cmluZmVyaW9yIiwgImZpdmVpbmZlcmlvciIsICJzaXhpbmZlcmlvciIsICJzZXZlbmluZmVyaW9yIiwgImVpZ2h0aW5mZXJpb3IiLCAibmluZWluZmVyaW9yIiwgImNlbnRpbmZlcmlvciIsICJkb2xsYXJpbmZlcmlvciIsICJwZXJpb2RpbmZlcmlvciIsICJjb21tYWluZmVyaW9yIl07Cgo7Ly8gLi9zcmMvY29yZS9jZmZfcGFyc2VyLmpzCgoKCgoKCgoKCgoKCgpjb25zdCBNQVhfU1VCUl9ORVNUSU5HID0gMTA7CmNvbnN0IENGRlN0YW5kYXJkU3RyaW5ncyA9IFsiLm5vdGRlZiIsICJzcGFjZSIsICJleGNsYW0iLCAicXVvdGVkYmwiLCAibnVtYmVyc2lnbiIsICJkb2xsYXIiLCAicGVyY2VudCIsICJhbXBlcnNhbmQiLCAicXVvdGVyaWdodCIsICJwYXJlbmxlZnQiLCAicGFyZW5yaWdodCIsICJhc3RlcmlzayIsICJwbHVzIiwgImNvbW1hIiwgImh5cGhlbiIsICJwZXJpb2QiLCAic2xhc2giLCAiemVybyIsICJvbmUiLCAidHdvIiwgInRocmVlIiwgImZvdXIiLCAiZml2ZSIsICJzaXgiLCAic2V2ZW4iLCAiZWlnaHQiLCAibmluZSIsICJjb2xvbiIsICJzZW1pY29sb24iLCAibGVzcyIsICJlcXVhbCIsICJncmVhdGVyIiwgInF1ZXN0aW9uIiwgImF0IiwgIkEiLCAiQiIsICJDIiwgIkQiLCAiRSIsICJGIiwgIkciLCAiSCIsICJJIiwgIkoiLCAiSyIsICJMIiwgIk0iLCAiTiIsICJPIiwgIlAiLCAiUSIsICJSIiwgIlMiLCAiVCIsICJVIiwgIlYiLCAiVyIsICJYIiwgIlkiLCAiWiIsICJicmFja2V0bGVmdCIsICJiYWNrc2xhc2giLCAiYnJhY2tldHJpZ2h0IiwgImFzY2lpY2lyY3VtIiwgInVuZGVyc2NvcmUiLCAicXVvdGVsZWZ0IiwgImEiLCAiYiIsICJjIiwgImQiLCAiZSIsICJmIiwgImciLCAiaCIsICJpIiwgImoiLCAiayIsICJsIiwgIm0iLCAibiIsICJvIiwgInAiLCAicSIsICJyIiwgInMiLCAidCIsICJ1IiwgInYiLCAidyIsICJ4IiwgInkiLCAieiIsICJicmFjZWxlZnQiLCAiYmFyIiwgImJyYWNlcmlnaHQiLCAiYXNjaWl0aWxkZSIsICJleGNsYW1kb3duIiwgImNlbnQiLCAic3RlcmxpbmciLCAiZnJhY3Rpb24iLCAieWVuIiwgImZsb3JpbiIsICJzZWN0aW9uIiwgImN1cnJlbmN5IiwgInF1b3Rlc2luZ2xlIiwgInF1b3RlZGJsbGVmdCIsICJndWlsbGVtb3RsZWZ0IiwgImd1aWxzaW5nbGxlZnQiLCAiZ3VpbHNpbmdscmlnaHQiLCAiZmkiLCAiZmwiLCAiZW5kYXNoIiwgImRhZ2dlciIsICJkYWdnZXJkYmwiLCAicGVyaW9kY2VudGVyZWQiLCAicGFyYWdyYXBoIiwgImJ1bGxldCIsICJxdW90ZXNpbmdsYmFzZSIsICJxdW90ZWRibGJhc2UiLCAicXVvdGVkYmxyaWdodCIsICJndWlsbGVtb3RyaWdodCIsICJlbGxpcHNpcyIsICJwZXJ0aG91c2FuZCIsICJxdWVzdGlvbmRvd24iLCAiZ3JhdmUiLCAiYWN1dGUiLCAiY2lyY3VtZmxleCIsICJ0aWxkZSIsICJtYWNyb24iLCAiYnJldmUiLCAiZG90YWNjZW50IiwgImRpZXJlc2lzIiwgInJpbmciLCAiY2VkaWxsYSIsICJodW5nYXJ1bWxhdXQiLCAib2dvbmVrIiwgImNhcm9uIiwgImVtZGFzaCIsICJBRSIsICJvcmRmZW1pbmluZSIsICJMc2xhc2giLCAiT3NsYXNoIiwgIk9FIiwgIm9yZG1hc2N1bGluZSIsICJhZSIsICJkb3RsZXNzaSIsICJsc2xhc2giLCAib3NsYXNoIiwgIm9lIiwgImdlcm1hbmRibHMiLCAib25lc3VwZXJpb3IiLCAibG9naWNhbG5vdCIsICJtdSIsICJ0cmFkZW1hcmsiLCAiRXRoIiwgIm9uZWhhbGYiLCAicGx1c21pbnVzIiwgIlRob3JuIiwgIm9uZXF1YXJ0ZXIiLCAiZGl2aWRlIiwgImJyb2tlbmJhciIsICJkZWdyZWUiLCAidGhvcm4iLCAidGhyZWVxdWFydGVycyIsICJ0d29zdXBlcmlvciIsICJyZWdpc3RlcmVkIiwgIm1pbnVzIiwgImV0aCIsICJtdWx0aXBseSIsICJ0aHJlZXN1cGVyaW9yIiwgImNvcHlyaWdodCIsICJBYWN1dGUiLCAiQWNpcmN1bWZsZXgiLCAiQWRpZXJlc2lzIiwgIkFncmF2ZSIsICJBcmluZyIsICJBdGlsZGUiLCAiQ2NlZGlsbGEiLCAiRWFjdXRlIiwgIkVjaXJjdW1mbGV4IiwgIkVkaWVyZXNpcyIsICJFZ3JhdmUiLCAiSWFjdXRlIiwgIkljaXJjdW1mbGV4IiwgIklkaWVyZXNpcyIsICJJZ3JhdmUiLCAiTnRpbGRlIiwgIk9hY3V0ZSIsICJPY2lyY3VtZmxleCIsICJPZGllcmVzaXMiLCAiT2dyYXZlIiwgIk90aWxkZSIsICJTY2Fyb24iLCAiVWFjdXRlIiwgIlVjaXJjdW1mbGV4IiwgIlVkaWVyZXNpcyIsICJVZ3JhdmUiLCAiWWFjdXRlIiwgIllkaWVyZXNpcyIsICJaY2Fyb24iLCAiYWFjdXRlIiwgImFjaXJjdW1mbGV4IiwgImFkaWVyZXNpcyIsICJhZ3JhdmUiLCAiYXJpbmciLCAiYXRpbGRlIiwgImNjZWRpbGxhIiwgImVhY3V0ZSIsICJlY2lyY3VtZmxleCIsICJlZGllcmVzaXMiLCAiZWdyYXZlIiwgImlhY3V0ZSIsICJpY2lyY3VtZmxleCIsICJpZGllcmVzaXMiLCAiaWdyYXZlIiwgIm50aWxkZSIsICJvYWN1dGUiLCAib2NpcmN1bWZsZXgiLCAib2RpZXJlc2lzIiwgIm9ncmF2ZSIsICJvdGlsZGUiLCAic2Nhcm9uIiwgInVhY3V0ZSIsICJ1Y2lyY3VtZmxleCIsICJ1ZGllcmVzaXMiLCAidWdyYXZlIiwgInlhY3V0ZSIsICJ5ZGllcmVzaXMiLCAiemNhcm9uIiwgImV4Y2xhbXNtYWxsIiwgIkh1bmdhcnVtbGF1dHNtYWxsIiwgImRvbGxhcm9sZHN0eWxlIiwgImRvbGxhcnN1cGVyaW9yIiwgImFtcGVyc2FuZHNtYWxsIiwgIkFjdXRlc21hbGwiLCAicGFyZW5sZWZ0c3VwZXJpb3IiLCAicGFyZW5yaWdodHN1cGVyaW9yIiwgInR3b2RvdGVubGVhZGVyIiwgIm9uZWRvdGVubGVhZGVyIiwgInplcm9vbGRzdHlsZSIsICJvbmVvbGRzdHlsZSIsICJ0d29vbGRzdHlsZSIsICJ0aHJlZW9sZHN0eWxlIiwgImZvdXJvbGRzdHlsZSIsICJmaXZlb2xkc3R5bGUiLCAic2l4b2xkc3R5bGUiLCAic2V2ZW5vbGRzdHlsZSIsICJlaWdodG9sZHN0eWxlIiwgIm5pbmVvbGRzdHlsZSIsICJjb21tYXN1cGVyaW9yIiwgInRocmVlcXVhcnRlcnNlbWRhc2giLCAicGVyaW9kc3VwZXJpb3IiLCAicXVlc3Rpb25zbWFsbCIsICJhc3VwZXJpb3IiLCAiYnN1cGVyaW9yIiwgImNlbnRzdXBlcmlvciIsICJkc3VwZXJpb3IiLCAiZXN1cGVyaW9yIiwgImlzdXBlcmlvciIsICJsc3VwZXJpb3IiLCAibXN1cGVyaW9yIiwgIm5zdXBlcmlvciIsICJvc3VwZXJpb3IiLCAicnN1cGVyaW9yIiwgInNzdXBlcmlvciIsICJ0c3VwZXJpb3IiLCAiZmYiLCAiZmZpIiwgImZmbCIsICJwYXJlbmxlZnRpbmZlcmlvciIsICJwYXJlbnJpZ2h0aW5mZXJpb3IiLCAiQ2lyY3VtZmxleHNtYWxsIiwgImh5cGhlbnN1cGVyaW9yIiwgIkdyYXZlc21hbGwiLCAiQXNtYWxsIiwgIkJzbWFsbCIsICJDc21hbGwiLCAiRHNtYWxsIiwgIkVzbWFsbCIsICJGc21hbGwiLCAiR3NtYWxsIiwgIkhzbWFsbCIsICJJc21hbGwiLCAiSnNtYWxsIiwgIktzbWFsbCIsICJMc21hbGwiLCAiTXNtYWxsIiwgIk5zbWFsbCIsICJPc21hbGwiLCAiUHNtYWxsIiwgIlFzbWFsbCIsICJSc21hbGwiLCAiU3NtYWxsIiwgIlRzbWFsbCIsICJVc21hbGwiLCAiVnNtYWxsIiwgIldzbWFsbCIsICJYc21hbGwiLCAiWXNtYWxsIiwgIlpzbWFsbCIsICJjb2xvbm1vbmV0YXJ5IiwgIm9uZWZpdHRlZCIsICJydXBpYWgiLCAiVGlsZGVzbWFsbCIsICJleGNsYW1kb3duc21hbGwiLCAiY2VudG9sZHN0eWxlIiwgIkxzbGFzaHNtYWxsIiwgIlNjYXJvbnNtYWxsIiwgIlpjYXJvbnNtYWxsIiwgIkRpZXJlc2lzc21hbGwiLCAiQnJldmVzbWFsbCIsICJDYXJvbnNtYWxsIiwgIkRvdGFjY2VudHNtYWxsIiwgIk1hY3JvbnNtYWxsIiwgImZpZ3VyZWRhc2giLCAiaHlwaGVuaW5mZXJpb3IiLCAiT2dvbmVrc21hbGwiLCAiUmluZ3NtYWxsIiwgIkNlZGlsbGFzbWFsbCIsICJxdWVzdGlvbmRvd25zbWFsbCIsICJvbmVlaWdodGgiLCAidGhyZWVlaWdodGhzIiwgImZpdmVlaWdodGhzIiwgInNldmVuZWlnaHRocyIsICJvbmV0aGlyZCIsICJ0d290aGlyZHMiLCAiemVyb3N1cGVyaW9yIiwgImZvdXJzdXBlcmlvciIsICJmaXZlc3VwZXJpb3IiLCAic2l4c3VwZXJpb3IiLCAic2V2ZW5zdXBlcmlvciIsICJlaWdodHN1cGVyaW9yIiwgIm5pbmVzdXBlcmlvciIsICJ6ZXJvaW5mZXJpb3IiLCAib25laW5mZXJpb3IiLCAidHdvaW5mZXJpb3IiLCAidGhyZWVpbmZlcmlvciIsICJmb3VyaW5mZXJpb3IiLCAiZml2ZWluZmVyaW9yIiwgInNpeGluZmVyaW9yIiwgInNldmVuaW5mZXJpb3IiLCAiZWlnaHRpbmZlcmlvciIsICJuaW5laW5mZXJpb3IiLCAiY2VudGluZmVyaW9yIiwgImRvbGxhcmluZmVyaW9yIiwgInBlcmlvZGluZmVyaW9yIiwgImNvbW1haW5mZXJpb3IiLCAiQWdyYXZlc21hbGwiLCAiQWFjdXRlc21hbGwiLCAiQWNpcmN1bWZsZXhzbWFsbCIsICJBdGlsZGVzbWFsbCIsICJBZGllcmVzaXNzbWFsbCIsICJBcmluZ3NtYWxsIiwgIkFFc21hbGwiLCAiQ2NlZGlsbGFzbWFsbCIsICJFZ3JhdmVzbWFsbCIsICJFYWN1dGVzbWFsbCIsICJFY2lyY3VtZmxleHNtYWxsIiwgIkVkaWVyZXNpc3NtYWxsIiwgIklncmF2ZXNtYWxsIiwgIklhY3V0ZXNtYWxsIiwgIkljaXJjdW1mbGV4c21hbGwiLCAiSWRpZXJlc2lzc21hbGwiLCAiRXRoc21hbGwiLCAiTnRpbGRlc21hbGwiLCAiT2dyYXZlc21hbGwiLCAiT2FjdXRlc21hbGwiLCAiT2NpcmN1bWZsZXhzbWFsbCIsICJPdGlsZGVzbWFsbCIsICJPZGllcmVzaXNzbWFsbCIsICJPRXNtYWxsIiwgIk9zbGFzaHNtYWxsIiwgIlVncmF2ZXNtYWxsIiwgIlVhY3V0ZXNtYWxsIiwgIlVjaXJjdW1mbGV4c21hbGwiLCAiVWRpZXJlc2lzc21hbGwiLCAiWWFjdXRlc21hbGwiLCAiVGhvcm5zbWFsbCIsICJZZGllcmVzaXNzbWFsbCIsICIwMDEuMDAwIiwgIjAwMS4wMDEiLCAiMDAxLjAwMiIsICIwMDEuMDAzIiwgIkJsYWNrIiwgIkJvbGQiLCAiQm9vayIsICJMaWdodCIsICJNZWRpdW0iLCAiUmVndWxhciIsICJSb21hbiIsICJTZW1pYm9sZCJdOwpjb25zdCBOVU1fU1RBTkRBUkRfQ0ZGX1NUUklOR1MgPSAzOTE7CmNvbnN0IENoYXJzdHJpbmdWYWxpZGF0aW9uRGF0YSA9IFtudWxsLCB7CiAgaWQ6ICJoc3RlbSIsCiAgbWluOiAyLAogIHN0YWNrQ2xlYXJpbmc6IHRydWUsCiAgc3RlbTogdHJ1ZQp9LCBudWxsLCB7CiAgaWQ6ICJ2c3RlbSIsCiAgbWluOiAyLAogIHN0YWNrQ2xlYXJpbmc6IHRydWUsCiAgc3RlbTogdHJ1ZQp9LCB7CiAgaWQ6ICJ2bW92ZXRvIiwKICBtaW46IDEsCiAgc3RhY2tDbGVhcmluZzogdHJ1ZQp9LCB7CiAgaWQ6ICJybGluZXRvIiwKICBtaW46IDIsCiAgcmVzZXRTdGFjazogdHJ1ZQp9LCB7CiAgaWQ6ICJobGluZXRvIiwKICBtaW46IDEsCiAgcmVzZXRTdGFjazogdHJ1ZQp9LCB7CiAgaWQ6ICJ2bGluZXRvIiwKICBtaW46IDEsCiAgcmVzZXRTdGFjazogdHJ1ZQp9LCB7CiAgaWQ6ICJycmN1cnZldG8iLAogIG1pbjogNiwKICByZXNldFN0YWNrOiB0cnVlCn0sIG51bGwsIHsKICBpZDogImNhbGxzdWJyIiwKICBtaW46IDEsCiAgdW5kZWZTdGFjazogdHJ1ZQp9LCB7CiAgaWQ6ICJyZXR1cm4iLAogIG1pbjogMCwKICB1bmRlZlN0YWNrOiB0cnVlCn0sIG51bGwsIG51bGwsIHsKICBpZDogImVuZGNoYXIiLAogIG1pbjogMCwKICBzdGFja0NsZWFyaW5nOiB0cnVlCn0sIG51bGwsIG51bGwsIG51bGwsIHsKICBpZDogImhzdGVtaG0iLAogIG1pbjogMiwKICBzdGFja0NsZWFyaW5nOiB0cnVlLAogIHN0ZW06IHRydWUKfSwgewogIGlkOiAiaGludG1hc2siLAogIG1pbjogMCwKICBzdGFja0NsZWFyaW5nOiB0cnVlCn0sIHsKICBpZDogImNudHJtYXNrIiwKICBtaW46IDAsCiAgc3RhY2tDbGVhcmluZzogdHJ1ZQp9LCB7CiAgaWQ6ICJybW92ZXRvIiwKICBtaW46IDIsCiAgc3RhY2tDbGVhcmluZzogdHJ1ZQp9LCB7CiAgaWQ6ICJobW92ZXRvIiwKICBtaW46IDEsCiAgc3RhY2tDbGVhcmluZzogdHJ1ZQp9LCB7CiAgaWQ6ICJ2c3RlbWhtIiwKICBtaW46IDIsCiAgc3RhY2tDbGVhcmluZzogdHJ1ZSwKICBzdGVtOiB0cnVlCn0sIHsKICBpZDogInJjdXJ2ZWxpbmUiLAogIG1pbjogOCwKICByZXNldFN0YWNrOiB0cnVlCn0sIHsKICBpZDogInJsaW5lY3VydmUiLAogIG1pbjogOCwKICByZXNldFN0YWNrOiB0cnVlCn0sIHsKICBpZDogInZ2Y3VydmV0byIsCiAgbWluOiA0LAogIHJlc2V0U3RhY2s6IHRydWUKfSwgewogIGlkOiAiaGhjdXJ2ZXRvIiwKICBtaW46IDQsCiAgcmVzZXRTdGFjazogdHJ1ZQp9LCBudWxsLCB7CiAgaWQ6ICJjYWxsZ3N1YnIiLAogIG1pbjogMSwKICB1bmRlZlN0YWNrOiB0cnVlCn0sIHsKICBpZDogInZoY3VydmV0byIsCiAgbWluOiA0LAogIHJlc2V0U3RhY2s6IHRydWUKfSwgewogIGlkOiAiaHZjdXJ2ZXRvIiwKICBtaW46IDQsCiAgcmVzZXRTdGFjazogdHJ1ZQp9XTsKY29uc3QgQ2hhcnN0cmluZ1ZhbGlkYXRpb25EYXRhMTIgPSBbbnVsbCwgbnVsbCwgbnVsbCwgewogIGlkOiAiYW5kIiwKICBtaW46IDIsCiAgc3RhY2tEZWx0YTogLTEKfSwgewogIGlkOiAib3IiLAogIG1pbjogMiwKICBzdGFja0RlbHRhOiAtMQp9LCB7CiAgaWQ6ICJub3QiLAogIG1pbjogMSwKICBzdGFja0RlbHRhOiAwCn0sIG51bGwsIG51bGwsIG51bGwsIHsKICBpZDogImFicyIsCiAgbWluOiAxLAogIHN0YWNrRGVsdGE6IDAKfSwgewogIGlkOiAiYWRkIiwKICBtaW46IDIsCiAgc3RhY2tEZWx0YTogLTEsCiAgc3RhY2tGbihzdGFjaywgaW5kZXgpIHsKICAgIHN0YWNrW2luZGV4IC0gMl0gPSBzdGFja1tpbmRleCAtIDJdICsgc3RhY2tbaW5kZXggLSAxXTsKICB9Cn0sIHsKICBpZDogInN1YiIsCiAgbWluOiAyLAogIHN0YWNrRGVsdGE6IC0xLAogIHN0YWNrRm4oc3RhY2ssIGluZGV4KSB7CiAgICBzdGFja1tpbmRleCAtIDJdID0gc3RhY2tbaW5kZXggLSAyXSAtIHN0YWNrW2luZGV4IC0gMV07CiAgfQp9LCB7CiAgaWQ6ICJkaXYiLAogIG1pbjogMiwKICBzdGFja0RlbHRhOiAtMSwKICBzdGFja0ZuKHN0YWNrLCBpbmRleCkgewogICAgc3RhY2tbaW5kZXggLSAyXSA9IHN0YWNrW2luZGV4IC0gMl0gLyBzdGFja1tpbmRleCAtIDFdOwogIH0KfSwgbnVsbCwgewogIGlkOiAibmVnIiwKICBtaW46IDEsCiAgc3RhY2tEZWx0YTogMCwKICBzdGFja0ZuKHN0YWNrLCBpbmRleCkgewogICAgc3RhY2tbaW5kZXggLSAxXSA9IC1zdGFja1tpbmRleCAtIDFdOwogIH0KfSwgewogIGlkOiAiZXEiLAogIG1pbjogMiwKICBzdGFja0RlbHRhOiAtMQp9LCBudWxsLCBudWxsLCB7CiAgaWQ6ICJkcm9wIiwKICBtaW46IDEsCiAgc3RhY2tEZWx0YTogLTEKfSwgbnVsbCwgewogIGlkOiAicHV0IiwKICBtaW46IDIsCiAgc3RhY2tEZWx0YTogLTIKfSwgewogIGlkOiAiZ2V0IiwKICBtaW46IDEsCiAgc3RhY2tEZWx0YTogMAp9LCB7CiAgaWQ6ICJpZmVsc2UiLAogIG1pbjogNCwKICBzdGFja0RlbHRhOiAtMwp9LCB7CiAgaWQ6ICJyYW5kb20iLAogIG1pbjogMCwKICBzdGFja0RlbHRhOiAxCn0sIHsKICBpZDogIm11bCIsCiAgbWluOiAyLAogIHN0YWNrRGVsdGE6IC0xLAogIHN0YWNrRm4oc3RhY2ssIGluZGV4KSB7CiAgICBzdGFja1tpbmRleCAtIDJdID0gc3RhY2tbaW5kZXggLSAyXSAqIHN0YWNrW2luZGV4IC0gMV07CiAgfQp9LCBudWxsLCB7CiAgaWQ6ICJzcXJ0IiwKICBtaW46IDEsCiAgc3RhY2tEZWx0YTogMAp9LCB7CiAgaWQ6ICJkdXAiLAogIG1pbjogMSwKICBzdGFja0RlbHRhOiAxCn0sIHsKICBpZDogImV4Y2giLAogIG1pbjogMiwKICBzdGFja0RlbHRhOiAwCn0sIHsKICBpZDogImluZGV4IiwKICBtaW46IDIsCiAgc3RhY2tEZWx0YTogMAp9LCB7CiAgaWQ6ICJyb2xsIiwKICBtaW46IDMsCiAgc3RhY2tEZWx0YTogLTIKfSwgbnVsbCwgbnVsbCwgbnVsbCwgewogIGlkOiAiaGZsZXgiLAogIG1pbjogNywKICByZXNldFN0YWNrOiB0cnVlCn0sIHsKICBpZDogImZsZXgiLAogIG1pbjogMTMsCiAgcmVzZXRTdGFjazogdHJ1ZQp9LCB7CiAgaWQ6ICJoZmxleDEiLAogIG1pbjogOSwKICByZXNldFN0YWNrOiB0cnVlCn0sIHsKICBpZDogImZsZXgxIiwKICBtaW46IDExLAogIHJlc2V0U3RhY2s6IHRydWUKfV07CmNsYXNzIENGRlBhcnNlciB7CiAgY29uc3RydWN0b3IoZmlsZSwgcHJvcGVydGllcywgc2VhY0FuYWx5c2lzRW5hYmxlZCkgewogICAgdGhpcy5ieXRlcyA9IGZpbGUuZ2V0Qnl0ZXMoKTsKICAgIHRoaXMucHJvcGVydGllcyA9IHByb3BlcnRpZXM7CiAgICB0aGlzLnNlYWNBbmFseXNpc0VuYWJsZWQgPSAhIXNlYWNBbmFseXNpc0VuYWJsZWQ7CiAgfQogIHBhcnNlKCkgewogICAgY29uc3QgcHJvcGVydGllcyA9IHRoaXMucHJvcGVydGllczsKICAgIGNvbnN0IGNmZiA9IG5ldyBDRkYoKTsKICAgIHRoaXMuY2ZmID0gY2ZmOwogICAgY29uc3QgaGVhZGVyID0gdGhpcy5wYXJzZUhlYWRlcigpOwogICAgY29uc3QgbmFtZUluZGV4ID0gdGhpcy5wYXJzZUluZGV4KGhlYWRlci5lbmRQb3MpOwogICAgY29uc3QgdG9wRGljdEluZGV4ID0gdGhpcy5wYXJzZUluZGV4KG5hbWVJbmRleC5lbmRQb3MpOwogICAgY29uc3Qgc3RyaW5nSW5kZXggPSB0aGlzLnBhcnNlSW5kZXgodG9wRGljdEluZGV4LmVuZFBvcyk7CiAgICBjb25zdCBnbG9iYWxTdWJySW5kZXggPSB0aGlzLnBhcnNlSW5kZXgoc3RyaW5nSW5kZXguZW5kUG9zKTsKICAgIGNvbnN0IHRvcERpY3RQYXJzZWQgPSB0aGlzLnBhcnNlRGljdCh0b3BEaWN0SW5kZXgub2JqLmdldCgwKSk7CiAgICBjb25zdCB0b3BEaWN0ID0gdGhpcy5jcmVhdGVEaWN0KENGRlRvcERpY3QsIHRvcERpY3RQYXJzZWQsIGNmZi5zdHJpbmdzKTsKICAgIGNmZi5oZWFkZXIgPSBoZWFkZXIub2JqOwogICAgY2ZmLm5hbWVzID0gdGhpcy5wYXJzZU5hbWVJbmRleChuYW1lSW5kZXgub2JqKTsKICAgIGNmZi5zdHJpbmdzID0gdGhpcy5wYXJzZVN0cmluZ0luZGV4KHN0cmluZ0luZGV4Lm9iaik7CiAgICBjZmYudG9wRGljdCA9IHRvcERpY3Q7CiAgICBjZmYuZ2xvYmFsU3VickluZGV4ID0gZ2xvYmFsU3VickluZGV4Lm9iajsKICAgIHRoaXMucGFyc2VQcml2YXRlRGljdChjZmYudG9wRGljdCk7CiAgICBjZmYuaXNDSURGb250ID0gdG9wRGljdC5oYXNOYW1lKCJST1MiKTsKICAgIGNvbnN0IGNoYXJTdHJpbmdPZmZzZXQgPSB0b3BEaWN0LmdldEJ5TmFtZSgiQ2hhclN0cmluZ3MiKTsKICAgIGNvbnN0IGNoYXJTdHJpbmdJbmRleCA9IHRoaXMucGFyc2VJbmRleChjaGFyU3RyaW5nT2Zmc2V0KS5vYmo7CiAgICBjb25zdCBmb250TWF0cml4ID0gdG9wRGljdC5nZXRCeU5hbWUoIkZvbnRNYXRyaXgiKTsKICAgIGlmIChmb250TWF0cml4KSB7CiAgICAgIHByb3BlcnRpZXMuZm9udE1hdHJpeCA9IGZvbnRNYXRyaXg7CiAgICB9CiAgICBjb25zdCBmb250QkJveCA9IHRvcERpY3QuZ2V0QnlOYW1lKCJGb250QkJveCIpOwogICAgaWYgKGZvbnRCQm94KSB7CiAgICAgIHByb3BlcnRpZXMuYXNjZW50ID0gTWF0aC5tYXgoZm9udEJCb3hbM10sIGZvbnRCQm94WzFdKTsKICAgICAgcHJvcGVydGllcy5kZXNjZW50ID0gTWF0aC5taW4oZm9udEJCb3hbMV0sIGZvbnRCQm94WzNdKTsKICAgICAgcHJvcGVydGllcy5hc2NlbnRTY2FsZWQgPSB0cnVlOwogICAgfQogICAgbGV0IGNoYXJzZXQsIGVuY29kaW5nOwogICAgaWYgKGNmZi5pc0NJREZvbnQpIHsKICAgICAgY29uc3QgZmRBcnJheUluZGV4ID0gdGhpcy5wYXJzZUluZGV4KHRvcERpY3QuZ2V0QnlOYW1lKCJGREFycmF5IikpLm9iajsKICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gZmRBcnJheUluZGV4LmNvdW50OyBpIDwgaWk7ICsraSkgewogICAgICAgIGNvbnN0IGRpY3RSYXcgPSBmZEFycmF5SW5kZXguZ2V0KGkpOwogICAgICAgIGNvbnN0IGZvbnREaWN0ID0gdGhpcy5jcmVhdGVEaWN0KENGRlRvcERpY3QsIHRoaXMucGFyc2VEaWN0KGRpY3RSYXcpLCBjZmYuc3RyaW5ncyk7CiAgICAgICAgdGhpcy5wYXJzZVByaXZhdGVEaWN0KGZvbnREaWN0KTsKICAgICAgICBjZmYuZmRBcnJheS5wdXNoKGZvbnREaWN0KTsKICAgICAgfQogICAgICBlbmNvZGluZyA9IG51bGw7CiAgICAgIGNoYXJzZXQgPSB0aGlzLnBhcnNlQ2hhcnNldHModG9wRGljdC5nZXRCeU5hbWUoImNoYXJzZXQiKSwgY2hhclN0cmluZ0luZGV4LmNvdW50LCBjZmYuc3RyaW5ncywgdHJ1ZSk7CiAgICAgIGNmZi5mZFNlbGVjdCA9IHRoaXMucGFyc2VGRFNlbGVjdCh0b3BEaWN0LmdldEJ5TmFtZSgiRkRTZWxlY3QiKSwgY2hhclN0cmluZ0luZGV4LmNvdW50KTsKICAgIH0gZWxzZSB7CiAgICAgIGNoYXJzZXQgPSB0aGlzLnBhcnNlQ2hhcnNldHModG9wRGljdC5nZXRCeU5hbWUoImNoYXJzZXQiKSwgY2hhclN0cmluZ0luZGV4LmNvdW50LCBjZmYuc3RyaW5ncywgZmFsc2UpOwogICAgICBlbmNvZGluZyA9IHRoaXMucGFyc2VFbmNvZGluZyh0b3BEaWN0LmdldEJ5TmFtZSgiRW5jb2RpbmciKSwgcHJvcGVydGllcywgY2ZmLnN0cmluZ3MsIGNoYXJzZXQuY2hhcnNldCk7CiAgICB9CiAgICBjZmYuY2hhcnNldCA9IGNoYXJzZXQ7CiAgICBjZmYuZW5jb2RpbmcgPSBlbmNvZGluZzsKICAgIGNvbnN0IGNoYXJTdHJpbmdzQW5kU2VhY3MgPSB0aGlzLnBhcnNlQ2hhclN0cmluZ3MoewogICAgICBjaGFyU3RyaW5nczogY2hhclN0cmluZ0luZGV4LAogICAgICBsb2NhbFN1YnJJbmRleDogdG9wRGljdC5wcml2YXRlRGljdC5zdWJyc0luZGV4LAogICAgICBnbG9iYWxTdWJySW5kZXg6IGdsb2JhbFN1YnJJbmRleC5vYmosCiAgICAgIGZkU2VsZWN0OiBjZmYuZmRTZWxlY3QsCiAgICAgIGZkQXJyYXk6IGNmZi5mZEFycmF5LAogICAgICBwcml2YXRlRGljdDogdG9wRGljdC5wcml2YXRlRGljdAogICAgfSk7CiAgICBjZmYuY2hhclN0cmluZ3MgPSBjaGFyU3RyaW5nc0FuZFNlYWNzLmNoYXJTdHJpbmdzOwogICAgY2ZmLnNlYWNzID0gY2hhclN0cmluZ3NBbmRTZWFjcy5zZWFjczsKICAgIGNmZi53aWR0aHMgPSBjaGFyU3RyaW5nc0FuZFNlYWNzLndpZHRoczsKICAgIHJldHVybiBjZmY7CiAgfQogIHBhcnNlSGVhZGVyKCkgewogICAgbGV0IGJ5dGVzID0gdGhpcy5ieXRlczsKICAgIGNvbnN0IGJ5dGVzTGVuZ3RoID0gYnl0ZXMubGVuZ3RoOwogICAgbGV0IG9mZnNldCA9IDA7CiAgICB3aGlsZSAob2Zmc2V0IDwgYnl0ZXNMZW5ndGggJiYgYnl0ZXNbb2Zmc2V0XSAhPT0gMSkgewogICAgICArK29mZnNldDsKICAgIH0KICAgIGlmIChvZmZzZXQgPj0gYnl0ZXNMZW5ndGgpIHsKICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCJJbnZhbGlkIENGRiBoZWFkZXIiKTsKICAgIH0KICAgIGlmIChvZmZzZXQgIT09IDApIHsKICAgICAgaW5mbygiY2ZmIGRhdGEgaXMgc2hpZnRlZCIpOwogICAgICBieXRlcyA9IGJ5dGVzLnN1YmFycmF5KG9mZnNldCk7CiAgICAgIHRoaXMuYnl0ZXMgPSBieXRlczsKICAgIH0KICAgIGNvbnN0IG1ham9yID0gYnl0ZXNbMF07CiAgICBjb25zdCBtaW5vciA9IGJ5dGVzWzFdOwogICAgY29uc3QgaGRyU2l6ZSA9IGJ5dGVzWzJdOwogICAgY29uc3Qgb2ZmU2l6ZSA9IGJ5dGVzWzNdOwogICAgY29uc3QgaGVhZGVyID0gbmV3IENGRkhlYWRlcihtYWpvciwgbWlub3IsIGhkclNpemUsIG9mZlNpemUpOwogICAgcmV0dXJuIHsKICAgICAgb2JqOiBoZWFkZXIsCiAgICAgIGVuZFBvczogaGRyU2l6ZQogICAgfTsKICB9CiAgcGFyc2VEaWN0KGRpY3QpIHsKICAgIGxldCBwb3MgPSAwOwogICAgZnVuY3Rpb24gcGFyc2VPcGVyYW5kKCkgewogICAgICBsZXQgdmFsdWUgPSBkaWN0W3BvcysrXTsKICAgICAgaWYgKHZhbHVlID09PSAzMCkgewogICAgICAgIHJldHVybiBwYXJzZUZsb2F0T3BlcmFuZCgpOwogICAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAyOCkgewogICAgICAgIHZhbHVlID0gcmVhZEludDE2KGRpY3QsIHBvcyk7CiAgICAgICAgcG9zICs9IDI7CiAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAyOSkgewogICAgICAgIHZhbHVlID0gZGljdFtwb3MrK107CiAgICAgICAgdmFsdWUgPSB2YWx1ZSA8PCA4IHwgZGljdFtwb3MrK107CiAgICAgICAgdmFsdWUgPSB2YWx1ZSA8PCA4IHwgZGljdFtwb3MrK107CiAgICAgICAgdmFsdWUgPSB2YWx1ZSA8PCA4IHwgZGljdFtwb3MrK107CiAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICB9IGVsc2UgaWYgKHZhbHVlID49IDMyICYmIHZhbHVlIDw9IDI0NikgewogICAgICAgIHJldHVybiB2YWx1ZSAtIDEzOTsKICAgICAgfSBlbHNlIGlmICh2YWx1ZSA+PSAyNDcgJiYgdmFsdWUgPD0gMjUwKSB7CiAgICAgICAgcmV0dXJuICh2YWx1ZSAtIDI0NykgKiAyNTYgKyBkaWN0W3BvcysrXSArIDEwODsKICAgICAgfSBlbHNlIGlmICh2YWx1ZSA+PSAyNTEgJiYgdmFsdWUgPD0gMjU0KSB7CiAgICAgICAgcmV0dXJuIC0oKHZhbHVlIC0gMjUxKSAqIDI1NikgLSBkaWN0W3BvcysrXSAtIDEwODsKICAgICAgfQogICAgICB3YXJuKCdDRkZQYXJzZXJfcGFyc2VEaWN0OiAiJyArIHZhbHVlICsgJyIgaXMgYSByZXNlcnZlZCBjb21tYW5kLicpOwogICAgICByZXR1cm4gTmFOOwogICAgfQogICAgZnVuY3Rpb24gcGFyc2VGbG9hdE9wZXJhbmQoKSB7CiAgICAgIGxldCBzdHIgPSAiIjsKICAgICAgY29uc3QgZW9mID0gMTU7CiAgICAgIGNvbnN0IGxvb2t1cCA9IFsiMCIsICIxIiwgIjIiLCAiMyIsICI0IiwgIjUiLCAiNiIsICI3IiwgIjgiLCAiOSIsICIuIiwgIkUiLCAiRS0iLCBudWxsLCAiLSJdOwogICAgICBjb25zdCBsZW5ndGggPSBkaWN0Lmxlbmd0aDsKICAgICAgd2hpbGUgKHBvcyA8IGxlbmd0aCkgewogICAgICAgIGNvbnN0IGIgPSBkaWN0W3BvcysrXTsKICAgICAgICBjb25zdCBiMSA9IGIgPj4gNDsKICAgICAgICBjb25zdCBiMiA9IGIgJiAxNTsKICAgICAgICBpZiAoYjEgPT09IGVvZikgewogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICAgIHN0ciArPSBsb29rdXBbYjFdOwogICAgICAgIGlmIChiMiA9PT0gZW9mKSB7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgICAgc3RyICs9IGxvb2t1cFtiMl07CiAgICAgIH0KICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoc3RyKTsKICAgIH0KICAgIGxldCBvcGVyYW5kcyA9IFtdOwogICAgY29uc3QgZW50cmllcyA9IFtdOwogICAgcG9zID0gMDsKICAgIGNvbnN0IGVuZCA9IGRpY3QubGVuZ3RoOwogICAgd2hpbGUgKHBvcyA8IGVuZCkgewogICAgICBsZXQgYiA9IGRpY3RbcG9zXTsKICAgICAgaWYgKGIgPD0gMjEpIHsKICAgICAgICBpZiAoYiA9PT0gMTIpIHsKICAgICAgICAgIGIgPSBiIDw8IDggfCBkaWN0WysrcG9zXTsKICAgICAgICB9CiAgICAgICAgZW50cmllcy5wdXNoKFtiLCBvcGVyYW5kc10pOwogICAgICAgIG9wZXJhbmRzID0gW107CiAgICAgICAgKytwb3M7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgb3BlcmFuZHMucHVzaChwYXJzZU9wZXJhbmQoKSk7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBlbnRyaWVzOwogIH0KICBwYXJzZUluZGV4KHBvcykgewogICAgY29uc3QgY2ZmSW5kZXggPSBuZXcgQ0ZGSW5kZXgoKTsKICAgIGNvbnN0IGJ5dGVzID0gdGhpcy5ieXRlczsKICAgIGNvbnN0IGNvdW50ID0gYnl0ZXNbcG9zKytdIDw8IDggfCBieXRlc1twb3MrK107CiAgICBjb25zdCBvZmZzZXRzID0gW107CiAgICBsZXQgZW5kID0gcG9zOwogICAgbGV0IGksIGlpOwogICAgaWYgKGNvdW50ICE9PSAwKSB7CiAgICAgIGNvbnN0IG9mZnNldFNpemUgPSBieXRlc1twb3MrK107CiAgICAgIGNvbnN0IHN0YXJ0UG9zID0gcG9zICsgKGNvdW50ICsgMSkgKiBvZmZzZXRTaXplIC0gMTsKICAgICAgZm9yIChpID0gMCwgaWkgPSBjb3VudCArIDE7IGkgPCBpaTsgKytpKSB7CiAgICAgICAgbGV0IG9mZnNldCA9IDA7CiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBvZmZzZXRTaXplOyArK2opIHsKICAgICAgICAgIG9mZnNldCA8PD0gODsKICAgICAgICAgIG9mZnNldCArPSBieXRlc1twb3MrK107CiAgICAgICAgfQogICAgICAgIG9mZnNldHMucHVzaChzdGFydFBvcyArIG9mZnNldCk7CiAgICAgIH0KICAgICAgZW5kID0gb2Zmc2V0c1tjb3VudF07CiAgICB9CiAgICBmb3IgKGkgPSAwLCBpaSA9IG9mZnNldHMubGVuZ3RoIC0gMTsgaSA8IGlpOyArK2kpIHsKICAgICAgY29uc3Qgb2Zmc2V0U3RhcnQgPSBvZmZzZXRzW2ldOwogICAgICBjb25zdCBvZmZzZXRFbmQgPSBvZmZzZXRzW2kgKyAxXTsKICAgICAgY2ZmSW5kZXguYWRkKGJ5dGVzLnN1YmFycmF5KG9mZnNldFN0YXJ0LCBvZmZzZXRFbmQpKTsKICAgIH0KICAgIHJldHVybiB7CiAgICAgIG9iajogY2ZmSW5kZXgsCiAgICAgIGVuZFBvczogZW5kCiAgICB9OwogIH0KICBwYXJzZU5hbWVJbmRleChpbmRleCkgewogICAgY29uc3QgbmFtZXMgPSBbXTsKICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGluZGV4LmNvdW50OyBpIDwgaWk7ICsraSkgewogICAgICBjb25zdCBuYW1lID0gaW5kZXguZ2V0KGkpOwogICAgICBuYW1lcy5wdXNoKGJ5dGVzVG9TdHJpbmcobmFtZSkpOwogICAgfQogICAgcmV0dXJuIG5hbWVzOwogIH0KICBwYXJzZVN0cmluZ0luZGV4KGluZGV4KSB7CiAgICBjb25zdCBzdHJpbmdzID0gbmV3IENGRlN0cmluZ3MoKTsKICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGluZGV4LmNvdW50OyBpIDwgaWk7ICsraSkgewogICAgICBjb25zdCBkYXRhID0gaW5kZXguZ2V0KGkpOwogICAgICBzdHJpbmdzLmFkZChieXRlc1RvU3RyaW5nKGRhdGEpKTsKICAgIH0KICAgIHJldHVybiBzdHJpbmdzOwogIH0KICBjcmVhdGVEaWN0KFR5cGUsIGRpY3QsIHN0cmluZ3MpIHsKICAgIGNvbnN0IGNmZkRpY3QgPSBuZXcgVHlwZShzdHJpbmdzKTsKICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGRpY3QpIHsKICAgICAgY2ZmRGljdC5zZXRCeUtleShrZXksIHZhbHVlKTsKICAgIH0KICAgIHJldHVybiBjZmZEaWN0OwogIH0KICBwYXJzZUNoYXJTdHJpbmcoc3RhdGUsIGRhdGEsIGxvY2FsU3VickluZGV4LCBnbG9iYWxTdWJySW5kZXgpIHsKICAgIGlmICghZGF0YSB8fCBzdGF0ZS5jYWxsRGVwdGggPiBNQVhfU1VCUl9ORVNUSU5HKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICAgIGxldCBzdGFja1NpemUgPSBzdGF0ZS5zdGFja1NpemU7CiAgICBjb25zdCBzdGFjayA9IHN0YXRlLnN0YWNrOwogICAgbGV0IGxlbmd0aCA9IGRhdGEubGVuZ3RoOwogICAgZm9yIChsZXQgaiA9IDA7IGogPCBsZW5ndGg7KSB7CiAgICAgIGNvbnN0IHZhbHVlID0gZGF0YVtqKytdOwogICAgICBsZXQgdmFsaWRhdGlvbkNvbW1hbmQgPSBudWxsOwogICAgICBpZiAodmFsdWUgPT09IDEyKSB7CiAgICAgICAgY29uc3QgcSA9IGRhdGFbaisrXTsKICAgICAgICBpZiAocSA9PT0gMCkgewogICAgICAgICAgZGF0YVtqIC0gMl0gPSAxMzk7CiAgICAgICAgICBkYXRhW2ogLSAxXSA9IDIyOwogICAgICAgICAgc3RhY2tTaXplID0gMDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdmFsaWRhdGlvbkNvbW1hbmQgPSBDaGFyc3RyaW5nVmFsaWRhdGlvbkRhdGExMltxXTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IDI4KSB7CiAgICAgICAgc3RhY2tbc3RhY2tTaXplXSA9IHJlYWRJbnQxNihkYXRhLCBqKTsKICAgICAgICBqICs9IDI7CiAgICAgICAgc3RhY2tTaXplKys7CiAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IDE0KSB7CiAgICAgICAgaWYgKHN0YWNrU2l6ZSA+PSA0KSB7CiAgICAgICAgICBzdGFja1NpemUgLT0gNDsKICAgICAgICAgIGlmICh0aGlzLnNlYWNBbmFseXNpc0VuYWJsZWQpIHsKICAgICAgICAgICAgc3RhdGUuc2VhYyA9IHN0YWNrLnNsaWNlKHN0YWNrU2l6ZSwgc3RhY2tTaXplICsgNCk7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgdmFsaWRhdGlvbkNvbW1hbmQgPSBDaGFyc3RyaW5nVmFsaWRhdGlvbkRhdGFbdmFsdWVdOwogICAgICB9IGVsc2UgaWYgKHZhbHVlID49IDMyICYmIHZhbHVlIDw9IDI0NikgewogICAgICAgIHN0YWNrW3N0YWNrU2l6ZV0gPSB2YWx1ZSAtIDEzOTsKICAgICAgICBzdGFja1NpemUrKzsKICAgICAgfSBlbHNlIGlmICh2YWx1ZSA+PSAyNDcgJiYgdmFsdWUgPD0gMjU0KSB7CiAgICAgICAgc3RhY2tbc3RhY2tTaXplXSA9IHZhbHVlIDwgMjUxID8gKHZhbHVlIC0gMjQ3IDw8IDgpICsgZGF0YVtqXSArIDEwOCA6IC0odmFsdWUgLSAyNTEgPDwgOCkgLSBkYXRhW2pdIC0gMTA4OwogICAgICAgIGorKzsKICAgICAgICBzdGFja1NpemUrKzsKICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gMjU1KSB7CiAgICAgICAgc3RhY2tbc3RhY2tTaXplXSA9IChkYXRhW2pdIDw8IDI0IHwgZGF0YVtqICsgMV0gPDwgMTYgfCBkYXRhW2ogKyAyXSA8PCA4IHwgZGF0YVtqICsgM10pIC8gNjU1MzY7CiAgICAgICAgaiArPSA0OwogICAgICAgIHN0YWNrU2l6ZSsrOwogICAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAxOSB8fCB2YWx1ZSA9PT0gMjApIHsKICAgICAgICBzdGF0ZS5oaW50cyArPSBzdGFja1NpemUgPj4gMTsKICAgICAgICBpZiAoc3RhdGUuaGludHMgPT09IDApIHsKICAgICAgICAgIGRhdGEuY29weVdpdGhpbihqIC0gMSwgaiwgLTEpOwogICAgICAgICAgaiAtPSAxOwogICAgICAgICAgbGVuZ3RoIC09IDE7CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CiAgICAgICAgaiArPSBzdGF0ZS5oaW50cyArIDcgPj4gMzsKICAgICAgICBzdGFja1NpemUgJT0gMjsKICAgICAgICB2YWxpZGF0aW9uQ29tbWFuZCA9IENoYXJzdHJpbmdWYWxpZGF0aW9uRGF0YVt2YWx1ZV07CiAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IDEwIHx8IHZhbHVlID09PSAyOSkgewogICAgICAgIGNvbnN0IHN1YnJzSW5kZXggPSB2YWx1ZSA9PT0gMTAgPyBsb2NhbFN1YnJJbmRleCA6IGdsb2JhbFN1YnJJbmRleDsKICAgICAgICBpZiAoIXN1YnJzSW5kZXgpIHsKICAgICAgICAgIHZhbGlkYXRpb25Db21tYW5kID0gQ2hhcnN0cmluZ1ZhbGlkYXRpb25EYXRhW3ZhbHVlXTsKICAgICAgICAgIHdhcm4oIk1pc3Npbmcgc3VicnNJbmRleCBmb3IgIiArIHZhbGlkYXRpb25Db21tYW5kLmlkKTsKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgbGV0IGJpYXMgPSAzMjc2ODsKICAgICAgICBpZiAoc3VicnNJbmRleC5jb3VudCA8IDEyNDApIHsKICAgICAgICAgIGJpYXMgPSAxMDc7CiAgICAgICAgfSBlbHNlIGlmIChzdWJyc0luZGV4LmNvdW50IDwgMzM5MDApIHsKICAgICAgICAgIGJpYXMgPSAxMTMxOwogICAgICAgIH0KICAgICAgICBjb25zdCBzdWJyTnVtYmVyID0gc3RhY2tbLS1zdGFja1NpemVdICsgYmlhczsKICAgICAgICBpZiAoc3Vick51bWJlciA8IDAgfHwgc3Vick51bWJlciA+PSBzdWJyc0luZGV4LmNvdW50IHx8IGlzTmFOKHN1YnJOdW1iZXIpKSB7CiAgICAgICAgICB2YWxpZGF0aW9uQ29tbWFuZCA9IENoYXJzdHJpbmdWYWxpZGF0aW9uRGF0YVt2YWx1ZV07CiAgICAgICAgICB3YXJuKCJPdXQgb2YgYm91bmRzIHN1YnJJbmRleCBmb3IgIiArIHZhbGlkYXRpb25Db21tYW5kLmlkKTsKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgc3RhdGUuc3RhY2tTaXplID0gc3RhY2tTaXplOwogICAgICAgIHN0YXRlLmNhbGxEZXB0aCsrOwogICAgICAgIGNvbnN0IHZhbGlkID0gdGhpcy5wYXJzZUNoYXJTdHJpbmcoc3RhdGUsIHN1YnJzSW5kZXguZ2V0KHN1YnJOdW1iZXIpLCBsb2NhbFN1YnJJbmRleCwgZ2xvYmFsU3VickluZGV4KTsKICAgICAgICBpZiAoIXZhbGlkKSB7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIHN0YXRlLmNhbGxEZXB0aC0tOwogICAgICAgIHN0YWNrU2l6ZSA9IHN0YXRlLnN0YWNrU2l6ZTsKICAgICAgICBjb250aW51ZTsKICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gMTEpIHsKICAgICAgICBzdGF0ZS5zdGFja1NpemUgPSBzdGFja1NpemU7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IDAgJiYgaiA9PT0gZGF0YS5sZW5ndGgpIHsKICAgICAgICBkYXRhW2ogLSAxXSA9IDE0OwogICAgICAgIHZhbGlkYXRpb25Db21tYW5kID0gQ2hhcnN0cmluZ1ZhbGlkYXRpb25EYXRhWzE0XTsKICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gOSkgewogICAgICAgIGRhdGEuY29weVdpdGhpbihqIC0gMSwgaiwgLTEpOwogICAgICAgIGogLT0gMTsKICAgICAgICBsZW5ndGggLT0gMTsKICAgICAgICBjb250aW51ZTsKICAgICAgfSBlbHNlIHsKICAgICAgICB2YWxpZGF0aW9uQ29tbWFuZCA9IENoYXJzdHJpbmdWYWxpZGF0aW9uRGF0YVt2YWx1ZV07CiAgICAgIH0KICAgICAgaWYgKHZhbGlkYXRpb25Db21tYW5kKSB7CiAgICAgICAgaWYgKHZhbGlkYXRpb25Db21tYW5kLnN0ZW0pIHsKICAgICAgICAgIHN0YXRlLmhpbnRzICs9IHN0YWNrU2l6ZSA+PiAxOwogICAgICAgICAgaWYgKHZhbHVlID09PSAzIHx8IHZhbHVlID09PSAyMykgewogICAgICAgICAgICBzdGF0ZS5oYXNWU3RlbXMgPSB0cnVlOwogICAgICAgICAgfSBlbHNlIGlmIChzdGF0ZS5oYXNWU3RlbXMgJiYgKHZhbHVlID09PSAxIHx8IHZhbHVlID09PSAxOCkpIHsKICAgICAgICAgICAgd2FybigiQ0ZGIHN0ZW0gaGludHMgYXJlIGluIHdyb25nIG9yZGVyIik7CiAgICAgICAgICAgIGRhdGFbaiAtIDFdID0gdmFsdWUgPT09IDEgPyAzIDogMjM7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmICgibWluIiBpbiB2YWxpZGF0aW9uQ29tbWFuZCkgewogICAgICAgICAgaWYgKCFzdGF0ZS51bmRlZlN0YWNrICYmIHN0YWNrU2l6ZSA8IHZhbGlkYXRpb25Db21tYW5kLm1pbikgewogICAgICAgICAgICB3YXJuKCJOb3QgZW5vdWdoIHBhcmFtZXRlcnMgZm9yICIgKyB2YWxpZGF0aW9uQ29tbWFuZC5pZCArICI7IGFjdHVhbDogIiArIHN0YWNrU2l6ZSArICIsIGV4cGVjdGVkOiAiICsgdmFsaWRhdGlvbkNvbW1hbmQubWluKTsKICAgICAgICAgICAgaWYgKHN0YWNrU2l6ZSA9PT0gMCkgewogICAgICAgICAgICAgIGRhdGFbaiAtIDFdID0gMTQ7CiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoc3RhdGUuZmlyc3RTdGFja0NsZWFyaW5nICYmIHZhbGlkYXRpb25Db21tYW5kLnN0YWNrQ2xlYXJpbmcpIHsKICAgICAgICAgIHN0YXRlLmZpcnN0U3RhY2tDbGVhcmluZyA9IGZhbHNlOwogICAgICAgICAgc3RhY2tTaXplIC09IHZhbGlkYXRpb25Db21tYW5kLm1pbjsKICAgICAgICAgIGlmIChzdGFja1NpemUgPj0gMiAmJiB2YWxpZGF0aW9uQ29tbWFuZC5zdGVtKSB7CiAgICAgICAgICAgIHN0YWNrU2l6ZSAlPSAyOwogICAgICAgICAgfSBlbHNlIGlmIChzdGFja1NpemUgPiAxKSB7CiAgICAgICAgICAgIHdhcm4oIkZvdW5kIHRvbyBtYW55IHBhcmFtZXRlcnMgZm9yIHN0YWNrLWNsZWFyaW5nIGNvbW1hbmQiKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChzdGFja1NpemUgPiAwKSB7CiAgICAgICAgICAgIHN0YXRlLndpZHRoID0gc3RhY2tbc3RhY2tTaXplIC0gMV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmICgic3RhY2tEZWx0YSIgaW4gdmFsaWRhdGlvbkNvbW1hbmQpIHsKICAgICAgICAgIGlmICgic3RhY2tGbiIgaW4gdmFsaWRhdGlvbkNvbW1hbmQpIHsKICAgICAgICAgICAgdmFsaWRhdGlvbkNvbW1hbmQuc3RhY2tGbihzdGFjaywgc3RhY2tTaXplKTsKICAgICAgICAgIH0KICAgICAgICAgIHN0YWNrU2l6ZSArPSB2YWxpZGF0aW9uQ29tbWFuZC5zdGFja0RlbHRhOwogICAgICAgIH0gZWxzZSBpZiAodmFsaWRhdGlvbkNvbW1hbmQuc3RhY2tDbGVhcmluZykgewogICAgICAgICAgc3RhY2tTaXplID0gMDsKICAgICAgICB9IGVsc2UgaWYgKHZhbGlkYXRpb25Db21tYW5kLnJlc2V0U3RhY2spIHsKICAgICAgICAgIHN0YWNrU2l6ZSA9IDA7CiAgICAgICAgICBzdGF0ZS51bmRlZlN0YWNrID0gZmFsc2U7CiAgICAgICAgfSBlbHNlIGlmICh2YWxpZGF0aW9uQ29tbWFuZC51bmRlZlN0YWNrKSB7CiAgICAgICAgICBzdGFja1NpemUgPSAwOwogICAgICAgICAgc3RhdGUudW5kZWZTdGFjayA9IHRydWU7CiAgICAgICAgICBzdGF0ZS5maXJzdFN0YWNrQ2xlYXJpbmcgPSBmYWxzZTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIGlmIChsZW5ndGggPCBkYXRhLmxlbmd0aCkgewogICAgICBkYXRhLmZpbGwoMTQsIGxlbmd0aCk7CiAgICB9CiAgICBzdGF0ZS5zdGFja1NpemUgPSBzdGFja1NpemU7CiAgICByZXR1cm4gdHJ1ZTsKICB9CiAgcGFyc2VDaGFyU3RyaW5ncyh7CiAgICBjaGFyU3RyaW5ncywKICAgIGxvY2FsU3VickluZGV4LAogICAgZ2xvYmFsU3VickluZGV4LAogICAgZmRTZWxlY3QsCiAgICBmZEFycmF5LAogICAgcHJpdmF0ZURpY3QKICB9KSB7CiAgICBjb25zdCBzZWFjcyA9IFtdOwogICAgY29uc3Qgd2lkdGhzID0gW107CiAgICBjb25zdCBjb3VudCA9IGNoYXJTdHJpbmdzLmNvdW50OwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7CiAgICAgIGNvbnN0IGNoYXJzdHJpbmcgPSBjaGFyU3RyaW5ncy5nZXQoaSk7CiAgICAgIGNvbnN0IHN0YXRlID0gewogICAgICAgIGNhbGxEZXB0aDogMCwKICAgICAgICBzdGFja1NpemU6IDAsCiAgICAgICAgc3RhY2s6IFtdLAogICAgICAgIHVuZGVmU3RhY2s6IHRydWUsCiAgICAgICAgaGludHM6IDAsCiAgICAgICAgZmlyc3RTdGFja0NsZWFyaW5nOiB0cnVlLAogICAgICAgIHNlYWM6IG51bGwsCiAgICAgICAgd2lkdGg6IG51bGwsCiAgICAgICAgaGFzVlN0ZW1zOiBmYWxzZQogICAgICB9OwogICAgICBsZXQgdmFsaWQgPSB0cnVlOwogICAgICBsZXQgbG9jYWxTdWJyVG9Vc2UgPSBudWxsOwogICAgICBsZXQgcHJpdmF0ZURpY3RUb1VzZSA9IHByaXZhdGVEaWN0OwogICAgICBpZiAoZmRTZWxlY3QgJiYgZmRBcnJheS5sZW5ndGgpIHsKICAgICAgICBjb25zdCBmZEluZGV4ID0gZmRTZWxlY3QuZ2V0RkRJbmRleChpKTsKICAgICAgICBpZiAoZmRJbmRleCA9PT0gLTEpIHsKICAgICAgICAgIHdhcm4oIkdseXBoIGluZGV4IGlzIG5vdCBpbiBmZCBzZWxlY3QuIik7CiAgICAgICAgICB2YWxpZCA9IGZhbHNlOwogICAgICAgIH0KICAgICAgICBpZiAoZmRJbmRleCA+PSBmZEFycmF5Lmxlbmd0aCkgewogICAgICAgICAgd2FybigiSW52YWxpZCBmZCBpbmRleCBmb3IgZ2x5cGggaW5kZXguIik7CiAgICAgICAgICB2YWxpZCA9IGZhbHNlOwogICAgICAgIH0KICAgICAgICBpZiAodmFsaWQpIHsKICAgICAgICAgIHByaXZhdGVEaWN0VG9Vc2UgPSBmZEFycmF5W2ZkSW5kZXhdLnByaXZhdGVEaWN0OwogICAgICAgICAgbG9jYWxTdWJyVG9Vc2UgPSBwcml2YXRlRGljdFRvVXNlLnN1YnJzSW5kZXg7CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKGxvY2FsU3VickluZGV4KSB7CiAgICAgICAgbG9jYWxTdWJyVG9Vc2UgPSBsb2NhbFN1YnJJbmRleDsKICAgICAgfQogICAgICBpZiAodmFsaWQpIHsKICAgICAgICB2YWxpZCA9IHRoaXMucGFyc2VDaGFyU3RyaW5nKHN0YXRlLCBjaGFyc3RyaW5nLCBsb2NhbFN1YnJUb1VzZSwgZ2xvYmFsU3VickluZGV4KTsKICAgICAgfQogICAgICBpZiAoc3RhdGUud2lkdGggIT09IG51bGwpIHsKICAgICAgICBjb25zdCBub21pbmFsV2lkdGggPSBwcml2YXRlRGljdFRvVXNlLmdldEJ5TmFtZSgibm9taW5hbFdpZHRoWCIpOwogICAgICAgIHdpZHRoc1tpXSA9IG5vbWluYWxXaWR0aCArIHN0YXRlLndpZHRoOwogICAgICB9IGVsc2UgewogICAgICAgIGNvbnN0IGRlZmF1bHRXaWR0aCA9IHByaXZhdGVEaWN0VG9Vc2UuZ2V0QnlOYW1lKCJkZWZhdWx0V2lkdGhYIik7CiAgICAgICAgd2lkdGhzW2ldID0gZGVmYXVsdFdpZHRoOwogICAgICB9CiAgICAgIGlmIChzdGF0ZS5zZWFjICE9PSBudWxsKSB7CiAgICAgICAgc2VhY3NbaV0gPSBzdGF0ZS5zZWFjOwogICAgICB9CiAgICAgIGlmICghdmFsaWQpIHsKICAgICAgICBjaGFyU3RyaW5ncy5zZXQoaSwgbmV3IFVpbnQ4QXJyYXkoWzE0XSkpOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gewogICAgICBjaGFyU3RyaW5ncywKICAgICAgc2VhY3MsCiAgICAgIHdpZHRocwogICAgfTsKICB9CiAgZW1wdHlQcml2YXRlRGljdGlvbmFyeShwYXJlbnREaWN0KSB7CiAgICBjb25zdCBwcml2YXRlRGljdCA9IHRoaXMuY3JlYXRlRGljdChDRkZQcml2YXRlRGljdCwgW10sIHBhcmVudERpY3Quc3RyaW5ncyk7CiAgICBwYXJlbnREaWN0LnNldEJ5S2V5KDE4LCBbMCwgMF0pOwogICAgcGFyZW50RGljdC5wcml2YXRlRGljdCA9IHByaXZhdGVEaWN0OwogIH0KICBwYXJzZVByaXZhdGVEaWN0KHBhcmVudERpY3QpIHsKICAgIGlmICghcGFyZW50RGljdC5oYXNOYW1lKCJQcml2YXRlIikpIHsKICAgICAgdGhpcy5lbXB0eVByaXZhdGVEaWN0aW9uYXJ5KHBhcmVudERpY3QpOwogICAgICByZXR1cm47CiAgICB9CiAgICBjb25zdCBwcml2YXRlT2Zmc2V0ID0gcGFyZW50RGljdC5nZXRCeU5hbWUoIlByaXZhdGUiKTsKICAgIGlmICghQXJyYXkuaXNBcnJheShwcml2YXRlT2Zmc2V0KSB8fCBwcml2YXRlT2Zmc2V0Lmxlbmd0aCAhPT0gMikgewogICAgICBwYXJlbnREaWN0LnJlbW92ZUJ5TmFtZSgiUHJpdmF0ZSIpOwogICAgICByZXR1cm47CiAgICB9CiAgICBjb25zdCBzaXplID0gcHJpdmF0ZU9mZnNldFswXTsKICAgIGNvbnN0IG9mZnNldCA9IHByaXZhdGVPZmZzZXRbMV07CiAgICBpZiAoc2l6ZSA9PT0gMCB8fCBvZmZzZXQgPj0gdGhpcy5ieXRlcy5sZW5ndGgpIHsKICAgICAgdGhpcy5lbXB0eVByaXZhdGVEaWN0aW9uYXJ5KHBhcmVudERpY3QpOwogICAgICByZXR1cm47CiAgICB9CiAgICBjb25zdCBwcml2YXRlRGljdEVuZCA9IG9mZnNldCArIHNpemU7CiAgICBjb25zdCBkaWN0RGF0YSA9IHRoaXMuYnl0ZXMuc3ViYXJyYXkob2Zmc2V0LCBwcml2YXRlRGljdEVuZCk7CiAgICBjb25zdCBkaWN0ID0gdGhpcy5wYXJzZURpY3QoZGljdERhdGEpOwogICAgY29uc3QgcHJpdmF0ZURpY3QgPSB0aGlzLmNyZWF0ZURpY3QoQ0ZGUHJpdmF0ZURpY3QsIGRpY3QsIHBhcmVudERpY3Quc3RyaW5ncyk7CiAgICBwYXJlbnREaWN0LnByaXZhdGVEaWN0ID0gcHJpdmF0ZURpY3Q7CiAgICBpZiAocHJpdmF0ZURpY3QuZ2V0QnlOYW1lKCJFeHBhbnNpb25GYWN0b3IiKSA9PT0gMCkgewogICAgICBwcml2YXRlRGljdC5zZXRCeU5hbWUoIkV4cGFuc2lvbkZhY3RvciIsIDAuMDYpOwogICAgfQogICAgaWYgKCFwcml2YXRlRGljdC5nZXRCeU5hbWUoIlN1YnJzIikpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgY29uc3Qgc3VicnNPZmZzZXQgPSBwcml2YXRlRGljdC5nZXRCeU5hbWUoIlN1YnJzIik7CiAgICBjb25zdCByZWxhdGl2ZU9mZnNldCA9IG9mZnNldCArIHN1YnJzT2Zmc2V0OwogICAgaWYgKHN1YnJzT2Zmc2V0ID09PSAwIHx8IHJlbGF0aXZlT2Zmc2V0ID49IHRoaXMuYnl0ZXMubGVuZ3RoKSB7CiAgICAgIHRoaXMuZW1wdHlQcml2YXRlRGljdGlvbmFyeShwYXJlbnREaWN0KTsKICAgICAgcmV0dXJuOwogICAgfQogICAgY29uc3Qgc3VicnNJbmRleCA9IHRoaXMucGFyc2VJbmRleChyZWxhdGl2ZU9mZnNldCk7CiAgICBwcml2YXRlRGljdC5zdWJyc0luZGV4ID0gc3VicnNJbmRleC5vYmo7CiAgfQogIHBhcnNlQ2hhcnNldHMocG9zLCBsZW5ndGgsIHN0cmluZ3MsIGNpZCkgewogICAgaWYgKHBvcyA9PT0gMCkgewogICAgICByZXR1cm4gbmV3IENGRkNoYXJzZXQodHJ1ZSwgQ0ZGQ2hhcnNldFByZWRlZmluZWRUeXBlcy5JU09fQURPQkUsIElTT0Fkb2JlQ2hhcnNldCk7CiAgICB9IGVsc2UgaWYgKHBvcyA9PT0gMSkgewogICAgICByZXR1cm4gbmV3IENGRkNoYXJzZXQodHJ1ZSwgQ0ZGQ2hhcnNldFByZWRlZmluZWRUeXBlcy5FWFBFUlQsIEV4cGVydENoYXJzZXQpOwogICAgfSBlbHNlIGlmIChwb3MgPT09IDIpIHsKICAgICAgcmV0dXJuIG5ldyBDRkZDaGFyc2V0KHRydWUsIENGRkNoYXJzZXRQcmVkZWZpbmVkVHlwZXMuRVhQRVJUX1NVQlNFVCwgRXhwZXJ0U3Vic2V0Q2hhcnNldCk7CiAgICB9CiAgICBjb25zdCBieXRlcyA9IHRoaXMuYnl0ZXM7CiAgICBjb25zdCBzdGFydCA9IHBvczsKICAgIGNvbnN0IGZvcm1hdCA9IGJ5dGVzW3BvcysrXTsKICAgIGNvbnN0IGNoYXJzZXQgPSBbY2lkID8gMCA6ICIubm90ZGVmIl07CiAgICBsZXQgaWQsIGNvdW50LCBpOwogICAgbGVuZ3RoIC09IDE7CiAgICBzd2l0Y2ggKGZvcm1hdCkgewogICAgICBjYXNlIDA6CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgICBpZCA9IGJ5dGVzW3BvcysrXSA8PCA4IHwgYnl0ZXNbcG9zKytdOwogICAgICAgICAgY2hhcnNldC5wdXNoKGNpZCA/IGlkIDogc3RyaW5ncy5nZXQoaWQpKTsKICAgICAgICB9CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgMToKICAgICAgICB3aGlsZSAoY2hhcnNldC5sZW5ndGggPD0gbGVuZ3RoKSB7CiAgICAgICAgICBpZCA9IGJ5dGVzW3BvcysrXSA8PCA4IHwgYnl0ZXNbcG9zKytdOwogICAgICAgICAgY291bnQgPSBieXRlc1twb3MrK107CiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDw9IGNvdW50OyBpKyspIHsKICAgICAgICAgICAgY2hhcnNldC5wdXNoKGNpZCA/IGlkKysgOiBzdHJpbmdzLmdldChpZCsrKSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGJyZWFrOwogICAgICBjYXNlIDI6CiAgICAgICAgd2hpbGUgKGNoYXJzZXQubGVuZ3RoIDw9IGxlbmd0aCkgewogICAgICAgICAgaWQgPSBieXRlc1twb3MrK10gPDwgOCB8IGJ5dGVzW3BvcysrXTsKICAgICAgICAgIGNvdW50ID0gYnl0ZXNbcG9zKytdIDw8IDggfCBieXRlc1twb3MrK107CiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDw9IGNvdW50OyBpKyspIHsKICAgICAgICAgICAgY2hhcnNldC5wdXNoKGNpZCA/IGlkKysgOiBzdHJpbmdzLmdldChpZCsrKSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGJyZWFrOwogICAgICBkZWZhdWx0OgogICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigiVW5rbm93biBjaGFyc2V0IGZvcm1hdCIpOwogICAgfQogICAgY29uc3QgZW5kID0gcG9zOwogICAgY29uc3QgcmF3ID0gYnl0ZXMuc3ViYXJyYXkoc3RhcnQsIGVuZCk7CiAgICByZXR1cm4gbmV3IENGRkNoYXJzZXQoZmFsc2UsIGZvcm1hdCwgY2hhcnNldCwgcmF3KTsKICB9CiAgcGFyc2VFbmNvZGluZyhwb3MsIHByb3BlcnRpZXMsIHN0cmluZ3MsIGNoYXJzZXQpIHsKICAgIGNvbnN0IGVuY29kaW5nID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgIGNvbnN0IGJ5dGVzID0gdGhpcy5ieXRlczsKICAgIGxldCBwcmVkZWZpbmVkID0gZmFsc2U7CiAgICBsZXQgZm9ybWF0LCBpLCBpaTsKICAgIGxldCByYXcgPSBudWxsOwogICAgZnVuY3Rpb24gcmVhZFN1cHBsZW1lbnQoKSB7CiAgICAgIGNvbnN0IHN1cHBsZW1lbnRzQ291bnQgPSBieXRlc1twb3MrK107CiAgICAgIGZvciAoaSA9IDA7IGkgPCBzdXBwbGVtZW50c0NvdW50OyBpKyspIHsKICAgICAgICBjb25zdCBjb2RlID0gYnl0ZXNbcG9zKytdOwogICAgICAgIGNvbnN0IHNpZCA9IChieXRlc1twb3MrK10gPDwgOCkgKyAoYnl0ZXNbcG9zKytdICYgMHhmZik7CiAgICAgICAgZW5jb2RpbmdbY29kZV0gPSBjaGFyc2V0LmluZGV4T2Yoc3RyaW5ncy5nZXQoc2lkKSk7CiAgICAgIH0KICAgIH0KICAgIGlmIChwb3MgPT09IDAgfHwgcG9zID09PSAxKSB7CiAgICAgIHByZWRlZmluZWQgPSB0cnVlOwogICAgICBmb3JtYXQgPSBwb3M7CiAgICAgIGNvbnN0IGJhc2VFbmNvZGluZyA9IHBvcyA/IEV4cGVydEVuY29kaW5nIDogU3RhbmRhcmRFbmNvZGluZzsKICAgICAgZm9yIChpID0gMCwgaWkgPSBjaGFyc2V0Lmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgICBjb25zdCBpbmRleCA9IGJhc2VFbmNvZGluZy5pbmRleE9mKGNoYXJzZXRbaV0pOwogICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHsKICAgICAgICAgIGVuY29kaW5nW2luZGV4XSA9IGk7CiAgICAgICAgfQogICAgICB9CiAgICB9IGVsc2UgewogICAgICBjb25zdCBkYXRhU3RhcnQgPSBwb3M7CiAgICAgIGZvcm1hdCA9IGJ5dGVzW3BvcysrXTsKICAgICAgc3dpdGNoIChmb3JtYXQgJiAweDdmKSB7CiAgICAgICAgY2FzZSAwOgogICAgICAgICAgY29uc3QgZ2x5cGhzQ291bnQgPSBieXRlc1twb3MrK107CiAgICAgICAgICBmb3IgKGkgPSAxOyBpIDw9IGdseXBoc0NvdW50OyBpKyspIHsKICAgICAgICAgICAgZW5jb2RpbmdbYnl0ZXNbcG9zKytdXSA9IGk7CiAgICAgICAgICB9CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIDE6CiAgICAgICAgICBjb25zdCByYW5nZXNDb3VudCA9IGJ5dGVzW3BvcysrXTsKICAgICAgICAgIGxldCBnaWQgPSAxOwogICAgICAgICAgZm9yIChpID0gMDsgaSA8IHJhbmdlc0NvdW50OyBpKyspIHsKICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBieXRlc1twb3MrK107CiAgICAgICAgICAgIGNvbnN0IGxlZnQgPSBieXRlc1twb3MrK107CiAgICAgICAgICAgIGZvciAobGV0IGogPSBzdGFydDsgaiA8PSBzdGFydCArIGxlZnQ7IGorKykgewogICAgICAgICAgICAgIGVuY29kaW5nW2pdID0gZ2lkKys7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGJyZWFrOwogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoYFVua25vd24gZW5jb2RpbmcgZm9ybWF0OiAke2Zvcm1hdH0gaW4gQ0ZGYCk7CiAgICAgIH0KICAgICAgY29uc3QgZGF0YUVuZCA9IHBvczsKICAgICAgaWYgKGZvcm1hdCAmIDB4ODApIHsKICAgICAgICBieXRlc1tkYXRhU3RhcnRdICY9IDB4N2Y7CiAgICAgICAgcmVhZFN1cHBsZW1lbnQoKTsKICAgICAgfQogICAgICByYXcgPSBieXRlcy5zdWJhcnJheShkYXRhU3RhcnQsIGRhdGFFbmQpOwogICAgfQogICAgZm9ybWF0ICY9IDB4N2Y7CiAgICByZXR1cm4gbmV3IENGRkVuY29kaW5nKHByZWRlZmluZWQsIGZvcm1hdCwgZW5jb2RpbmcsIHJhdyk7CiAgfQogIHBhcnNlRkRTZWxlY3QocG9zLCBsZW5ndGgpIHsKICAgIGNvbnN0IGJ5dGVzID0gdGhpcy5ieXRlczsKICAgIGNvbnN0IGZvcm1hdCA9IGJ5dGVzW3BvcysrXTsKICAgIGNvbnN0IGZkU2VsZWN0ID0gW107CiAgICBsZXQgaTsKICAgIHN3aXRjaCAoZm9ybWF0KSB7CiAgICAgIGNhc2UgMDoKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgICAgIGNvbnN0IGlkID0gYnl0ZXNbcG9zKytdOwogICAgICAgICAgZmRTZWxlY3QucHVzaChpZCk7CiAgICAgICAgfQogICAgICAgIGJyZWFrOwogICAgICBjYXNlIDM6CiAgICAgICAgY29uc3QgcmFuZ2VzQ291bnQgPSBieXRlc1twb3MrK10gPDwgOCB8IGJ5dGVzW3BvcysrXTsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcmFuZ2VzQ291bnQ7ICsraSkgewogICAgICAgICAgbGV0IGZpcnN0ID0gYnl0ZXNbcG9zKytdIDw8IDggfCBieXRlc1twb3MrK107CiAgICAgICAgICBpZiAoaSA9PT0gMCAmJiBmaXJzdCAhPT0gMCkgewogICAgICAgICAgICB3YXJuKCJwYXJzZUZEU2VsZWN0OiBUaGUgZmlyc3QgcmFuZ2UgbXVzdCBoYXZlIGEgZmlyc3QgR0lEIG9mIDAiICsgIiAtLSB0cnlpbmcgdG8gcmVjb3Zlci4iKTsKICAgICAgICAgICAgZmlyc3QgPSAwOwogICAgICAgICAgfQogICAgICAgICAgY29uc3QgZmRJbmRleCA9IGJ5dGVzW3BvcysrXTsKICAgICAgICAgIGNvbnN0IG5leHQgPSBieXRlc1twb3NdIDw8IDggfCBieXRlc1twb3MgKyAxXTsKICAgICAgICAgIGZvciAobGV0IGogPSBmaXJzdDsgaiA8IG5leHQ7ICsraikgewogICAgICAgICAgICBmZFNlbGVjdC5wdXNoKGZkSW5kZXgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBwb3MgKz0gMjsKICAgICAgICBicmVhazsKICAgICAgZGVmYXVsdDoKICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoYHBhcnNlRkRTZWxlY3Q6IFVua25vd24gZm9ybWF0ICIke2Zvcm1hdH0iLmApOwogICAgfQogICAgaWYgKGZkU2VsZWN0Lmxlbmd0aCAhPT0gbGVuZ3RoKSB7CiAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigicGFyc2VGRFNlbGVjdDogSW52YWxpZCBmb250IGRhdGEuIik7CiAgICB9CiAgICByZXR1cm4gbmV3IENGRkZEU2VsZWN0KGZvcm1hdCwgZmRTZWxlY3QpOwogIH0KfQpjbGFzcyBDRkYgewogIGNvbnN0cnVjdG9yKCkgewogICAgdGhpcy5oZWFkZXIgPSBudWxsOwogICAgdGhpcy5uYW1lcyA9IFtdOwogICAgdGhpcy50b3BEaWN0ID0gbnVsbDsKICAgIHRoaXMuc3RyaW5ncyA9IG5ldyBDRkZTdHJpbmdzKCk7CiAgICB0aGlzLmdsb2JhbFN1YnJJbmRleCA9IG51bGw7CiAgICB0aGlzLmVuY29kaW5nID0gbnVsbDsKICAgIHRoaXMuY2hhcnNldCA9IG51bGw7CiAgICB0aGlzLmNoYXJTdHJpbmdzID0gbnVsbDsKICAgIHRoaXMuZmRBcnJheSA9IFtdOwogICAgdGhpcy5mZFNlbGVjdCA9IG51bGw7CiAgICB0aGlzLmlzQ0lERm9udCA9IGZhbHNlOwogIH0KICBkdXBsaWNhdGVGaXJzdEdseXBoKCkgewogICAgaWYgKHRoaXMuY2hhclN0cmluZ3MuY291bnQgPj0gNjU1MzUpIHsKICAgICAgd2FybigiTm90IGVub3VnaCBzcGFjZSBpbiBjaGFyc3RyaW5ncyB0byBkdXBsaWNhdGUgZmlyc3QgZ2x5cGguIik7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGNvbnN0IGdseXBoWmVybyA9IHRoaXMuY2hhclN0cmluZ3MuZ2V0KDApOwogICAgdGhpcy5jaGFyU3RyaW5ncy5hZGQoZ2x5cGhaZXJvKTsKICAgIGlmICh0aGlzLmlzQ0lERm9udCkgewogICAgICB0aGlzLmZkU2VsZWN0LmZkU2VsZWN0LnB1c2godGhpcy5mZFNlbGVjdC5mZFNlbGVjdFswXSk7CiAgICB9CiAgfQogIGhhc0dseXBoSWQoaWQpIHsKICAgIGlmIChpZCA8IDAgfHwgaWQgPj0gdGhpcy5jaGFyU3RyaW5ncy5jb3VudCkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgICBjb25zdCBnbHlwaCA9IHRoaXMuY2hhclN0cmluZ3MuZ2V0KGlkKTsKICAgIHJldHVybiBnbHlwaC5sZW5ndGggPiAwOwogIH0KfQpjbGFzcyBDRkZIZWFkZXIgewogIGNvbnN0cnVjdG9yKG1ham9yLCBtaW5vciwgaGRyU2l6ZSwgb2ZmU2l6ZSkgewogICAgdGhpcy5tYWpvciA9IG1ham9yOwogICAgdGhpcy5taW5vciA9IG1pbm9yOwogICAgdGhpcy5oZHJTaXplID0gaGRyU2l6ZTsKICAgIHRoaXMub2ZmU2l6ZSA9IG9mZlNpemU7CiAgfQp9CmNsYXNzIENGRlN0cmluZ3MgewogIGNvbnN0cnVjdG9yKCkgewogICAgdGhpcy5zdHJpbmdzID0gW107CiAgfQogIGdldChpbmRleCkgewogICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPD0gTlVNX1NUQU5EQVJEX0NGRl9TVFJJTkdTIC0gMSkgewogICAgICByZXR1cm4gQ0ZGU3RhbmRhcmRTdHJpbmdzW2luZGV4XTsKICAgIH0KICAgIGlmIChpbmRleCAtIE5VTV9TVEFOREFSRF9DRkZfU1RSSU5HUyA8PSB0aGlzLnN0cmluZ3MubGVuZ3RoKSB7CiAgICAgIHJldHVybiB0aGlzLnN0cmluZ3NbaW5kZXggLSBOVU1fU1RBTkRBUkRfQ0ZGX1NUUklOR1NdOwogICAgfQogICAgcmV0dXJuIENGRlN0YW5kYXJkU3RyaW5nc1swXTsKICB9CiAgZ2V0U0lEKHN0cikgewogICAgbGV0IGluZGV4ID0gQ0ZGU3RhbmRhcmRTdHJpbmdzLmluZGV4T2Yoc3RyKTsKICAgIGlmIChpbmRleCAhPT0gLTEpIHsKICAgICAgcmV0dXJuIGluZGV4OwogICAgfQogICAgaW5kZXggPSB0aGlzLnN0cmluZ3MuaW5kZXhPZihzdHIpOwogICAgaWYgKGluZGV4ICE9PSAtMSkgewogICAgICByZXR1cm4gaW5kZXggKyBOVU1fU1RBTkRBUkRfQ0ZGX1NUUklOR1M7CiAgICB9CiAgICByZXR1cm4gLTE7CiAgfQogIGFkZCh2YWx1ZSkgewogICAgdGhpcy5zdHJpbmdzLnB1c2godmFsdWUpOwogIH0KICBnZXQgY291bnQoKSB7CiAgICByZXR1cm4gdGhpcy5zdHJpbmdzLmxlbmd0aDsKICB9Cn0KY2xhc3MgQ0ZGSW5kZXggewogIGNvbnN0cnVjdG9yKCkgewogICAgdGhpcy5vYmplY3RzID0gW107CiAgICB0aGlzLmxlbmd0aCA9IDA7CiAgfQogIGFkZChkYXRhKSB7CiAgICB0aGlzLmxlbmd0aCArPSBkYXRhLmxlbmd0aDsKICAgIHRoaXMub2JqZWN0cy5wdXNoKGRhdGEpOwogIH0KICBzZXQoaW5kZXgsIGRhdGEpIHsKICAgIHRoaXMubGVuZ3RoICs9IGRhdGEubGVuZ3RoIC0gdGhpcy5vYmplY3RzW2luZGV4XS5sZW5ndGg7CiAgICB0aGlzLm9iamVjdHNbaW5kZXhdID0gZGF0YTsKICB9CiAgZ2V0KGluZGV4KSB7CiAgICByZXR1cm4gdGhpcy5vYmplY3RzW2luZGV4XTsKICB9CiAgZ2V0IGNvdW50KCkgewogICAgcmV0dXJuIHRoaXMub2JqZWN0cy5sZW5ndGg7CiAgfQp9CmNsYXNzIENGRkRpY3QgewogIGNvbnN0cnVjdG9yKHRhYmxlcywgc3RyaW5ncykgewogICAgdGhpcy5rZXlUb05hbWVNYXAgPSB0YWJsZXMua2V5VG9OYW1lTWFwOwogICAgdGhpcy5uYW1lVG9LZXlNYXAgPSB0YWJsZXMubmFtZVRvS2V5TWFwOwogICAgdGhpcy5kZWZhdWx0cyA9IHRhYmxlcy5kZWZhdWx0czsKICAgIHRoaXMudHlwZXMgPSB0YWJsZXMudHlwZXM7CiAgICB0aGlzLm9wY29kZXMgPSB0YWJsZXMub3Bjb2RlczsKICAgIHRoaXMub3JkZXIgPSB0YWJsZXMub3JkZXI7CiAgICB0aGlzLnN0cmluZ3MgPSBzdHJpbmdzOwogICAgdGhpcy52YWx1ZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogIH0KICBzZXRCeUtleShrZXksIHZhbHVlKSB7CiAgICBpZiAoIShrZXkgaW4gdGhpcy5rZXlUb05hbWVNYXApKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICBmb3IgKGNvbnN0IHZhbCBvZiB2YWx1ZSkgewogICAgICBpZiAoaXNOYU4odmFsKSkgewogICAgICAgIHdhcm4oYEludmFsaWQgQ0ZGRGljdCB2YWx1ZTogIiR7dmFsdWV9IiBmb3Iga2V5ICIke2tleX0iLmApOwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICB9CiAgICBjb25zdCB0eXBlID0gdGhpcy50eXBlc1trZXldOwogICAgaWYgKHR5cGUgPT09ICJudW0iIHx8IHR5cGUgPT09ICJzaWQiIHx8IHR5cGUgPT09ICJvZmZzZXQiKSB7CiAgICAgIHZhbHVlID0gdmFsdWVbMF07CiAgICB9CiAgICB0aGlzLnZhbHVlc1trZXldID0gdmFsdWU7CiAgICByZXR1cm4gdHJ1ZTsKICB9CiAgc2V0QnlOYW1lKG5hbWUsIHZhbHVlKSB7CiAgICBpZiAoIShuYW1lIGluIHRoaXMubmFtZVRvS2V5TWFwKSkgewogICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoYEludmFsaWQgZGljdGlvbmFyeSBuYW1lICIke25hbWV9ImApOwogICAgfQogICAgdGhpcy52YWx1ZXNbdGhpcy5uYW1lVG9LZXlNYXBbbmFtZV1dID0gdmFsdWU7CiAgfQogIGhhc05hbWUobmFtZSkgewogICAgcmV0dXJuIHRoaXMubmFtZVRvS2V5TWFwW25hbWVdIGluIHRoaXMudmFsdWVzOwogIH0KICBnZXRCeU5hbWUobmFtZSkgewogICAgaWYgKCEobmFtZSBpbiB0aGlzLm5hbWVUb0tleU1hcCkpIHsKICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKGBJbnZhbGlkIGRpY3Rpb25hcnkgbmFtZSAke25hbWV9ImApOwogICAgfQogICAgY29uc3Qga2V5ID0gdGhpcy5uYW1lVG9LZXlNYXBbbmFtZV07CiAgICBpZiAoIShrZXkgaW4gdGhpcy52YWx1ZXMpKSB7CiAgICAgIHJldHVybiB0aGlzLmRlZmF1bHRzW2tleV07CiAgICB9CiAgICByZXR1cm4gdGhpcy52YWx1ZXNba2V5XTsKICB9CiAgcmVtb3ZlQnlOYW1lKG5hbWUpIHsKICAgIGRlbGV0ZSB0aGlzLnZhbHVlc1t0aGlzLm5hbWVUb0tleU1hcFtuYW1lXV07CiAgfQogIHN0YXRpYyBjcmVhdGVUYWJsZXMobGF5b3V0KSB7CiAgICBjb25zdCB0YWJsZXMgPSB7CiAgICAgIGtleVRvTmFtZU1hcDoge30sCiAgICAgIG5hbWVUb0tleU1hcDoge30sCiAgICAgIGRlZmF1bHRzOiB7fSwKICAgICAgdHlwZXM6IHt9LAogICAgICBvcGNvZGVzOiB7fSwKICAgICAgb3JkZXI6IFtdCiAgICB9OwogICAgZm9yIChjb25zdCBlbnRyeSBvZiBsYXlvdXQpIHsKICAgICAgY29uc3Qga2V5ID0gQXJyYXkuaXNBcnJheShlbnRyeVswXSkgPyAoZW50cnlbMF1bMF0gPDwgOCkgKyBlbnRyeVswXVsxXSA6IGVudHJ5WzBdOwogICAgICB0YWJsZXMua2V5VG9OYW1lTWFwW2tleV0gPSBlbnRyeVsxXTsKICAgICAgdGFibGVzLm5hbWVUb0tleU1hcFtlbnRyeVsxXV0gPSBrZXk7CiAgICAgIHRhYmxlcy50eXBlc1trZXldID0gZW50cnlbMl07CiAgICAgIHRhYmxlcy5kZWZhdWx0c1trZXldID0gZW50cnlbM107CiAgICAgIHRhYmxlcy5vcGNvZGVzW2tleV0gPSBBcnJheS5pc0FycmF5KGVudHJ5WzBdKSA/IGVudHJ5WzBdIDogW2VudHJ5WzBdXTsKICAgICAgdGFibGVzLm9yZGVyLnB1c2goa2V5KTsKICAgIH0KICAgIHJldHVybiB0YWJsZXM7CiAgfQp9CmNvbnN0IENGRlRvcERpY3RMYXlvdXQgPSBbW1sxMiwgMzBdLCAiUk9TIiwgWyJzaWQiLCAic2lkIiwgIm51bSJdLCBudWxsXSwgW1sxMiwgMjBdLCAiU3ludGhldGljQmFzZSIsICJudW0iLCBudWxsXSwgWzAsICJ2ZXJzaW9uIiwgInNpZCIsIG51bGxdLCBbMSwgIk5vdGljZSIsICJzaWQiLCBudWxsXSwgW1sxMiwgMF0sICJDb3B5cmlnaHQiLCAic2lkIiwgbnVsbF0sIFsyLCAiRnVsbE5hbWUiLCAic2lkIiwgbnVsbF0sIFszLCAiRmFtaWx5TmFtZSIsICJzaWQiLCBudWxsXSwgWzQsICJXZWlnaHQiLCAic2lkIiwgbnVsbF0sIFtbMTIsIDFdLCAiaXNGaXhlZFBpdGNoIiwgIm51bSIsIDBdLCBbWzEyLCAyXSwgIkl0YWxpY0FuZ2xlIiwgIm51bSIsIDBdLCBbWzEyLCAzXSwgIlVuZGVybGluZVBvc2l0aW9uIiwgIm51bSIsIC0xMDBdLCBbWzEyLCA0XSwgIlVuZGVybGluZVRoaWNrbmVzcyIsICJudW0iLCA1MF0sIFtbMTIsIDVdLCAiUGFpbnRUeXBlIiwgIm51bSIsIDBdLCBbWzEyLCA2XSwgIkNoYXJzdHJpbmdUeXBlIiwgIm51bSIsIDJdLCBbWzEyLCA3XSwgIkZvbnRNYXRyaXgiLCBbIm51bSIsICJudW0iLCAibnVtIiwgIm51bSIsICJudW0iLCAibnVtIl0sIFswLjAwMSwgMCwgMCwgMC4wMDEsIDAsIDBdXSwgWzEzLCAiVW5pcXVlSUQiLCAibnVtIiwgbnVsbF0sIFs1LCAiRm9udEJCb3giLCBbIm51bSIsICJudW0iLCAibnVtIiwgIm51bSJdLCBbMCwgMCwgMCwgMF1dLCBbWzEyLCA4XSwgIlN0cm9rZVdpZHRoIiwgIm51bSIsIDBdLCBbMTQsICJYVUlEIiwgImFycmF5IiwgbnVsbF0sIFsxNSwgImNoYXJzZXQiLCAib2Zmc2V0IiwgMF0sIFsxNiwgIkVuY29kaW5nIiwgIm9mZnNldCIsIDBdLCBbMTcsICJDaGFyU3RyaW5ncyIsICJvZmZzZXQiLCAwXSwgWzE4LCAiUHJpdmF0ZSIsIFsib2Zmc2V0IiwgIm9mZnNldCJdLCBudWxsXSwgW1sxMiwgMjFdLCAiUG9zdFNjcmlwdCIsICJzaWQiLCBudWxsXSwgW1sxMiwgMjJdLCAiQmFzZUZvbnROYW1lIiwgInNpZCIsIG51bGxdLCBbWzEyLCAyM10sICJCYXNlRm9udEJsZW5kIiwgImRlbHRhIiwgbnVsbF0sIFtbMTIsIDMxXSwgIkNJREZvbnRWZXJzaW9uIiwgIm51bSIsIDBdLCBbWzEyLCAzMl0sICJDSURGb250UmV2aXNpb24iLCAibnVtIiwgMF0sIFtbMTIsIDMzXSwgIkNJREZvbnRUeXBlIiwgIm51bSIsIDBdLCBbWzEyLCAzNF0sICJDSURDb3VudCIsICJudW0iLCA4NzIwXSwgW1sxMiwgMzVdLCAiVUlEQmFzZSIsICJudW0iLCBudWxsXSwgW1sxMiwgMzddLCAiRkRTZWxlY3QiLCAib2Zmc2V0IiwgbnVsbF0sIFtbMTIsIDM2XSwgIkZEQXJyYXkiLCAib2Zmc2V0IiwgbnVsbF0sIFtbMTIsIDM4XSwgIkZvbnROYW1lIiwgInNpZCIsIG51bGxdXTsKY2xhc3MgQ0ZGVG9wRGljdCBleHRlbmRzIENGRkRpY3QgewogIHN0YXRpYyBnZXQgdGFibGVzKCkgewogICAgcmV0dXJuIHNoYWRvdyh0aGlzLCAidGFibGVzIiwgdGhpcy5jcmVhdGVUYWJsZXMoQ0ZGVG9wRGljdExheW91dCkpOwogIH0KICBjb25zdHJ1Y3RvcihzdHJpbmdzKSB7CiAgICBzdXBlcihDRkZUb3BEaWN0LnRhYmxlcywgc3RyaW5ncyk7CiAgICB0aGlzLnByaXZhdGVEaWN0ID0gbnVsbDsKICB9Cn0KY29uc3QgQ0ZGUHJpdmF0ZURpY3RMYXlvdXQgPSBbWzYsICJCbHVlVmFsdWVzIiwgImRlbHRhIiwgbnVsbF0sIFs3LCAiT3RoZXJCbHVlcyIsICJkZWx0YSIsIG51bGxdLCBbOCwgIkZhbWlseUJsdWVzIiwgImRlbHRhIiwgbnVsbF0sIFs5LCAiRmFtaWx5T3RoZXJCbHVlcyIsICJkZWx0YSIsIG51bGxdLCBbWzEyLCA5XSwgIkJsdWVTY2FsZSIsICJudW0iLCAwLjAzOTYyNV0sIFtbMTIsIDEwXSwgIkJsdWVTaGlmdCIsICJudW0iLCA3XSwgW1sxMiwgMTFdLCAiQmx1ZUZ1enoiLCAibnVtIiwgMV0sIFsxMCwgIlN0ZEhXIiwgIm51bSIsIG51bGxdLCBbMTEsICJTdGRWVyIsICJudW0iLCBudWxsXSwgW1sxMiwgMTJdLCAiU3RlbVNuYXBIIiwgImRlbHRhIiwgbnVsbF0sIFtbMTIsIDEzXSwgIlN0ZW1TbmFwViIsICJkZWx0YSIsIG51bGxdLCBbWzEyLCAxNF0sICJGb3JjZUJvbGQiLCAibnVtIiwgMF0sIFtbMTIsIDE3XSwgIkxhbmd1YWdlR3JvdXAiLCAibnVtIiwgMF0sIFtbMTIsIDE4XSwgIkV4cGFuc2lvbkZhY3RvciIsICJudW0iLCAwLjA2XSwgW1sxMiwgMTldLCAiaW5pdGlhbFJhbmRvbVNlZWQiLCAibnVtIiwgMF0sIFsyMCwgImRlZmF1bHRXaWR0aFgiLCAibnVtIiwgMF0sIFsyMSwgIm5vbWluYWxXaWR0aFgiLCAibnVtIiwgMF0sIFsxOSwgIlN1YnJzIiwgIm9mZnNldCIsIG51bGxdXTsKY2xhc3MgQ0ZGUHJpdmF0ZURpY3QgZXh0ZW5kcyBDRkZEaWN0IHsKICBzdGF0aWMgZ2V0IHRhYmxlcygpIHsKICAgIHJldHVybiBzaGFkb3codGhpcywgInRhYmxlcyIsIHRoaXMuY3JlYXRlVGFibGVzKENGRlByaXZhdGVEaWN0TGF5b3V0KSk7CiAgfQogIGNvbnN0cnVjdG9yKHN0cmluZ3MpIHsKICAgIHN1cGVyKENGRlByaXZhdGVEaWN0LnRhYmxlcywgc3RyaW5ncyk7CiAgICB0aGlzLnN1YnJzSW5kZXggPSBudWxsOwogIH0KfQpjb25zdCBDRkZDaGFyc2V0UHJlZGVmaW5lZFR5cGVzID0gewogIElTT19BRE9CRTogMCwKICBFWFBFUlQ6IDEsCiAgRVhQRVJUX1NVQlNFVDogMgp9OwpjbGFzcyBDRkZDaGFyc2V0IHsKICBjb25zdHJ1Y3RvcihwcmVkZWZpbmVkLCBmb3JtYXQsIGNoYXJzZXQsIHJhdykgewogICAgdGhpcy5wcmVkZWZpbmVkID0gcHJlZGVmaW5lZDsKICAgIHRoaXMuZm9ybWF0ID0gZm9ybWF0OwogICAgdGhpcy5jaGFyc2V0ID0gY2hhcnNldDsKICAgIHRoaXMucmF3ID0gcmF3OwogIH0KfQpjbGFzcyBDRkZFbmNvZGluZyB7CiAgY29uc3RydWN0b3IocHJlZGVmaW5lZCwgZm9ybWF0LCBlbmNvZGluZywgcmF3KSB7CiAgICB0aGlzLnByZWRlZmluZWQgPSBwcmVkZWZpbmVkOwogICAgdGhpcy5mb3JtYXQgPSBmb3JtYXQ7CiAgICB0aGlzLmVuY29kaW5nID0gZW5jb2Rpbmc7CiAgICB0aGlzLnJhdyA9IHJhdzsKICB9Cn0KY2xhc3MgQ0ZGRkRTZWxlY3QgewogIGNvbnN0cnVjdG9yKGZvcm1hdCwgZmRTZWxlY3QpIHsKICAgIHRoaXMuZm9ybWF0ID0gZm9ybWF0OwogICAgdGhpcy5mZFNlbGVjdCA9IGZkU2VsZWN0OwogIH0KICBnZXRGREluZGV4KGdseXBoSW5kZXgpIHsKICAgIGlmIChnbHlwaEluZGV4IDwgMCB8fCBnbHlwaEluZGV4ID49IHRoaXMuZmRTZWxlY3QubGVuZ3RoKSB7CiAgICAgIHJldHVybiAtMTsKICAgIH0KICAgIHJldHVybiB0aGlzLmZkU2VsZWN0W2dseXBoSW5kZXhdOwogIH0KfQpjbGFzcyBDRkZPZmZzZXRUcmFja2VyIHsKICBjb25zdHJ1Y3RvcigpIHsKICAgIHRoaXMub2Zmc2V0cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgfQogIGlzVHJhY2tpbmcoa2V5KSB7CiAgICByZXR1cm4ga2V5IGluIHRoaXMub2Zmc2V0czsKICB9CiAgdHJhY2soa2V5LCBsb2NhdGlvbikgewogICAgaWYgKGtleSBpbiB0aGlzLm9mZnNldHMpIHsKICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKGBBbHJlYWR5IHRyYWNraW5nIGxvY2F0aW9uIG9mICR7a2V5fWApOwogICAgfQogICAgdGhpcy5vZmZzZXRzW2tleV0gPSBsb2NhdGlvbjsKICB9CiAgb2Zmc2V0KHZhbHVlKSB7CiAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLm9mZnNldHMpIHsKICAgICAgdGhpcy5vZmZzZXRzW2tleV0gKz0gdmFsdWU7CiAgICB9CiAgfQogIHNldEVudHJ5TG9jYXRpb24oa2V5LCB2YWx1ZXMsIG91dHB1dCkgewogICAgaWYgKCEoa2V5IGluIHRoaXMub2Zmc2V0cykpIHsKICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKGBOb3QgdHJhY2tpbmcgbG9jYXRpb24gb2YgJHtrZXl9YCk7CiAgICB9CiAgICBjb25zdCBkYXRhID0gb3V0cHV0LmRhdGE7CiAgICBjb25zdCBkYXRhT2Zmc2V0ID0gdGhpcy5vZmZzZXRzW2tleV07CiAgICBjb25zdCBzaXplID0gNTsKICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IHZhbHVlcy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7CiAgICAgIGNvbnN0IG9mZnNldDAgPSBpICogc2l6ZSArIGRhdGFPZmZzZXQ7CiAgICAgIGNvbnN0IG9mZnNldDEgPSBvZmZzZXQwICsgMTsKICAgICAgY29uc3Qgb2Zmc2V0MiA9IG9mZnNldDAgKyAyOwogICAgICBjb25zdCBvZmZzZXQzID0gb2Zmc2V0MCArIDM7CiAgICAgIGNvbnN0IG9mZnNldDQgPSBvZmZzZXQwICsgNDsKICAgICAgaWYgKGRhdGFbb2Zmc2V0MF0gIT09IDB4MWQgfHwgZGF0YVtvZmZzZXQxXSAhPT0gMCB8fCBkYXRhW29mZnNldDJdICE9PSAwIHx8IGRhdGFbb2Zmc2V0M10gIT09IDAgfHwgZGF0YVtvZmZzZXQ0XSAhPT0gMCkgewogICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigid3JpdGluZyB0byBhbiBvZmZzZXQgdGhhdCBpcyBub3QgZW1wdHkiKTsKICAgICAgfQogICAgICBjb25zdCB2YWx1ZSA9IHZhbHVlc1tpXTsKICAgICAgZGF0YVtvZmZzZXQwXSA9IDB4MWQ7CiAgICAgIGRhdGFbb2Zmc2V0MV0gPSB2YWx1ZSA+PiAyNCAmIDB4ZmY7CiAgICAgIGRhdGFbb2Zmc2V0Ml0gPSB2YWx1ZSA+PiAxNiAmIDB4ZmY7CiAgICAgIGRhdGFbb2Zmc2V0M10gPSB2YWx1ZSA+PiA4ICYgMHhmZjsKICAgICAgZGF0YVtvZmZzZXQ0XSA9IHZhbHVlICYgMHhmZjsKICAgIH0KICB9Cn0KY2xhc3MgQ0ZGQ29tcGlsZXIgewogIGNvbnN0cnVjdG9yKGNmZikgewogICAgdGhpcy5jZmYgPSBjZmY7CiAgfQogIGNvbXBpbGUoKSB7CiAgICBjb25zdCBjZmYgPSB0aGlzLmNmZjsKICAgIGNvbnN0IG91dHB1dCA9IHsKICAgICAgZGF0YTogW10sCiAgICAgIGxlbmd0aDogMCwKICAgICAgYWRkKGRhdGEpIHsKICAgICAgICB0cnkgewogICAgICAgICAgdGhpcy5kYXRhLnB1c2goLi4uZGF0YSk7CiAgICAgICAgfSBjYXRjaCB7CiAgICAgICAgICB0aGlzLmRhdGEgPSB0aGlzLmRhdGEuY29uY2F0KGRhdGEpOwogICAgICAgIH0KICAgICAgICB0aGlzLmxlbmd0aCA9IHRoaXMuZGF0YS5sZW5ndGg7CiAgICAgIH0KICAgIH07CiAgICBjb25zdCBoZWFkZXIgPSB0aGlzLmNvbXBpbGVIZWFkZXIoY2ZmLmhlYWRlcik7CiAgICBvdXRwdXQuYWRkKGhlYWRlcik7CiAgICBjb25zdCBuYW1lSW5kZXggPSB0aGlzLmNvbXBpbGVOYW1lSW5kZXgoY2ZmLm5hbWVzKTsKICAgIG91dHB1dC5hZGQobmFtZUluZGV4KTsKICAgIGlmIChjZmYuaXNDSURGb250KSB7CiAgICAgIGlmIChjZmYudG9wRGljdC5oYXNOYW1lKCJGb250TWF0cml4IikpIHsKICAgICAgICBjb25zdCBiYXNlID0gY2ZmLnRvcERpY3QuZ2V0QnlOYW1lKCJGb250TWF0cml4Iik7CiAgICAgICAgY2ZmLnRvcERpY3QucmVtb3ZlQnlOYW1lKCJGb250TWF0cml4Iik7CiAgICAgICAgZm9yIChjb25zdCBzdWJEaWN0IG9mIGNmZi5mZEFycmF5KSB7CiAgICAgICAgICBsZXQgbWF0cml4ID0gYmFzZS5zbGljZSgwKTsKICAgICAgICAgIGlmIChzdWJEaWN0Lmhhc05hbWUoIkZvbnRNYXRyaXgiKSkgewogICAgICAgICAgICBtYXRyaXggPSBVdGlsLnRyYW5zZm9ybShtYXRyaXgsIHN1YkRpY3QuZ2V0QnlOYW1lKCJGb250TWF0cml4IikpOwogICAgICAgICAgfQogICAgICAgICAgc3ViRGljdC5zZXRCeU5hbWUoIkZvbnRNYXRyaXgiLCBtYXRyaXgpOwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgY29uc3QgeHVpZCA9IGNmZi50b3BEaWN0LmdldEJ5TmFtZSgiWFVJRCIpOwogICAgaWYgKHh1aWQ/Lmxlbmd0aCA+IDE2KSB7CiAgICAgIGNmZi50b3BEaWN0LnJlbW92ZUJ5TmFtZSgiWFVJRCIpOwogICAgfQogICAgY2ZmLnRvcERpY3Quc2V0QnlOYW1lKCJjaGFyc2V0IiwgMCk7CiAgICBsZXQgY29tcGlsZWQgPSB0aGlzLmNvbXBpbGVUb3BEaWN0cyhbY2ZmLnRvcERpY3RdLCBvdXRwdXQubGVuZ3RoLCBjZmYuaXNDSURGb250KTsKICAgIG91dHB1dC5hZGQoY29tcGlsZWQub3V0cHV0KTsKICAgIGNvbnN0IHRvcERpY3RUcmFja2VyID0gY29tcGlsZWQudHJhY2tlcnNbMF07CiAgICBjb25zdCBzdHJpbmdJbmRleCA9IHRoaXMuY29tcGlsZVN0cmluZ0luZGV4KGNmZi5zdHJpbmdzLnN0cmluZ3MpOwogICAgb3V0cHV0LmFkZChzdHJpbmdJbmRleCk7CiAgICBjb25zdCBnbG9iYWxTdWJySW5kZXggPSB0aGlzLmNvbXBpbGVJbmRleChjZmYuZ2xvYmFsU3VickluZGV4KTsKICAgIG91dHB1dC5hZGQoZ2xvYmFsU3VickluZGV4KTsKICAgIGlmIChjZmYuZW5jb2RpbmcgJiYgY2ZmLnRvcERpY3QuaGFzTmFtZSgiRW5jb2RpbmciKSkgewogICAgICBpZiAoY2ZmLmVuY29kaW5nLnByZWRlZmluZWQpIHsKICAgICAgICB0b3BEaWN0VHJhY2tlci5zZXRFbnRyeUxvY2F0aW9uKCJFbmNvZGluZyIsIFtjZmYuZW5jb2RpbmcuZm9ybWF0XSwgb3V0cHV0KTsKICAgICAgfSBlbHNlIHsKICAgICAgICBjb25zdCBlbmNvZGluZyA9IHRoaXMuY29tcGlsZUVuY29kaW5nKGNmZi5lbmNvZGluZyk7CiAgICAgICAgdG9wRGljdFRyYWNrZXIuc2V0RW50cnlMb2NhdGlvbigiRW5jb2RpbmciLCBbb3V0cHV0Lmxlbmd0aF0sIG91dHB1dCk7CiAgICAgICAgb3V0cHV0LmFkZChlbmNvZGluZyk7CiAgICAgIH0KICAgIH0KICAgIGNvbnN0IGNoYXJzZXQgPSB0aGlzLmNvbXBpbGVDaGFyc2V0KGNmZi5jaGFyc2V0LCBjZmYuY2hhclN0cmluZ3MuY291bnQsIGNmZi5zdHJpbmdzLCBjZmYuaXNDSURGb250KTsKICAgIHRvcERpY3RUcmFja2VyLnNldEVudHJ5TG9jYXRpb24oImNoYXJzZXQiLCBbb3V0cHV0Lmxlbmd0aF0sIG91dHB1dCk7CiAgICBvdXRwdXQuYWRkKGNoYXJzZXQpOwogICAgY29uc3QgY2hhclN0cmluZ3MgPSB0aGlzLmNvbXBpbGVDaGFyU3RyaW5ncyhjZmYuY2hhclN0cmluZ3MpOwogICAgdG9wRGljdFRyYWNrZXIuc2V0RW50cnlMb2NhdGlvbigiQ2hhclN0cmluZ3MiLCBbb3V0cHV0Lmxlbmd0aF0sIG91dHB1dCk7CiAgICBvdXRwdXQuYWRkKGNoYXJTdHJpbmdzKTsKICAgIGlmIChjZmYuaXNDSURGb250KSB7CiAgICAgIHRvcERpY3RUcmFja2VyLnNldEVudHJ5TG9jYXRpb24oIkZEU2VsZWN0IiwgW291dHB1dC5sZW5ndGhdLCBvdXRwdXQpOwogICAgICBjb25zdCBmZFNlbGVjdCA9IHRoaXMuY29tcGlsZUZEU2VsZWN0KGNmZi5mZFNlbGVjdCk7CiAgICAgIG91dHB1dC5hZGQoZmRTZWxlY3QpOwogICAgICBjb21waWxlZCA9IHRoaXMuY29tcGlsZVRvcERpY3RzKGNmZi5mZEFycmF5LCBvdXRwdXQubGVuZ3RoLCB0cnVlKTsKICAgICAgdG9wRGljdFRyYWNrZXIuc2V0RW50cnlMb2NhdGlvbigiRkRBcnJheSIsIFtvdXRwdXQubGVuZ3RoXSwgb3V0cHV0KTsKICAgICAgb3V0cHV0LmFkZChjb21waWxlZC5vdXRwdXQpOwogICAgICBjb25zdCBmb250RGljdFRyYWNrZXJzID0gY29tcGlsZWQudHJhY2tlcnM7CiAgICAgIHRoaXMuY29tcGlsZVByaXZhdGVEaWN0cyhjZmYuZmRBcnJheSwgZm9udERpY3RUcmFja2Vycywgb3V0cHV0KTsKICAgIH0KICAgIHRoaXMuY29tcGlsZVByaXZhdGVEaWN0cyhbY2ZmLnRvcERpY3RdLCBbdG9wRGljdFRyYWNrZXJdLCBvdXRwdXQpOwogICAgb3V0cHV0LmFkZChbMF0pOwogICAgcmV0dXJuIG91dHB1dC5kYXRhOwogIH0KICBlbmNvZGVOdW1iZXIodmFsdWUpIHsKICAgIGlmIChOdW1iZXIuaXNJbnRlZ2VyKHZhbHVlKSkgewogICAgICByZXR1cm4gdGhpcy5lbmNvZGVJbnRlZ2VyKHZhbHVlKTsKICAgIH0KICAgIHJldHVybiB0aGlzLmVuY29kZUZsb2F0KHZhbHVlKTsKICB9CiAgc3RhdGljIGdldCBFbmNvZGVGbG9hdFJlZ0V4cCgpIHsKICAgIHJldHVybiBzaGFkb3codGhpcywgIkVuY29kZUZsb2F0UmVnRXhwIiwgL1wuKFxkKj8pKD86OXs1LDIwfXwwezUsMjB9KVxkezAsMn0oPzplKC4rKXwkKS8pOwogIH0KICBlbmNvZGVGbG9hdChudW0pIHsKICAgIGxldCB2YWx1ZSA9IG51bS50b1N0cmluZygpOwogICAgY29uc3QgbSA9IENGRkNvbXBpbGVyLkVuY29kZUZsb2F0UmVnRXhwLmV4ZWModmFsdWUpOwogICAgaWYgKG0pIHsKICAgICAgY29uc3QgZXBzaWxvbiA9IHBhcnNlRmxvYXQoIjFlIiArICgobVsyXSA/ICttWzJdIDogMCkgKyBtWzFdLmxlbmd0aCkpOwogICAgICB2YWx1ZSA9IChNYXRoLnJvdW5kKG51bSAqIGVwc2lsb24pIC8gZXBzaWxvbikudG9TdHJpbmcoKTsKICAgIH0KICAgIGxldCBuaWJibGVzID0gIiI7CiAgICBsZXQgaSwgaWk7CiAgICBmb3IgKGkgPSAwLCBpaSA9IHZhbHVlLmxlbmd0aDsgaSA8IGlpOyArK2kpIHsKICAgICAgY29uc3QgYSA9IHZhbHVlW2ldOwogICAgICBpZiAoYSA9PT0gImUiKSB7CiAgICAgICAgbmliYmxlcyArPSB2YWx1ZVsrK2ldID09PSAiLSIgPyAiYyIgOiAiYiI7CiAgICAgIH0gZWxzZSBpZiAoYSA9PT0gIi4iKSB7CiAgICAgICAgbmliYmxlcyArPSAiYSI7CiAgICAgIH0gZWxzZSBpZiAoYSA9PT0gIi0iKSB7CiAgICAgICAgbmliYmxlcyArPSAiZSI7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgbmliYmxlcyArPSBhOwogICAgICB9CiAgICB9CiAgICBuaWJibGVzICs9IG5pYmJsZXMubGVuZ3RoICYgMSA/ICJmIiA6ICJmZiI7CiAgICBjb25zdCBvdXQgPSBbMzBdOwogICAgZm9yIChpID0gMCwgaWkgPSBuaWJibGVzLmxlbmd0aDsgaSA8IGlpOyBpICs9IDIpIHsKICAgICAgb3V0LnB1c2gocGFyc2VJbnQobmliYmxlcy5zdWJzdHJpbmcoaSwgaSArIDIpLCAxNikpOwogICAgfQogICAgcmV0dXJuIG91dDsKICB9CiAgZW5jb2RlSW50ZWdlcih2YWx1ZSkgewogICAgbGV0IGNvZGU7CiAgICBpZiAodmFsdWUgPj0gLTEwNyAmJiB2YWx1ZSA8PSAxMDcpIHsKICAgICAgY29kZSA9IFt2YWx1ZSArIDEzOV07CiAgICB9IGVsc2UgaWYgKHZhbHVlID49IDEwOCAmJiB2YWx1ZSA8PSAxMTMxKSB7CiAgICAgIHZhbHVlIC09IDEwODsKICAgICAgY29kZSA9IFsodmFsdWUgPj4gOCkgKyAyNDcsIHZhbHVlICYgMHhmZl07CiAgICB9IGVsc2UgaWYgKHZhbHVlID49IC0xMTMxICYmIHZhbHVlIDw9IC0xMDgpIHsKICAgICAgdmFsdWUgPSAtdmFsdWUgLSAxMDg7CiAgICAgIGNvZGUgPSBbKHZhbHVlID4+IDgpICsgMjUxLCB2YWx1ZSAmIDB4ZmZdOwogICAgfSBlbHNlIGlmICh2YWx1ZSA+PSAtMzI3NjggJiYgdmFsdWUgPD0gMzI3NjcpIHsKICAgICAgY29kZSA9IFsweDFjLCB2YWx1ZSA+PiA4ICYgMHhmZiwgdmFsdWUgJiAweGZmXTsKICAgIH0gZWxzZSB7CiAgICAgIGNvZGUgPSBbMHgxZCwgdmFsdWUgPj4gMjQgJiAweGZmLCB2YWx1ZSA+PiAxNiAmIDB4ZmYsIHZhbHVlID4+IDggJiAweGZmLCB2YWx1ZSAmIDB4ZmZdOwogICAgfQogICAgcmV0dXJuIGNvZGU7CiAgfQogIGNvbXBpbGVIZWFkZXIoaGVhZGVyKSB7CiAgICByZXR1cm4gW2hlYWRlci5tYWpvciwgaGVhZGVyLm1pbm9yLCA0LCBoZWFkZXIub2ZmU2l6ZV07CiAgfQogIGNvbXBpbGVOYW1lSW5kZXgobmFtZXMpIHsKICAgIGNvbnN0IG5hbWVJbmRleCA9IG5ldyBDRkZJbmRleCgpOwogICAgZm9yIChjb25zdCBuYW1lIG9mIG5hbWVzKSB7CiAgICAgIGNvbnN0IGxlbmd0aCA9IE1hdGgubWluKG5hbWUubGVuZ3RoLCAxMjcpOwogICAgICBsZXQgc2FuaXRpemVkTmFtZSA9IG5ldyBBcnJheShsZW5ndGgpOwogICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGxlbmd0aDsgaisrKSB7CiAgICAgICAgbGV0IGNoYXIgPSBuYW1lW2pdOwogICAgICAgIGlmIChjaGFyIDwgIiEiIHx8IGNoYXIgPiAifiIgfHwgY2hhciA9PT0gIlsiIHx8IGNoYXIgPT09ICJdIiB8fCBjaGFyID09PSAiKCIgfHwgY2hhciA9PT0gIikiIHx8IGNoYXIgPT09ICJ7IiB8fCBjaGFyID09PSAifSIgfHwgY2hhciA9PT0gIjwiIHx8IGNoYXIgPT09ICI+IiB8fCBjaGFyID09PSAiLyIgfHwgY2hhciA9PT0gIiUiKSB7CiAgICAgICAgICBjaGFyID0gIl8iOwogICAgICAgIH0KICAgICAgICBzYW5pdGl6ZWROYW1lW2pdID0gY2hhcjsKICAgICAgfQogICAgICBzYW5pdGl6ZWROYW1lID0gc2FuaXRpemVkTmFtZS5qb2luKCIiKTsKICAgICAgaWYgKHNhbml0aXplZE5hbWUgPT09ICIiKSB7CiAgICAgICAgc2FuaXRpemVkTmFtZSA9ICJCYWRfRm9udF9OYW1lIjsKICAgICAgfQogICAgICBuYW1lSW5kZXguYWRkKHN0cmluZ1RvQnl0ZXMoc2FuaXRpemVkTmFtZSkpOwogICAgfQogICAgcmV0dXJuIHRoaXMuY29tcGlsZUluZGV4KG5hbWVJbmRleCk7CiAgfQogIGNvbXBpbGVUb3BEaWN0cyhkaWN0cywgbGVuZ3RoLCByZW1vdmVDaWRLZXlzKSB7CiAgICBjb25zdCBmb250RGljdFRyYWNrZXJzID0gW107CiAgICBsZXQgZmRBcnJheUluZGV4ID0gbmV3IENGRkluZGV4KCk7CiAgICBmb3IgKGNvbnN0IGZvbnREaWN0IG9mIGRpY3RzKSB7CiAgICAgIGlmIChyZW1vdmVDaWRLZXlzKSB7CiAgICAgICAgZm9udERpY3QucmVtb3ZlQnlOYW1lKCJDSURGb250VmVyc2lvbiIpOwogICAgICAgIGZvbnREaWN0LnJlbW92ZUJ5TmFtZSgiQ0lERm9udFJldmlzaW9uIik7CiAgICAgICAgZm9udERpY3QucmVtb3ZlQnlOYW1lKCJDSURGb250VHlwZSIpOwogICAgICAgIGZvbnREaWN0LnJlbW92ZUJ5TmFtZSgiQ0lEQ291bnQiKTsKICAgICAgICBmb250RGljdC5yZW1vdmVCeU5hbWUoIlVJREJhc2UiKTsKICAgICAgfQogICAgICBjb25zdCBmb250RGljdFRyYWNrZXIgPSBuZXcgQ0ZGT2Zmc2V0VHJhY2tlcigpOwogICAgICBjb25zdCBmb250RGljdERhdGEgPSB0aGlzLmNvbXBpbGVEaWN0KGZvbnREaWN0LCBmb250RGljdFRyYWNrZXIpOwogICAgICBmb250RGljdFRyYWNrZXJzLnB1c2goZm9udERpY3RUcmFja2VyKTsKICAgICAgZmRBcnJheUluZGV4LmFkZChmb250RGljdERhdGEpOwogICAgICBmb250RGljdFRyYWNrZXIub2Zmc2V0KGxlbmd0aCk7CiAgICB9CiAgICBmZEFycmF5SW5kZXggPSB0aGlzLmNvbXBpbGVJbmRleChmZEFycmF5SW5kZXgsIGZvbnREaWN0VHJhY2tlcnMpOwogICAgcmV0dXJuIHsKICAgICAgdHJhY2tlcnM6IGZvbnREaWN0VHJhY2tlcnMsCiAgICAgIG91dHB1dDogZmRBcnJheUluZGV4CiAgICB9OwogIH0KICBjb21waWxlUHJpdmF0ZURpY3RzKGRpY3RzLCB0cmFja2Vycywgb3V0cHV0KSB7CiAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBkaWN0cy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7CiAgICAgIGNvbnN0IGZvbnREaWN0ID0gZGljdHNbaV07CiAgICAgIGNvbnN0IHByaXZhdGVEaWN0ID0gZm9udERpY3QucHJpdmF0ZURpY3Q7CiAgICAgIGlmICghcHJpdmF0ZURpY3QgfHwgIWZvbnREaWN0Lmhhc05hbWUoIlByaXZhdGUiKSkgewogICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigiVGhlcmUgbXVzdCBiZSBhIHByaXZhdGUgZGljdGlvbmFyeS4iKTsKICAgICAgfQogICAgICBjb25zdCBwcml2YXRlRGljdFRyYWNrZXIgPSBuZXcgQ0ZGT2Zmc2V0VHJhY2tlcigpOwogICAgICBjb25zdCBwcml2YXRlRGljdERhdGEgPSB0aGlzLmNvbXBpbGVEaWN0KHByaXZhdGVEaWN0LCBwcml2YXRlRGljdFRyYWNrZXIpOwogICAgICBsZXQgb3V0cHV0TGVuZ3RoID0gb3V0cHV0Lmxlbmd0aDsKICAgICAgcHJpdmF0ZURpY3RUcmFja2VyLm9mZnNldChvdXRwdXRMZW5ndGgpOwogICAgICBpZiAoIXByaXZhdGVEaWN0RGF0YS5sZW5ndGgpIHsKICAgICAgICBvdXRwdXRMZW5ndGggPSAwOwogICAgICB9CiAgICAgIHRyYWNrZXJzW2ldLnNldEVudHJ5TG9jYXRpb24oIlByaXZhdGUiLCBbcHJpdmF0ZURpY3REYXRhLmxlbmd0aCwgb3V0cHV0TGVuZ3RoXSwgb3V0cHV0KTsKICAgICAgb3V0cHV0LmFkZChwcml2YXRlRGljdERhdGEpOwogICAgICBpZiAocHJpdmF0ZURpY3Quc3VicnNJbmRleCAmJiBwcml2YXRlRGljdC5oYXNOYW1lKCJTdWJycyIpKSB7CiAgICAgICAgY29uc3Qgc3VicnMgPSB0aGlzLmNvbXBpbGVJbmRleChwcml2YXRlRGljdC5zdWJyc0luZGV4KTsKICAgICAgICBwcml2YXRlRGljdFRyYWNrZXIuc2V0RW50cnlMb2NhdGlvbigiU3VicnMiLCBbcHJpdmF0ZURpY3REYXRhLmxlbmd0aF0sIG91dHB1dCk7CiAgICAgICAgb3V0cHV0LmFkZChzdWJycyk7CiAgICAgIH0KICAgIH0KICB9CiAgY29tcGlsZURpY3QoZGljdCwgb2Zmc2V0VHJhY2tlcikgewogICAgY29uc3Qgb3V0ID0gW107CiAgICBmb3IgKGNvbnN0IGtleSBvZiBkaWN0Lm9yZGVyKSB7CiAgICAgIGlmICghKGtleSBpbiBkaWN0LnZhbHVlcykpIHsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBsZXQgdmFsdWVzID0gZGljdC52YWx1ZXNba2V5XTsKICAgICAgbGV0IHR5cGVzID0gZGljdC50eXBlc1trZXldOwogICAgICBpZiAoIUFycmF5LmlzQXJyYXkodHlwZXMpKSB7CiAgICAgICAgdHlwZXMgPSBbdHlwZXNdOwogICAgICB9CiAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZXMpKSB7CiAgICAgICAgdmFsdWVzID0gW3ZhbHVlc107CiAgICAgIH0KICAgICAgaWYgKHZhbHVlcy5sZW5ndGggPT09IDApIHsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBmb3IgKGxldCBqID0gMCwgamogPSB0eXBlcy5sZW5ndGg7IGogPCBqajsgKytqKSB7CiAgICAgICAgY29uc3QgdHlwZSA9IHR5cGVzW2pdOwogICAgICAgIGNvbnN0IHZhbHVlID0gdmFsdWVzW2pdOwogICAgICAgIHN3aXRjaCAodHlwZSkgewogICAgICAgICAgY2FzZSAibnVtIjoKICAgICAgICAgIGNhc2UgInNpZCI6CiAgICAgICAgICAgIG91dC5wdXNoKC4uLnRoaXMuZW5jb2RlTnVtYmVyKHZhbHVlKSk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSAib2Zmc2V0IjoKICAgICAgICAgICAgY29uc3QgbmFtZSA9IGRpY3Qua2V5VG9OYW1lTWFwW2tleV07CiAgICAgICAgICAgIGlmICghb2Zmc2V0VHJhY2tlci5pc1RyYWNraW5nKG5hbWUpKSB7CiAgICAgICAgICAgICAgb2Zmc2V0VHJhY2tlci50cmFjayhuYW1lLCBvdXQubGVuZ3RoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBvdXQucHVzaCgweDFkLCAwLCAwLCAwLCAwKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlICJhcnJheSI6CiAgICAgICAgICBjYXNlICJkZWx0YSI6CiAgICAgICAgICAgIG91dC5wdXNoKC4uLnRoaXMuZW5jb2RlTnVtYmVyKHZhbHVlKSk7CiAgICAgICAgICAgIGZvciAobGV0IGsgPSAxLCBrayA9IHZhbHVlcy5sZW5ndGg7IGsgPCBrazsgKytrKSB7CiAgICAgICAgICAgICAgb3V0LnB1c2goLi4udGhpcy5lbmNvZGVOdW1iZXIodmFsdWVzW2tdKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoYFVua25vd24gZGF0YSB0eXBlIG9mICR7dHlwZX1gKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgb3V0LnB1c2goLi4uZGljdC5vcGNvZGVzW2tleV0pOwogICAgfQogICAgcmV0dXJuIG91dDsKICB9CiAgY29tcGlsZVN0cmluZ0luZGV4KHN0cmluZ3MpIHsKICAgIGNvbnN0IHN0cmluZ0luZGV4ID0gbmV3IENGRkluZGV4KCk7CiAgICBmb3IgKGNvbnN0IHN0cmluZyBvZiBzdHJpbmdzKSB7CiAgICAgIHN0cmluZ0luZGV4LmFkZChzdHJpbmdUb0J5dGVzKHN0cmluZykpOwogICAgfQogICAgcmV0dXJuIHRoaXMuY29tcGlsZUluZGV4KHN0cmluZ0luZGV4KTsKICB9CiAgY29tcGlsZUNoYXJTdHJpbmdzKGNoYXJTdHJpbmdzKSB7CiAgICBjb25zdCBjaGFyU3RyaW5nc0luZGV4ID0gbmV3IENGRkluZGV4KCk7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoYXJTdHJpbmdzLmNvdW50OyBpKyspIHsKICAgICAgY29uc3QgZ2x5cGggPSBjaGFyU3RyaW5ncy5nZXQoaSk7CiAgICAgIGlmIChnbHlwaC5sZW5ndGggPT09IDApIHsKICAgICAgICBjaGFyU3RyaW5nc0luZGV4LmFkZChuZXcgVWludDhBcnJheShbMHg4YiwgMHgwZV0pKTsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBjaGFyU3RyaW5nc0luZGV4LmFkZChnbHlwaCk7CiAgICB9CiAgICByZXR1cm4gdGhpcy5jb21waWxlSW5kZXgoY2hhclN0cmluZ3NJbmRleCk7CiAgfQogIGNvbXBpbGVDaGFyc2V0KGNoYXJzZXQsIG51bUdseXBocywgc3RyaW5ncywgaXNDSURGb250KSB7CiAgICBsZXQgb3V0OwogICAgY29uc3QgbnVtR2x5cGhzTGVzc05vdERlZiA9IG51bUdseXBocyAtIDE7CiAgICBpZiAoaXNDSURGb250KSB7CiAgICAgIGNvbnN0IG5MZWZ0ID0gbnVtR2x5cGhzTGVzc05vdERlZiAtIDE7CiAgICAgIG91dCA9IG5ldyBVaW50OEFycmF5KFsyLCAwLCAxLCBuTGVmdCA+PiA4ICYgMHhmZiwgbkxlZnQgJiAweGZmXSk7CiAgICB9IGVsc2UgewogICAgICBjb25zdCBsZW5ndGggPSAxICsgbnVtR2x5cGhzTGVzc05vdERlZiAqIDI7CiAgICAgIG91dCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7CiAgICAgIG91dFswXSA9IDA7CiAgICAgIGxldCBjaGFyc2V0SW5kZXggPSAwOwogICAgICBjb25zdCBudW1DaGFyc2V0cyA9IGNoYXJzZXQuY2hhcnNldC5sZW5ndGg7CiAgICAgIGxldCB3YXJuZWQgPSBmYWxzZTsKICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBvdXQubGVuZ3RoOyBpICs9IDIpIHsKICAgICAgICBsZXQgc2lkID0gMDsKICAgICAgICBpZiAoY2hhcnNldEluZGV4IDwgbnVtQ2hhcnNldHMpIHsKICAgICAgICAgIGNvbnN0IG5hbWUgPSBjaGFyc2V0LmNoYXJzZXRbY2hhcnNldEluZGV4KytdOwogICAgICAgICAgc2lkID0gc3RyaW5ncy5nZXRTSUQobmFtZSk7CiAgICAgICAgICBpZiAoc2lkID09PSAtMSkgewogICAgICAgICAgICBzaWQgPSAwOwogICAgICAgICAgICBpZiAoIXdhcm5lZCkgewogICAgICAgICAgICAgIHdhcm5lZCA9IHRydWU7CiAgICAgICAgICAgICAgd2FybihgQ291bGRuJ3QgZmluZCAke25hbWV9IGluIENGRiBzdHJpbmdzYCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgb3V0W2ldID0gc2lkID4+IDggJiAweGZmOwogICAgICAgIG91dFtpICsgMV0gPSBzaWQgJiAweGZmOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gdGhpcy5jb21waWxlVHlwZWRBcnJheShvdXQpOwogIH0KICBjb21waWxlRW5jb2RpbmcoZW5jb2RpbmcpIHsKICAgIHJldHVybiB0aGlzLmNvbXBpbGVUeXBlZEFycmF5KGVuY29kaW5nLnJhdyk7CiAgfQogIGNvbXBpbGVGRFNlbGVjdChmZFNlbGVjdCkgewogICAgY29uc3QgZm9ybWF0ID0gZmRTZWxlY3QuZm9ybWF0OwogICAgbGV0IG91dCwgaTsKICAgIHN3aXRjaCAoZm9ybWF0KSB7CiAgICAgIGNhc2UgMDoKICAgICAgICBvdXQgPSBuZXcgVWludDhBcnJheSgxICsgZmRTZWxlY3QuZmRTZWxlY3QubGVuZ3RoKTsKICAgICAgICBvdXRbMF0gPSBmb3JtYXQ7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGZkU2VsZWN0LmZkU2VsZWN0Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICBvdXRbaSArIDFdID0gZmRTZWxlY3QuZmRTZWxlY3RbaV07CiAgICAgICAgfQogICAgICAgIGJyZWFrOwogICAgICBjYXNlIDM6CiAgICAgICAgY29uc3Qgc3RhcnQgPSAwOwogICAgICAgIGxldCBsYXN0RkQgPSBmZFNlbGVjdC5mZFNlbGVjdFswXTsKICAgICAgICBjb25zdCByYW5nZXMgPSBbZm9ybWF0LCAwLCAwLCBzdGFydCA+PiA4ICYgMHhmZiwgc3RhcnQgJiAweGZmLCBsYXN0RkRdOwogICAgICAgIGZvciAoaSA9IDE7IGkgPCBmZFNlbGVjdC5mZFNlbGVjdC5sZW5ndGg7IGkrKykgewogICAgICAgICAgY29uc3QgY3VycmVudEZEID0gZmRTZWxlY3QuZmRTZWxlY3RbaV07CiAgICAgICAgICBpZiAoY3VycmVudEZEICE9PSBsYXN0RkQpIHsKICAgICAgICAgICAgcmFuZ2VzLnB1c2goaSA+PiA4ICYgMHhmZiwgaSAmIDB4ZmYsIGN1cnJlbnRGRCk7CiAgICAgICAgICAgIGxhc3RGRCA9IGN1cnJlbnRGRDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY29uc3QgbnVtUmFuZ2VzID0gKHJhbmdlcy5sZW5ndGggLSAzKSAvIDM7CiAgICAgICAgcmFuZ2VzWzFdID0gbnVtUmFuZ2VzID4+IDggJiAweGZmOwogICAgICAgIHJhbmdlc1syXSA9IG51bVJhbmdlcyAmIDB4ZmY7CiAgICAgICAgcmFuZ2VzLnB1c2goaSA+PiA4ICYgMHhmZiwgaSAmIDB4ZmYpOwogICAgICAgIG91dCA9IG5ldyBVaW50OEFycmF5KHJhbmdlcyk7CiAgICAgICAgYnJlYWs7CiAgICB9CiAgICByZXR1cm4gdGhpcy5jb21waWxlVHlwZWRBcnJheShvdXQpOwogIH0KICBjb21waWxlVHlwZWRBcnJheShkYXRhKSB7CiAgICByZXR1cm4gQXJyYXkuZnJvbShkYXRhKTsKICB9CiAgY29tcGlsZUluZGV4KGluZGV4LCB0cmFja2VycyA9IFtdKSB7CiAgICBjb25zdCBvYmplY3RzID0gaW5kZXgub2JqZWN0czsKICAgIGNvbnN0IGNvdW50ID0gb2JqZWN0cy5sZW5ndGg7CiAgICBpZiAoY291bnQgPT09IDApIHsKICAgICAgcmV0dXJuIFswLCAwXTsKICAgIH0KICAgIGNvbnN0IGRhdGEgPSBbY291bnQgPj4gOCAmIDB4ZmYsIGNvdW50ICYgMHhmZl07CiAgICBsZXQgbGFzdE9mZnNldCA9IDEsCiAgICAgIGk7CiAgICBmb3IgKGkgPSAwOyBpIDwgY291bnQ7ICsraSkgewogICAgICBsYXN0T2Zmc2V0ICs9IG9iamVjdHNbaV0ubGVuZ3RoOwogICAgfQogICAgbGV0IG9mZnNldFNpemU7CiAgICBpZiAobGFzdE9mZnNldCA8IDB4MTAwKSB7CiAgICAgIG9mZnNldFNpemUgPSAxOwogICAgfSBlbHNlIGlmIChsYXN0T2Zmc2V0IDwgMHgxMDAwMCkgewogICAgICBvZmZzZXRTaXplID0gMjsKICAgIH0gZWxzZSBpZiAobGFzdE9mZnNldCA8IDB4MTAwMDAwMCkgewogICAgICBvZmZzZXRTaXplID0gMzsKICAgIH0gZWxzZSB7CiAgICAgIG9mZnNldFNpemUgPSA0OwogICAgfQogICAgZGF0YS5wdXNoKG9mZnNldFNpemUpOwogICAgbGV0IHJlbGF0aXZlT2Zmc2V0ID0gMTsKICAgIGZvciAoaSA9IDA7IGkgPCBjb3VudCArIDE7IGkrKykgewogICAgICBpZiAob2Zmc2V0U2l6ZSA9PT0gMSkgewogICAgICAgIGRhdGEucHVzaChyZWxhdGl2ZU9mZnNldCAmIDB4ZmYpOwogICAgICB9IGVsc2UgaWYgKG9mZnNldFNpemUgPT09IDIpIHsKICAgICAgICBkYXRhLnB1c2gocmVsYXRpdmVPZmZzZXQgPj4gOCAmIDB4ZmYsIHJlbGF0aXZlT2Zmc2V0ICYgMHhmZik7CiAgICAgIH0gZWxzZSBpZiAob2Zmc2V0U2l6ZSA9PT0gMykgewogICAgICAgIGRhdGEucHVzaChyZWxhdGl2ZU9mZnNldCA+PiAxNiAmIDB4ZmYsIHJlbGF0aXZlT2Zmc2V0ID4+IDggJiAweGZmLCByZWxhdGl2ZU9mZnNldCAmIDB4ZmYpOwogICAgICB9IGVsc2UgewogICAgICAgIGRhdGEucHVzaChyZWxhdGl2ZU9mZnNldCA+Pj4gMjQgJiAweGZmLCByZWxhdGl2ZU9mZnNldCA+PiAxNiAmIDB4ZmYsIHJlbGF0aXZlT2Zmc2V0ID4+IDggJiAweGZmLCByZWxhdGl2ZU9mZnNldCAmIDB4ZmYpOwogICAgICB9CiAgICAgIGlmIChvYmplY3RzW2ldKSB7CiAgICAgICAgcmVsYXRpdmVPZmZzZXQgKz0gb2JqZWN0c1tpXS5sZW5ndGg7CiAgICAgIH0KICAgIH0KICAgIGZvciAoaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7CiAgICAgIGlmICh0cmFja2Vyc1tpXSkgewogICAgICAgIHRyYWNrZXJzW2ldLm9mZnNldChkYXRhLmxlbmd0aCk7CiAgICAgIH0KICAgICAgZGF0YS5wdXNoKC4uLm9iamVjdHNbaV0pOwogICAgfQogICAgcmV0dXJuIGRhdGE7CiAgfQp9Cgo7Ly8gLi9zcmMvY29yZS9zdGFuZGFyZF9mb250cy5qcwoKCmNvbnN0IGdldFN0ZEZvbnRNYXAgPSBnZXRMb29rdXBUYWJsZUZhY3RvcnkoZnVuY3Rpb24gKHQpIHsKICB0WyJUaW1lcy1Sb21hbiJdID0gIlRpbWVzLVJvbWFuIjsKICB0LkhlbHZldGljYSA9ICJIZWx2ZXRpY2EiOwogIHQuQ291cmllciA9ICJDb3VyaWVyIjsKICB0LlN5bWJvbCA9ICJTeW1ib2wiOwogIHRbIlRpbWVzLUJvbGQiXSA9ICJUaW1lcy1Cb2xkIjsKICB0WyJIZWx2ZXRpY2EtQm9sZCJdID0gIkhlbHZldGljYS1Cb2xkIjsKICB0WyJDb3VyaWVyLUJvbGQiXSA9ICJDb3VyaWVyLUJvbGQiOwogIHQuWmFwZkRpbmdiYXRzID0gIlphcGZEaW5nYmF0cyI7CiAgdFsiVGltZXMtSXRhbGljIl0gPSAiVGltZXMtSXRhbGljIjsKICB0WyJIZWx2ZXRpY2EtT2JsaXF1ZSJdID0gIkhlbHZldGljYS1PYmxpcXVlIjsKICB0WyJDb3VyaWVyLU9ibGlxdWUiXSA9ICJDb3VyaWVyLU9ibGlxdWUiOwogIHRbIlRpbWVzLUJvbGRJdGFsaWMiXSA9ICJUaW1lcy1Cb2xkSXRhbGljIjsKICB0WyJIZWx2ZXRpY2EtQm9sZE9ibGlxdWUiXSA9ICJIZWx2ZXRpY2EtQm9sZE9ibGlxdWUiOwogIHRbIkNvdXJpZXItQm9sZE9ibGlxdWUiXSA9ICJDb3VyaWVyLUJvbGRPYmxpcXVlIjsKICB0LkFyaWFsTmFycm93ID0gIkhlbHZldGljYSI7CiAgdFsiQXJpYWxOYXJyb3ctQm9sZCJdID0gIkhlbHZldGljYS1Cb2xkIjsKICB0WyJBcmlhbE5hcnJvdy1Cb2xkSXRhbGljIl0gPSAiSGVsdmV0aWNhLUJvbGRPYmxpcXVlIjsKICB0WyJBcmlhbE5hcnJvdy1JdGFsaWMiXSA9ICJIZWx2ZXRpY2EtT2JsaXF1ZSI7CiAgdC5BcmlhbEJsYWNrID0gIkhlbHZldGljYSI7CiAgdFsiQXJpYWxCbGFjay1Cb2xkIl0gPSAiSGVsdmV0aWNhLUJvbGQiOwogIHRbIkFyaWFsQmxhY2stQm9sZEl0YWxpYyJdID0gIkhlbHZldGljYS1Cb2xkT2JsaXF1ZSI7CiAgdFsiQXJpYWxCbGFjay1JdGFsaWMiXSA9ICJIZWx2ZXRpY2EtT2JsaXF1ZSI7CiAgdFsiQXJpYWwtQmxhY2siXSA9ICJIZWx2ZXRpY2EiOwogIHRbIkFyaWFsLUJsYWNrLUJvbGQiXSA9ICJIZWx2ZXRpY2EtQm9sZCI7CiAgdFsiQXJpYWwtQmxhY2stQm9sZEl0YWxpYyJdID0gIkhlbHZldGljYS1Cb2xkT2JsaXF1ZSI7CiAgdFsiQXJpYWwtQmxhY2stSXRhbGljIl0gPSAiSGVsdmV0aWNhLU9ibGlxdWUiOwogIHQuQXJpYWwgPSAiSGVsdmV0aWNhIjsKICB0WyJBcmlhbC1Cb2xkIl0gPSAiSGVsdmV0aWNhLUJvbGQiOwogIHRbIkFyaWFsLUJvbGRJdGFsaWMiXSA9ICJIZWx2ZXRpY2EtQm9sZE9ibGlxdWUiOwogIHRbIkFyaWFsLUl0YWxpYyJdID0gIkhlbHZldGljYS1PYmxpcXVlIjsKICB0LkFyaWFsTVQgPSAiSGVsdmV0aWNhIjsKICB0WyJBcmlhbC1Cb2xkSXRhbGljTVQiXSA9ICJIZWx2ZXRpY2EtQm9sZE9ibGlxdWUiOwogIHRbIkFyaWFsLUJvbGRNVCJdID0gIkhlbHZldGljYS1Cb2xkIjsKICB0WyJBcmlhbC1JdGFsaWNNVCJdID0gIkhlbHZldGljYS1PYmxpcXVlIjsKICB0WyJBcmlhbC1Cb2xkSXRhbGljTVQtQm9sZEl0YWxpYyJdID0gIkhlbHZldGljYS1Cb2xkT2JsaXF1ZSI7CiAgdFsiQXJpYWwtQm9sZE1ULUJvbGQiXSA9ICJIZWx2ZXRpY2EtQm9sZCI7CiAgdFsiQXJpYWwtSXRhbGljTVQtSXRhbGljIl0gPSAiSGVsdmV0aWNhLU9ibGlxdWUiOwogIHQuQXJpYWxVbmljb2RlTVMgPSAiSGVsdmV0aWNhIjsKICB0WyJBcmlhbFVuaWNvZGVNUy1Cb2xkIl0gPSAiSGVsdmV0aWNhLUJvbGQiOwogIHRbIkFyaWFsVW5pY29kZU1TLUJvbGRJdGFsaWMiXSA9ICJIZWx2ZXRpY2EtQm9sZE9ibGlxdWUiOwogIHRbIkFyaWFsVW5pY29kZU1TLUl0YWxpYyJdID0gIkhlbHZldGljYS1PYmxpcXVlIjsKICB0WyJDb3VyaWVyLUJvbGRJdGFsaWMiXSA9ICJDb3VyaWVyLUJvbGRPYmxpcXVlIjsKICB0WyJDb3VyaWVyLUl0YWxpYyJdID0gIkNvdXJpZXItT2JsaXF1ZSI7CiAgdC5Db3VyaWVyTmV3ID0gIkNvdXJpZXIiOwogIHRbIkNvdXJpZXJOZXctQm9sZCJdID0gIkNvdXJpZXItQm9sZCI7CiAgdFsiQ291cmllck5ldy1Cb2xkSXRhbGljIl0gPSAiQ291cmllci1Cb2xkT2JsaXF1ZSI7CiAgdFsiQ291cmllck5ldy1JdGFsaWMiXSA9ICJDb3VyaWVyLU9ibGlxdWUiOwogIHRbIkNvdXJpZXJOZXdQUy1Cb2xkSXRhbGljTVQiXSA9ICJDb3VyaWVyLUJvbGRPYmxpcXVlIjsKICB0WyJDb3VyaWVyTmV3UFMtQm9sZE1UIl0gPSAiQ291cmllci1Cb2xkIjsKICB0WyJDb3VyaWVyTmV3UFMtSXRhbGljTVQiXSA9ICJDb3VyaWVyLU9ibGlxdWUiOwogIHQuQ291cmllck5ld1BTTVQgPSAiQ291cmllciI7CiAgdFsiSGVsdmV0aWNhLUJvbGRJdGFsaWMiXSA9ICJIZWx2ZXRpY2EtQm9sZE9ibGlxdWUiOwogIHRbIkhlbHZldGljYS1JdGFsaWMiXSA9ICJIZWx2ZXRpY2EtT2JsaXF1ZSI7CiAgdFsiSGVsdmV0aWNhTFRTdGQtQm9sZCJdID0gIkhlbHZldGljYS1Cb2xkIjsKICB0WyJTeW1ib2wtQm9sZCJdID0gIlN5bWJvbCI7CiAgdFsiU3ltYm9sLUJvbGRJdGFsaWMiXSA9ICJTeW1ib2wiOwogIHRbIlN5bWJvbC1JdGFsaWMiXSA9ICJTeW1ib2wiOwogIHQuVGltZXNOZXdSb21hbiA9ICJUaW1lcy1Sb21hbiI7CiAgdFsiVGltZXNOZXdSb21hbi1Cb2xkIl0gPSAiVGltZXMtQm9sZCI7CiAgdFsiVGltZXNOZXdSb21hbi1Cb2xkSXRhbGljIl0gPSAiVGltZXMtQm9sZEl0YWxpYyI7CiAgdFsiVGltZXNOZXdSb21hbi1JdGFsaWMiXSA9ICJUaW1lcy1JdGFsaWMiOwogIHQuVGltZXNOZXdSb21hblBTID0gIlRpbWVzLVJvbWFuIjsKICB0WyJUaW1lc05ld1JvbWFuUFMtQm9sZCJdID0gIlRpbWVzLUJvbGQiOwogIHRbIlRpbWVzTmV3Um9tYW5QUy1Cb2xkSXRhbGljIl0gPSAiVGltZXMtQm9sZEl0YWxpYyI7CiAgdFsiVGltZXNOZXdSb21hblBTLUJvbGRJdGFsaWNNVCJdID0gIlRpbWVzLUJvbGRJdGFsaWMiOwogIHRbIlRpbWVzTmV3Um9tYW5QUy1Cb2xkTVQiXSA9ICJUaW1lcy1Cb2xkIjsKICB0WyJUaW1lc05ld1JvbWFuUFMtSXRhbGljIl0gPSAiVGltZXMtSXRhbGljIjsKICB0WyJUaW1lc05ld1JvbWFuUFMtSXRhbGljTVQiXSA9ICJUaW1lcy1JdGFsaWMiOwogIHQuVGltZXNOZXdSb21hblBTTVQgPSAiVGltZXMtUm9tYW4iOwogIHRbIlRpbWVzTmV3Um9tYW5QU01ULUJvbGQiXSA9ICJUaW1lcy1Cb2xkIjsKICB0WyJUaW1lc05ld1JvbWFuUFNNVC1Cb2xkSXRhbGljIl0gPSAiVGltZXMtQm9sZEl0YWxpYyI7CiAgdFsiVGltZXNOZXdSb21hblBTTVQtSXRhbGljIl0gPSAiVGltZXMtSXRhbGljIjsKfSk7CmNvbnN0IGdldEZvbnROYW1lVG9GaWxlTWFwID0gZ2V0TG9va3VwVGFibGVGYWN0b3J5KGZ1bmN0aW9uICh0KSB7CiAgdC5Db3VyaWVyID0gIkZveGl0Rml4ZWQucGZiIjsKICB0WyJDb3VyaWVyLUJvbGQiXSA9ICJGb3hpdEZpeGVkQm9sZC5wZmIiOwogIHRbIkNvdXJpZXItQm9sZE9ibGlxdWUiXSA9ICJGb3hpdEZpeGVkQm9sZEl0YWxpYy5wZmIiOwogIHRbIkNvdXJpZXItT2JsaXF1ZSJdID0gIkZveGl0Rml4ZWRJdGFsaWMucGZiIjsKICB0LkhlbHZldGljYSA9ICJMaWJlcmF0aW9uU2Fucy1SZWd1bGFyLnR0ZiI7CiAgdFsiSGVsdmV0aWNhLUJvbGQiXSA9ICJMaWJlcmF0aW9uU2Fucy1Cb2xkLnR0ZiI7CiAgdFsiSGVsdmV0aWNhLUJvbGRPYmxpcXVlIl0gPSAiTGliZXJhdGlvblNhbnMtQm9sZEl0YWxpYy50dGYiOwogIHRbIkhlbHZldGljYS1PYmxpcXVlIl0gPSAiTGliZXJhdGlvblNhbnMtSXRhbGljLnR0ZiI7CiAgdFsiVGltZXMtUm9tYW4iXSA9ICJGb3hpdFNlcmlmLnBmYiI7CiAgdFsiVGltZXMtQm9sZCJdID0gIkZveGl0U2VyaWZCb2xkLnBmYiI7CiAgdFsiVGltZXMtQm9sZEl0YWxpYyJdID0gIkZveGl0U2VyaWZCb2xkSXRhbGljLnBmYiI7CiAgdFsiVGltZXMtSXRhbGljIl0gPSAiRm94aXRTZXJpZkl0YWxpYy5wZmIiOwogIHQuU3ltYm9sID0gIkZveGl0U3ltYm9sLnBmYiI7CiAgdC5aYXBmRGluZ2JhdHMgPSAiRm94aXREaW5nYmF0cy5wZmIiOwogIHRbIkxpYmVyYXRpb25TYW5zLVJlZ3VsYXIiXSA9ICJMaWJlcmF0aW9uU2Fucy1SZWd1bGFyLnR0ZiI7CiAgdFsiTGliZXJhdGlvblNhbnMtQm9sZCJdID0gIkxpYmVyYXRpb25TYW5zLUJvbGQudHRmIjsKICB0WyJMaWJlcmF0aW9uU2Fucy1JdGFsaWMiXSA9ICJMaWJlcmF0aW9uU2Fucy1JdGFsaWMudHRmIjsKICB0WyJMaWJlcmF0aW9uU2Fucy1Cb2xkSXRhbGljIl0gPSAiTGliZXJhdGlvblNhbnMtQm9sZEl0YWxpYy50dGYiOwp9KTsKY29uc3QgZ2V0Tm9uU3RkRm9udE1hcCA9IGdldExvb2t1cFRhYmxlRmFjdG9yeShmdW5jdGlvbiAodCkgewogIHQuQ2FsaWJyaSA9ICJIZWx2ZXRpY2EiOwogIHRbIkNhbGlicmktQm9sZCJdID0gIkhlbHZldGljYS1Cb2xkIjsKICB0WyJDYWxpYnJpLUJvbGRJdGFsaWMiXSA9ICJIZWx2ZXRpY2EtQm9sZE9ibGlxdWUiOwogIHRbIkNhbGlicmktSXRhbGljIl0gPSAiSGVsdmV0aWNhLU9ibGlxdWUiOwogIHQuQ2VudHVyeUdvdGhpYyA9ICJIZWx2ZXRpY2EiOwogIHRbIkNlbnR1cnlHb3RoaWMtQm9sZCJdID0gIkhlbHZldGljYS1Cb2xkIjsKICB0WyJDZW50dXJ5R290aGljLUJvbGRJdGFsaWMiXSA9ICJIZWx2ZXRpY2EtQm9sZE9ibGlxdWUiOwogIHRbIkNlbnR1cnlHb3RoaWMtSXRhbGljIl0gPSAiSGVsdmV0aWNhLU9ibGlxdWUiOwogIHQuQ29taWNTYW5zTVMgPSAiQ29taWMgU2FucyBNUyI7CiAgdFsiQ29taWNTYW5zTVMtQm9sZCJdID0gIkNvbWljIFNhbnMgTVMtQm9sZCI7CiAgdFsiQ29taWNTYW5zTVMtQm9sZEl0YWxpYyJdID0gIkNvbWljIFNhbnMgTVMtQm9sZEl0YWxpYyI7CiAgdFsiQ29taWNTYW5zTVMtSXRhbGljIl0gPSAiQ29taWMgU2FucyBNUy1JdGFsaWMiOwogIHQuR2lsbFNhbnNNVCA9ICJIZWx2ZXRpY2EiOwogIHRbIkdpbGxTYW5zTVQtQm9sZCJdID0gIkhlbHZldGljYS1Cb2xkIjsKICB0WyJHaWxsU2Fuc01ULUJvbGRJdGFsaWMiXSA9ICJIZWx2ZXRpY2EtQm9sZE9ibGlxdWUiOwogIHRbIkdpbGxTYW5zTVQtSXRhbGljIl0gPSAiSGVsdmV0aWNhLU9ibGlxdWUiOwogIHQuSW1wYWN0ID0gIkhlbHZldGljYSI7CiAgdFsiSXRjU3ltYm9sLUJvbGQiXSA9ICJIZWx2ZXRpY2EtQm9sZCI7CiAgdFsiSXRjU3ltYm9sLUJvbGRJdGFsaWMiXSA9ICJIZWx2ZXRpY2EtQm9sZE9ibGlxdWUiOwogIHRbIkl0Y1N5bWJvbC1Cb29rIl0gPSAiSGVsdmV0aWNhIjsKICB0WyJJdGNTeW1ib2wtQm9va0l0YWxpYyJdID0gIkhlbHZldGljYS1PYmxpcXVlIjsKICB0WyJJdGNTeW1ib2wtTWVkaXVtIl0gPSAiSGVsdmV0aWNhIjsKICB0WyJJdGNTeW1ib2wtTWVkaXVtSXRhbGljIl0gPSAiSGVsdmV0aWNhLU9ibGlxdWUiOwogIHQuTHVjaWRhQ29uc29sZSA9ICJDb3VyaWVyIjsKICB0WyJMdWNpZGFDb25zb2xlLUJvbGQiXSA9ICJDb3VyaWVyLUJvbGQiOwogIHRbIkx1Y2lkYUNvbnNvbGUtQm9sZEl0YWxpYyJdID0gIkNvdXJpZXItQm9sZE9ibGlxdWUiOwogIHRbIkx1Y2lkYUNvbnNvbGUtSXRhbGljIl0gPSAiQ291cmllci1PYmxpcXVlIjsKICB0WyJMdWNpZGFTYW5zLURlbWkiXSA9ICJIZWx2ZXRpY2EtQm9sZCI7CiAgdFsiTVMtR290aGljIl0gPSAiTVMgR290aGljIjsKICB0WyJNUy1Hb3RoaWMtQm9sZCJdID0gIk1TIEdvdGhpYy1Cb2xkIjsKICB0WyJNUy1Hb3RoaWMtQm9sZEl0YWxpYyJdID0gIk1TIEdvdGhpYy1Cb2xkSXRhbGljIjsKICB0WyJNUy1Hb3RoaWMtSXRhbGljIl0gPSAiTVMgR290aGljLUl0YWxpYyI7CiAgdFsiTVMtTWluY2hvIl0gPSAiTVMgTWluY2hvIjsKICB0WyJNUy1NaW5jaG8tQm9sZCJdID0gIk1TIE1pbmNoby1Cb2xkIjsKICB0WyJNUy1NaW5jaG8tQm9sZEl0YWxpYyJdID0gIk1TIE1pbmNoby1Cb2xkSXRhbGljIjsKICB0WyJNUy1NaW5jaG8tSXRhbGljIl0gPSAiTVMgTWluY2hvLUl0YWxpYyI7CiAgdFsiTVMtUEdvdGhpYyJdID0gIk1TIFBHb3RoaWMiOwogIHRbIk1TLVBHb3RoaWMtQm9sZCJdID0gIk1TIFBHb3RoaWMtQm9sZCI7CiAgdFsiTVMtUEdvdGhpYy1Cb2xkSXRhbGljIl0gPSAiTVMgUEdvdGhpYy1Cb2xkSXRhbGljIjsKICB0WyJNUy1QR290aGljLUl0YWxpYyJdID0gIk1TIFBHb3RoaWMtSXRhbGljIjsKICB0WyJNUy1QTWluY2hvIl0gPSAiTVMgUE1pbmNobyI7CiAgdFsiTVMtUE1pbmNoby1Cb2xkIl0gPSAiTVMgUE1pbmNoby1Cb2xkIjsKICB0WyJNUy1QTWluY2hvLUJvbGRJdGFsaWMiXSA9ICJNUyBQTWluY2hvLUJvbGRJdGFsaWMiOwogIHRbIk1TLVBNaW5jaG8tSXRhbGljIl0gPSAiTVMgUE1pbmNoby1JdGFsaWMiOwogIHQuTnVwdGlhbFNjcmlwdCA9ICJUaW1lcy1JdGFsaWMiOwogIHQuU2Vnb2VVSVN5bWJvbCA9ICJIZWx2ZXRpY2EiOwp9KTsKY29uc3QgZ2V0U2VyaWZGb250cyA9IGdldExvb2t1cFRhYmxlRmFjdG9yeShmdW5jdGlvbiAodCkgewogIHRbIkFkb2JlIEplbnNvbiJdID0gdHJ1ZTsKICB0WyJBZG9iZSBUZXh0Il0gPSB0cnVlOwogIHQuQWxiZXJ0dXMgPSB0cnVlOwogIHQuQWxkdXMgPSB0cnVlOwogIHQuQWxleGFuZHJpYSA9IHRydWU7CiAgdC5BbGdlcmlhbiA9IHRydWU7CiAgdFsiQW1lcmljYW4gVHlwZXdyaXRlciJdID0gdHJ1ZTsKICB0LkFudGlxdWEgPSB0cnVlOwogIHQuQXBleCA9IHRydWU7CiAgdC5Bcm5vID0gdHJ1ZTsKICB0LkFzdGVyID0gdHJ1ZTsKICB0LkF1cm9yYSA9IHRydWU7CiAgdC5CYXNrZXJ2aWxsZSA9IHRydWU7CiAgdC5CZWxsID0gdHJ1ZTsKICB0LkJlbWJvID0gdHJ1ZTsKICB0WyJCZW1ibyBTY2hvb2xib29rIl0gPSB0cnVlOwogIHQuQmVuZ3VpYXQgPSB0cnVlOwogIHRbIkJlcmtlbGV5IE9sZCBTdHlsZSJdID0gdHJ1ZTsKICB0WyJCZXJuaGFyZCBNb2Rlcm4iXSA9IHRydWU7CiAgdFsiQmVydGhvbGQgQ2l0eSJdID0gdHJ1ZTsKICB0LkJvZG9uaSA9IHRydWU7CiAgdFsiQmF1ZXIgQm9kb25pIl0gPSB0cnVlOwogIHRbIkJvb2sgQW50aXF1YSJdID0gdHJ1ZTsKICB0LkJvb2ttYW4gPSB0cnVlOwogIHRbIkJvcmRlYXV4IFJvbWFuIl0gPSB0cnVlOwogIHRbIkNhbGlmb3JuaWFuIEZCIl0gPSB0cnVlOwogIHQuQ2FsaXN0byA9IHRydWU7CiAgdC5DYWx2ZXJ0ID0gdHJ1ZTsKICB0LkNhcGl0YWxzID0gdHJ1ZTsKICB0LkNhbWJyaWEgPSB0cnVlOwogIHQuQ2FydGllciA9IHRydWU7CiAgdC5DYXNsb24gPSB0cnVlOwogIHQuQ2F0dWxsID0gdHJ1ZTsKICB0LkNlbnRhdXIgPSB0cnVlOwogIHRbIkNlbnR1cnkgT2xkIFN0eWxlIl0gPSB0cnVlOwogIHRbIkNlbnR1cnkgU2Nob29sYm9vayJdID0gdHJ1ZTsKICB0LkNoYXBhcnJhbCA9IHRydWU7CiAgdFsiQ2hhcmlzIFNJTCJdID0gdHJ1ZTsKICB0LkNoZWx0ZW5oYW0gPSB0cnVlOwogIHRbIkNob2xsYSBTbGFiIl0gPSB0cnVlOwogIHQuQ2xhcmVuZG9uID0gdHJ1ZTsKICB0LkNsZWFyZmFjZSA9IHRydWU7CiAgdC5Db2NoaW4gPSB0cnVlOwogIHQuQ29sb25uYSA9IHRydWU7CiAgdFsiQ29tcHV0ZXIgTW9kZXJuIl0gPSB0cnVlOwogIHRbIkNvbmNyZXRlIFJvbWFuIl0gPSB0cnVlOwogIHQuQ29uc3RhbnRpYSA9IHRydWU7CiAgdFsiQ29vcGVyIEJsYWNrIl0gPSB0cnVlOwogIHQuQ29yb25hID0gdHJ1ZTsKICB0LkVjb3R5cGUgPSB0cnVlOwogIHQuRWd5cHRpZW5uZSA9IHRydWU7CiAgdC5FbGVwaGFudCA9IHRydWU7CiAgdC5FeGNlbHNpb3IgPSB0cnVlOwogIHQuRmFpcmZpZWxkID0gdHJ1ZTsKICB0WyJGRiBTY2FsYSJdID0gdHJ1ZTsKICB0LkZvbGthcmQgPSB0cnVlOwogIHQuRm9vdGxpZ2h0ID0gdHJ1ZTsKICB0LkZyZWVTZXJpZiA9IHRydWU7CiAgdFsiRnJpeiBRdWFkcmF0YSJdID0gdHJ1ZTsKICB0LkdhcmFtb25kID0gdHJ1ZTsKICB0LkdlbnRpdW0gPSB0cnVlOwogIHQuR2VvcmdpYSA9IHRydWU7CiAgdC5HbG91Y2VzdGVyID0gdHJ1ZTsKICB0WyJHb3VkeSBPbGQgU3R5bGUiXSA9IHRydWU7CiAgdFsiR291ZHkgU2Nob29sYm9vayJdID0gdHJ1ZTsKICB0WyJHb3VkeSBQcm8gRm9udCJdID0gdHJ1ZTsKICB0LkdyYW5qb24gPSB0cnVlOwogIHRbIkd1YXJkaWFuIEVneXB0aWFuIl0gPSB0cnVlOwogIHQuSGVhdGhlciA9IHRydWU7CiAgdC5IZXJjdWxlcyA9IHRydWU7CiAgdFsiSGlnaCBUb3dlciBUZXh0Il0gPSB0cnVlOwogIHQuSGlyb3NoaWdlID0gdHJ1ZTsKICB0WyJIb2VmbGVyIFRleHQiXSA9IHRydWU7CiAgdFsiSHVtYW5hIFNlcmlmIl0gPSB0cnVlOwogIHQuSW1wcmludCA9IHRydWU7CiAgdFsiSW9uaWMgTm8uIDUiXSA9IHRydWU7CiAgdC5KYW5zb24gPSB0cnVlOwogIHQuSm9hbm5hID0gdHJ1ZTsKICB0LktvcmlubmEgPSB0cnVlOwogIHQuTGV4aWNvbiA9IHRydWU7CiAgdC5MaWJlcmF0aW9uU2VyaWYgPSB0cnVlOwogIHRbIkxpYmVyYXRpb24gU2VyaWYiXSA9IHRydWU7CiAgdFsiTGludXggTGliZXJ0aW5lIl0gPSB0cnVlOwogIHQuTGl0ZXJhdHVybmF5YSA9IHRydWU7CiAgdC5MdWNpZGEgPSB0cnVlOwogIHRbIkx1Y2lkYSBCcmlnaHQiXSA9IHRydWU7CiAgdC5NZWxpb3IgPSB0cnVlOwogIHQuTWVtcGhpcyA9IHRydWU7CiAgdC5NaWxsZXIgPSB0cnVlOwogIHQuTWluaW9uID0gdHJ1ZTsKICB0Lk1vZGVybiA9IHRydWU7CiAgdFsiTW9uYSBMaXNhIl0gPSB0cnVlOwogIHRbIk1ycyBFYXZlcyJdID0gdHJ1ZTsKICB0WyJNUyBTZXJpZiJdID0gdHJ1ZTsKICB0WyJNdXNlbyBTbGFiIl0gPSB0cnVlOwogIHRbIk5ldyBZb3JrIl0gPSB0cnVlOwogIHRbIk5pbWJ1cyBSb21hbiJdID0gdHJ1ZTsKICB0WyJOUFMgUmF3bGluc29uIFJvYWR3YXkiXSA9IHRydWU7CiAgdC5OdXB0aWFsU2NyaXB0ID0gdHJ1ZTsKICB0LlBhbGF0aW5vID0gdHJ1ZTsKICB0LlBlcnBldHVhID0gdHJ1ZTsKICB0LlBsYW50aW4gPSB0cnVlOwogIHRbIlBsYW50aW4gU2Nob29sYm9vayJdID0gdHJ1ZTsKICB0LlBsYXliaWxsID0gdHJ1ZTsKICB0WyJQb29yIFJpY2hhcmQiXSA9IHRydWU7CiAgdFsiUmF3bGluc29uIFJvYWR3YXkiXSA9IHRydWU7CiAgdC5SZW5hdWx0ID0gdHJ1ZTsKICB0LlJlcXVpZW0gPSB0cnVlOwogIHQuUm9ja3dlbGwgPSB0cnVlOwogIHQuUm9tYW4gPSB0cnVlOwogIHRbIlJvdGlzIFNlcmlmIl0gPSB0cnVlOwogIHQuU2Fib24gPSB0cnVlOwogIHQuU2NhbGEgPSB0cnVlOwogIHQuU2VhZ3VsbCA9IHRydWU7CiAgdC5TaXN0aW5hID0gdHJ1ZTsKICB0LlNvdXZlbmlyID0gdHJ1ZTsKICB0LlNUSVggPSB0cnVlOwogIHRbIlN0b25lIEluZm9ybWFsIl0gPSB0cnVlOwogIHRbIlN0b25lIFNlcmlmIl0gPSB0cnVlOwogIHQuU3lsZmFlbiA9IHRydWU7CiAgdC5UaW1lcyA9IHRydWU7CiAgdC5UcmFqYW4gPSB0cnVlOwogIHRbIlRyaW5pdMOpIl0gPSB0cnVlOwogIHRbIlRydW1wIE1lZGlhZXZhbCJdID0gdHJ1ZTsKICB0LlV0b3BpYSA9IHRydWU7CiAgdFsiVmFsZSBUeXBlIl0gPSB0cnVlOwogIHRbIkJpdHN0cmVhbSBWZXJhIl0gPSB0cnVlOwogIHRbIlZlcmEgU2VyaWYiXSA9IHRydWU7CiAgdC5WZXJzYWlsbGVzID0gdHJ1ZTsKICB0LldhbnRlZCA9IHRydWU7CiAgdC5XZWlzcyA9IHRydWU7CiAgdFsiV2lkZSBMYXRpbiJdID0gdHJ1ZTsKICB0LldpbmRzb3IgPSB0cnVlOwogIHQuWElUUyA9IHRydWU7Cn0pOwpjb25zdCBnZXRTeW1ib2xzRm9udHMgPSBnZXRMb29rdXBUYWJsZUZhY3RvcnkoZnVuY3Rpb24gKHQpIHsKICB0LkRpbmdiYXRzID0gdHJ1ZTsKICB0LlN5bWJvbCA9IHRydWU7CiAgdC5aYXBmRGluZ2JhdHMgPSB0cnVlOwogIHQuV2luZ2RpbmdzID0gdHJ1ZTsKICB0WyJXaW5nZGluZ3MtQm9sZCJdID0gdHJ1ZTsKICB0WyJXaW5nZGluZ3MtUmVndWxhciJdID0gdHJ1ZTsKfSk7CmNvbnN0IGdldEdseXBoTWFwRm9yU3RhbmRhcmRGb250cyA9IGdldExvb2t1cFRhYmxlRmFjdG9yeShmdW5jdGlvbiAodCkgewogIHRbMl0gPSAxMDsKICB0WzNdID0gMzI7CiAgdFs0XSA9IDMzOwogIHRbNV0gPSAzNDsKICB0WzZdID0gMzU7CiAgdFs3XSA9IDM2OwogIHRbOF0gPSAzNzsKICB0WzldID0gMzg7CiAgdFsxMF0gPSAzOTsKICB0WzExXSA9IDQwOwogIHRbMTJdID0gNDE7CiAgdFsxM10gPSA0MjsKICB0WzE0XSA9IDQzOwogIHRbMTVdID0gNDQ7CiAgdFsxNl0gPSA0NTsKICB0WzE3XSA9IDQ2OwogIHRbMThdID0gNDc7CiAgdFsxOV0gPSA0ODsKICB0WzIwXSA9IDQ5OwogIHRbMjFdID0gNTA7CiAgdFsyMl0gPSA1MTsKICB0WzIzXSA9IDUyOwogIHRbMjRdID0gNTM7CiAgdFsyNV0gPSA1NDsKICB0WzI2XSA9IDU1OwogIHRbMjddID0gNTY7CiAgdFsyOF0gPSA1NzsKICB0WzI5XSA9IDU4OwogIHRbMzBdID0gODk0OwogIHRbMzFdID0gNjA7CiAgdFszMl0gPSA2MTsKICB0WzMzXSA9IDYyOwogIHRbMzRdID0gNjM7CiAgdFszNV0gPSA2NDsKICB0WzM2XSA9IDY1OwogIHRbMzddID0gNjY7CiAgdFszOF0gPSA2NzsKICB0WzM5XSA9IDY4OwogIHRbNDBdID0gNjk7CiAgdFs0MV0gPSA3MDsKICB0WzQyXSA9IDcxOwogIHRbNDNdID0gNzI7CiAgdFs0NF0gPSA3MzsKICB0WzQ1XSA9IDc0OwogIHRbNDZdID0gNzU7CiAgdFs0N10gPSA3NjsKICB0WzQ4XSA9IDc3OwogIHRbNDldID0gNzg7CiAgdFs1MF0gPSA3OTsKICB0WzUxXSA9IDgwOwogIHRbNTJdID0gODE7CiAgdFs1M10gPSA4MjsKICB0WzU0XSA9IDgzOwogIHRbNTVdID0gODQ7CiAgdFs1Nl0gPSA4NTsKICB0WzU3XSA9IDg2OwogIHRbNThdID0gODc7CiAgdFs1OV0gPSA4ODsKICB0WzYwXSA9IDg5OwogIHRbNjFdID0gOTA7CiAgdFs2Ml0gPSA5MTsKICB0WzYzXSA9IDkyOwogIHRbNjRdID0gOTM7CiAgdFs2NV0gPSA5NDsKICB0WzY2XSA9IDk1OwogIHRbNjddID0gOTY7CiAgdFs2OF0gPSA5NzsKICB0WzY5XSA9IDk4OwogIHRbNzBdID0gOTk7CiAgdFs3MV0gPSAxMDA7CiAgdFs3Ml0gPSAxMDE7CiAgdFs3M10gPSAxMDI7CiAgdFs3NF0gPSAxMDM7CiAgdFs3NV0gPSAxMDQ7CiAgdFs3Nl0gPSAxMDU7CiAgdFs3N10gPSAxMDY7CiAgdFs3OF0gPSAxMDc7CiAgdFs3OV0gPSAxMDg7CiAgdFs4MF0gPSAxMDk7CiAgdFs4MV0gPSAxMTA7CiAgdFs4Ml0gPSAxMTE7CiAgdFs4M10gPSAxMTI7CiAgdFs4NF0gPSAxMTM7CiAgdFs4NV0gPSAxMTQ7CiAgdFs4Nl0gPSAxMTU7CiAgdFs4N10gPSAxMTY7CiAgdFs4OF0gPSAxMTc7CiAgdFs4OV0gPSAxMTg7CiAgdFs5MF0gPSAxMTk7CiAgdFs5MV0gPSAxMjA7CiAgdFs5Ml0gPSAxMjE7CiAgdFs5M10gPSAxMjI7CiAgdFs5NF0gPSAxMjM7CiAgdFs5NV0gPSAxMjQ7CiAgdFs5Nl0gPSAxMjU7CiAgdFs5N10gPSAxMjY7CiAgdFs5OF0gPSAxOTY7CiAgdFs5OV0gPSAxOTc7CiAgdFsxMDBdID0gMTk5OwogIHRbMTAxXSA9IDIwMTsKICB0WzEwMl0gPSAyMDk7CiAgdFsxMDNdID0gMjE0OwogIHRbMTA0XSA9IDIyMDsKICB0WzEwNV0gPSAyMjU7CiAgdFsxMDZdID0gMjI0OwogIHRbMTA3XSA9IDIyNjsKICB0WzEwOF0gPSAyMjg7CiAgdFsxMDldID0gMjI3OwogIHRbMTEwXSA9IDIyOTsKICB0WzExMV0gPSAyMzE7CiAgdFsxMTJdID0gMjMzOwogIHRbMTEzXSA9IDIzMjsKICB0WzExNF0gPSAyMzQ7CiAgdFsxMTVdID0gMjM1OwogIHRbMTE2XSA9IDIzNzsKICB0WzExN10gPSAyMzY7CiAgdFsxMThdID0gMjM4OwogIHRbMTE5XSA9IDIzOTsKICB0WzEyMF0gPSAyNDE7CiAgdFsxMjFdID0gMjQzOwogIHRbMTIyXSA9IDI0MjsKICB0WzEyM10gPSAyNDQ7CiAgdFsxMjRdID0gMjQ2OwogIHRbMTI1XSA9IDI0NTsKICB0WzEyNl0gPSAyNTA7CiAgdFsxMjddID0gMjQ5OwogIHRbMTI4XSA9IDI1MTsKICB0WzEyOV0gPSAyNTI7CiAgdFsxMzBdID0gODIyNDsKICB0WzEzMV0gPSAxNzY7CiAgdFsxMzJdID0gMTYyOwogIHRbMTMzXSA9IDE2MzsKICB0WzEzNF0gPSAxNjc7CiAgdFsxMzVdID0gODIyNjsKICB0WzEzNl0gPSAxODI7CiAgdFsxMzddID0gMjIzOwogIHRbMTM4XSA9IDE3NDsKICB0WzEzOV0gPSAxNjk7CiAgdFsxNDBdID0gODQ4MjsKICB0WzE0MV0gPSAxODA7CiAgdFsxNDJdID0gMTY4OwogIHRbMTQzXSA9IDg4MDA7CiAgdFsxNDRdID0gMTk4OwogIHRbMTQ1XSA9IDIxNjsKICB0WzE0Nl0gPSA4NzM0OwogIHRbMTQ3XSA9IDE3NzsKICB0WzE0OF0gPSA4ODA0OwogIHRbMTQ5XSA9IDg4MDU7CiAgdFsxNTBdID0gMTY1OwogIHRbMTUxXSA9IDE4MTsKICB0WzE1Ml0gPSA4NzA2OwogIHRbMTUzXSA9IDg3MjE7CiAgdFsxNTRdID0gODcxOTsKICB0WzE1Nl0gPSA4NzQ3OwogIHRbMTU3XSA9IDE3MDsKICB0WzE1OF0gPSAxODY7CiAgdFsxNTldID0gODQ4NjsKICB0WzE2MF0gPSAyMzA7CiAgdFsxNjFdID0gMjQ4OwogIHRbMTYyXSA9IDE5MTsKICB0WzE2M10gPSAxNjE7CiAgdFsxNjRdID0gMTcyOwogIHRbMTY1XSA9IDg3MzA7CiAgdFsxNjZdID0gNDAyOwogIHRbMTY3XSA9IDg3NzY7CiAgdFsxNjhdID0gODcxMDsKICB0WzE2OV0gPSAxNzE7CiAgdFsxNzBdID0gMTg3OwogIHRbMTcxXSA9IDgyMzA7CiAgdFsxNzldID0gODIyMDsKICB0WzE4MF0gPSA4MjIxOwogIHRbMTgxXSA9IDgyMTY7CiAgdFsxODJdID0gODIxNzsKICB0WzIwMF0gPSAxOTM7CiAgdFsyMDNdID0gMjA1OwogIHRbMjA3XSA9IDIxMTsKICB0WzIxMF0gPSAyMTg7CiAgdFsyMjNdID0gNzExOwogIHRbMjI0XSA9IDMyMTsKICB0WzIyNV0gPSAzMjI7CiAgdFsyMjZdID0gMzUyOwogIHRbMjI3XSA9IDM1MzsKICB0WzIyOF0gPSAzODE7CiAgdFsyMjldID0gMzgyOwogIHRbMjMzXSA9IDIyMTsKICB0WzIzNF0gPSAyNTM7CiAgdFsyNTJdID0gMjYzOwogIHRbMjUzXSA9IDI2ODsKICB0WzI1NF0gPSAyNjk7CiAgdFsyNThdID0gMjU4OwogIHRbMjYwXSA9IDI2MDsKICB0WzI2MV0gPSAyNjE7CiAgdFsyNjVdID0gMjgwOwogIHRbMjY2XSA9IDI4MTsKICB0WzI2N10gPSAyODI7CiAgdFsyNjhdID0gMjgzOwogIHRbMjY5XSA9IDMxMzsKICB0WzI3NV0gPSAzMjM7CiAgdFsyNzZdID0gMzI0OwogIHRbMjc4XSA9IDMyODsKICB0WzI4M10gPSAzNDQ7CiAgdFsyODRdID0gMzQ1OwogIHRbMjg1XSA9IDM0NjsKICB0WzI4Nl0gPSAzNDc7CiAgdFsyOTJdID0gMzY3OwogIHRbMjk1XSA9IDM3NzsKICB0WzI5Nl0gPSAzNzg7CiAgdFsyOThdID0gMzgwOwogIHRbMzA1XSA9IDk2MzsKICB0WzMwNl0gPSA5NjQ7CiAgdFszMDddID0gOTY2OwogIHRbMzA4XSA9IDgyMTU7CiAgdFszMDldID0gODI1MjsKICB0WzMxMF0gPSA4MzE5OwogIHRbMzExXSA9IDgzNTk7CiAgdFszMTJdID0gODU5MjsKICB0WzMxM10gPSA4NTkzOwogIHRbMzM3XSA9IDk1NTI7CiAgdFs0OTNdID0gMTAzOTsKICB0WzQ5NF0gPSAxMDQwOwogIHRbNTcwXSA9IDEwNDA7CiAgdFs1NzFdID0gMTA0MTsKICB0WzU3Ml0gPSAxMDQyOwogIHRbNTczXSA9IDEwNDM7CiAgdFs1NzRdID0gMTA0NDsKICB0WzU3NV0gPSAxMDQ1OwogIHRbNTc2XSA9IDEwNDY7CiAgdFs1NzddID0gMTA0NzsKICB0WzU3OF0gPSAxMDQ4OwogIHRbNTc5XSA9IDEwNDk7CiAgdFs1ODBdID0gMTA1MDsKICB0WzU4MV0gPSAxMDUxOwogIHRbNTgyXSA9IDEwNTI7CiAgdFs1ODNdID0gMTA1MzsKICB0WzU4NF0gPSAxMDU0OwogIHRbNTg1XSA9IDEwNTU7CiAgdFs1ODZdID0gMTA1NjsKICB0WzU4N10gPSAxMDU3OwogIHRbNTg4XSA9IDEwNTg7CiAgdFs1ODldID0gMTA1OTsKICB0WzU5MF0gPSAxMDYwOwogIHRbNTkxXSA9IDEwNjE7CiAgdFs1OTJdID0gMTA2MjsKICB0WzU5M10gPSAxMDYzOwogIHRbNTk0XSA9IDEwNjQ7CiAgdFs1OTVdID0gMTA2NTsKICB0WzU5Nl0gPSAxMDY2OwogIHRbNTk3XSA9IDEwNjc7CiAgdFs1OThdID0gMTA2ODsKICB0WzU5OV0gPSAxMDY5OwogIHRbNjAwXSA9IDEwNzA7CiAgdFs2NzJdID0gMTQ4ODsKICB0WzY3M10gPSAxNDg5OwogIHRbNjc0XSA9IDE0OTA7CiAgdFs2NzVdID0gMTQ5MTsKICB0WzY3Nl0gPSAxNDkyOwogIHRbNjc3XSA9IDE0OTM7CiAgdFs2NzhdID0gMTQ5NDsKICB0WzY3OV0gPSAxNDk1OwogIHRbNjgwXSA9IDE0OTY7CiAgdFs2ODFdID0gMTQ5NzsKICB0WzY4Ml0gPSAxNDk4OwogIHRbNjgzXSA9IDE0OTk7CiAgdFs2ODRdID0gMTUwMDsKICB0WzY4NV0gPSAxNTAxOwogIHRbNjg2XSA9IDE1MDI7CiAgdFs2ODddID0gMTUwMzsKICB0WzY4OF0gPSAxNTA0OwogIHRbNjg5XSA9IDE1MDU7CiAgdFs2OTBdID0gMTUwNjsKICB0WzY5MV0gPSAxNTA3OwogIHRbNjkyXSA9IDE1MDg7CiAgdFs2OTNdID0gMTUwOTsKICB0WzY5NF0gPSAxNTEwOwogIHRbNjk1XSA9IDE1MTE7CiAgdFs2OTZdID0gMTUxMjsKICB0WzY5N10gPSAxNTEzOwogIHRbNjk4XSA9IDE1MTQ7CiAgdFs3MDVdID0gMTUyNDsKICB0WzcwNl0gPSA4MzYyOwogIHRbNzEwXSA9IDY0Mjg4OwogIHRbNzExXSA9IDY0Mjk4OwogIHRbNzU5XSA9IDE2MTc7CiAgdFs3NjFdID0gMTc3NjsKICB0Wzc2M10gPSAxNzc4OwogIHRbNzc1XSA9IDE2NTI7CiAgdFs3NzddID0gMTc2NDsKICB0Wzc3OF0gPSAxNzgwOwogIHRbNzc5XSA9IDE3ODE7CiAgdFs3ODBdID0gMTc4MjsKICB0Wzc4Ml0gPSA3NzE7CiAgdFs3ODNdID0gNjQ3MjY7CiAgdFs3ODZdID0gODM2MzsKICB0Wzc4OF0gPSA4NTMyOwogIHRbNzkwXSA9IDc2ODsKICB0Wzc5MV0gPSA3Njk7CiAgdFs3OTJdID0gNzY4OwogIHRbNzk1XSA9IDgwMzsKICB0Wzc5N10gPSA2NDMzNjsKICB0Wzc5OF0gPSA2NDMzNzsKICB0Wzc5OV0gPSA2NDM0MjsKICB0WzgwMF0gPSA2NDM0MzsKICB0WzgwMV0gPSA2NDM0NDsKICB0WzgwMl0gPSA2NDM0NTsKICB0WzgwM10gPSA2NDM2MjsKICB0WzgwNF0gPSA2NDM2MzsKICB0WzgwNV0gPSA2NDM2NDsKICB0WzI0MjRdID0gNzgyMTsKICB0WzI0MjVdID0gNzgyMjsKICB0WzI0MjZdID0gNzgyMzsKICB0WzI0MjddID0gNzgyNDsKICB0WzI0MjhdID0gNzgyNTsKICB0WzI0MjldID0gNzgyNjsKICB0WzI0MzBdID0gNzgyNzsKICB0WzI0MzNdID0gNzY4MjsKICB0WzI2NzhdID0gODA0NTsKICB0WzI2NzldID0gODA0NjsKICB0WzI4MzBdID0gMTU1MjsKICB0WzI4MzhdID0gNjg2OwogIHRbMjg0MF0gPSA3NTE7CiAgdFsyODQyXSA9IDc1MzsKICB0WzI4NDNdID0gNzU0OwogIHRbMjg0NF0gPSA3NTU7CiAgdFsyODQ2XSA9IDc1NzsKICB0WzI4NTZdID0gNzY3OwogIHRbMjg1N10gPSA4NDg7CiAgdFsyODU4XSA9IDg0OTsKICB0WzI4NjJdID0gODUzOwogIHRbMjg2M10gPSA4NTQ7CiAgdFsyODY0XSA9IDg1NTsKICB0WzI4NjVdID0gODYxOwogIHRbMjg2Nl0gPSA4NjI7CiAgdFsyOTA2XSA9IDc0NjA7CiAgdFsyOTA4XSA9IDc0NjI7CiAgdFsyOTA5XSA9IDc0NjM7CiAgdFsyOTEwXSA9IDc0NjQ7CiAgdFsyOTEyXSA9IDc0NjY7CiAgdFsyOTEzXSA9IDc0Njc7CiAgdFsyOTE0XSA9IDc0Njg7CiAgdFsyOTE2XSA9IDc0NzA7CiAgdFsyOTE3XSA9IDc0NzE7CiAgdFsyOTE4XSA9IDc0NzI7CiAgdFsyOTIwXSA9IDc0NzQ7CiAgdFsyOTIxXSA9IDc0NzU7CiAgdFsyOTIyXSA9IDc0NzY7CiAgdFsyOTI0XSA9IDc0Nzg7CiAgdFsyOTI1XSA9IDc0Nzk7CiAgdFsyOTI2XSA9IDc0ODA7CiAgdFsyOTI4XSA9IDc0ODI7CiAgdFsyOTI5XSA9IDc0ODM7CiAgdFsyOTMwXSA9IDc0ODQ7CiAgdFsyOTMyXSA9IDc0ODY7CiAgdFsyOTMzXSA9IDc0ODc7CiAgdFsyOTM0XSA9IDc0ODg7CiAgdFsyOTM2XSA9IDc0OTA7CiAgdFsyOTM3XSA9IDc0OTE7CiAgdFsyOTM4XSA9IDc0OTI7CiAgdFsyOTQwXSA9IDc0OTQ7CiAgdFsyOTQxXSA9IDc0OTU7CiAgdFsyOTQyXSA9IDc0OTY7CiAgdFsyOTQ0XSA9IDc0OTg7CiAgdFsyOTQ2XSA9IDc1MDA7CiAgdFsyOTQ4XSA9IDc1MDI7CiAgdFsyOTUwXSA9IDc1MDQ7CiAgdFsyOTUxXSA9IDc1MDU7CiAgdFsyOTUyXSA9IDc1MDY7CiAgdFsyOTU0XSA9IDc1MDg7CiAgdFsyOTU1XSA9IDc1MDk7CiAgdFsyOTU2XSA9IDc1MTA7CiAgdFsyOTU4XSA9IDc1MTI7CiAgdFsyOTU5XSA9IDc1MTM7CiAgdFsyOTYwXSA9IDc1MTQ7CiAgdFsyOTYyXSA9IDc1MTY7CiAgdFsyOTYzXSA9IDc1MTc7CiAgdFsyOTY0XSA9IDc1MTg7CiAgdFsyOTY2XSA9IDc1MjA7CiAgdFsyOTY3XSA9IDc1MjE7CiAgdFsyOTY4XSA9IDc1MjI7CiAgdFsyOTcwXSA9IDc1MjQ7CiAgdFsyOTcxXSA9IDc1MjU7CiAgdFsyOTcyXSA9IDc1MjY7CiAgdFsyOTc0XSA9IDc1Mjg7CiAgdFsyOTc1XSA9IDc1Mjk7CiAgdFsyOTc2XSA9IDc1MzA7CiAgdFsyOTc4XSA9IDE1Mzc7CiAgdFsyOTc5XSA9IDE1Mzg7CiAgdFsyOTgwXSA9IDE1Mzk7CiAgdFsyOTgyXSA9IDE1NDk7CiAgdFsyOTgzXSA9IDE1NTE7CiAgdFsyOTg0XSA9IDE1NTI7CiAgdFsyOTg2XSA9IDE1NTQ7CiAgdFsyOTg3XSA9IDE1NTU7CiAgdFsyOTg4XSA9IDE1NTY7CiAgdFsyOTkwXSA9IDE2MjM7CiAgdFsyOTkxXSA9IDE2MjQ7CiAgdFsyOTk1XSA9IDE3NzU7CiAgdFsyOTk5XSA9IDE3OTE7CiAgdFszMDAyXSA9IDY0MjkwOwogIHRbMzAwM10gPSA2NDI5MTsKICB0WzMwMDRdID0gNjQyOTI7CiAgdFszMDA2XSA9IDY0Mjk0OwogIHRbMzAwN10gPSA2NDI5NTsKICB0WzMwMDhdID0gNjQyOTY7CiAgdFszMDExXSA9IDE5MDA7CiAgdFszMDE0XSA9IDgyMjM7CiAgdFszMDE1XSA9IDgyNDQ7CiAgdFszMDE3XSA9IDc1MzI7CiAgdFszMDE4XSA9IDc1MzM7CiAgdFszMDE5XSA9IDc1MzQ7CiAgdFszMDc1XSA9IDc1OTA7CiAgdFszMDc2XSA9IDc1OTE7CiAgdFszMDc5XSA9IDc1OTQ7CiAgdFszMDgwXSA9IDc1OTU7CiAgdFszMDgzXSA9IDc1OTg7CiAgdFszMDg0XSA9IDc1OTk7CiAgdFszMDg3XSA9IDc2MDI7CiAgdFszMDg4XSA9IDc2MDM7CiAgdFszMDkxXSA9IDc2MDY7CiAgdFszMDkyXSA9IDc2MDc7CiAgdFszMDk1XSA9IDc2MTA7CiAgdFszMDk2XSA9IDc2MTE7CiAgdFszMDk5XSA9IDc2MTQ7CiAgdFszMTAwXSA9IDc2MTU7CiAgdFszMTAzXSA9IDc2MTg7CiAgdFszMTA0XSA9IDc2MTk7CiAgdFszMTA3XSA9IDgzMzc7CiAgdFszMTA4XSA9IDgzMzg7CiAgdFszMTE2XSA9IDE4ODQ7CiAgdFszMTE5XSA9IDE4ODU7CiAgdFszMTIwXSA9IDE4ODU7CiAgdFszMTIzXSA9IDE4ODY7CiAgdFszMTI0XSA9IDE4ODY7CiAgdFszMTI3XSA9IDE4ODc7CiAgdFszMTI4XSA9IDE4ODc7CiAgdFszMTMxXSA9IDE4ODg7CiAgdFszMTMyXSA9IDE4ODg7CiAgdFszMTM1XSA9IDE4ODk7CiAgdFszMTM2XSA9IDE4ODk7CiAgdFszMTM5XSA9IDE4OTA7CiAgdFszMTQwXSA9IDE4OTA7CiAgdFszMTQzXSA9IDE4OTE7CiAgdFszMTQ0XSA9IDE4OTE7CiAgdFszMTQ3XSA9IDE4OTI7CiAgdFszMTQ4XSA9IDE4OTI7CiAgdFszMTUzXSA9IDU4MDsKICB0WzMxNTRdID0gNTgxOwogIHRbMzE1N10gPSA1ODQ7CiAgdFszMTU4XSA9IDU4NTsKICB0WzMxNjFdID0gNTg4OwogIHRbMzE2Ml0gPSA1ODk7CiAgdFszMTY1XSA9IDg5MTsKICB0WzMxNjZdID0gODkyOwogIHRbMzE2OV0gPSAxMjc0OwogIHRbMzE3MF0gPSAxMjc1OwogIHRbMzE3M10gPSAxMjc4OwogIHRbMzE3NF0gPSAxMjc5OwogIHRbMzE4MV0gPSA3NjIyOwogIHRbMzE4Ml0gPSA3NjIzOwogIHRbMzI4Ml0gPSAxMTc5OTsKICB0WzMzMTZdID0gNTc4OwogIHRbMzM3OV0gPSA0Mjc4NTsKICB0WzMzOTNdID0gMTE1OTsKICB0WzM0MTZdID0gODM3NzsKfSk7CmNvbnN0IGdldFN1cHBsZW1lbnRhbEdseXBoTWFwRm9yQXJpYWxCbGFjayA9IGdldExvb2t1cFRhYmxlRmFjdG9yeShmdW5jdGlvbiAodCkgewogIHRbMjI3XSA9IDMyMjsKICB0WzI2NF0gPSAyNjE7CiAgdFsyOTFdID0gMzQ2Owp9KTsKY29uc3QgZ2V0U3VwcGxlbWVudGFsR2x5cGhNYXBGb3JDYWxpYnJpID0gZ2V0TG9va3VwVGFibGVGYWN0b3J5KGZ1bmN0aW9uICh0KSB7CiAgdFsxXSA9IDMyOwogIHRbNF0gPSA2NTsKICB0WzVdID0gMTkyOwogIHRbNl0gPSAxOTM7CiAgdFs5XSA9IDE5NjsKICB0WzE3XSA9IDY2OwogIHRbMThdID0gNjc7CiAgdFsyMV0gPSAyNjg7CiAgdFsyNF0gPSA2ODsKICB0WzI4XSA9IDY5OwogIHRbMjldID0gMjAwOwogIHRbMzBdID0gMjAxOwogIHRbMzJdID0gMjgyOwogIHRbMzhdID0gNzA7CiAgdFszOV0gPSA3MTsKICB0WzQ0XSA9IDcyOwogIHRbNDddID0gNzM7CiAgdFs0OF0gPSAyMDQ7CiAgdFs0OV0gPSAyMDU7CiAgdFs1OF0gPSA3NDsKICB0WzYwXSA9IDc1OwogIHRbNjJdID0gNzY7CiAgdFs2OF0gPSA3NzsKICB0WzY5XSA9IDc4OwogIHRbNzVdID0gNzk7CiAgdFs3Nl0gPSAyMTA7CiAgdFs4MF0gPSAyMTQ7CiAgdFs4N10gPSA4MDsKICB0Wzg5XSA9IDgxOwogIHRbOTBdID0gODI7CiAgdFs5Ml0gPSAzNDQ7CiAgdFs5NF0gPSA4MzsKICB0Wzk3XSA9IDM1MjsKICB0WzEwMF0gPSA4NDsKICB0WzEwNF0gPSA4NTsKICB0WzEwOV0gPSAyMjA7CiAgdFsxMTVdID0gODY7CiAgdFsxMTZdID0gODc7CiAgdFsxMjFdID0gODg7CiAgdFsxMjJdID0gODk7CiAgdFsxMjRdID0gMjIxOwogIHRbMTI3XSA9IDkwOwogIHRbMTI5XSA9IDM4MTsKICB0WzI1OF0gPSA5NzsKICB0WzI1OV0gPSAyMjQ7CiAgdFsyNjBdID0gMjI1OwogIHRbMjYzXSA9IDIyODsKICB0WzI2OF0gPSAyNjE7CiAgdFsyNzFdID0gOTg7CiAgdFsyNzJdID0gOTk7CiAgdFsyNzNdID0gMjYzOwogIHRbMjc1XSA9IDI2OTsKICB0WzI4Ml0gPSAxMDA7CiAgdFsyODZdID0gMTAxOwogIHRbMjg3XSA9IDIzMjsKICB0WzI4OF0gPSAyMzM7CiAgdFsyOTBdID0gMjgzOwogIHRbMjk1XSA9IDI4MTsKICB0WzI5Nl0gPSAxMDI7CiAgdFszMzZdID0gMTAzOwogIHRbMzQ2XSA9IDEwNDsKICB0WzM0OV0gPSAxMDU7CiAgdFszNTBdID0gMjM2OwogIHRbMzUxXSA9IDIzNzsKICB0WzM2MV0gPSAxMDY7CiAgdFszNjRdID0gMTA3OwogIHRbMzY3XSA9IDEwODsKICB0WzM3MV0gPSAzMjI7CiAgdFszNzNdID0gMTA5OwogIHRbMzc0XSA9IDExMDsKICB0WzM4MV0gPSAxMTE7CiAgdFszODJdID0gMjQyOwogIHRbMzgzXSA9IDI0MzsKICB0WzM4Nl0gPSAyNDY7CiAgdFszOTNdID0gMTEyOwogIHRbMzk1XSA9IDExMzsKICB0WzM5Nl0gPSAxMTQ7CiAgdFszOThdID0gMzQ1OwogIHRbNDAwXSA9IDExNTsKICB0WzQwMV0gPSAzNDc7CiAgdFs0MDNdID0gMzUzOwogIHRbNDEwXSA9IDExNjsKICB0WzQzN10gPSAxMTc7CiAgdFs0NDJdID0gMjUyOwogIHRbNDQ4XSA9IDExODsKICB0WzQ0OV0gPSAxMTk7CiAgdFs0NTRdID0gMTIwOwogIHRbNDU1XSA9IDEyMTsKICB0WzQ1N10gPSAyNTM7CiAgdFs0NjBdID0gMTIyOwogIHRbNDYyXSA9IDM4MjsKICB0WzQ2M10gPSAzODA7CiAgdFs4NTNdID0gNDQ7CiAgdFs4NTVdID0gNTg7CiAgdFs4NTZdID0gNDY7CiAgdFs4NzZdID0gNDc7CiAgdFs4NzhdID0gNDU7CiAgdFs4ODJdID0gNDU7CiAgdFs4OTRdID0gNDA7CiAgdFs4OTVdID0gNDE7CiAgdFs4OTZdID0gOTE7CiAgdFs4OTddID0gOTM7CiAgdFs5MjNdID0gNjQ7CiAgdFs5NDBdID0gMTYzOwogIHRbMTAwNF0gPSA0ODsKICB0WzEwMDVdID0gNDk7CiAgdFsxMDA2XSA9IDUwOwogIHRbMTAwN10gPSA1MTsKICB0WzEwMDhdID0gNTI7CiAgdFsxMDA5XSA9IDUzOwogIHRbMTAxMF0gPSA1NDsKICB0WzEwMTFdID0gNTU7CiAgdFsxMDEyXSA9IDU2OwogIHRbMTAxM10gPSA1NzsKICB0WzEwODFdID0gMzc7CiAgdFsxMDg1XSA9IDQzOwogIHRbMTA4Nl0gPSA0NTsKfSk7CmZ1bmN0aW9uIGdldFN0YW5kYXJkRm9udE5hbWUobmFtZSkgewogIGNvbnN0IGZvbnROYW1lID0gbm9ybWFsaXplRm9udE5hbWUobmFtZSk7CiAgY29uc3Qgc3RkRm9udE1hcCA9IGdldFN0ZEZvbnRNYXAoKTsKICByZXR1cm4gc3RkRm9udE1hcFtmb250TmFtZV07Cn0KZnVuY3Rpb24gaXNLbm93bkZvbnROYW1lKG5hbWUpIHsKICBjb25zdCBmb250TmFtZSA9IG5vcm1hbGl6ZUZvbnROYW1lKG5hbWUpOwogIHJldHVybiAhIShnZXRTdGRGb250TWFwKClbZm9udE5hbWVdIHx8IGdldE5vblN0ZEZvbnRNYXAoKVtmb250TmFtZV0gfHwgZ2V0U2VyaWZGb250cygpW2ZvbnROYW1lXSB8fCBnZXRTeW1ib2xzRm9udHMoKVtmb250TmFtZV0pOwp9Cgo7Ly8gLi9zcmMvY29yZS90b191bmljb2RlX21hcC5qcwoKY2xhc3MgVG9Vbmljb2RlTWFwIHsKICBjb25zdHJ1Y3RvcihjbWFwID0gW10pIHsKICAgIHRoaXMuX21hcCA9IGNtYXA7CiAgfQogIGdldCBsZW5ndGgoKSB7CiAgICByZXR1cm4gdGhpcy5fbWFwLmxlbmd0aDsKICB9CiAgZm9yRWFjaChjYWxsYmFjaykgewogICAgZm9yIChjb25zdCBjaGFyQ29kZSBpbiB0aGlzLl9tYXApIHsKICAgICAgY2FsbGJhY2soY2hhckNvZGUsIHRoaXMuX21hcFtjaGFyQ29kZV0uY29kZVBvaW50QXQoMCkpOwogICAgfQogIH0KICBoYXMoaSkgewogICAgcmV0dXJuIHRoaXMuX21hcFtpXSAhPT0gdW5kZWZpbmVkOwogIH0KICBnZXQoaSkgewogICAgcmV0dXJuIHRoaXMuX21hcFtpXTsKICB9CiAgY2hhckNvZGVPZih2YWx1ZSkgewogICAgY29uc3QgbWFwID0gdGhpcy5fbWFwOwogICAgaWYgKG1hcC5sZW5ndGggPD0gMHgxMDAwMCkgewogICAgICByZXR1cm4gbWFwLmluZGV4T2YodmFsdWUpOwogICAgfQogICAgZm9yIChjb25zdCBjaGFyQ29kZSBpbiBtYXApIHsKICAgICAgaWYgKG1hcFtjaGFyQ29kZV0gPT09IHZhbHVlKSB7CiAgICAgICAgcmV0dXJuIGNoYXJDb2RlIHwgMDsKICAgICAgfQogICAgfQogICAgcmV0dXJuIC0xOwogIH0KICBhbWVuZChtYXApIHsKICAgIGZvciAoY29uc3QgY2hhckNvZGUgaW4gbWFwKSB7CiAgICAgIHRoaXMuX21hcFtjaGFyQ29kZV0gPSBtYXBbY2hhckNvZGVdOwogICAgfQogIH0KfQpjbGFzcyBJZGVudGl0eVRvVW5pY29kZU1hcCB7CiAgY29uc3RydWN0b3IoZmlyc3RDaGFyLCBsYXN0Q2hhcikgewogICAgdGhpcy5maXJzdENoYXIgPSBmaXJzdENoYXI7CiAgICB0aGlzLmxhc3RDaGFyID0gbGFzdENoYXI7CiAgfQogIGdldCBsZW5ndGgoKSB7CiAgICByZXR1cm4gdGhpcy5sYXN0Q2hhciArIDEgLSB0aGlzLmZpcnN0Q2hhcjsKICB9CiAgZm9yRWFjaChjYWxsYmFjaykgewogICAgZm9yIChsZXQgaSA9IHRoaXMuZmlyc3RDaGFyLCBpaSA9IHRoaXMubGFzdENoYXI7IGkgPD0gaWk7IGkrKykgewogICAgICBjYWxsYmFjayhpLCBpKTsKICAgIH0KICB9CiAgaGFzKGkpIHsKICAgIHJldHVybiB0aGlzLmZpcnN0Q2hhciA8PSBpICYmIGkgPD0gdGhpcy5sYXN0Q2hhcjsKICB9CiAgZ2V0KGkpIHsKICAgIGlmICh0aGlzLmZpcnN0Q2hhciA8PSBpICYmIGkgPD0gdGhpcy5sYXN0Q2hhcikgewogICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShpKTsKICAgIH0KICAgIHJldHVybiB1bmRlZmluZWQ7CiAgfQogIGNoYXJDb2RlT2YodikgewogICAgcmV0dXJuIE51bWJlci5pc0ludGVnZXIodikgJiYgdiA+PSB0aGlzLmZpcnN0Q2hhciAmJiB2IDw9IHRoaXMubGFzdENoYXIgPyB2IDogLTE7CiAgfQogIGFtZW5kKG1hcCkgewogICAgdW5yZWFjaGFibGUoIlNob3VsZCBub3QgY2FsbCBhbWVuZCgpIik7CiAgfQp9Cgo7Ly8gLi9zcmMvY29yZS9jZmZfZm9udC5qcwoKCgpjbGFzcyBDRkZGb250IHsKICBjb25zdHJ1Y3RvcihmaWxlLCBwcm9wZXJ0aWVzKSB7CiAgICB0aGlzLnByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzOwogICAgY29uc3QgcGFyc2VyID0gbmV3IENGRlBhcnNlcihmaWxlLCBwcm9wZXJ0aWVzLCBTRUFDX0FOQUxZU0lTX0VOQUJMRUQpOwogICAgdGhpcy5jZmYgPSBwYXJzZXIucGFyc2UoKTsKICAgIHRoaXMuY2ZmLmR1cGxpY2F0ZUZpcnN0R2x5cGgoKTsKICAgIGNvbnN0IGNvbXBpbGVyID0gbmV3IENGRkNvbXBpbGVyKHRoaXMuY2ZmKTsKICAgIHRoaXMuc2VhY3MgPSB0aGlzLmNmZi5zZWFjczsKICAgIHRyeSB7CiAgICAgIHRoaXMuZGF0YSA9IGNvbXBpbGVyLmNvbXBpbGUoKTsKICAgIH0gY2F0Y2ggewogICAgICB3YXJuKCJGYWlsZWQgdG8gY29tcGlsZSBmb250ICIgKyBwcm9wZXJ0aWVzLmxvYWRlZE5hbWUpOwogICAgICB0aGlzLmRhdGEgPSBmaWxlOwogICAgfQogICAgdGhpcy5fY3JlYXRlQnVpbHRJbkVuY29kaW5nKCk7CiAgfQogIGdldCBudW1HbHlwaHMoKSB7CiAgICByZXR1cm4gdGhpcy5jZmYuY2hhclN0cmluZ3MuY291bnQ7CiAgfQogIGdldENoYXJzZXQoKSB7CiAgICByZXR1cm4gdGhpcy5jZmYuY2hhcnNldC5jaGFyc2V0OwogIH0KICBnZXRHbHlwaE1hcHBpbmcoKSB7CiAgICBjb25zdCBjZmYgPSB0aGlzLmNmZjsKICAgIGNvbnN0IHByb3BlcnRpZXMgPSB0aGlzLnByb3BlcnRpZXM7CiAgICBjb25zdCB7CiAgICAgIGNpZFRvR2lkTWFwLAogICAgICBjTWFwCiAgICB9ID0gcHJvcGVydGllczsKICAgIGNvbnN0IGNoYXJzZXRzID0gY2ZmLmNoYXJzZXQuY2hhcnNldDsKICAgIGxldCBjaGFyQ29kZVRvR2x5cGhJZDsKICAgIGxldCBnbHlwaElkOwogICAgaWYgKHByb3BlcnRpZXMuY29tcG9zaXRlKSB7CiAgICAgIGxldCBpbnZDaWRUb0dpZE1hcDsKICAgICAgaWYgKGNpZFRvR2lkTWFwPy5sZW5ndGggPiAwKSB7CiAgICAgICAgaW52Q2lkVG9HaWRNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGNpZFRvR2lkTWFwLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgICAgIGNvbnN0IGdpZCA9IGNpZFRvR2lkTWFwW2ldOwogICAgICAgICAgaWYgKGdpZCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIGludkNpZFRvR2lkTWFwW2dpZF0gPSBpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICBjaGFyQ29kZVRvR2x5cGhJZCA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgICAgIGxldCBjaGFyQ29kZTsKICAgICAgaWYgKGNmZi5pc0NJREZvbnQpIHsKICAgICAgICBmb3IgKGdseXBoSWQgPSAwOyBnbHlwaElkIDwgY2hhcnNldHMubGVuZ3RoOyBnbHlwaElkKyspIHsKICAgICAgICAgIGNvbnN0IGNpZCA9IGNoYXJzZXRzW2dseXBoSWRdOwogICAgICAgICAgY2hhckNvZGUgPSBjTWFwLmNoYXJDb2RlT2YoY2lkKTsKICAgICAgICAgIGlmIChpbnZDaWRUb0dpZE1hcD8uW2NoYXJDb2RlXSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIGNoYXJDb2RlID0gaW52Q2lkVG9HaWRNYXBbY2hhckNvZGVdOwogICAgICAgICAgfQogICAgICAgICAgY2hhckNvZGVUb0dseXBoSWRbY2hhckNvZGVdID0gZ2x5cGhJZDsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZm9yIChnbHlwaElkID0gMDsgZ2x5cGhJZCA8IGNmZi5jaGFyU3RyaW5ncy5jb3VudDsgZ2x5cGhJZCsrKSB7CiAgICAgICAgICBjaGFyQ29kZSA9IGNNYXAuY2hhckNvZGVPZihnbHlwaElkKTsKICAgICAgICAgIGNoYXJDb2RlVG9HbHlwaElkW2NoYXJDb2RlXSA9IGdseXBoSWQ7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBjaGFyQ29kZVRvR2x5cGhJZDsKICAgIH0KICAgIGxldCBlbmNvZGluZyA9IGNmZi5lbmNvZGluZyA/IGNmZi5lbmNvZGluZy5lbmNvZGluZyA6IG51bGw7CiAgICBpZiAocHJvcGVydGllcy5pc0ludGVybmFsRm9udCkgewogICAgICBlbmNvZGluZyA9IHByb3BlcnRpZXMuZGVmYXVsdEVuY29kaW5nOwogICAgfQogICAgY2hhckNvZGVUb0dseXBoSWQgPSB0eXBlMUZvbnRHbHlwaE1hcHBpbmcocHJvcGVydGllcywgZW5jb2RpbmcsIGNoYXJzZXRzKTsKICAgIHJldHVybiBjaGFyQ29kZVRvR2x5cGhJZDsKICB9CiAgaGFzR2x5cGhJZChpZCkgewogICAgcmV0dXJuIHRoaXMuY2ZmLmhhc0dseXBoSWQoaWQpOwogIH0KICBfY3JlYXRlQnVpbHRJbkVuY29kaW5nKCkgewogICAgY29uc3QgewogICAgICBjaGFyc2V0LAogICAgICBlbmNvZGluZwogICAgfSA9IHRoaXMuY2ZmOwogICAgaWYgKCFjaGFyc2V0IHx8ICFlbmNvZGluZykgewogICAgICByZXR1cm47CiAgICB9CiAgICBjb25zdCBjaGFyc2V0cyA9IGNoYXJzZXQuY2hhcnNldCwKICAgICAgZW5jb2RpbmdzID0gZW5jb2RpbmcuZW5jb2Rpbmc7CiAgICBjb25zdCBtYXAgPSBbXTsKICAgIGZvciAoY29uc3QgY2hhckNvZGUgaW4gZW5jb2RpbmdzKSB7CiAgICAgIGNvbnN0IGdseXBoSWQgPSBlbmNvZGluZ3NbY2hhckNvZGVdOwogICAgICBpZiAoZ2x5cGhJZCA+PSAwKSB7CiAgICAgICAgY29uc3QgZ2x5cGhOYW1lID0gY2hhcnNldHNbZ2x5cGhJZF07CiAgICAgICAgaWYgKGdseXBoTmFtZSkgewogICAgICAgICAgbWFwW2NoYXJDb2RlXSA9IGdseXBoTmFtZTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIGlmIChtYXAubGVuZ3RoID4gMCkgewogICAgICB0aGlzLnByb3BlcnRpZXMuYnVpbHRJbkVuY29kaW5nID0gbWFwOwogICAgfQogIH0KfQoKOy8vIC4vc3JjL2NvcmUvZm9udF9yZW5kZXJlci5qcwoKCgoKCgoKCgoKCgoKCgoKZnVuY3Rpb24gZ2V0RmxvYXQyMTQoZGF0YSwgb2Zmc2V0KSB7CiAgcmV0dXJuIHJlYWRJbnQxNihkYXRhLCBvZmZzZXQpIC8gMTYzODQ7Cn0KZnVuY3Rpb24gZ2V0U3Vicm91dGluZUJpYXMoc3VicnMpIHsKICBjb25zdCBudW1TdWJycyA9IHN1YnJzLmxlbmd0aDsKICBsZXQgYmlhcyA9IDMyNzY4OwogIGlmIChudW1TdWJycyA8IDEyNDApIHsKICAgIGJpYXMgPSAxMDc7CiAgfSBlbHNlIGlmIChudW1TdWJycyA8IDMzOTAwKSB7CiAgICBiaWFzID0gMTEzMTsKICB9CiAgcmV0dXJuIGJpYXM7Cn0KZnVuY3Rpb24gcGFyc2VDbWFwKGRhdGEsIHN0YXJ0LCBlbmQpIHsKICBjb25zdCBvZmZzZXQgPSByZWFkVWludDE2KGRhdGEsIHN0YXJ0ICsgMikgPT09IDEgPyByZWFkVWludDMyKGRhdGEsIHN0YXJ0ICsgOCkgOiByZWFkVWludDMyKGRhdGEsIHN0YXJ0ICsgMTYpOwogIGNvbnN0IGZvcm1hdCA9IHJlYWRVaW50MTYoZGF0YSwgc3RhcnQgKyBvZmZzZXQpOwogIGxldCByYW5nZXMsIHAsIGk7CiAgaWYgKGZvcm1hdCA9PT0gNCkgewogICAgcmVhZFVpbnQxNihkYXRhLCBzdGFydCArIG9mZnNldCArIDIpOwogICAgY29uc3Qgc2VnQ291bnQgPSByZWFkVWludDE2KGRhdGEsIHN0YXJ0ICsgb2Zmc2V0ICsgNikgPj4gMTsKICAgIHAgPSBzdGFydCArIG9mZnNldCArIDE0OwogICAgcmFuZ2VzID0gW107CiAgICBmb3IgKGkgPSAwOyBpIDwgc2VnQ291bnQ7IGkrKywgcCArPSAyKSB7CiAgICAgIHJhbmdlc1tpXSA9IHsKICAgICAgICBlbmQ6IHJlYWRVaW50MTYoZGF0YSwgcCkKICAgICAgfTsKICAgIH0KICAgIHAgKz0gMjsKICAgIGZvciAoaSA9IDA7IGkgPCBzZWdDb3VudDsgaSsrLCBwICs9IDIpIHsKICAgICAgcmFuZ2VzW2ldLnN0YXJ0ID0gcmVhZFVpbnQxNihkYXRhLCBwKTsKICAgIH0KICAgIGZvciAoaSA9IDA7IGkgPCBzZWdDb3VudDsgaSsrLCBwICs9IDIpIHsKICAgICAgcmFuZ2VzW2ldLmlkRGVsdGEgPSByZWFkVWludDE2KGRhdGEsIHApOwogICAgfQogICAgZm9yIChpID0gMDsgaSA8IHNlZ0NvdW50OyBpKyssIHAgKz0gMikgewogICAgICBsZXQgaWRPZmZzZXQgPSByZWFkVWludDE2KGRhdGEsIHApOwogICAgICBpZiAoaWRPZmZzZXQgPT09IDApIHsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICByYW5nZXNbaV0uaWRzID0gW107CiAgICAgIGZvciAobGV0IGogPSAwLCBqaiA9IHJhbmdlc1tpXS5lbmQgLSByYW5nZXNbaV0uc3RhcnQgKyAxOyBqIDwgamo7IGorKykgewogICAgICAgIHJhbmdlc1tpXS5pZHNbal0gPSByZWFkVWludDE2KGRhdGEsIHAgKyBpZE9mZnNldCk7CiAgICAgICAgaWRPZmZzZXQgKz0gMjsKICAgICAgfQogICAgfQogICAgcmV0dXJuIHJhbmdlczsKICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gMTIpIHsKICAgIGNvbnN0IGdyb3VwcyA9IHJlYWRVaW50MzIoZGF0YSwgc3RhcnQgKyBvZmZzZXQgKyAxMik7CiAgICBwID0gc3RhcnQgKyBvZmZzZXQgKyAxNjsKICAgIHJhbmdlcyA9IFtdOwogICAgZm9yIChpID0gMDsgaSA8IGdyb3VwczsgaSsrKSB7CiAgICAgIHN0YXJ0ID0gcmVhZFVpbnQzMihkYXRhLCBwKTsKICAgICAgcmFuZ2VzLnB1c2goewogICAgICAgIHN0YXJ0LAogICAgICAgIGVuZDogcmVhZFVpbnQzMihkYXRhLCBwICsgNCksCiAgICAgICAgaWREZWx0YTogcmVhZFVpbnQzMihkYXRhLCBwICsgOCkgLSBzdGFydAogICAgICB9KTsKICAgICAgcCArPSAxMjsKICAgIH0KICAgIHJldHVybiByYW5nZXM7CiAgfQogIHRocm93IG5ldyBGb3JtYXRFcnJvcihgdW5zdXBwb3J0ZWQgY21hcDogJHtmb3JtYXR9YCk7Cn0KZnVuY3Rpb24gcGFyc2VDZmYoZGF0YSwgc3RhcnQsIGVuZCwgc2VhY0FuYWx5c2lzRW5hYmxlZCkgewogIGNvbnN0IHByb3BlcnRpZXMgPSB7fTsKICBjb25zdCBwYXJzZXIgPSBuZXcgQ0ZGUGFyc2VyKG5ldyBTdHJlYW0oZGF0YSwgc3RhcnQsIGVuZCAtIHN0YXJ0KSwgcHJvcGVydGllcywgc2VhY0FuYWx5c2lzRW5hYmxlZCk7CiAgY29uc3QgY2ZmID0gcGFyc2VyLnBhcnNlKCk7CiAgcmV0dXJuIHsKICAgIGdseXBoczogY2ZmLmNoYXJTdHJpbmdzLm9iamVjdHMsCiAgICBzdWJyczogY2ZmLnRvcERpY3QucHJpdmF0ZURpY3Q/LnN1YnJzSW5kZXg/Lm9iamVjdHMsCiAgICBnc3VicnM6IGNmZi5nbG9iYWxTdWJySW5kZXg/Lm9iamVjdHMsCiAgICBpc0NGRkNJREZvbnQ6IGNmZi5pc0NJREZvbnQsCiAgICBmZFNlbGVjdDogY2ZmLmZkU2VsZWN0LAogICAgZmRBcnJheTogY2ZmLmZkQXJyYXkKICB9Owp9CmZ1bmN0aW9uIHBhcnNlR2x5ZlRhYmxlKGdseWYsIGxvY2EsIGlzR2x5cGhMb2NhdGlvbnNMb25nKSB7CiAgbGV0IGl0ZW1TaXplLCBpdGVtRGVjb2RlOwogIGlmIChpc0dseXBoTG9jYXRpb25zTG9uZykgewogICAgaXRlbVNpemUgPSA0OwogICAgaXRlbURlY29kZSA9IHJlYWRVaW50MzI7CiAgfSBlbHNlIHsKICAgIGl0ZW1TaXplID0gMjsKICAgIGl0ZW1EZWNvZGUgPSAoZGF0YSwgb2Zmc2V0KSA9PiAyICogcmVhZFVpbnQxNihkYXRhLCBvZmZzZXQpOwogIH0KICBjb25zdCBnbHlwaHMgPSBbXTsKICBsZXQgc3RhcnRPZmZzZXQgPSBpdGVtRGVjb2RlKGxvY2EsIDApOwogIGZvciAobGV0IGogPSBpdGVtU2l6ZTsgaiA8IGxvY2EubGVuZ3RoOyBqICs9IGl0ZW1TaXplKSB7CiAgICBjb25zdCBlbmRPZmZzZXQgPSBpdGVtRGVjb2RlKGxvY2EsIGopOwogICAgZ2x5cGhzLnB1c2goZ2x5Zi5zdWJhcnJheShzdGFydE9mZnNldCwgZW5kT2Zmc2V0KSk7CiAgICBzdGFydE9mZnNldCA9IGVuZE9mZnNldDsKICB9CiAgcmV0dXJuIGdseXBoczsKfQpmdW5jdGlvbiBsb29rdXBDbWFwKHJhbmdlcywgdW5pY29kZSkgewogIGNvbnN0IGNvZGUgPSB1bmljb2RlLmNvZGVQb2ludEF0KDApOwogIGxldCBnaWQgPSAwLAogICAgbCA9IDAsCiAgICByID0gcmFuZ2VzLmxlbmd0aCAtIDE7CiAgd2hpbGUgKGwgPCByKSB7CiAgICBjb25zdCBjID0gbCArIHIgKyAxID4+IDE7CiAgICBpZiAoY29kZSA8IHJhbmdlc1tjXS5zdGFydCkgewogICAgICByID0gYyAtIDE7CiAgICB9IGVsc2UgewogICAgICBsID0gYzsKICAgIH0KICB9CiAgaWYgKHJhbmdlc1tsXS5zdGFydCA8PSBjb2RlICYmIGNvZGUgPD0gcmFuZ2VzW2xdLmVuZCkgewogICAgZ2lkID0gcmFuZ2VzW2xdLmlkRGVsdGEgKyAocmFuZ2VzW2xdLmlkcyA/IHJhbmdlc1tsXS5pZHNbY29kZSAtIHJhbmdlc1tsXS5zdGFydF0gOiBjb2RlKSAmIDB4ZmZmZjsKICB9CiAgcmV0dXJuIHsKICAgIGNoYXJDb2RlOiBjb2RlLAogICAgZ2x5cGhJZDogZ2lkCiAgfTsKfQpmdW5jdGlvbiBjb21waWxlR2x5Zihjb2RlLCBjbWRzLCBmb250KSB7CiAgZnVuY3Rpb24gbW92ZVRvKHgsIHkpIHsKICAgIGlmIChmaXJzdFBvaW50KSB7CiAgICAgIGNtZHMuYWRkKCJMIiwgZmlyc3RQb2ludCk7CiAgICB9CiAgICBmaXJzdFBvaW50ID0gW3gsIHldOwogICAgY21kcy5hZGQoIk0iLCBbeCwgeV0pOwogIH0KICBmdW5jdGlvbiBsaW5lVG8oeCwgeSkgewogICAgY21kcy5hZGQoIkwiLCBbeCwgeV0pOwogIH0KICBmdW5jdGlvbiBxdWFkcmF0aWNDdXJ2ZVRvKHhhLCB5YSwgeCwgeSkgewogICAgY21kcy5hZGQoIlEiLCBbeGEsIHlhLCB4LCB5XSk7CiAgfQogIGxldCBpID0gMDsKICBjb25zdCBudW1iZXJPZkNvbnRvdXJzID0gcmVhZEludDE2KGNvZGUsIGkpOwogIGxldCBmbGFnczsKICBsZXQgZmlyc3RQb2ludCA9IG51bGw7CiAgbGV0IHggPSAwLAogICAgeSA9IDA7CiAgaSArPSAxMDsKICBpZiAobnVtYmVyT2ZDb250b3VycyA8IDApIHsKICAgIGRvIHsKICAgICAgZmxhZ3MgPSByZWFkVWludDE2KGNvZGUsIGkpOwogICAgICBjb25zdCBnbHlwaEluZGV4ID0gcmVhZFVpbnQxNihjb2RlLCBpICsgMik7CiAgICAgIGkgKz0gNDsKICAgICAgbGV0IGFyZzEsIGFyZzI7CiAgICAgIGlmIChmbGFncyAmIDB4MDEpIHsKICAgICAgICBpZiAoZmxhZ3MgJiAweDAyKSB7CiAgICAgICAgICBhcmcxID0gcmVhZEludDE2KGNvZGUsIGkpOwogICAgICAgICAgYXJnMiA9IHJlYWRJbnQxNihjb2RlLCBpICsgMik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGFyZzEgPSByZWFkVWludDE2KGNvZGUsIGkpOwogICAgICAgICAgYXJnMiA9IHJlYWRVaW50MTYoY29kZSwgaSArIDIpOwogICAgICAgIH0KICAgICAgICBpICs9IDQ7CiAgICAgIH0gZWxzZSBpZiAoZmxhZ3MgJiAweDAyKSB7CiAgICAgICAgYXJnMSA9IHJlYWRJbnQ4KGNvZGUsIGkrKyk7CiAgICAgICAgYXJnMiA9IHJlYWRJbnQ4KGNvZGUsIGkrKyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgYXJnMSA9IGNvZGVbaSsrXTsKICAgICAgICBhcmcyID0gY29kZVtpKytdOwogICAgICB9CiAgICAgIGlmIChmbGFncyAmIDB4MDIpIHsKICAgICAgICB4ID0gYXJnMTsKICAgICAgICB5ID0gYXJnMjsKICAgICAgfSBlbHNlIHsKICAgICAgICB4ID0gMDsKICAgICAgICB5ID0gMDsKICAgICAgfQogICAgICBsZXQgc2NhbGVYID0gMSwKICAgICAgICBzY2FsZVkgPSAxLAogICAgICAgIHNjYWxlMDEgPSAwLAogICAgICAgIHNjYWxlMTAgPSAwOwogICAgICBpZiAoZmxhZ3MgJiAweDA4KSB7CiAgICAgICAgc2NhbGVYID0gc2NhbGVZID0gZ2V0RmxvYXQyMTQoY29kZSwgaSk7CiAgICAgICAgaSArPSAyOwogICAgICB9IGVsc2UgaWYgKGZsYWdzICYgMHg0MCkgewogICAgICAgIHNjYWxlWCA9IGdldEZsb2F0MjE0KGNvZGUsIGkpOwogICAgICAgIHNjYWxlWSA9IGdldEZsb2F0MjE0KGNvZGUsIGkgKyAyKTsKICAgICAgICBpICs9IDQ7CiAgICAgIH0gZWxzZSBpZiAoZmxhZ3MgJiAweDgwKSB7CiAgICAgICAgc2NhbGVYID0gZ2V0RmxvYXQyMTQoY29kZSwgaSk7CiAgICAgICAgc2NhbGUwMSA9IGdldEZsb2F0MjE0KGNvZGUsIGkgKyAyKTsKICAgICAgICBzY2FsZTEwID0gZ2V0RmxvYXQyMTQoY29kZSwgaSArIDQpOwogICAgICAgIHNjYWxlWSA9IGdldEZsb2F0MjE0KGNvZGUsIGkgKyA2KTsKICAgICAgICBpICs9IDg7CiAgICAgIH0KICAgICAgY29uc3Qgc3ViZ2x5cGggPSBmb250LmdseXBoc1tnbHlwaEluZGV4XTsKICAgICAgaWYgKHN1YmdseXBoKSB7CiAgICAgICAgY21kcy5zYXZlKCk7CiAgICAgICAgY21kcy50cmFuc2Zvcm0oW3NjYWxlWCwgc2NhbGUwMSwgc2NhbGUxMCwgc2NhbGVZLCB4LCB5XSk7CiAgICAgICAgaWYgKCEoZmxhZ3MgJiAweDAyKSkge30KICAgICAgICBjb21waWxlR2x5ZihzdWJnbHlwaCwgY21kcywgZm9udCk7CiAgICAgICAgY21kcy5yZXN0b3JlKCk7CiAgICAgIH0KICAgIH0gd2hpbGUgKGZsYWdzICYgMHgyMCk7CiAgfSBlbHNlIHsKICAgIGNvbnN0IGVuZFB0c09mQ29udG91cnMgPSBbXTsKICAgIGxldCBqLCBqajsKICAgIGZvciAoaiA9IDA7IGogPCBudW1iZXJPZkNvbnRvdXJzOyBqKyspIHsKICAgICAgZW5kUHRzT2ZDb250b3Vycy5wdXNoKHJlYWRVaW50MTYoY29kZSwgaSkpOwogICAgICBpICs9IDI7CiAgICB9CiAgICBjb25zdCBpbnN0cnVjdGlvbkxlbmd0aCA9IHJlYWRVaW50MTYoY29kZSwgaSk7CiAgICBpICs9IDIgKyBpbnN0cnVjdGlvbkxlbmd0aDsKICAgIGNvbnN0IG51bWJlck9mUG9pbnRzID0gZW5kUHRzT2ZDb250b3Vycy5hdCgtMSkgKyAxOwogICAgY29uc3QgcG9pbnRzID0gW107CiAgICB3aGlsZSAocG9pbnRzLmxlbmd0aCA8IG51bWJlck9mUG9pbnRzKSB7CiAgICAgIGZsYWdzID0gY29kZVtpKytdOwogICAgICBsZXQgcmVwZWF0ID0gMTsKICAgICAgaWYgKGZsYWdzICYgMHgwOCkgewogICAgICAgIHJlcGVhdCArPSBjb2RlW2krK107CiAgICAgIH0KICAgICAgd2hpbGUgKHJlcGVhdC0tID4gMCkgewogICAgICAgIHBvaW50cy5wdXNoKHsKICAgICAgICAgIGZsYWdzCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KICAgIGZvciAoaiA9IDA7IGogPCBudW1iZXJPZlBvaW50czsgaisrKSB7CiAgICAgIHN3aXRjaCAocG9pbnRzW2pdLmZsYWdzICYgMHgxMikgewogICAgICAgIGNhc2UgMHgwMDoKICAgICAgICAgIHggKz0gcmVhZEludDE2KGNvZGUsIGkpOwogICAgICAgICAgaSArPSAyOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAweDAyOgogICAgICAgICAgeCAtPSBjb2RlW2krK107CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIDB4MTI6CiAgICAgICAgICB4ICs9IGNvZGVbaSsrXTsKICAgICAgICAgIGJyZWFrOwogICAgICB9CiAgICAgIHBvaW50c1tqXS54ID0geDsKICAgIH0KICAgIGZvciAoaiA9IDA7IGogPCBudW1iZXJPZlBvaW50czsgaisrKSB7CiAgICAgIHN3aXRjaCAocG9pbnRzW2pdLmZsYWdzICYgMHgyNCkgewogICAgICAgIGNhc2UgMHgwMDoKICAgICAgICAgIHkgKz0gcmVhZEludDE2KGNvZGUsIGkpOwogICAgICAgICAgaSArPSAyOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAweDA0OgogICAgICAgICAgeSAtPSBjb2RlW2krK107CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIDB4MjQ6CiAgICAgICAgICB5ICs9IGNvZGVbaSsrXTsKICAgICAgICAgIGJyZWFrOwogICAgICB9CiAgICAgIHBvaW50c1tqXS55ID0geTsKICAgIH0KICAgIGxldCBzdGFydFBvaW50ID0gMDsKICAgIGZvciAoaSA9IDA7IGkgPCBudW1iZXJPZkNvbnRvdXJzOyBpKyspIHsKICAgICAgY29uc3QgZW5kUG9pbnQgPSBlbmRQdHNPZkNvbnRvdXJzW2ldOwogICAgICBjb25zdCBjb250b3VyID0gcG9pbnRzLnNsaWNlKHN0YXJ0UG9pbnQsIGVuZFBvaW50ICsgMSk7CiAgICAgIGlmIChjb250b3VyWzBdLmZsYWdzICYgMSkgewogICAgICAgIGNvbnRvdXIucHVzaChjb250b3VyWzBdKTsKICAgICAgfSBlbHNlIGlmIChjb250b3VyLmF0KC0xKS5mbGFncyAmIDEpIHsKICAgICAgICBjb250b3VyLnVuc2hpZnQoY29udG91ci5hdCgtMSkpOwogICAgICB9IGVsc2UgewogICAgICAgIGNvbnN0IHAgPSB7CiAgICAgICAgICBmbGFnczogMSwKICAgICAgICAgIHg6IChjb250b3VyWzBdLnggKyBjb250b3VyLmF0KC0xKS54KSAvIDIsCiAgICAgICAgICB5OiAoY29udG91clswXS55ICsgY29udG91ci5hdCgtMSkueSkgLyAyCiAgICAgICAgfTsKICAgICAgICBjb250b3VyLnVuc2hpZnQocCk7CiAgICAgICAgY29udG91ci5wdXNoKHApOwogICAgICB9CiAgICAgIG1vdmVUbyhjb250b3VyWzBdLngsIGNvbnRvdXJbMF0ueSk7CiAgICAgIGZvciAoaiA9IDEsIGpqID0gY29udG91ci5sZW5ndGg7IGogPCBqajsgaisrKSB7CiAgICAgICAgaWYgKGNvbnRvdXJbal0uZmxhZ3MgJiAxKSB7CiAgICAgICAgICBsaW5lVG8oY29udG91cltqXS54LCBjb250b3VyW2pdLnkpOwogICAgICAgIH0gZWxzZSBpZiAoY29udG91cltqICsgMV0uZmxhZ3MgJiAxKSB7CiAgICAgICAgICBxdWFkcmF0aWNDdXJ2ZVRvKGNvbnRvdXJbal0ueCwgY29udG91cltqXS55LCBjb250b3VyW2ogKyAxXS54LCBjb250b3VyW2ogKyAxXS55KTsKICAgICAgICAgIGorKzsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcXVhZHJhdGljQ3VydmVUbyhjb250b3VyW2pdLngsIGNvbnRvdXJbal0ueSwgKGNvbnRvdXJbal0ueCArIGNvbnRvdXJbaiArIDFdLngpIC8gMiwgKGNvbnRvdXJbal0ueSArIGNvbnRvdXJbaiArIDFdLnkpIC8gMik7CiAgICAgICAgfQogICAgICB9CiAgICAgIHN0YXJ0UG9pbnQgPSBlbmRQb2ludCArIDE7CiAgICB9CiAgfQp9CmZ1bmN0aW9uIGNvbXBpbGVDaGFyU3RyaW5nKGNoYXJTdHJpbmdDb2RlLCBjbWRzLCBmb250LCBnbHlwaElkKSB7CiAgZnVuY3Rpb24gbW92ZVRvKHgsIHkpIHsKICAgIGlmIChmaXJzdFBvaW50KSB7CiAgICAgIGNtZHMuYWRkKCJMIiwgZmlyc3RQb2ludCk7CiAgICB9CiAgICBmaXJzdFBvaW50ID0gW3gsIHldOwogICAgY21kcy5hZGQoIk0iLCBbeCwgeV0pOwogIH0KICBmdW5jdGlvbiBsaW5lVG8oeCwgeSkgewogICAgY21kcy5hZGQoIkwiLCBbeCwgeV0pOwogIH0KICBmdW5jdGlvbiBiZXppZXJDdXJ2ZVRvKHgxLCB5MSwgeDIsIHkyLCB4LCB5KSB7CiAgICBjbWRzLmFkZCgiQyIsIFt4MSwgeTEsIHgyLCB5MiwgeCwgeV0pOwogIH0KICBjb25zdCBzdGFjayA9IFtdOwogIGxldCB4ID0gMCwKICAgIHkgPSAwOwogIGxldCBzdGVtcyA9IDA7CiAgbGV0IGZpcnN0UG9pbnQgPSBudWxsOwogIGZ1bmN0aW9uIHBhcnNlKGNvZGUpIHsKICAgIGxldCBpID0gMDsKICAgIHdoaWxlIChpIDwgY29kZS5sZW5ndGgpIHsKICAgICAgbGV0IHN0YWNrQ2xlYW4gPSBmYWxzZTsKICAgICAgbGV0IHYgPSBjb2RlW2krK107CiAgICAgIGxldCB4YSwgeGIsIHlhLCB5YiwgeTEsIHkyLCB5Mywgbiwgc3VickNvZGU7CiAgICAgIHN3aXRjaCAodikgewogICAgICAgIGNhc2UgMToKICAgICAgICAgIHN0ZW1zICs9IHN0YWNrLmxlbmd0aCA+PiAxOwogICAgICAgICAgc3RhY2tDbGVhbiA9IHRydWU7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIDM6CiAgICAgICAgICBzdGVtcyArPSBzdGFjay5sZW5ndGggPj4gMTsKICAgICAgICAgIHN0YWNrQ2xlYW4gPSB0cnVlOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSA0OgogICAgICAgICAgeSArPSBzdGFjay5wb3AoKTsKICAgICAgICAgIG1vdmVUbyh4LCB5KTsKICAgICAgICAgIHN0YWNrQ2xlYW4gPSB0cnVlOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSA1OgogICAgICAgICAgd2hpbGUgKHN0YWNrLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgeCArPSBzdGFjay5zaGlmdCgpOwogICAgICAgICAgICB5ICs9IHN0YWNrLnNoaWZ0KCk7CiAgICAgICAgICAgIGxpbmVUbyh4LCB5KTsKICAgICAgICAgIH0KICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgNjoKICAgICAgICAgIHdoaWxlIChzdGFjay5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIHggKz0gc3RhY2suc2hpZnQoKTsKICAgICAgICAgICAgbGluZVRvKHgsIHkpOwogICAgICAgICAgICBpZiAoc3RhY2subGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgeSArPSBzdGFjay5zaGlmdCgpOwogICAgICAgICAgICBsaW5lVG8oeCwgeSk7CiAgICAgICAgICB9CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIDc6CiAgICAgICAgICB3aGlsZSAoc3RhY2subGVuZ3RoID4gMCkgewogICAgICAgICAgICB5ICs9IHN0YWNrLnNoaWZ0KCk7CiAgICAgICAgICAgIGxpbmVUbyh4LCB5KTsKICAgICAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHggKz0gc3RhY2suc2hpZnQoKTsKICAgICAgICAgICAgbGluZVRvKHgsIHkpOwogICAgICAgICAgfQogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSA4OgogICAgICAgICAgd2hpbGUgKHN0YWNrLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgeGEgPSB4ICsgc3RhY2suc2hpZnQoKTsKICAgICAgICAgICAgeWEgPSB5ICsgc3RhY2suc2hpZnQoKTsKICAgICAgICAgICAgeGIgPSB4YSArIHN0YWNrLnNoaWZ0KCk7CiAgICAgICAgICAgIHliID0geWEgKyBzdGFjay5zaGlmdCgpOwogICAgICAgICAgICB4ID0geGIgKyBzdGFjay5zaGlmdCgpOwogICAgICAgICAgICB5ID0geWIgKyBzdGFjay5zaGlmdCgpOwogICAgICAgICAgICBiZXppZXJDdXJ2ZVRvKHhhLCB5YSwgeGIsIHliLCB4LCB5KTsKICAgICAgICAgIH0KICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgMTA6CiAgICAgICAgICBuID0gc3RhY2sucG9wKCk7CiAgICAgICAgICBzdWJyQ29kZSA9IG51bGw7CiAgICAgICAgICBpZiAoZm9udC5pc0NGRkNJREZvbnQpIHsKICAgICAgICAgICAgY29uc3QgZmRJbmRleCA9IGZvbnQuZmRTZWxlY3QuZ2V0RkRJbmRleChnbHlwaElkKTsKICAgICAgICAgICAgaWYgKGZkSW5kZXggPj0gMCAmJiBmZEluZGV4IDwgZm9udC5mZEFycmF5Lmxlbmd0aCkgewogICAgICAgICAgICAgIGNvbnN0IGZvbnREaWN0ID0gZm9udC5mZEFycmF5W2ZkSW5kZXhdOwogICAgICAgICAgICAgIGxldCBzdWJyczsKICAgICAgICAgICAgICBpZiAoZm9udERpY3QucHJpdmF0ZURpY3Q/LnN1YnJzSW5kZXgpIHsKICAgICAgICAgICAgICAgIHN1YnJzID0gZm9udERpY3QucHJpdmF0ZURpY3Quc3VicnNJbmRleC5vYmplY3RzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAoc3VicnMpIHsKICAgICAgICAgICAgICAgIG4gKz0gZ2V0U3Vicm91dGluZUJpYXMoc3VicnMpOwogICAgICAgICAgICAgICAgc3VickNvZGUgPSBzdWJyc1tuXTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgd2FybigiSW52YWxpZCBmZCBpbmRleCBmb3IgZ2x5cGggaW5kZXguIik7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHN1YnJDb2RlID0gZm9udC5zdWJyc1tuICsgZm9udC5zdWJyc0JpYXNdOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHN1YnJDb2RlKSB7CiAgICAgICAgICAgIHBhcnNlKHN1YnJDb2RlKTsKICAgICAgICAgIH0KICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgMTE6CiAgICAgICAgICByZXR1cm47CiAgICAgICAgY2FzZSAxMjoKICAgICAgICAgIHYgPSBjb2RlW2krK107CiAgICAgICAgICBzd2l0Y2ggKHYpIHsKICAgICAgICAgICAgY2FzZSAzNDoKICAgICAgICAgICAgICB4YSA9IHggKyBzdGFjay5zaGlmdCgpOwogICAgICAgICAgICAgIHhiID0geGEgKyBzdGFjay5zaGlmdCgpOwogICAgICAgICAgICAgIHkxID0geSArIHN0YWNrLnNoaWZ0KCk7CiAgICAgICAgICAgICAgeCA9IHhiICsgc3RhY2suc2hpZnQoKTsKICAgICAgICAgICAgICBiZXppZXJDdXJ2ZVRvKHhhLCB5LCB4YiwgeTEsIHgsIHkxKTsKICAgICAgICAgICAgICB4YSA9IHggKyBzdGFjay5zaGlmdCgpOwogICAgICAgICAgICAgIHhiID0geGEgKyBzdGFjay5zaGlmdCgpOwogICAgICAgICAgICAgIHggPSB4YiArIHN0YWNrLnNoaWZ0KCk7CiAgICAgICAgICAgICAgYmV6aWVyQ3VydmVUbyh4YSwgeTEsIHhiLCB5LCB4LCB5KTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAzNToKICAgICAgICAgICAgICB4YSA9IHggKyBzdGFjay5zaGlmdCgpOwogICAgICAgICAgICAgIHlhID0geSArIHN0YWNrLnNoaWZ0KCk7CiAgICAgICAgICAgICAgeGIgPSB4YSArIHN0YWNrLnNoaWZ0KCk7CiAgICAgICAgICAgICAgeWIgPSB5YSArIHN0YWNrLnNoaWZ0KCk7CiAgICAgICAgICAgICAgeCA9IHhiICsgc3RhY2suc2hpZnQoKTsKICAgICAgICAgICAgICB5ID0geWIgKyBzdGFjay5zaGlmdCgpOwogICAgICAgICAgICAgIGJlemllckN1cnZlVG8oeGEsIHlhLCB4YiwgeWIsIHgsIHkpOwogICAgICAgICAgICAgIHhhID0geCArIHN0YWNrLnNoaWZ0KCk7CiAgICAgICAgICAgICAgeWEgPSB5ICsgc3RhY2suc2hpZnQoKTsKICAgICAgICAgICAgICB4YiA9IHhhICsgc3RhY2suc2hpZnQoKTsKICAgICAgICAgICAgICB5YiA9IHlhICsgc3RhY2suc2hpZnQoKTsKICAgICAgICAgICAgICB4ID0geGIgKyBzdGFjay5zaGlmdCgpOwogICAgICAgICAgICAgIHkgPSB5YiArIHN0YWNrLnNoaWZ0KCk7CiAgICAgICAgICAgICAgYmV6aWVyQ3VydmVUbyh4YSwgeWEsIHhiLCB5YiwgeCwgeSk7CiAgICAgICAgICAgICAgc3RhY2sucG9wKCk7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgMzY6CiAgICAgICAgICAgICAgeGEgPSB4ICsgc3RhY2suc2hpZnQoKTsKICAgICAgICAgICAgICB5MSA9IHkgKyBzdGFjay5zaGlmdCgpOwogICAgICAgICAgICAgIHhiID0geGEgKyBzdGFjay5zaGlmdCgpOwogICAgICAgICAgICAgIHkyID0geTEgKyBzdGFjay5zaGlmdCgpOwogICAgICAgICAgICAgIHggPSB4YiArIHN0YWNrLnNoaWZ0KCk7CiAgICAgICAgICAgICAgYmV6aWVyQ3VydmVUbyh4YSwgeTEsIHhiLCB5MiwgeCwgeTIpOwogICAgICAgICAgICAgIHhhID0geCArIHN0YWNrLnNoaWZ0KCk7CiAgICAgICAgICAgICAgeGIgPSB4YSArIHN0YWNrLnNoaWZ0KCk7CiAgICAgICAgICAgICAgeTMgPSB5MiArIHN0YWNrLnNoaWZ0KCk7CiAgICAgICAgICAgICAgeCA9IHhiICsgc3RhY2suc2hpZnQoKTsKICAgICAgICAgICAgICBiZXppZXJDdXJ2ZVRvKHhhLCB5MiwgeGIsIHkzLCB4LCB5KTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAzNzoKICAgICAgICAgICAgICBjb25zdCB4MCA9IHgsCiAgICAgICAgICAgICAgICB5MCA9IHk7CiAgICAgICAgICAgICAgeGEgPSB4ICsgc3RhY2suc2hpZnQoKTsKICAgICAgICAgICAgICB5YSA9IHkgKyBzdGFjay5zaGlmdCgpOwogICAgICAgICAgICAgIHhiID0geGEgKyBzdGFjay5zaGlmdCgpOwogICAgICAgICAgICAgIHliID0geWEgKyBzdGFjay5zaGlmdCgpOwogICAgICAgICAgICAgIHggPSB4YiArIHN0YWNrLnNoaWZ0KCk7CiAgICAgICAgICAgICAgeSA9IHliICsgc3RhY2suc2hpZnQoKTsKICAgICAgICAgICAgICBiZXppZXJDdXJ2ZVRvKHhhLCB5YSwgeGIsIHliLCB4LCB5KTsKICAgICAgICAgICAgICB4YSA9IHggKyBzdGFjay5zaGlmdCgpOwogICAgICAgICAgICAgIHlhID0geSArIHN0YWNrLnNoaWZ0KCk7CiAgICAgICAgICAgICAgeGIgPSB4YSArIHN0YWNrLnNoaWZ0KCk7CiAgICAgICAgICAgICAgeWIgPSB5YSArIHN0YWNrLnNoaWZ0KCk7CiAgICAgICAgICAgICAgeCA9IHhiOwogICAgICAgICAgICAgIHkgPSB5YjsKICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMoeCAtIHgwKSA+IE1hdGguYWJzKHkgLSB5MCkpIHsKICAgICAgICAgICAgICAgIHggKz0gc3RhY2suc2hpZnQoKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgeSArPSBzdGFjay5zaGlmdCgpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBiZXppZXJDdXJ2ZVRvKHhhLCB5YSwgeGIsIHliLCB4LCB5KTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoYHVua25vd24gb3BlcmF0b3I6IDEyICR7dn1gKTsKICAgICAgICAgIH0KICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgMTQ6CiAgICAgICAgICBpZiAoc3RhY2subGVuZ3RoID49IDQpIHsKICAgICAgICAgICAgY29uc3QgYWNoYXIgPSBzdGFjay5wb3AoKTsKICAgICAgICAgICAgY29uc3QgYmNoYXIgPSBzdGFjay5wb3AoKTsKICAgICAgICAgICAgeSA9IHN0YWNrLnBvcCgpOwogICAgICAgICAgICB4ID0gc3RhY2sucG9wKCk7CiAgICAgICAgICAgIGNtZHMuc2F2ZSgpOwogICAgICAgICAgICBjbWRzLnRyYW5zbGF0ZSh4LCB5KTsKICAgICAgICAgICAgbGV0IGNtYXAgPSBsb29rdXBDbWFwKGZvbnQuY21hcCwgU3RyaW5nLmZyb21DaGFyQ29kZShmb250LmdseXBoTmFtZU1hcFtTdGFuZGFyZEVuY29kaW5nW2FjaGFyXV0pKTsKICAgICAgICAgICAgY29tcGlsZUNoYXJTdHJpbmcoZm9udC5nbHlwaHNbY21hcC5nbHlwaElkXSwgY21kcywgZm9udCwgY21hcC5nbHlwaElkKTsKICAgICAgICAgICAgY21kcy5yZXN0b3JlKCk7CiAgICAgICAgICAgIGNtYXAgPSBsb29rdXBDbWFwKGZvbnQuY21hcCwgU3RyaW5nLmZyb21DaGFyQ29kZShmb250LmdseXBoTmFtZU1hcFtTdGFuZGFyZEVuY29kaW5nW2JjaGFyXV0pKTsKICAgICAgICAgICAgY29tcGlsZUNoYXJTdHJpbmcoZm9udC5nbHlwaHNbY21hcC5nbHlwaElkXSwgY21kcywgZm9udCwgY21hcC5nbHlwaElkKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybjsKICAgICAgICBjYXNlIDE4OgogICAgICAgICAgc3RlbXMgKz0gc3RhY2subGVuZ3RoID4+IDE7CiAgICAgICAgICBzdGFja0NsZWFuID0gdHJ1ZTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgMTk6CiAgICAgICAgICBzdGVtcyArPSBzdGFjay5sZW5ndGggPj4gMTsKICAgICAgICAgIGkgKz0gc3RlbXMgKyA3ID4+IDM7CiAgICAgICAgICBzdGFja0NsZWFuID0gdHJ1ZTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgMjA6CiAgICAgICAgICBzdGVtcyArPSBzdGFjay5sZW5ndGggPj4gMTsKICAgICAgICAgIGkgKz0gc3RlbXMgKyA3ID4+IDM7CiAgICAgICAgICBzdGFja0NsZWFuID0gdHJ1ZTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgMjE6CiAgICAgICAgICB5ICs9IHN0YWNrLnBvcCgpOwogICAgICAgICAgeCArPSBzdGFjay5wb3AoKTsKICAgICAgICAgIG1vdmVUbyh4LCB5KTsKICAgICAgICAgIHN0YWNrQ2xlYW4gPSB0cnVlOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAyMjoKICAgICAgICAgIHggKz0gc3RhY2sucG9wKCk7CiAgICAgICAgICBtb3ZlVG8oeCwgeSk7CiAgICAgICAgICBzdGFja0NsZWFuID0gdHJ1ZTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgMjM6CiAgICAgICAgICBzdGVtcyArPSBzdGFjay5sZW5ndGggPj4gMTsKICAgICAgICAgIHN0YWNrQ2xlYW4gPSB0cnVlOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAyNDoKICAgICAgICAgIHdoaWxlIChzdGFjay5sZW5ndGggPiAyKSB7CiAgICAgICAgICAgIHhhID0geCArIHN0YWNrLnNoaWZ0KCk7CiAgICAgICAgICAgIHlhID0geSArIHN0YWNrLnNoaWZ0KCk7CiAgICAgICAgICAgIHhiID0geGEgKyBzdGFjay5zaGlmdCgpOwogICAgICAgICAgICB5YiA9IHlhICsgc3RhY2suc2hpZnQoKTsKICAgICAgICAgICAgeCA9IHhiICsgc3RhY2suc2hpZnQoKTsKICAgICAgICAgICAgeSA9IHliICsgc3RhY2suc2hpZnQoKTsKICAgICAgICAgICAgYmV6aWVyQ3VydmVUbyh4YSwgeWEsIHhiLCB5YiwgeCwgeSk7CiAgICAgICAgICB9CiAgICAgICAgICB4ICs9IHN0YWNrLnNoaWZ0KCk7CiAgICAgICAgICB5ICs9IHN0YWNrLnNoaWZ0KCk7CiAgICAgICAgICBsaW5lVG8oeCwgeSk7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIDI1OgogICAgICAgICAgd2hpbGUgKHN0YWNrLmxlbmd0aCA+IDYpIHsKICAgICAgICAgICAgeCArPSBzdGFjay5zaGlmdCgpOwogICAgICAgICAgICB5ICs9IHN0YWNrLnNoaWZ0KCk7CiAgICAgICAgICAgIGxpbmVUbyh4LCB5KTsKICAgICAgICAgIH0KICAgICAgICAgIHhhID0geCArIHN0YWNrLnNoaWZ0KCk7CiAgICAgICAgICB5YSA9IHkgKyBzdGFjay5zaGlmdCgpOwogICAgICAgICAgeGIgPSB4YSArIHN0YWNrLnNoaWZ0KCk7CiAgICAgICAgICB5YiA9IHlhICsgc3RhY2suc2hpZnQoKTsKICAgICAgICAgIHggPSB4YiArIHN0YWNrLnNoaWZ0KCk7CiAgICAgICAgICB5ID0geWIgKyBzdGFjay5zaGlmdCgpOwogICAgICAgICAgYmV6aWVyQ3VydmVUbyh4YSwgeWEsIHhiLCB5YiwgeCwgeSk7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIDI2OgogICAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCAlIDIpIHsKICAgICAgICAgICAgeCArPSBzdGFjay5zaGlmdCgpOwogICAgICAgICAgfQogICAgICAgICAgd2hpbGUgKHN0YWNrLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgeGEgPSB4OwogICAgICAgICAgICB5YSA9IHkgKyBzdGFjay5zaGlmdCgpOwogICAgICAgICAgICB4YiA9IHhhICsgc3RhY2suc2hpZnQoKTsKICAgICAgICAgICAgeWIgPSB5YSArIHN0YWNrLnNoaWZ0KCk7CiAgICAgICAgICAgIHggPSB4YjsKICAgICAgICAgICAgeSA9IHliICsgc3RhY2suc2hpZnQoKTsKICAgICAgICAgICAgYmV6aWVyQ3VydmVUbyh4YSwgeWEsIHhiLCB5YiwgeCwgeSk7CiAgICAgICAgICB9CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIDI3OgogICAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCAlIDIpIHsKICAgICAgICAgICAgeSArPSBzdGFjay5zaGlmdCgpOwogICAgICAgICAgfQogICAgICAgICAgd2hpbGUgKHN0YWNrLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgeGEgPSB4ICsgc3RhY2suc2hpZnQoKTsKICAgICAgICAgICAgeWEgPSB5OwogICAgICAgICAgICB4YiA9IHhhICsgc3RhY2suc2hpZnQoKTsKICAgICAgICAgICAgeWIgPSB5YSArIHN0YWNrLnNoaWZ0KCk7CiAgICAgICAgICAgIHggPSB4YiArIHN0YWNrLnNoaWZ0KCk7CiAgICAgICAgICAgIHkgPSB5YjsKICAgICAgICAgICAgYmV6aWVyQ3VydmVUbyh4YSwgeWEsIHhiLCB5YiwgeCwgeSk7CiAgICAgICAgICB9CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIDI4OgogICAgICAgICAgc3RhY2sucHVzaChyZWFkSW50MTYoY29kZSwgaSkpOwogICAgICAgICAgaSArPSAyOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAyOToKICAgICAgICAgIG4gPSBzdGFjay5wb3AoKSArIGZvbnQuZ3N1YnJzQmlhczsKICAgICAgICAgIHN1YnJDb2RlID0gZm9udC5nc3VicnNbbl07CiAgICAgICAgICBpZiAoc3VickNvZGUpIHsKICAgICAgICAgICAgcGFyc2Uoc3VickNvZGUpOwogICAgICAgICAgfQogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAzMDoKICAgICAgICAgIHdoaWxlIChzdGFjay5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIHhhID0geDsKICAgICAgICAgICAgeWEgPSB5ICsgc3RhY2suc2hpZnQoKTsKICAgICAgICAgICAgeGIgPSB4YSArIHN0YWNrLnNoaWZ0KCk7CiAgICAgICAgICAgIHliID0geWEgKyBzdGFjay5zaGlmdCgpOwogICAgICAgICAgICB4ID0geGIgKyBzdGFjay5zaGlmdCgpOwogICAgICAgICAgICB5ID0geWIgKyAoc3RhY2subGVuZ3RoID09PSAxID8gc3RhY2suc2hpZnQoKSA6IDApOwogICAgICAgICAgICBiZXppZXJDdXJ2ZVRvKHhhLCB5YSwgeGIsIHliLCB4LCB5KTsKICAgICAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHhhID0geCArIHN0YWNrLnNoaWZ0KCk7CiAgICAgICAgICAgIHlhID0geTsKICAgICAgICAgICAgeGIgPSB4YSArIHN0YWNrLnNoaWZ0KCk7CiAgICAgICAgICAgIHliID0geWEgKyBzdGFjay5zaGlmdCgpOwogICAgICAgICAgICB5ID0geWIgKyBzdGFjay5zaGlmdCgpOwogICAgICAgICAgICB4ID0geGIgKyAoc3RhY2subGVuZ3RoID09PSAxID8gc3RhY2suc2hpZnQoKSA6IDApOwogICAgICAgICAgICBiZXppZXJDdXJ2ZVRvKHhhLCB5YSwgeGIsIHliLCB4LCB5KTsKICAgICAgICAgIH0KICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgMzE6CiAgICAgICAgICB3aGlsZSAoc3RhY2subGVuZ3RoID4gMCkgewogICAgICAgICAgICB4YSA9IHggKyBzdGFjay5zaGlmdCgpOwogICAgICAgICAgICB5YSA9IHk7CiAgICAgICAgICAgIHhiID0geGEgKyBzdGFjay5zaGlmdCgpOwogICAgICAgICAgICB5YiA9IHlhICsgc3RhY2suc2hpZnQoKTsKICAgICAgICAgICAgeSA9IHliICsgc3RhY2suc2hpZnQoKTsKICAgICAgICAgICAgeCA9IHhiICsgKHN0YWNrLmxlbmd0aCA9PT0gMSA/IHN0YWNrLnNoaWZ0KCkgOiAwKTsKICAgICAgICAgICAgYmV6aWVyQ3VydmVUbyh4YSwgeWEsIHhiLCB5YiwgeCwgeSk7CiAgICAgICAgICAgIGlmIChzdGFjay5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICB4YSA9IHg7CiAgICAgICAgICAgIHlhID0geSArIHN0YWNrLnNoaWZ0KCk7CiAgICAgICAgICAgIHhiID0geGEgKyBzdGFjay5zaGlmdCgpOwogICAgICAgICAgICB5YiA9IHlhICsgc3RhY2suc2hpZnQoKTsKICAgICAgICAgICAgeCA9IHhiICsgc3RhY2suc2hpZnQoKTsKICAgICAgICAgICAgeSA9IHliICsgKHN0YWNrLmxlbmd0aCA9PT0gMSA/IHN0YWNrLnNoaWZ0KCkgOiAwKTsKICAgICAgICAgICAgYmV6aWVyQ3VydmVUbyh4YSwgeWEsIHhiLCB5YiwgeCwgeSk7CiAgICAgICAgICB9CiAgICAgICAgICBicmVhazsKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgaWYgKHYgPCAzMikgewogICAgICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoYHVua25vd24gb3BlcmF0b3I6ICR7dn1gKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh2IDwgMjQ3KSB7CiAgICAgICAgICAgIHN0YWNrLnB1c2godiAtIDEzOSk7CiAgICAgICAgICB9IGVsc2UgaWYgKHYgPCAyNTEpIHsKICAgICAgICAgICAgc3RhY2sucHVzaCgodiAtIDI0NykgKiAyNTYgKyBjb2RlW2krK10gKyAxMDgpOwogICAgICAgICAgfSBlbHNlIGlmICh2IDwgMjU1KSB7CiAgICAgICAgICAgIHN0YWNrLnB1c2goLSh2IC0gMjUxKSAqIDI1NiAtIGNvZGVbaSsrXSAtIDEwOCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBzdGFjay5wdXNoKChjb2RlW2ldIDw8IDI0IHwgY29kZVtpICsgMV0gPDwgMTYgfCBjb2RlW2kgKyAyXSA8PCA4IHwgY29kZVtpICsgM10pIC8gNjU1MzYpOwogICAgICAgICAgICBpICs9IDQ7CiAgICAgICAgICB9CiAgICAgICAgICBicmVhazsKICAgICAgfQogICAgICBpZiAoc3RhY2tDbGVhbikgewogICAgICAgIHN0YWNrLmxlbmd0aCA9IDA7CiAgICAgIH0KICAgIH0KICB9CiAgcGFyc2UoY2hhclN0cmluZ0NvZGUpOwp9CmNvbnN0IE5PT1AgPSAiIjsKY2xhc3MgQ29tbWFuZHMgewogIGNtZHMgPSBbXTsKICB0cmFuc2Zvcm1TdGFjayA9IFtdOwogIGN1cnJlbnRUcmFuc2Zvcm0gPSBbMSwgMCwgMCwgMSwgMCwgMF07CiAgYWRkKGNtZCwgYXJncykgewogICAgaWYgKGFyZ3MpIHsKICAgICAgY29uc3QgewogICAgICAgIGN1cnJlbnRUcmFuc2Zvcm0KICAgICAgfSA9IHRoaXM7CiAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGFyZ3MubGVuZ3RoOyBpIDwgaWk7IGkgKz0gMikgewogICAgICAgIFV0aWwuYXBwbHlUcmFuc2Zvcm0oYXJncywgY3VycmVudFRyYW5zZm9ybSwgaSk7CiAgICAgIH0KICAgICAgdGhpcy5jbWRzLnB1c2goYCR7Y21kfSR7YXJncy5qb2luKCIgIil9YCk7CiAgICB9IGVsc2UgewogICAgICB0aGlzLmNtZHMucHVzaChjbWQpOwogICAgfQogIH0KICB0cmFuc2Zvcm0odHJhbnNmKSB7CiAgICB0aGlzLmN1cnJlbnRUcmFuc2Zvcm0gPSBVdGlsLnRyYW5zZm9ybSh0aGlzLmN1cnJlbnRUcmFuc2Zvcm0sIHRyYW5zZik7CiAgfQogIHRyYW5zbGF0ZSh4LCB5KSB7CiAgICB0aGlzLnRyYW5zZm9ybShbMSwgMCwgMCwgMSwgeCwgeV0pOwogIH0KICBzYXZlKCkgewogICAgdGhpcy50cmFuc2Zvcm1TdGFjay5wdXNoKHRoaXMuY3VycmVudFRyYW5zZm9ybS5zbGljZSgpKTsKICB9CiAgcmVzdG9yZSgpIHsKICAgIHRoaXMuY3VycmVudFRyYW5zZm9ybSA9IHRoaXMudHJhbnNmb3JtU3RhY2sucG9wKCkgfHwgWzEsIDAsIDAsIDEsIDAsIDBdOwogIH0KICBnZXRTVkcoKSB7CiAgICByZXR1cm4gdGhpcy5jbWRzLmpvaW4oIiIpOwogIH0KfQpjbGFzcyBDb21waWxlZEZvbnQgewogIGNvbnN0cnVjdG9yKGZvbnRNYXRyaXgpIHsKICAgIHRoaXMuZm9udE1hdHJpeCA9IGZvbnRNYXRyaXg7CiAgICB0aGlzLmNvbXBpbGVkR2x5cGhzID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgIHRoaXMuY29tcGlsZWRDaGFyQ29kZVRvR2x5cGhJZCA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgfQogIGdldFBhdGhKcyh1bmljb2RlKSB7CiAgICBjb25zdCB7CiAgICAgIGNoYXJDb2RlLAogICAgICBnbHlwaElkCiAgICB9ID0gbG9va3VwQ21hcCh0aGlzLmNtYXAsIHVuaWNvZGUpOwogICAgbGV0IGZuID0gdGhpcy5jb21waWxlZEdseXBoc1tnbHlwaElkXSwKICAgICAgY29tcGlsZUV4OwogICAgaWYgKGZuID09PSB1bmRlZmluZWQpIHsKICAgICAgdHJ5IHsKICAgICAgICBmbiA9IHRoaXMuY29tcGlsZUdseXBoKHRoaXMuZ2x5cGhzW2dseXBoSWRdLCBnbHlwaElkKTsKICAgICAgfSBjYXRjaCAoZXgpIHsKICAgICAgICBmbiA9IE5PT1A7CiAgICAgICAgY29tcGlsZUV4ID0gZXg7CiAgICAgIH0KICAgICAgdGhpcy5jb21waWxlZEdseXBoc1tnbHlwaElkXSA9IGZuOwogICAgfQogICAgdGhpcy5jb21waWxlZENoYXJDb2RlVG9HbHlwaElkW2NoYXJDb2RlXSA/Pz0gZ2x5cGhJZDsKICAgIGlmIChjb21waWxlRXgpIHsKICAgICAgdGhyb3cgY29tcGlsZUV4OwogICAgfQogICAgcmV0dXJuIGZuOwogIH0KICBjb21waWxlR2x5cGgoY29kZSwgZ2x5cGhJZCkgewogICAgaWYgKCFjb2RlPy5sZW5ndGggfHwgY29kZVswXSA9PT0gMTQpIHsKICAgICAgcmV0dXJuIE5PT1A7CiAgICB9CiAgICBsZXQgZm9udE1hdHJpeCA9IHRoaXMuZm9udE1hdHJpeDsKICAgIGlmICh0aGlzLmlzQ0ZGQ0lERm9udCkgewogICAgICBjb25zdCBmZEluZGV4ID0gdGhpcy5mZFNlbGVjdC5nZXRGREluZGV4KGdseXBoSWQpOwogICAgICBpZiAoZmRJbmRleCA+PSAwICYmIGZkSW5kZXggPCB0aGlzLmZkQXJyYXkubGVuZ3RoKSB7CiAgICAgICAgY29uc3QgZm9udERpY3QgPSB0aGlzLmZkQXJyYXlbZmRJbmRleF07CiAgICAgICAgZm9udE1hdHJpeCA9IGZvbnREaWN0LmdldEJ5TmFtZSgiRm9udE1hdHJpeCIpIHx8IEZPTlRfSURFTlRJVFlfTUFUUklYOwogICAgICB9IGVsc2UgewogICAgICAgIHdhcm4oIkludmFsaWQgZmQgaW5kZXggZm9yIGdseXBoIGluZGV4LiIpOwogICAgICB9CiAgICB9CiAgICBhc3NlcnQoaXNOdW1iZXJBcnJheShmb250TWF0cml4LCA2KSwgIkV4cGVjdGVkIGEgdmFsaWQgZm9udE1hdHJpeC4iKTsKICAgIGNvbnN0IGNtZHMgPSBuZXcgQ29tbWFuZHMoKTsKICAgIGNtZHMudHJhbnNmb3JtKGZvbnRNYXRyaXguc2xpY2UoKSk7CiAgICB0aGlzLmNvbXBpbGVHbHlwaEltcGwoY29kZSwgY21kcywgZ2x5cGhJZCk7CiAgICBjbWRzLmFkZCgiWiIpOwogICAgcmV0dXJuIGNtZHMuZ2V0U1ZHKCk7CiAgfQogIGNvbXBpbGVHbHlwaEltcGwoKSB7CiAgICB1bnJlYWNoYWJsZSgiQ2hpbGRyZW4gY2xhc3NlcyBzaG91bGQgaW1wbGVtZW50IHRoaXMuIik7CiAgfQogIGhhc0J1aWx0UGF0aCh1bmljb2RlKSB7CiAgICBjb25zdCB7CiAgICAgIGNoYXJDb2RlLAogICAgICBnbHlwaElkCiAgICB9ID0gbG9va3VwQ21hcCh0aGlzLmNtYXAsIHVuaWNvZGUpOwogICAgcmV0dXJuIHRoaXMuY29tcGlsZWRHbHlwaHNbZ2x5cGhJZF0gIT09IHVuZGVmaW5lZCAmJiB0aGlzLmNvbXBpbGVkQ2hhckNvZGVUb0dseXBoSWRbY2hhckNvZGVdICE9PSB1bmRlZmluZWQ7CiAgfQp9CmNsYXNzIFRydWVUeXBlQ29tcGlsZWQgZXh0ZW5kcyBDb21waWxlZEZvbnQgewogIGNvbnN0cnVjdG9yKGdseXBocywgY21hcCwgZm9udE1hdHJpeCkgewogICAgc3VwZXIoZm9udE1hdHJpeCB8fCBbMC4wMDA0ODgsIDAsIDAsIDAuMDAwNDg4LCAwLCAwXSk7CiAgICB0aGlzLmdseXBocyA9IGdseXBoczsKICAgIHRoaXMuY21hcCA9IGNtYXA7CiAgfQogIGNvbXBpbGVHbHlwaEltcGwoY29kZSwgY21kcykgewogICAgY29tcGlsZUdseWYoY29kZSwgY21kcywgdGhpcyk7CiAgfQp9CmNsYXNzIFR5cGUyQ29tcGlsZWQgZXh0ZW5kcyBDb21waWxlZEZvbnQgewogIGNvbnN0cnVjdG9yKGNmZkluZm8sIGNtYXAsIGZvbnRNYXRyaXgpIHsKICAgIHN1cGVyKGZvbnRNYXRyaXggfHwgWzAuMDAxLCAwLCAwLCAwLjAwMSwgMCwgMF0pOwogICAgdGhpcy5nbHlwaHMgPSBjZmZJbmZvLmdseXBoczsKICAgIHRoaXMuZ3N1YnJzID0gY2ZmSW5mby5nc3VicnMgfHwgW107CiAgICB0aGlzLnN1YnJzID0gY2ZmSW5mby5zdWJycyB8fCBbXTsKICAgIHRoaXMuY21hcCA9IGNtYXA7CiAgICB0aGlzLmdseXBoTmFtZU1hcCA9IGdldEdseXBoc1VuaWNvZGUoKTsKICAgIHRoaXMuZ3N1YnJzQmlhcyA9IGdldFN1YnJvdXRpbmVCaWFzKHRoaXMuZ3N1YnJzKTsKICAgIHRoaXMuc3VicnNCaWFzID0gZ2V0U3Vicm91dGluZUJpYXModGhpcy5zdWJycyk7CiAgICB0aGlzLmlzQ0ZGQ0lERm9udCA9IGNmZkluZm8uaXNDRkZDSURGb250OwogICAgdGhpcy5mZFNlbGVjdCA9IGNmZkluZm8uZmRTZWxlY3Q7CiAgICB0aGlzLmZkQXJyYXkgPSBjZmZJbmZvLmZkQXJyYXk7CiAgfQogIGNvbXBpbGVHbHlwaEltcGwoY29kZSwgY21kcywgZ2x5cGhJZCkgewogICAgY29tcGlsZUNoYXJTdHJpbmcoY29kZSwgY21kcywgdGhpcywgZ2x5cGhJZCk7CiAgfQp9CmNsYXNzIEZvbnRSZW5kZXJlckZhY3RvcnkgewogIHN0YXRpYyBjcmVhdGUoZm9udCwgc2VhY0FuYWx5c2lzRW5hYmxlZCkgewogICAgY29uc3QgZGF0YSA9IG5ldyBVaW50OEFycmF5KGZvbnQuZGF0YSk7CiAgICBsZXQgY21hcCwgZ2x5ZiwgbG9jYSwgY2ZmLCBpbmRleFRvTG9jRm9ybWF0LCB1bml0c1BlckVtOwogICAgY29uc3QgbnVtVGFibGVzID0gcmVhZFVpbnQxNihkYXRhLCA0KTsKICAgIGZvciAobGV0IGkgPSAwLCBwID0gMTI7IGkgPCBudW1UYWJsZXM7IGkrKywgcCArPSAxNikgewogICAgICBjb25zdCB0YWcgPSBieXRlc1RvU3RyaW5nKGRhdGEuc3ViYXJyYXkocCwgcCArIDQpKTsKICAgICAgY29uc3Qgb2Zmc2V0ID0gcmVhZFVpbnQzMihkYXRhLCBwICsgOCk7CiAgICAgIGNvbnN0IGxlbmd0aCA9IHJlYWRVaW50MzIoZGF0YSwgcCArIDEyKTsKICAgICAgc3dpdGNoICh0YWcpIHsKICAgICAgICBjYXNlICJjbWFwIjoKICAgICAgICAgIGNtYXAgPSBwYXJzZUNtYXAoZGF0YSwgb2Zmc2V0LCBvZmZzZXQgKyBsZW5ndGgpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAiZ2x5ZiI6CiAgICAgICAgICBnbHlmID0gZGF0YS5zdWJhcnJheShvZmZzZXQsIG9mZnNldCArIGxlbmd0aCk7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJsb2NhIjoKICAgICAgICAgIGxvY2EgPSBkYXRhLnN1YmFycmF5KG9mZnNldCwgb2Zmc2V0ICsgbGVuZ3RoKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgImhlYWQiOgogICAgICAgICAgdW5pdHNQZXJFbSA9IHJlYWRVaW50MTYoZGF0YSwgb2Zmc2V0ICsgMTgpOwogICAgICAgICAgaW5kZXhUb0xvY0Zvcm1hdCA9IHJlYWRVaW50MTYoZGF0YSwgb2Zmc2V0ICsgNTApOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAiQ0ZGICI6CiAgICAgICAgICBjZmYgPSBwYXJzZUNmZihkYXRhLCBvZmZzZXQsIG9mZnNldCArIGxlbmd0aCwgc2VhY0FuYWx5c2lzRW5hYmxlZCk7CiAgICAgICAgICBicmVhazsKICAgICAgfQogICAgfQogICAgaWYgKGdseWYpIHsKICAgICAgY29uc3QgZm9udE1hdHJpeCA9ICF1bml0c1BlckVtID8gZm9udC5mb250TWF0cml4IDogWzEgLyB1bml0c1BlckVtLCAwLCAwLCAxIC8gdW5pdHNQZXJFbSwgMCwgMF07CiAgICAgIHJldHVybiBuZXcgVHJ1ZVR5cGVDb21waWxlZChwYXJzZUdseWZUYWJsZShnbHlmLCBsb2NhLCBpbmRleFRvTG9jRm9ybWF0KSwgY21hcCwgZm9udE1hdHJpeCk7CiAgICB9CiAgICByZXR1cm4gbmV3IFR5cGUyQ29tcGlsZWQoY2ZmLCBjbWFwLCBmb250LmZvbnRNYXRyaXgpOwogIH0KfQoKOy8vIC4vc3JjL2NvcmUvbWV0cmljcy5qcwoKY29uc3QgZ2V0TWV0cmljcyA9IGdldExvb2t1cFRhYmxlRmFjdG9yeShmdW5jdGlvbiAodCkgewogIHQuQ291cmllciA9IDYwMDsKICB0WyJDb3VyaWVyLUJvbGQiXSA9IDYwMDsKICB0WyJDb3VyaWVyLUJvbGRPYmxpcXVlIl0gPSA2MDA7CiAgdFsiQ291cmllci1PYmxpcXVlIl0gPSA2MDA7CiAgdC5IZWx2ZXRpY2EgPSBnZXRMb29rdXBUYWJsZUZhY3RvcnkoZnVuY3Rpb24gKHQpIHsKICAgIHQuc3BhY2UgPSAyNzg7CiAgICB0LmV4Y2xhbSA9IDI3ODsKICAgIHQucXVvdGVkYmwgPSAzNTU7CiAgICB0Lm51bWJlcnNpZ24gPSA1NTY7CiAgICB0LmRvbGxhciA9IDU1NjsKICAgIHQucGVyY2VudCA9IDg4OTsKICAgIHQuYW1wZXJzYW5kID0gNjY3OwogICAgdC5xdW90ZXJpZ2h0ID0gMjIyOwogICAgdC5wYXJlbmxlZnQgPSAzMzM7CiAgICB0LnBhcmVucmlnaHQgPSAzMzM7CiAgICB0LmFzdGVyaXNrID0gMzg5OwogICAgdC5wbHVzID0gNTg0OwogICAgdC5jb21tYSA9IDI3ODsKICAgIHQuaHlwaGVuID0gMzMzOwogICAgdC5wZXJpb2QgPSAyNzg7CiAgICB0LnNsYXNoID0gMjc4OwogICAgdC56ZXJvID0gNTU2OwogICAgdC5vbmUgPSA1NTY7CiAgICB0LnR3byA9IDU1NjsKICAgIHQudGhyZWUgPSA1NTY7CiAgICB0LmZvdXIgPSA1NTY7CiAgICB0LmZpdmUgPSA1NTY7CiAgICB0LnNpeCA9IDU1NjsKICAgIHQuc2V2ZW4gPSA1NTY7CiAgICB0LmVpZ2h0ID0gNTU2OwogICAgdC5uaW5lID0gNTU2OwogICAgdC5jb2xvbiA9IDI3ODsKICAgIHQuc2VtaWNvbG9uID0gMjc4OwogICAgdC5sZXNzID0gNTg0OwogICAgdC5lcXVhbCA9IDU4NDsKICAgIHQuZ3JlYXRlciA9IDU4NDsKICAgIHQucXVlc3Rpb24gPSA1NTY7CiAgICB0LmF0ID0gMTAxNTsKICAgIHQuQSA9IDY2NzsKICAgIHQuQiA9IDY2NzsKICAgIHQuQyA9IDcyMjsKICAgIHQuRCA9IDcyMjsKICAgIHQuRSA9IDY2NzsKICAgIHQuRiA9IDYxMTsKICAgIHQuRyA9IDc3ODsKICAgIHQuSCA9IDcyMjsKICAgIHQuSSA9IDI3ODsKICAgIHQuSiA9IDUwMDsKICAgIHQuSyA9IDY2NzsKICAgIHQuTCA9IDU1NjsKICAgIHQuTSA9IDgzMzsKICAgIHQuTiA9IDcyMjsKICAgIHQuTyA9IDc3ODsKICAgIHQuUCA9IDY2NzsKICAgIHQuUSA9IDc3ODsKICAgIHQuUiA9IDcyMjsKICAgIHQuUyA9IDY2NzsKICAgIHQuVCA9IDYxMTsKICAgIHQuVSA9IDcyMjsKICAgIHQuViA9IDY2NzsKICAgIHQuVyA9IDk0NDsKICAgIHQuWCA9IDY2NzsKICAgIHQuWSA9IDY2NzsKICAgIHQuWiA9IDYxMTsKICAgIHQuYnJhY2tldGxlZnQgPSAyNzg7CiAgICB0LmJhY2tzbGFzaCA9IDI3ODsKICAgIHQuYnJhY2tldHJpZ2h0ID0gMjc4OwogICAgdC5hc2NpaWNpcmN1bSA9IDQ2OTsKICAgIHQudW5kZXJzY29yZSA9IDU1NjsKICAgIHQucXVvdGVsZWZ0ID0gMjIyOwogICAgdC5hID0gNTU2OwogICAgdC5iID0gNTU2OwogICAgdC5jID0gNTAwOwogICAgdC5kID0gNTU2OwogICAgdC5lID0gNTU2OwogICAgdC5mID0gMjc4OwogICAgdC5nID0gNTU2OwogICAgdC5oID0gNTU2OwogICAgdC5pID0gMjIyOwogICAgdC5qID0gMjIyOwogICAgdC5rID0gNTAwOwogICAgdC5sID0gMjIyOwogICAgdC5tID0gODMzOwogICAgdC5uID0gNTU2OwogICAgdC5vID0gNTU2OwogICAgdC5wID0gNTU2OwogICAgdC5xID0gNTU2OwogICAgdC5yID0gMzMzOwogICAgdC5zID0gNTAwOwogICAgdC50ID0gMjc4OwogICAgdC51ID0gNTU2OwogICAgdC52ID0gNTAwOwogICAgdC53ID0gNzIyOwogICAgdC54ID0gNTAwOwogICAgdC55ID0gNTAwOwogICAgdC56ID0gNTAwOwogICAgdC5icmFjZWxlZnQgPSAzMzQ7CiAgICB0LmJhciA9IDI2MDsKICAgIHQuYnJhY2VyaWdodCA9IDMzNDsKICAgIHQuYXNjaWl0aWxkZSA9IDU4NDsKICAgIHQuZXhjbGFtZG93biA9IDMzMzsKICAgIHQuY2VudCA9IDU1NjsKICAgIHQuc3RlcmxpbmcgPSA1NTY7CiAgICB0LmZyYWN0aW9uID0gMTY3OwogICAgdC55ZW4gPSA1NTY7CiAgICB0LmZsb3JpbiA9IDU1NjsKICAgIHQuc2VjdGlvbiA9IDU1NjsKICAgIHQuY3VycmVuY3kgPSA1NTY7CiAgICB0LnF1b3Rlc2luZ2xlID0gMTkxOwogICAgdC5xdW90ZWRibGxlZnQgPSAzMzM7CiAgICB0Lmd1aWxsZW1vdGxlZnQgPSA1NTY7CiAgICB0Lmd1aWxzaW5nbGxlZnQgPSAzMzM7CiAgICB0Lmd1aWxzaW5nbHJpZ2h0ID0gMzMzOwogICAgdC5maSA9IDUwMDsKICAgIHQuZmwgPSA1MDA7CiAgICB0LmVuZGFzaCA9IDU1NjsKICAgIHQuZGFnZ2VyID0gNTU2OwogICAgdC5kYWdnZXJkYmwgPSA1NTY7CiAgICB0LnBlcmlvZGNlbnRlcmVkID0gMjc4OwogICAgdC5wYXJhZ3JhcGggPSA1Mzc7CiAgICB0LmJ1bGxldCA9IDM1MDsKICAgIHQucXVvdGVzaW5nbGJhc2UgPSAyMjI7CiAgICB0LnF1b3RlZGJsYmFzZSA9IDMzMzsKICAgIHQucXVvdGVkYmxyaWdodCA9IDMzMzsKICAgIHQuZ3VpbGxlbW90cmlnaHQgPSA1NTY7CiAgICB0LmVsbGlwc2lzID0gMTAwMDsKICAgIHQucGVydGhvdXNhbmQgPSAxMDAwOwogICAgdC5xdWVzdGlvbmRvd24gPSA2MTE7CiAgICB0LmdyYXZlID0gMzMzOwogICAgdC5hY3V0ZSA9IDMzMzsKICAgIHQuY2lyY3VtZmxleCA9IDMzMzsKICAgIHQudGlsZGUgPSAzMzM7CiAgICB0Lm1hY3JvbiA9IDMzMzsKICAgIHQuYnJldmUgPSAzMzM7CiAgICB0LmRvdGFjY2VudCA9IDMzMzsKICAgIHQuZGllcmVzaXMgPSAzMzM7CiAgICB0LnJpbmcgPSAzMzM7CiAgICB0LmNlZGlsbGEgPSAzMzM7CiAgICB0Lmh1bmdhcnVtbGF1dCA9IDMzMzsKICAgIHQub2dvbmVrID0gMzMzOwogICAgdC5jYXJvbiA9IDMzMzsKICAgIHQuZW1kYXNoID0gMTAwMDsKICAgIHQuQUUgPSAxMDAwOwogICAgdC5vcmRmZW1pbmluZSA9IDM3MDsKICAgIHQuTHNsYXNoID0gNTU2OwogICAgdC5Pc2xhc2ggPSA3Nzg7CiAgICB0Lk9FID0gMTAwMDsKICAgIHQub3JkbWFzY3VsaW5lID0gMzY1OwogICAgdC5hZSA9IDg4OTsKICAgIHQuZG90bGVzc2kgPSAyNzg7CiAgICB0LmxzbGFzaCA9IDIyMjsKICAgIHQub3NsYXNoID0gNjExOwogICAgdC5vZSA9IDk0NDsKICAgIHQuZ2VybWFuZGJscyA9IDYxMTsKICAgIHQuSWRpZXJlc2lzID0gMjc4OwogICAgdC5lYWN1dGUgPSA1NTY7CiAgICB0LmFicmV2ZSA9IDU1NjsKICAgIHQudWh1bmdhcnVtbGF1dCA9IDU1NjsKICAgIHQuZWNhcm9uID0gNTU2OwogICAgdC5ZZGllcmVzaXMgPSA2Njc7CiAgICB0LmRpdmlkZSA9IDU4NDsKICAgIHQuWWFjdXRlID0gNjY3OwogICAgdC5BY2lyY3VtZmxleCA9IDY2NzsKICAgIHQuYWFjdXRlID0gNTU2OwogICAgdC5VY2lyY3VtZmxleCA9IDcyMjsKICAgIHQueWFjdXRlID0gNTAwOwogICAgdC5zY29tbWFhY2NlbnQgPSA1MDA7CiAgICB0LmVjaXJjdW1mbGV4ID0gNTU2OwogICAgdC5VcmluZyA9IDcyMjsKICAgIHQuVWRpZXJlc2lzID0gNzIyOwogICAgdC5hb2dvbmVrID0gNTU2OwogICAgdC5VYWN1dGUgPSA3MjI7CiAgICB0LnVvZ29uZWsgPSA1NTY7CiAgICB0LkVkaWVyZXNpcyA9IDY2NzsKICAgIHQuRGNyb2F0ID0gNzIyOwogICAgdC5jb21tYWFjY2VudCA9IDI1MDsKICAgIHQuY29weXJpZ2h0ID0gNzM3OwogICAgdC5FbWFjcm9uID0gNjY3OwogICAgdC5jY2Fyb24gPSA1MDA7CiAgICB0LmFyaW5nID0gNTU2OwogICAgdC5OY29tbWFhY2NlbnQgPSA3MjI7CiAgICB0LmxhY3V0ZSA9IDIyMjsKICAgIHQuYWdyYXZlID0gNTU2OwogICAgdC5UY29tbWFhY2NlbnQgPSA2MTE7CiAgICB0LkNhY3V0ZSA9IDcyMjsKICAgIHQuYXRpbGRlID0gNTU2OwogICAgdC5FZG90YWNjZW50ID0gNjY3OwogICAgdC5zY2Fyb24gPSA1MDA7CiAgICB0LnNjZWRpbGxhID0gNTAwOwogICAgdC5pYWN1dGUgPSAyNzg7CiAgICB0LmxvemVuZ2UgPSA0NzE7CiAgICB0LlJjYXJvbiA9IDcyMjsKICAgIHQuR2NvbW1hYWNjZW50ID0gNzc4OwogICAgdC51Y2lyY3VtZmxleCA9IDU1NjsKICAgIHQuYWNpcmN1bWZsZXggPSA1NTY7CiAgICB0LkFtYWNyb24gPSA2Njc7CiAgICB0LnJjYXJvbiA9IDMzMzsKICAgIHQuY2NlZGlsbGEgPSA1MDA7CiAgICB0Llpkb3RhY2NlbnQgPSA2MTE7CiAgICB0LlRob3JuID0gNjY3OwogICAgdC5PbWFjcm9uID0gNzc4OwogICAgdC5SYWN1dGUgPSA3MjI7CiAgICB0LlNhY3V0ZSA9IDY2NzsKICAgIHQuZGNhcm9uID0gNjQzOwogICAgdC5VbWFjcm9uID0gNzIyOwogICAgdC51cmluZyA9IDU1NjsKICAgIHQudGhyZWVzdXBlcmlvciA9IDMzMzsKICAgIHQuT2dyYXZlID0gNzc4OwogICAgdC5BZ3JhdmUgPSA2Njc7CiAgICB0LkFicmV2ZSA9IDY2NzsKICAgIHQubXVsdGlwbHkgPSA1ODQ7CiAgICB0LnVhY3V0ZSA9IDU1NjsKICAgIHQuVGNhcm9uID0gNjExOwogICAgdC5wYXJ0aWFsZGlmZiA9IDQ3NjsKICAgIHQueWRpZXJlc2lzID0gNTAwOwogICAgdC5OYWN1dGUgPSA3MjI7CiAgICB0LmljaXJjdW1mbGV4ID0gMjc4OwogICAgdC5FY2lyY3VtZmxleCA9IDY2NzsKICAgIHQuYWRpZXJlc2lzID0gNTU2OwogICAgdC5lZGllcmVzaXMgPSA1NTY7CiAgICB0LmNhY3V0ZSA9IDUwMDsKICAgIHQubmFjdXRlID0gNTU2OwogICAgdC51bWFjcm9uID0gNTU2OwogICAgdC5OY2Fyb24gPSA3MjI7CiAgICB0LklhY3V0ZSA9IDI3ODsKICAgIHQucGx1c21pbnVzID0gNTg0OwogICAgdC5icm9rZW5iYXIgPSAyNjA7CiAgICB0LnJlZ2lzdGVyZWQgPSA3Mzc7CiAgICB0LkdicmV2ZSA9IDc3ODsKICAgIHQuSWRvdGFjY2VudCA9IDI3ODsKICAgIHQuc3VtbWF0aW9uID0gNjAwOwogICAgdC5FZ3JhdmUgPSA2Njc7CiAgICB0LnJhY3V0ZSA9IDMzMzsKICAgIHQub21hY3JvbiA9IDU1NjsKICAgIHQuWmFjdXRlID0gNjExOwogICAgdC5aY2Fyb24gPSA2MTE7CiAgICB0LmdyZWF0ZXJlcXVhbCA9IDU0OTsKICAgIHQuRXRoID0gNzIyOwogICAgdC5DY2VkaWxsYSA9IDcyMjsKICAgIHQubGNvbW1hYWNjZW50ID0gMjIyOwogICAgdC50Y2Fyb24gPSAzMTc7CiAgICB0LmVvZ29uZWsgPSA1NTY7CiAgICB0LlVvZ29uZWsgPSA3MjI7CiAgICB0LkFhY3V0ZSA9IDY2NzsKICAgIHQuQWRpZXJlc2lzID0gNjY3OwogICAgdC5lZ3JhdmUgPSA1NTY7CiAgICB0LnphY3V0ZSA9IDUwMDsKICAgIHQuaW9nb25layA9IDIyMjsKICAgIHQuT2FjdXRlID0gNzc4OwogICAgdC5vYWN1dGUgPSA1NTY7CiAgICB0LmFtYWNyb24gPSA1NTY7CiAgICB0LnNhY3V0ZSA9IDUwMDsKICAgIHQuaWRpZXJlc2lzID0gMjc4OwogICAgdC5PY2lyY3VtZmxleCA9IDc3ODsKICAgIHQuVWdyYXZlID0gNzIyOwogICAgdC5EZWx0YSA9IDYxMjsKICAgIHQudGhvcm4gPSA1NTY7CiAgICB0LnR3b3N1cGVyaW9yID0gMzMzOwogICAgdC5PZGllcmVzaXMgPSA3Nzg7CiAgICB0Lm11ID0gNTU2OwogICAgdC5pZ3JhdmUgPSAyNzg7CiAgICB0Lm9odW5nYXJ1bWxhdXQgPSA1NTY7CiAgICB0LkVvZ29uZWsgPSA2Njc7CiAgICB0LmRjcm9hdCA9IDU1NjsKICAgIHQudGhyZWVxdWFydGVycyA9IDgzNDsKICAgIHQuU2NlZGlsbGEgPSA2Njc7CiAgICB0LmxjYXJvbiA9IDI5OTsKICAgIHQuS2NvbW1hYWNjZW50ID0gNjY3OwogICAgdC5MYWN1dGUgPSA1NTY7CiAgICB0LnRyYWRlbWFyayA9IDEwMDA7CiAgICB0LmVkb3RhY2NlbnQgPSA1NTY7CiAgICB0LklncmF2ZSA9IDI3ODsKICAgIHQuSW1hY3JvbiA9IDI3ODsKICAgIHQuTGNhcm9uID0gNTU2OwogICAgdC5vbmVoYWxmID0gODM0OwogICAgdC5sZXNzZXF1YWwgPSA1NDk7CiAgICB0Lm9jaXJjdW1mbGV4ID0gNTU2OwogICAgdC5udGlsZGUgPSA1NTY7CiAgICB0LlVodW5nYXJ1bWxhdXQgPSA3MjI7CiAgICB0LkVhY3V0ZSA9IDY2NzsKICAgIHQuZW1hY3JvbiA9IDU1NjsKICAgIHQuZ2JyZXZlID0gNTU2OwogICAgdC5vbmVxdWFydGVyID0gODM0OwogICAgdC5TY2Fyb24gPSA2Njc7CiAgICB0LlNjb21tYWFjY2VudCA9IDY2NzsKICAgIHQuT2h1bmdhcnVtbGF1dCA9IDc3ODsKICAgIHQuZGVncmVlID0gNDAwOwogICAgdC5vZ3JhdmUgPSA1NTY7CiAgICB0LkNjYXJvbiA9IDcyMjsKICAgIHQudWdyYXZlID0gNTU2OwogICAgdC5yYWRpY2FsID0gNDUzOwogICAgdC5EY2Fyb24gPSA3MjI7CiAgICB0LnJjb21tYWFjY2VudCA9IDMzMzsKICAgIHQuTnRpbGRlID0gNzIyOwogICAgdC5vdGlsZGUgPSA1NTY7CiAgICB0LlJjb21tYWFjY2VudCA9IDcyMjsKICAgIHQuTGNvbW1hYWNjZW50ID0gNTU2OwogICAgdC5BdGlsZGUgPSA2Njc7CiAgICB0LkFvZ29uZWsgPSA2Njc7CiAgICB0LkFyaW5nID0gNjY3OwogICAgdC5PdGlsZGUgPSA3Nzg7CiAgICB0Lnpkb3RhY2NlbnQgPSA1MDA7CiAgICB0LkVjYXJvbiA9IDY2NzsKICAgIHQuSW9nb25layA9IDI3ODsKICAgIHQua2NvbW1hYWNjZW50ID0gNTAwOwogICAgdC5taW51cyA9IDU4NDsKICAgIHQuSWNpcmN1bWZsZXggPSAyNzg7CiAgICB0Lm5jYXJvbiA9IDU1NjsKICAgIHQudGNvbW1hYWNjZW50ID0gMjc4OwogICAgdC5sb2dpY2Fsbm90ID0gNTg0OwogICAgdC5vZGllcmVzaXMgPSA1NTY7CiAgICB0LnVkaWVyZXNpcyA9IDU1NjsKICAgIHQubm90ZXF1YWwgPSA1NDk7CiAgICB0Lmdjb21tYWFjY2VudCA9IDU1NjsKICAgIHQuZXRoID0gNTU2OwogICAgdC56Y2Fyb24gPSA1MDA7CiAgICB0Lm5jb21tYWFjY2VudCA9IDU1NjsKICAgIHQub25lc3VwZXJpb3IgPSAzMzM7CiAgICB0LmltYWNyb24gPSAyNzg7CiAgICB0LkV1cm8gPSA1NTY7CiAgfSk7CiAgdFsiSGVsdmV0aWNhLUJvbGQiXSA9IGdldExvb2t1cFRhYmxlRmFjdG9yeShmdW5jdGlvbiAodCkgewogICAgdC5zcGFjZSA9IDI3ODsKICAgIHQuZXhjbGFtID0gMzMzOwogICAgdC5xdW90ZWRibCA9IDQ3NDsKICAgIHQubnVtYmVyc2lnbiA9IDU1NjsKICAgIHQuZG9sbGFyID0gNTU2OwogICAgdC5wZXJjZW50ID0gODg5OwogICAgdC5hbXBlcnNhbmQgPSA3MjI7CiAgICB0LnF1b3RlcmlnaHQgPSAyNzg7CiAgICB0LnBhcmVubGVmdCA9IDMzMzsKICAgIHQucGFyZW5yaWdodCA9IDMzMzsKICAgIHQuYXN0ZXJpc2sgPSAzODk7CiAgICB0LnBsdXMgPSA1ODQ7CiAgICB0LmNvbW1hID0gMjc4OwogICAgdC5oeXBoZW4gPSAzMzM7CiAgICB0LnBlcmlvZCA9IDI3ODsKICAgIHQuc2xhc2ggPSAyNzg7CiAgICB0Lnplcm8gPSA1NTY7CiAgICB0Lm9uZSA9IDU1NjsKICAgIHQudHdvID0gNTU2OwogICAgdC50aHJlZSA9IDU1NjsKICAgIHQuZm91ciA9IDU1NjsKICAgIHQuZml2ZSA9IDU1NjsKICAgIHQuc2l4ID0gNTU2OwogICAgdC5zZXZlbiA9IDU1NjsKICAgIHQuZWlnaHQgPSA1NTY7CiAgICB0Lm5pbmUgPSA1NTY7CiAgICB0LmNvbG9uID0gMzMzOwogICAgdC5zZW1pY29sb24gPSAzMzM7CiAgICB0Lmxlc3MgPSA1ODQ7CiAgICB0LmVxdWFsID0gNTg0OwogICAgdC5ncmVhdGVyID0gNTg0OwogICAgdC5xdWVzdGlvbiA9IDYxMTsKICAgIHQuYXQgPSA5NzU7CiAgICB0LkEgPSA3MjI7CiAgICB0LkIgPSA3MjI7CiAgICB0LkMgPSA3MjI7CiAgICB0LkQgPSA3MjI7CiAgICB0LkUgPSA2Njc7CiAgICB0LkYgPSA2MTE7CiAgICB0LkcgPSA3Nzg7CiAgICB0LkggPSA3MjI7CiAgICB0LkkgPSAyNzg7CiAgICB0LkogPSA1NTY7CiAgICB0LksgPSA3MjI7CiAgICB0LkwgPSA2MTE7CiAgICB0Lk0gPSA4MzM7CiAgICB0Lk4gPSA3MjI7CiAgICB0Lk8gPSA3Nzg7CiAgICB0LlAgPSA2Njc7CiAgICB0LlEgPSA3Nzg7CiAgICB0LlIgPSA3MjI7CiAgICB0LlMgPSA2Njc7CiAgICB0LlQgPSA2MTE7CiAgICB0LlUgPSA3MjI7CiAgICB0LlYgPSA2Njc7CiAgICB0LlcgPSA5NDQ7CiAgICB0LlggPSA2Njc7CiAgICB0LlkgPSA2Njc7CiAgICB0LlogPSA2MTE7CiAgICB0LmJyYWNrZXRsZWZ0ID0gMzMzOwogICAgdC5iYWNrc2xhc2ggPSAyNzg7CiAgICB0LmJyYWNrZXRyaWdodCA9IDMzMzsKICAgIHQuYXNjaWljaXJjdW0gPSA1ODQ7CiAgICB0LnVuZGVyc2NvcmUgPSA1NTY7CiAgICB0LnF1b3RlbGVmdCA9IDI3ODsKICAgIHQuYSA9IDU1NjsKICAgIHQuYiA9IDYxMTsKICAgIHQuYyA9IDU1NjsKICAgIHQuZCA9IDYxMTsKICAgIHQuZSA9IDU1NjsKICAgIHQuZiA9IDMzMzsKICAgIHQuZyA9IDYxMTsKICAgIHQuaCA9IDYxMTsKICAgIHQuaSA9IDI3ODsKICAgIHQuaiA9IDI3ODsKICAgIHQuayA9IDU1NjsKICAgIHQubCA9IDI3ODsKICAgIHQubSA9IDg4OTsKICAgIHQubiA9IDYxMTsKICAgIHQubyA9IDYxMTsKICAgIHQucCA9IDYxMTsKICAgIHQucSA9IDYxMTsKICAgIHQuciA9IDM4OTsKICAgIHQucyA9IDU1NjsKICAgIHQudCA9IDMzMzsKICAgIHQudSA9IDYxMTsKICAgIHQudiA9IDU1NjsKICAgIHQudyA9IDc3ODsKICAgIHQueCA9IDU1NjsKICAgIHQueSA9IDU1NjsKICAgIHQueiA9IDUwMDsKICAgIHQuYnJhY2VsZWZ0ID0gMzg5OwogICAgdC5iYXIgPSAyODA7CiAgICB0LmJyYWNlcmlnaHQgPSAzODk7CiAgICB0LmFzY2lpdGlsZGUgPSA1ODQ7CiAgICB0LmV4Y2xhbWRvd24gPSAzMzM7CiAgICB0LmNlbnQgPSA1NTY7CiAgICB0LnN0ZXJsaW5nID0gNTU2OwogICAgdC5mcmFjdGlvbiA9IDE2NzsKICAgIHQueWVuID0gNTU2OwogICAgdC5mbG9yaW4gPSA1NTY7CiAgICB0LnNlY3Rpb24gPSA1NTY7CiAgICB0LmN1cnJlbmN5ID0gNTU2OwogICAgdC5xdW90ZXNpbmdsZSA9IDIzODsKICAgIHQucXVvdGVkYmxsZWZ0ID0gNTAwOwogICAgdC5ndWlsbGVtb3RsZWZ0ID0gNTU2OwogICAgdC5ndWlsc2luZ2xsZWZ0ID0gMzMzOwogICAgdC5ndWlsc2luZ2xyaWdodCA9IDMzMzsKICAgIHQuZmkgPSA2MTE7CiAgICB0LmZsID0gNjExOwogICAgdC5lbmRhc2ggPSA1NTY7CiAgICB0LmRhZ2dlciA9IDU1NjsKICAgIHQuZGFnZ2VyZGJsID0gNTU2OwogICAgdC5wZXJpb2RjZW50ZXJlZCA9IDI3ODsKICAgIHQucGFyYWdyYXBoID0gNTU2OwogICAgdC5idWxsZXQgPSAzNTA7CiAgICB0LnF1b3Rlc2luZ2xiYXNlID0gMjc4OwogICAgdC5xdW90ZWRibGJhc2UgPSA1MDA7CiAgICB0LnF1b3RlZGJscmlnaHQgPSA1MDA7CiAgICB0Lmd1aWxsZW1vdHJpZ2h0ID0gNTU2OwogICAgdC5lbGxpcHNpcyA9IDEwMDA7CiAgICB0LnBlcnRob3VzYW5kID0gMTAwMDsKICAgIHQucXVlc3Rpb25kb3duID0gNjExOwogICAgdC5ncmF2ZSA9IDMzMzsKICAgIHQuYWN1dGUgPSAzMzM7CiAgICB0LmNpcmN1bWZsZXggPSAzMzM7CiAgICB0LnRpbGRlID0gMzMzOwogICAgdC5tYWNyb24gPSAzMzM7CiAgICB0LmJyZXZlID0gMzMzOwogICAgdC5kb3RhY2NlbnQgPSAzMzM7CiAgICB0LmRpZXJlc2lzID0gMzMzOwogICAgdC5yaW5nID0gMzMzOwogICAgdC5jZWRpbGxhID0gMzMzOwogICAgdC5odW5nYXJ1bWxhdXQgPSAzMzM7CiAgICB0Lm9nb25layA9IDMzMzsKICAgIHQuY2Fyb24gPSAzMzM7CiAgICB0LmVtZGFzaCA9IDEwMDA7CiAgICB0LkFFID0gMTAwMDsKICAgIHQub3JkZmVtaW5pbmUgPSAzNzA7CiAgICB0LkxzbGFzaCA9IDYxMTsKICAgIHQuT3NsYXNoID0gNzc4OwogICAgdC5PRSA9IDEwMDA7CiAgICB0Lm9yZG1hc2N1bGluZSA9IDM2NTsKICAgIHQuYWUgPSA4ODk7CiAgICB0LmRvdGxlc3NpID0gMjc4OwogICAgdC5sc2xhc2ggPSAyNzg7CiAgICB0Lm9zbGFzaCA9IDYxMTsKICAgIHQub2UgPSA5NDQ7CiAgICB0Lmdlcm1hbmRibHMgPSA2MTE7CiAgICB0LklkaWVyZXNpcyA9IDI3ODsKICAgIHQuZWFjdXRlID0gNTU2OwogICAgdC5hYnJldmUgPSA1NTY7CiAgICB0LnVodW5nYXJ1bWxhdXQgPSA2MTE7CiAgICB0LmVjYXJvbiA9IDU1NjsKICAgIHQuWWRpZXJlc2lzID0gNjY3OwogICAgdC5kaXZpZGUgPSA1ODQ7CiAgICB0LllhY3V0ZSA9IDY2NzsKICAgIHQuQWNpcmN1bWZsZXggPSA3MjI7CiAgICB0LmFhY3V0ZSA9IDU1NjsKICAgIHQuVWNpcmN1bWZsZXggPSA3MjI7CiAgICB0LnlhY3V0ZSA9IDU1NjsKICAgIHQuc2NvbW1hYWNjZW50ID0gNTU2OwogICAgdC5lY2lyY3VtZmxleCA9IDU1NjsKICAgIHQuVXJpbmcgPSA3MjI7CiAgICB0LlVkaWVyZXNpcyA9IDcyMjsKICAgIHQuYW9nb25layA9IDU1NjsKICAgIHQuVWFjdXRlID0gNzIyOwogICAgdC51b2dvbmVrID0gNjExOwogICAgdC5FZGllcmVzaXMgPSA2Njc7CiAgICB0LkRjcm9hdCA9IDcyMjsKICAgIHQuY29tbWFhY2NlbnQgPSAyNTA7CiAgICB0LmNvcHlyaWdodCA9IDczNzsKICAgIHQuRW1hY3JvbiA9IDY2NzsKICAgIHQuY2Nhcm9uID0gNTU2OwogICAgdC5hcmluZyA9IDU1NjsKICAgIHQuTmNvbW1hYWNjZW50ID0gNzIyOwogICAgdC5sYWN1dGUgPSAyNzg7CiAgICB0LmFncmF2ZSA9IDU1NjsKICAgIHQuVGNvbW1hYWNjZW50ID0gNjExOwogICAgdC5DYWN1dGUgPSA3MjI7CiAgICB0LmF0aWxkZSA9IDU1NjsKICAgIHQuRWRvdGFjY2VudCA9IDY2NzsKICAgIHQuc2Nhcm9uID0gNTU2OwogICAgdC5zY2VkaWxsYSA9IDU1NjsKICAgIHQuaWFjdXRlID0gMjc4OwogICAgdC5sb3plbmdlID0gNDk0OwogICAgdC5SY2Fyb24gPSA3MjI7CiAgICB0Lkdjb21tYWFjY2VudCA9IDc3ODsKICAgIHQudWNpcmN1bWZsZXggPSA2MTE7CiAgICB0LmFjaXJjdW1mbGV4ID0gNTU2OwogICAgdC5BbWFjcm9uID0gNzIyOwogICAgdC5yY2Fyb24gPSAzODk7CiAgICB0LmNjZWRpbGxhID0gNTU2OwogICAgdC5aZG90YWNjZW50ID0gNjExOwogICAgdC5UaG9ybiA9IDY2NzsKICAgIHQuT21hY3JvbiA9IDc3ODsKICAgIHQuUmFjdXRlID0gNzIyOwogICAgdC5TYWN1dGUgPSA2Njc7CiAgICB0LmRjYXJvbiA9IDc0MzsKICAgIHQuVW1hY3JvbiA9IDcyMjsKICAgIHQudXJpbmcgPSA2MTE7CiAgICB0LnRocmVlc3VwZXJpb3IgPSAzMzM7CiAgICB0Lk9ncmF2ZSA9IDc3ODsKICAgIHQuQWdyYXZlID0gNzIyOwogICAgdC5BYnJldmUgPSA3MjI7CiAgICB0Lm11bHRpcGx5ID0gNTg0OwogICAgdC51YWN1dGUgPSA2MTE7CiAgICB0LlRjYXJvbiA9IDYxMTsKICAgIHQucGFydGlhbGRpZmYgPSA0OTQ7CiAgICB0LnlkaWVyZXNpcyA9IDU1NjsKICAgIHQuTmFjdXRlID0gNzIyOwogICAgdC5pY2lyY3VtZmxleCA9IDI3ODsKICAgIHQuRWNpcmN1bWZsZXggPSA2Njc7CiAgICB0LmFkaWVyZXNpcyA9IDU1NjsKICAgIHQuZWRpZXJlc2lzID0gNTU2OwogICAgdC5jYWN1dGUgPSA1NTY7CiAgICB0Lm5hY3V0ZSA9IDYxMTsKICAgIHQudW1hY3JvbiA9IDYxMTsKICAgIHQuTmNhcm9uID0gNzIyOwogICAgdC5JYWN1dGUgPSAyNzg7CiAgICB0LnBsdXNtaW51cyA9IDU4NDsKICAgIHQuYnJva2VuYmFyID0gMjgwOwogICAgdC5yZWdpc3RlcmVkID0gNzM3OwogICAgdC5HYnJldmUgPSA3Nzg7CiAgICB0Lklkb3RhY2NlbnQgPSAyNzg7CiAgICB0LnN1bW1hdGlvbiA9IDYwMDsKICAgIHQuRWdyYXZlID0gNjY3OwogICAgdC5yYWN1dGUgPSAzODk7CiAgICB0Lm9tYWNyb24gPSA2MTE7CiAgICB0LlphY3V0ZSA9IDYxMTsKICAgIHQuWmNhcm9uID0gNjExOwogICAgdC5ncmVhdGVyZXF1YWwgPSA1NDk7CiAgICB0LkV0aCA9IDcyMjsKICAgIHQuQ2NlZGlsbGEgPSA3MjI7CiAgICB0Lmxjb21tYWFjY2VudCA9IDI3ODsKICAgIHQudGNhcm9uID0gMzg5OwogICAgdC5lb2dvbmVrID0gNTU2OwogICAgdC5Vb2dvbmVrID0gNzIyOwogICAgdC5BYWN1dGUgPSA3MjI7CiAgICB0LkFkaWVyZXNpcyA9IDcyMjsKICAgIHQuZWdyYXZlID0gNTU2OwogICAgdC56YWN1dGUgPSA1MDA7CiAgICB0LmlvZ29uZWsgPSAyNzg7CiAgICB0Lk9hY3V0ZSA9IDc3ODsKICAgIHQub2FjdXRlID0gNjExOwogICAgdC5hbWFjcm9uID0gNTU2OwogICAgdC5zYWN1dGUgPSA1NTY7CiAgICB0LmlkaWVyZXNpcyA9IDI3ODsKICAgIHQuT2NpcmN1bWZsZXggPSA3Nzg7CiAgICB0LlVncmF2ZSA9IDcyMjsKICAgIHQuRGVsdGEgPSA2MTI7CiAgICB0LnRob3JuID0gNjExOwogICAgdC50d29zdXBlcmlvciA9IDMzMzsKICAgIHQuT2RpZXJlc2lzID0gNzc4OwogICAgdC5tdSA9IDYxMTsKICAgIHQuaWdyYXZlID0gMjc4OwogICAgdC5vaHVuZ2FydW1sYXV0ID0gNjExOwogICAgdC5Fb2dvbmVrID0gNjY3OwogICAgdC5kY3JvYXQgPSA2MTE7CiAgICB0LnRocmVlcXVhcnRlcnMgPSA4MzQ7CiAgICB0LlNjZWRpbGxhID0gNjY3OwogICAgdC5sY2Fyb24gPSA0MDA7CiAgICB0Lktjb21tYWFjY2VudCA9IDcyMjsKICAgIHQuTGFjdXRlID0gNjExOwogICAgdC50cmFkZW1hcmsgPSAxMDAwOwogICAgdC5lZG90YWNjZW50ID0gNTU2OwogICAgdC5JZ3JhdmUgPSAyNzg7CiAgICB0LkltYWNyb24gPSAyNzg7CiAgICB0LkxjYXJvbiA9IDYxMTsKICAgIHQub25laGFsZiA9IDgzNDsKICAgIHQubGVzc2VxdWFsID0gNTQ5OwogICAgdC5vY2lyY3VtZmxleCA9IDYxMTsKICAgIHQubnRpbGRlID0gNjExOwogICAgdC5VaHVuZ2FydW1sYXV0ID0gNzIyOwogICAgdC5FYWN1dGUgPSA2Njc7CiAgICB0LmVtYWNyb24gPSA1NTY7CiAgICB0LmdicmV2ZSA9IDYxMTsKICAgIHQub25lcXVhcnRlciA9IDgzNDsKICAgIHQuU2Nhcm9uID0gNjY3OwogICAgdC5TY29tbWFhY2NlbnQgPSA2Njc7CiAgICB0Lk9odW5nYXJ1bWxhdXQgPSA3Nzg7CiAgICB0LmRlZ3JlZSA9IDQwMDsKICAgIHQub2dyYXZlID0gNjExOwogICAgdC5DY2Fyb24gPSA3MjI7CiAgICB0LnVncmF2ZSA9IDYxMTsKICAgIHQucmFkaWNhbCA9IDU0OTsKICAgIHQuRGNhcm9uID0gNzIyOwogICAgdC5yY29tbWFhY2NlbnQgPSAzODk7CiAgICB0Lk50aWxkZSA9IDcyMjsKICAgIHQub3RpbGRlID0gNjExOwogICAgdC5SY29tbWFhY2NlbnQgPSA3MjI7CiAgICB0Lkxjb21tYWFjY2VudCA9IDYxMTsKICAgIHQuQXRpbGRlID0gNzIyOwogICAgdC5Bb2dvbmVrID0gNzIyOwogICAgdC5BcmluZyA9IDcyMjsKICAgIHQuT3RpbGRlID0gNzc4OwogICAgdC56ZG90YWNjZW50ID0gNTAwOwogICAgdC5FY2Fyb24gPSA2Njc7CiAgICB0LklvZ29uZWsgPSAyNzg7CiAgICB0Lmtjb21tYWFjY2VudCA9IDU1NjsKICAgIHQubWludXMgPSA1ODQ7CiAgICB0LkljaXJjdW1mbGV4ID0gMjc4OwogICAgdC5uY2Fyb24gPSA2MTE7CiAgICB0LnRjb21tYWFjY2VudCA9IDMzMzsKICAgIHQubG9naWNhbG5vdCA9IDU4NDsKICAgIHQub2RpZXJlc2lzID0gNjExOwogICAgdC51ZGllcmVzaXMgPSA2MTE7CiAgICB0Lm5vdGVxdWFsID0gNTQ5OwogICAgdC5nY29tbWFhY2NlbnQgPSA2MTE7CiAgICB0LmV0aCA9IDYxMTsKICAgIHQuemNhcm9uID0gNTAwOwogICAgdC5uY29tbWFhY2NlbnQgPSA2MTE7CiAgICB0Lm9uZXN1cGVyaW9yID0gMzMzOwogICAgdC5pbWFjcm9uID0gMjc4OwogICAgdC5FdXJvID0gNTU2OwogIH0pOwogIHRbIkhlbHZldGljYS1Cb2xkT2JsaXF1ZSJdID0gZ2V0TG9va3VwVGFibGVGYWN0b3J5KGZ1bmN0aW9uICh0KSB7CiAgICB0LnNwYWNlID0gMjc4OwogICAgdC5leGNsYW0gPSAzMzM7CiAgICB0LnF1b3RlZGJsID0gNDc0OwogICAgdC5udW1iZXJzaWduID0gNTU2OwogICAgdC5kb2xsYXIgPSA1NTY7CiAgICB0LnBlcmNlbnQgPSA4ODk7CiAgICB0LmFtcGVyc2FuZCA9IDcyMjsKICAgIHQucXVvdGVyaWdodCA9IDI3ODsKICAgIHQucGFyZW5sZWZ0ID0gMzMzOwogICAgdC5wYXJlbnJpZ2h0ID0gMzMzOwogICAgdC5hc3RlcmlzayA9IDM4OTsKICAgIHQucGx1cyA9IDU4NDsKICAgIHQuY29tbWEgPSAyNzg7CiAgICB0Lmh5cGhlbiA9IDMzMzsKICAgIHQucGVyaW9kID0gMjc4OwogICAgdC5zbGFzaCA9IDI3ODsKICAgIHQuemVybyA9IDU1NjsKICAgIHQub25lID0gNTU2OwogICAgdC50d28gPSA1NTY7CiAgICB0LnRocmVlID0gNTU2OwogICAgdC5mb3VyID0gNTU2OwogICAgdC5maXZlID0gNTU2OwogICAgdC5zaXggPSA1NTY7CiAgICB0LnNldmVuID0gNTU2OwogICAgdC5laWdodCA9IDU1NjsKICAgIHQubmluZSA9IDU1NjsKICAgIHQuY29sb24gPSAzMzM7CiAgICB0LnNlbWljb2xvbiA9IDMzMzsKICAgIHQubGVzcyA9IDU4NDsKICAgIHQuZXF1YWwgPSA1ODQ7CiAgICB0LmdyZWF0ZXIgPSA1ODQ7CiAgICB0LnF1ZXN0aW9uID0gNjExOwogICAgdC5hdCA9IDk3NTsKICAgIHQuQSA9IDcyMjsKICAgIHQuQiA9IDcyMjsKICAgIHQuQyA9IDcyMjsKICAgIHQuRCA9IDcyMjsKICAgIHQuRSA9IDY2NzsKICAgIHQuRiA9IDYxMTsKICAgIHQuRyA9IDc3ODsKICAgIHQuSCA9IDcyMjsKICAgIHQuSSA9IDI3ODsKICAgIHQuSiA9IDU1NjsKICAgIHQuSyA9IDcyMjsKICAgIHQuTCA9IDYxMTsKICAgIHQuTSA9IDgzMzsKICAgIHQuTiA9IDcyMjsKICAgIHQuTyA9IDc3ODsKICAgIHQuUCA9IDY2NzsKICAgIHQuUSA9IDc3ODsKICAgIHQuUiA9IDcyMjsKICAgIHQuUyA9IDY2NzsKICAgIHQuVCA9IDYxMTsKICAgIHQuVSA9IDcyMjsKICAgIHQuViA9IDY2NzsKICAgIHQuVyA9IDk0NDsKICAgIHQuWCA9IDY2NzsKICAgIHQuWSA9IDY2NzsKICAgIHQuWiA9IDYxMTsKICAgIHQuYnJhY2tldGxlZnQgPSAzMzM7CiAgICB0LmJhY2tzbGFzaCA9IDI3ODsKICAgIHQuYnJhY2tldHJpZ2h0ID0gMzMzOwogICAgdC5hc2NpaWNpcmN1bSA9IDU4NDsKICAgIHQudW5kZXJzY29yZSA9IDU1NjsKICAgIHQucXVvdGVsZWZ0ID0gMjc4OwogICAgdC5hID0gNTU2OwogICAgdC5iID0gNjExOwogICAgdC5jID0gNTU2OwogICAgdC5kID0gNjExOwogICAgdC5lID0gNTU2OwogICAgdC5mID0gMzMzOwogICAgdC5nID0gNjExOwogICAgdC5oID0gNjExOwogICAgdC5pID0gMjc4OwogICAgdC5qID0gMjc4OwogICAgdC5rID0gNTU2OwogICAgdC5sID0gMjc4OwogICAgdC5tID0gODg5OwogICAgdC5uID0gNjExOwogICAgdC5vID0gNjExOwogICAgdC5wID0gNjExOwogICAgdC5xID0gNjExOwogICAgdC5yID0gMzg5OwogICAgdC5zID0gNTU2OwogICAgdC50ID0gMzMzOwogICAgdC51ID0gNjExOwogICAgdC52ID0gNTU2OwogICAgdC53ID0gNzc4OwogICAgdC54ID0gNTU2OwogICAgdC55ID0gNTU2OwogICAgdC56ID0gNTAwOwogICAgdC5icmFjZWxlZnQgPSAzODk7CiAgICB0LmJhciA9IDI4MDsKICAgIHQuYnJhY2VyaWdodCA9IDM4OTsKICAgIHQuYXNjaWl0aWxkZSA9IDU4NDsKICAgIHQuZXhjbGFtZG93biA9IDMzMzsKICAgIHQuY2VudCA9IDU1NjsKICAgIHQuc3RlcmxpbmcgPSA1NTY7CiAgICB0LmZyYWN0aW9uID0gMTY3OwogICAgdC55ZW4gPSA1NTY7CiAgICB0LmZsb3JpbiA9IDU1NjsKICAgIHQuc2VjdGlvbiA9IDU1NjsKICAgIHQuY3VycmVuY3kgPSA1NTY7CiAgICB0LnF1b3Rlc2luZ2xlID0gMjM4OwogICAgdC5xdW90ZWRibGxlZnQgPSA1MDA7CiAgICB0Lmd1aWxsZW1vdGxlZnQgPSA1NTY7CiAgICB0Lmd1aWxzaW5nbGxlZnQgPSAzMzM7CiAgICB0Lmd1aWxzaW5nbHJpZ2h0ID0gMzMzOwogICAgdC5maSA9IDYxMTsKICAgIHQuZmwgPSA2MTE7CiAgICB0LmVuZGFzaCA9IDU1NjsKICAgIHQuZGFnZ2VyID0gNTU2OwogICAgdC5kYWdnZXJkYmwgPSA1NTY7CiAgICB0LnBlcmlvZGNlbnRlcmVkID0gMjc4OwogICAgdC5wYXJhZ3JhcGggPSA1NTY7CiAgICB0LmJ1bGxldCA9IDM1MDsKICAgIHQucXVvdGVzaW5nbGJhc2UgPSAyNzg7CiAgICB0LnF1b3RlZGJsYmFzZSA9IDUwMDsKICAgIHQucXVvdGVkYmxyaWdodCA9IDUwMDsKICAgIHQuZ3VpbGxlbW90cmlnaHQgPSA1NTY7CiAgICB0LmVsbGlwc2lzID0gMTAwMDsKICAgIHQucGVydGhvdXNhbmQgPSAxMDAwOwogICAgdC5xdWVzdGlvbmRvd24gPSA2MTE7CiAgICB0LmdyYXZlID0gMzMzOwogICAgdC5hY3V0ZSA9IDMzMzsKICAgIHQuY2lyY3VtZmxleCA9IDMzMzsKICAgIHQudGlsZGUgPSAzMzM7CiAgICB0Lm1hY3JvbiA9IDMzMzsKICAgIHQuYnJldmUgPSAzMzM7CiAgICB0LmRvdGFjY2VudCA9IDMzMzsKICAgIHQuZGllcmVzaXMgPSAzMzM7CiAgICB0LnJpbmcgPSAzMzM7CiAgICB0LmNlZGlsbGEgPSAzMzM7CiAgICB0Lmh1bmdhcnVtbGF1dCA9IDMzMzsKICAgIHQub2dvbmVrID0gMzMzOwogICAgdC5jYXJvbiA9IDMzMzsKICAgIHQuZW1kYXNoID0gMTAwMDsKICAgIHQuQUUgPSAxMDAwOwogICAgdC5vcmRmZW1pbmluZSA9IDM3MDsKICAgIHQuTHNsYXNoID0gNjExOwogICAgdC5Pc2xhc2ggPSA3Nzg7CiAgICB0Lk9FID0gMTAwMDsKICAgIHQub3JkbWFzY3VsaW5lID0gMzY1OwogICAgdC5hZSA9IDg4OTsKICAgIHQuZG90bGVzc2kgPSAyNzg7CiAgICB0LmxzbGFzaCA9IDI3ODsKICAgIHQub3NsYXNoID0gNjExOwogICAgdC5vZSA9IDk0NDsKICAgIHQuZ2VybWFuZGJscyA9IDYxMTsKICAgIHQuSWRpZXJlc2lzID0gMjc4OwogICAgdC5lYWN1dGUgPSA1NTY7CiAgICB0LmFicmV2ZSA9IDU1NjsKICAgIHQudWh1bmdhcnVtbGF1dCA9IDYxMTsKICAgIHQuZWNhcm9uID0gNTU2OwogICAgdC5ZZGllcmVzaXMgPSA2Njc7CiAgICB0LmRpdmlkZSA9IDU4NDsKICAgIHQuWWFjdXRlID0gNjY3OwogICAgdC5BY2lyY3VtZmxleCA9IDcyMjsKICAgIHQuYWFjdXRlID0gNTU2OwogICAgdC5VY2lyY3VtZmxleCA9IDcyMjsKICAgIHQueWFjdXRlID0gNTU2OwogICAgdC5zY29tbWFhY2NlbnQgPSA1NTY7CiAgICB0LmVjaXJjdW1mbGV4ID0gNTU2OwogICAgdC5VcmluZyA9IDcyMjsKICAgIHQuVWRpZXJlc2lzID0gNzIyOwogICAgdC5hb2dvbmVrID0gNTU2OwogICAgdC5VYWN1dGUgPSA3MjI7CiAgICB0LnVvZ29uZWsgPSA2MTE7CiAgICB0LkVkaWVyZXNpcyA9IDY2NzsKICAgIHQuRGNyb2F0ID0gNzIyOwogICAgdC5jb21tYWFjY2VudCA9IDI1MDsKICAgIHQuY29weXJpZ2h0ID0gNzM3OwogICAgdC5FbWFjcm9uID0gNjY3OwogICAgdC5jY2Fyb24gPSA1NTY7CiAgICB0LmFyaW5nID0gNTU2OwogICAgdC5OY29tbWFhY2NlbnQgPSA3MjI7CiAgICB0LmxhY3V0ZSA9IDI3ODsKICAgIHQuYWdyYXZlID0gNTU2OwogICAgdC5UY29tbWFhY2NlbnQgPSA2MTE7CiAgICB0LkNhY3V0ZSA9IDcyMjsKICAgIHQuYXRpbGRlID0gNTU2OwogICAgdC5FZG90YWNjZW50ID0gNjY3OwogICAgdC5zY2Fyb24gPSA1NTY7CiAgICB0LnNjZWRpbGxhID0gNTU2OwogICAgdC5pYWN1dGUgPSAyNzg7CiAgICB0LmxvemVuZ2UgPSA0OTQ7CiAgICB0LlJjYXJvbiA9IDcyMjsKICAgIHQuR2NvbW1hYWNjZW50ID0gNzc4OwogICAgdC51Y2lyY3VtZmxleCA9IDYxMTsKICAgIHQuYWNpcmN1bWZsZXggPSA1NTY7CiAgICB0LkFtYWNyb24gPSA3MjI7CiAgICB0LnJjYXJvbiA9IDM4OTsKICAgIHQuY2NlZGlsbGEgPSA1NTY7CiAgICB0Llpkb3RhY2NlbnQgPSA2MTE7CiAgICB0LlRob3JuID0gNjY3OwogICAgdC5PbWFjcm9uID0gNzc4OwogICAgdC5SYWN1dGUgPSA3MjI7CiAgICB0LlNhY3V0ZSA9IDY2NzsKICAgIHQuZGNhcm9uID0gNzQzOwogICAgdC5VbWFjcm9uID0gNzIyOwogICAgdC51cmluZyA9IDYxMTsKICAgIHQudGhyZWVzdXBlcmlvciA9IDMzMzsKICAgIHQuT2dyYXZlID0gNzc4OwogICAgdC5BZ3JhdmUgPSA3MjI7CiAgICB0LkFicmV2ZSA9IDcyMjsKICAgIHQubXVsdGlwbHkgPSA1ODQ7CiAgICB0LnVhY3V0ZSA9IDYxMTsKICAgIHQuVGNhcm9uID0gNjExOwogICAgdC5wYXJ0aWFsZGlmZiA9IDQ5NDsKICAgIHQueWRpZXJlc2lzID0gNTU2OwogICAgdC5OYWN1dGUgPSA3MjI7CiAgICB0LmljaXJjdW1mbGV4ID0gMjc4OwogICAgdC5FY2lyY3VtZmxleCA9IDY2NzsKICAgIHQuYWRpZXJlc2lzID0gNTU2OwogICAgdC5lZGllcmVzaXMgPSA1NTY7CiAgICB0LmNhY3V0ZSA9IDU1NjsKICAgIHQubmFjdXRlID0gNjExOwogICAgdC51bWFjcm9uID0gNjExOwogICAgdC5OY2Fyb24gPSA3MjI7CiAgICB0LklhY3V0ZSA9IDI3ODsKICAgIHQucGx1c21pbnVzID0gNTg0OwogICAgdC5icm9rZW5iYXIgPSAyODA7CiAgICB0LnJlZ2lzdGVyZWQgPSA3Mzc7CiAgICB0LkdicmV2ZSA9IDc3ODsKICAgIHQuSWRvdGFjY2VudCA9IDI3ODsKICAgIHQuc3VtbWF0aW9uID0gNjAwOwogICAgdC5FZ3JhdmUgPSA2Njc7CiAgICB0LnJhY3V0ZSA9IDM4OTsKICAgIHQub21hY3JvbiA9IDYxMTsKICAgIHQuWmFjdXRlID0gNjExOwogICAgdC5aY2Fyb24gPSA2MTE7CiAgICB0LmdyZWF0ZXJlcXVhbCA9IDU0OTsKICAgIHQuRXRoID0gNzIyOwogICAgdC5DY2VkaWxsYSA9IDcyMjsKICAgIHQubGNvbW1hYWNjZW50ID0gMjc4OwogICAgdC50Y2Fyb24gPSAzODk7CiAgICB0LmVvZ29uZWsgPSA1NTY7CiAgICB0LlVvZ29uZWsgPSA3MjI7CiAgICB0LkFhY3V0ZSA9IDcyMjsKICAgIHQuQWRpZXJlc2lzID0gNzIyOwogICAgdC5lZ3JhdmUgPSA1NTY7CiAgICB0LnphY3V0ZSA9IDUwMDsKICAgIHQuaW9nb25layA9IDI3ODsKICAgIHQuT2FjdXRlID0gNzc4OwogICAgdC5vYWN1dGUgPSA2MTE7CiAgICB0LmFtYWNyb24gPSA1NTY7CiAgICB0LnNhY3V0ZSA9IDU1NjsKICAgIHQuaWRpZXJlc2lzID0gMjc4OwogICAgdC5PY2lyY3VtZmxleCA9IDc3ODsKICAgIHQuVWdyYXZlID0gNzIyOwogICAgdC5EZWx0YSA9IDYxMjsKICAgIHQudGhvcm4gPSA2MTE7CiAgICB0LnR3b3N1cGVyaW9yID0gMzMzOwogICAgdC5PZGllcmVzaXMgPSA3Nzg7CiAgICB0Lm11ID0gNjExOwogICAgdC5pZ3JhdmUgPSAyNzg7CiAgICB0Lm9odW5nYXJ1bWxhdXQgPSA2MTE7CiAgICB0LkVvZ29uZWsgPSA2Njc7CiAgICB0LmRjcm9hdCA9IDYxMTsKICAgIHQudGhyZWVxdWFydGVycyA9IDgzNDsKICAgIHQuU2NlZGlsbGEgPSA2Njc7CiAgICB0LmxjYXJvbiA9IDQwMDsKICAgIHQuS2NvbW1hYWNjZW50ID0gNzIyOwogICAgdC5MYWN1dGUgPSA2MTE7CiAgICB0LnRyYWRlbWFyayA9IDEwMDA7CiAgICB0LmVkb3RhY2NlbnQgPSA1NTY7CiAgICB0LklncmF2ZSA9IDI3ODsKICAgIHQuSW1hY3JvbiA9IDI3ODsKICAgIHQuTGNhcm9uID0gNjExOwogICAgdC5vbmVoYWxmID0gODM0OwogICAgdC5sZXNzZXF1YWwgPSA1NDk7CiAgICB0Lm9jaXJjdW1mbGV4ID0gNjExOwogICAgdC5udGlsZGUgPSA2MTE7CiAgICB0LlVodW5nYXJ1bWxhdXQgPSA3MjI7CiAgICB0LkVhY3V0ZSA9IDY2NzsKICAgIHQuZW1hY3JvbiA9IDU1NjsKICAgIHQuZ2JyZXZlID0gNjExOwogICAgdC5vbmVxdWFydGVyID0gODM0OwogICAgdC5TY2Fyb24gPSA2Njc7CiAgICB0LlNjb21tYWFjY2VudCA9IDY2NzsKICAgIHQuT2h1bmdhcnVtbGF1dCA9IDc3ODsKICAgIHQuZGVncmVlID0gNDAwOwogICAgdC5vZ3JhdmUgPSA2MTE7CiAgICB0LkNjYXJvbiA9IDcyMjsKICAgIHQudWdyYXZlID0gNjExOwogICAgdC5yYWRpY2FsID0gNTQ5OwogICAgdC5EY2Fyb24gPSA3MjI7CiAgICB0LnJjb21tYWFjY2VudCA9IDM4OTsKICAgIHQuTnRpbGRlID0gNzIyOwogICAgdC5vdGlsZGUgPSA2MTE7CiAgICB0LlJjb21tYWFjY2VudCA9IDcyMjsKICAgIHQuTGNvbW1hYWNjZW50ID0gNjExOwogICAgdC5BdGlsZGUgPSA3MjI7CiAgICB0LkFvZ29uZWsgPSA3MjI7CiAgICB0LkFyaW5nID0gNzIyOwogICAgdC5PdGlsZGUgPSA3Nzg7CiAgICB0Lnpkb3RhY2NlbnQgPSA1MDA7CiAgICB0LkVjYXJvbiA9IDY2NzsKICAgIHQuSW9nb25layA9IDI3ODsKICAgIHQua2NvbW1hYWNjZW50ID0gNTU2OwogICAgdC5taW51cyA9IDU4NDsKICAgIHQuSWNpcmN1bWZsZXggPSAyNzg7CiAgICB0Lm5jYXJvbiA9IDYxMTsKICAgIHQudGNvbW1hYWNjZW50ID0gMzMzOwogICAgdC5sb2dpY2Fsbm90ID0gNTg0OwogICAgdC5vZGllcmVzaXMgPSA2MTE7CiAgICB0LnVkaWVyZXNpcyA9IDYxMTsKICAgIHQubm90ZXF1YWwgPSA1NDk7CiAgICB0Lmdjb21tYWFjY2VudCA9IDYxMTsKICAgIHQuZXRoID0gNjExOwogICAgdC56Y2Fyb24gPSA1MDA7CiAgICB0Lm5jb21tYWFjY2VudCA9IDYxMTsKICAgIHQub25lc3VwZXJpb3IgPSAzMzM7CiAgICB0LmltYWNyb24gPSAyNzg7CiAgICB0LkV1cm8gPSA1NTY7CiAgfSk7CiAgdFsiSGVsdmV0aWNhLU9ibGlxdWUiXSA9IGdldExvb2t1cFRhYmxlRmFjdG9yeShmdW5jdGlvbiAodCkgewogICAgdC5zcGFjZSA9IDI3ODsKICAgIHQuZXhjbGFtID0gMjc4OwogICAgdC5xdW90ZWRibCA9IDM1NTsKICAgIHQubnVtYmVyc2lnbiA9IDU1NjsKICAgIHQuZG9sbGFyID0gNTU2OwogICAgdC5wZXJjZW50ID0gODg5OwogICAgdC5hbXBlcnNhbmQgPSA2Njc7CiAgICB0LnF1b3RlcmlnaHQgPSAyMjI7CiAgICB0LnBhcmVubGVmdCA9IDMzMzsKICAgIHQucGFyZW5yaWdodCA9IDMzMzsKICAgIHQuYXN0ZXJpc2sgPSAzODk7CiAgICB0LnBsdXMgPSA1ODQ7CiAgICB0LmNvbW1hID0gMjc4OwogICAgdC5oeXBoZW4gPSAzMzM7CiAgICB0LnBlcmlvZCA9IDI3ODsKICAgIHQuc2xhc2ggPSAyNzg7CiAgICB0Lnplcm8gPSA1NTY7CiAgICB0Lm9uZSA9IDU1NjsKICAgIHQudHdvID0gNTU2OwogICAgdC50aHJlZSA9IDU1NjsKICAgIHQuZm91ciA9IDU1NjsKICAgIHQuZml2ZSA9IDU1NjsKICAgIHQuc2l4ID0gNTU2OwogICAgdC5zZXZlbiA9IDU1NjsKICAgIHQuZWlnaHQgPSA1NTY7CiAgICB0Lm5pbmUgPSA1NTY7CiAgICB0LmNvbG9uID0gMjc4OwogICAgdC5zZW1pY29sb24gPSAyNzg7CiAgICB0Lmxlc3MgPSA1ODQ7CiAgICB0LmVxdWFsID0gNTg0OwogICAgdC5ncmVhdGVyID0gNTg0OwogICAgdC5xdWVzdGlvbiA9IDU1NjsKICAgIHQuYXQgPSAxMDE1OwogICAgdC5BID0gNjY3OwogICAgdC5CID0gNjY3OwogICAgdC5DID0gNzIyOwogICAgdC5EID0gNzIyOwogICAgdC5FID0gNjY3OwogICAgdC5GID0gNjExOwogICAgdC5HID0gNzc4OwogICAgdC5IID0gNzIyOwogICAgdC5JID0gMjc4OwogICAgdC5KID0gNTAwOwogICAgdC5LID0gNjY3OwogICAgdC5MID0gNTU2OwogICAgdC5NID0gODMzOwogICAgdC5OID0gNzIyOwogICAgdC5PID0gNzc4OwogICAgdC5QID0gNjY3OwogICAgdC5RID0gNzc4OwogICAgdC5SID0gNzIyOwogICAgdC5TID0gNjY3OwogICAgdC5UID0gNjExOwogICAgdC5VID0gNzIyOwogICAgdC5WID0gNjY3OwogICAgdC5XID0gOTQ0OwogICAgdC5YID0gNjY3OwogICAgdC5ZID0gNjY3OwogICAgdC5aID0gNjExOwogICAgdC5icmFja2V0bGVmdCA9IDI3ODsKICAgIHQuYmFja3NsYXNoID0gMjc4OwogICAgdC5icmFja2V0cmlnaHQgPSAyNzg7CiAgICB0LmFzY2lpY2lyY3VtID0gNDY5OwogICAgdC51bmRlcnNjb3JlID0gNTU2OwogICAgdC5xdW90ZWxlZnQgPSAyMjI7CiAgICB0LmEgPSA1NTY7CiAgICB0LmIgPSA1NTY7CiAgICB0LmMgPSA1MDA7CiAgICB0LmQgPSA1NTY7CiAgICB0LmUgPSA1NTY7CiAgICB0LmYgPSAyNzg7CiAgICB0LmcgPSA1NTY7CiAgICB0LmggPSA1NTY7CiAgICB0LmkgPSAyMjI7CiAgICB0LmogPSAyMjI7CiAgICB0LmsgPSA1MDA7CiAgICB0LmwgPSAyMjI7CiAgICB0Lm0gPSA4MzM7CiAgICB0Lm4gPSA1NTY7CiAgICB0Lm8gPSA1NTY7CiAgICB0LnAgPSA1NTY7CiAgICB0LnEgPSA1NTY7CiAgICB0LnIgPSAzMzM7CiAgICB0LnMgPSA1MDA7CiAgICB0LnQgPSAyNzg7CiAgICB0LnUgPSA1NTY7CiAgICB0LnYgPSA1MDA7CiAgICB0LncgPSA3MjI7CiAgICB0LnggPSA1MDA7CiAgICB0LnkgPSA1MDA7CiAgICB0LnogPSA1MDA7CiAgICB0LmJyYWNlbGVmdCA9IDMzNDsKICAgIHQuYmFyID0gMjYwOwogICAgdC5icmFjZXJpZ2h0ID0gMzM0OwogICAgdC5hc2NpaXRpbGRlID0gNTg0OwogICAgdC5leGNsYW1kb3duID0gMzMzOwogICAgdC5jZW50ID0gNTU2OwogICAgdC5zdGVybGluZyA9IDU1NjsKICAgIHQuZnJhY3Rpb24gPSAxNjc7CiAgICB0LnllbiA9IDU1NjsKICAgIHQuZmxvcmluID0gNTU2OwogICAgdC5zZWN0aW9uID0gNTU2OwogICAgdC5jdXJyZW5jeSA9IDU1NjsKICAgIHQucXVvdGVzaW5nbGUgPSAxOTE7CiAgICB0LnF1b3RlZGJsbGVmdCA9IDMzMzsKICAgIHQuZ3VpbGxlbW90bGVmdCA9IDU1NjsKICAgIHQuZ3VpbHNpbmdsbGVmdCA9IDMzMzsKICAgIHQuZ3VpbHNpbmdscmlnaHQgPSAzMzM7CiAgICB0LmZpID0gNTAwOwogICAgdC5mbCA9IDUwMDsKICAgIHQuZW5kYXNoID0gNTU2OwogICAgdC5kYWdnZXIgPSA1NTY7CiAgICB0LmRhZ2dlcmRibCA9IDU1NjsKICAgIHQucGVyaW9kY2VudGVyZWQgPSAyNzg7CiAgICB0LnBhcmFncmFwaCA9IDUzNzsKICAgIHQuYnVsbGV0ID0gMzUwOwogICAgdC5xdW90ZXNpbmdsYmFzZSA9IDIyMjsKICAgIHQucXVvdGVkYmxiYXNlID0gMzMzOwogICAgdC5xdW90ZWRibHJpZ2h0ID0gMzMzOwogICAgdC5ndWlsbGVtb3RyaWdodCA9IDU1NjsKICAgIHQuZWxsaXBzaXMgPSAxMDAwOwogICAgdC5wZXJ0aG91c2FuZCA9IDEwMDA7CiAgICB0LnF1ZXN0aW9uZG93biA9IDYxMTsKICAgIHQuZ3JhdmUgPSAzMzM7CiAgICB0LmFjdXRlID0gMzMzOwogICAgdC5jaXJjdW1mbGV4ID0gMzMzOwogICAgdC50aWxkZSA9IDMzMzsKICAgIHQubWFjcm9uID0gMzMzOwogICAgdC5icmV2ZSA9IDMzMzsKICAgIHQuZG90YWNjZW50ID0gMzMzOwogICAgdC5kaWVyZXNpcyA9IDMzMzsKICAgIHQucmluZyA9IDMzMzsKICAgIHQuY2VkaWxsYSA9IDMzMzsKICAgIHQuaHVuZ2FydW1sYXV0ID0gMzMzOwogICAgdC5vZ29uZWsgPSAzMzM7CiAgICB0LmNhcm9uID0gMzMzOwogICAgdC5lbWRhc2ggPSAxMDAwOwogICAgdC5BRSA9IDEwMDA7CiAgICB0Lm9yZGZlbWluaW5lID0gMzcwOwogICAgdC5Mc2xhc2ggPSA1NTY7CiAgICB0Lk9zbGFzaCA9IDc3ODsKICAgIHQuT0UgPSAxMDAwOwogICAgdC5vcmRtYXNjdWxpbmUgPSAzNjU7CiAgICB0LmFlID0gODg5OwogICAgdC5kb3RsZXNzaSA9IDI3ODsKICAgIHQubHNsYXNoID0gMjIyOwogICAgdC5vc2xhc2ggPSA2MTE7CiAgICB0Lm9lID0gOTQ0OwogICAgdC5nZXJtYW5kYmxzID0gNjExOwogICAgdC5JZGllcmVzaXMgPSAyNzg7CiAgICB0LmVhY3V0ZSA9IDU1NjsKICAgIHQuYWJyZXZlID0gNTU2OwogICAgdC51aHVuZ2FydW1sYXV0ID0gNTU2OwogICAgdC5lY2Fyb24gPSA1NTY7CiAgICB0LllkaWVyZXNpcyA9IDY2NzsKICAgIHQuZGl2aWRlID0gNTg0OwogICAgdC5ZYWN1dGUgPSA2Njc7CiAgICB0LkFjaXJjdW1mbGV4ID0gNjY3OwogICAgdC5hYWN1dGUgPSA1NTY7CiAgICB0LlVjaXJjdW1mbGV4ID0gNzIyOwogICAgdC55YWN1dGUgPSA1MDA7CiAgICB0LnNjb21tYWFjY2VudCA9IDUwMDsKICAgIHQuZWNpcmN1bWZsZXggPSA1NTY7CiAgICB0LlVyaW5nID0gNzIyOwogICAgdC5VZGllcmVzaXMgPSA3MjI7CiAgICB0LmFvZ29uZWsgPSA1NTY7CiAgICB0LlVhY3V0ZSA9IDcyMjsKICAgIHQudW9nb25layA9IDU1NjsKICAgIHQuRWRpZXJlc2lzID0gNjY3OwogICAgdC5EY3JvYXQgPSA3MjI7CiAgICB0LmNvbW1hYWNjZW50ID0gMjUwOwogICAgdC5jb3B5cmlnaHQgPSA3Mzc7CiAgICB0LkVtYWNyb24gPSA2Njc7CiAgICB0LmNjYXJvbiA9IDUwMDsKICAgIHQuYXJpbmcgPSA1NTY7CiAgICB0Lk5jb21tYWFjY2VudCA9IDcyMjsKICAgIHQubGFjdXRlID0gMjIyOwogICAgdC5hZ3JhdmUgPSA1NTY7CiAgICB0LlRjb21tYWFjY2VudCA9IDYxMTsKICAgIHQuQ2FjdXRlID0gNzIyOwogICAgdC5hdGlsZGUgPSA1NTY7CiAgICB0LkVkb3RhY2NlbnQgPSA2Njc7CiAgICB0LnNjYXJvbiA9IDUwMDsKICAgIHQuc2NlZGlsbGEgPSA1MDA7CiAgICB0LmlhY3V0ZSA9IDI3ODsKICAgIHQubG96ZW5nZSA9IDQ3MTsKICAgIHQuUmNhcm9uID0gNzIyOwogICAgdC5HY29tbWFhY2NlbnQgPSA3Nzg7CiAgICB0LnVjaXJjdW1mbGV4ID0gNTU2OwogICAgdC5hY2lyY3VtZmxleCA9IDU1NjsKICAgIHQuQW1hY3JvbiA9IDY2NzsKICAgIHQucmNhcm9uID0gMzMzOwogICAgdC5jY2VkaWxsYSA9IDUwMDsKICAgIHQuWmRvdGFjY2VudCA9IDYxMTsKICAgIHQuVGhvcm4gPSA2Njc7CiAgICB0Lk9tYWNyb24gPSA3Nzg7CiAgICB0LlJhY3V0ZSA9IDcyMjsKICAgIHQuU2FjdXRlID0gNjY3OwogICAgdC5kY2Fyb24gPSA2NDM7CiAgICB0LlVtYWNyb24gPSA3MjI7CiAgICB0LnVyaW5nID0gNTU2OwogICAgdC50aHJlZXN1cGVyaW9yID0gMzMzOwogICAgdC5PZ3JhdmUgPSA3Nzg7CiAgICB0LkFncmF2ZSA9IDY2NzsKICAgIHQuQWJyZXZlID0gNjY3OwogICAgdC5tdWx0aXBseSA9IDU4NDsKICAgIHQudWFjdXRlID0gNTU2OwogICAgdC5UY2Fyb24gPSA2MTE7CiAgICB0LnBhcnRpYWxkaWZmID0gNDc2OwogICAgdC55ZGllcmVzaXMgPSA1MDA7CiAgICB0Lk5hY3V0ZSA9IDcyMjsKICAgIHQuaWNpcmN1bWZsZXggPSAyNzg7CiAgICB0LkVjaXJjdW1mbGV4ID0gNjY3OwogICAgdC5hZGllcmVzaXMgPSA1NTY7CiAgICB0LmVkaWVyZXNpcyA9IDU1NjsKICAgIHQuY2FjdXRlID0gNTAwOwogICAgdC5uYWN1dGUgPSA1NTY7CiAgICB0LnVtYWNyb24gPSA1NTY7CiAgICB0Lk5jYXJvbiA9IDcyMjsKICAgIHQuSWFjdXRlID0gMjc4OwogICAgdC5wbHVzbWludXMgPSA1ODQ7CiAgICB0LmJyb2tlbmJhciA9IDI2MDsKICAgIHQucmVnaXN0ZXJlZCA9IDczNzsKICAgIHQuR2JyZXZlID0gNzc4OwogICAgdC5JZG90YWNjZW50ID0gMjc4OwogICAgdC5zdW1tYXRpb24gPSA2MDA7CiAgICB0LkVncmF2ZSA9IDY2NzsKICAgIHQucmFjdXRlID0gMzMzOwogICAgdC5vbWFjcm9uID0gNTU2OwogICAgdC5aYWN1dGUgPSA2MTE7CiAgICB0LlpjYXJvbiA9IDYxMTsKICAgIHQuZ3JlYXRlcmVxdWFsID0gNTQ5OwogICAgdC5FdGggPSA3MjI7CiAgICB0LkNjZWRpbGxhID0gNzIyOwogICAgdC5sY29tbWFhY2NlbnQgPSAyMjI7CiAgICB0LnRjYXJvbiA9IDMxNzsKICAgIHQuZW9nb25layA9IDU1NjsKICAgIHQuVW9nb25layA9IDcyMjsKICAgIHQuQWFjdXRlID0gNjY3OwogICAgdC5BZGllcmVzaXMgPSA2Njc7CiAgICB0LmVncmF2ZSA9IDU1NjsKICAgIHQuemFjdXRlID0gNTAwOwogICAgdC5pb2dvbmVrID0gMjIyOwogICAgdC5PYWN1dGUgPSA3Nzg7CiAgICB0Lm9hY3V0ZSA9IDU1NjsKICAgIHQuYW1hY3JvbiA9IDU1NjsKICAgIHQuc2FjdXRlID0gNTAwOwogICAgdC5pZGllcmVzaXMgPSAyNzg7CiAgICB0Lk9jaXJjdW1mbGV4ID0gNzc4OwogICAgdC5VZ3JhdmUgPSA3MjI7CiAgICB0LkRlbHRhID0gNjEyOwogICAgdC50aG9ybiA9IDU1NjsKICAgIHQudHdvc3VwZXJpb3IgPSAzMzM7CiAgICB0Lk9kaWVyZXNpcyA9IDc3ODsKICAgIHQubXUgPSA1NTY7CiAgICB0LmlncmF2ZSA9IDI3ODsKICAgIHQub2h1bmdhcnVtbGF1dCA9IDU1NjsKICAgIHQuRW9nb25layA9IDY2NzsKICAgIHQuZGNyb2F0ID0gNTU2OwogICAgdC50aHJlZXF1YXJ0ZXJzID0gODM0OwogICAgdC5TY2VkaWxsYSA9IDY2NzsKICAgIHQubGNhcm9uID0gMjk5OwogICAgdC5LY29tbWFhY2NlbnQgPSA2Njc7CiAgICB0LkxhY3V0ZSA9IDU1NjsKICAgIHQudHJhZGVtYXJrID0gMTAwMDsKICAgIHQuZWRvdGFjY2VudCA9IDU1NjsKICAgIHQuSWdyYXZlID0gMjc4OwogICAgdC5JbWFjcm9uID0gMjc4OwogICAgdC5MY2Fyb24gPSA1NTY7CiAgICB0Lm9uZWhhbGYgPSA4MzQ7CiAgICB0Lmxlc3NlcXVhbCA9IDU0OTsKICAgIHQub2NpcmN1bWZsZXggPSA1NTY7CiAgICB0Lm50aWxkZSA9IDU1NjsKICAgIHQuVWh1bmdhcnVtbGF1dCA9IDcyMjsKICAgIHQuRWFjdXRlID0gNjY3OwogICAgdC5lbWFjcm9uID0gNTU2OwogICAgdC5nYnJldmUgPSA1NTY7CiAgICB0Lm9uZXF1YXJ0ZXIgPSA4MzQ7CiAgICB0LlNjYXJvbiA9IDY2NzsKICAgIHQuU2NvbW1hYWNjZW50ID0gNjY3OwogICAgdC5PaHVuZ2FydW1sYXV0ID0gNzc4OwogICAgdC5kZWdyZWUgPSA0MDA7CiAgICB0Lm9ncmF2ZSA9IDU1NjsKICAgIHQuQ2Nhcm9uID0gNzIyOwogICAgdC51Z3JhdmUgPSA1NTY7CiAgICB0LnJhZGljYWwgPSA0NTM7CiAgICB0LkRjYXJvbiA9IDcyMjsKICAgIHQucmNvbW1hYWNjZW50ID0gMzMzOwogICAgdC5OdGlsZGUgPSA3MjI7CiAgICB0Lm90aWxkZSA9IDU1NjsKICAgIHQuUmNvbW1hYWNjZW50ID0gNzIyOwogICAgdC5MY29tbWFhY2NlbnQgPSA1NTY7CiAgICB0LkF0aWxkZSA9IDY2NzsKICAgIHQuQW9nb25layA9IDY2NzsKICAgIHQuQXJpbmcgPSA2Njc7CiAgICB0Lk90aWxkZSA9IDc3ODsKICAgIHQuemRvdGFjY2VudCA9IDUwMDsKICAgIHQuRWNhcm9uID0gNjY3OwogICAgdC5Jb2dvbmVrID0gMjc4OwogICAgdC5rY29tbWFhY2NlbnQgPSA1MDA7CiAgICB0Lm1pbnVzID0gNTg0OwogICAgdC5JY2lyY3VtZmxleCA9IDI3ODsKICAgIHQubmNhcm9uID0gNTU2OwogICAgdC50Y29tbWFhY2NlbnQgPSAyNzg7CiAgICB0LmxvZ2ljYWxub3QgPSA1ODQ7CiAgICB0Lm9kaWVyZXNpcyA9IDU1NjsKICAgIHQudWRpZXJlc2lzID0gNTU2OwogICAgdC5ub3RlcXVhbCA9IDU0OTsKICAgIHQuZ2NvbW1hYWNjZW50ID0gNTU2OwogICAgdC5ldGggPSA1NTY7CiAgICB0LnpjYXJvbiA9IDUwMDsKICAgIHQubmNvbW1hYWNjZW50ID0gNTU2OwogICAgdC5vbmVzdXBlcmlvciA9IDMzMzsKICAgIHQuaW1hY3JvbiA9IDI3ODsKICAgIHQuRXVybyA9IDU1NjsKICB9KTsKICB0LlN5bWJvbCA9IGdldExvb2t1cFRhYmxlRmFjdG9yeShmdW5jdGlvbiAodCkgewogICAgdC5zcGFjZSA9IDI1MDsKICAgIHQuZXhjbGFtID0gMzMzOwogICAgdC51bml2ZXJzYWwgPSA3MTM7CiAgICB0Lm51bWJlcnNpZ24gPSA1MDA7CiAgICB0LmV4aXN0ZW50aWFsID0gNTQ5OwogICAgdC5wZXJjZW50ID0gODMzOwogICAgdC5hbXBlcnNhbmQgPSA3Nzg7CiAgICB0LnN1Y2h0aGF0ID0gNDM5OwogICAgdC5wYXJlbmxlZnQgPSAzMzM7CiAgICB0LnBhcmVucmlnaHQgPSAzMzM7CiAgICB0LmFzdGVyaXNrbWF0aCA9IDUwMDsKICAgIHQucGx1cyA9IDU0OTsKICAgIHQuY29tbWEgPSAyNTA7CiAgICB0Lm1pbnVzID0gNTQ5OwogICAgdC5wZXJpb2QgPSAyNTA7CiAgICB0LnNsYXNoID0gMjc4OwogICAgdC56ZXJvID0gNTAwOwogICAgdC5vbmUgPSA1MDA7CiAgICB0LnR3byA9IDUwMDsKICAgIHQudGhyZWUgPSA1MDA7CiAgICB0LmZvdXIgPSA1MDA7CiAgICB0LmZpdmUgPSA1MDA7CiAgICB0LnNpeCA9IDUwMDsKICAgIHQuc2V2ZW4gPSA1MDA7CiAgICB0LmVpZ2h0ID0gNTAwOwogICAgdC5uaW5lID0gNTAwOwogICAgdC5jb2xvbiA9IDI3ODsKICAgIHQuc2VtaWNvbG9uID0gMjc4OwogICAgdC5sZXNzID0gNTQ5OwogICAgdC5lcXVhbCA9IDU0OTsKICAgIHQuZ3JlYXRlciA9IDU0OTsKICAgIHQucXVlc3Rpb24gPSA0NDQ7CiAgICB0LmNvbmdydWVudCA9IDU0OTsKICAgIHQuQWxwaGEgPSA3MjI7CiAgICB0LkJldGEgPSA2Njc7CiAgICB0LkNoaSA9IDcyMjsKICAgIHQuRGVsdGEgPSA2MTI7CiAgICB0LkVwc2lsb24gPSA2MTE7CiAgICB0LlBoaSA9IDc2MzsKICAgIHQuR2FtbWEgPSA2MDM7CiAgICB0LkV0YSA9IDcyMjsKICAgIHQuSW90YSA9IDMzMzsKICAgIHQudGhldGExID0gNjMxOwogICAgdC5LYXBwYSA9IDcyMjsKICAgIHQuTGFtYmRhID0gNjg2OwogICAgdC5NdSA9IDg4OTsKICAgIHQuTnUgPSA3MjI7CiAgICB0Lk9taWNyb24gPSA3MjI7CiAgICB0LlBpID0gNzY4OwogICAgdC5UaGV0YSA9IDc0MTsKICAgIHQuUmhvID0gNTU2OwogICAgdC5TaWdtYSA9IDU5MjsKICAgIHQuVGF1ID0gNjExOwogICAgdC5VcHNpbG9uID0gNjkwOwogICAgdC5zaWdtYTEgPSA0Mzk7CiAgICB0Lk9tZWdhID0gNzY4OwogICAgdC5YaSA9IDY0NTsKICAgIHQuUHNpID0gNzk1OwogICAgdC5aZXRhID0gNjExOwogICAgdC5icmFja2V0bGVmdCA9IDMzMzsKICAgIHQudGhlcmVmb3JlID0gODYzOwogICAgdC5icmFja2V0cmlnaHQgPSAzMzM7CiAgICB0LnBlcnBlbmRpY3VsYXIgPSA2NTg7CiAgICB0LnVuZGVyc2NvcmUgPSA1MDA7CiAgICB0LnJhZGljYWxleCA9IDUwMDsKICAgIHQuYWxwaGEgPSA2MzE7CiAgICB0LmJldGEgPSA1NDk7CiAgICB0LmNoaSA9IDU0OTsKICAgIHQuZGVsdGEgPSA0OTQ7CiAgICB0LmVwc2lsb24gPSA0Mzk7CiAgICB0LnBoaSA9IDUyMTsKICAgIHQuZ2FtbWEgPSA0MTE7CiAgICB0LmV0YSA9IDYwMzsKICAgIHQuaW90YSA9IDMyOTsKICAgIHQucGhpMSA9IDYwMzsKICAgIHQua2FwcGEgPSA1NDk7CiAgICB0LmxhbWJkYSA9IDU0OTsKICAgIHQubXUgPSA1NzY7CiAgICB0Lm51ID0gNTIxOwogICAgdC5vbWljcm9uID0gNTQ5OwogICAgdC5waSA9IDU0OTsKICAgIHQudGhldGEgPSA1MjE7CiAgICB0LnJobyA9IDU0OTsKICAgIHQuc2lnbWEgPSA2MDM7CiAgICB0LnRhdSA9IDQzOTsKICAgIHQudXBzaWxvbiA9IDU3NjsKICAgIHQub21lZ2ExID0gNzEzOwogICAgdC5vbWVnYSA9IDY4NjsKICAgIHQueGkgPSA0OTM7CiAgICB0LnBzaSA9IDY4NjsKICAgIHQuemV0YSA9IDQ5NDsKICAgIHQuYnJhY2VsZWZ0ID0gNDgwOwogICAgdC5iYXIgPSAyMDA7CiAgICB0LmJyYWNlcmlnaHQgPSA0ODA7CiAgICB0LnNpbWlsYXIgPSA1NDk7CiAgICB0LkV1cm8gPSA3NTA7CiAgICB0LlVwc2lsb24xID0gNjIwOwogICAgdC5taW51dGUgPSAyNDc7CiAgICB0Lmxlc3NlcXVhbCA9IDU0OTsKICAgIHQuZnJhY3Rpb24gPSAxNjc7CiAgICB0LmluZmluaXR5ID0gNzEzOwogICAgdC5mbG9yaW4gPSA1MDA7CiAgICB0LmNsdWIgPSA3NTM7CiAgICB0LmRpYW1vbmQgPSA3NTM7CiAgICB0LmhlYXJ0ID0gNzUzOwogICAgdC5zcGFkZSA9IDc1MzsKICAgIHQuYXJyb3dib3RoID0gMTA0MjsKICAgIHQuYXJyb3dsZWZ0ID0gOTg3OwogICAgdC5hcnJvd3VwID0gNjAzOwogICAgdC5hcnJvd3JpZ2h0ID0gOTg3OwogICAgdC5hcnJvd2Rvd24gPSA2MDM7CiAgICB0LmRlZ3JlZSA9IDQwMDsKICAgIHQucGx1c21pbnVzID0gNTQ5OwogICAgdC5zZWNvbmQgPSA0MTE7CiAgICB0LmdyZWF0ZXJlcXVhbCA9IDU0OTsKICAgIHQubXVsdGlwbHkgPSA1NDk7CiAgICB0LnByb3BvcnRpb25hbCA9IDcxMzsKICAgIHQucGFydGlhbGRpZmYgPSA0OTQ7CiAgICB0LmJ1bGxldCA9IDQ2MDsKICAgIHQuZGl2aWRlID0gNTQ5OwogICAgdC5ub3RlcXVhbCA9IDU0OTsKICAgIHQuZXF1aXZhbGVuY2UgPSA1NDk7CiAgICB0LmFwcHJveGVxdWFsID0gNTQ5OwogICAgdC5lbGxpcHNpcyA9IDEwMDA7CiAgICB0LmFycm93dmVydGV4ID0gNjAzOwogICAgdC5hcnJvd2hvcml6ZXggPSAxMDAwOwogICAgdC5jYXJyaWFnZXJldHVybiA9IDY1ODsKICAgIHQuYWxlcGggPSA4MjM7CiAgICB0LklmcmFrdHVyID0gNjg2OwogICAgdC5SZnJha3R1ciA9IDc5NTsKICAgIHQud2VpZXJzdHJhc3MgPSA5ODc7CiAgICB0LmNpcmNsZW11bHRpcGx5ID0gNzY4OwogICAgdC5jaXJjbGVwbHVzID0gNzY4OwogICAgdC5lbXB0eXNldCA9IDgyMzsKICAgIHQuaW50ZXJzZWN0aW9uID0gNzY4OwogICAgdC51bmlvbiA9IDc2ODsKICAgIHQucHJvcGVyc3VwZXJzZXQgPSA3MTM7CiAgICB0LnJlZmxleHN1cGVyc2V0ID0gNzEzOwogICAgdC5ub3RzdWJzZXQgPSA3MTM7CiAgICB0LnByb3BlcnN1YnNldCA9IDcxMzsKICAgIHQucmVmbGV4c3Vic2V0ID0gNzEzOwogICAgdC5lbGVtZW50ID0gNzEzOwogICAgdC5ub3RlbGVtZW50ID0gNzEzOwogICAgdC5hbmdsZSA9IDc2ODsKICAgIHQuZ3JhZGllbnQgPSA3MTM7CiAgICB0LnJlZ2lzdGVyc2VyaWYgPSA3OTA7CiAgICB0LmNvcHlyaWdodHNlcmlmID0gNzkwOwogICAgdC50cmFkZW1hcmtzZXJpZiA9IDg5MDsKICAgIHQucHJvZHVjdCA9IDgyMzsKICAgIHQucmFkaWNhbCA9IDU0OTsKICAgIHQuZG90bWF0aCA9IDI1MDsKICAgIHQubG9naWNhbG5vdCA9IDcxMzsKICAgIHQubG9naWNhbGFuZCA9IDYwMzsKICAgIHQubG9naWNhbG9yID0gNjAzOwogICAgdC5hcnJvd2RibGJvdGggPSAxMDQyOwogICAgdC5hcnJvd2RibGxlZnQgPSA5ODc7CiAgICB0LmFycm93ZGJsdXAgPSA2MDM7CiAgICB0LmFycm93ZGJscmlnaHQgPSA5ODc7CiAgICB0LmFycm93ZGJsZG93biA9IDYwMzsKICAgIHQubG96ZW5nZSA9IDQ5NDsKICAgIHQuYW5nbGVsZWZ0ID0gMzI5OwogICAgdC5yZWdpc3RlcnNhbnMgPSA3OTA7CiAgICB0LmNvcHlyaWdodHNhbnMgPSA3OTA7CiAgICB0LnRyYWRlbWFya3NhbnMgPSA3ODY7CiAgICB0LnN1bW1hdGlvbiA9IDcxMzsKICAgIHQucGFyZW5sZWZ0dHAgPSAzODQ7CiAgICB0LnBhcmVubGVmdGV4ID0gMzg0OwogICAgdC5wYXJlbmxlZnRidCA9IDM4NDsKICAgIHQuYnJhY2tldGxlZnR0cCA9IDM4NDsKICAgIHQuYnJhY2tldGxlZnRleCA9IDM4NDsKICAgIHQuYnJhY2tldGxlZnRidCA9IDM4NDsKICAgIHQuYnJhY2VsZWZ0dHAgPSA0OTQ7CiAgICB0LmJyYWNlbGVmdG1pZCA9IDQ5NDsKICAgIHQuYnJhY2VsZWZ0YnQgPSA0OTQ7CiAgICB0LmJyYWNlZXggPSA0OTQ7CiAgICB0LmFuZ2xlcmlnaHQgPSAzMjk7CiAgICB0LmludGVncmFsID0gMjc0OwogICAgdC5pbnRlZ3JhbHRwID0gNjg2OwogICAgdC5pbnRlZ3JhbGV4ID0gNjg2OwogICAgdC5pbnRlZ3JhbGJ0ID0gNjg2OwogICAgdC5wYXJlbnJpZ2h0dHAgPSAzODQ7CiAgICB0LnBhcmVucmlnaHRleCA9IDM4NDsKICAgIHQucGFyZW5yaWdodGJ0ID0gMzg0OwogICAgdC5icmFja2V0cmlnaHR0cCA9IDM4NDsKICAgIHQuYnJhY2tldHJpZ2h0ZXggPSAzODQ7CiAgICB0LmJyYWNrZXRyaWdodGJ0ID0gMzg0OwogICAgdC5icmFjZXJpZ2h0dHAgPSA0OTQ7CiAgICB0LmJyYWNlcmlnaHRtaWQgPSA0OTQ7CiAgICB0LmJyYWNlcmlnaHRidCA9IDQ5NDsKICAgIHQuYXBwbGUgPSA3OTA7CiAgfSk7CiAgdFsiVGltZXMtUm9tYW4iXSA9IGdldExvb2t1cFRhYmxlRmFjdG9yeShmdW5jdGlvbiAodCkgewogICAgdC5zcGFjZSA9IDI1MDsKICAgIHQuZXhjbGFtID0gMzMzOwogICAgdC5xdW90ZWRibCA9IDQwODsKICAgIHQubnVtYmVyc2lnbiA9IDUwMDsKICAgIHQuZG9sbGFyID0gNTAwOwogICAgdC5wZXJjZW50ID0gODMzOwogICAgdC5hbXBlcnNhbmQgPSA3Nzg7CiAgICB0LnF1b3RlcmlnaHQgPSAzMzM7CiAgICB0LnBhcmVubGVmdCA9IDMzMzsKICAgIHQucGFyZW5yaWdodCA9IDMzMzsKICAgIHQuYXN0ZXJpc2sgPSA1MDA7CiAgICB0LnBsdXMgPSA1NjQ7CiAgICB0LmNvbW1hID0gMjUwOwogICAgdC5oeXBoZW4gPSAzMzM7CiAgICB0LnBlcmlvZCA9IDI1MDsKICAgIHQuc2xhc2ggPSAyNzg7CiAgICB0Lnplcm8gPSA1MDA7CiAgICB0Lm9uZSA9IDUwMDsKICAgIHQudHdvID0gNTAwOwogICAgdC50aHJlZSA9IDUwMDsKICAgIHQuZm91ciA9IDUwMDsKICAgIHQuZml2ZSA9IDUwMDsKICAgIHQuc2l4ID0gNTAwOwogICAgdC5zZXZlbiA9IDUwMDsKICAgIHQuZWlnaHQgPSA1MDA7CiAgICB0Lm5pbmUgPSA1MDA7CiAgICB0LmNvbG9uID0gMjc4OwogICAgdC5zZW1pY29sb24gPSAyNzg7CiAgICB0Lmxlc3MgPSA1NjQ7CiAgICB0LmVxdWFsID0gNTY0OwogICAgdC5ncmVhdGVyID0gNTY0OwogICAgdC5xdWVzdGlvbiA9IDQ0NDsKICAgIHQuYXQgPSA5MjE7CiAgICB0LkEgPSA3MjI7CiAgICB0LkIgPSA2Njc7CiAgICB0LkMgPSA2Njc7CiAgICB0LkQgPSA3MjI7CiAgICB0LkUgPSA2MTE7CiAgICB0LkYgPSA1NTY7CiAgICB0LkcgPSA3MjI7CiAgICB0LkggPSA3MjI7CiAgICB0LkkgPSAzMzM7CiAgICB0LkogPSAzODk7CiAgICB0LksgPSA3MjI7CiAgICB0LkwgPSA2MTE7CiAgICB0Lk0gPSA4ODk7CiAgICB0Lk4gPSA3MjI7CiAgICB0Lk8gPSA3MjI7CiAgICB0LlAgPSA1NTY7CiAgICB0LlEgPSA3MjI7CiAgICB0LlIgPSA2Njc7CiAgICB0LlMgPSA1NTY7CiAgICB0LlQgPSA2MTE7CiAgICB0LlUgPSA3MjI7CiAgICB0LlYgPSA3MjI7CiAgICB0LlcgPSA5NDQ7CiAgICB0LlggPSA3MjI7CiAgICB0LlkgPSA3MjI7CiAgICB0LlogPSA2MTE7CiAgICB0LmJyYWNrZXRsZWZ0ID0gMzMzOwogICAgdC5iYWNrc2xhc2ggPSAyNzg7CiAgICB0LmJyYWNrZXRyaWdodCA9IDMzMzsKICAgIHQuYXNjaWljaXJjdW0gPSA0Njk7CiAgICB0LnVuZGVyc2NvcmUgPSA1MDA7CiAgICB0LnF1b3RlbGVmdCA9IDMzMzsKICAgIHQuYSA9IDQ0NDsKICAgIHQuYiA9IDUwMDsKICAgIHQuYyA9IDQ0NDsKICAgIHQuZCA9IDUwMDsKICAgIHQuZSA9IDQ0NDsKICAgIHQuZiA9IDMzMzsKICAgIHQuZyA9IDUwMDsKICAgIHQuaCA9IDUwMDsKICAgIHQuaSA9IDI3ODsKICAgIHQuaiA9IDI3ODsKICAgIHQuayA9IDUwMDsKICAgIHQubCA9IDI3ODsKICAgIHQubSA9IDc3ODsKICAgIHQubiA9IDUwMDsKICAgIHQubyA9IDUwMDsKICAgIHQucCA9IDUwMDsKICAgIHQucSA9IDUwMDsKICAgIHQuciA9IDMzMzsKICAgIHQucyA9IDM4OTsKICAgIHQudCA9IDI3ODsKICAgIHQudSA9IDUwMDsKICAgIHQudiA9IDUwMDsKICAgIHQudyA9IDcyMjsKICAgIHQueCA9IDUwMDsKICAgIHQueSA9IDUwMDsKICAgIHQueiA9IDQ0NDsKICAgIHQuYnJhY2VsZWZ0ID0gNDgwOwogICAgdC5iYXIgPSAyMDA7CiAgICB0LmJyYWNlcmlnaHQgPSA0ODA7CiAgICB0LmFzY2lpdGlsZGUgPSA1NDE7CiAgICB0LmV4Y2xhbWRvd24gPSAzMzM7CiAgICB0LmNlbnQgPSA1MDA7CiAgICB0LnN0ZXJsaW5nID0gNTAwOwogICAgdC5mcmFjdGlvbiA9IDE2NzsKICAgIHQueWVuID0gNTAwOwogICAgdC5mbG9yaW4gPSA1MDA7CiAgICB0LnNlY3Rpb24gPSA1MDA7CiAgICB0LmN1cnJlbmN5ID0gNTAwOwogICAgdC5xdW90ZXNpbmdsZSA9IDE4MDsKICAgIHQucXVvdGVkYmxsZWZ0ID0gNDQ0OwogICAgdC5ndWlsbGVtb3RsZWZ0ID0gNTAwOwogICAgdC5ndWlsc2luZ2xsZWZ0ID0gMzMzOwogICAgdC5ndWlsc2luZ2xyaWdodCA9IDMzMzsKICAgIHQuZmkgPSA1NTY7CiAgICB0LmZsID0gNTU2OwogICAgdC5lbmRhc2ggPSA1MDA7CiAgICB0LmRhZ2dlciA9IDUwMDsKICAgIHQuZGFnZ2VyZGJsID0gNTAwOwogICAgdC5wZXJpb2RjZW50ZXJlZCA9IDI1MDsKICAgIHQucGFyYWdyYXBoID0gNDUzOwogICAgdC5idWxsZXQgPSAzNTA7CiAgICB0LnF1b3Rlc2luZ2xiYXNlID0gMzMzOwogICAgdC5xdW90ZWRibGJhc2UgPSA0NDQ7CiAgICB0LnF1b3RlZGJscmlnaHQgPSA0NDQ7CiAgICB0Lmd1aWxsZW1vdHJpZ2h0ID0gNTAwOwogICAgdC5lbGxpcHNpcyA9IDEwMDA7CiAgICB0LnBlcnRob3VzYW5kID0gMTAwMDsKICAgIHQucXVlc3Rpb25kb3duID0gNDQ0OwogICAgdC5ncmF2ZSA9IDMzMzsKICAgIHQuYWN1dGUgPSAzMzM7CiAgICB0LmNpcmN1bWZsZXggPSAzMzM7CiAgICB0LnRpbGRlID0gMzMzOwogICAgdC5tYWNyb24gPSAzMzM7CiAgICB0LmJyZXZlID0gMzMzOwogICAgdC5kb3RhY2NlbnQgPSAzMzM7CiAgICB0LmRpZXJlc2lzID0gMzMzOwogICAgdC5yaW5nID0gMzMzOwogICAgdC5jZWRpbGxhID0gMzMzOwogICAgdC5odW5nYXJ1bWxhdXQgPSAzMzM7CiAgICB0Lm9nb25layA9IDMzMzsKICAgIHQuY2Fyb24gPSAzMzM7CiAgICB0LmVtZGFzaCA9IDEwMDA7CiAgICB0LkFFID0gODg5OwogICAgdC5vcmRmZW1pbmluZSA9IDI3NjsKICAgIHQuTHNsYXNoID0gNjExOwogICAgdC5Pc2xhc2ggPSA3MjI7CiAgICB0Lk9FID0gODg5OwogICAgdC5vcmRtYXNjdWxpbmUgPSAzMTA7CiAgICB0LmFlID0gNjY3OwogICAgdC5kb3RsZXNzaSA9IDI3ODsKICAgIHQubHNsYXNoID0gMjc4OwogICAgdC5vc2xhc2ggPSA1MDA7CiAgICB0Lm9lID0gNzIyOwogICAgdC5nZXJtYW5kYmxzID0gNTAwOwogICAgdC5JZGllcmVzaXMgPSAzMzM7CiAgICB0LmVhY3V0ZSA9IDQ0NDsKICAgIHQuYWJyZXZlID0gNDQ0OwogICAgdC51aHVuZ2FydW1sYXV0ID0gNTAwOwogICAgdC5lY2Fyb24gPSA0NDQ7CiAgICB0LllkaWVyZXNpcyA9IDcyMjsKICAgIHQuZGl2aWRlID0gNTY0OwogICAgdC5ZYWN1dGUgPSA3MjI7CiAgICB0LkFjaXJjdW1mbGV4ID0gNzIyOwogICAgdC5hYWN1dGUgPSA0NDQ7CiAgICB0LlVjaXJjdW1mbGV4ID0gNzIyOwogICAgdC55YWN1dGUgPSA1MDA7CiAgICB0LnNjb21tYWFjY2VudCA9IDM4OTsKICAgIHQuZWNpcmN1bWZsZXggPSA0NDQ7CiAgICB0LlVyaW5nID0gNzIyOwogICAgdC5VZGllcmVzaXMgPSA3MjI7CiAgICB0LmFvZ29uZWsgPSA0NDQ7CiAgICB0LlVhY3V0ZSA9IDcyMjsKICAgIHQudW9nb25layA9IDUwMDsKICAgIHQuRWRpZXJlc2lzID0gNjExOwogICAgdC5EY3JvYXQgPSA3MjI7CiAgICB0LmNvbW1hYWNjZW50ID0gMjUwOwogICAgdC5jb3B5cmlnaHQgPSA3NjA7CiAgICB0LkVtYWNyb24gPSA2MTE7CiAgICB0LmNjYXJvbiA9IDQ0NDsKICAgIHQuYXJpbmcgPSA0NDQ7CiAgICB0Lk5jb21tYWFjY2VudCA9IDcyMjsKICAgIHQubGFjdXRlID0gMjc4OwogICAgdC5hZ3JhdmUgPSA0NDQ7CiAgICB0LlRjb21tYWFjY2VudCA9IDYxMTsKICAgIHQuQ2FjdXRlID0gNjY3OwogICAgdC5hdGlsZGUgPSA0NDQ7CiAgICB0LkVkb3RhY2NlbnQgPSA2MTE7CiAgICB0LnNjYXJvbiA9IDM4OTsKICAgIHQuc2NlZGlsbGEgPSAzODk7CiAgICB0LmlhY3V0ZSA9IDI3ODsKICAgIHQubG96ZW5nZSA9IDQ3MTsKICAgIHQuUmNhcm9uID0gNjY3OwogICAgdC5HY29tbWFhY2NlbnQgPSA3MjI7CiAgICB0LnVjaXJjdW1mbGV4ID0gNTAwOwogICAgdC5hY2lyY3VtZmxleCA9IDQ0NDsKICAgIHQuQW1hY3JvbiA9IDcyMjsKICAgIHQucmNhcm9uID0gMzMzOwogICAgdC5jY2VkaWxsYSA9IDQ0NDsKICAgIHQuWmRvdGFjY2VudCA9IDYxMTsKICAgIHQuVGhvcm4gPSA1NTY7CiAgICB0Lk9tYWNyb24gPSA3MjI7CiAgICB0LlJhY3V0ZSA9IDY2NzsKICAgIHQuU2FjdXRlID0gNTU2OwogICAgdC5kY2Fyb24gPSA1ODg7CiAgICB0LlVtYWNyb24gPSA3MjI7CiAgICB0LnVyaW5nID0gNTAwOwogICAgdC50aHJlZXN1cGVyaW9yID0gMzAwOwogICAgdC5PZ3JhdmUgPSA3MjI7CiAgICB0LkFncmF2ZSA9IDcyMjsKICAgIHQuQWJyZXZlID0gNzIyOwogICAgdC5tdWx0aXBseSA9IDU2NDsKICAgIHQudWFjdXRlID0gNTAwOwogICAgdC5UY2Fyb24gPSA2MTE7CiAgICB0LnBhcnRpYWxkaWZmID0gNDc2OwogICAgdC55ZGllcmVzaXMgPSA1MDA7CiAgICB0Lk5hY3V0ZSA9IDcyMjsKICAgIHQuaWNpcmN1bWZsZXggPSAyNzg7CiAgICB0LkVjaXJjdW1mbGV4ID0gNjExOwogICAgdC5hZGllcmVzaXMgPSA0NDQ7CiAgICB0LmVkaWVyZXNpcyA9IDQ0NDsKICAgIHQuY2FjdXRlID0gNDQ0OwogICAgdC5uYWN1dGUgPSA1MDA7CiAgICB0LnVtYWNyb24gPSA1MDA7CiAgICB0Lk5jYXJvbiA9IDcyMjsKICAgIHQuSWFjdXRlID0gMzMzOwogICAgdC5wbHVzbWludXMgPSA1NjQ7CiAgICB0LmJyb2tlbmJhciA9IDIwMDsKICAgIHQucmVnaXN0ZXJlZCA9IDc2MDsKICAgIHQuR2JyZXZlID0gNzIyOwogICAgdC5JZG90YWNjZW50ID0gMzMzOwogICAgdC5zdW1tYXRpb24gPSA2MDA7CiAgICB0LkVncmF2ZSA9IDYxMTsKICAgIHQucmFjdXRlID0gMzMzOwogICAgdC5vbWFjcm9uID0gNTAwOwogICAgdC5aYWN1dGUgPSA2MTE7CiAgICB0LlpjYXJvbiA9IDYxMTsKICAgIHQuZ3JlYXRlcmVxdWFsID0gNTQ5OwogICAgdC5FdGggPSA3MjI7CiAgICB0LkNjZWRpbGxhID0gNjY3OwogICAgdC5sY29tbWFhY2NlbnQgPSAyNzg7CiAgICB0LnRjYXJvbiA9IDMyNjsKICAgIHQuZW9nb25layA9IDQ0NDsKICAgIHQuVW9nb25layA9IDcyMjsKICAgIHQuQWFjdXRlID0gNzIyOwogICAgdC5BZGllcmVzaXMgPSA3MjI7CiAgICB0LmVncmF2ZSA9IDQ0NDsKICAgIHQuemFjdXRlID0gNDQ0OwogICAgdC5pb2dvbmVrID0gMjc4OwogICAgdC5PYWN1dGUgPSA3MjI7CiAgICB0Lm9hY3V0ZSA9IDUwMDsKICAgIHQuYW1hY3JvbiA9IDQ0NDsKICAgIHQuc2FjdXRlID0gMzg5OwogICAgdC5pZGllcmVzaXMgPSAyNzg7CiAgICB0Lk9jaXJjdW1mbGV4ID0gNzIyOwogICAgdC5VZ3JhdmUgPSA3MjI7CiAgICB0LkRlbHRhID0gNjEyOwogICAgdC50aG9ybiA9IDUwMDsKICAgIHQudHdvc3VwZXJpb3IgPSAzMDA7CiAgICB0Lk9kaWVyZXNpcyA9IDcyMjsKICAgIHQubXUgPSA1MDA7CiAgICB0LmlncmF2ZSA9IDI3ODsKICAgIHQub2h1bmdhcnVtbGF1dCA9IDUwMDsKICAgIHQuRW9nb25layA9IDYxMTsKICAgIHQuZGNyb2F0ID0gNTAwOwogICAgdC50aHJlZXF1YXJ0ZXJzID0gNzUwOwogICAgdC5TY2VkaWxsYSA9IDU1NjsKICAgIHQubGNhcm9uID0gMzQ0OwogICAgdC5LY29tbWFhY2NlbnQgPSA3MjI7CiAgICB0LkxhY3V0ZSA9IDYxMTsKICAgIHQudHJhZGVtYXJrID0gOTgwOwogICAgdC5lZG90YWNjZW50ID0gNDQ0OwogICAgdC5JZ3JhdmUgPSAzMzM7CiAgICB0LkltYWNyb24gPSAzMzM7CiAgICB0LkxjYXJvbiA9IDYxMTsKICAgIHQub25laGFsZiA9IDc1MDsKICAgIHQubGVzc2VxdWFsID0gNTQ5OwogICAgdC5vY2lyY3VtZmxleCA9IDUwMDsKICAgIHQubnRpbGRlID0gNTAwOwogICAgdC5VaHVuZ2FydW1sYXV0ID0gNzIyOwogICAgdC5FYWN1dGUgPSA2MTE7CiAgICB0LmVtYWNyb24gPSA0NDQ7CiAgICB0LmdicmV2ZSA9IDUwMDsKICAgIHQub25lcXVhcnRlciA9IDc1MDsKICAgIHQuU2Nhcm9uID0gNTU2OwogICAgdC5TY29tbWFhY2NlbnQgPSA1NTY7CiAgICB0Lk9odW5nYXJ1bWxhdXQgPSA3MjI7CiAgICB0LmRlZ3JlZSA9IDQwMDsKICAgIHQub2dyYXZlID0gNTAwOwogICAgdC5DY2Fyb24gPSA2Njc7CiAgICB0LnVncmF2ZSA9IDUwMDsKICAgIHQucmFkaWNhbCA9IDQ1MzsKICAgIHQuRGNhcm9uID0gNzIyOwogICAgdC5yY29tbWFhY2NlbnQgPSAzMzM7CiAgICB0Lk50aWxkZSA9IDcyMjsKICAgIHQub3RpbGRlID0gNTAwOwogICAgdC5SY29tbWFhY2NlbnQgPSA2Njc7CiAgICB0Lkxjb21tYWFjY2VudCA9IDYxMTsKICAgIHQuQXRpbGRlID0gNzIyOwogICAgdC5Bb2dvbmVrID0gNzIyOwogICAgdC5BcmluZyA9IDcyMjsKICAgIHQuT3RpbGRlID0gNzIyOwogICAgdC56ZG90YWNjZW50ID0gNDQ0OwogICAgdC5FY2Fyb24gPSA2MTE7CiAgICB0LklvZ29uZWsgPSAzMzM7CiAgICB0Lmtjb21tYWFjY2VudCA9IDUwMDsKICAgIHQubWludXMgPSA1NjQ7CiAgICB0LkljaXJjdW1mbGV4ID0gMzMzOwogICAgdC5uY2Fyb24gPSA1MDA7CiAgICB0LnRjb21tYWFjY2VudCA9IDI3ODsKICAgIHQubG9naWNhbG5vdCA9IDU2NDsKICAgIHQub2RpZXJlc2lzID0gNTAwOwogICAgdC51ZGllcmVzaXMgPSA1MDA7CiAgICB0Lm5vdGVxdWFsID0gNTQ5OwogICAgdC5nY29tbWFhY2NlbnQgPSA1MDA7CiAgICB0LmV0aCA9IDUwMDsKICAgIHQuemNhcm9uID0gNDQ0OwogICAgdC5uY29tbWFhY2NlbnQgPSA1MDA7CiAgICB0Lm9uZXN1cGVyaW9yID0gMzAwOwogICAgdC5pbWFjcm9uID0gMjc4OwogICAgdC5FdXJvID0gNTAwOwogIH0pOwogIHRbIlRpbWVzLUJvbGQiXSA9IGdldExvb2t1cFRhYmxlRmFjdG9yeShmdW5jdGlvbiAodCkgewogICAgdC5zcGFjZSA9IDI1MDsKICAgIHQuZXhjbGFtID0gMzMzOwogICAgdC5xdW90ZWRibCA9IDU1NTsKICAgIHQubnVtYmVyc2lnbiA9IDUwMDsKICAgIHQuZG9sbGFyID0gNTAwOwogICAgdC5wZXJjZW50ID0gMTAwMDsKICAgIHQuYW1wZXJzYW5kID0gODMzOwogICAgdC5xdW90ZXJpZ2h0ID0gMzMzOwogICAgdC5wYXJlbmxlZnQgPSAzMzM7CiAgICB0LnBhcmVucmlnaHQgPSAzMzM7CiAgICB0LmFzdGVyaXNrID0gNTAwOwogICAgdC5wbHVzID0gNTcwOwogICAgdC5jb21tYSA9IDI1MDsKICAgIHQuaHlwaGVuID0gMzMzOwogICAgdC5wZXJpb2QgPSAyNTA7CiAgICB0LnNsYXNoID0gMjc4OwogICAgdC56ZXJvID0gNTAwOwogICAgdC5vbmUgPSA1MDA7CiAgICB0LnR3byA9IDUwMDsKICAgIHQudGhyZWUgPSA1MDA7CiAgICB0LmZvdXIgPSA1MDA7CiAgICB0LmZpdmUgPSA1MDA7CiAgICB0LnNpeCA9IDUwMDsKICAgIHQuc2V2ZW4gPSA1MDA7CiAgICB0LmVpZ2h0ID0gNTAwOwogICAgdC5uaW5lID0gNTAwOwogICAgdC5jb2xvbiA9IDMzMzsKICAgIHQuc2VtaWNvbG9uID0gMzMzOwogICAgdC5sZXNzID0gNTcwOwogICAgdC5lcXVhbCA9IDU3MDsKICAgIHQuZ3JlYXRlciA9IDU3MDsKICAgIHQucXVlc3Rpb24gPSA1MDA7CiAgICB0LmF0ID0gOTMwOwogICAgdC5BID0gNzIyOwogICAgdC5CID0gNjY3OwogICAgdC5DID0gNzIyOwogICAgdC5EID0gNzIyOwogICAgdC5FID0gNjY3OwogICAgdC5GID0gNjExOwogICAgdC5HID0gNzc4OwogICAgdC5IID0gNzc4OwogICAgdC5JID0gMzg5OwogICAgdC5KID0gNTAwOwogICAgdC5LID0gNzc4OwogICAgdC5MID0gNjY3OwogICAgdC5NID0gOTQ0OwogICAgdC5OID0gNzIyOwogICAgdC5PID0gNzc4OwogICAgdC5QID0gNjExOwogICAgdC5RID0gNzc4OwogICAgdC5SID0gNzIyOwogICAgdC5TID0gNTU2OwogICAgdC5UID0gNjY3OwogICAgdC5VID0gNzIyOwogICAgdC5WID0gNzIyOwogICAgdC5XID0gMTAwMDsKICAgIHQuWCA9IDcyMjsKICAgIHQuWSA9IDcyMjsKICAgIHQuWiA9IDY2NzsKICAgIHQuYnJhY2tldGxlZnQgPSAzMzM7CiAgICB0LmJhY2tzbGFzaCA9IDI3ODsKICAgIHQuYnJhY2tldHJpZ2h0ID0gMzMzOwogICAgdC5hc2NpaWNpcmN1bSA9IDU4MTsKICAgIHQudW5kZXJzY29yZSA9IDUwMDsKICAgIHQucXVvdGVsZWZ0ID0gMzMzOwogICAgdC5hID0gNTAwOwogICAgdC5iID0gNTU2OwogICAgdC5jID0gNDQ0OwogICAgdC5kID0gNTU2OwogICAgdC5lID0gNDQ0OwogICAgdC5mID0gMzMzOwogICAgdC5nID0gNTAwOwogICAgdC5oID0gNTU2OwogICAgdC5pID0gMjc4OwogICAgdC5qID0gMzMzOwogICAgdC5rID0gNTU2OwogICAgdC5sID0gMjc4OwogICAgdC5tID0gODMzOwogICAgdC5uID0gNTU2OwogICAgdC5vID0gNTAwOwogICAgdC5wID0gNTU2OwogICAgdC5xID0gNTU2OwogICAgdC5yID0gNDQ0OwogICAgdC5zID0gMzg5OwogICAgdC50ID0gMzMzOwogICAgdC51ID0gNTU2OwogICAgdC52ID0gNTAwOwogICAgdC53ID0gNzIyOwogICAgdC54ID0gNTAwOwogICAgdC55ID0gNTAwOwogICAgdC56ID0gNDQ0OwogICAgdC5icmFjZWxlZnQgPSAzOTQ7CiAgICB0LmJhciA9IDIyMDsKICAgIHQuYnJhY2VyaWdodCA9IDM5NDsKICAgIHQuYXNjaWl0aWxkZSA9IDUyMDsKICAgIHQuZXhjbGFtZG93biA9IDMzMzsKICAgIHQuY2VudCA9IDUwMDsKICAgIHQuc3RlcmxpbmcgPSA1MDA7CiAgICB0LmZyYWN0aW9uID0gMTY3OwogICAgdC55ZW4gPSA1MDA7CiAgICB0LmZsb3JpbiA9IDUwMDsKICAgIHQuc2VjdGlvbiA9IDUwMDsKICAgIHQuY3VycmVuY3kgPSA1MDA7CiAgICB0LnF1b3Rlc2luZ2xlID0gMjc4OwogICAgdC5xdW90ZWRibGxlZnQgPSA1MDA7CiAgICB0Lmd1aWxsZW1vdGxlZnQgPSA1MDA7CiAgICB0Lmd1aWxzaW5nbGxlZnQgPSAzMzM7CiAgICB0Lmd1aWxzaW5nbHJpZ2h0ID0gMzMzOwogICAgdC5maSA9IDU1NjsKICAgIHQuZmwgPSA1NTY7CiAgICB0LmVuZGFzaCA9IDUwMDsKICAgIHQuZGFnZ2VyID0gNTAwOwogICAgdC5kYWdnZXJkYmwgPSA1MDA7CiAgICB0LnBlcmlvZGNlbnRlcmVkID0gMjUwOwogICAgdC5wYXJhZ3JhcGggPSA1NDA7CiAgICB0LmJ1bGxldCA9IDM1MDsKICAgIHQucXVvdGVzaW5nbGJhc2UgPSAzMzM7CiAgICB0LnF1b3RlZGJsYmFzZSA9IDUwMDsKICAgIHQucXVvdGVkYmxyaWdodCA9IDUwMDsKICAgIHQuZ3VpbGxlbW90cmlnaHQgPSA1MDA7CiAgICB0LmVsbGlwc2lzID0gMTAwMDsKICAgIHQucGVydGhvdXNhbmQgPSAxMDAwOwogICAgdC5xdWVzdGlvbmRvd24gPSA1MDA7CiAgICB0LmdyYXZlID0gMzMzOwogICAgdC5hY3V0ZSA9IDMzMzsKICAgIHQuY2lyY3VtZmxleCA9IDMzMzsKICAgIHQudGlsZGUgPSAzMzM7CiAgICB0Lm1hY3JvbiA9IDMzMzsKICAgIHQuYnJldmUgPSAzMzM7CiAgICB0LmRvdGFjY2VudCA9IDMzMzsKICAgIHQuZGllcmVzaXMgPSAzMzM7CiAgICB0LnJpbmcgPSAzMzM7CiAgICB0LmNlZGlsbGEgPSAzMzM7CiAgICB0Lmh1bmdhcnVtbGF1dCA9IDMzMzsKICAgIHQub2dvbmVrID0gMzMzOwogICAgdC5jYXJvbiA9IDMzMzsKICAgIHQuZW1kYXNoID0gMTAwMDsKICAgIHQuQUUgPSAxMDAwOwogICAgdC5vcmRmZW1pbmluZSA9IDMwMDsKICAgIHQuTHNsYXNoID0gNjY3OwogICAgdC5Pc2xhc2ggPSA3Nzg7CiAgICB0Lk9FID0gMTAwMDsKICAgIHQub3JkbWFzY3VsaW5lID0gMzMwOwogICAgdC5hZSA9IDcyMjsKICAgIHQuZG90bGVzc2kgPSAyNzg7CiAgICB0LmxzbGFzaCA9IDI3ODsKICAgIHQub3NsYXNoID0gNTAwOwogICAgdC5vZSA9IDcyMjsKICAgIHQuZ2VybWFuZGJscyA9IDU1NjsKICAgIHQuSWRpZXJlc2lzID0gMzg5OwogICAgdC5lYWN1dGUgPSA0NDQ7CiAgICB0LmFicmV2ZSA9IDUwMDsKICAgIHQudWh1bmdhcnVtbGF1dCA9IDU1NjsKICAgIHQuZWNhcm9uID0gNDQ0OwogICAgdC5ZZGllcmVzaXMgPSA3MjI7CiAgICB0LmRpdmlkZSA9IDU3MDsKICAgIHQuWWFjdXRlID0gNzIyOwogICAgdC5BY2lyY3VtZmxleCA9IDcyMjsKICAgIHQuYWFjdXRlID0gNTAwOwogICAgdC5VY2lyY3VtZmxleCA9IDcyMjsKICAgIHQueWFjdXRlID0gNTAwOwogICAgdC5zY29tbWFhY2NlbnQgPSAzODk7CiAgICB0LmVjaXJjdW1mbGV4ID0gNDQ0OwogICAgdC5VcmluZyA9IDcyMjsKICAgIHQuVWRpZXJlc2lzID0gNzIyOwogICAgdC5hb2dvbmVrID0gNTAwOwogICAgdC5VYWN1dGUgPSA3MjI7CiAgICB0LnVvZ29uZWsgPSA1NTY7CiAgICB0LkVkaWVyZXNpcyA9IDY2NzsKICAgIHQuRGNyb2F0ID0gNzIyOwogICAgdC5jb21tYWFjY2VudCA9IDI1MDsKICAgIHQuY29weXJpZ2h0ID0gNzQ3OwogICAgdC5FbWFjcm9uID0gNjY3OwogICAgdC5jY2Fyb24gPSA0NDQ7CiAgICB0LmFyaW5nID0gNTAwOwogICAgdC5OY29tbWFhY2NlbnQgPSA3MjI7CiAgICB0LmxhY3V0ZSA9IDI3ODsKICAgIHQuYWdyYXZlID0gNTAwOwogICAgdC5UY29tbWFhY2NlbnQgPSA2Njc7CiAgICB0LkNhY3V0ZSA9IDcyMjsKICAgIHQuYXRpbGRlID0gNTAwOwogICAgdC5FZG90YWNjZW50ID0gNjY3OwogICAgdC5zY2Fyb24gPSAzODk7CiAgICB0LnNjZWRpbGxhID0gMzg5OwogICAgdC5pYWN1dGUgPSAyNzg7CiAgICB0LmxvemVuZ2UgPSA0OTQ7CiAgICB0LlJjYXJvbiA9IDcyMjsKICAgIHQuR2NvbW1hYWNjZW50ID0gNzc4OwogICAgdC51Y2lyY3VtZmxleCA9IDU1NjsKICAgIHQuYWNpcmN1bWZsZXggPSA1MDA7CiAgICB0LkFtYWNyb24gPSA3MjI7CiAgICB0LnJjYXJvbiA9IDQ0NDsKICAgIHQuY2NlZGlsbGEgPSA0NDQ7CiAgICB0Llpkb3RhY2NlbnQgPSA2Njc7CiAgICB0LlRob3JuID0gNjExOwogICAgdC5PbWFjcm9uID0gNzc4OwogICAgdC5SYWN1dGUgPSA3MjI7CiAgICB0LlNhY3V0ZSA9IDU1NjsKICAgIHQuZGNhcm9uID0gNjcyOwogICAgdC5VbWFjcm9uID0gNzIyOwogICAgdC51cmluZyA9IDU1NjsKICAgIHQudGhyZWVzdXBlcmlvciA9IDMwMDsKICAgIHQuT2dyYXZlID0gNzc4OwogICAgdC5BZ3JhdmUgPSA3MjI7CiAgICB0LkFicmV2ZSA9IDcyMjsKICAgIHQubXVsdGlwbHkgPSA1NzA7CiAgICB0LnVhY3V0ZSA9IDU1NjsKICAgIHQuVGNhcm9uID0gNjY3OwogICAgdC5wYXJ0aWFsZGlmZiA9IDQ5NDsKICAgIHQueWRpZXJlc2lzID0gNTAwOwogICAgdC5OYWN1dGUgPSA3MjI7CiAgICB0LmljaXJjdW1mbGV4ID0gMjc4OwogICAgdC5FY2lyY3VtZmxleCA9IDY2NzsKICAgIHQuYWRpZXJlc2lzID0gNTAwOwogICAgdC5lZGllcmVzaXMgPSA0NDQ7CiAgICB0LmNhY3V0ZSA9IDQ0NDsKICAgIHQubmFjdXRlID0gNTU2OwogICAgdC51bWFjcm9uID0gNTU2OwogICAgdC5OY2Fyb24gPSA3MjI7CiAgICB0LklhY3V0ZSA9IDM4OTsKICAgIHQucGx1c21pbnVzID0gNTcwOwogICAgdC5icm9rZW5iYXIgPSAyMjA7CiAgICB0LnJlZ2lzdGVyZWQgPSA3NDc7CiAgICB0LkdicmV2ZSA9IDc3ODsKICAgIHQuSWRvdGFjY2VudCA9IDM4OTsKICAgIHQuc3VtbWF0aW9uID0gNjAwOwogICAgdC5FZ3JhdmUgPSA2Njc7CiAgICB0LnJhY3V0ZSA9IDQ0NDsKICAgIHQub21hY3JvbiA9IDUwMDsKICAgIHQuWmFjdXRlID0gNjY3OwogICAgdC5aY2Fyb24gPSA2Njc7CiAgICB0LmdyZWF0ZXJlcXVhbCA9IDU0OTsKICAgIHQuRXRoID0gNzIyOwogICAgdC5DY2VkaWxsYSA9IDcyMjsKICAgIHQubGNvbW1hYWNjZW50ID0gMjc4OwogICAgdC50Y2Fyb24gPSA0MTY7CiAgICB0LmVvZ29uZWsgPSA0NDQ7CiAgICB0LlVvZ29uZWsgPSA3MjI7CiAgICB0LkFhY3V0ZSA9IDcyMjsKICAgIHQuQWRpZXJlc2lzID0gNzIyOwogICAgdC5lZ3JhdmUgPSA0NDQ7CiAgICB0LnphY3V0ZSA9IDQ0NDsKICAgIHQuaW9nb25layA9IDI3ODsKICAgIHQuT2FjdXRlID0gNzc4OwogICAgdC5vYWN1dGUgPSA1MDA7CiAgICB0LmFtYWNyb24gPSA1MDA7CiAgICB0LnNhY3V0ZSA9IDM4OTsKICAgIHQuaWRpZXJlc2lzID0gMjc4OwogICAgdC5PY2lyY3VtZmxleCA9IDc3ODsKICAgIHQuVWdyYXZlID0gNzIyOwogICAgdC5EZWx0YSA9IDYxMjsKICAgIHQudGhvcm4gPSA1NTY7CiAgICB0LnR3b3N1cGVyaW9yID0gMzAwOwogICAgdC5PZGllcmVzaXMgPSA3Nzg7CiAgICB0Lm11ID0gNTU2OwogICAgdC5pZ3JhdmUgPSAyNzg7CiAgICB0Lm9odW5nYXJ1bWxhdXQgPSA1MDA7CiAgICB0LkVvZ29uZWsgPSA2Njc7CiAgICB0LmRjcm9hdCA9IDU1NjsKICAgIHQudGhyZWVxdWFydGVycyA9IDc1MDsKICAgIHQuU2NlZGlsbGEgPSA1NTY7CiAgICB0LmxjYXJvbiA9IDM5NDsKICAgIHQuS2NvbW1hYWNjZW50ID0gNzc4OwogICAgdC5MYWN1dGUgPSA2Njc7CiAgICB0LnRyYWRlbWFyayA9IDEwMDA7CiAgICB0LmVkb3RhY2NlbnQgPSA0NDQ7CiAgICB0LklncmF2ZSA9IDM4OTsKICAgIHQuSW1hY3JvbiA9IDM4OTsKICAgIHQuTGNhcm9uID0gNjY3OwogICAgdC5vbmVoYWxmID0gNzUwOwogICAgdC5sZXNzZXF1YWwgPSA1NDk7CiAgICB0Lm9jaXJjdW1mbGV4ID0gNTAwOwogICAgdC5udGlsZGUgPSA1NTY7CiAgICB0LlVodW5nYXJ1bWxhdXQgPSA3MjI7CiAgICB0LkVhY3V0ZSA9IDY2NzsKICAgIHQuZW1hY3JvbiA9IDQ0NDsKICAgIHQuZ2JyZXZlID0gNTAwOwogICAgdC5vbmVxdWFydGVyID0gNzUwOwogICAgdC5TY2Fyb24gPSA1NTY7CiAgICB0LlNjb21tYWFjY2VudCA9IDU1NjsKICAgIHQuT2h1bmdhcnVtbGF1dCA9IDc3ODsKICAgIHQuZGVncmVlID0gNDAwOwogICAgdC5vZ3JhdmUgPSA1MDA7CiAgICB0LkNjYXJvbiA9IDcyMjsKICAgIHQudWdyYXZlID0gNTU2OwogICAgdC5yYWRpY2FsID0gNTQ5OwogICAgdC5EY2Fyb24gPSA3MjI7CiAgICB0LnJjb21tYWFjY2VudCA9IDQ0NDsKICAgIHQuTnRpbGRlID0gNzIyOwogICAgdC5vdGlsZGUgPSA1MDA7CiAgICB0LlJjb21tYWFjY2VudCA9IDcyMjsKICAgIHQuTGNvbW1hYWNjZW50ID0gNjY3OwogICAgdC5BdGlsZGUgPSA3MjI7CiAgICB0LkFvZ29uZWsgPSA3MjI7CiAgICB0LkFyaW5nID0gNzIyOwogICAgdC5PdGlsZGUgPSA3Nzg7CiAgICB0Lnpkb3RhY2NlbnQgPSA0NDQ7CiAgICB0LkVjYXJvbiA9IDY2NzsKICAgIHQuSW9nb25layA9IDM4OTsKICAgIHQua2NvbW1hYWNjZW50ID0gNTU2OwogICAgdC5taW51cyA9IDU3MDsKICAgIHQuSWNpcmN1bWZsZXggPSAzODk7CiAgICB0Lm5jYXJvbiA9IDU1NjsKICAgIHQudGNvbW1hYWNjZW50ID0gMzMzOwogICAgdC5sb2dpY2Fsbm90ID0gNTcwOwogICAgdC5vZGllcmVzaXMgPSA1MDA7CiAgICB0LnVkaWVyZXNpcyA9IDU1NjsKICAgIHQubm90ZXF1YWwgPSA1NDk7CiAgICB0Lmdjb21tYWFjY2VudCA9IDUwMDsKICAgIHQuZXRoID0gNTAwOwogICAgdC56Y2Fyb24gPSA0NDQ7CiAgICB0Lm5jb21tYWFjY2VudCA9IDU1NjsKICAgIHQub25lc3VwZXJpb3IgPSAzMDA7CiAgICB0LmltYWNyb24gPSAyNzg7CiAgICB0LkV1cm8gPSA1MDA7CiAgfSk7CiAgdFsiVGltZXMtQm9sZEl0YWxpYyJdID0gZ2V0TG9va3VwVGFibGVGYWN0b3J5KGZ1bmN0aW9uICh0KSB7CiAgICB0LnNwYWNlID0gMjUwOwogICAgdC5leGNsYW0gPSAzODk7CiAgICB0LnF1b3RlZGJsID0gNTU1OwogICAgdC5udW1iZXJzaWduID0gNTAwOwogICAgdC5kb2xsYXIgPSA1MDA7CiAgICB0LnBlcmNlbnQgPSA4MzM7CiAgICB0LmFtcGVyc2FuZCA9IDc3ODsKICAgIHQucXVvdGVyaWdodCA9IDMzMzsKICAgIHQucGFyZW5sZWZ0ID0gMzMzOwogICAgdC5wYXJlbnJpZ2h0ID0gMzMzOwogICAgdC5hc3RlcmlzayA9IDUwMDsKICAgIHQucGx1cyA9IDU3MDsKICAgIHQuY29tbWEgPSAyNTA7CiAgICB0Lmh5cGhlbiA9IDMzMzsKICAgIHQucGVyaW9kID0gMjUwOwogICAgdC5zbGFzaCA9IDI3ODsKICAgIHQuemVybyA9IDUwMDsKICAgIHQub25lID0gNTAwOwogICAgdC50d28gPSA1MDA7CiAgICB0LnRocmVlID0gNTAwOwogICAgdC5mb3VyID0gNTAwOwogICAgdC5maXZlID0gNTAwOwogICAgdC5zaXggPSA1MDA7CiAgICB0LnNldmVuID0gNTAwOwogICAgdC5laWdodCA9IDUwMDsKICAgIHQubmluZSA9IDUwMDsKICAgIHQuY29sb24gPSAzMzM7CiAgICB0LnNlbWljb2xvbiA9IDMzMzsKICAgIHQubGVzcyA9IDU3MDsKICAgIHQuZXF1YWwgPSA1NzA7CiAgICB0LmdyZWF0ZXIgPSA1NzA7CiAgICB0LnF1ZXN0aW9uID0gNTAwOwogICAgdC5hdCA9IDgzMjsKICAgIHQuQSA9IDY2NzsKICAgIHQuQiA9IDY2NzsKICAgIHQuQyA9IDY2NzsKICAgIHQuRCA9IDcyMjsKICAgIHQuRSA9IDY2NzsKICAgIHQuRiA9IDY2NzsKICAgIHQuRyA9IDcyMjsKICAgIHQuSCA9IDc3ODsKICAgIHQuSSA9IDM4OTsKICAgIHQuSiA9IDUwMDsKICAgIHQuSyA9IDY2NzsKICAgIHQuTCA9IDYxMTsKICAgIHQuTSA9IDg4OTsKICAgIHQuTiA9IDcyMjsKICAgIHQuTyA9IDcyMjsKICAgIHQuUCA9IDYxMTsKICAgIHQuUSA9IDcyMjsKICAgIHQuUiA9IDY2NzsKICAgIHQuUyA9IDU1NjsKICAgIHQuVCA9IDYxMTsKICAgIHQuVSA9IDcyMjsKICAgIHQuViA9IDY2NzsKICAgIHQuVyA9IDg4OTsKICAgIHQuWCA9IDY2NzsKICAgIHQuWSA9IDYxMTsKICAgIHQuWiA9IDYxMTsKICAgIHQuYnJhY2tldGxlZnQgPSAzMzM7CiAgICB0LmJhY2tzbGFzaCA9IDI3ODsKICAgIHQuYnJhY2tldHJpZ2h0ID0gMzMzOwogICAgdC5hc2NpaWNpcmN1bSA9IDU3MDsKICAgIHQudW5kZXJzY29yZSA9IDUwMDsKICAgIHQucXVvdGVsZWZ0ID0gMzMzOwogICAgdC5hID0gNTAwOwogICAgdC5iID0gNTAwOwogICAgdC5jID0gNDQ0OwogICAgdC5kID0gNTAwOwogICAgdC5lID0gNDQ0OwogICAgdC5mID0gMzMzOwogICAgdC5nID0gNTAwOwogICAgdC5oID0gNTU2OwogICAgdC5pID0gMjc4OwogICAgdC5qID0gMjc4OwogICAgdC5rID0gNTAwOwogICAgdC5sID0gMjc4OwogICAgdC5tID0gNzc4OwogICAgdC5uID0gNTU2OwogICAgdC5vID0gNTAwOwogICAgdC5wID0gNTAwOwogICAgdC5xID0gNTAwOwogICAgdC5yID0gMzg5OwogICAgdC5zID0gMzg5OwogICAgdC50ID0gMjc4OwogICAgdC51ID0gNTU2OwogICAgdC52ID0gNDQ0OwogICAgdC53ID0gNjY3OwogICAgdC54ID0gNTAwOwogICAgdC55ID0gNDQ0OwogICAgdC56ID0gMzg5OwogICAgdC5icmFjZWxlZnQgPSAzNDg7CiAgICB0LmJhciA9IDIyMDsKICAgIHQuYnJhY2VyaWdodCA9IDM0ODsKICAgIHQuYXNjaWl0aWxkZSA9IDU3MDsKICAgIHQuZXhjbGFtZG93biA9IDM4OTsKICAgIHQuY2VudCA9IDUwMDsKICAgIHQuc3RlcmxpbmcgPSA1MDA7CiAgICB0LmZyYWN0aW9uID0gMTY3OwogICAgdC55ZW4gPSA1MDA7CiAgICB0LmZsb3JpbiA9IDUwMDsKICAgIHQuc2VjdGlvbiA9IDUwMDsKICAgIHQuY3VycmVuY3kgPSA1MDA7CiAgICB0LnF1b3Rlc2luZ2xlID0gMjc4OwogICAgdC5xdW90ZWRibGxlZnQgPSA1MDA7CiAgICB0Lmd1aWxsZW1vdGxlZnQgPSA1MDA7CiAgICB0Lmd1aWxzaW5nbGxlZnQgPSAzMzM7CiAgICB0Lmd1aWxzaW5nbHJpZ2h0ID0gMzMzOwogICAgdC5maSA9IDU1NjsKICAgIHQuZmwgPSA1NTY7CiAgICB0LmVuZGFzaCA9IDUwMDsKICAgIHQuZGFnZ2VyID0gNTAwOwogICAgdC5kYWdnZXJkYmwgPSA1MDA7CiAgICB0LnBlcmlvZGNlbnRlcmVkID0gMjUwOwogICAgdC5wYXJhZ3JhcGggPSA1MDA7CiAgICB0LmJ1bGxldCA9IDM1MDsKICAgIHQucXVvdGVzaW5nbGJhc2UgPSAzMzM7CiAgICB0LnF1b3RlZGJsYmFzZSA9IDUwMDsKICAgIHQucXVvdGVkYmxyaWdodCA9IDUwMDsKICAgIHQuZ3VpbGxlbW90cmlnaHQgPSA1MDA7CiAgICB0LmVsbGlwc2lzID0gMTAwMDsKICAgIHQucGVydGhvdXNhbmQgPSAxMDAwOwogICAgdC5xdWVzdGlvbmRvd24gPSA1MDA7CiAgICB0LmdyYXZlID0gMzMzOwogICAgdC5hY3V0ZSA9IDMzMzsKICAgIHQuY2lyY3VtZmxleCA9IDMzMzsKICAgIHQudGlsZGUgPSAzMzM7CiAgICB0Lm1hY3JvbiA9IDMzMzsKICAgIHQuYnJldmUgPSAzMzM7CiAgICB0LmRvdGFjY2VudCA9IDMzMzsKICAgIHQuZGllcmVzaXMgPSAzMzM7CiAgICB0LnJpbmcgPSAzMzM7CiAgICB0LmNlZGlsbGEgPSAzMzM7CiAgICB0Lmh1bmdhcnVtbGF1dCA9IDMzMzsKICAgIHQub2dvbmVrID0gMzMzOwogICAgdC5jYXJvbiA9IDMzMzsKICAgIHQuZW1kYXNoID0gMTAwMDsKICAgIHQuQUUgPSA5NDQ7CiAgICB0Lm9yZGZlbWluaW5lID0gMjY2OwogICAgdC5Mc2xhc2ggPSA2MTE7CiAgICB0Lk9zbGFzaCA9IDcyMjsKICAgIHQuT0UgPSA5NDQ7CiAgICB0Lm9yZG1hc2N1bGluZSA9IDMwMDsKICAgIHQuYWUgPSA3MjI7CiAgICB0LmRvdGxlc3NpID0gMjc4OwogICAgdC5sc2xhc2ggPSAyNzg7CiAgICB0Lm9zbGFzaCA9IDUwMDsKICAgIHQub2UgPSA3MjI7CiAgICB0Lmdlcm1hbmRibHMgPSA1MDA7CiAgICB0LklkaWVyZXNpcyA9IDM4OTsKICAgIHQuZWFjdXRlID0gNDQ0OwogICAgdC5hYnJldmUgPSA1MDA7CiAgICB0LnVodW5nYXJ1bWxhdXQgPSA1NTY7CiAgICB0LmVjYXJvbiA9IDQ0NDsKICAgIHQuWWRpZXJlc2lzID0gNjExOwogICAgdC5kaXZpZGUgPSA1NzA7CiAgICB0LllhY3V0ZSA9IDYxMTsKICAgIHQuQWNpcmN1bWZsZXggPSA2Njc7CiAgICB0LmFhY3V0ZSA9IDUwMDsKICAgIHQuVWNpcmN1bWZsZXggPSA3MjI7CiAgICB0LnlhY3V0ZSA9IDQ0NDsKICAgIHQuc2NvbW1hYWNjZW50ID0gMzg5OwogICAgdC5lY2lyY3VtZmxleCA9IDQ0NDsKICAgIHQuVXJpbmcgPSA3MjI7CiAgICB0LlVkaWVyZXNpcyA9IDcyMjsKICAgIHQuYW9nb25layA9IDUwMDsKICAgIHQuVWFjdXRlID0gNzIyOwogICAgdC51b2dvbmVrID0gNTU2OwogICAgdC5FZGllcmVzaXMgPSA2Njc7CiAgICB0LkRjcm9hdCA9IDcyMjsKICAgIHQuY29tbWFhY2NlbnQgPSAyNTA7CiAgICB0LmNvcHlyaWdodCA9IDc0NzsKICAgIHQuRW1hY3JvbiA9IDY2NzsKICAgIHQuY2Nhcm9uID0gNDQ0OwogICAgdC5hcmluZyA9IDUwMDsKICAgIHQuTmNvbW1hYWNjZW50ID0gNzIyOwogICAgdC5sYWN1dGUgPSAyNzg7CiAgICB0LmFncmF2ZSA9IDUwMDsKICAgIHQuVGNvbW1hYWNjZW50ID0gNjExOwogICAgdC5DYWN1dGUgPSA2Njc7CiAgICB0LmF0aWxkZSA9IDUwMDsKICAgIHQuRWRvdGFjY2VudCA9IDY2NzsKICAgIHQuc2Nhcm9uID0gMzg5OwogICAgdC5zY2VkaWxsYSA9IDM4OTsKICAgIHQuaWFjdXRlID0gMjc4OwogICAgdC5sb3plbmdlID0gNDk0OwogICAgdC5SY2Fyb24gPSA2Njc7CiAgICB0Lkdjb21tYWFjY2VudCA9IDcyMjsKICAgIHQudWNpcmN1bWZsZXggPSA1NTY7CiAgICB0LmFjaXJjdW1mbGV4ID0gNTAwOwogICAgdC5BbWFjcm9uID0gNjY3OwogICAgdC5yY2Fyb24gPSAzODk7CiAgICB0LmNjZWRpbGxhID0gNDQ0OwogICAgdC5aZG90YWNjZW50ID0gNjExOwogICAgdC5UaG9ybiA9IDYxMTsKICAgIHQuT21hY3JvbiA9IDcyMjsKICAgIHQuUmFjdXRlID0gNjY3OwogICAgdC5TYWN1dGUgPSA1NTY7CiAgICB0LmRjYXJvbiA9IDYwODsKICAgIHQuVW1hY3JvbiA9IDcyMjsKICAgIHQudXJpbmcgPSA1NTY7CiAgICB0LnRocmVlc3VwZXJpb3IgPSAzMDA7CiAgICB0Lk9ncmF2ZSA9IDcyMjsKICAgIHQuQWdyYXZlID0gNjY3OwogICAgdC5BYnJldmUgPSA2Njc7CiAgICB0Lm11bHRpcGx5ID0gNTcwOwogICAgdC51YWN1dGUgPSA1NTY7CiAgICB0LlRjYXJvbiA9IDYxMTsKICAgIHQucGFydGlhbGRpZmYgPSA0OTQ7CiAgICB0LnlkaWVyZXNpcyA9IDQ0NDsKICAgIHQuTmFjdXRlID0gNzIyOwogICAgdC5pY2lyY3VtZmxleCA9IDI3ODsKICAgIHQuRWNpcmN1bWZsZXggPSA2Njc7CiAgICB0LmFkaWVyZXNpcyA9IDUwMDsKICAgIHQuZWRpZXJlc2lzID0gNDQ0OwogICAgdC5jYWN1dGUgPSA0NDQ7CiAgICB0Lm5hY3V0ZSA9IDU1NjsKICAgIHQudW1hY3JvbiA9IDU1NjsKICAgIHQuTmNhcm9uID0gNzIyOwogICAgdC5JYWN1dGUgPSAzODk7CiAgICB0LnBsdXNtaW51cyA9IDU3MDsKICAgIHQuYnJva2VuYmFyID0gMjIwOwogICAgdC5yZWdpc3RlcmVkID0gNzQ3OwogICAgdC5HYnJldmUgPSA3MjI7CiAgICB0Lklkb3RhY2NlbnQgPSAzODk7CiAgICB0LnN1bW1hdGlvbiA9IDYwMDsKICAgIHQuRWdyYXZlID0gNjY3OwogICAgdC5yYWN1dGUgPSAzODk7CiAgICB0Lm9tYWNyb24gPSA1MDA7CiAgICB0LlphY3V0ZSA9IDYxMTsKICAgIHQuWmNhcm9uID0gNjExOwogICAgdC5ncmVhdGVyZXF1YWwgPSA1NDk7CiAgICB0LkV0aCA9IDcyMjsKICAgIHQuQ2NlZGlsbGEgPSA2Njc7CiAgICB0Lmxjb21tYWFjY2VudCA9IDI3ODsKICAgIHQudGNhcm9uID0gMzY2OwogICAgdC5lb2dvbmVrID0gNDQ0OwogICAgdC5Vb2dvbmVrID0gNzIyOwogICAgdC5BYWN1dGUgPSA2Njc7CiAgICB0LkFkaWVyZXNpcyA9IDY2NzsKICAgIHQuZWdyYXZlID0gNDQ0OwogICAgdC56YWN1dGUgPSAzODk7CiAgICB0LmlvZ29uZWsgPSAyNzg7CiAgICB0Lk9hY3V0ZSA9IDcyMjsKICAgIHQub2FjdXRlID0gNTAwOwogICAgdC5hbWFjcm9uID0gNTAwOwogICAgdC5zYWN1dGUgPSAzODk7CiAgICB0LmlkaWVyZXNpcyA9IDI3ODsKICAgIHQuT2NpcmN1bWZsZXggPSA3MjI7CiAgICB0LlVncmF2ZSA9IDcyMjsKICAgIHQuRGVsdGEgPSA2MTI7CiAgICB0LnRob3JuID0gNTAwOwogICAgdC50d29zdXBlcmlvciA9IDMwMDsKICAgIHQuT2RpZXJlc2lzID0gNzIyOwogICAgdC5tdSA9IDU3NjsKICAgIHQuaWdyYXZlID0gMjc4OwogICAgdC5vaHVuZ2FydW1sYXV0ID0gNTAwOwogICAgdC5Fb2dvbmVrID0gNjY3OwogICAgdC5kY3JvYXQgPSA1MDA7CiAgICB0LnRocmVlcXVhcnRlcnMgPSA3NTA7CiAgICB0LlNjZWRpbGxhID0gNTU2OwogICAgdC5sY2Fyb24gPSAzODI7CiAgICB0Lktjb21tYWFjY2VudCA9IDY2NzsKICAgIHQuTGFjdXRlID0gNjExOwogICAgdC50cmFkZW1hcmsgPSAxMDAwOwogICAgdC5lZG90YWNjZW50ID0gNDQ0OwogICAgdC5JZ3JhdmUgPSAzODk7CiAgICB0LkltYWNyb24gPSAzODk7CiAgICB0LkxjYXJvbiA9IDYxMTsKICAgIHQub25laGFsZiA9IDc1MDsKICAgIHQubGVzc2VxdWFsID0gNTQ5OwogICAgdC5vY2lyY3VtZmxleCA9IDUwMDsKICAgIHQubnRpbGRlID0gNTU2OwogICAgdC5VaHVuZ2FydW1sYXV0ID0gNzIyOwogICAgdC5FYWN1dGUgPSA2Njc7CiAgICB0LmVtYWNyb24gPSA0NDQ7CiAgICB0LmdicmV2ZSA9IDUwMDsKICAgIHQub25lcXVhcnRlciA9IDc1MDsKICAgIHQuU2Nhcm9uID0gNTU2OwogICAgdC5TY29tbWFhY2NlbnQgPSA1NTY7CiAgICB0Lk9odW5nYXJ1bWxhdXQgPSA3MjI7CiAgICB0LmRlZ3JlZSA9IDQwMDsKICAgIHQub2dyYXZlID0gNTAwOwogICAgdC5DY2Fyb24gPSA2Njc7CiAgICB0LnVncmF2ZSA9IDU1NjsKICAgIHQucmFkaWNhbCA9IDU0OTsKICAgIHQuRGNhcm9uID0gNzIyOwogICAgdC5yY29tbWFhY2NlbnQgPSAzODk7CiAgICB0Lk50aWxkZSA9IDcyMjsKICAgIHQub3RpbGRlID0gNTAwOwogICAgdC5SY29tbWFhY2NlbnQgPSA2Njc7CiAgICB0Lkxjb21tYWFjY2VudCA9IDYxMTsKICAgIHQuQXRpbGRlID0gNjY3OwogICAgdC5Bb2dvbmVrID0gNjY3OwogICAgdC5BcmluZyA9IDY2NzsKICAgIHQuT3RpbGRlID0gNzIyOwogICAgdC56ZG90YWNjZW50ID0gMzg5OwogICAgdC5FY2Fyb24gPSA2Njc7CiAgICB0LklvZ29uZWsgPSAzODk7CiAgICB0Lmtjb21tYWFjY2VudCA9IDUwMDsKICAgIHQubWludXMgPSA2MDY7CiAgICB0LkljaXJjdW1mbGV4ID0gMzg5OwogICAgdC5uY2Fyb24gPSA1NTY7CiAgICB0LnRjb21tYWFjY2VudCA9IDI3ODsKICAgIHQubG9naWNhbG5vdCA9IDYwNjsKICAgIHQub2RpZXJlc2lzID0gNTAwOwogICAgdC51ZGllcmVzaXMgPSA1NTY7CiAgICB0Lm5vdGVxdWFsID0gNTQ5OwogICAgdC5nY29tbWFhY2NlbnQgPSA1MDA7CiAgICB0LmV0aCA9IDUwMDsKICAgIHQuemNhcm9uID0gMzg5OwogICAgdC5uY29tbWFhY2NlbnQgPSA1NTY7CiAgICB0Lm9uZXN1cGVyaW9yID0gMzAwOwogICAgdC5pbWFjcm9uID0gMjc4OwogICAgdC5FdXJvID0gNTAwOwogIH0pOwogIHRbIlRpbWVzLUl0YWxpYyJdID0gZ2V0TG9va3VwVGFibGVGYWN0b3J5KGZ1bmN0aW9uICh0KSB7CiAgICB0LnNwYWNlID0gMjUwOwogICAgdC5leGNsYW0gPSAzMzM7CiAgICB0LnF1b3RlZGJsID0gNDIwOwogICAgdC5udW1iZXJzaWduID0gNTAwOwogICAgdC5kb2xsYXIgPSA1MDA7CiAgICB0LnBlcmNlbnQgPSA4MzM7CiAgICB0LmFtcGVyc2FuZCA9IDc3ODsKICAgIHQucXVvdGVyaWdodCA9IDMzMzsKICAgIHQucGFyZW5sZWZ0ID0gMzMzOwogICAgdC5wYXJlbnJpZ2h0ID0gMzMzOwogICAgdC5hc3RlcmlzayA9IDUwMDsKICAgIHQucGx1cyA9IDY3NTsKICAgIHQuY29tbWEgPSAyNTA7CiAgICB0Lmh5cGhlbiA9IDMzMzsKICAgIHQucGVyaW9kID0gMjUwOwogICAgdC5zbGFzaCA9IDI3ODsKICAgIHQuemVybyA9IDUwMDsKICAgIHQub25lID0gNTAwOwogICAgdC50d28gPSA1MDA7CiAgICB0LnRocmVlID0gNTAwOwogICAgdC5mb3VyID0gNTAwOwogICAgdC5maXZlID0gNTAwOwogICAgdC5zaXggPSA1MDA7CiAgICB0LnNldmVuID0gNTAwOwogICAgdC5laWdodCA9IDUwMDsKICAgIHQubmluZSA9IDUwMDsKICAgIHQuY29sb24gPSAzMzM7CiAgICB0LnNlbWljb2xvbiA9IDMzMzsKICAgIHQubGVzcyA9IDY3NTsKICAgIHQuZXF1YWwgPSA2NzU7CiAgICB0LmdyZWF0ZXIgPSA2NzU7CiAgICB0LnF1ZXN0aW9uID0gNTAwOwogICAgdC5hdCA9IDkyMDsKICAgIHQuQSA9IDYxMTsKICAgIHQuQiA9IDYxMTsKICAgIHQuQyA9IDY2NzsKICAgIHQuRCA9IDcyMjsKICAgIHQuRSA9IDYxMTsKICAgIHQuRiA9IDYxMTsKICAgIHQuRyA9IDcyMjsKICAgIHQuSCA9IDcyMjsKICAgIHQuSSA9IDMzMzsKICAgIHQuSiA9IDQ0NDsKICAgIHQuSyA9IDY2NzsKICAgIHQuTCA9IDU1NjsKICAgIHQuTSA9IDgzMzsKICAgIHQuTiA9IDY2NzsKICAgIHQuTyA9IDcyMjsKICAgIHQuUCA9IDYxMTsKICAgIHQuUSA9IDcyMjsKICAgIHQuUiA9IDYxMTsKICAgIHQuUyA9IDUwMDsKICAgIHQuVCA9IDU1NjsKICAgIHQuVSA9IDcyMjsKICAgIHQuViA9IDYxMTsKICAgIHQuVyA9IDgzMzsKICAgIHQuWCA9IDYxMTsKICAgIHQuWSA9IDU1NjsKICAgIHQuWiA9IDU1NjsKICAgIHQuYnJhY2tldGxlZnQgPSAzODk7CiAgICB0LmJhY2tzbGFzaCA9IDI3ODsKICAgIHQuYnJhY2tldHJpZ2h0ID0gMzg5OwogICAgdC5hc2NpaWNpcmN1bSA9IDQyMjsKICAgIHQudW5kZXJzY29yZSA9IDUwMDsKICAgIHQucXVvdGVsZWZ0ID0gMzMzOwogICAgdC5hID0gNTAwOwogICAgdC5iID0gNTAwOwogICAgdC5jID0gNDQ0OwogICAgdC5kID0gNTAwOwogICAgdC5lID0gNDQ0OwogICAgdC5mID0gMjc4OwogICAgdC5nID0gNTAwOwogICAgdC5oID0gNTAwOwogICAgdC5pID0gMjc4OwogICAgdC5qID0gMjc4OwogICAgdC5rID0gNDQ0OwogICAgdC5sID0gMjc4OwogICAgdC5tID0gNzIyOwogICAgdC5uID0gNTAwOwogICAgdC5vID0gNTAwOwogICAgdC5wID0gNTAwOwogICAgdC5xID0gNTAwOwogICAgdC5yID0gMzg5OwogICAgdC5zID0gMzg5OwogICAgdC50ID0gMjc4OwogICAgdC51ID0gNTAwOwogICAgdC52ID0gNDQ0OwogICAgdC53ID0gNjY3OwogICAgdC54ID0gNDQ0OwogICAgdC55ID0gNDQ0OwogICAgdC56ID0gMzg5OwogICAgdC5icmFjZWxlZnQgPSA0MDA7CiAgICB0LmJhciA9IDI3NTsKICAgIHQuYnJhY2VyaWdodCA9IDQwMDsKICAgIHQuYXNjaWl0aWxkZSA9IDU0MTsKICAgIHQuZXhjbGFtZG93biA9IDM4OTsKICAgIHQuY2VudCA9IDUwMDsKICAgIHQuc3RlcmxpbmcgPSA1MDA7CiAgICB0LmZyYWN0aW9uID0gMTY3OwogICAgdC55ZW4gPSA1MDA7CiAgICB0LmZsb3JpbiA9IDUwMDsKICAgIHQuc2VjdGlvbiA9IDUwMDsKICAgIHQuY3VycmVuY3kgPSA1MDA7CiAgICB0LnF1b3Rlc2luZ2xlID0gMjE0OwogICAgdC5xdW90ZWRibGxlZnQgPSA1NTY7CiAgICB0Lmd1aWxsZW1vdGxlZnQgPSA1MDA7CiAgICB0Lmd1aWxzaW5nbGxlZnQgPSAzMzM7CiAgICB0Lmd1aWxzaW5nbHJpZ2h0ID0gMzMzOwogICAgdC5maSA9IDUwMDsKICAgIHQuZmwgPSA1MDA7CiAgICB0LmVuZGFzaCA9IDUwMDsKICAgIHQuZGFnZ2VyID0gNTAwOwogICAgdC5kYWdnZXJkYmwgPSA1MDA7CiAgICB0LnBlcmlvZGNlbnRlcmVkID0gMjUwOwogICAgdC5wYXJhZ3JhcGggPSA1MjM7CiAgICB0LmJ1bGxldCA9IDM1MDsKICAgIHQucXVvdGVzaW5nbGJhc2UgPSAzMzM7CiAgICB0LnF1b3RlZGJsYmFzZSA9IDU1NjsKICAgIHQucXVvdGVkYmxyaWdodCA9IDU1NjsKICAgIHQuZ3VpbGxlbW90cmlnaHQgPSA1MDA7CiAgICB0LmVsbGlwc2lzID0gODg5OwogICAgdC5wZXJ0aG91c2FuZCA9IDEwMDA7CiAgICB0LnF1ZXN0aW9uZG93biA9IDUwMDsKICAgIHQuZ3JhdmUgPSAzMzM7CiAgICB0LmFjdXRlID0gMzMzOwogICAgdC5jaXJjdW1mbGV4ID0gMzMzOwogICAgdC50aWxkZSA9IDMzMzsKICAgIHQubWFjcm9uID0gMzMzOwogICAgdC5icmV2ZSA9IDMzMzsKICAgIHQuZG90YWNjZW50ID0gMzMzOwogICAgdC5kaWVyZXNpcyA9IDMzMzsKICAgIHQucmluZyA9IDMzMzsKICAgIHQuY2VkaWxsYSA9IDMzMzsKICAgIHQuaHVuZ2FydW1sYXV0ID0gMzMzOwogICAgdC5vZ29uZWsgPSAzMzM7CiAgICB0LmNhcm9uID0gMzMzOwogICAgdC5lbWRhc2ggPSA4ODk7CiAgICB0LkFFID0gODg5OwogICAgdC5vcmRmZW1pbmluZSA9IDI3NjsKICAgIHQuTHNsYXNoID0gNTU2OwogICAgdC5Pc2xhc2ggPSA3MjI7CiAgICB0Lk9FID0gOTQ0OwogICAgdC5vcmRtYXNjdWxpbmUgPSAzMTA7CiAgICB0LmFlID0gNjY3OwogICAgdC5kb3RsZXNzaSA9IDI3ODsKICAgIHQubHNsYXNoID0gMjc4OwogICAgdC5vc2xhc2ggPSA1MDA7CiAgICB0Lm9lID0gNjY3OwogICAgdC5nZXJtYW5kYmxzID0gNTAwOwogICAgdC5JZGllcmVzaXMgPSAzMzM7CiAgICB0LmVhY3V0ZSA9IDQ0NDsKICAgIHQuYWJyZXZlID0gNTAwOwogICAgdC51aHVuZ2FydW1sYXV0ID0gNTAwOwogICAgdC5lY2Fyb24gPSA0NDQ7CiAgICB0LllkaWVyZXNpcyA9IDU1NjsKICAgIHQuZGl2aWRlID0gNjc1OwogICAgdC5ZYWN1dGUgPSA1NTY7CiAgICB0LkFjaXJjdW1mbGV4ID0gNjExOwogICAgdC5hYWN1dGUgPSA1MDA7CiAgICB0LlVjaXJjdW1mbGV4ID0gNzIyOwogICAgdC55YWN1dGUgPSA0NDQ7CiAgICB0LnNjb21tYWFjY2VudCA9IDM4OTsKICAgIHQuZWNpcmN1bWZsZXggPSA0NDQ7CiAgICB0LlVyaW5nID0gNzIyOwogICAgdC5VZGllcmVzaXMgPSA3MjI7CiAgICB0LmFvZ29uZWsgPSA1MDA7CiAgICB0LlVhY3V0ZSA9IDcyMjsKICAgIHQudW9nb25layA9IDUwMDsKICAgIHQuRWRpZXJlc2lzID0gNjExOwogICAgdC5EY3JvYXQgPSA3MjI7CiAgICB0LmNvbW1hYWNjZW50ID0gMjUwOwogICAgdC5jb3B5cmlnaHQgPSA3NjA7CiAgICB0LkVtYWNyb24gPSA2MTE7CiAgICB0LmNjYXJvbiA9IDQ0NDsKICAgIHQuYXJpbmcgPSA1MDA7CiAgICB0Lk5jb21tYWFjY2VudCA9IDY2NzsKICAgIHQubGFjdXRlID0gMjc4OwogICAgdC5hZ3JhdmUgPSA1MDA7CiAgICB0LlRjb21tYWFjY2VudCA9IDU1NjsKICAgIHQuQ2FjdXRlID0gNjY3OwogICAgdC5hdGlsZGUgPSA1MDA7CiAgICB0LkVkb3RhY2NlbnQgPSA2MTE7CiAgICB0LnNjYXJvbiA9IDM4OTsKICAgIHQuc2NlZGlsbGEgPSAzODk7CiAgICB0LmlhY3V0ZSA9IDI3ODsKICAgIHQubG96ZW5nZSA9IDQ3MTsKICAgIHQuUmNhcm9uID0gNjExOwogICAgdC5HY29tbWFhY2NlbnQgPSA3MjI7CiAgICB0LnVjaXJjdW1mbGV4ID0gNTAwOwogICAgdC5hY2lyY3VtZmxleCA9IDUwMDsKICAgIHQuQW1hY3JvbiA9IDYxMTsKICAgIHQucmNhcm9uID0gMzg5OwogICAgdC5jY2VkaWxsYSA9IDQ0NDsKICAgIHQuWmRvdGFjY2VudCA9IDU1NjsKICAgIHQuVGhvcm4gPSA2MTE7CiAgICB0Lk9tYWNyb24gPSA3MjI7CiAgICB0LlJhY3V0ZSA9IDYxMTsKICAgIHQuU2FjdXRlID0gNTAwOwogICAgdC5kY2Fyb24gPSA1NDQ7CiAgICB0LlVtYWNyb24gPSA3MjI7CiAgICB0LnVyaW5nID0gNTAwOwogICAgdC50aHJlZXN1cGVyaW9yID0gMzAwOwogICAgdC5PZ3JhdmUgPSA3MjI7CiAgICB0LkFncmF2ZSA9IDYxMTsKICAgIHQuQWJyZXZlID0gNjExOwogICAgdC5tdWx0aXBseSA9IDY3NTsKICAgIHQudWFjdXRlID0gNTAwOwogICAgdC5UY2Fyb24gPSA1NTY7CiAgICB0LnBhcnRpYWxkaWZmID0gNDc2OwogICAgdC55ZGllcmVzaXMgPSA0NDQ7CiAgICB0Lk5hY3V0ZSA9IDY2NzsKICAgIHQuaWNpcmN1bWZsZXggPSAyNzg7CiAgICB0LkVjaXJjdW1mbGV4ID0gNjExOwogICAgdC5hZGllcmVzaXMgPSA1MDA7CiAgICB0LmVkaWVyZXNpcyA9IDQ0NDsKICAgIHQuY2FjdXRlID0gNDQ0OwogICAgdC5uYWN1dGUgPSA1MDA7CiAgICB0LnVtYWNyb24gPSA1MDA7CiAgICB0Lk5jYXJvbiA9IDY2NzsKICAgIHQuSWFjdXRlID0gMzMzOwogICAgdC5wbHVzbWludXMgPSA2NzU7CiAgICB0LmJyb2tlbmJhciA9IDI3NTsKICAgIHQucmVnaXN0ZXJlZCA9IDc2MDsKICAgIHQuR2JyZXZlID0gNzIyOwogICAgdC5JZG90YWNjZW50ID0gMzMzOwogICAgdC5zdW1tYXRpb24gPSA2MDA7CiAgICB0LkVncmF2ZSA9IDYxMTsKICAgIHQucmFjdXRlID0gMzg5OwogICAgdC5vbWFjcm9uID0gNTAwOwogICAgdC5aYWN1dGUgPSA1NTY7CiAgICB0LlpjYXJvbiA9IDU1NjsKICAgIHQuZ3JlYXRlcmVxdWFsID0gNTQ5OwogICAgdC5FdGggPSA3MjI7CiAgICB0LkNjZWRpbGxhID0gNjY3OwogICAgdC5sY29tbWFhY2NlbnQgPSAyNzg7CiAgICB0LnRjYXJvbiA9IDMwMDsKICAgIHQuZW9nb25layA9IDQ0NDsKICAgIHQuVW9nb25layA9IDcyMjsKICAgIHQuQWFjdXRlID0gNjExOwogICAgdC5BZGllcmVzaXMgPSA2MTE7CiAgICB0LmVncmF2ZSA9IDQ0NDsKICAgIHQuemFjdXRlID0gMzg5OwogICAgdC5pb2dvbmVrID0gMjc4OwogICAgdC5PYWN1dGUgPSA3MjI7CiAgICB0Lm9hY3V0ZSA9IDUwMDsKICAgIHQuYW1hY3JvbiA9IDUwMDsKICAgIHQuc2FjdXRlID0gMzg5OwogICAgdC5pZGllcmVzaXMgPSAyNzg7CiAgICB0Lk9jaXJjdW1mbGV4ID0gNzIyOwogICAgdC5VZ3JhdmUgPSA3MjI7CiAgICB0LkRlbHRhID0gNjEyOwogICAgdC50aG9ybiA9IDUwMDsKICAgIHQudHdvc3VwZXJpb3IgPSAzMDA7CiAgICB0Lk9kaWVyZXNpcyA9IDcyMjsKICAgIHQubXUgPSA1MDA7CiAgICB0LmlncmF2ZSA9IDI3ODsKICAgIHQub2h1bmdhcnVtbGF1dCA9IDUwMDsKICAgIHQuRW9nb25layA9IDYxMTsKICAgIHQuZGNyb2F0ID0gNTAwOwogICAgdC50aHJlZXF1YXJ0ZXJzID0gNzUwOwogICAgdC5TY2VkaWxsYSA9IDUwMDsKICAgIHQubGNhcm9uID0gMzAwOwogICAgdC5LY29tbWFhY2NlbnQgPSA2Njc7CiAgICB0LkxhY3V0ZSA9IDU1NjsKICAgIHQudHJhZGVtYXJrID0gOTgwOwogICAgdC5lZG90YWNjZW50ID0gNDQ0OwogICAgdC5JZ3JhdmUgPSAzMzM7CiAgICB0LkltYWNyb24gPSAzMzM7CiAgICB0LkxjYXJvbiA9IDYxMTsKICAgIHQub25laGFsZiA9IDc1MDsKICAgIHQubGVzc2VxdWFsID0gNTQ5OwogICAgdC5vY2lyY3VtZmxleCA9IDUwMDsKICAgIHQubnRpbGRlID0gNTAwOwogICAgdC5VaHVuZ2FydW1sYXV0ID0gNzIyOwogICAgdC5FYWN1dGUgPSA2MTE7CiAgICB0LmVtYWNyb24gPSA0NDQ7CiAgICB0LmdicmV2ZSA9IDUwMDsKICAgIHQub25lcXVhcnRlciA9IDc1MDsKICAgIHQuU2Nhcm9uID0gNTAwOwogICAgdC5TY29tbWFhY2NlbnQgPSA1MDA7CiAgICB0Lk9odW5nYXJ1bWxhdXQgPSA3MjI7CiAgICB0LmRlZ3JlZSA9IDQwMDsKICAgIHQub2dyYXZlID0gNTAwOwogICAgdC5DY2Fyb24gPSA2Njc7CiAgICB0LnVncmF2ZSA9IDUwMDsKICAgIHQucmFkaWNhbCA9IDQ1MzsKICAgIHQuRGNhcm9uID0gNzIyOwogICAgdC5yY29tbWFhY2NlbnQgPSAzODk7CiAgICB0Lk50aWxkZSA9IDY2NzsKICAgIHQub3RpbGRlID0gNTAwOwogICAgdC5SY29tbWFhY2NlbnQgPSA2MTE7CiAgICB0Lkxjb21tYWFjY2VudCA9IDU1NjsKICAgIHQuQXRpbGRlID0gNjExOwogICAgdC5Bb2dvbmVrID0gNjExOwogICAgdC5BcmluZyA9IDYxMTsKICAgIHQuT3RpbGRlID0gNzIyOwogICAgdC56ZG90YWNjZW50ID0gMzg5OwogICAgdC5FY2Fyb24gPSA2MTE7CiAgICB0LklvZ29uZWsgPSAzMzM7CiAgICB0Lmtjb21tYWFjY2VudCA9IDQ0NDsKICAgIHQubWludXMgPSA2NzU7CiAgICB0LkljaXJjdW1mbGV4ID0gMzMzOwogICAgdC5uY2Fyb24gPSA1MDA7CiAgICB0LnRjb21tYWFjY2VudCA9IDI3ODsKICAgIHQubG9naWNhbG5vdCA9IDY3NTsKICAgIHQub2RpZXJlc2lzID0gNTAwOwogICAgdC51ZGllcmVzaXMgPSA1MDA7CiAgICB0Lm5vdGVxdWFsID0gNTQ5OwogICAgdC5nY29tbWFhY2NlbnQgPSA1MDA7CiAgICB0LmV0aCA9IDUwMDsKICAgIHQuemNhcm9uID0gMzg5OwogICAgdC5uY29tbWFhY2NlbnQgPSA1MDA7CiAgICB0Lm9uZXN1cGVyaW9yID0gMzAwOwogICAgdC5pbWFjcm9uID0gMjc4OwogICAgdC5FdXJvID0gNTAwOwogIH0pOwogIHQuWmFwZkRpbmdiYXRzID0gZ2V0TG9va3VwVGFibGVGYWN0b3J5KGZ1bmN0aW9uICh0KSB7CiAgICB0LnNwYWNlID0gMjc4OwogICAgdC5hMSA9IDk3NDsKICAgIHQuYTIgPSA5NjE7CiAgICB0LmEyMDIgPSA5NzQ7CiAgICB0LmEzID0gOTgwOwogICAgdC5hNCA9IDcxOTsKICAgIHQuYTUgPSA3ODk7CiAgICB0LmExMTkgPSA3OTA7CiAgICB0LmExMTggPSA3OTE7CiAgICB0LmExMTcgPSA2OTA7CiAgICB0LmExMSA9IDk2MDsKICAgIHQuYTEyID0gOTM5OwogICAgdC5hMTMgPSA1NDk7CiAgICB0LmExNCA9IDg1NTsKICAgIHQuYTE1ID0gOTExOwogICAgdC5hMTYgPSA5MzM7CiAgICB0LmExMDUgPSA5MTE7CiAgICB0LmExNyA9IDk0NTsKICAgIHQuYTE4ID0gOTc0OwogICAgdC5hMTkgPSA3NTU7CiAgICB0LmEyMCA9IDg0NjsKICAgIHQuYTIxID0gNzYyOwogICAgdC5hMjIgPSA3NjE7CiAgICB0LmEyMyA9IDU3MTsKICAgIHQuYTI0ID0gNjc3OwogICAgdC5hMjUgPSA3NjM7CiAgICB0LmEyNiA9IDc2MDsKICAgIHQuYTI3ID0gNzU5OwogICAgdC5hMjggPSA3NTQ7CiAgICB0LmE2ID0gNDk0OwogICAgdC5hNyA9IDU1MjsKICAgIHQuYTggPSA1Mzc7CiAgICB0LmE5ID0gNTc3OwogICAgdC5hMTAgPSA2OTI7CiAgICB0LmEyOSA9IDc4NjsKICAgIHQuYTMwID0gNzg4OwogICAgdC5hMzEgPSA3ODg7CiAgICB0LmEzMiA9IDc5MDsKICAgIHQuYTMzID0gNzkzOwogICAgdC5hMzQgPSA3OTQ7CiAgICB0LmEzNSA9IDgxNjsKICAgIHQuYTM2ID0gODIzOwogICAgdC5hMzcgPSA3ODk7CiAgICB0LmEzOCA9IDg0MTsKICAgIHQuYTM5ID0gODIzOwogICAgdC5hNDAgPSA4MzM7CiAgICB0LmE0MSA9IDgxNjsKICAgIHQuYTQyID0gODMxOwogICAgdC5hNDMgPSA5MjM7CiAgICB0LmE0NCA9IDc0NDsKICAgIHQuYTQ1ID0gNzIzOwogICAgdC5hNDYgPSA3NDk7CiAgICB0LmE0NyA9IDc5MDsKICAgIHQuYTQ4ID0gNzkyOwogICAgdC5hNDkgPSA2OTU7CiAgICB0LmE1MCA9IDc3NjsKICAgIHQuYTUxID0gNzY4OwogICAgdC5hNTIgPSA3OTI7CiAgICB0LmE1MyA9IDc1OTsKICAgIHQuYTU0ID0gNzA3OwogICAgdC5hNTUgPSA3MDg7CiAgICB0LmE1NiA9IDY4MjsKICAgIHQuYTU3ID0gNzAxOwogICAgdC5hNTggPSA4MjY7CiAgICB0LmE1OSA9IDgxNTsKICAgIHQuYTYwID0gNzg5OwogICAgdC5hNjEgPSA3ODk7CiAgICB0LmE2MiA9IDcwNzsKICAgIHQuYTYzID0gNjg3OwogICAgdC5hNjQgPSA2OTY7CiAgICB0LmE2NSA9IDY4OTsKICAgIHQuYTY2ID0gNzg2OwogICAgdC5hNjcgPSA3ODc7CiAgICB0LmE2OCA9IDcxMzsKICAgIHQuYTY5ID0gNzkxOwogICAgdC5hNzAgPSA3ODU7CiAgICB0LmE3MSA9IDc5MTsKICAgIHQuYTcyID0gODczOwogICAgdC5hNzMgPSA3NjE7CiAgICB0LmE3NCA9IDc2MjsKICAgIHQuYTIwMyA9IDc2MjsKICAgIHQuYTc1ID0gNzU5OwogICAgdC5hMjA0ID0gNzU5OwogICAgdC5hNzYgPSA4OTI7CiAgICB0LmE3NyA9IDg5MjsKICAgIHQuYTc4ID0gNzg4OwogICAgdC5hNzkgPSA3ODQ7CiAgICB0LmE4MSA9IDQzODsKICAgIHQuYTgyID0gMTM4OwogICAgdC5hODMgPSAyNzc7CiAgICB0LmE4NCA9IDQxNTsKICAgIHQuYTk3ID0gMzkyOwogICAgdC5hOTggPSAzOTI7CiAgICB0LmE5OSA9IDY2ODsKICAgIHQuYTEwMCA9IDY2ODsKICAgIHQuYTg5ID0gMzkwOwogICAgdC5hOTAgPSAzOTA7CiAgICB0LmE5MyA9IDMxNzsKICAgIHQuYTk0ID0gMzE3OwogICAgdC5hOTEgPSAyNzY7CiAgICB0LmE5MiA9IDI3NjsKICAgIHQuYTIwNSA9IDUwOTsKICAgIHQuYTg1ID0gNTA5OwogICAgdC5hMjA2ID0gNDEwOwogICAgdC5hODYgPSA0MTA7CiAgICB0LmE4NyA9IDIzNDsKICAgIHQuYTg4ID0gMjM0OwogICAgdC5hOTUgPSAzMzQ7CiAgICB0LmE5NiA9IDMzNDsKICAgIHQuYTEwMSA9IDczMjsKICAgIHQuYTEwMiA9IDU0NDsKICAgIHQuYTEwMyA9IDU0NDsKICAgIHQuYTEwNCA9IDkxMDsKICAgIHQuYTEwNiA9IDY2NzsKICAgIHQuYTEwNyA9IDc2MDsKICAgIHQuYTEwOCA9IDc2MDsKICAgIHQuYTExMiA9IDc3NjsKICAgIHQuYTExMSA9IDU5NTsKICAgIHQuYTExMCA9IDY5NDsKICAgIHQuYTEwOSA9IDYyNjsKICAgIHQuYTEyMCA9IDc4ODsKICAgIHQuYTEyMSA9IDc4ODsKICAgIHQuYTEyMiA9IDc4ODsKICAgIHQuYTEyMyA9IDc4ODsKICAgIHQuYTEyNCA9IDc4ODsKICAgIHQuYTEyNSA9IDc4ODsKICAgIHQuYTEyNiA9IDc4ODsKICAgIHQuYTEyNyA9IDc4ODsKICAgIHQuYTEyOCA9IDc4ODsKICAgIHQuYTEyOSA9IDc4ODsKICAgIHQuYTEzMCA9IDc4ODsKICAgIHQuYTEzMSA9IDc4ODsKICAgIHQuYTEzMiA9IDc4ODsKICAgIHQuYTEzMyA9IDc4ODsKICAgIHQuYTEzNCA9IDc4ODsKICAgIHQuYTEzNSA9IDc4ODsKICAgIHQuYTEzNiA9IDc4ODsKICAgIHQuYTEzNyA9IDc4ODsKICAgIHQuYTEzOCA9IDc4ODsKICAgIHQuYTEzOSA9IDc4ODsKICAgIHQuYTE0MCA9IDc4ODsKICAgIHQuYTE0MSA9IDc4ODsKICAgIHQuYTE0MiA9IDc4ODsKICAgIHQuYTE0MyA9IDc4ODsKICAgIHQuYTE0NCA9IDc4ODsKICAgIHQuYTE0NSA9IDc4ODsKICAgIHQuYTE0NiA9IDc4ODsKICAgIHQuYTE0NyA9IDc4ODsKICAgIHQuYTE0OCA9IDc4ODsKICAgIHQuYTE0OSA9IDc4ODsKICAgIHQuYTE1MCA9IDc4ODsKICAgIHQuYTE1MSA9IDc4ODsKICAgIHQuYTE1MiA9IDc4ODsKICAgIHQuYTE1MyA9IDc4ODsKICAgIHQuYTE1NCA9IDc4ODsKICAgIHQuYTE1NSA9IDc4ODsKICAgIHQuYTE1NiA9IDc4ODsKICAgIHQuYTE1NyA9IDc4ODsKICAgIHQuYTE1OCA9IDc4ODsKICAgIHQuYTE1OSA9IDc4ODsKICAgIHQuYTE2MCA9IDg5NDsKICAgIHQuYTE2MSA9IDgzODsKICAgIHQuYTE2MyA9IDEwMTY7CiAgICB0LmExNjQgPSA0NTg7CiAgICB0LmExOTYgPSA3NDg7CiAgICB0LmExNjUgPSA5MjQ7CiAgICB0LmExOTIgPSA3NDg7CiAgICB0LmExNjYgPSA5MTg7CiAgICB0LmExNjcgPSA5Mjc7CiAgICB0LmExNjggPSA5Mjg7CiAgICB0LmExNjkgPSA5Mjg7CiAgICB0LmExNzAgPSA4MzQ7CiAgICB0LmExNzEgPSA4NzM7CiAgICB0LmExNzIgPSA4Mjg7CiAgICB0LmExNzMgPSA5MjQ7CiAgICB0LmExNjIgPSA5MjQ7CiAgICB0LmExNzQgPSA5MTc7CiAgICB0LmExNzUgPSA5MzA7CiAgICB0LmExNzYgPSA5MzE7CiAgICB0LmExNzcgPSA0NjM7CiAgICB0LmExNzggPSA4ODM7CiAgICB0LmExNzkgPSA4MzY7CiAgICB0LmExOTMgPSA4MzY7CiAgICB0LmExODAgPSA4Njc7CiAgICB0LmExOTkgPSA4Njc7CiAgICB0LmExODEgPSA2OTY7CiAgICB0LmEyMDAgPSA2OTY7CiAgICB0LmExODIgPSA4NzQ7CiAgICB0LmEyMDEgPSA4NzQ7CiAgICB0LmExODMgPSA3NjA7CiAgICB0LmExODQgPSA5NDY7CiAgICB0LmExOTcgPSA3NzE7CiAgICB0LmExODUgPSA4NjU7CiAgICB0LmExOTQgPSA3NzE7CiAgICB0LmExOTggPSA4ODg7CiAgICB0LmExODYgPSA5Njc7CiAgICB0LmExOTUgPSA4ODg7CiAgICB0LmExODcgPSA4MzE7CiAgICB0LmExODggPSA4NzM7CiAgICB0LmExODkgPSA5Mjc7CiAgICB0LmExOTAgPSA5NzA7CiAgICB0LmExOTEgPSA5MTg7CiAgfSk7Cn0pOwpjb25zdCBnZXRGb250QmFzaWNNZXRyaWNzID0gZ2V0TG9va3VwVGFibGVGYWN0b3J5KGZ1bmN0aW9uICh0KSB7CiAgdC5Db3VyaWVyID0gewogICAgYXNjZW50OiA2MjksCiAgICBkZXNjZW50OiAtMTU3LAogICAgY2FwSGVpZ2h0OiA1NjIsCiAgICB4SGVpZ2h0OiAtNDI2CiAgfTsKICB0WyJDb3VyaWVyLUJvbGQiXSA9IHsKICAgIGFzY2VudDogNjI5LAogICAgZGVzY2VudDogLTE1NywKICAgIGNhcEhlaWdodDogNTYyLAogICAgeEhlaWdodDogNDM5CiAgfTsKICB0WyJDb3VyaWVyLU9ibGlxdWUiXSA9IHsKICAgIGFzY2VudDogNjI5LAogICAgZGVzY2VudDogLTE1NywKICAgIGNhcEhlaWdodDogNTYyLAogICAgeEhlaWdodDogNDI2CiAgfTsKICB0WyJDb3VyaWVyLUJvbGRPYmxpcXVlIl0gPSB7CiAgICBhc2NlbnQ6IDYyOSwKICAgIGRlc2NlbnQ6IC0xNTcsCiAgICBjYXBIZWlnaHQ6IDU2MiwKICAgIHhIZWlnaHQ6IDQyNgogIH07CiAgdC5IZWx2ZXRpY2EgPSB7CiAgICBhc2NlbnQ6IDcxOCwKICAgIGRlc2NlbnQ6IC0yMDcsCiAgICBjYXBIZWlnaHQ6IDcxOCwKICAgIHhIZWlnaHQ6IDUyMwogIH07CiAgdFsiSGVsdmV0aWNhLUJvbGQiXSA9IHsKICAgIGFzY2VudDogNzE4LAogICAgZGVzY2VudDogLTIwNywKICAgIGNhcEhlaWdodDogNzE4LAogICAgeEhlaWdodDogNTMyCiAgfTsKICB0WyJIZWx2ZXRpY2EtT2JsaXF1ZSJdID0gewogICAgYXNjZW50OiA3MTgsCiAgICBkZXNjZW50OiAtMjA3LAogICAgY2FwSGVpZ2h0OiA3MTgsCiAgICB4SGVpZ2h0OiA1MjMKICB9OwogIHRbIkhlbHZldGljYS1Cb2xkT2JsaXF1ZSJdID0gewogICAgYXNjZW50OiA3MTgsCiAgICBkZXNjZW50OiAtMjA3LAogICAgY2FwSGVpZ2h0OiA3MTgsCiAgICB4SGVpZ2h0OiA1MzIKICB9OwogIHRbIlRpbWVzLVJvbWFuIl0gPSB7CiAgICBhc2NlbnQ6IDY4MywKICAgIGRlc2NlbnQ6IC0yMTcsCiAgICBjYXBIZWlnaHQ6IDY2MiwKICAgIHhIZWlnaHQ6IDQ1MAogIH07CiAgdFsiVGltZXMtQm9sZCJdID0gewogICAgYXNjZW50OiA2ODMsCiAgICBkZXNjZW50OiAtMjE3LAogICAgY2FwSGVpZ2h0OiA2NzYsCiAgICB4SGVpZ2h0OiA0NjEKICB9OwogIHRbIlRpbWVzLUl0YWxpYyJdID0gewogICAgYXNjZW50OiA2ODMsCiAgICBkZXNjZW50OiAtMjE3LAogICAgY2FwSGVpZ2h0OiA2NTMsCiAgICB4SGVpZ2h0OiA0NDEKICB9OwogIHRbIlRpbWVzLUJvbGRJdGFsaWMiXSA9IHsKICAgIGFzY2VudDogNjgzLAogICAgZGVzY2VudDogLTIxNywKICAgIGNhcEhlaWdodDogNjY5LAogICAgeEhlaWdodDogNDYyCiAgfTsKICB0LlN5bWJvbCA9IHsKICAgIGFzY2VudDogTWF0aC5OYU4sCiAgICBkZXNjZW50OiBNYXRoLk5hTiwKICAgIGNhcEhlaWdodDogTWF0aC5OYU4sCiAgICB4SGVpZ2h0OiBNYXRoLk5hTgogIH07CiAgdC5aYXBmRGluZ2JhdHMgPSB7CiAgICBhc2NlbnQ6IE1hdGguTmFOLAogICAgZGVzY2VudDogTWF0aC5OYU4sCiAgICBjYXBIZWlnaHQ6IE1hdGguTmFOLAogICAgeEhlaWdodDogTWF0aC5OYU4KICB9Owp9KTsKCjsvLyAuL3NyYy9jb3JlL2dseWYuanMKCgoKCgoKCgoKCgoKCmNvbnN0IE9OX0NVUlZFX1BPSU5UID0gMSA8PCAwOwpjb25zdCBYX1NIT1JUX1ZFQ1RPUiA9IDEgPDwgMTsKY29uc3QgWV9TSE9SVF9WRUNUT1IgPSAxIDw8IDI7CmNvbnN0IFJFUEVBVF9GTEFHID0gMSA8PCAzOwpjb25zdCBYX0lTX1NBTUVfT1JfUE9TSVRJVkVfWF9TSE9SVF9WRUNUT1IgPSAxIDw8IDQ7CmNvbnN0IFlfSVNfU0FNRV9PUl9QT1NJVElWRV9ZX1NIT1JUX1ZFQ1RPUiA9IDEgPDwgNTsKY29uc3QgT1ZFUkxBUF9TSU1QTEUgPSAxIDw8IDY7CmNvbnN0IEFSR18xX0FORF8yX0FSRV9XT1JEUyA9IDEgPDwgMDsKY29uc3QgQVJHU19BUkVfWFlfVkFMVUVTID0gMSA8PCAxOwpjb25zdCBXRV9IQVZFX0FfU0NBTEUgPSAxIDw8IDM7CmNvbnN0IE1PUkVfQ09NUE9ORU5UUyA9IDEgPDwgNTsKY29uc3QgV0VfSEFWRV9BTl9YX0FORF9ZX1NDQUxFID0gMSA8PCA2Owpjb25zdCBXRV9IQVZFX0FfVFdPX0JZX1RXTyA9IDEgPDwgNzsKY29uc3QgV0VfSEFWRV9JTlNUUlVDVElPTlMgPSAxIDw8IDg7CmNsYXNzIEdseWZUYWJsZSB7CiAgY29uc3RydWN0b3IoewogICAgZ2x5ZlRhYmxlLAogICAgaXNHbHlwaExvY2F0aW9uc0xvbmcsCiAgICBsb2NhVGFibGUsCiAgICBudW1HbHlwaHMKICB9KSB7CiAgICB0aGlzLmdseXBocyA9IFtdOwogICAgY29uc3QgbG9jYSA9IG5ldyBEYXRhVmlldyhsb2NhVGFibGUuYnVmZmVyLCBsb2NhVGFibGUuYnl0ZU9mZnNldCwgbG9jYVRhYmxlLmJ5dGVMZW5ndGgpOwogICAgY29uc3QgZ2x5ZiA9IG5ldyBEYXRhVmlldyhnbHlmVGFibGUuYnVmZmVyLCBnbHlmVGFibGUuYnl0ZU9mZnNldCwgZ2x5ZlRhYmxlLmJ5dGVMZW5ndGgpOwogICAgY29uc3Qgb2Zmc2V0U2l6ZSA9IGlzR2x5cGhMb2NhdGlvbnNMb25nID8gNCA6IDI7CiAgICBsZXQgcHJldiA9IGlzR2x5cGhMb2NhdGlvbnNMb25nID8gbG9jYS5nZXRVaW50MzIoMCkgOiAyICogbG9jYS5nZXRVaW50MTYoMCk7CiAgICBsZXQgcG9zID0gMDsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtR2x5cGhzOyBpKyspIHsKICAgICAgcG9zICs9IG9mZnNldFNpemU7CiAgICAgIGNvbnN0IG5leHQgPSBpc0dseXBoTG9jYXRpb25zTG9uZyA/IGxvY2EuZ2V0VWludDMyKHBvcykgOiAyICogbG9jYS5nZXRVaW50MTYocG9zKTsKICAgICAgaWYgKG5leHQgPT09IHByZXYpIHsKICAgICAgICB0aGlzLmdseXBocy5wdXNoKG5ldyBHbHlwaCh7fSkpOwogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGNvbnN0IGdseXBoID0gR2x5cGgucGFyc2UocHJldiwgZ2x5Zik7CiAgICAgIHRoaXMuZ2x5cGhzLnB1c2goZ2x5cGgpOwogICAgICBwcmV2ID0gbmV4dDsKICAgIH0KICB9CiAgZ2V0U2l6ZSgpIHsKICAgIHJldHVybiBNYXRoLnN1bVByZWNpc2UodGhpcy5nbHlwaHMubWFwKGcgPT4gZy5nZXRTaXplKCkgKyAzICYgfjMpKTsKICB9CiAgd3JpdGUoKSB7CiAgICBjb25zdCB0b3RhbFNpemUgPSB0aGlzLmdldFNpemUoKTsKICAgIGNvbnN0IGdseWZUYWJsZSA9IG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIodG90YWxTaXplKSk7CiAgICBjb25zdCBpc0xvY2F0aW9uTG9uZyA9IHRvdGFsU2l6ZSA+IDB4MWZmZmU7CiAgICBjb25zdCBvZmZzZXRTaXplID0gaXNMb2NhdGlvbkxvbmcgPyA0IDogMjsKICAgIGNvbnN0IGxvY2FUYWJsZSA9IG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoKHRoaXMuZ2x5cGhzLmxlbmd0aCArIDEpICogb2Zmc2V0U2l6ZSkpOwogICAgaWYgKGlzTG9jYXRpb25Mb25nKSB7CiAgICAgIGxvY2FUYWJsZS5zZXRVaW50MzIoMCwgMCk7CiAgICB9IGVsc2UgewogICAgICBsb2NhVGFibGUuc2V0VWludDE2KDAsIDApOwogICAgfQogICAgbGV0IHBvcyA9IDA7CiAgICBsZXQgbG9jYUluZGV4ID0gMDsKICAgIGZvciAoY29uc3QgZ2x5cGggb2YgdGhpcy5nbHlwaHMpIHsKICAgICAgcG9zICs9IGdseXBoLndyaXRlKHBvcywgZ2x5ZlRhYmxlKTsKICAgICAgcG9zID0gcG9zICsgMyAmIH4zOwogICAgICBsb2NhSW5kZXggKz0gb2Zmc2V0U2l6ZTsKICAgICAgaWYgKGlzTG9jYXRpb25Mb25nKSB7CiAgICAgICAgbG9jYVRhYmxlLnNldFVpbnQzMihsb2NhSW5kZXgsIHBvcyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgbG9jYVRhYmxlLnNldFVpbnQxNihsb2NhSW5kZXgsIHBvcyA+PiAxKTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIHsKICAgICAgaXNMb2NhdGlvbkxvbmcsCiAgICAgIGxvY2E6IG5ldyBVaW50OEFycmF5KGxvY2FUYWJsZS5idWZmZXIpLAogICAgICBnbHlmOiBuZXcgVWludDhBcnJheShnbHlmVGFibGUuYnVmZmVyKQogICAgfTsKICB9CiAgc2NhbGUoZmFjdG9ycykgewogICAgZm9yIChsZXQgaSA9IDAsIGlpID0gdGhpcy5nbHlwaHMubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgICB0aGlzLmdseXBoc1tpXS5zY2FsZShmYWN0b3JzW2ldKTsKICAgIH0KICB9Cn0KY2xhc3MgR2x5cGggewogIGNvbnN0cnVjdG9yKHsKICAgIGhlYWRlciA9IG51bGwsCiAgICBzaW1wbGUgPSBudWxsLAogICAgY29tcG9zaXRlcyA9IG51bGwKICB9KSB7CiAgICB0aGlzLmhlYWRlciA9IGhlYWRlcjsKICAgIHRoaXMuc2ltcGxlID0gc2ltcGxlOwogICAgdGhpcy5jb21wb3NpdGVzID0gY29tcG9zaXRlczsKICB9CiAgc3RhdGljIHBhcnNlKHBvcywgZ2x5ZikgewogICAgY29uc3QgW3JlYWQsIGhlYWRlcl0gPSBHbHlwaEhlYWRlci5wYXJzZShwb3MsIGdseWYpOwogICAgcG9zICs9IHJlYWQ7CiAgICBpZiAoaGVhZGVyLm51bWJlck9mQ29udG91cnMgPCAwKSB7CiAgICAgIGNvbnN0IGNvbXBvc2l0ZXMgPSBbXTsKICAgICAgd2hpbGUgKHRydWUpIHsKICAgICAgICBjb25zdCBbbiwgY29tcG9zaXRlXSA9IENvbXBvc2l0ZUdseXBoLnBhcnNlKHBvcywgZ2x5Zik7CiAgICAgICAgcG9zICs9IG47CiAgICAgICAgY29tcG9zaXRlcy5wdXNoKGNvbXBvc2l0ZSk7CiAgICAgICAgaWYgKCEoY29tcG9zaXRlLmZsYWdzICYgTU9SRV9DT01QT05FTlRTKSkgewogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBuZXcgR2x5cGgoewogICAgICAgIGhlYWRlciwKICAgICAgICBjb21wb3NpdGVzCiAgICAgIH0pOwogICAgfQogICAgY29uc3Qgc2ltcGxlID0gU2ltcGxlR2x5cGgucGFyc2UocG9zLCBnbHlmLCBoZWFkZXIubnVtYmVyT2ZDb250b3Vycyk7CiAgICByZXR1cm4gbmV3IEdseXBoKHsKICAgICAgaGVhZGVyLAogICAgICBzaW1wbGUKICAgIH0pOwogIH0KICBnZXRTaXplKCkgewogICAgaWYgKCF0aGlzLmhlYWRlcikgewogICAgICByZXR1cm4gMDsKICAgIH0KICAgIGNvbnN0IHNpemUgPSB0aGlzLnNpbXBsZSA/IHRoaXMuc2ltcGxlLmdldFNpemUoKSA6IE1hdGguc3VtUHJlY2lzZSh0aGlzLmNvbXBvc2l0ZXMubWFwKGMgPT4gYy5nZXRTaXplKCkpKTsKICAgIHJldHVybiB0aGlzLmhlYWRlci5nZXRTaXplKCkgKyBzaXplOwogIH0KICB3cml0ZShwb3MsIGJ1ZikgewogICAgaWYgKCF0aGlzLmhlYWRlcikgewogICAgICByZXR1cm4gMDsKICAgIH0KICAgIGNvbnN0IHNwb3MgPSBwb3M7CiAgICBwb3MgKz0gdGhpcy5oZWFkZXIud3JpdGUocG9zLCBidWYpOwogICAgaWYgKHRoaXMuc2ltcGxlKSB7CiAgICAgIHBvcyArPSB0aGlzLnNpbXBsZS53cml0ZShwb3MsIGJ1Zik7CiAgICB9IGVsc2UgewogICAgICBmb3IgKGNvbnN0IGNvbXBvc2l0ZSBvZiB0aGlzLmNvbXBvc2l0ZXMpIHsKICAgICAgICBwb3MgKz0gY29tcG9zaXRlLndyaXRlKHBvcywgYnVmKTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIHBvcyAtIHNwb3M7CiAgfQogIHNjYWxlKGZhY3RvcikgewogICAgaWYgKCF0aGlzLmhlYWRlcikgewogICAgICByZXR1cm47CiAgICB9CiAgICBjb25zdCB4TWlkZGxlID0gKHRoaXMuaGVhZGVyLnhNaW4gKyB0aGlzLmhlYWRlci54TWF4KSAvIDI7CiAgICB0aGlzLmhlYWRlci5zY2FsZSh4TWlkZGxlLCBmYWN0b3IpOwogICAgaWYgKHRoaXMuc2ltcGxlKSB7CiAgICAgIHRoaXMuc2ltcGxlLnNjYWxlKHhNaWRkbGUsIGZhY3Rvcik7CiAgICB9IGVsc2UgewogICAgICBmb3IgKGNvbnN0IGNvbXBvc2l0ZSBvZiB0aGlzLmNvbXBvc2l0ZXMpIHsKICAgICAgICBjb21wb3NpdGUuc2NhbGUoeE1pZGRsZSwgZmFjdG9yKTsKICAgICAgfQogICAgfQogIH0KfQpjbGFzcyBHbHlwaEhlYWRlciB7CiAgY29uc3RydWN0b3IoewogICAgbnVtYmVyT2ZDb250b3VycywKICAgIHhNaW4sCiAgICB5TWluLAogICAgeE1heCwKICAgIHlNYXgKICB9KSB7CiAgICB0aGlzLm51bWJlck9mQ29udG91cnMgPSBudW1iZXJPZkNvbnRvdXJzOwogICAgdGhpcy54TWluID0geE1pbjsKICAgIHRoaXMueU1pbiA9IHlNaW47CiAgICB0aGlzLnhNYXggPSB4TWF4OwogICAgdGhpcy55TWF4ID0geU1heDsKICB9CiAgc3RhdGljIHBhcnNlKHBvcywgZ2x5ZikgewogICAgcmV0dXJuIFsxMCwgbmV3IEdseXBoSGVhZGVyKHsKICAgICAgbnVtYmVyT2ZDb250b3VyczogZ2x5Zi5nZXRJbnQxNihwb3MpLAogICAgICB4TWluOiBnbHlmLmdldEludDE2KHBvcyArIDIpLAogICAgICB5TWluOiBnbHlmLmdldEludDE2KHBvcyArIDQpLAogICAgICB4TWF4OiBnbHlmLmdldEludDE2KHBvcyArIDYpLAogICAgICB5TWF4OiBnbHlmLmdldEludDE2KHBvcyArIDgpCiAgICB9KV07CiAgfQogIGdldFNpemUoKSB7CiAgICByZXR1cm4gMTA7CiAgfQogIHdyaXRlKHBvcywgYnVmKSB7CiAgICBidWYuc2V0SW50MTYocG9zLCB0aGlzLm51bWJlck9mQ29udG91cnMpOwogICAgYnVmLnNldEludDE2KHBvcyArIDIsIHRoaXMueE1pbik7CiAgICBidWYuc2V0SW50MTYocG9zICsgNCwgdGhpcy55TWluKTsKICAgIGJ1Zi5zZXRJbnQxNihwb3MgKyA2LCB0aGlzLnhNYXgpOwogICAgYnVmLnNldEludDE2KHBvcyArIDgsIHRoaXMueU1heCk7CiAgICByZXR1cm4gMTA7CiAgfQogIHNjYWxlKHgsIGZhY3RvcikgewogICAgdGhpcy54TWluID0gTWF0aC5yb3VuZCh4ICsgKHRoaXMueE1pbiAtIHgpICogZmFjdG9yKTsKICAgIHRoaXMueE1heCA9IE1hdGgucm91bmQoeCArICh0aGlzLnhNYXggLSB4KSAqIGZhY3Rvcik7CiAgfQp9CmNsYXNzIENvbnRvdXIgewogIGNvbnN0cnVjdG9yKHsKICAgIGZsYWdzLAogICAgeENvb3JkaW5hdGVzLAogICAgeUNvb3JkaW5hdGVzCiAgfSkgewogICAgdGhpcy54Q29vcmRpbmF0ZXMgPSB4Q29vcmRpbmF0ZXM7CiAgICB0aGlzLnlDb29yZGluYXRlcyA9IHlDb29yZGluYXRlczsKICAgIHRoaXMuZmxhZ3MgPSBmbGFnczsKICB9Cn0KY2xhc3MgU2ltcGxlR2x5cGggewogIGNvbnN0cnVjdG9yKHsKICAgIGNvbnRvdXJzLAogICAgaW5zdHJ1Y3Rpb25zCiAgfSkgewogICAgdGhpcy5jb250b3VycyA9IGNvbnRvdXJzOwogICAgdGhpcy5pbnN0cnVjdGlvbnMgPSBpbnN0cnVjdGlvbnM7CiAgfQogIHN0YXRpYyBwYXJzZShwb3MsIGdseWYsIG51bWJlck9mQ29udG91cnMpIHsKICAgIGNvbnN0IGVuZFB0c09mQ29udG91cnMgPSBbXTsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtYmVyT2ZDb250b3VyczsgaSsrKSB7CiAgICAgIGNvbnN0IGVuZFB0ID0gZ2x5Zi5nZXRVaW50MTYocG9zKTsKICAgICAgcG9zICs9IDI7CiAgICAgIGVuZFB0c09mQ29udG91cnMucHVzaChlbmRQdCk7CiAgICB9CiAgICBjb25zdCBudW1iZXJPZlB0ID0gZW5kUHRzT2ZDb250b3Vyc1tudW1iZXJPZkNvbnRvdXJzIC0gMV0gKyAxOwogICAgY29uc3QgaW5zdHJ1Y3Rpb25MZW5ndGggPSBnbHlmLmdldFVpbnQxNihwb3MpOwogICAgcG9zICs9IDI7CiAgICBjb25zdCBpbnN0cnVjdGlvbnMgPSBuZXcgVWludDhBcnJheShnbHlmKS5zbGljZShwb3MsIHBvcyArIGluc3RydWN0aW9uTGVuZ3RoKTsKICAgIHBvcyArPSBpbnN0cnVjdGlvbkxlbmd0aDsKICAgIGNvbnN0IGZsYWdzID0gW107CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bWJlck9mUHQ7IHBvcysrLCBpKyspIHsKICAgICAgbGV0IGZsYWcgPSBnbHlmLmdldFVpbnQ4KHBvcyk7CiAgICAgIGZsYWdzLnB1c2goZmxhZyk7CiAgICAgIGlmIChmbGFnICYgUkVQRUFUX0ZMQUcpIHsKICAgICAgICBjb25zdCBjb3VudCA9IGdseWYuZ2V0VWludDgoKytwb3MpOwogICAgICAgIGZsYWcgXj0gUkVQRUFUX0ZMQUc7CiAgICAgICAgZm9yIChsZXQgbSA9IDA7IG0gPCBjb3VudDsgbSsrKSB7CiAgICAgICAgICBmbGFncy5wdXNoKGZsYWcpOwogICAgICAgIH0KICAgICAgICBpICs9IGNvdW50OwogICAgICB9CiAgICB9CiAgICBjb25zdCBhbGxYQ29vcmRpbmF0ZXMgPSBbXTsKICAgIGxldCB4Q29vcmRpbmF0ZXMgPSBbXTsKICAgIGxldCB5Q29vcmRpbmF0ZXMgPSBbXTsKICAgIGxldCBwb2ludEZsYWdzID0gW107CiAgICBjb25zdCBjb250b3VycyA9IFtdOwogICAgbGV0IGVuZFB0c09mQ29udG91cnNJbmRleCA9IDA7CiAgICBsZXQgbGFzdENvb3JkaW5hdGUgPSAwOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1iZXJPZlB0OyBpKyspIHsKICAgICAgY29uc3QgZmxhZyA9IGZsYWdzW2ldOwogICAgICBpZiAoZmxhZyAmIFhfU0hPUlRfVkVDVE9SKSB7CiAgICAgICAgY29uc3QgeCA9IGdseWYuZ2V0VWludDgocG9zKyspOwogICAgICAgIGxhc3RDb29yZGluYXRlICs9IGZsYWcgJiBYX0lTX1NBTUVfT1JfUE9TSVRJVkVfWF9TSE9SVF9WRUNUT1IgPyB4IDogLXg7CiAgICAgICAgeENvb3JkaW5hdGVzLnB1c2gobGFzdENvb3JkaW5hdGUpOwogICAgICB9IGVsc2UgaWYgKGZsYWcgJiBYX0lTX1NBTUVfT1JfUE9TSVRJVkVfWF9TSE9SVF9WRUNUT1IpIHsKICAgICAgICB4Q29vcmRpbmF0ZXMucHVzaChsYXN0Q29vcmRpbmF0ZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgbGFzdENvb3JkaW5hdGUgKz0gZ2x5Zi5nZXRJbnQxNihwb3MpOwogICAgICAgIHBvcyArPSAyOwogICAgICAgIHhDb29yZGluYXRlcy5wdXNoKGxhc3RDb29yZGluYXRlKTsKICAgICAgfQogICAgICBpZiAoZW5kUHRzT2ZDb250b3Vyc1tlbmRQdHNPZkNvbnRvdXJzSW5kZXhdID09PSBpKSB7CiAgICAgICAgZW5kUHRzT2ZDb250b3Vyc0luZGV4Kys7CiAgICAgICAgYWxsWENvb3JkaW5hdGVzLnB1c2goeENvb3JkaW5hdGVzKTsKICAgICAgICB4Q29vcmRpbmF0ZXMgPSBbXTsKICAgICAgfQogICAgfQogICAgbGFzdENvb3JkaW5hdGUgPSAwOwogICAgZW5kUHRzT2ZDb250b3Vyc0luZGV4ID0gMDsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtYmVyT2ZQdDsgaSsrKSB7CiAgICAgIGNvbnN0IGZsYWcgPSBmbGFnc1tpXTsKICAgICAgaWYgKGZsYWcgJiBZX1NIT1JUX1ZFQ1RPUikgewogICAgICAgIGNvbnN0IHkgPSBnbHlmLmdldFVpbnQ4KHBvcysrKTsKICAgICAgICBsYXN0Q29vcmRpbmF0ZSArPSBmbGFnICYgWV9JU19TQU1FX09SX1BPU0lUSVZFX1lfU0hPUlRfVkVDVE9SID8geSA6IC15OwogICAgICAgIHlDb29yZGluYXRlcy5wdXNoKGxhc3RDb29yZGluYXRlKTsKICAgICAgfSBlbHNlIGlmIChmbGFnICYgWV9JU19TQU1FX09SX1BPU0lUSVZFX1lfU0hPUlRfVkVDVE9SKSB7CiAgICAgICAgeUNvb3JkaW5hdGVzLnB1c2gobGFzdENvb3JkaW5hdGUpOwogICAgICB9IGVsc2UgewogICAgICAgIGxhc3RDb29yZGluYXRlICs9IGdseWYuZ2V0SW50MTYocG9zKTsKICAgICAgICBwb3MgKz0gMjsKICAgICAgICB5Q29vcmRpbmF0ZXMucHVzaChsYXN0Q29vcmRpbmF0ZSk7CiAgICAgIH0KICAgICAgcG9pbnRGbGFncy5wdXNoKGZsYWcgJiBPTl9DVVJWRV9QT0lOVCB8IGZsYWcgJiBPVkVSTEFQX1NJTVBMRSk7CiAgICAgIGlmIChlbmRQdHNPZkNvbnRvdXJzW2VuZFB0c09mQ29udG91cnNJbmRleF0gPT09IGkpIHsKICAgICAgICB4Q29vcmRpbmF0ZXMgPSBhbGxYQ29vcmRpbmF0ZXNbZW5kUHRzT2ZDb250b3Vyc0luZGV4XTsKICAgICAgICBlbmRQdHNPZkNvbnRvdXJzSW5kZXgrKzsKICAgICAgICBjb250b3Vycy5wdXNoKG5ldyBDb250b3VyKHsKICAgICAgICAgIGZsYWdzOiBwb2ludEZsYWdzLAogICAgICAgICAgeENvb3JkaW5hdGVzLAogICAgICAgICAgeUNvb3JkaW5hdGVzCiAgICAgICAgfSkpOwogICAgICAgIHlDb29yZGluYXRlcyA9IFtdOwogICAgICAgIHBvaW50RmxhZ3MgPSBbXTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIG5ldyBTaW1wbGVHbHlwaCh7CiAgICAgIGNvbnRvdXJzLAogICAgICBpbnN0cnVjdGlvbnMKICAgIH0pOwogIH0KICBnZXRTaXplKCkgewogICAgbGV0IHNpemUgPSB0aGlzLmNvbnRvdXJzLmxlbmd0aCAqIDIgKyAyICsgdGhpcy5pbnN0cnVjdGlvbnMubGVuZ3RoOwogICAgbGV0IGxhc3RYID0gMDsKICAgIGxldCBsYXN0WSA9IDA7CiAgICBmb3IgKGNvbnN0IGNvbnRvdXIgb2YgdGhpcy5jb250b3VycykgewogICAgICBzaXplICs9IGNvbnRvdXIuZmxhZ3MubGVuZ3RoOwogICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBjb250b3VyLnhDb29yZGluYXRlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgICAgY29uc3QgeCA9IGNvbnRvdXIueENvb3JkaW5hdGVzW2ldOwogICAgICAgIGNvbnN0IHkgPSBjb250b3VyLnlDb29yZGluYXRlc1tpXTsKICAgICAgICBsZXQgYWJzID0gTWF0aC5hYnMoeCAtIGxhc3RYKTsKICAgICAgICBpZiAoYWJzID4gMjU1KSB7CiAgICAgICAgICBzaXplICs9IDI7CiAgICAgICAgfSBlbHNlIGlmIChhYnMgPiAwKSB7CiAgICAgICAgICBzaXplICs9IDE7CiAgICAgICAgfQogICAgICAgIGxhc3RYID0geDsKICAgICAgICBhYnMgPSBNYXRoLmFicyh5IC0gbGFzdFkpOwogICAgICAgIGlmIChhYnMgPiAyNTUpIHsKICAgICAgICAgIHNpemUgKz0gMjsKICAgICAgICB9IGVsc2UgaWYgKGFicyA+IDApIHsKICAgICAgICAgIHNpemUgKz0gMTsKICAgICAgICB9CiAgICAgICAgbGFzdFkgPSB5OwogICAgICB9CiAgICB9CiAgICByZXR1cm4gc2l6ZTsKICB9CiAgd3JpdGUocG9zLCBidWYpIHsKICAgIGNvbnN0IHNwb3MgPSBwb3M7CiAgICBjb25zdCB4Q29vcmRpbmF0ZXMgPSBbXTsKICAgIGNvbnN0IHlDb29yZGluYXRlcyA9IFtdOwogICAgY29uc3QgZmxhZ3MgPSBbXTsKICAgIGxldCBsYXN0WCA9IDA7CiAgICBsZXQgbGFzdFkgPSAwOwogICAgZm9yIChjb25zdCBjb250b3VyIG9mIHRoaXMuY29udG91cnMpIHsKICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gY29udG91ci54Q29vcmRpbmF0ZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgICAgIGxldCBmbGFnID0gY29udG91ci5mbGFnc1tpXTsKICAgICAgICBjb25zdCB4ID0gY29udG91ci54Q29vcmRpbmF0ZXNbaV07CiAgICAgICAgbGV0IGRlbHRhID0geCAtIGxhc3RYOwogICAgICAgIGlmIChkZWx0YSA9PT0gMCkgewogICAgICAgICAgZmxhZyB8PSBYX0lTX1NBTUVfT1JfUE9TSVRJVkVfWF9TSE9SVF9WRUNUT1I7CiAgICAgICAgICB4Q29vcmRpbmF0ZXMucHVzaCgwKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY29uc3QgYWJzID0gTWF0aC5hYnMoZGVsdGEpOwogICAgICAgICAgaWYgKGFicyA8PSAyNTUpIHsKICAgICAgICAgICAgZmxhZyB8PSBkZWx0YSA+PSAwID8gWF9TSE9SVF9WRUNUT1IgfCBYX0lTX1NBTUVfT1JfUE9TSVRJVkVfWF9TSE9SVF9WRUNUT1IgOiBYX1NIT1JUX1ZFQ1RPUjsKICAgICAgICAgICAgeENvb3JkaW5hdGVzLnB1c2goYWJzKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHhDb29yZGluYXRlcy5wdXNoKGRlbHRhKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgbGFzdFggPSB4OwogICAgICAgIGNvbnN0IHkgPSBjb250b3VyLnlDb29yZGluYXRlc1tpXTsKICAgICAgICBkZWx0YSA9IHkgLSBsYXN0WTsKICAgICAgICBpZiAoZGVsdGEgPT09IDApIHsKICAgICAgICAgIGZsYWcgfD0gWV9JU19TQU1FX09SX1BPU0lUSVZFX1lfU0hPUlRfVkVDVE9SOwogICAgICAgICAgeUNvb3JkaW5hdGVzLnB1c2goMCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNvbnN0IGFicyA9IE1hdGguYWJzKGRlbHRhKTsKICAgICAgICAgIGlmIChhYnMgPD0gMjU1KSB7CiAgICAgICAgICAgIGZsYWcgfD0gZGVsdGEgPj0gMCA/IFlfU0hPUlRfVkVDVE9SIHwgWV9JU19TQU1FX09SX1BPU0lUSVZFX1lfU0hPUlRfVkVDVE9SIDogWV9TSE9SVF9WRUNUT1I7CiAgICAgICAgICAgIHlDb29yZGluYXRlcy5wdXNoKGFicyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB5Q29vcmRpbmF0ZXMucHVzaChkZWx0YSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGxhc3RZID0geTsKICAgICAgICBmbGFncy5wdXNoKGZsYWcpOwogICAgICB9CiAgICAgIGJ1Zi5zZXRVaW50MTYocG9zLCB4Q29vcmRpbmF0ZXMubGVuZ3RoIC0gMSk7CiAgICAgIHBvcyArPSAyOwogICAgfQogICAgYnVmLnNldFVpbnQxNihwb3MsIHRoaXMuaW5zdHJ1Y3Rpb25zLmxlbmd0aCk7CiAgICBwb3MgKz0gMjsKICAgIGlmICh0aGlzLmluc3RydWN0aW9ucy5sZW5ndGgpIHsKICAgICAgbmV3IFVpbnQ4QXJyYXkoYnVmLmJ1ZmZlciwgMCwgYnVmLmJ1ZmZlci5ieXRlTGVuZ3RoKS5zZXQodGhpcy5pbnN0cnVjdGlvbnMsIHBvcyk7CiAgICAgIHBvcyArPSB0aGlzLmluc3RydWN0aW9ucy5sZW5ndGg7CiAgICB9CiAgICBmb3IgKGNvbnN0IGZsYWcgb2YgZmxhZ3MpIHsKICAgICAgYnVmLnNldFVpbnQ4KHBvcysrLCBmbGFnKTsKICAgIH0KICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IHhDb29yZGluYXRlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgIGNvbnN0IHggPSB4Q29vcmRpbmF0ZXNbaV07CiAgICAgIGNvbnN0IGZsYWcgPSBmbGFnc1tpXTsKICAgICAgaWYgKGZsYWcgJiBYX1NIT1JUX1ZFQ1RPUikgewogICAgICAgIGJ1Zi5zZXRVaW50OChwb3MrKywgeCk7CiAgICAgIH0gZWxzZSBpZiAoIShmbGFnICYgWF9JU19TQU1FX09SX1BPU0lUSVZFX1hfU0hPUlRfVkVDVE9SKSkgewogICAgICAgIGJ1Zi5zZXRJbnQxNihwb3MsIHgpOwogICAgICAgIHBvcyArPSAyOwogICAgICB9CiAgICB9CiAgICBmb3IgKGxldCBpID0gMCwgaWkgPSB5Q29vcmRpbmF0ZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgICBjb25zdCB5ID0geUNvb3JkaW5hdGVzW2ldOwogICAgICBjb25zdCBmbGFnID0gZmxhZ3NbaV07CiAgICAgIGlmIChmbGFnICYgWV9TSE9SVF9WRUNUT1IpIHsKICAgICAgICBidWYuc2V0VWludDgocG9zKyssIHkpOwogICAgICB9IGVsc2UgaWYgKCEoZmxhZyAmIFlfSVNfU0FNRV9PUl9QT1NJVElWRV9ZX1NIT1JUX1ZFQ1RPUikpIHsKICAgICAgICBidWYuc2V0SW50MTYocG9zLCB5KTsKICAgICAgICBwb3MgKz0gMjsKICAgICAgfQogICAgfQogICAgcmV0dXJuIHBvcyAtIHNwb3M7CiAgfQogIHNjYWxlKHgsIGZhY3RvcikgewogICAgZm9yIChjb25zdCBjb250b3VyIG9mIHRoaXMuY29udG91cnMpIHsKICAgICAgaWYgKGNvbnRvdXIueENvb3JkaW5hdGVzLmxlbmd0aCA9PT0gMCkgewogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGNvbnRvdXIueENvb3JkaW5hdGVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgICBjb250b3VyLnhDb29yZGluYXRlc1tpXSA9IE1hdGgucm91bmQoeCArIChjb250b3VyLnhDb29yZGluYXRlc1tpXSAtIHgpICogZmFjdG9yKTsKICAgICAgfQogICAgfQogIH0KfQpjbGFzcyBDb21wb3NpdGVHbHlwaCB7CiAgY29uc3RydWN0b3IoewogICAgZmxhZ3MsCiAgICBnbHlwaEluZGV4LAogICAgYXJndW1lbnQxLAogICAgYXJndW1lbnQyLAogICAgdHJhbnNmLAogICAgaW5zdHJ1Y3Rpb25zCiAgfSkgewogICAgdGhpcy5mbGFncyA9IGZsYWdzOwogICAgdGhpcy5nbHlwaEluZGV4ID0gZ2x5cGhJbmRleDsKICAgIHRoaXMuYXJndW1lbnQxID0gYXJndW1lbnQxOwogICAgdGhpcy5hcmd1bWVudDIgPSBhcmd1bWVudDI7CiAgICB0aGlzLnRyYW5zZiA9IHRyYW5zZjsKICAgIHRoaXMuaW5zdHJ1Y3Rpb25zID0gaW5zdHJ1Y3Rpb25zOwogIH0KICBzdGF0aWMgcGFyc2UocG9zLCBnbHlmKSB7CiAgICBjb25zdCBzcG9zID0gcG9zOwogICAgY29uc3QgdHJhbnNmID0gW107CiAgICBsZXQgZmxhZ3MgPSBnbHlmLmdldFVpbnQxNihwb3MpOwogICAgY29uc3QgZ2x5cGhJbmRleCA9IGdseWYuZ2V0VWludDE2KHBvcyArIDIpOwogICAgcG9zICs9IDQ7CiAgICBsZXQgYXJndW1lbnQxLCBhcmd1bWVudDI7CiAgICBpZiAoZmxhZ3MgJiBBUkdfMV9BTkRfMl9BUkVfV09SRFMpIHsKICAgICAgaWYgKGZsYWdzICYgQVJHU19BUkVfWFlfVkFMVUVTKSB7CiAgICAgICAgYXJndW1lbnQxID0gZ2x5Zi5nZXRJbnQxNihwb3MpOwogICAgICAgIGFyZ3VtZW50MiA9IGdseWYuZ2V0SW50MTYocG9zICsgMik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgYXJndW1lbnQxID0gZ2x5Zi5nZXRVaW50MTYocG9zKTsKICAgICAgICBhcmd1bWVudDIgPSBnbHlmLmdldFVpbnQxNihwb3MgKyAyKTsKICAgICAgfQogICAgICBwb3MgKz0gNDsKICAgICAgZmxhZ3MgXj0gQVJHXzFfQU5EXzJfQVJFX1dPUkRTOwogICAgfSBlbHNlIHsKICAgICAgaWYgKGZsYWdzICYgQVJHU19BUkVfWFlfVkFMVUVTKSB7CiAgICAgICAgYXJndW1lbnQxID0gZ2x5Zi5nZXRJbnQ4KHBvcyk7CiAgICAgICAgYXJndW1lbnQyID0gZ2x5Zi5nZXRJbnQ4KHBvcyArIDEpOwogICAgICB9IGVsc2UgewogICAgICAgIGFyZ3VtZW50MSA9IGdseWYuZ2V0VWludDgocG9zKTsKICAgICAgICBhcmd1bWVudDIgPSBnbHlmLmdldFVpbnQ4KHBvcyArIDEpOwogICAgICB9CiAgICAgIHBvcyArPSAyOwogICAgfQogICAgaWYgKGZsYWdzICYgV0VfSEFWRV9BX1NDQUxFKSB7CiAgICAgIHRyYW5zZi5wdXNoKGdseWYuZ2V0VWludDE2KHBvcykpOwogICAgICBwb3MgKz0gMjsKICAgIH0gZWxzZSBpZiAoZmxhZ3MgJiBXRV9IQVZFX0FOX1hfQU5EX1lfU0NBTEUpIHsKICAgICAgdHJhbnNmLnB1c2goZ2x5Zi5nZXRVaW50MTYocG9zKSwgZ2x5Zi5nZXRVaW50MTYocG9zICsgMikpOwogICAgICBwb3MgKz0gNDsKICAgIH0gZWxzZSBpZiAoZmxhZ3MgJiBXRV9IQVZFX0FfVFdPX0JZX1RXTykgewogICAgICB0cmFuc2YucHVzaChnbHlmLmdldFVpbnQxNihwb3MpLCBnbHlmLmdldFVpbnQxNihwb3MgKyAyKSwgZ2x5Zi5nZXRVaW50MTYocG9zICsgNCksIGdseWYuZ2V0VWludDE2KHBvcyArIDYpKTsKICAgICAgcG9zICs9IDg7CiAgICB9CiAgICBsZXQgaW5zdHJ1Y3Rpb25zID0gbnVsbDsKICAgIGlmIChmbGFncyAmIFdFX0hBVkVfSU5TVFJVQ1RJT05TKSB7CiAgICAgIGNvbnN0IGluc3RydWN0aW9uTGVuZ3RoID0gZ2x5Zi5nZXRVaW50MTYocG9zKTsKICAgICAgcG9zICs9IDI7CiAgICAgIGluc3RydWN0aW9ucyA9IG5ldyBVaW50OEFycmF5KGdseWYpLnNsaWNlKHBvcywgcG9zICsgaW5zdHJ1Y3Rpb25MZW5ndGgpOwogICAgICBwb3MgKz0gaW5zdHJ1Y3Rpb25MZW5ndGg7CiAgICB9CiAgICByZXR1cm4gW3BvcyAtIHNwb3MsIG5ldyBDb21wb3NpdGVHbHlwaCh7CiAgICAgIGZsYWdzLAogICAgICBnbHlwaEluZGV4LAogICAgICBhcmd1bWVudDEsCiAgICAgIGFyZ3VtZW50MiwKICAgICAgdHJhbnNmLAogICAgICBpbnN0cnVjdGlvbnMKICAgIH0pXTsKICB9CiAgZ2V0U2l6ZSgpIHsKICAgIGxldCBzaXplID0gMiArIDIgKyB0aGlzLnRyYW5zZi5sZW5ndGggKiAyOwogICAgaWYgKHRoaXMuZmxhZ3MgJiBXRV9IQVZFX0lOU1RSVUNUSU9OUykgewogICAgICBzaXplICs9IDIgKyB0aGlzLmluc3RydWN0aW9ucy5sZW5ndGg7CiAgICB9CiAgICBzaXplICs9IDI7CiAgICBpZiAodGhpcy5mbGFncyAmIDIpIHsKICAgICAgaWYgKCEodGhpcy5hcmd1bWVudDEgPj0gLTEyOCAmJiB0aGlzLmFyZ3VtZW50MSA8PSAxMjcgJiYgdGhpcy5hcmd1bWVudDIgPj0gLTEyOCAmJiB0aGlzLmFyZ3VtZW50MiA8PSAxMjcpKSB7CiAgICAgICAgc2l6ZSArPSAyOwogICAgICB9CiAgICB9IGVsc2UgaWYgKCEodGhpcy5hcmd1bWVudDEgPj0gMCAmJiB0aGlzLmFyZ3VtZW50MSA8PSAyNTUgJiYgdGhpcy5hcmd1bWVudDIgPj0gMCAmJiB0aGlzLmFyZ3VtZW50MiA8PSAyNTUpKSB7CiAgICAgIHNpemUgKz0gMjsKICAgIH0KICAgIHJldHVybiBzaXplOwogIH0KICB3cml0ZShwb3MsIGJ1ZikgewogICAgY29uc3Qgc3BvcyA9IHBvczsKICAgIGlmICh0aGlzLmZsYWdzICYgQVJHU19BUkVfWFlfVkFMVUVTKSB7CiAgICAgIGlmICghKHRoaXMuYXJndW1lbnQxID49IC0xMjggJiYgdGhpcy5hcmd1bWVudDEgPD0gMTI3ICYmIHRoaXMuYXJndW1lbnQyID49IC0xMjggJiYgdGhpcy5hcmd1bWVudDIgPD0gMTI3KSkgewogICAgICAgIHRoaXMuZmxhZ3MgfD0gQVJHXzFfQU5EXzJfQVJFX1dPUkRTOwogICAgICB9CiAgICB9IGVsc2UgaWYgKCEodGhpcy5hcmd1bWVudDEgPj0gMCAmJiB0aGlzLmFyZ3VtZW50MSA8PSAyNTUgJiYgdGhpcy5hcmd1bWVudDIgPj0gMCAmJiB0aGlzLmFyZ3VtZW50MiA8PSAyNTUpKSB7CiAgICAgIHRoaXMuZmxhZ3MgfD0gQVJHXzFfQU5EXzJfQVJFX1dPUkRTOwogICAgfQogICAgYnVmLnNldFVpbnQxNihwb3MsIHRoaXMuZmxhZ3MpOwogICAgYnVmLnNldFVpbnQxNihwb3MgKyAyLCB0aGlzLmdseXBoSW5kZXgpOwogICAgcG9zICs9IDQ7CiAgICBpZiAodGhpcy5mbGFncyAmIEFSR18xX0FORF8yX0FSRV9XT1JEUykgewogICAgICBpZiAodGhpcy5mbGFncyAmIEFSR1NfQVJFX1hZX1ZBTFVFUykgewogICAgICAgIGJ1Zi5zZXRJbnQxNihwb3MsIHRoaXMuYXJndW1lbnQxKTsKICAgICAgICBidWYuc2V0SW50MTYocG9zICsgMiwgdGhpcy5hcmd1bWVudDIpOwogICAgICB9IGVsc2UgewogICAgICAgIGJ1Zi5zZXRVaW50MTYocG9zLCB0aGlzLmFyZ3VtZW50MSk7CiAgICAgICAgYnVmLnNldFVpbnQxNihwb3MgKyAyLCB0aGlzLmFyZ3VtZW50Mik7CiAgICAgIH0KICAgICAgcG9zICs9IDQ7CiAgICB9IGVsc2UgewogICAgICBidWYuc2V0VWludDgocG9zLCB0aGlzLmFyZ3VtZW50MSk7CiAgICAgIGJ1Zi5zZXRVaW50OChwb3MgKyAxLCB0aGlzLmFyZ3VtZW50Mik7CiAgICAgIHBvcyArPSAyOwogICAgfQogICAgaWYgKHRoaXMuZmxhZ3MgJiBXRV9IQVZFX0lOU1RSVUNUSU9OUykgewogICAgICBidWYuc2V0VWludDE2KHBvcywgdGhpcy5pbnN0cnVjdGlvbnMubGVuZ3RoKTsKICAgICAgcG9zICs9IDI7CiAgICAgIGlmICh0aGlzLmluc3RydWN0aW9ucy5sZW5ndGgpIHsKICAgICAgICBuZXcgVWludDhBcnJheShidWYuYnVmZmVyLCAwLCBidWYuYnVmZmVyLmJ5dGVMZW5ndGgpLnNldCh0aGlzLmluc3RydWN0aW9ucywgcG9zKTsKICAgICAgICBwb3MgKz0gdGhpcy5pbnN0cnVjdGlvbnMubGVuZ3RoOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gcG9zIC0gc3BvczsKICB9CiAgc2NhbGUoeCwgZmFjdG9yKSB7fQp9Cgo7Ly8gLi9zcmMvY29yZS9vcGVudHlwZV9maWxlX2J1aWxkZXIuanMKCgoKCgoKCgoKCgpmdW5jdGlvbiB3cml0ZUludDE2KGRlc3QsIG9mZnNldCwgbnVtKSB7CiAgZGVzdFtvZmZzZXRdID0gbnVtID4+IDggJiAweGZmOwogIGRlc3Rbb2Zmc2V0ICsgMV0gPSBudW0gJiAweGZmOwp9CmZ1bmN0aW9uIHdyaXRlSW50MzIoZGVzdCwgb2Zmc2V0LCBudW0pIHsKICBkZXN0W29mZnNldF0gPSBudW0gPj4gMjQgJiAweGZmOwogIGRlc3Rbb2Zmc2V0ICsgMV0gPSBudW0gPj4gMTYgJiAweGZmOwogIGRlc3Rbb2Zmc2V0ICsgMl0gPSBudW0gPj4gOCAmIDB4ZmY7CiAgZGVzdFtvZmZzZXQgKyAzXSA9IG51bSAmIDB4ZmY7Cn0KZnVuY3Rpb24gd3JpdGVEYXRhKGRlc3QsIG9mZnNldCwgZGF0YSkgewogIGlmIChkYXRhIGluc3RhbmNlb2YgVWludDhBcnJheSkgewogICAgZGVzdC5zZXQoZGF0YSwgb2Zmc2V0KTsKICB9IGVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSAic3RyaW5nIikgewogICAgZm9yIChsZXQgaSA9IDAsIGlpID0gZGF0YS5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgIGRlc3Rbb2Zmc2V0KytdID0gZGF0YS5jaGFyQ29kZUF0KGkpICYgMHhmZjsKICAgIH0KICB9IGVsc2UgewogICAgZm9yIChjb25zdCBudW0gb2YgZGF0YSkgewogICAgICBkZXN0W29mZnNldCsrXSA9IG51bSAmIDB4ZmY7CiAgICB9CiAgfQp9CmNvbnN0IE9URl9IRUFERVJfU0laRSA9IDEyOwpjb25zdCBPVEZfVEFCTEVfRU5UUllfU0laRSA9IDE2OwpjbGFzcyBPcGVuVHlwZUZpbGVCdWlsZGVyIHsKICBjb25zdHJ1Y3RvcihzZm50KSB7CiAgICB0aGlzLnNmbnQgPSBzZm50OwogICAgdGhpcy50YWJsZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogIH0KICBzdGF0aWMgZ2V0U2VhcmNoUGFyYW1zKGVudHJpZXNDb3VudCwgZW50cnlTaXplKSB7CiAgICBsZXQgbWF4UG93ZXIyID0gMSwKICAgICAgbG9nMiA9IDA7CiAgICB3aGlsZSAoKG1heFBvd2VyMiBeIGVudHJpZXNDb3VudCkgPiBtYXhQb3dlcjIpIHsKICAgICAgbWF4UG93ZXIyIDw8PSAxOwogICAgICBsb2cyKys7CiAgICB9CiAgICBjb25zdCBzZWFyY2hSYW5nZSA9IG1heFBvd2VyMiAqIGVudHJ5U2l6ZTsKICAgIHJldHVybiB7CiAgICAgIHJhbmdlOiBzZWFyY2hSYW5nZSwKICAgICAgZW50cnk6IGxvZzIsCiAgICAgIHJhbmdlU2hpZnQ6IGVudHJ5U2l6ZSAqIGVudHJpZXNDb3VudCAtIHNlYXJjaFJhbmdlCiAgICB9OwogIH0KICB0b0FycmF5KCkgewogICAgbGV0IHNmbnQgPSB0aGlzLnNmbnQ7CiAgICBjb25zdCB0YWJsZXMgPSB0aGlzLnRhYmxlczsKICAgIGNvbnN0IHRhYmxlc05hbWVzID0gT2JqZWN0LmtleXModGFibGVzKTsKICAgIHRhYmxlc05hbWVzLnNvcnQoKTsKICAgIGNvbnN0IG51bVRhYmxlcyA9IHRhYmxlc05hbWVzLmxlbmd0aDsKICAgIGxldCBpLCBqLCBqaiwgdGFibGUsIHRhYmxlTmFtZTsKICAgIGxldCBvZmZzZXQgPSBPVEZfSEVBREVSX1NJWkUgKyBudW1UYWJsZXMgKiBPVEZfVEFCTEVfRU5UUllfU0laRTsKICAgIGNvbnN0IHRhYmxlT2Zmc2V0cyA9IFtvZmZzZXRdOwogICAgZm9yIChpID0gMDsgaSA8IG51bVRhYmxlczsgaSsrKSB7CiAgICAgIHRhYmxlID0gdGFibGVzW3RhYmxlc05hbWVzW2ldXTsKICAgICAgY29uc3QgcGFkZGVkTGVuZ3RoID0gKHRhYmxlLmxlbmd0aCArIDMgJiB+MykgPj4+IDA7CiAgICAgIG9mZnNldCArPSBwYWRkZWRMZW5ndGg7CiAgICAgIHRhYmxlT2Zmc2V0cy5wdXNoKG9mZnNldCk7CiAgICB9CiAgICBjb25zdCBmaWxlID0gbmV3IFVpbnQ4QXJyYXkob2Zmc2V0KTsKICAgIGZvciAoaSA9IDA7IGkgPCBudW1UYWJsZXM7IGkrKykgewogICAgICB0YWJsZSA9IHRhYmxlc1t0YWJsZXNOYW1lc1tpXV07CiAgICAgIHdyaXRlRGF0YShmaWxlLCB0YWJsZU9mZnNldHNbaV0sIHRhYmxlKTsKICAgIH0KICAgIGlmIChzZm50ID09PSAidHJ1ZSIpIHsKICAgICAgc2ZudCA9IHN0cmluZzMyKDB4MDAwMTAwMDApOwogICAgfQogICAgZmlsZVswXSA9IHNmbnQuY2hhckNvZGVBdCgwKSAmIDB4ZmY7CiAgICBmaWxlWzFdID0gc2ZudC5jaGFyQ29kZUF0KDEpICYgMHhmZjsKICAgIGZpbGVbMl0gPSBzZm50LmNoYXJDb2RlQXQoMikgJiAweGZmOwogICAgZmlsZVszXSA9IHNmbnQuY2hhckNvZGVBdCgzKSAmIDB4ZmY7CiAgICB3cml0ZUludDE2KGZpbGUsIDQsIG51bVRhYmxlcyk7CiAgICBjb25zdCBzZWFyY2hQYXJhbXMgPSBPcGVuVHlwZUZpbGVCdWlsZGVyLmdldFNlYXJjaFBhcmFtcyhudW1UYWJsZXMsIDE2KTsKICAgIHdyaXRlSW50MTYoZmlsZSwgNiwgc2VhcmNoUGFyYW1zLnJhbmdlKTsKICAgIHdyaXRlSW50MTYoZmlsZSwgOCwgc2VhcmNoUGFyYW1zLmVudHJ5KTsKICAgIHdyaXRlSW50MTYoZmlsZSwgMTAsIHNlYXJjaFBhcmFtcy5yYW5nZVNoaWZ0KTsKICAgIG9mZnNldCA9IE9URl9IRUFERVJfU0laRTsKICAgIGZvciAoaSA9IDA7IGkgPCBudW1UYWJsZXM7IGkrKykgewogICAgICB0YWJsZU5hbWUgPSB0YWJsZXNOYW1lc1tpXTsKICAgICAgZmlsZVtvZmZzZXRdID0gdGFibGVOYW1lLmNoYXJDb2RlQXQoMCkgJiAweGZmOwogICAgICBmaWxlW29mZnNldCArIDFdID0gdGFibGVOYW1lLmNoYXJDb2RlQXQoMSkgJiAweGZmOwogICAgICBmaWxlW29mZnNldCArIDJdID0gdGFibGVOYW1lLmNoYXJDb2RlQXQoMikgJiAweGZmOwogICAgICBmaWxlW29mZnNldCArIDNdID0gdGFibGVOYW1lLmNoYXJDb2RlQXQoMykgJiAweGZmOwogICAgICBsZXQgY2hlY2tzdW0gPSAwOwogICAgICBmb3IgKGogPSB0YWJsZU9mZnNldHNbaV0sIGpqID0gdGFibGVPZmZzZXRzW2kgKyAxXTsgaiA8IGpqOyBqICs9IDQpIHsKICAgICAgICBjb25zdCBxdWFkID0gcmVhZFVpbnQzMihmaWxlLCBqKTsKICAgICAgICBjaGVja3N1bSA9IGNoZWNrc3VtICsgcXVhZCA+Pj4gMDsKICAgICAgfQogICAgICB3cml0ZUludDMyKGZpbGUsIG9mZnNldCArIDQsIGNoZWNrc3VtKTsKICAgICAgd3JpdGVJbnQzMihmaWxlLCBvZmZzZXQgKyA4LCB0YWJsZU9mZnNldHNbaV0pOwogICAgICB3cml0ZUludDMyKGZpbGUsIG9mZnNldCArIDEyLCB0YWJsZXNbdGFibGVOYW1lXS5sZW5ndGgpOwogICAgICBvZmZzZXQgKz0gT1RGX1RBQkxFX0VOVFJZX1NJWkU7CiAgICB9CiAgICByZXR1cm4gZmlsZTsKICB9CiAgYWRkVGFibGUodGFnLCBkYXRhKSB7CiAgICBpZiAodGFnIGluIHRoaXMudGFibGVzKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcigiVGFibGUgIiArIHRhZyArICIgYWxyZWFkeSBleGlzdHMiKTsKICAgIH0KICAgIHRoaXMudGFibGVzW3RhZ10gPSBkYXRhOwogIH0KfQoKOy8vIC4vc3JjL2NvcmUvdHlwZTFfcGFyc2VyLmpzCgoKCgoKCgoKCgoKCgpjb25zdCBISU5USU5HX0VOQUJMRUQgPSBmYWxzZTsKY29uc3QgQ09NTUFORF9NQVAgPSB7CiAgaHN0ZW06IFsxXSwKICB2c3RlbTogWzNdLAogIHZtb3ZldG86IFs0XSwKICBybGluZXRvOiBbNV0sCiAgaGxpbmV0bzogWzZdLAogIHZsaW5ldG86IFs3XSwKICBycmN1cnZldG86IFs4XSwKICBjYWxsc3VicjogWzEwXSwKICBmbGV4OiBbMTIsIDM1XSwKICBkcm9wOiBbMTIsIDE4XSwKICBlbmRjaGFyOiBbMTRdLAogIHJtb3ZldG86IFsyMV0sCiAgaG1vdmV0bzogWzIyXSwKICB2aGN1cnZldG86IFszMF0sCiAgaHZjdXJ2ZXRvOiBbMzFdCn07CmNsYXNzIFR5cGUxQ2hhclN0cmluZyB7CiAgY29uc3RydWN0b3IoKSB7CiAgICB0aGlzLndpZHRoID0gMDsKICAgIHRoaXMubHNiID0gMDsKICAgIHRoaXMuZmxleGluZyA9IGZhbHNlOwogICAgdGhpcy5vdXRwdXQgPSBbXTsKICAgIHRoaXMuc3RhY2sgPSBbXTsKICB9CiAgY29udmVydChlbmNvZGVkLCBzdWJycywgc2VhY0FuYWx5c2lzRW5hYmxlZCkgewogICAgY29uc3QgY291bnQgPSBlbmNvZGVkLmxlbmd0aDsKICAgIGxldCBlcnJvciA9IGZhbHNlOwogICAgbGV0IHd4LCBzYngsIHN1YnJOdW1iZXI7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHsKICAgICAgbGV0IHZhbHVlID0gZW5jb2RlZFtpXTsKICAgICAgaWYgKHZhbHVlIDwgMzIpIHsKICAgICAgICBpZiAodmFsdWUgPT09IDEyKSB7CiAgICAgICAgICB2YWx1ZSA9ICh2YWx1ZSA8PCA4KSArIGVuY29kZWRbKytpXTsKICAgICAgICB9CiAgICAgICAgc3dpdGNoICh2YWx1ZSkgewogICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICBpZiAoIUhJTlRJTkdfRU5BQkxFRCkgewogICAgICAgICAgICAgIHRoaXMuc3RhY2sgPSBbXTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICBlcnJvciA9IHRoaXMuZXhlY3V0ZUNvbW1hbmQoMiwgQ09NTUFORF9NQVAuaHN0ZW0pOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgaWYgKCFISU5USU5HX0VOQUJMRUQpIHsKICAgICAgICAgICAgICB0aGlzLnN0YWNrID0gW107CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZXJyb3IgPSB0aGlzLmV4ZWN1dGVDb21tYW5kKDIsIENPTU1BTkRfTUFQLnZzdGVtKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgIGlmICh0aGlzLmZsZXhpbmcpIHsKICAgICAgICAgICAgICBpZiAodGhpcy5zdGFjay5sZW5ndGggPCAxKSB7CiAgICAgICAgICAgICAgICBlcnJvciA9IHRydWU7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgY29uc3QgZHkgPSB0aGlzLnN0YWNrLnBvcCgpOwogICAgICAgICAgICAgIHRoaXMuc3RhY2sucHVzaCgwLCBkeSk7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZXJyb3IgPSB0aGlzLmV4ZWN1dGVDb21tYW5kKDEsIENPTU1BTkRfTUFQLnZtb3ZldG8pOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgZXJyb3IgPSB0aGlzLmV4ZWN1dGVDb21tYW5kKDIsIENPTU1BTkRfTUFQLnJsaW5ldG8pOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgZXJyb3IgPSB0aGlzLmV4ZWN1dGVDb21tYW5kKDEsIENPTU1BTkRfTUFQLmhsaW5ldG8pOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgZXJyb3IgPSB0aGlzLmV4ZWN1dGVDb21tYW5kKDEsIENPTU1BTkRfTUFQLnZsaW5ldG8pOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgZXJyb3IgPSB0aGlzLmV4ZWN1dGVDb21tYW5kKDYsIENPTU1BTkRfTUFQLnJyY3VydmV0byk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICB0aGlzLnN0YWNrID0gW107CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgaWYgKHRoaXMuc3RhY2subGVuZ3RoIDwgMSkgewogICAgICAgICAgICAgIGVycm9yID0gdHJ1ZTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICBzdWJyTnVtYmVyID0gdGhpcy5zdGFjay5wb3AoKTsKICAgICAgICAgICAgaWYgKCFzdWJyc1tzdWJyTnVtYmVyXSkgewogICAgICAgICAgICAgIGVycm9yID0gdHJ1ZTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICBlcnJvciA9IHRoaXMuY29udmVydChzdWJyc1tzdWJyTnVtYmVyXSwgc3VicnMsIHNlYWNBbmFseXNpc0VuYWJsZWQpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgIHJldHVybiBlcnJvcjsKICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgIGlmICh0aGlzLnN0YWNrLmxlbmd0aCA8IDIpIHsKICAgICAgICAgICAgICBlcnJvciA9IHRydWU7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgd3ggPSB0aGlzLnN0YWNrLnBvcCgpOwogICAgICAgICAgICBzYnggPSB0aGlzLnN0YWNrLnBvcCgpOwogICAgICAgICAgICB0aGlzLmxzYiA9IHNieDsKICAgICAgICAgICAgdGhpcy53aWR0aCA9IHd4OwogICAgICAgICAgICB0aGlzLnN0YWNrLnB1c2god3gsIHNieCk7CiAgICAgICAgICAgIGVycm9yID0gdGhpcy5leGVjdXRlQ29tbWFuZCgyLCBDT01NQU5EX01BUC5obW92ZXRvKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlIDE0OgogICAgICAgICAgICB0aGlzLm91dHB1dC5wdXNoKENPTU1BTkRfTUFQLmVuZGNoYXJbMF0pOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgMjE6CiAgICAgICAgICAgIGlmICh0aGlzLmZsZXhpbmcpIHsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICBlcnJvciA9IHRoaXMuZXhlY3V0ZUNvbW1hbmQoMiwgQ09NTUFORF9NQVAucm1vdmV0byk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSAyMjoKICAgICAgICAgICAgaWYgKHRoaXMuZmxleGluZykgewogICAgICAgICAgICAgIHRoaXMuc3RhY2sucHVzaCgwKTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICBlcnJvciA9IHRoaXMuZXhlY3V0ZUNvbW1hbmQoMSwgQ09NTUFORF9NQVAuaG1vdmV0byk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSAzMDoKICAgICAgICAgICAgZXJyb3IgPSB0aGlzLmV4ZWN1dGVDb21tYW5kKDQsIENPTU1BTkRfTUFQLnZoY3VydmV0byk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSAzMToKICAgICAgICAgICAgZXJyb3IgPSB0aGlzLmV4ZWN1dGVDb21tYW5kKDQsIENPTU1BTkRfTUFQLmh2Y3VydmV0byk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSAoMTIgPDwgOCkgKyAwOgogICAgICAgICAgICB0aGlzLnN0YWNrID0gW107CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSAoMTIgPDwgOCkgKyAxOgogICAgICAgICAgICBpZiAoIUhJTlRJTkdfRU5BQkxFRCkgewogICAgICAgICAgICAgIHRoaXMuc3RhY2sgPSBbXTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICBlcnJvciA9IHRoaXMuZXhlY3V0ZUNvbW1hbmQoMiwgQ09NTUFORF9NQVAudnN0ZW0pOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgKDEyIDw8IDgpICsgMjoKICAgICAgICAgICAgaWYgKCFISU5USU5HX0VOQUJMRUQpIHsKICAgICAgICAgICAgICB0aGlzLnN0YWNrID0gW107CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZXJyb3IgPSB0aGlzLmV4ZWN1dGVDb21tYW5kKDIsIENPTU1BTkRfTUFQLmhzdGVtKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlICgxMiA8PCA4KSArIDY6CiAgICAgICAgICAgIGlmIChzZWFjQW5hbHlzaXNFbmFibGVkKSB7CiAgICAgICAgICAgICAgY29uc3QgYXNiID0gdGhpcy5zdGFjay5hdCgtNSk7CiAgICAgICAgICAgICAgdGhpcy5zZWFjID0gdGhpcy5zdGFjay5zcGxpY2UoLTQsIDQpOwogICAgICAgICAgICAgIHRoaXMuc2VhY1swXSArPSB0aGlzLmxzYiAtIGFzYjsKICAgICAgICAgICAgICBlcnJvciA9IHRoaXMuZXhlY3V0ZUNvbW1hbmQoMCwgQ09NTUFORF9NQVAuZW5kY2hhcik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgZXJyb3IgPSB0aGlzLmV4ZWN1dGVDb21tYW5kKDQsIENPTU1BTkRfTUFQLmVuZGNoYXIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSAoMTIgPDwgOCkgKyA3OgogICAgICAgICAgICBpZiAodGhpcy5zdGFjay5sZW5ndGggPCA0KSB7CiAgICAgICAgICAgICAgZXJyb3IgPSB0cnVlOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuc3RhY2sucG9wKCk7CiAgICAgICAgICAgIHd4ID0gdGhpcy5zdGFjay5wb3AoKTsKICAgICAgICAgICAgY29uc3Qgc2J5ID0gdGhpcy5zdGFjay5wb3AoKTsKICAgICAgICAgICAgc2J4ID0gdGhpcy5zdGFjay5wb3AoKTsKICAgICAgICAgICAgdGhpcy5sc2IgPSBzYng7CiAgICAgICAgICAgIHRoaXMud2lkdGggPSB3eDsKICAgICAgICAgICAgdGhpcy5zdGFjay5wdXNoKHd4LCBzYngsIHNieSk7CiAgICAgICAgICAgIGVycm9yID0gdGhpcy5leGVjdXRlQ29tbWFuZCgzLCBDT01NQU5EX01BUC5ybW92ZXRvKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlICgxMiA8PCA4KSArIDEyOgogICAgICAgICAgICBpZiAodGhpcy5zdGFjay5sZW5ndGggPCAyKSB7CiAgICAgICAgICAgICAgZXJyb3IgPSB0cnVlOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IG51bTIgPSB0aGlzLnN0YWNrLnBvcCgpOwogICAgICAgICAgICBjb25zdCBudW0xID0gdGhpcy5zdGFjay5wb3AoKTsKICAgICAgICAgICAgdGhpcy5zdGFjay5wdXNoKG51bTEgLyBudW0yKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlICgxMiA8PCA4KSArIDE2OgogICAgICAgICAgICBpZiAodGhpcy5zdGFjay5sZW5ndGggPCAyKSB7CiAgICAgICAgICAgICAgZXJyb3IgPSB0cnVlOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHN1YnJOdW1iZXIgPSB0aGlzLnN0YWNrLnBvcCgpOwogICAgICAgICAgICBjb25zdCBudW1BcmdzID0gdGhpcy5zdGFjay5wb3AoKTsKICAgICAgICAgICAgaWYgKHN1YnJOdW1iZXIgPT09IDAgJiYgbnVtQXJncyA9PT0gMykgewogICAgICAgICAgICAgIGNvbnN0IGZsZXhBcmdzID0gdGhpcy5zdGFjay5zcGxpY2UoLTE3LCAxNyk7CiAgICAgICAgICAgICAgdGhpcy5zdGFjay5wdXNoKGZsZXhBcmdzWzJdICsgZmxleEFyZ3NbMF0sIGZsZXhBcmdzWzNdICsgZmxleEFyZ3NbMV0sIGZsZXhBcmdzWzRdLCBmbGV4QXJnc1s1XSwgZmxleEFyZ3NbNl0sIGZsZXhBcmdzWzddLCBmbGV4QXJnc1s4XSwgZmxleEFyZ3NbOV0sIGZsZXhBcmdzWzEwXSwgZmxleEFyZ3NbMTFdLCBmbGV4QXJnc1sxMl0sIGZsZXhBcmdzWzEzXSwgZmxleEFyZ3NbMTRdKTsKICAgICAgICAgICAgICBlcnJvciA9IHRoaXMuZXhlY3V0ZUNvbW1hbmQoMTMsIENPTU1BTkRfTUFQLmZsZXgsIHRydWUpOwogICAgICAgICAgICAgIHRoaXMuZmxleGluZyA9IGZhbHNlOwogICAgICAgICAgICAgIHRoaXMuc3RhY2sucHVzaChmbGV4QXJnc1sxNV0sIGZsZXhBcmdzWzE2XSk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3Vick51bWJlciA9PT0gMSAmJiBudW1BcmdzID09PSAwKSB7CiAgICAgICAgICAgICAgdGhpcy5mbGV4aW5nID0gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgKDEyIDw8IDgpICsgMTc6CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSAoMTIgPDwgOCkgKyAzMzoKICAgICAgICAgICAgdGhpcy5zdGFjayA9IFtdOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgIHdhcm4oJ1Vua25vd24gdHlwZSAxIGNoYXJzdHJpbmcgY29tbWFuZCBvZiAiJyArIHZhbHVlICsgJyInKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICAgIGlmIChlcnJvcikgewogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICAgIGNvbnRpbnVlOwogICAgICB9IGVsc2UgaWYgKHZhbHVlIDw9IDI0NikgewogICAgICAgIHZhbHVlIC09IDEzOTsKICAgICAgfSBlbHNlIGlmICh2YWx1ZSA8PSAyNTApIHsKICAgICAgICB2YWx1ZSA9ICh2YWx1ZSAtIDI0NykgKiAyNTYgKyBlbmNvZGVkWysraV0gKyAxMDg7CiAgICAgIH0gZWxzZSBpZiAodmFsdWUgPD0gMjU0KSB7CiAgICAgICAgdmFsdWUgPSAtKCh2YWx1ZSAtIDI1MSkgKiAyNTYpIC0gZW5jb2RlZFsrK2ldIC0gMTA4OwogICAgICB9IGVsc2UgewogICAgICAgIHZhbHVlID0gKGVuY29kZWRbKytpXSAmIDB4ZmYpIDw8IDI0IHwgKGVuY29kZWRbKytpXSAmIDB4ZmYpIDw8IDE2IHwgKGVuY29kZWRbKytpXSAmIDB4ZmYpIDw8IDggfCAoZW5jb2RlZFsrK2ldICYgMHhmZikgPDwgMDsKICAgICAgfQogICAgICB0aGlzLnN0YWNrLnB1c2godmFsdWUpOwogICAgfQogICAgcmV0dXJuIGVycm9yOwogIH0KICBleGVjdXRlQ29tbWFuZChob3dNYW55QXJncywgY29tbWFuZCwga2VlcFN0YWNrKSB7CiAgICBjb25zdCBzdGFja0xlbmd0aCA9IHRoaXMuc3RhY2subGVuZ3RoOwogICAgaWYgKGhvd01hbnlBcmdzID4gc3RhY2tMZW5ndGgpIHsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICBjb25zdCBzdGFydCA9IHN0YWNrTGVuZ3RoIC0gaG93TWFueUFyZ3M7CiAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBzdGFja0xlbmd0aDsgaSsrKSB7CiAgICAgIGxldCB2YWx1ZSA9IHRoaXMuc3RhY2tbaV07CiAgICAgIGlmIChOdW1iZXIuaXNJbnRlZ2VyKHZhbHVlKSkgewogICAgICAgIHRoaXMub3V0cHV0LnB1c2goMjgsIHZhbHVlID4+IDggJiAweGZmLCB2YWx1ZSAmIDB4ZmYpOwogICAgICB9IGVsc2UgewogICAgICAgIHZhbHVlID0gNjU1MzYgKiB2YWx1ZSB8IDA7CiAgICAgICAgdGhpcy5vdXRwdXQucHVzaCgyNTUsIHZhbHVlID4+IDI0ICYgMHhmZiwgdmFsdWUgPj4gMTYgJiAweGZmLCB2YWx1ZSA+PiA4ICYgMHhmZiwgdmFsdWUgJiAweGZmKTsKICAgICAgfQogICAgfQogICAgdGhpcy5vdXRwdXQucHVzaCguLi5jb21tYW5kKTsKICAgIGlmIChrZWVwU3RhY2spIHsKICAgICAgdGhpcy5zdGFjay5zcGxpY2Uoc3RhcnQsIGhvd01hbnlBcmdzKTsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMuc3RhY2subGVuZ3RoID0gMDsKICAgIH0KICAgIHJldHVybiBmYWxzZTsKICB9Cn0KY29uc3QgRUVYRUNfRU5DUllQVF9LRVkgPSA1NTY2NTsKY29uc3QgQ0hBUl9TVFJTX0VOQ1JZUFRfS0VZID0gNDMzMDsKZnVuY3Rpb24gaXNIZXhEaWdpdChjb2RlKSB7CiAgcmV0dXJuIGNvZGUgPj0gNDggJiYgY29kZSA8PSA1NyB8fCBjb2RlID49IDY1ICYmIGNvZGUgPD0gNzAgfHwgY29kZSA+PSA5NyAmJiBjb2RlIDw9IDEwMjsKfQpmdW5jdGlvbiBkZWNyeXB0KGRhdGEsIGtleSwgZGlzY2FyZE51bWJlcikgewogIGlmIChkaXNjYXJkTnVtYmVyID49IGRhdGEubGVuZ3RoKSB7CiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoMCk7CiAgfQogIGNvbnN0IGMxID0gNTI4NDUsCiAgICBjMiA9IDIyNzE5OwogIGxldCByID0ga2V5IHwgMCwKICAgIGksCiAgICBqOwogIGZvciAoaSA9IDA7IGkgPCBkaXNjYXJkTnVtYmVyOyBpKyspIHsKICAgIHIgPSAoZGF0YVtpXSArIHIpICogYzEgKyBjMiAmICgxIDw8IDE2KSAtIDE7CiAgfQogIGNvbnN0IGNvdW50ID0gZGF0YS5sZW5ndGggLSBkaXNjYXJkTnVtYmVyOwogIGNvbnN0IGRlY3J5cHRlZCA9IG5ldyBVaW50OEFycmF5KGNvdW50KTsKICBmb3IgKGkgPSBkaXNjYXJkTnVtYmVyLCBqID0gMDsgaiA8IGNvdW50OyBpKyssIGorKykgewogICAgY29uc3QgdmFsdWUgPSBkYXRhW2ldOwogICAgZGVjcnlwdGVkW2pdID0gdmFsdWUgXiByID4+IDg7CiAgICByID0gKHZhbHVlICsgcikgKiBjMSArIGMyICYgKDEgPDwgMTYpIC0gMTsKICB9CiAgcmV0dXJuIGRlY3J5cHRlZDsKfQpmdW5jdGlvbiBkZWNyeXB0QXNjaWkoZGF0YSwga2V5LCBkaXNjYXJkTnVtYmVyKSB7CiAgY29uc3QgYzEgPSA1Mjg0NSwKICAgIGMyID0gMjI3MTk7CiAgbGV0IHIgPSBrZXkgfCAwOwogIGNvbnN0IGNvdW50ID0gZGF0YS5sZW5ndGgsCiAgICBtYXliZUxlbmd0aCA9IGNvdW50ID4+PiAxOwogIGNvbnN0IGRlY3J5cHRlZCA9IG5ldyBVaW50OEFycmF5KG1heWJlTGVuZ3RoKTsKICBsZXQgaSwgajsKICBmb3IgKGkgPSAwLCBqID0gMDsgaSA8IGNvdW50OyBpKyspIHsKICAgIGNvbnN0IGRpZ2l0MSA9IGRhdGFbaV07CiAgICBpZiAoIWlzSGV4RGlnaXQoZGlnaXQxKSkgewogICAgICBjb250aW51ZTsKICAgIH0KICAgIGkrKzsKICAgIGxldCBkaWdpdDI7CiAgICB3aGlsZSAoaSA8IGNvdW50ICYmICFpc0hleERpZ2l0KGRpZ2l0MiA9IGRhdGFbaV0pKSB7CiAgICAgIGkrKzsKICAgIH0KICAgIGlmIChpIDwgY291bnQpIHsKICAgICAgY29uc3QgdmFsdWUgPSBwYXJzZUludChTdHJpbmcuZnJvbUNoYXJDb2RlKGRpZ2l0MSwgZGlnaXQyKSwgMTYpOwogICAgICBkZWNyeXB0ZWRbaisrXSA9IHZhbHVlIF4gciA+PiA4OwogICAgICByID0gKHZhbHVlICsgcikgKiBjMSArIGMyICYgKDEgPDwgMTYpIC0gMTsKICAgIH0KICB9CiAgcmV0dXJuIGRlY3J5cHRlZC5zbGljZShkaXNjYXJkTnVtYmVyLCBqKTsKfQpmdW5jdGlvbiBpc1NwZWNpYWwoYykgewogIHJldHVybiBjID09PSAweDJmIHx8IGMgPT09IDB4NWIgfHwgYyA9PT0gMHg1ZCB8fCBjID09PSAweDdiIHx8IGMgPT09IDB4N2QgfHwgYyA9PT0gMHgyOCB8fCBjID09PSAweDI5Owp9CmNsYXNzIFR5cGUxUGFyc2VyIHsKICBjb25zdHJ1Y3RvcihzdHJlYW0sIGVuY3J5cHRlZCwgc2VhY0FuYWx5c2lzRW5hYmxlZCkgewogICAgaWYgKGVuY3J5cHRlZCkgewogICAgICBjb25zdCBkYXRhID0gc3RyZWFtLmdldEJ5dGVzKCk7CiAgICAgIGNvbnN0IGlzQmluYXJ5ID0gISgoaXNIZXhEaWdpdChkYXRhWzBdKSB8fCBpc1doaXRlU3BhY2UoZGF0YVswXSkpICYmIGlzSGV4RGlnaXQoZGF0YVsxXSkgJiYgaXNIZXhEaWdpdChkYXRhWzJdKSAmJiBpc0hleERpZ2l0KGRhdGFbM10pICYmIGlzSGV4RGlnaXQoZGF0YVs0XSkgJiYgaXNIZXhEaWdpdChkYXRhWzVdKSAmJiBpc0hleERpZ2l0KGRhdGFbNl0pICYmIGlzSGV4RGlnaXQoZGF0YVs3XSkpOwogICAgICBzdHJlYW0gPSBuZXcgU3RyZWFtKGlzQmluYXJ5ID8gZGVjcnlwdChkYXRhLCBFRVhFQ19FTkNSWVBUX0tFWSwgNCkgOiBkZWNyeXB0QXNjaWkoZGF0YSwgRUVYRUNfRU5DUllQVF9LRVksIDQpKTsKICAgIH0KICAgIHRoaXMuc2VhY0FuYWx5c2lzRW5hYmxlZCA9ICEhc2VhY0FuYWx5c2lzRW5hYmxlZDsKICAgIHRoaXMuc3RyZWFtID0gc3RyZWFtOwogICAgdGhpcy5uZXh0Q2hhcigpOwogIH0KICByZWFkTnVtYmVyQXJyYXkoKSB7CiAgICB0aGlzLmdldFRva2VuKCk7CiAgICBjb25zdCBhcnJheSA9IFtdOwogICAgd2hpbGUgKHRydWUpIHsKICAgICAgY29uc3QgdG9rZW4gPSB0aGlzLmdldFRva2VuKCk7CiAgICAgIGlmICh0b2tlbiA9PT0gbnVsbCB8fCB0b2tlbiA9PT0gIl0iIHx8IHRva2VuID09PSAifSIpIHsKICAgICAgICBicmVhazsKICAgICAgfQogICAgICBhcnJheS5wdXNoKHBhcnNlRmxvYXQodG9rZW4gfHwgMCkpOwogICAgfQogICAgcmV0dXJuIGFycmF5OwogIH0KICByZWFkTnVtYmVyKCkgewogICAgY29uc3QgdG9rZW4gPSB0aGlzLmdldFRva2VuKCk7CiAgICByZXR1cm4gcGFyc2VGbG9hdCh0b2tlbiB8fCAwKTsKICB9CiAgcmVhZEludCgpIHsKICAgIGNvbnN0IHRva2VuID0gdGhpcy5nZXRUb2tlbigpOwogICAgcmV0dXJuIHBhcnNlSW50KHRva2VuIHx8IDAsIDEwKSB8IDA7CiAgfQogIHJlYWRCb29sZWFuKCkgewogICAgY29uc3QgdG9rZW4gPSB0aGlzLmdldFRva2VuKCk7CiAgICByZXR1cm4gdG9rZW4gPT09ICJ0cnVlIiA/IDEgOiAwOwogIH0KICBuZXh0Q2hhcigpIHsKICAgIHJldHVybiB0aGlzLmN1cnJlbnRDaGFyID0gdGhpcy5zdHJlYW0uZ2V0Qnl0ZSgpOwogIH0KICBwcmV2Q2hhcigpIHsKICAgIHRoaXMuc3RyZWFtLnNraXAoLTIpOwogICAgcmV0dXJuIHRoaXMuY3VycmVudENoYXIgPSB0aGlzLnN0cmVhbS5nZXRCeXRlKCk7CiAgfQogIGdldFRva2VuKCkgewogICAgbGV0IGNvbW1lbnQgPSBmYWxzZTsKICAgIGxldCBjaCA9IHRoaXMuY3VycmVudENoYXI7CiAgICB3aGlsZSAodHJ1ZSkgewogICAgICBpZiAoY2ggPT09IC0xKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgICAgaWYgKGNvbW1lbnQpIHsKICAgICAgICBpZiAoY2ggPT09IDB4MGEgfHwgY2ggPT09IDB4MGQpIHsKICAgICAgICAgIGNvbW1lbnQgPSBmYWxzZTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAoY2ggPT09IDB4MjUpIHsKICAgICAgICBjb21tZW50ID0gdHJ1ZTsKICAgICAgfSBlbHNlIGlmICghaXNXaGl0ZVNwYWNlKGNoKSkgewogICAgICAgIGJyZWFrOwogICAgICB9CiAgICAgIGNoID0gdGhpcy5uZXh0Q2hhcigpOwogICAgfQogICAgaWYgKGlzU3BlY2lhbChjaCkpIHsKICAgICAgdGhpcy5uZXh0Q2hhcigpOwogICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjaCk7CiAgICB9CiAgICBsZXQgdG9rZW4gPSAiIjsKICAgIGRvIHsKICAgICAgdG9rZW4gKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjaCk7CiAgICAgIGNoID0gdGhpcy5uZXh0Q2hhcigpOwogICAgfSB3aGlsZSAoY2ggPj0gMCAmJiAhaXNXaGl0ZVNwYWNlKGNoKSAmJiAhaXNTcGVjaWFsKGNoKSk7CiAgICByZXR1cm4gdG9rZW47CiAgfQogIHJlYWRDaGFyU3RyaW5ncyhieXRlcywgbGVuSVYpIHsKICAgIGlmIChsZW5JViA9PT0gLTEpIHsKICAgICAgcmV0dXJuIGJ5dGVzOwogICAgfQogICAgcmV0dXJuIGRlY3J5cHQoYnl0ZXMsIENIQVJfU1RSU19FTkNSWVBUX0tFWSwgbGVuSVYpOwogIH0KICBleHRyYWN0Rm9udFByb2dyYW0ocHJvcGVydGllcykgewogICAgY29uc3Qgc3RyZWFtID0gdGhpcy5zdHJlYW07CiAgICBjb25zdCBzdWJycyA9IFtdLAogICAgICBjaGFyc3RyaW5ncyA9IFtdOwogICAgY29uc3QgcHJpdmF0ZURhdGEgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgcHJpdmF0ZURhdGEubGVuSVYgPSA0OwogICAgY29uc3QgcHJvZ3JhbSA9IHsKICAgICAgc3VicnM6IFtdLAogICAgICBjaGFyc3RyaW5nczogW10sCiAgICAgIHByb3BlcnRpZXM6IHsKICAgICAgICBwcml2YXRlRGF0YQogICAgICB9CiAgICB9OwogICAgbGV0IHRva2VuLCBsZW5ndGgsIGRhdGEsIGxlbklWOwogICAgd2hpbGUgKCh0b2tlbiA9IHRoaXMuZ2V0VG9rZW4oKSkgIT09IG51bGwpIHsKICAgICAgaWYgKHRva2VuICE9PSAiLyIpIHsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICB0b2tlbiA9IHRoaXMuZ2V0VG9rZW4oKTsKICAgICAgc3dpdGNoICh0b2tlbikgewogICAgICAgIGNhc2UgIkNoYXJTdHJpbmdzIjoKICAgICAgICAgIHRoaXMuZ2V0VG9rZW4oKTsKICAgICAgICAgIHRoaXMuZ2V0VG9rZW4oKTsKICAgICAgICAgIHRoaXMuZ2V0VG9rZW4oKTsKICAgICAgICAgIHRoaXMuZ2V0VG9rZW4oKTsKICAgICAgICAgIHdoaWxlICh0cnVlKSB7CiAgICAgICAgICAgIHRva2VuID0gdGhpcy5nZXRUb2tlbigpOwogICAgICAgICAgICBpZiAodG9rZW4gPT09IG51bGwgfHwgdG9rZW4gPT09ICJlbmQiKSB7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHRva2VuICE9PSAiLyIpIHsKICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjb25zdCBnbHlwaCA9IHRoaXMuZ2V0VG9rZW4oKTsKICAgICAgICAgICAgbGVuZ3RoID0gdGhpcy5yZWFkSW50KCk7CiAgICAgICAgICAgIHRoaXMuZ2V0VG9rZW4oKTsKICAgICAgICAgICAgZGF0YSA9IGxlbmd0aCA+IDAgPyBzdHJlYW0uZ2V0Qnl0ZXMobGVuZ3RoKSA6IG5ldyBVaW50OEFycmF5KDApOwogICAgICAgICAgICBsZW5JViA9IHByb2dyYW0ucHJvcGVydGllcy5wcml2YXRlRGF0YS5sZW5JVjsKICAgICAgICAgICAgY29uc3QgZW5jb2RlZCA9IHRoaXMucmVhZENoYXJTdHJpbmdzKGRhdGEsIGxlbklWKTsKICAgICAgICAgICAgdGhpcy5uZXh0Q2hhcigpOwogICAgICAgICAgICB0b2tlbiA9IHRoaXMuZ2V0VG9rZW4oKTsKICAgICAgICAgICAgaWYgKHRva2VuID09PSAibm9hY2Nlc3MiKSB7CiAgICAgICAgICAgICAgdGhpcy5nZXRUb2tlbigpOwogICAgICAgICAgICB9IGVsc2UgaWYgKHRva2VuID09PSAiLyIpIHsKICAgICAgICAgICAgICB0aGlzLnByZXZDaGFyKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2hhcnN0cmluZ3MucHVzaCh7CiAgICAgICAgICAgICAgZ2x5cGgsCiAgICAgICAgICAgICAgZW5jb2RlZAogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgIlN1YnJzIjoKICAgICAgICAgIHRoaXMucmVhZEludCgpOwogICAgICAgICAgdGhpcy5nZXRUb2tlbigpOwogICAgICAgICAgd2hpbGUgKHRoaXMuZ2V0VG9rZW4oKSA9PT0gImR1cCIpIHsKICAgICAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLnJlYWRJbnQoKTsKICAgICAgICAgICAgbGVuZ3RoID0gdGhpcy5yZWFkSW50KCk7CiAgICAgICAgICAgIHRoaXMuZ2V0VG9rZW4oKTsKICAgICAgICAgICAgZGF0YSA9IGxlbmd0aCA+IDAgPyBzdHJlYW0uZ2V0Qnl0ZXMobGVuZ3RoKSA6IG5ldyBVaW50OEFycmF5KDApOwogICAgICAgICAgICBsZW5JViA9IHByb2dyYW0ucHJvcGVydGllcy5wcml2YXRlRGF0YS5sZW5JVjsKICAgICAgICAgICAgY29uc3QgZW5jb2RlZCA9IHRoaXMucmVhZENoYXJTdHJpbmdzKGRhdGEsIGxlbklWKTsKICAgICAgICAgICAgdGhpcy5uZXh0Q2hhcigpOwogICAgICAgICAgICB0b2tlbiA9IHRoaXMuZ2V0VG9rZW4oKTsKICAgICAgICAgICAgaWYgKHRva2VuID09PSAibm9hY2Nlc3MiKSB7CiAgICAgICAgICAgICAgdGhpcy5nZXRUb2tlbigpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHN1YnJzW2luZGV4XSA9IGVuY29kZWQ7CiAgICAgICAgICB9CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJCbHVlVmFsdWVzIjoKICAgICAgICBjYXNlICJPdGhlckJsdWVzIjoKICAgICAgICBjYXNlICJGYW1pbHlCbHVlcyI6CiAgICAgICAgY2FzZSAiRmFtaWx5T3RoZXJCbHVlcyI6CiAgICAgICAgICBjb25zdCBibHVlQXJyYXkgPSB0aGlzLnJlYWROdW1iZXJBcnJheSgpOwogICAgICAgICAgaWYgKGJsdWVBcnJheS5sZW5ndGggPiAwICYmIGJsdWVBcnJheS5sZW5ndGggJSAyID09PSAwICYmIEhJTlRJTkdfRU5BQkxFRCkgewogICAgICAgICAgICBwcm9ncmFtLnByb3BlcnRpZXMucHJpdmF0ZURhdGFbdG9rZW5dID0gYmx1ZUFycmF5OwogICAgICAgICAgfQogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAiU3RlbVNuYXBIIjoKICAgICAgICBjYXNlICJTdGVtU25hcFYiOgogICAgICAgICAgcHJvZ3JhbS5wcm9wZXJ0aWVzLnByaXZhdGVEYXRhW3Rva2VuXSA9IHRoaXMucmVhZE51bWJlckFycmF5KCk7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJTdGRIVyI6CiAgICAgICAgY2FzZSAiU3RkVlciOgogICAgICAgICAgcHJvZ3JhbS5wcm9wZXJ0aWVzLnByaXZhdGVEYXRhW3Rva2VuXSA9IHRoaXMucmVhZE51bWJlckFycmF5KClbMF07CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJCbHVlU2hpZnQiOgogICAgICAgIGNhc2UgImxlbklWIjoKICAgICAgICBjYXNlICJCbHVlRnV6eiI6CiAgICAgICAgY2FzZSAiQmx1ZVNjYWxlIjoKICAgICAgICBjYXNlICJMYW5ndWFnZUdyb3VwIjoKICAgICAgICAgIHByb2dyYW0ucHJvcGVydGllcy5wcml2YXRlRGF0YVt0b2tlbl0gPSB0aGlzLnJlYWROdW1iZXIoKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgIkV4cGFuc2lvbkZhY3RvciI6CiAgICAgICAgICBwcm9ncmFtLnByb3BlcnRpZXMucHJpdmF0ZURhdGFbdG9rZW5dID0gdGhpcy5yZWFkTnVtYmVyKCkgfHwgMC4wNjsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgIkZvcmNlQm9sZCI6CiAgICAgICAgICBwcm9ncmFtLnByb3BlcnRpZXMucHJpdmF0ZURhdGFbdG9rZW5dID0gdGhpcy5yZWFkQm9vbGVhbigpOwogICAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KICAgIGZvciAoY29uc3QgewogICAgICBlbmNvZGVkLAogICAgICBnbHlwaAogICAgfSBvZiBjaGFyc3RyaW5ncykgewogICAgICBjb25zdCBjaGFyU3RyaW5nID0gbmV3IFR5cGUxQ2hhclN0cmluZygpOwogICAgICBjb25zdCBlcnJvciA9IGNoYXJTdHJpbmcuY29udmVydChlbmNvZGVkLCBzdWJycywgdGhpcy5zZWFjQW5hbHlzaXNFbmFibGVkKTsKICAgICAgbGV0IG91dHB1dCA9IGNoYXJTdHJpbmcub3V0cHV0OwogICAgICBpZiAoZXJyb3IpIHsKICAgICAgICBvdXRwdXQgPSBbMTRdOwogICAgICB9CiAgICAgIGNvbnN0IGNoYXJTdHJpbmdPYmplY3QgPSB7CiAgICAgICAgZ2x5cGhOYW1lOiBnbHlwaCwKICAgICAgICBjaGFyc3RyaW5nOiBvdXRwdXQsCiAgICAgICAgd2lkdGg6IGNoYXJTdHJpbmcud2lkdGgsCiAgICAgICAgbHNiOiBjaGFyU3RyaW5nLmxzYiwKICAgICAgICBzZWFjOiBjaGFyU3RyaW5nLnNlYWMKICAgICAgfTsKICAgICAgaWYgKGdseXBoID09PSAiLm5vdGRlZiIpIHsKICAgICAgICBwcm9ncmFtLmNoYXJzdHJpbmdzLnVuc2hpZnQoY2hhclN0cmluZ09iamVjdCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcHJvZ3JhbS5jaGFyc3RyaW5ncy5wdXNoKGNoYXJTdHJpbmdPYmplY3QpOwogICAgICB9CiAgICAgIGlmIChwcm9wZXJ0aWVzLmJ1aWx0SW5FbmNvZGluZykgewogICAgICAgIGNvbnN0IGluZGV4ID0gcHJvcGVydGllcy5idWlsdEluRW5jb2RpbmcuaW5kZXhPZihnbHlwaCk7CiAgICAgICAgaWYgKGluZGV4ID4gLTEgJiYgcHJvcGVydGllcy53aWR0aHNbaW5kZXhdID09PSB1bmRlZmluZWQgJiYgaW5kZXggPj0gcHJvcGVydGllcy5maXJzdENoYXIgJiYgaW5kZXggPD0gcHJvcGVydGllcy5sYXN0Q2hhcikgewogICAgICAgICAgcHJvcGVydGllcy53aWR0aHNbaW5kZXhdID0gY2hhclN0cmluZy53aWR0aDsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBwcm9ncmFtOwogIH0KICBleHRyYWN0Rm9udEhlYWRlcihwcm9wZXJ0aWVzKSB7CiAgICBsZXQgdG9rZW47CiAgICB3aGlsZSAoKHRva2VuID0gdGhpcy5nZXRUb2tlbigpKSAhPT0gbnVsbCkgewogICAgICBpZiAodG9rZW4gIT09ICIvIikgewogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIHRva2VuID0gdGhpcy5nZXRUb2tlbigpOwogICAgICBzd2l0Y2ggKHRva2VuKSB7CiAgICAgICAgY2FzZSAiRm9udE1hdHJpeCI6CiAgICAgICAgICBjb25zdCBtYXRyaXggPSB0aGlzLnJlYWROdW1iZXJBcnJheSgpOwogICAgICAgICAgcHJvcGVydGllcy5mb250TWF0cml4ID0gbWF0cml4OwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAiRW5jb2RpbmciOgogICAgICAgICAgY29uc3QgZW5jb2RpbmdBcmcgPSB0aGlzLmdldFRva2VuKCk7CiAgICAgICAgICBsZXQgZW5jb2Rpbmc7CiAgICAgICAgICBpZiAoIS9eXGQrJC8udGVzdChlbmNvZGluZ0FyZykpIHsKICAgICAgICAgICAgZW5jb2RpbmcgPSBnZXRFbmNvZGluZyhlbmNvZGluZ0FyZyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBlbmNvZGluZyA9IFtdOwogICAgICAgICAgICBjb25zdCBzaXplID0gcGFyc2VJbnQoZW5jb2RpbmdBcmcsIDEwKSB8IDA7CiAgICAgICAgICAgIHRoaXMuZ2V0VG9rZW4oKTsKICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzaXplOyBqKyspIHsKICAgICAgICAgICAgICB0b2tlbiA9IHRoaXMuZ2V0VG9rZW4oKTsKICAgICAgICAgICAgICB3aGlsZSAodG9rZW4gIT09ICJkdXAiICYmIHRva2VuICE9PSAiZGVmIikgewogICAgICAgICAgICAgICAgdG9rZW4gPSB0aGlzLmdldFRva2VuKCk7CiAgICAgICAgICAgICAgICBpZiAodG9rZW4gPT09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAodG9rZW4gPT09ICJkZWYiKSB7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLnJlYWRJbnQoKTsKICAgICAgICAgICAgICB0aGlzLmdldFRva2VuKCk7CiAgICAgICAgICAgICAgY29uc3QgZ2x5cGggPSB0aGlzLmdldFRva2VuKCk7CiAgICAgICAgICAgICAgZW5jb2RpbmdbaW5kZXhdID0gZ2x5cGg7CiAgICAgICAgICAgICAgdGhpcy5nZXRUb2tlbigpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBwcm9wZXJ0aWVzLmJ1aWx0SW5FbmNvZGluZyA9IGVuY29kaW5nOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAiRm9udEJCb3giOgogICAgICAgICAgY29uc3QgZm9udEJCb3ggPSB0aGlzLnJlYWROdW1iZXJBcnJheSgpOwogICAgICAgICAgcHJvcGVydGllcy5hc2NlbnQgPSBNYXRoLm1heChmb250QkJveFszXSwgZm9udEJCb3hbMV0pOwogICAgICAgICAgcHJvcGVydGllcy5kZXNjZW50ID0gTWF0aC5taW4oZm9udEJCb3hbMV0sIGZvbnRCQm94WzNdKTsKICAgICAgICAgIHByb3BlcnRpZXMuYXNjZW50U2NhbGVkID0gdHJ1ZTsKICAgICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CiAgfQp9Cgo7Ly8gLi9zcmMvY29yZS90eXBlMV9mb250LmpzCgoKCgoKCgpmdW5jdGlvbiBmaW5kQmxvY2soc3RyZWFtQnl0ZXMsIHNpZ25hdHVyZSwgc3RhcnRJbmRleCkgewogIGNvbnN0IHN0cmVhbUJ5dGVzTGVuZ3RoID0gc3RyZWFtQnl0ZXMubGVuZ3RoOwogIGNvbnN0IHNpZ25hdHVyZUxlbmd0aCA9IHNpZ25hdHVyZS5sZW5ndGg7CiAgY29uc3Qgc2Nhbkxlbmd0aCA9IHN0cmVhbUJ5dGVzTGVuZ3RoIC0gc2lnbmF0dXJlTGVuZ3RoOwogIGxldCBpID0gc3RhcnRJbmRleCwKICAgIGZvdW5kID0gZmFsc2U7CiAgd2hpbGUgKGkgPCBzY2FuTGVuZ3RoKSB7CiAgICBsZXQgaiA9IDA7CiAgICB3aGlsZSAoaiA8IHNpZ25hdHVyZUxlbmd0aCAmJiBzdHJlYW1CeXRlc1tpICsgal0gPT09IHNpZ25hdHVyZVtqXSkgewogICAgICBqKys7CiAgICB9CiAgICBpZiAoaiA+PSBzaWduYXR1cmVMZW5ndGgpIHsKICAgICAgaSArPSBqOwogICAgICB3aGlsZSAoaSA8IHN0cmVhbUJ5dGVzTGVuZ3RoICYmIGlzV2hpdGVTcGFjZShzdHJlYW1CeXRlc1tpXSkpIHsKICAgICAgICBpKys7CiAgICAgIH0KICAgICAgZm91bmQgPSB0cnVlOwogICAgICBicmVhazsKICAgIH0KICAgIGkrKzsKICB9CiAgcmV0dXJuIHsKICAgIGZvdW5kLAogICAgbGVuZ3RoOiBpCiAgfTsKfQpmdW5jdGlvbiBnZXRIZWFkZXJCbG9jayhzdHJlYW0sIHN1Z2dlc3RlZExlbmd0aCkgewogIGNvbnN0IEVFWEVDX1NJR05BVFVSRSA9IFsweDY1LCAweDY1LCAweDc4LCAweDY1LCAweDYzXTsKICBjb25zdCBzdHJlYW1TdGFydFBvcyA9IHN0cmVhbS5wb3M7CiAgbGV0IGhlYWRlckJ5dGVzLCBoZWFkZXJCeXRlc0xlbmd0aCwgYmxvY2s7CiAgdHJ5IHsKICAgIGhlYWRlckJ5dGVzID0gc3RyZWFtLmdldEJ5dGVzKHN1Z2dlc3RlZExlbmd0aCk7CiAgICBoZWFkZXJCeXRlc0xlbmd0aCA9IGhlYWRlckJ5dGVzLmxlbmd0aDsKICB9IGNhdGNoIHt9CiAgaWYgKGhlYWRlckJ5dGVzTGVuZ3RoID09PSBzdWdnZXN0ZWRMZW5ndGgpIHsKICAgIGJsb2NrID0gZmluZEJsb2NrKGhlYWRlckJ5dGVzLCBFRVhFQ19TSUdOQVRVUkUsIHN1Z2dlc3RlZExlbmd0aCAtIDIgKiBFRVhFQ19TSUdOQVRVUkUubGVuZ3RoKTsKICAgIGlmIChibG9jay5mb3VuZCAmJiBibG9jay5sZW5ndGggPT09IHN1Z2dlc3RlZExlbmd0aCkgewogICAgICByZXR1cm4gewogICAgICAgIHN0cmVhbTogbmV3IFN0cmVhbShoZWFkZXJCeXRlcyksCiAgICAgICAgbGVuZ3RoOiBzdWdnZXN0ZWRMZW5ndGgKICAgICAgfTsKICAgIH0KICB9CiAgd2FybignSW52YWxpZCAiTGVuZ3RoMSIgcHJvcGVydHkgaW4gVHlwZTEgZm9udCAtLSB0cnlpbmcgdG8gcmVjb3Zlci4nKTsKICBzdHJlYW0ucG9zID0gc3RyZWFtU3RhcnRQb3M7CiAgY29uc3QgU0NBTl9CTE9DS19MRU5HVEggPSAyMDQ4OwogIGxldCBhY3R1YWxMZW5ndGg7CiAgd2hpbGUgKHRydWUpIHsKICAgIGNvbnN0IHNjYW5CeXRlcyA9IHN0cmVhbS5wZWVrQnl0ZXMoU0NBTl9CTE9DS19MRU5HVEgpOwogICAgYmxvY2sgPSBmaW5kQmxvY2soc2NhbkJ5dGVzLCBFRVhFQ19TSUdOQVRVUkUsIDApOwogICAgaWYgKGJsb2NrLmxlbmd0aCA9PT0gMCkgewogICAgICBicmVhazsKICAgIH0KICAgIHN0cmVhbS5wb3MgKz0gYmxvY2subGVuZ3RoOwogICAgaWYgKGJsb2NrLmZvdW5kKSB7CiAgICAgIGFjdHVhbExlbmd0aCA9IHN0cmVhbS5wb3MgLSBzdHJlYW1TdGFydFBvczsKICAgICAgYnJlYWs7CiAgICB9CiAgfQogIHN0cmVhbS5wb3MgPSBzdHJlYW1TdGFydFBvczsKICBpZiAoYWN0dWFsTGVuZ3RoKSB7CiAgICByZXR1cm4gewogICAgICBzdHJlYW06IG5ldyBTdHJlYW0oc3RyZWFtLmdldEJ5dGVzKGFjdHVhbExlbmd0aCkpLAogICAgICBsZW5ndGg6IGFjdHVhbExlbmd0aAogICAgfTsKICB9CiAgd2FybignVW5hYmxlIHRvIHJlY292ZXIgIkxlbmd0aDEiIHByb3BlcnR5IGluIFR5cGUxIGZvbnQgLS0gdXNpbmcgYXMgaXMuJyk7CiAgcmV0dXJuIHsKICAgIHN0cmVhbTogbmV3IFN0cmVhbShzdHJlYW0uZ2V0Qnl0ZXMoc3VnZ2VzdGVkTGVuZ3RoKSksCiAgICBsZW5ndGg6IHN1Z2dlc3RlZExlbmd0aAogIH07Cn0KZnVuY3Rpb24gZ2V0RWV4ZWNCbG9jayhzdHJlYW0sIHN1Z2dlc3RlZExlbmd0aCkgewogIGNvbnN0IGVleGVjQnl0ZXMgPSBzdHJlYW0uZ2V0Qnl0ZXMoKTsKICBpZiAoZWV4ZWNCeXRlcy5sZW5ndGggPT09IDApIHsKICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigiZ2V0RWV4ZWNCbG9jayAtIG5vIGZvbnQgcHJvZ3JhbSBmb3VuZC4iKTsKICB9CiAgcmV0dXJuIHsKICAgIHN0cmVhbTogbmV3IFN0cmVhbShlZXhlY0J5dGVzKSwKICAgIGxlbmd0aDogZWV4ZWNCeXRlcy5sZW5ndGgKICB9Owp9CmNsYXNzIFR5cGUxRm9udCB7CiAgY29uc3RydWN0b3IobmFtZSwgZmlsZSwgcHJvcGVydGllcykgewogICAgY29uc3QgUEZCX0hFQURFUl9TSVpFID0gNjsKICAgIGxldCBoZWFkZXJCbG9ja0xlbmd0aCA9IHByb3BlcnRpZXMubGVuZ3RoMTsKICAgIGxldCBlZXhlY0Jsb2NrTGVuZ3RoID0gcHJvcGVydGllcy5sZW5ndGgyOwogICAgbGV0IHBmYkhlYWRlciA9IGZpbGUucGVla0J5dGVzKFBGQl9IRUFERVJfU0laRSk7CiAgICBjb25zdCBwZmJIZWFkZXJQcmVzZW50ID0gcGZiSGVhZGVyWzBdID09PSAweDgwICYmIHBmYkhlYWRlclsxXSA9PT0gMHgwMTsKICAgIGlmIChwZmJIZWFkZXJQcmVzZW50KSB7CiAgICAgIGZpbGUuc2tpcChQRkJfSEVBREVSX1NJWkUpOwogICAgICBoZWFkZXJCbG9ja0xlbmd0aCA9IHBmYkhlYWRlcls1XSA8PCAyNCB8IHBmYkhlYWRlcls0XSA8PCAxNiB8IHBmYkhlYWRlclszXSA8PCA4IHwgcGZiSGVhZGVyWzJdOwogICAgfQogICAgY29uc3QgaGVhZGVyQmxvY2sgPSBnZXRIZWFkZXJCbG9jayhmaWxlLCBoZWFkZXJCbG9ja0xlbmd0aCk7CiAgICBjb25zdCBoZWFkZXJCbG9ja1BhcnNlciA9IG5ldyBUeXBlMVBhcnNlcihoZWFkZXJCbG9jay5zdHJlYW0sIGZhbHNlLCBTRUFDX0FOQUxZU0lTX0VOQUJMRUQpOwogICAgaGVhZGVyQmxvY2tQYXJzZXIuZXh0cmFjdEZvbnRIZWFkZXIocHJvcGVydGllcyk7CiAgICBpZiAocGZiSGVhZGVyUHJlc2VudCkgewogICAgICBwZmJIZWFkZXIgPSBmaWxlLmdldEJ5dGVzKFBGQl9IRUFERVJfU0laRSk7CiAgICAgIGVleGVjQmxvY2tMZW5ndGggPSBwZmJIZWFkZXJbNV0gPDwgMjQgfCBwZmJIZWFkZXJbNF0gPDwgMTYgfCBwZmJIZWFkZXJbM10gPDwgOCB8IHBmYkhlYWRlclsyXTsKICAgIH0KICAgIGNvbnN0IGVleGVjQmxvY2sgPSBnZXRFZXhlY0Jsb2NrKGZpbGUsIGVleGVjQmxvY2tMZW5ndGgpOwogICAgY29uc3QgZWV4ZWNCbG9ja1BhcnNlciA9IG5ldyBUeXBlMVBhcnNlcihlZXhlY0Jsb2NrLnN0cmVhbSwgdHJ1ZSwgU0VBQ19BTkFMWVNJU19FTkFCTEVEKTsKICAgIGNvbnN0IGRhdGEgPSBlZXhlY0Jsb2NrUGFyc2VyLmV4dHJhY3RGb250UHJvZ3JhbShwcm9wZXJ0aWVzKTsKICAgIGZvciAoY29uc3Qga2V5IGluIGRhdGEucHJvcGVydGllcykgewogICAgICBwcm9wZXJ0aWVzW2tleV0gPSBkYXRhLnByb3BlcnRpZXNba2V5XTsKICAgIH0KICAgIGNvbnN0IGNoYXJzdHJpbmdzID0gZGF0YS5jaGFyc3RyaW5nczsKICAgIGNvbnN0IHR5cGUyQ2hhcnN0cmluZ3MgPSB0aGlzLmdldFR5cGUyQ2hhcnN0cmluZ3MoY2hhcnN0cmluZ3MpOwogICAgY29uc3Qgc3VicnMgPSB0aGlzLmdldFR5cGUyU3VicnMoZGF0YS5zdWJycyk7CiAgICB0aGlzLmNoYXJzdHJpbmdzID0gY2hhcnN0cmluZ3M7CiAgICB0aGlzLmRhdGEgPSB0aGlzLndyYXAobmFtZSwgdHlwZTJDaGFyc3RyaW5ncywgdGhpcy5jaGFyc3RyaW5ncywgc3VicnMsIHByb3BlcnRpZXMpOwogICAgdGhpcy5zZWFjcyA9IHRoaXMuZ2V0U2VhY3MoZGF0YS5jaGFyc3RyaW5ncyk7CiAgfQogIGdldCBudW1HbHlwaHMoKSB7CiAgICByZXR1cm4gdGhpcy5jaGFyc3RyaW5ncy5sZW5ndGggKyAxOwogIH0KICBnZXRDaGFyc2V0KCkgewogICAgY29uc3QgY2hhcnNldCA9IFsiLm5vdGRlZiJdOwogICAgZm9yIChjb25zdCB7CiAgICAgIGdseXBoTmFtZQogICAgfSBvZiB0aGlzLmNoYXJzdHJpbmdzKSB7CiAgICAgIGNoYXJzZXQucHVzaChnbHlwaE5hbWUpOwogICAgfQogICAgcmV0dXJuIGNoYXJzZXQ7CiAgfQogIGdldEdseXBoTWFwcGluZyhwcm9wZXJ0aWVzKSB7CiAgICBjb25zdCBjaGFyc3RyaW5ncyA9IHRoaXMuY2hhcnN0cmluZ3M7CiAgICBpZiAocHJvcGVydGllcy5jb21wb3NpdGUpIHsKICAgICAgY29uc3QgY2hhckNvZGVUb0dseXBoSWQgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgICBmb3IgKGxldCBnbHlwaElkID0gMCwgY2hhcnN0cmluZ3NMZW4gPSBjaGFyc3RyaW5ncy5sZW5ndGg7IGdseXBoSWQgPCBjaGFyc3RyaW5nc0xlbjsgZ2x5cGhJZCsrKSB7CiAgICAgICAgY29uc3QgY2hhckNvZGUgPSBwcm9wZXJ0aWVzLmNNYXAuY2hhckNvZGVPZihnbHlwaElkKTsKICAgICAgICBjaGFyQ29kZVRvR2x5cGhJZFtjaGFyQ29kZV0gPSBnbHlwaElkICsgMTsKICAgICAgfQogICAgICByZXR1cm4gY2hhckNvZGVUb0dseXBoSWQ7CiAgICB9CiAgICBjb25zdCBnbHlwaE5hbWVzID0gWyIubm90ZGVmIl07CiAgICBsZXQgYnVpbHRJbkVuY29kaW5nLCBnbHlwaElkOwogICAgZm9yIChnbHlwaElkID0gMDsgZ2x5cGhJZCA8IGNoYXJzdHJpbmdzLmxlbmd0aDsgZ2x5cGhJZCsrKSB7CiAgICAgIGdseXBoTmFtZXMucHVzaChjaGFyc3RyaW5nc1tnbHlwaElkXS5nbHlwaE5hbWUpOwogICAgfQogICAgY29uc3QgZW5jb2RpbmcgPSBwcm9wZXJ0aWVzLmJ1aWx0SW5FbmNvZGluZzsKICAgIGlmIChlbmNvZGluZykgewogICAgICBidWlsdEluRW5jb2RpbmcgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgICBmb3IgKGNvbnN0IGNoYXJDb2RlIGluIGVuY29kaW5nKSB7CiAgICAgICAgZ2x5cGhJZCA9IGdseXBoTmFtZXMuaW5kZXhPZihlbmNvZGluZ1tjaGFyQ29kZV0pOwogICAgICAgIGlmIChnbHlwaElkID49IDApIHsKICAgICAgICAgIGJ1aWx0SW5FbmNvZGluZ1tjaGFyQ29kZV0gPSBnbHlwaElkOwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgcmV0dXJuIHR5cGUxRm9udEdseXBoTWFwcGluZyhwcm9wZXJ0aWVzLCBidWlsdEluRW5jb2RpbmcsIGdseXBoTmFtZXMpOwogIH0KICBoYXNHbHlwaElkKGlkKSB7CiAgICBpZiAoaWQgPCAwIHx8IGlkID49IHRoaXMubnVtR2x5cGhzKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICAgIGlmIChpZCA9PT0gMCkgewogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIGNvbnN0IGdseXBoID0gdGhpcy5jaGFyc3RyaW5nc1tpZCAtIDFdOwogICAgcmV0dXJuIGdseXBoLmNoYXJzdHJpbmcubGVuZ3RoID4gMDsKICB9CiAgZ2V0U2VhY3MoY2hhcnN0cmluZ3MpIHsKICAgIGNvbnN0IHNlYWNNYXAgPSBbXTsKICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGNoYXJzdHJpbmdzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgY29uc3QgY2hhcnN0cmluZyA9IGNoYXJzdHJpbmdzW2ldOwogICAgICBpZiAoY2hhcnN0cmluZy5zZWFjKSB7CiAgICAgICAgc2VhY01hcFtpICsgMV0gPSBjaGFyc3RyaW5nLnNlYWM7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBzZWFjTWFwOwogIH0KICBnZXRUeXBlMkNoYXJzdHJpbmdzKHR5cGUxQ2hhcnN0cmluZ3MpIHsKICAgIGNvbnN0IHR5cGUyQ2hhcnN0cmluZ3MgPSBbXTsKICAgIGZvciAoY29uc3QgdHlwZTFDaGFyc3RyaW5nIG9mIHR5cGUxQ2hhcnN0cmluZ3MpIHsKICAgICAgdHlwZTJDaGFyc3RyaW5ncy5wdXNoKHR5cGUxQ2hhcnN0cmluZy5jaGFyc3RyaW5nKTsKICAgIH0KICAgIHJldHVybiB0eXBlMkNoYXJzdHJpbmdzOwogIH0KICBnZXRUeXBlMlN1YnJzKHR5cGUxU3VicnMpIHsKICAgIGxldCBiaWFzID0gMDsKICAgIGNvbnN0IGNvdW50ID0gdHlwZTFTdWJycy5sZW5ndGg7CiAgICBpZiAoY291bnQgPCAxMTMzKSB7CiAgICAgIGJpYXMgPSAxMDc7CiAgICB9IGVsc2UgaWYgKGNvdW50IDwgMzM3NjkpIHsKICAgICAgYmlhcyA9IDExMzE7CiAgICB9IGVsc2UgewogICAgICBiaWFzID0gMzI3Njg7CiAgICB9CiAgICBjb25zdCB0eXBlMlN1YnJzID0gW107CiAgICBsZXQgaTsKICAgIGZvciAoaSA9IDA7IGkgPCBiaWFzOyBpKyspIHsKICAgICAgdHlwZTJTdWJycy5wdXNoKFsweDBiXSk7CiAgICB9CiAgICBmb3IgKGkgPSAwOyBpIDwgY291bnQ7IGkrKykgewogICAgICB0eXBlMlN1YnJzLnB1c2godHlwZTFTdWJyc1tpXSk7CiAgICB9CiAgICByZXR1cm4gdHlwZTJTdWJyczsKICB9CiAgd3JhcChuYW1lLCBnbHlwaHMsIGNoYXJzdHJpbmdzLCBzdWJycywgcHJvcGVydGllcykgewogICAgY29uc3QgY2ZmID0gbmV3IENGRigpOwogICAgY2ZmLmhlYWRlciA9IG5ldyBDRkZIZWFkZXIoMSwgMCwgNCwgNCk7CiAgICBjZmYubmFtZXMgPSBbbmFtZV07CiAgICBjb25zdCB0b3BEaWN0ID0gbmV3IENGRlRvcERpY3QoKTsKICAgIHRvcERpY3Quc2V0QnlOYW1lKCJ2ZXJzaW9uIiwgMzkxKTsKICAgIHRvcERpY3Quc2V0QnlOYW1lKCJOb3RpY2UiLCAzOTIpOwogICAgdG9wRGljdC5zZXRCeU5hbWUoIkZ1bGxOYW1lIiwgMzkzKTsKICAgIHRvcERpY3Quc2V0QnlOYW1lKCJGYW1pbHlOYW1lIiwgMzk0KTsKICAgIHRvcERpY3Quc2V0QnlOYW1lKCJXZWlnaHQiLCAzOTUpOwogICAgdG9wRGljdC5zZXRCeU5hbWUoIkVuY29kaW5nIiwgbnVsbCk7CiAgICB0b3BEaWN0LnNldEJ5TmFtZSgiRm9udE1hdHJpeCIsIHByb3BlcnRpZXMuZm9udE1hdHJpeCk7CiAgICB0b3BEaWN0LnNldEJ5TmFtZSgiRm9udEJCb3giLCBwcm9wZXJ0aWVzLmJib3gpOwogICAgdG9wRGljdC5zZXRCeU5hbWUoImNoYXJzZXQiLCBudWxsKTsKICAgIHRvcERpY3Quc2V0QnlOYW1lKCJDaGFyU3RyaW5ncyIsIG51bGwpOwogICAgdG9wRGljdC5zZXRCeU5hbWUoIlByaXZhdGUiLCBudWxsKTsKICAgIGNmZi50b3BEaWN0ID0gdG9wRGljdDsKICAgIGNvbnN0IHN0cmluZ3MgPSBuZXcgQ0ZGU3RyaW5ncygpOwogICAgc3RyaW5ncy5hZGQoIlZlcnNpb24gMC4xMSIpOwogICAgc3RyaW5ncy5hZGQoIlNlZSBvcmlnaW5hbCBub3RpY2UiKTsKICAgIHN0cmluZ3MuYWRkKG5hbWUpOwogICAgc3RyaW5ncy5hZGQobmFtZSk7CiAgICBzdHJpbmdzLmFkZCgiTWVkaXVtIik7CiAgICBjZmYuc3RyaW5ncyA9IHN0cmluZ3M7CiAgICBjZmYuZ2xvYmFsU3VickluZGV4ID0gbmV3IENGRkluZGV4KCk7CiAgICBjb25zdCBjb3VudCA9IGdseXBocy5sZW5ndGg7CiAgICBjb25zdCBjaGFyc2V0QXJyYXkgPSBbIi5ub3RkZWYiXTsKICAgIGxldCBpLCBpaTsKICAgIGZvciAoaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7CiAgICAgIGNvbnN0IGdseXBoTmFtZSA9IGNoYXJzdHJpbmdzW2ldLmdseXBoTmFtZTsKICAgICAgY29uc3QgaW5kZXggPSBDRkZTdGFuZGFyZFN0cmluZ3MuaW5kZXhPZihnbHlwaE5hbWUpOwogICAgICBpZiAoaW5kZXggPT09IC0xKSB7CiAgICAgICAgc3RyaW5ncy5hZGQoZ2x5cGhOYW1lKTsKICAgICAgfQogICAgICBjaGFyc2V0QXJyYXkucHVzaChnbHlwaE5hbWUpOwogICAgfQogICAgY2ZmLmNoYXJzZXQgPSBuZXcgQ0ZGQ2hhcnNldChmYWxzZSwgMCwgY2hhcnNldEFycmF5KTsKICAgIGNvbnN0IGNoYXJTdHJpbmdzSW5kZXggPSBuZXcgQ0ZGSW5kZXgoKTsKICAgIGNoYXJTdHJpbmdzSW5kZXguYWRkKFsweDhiLCAweDBlXSk7CiAgICBmb3IgKGkgPSAwOyBpIDwgY291bnQ7IGkrKykgewogICAgICBjaGFyU3RyaW5nc0luZGV4LmFkZChnbHlwaHNbaV0pOwogICAgfQogICAgY2ZmLmNoYXJTdHJpbmdzID0gY2hhclN0cmluZ3NJbmRleDsKICAgIGNvbnN0IHByaXZhdGVEaWN0ID0gbmV3IENGRlByaXZhdGVEaWN0KCk7CiAgICBwcml2YXRlRGljdC5zZXRCeU5hbWUoIlN1YnJzIiwgbnVsbCk7CiAgICBjb25zdCBmaWVsZHMgPSBbIkJsdWVWYWx1ZXMiLCAiT3RoZXJCbHVlcyIsICJGYW1pbHlCbHVlcyIsICJGYW1pbHlPdGhlckJsdWVzIiwgIlN0ZW1TbmFwSCIsICJTdGVtU25hcFYiLCAiQmx1ZVNoaWZ0IiwgIkJsdWVGdXp6IiwgIkJsdWVTY2FsZSIsICJMYW5ndWFnZUdyb3VwIiwgIkV4cGFuc2lvbkZhY3RvciIsICJGb3JjZUJvbGQiLCAiU3RkSFciLCAiU3RkVlciXTsKICAgIGZvciAoaSA9IDAsIGlpID0gZmllbGRzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgY29uc3QgZmllbGQgPSBmaWVsZHNbaV07CiAgICAgIGlmICghKGZpZWxkIGluIHByb3BlcnRpZXMucHJpdmF0ZURhdGEpKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgY29uc3QgdmFsdWUgPSBwcm9wZXJ0aWVzLnByaXZhdGVEYXRhW2ZpZWxkXTsKICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7CiAgICAgICAgZm9yIChsZXQgaiA9IHZhbHVlLmxlbmd0aCAtIDE7IGogPiAwOyBqLS0pIHsKICAgICAgICAgIHZhbHVlW2pdIC09IHZhbHVlW2ogLSAxXTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcHJpdmF0ZURpY3Quc2V0QnlOYW1lKGZpZWxkLCB2YWx1ZSk7CiAgICB9CiAgICBjZmYudG9wRGljdC5wcml2YXRlRGljdCA9IHByaXZhdGVEaWN0OwogICAgY29uc3Qgc3VickluZGV4ID0gbmV3IENGRkluZGV4KCk7CiAgICBmb3IgKGkgPSAwLCBpaSA9IHN1YnJzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgc3VickluZGV4LmFkZChzdWJyc1tpXSk7CiAgICB9CiAgICBwcml2YXRlRGljdC5zdWJyc0luZGV4ID0gc3VickluZGV4OwogICAgY29uc3QgY29tcGlsZXIgPSBuZXcgQ0ZGQ29tcGlsZXIoY2ZmKTsKICAgIHJldHVybiBjb21waWxlci5jb21waWxlKCk7CiAgfQp9Cgo7Ly8gLi9zcmMvY29yZS9mb250cy5qcwoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCmNvbnN0IFBSSVZBVEVfVVNFX0FSRUFTID0gW1sweGUwMDAsIDB4ZjhmZl0sIFsweDEwMDAwMCwgMHgxMGZmZmRdXTsKY29uc3QgUERGX0dMWVBIX1NQQUNFX1VOSVRTID0gMTAwMDsKY29uc3QgRVhQT1JUX0RBVEFfUFJPUEVSVElFUyA9IFsiYXNjZW50IiwgImJib3giLCAiYmxhY2siLCAiYm9sZCIsICJjaGFyUHJvY09wZXJhdG9yTGlzdCIsICJjc3NGb250SW5mbyIsICJkYXRhIiwgImRlZmF1bHRWTWV0cmljcyIsICJkZWZhdWx0V2lkdGgiLCAiZGVzY2VudCIsICJkaXNhYmxlRm9udEZhY2UiLCAiZmFsbGJhY2tOYW1lIiwgImZvbnRFeHRyYVByb3BlcnRpZXMiLCAiZm9udE1hdHJpeCIsICJpc0ludmFsaWRQREZqc0ZvbnQiLCAiaXNUeXBlM0ZvbnQiLCAiaXRhbGljIiwgImxvYWRlZE5hbWUiLCAibWltZXR5cGUiLCAibWlzc2luZ0ZpbGUiLCAibmFtZSIsICJyZW1lYXN1cmUiLCAic3lzdGVtRm9udEluZm8iLCAidmVydGljYWwiXTsKY29uc3QgRVhQT1JUX0RBVEFfRVhUUkFfUFJPUEVSVElFUyA9IFsiY01hcCIsICJjb21wb3NpdGUiLCAiZGVmYXVsdEVuY29kaW5nIiwgImRpZmZlcmVuY2VzIiwgImlzTW9ub3NwYWNlIiwgImlzU2VyaWZGb250IiwgImlzU3ltYm9saWNGb250IiwgInNlYWNNYXAiLCAic3VidHlwZSIsICJ0b0ZvbnRDaGFyIiwgInRvVW5pY29kZSIsICJ0eXBlIiwgInZtZXRyaWNzIiwgIndpZHRocyJdOwpmdW5jdGlvbiBhZGp1c3RXaWR0aHMocHJvcGVydGllcykgewogIGlmICghcHJvcGVydGllcy5mb250TWF0cml4KSB7CiAgICByZXR1cm47CiAgfQogIGlmIChwcm9wZXJ0aWVzLmZvbnRNYXRyaXhbMF0gPT09IEZPTlRfSURFTlRJVFlfTUFUUklYWzBdKSB7CiAgICByZXR1cm47CiAgfQogIGNvbnN0IHNjYWxlID0gMC4wMDEgLyBwcm9wZXJ0aWVzLmZvbnRNYXRyaXhbMF07CiAgY29uc3QgZ2x5cGhzV2lkdGhzID0gcHJvcGVydGllcy53aWR0aHM7CiAgZm9yIChjb25zdCBnbHlwaCBpbiBnbHlwaHNXaWR0aHMpIHsKICAgIGdseXBoc1dpZHRoc1tnbHlwaF0gKj0gc2NhbGU7CiAgfQogIHByb3BlcnRpZXMuZGVmYXVsdFdpZHRoICo9IHNjYWxlOwp9CmZ1bmN0aW9uIGFkanVzdFRydWVUeXBlVG9Vbmljb2RlKHByb3BlcnRpZXMsIGlzU3ltYm9saWNGb250LCBuYW1lUmVjb3JkcykgewogIGlmIChwcm9wZXJ0aWVzLmlzSW50ZXJuYWxGb250KSB7CiAgICByZXR1cm47CiAgfQogIGlmIChwcm9wZXJ0aWVzLmhhc0luY2x1ZGVkVG9Vbmljb2RlTWFwKSB7CiAgICByZXR1cm47CiAgfQogIGlmIChwcm9wZXJ0aWVzLmhhc0VuY29kaW5nKSB7CiAgICByZXR1cm47CiAgfQogIGlmIChwcm9wZXJ0aWVzLnRvVW5pY29kZSBpbnN0YW5jZW9mIElkZW50aXR5VG9Vbmljb2RlTWFwKSB7CiAgICByZXR1cm47CiAgfQogIGlmICghaXNTeW1ib2xpY0ZvbnQpIHsKICAgIHJldHVybjsKICB9CiAgaWYgKG5hbWVSZWNvcmRzLmxlbmd0aCA9PT0gMCkgewogICAgcmV0dXJuOwogIH0KICBpZiAocHJvcGVydGllcy5kZWZhdWx0RW5jb2RpbmcgPT09IFdpbkFuc2lFbmNvZGluZykgewogICAgcmV0dXJuOwogIH0KICBmb3IgKGNvbnN0IHIgb2YgbmFtZVJlY29yZHMpIHsKICAgIGlmICghaXNXaW5OYW1lUmVjb3JkKHIpKSB7CiAgICAgIHJldHVybjsKICAgIH0KICB9CiAgY29uc3QgZW5jb2RpbmcgPSBXaW5BbnNpRW5jb2Rpbmc7CiAgY29uc3QgdG9Vbmljb2RlID0gW10sCiAgICBnbHlwaHNVbmljb2RlTWFwID0gZ2V0R2x5cGhzVW5pY29kZSgpOwogIGZvciAoY29uc3QgY2hhckNvZGUgaW4gZW5jb2RpbmcpIHsKICAgIGNvbnN0IGdseXBoTmFtZSA9IGVuY29kaW5nW2NoYXJDb2RlXTsKICAgIGlmIChnbHlwaE5hbWUgPT09ICIiKSB7CiAgICAgIGNvbnRpbnVlOwogICAgfQogICAgY29uc3QgdW5pY29kZSA9IGdseXBoc1VuaWNvZGVNYXBbZ2x5cGhOYW1lXTsKICAgIGlmICh1bmljb2RlID09PSB1bmRlZmluZWQpIHsKICAgICAgY29udGludWU7CiAgICB9CiAgICB0b1VuaWNvZGVbY2hhckNvZGVdID0gU3RyaW5nLmZyb21DaGFyQ29kZSh1bmljb2RlKTsKICB9CiAgaWYgKHRvVW5pY29kZS5sZW5ndGggPiAwKSB7CiAgICBwcm9wZXJ0aWVzLnRvVW5pY29kZS5hbWVuZCh0b1VuaWNvZGUpOwogIH0KfQpmdW5jdGlvbiBhZGp1c3RUeXBlMVRvVW5pY29kZShwcm9wZXJ0aWVzLCBidWlsdEluRW5jb2RpbmcpIHsKICBpZiAocHJvcGVydGllcy5pc0ludGVybmFsRm9udCkgewogICAgcmV0dXJuOwogIH0KICBpZiAocHJvcGVydGllcy5oYXNJbmNsdWRlZFRvVW5pY29kZU1hcCkgewogICAgcmV0dXJuOwogIH0KICBpZiAoYnVpbHRJbkVuY29kaW5nID09PSBwcm9wZXJ0aWVzLmRlZmF1bHRFbmNvZGluZykgewogICAgcmV0dXJuOwogIH0KICBpZiAocHJvcGVydGllcy50b1VuaWNvZGUgaW5zdGFuY2VvZiBJZGVudGl0eVRvVW5pY29kZU1hcCkgewogICAgcmV0dXJuOwogIH0KICBjb25zdCB0b1VuaWNvZGUgPSBbXSwKICAgIGdseXBoc1VuaWNvZGVNYXAgPSBnZXRHbHlwaHNVbmljb2RlKCk7CiAgZm9yIChjb25zdCBjaGFyQ29kZSBpbiBidWlsdEluRW5jb2RpbmcpIHsKICAgIGlmIChwcm9wZXJ0aWVzLmhhc0VuY29kaW5nKSB7CiAgICAgIGlmIChwcm9wZXJ0aWVzLmJhc2VFbmNvZGluZ05hbWUgfHwgcHJvcGVydGllcy5kaWZmZXJlbmNlc1tjaGFyQ29kZV0gIT09IHVuZGVmaW5lZCkgewogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICB9CiAgICBjb25zdCBnbHlwaE5hbWUgPSBidWlsdEluRW5jb2RpbmdbY2hhckNvZGVdOwogICAgY29uc3QgdW5pY29kZSA9IGdldFVuaWNvZGVGb3JHbHlwaChnbHlwaE5hbWUsIGdseXBoc1VuaWNvZGVNYXApOwogICAgaWYgKHVuaWNvZGUgIT09IC0xKSB7CiAgICAgIHRvVW5pY29kZVtjaGFyQ29kZV0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHVuaWNvZGUpOwogICAgfQogIH0KICBpZiAodG9Vbmljb2RlLmxlbmd0aCA+IDApIHsKICAgIHByb3BlcnRpZXMudG9Vbmljb2RlLmFtZW5kKHRvVW5pY29kZSk7CiAgfQp9CmZ1bmN0aW9uIGFtZW5kRmFsbGJhY2tUb1VuaWNvZGUocHJvcGVydGllcykgewogIGlmICghcHJvcGVydGllcy5mYWxsYmFja1RvVW5pY29kZSkgewogICAgcmV0dXJuOwogIH0KICBpZiAocHJvcGVydGllcy50b1VuaWNvZGUgaW5zdGFuY2VvZiBJZGVudGl0eVRvVW5pY29kZU1hcCkgewogICAgcmV0dXJuOwogIH0KICBjb25zdCB0b1VuaWNvZGUgPSBbXTsKICBmb3IgKGNvbnN0IGNoYXJDb2RlIGluIHByb3BlcnRpZXMuZmFsbGJhY2tUb1VuaWNvZGUpIHsKICAgIGlmIChwcm9wZXJ0aWVzLnRvVW5pY29kZS5oYXMoY2hhckNvZGUpKSB7CiAgICAgIGNvbnRpbnVlOwogICAgfQogICAgdG9Vbmljb2RlW2NoYXJDb2RlXSA9IHByb3BlcnRpZXMuZmFsbGJhY2tUb1VuaWNvZGVbY2hhckNvZGVdOwogIH0KICBpZiAodG9Vbmljb2RlLmxlbmd0aCA+IDApIHsKICAgIHByb3BlcnRpZXMudG9Vbmljb2RlLmFtZW5kKHRvVW5pY29kZSk7CiAgfQp9CmNsYXNzIGZvbnRzX0dseXBoIHsKICBjb25zdHJ1Y3RvcihvcmlnaW5hbENoYXJDb2RlLCBmb250Q2hhciwgdW5pY29kZSwgYWNjZW50LCB3aWR0aCwgdm1ldHJpYywgb3BlcmF0b3JMaXN0SWQsIGlzU3BhY2UsIGlzSW5Gb250KSB7CiAgICB0aGlzLm9yaWdpbmFsQ2hhckNvZGUgPSBvcmlnaW5hbENoYXJDb2RlOwogICAgdGhpcy5mb250Q2hhciA9IGZvbnRDaGFyOwogICAgdGhpcy51bmljb2RlID0gdW5pY29kZTsKICAgIHRoaXMuYWNjZW50ID0gYWNjZW50OwogICAgdGhpcy53aWR0aCA9IHdpZHRoOwogICAgdGhpcy52bWV0cmljID0gdm1ldHJpYzsKICAgIHRoaXMub3BlcmF0b3JMaXN0SWQgPSBvcGVyYXRvckxpc3RJZDsKICAgIHRoaXMuaXNTcGFjZSA9IGlzU3BhY2U7CiAgICB0aGlzLmlzSW5Gb250ID0gaXNJbkZvbnQ7CiAgfQogIGdldCBjYXRlZ29yeSgpIHsKICAgIHJldHVybiBzaGFkb3codGhpcywgImNhdGVnb3J5IiwgZ2V0Q2hhclVuaWNvZGVDYXRlZ29yeSh0aGlzLnVuaWNvZGUpLCB0cnVlKTsKICB9Cn0KZnVuY3Rpb24gaW50MTYoYjAsIGIxKSB7CiAgcmV0dXJuIChiMCA8PCA4KSArIGIxOwp9CmZ1bmN0aW9uIHdyaXRlU2lnbmVkSW50MTYoYnl0ZXMsIGluZGV4LCB2YWx1ZSkgewogIGJ5dGVzW2luZGV4ICsgMV0gPSB2YWx1ZTsKICBieXRlc1tpbmRleF0gPSB2YWx1ZSA+Pj4gODsKfQpmdW5jdGlvbiBzaWduZWRJbnQxNihiMCwgYjEpIHsKICBjb25zdCB2YWx1ZSA9IChiMCA8PCA4KSArIGIxOwogIHJldHVybiB2YWx1ZSAmIDEgPDwgMTUgPyB2YWx1ZSAtIDB4MTAwMDAgOiB2YWx1ZTsKfQpmdW5jdGlvbiB3cml0ZVVpbnQzMihieXRlcywgaW5kZXgsIHZhbHVlKSB7CiAgYnl0ZXNbaW5kZXggKyAzXSA9IHZhbHVlICYgMHhmZjsKICBieXRlc1tpbmRleCArIDJdID0gdmFsdWUgPj4+IDg7CiAgYnl0ZXNbaW5kZXggKyAxXSA9IHZhbHVlID4+PiAxNjsKICBieXRlc1tpbmRleF0gPSB2YWx1ZSA+Pj4gMjQ7Cn0KZnVuY3Rpb24gaW50MzIoYjAsIGIxLCBiMiwgYjMpIHsKICByZXR1cm4gKGIwIDw8IDI0KSArIChiMSA8PCAxNikgKyAoYjIgPDwgOCkgKyBiMzsKfQpmdW5jdGlvbiBzdHJpbmcxNih2YWx1ZSkgewogIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHZhbHVlID4+IDggJiAweGZmLCB2YWx1ZSAmIDB4ZmYpOwp9CmZ1bmN0aW9uIHNhZmVTdHJpbmcxNih2YWx1ZSkgewogIGlmICh2YWx1ZSA+IDB4N2ZmZikgewogICAgdmFsdWUgPSAweDdmZmY7CiAgfSBlbHNlIGlmICh2YWx1ZSA8IC0weDgwMDApIHsKICAgIHZhbHVlID0gLTB4ODAwMDsKICB9CiAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUodmFsdWUgPj4gOCAmIDB4ZmYsIHZhbHVlICYgMHhmZik7Cn0KZnVuY3Rpb24gaXNUcnVlVHlwZUZpbGUoZmlsZSkgewogIGNvbnN0IGhlYWRlciA9IGZpbGUucGVla0J5dGVzKDQpOwogIHJldHVybiByZWFkVWludDMyKGhlYWRlciwgMCkgPT09IDB4MDAwMTAwMDAgfHwgYnl0ZXNUb1N0cmluZyhoZWFkZXIpID09PSAidHJ1ZSI7Cn0KZnVuY3Rpb24gaXNUcnVlVHlwZUNvbGxlY3Rpb25GaWxlKGZpbGUpIHsKICBjb25zdCBoZWFkZXIgPSBmaWxlLnBlZWtCeXRlcyg0KTsKICByZXR1cm4gYnl0ZXNUb1N0cmluZyhoZWFkZXIpID09PSAidHRjZiI7Cn0KZnVuY3Rpb24gaXNPcGVuVHlwZUZpbGUoZmlsZSkgewogIGNvbnN0IGhlYWRlciA9IGZpbGUucGVla0J5dGVzKDQpOwogIHJldHVybiBieXRlc1RvU3RyaW5nKGhlYWRlcikgPT09ICJPVFRPIjsKfQpmdW5jdGlvbiBpc1R5cGUxRmlsZShmaWxlKSB7CiAgY29uc3QgaGVhZGVyID0gZmlsZS5wZWVrQnl0ZXMoMik7CiAgaWYgKGhlYWRlclswXSA9PT0gMHgyNSAmJiBoZWFkZXJbMV0gPT09IDB4MjEpIHsKICAgIHJldHVybiB0cnVlOwogIH0KICBpZiAoaGVhZGVyWzBdID09PSAweDgwICYmIGhlYWRlclsxXSA9PT0gMHgwMSkgewogICAgcmV0dXJuIHRydWU7CiAgfQogIHJldHVybiBmYWxzZTsKfQpmdW5jdGlvbiBpc0NGRkZpbGUoZmlsZSkgewogIGNvbnN0IGhlYWRlciA9IGZpbGUucGVla0J5dGVzKDQpOwogIGlmIChoZWFkZXJbMF0gPj0gMSAmJiBoZWFkZXJbM10gPj0gMSAmJiBoZWFkZXJbM10gPD0gNCkgewogICAgcmV0dXJuIHRydWU7CiAgfQogIHJldHVybiBmYWxzZTsKfQpmdW5jdGlvbiBnZXRGb250RmlsZVR5cGUoZmlsZSwgewogIHR5cGUsCiAgc3VidHlwZSwKICBjb21wb3NpdGUKfSkgewogIGxldCBmaWxlVHlwZSwgZmlsZVN1YnR5cGU7CiAgaWYgKGlzVHJ1ZVR5cGVGaWxlKGZpbGUpIHx8IGlzVHJ1ZVR5cGVDb2xsZWN0aW9uRmlsZShmaWxlKSkgewogICAgZmlsZVR5cGUgPSBjb21wb3NpdGUgPyAiQ0lERm9udFR5cGUyIiA6ICJUcnVlVHlwZSI7CiAgfSBlbHNlIGlmIChpc09wZW5UeXBlRmlsZShmaWxlKSkgewogICAgZmlsZVR5cGUgPSBjb21wb3NpdGUgPyAiQ0lERm9udFR5cGUyIiA6ICJPcGVuVHlwZSI7CiAgfSBlbHNlIGlmIChpc1R5cGUxRmlsZShmaWxlKSkgewogICAgaWYgKGNvbXBvc2l0ZSkgewogICAgICBmaWxlVHlwZSA9ICJDSURGb250VHlwZTAiOwogICAgfSBlbHNlIHsKICAgICAgZmlsZVR5cGUgPSB0eXBlID09PSAiTU1UeXBlMSIgPyAiTU1UeXBlMSIgOiAiVHlwZTEiOwogICAgfQogIH0gZWxzZSBpZiAoaXNDRkZGaWxlKGZpbGUpKSB7CiAgICBpZiAoY29tcG9zaXRlKSB7CiAgICAgIGZpbGVUeXBlID0gIkNJREZvbnRUeXBlMCI7CiAgICAgIGZpbGVTdWJ0eXBlID0gIkNJREZvbnRUeXBlMEMiOwogICAgfSBlbHNlIHsKICAgICAgZmlsZVR5cGUgPSB0eXBlID09PSAiTU1UeXBlMSIgPyAiTU1UeXBlMSIgOiAiVHlwZTEiOwogICAgICBmaWxlU3VidHlwZSA9ICJUeXBlMUMiOwogICAgfQogIH0gZWxzZSB7CiAgICB3YXJuKCJnZXRGb250RmlsZVR5cGU6IFVuYWJsZSB0byBkZXRlY3QgY29ycmVjdCBmb250IGZpbGUgVHlwZS9TdWJ0eXBlLiIpOwogICAgZmlsZVR5cGUgPSB0eXBlOwogICAgZmlsZVN1YnR5cGUgPSBzdWJ0eXBlOwogIH0KICByZXR1cm4gW2ZpbGVUeXBlLCBmaWxlU3VidHlwZV07Cn0KZnVuY3Rpb24gYXBwbHlTdGFuZGFyZEZvbnRHbHlwaE1hcChtYXAsIGdseXBoTWFwKSB7CiAgZm9yIChjb25zdCBjaGFyQ29kZSBpbiBnbHlwaE1hcCkgewogICAgbWFwWytjaGFyQ29kZV0gPSBnbHlwaE1hcFtjaGFyQ29kZV07CiAgfQp9CmZ1bmN0aW9uIGJ1aWxkVG9Gb250Q2hhcihlbmNvZGluZywgZ2x5cGhzVW5pY29kZU1hcCwgZGlmZmVyZW5jZXMpIHsKICBjb25zdCB0b0ZvbnRDaGFyID0gW107CiAgbGV0IHVuaWNvZGU7CiAgZm9yIChsZXQgaSA9IDAsIGlpID0gZW5jb2RpbmcubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgdW5pY29kZSA9IGdldFVuaWNvZGVGb3JHbHlwaChlbmNvZGluZ1tpXSwgZ2x5cGhzVW5pY29kZU1hcCk7CiAgICBpZiAodW5pY29kZSAhPT0gLTEpIHsKICAgICAgdG9Gb250Q2hhcltpXSA9IHVuaWNvZGU7CiAgICB9CiAgfQogIGZvciAoY29uc3QgY2hhckNvZGUgaW4gZGlmZmVyZW5jZXMpIHsKICAgIHVuaWNvZGUgPSBnZXRVbmljb2RlRm9yR2x5cGgoZGlmZmVyZW5jZXNbY2hhckNvZGVdLCBnbHlwaHNVbmljb2RlTWFwKTsKICAgIGlmICh1bmljb2RlICE9PSAtMSkgewogICAgICB0b0ZvbnRDaGFyWytjaGFyQ29kZV0gPSB1bmljb2RlOwogICAgfQogIH0KICByZXR1cm4gdG9Gb250Q2hhcjsKfQpmdW5jdGlvbiBpc01hY05hbWVSZWNvcmQocikgewogIHJldHVybiByLnBsYXRmb3JtID09PSAxICYmIHIuZW5jb2RpbmcgPT09IDAgJiYgci5sYW5ndWFnZSA9PT0gMDsKfQpmdW5jdGlvbiBpc1dpbk5hbWVSZWNvcmQocikgewogIHJldHVybiByLnBsYXRmb3JtID09PSAzICYmIHIuZW5jb2RpbmcgPT09IDEgJiYgci5sYW5ndWFnZSA9PT0gMHg0MDk7Cn0KZnVuY3Rpb24gY29udmVydENpZFN0cmluZyhjaGFyQ29kZSwgY2lkLCBzaG91bGRUaHJvdyA9IGZhbHNlKSB7CiAgc3dpdGNoIChjaWQubGVuZ3RoKSB7CiAgICBjYXNlIDE6CiAgICAgIHJldHVybiBjaWQuY2hhckNvZGVBdCgwKTsKICAgIGNhc2UgMjoKICAgICAgcmV0dXJuIGNpZC5jaGFyQ29kZUF0KDApIDw8IDggfCBjaWQuY2hhckNvZGVBdCgxKTsKICB9CiAgY29uc3QgbXNnID0gYFVuc3VwcG9ydGVkIENJRCBzdHJpbmcgKGNoYXJDb2RlICR7Y2hhckNvZGV9KTogIiR7Y2lkfSIuYDsKICBpZiAoc2hvdWxkVGhyb3cpIHsKICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcihtc2cpOwogIH0KICB3YXJuKG1zZyk7CiAgcmV0dXJuIGNpZDsKfQpmdW5jdGlvbiBhZGp1c3RNYXBwaW5nKGNoYXJDb2RlVG9HbHlwaElkLCBoYXNHbHlwaCwgbmV3R2x5cGhaZXJvSWQsIHRvVW5pY29kZSkgewogIGNvbnN0IG5ld01hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgY29uc3QgdG9Vbmljb2RlRXh0cmFNYXAgPSBuZXcgTWFwKCk7CiAgY29uc3QgdG9Gb250Q2hhciA9IFtdOwogIGNvbnN0IHVzZWRHbHlwaElkcyA9IG5ldyBTZXQoKTsKICBsZXQgcHJpdmF0ZVVzZUFyZWFJbmRleCA9IDA7CiAgY29uc3QgcHJpdmF0ZVVzZU9mZmV0U3RhcnQgPSBQUklWQVRFX1VTRV9BUkVBU1twcml2YXRlVXNlQXJlYUluZGV4XVswXTsKICBsZXQgbmV4dEF2YWlsYWJsZUZvbnRDaGFyQ29kZSA9IHByaXZhdGVVc2VPZmZldFN0YXJ0OwogIGxldCBwcml2YXRlVXNlT2ZmZXRFbmQgPSBQUklWQVRFX1VTRV9BUkVBU1twcml2YXRlVXNlQXJlYUluZGV4XVsxXTsKICBjb25zdCBpc0luUHJpdmF0ZUFyZWEgPSBjb2RlID0+IFBSSVZBVEVfVVNFX0FSRUFTWzBdWzBdIDw9IGNvZGUgJiYgY29kZSA8PSBQUklWQVRFX1VTRV9BUkVBU1swXVsxXSB8fCBQUklWQVRFX1VTRV9BUkVBU1sxXVswXSA8PSBjb2RlICYmIGNvZGUgPD0gUFJJVkFURV9VU0VfQVJFQVNbMV1bMV07CiAgbGV0IExJR0FUVVJFX1RPX1VOSUNPREUgPSBudWxsOwogIGZvciAoY29uc3Qgb3JpZ2luYWxDaGFyQ29kZSBpbiBjaGFyQ29kZVRvR2x5cGhJZCkgewogICAgbGV0IGdseXBoSWQgPSBjaGFyQ29kZVRvR2x5cGhJZFtvcmlnaW5hbENoYXJDb2RlXTsKICAgIGlmICghaGFzR2x5cGgoZ2x5cGhJZCkpIHsKICAgICAgY29udGludWU7CiAgICB9CiAgICBpZiAobmV4dEF2YWlsYWJsZUZvbnRDaGFyQ29kZSA+IHByaXZhdGVVc2VPZmZldEVuZCkgewogICAgICBwcml2YXRlVXNlQXJlYUluZGV4Kys7CiAgICAgIGlmIChwcml2YXRlVXNlQXJlYUluZGV4ID49IFBSSVZBVEVfVVNFX0FSRUFTLmxlbmd0aCkgewogICAgICAgIHdhcm4oIlJhbiBvdXQgb2Ygc3BhY2UgaW4gZm9udCBwcml2YXRlIHVzZSBhcmVhLiIpOwogICAgICAgIGJyZWFrOwogICAgICB9CiAgICAgIG5leHRBdmFpbGFibGVGb250Q2hhckNvZGUgPSBQUklWQVRFX1VTRV9BUkVBU1twcml2YXRlVXNlQXJlYUluZGV4XVswXTsKICAgICAgcHJpdmF0ZVVzZU9mZmV0RW5kID0gUFJJVkFURV9VU0VfQVJFQVNbcHJpdmF0ZVVzZUFyZWFJbmRleF1bMV07CiAgICB9CiAgICBjb25zdCBmb250Q2hhckNvZGUgPSBuZXh0QXZhaWxhYmxlRm9udENoYXJDb2RlKys7CiAgICBpZiAoZ2x5cGhJZCA9PT0gMCkgewogICAgICBnbHlwaElkID0gbmV3R2x5cGhaZXJvSWQ7CiAgICB9CiAgICBsZXQgdW5pY29kZSA9IHRvVW5pY29kZS5nZXQob3JpZ2luYWxDaGFyQ29kZSk7CiAgICBpZiAodHlwZW9mIHVuaWNvZGUgPT09ICJzdHJpbmciKSB7CiAgICAgIGlmICh1bmljb2RlLmxlbmd0aCA9PT0gMSkgewogICAgICAgIHVuaWNvZGUgPSB1bmljb2RlLmNvZGVQb2ludEF0KDApOwogICAgICB9IGVsc2UgewogICAgICAgIGlmICghTElHQVRVUkVfVE9fVU5JQ09ERSkgewogICAgICAgICAgTElHQVRVUkVfVE9fVU5JQ09ERSA9IG5ldyBNYXAoKTsKICAgICAgICAgIGZvciAobGV0IGkgPSAweGZiMDA7IGkgPD0gMHhmYjRmOyBpKyspIHsKICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoaSkubm9ybWFsaXplKCJORktEIik7CiAgICAgICAgICAgIGlmIChub3JtYWxpemVkLmxlbmd0aCA+IDEpIHsKICAgICAgICAgICAgICBMSUdBVFVSRV9UT19VTklDT0RFLnNldChub3JtYWxpemVkLCBpKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB1bmljb2RlID0gTElHQVRVUkVfVE9fVU5JQ09ERS5nZXQodW5pY29kZSkgfHwgdW5pY29kZS5jb2RlUG9pbnRBdCgwKTsKICAgICAgfQogICAgfQogICAgaWYgKHVuaWNvZGUgJiYgIWlzSW5Qcml2YXRlQXJlYSh1bmljb2RlKSAmJiAhdXNlZEdseXBoSWRzLmhhcyhnbHlwaElkKSkgewogICAgICB0b1VuaWNvZGVFeHRyYU1hcC5zZXQodW5pY29kZSwgZ2x5cGhJZCk7CiAgICAgIHVzZWRHbHlwaElkcy5hZGQoZ2x5cGhJZCk7CiAgICB9CiAgICBuZXdNYXBbZm9udENoYXJDb2RlXSA9IGdseXBoSWQ7CiAgICB0b0ZvbnRDaGFyW29yaWdpbmFsQ2hhckNvZGVdID0gZm9udENoYXJDb2RlOwogIH0KICByZXR1cm4gewogICAgdG9Gb250Q2hhciwKICAgIGNoYXJDb2RlVG9HbHlwaElkOiBuZXdNYXAsCiAgICB0b1VuaWNvZGVFeHRyYU1hcCwKICAgIG5leHRBdmFpbGFibGVGb250Q2hhckNvZGUKICB9Owp9CmZ1bmN0aW9uIGdldFJhbmdlcyhnbHlwaHMsIHRvVW5pY29kZUV4dHJhTWFwLCBudW1HbHlwaHMpIHsKICBjb25zdCBjb2RlcyA9IFtdOwogIGZvciAoY29uc3QgY2hhckNvZGUgaW4gZ2x5cGhzKSB7CiAgICBpZiAoZ2x5cGhzW2NoYXJDb2RlXSA+PSBudW1HbHlwaHMpIHsKICAgICAgY29udGludWU7CiAgICB9CiAgICBjb2Rlcy5wdXNoKHsKICAgICAgZm9udENoYXJDb2RlOiBjaGFyQ29kZSB8IDAsCiAgICAgIGdseXBoSWQ6IGdseXBoc1tjaGFyQ29kZV0KICAgIH0pOwogIH0KICBpZiAodG9Vbmljb2RlRXh0cmFNYXApIHsKICAgIGZvciAoY29uc3QgW3VuaWNvZGUsIGdseXBoSWRdIG9mIHRvVW5pY29kZUV4dHJhTWFwKSB7CiAgICAgIGlmIChnbHlwaElkID49IG51bUdseXBocykgewogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGNvZGVzLnB1c2goewogICAgICAgIGZvbnRDaGFyQ29kZTogdW5pY29kZSwKICAgICAgICBnbHlwaElkCiAgICAgIH0pOwogICAgfQogIH0KICBpZiAoY29kZXMubGVuZ3RoID09PSAwKSB7CiAgICBjb2Rlcy5wdXNoKHsKICAgICAgZm9udENoYXJDb2RlOiAwLAogICAgICBnbHlwaElkOiAwCiAgICB9KTsKICB9CiAgY29kZXMuc29ydCgoYSwgYikgPT4gYS5mb250Q2hhckNvZGUgLSBiLmZvbnRDaGFyQ29kZSk7CiAgY29uc3QgcmFuZ2VzID0gW107CiAgY29uc3QgbGVuZ3RoID0gY29kZXMubGVuZ3RoOwogIGZvciAobGV0IG4gPSAwOyBuIDwgbGVuZ3RoOykgewogICAgY29uc3Qgc3RhcnQgPSBjb2Rlc1tuXS5mb250Q2hhckNvZGU7CiAgICBjb25zdCBjb2RlSW5kaWNlcyA9IFtjb2Rlc1tuXS5nbHlwaElkXTsKICAgICsrbjsKICAgIGxldCBlbmQgPSBzdGFydDsKICAgIHdoaWxlIChuIDwgbGVuZ3RoICYmIGVuZCArIDEgPT09IGNvZGVzW25dLmZvbnRDaGFyQ29kZSkgewogICAgICBjb2RlSW5kaWNlcy5wdXNoKGNvZGVzW25dLmdseXBoSWQpOwogICAgICArK2VuZDsKICAgICAgKytuOwogICAgICBpZiAoZW5kID09PSAweGZmZmYpIHsKICAgICAgICBicmVhazsKICAgICAgfQogICAgfQogICAgcmFuZ2VzLnB1c2goW3N0YXJ0LCBlbmQsIGNvZGVJbmRpY2VzXSk7CiAgfQogIHJldHVybiByYW5nZXM7Cn0KZnVuY3Rpb24gY3JlYXRlQ21hcFRhYmxlKGdseXBocywgdG9Vbmljb2RlRXh0cmFNYXAsIG51bUdseXBocykgewogIGNvbnN0IHJhbmdlcyA9IGdldFJhbmdlcyhnbHlwaHMsIHRvVW5pY29kZUV4dHJhTWFwLCBudW1HbHlwaHMpOwogIGNvbnN0IG51bVRhYmxlcyA9IHJhbmdlcy5hdCgtMSlbMV0gPiAweGZmZmYgPyAyIDogMTsKICBsZXQgY21hcCA9ICJceDAwXHgwMCIgKyBzdHJpbmcxNihudW1UYWJsZXMpICsgIlx4MDBceDAzIiArICJceDAwXHgwMSIgKyBzdHJpbmczMig0ICsgbnVtVGFibGVzICogOCk7CiAgbGV0IGksIGlpLCBqLCBqajsKICBmb3IgKGkgPSByYW5nZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHsKICAgIGlmIChyYW5nZXNbaV1bMF0gPD0gMHhmZmZmKSB7CiAgICAgIGJyZWFrOwogICAgfQogIH0KICBjb25zdCBibXBMZW5ndGggPSBpICsgMTsKICBpZiAocmFuZ2VzW2ldWzBdIDwgMHhmZmZmICYmIHJhbmdlc1tpXVsxXSA9PT0gMHhmZmZmKSB7CiAgICByYW5nZXNbaV1bMV0gPSAweGZmZmU7CiAgfQogIGNvbnN0IHRyYWlsaW5nUmFuZ2VzQ291bnQgPSByYW5nZXNbaV1bMV0gPCAweGZmZmYgPyAxIDogMDsKICBjb25zdCBzZWdDb3VudCA9IGJtcExlbmd0aCArIHRyYWlsaW5nUmFuZ2VzQ291bnQ7CiAgY29uc3Qgc2VhcmNoUGFyYW1zID0gT3BlblR5cGVGaWxlQnVpbGRlci5nZXRTZWFyY2hQYXJhbXMoc2VnQ291bnQsIDIpOwogIGxldCBzdGFydENvdW50ID0gIiI7CiAgbGV0IGVuZENvdW50ID0gIiI7CiAgbGV0IGlkRGVsdGFzID0gIiI7CiAgbGV0IGlkUmFuZ2VPZmZzZXRzID0gIiI7CiAgbGV0IGdseXBoc0lkcyA9ICIiOwogIGxldCBiaWFzID0gMDsKICBsZXQgcmFuZ2UsIHN0YXJ0LCBlbmQsIGNvZGVzOwogIGZvciAoaSA9IDAsIGlpID0gYm1wTGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgcmFuZ2UgPSByYW5nZXNbaV07CiAgICBzdGFydCA9IHJhbmdlWzBdOwogICAgZW5kID0gcmFuZ2VbMV07CiAgICBzdGFydENvdW50ICs9IHN0cmluZzE2KHN0YXJ0KTsKICAgIGVuZENvdW50ICs9IHN0cmluZzE2KGVuZCk7CiAgICBjb2RlcyA9IHJhbmdlWzJdOwogICAgbGV0IGNvbnRpZ3VvdXMgPSB0cnVlOwogICAgZm9yIChqID0gMSwgamogPSBjb2Rlcy5sZW5ndGg7IGogPCBqajsgKytqKSB7CiAgICAgIGlmIChjb2Rlc1tqXSAhPT0gY29kZXNbaiAtIDFdICsgMSkgewogICAgICAgIGNvbnRpZ3VvdXMgPSBmYWxzZTsKICAgICAgICBicmVhazsKICAgICAgfQogICAgfQogICAgaWYgKCFjb250aWd1b3VzKSB7CiAgICAgIGNvbnN0IG9mZnNldCA9IChzZWdDb3VudCAtIGkpICogMiArIGJpYXMgKiAyOwogICAgICBiaWFzICs9IGVuZCAtIHN0YXJ0ICsgMTsKICAgICAgaWREZWx0YXMgKz0gc3RyaW5nMTYoMCk7CiAgICAgIGlkUmFuZ2VPZmZzZXRzICs9IHN0cmluZzE2KG9mZnNldCk7CiAgICAgIGZvciAoaiA9IDAsIGpqID0gY29kZXMubGVuZ3RoOyBqIDwgamo7ICsraikgewogICAgICAgIGdseXBoc0lkcyArPSBzdHJpbmcxNihjb2Rlc1tqXSk7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGNvbnN0IHN0YXJ0Q29kZSA9IGNvZGVzWzBdOwogICAgICBpZERlbHRhcyArPSBzdHJpbmcxNihzdGFydENvZGUgLSBzdGFydCAmIDB4ZmZmZik7CiAgICAgIGlkUmFuZ2VPZmZzZXRzICs9IHN0cmluZzE2KDApOwogICAgfQogIH0KICBpZiAodHJhaWxpbmdSYW5nZXNDb3VudCA+IDApIHsKICAgIGVuZENvdW50ICs9ICJceEZGXHhGRiI7CiAgICBzdGFydENvdW50ICs9ICJceEZGXHhGRiI7CiAgICBpZERlbHRhcyArPSAiXHgwMFx4MDEiOwogICAgaWRSYW5nZU9mZnNldHMgKz0gIlx4MDBceDAwIjsKICB9CiAgY29uc3QgZm9ybWF0MzE0ID0gIlx4MDBceDAwIiArIHN0cmluZzE2KDIgKiBzZWdDb3VudCkgKyBzdHJpbmcxNihzZWFyY2hQYXJhbXMucmFuZ2UpICsgc3RyaW5nMTYoc2VhcmNoUGFyYW1zLmVudHJ5KSArIHN0cmluZzE2KHNlYXJjaFBhcmFtcy5yYW5nZVNoaWZ0KSArIGVuZENvdW50ICsgIlx4MDBceDAwIiArIHN0YXJ0Q291bnQgKyBpZERlbHRhcyArIGlkUmFuZ2VPZmZzZXRzICsgZ2x5cGhzSWRzOwogIGxldCBmb3JtYXQzMTAxMiA9ICIiOwogIGxldCBoZWFkZXIzMTAxMiA9ICIiOwogIGlmIChudW1UYWJsZXMgPiAxKSB7CiAgICBjbWFwICs9ICJceDAwXHgwMyIgKyAiXHgwMFx4MEEiICsgc3RyaW5nMzIoNCArIG51bVRhYmxlcyAqIDggKyA0ICsgZm9ybWF0MzE0Lmxlbmd0aCk7CiAgICBmb3JtYXQzMTAxMiA9ICIiOwogICAgZm9yIChpID0gMCwgaWkgPSByYW5nZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgICByYW5nZSA9IHJhbmdlc1tpXTsKICAgICAgc3RhcnQgPSByYW5nZVswXTsKICAgICAgY29kZXMgPSByYW5nZVsyXTsKICAgICAgbGV0IGNvZGUgPSBjb2Rlc1swXTsKICAgICAgZm9yIChqID0gMSwgamogPSBjb2Rlcy5sZW5ndGg7IGogPCBqajsgKytqKSB7CiAgICAgICAgaWYgKGNvZGVzW2pdICE9PSBjb2Rlc1tqIC0gMV0gKyAxKSB7CiAgICAgICAgICBlbmQgPSByYW5nZVswXSArIGogLSAxOwogICAgICAgICAgZm9ybWF0MzEwMTIgKz0gc3RyaW5nMzIoc3RhcnQpICsgc3RyaW5nMzIoZW5kKSArIHN0cmluZzMyKGNvZGUpOwogICAgICAgICAgc3RhcnQgPSBlbmQgKyAxOwogICAgICAgICAgY29kZSA9IGNvZGVzW2pdOwogICAgICAgIH0KICAgICAgfQogICAgICBmb3JtYXQzMTAxMiArPSBzdHJpbmczMihzdGFydCkgKyBzdHJpbmczMihyYW5nZVsxXSkgKyBzdHJpbmczMihjb2RlKTsKICAgIH0KICAgIGhlYWRlcjMxMDEyID0gIlx4MDBceDBDIiArICJceDAwXHgwMCIgKyBzdHJpbmczMihmb3JtYXQzMTAxMi5sZW5ndGggKyAxNikgKyAiXHgwMFx4MDBceDAwXHgwMCIgKyBzdHJpbmczMihmb3JtYXQzMTAxMi5sZW5ndGggLyAxMik7CiAgfQogIHJldHVybiBjbWFwICsgIlx4MDBceDA0IiArIHN0cmluZzE2KGZvcm1hdDMxNC5sZW5ndGggKyA0KSArIGZvcm1hdDMxNCArIGhlYWRlcjMxMDEyICsgZm9ybWF0MzEwMTI7Cn0KZnVuY3Rpb24gdmFsaWRhdGVPUzJUYWJsZShvczIsIGZpbGUpIHsKICBmaWxlLnBvcyA9IChmaWxlLnN0YXJ0IHx8IDApICsgb3MyLm9mZnNldDsKICBjb25zdCB2ZXJzaW9uID0gZmlsZS5nZXRVaW50MTYoKTsKICBmaWxlLnNraXAoNjApOwogIGNvbnN0IHNlbGVjdGlvbiA9IGZpbGUuZ2V0VWludDE2KCk7CiAgaWYgKHZlcnNpb24gPCA0ICYmIHNlbGVjdGlvbiAmIDB4MDMwMCkgewogICAgcmV0dXJuIGZhbHNlOwogIH0KICBjb25zdCBmaXJzdENoYXIgPSBmaWxlLmdldFVpbnQxNigpOwogIGNvbnN0IGxhc3RDaGFyID0gZmlsZS5nZXRVaW50MTYoKTsKICBpZiAoZmlyc3RDaGFyID4gbGFzdENoYXIpIHsKICAgIHJldHVybiBmYWxzZTsKICB9CiAgZmlsZS5za2lwKDYpOwogIGNvbnN0IHVzV2luQXNjZW50ID0gZmlsZS5nZXRVaW50MTYoKTsKICBpZiAodXNXaW5Bc2NlbnQgPT09IDApIHsKICAgIHJldHVybiBmYWxzZTsKICB9CiAgb3MyLmRhdGFbOF0gPSBvczIuZGF0YVs5XSA9IDA7CiAgcmV0dXJuIHRydWU7Cn0KZnVuY3Rpb24gY3JlYXRlT1MyVGFibGUocHJvcGVydGllcywgY2hhcnN0cmluZ3MsIG92ZXJyaWRlKSB7CiAgb3ZlcnJpZGUgfHw9IHsKICAgIHVuaXRzUGVyRW06IDAsCiAgICB5TWF4OiAwLAogICAgeU1pbjogMCwKICAgIGFzY2VudDogMCwKICAgIGRlc2NlbnQ6IDAKICB9OwogIGxldCB1bFVuaWNvZGVSYW5nZTEgPSAwOwogIGxldCB1bFVuaWNvZGVSYW5nZTIgPSAwOwogIGxldCB1bFVuaWNvZGVSYW5nZTMgPSAwOwogIGxldCB1bFVuaWNvZGVSYW5nZTQgPSAwOwogIGxldCBmaXJzdENoYXJJbmRleCA9IG51bGw7CiAgbGV0IGxhc3RDaGFySW5kZXggPSAwOwogIGxldCBwb3NpdGlvbiA9IC0xOwogIGlmIChjaGFyc3RyaW5ncykgewogICAgZm9yIChsZXQgY29kZSBpbiBjaGFyc3RyaW5ncykgewogICAgICBjb2RlIHw9IDA7CiAgICAgIGlmIChmaXJzdENoYXJJbmRleCA+IGNvZGUgfHwgIWZpcnN0Q2hhckluZGV4KSB7CiAgICAgICAgZmlyc3RDaGFySW5kZXggPSBjb2RlOwogICAgICB9CiAgICAgIGlmIChsYXN0Q2hhckluZGV4IDwgY29kZSkgewogICAgICAgIGxhc3RDaGFySW5kZXggPSBjb2RlOwogICAgICB9CiAgICAgIHBvc2l0aW9uID0gZ2V0VW5pY29kZVJhbmdlRm9yKGNvZGUsIHBvc2l0aW9uKTsKICAgICAgaWYgKHBvc2l0aW9uIDwgMzIpIHsKICAgICAgICB1bFVuaWNvZGVSYW5nZTEgfD0gMSA8PCBwb3NpdGlvbjsKICAgICAgfSBlbHNlIGlmIChwb3NpdGlvbiA8IDY0KSB7CiAgICAgICAgdWxVbmljb2RlUmFuZ2UyIHw9IDEgPDwgcG9zaXRpb24gLSAzMjsKICAgICAgfSBlbHNlIGlmIChwb3NpdGlvbiA8IDk2KSB7CiAgICAgICAgdWxVbmljb2RlUmFuZ2UzIHw9IDEgPDwgcG9zaXRpb24gLSA2NDsKICAgICAgfSBlbHNlIGlmIChwb3NpdGlvbiA8IDEyMykgewogICAgICAgIHVsVW5pY29kZVJhbmdlNCB8PSAxIDw8IHBvc2l0aW9uIC0gOTY7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCJVbmljb2RlIHJhbmdlcyBCaXRzID4gMTIzIGFyZSByZXNlcnZlZCBmb3IgaW50ZXJuYWwgdXNhZ2UiKTsKICAgICAgfQogICAgfQogICAgaWYgKGxhc3RDaGFySW5kZXggPiAweGZmZmYpIHsKICAgICAgbGFzdENoYXJJbmRleCA9IDB4ZmZmZjsKICAgIH0KICB9IGVsc2UgewogICAgZmlyc3RDaGFySW5kZXggPSAwOwogICAgbGFzdENoYXJJbmRleCA9IDI1NTsKICB9CiAgY29uc3QgYmJveCA9IHByb3BlcnRpZXMuYmJveCB8fCBbMCwgMCwgMCwgMF07CiAgY29uc3QgdW5pdHNQZXJFbSA9IG92ZXJyaWRlLnVuaXRzUGVyRW0gfHwgKHByb3BlcnRpZXMuZm9udE1hdHJpeCA/IDEgLyBNYXRoLm1heCguLi5wcm9wZXJ0aWVzLmZvbnRNYXRyaXguc2xpY2UoMCwgNCkubWFwKE1hdGguYWJzKSkgOiAxMDAwKTsKICBjb25zdCBzY2FsZSA9IHByb3BlcnRpZXMuYXNjZW50U2NhbGVkID8gMS4wIDogdW5pdHNQZXJFbSAvIFBERl9HTFlQSF9TUEFDRV9VTklUUzsKICBjb25zdCB0eXBvQXNjZW50ID0gb3ZlcnJpZGUuYXNjZW50IHx8IE1hdGgucm91bmQoc2NhbGUgKiAocHJvcGVydGllcy5hc2NlbnQgfHwgYmJveFszXSkpOwogIGxldCB0eXBvRGVzY2VudCA9IG92ZXJyaWRlLmRlc2NlbnQgfHwgTWF0aC5yb3VuZChzY2FsZSAqIChwcm9wZXJ0aWVzLmRlc2NlbnQgfHwgYmJveFsxXSkpOwogIGlmICh0eXBvRGVzY2VudCA+IDAgJiYgcHJvcGVydGllcy5kZXNjZW50ID4gMCAmJiBiYm94WzFdIDwgMCkgewogICAgdHlwb0Rlc2NlbnQgPSAtdHlwb0Rlc2NlbnQ7CiAgfQogIGNvbnN0IHdpbkFzY2VudCA9IG92ZXJyaWRlLnlNYXggfHwgdHlwb0FzY2VudDsKICBjb25zdCB3aW5EZXNjZW50ID0gLW92ZXJyaWRlLnlNaW4gfHwgLXR5cG9EZXNjZW50OwogIHJldHVybiAiXHgwMFx4MDMiICsgIlx4MDJceDI0IiArICJceDAxXHhGNCIgKyAiXHgwMFx4MDUiICsgIlx4MDBceDAwIiArICJceDAyXHg4QSIgKyAiXHgwMlx4QkIiICsgIlx4MDBceDAwIiArICJceDAwXHg4QyIgKyAiXHgwMlx4OEEiICsgIlx4MDJceEJCIiArICJceDAwXHgwMCIgKyAiXHgwMVx4REYiICsgIlx4MDBceDMxIiArICJceDAxXHgwMiIgKyAiXHgwMFx4MDAiICsgIlx4MDBceDAwXHgwNiIgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKHByb3BlcnRpZXMuZml4ZWRQaXRjaCA/IDB4MDkgOiAweDAwKSArICJceDAwXHgwMFx4MDBceDAwXHgwMFx4MDAiICsgc3RyaW5nMzIodWxVbmljb2RlUmFuZ2UxKSArIHN0cmluZzMyKHVsVW5pY29kZVJhbmdlMikgKyBzdHJpbmczMih1bFVuaWNvZGVSYW5nZTMpICsgc3RyaW5nMzIodWxVbmljb2RlUmFuZ2U0KSArICJceDJBXHgzMlx4MzFceDJBIiArIHN0cmluZzE2KHByb3BlcnRpZXMuaXRhbGljQW5nbGUgPyAxIDogMCkgKyBzdHJpbmcxNihmaXJzdENoYXJJbmRleCB8fCBwcm9wZXJ0aWVzLmZpcnN0Q2hhcikgKyBzdHJpbmcxNihsYXN0Q2hhckluZGV4IHx8IHByb3BlcnRpZXMubGFzdENoYXIpICsgc3RyaW5nMTYodHlwb0FzY2VudCkgKyBzdHJpbmcxNih0eXBvRGVzY2VudCkgKyAiXHgwMFx4NjQiICsgc3RyaW5nMTYod2luQXNjZW50KSArIHN0cmluZzE2KHdpbkRlc2NlbnQpICsgIlx4MDBceDAwXHgwMFx4MDAiICsgIlx4MDBceDAwXHgwMFx4MDAiICsgc3RyaW5nMTYocHJvcGVydGllcy54SGVpZ2h0KSArIHN0cmluZzE2KHByb3BlcnRpZXMuY2FwSGVpZ2h0KSArIHN0cmluZzE2KDApICsgc3RyaW5nMTYoZmlyc3RDaGFySW5kZXggfHwgcHJvcGVydGllcy5maXJzdENoYXIpICsgIlx4MDBceDAzIjsKfQpmdW5jdGlvbiBjcmVhdGVQb3N0VGFibGUocHJvcGVydGllcykgewogIGNvbnN0IGFuZ2xlID0gTWF0aC5mbG9vcihwcm9wZXJ0aWVzLml0YWxpY0FuZ2xlICogMiAqKiAxNik7CiAgcmV0dXJuICJceDAwXHgwM1x4MDBceDAwIiArIHN0cmluZzMyKGFuZ2xlKSArICJceDAwXHgwMCIgKyAiXHgwMFx4MDAiICsgc3RyaW5nMzIocHJvcGVydGllcy5maXhlZFBpdGNoID8gMSA6IDApICsgIlx4MDBceDAwXHgwMFx4MDAiICsgIlx4MDBceDAwXHgwMFx4MDAiICsgIlx4MDBceDAwXHgwMFx4MDAiICsgIlx4MDBceDAwXHgwMFx4MDAiOwp9CmZ1bmN0aW9uIGNyZWF0ZVBvc3RzY3JpcHROYW1lKG5hbWUpIHsKICByZXR1cm4gbmFtZS5yZXBsYWNlQWxsKC9bXlx4MjEtXHg3RV18W1tcXSgpe308Pi8lXS9nLCAiIikuc2xpY2UoMCwgNjMpOwp9CmZ1bmN0aW9uIGNyZWF0ZU5hbWVUYWJsZShuYW1lLCBwcm90bykgewogIGlmICghcHJvdG8pIHsKICAgIHByb3RvID0gW1tdLCBbXV07CiAgfQogIGNvbnN0IHN0cmluZ3MgPSBbcHJvdG9bMF1bMF0gfHwgIk9yaWdpbmFsIGxpY2VuY2UiLCBwcm90b1swXVsxXSB8fCBuYW1lLCBwcm90b1swXVsyXSB8fCAiVW5rbm93biIsIHByb3RvWzBdWzNdIHx8ICJ1bmlxdWVJRCIsIHByb3RvWzBdWzRdIHx8IG5hbWUsIHByb3RvWzBdWzVdIHx8ICJWZXJzaW9uIDAuMTEiLCBwcm90b1swXVs2XSB8fCBjcmVhdGVQb3N0c2NyaXB0TmFtZShuYW1lKSwgcHJvdG9bMF1bN10gfHwgIlVua25vd24iLCBwcm90b1swXVs4XSB8fCAiVW5rbm93biIsIHByb3RvWzBdWzldIHx8ICJVbmtub3duIl07CiAgY29uc3Qgc3RyaW5nc1VuaWNvZGUgPSBbXTsKICBsZXQgaSwgaWksIGosIGpqLCBzdHI7CiAgZm9yIChpID0gMCwgaWkgPSBzdHJpbmdzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgIHN0ciA9IHByb3RvWzFdW2ldIHx8IHN0cmluZ3NbaV07CiAgICBjb25zdCBzdHJCdWZVbmljb2RlID0gW107CiAgICBmb3IgKGogPSAwLCBqaiA9IHN0ci5sZW5ndGg7IGogPCBqajsgaisrKSB7CiAgICAgIHN0ckJ1ZlVuaWNvZGUucHVzaChzdHJpbmcxNihzdHIuY2hhckNvZGVBdChqKSkpOwogICAgfQogICAgc3RyaW5nc1VuaWNvZGUucHVzaChzdHJCdWZVbmljb2RlLmpvaW4oIiIpKTsKICB9CiAgY29uc3QgbmFtZXMgPSBbc3RyaW5ncywgc3RyaW5nc1VuaWNvZGVdOwogIGNvbnN0IHBsYXRmb3JtcyA9IFsiXHgwMFx4MDEiLCAiXHgwMFx4MDMiXTsKICBjb25zdCBlbmNvZGluZ3MgPSBbIlx4MDBceDAwIiwgIlx4MDBceDAxIl07CiAgY29uc3QgbGFuZ3VhZ2VzID0gWyJceDAwXHgwMCIsICJceDA0XHgwOSJdOwogIGNvbnN0IG5hbWVzUmVjb3JkQ291bnQgPSBzdHJpbmdzLmxlbmd0aCAqIHBsYXRmb3Jtcy5sZW5ndGg7CiAgbGV0IG5hbWVUYWJsZSA9ICJceDAwXHgwMCIgKyBzdHJpbmcxNihuYW1lc1JlY29yZENvdW50KSArIHN0cmluZzE2KG5hbWVzUmVjb3JkQ291bnQgKiAxMiArIDYpOwogIGxldCBzdHJPZmZzZXQgPSAwOwogIGZvciAoaSA9IDAsIGlpID0gcGxhdGZvcm1zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgIGNvbnN0IHN0cnMgPSBuYW1lc1tpXTsKICAgIGZvciAoaiA9IDAsIGpqID0gc3Rycy5sZW5ndGg7IGogPCBqajsgaisrKSB7CiAgICAgIHN0ciA9IHN0cnNbal07CiAgICAgIGNvbnN0IG5hbWVSZWNvcmQgPSBwbGF0Zm9ybXNbaV0gKyBlbmNvZGluZ3NbaV0gKyBsYW5ndWFnZXNbaV0gKyBzdHJpbmcxNihqKSArIHN0cmluZzE2KHN0ci5sZW5ndGgpICsgc3RyaW5nMTYoc3RyT2Zmc2V0KTsKICAgICAgbmFtZVRhYmxlICs9IG5hbWVSZWNvcmQ7CiAgICAgIHN0ck9mZnNldCArPSBzdHIubGVuZ3RoOwogICAgfQogIH0KICBuYW1lVGFibGUgKz0gc3RyaW5ncy5qb2luKCIiKSArIHN0cmluZ3NVbmljb2RlLmpvaW4oIiIpOwogIHJldHVybiBuYW1lVGFibGU7Cn0KY2xhc3MgRm9udCB7CiAgY29uc3RydWN0b3IobmFtZSwgZmlsZSwgcHJvcGVydGllcywgZXZhbHVhdG9yT3B0aW9ucykgewogICAgdGhpcy5uYW1lID0gbmFtZTsKICAgIHRoaXMucHNOYW1lID0gbnVsbDsKICAgIHRoaXMubWltZXR5cGUgPSBudWxsOwogICAgdGhpcy5kaXNhYmxlRm9udEZhY2UgPSBldmFsdWF0b3JPcHRpb25zLmRpc2FibGVGb250RmFjZTsKICAgIHRoaXMuZm9udEV4dHJhUHJvcGVydGllcyA9IGV2YWx1YXRvck9wdGlvbnMuZm9udEV4dHJhUHJvcGVydGllczsKICAgIHRoaXMubG9hZGVkTmFtZSA9IHByb3BlcnRpZXMubG9hZGVkTmFtZTsKICAgIHRoaXMuaXNUeXBlM0ZvbnQgPSBwcm9wZXJ0aWVzLmlzVHlwZTNGb250OwogICAgdGhpcy5taXNzaW5nRmlsZSA9IGZhbHNlOwogICAgdGhpcy5jc3NGb250SW5mbyA9IHByb3BlcnRpZXMuY3NzRm9udEluZm87CiAgICB0aGlzLl9jaGFyc0NhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgIHRoaXMuX2dseXBoQ2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgbGV0IGlzU2VyaWZGb250ID0gISEocHJvcGVydGllcy5mbGFncyAmIEZvbnRGbGFncy5TZXJpZik7CiAgICBpZiAoIWlzU2VyaWZGb250ICYmICFwcm9wZXJ0aWVzLmlzU2ltdWxhdGVkRmxhZ3MpIHsKICAgICAgY29uc3QgYmFzZU5hbWUgPSBuYW1lLnJlcGxhY2VBbGwoL1ssX10vZywgIi0iKS5zcGxpdCgiLSIsIDEpWzBdLAogICAgICAgIHNlcmlmRm9udHMgPSBnZXRTZXJpZkZvbnRzKCk7CiAgICAgIGZvciAoY29uc3QgbmFtZVBhcnQgb2YgYmFzZU5hbWUuc3BsaXQoIisiKSkgewogICAgICAgIGlmIChzZXJpZkZvbnRzW25hbWVQYXJ0XSkgewogICAgICAgICAgaXNTZXJpZkZvbnQgPSB0cnVlOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICB0aGlzLmlzU2VyaWZGb250ID0gaXNTZXJpZkZvbnQ7CiAgICB0aGlzLmlzU3ltYm9saWNGb250ID0gISEocHJvcGVydGllcy5mbGFncyAmIEZvbnRGbGFncy5TeW1ib2xpYyk7CiAgICB0aGlzLmlzTW9ub3NwYWNlID0gISEocHJvcGVydGllcy5mbGFncyAmIEZvbnRGbGFncy5GaXhlZFBpdGNoKTsKICAgIGxldCB7CiAgICAgIHR5cGUsCiAgICAgIHN1YnR5cGUKICAgIH0gPSBwcm9wZXJ0aWVzOwogICAgdGhpcy50eXBlID0gdHlwZTsKICAgIHRoaXMuc3VidHlwZSA9IHN1YnR5cGU7CiAgICB0aGlzLnN5c3RlbUZvbnRJbmZvID0gcHJvcGVydGllcy5zeXN0ZW1Gb250SW5mbzsKICAgIGNvbnN0IG1hdGNoZXMgPSBuYW1lLm1hdGNoKC9eSW52YWxpZFBERmpzRm9udF8oLiopX1xkKyQvKTsKICAgIHRoaXMuaXNJbnZhbGlkUERGanNGb250ID0gISFtYXRjaGVzOwogICAgaWYgKHRoaXMuaXNJbnZhbGlkUERGanNGb250KSB7CiAgICAgIHRoaXMuZmFsbGJhY2tOYW1lID0gbWF0Y2hlc1sxXTsKICAgIH0gZWxzZSBpZiAodGhpcy5pc01vbm9zcGFjZSkgewogICAgICB0aGlzLmZhbGxiYWNrTmFtZSA9ICJtb25vc3BhY2UiOwogICAgfSBlbHNlIGlmICh0aGlzLmlzU2VyaWZGb250KSB7CiAgICAgIHRoaXMuZmFsbGJhY2tOYW1lID0gInNlcmlmIjsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMuZmFsbGJhY2tOYW1lID0gInNhbnMtc2VyaWYiOwogICAgfQogICAgaWYgKHRoaXMuc3lzdGVtRm9udEluZm8/Lmd1ZXNzRmFsbGJhY2spIHsKICAgICAgdGhpcy5zeXN0ZW1Gb250SW5mby5ndWVzc0ZhbGxiYWNrID0gZmFsc2U7CiAgICAgIHRoaXMuc3lzdGVtRm9udEluZm8uY3NzICs9IGAsJHt0aGlzLmZhbGxiYWNrTmFtZX1gOwogICAgfQogICAgdGhpcy5kaWZmZXJlbmNlcyA9IHByb3BlcnRpZXMuZGlmZmVyZW5jZXM7CiAgICB0aGlzLndpZHRocyA9IHByb3BlcnRpZXMud2lkdGhzOwogICAgdGhpcy5kZWZhdWx0V2lkdGggPSBwcm9wZXJ0aWVzLmRlZmF1bHRXaWR0aDsKICAgIHRoaXMuY29tcG9zaXRlID0gcHJvcGVydGllcy5jb21wb3NpdGU7CiAgICB0aGlzLmNNYXAgPSBwcm9wZXJ0aWVzLmNNYXA7CiAgICB0aGlzLmNhcEhlaWdodCA9IHByb3BlcnRpZXMuY2FwSGVpZ2h0IC8gUERGX0dMWVBIX1NQQUNFX1VOSVRTOwogICAgdGhpcy5hc2NlbnQgPSBwcm9wZXJ0aWVzLmFzY2VudCAvIFBERl9HTFlQSF9TUEFDRV9VTklUUzsKICAgIHRoaXMuZGVzY2VudCA9IHByb3BlcnRpZXMuZGVzY2VudCAvIFBERl9HTFlQSF9TUEFDRV9VTklUUzsKICAgIHRoaXMubGluZUhlaWdodCA9IHRoaXMuYXNjZW50IC0gdGhpcy5kZXNjZW50OwogICAgdGhpcy5mb250TWF0cml4ID0gcHJvcGVydGllcy5mb250TWF0cml4OwogICAgdGhpcy5iYm94ID0gcHJvcGVydGllcy5iYm94OwogICAgdGhpcy5kZWZhdWx0RW5jb2RpbmcgPSBwcm9wZXJ0aWVzLmRlZmF1bHRFbmNvZGluZzsKICAgIHRoaXMudG9Vbmljb2RlID0gcHJvcGVydGllcy50b1VuaWNvZGU7CiAgICB0aGlzLnRvRm9udENoYXIgPSBbXTsKICAgIGlmIChwcm9wZXJ0aWVzLnR5cGUgPT09ICJUeXBlMyIpIHsKICAgICAgZm9yIChsZXQgY2hhckNvZGUgPSAwOyBjaGFyQ29kZSA8IDI1NjsgY2hhckNvZGUrKykgewogICAgICAgIHRoaXMudG9Gb250Q2hhcltjaGFyQ29kZV0gPSB0aGlzLmRpZmZlcmVuY2VzW2NoYXJDb2RlXSB8fCBwcm9wZXJ0aWVzLmRlZmF1bHRFbmNvZGluZ1tjaGFyQ29kZV07CiAgICAgIH0KICAgICAgcmV0dXJuOwogICAgfQogICAgdGhpcy5jaWRFbmNvZGluZyA9IHByb3BlcnRpZXMuY2lkRW5jb2RpbmcgfHwgIiI7CiAgICB0aGlzLnZlcnRpY2FsID0gISFwcm9wZXJ0aWVzLnZlcnRpY2FsOwogICAgaWYgKHRoaXMudmVydGljYWwpIHsKICAgICAgdGhpcy52bWV0cmljcyA9IHByb3BlcnRpZXMudm1ldHJpY3M7CiAgICAgIHRoaXMuZGVmYXVsdFZNZXRyaWNzID0gcHJvcGVydGllcy5kZWZhdWx0Vk1ldHJpY3M7CiAgICB9CiAgICBpZiAoIWZpbGUgfHwgZmlsZS5pc0VtcHR5KSB7CiAgICAgIGlmIChmaWxlKSB7CiAgICAgICAgd2FybignRm9udCBmaWxlIGlzIGVtcHR5IGluICInICsgbmFtZSArICciICgnICsgdGhpcy5sb2FkZWROYW1lICsgIikiKTsKICAgICAgfQogICAgICB0aGlzLmZhbGxiYWNrVG9TeXN0ZW1Gb250KHByb3BlcnRpZXMpOwogICAgICByZXR1cm47CiAgICB9CiAgICBbdHlwZSwgc3VidHlwZV0gPSBnZXRGb250RmlsZVR5cGUoZmlsZSwgcHJvcGVydGllcyk7CiAgICBpZiAodHlwZSAhPT0gdGhpcy50eXBlIHx8IHN1YnR5cGUgIT09IHRoaXMuc3VidHlwZSkgewogICAgICBpbmZvKCJJbmNvbnNpc3RlbnQgZm9udCBmaWxlIFR5cGUvU3ViVHlwZSwgZXhwZWN0ZWQ6ICIgKyBgJHt0aGlzLnR5cGV9LyR7dGhpcy5zdWJ0eXBlfSBidXQgZm91bmQ6ICR7dHlwZX0vJHtzdWJ0eXBlfS5gKTsKICAgIH0KICAgIGxldCBkYXRhOwogICAgdHJ5IHsKICAgICAgc3dpdGNoICh0eXBlKSB7CiAgICAgICAgY2FzZSAiTU1UeXBlMSI6CiAgICAgICAgICBpbmZvKCJNTVR5cGUxIGZvbnQgKCIgKyBuYW1lICsgIiksIGZhbGxpbmcgYmFjayB0byBUeXBlMS4iKTsKICAgICAgICBjYXNlICJUeXBlMSI6CiAgICAgICAgY2FzZSAiQ0lERm9udFR5cGUwIjoKICAgICAgICAgIHRoaXMubWltZXR5cGUgPSAiZm9udC9vcGVudHlwZSI7CiAgICAgICAgICBjb25zdCBjZmYgPSBzdWJ0eXBlID09PSAiVHlwZTFDIiB8fCBzdWJ0eXBlID09PSAiQ0lERm9udFR5cGUwQyIgPyBuZXcgQ0ZGRm9udChmaWxlLCBwcm9wZXJ0aWVzKSA6IG5ldyBUeXBlMUZvbnQobmFtZSwgZmlsZSwgcHJvcGVydGllcyk7CiAgICAgICAgICBhZGp1c3RXaWR0aHMocHJvcGVydGllcyk7CiAgICAgICAgICBkYXRhID0gdGhpcy5jb252ZXJ0KG5hbWUsIGNmZiwgcHJvcGVydGllcyk7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJPcGVuVHlwZSI6CiAgICAgICAgY2FzZSAiVHJ1ZVR5cGUiOgogICAgICAgIGNhc2UgIkNJREZvbnRUeXBlMiI6CiAgICAgICAgICB0aGlzLm1pbWV0eXBlID0gImZvbnQvb3BlbnR5cGUiOwogICAgICAgICAgZGF0YSA9IHRoaXMuY2hlY2tBbmRSZXBhaXIobmFtZSwgZmlsZSwgcHJvcGVydGllcyk7CiAgICAgICAgICBhZGp1c3RXaWR0aHMocHJvcGVydGllcyk7CiAgICAgICAgICBpZiAodGhpcy5pc09wZW5UeXBlKSB7CiAgICAgICAgICAgIHR5cGUgPSAiT3BlblR5cGUiOwogICAgICAgICAgfQogICAgICAgICAgYnJlYWs7CiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcihgRm9udCAke3R5cGV9IGlzIG5vdCBzdXBwb3J0ZWRgKTsKICAgICAgfQogICAgfSBjYXRjaCAoZSkgewogICAgICB3YXJuKGUpOwogICAgICB0aGlzLmZhbGxiYWNrVG9TeXN0ZW1Gb250KHByb3BlcnRpZXMpOwogICAgICByZXR1cm47CiAgICB9CiAgICBhbWVuZEZhbGxiYWNrVG9Vbmljb2RlKHByb3BlcnRpZXMpOwogICAgdGhpcy5kYXRhID0gZGF0YTsKICAgIHRoaXMudHlwZSA9IHR5cGU7CiAgICB0aGlzLnN1YnR5cGUgPSBzdWJ0eXBlOwogICAgdGhpcy5mb250TWF0cml4ID0gcHJvcGVydGllcy5mb250TWF0cml4OwogICAgdGhpcy53aWR0aHMgPSBwcm9wZXJ0aWVzLndpZHRoczsKICAgIHRoaXMuZGVmYXVsdFdpZHRoID0gcHJvcGVydGllcy5kZWZhdWx0V2lkdGg7CiAgICB0aGlzLnRvVW5pY29kZSA9IHByb3BlcnRpZXMudG9Vbmljb2RlOwogICAgdGhpcy5zZWFjTWFwID0gcHJvcGVydGllcy5zZWFjTWFwOwogIH0KICBnZXQgcmVuZGVyZXIoKSB7CiAgICBjb25zdCByZW5kZXJlciA9IEZvbnRSZW5kZXJlckZhY3RvcnkuY3JlYXRlKHRoaXMsIFNFQUNfQU5BTFlTSVNfRU5BQkxFRCk7CiAgICByZXR1cm4gc2hhZG93KHRoaXMsICJyZW5kZXJlciIsIHJlbmRlcmVyKTsKICB9CiAgZXhwb3J0RGF0YSgpIHsKICAgIGNvbnN0IGV4cG9ydERhdGFQcm9wcyA9IHRoaXMuZm9udEV4dHJhUHJvcGVydGllcyA/IFsuLi5FWFBPUlRfREFUQV9QUk9QRVJUSUVTLCAuLi5FWFBPUlRfREFUQV9FWFRSQV9QUk9QRVJUSUVTXSA6IEVYUE9SVF9EQVRBX1BST1BFUlRJRVM7CiAgICBjb25zdCBkYXRhID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgIGZvciAoY29uc3QgcHJvcCBvZiBleHBvcnREYXRhUHJvcHMpIHsKICAgICAgY29uc3QgdmFsdWUgPSB0aGlzW3Byb3BdOwogICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkgewogICAgICAgIGRhdGFbcHJvcF0gPSB2YWx1ZTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIGRhdGE7CiAgfQogIGZhbGxiYWNrVG9TeXN0ZW1Gb250KHByb3BlcnRpZXMpIHsKICAgIHRoaXMubWlzc2luZ0ZpbGUgPSB0cnVlOwogICAgY29uc3QgewogICAgICBuYW1lLAogICAgICB0eXBlCiAgICB9ID0gdGhpczsKICAgIGxldCBmb250TmFtZSA9IG5vcm1hbGl6ZUZvbnROYW1lKG5hbWUpOwogICAgY29uc3Qgc3RkRm9udE1hcCA9IGdldFN0ZEZvbnRNYXAoKSwKICAgICAgbm9uU3RkRm9udE1hcCA9IGdldE5vblN0ZEZvbnRNYXAoKTsKICAgIGNvbnN0IGlzU3RhbmRhcmRGb250ID0gISFzdGRGb250TWFwW2ZvbnROYW1lXTsKICAgIGNvbnN0IGlzTWFwcGVkVG9TdGFuZGFyZEZvbnQgPSAhIShub25TdGRGb250TWFwW2ZvbnROYW1lXSAmJiBzdGRGb250TWFwW25vblN0ZEZvbnRNYXBbZm9udE5hbWVdXSk7CiAgICBmb250TmFtZSA9IHN0ZEZvbnRNYXBbZm9udE5hbWVdIHx8IG5vblN0ZEZvbnRNYXBbZm9udE5hbWVdIHx8IGZvbnROYW1lOwogICAgY29uc3QgZm9udEJhc2ljTWV0cmljc01hcCA9IGdldEZvbnRCYXNpY01ldHJpY3MoKTsKICAgIGNvbnN0IG1ldHJpY3MgPSBmb250QmFzaWNNZXRyaWNzTWFwW2ZvbnROYW1lXTsKICAgIGlmIChtZXRyaWNzKSB7CiAgICAgIGlmIChpc05hTih0aGlzLmFzY2VudCkpIHsKICAgICAgICB0aGlzLmFzY2VudCA9IG1ldHJpY3MuYXNjZW50IC8gUERGX0dMWVBIX1NQQUNFX1VOSVRTOwogICAgICB9CiAgICAgIGlmIChpc05hTih0aGlzLmRlc2NlbnQpKSB7CiAgICAgICAgdGhpcy5kZXNjZW50ID0gbWV0cmljcy5kZXNjZW50IC8gUERGX0dMWVBIX1NQQUNFX1VOSVRTOwogICAgICB9CiAgICAgIGlmIChpc05hTih0aGlzLmNhcEhlaWdodCkpIHsKICAgICAgICB0aGlzLmNhcEhlaWdodCA9IG1ldHJpY3MuY2FwSGVpZ2h0IC8gUERGX0dMWVBIX1NQQUNFX1VOSVRTOwogICAgICB9CiAgICB9CiAgICB0aGlzLmJvbGQgPSAvYm9sZC9naS50ZXN0KGZvbnROYW1lKTsKICAgIHRoaXMuaXRhbGljID0gL29ibGlxdWV8aXRhbGljL2dpLnRlc3QoZm9udE5hbWUpOwogICAgdGhpcy5ibGFjayA9IC9CbGFjay9nLnRlc3QobmFtZSk7CiAgICBjb25zdCBpc05hcnJvdyA9IC9OYXJyb3cvZy50ZXN0KG5hbWUpOwogICAgdGhpcy5yZW1lYXN1cmUgPSAoIWlzU3RhbmRhcmRGb250IHx8IGlzTmFycm93KSAmJiBPYmplY3Qua2V5cyh0aGlzLndpZHRocykubGVuZ3RoID4gMDsKICAgIGlmICgoaXNTdGFuZGFyZEZvbnQgfHwgaXNNYXBwZWRUb1N0YW5kYXJkRm9udCkgJiYgdHlwZSA9PT0gIkNJREZvbnRUeXBlMiIgJiYgdGhpcy5jaWRFbmNvZGluZy5zdGFydHNXaXRoKCJJZGVudGl0eS0iKSkgewogICAgICBjb25zdCBjaWRUb0dpZE1hcCA9IHByb3BlcnRpZXMuY2lkVG9HaWRNYXA7CiAgICAgIGNvbnN0IG1hcCA9IFtdOwogICAgICBhcHBseVN0YW5kYXJkRm9udEdseXBoTWFwKG1hcCwgZ2V0R2x5cGhNYXBGb3JTdGFuZGFyZEZvbnRzKCkpOwogICAgICBpZiAoL0FyaWFsLT9CbGFjay9pLnRlc3QobmFtZSkpIHsKICAgICAgICBhcHBseVN0YW5kYXJkRm9udEdseXBoTWFwKG1hcCwgZ2V0U3VwcGxlbWVudGFsR2x5cGhNYXBGb3JBcmlhbEJsYWNrKCkpOwogICAgICB9IGVsc2UgaWYgKC9DYWxpYnJpL2kudGVzdChuYW1lKSkgewogICAgICAgIGFwcGx5U3RhbmRhcmRGb250R2x5cGhNYXAobWFwLCBnZXRTdXBwbGVtZW50YWxHbHlwaE1hcEZvckNhbGlicmkoKSk7CiAgICAgIH0KICAgICAgaWYgKGNpZFRvR2lkTWFwKSB7CiAgICAgICAgZm9yIChjb25zdCBjaGFyQ29kZSBpbiBtYXApIHsKICAgICAgICAgIGNvbnN0IGNpZCA9IG1hcFtjaGFyQ29kZV07CiAgICAgICAgICBpZiAoY2lkVG9HaWRNYXBbY2lkXSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIG1hcFsrY2hhckNvZGVdID0gY2lkVG9HaWRNYXBbY2lkXTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKGNpZFRvR2lkTWFwLmxlbmd0aCAhPT0gdGhpcy50b1VuaWNvZGUubGVuZ3RoICYmIHByb3BlcnRpZXMuaGFzSW5jbHVkZWRUb1VuaWNvZGVNYXAgJiYgdGhpcy50b1VuaWNvZGUgaW5zdGFuY2VvZiBJZGVudGl0eVRvVW5pY29kZU1hcCkgewogICAgICAgICAgdGhpcy50b1VuaWNvZGUuZm9yRWFjaChmdW5jdGlvbiAoY2hhckNvZGUsIHVuaWNvZGVDaGFyQ29kZSkgewogICAgICAgICAgICBjb25zdCBjaWQgPSBtYXBbY2hhckNvZGVdOwogICAgICAgICAgICBpZiAoY2lkVG9HaWRNYXBbY2lkXSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgbWFwWytjaGFyQ29kZV0gPSB1bmljb2RlQ2hhckNvZGU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfQogICAgICBpZiAoISh0aGlzLnRvVW5pY29kZSBpbnN0YW5jZW9mIElkZW50aXR5VG9Vbmljb2RlTWFwKSkgewogICAgICAgIHRoaXMudG9Vbmljb2RlLmZvckVhY2goZnVuY3Rpb24gKGNoYXJDb2RlLCB1bmljb2RlQ2hhckNvZGUpIHsKICAgICAgICAgIG1hcFsrY2hhckNvZGVdID0gdW5pY29kZUNoYXJDb2RlOwogICAgICAgIH0pOwogICAgICB9CiAgICAgIHRoaXMudG9Gb250Q2hhciA9IG1hcDsKICAgICAgdGhpcy50b1VuaWNvZGUgPSBuZXcgVG9Vbmljb2RlTWFwKG1hcCk7CiAgICB9IGVsc2UgaWYgKC9TeW1ib2wvaS50ZXN0KGZvbnROYW1lKSkgewogICAgICB0aGlzLnRvRm9udENoYXIgPSBidWlsZFRvRm9udENoYXIoU3ltYm9sU2V0RW5jb2RpbmcsIGdldEdseXBoc1VuaWNvZGUoKSwgdGhpcy5kaWZmZXJlbmNlcyk7CiAgICB9IGVsc2UgaWYgKC9EaW5nYmF0cy9pLnRlc3QoZm9udE5hbWUpKSB7CiAgICAgIHRoaXMudG9Gb250Q2hhciA9IGJ1aWxkVG9Gb250Q2hhcihaYXBmRGluZ2JhdHNFbmNvZGluZywgZ2V0RGluZ2JhdHNHbHlwaHNVbmljb2RlKCksIHRoaXMuZGlmZmVyZW5jZXMpOwogICAgfSBlbHNlIGlmIChpc1N0YW5kYXJkRm9udCB8fCBpc01hcHBlZFRvU3RhbmRhcmRGb250KSB7CiAgICAgIGNvbnN0IG1hcCA9IGJ1aWxkVG9Gb250Q2hhcih0aGlzLmRlZmF1bHRFbmNvZGluZywgZ2V0R2x5cGhzVW5pY29kZSgpLCB0aGlzLmRpZmZlcmVuY2VzKTsKICAgICAgaWYgKHR5cGUgPT09ICJDSURGb250VHlwZTIiICYmICF0aGlzLmNpZEVuY29kaW5nLnN0YXJ0c1dpdGgoIklkZW50aXR5LSIpICYmICEodGhpcy50b1VuaWNvZGUgaW5zdGFuY2VvZiBJZGVudGl0eVRvVW5pY29kZU1hcCkpIHsKICAgICAgICB0aGlzLnRvVW5pY29kZS5mb3JFYWNoKGZ1bmN0aW9uIChjaGFyQ29kZSwgdW5pY29kZUNoYXJDb2RlKSB7CiAgICAgICAgICBtYXBbK2NoYXJDb2RlXSA9IHVuaWNvZGVDaGFyQ29kZTsKICAgICAgICB9KTsKICAgICAgfQogICAgICB0aGlzLnRvRm9udENoYXIgPSBtYXA7CiAgICB9IGVsc2UgewogICAgICBjb25zdCBnbHlwaHNVbmljb2RlTWFwID0gZ2V0R2x5cGhzVW5pY29kZSgpOwogICAgICBjb25zdCBtYXAgPSBbXTsKICAgICAgdGhpcy50b1VuaWNvZGUuZm9yRWFjaCgoY2hhckNvZGUsIHVuaWNvZGVDaGFyQ29kZSkgPT4gewogICAgICAgIGlmICghdGhpcy5jb21wb3NpdGUpIHsKICAgICAgICAgIGNvbnN0IGdseXBoTmFtZSA9IHRoaXMuZGlmZmVyZW5jZXNbY2hhckNvZGVdIHx8IHRoaXMuZGVmYXVsdEVuY29kaW5nW2NoYXJDb2RlXTsKICAgICAgICAgIGNvbnN0IHVuaWNvZGUgPSBnZXRVbmljb2RlRm9yR2x5cGgoZ2x5cGhOYW1lLCBnbHlwaHNVbmljb2RlTWFwKTsKICAgICAgICAgIGlmICh1bmljb2RlICE9PSAtMSkgewogICAgICAgICAgICB1bmljb2RlQ2hhckNvZGUgPSB1bmljb2RlOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBtYXBbK2NoYXJDb2RlXSA9IHVuaWNvZGVDaGFyQ29kZTsKICAgICAgfSk7CiAgICAgIGlmICh0aGlzLmNvbXBvc2l0ZSAmJiB0aGlzLnRvVW5pY29kZSBpbnN0YW5jZW9mIElkZW50aXR5VG9Vbmljb2RlTWFwKSB7CiAgICAgICAgaWYgKC9UYWhvbWF8VmVyZGFuYS9pLnRlc3QobmFtZSkpIHsKICAgICAgICAgIGFwcGx5U3RhbmRhcmRGb250R2x5cGhNYXAobWFwLCBnZXRHbHlwaE1hcEZvclN0YW5kYXJkRm9udHMoKSk7CiAgICAgICAgfQogICAgICB9CiAgICAgIHRoaXMudG9Gb250Q2hhciA9IG1hcDsKICAgIH0KICAgIGFtZW5kRmFsbGJhY2tUb1VuaWNvZGUocHJvcGVydGllcyk7CiAgICB0aGlzLmxvYWRlZE5hbWUgPSBmb250TmFtZS5zcGxpdCgiLSIsIDEpWzBdOwogIH0KICBjaGVja0FuZFJlcGFpcihuYW1lLCBmb250LCBwcm9wZXJ0aWVzKSB7CiAgICBjb25zdCBWQUxJRF9UQUJMRVMgPSBbIk9TLzIiLCAiY21hcCIsICJoZWFkIiwgImhoZWEiLCAiaG10eCIsICJtYXhwIiwgIm5hbWUiLCAicG9zdCIsICJsb2NhIiwgImdseWYiLCAiZnBnbSIsICJwcmVwIiwgImN2dCAiLCAiQ0ZGICJdOwogICAgZnVuY3Rpb24gcmVhZFRhYmxlcyhmaWxlLCBudW1UYWJsZXMpIHsKICAgICAgY29uc3QgdGFibGVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgICAgdGFibGVzWyJPUy8yIl0gPSBudWxsOwogICAgICB0YWJsZXMuY21hcCA9IG51bGw7CiAgICAgIHRhYmxlcy5oZWFkID0gbnVsbDsKICAgICAgdGFibGVzLmhoZWEgPSBudWxsOwogICAgICB0YWJsZXMuaG10eCA9IG51bGw7CiAgICAgIHRhYmxlcy5tYXhwID0gbnVsbDsKICAgICAgdGFibGVzLm5hbWUgPSBudWxsOwogICAgICB0YWJsZXMucG9zdCA9IG51bGw7CiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtVGFibGVzOyBpKyspIHsKICAgICAgICBjb25zdCB0YWJsZSA9IHJlYWRUYWJsZUVudHJ5KGZpbGUpOwogICAgICAgIGlmICghVkFMSURfVEFCTEVTLmluY2x1ZGVzKHRhYmxlLnRhZykpIHsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgICBpZiAodGFibGUubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CiAgICAgICAgdGFibGVzW3RhYmxlLnRhZ10gPSB0YWJsZTsKICAgICAgfQogICAgICByZXR1cm4gdGFibGVzOwogICAgfQogICAgZnVuY3Rpb24gcmVhZFRhYmxlRW50cnkoZmlsZSkgewogICAgICBjb25zdCB0YWcgPSBmaWxlLmdldFN0cmluZyg0KTsKICAgICAgY29uc3QgY2hlY2tzdW0gPSBmaWxlLmdldEludDMyKCkgPj4+IDA7CiAgICAgIGNvbnN0IG9mZnNldCA9IGZpbGUuZ2V0SW50MzIoKSA+Pj4gMDsKICAgICAgY29uc3QgbGVuZ3RoID0gZmlsZS5nZXRJbnQzMigpID4+PiAwOwogICAgICBjb25zdCBwcmV2aW91c1Bvc2l0aW9uID0gZmlsZS5wb3M7CiAgICAgIGZpbGUucG9zID0gZmlsZS5zdGFydCB8fCAwOwogICAgICBmaWxlLnNraXAob2Zmc2V0KTsKICAgICAgY29uc3QgZGF0YSA9IGZpbGUuZ2V0Qnl0ZXMobGVuZ3RoKTsKICAgICAgZmlsZS5wb3MgPSBwcmV2aW91c1Bvc2l0aW9uOwogICAgICBpZiAodGFnID09PSAiaGVhZCIpIHsKICAgICAgICBkYXRhWzhdID0gZGF0YVs5XSA9IGRhdGFbMTBdID0gZGF0YVsxMV0gPSAwOwogICAgICAgIGRhdGFbMTddIHw9IDB4MjA7CiAgICAgIH0KICAgICAgcmV0dXJuIHsKICAgICAgICB0YWcsCiAgICAgICAgY2hlY2tzdW0sCiAgICAgICAgbGVuZ3RoLAogICAgICAgIG9mZnNldCwKICAgICAgICBkYXRhCiAgICAgIH07CiAgICB9CiAgICBmdW5jdGlvbiByZWFkT3BlblR5cGVIZWFkZXIodHRmKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgdmVyc2lvbjogdHRmLmdldFN0cmluZyg0KSwKICAgICAgICBudW1UYWJsZXM6IHR0Zi5nZXRVaW50MTYoKSwKICAgICAgICBzZWFyY2hSYW5nZTogdHRmLmdldFVpbnQxNigpLAogICAgICAgIGVudHJ5U2VsZWN0b3I6IHR0Zi5nZXRVaW50MTYoKSwKICAgICAgICByYW5nZVNoaWZ0OiB0dGYuZ2V0VWludDE2KCkKICAgICAgfTsKICAgIH0KICAgIGZ1bmN0aW9uIHJlYWRUcnVlVHlwZUNvbGxlY3Rpb25IZWFkZXIodHRjKSB7CiAgICAgIGNvbnN0IHR0Y1RhZyA9IHR0Yy5nZXRTdHJpbmcoNCk7CiAgICAgIGFzc2VydCh0dGNUYWcgPT09ICJ0dGNmIiwgIk11c3QgYmUgYSBUcnVlVHlwZSBDb2xsZWN0aW9uIGZvbnQuIik7CiAgICAgIGNvbnN0IG1ham9yVmVyc2lvbiA9IHR0Yy5nZXRVaW50MTYoKTsKICAgICAgY29uc3QgbWlub3JWZXJzaW9uID0gdHRjLmdldFVpbnQxNigpOwogICAgICBjb25zdCBudW1Gb250cyA9IHR0Yy5nZXRJbnQzMigpID4+PiAwOwogICAgICBjb25zdCBvZmZzZXRUYWJsZSA9IFtdOwogICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUZvbnRzOyBpKyspIHsKICAgICAgICBvZmZzZXRUYWJsZS5wdXNoKHR0Yy5nZXRJbnQzMigpID4+PiAwKTsKICAgICAgfQogICAgICBjb25zdCBoZWFkZXIgPSB7CiAgICAgICAgdHRjVGFnLAogICAgICAgIG1ham9yVmVyc2lvbiwKICAgICAgICBtaW5vclZlcnNpb24sCiAgICAgICAgbnVtRm9udHMsCiAgICAgICAgb2Zmc2V0VGFibGUKICAgICAgfTsKICAgICAgc3dpdGNoIChtYWpvclZlcnNpb24pIHsKICAgICAgICBjYXNlIDE6CiAgICAgICAgICByZXR1cm4gaGVhZGVyOwogICAgICAgIGNhc2UgMjoKICAgICAgICAgIGhlYWRlci5kc2lnVGFnID0gdHRjLmdldEludDMyKCkgPj4+IDA7CiAgICAgICAgICBoZWFkZXIuZHNpZ0xlbmd0aCA9IHR0Yy5nZXRJbnQzMigpID4+PiAwOwogICAgICAgICAgaGVhZGVyLmRzaWdPZmZzZXQgPSB0dGMuZ2V0SW50MzIoKSA+Pj4gMDsKICAgICAgICAgIHJldHVybiBoZWFkZXI7CiAgICAgIH0KICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKGBJbnZhbGlkIFRydWVUeXBlIENvbGxlY3Rpb24gbWFqb3JWZXJzaW9uOiAke21ham9yVmVyc2lvbn0uYCk7CiAgICB9CiAgICBmdW5jdGlvbiByZWFkVHJ1ZVR5cGVDb2xsZWN0aW9uRGF0YSh0dGMsIGZvbnROYW1lKSB7CiAgICAgIGNvbnN0IHsKICAgICAgICBudW1Gb250cywKICAgICAgICBvZmZzZXRUYWJsZQogICAgICB9ID0gcmVhZFRydWVUeXBlQ29sbGVjdGlvbkhlYWRlcih0dGMpOwogICAgICBjb25zdCBmb250TmFtZVBhcnRzID0gZm9udE5hbWUuc3BsaXQoIisiKTsKICAgICAgbGV0IGZhbGxiYWNrRGF0YTsKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1Gb250czsgaSsrKSB7CiAgICAgICAgdHRjLnBvcyA9ICh0dGMuc3RhcnQgfHwgMCkgKyBvZmZzZXRUYWJsZVtpXTsKICAgICAgICBjb25zdCBwb3RlbnRpYWxIZWFkZXIgPSByZWFkT3BlblR5cGVIZWFkZXIodHRjKTsKICAgICAgICBjb25zdCBwb3RlbnRpYWxUYWJsZXMgPSByZWFkVGFibGVzKHR0YywgcG90ZW50aWFsSGVhZGVyLm51bVRhYmxlcyk7CiAgICAgICAgaWYgKCFwb3RlbnRpYWxUYWJsZXMubmFtZSkgewogICAgICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCdUcnVlVHlwZSBDb2xsZWN0aW9uIGZvbnQgbXVzdCBjb250YWluIGEgIm5hbWUiIHRhYmxlLicpOwogICAgICAgIH0KICAgICAgICBjb25zdCBbbmFtZVRhYmxlXSA9IHJlYWROYW1lVGFibGUocG90ZW50aWFsVGFibGVzLm5hbWUpOwogICAgICAgIGZvciAobGV0IGogPSAwLCBqaiA9IG5hbWVUYWJsZS5sZW5ndGg7IGogPCBqajsgaisrKSB7CiAgICAgICAgICBmb3IgKGxldCBrID0gMCwga2sgPSBuYW1lVGFibGVbal0ubGVuZ3RoOyBrIDwga2s7IGsrKykgewogICAgICAgICAgICBjb25zdCBuYW1lRW50cnkgPSBuYW1lVGFibGVbal1ba10/LnJlcGxhY2VBbGwoL1xzL2csICIiKTsKICAgICAgICAgICAgaWYgKCFuYW1lRW50cnkpIHsKICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAobmFtZUVudHJ5ID09PSBmb250TmFtZSkgewogICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBoZWFkZXI6IHBvdGVudGlhbEhlYWRlciwKICAgICAgICAgICAgICAgIHRhYmxlczogcG90ZW50aWFsVGFibGVzCiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoZm9udE5hbWVQYXJ0cy5sZW5ndGggPCAyKSB7CiAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZm9yIChjb25zdCBwYXJ0IG9mIGZvbnROYW1lUGFydHMpIHsKICAgICAgICAgICAgICBpZiAobmFtZUVudHJ5ID09PSBwYXJ0KSB7CiAgICAgICAgICAgICAgICBmYWxsYmFja0RhdGEgPSB7CiAgICAgICAgICAgICAgICAgIG5hbWU6IHBhcnQsCiAgICAgICAgICAgICAgICAgIGhlYWRlcjogcG90ZW50aWFsSGVhZGVyLAogICAgICAgICAgICAgICAgICB0YWJsZXM6IHBvdGVudGlhbFRhYmxlcwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKGZhbGxiYWNrRGF0YSkgewogICAgICAgIHdhcm4oYFRydWVUeXBlIENvbGxlY3Rpb24gZG9lcyBub3QgY29udGFpbiAiJHtmb250TmFtZX0iIGZvbnQsIGAgKyBgZmFsbGluZyBiYWNrIHRvICIke2ZhbGxiYWNrRGF0YS5uYW1lfSIgZm9udCBpbnN0ZWFkLmApOwogICAgICAgIHJldHVybiB7CiAgICAgICAgICBoZWFkZXI6IGZhbGxiYWNrRGF0YS5oZWFkZXIsCiAgICAgICAgICB0YWJsZXM6IGZhbGxiYWNrRGF0YS50YWJsZXMKICAgICAgICB9OwogICAgICB9CiAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcihgVHJ1ZVR5cGUgQ29sbGVjdGlvbiBkb2VzIG5vdCBjb250YWluICIke2ZvbnROYW1lfSIgZm9udC5gKTsKICAgIH0KICAgIGZ1bmN0aW9uIHJlYWRDbWFwVGFibGUoY21hcCwgZmlsZSwgaXNTeW1ib2xpY0ZvbnQsIGhhc0VuY29kaW5nKSB7CiAgICAgIGlmICghY21hcCkgewogICAgICAgIHdhcm4oIk5vIGNtYXAgdGFibGUgYXZhaWxhYmxlLiIpOwogICAgICAgIHJldHVybiB7CiAgICAgICAgICBwbGF0Zm9ybUlkOiAtMSwKICAgICAgICAgIGVuY29kaW5nSWQ6IC0xLAogICAgICAgICAgbWFwcGluZ3M6IFtdLAogICAgICAgICAgaGFzU2hvcnRDbWFwOiBmYWxzZQogICAgICAgIH07CiAgICAgIH0KICAgICAgbGV0IHNlZ21lbnQ7CiAgICAgIGxldCBzdGFydCA9IChmaWxlLnN0YXJ0IHx8IDApICsgY21hcC5vZmZzZXQ7CiAgICAgIGZpbGUucG9zID0gc3RhcnQ7CiAgICAgIGZpbGUuc2tpcCgyKTsKICAgICAgY29uc3QgbnVtVGFibGVzID0gZmlsZS5nZXRVaW50MTYoKTsKICAgICAgbGV0IHBvdGVudGlhbFRhYmxlOwogICAgICBsZXQgY2FuQnJlYWsgPSBmYWxzZTsKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1UYWJsZXM7IGkrKykgewogICAgICAgIGNvbnN0IHBsYXRmb3JtSWQgPSBmaWxlLmdldFVpbnQxNigpOwogICAgICAgIGNvbnN0IGVuY29kaW5nSWQgPSBmaWxlLmdldFVpbnQxNigpOwogICAgICAgIGNvbnN0IG9mZnNldCA9IGZpbGUuZ2V0SW50MzIoKSA+Pj4gMDsKICAgICAgICBsZXQgdXNlVGFibGUgPSBmYWxzZTsKICAgICAgICBpZiAocG90ZW50aWFsVGFibGU/LnBsYXRmb3JtSWQgPT09IHBsYXRmb3JtSWQgJiYgcG90ZW50aWFsVGFibGU/LmVuY29kaW5nSWQgPT09IGVuY29kaW5nSWQpIHsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgICBpZiAocGxhdGZvcm1JZCA9PT0gMCAmJiAoZW5jb2RpbmdJZCA9PT0gMCB8fCBlbmNvZGluZ0lkID09PSAxIHx8IGVuY29kaW5nSWQgPT09IDMpKSB7CiAgICAgICAgICB1c2VUYWJsZSA9IHRydWU7CiAgICAgICAgfSBlbHNlIGlmIChwbGF0Zm9ybUlkID09PSAxICYmIGVuY29kaW5nSWQgPT09IDApIHsKICAgICAgICAgIHVzZVRhYmxlID0gdHJ1ZTsKICAgICAgICB9IGVsc2UgaWYgKHBsYXRmb3JtSWQgPT09IDMgJiYgZW5jb2RpbmdJZCA9PT0gMSAmJiAoaGFzRW5jb2RpbmcgfHwgIXBvdGVudGlhbFRhYmxlKSkgewogICAgICAgICAgdXNlVGFibGUgPSB0cnVlOwogICAgICAgICAgaWYgKCFpc1N5bWJvbGljRm9udCkgewogICAgICAgICAgICBjYW5CcmVhayA9IHRydWU7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmIChpc1N5bWJvbGljRm9udCAmJiBwbGF0Zm9ybUlkID09PSAzICYmIGVuY29kaW5nSWQgPT09IDApIHsKICAgICAgICAgIHVzZVRhYmxlID0gdHJ1ZTsKICAgICAgICAgIGxldCBjb3JyZWN0bHlTb3J0ZWQgPSB0cnVlOwogICAgICAgICAgaWYgKGkgPCBudW1UYWJsZXMgLSAxKSB7CiAgICAgICAgICAgIGNvbnN0IG5leHRCeXRlcyA9IGZpbGUucGVla0J5dGVzKDIpLAogICAgICAgICAgICAgIG5leHRQbGF0Zm9ybUlkID0gaW50MTYobmV4dEJ5dGVzWzBdLCBuZXh0Qnl0ZXNbMV0pOwogICAgICAgICAgICBpZiAobmV4dFBsYXRmb3JtSWQgPCBwbGF0Zm9ybUlkKSB7CiAgICAgICAgICAgICAgY29ycmVjdGx5U29ydGVkID0gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmIChjb3JyZWN0bHlTb3J0ZWQpIHsKICAgICAgICAgICAgY2FuQnJlYWsgPSB0cnVlOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAodXNlVGFibGUpIHsKICAgICAgICAgIHBvdGVudGlhbFRhYmxlID0gewogICAgICAgICAgICBwbGF0Zm9ybUlkLAogICAgICAgICAgICBlbmNvZGluZ0lkLAogICAgICAgICAgICBvZmZzZXQKICAgICAgICAgIH07CiAgICAgICAgfQogICAgICAgIGlmIChjYW5CcmVhaykgewogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmIChwb3RlbnRpYWxUYWJsZSkgewogICAgICAgIGZpbGUucG9zID0gc3RhcnQgKyBwb3RlbnRpYWxUYWJsZS5vZmZzZXQ7CiAgICAgIH0KICAgICAgaWYgKCFwb3RlbnRpYWxUYWJsZSB8fCBmaWxlLnBlZWtCeXRlKCkgPT09IC0xKSB7CiAgICAgICAgd2FybigiQ291bGQgbm90IGZpbmQgYSBwcmVmZXJyZWQgY21hcCB0YWJsZS4iKTsKICAgICAgICByZXR1cm4gewogICAgICAgICAgcGxhdGZvcm1JZDogLTEsCiAgICAgICAgICBlbmNvZGluZ0lkOiAtMSwKICAgICAgICAgIG1hcHBpbmdzOiBbXSwKICAgICAgICAgIGhhc1Nob3J0Q21hcDogZmFsc2UKICAgICAgICB9OwogICAgICB9CiAgICAgIGNvbnN0IGZvcm1hdCA9IGZpbGUuZ2V0VWludDE2KCk7CiAgICAgIGxldCBoYXNTaG9ydENtYXAgPSBmYWxzZTsKICAgICAgY29uc3QgbWFwcGluZ3MgPSBbXTsKICAgICAgbGV0IGosIGdseXBoSWQ7CiAgICAgIGlmIChmb3JtYXQgPT09IDApIHsKICAgICAgICBmaWxlLnNraXAoMiArIDIpOwogICAgICAgIGZvciAoaiA9IDA7IGogPCAyNTY7IGorKykgewogICAgICAgICAgY29uc3QgaW5kZXggPSBmaWxlLmdldEJ5dGUoKTsKICAgICAgICAgIGlmICghaW5kZXgpIHsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICBtYXBwaW5ncy5wdXNoKHsKICAgICAgICAgICAgY2hhckNvZGU6IGosCiAgICAgICAgICAgIGdseXBoSWQ6IGluZGV4CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgaGFzU2hvcnRDbWFwID0gdHJ1ZTsKICAgICAgfSBlbHNlIGlmIChmb3JtYXQgPT09IDIpIHsKICAgICAgICBmaWxlLnNraXAoMiArIDIpOwogICAgICAgIGNvbnN0IHN1YkhlYWRlcktleXMgPSBbXTsKICAgICAgICBsZXQgbWF4U3ViSGVhZGVyS2V5ID0gMDsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDI1NjsgaSsrKSB7CiAgICAgICAgICBjb25zdCBzdWJIZWFkZXJLZXkgPSBmaWxlLmdldFVpbnQxNigpID4+IDM7CiAgICAgICAgICBzdWJIZWFkZXJLZXlzLnB1c2goc3ViSGVhZGVyS2V5KTsKICAgICAgICAgIG1heFN1YkhlYWRlcktleSA9IE1hdGgubWF4KHN1YkhlYWRlcktleSwgbWF4U3ViSGVhZGVyS2V5KTsKICAgICAgICB9CiAgICAgICAgY29uc3Qgc3ViSGVhZGVycyA9IFtdOwogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IG1heFN1YkhlYWRlcktleTsgaSsrKSB7CiAgICAgICAgICBzdWJIZWFkZXJzLnB1c2goewogICAgICAgICAgICBmaXJzdENvZGU6IGZpbGUuZ2V0VWludDE2KCksCiAgICAgICAgICAgIGVudHJ5Q291bnQ6IGZpbGUuZ2V0VWludDE2KCksCiAgICAgICAgICAgIGlkRGVsdGE6IHNpZ25lZEludDE2KGZpbGUuZ2V0Qnl0ZSgpLCBmaWxlLmdldEJ5dGUoKSksCiAgICAgICAgICAgIGlkUmFuZ2VQb3M6IGZpbGUucG9zICsgZmlsZS5nZXRVaW50MTYoKQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMjU2OyBpKyspIHsKICAgICAgICAgIGlmIChzdWJIZWFkZXJLZXlzW2ldID09PSAwKSB7CiAgICAgICAgICAgIGZpbGUucG9zID0gc3ViSGVhZGVyc1swXS5pZFJhbmdlUG9zICsgMiAqIGk7CiAgICAgICAgICAgIGdseXBoSWQgPSBmaWxlLmdldFVpbnQxNigpOwogICAgICAgICAgICBtYXBwaW5ncy5wdXNoKHsKICAgICAgICAgICAgICBjaGFyQ29kZTogaSwKICAgICAgICAgICAgICBnbHlwaElkCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY29uc3QgcyA9IHN1YkhlYWRlcnNbc3ViSGVhZGVyS2V5c1tpXV07CiAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBzLmVudHJ5Q291bnQ7IGorKykgewogICAgICAgICAgICAgIGNvbnN0IGNoYXJDb2RlID0gKGkgPDwgOCkgKyBqICsgcy5maXJzdENvZGU7CiAgICAgICAgICAgICAgZmlsZS5wb3MgPSBzLmlkUmFuZ2VQb3MgKyAyICogajsKICAgICAgICAgICAgICBnbHlwaElkID0gZmlsZS5nZXRVaW50MTYoKTsKICAgICAgICAgICAgICBpZiAoZ2x5cGhJZCAhPT0gMCkgewogICAgICAgICAgICAgICAgZ2x5cGhJZCA9IChnbHlwaElkICsgcy5pZERlbHRhKSAlIDY1NTM2OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBtYXBwaW5ncy5wdXNoKHsKICAgICAgICAgICAgICAgIGNoYXJDb2RlLAogICAgICAgICAgICAgICAgZ2x5cGhJZAogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gNCkgewogICAgICAgIGZpbGUuc2tpcCgyICsgMik7CiAgICAgICAgY29uc3Qgc2VnQ291bnQgPSBmaWxlLmdldFVpbnQxNigpID4+IDE7CiAgICAgICAgZmlsZS5za2lwKDYpOwogICAgICAgIGNvbnN0IHNlZ21lbnRzID0gW107CiAgICAgICAgbGV0IHNlZ0luZGV4OwogICAgICAgIGZvciAoc2VnSW5kZXggPSAwOyBzZWdJbmRleCA8IHNlZ0NvdW50OyBzZWdJbmRleCsrKSB7CiAgICAgICAgICBzZWdtZW50cy5wdXNoKHsKICAgICAgICAgICAgZW5kOiBmaWxlLmdldFVpbnQxNigpCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgZmlsZS5za2lwKDIpOwogICAgICAgIGZvciAoc2VnSW5kZXggPSAwOyBzZWdJbmRleCA8IHNlZ0NvdW50OyBzZWdJbmRleCsrKSB7CiAgICAgICAgICBzZWdtZW50c1tzZWdJbmRleF0uc3RhcnQgPSBmaWxlLmdldFVpbnQxNigpOwogICAgICAgIH0KICAgICAgICBmb3IgKHNlZ0luZGV4ID0gMDsgc2VnSW5kZXggPCBzZWdDb3VudDsgc2VnSW5kZXgrKykgewogICAgICAgICAgc2VnbWVudHNbc2VnSW5kZXhdLmRlbHRhID0gZmlsZS5nZXRVaW50MTYoKTsKICAgICAgICB9CiAgICAgICAgbGV0IG9mZnNldHNDb3VudCA9IDAsCiAgICAgICAgICBvZmZzZXRJbmRleDsKICAgICAgICBmb3IgKHNlZ0luZGV4ID0gMDsgc2VnSW5kZXggPCBzZWdDb3VudDsgc2VnSW5kZXgrKykgewogICAgICAgICAgc2VnbWVudCA9IHNlZ21lbnRzW3NlZ0luZGV4XTsKICAgICAgICAgIGNvbnN0IHJhbmdlT2Zmc2V0ID0gZmlsZS5nZXRVaW50MTYoKTsKICAgICAgICAgIGlmICghcmFuZ2VPZmZzZXQpIHsKICAgICAgICAgICAgc2VnbWVudC5vZmZzZXRJbmRleCA9IC0xOwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIG9mZnNldEluZGV4ID0gKHJhbmdlT2Zmc2V0ID4+IDEpIC0gKHNlZ0NvdW50IC0gc2VnSW5kZXgpOwogICAgICAgICAgc2VnbWVudC5vZmZzZXRJbmRleCA9IG9mZnNldEluZGV4OwogICAgICAgICAgb2Zmc2V0c0NvdW50ID0gTWF0aC5tYXgob2Zmc2V0c0NvdW50LCBvZmZzZXRJbmRleCArIHNlZ21lbnQuZW5kIC0gc2VnbWVudC5zdGFydCArIDEpOwogICAgICAgIH0KICAgICAgICBjb25zdCBvZmZzZXRzID0gW107CiAgICAgICAgZm9yIChqID0gMDsgaiA8IG9mZnNldHNDb3VudDsgaisrKSB7CiAgICAgICAgICBvZmZzZXRzLnB1c2goZmlsZS5nZXRVaW50MTYoKSk7CiAgICAgICAgfQogICAgICAgIGZvciAoc2VnSW5kZXggPSAwOyBzZWdJbmRleCA8IHNlZ0NvdW50OyBzZWdJbmRleCsrKSB7CiAgICAgICAgICBzZWdtZW50ID0gc2VnbWVudHNbc2VnSW5kZXhdOwogICAgICAgICAgc3RhcnQgPSBzZWdtZW50LnN0YXJ0OwogICAgICAgICAgY29uc3QgZW5kID0gc2VnbWVudC5lbmQ7CiAgICAgICAgICBjb25zdCBkZWx0YSA9IHNlZ21lbnQuZGVsdGE7CiAgICAgICAgICBvZmZzZXRJbmRleCA9IHNlZ21lbnQub2Zmc2V0SW5kZXg7CiAgICAgICAgICBmb3IgKGogPSBzdGFydDsgaiA8PSBlbmQ7IGorKykgewogICAgICAgICAgICBpZiAoaiA9PT0gMHhmZmZmKSB7CiAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZ2x5cGhJZCA9IG9mZnNldEluZGV4IDwgMCA/IGogOiBvZmZzZXRzW29mZnNldEluZGV4ICsgaiAtIHN0YXJ0XTsKICAgICAgICAgICAgZ2x5cGhJZCA9IGdseXBoSWQgKyBkZWx0YSAmIDB4ZmZmZjsKICAgICAgICAgICAgbWFwcGluZ3MucHVzaCh7CiAgICAgICAgICAgICAgY2hhckNvZGU6IGosCiAgICAgICAgICAgICAgZ2x5cGhJZAogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAoZm9ybWF0ID09PSA2KSB7CiAgICAgICAgZmlsZS5za2lwKDIgKyAyKTsKICAgICAgICBjb25zdCBmaXJzdENvZGUgPSBmaWxlLmdldFVpbnQxNigpOwogICAgICAgIGNvbnN0IGVudHJ5Q291bnQgPSBmaWxlLmdldFVpbnQxNigpOwogICAgICAgIGZvciAoaiA9IDA7IGogPCBlbnRyeUNvdW50OyBqKyspIHsKICAgICAgICAgIGdseXBoSWQgPSBmaWxlLmdldFVpbnQxNigpOwogICAgICAgICAgY29uc3QgY2hhckNvZGUgPSBmaXJzdENvZGUgKyBqOwogICAgICAgICAgbWFwcGluZ3MucHVzaCh7CiAgICAgICAgICAgIGNoYXJDb2RlLAogICAgICAgICAgICBnbHlwaElkCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAoZm9ybWF0ID09PSAxMikgewogICAgICAgIGZpbGUuc2tpcCgyICsgNCArIDQpOwogICAgICAgIGNvbnN0IG5Hcm91cHMgPSBmaWxlLmdldEludDMyKCkgPj4+IDA7CiAgICAgICAgZm9yIChqID0gMDsgaiA8IG5Hcm91cHM7IGorKykgewogICAgICAgICAgY29uc3Qgc3RhcnRDaGFyQ29kZSA9IGZpbGUuZ2V0SW50MzIoKSA+Pj4gMDsKICAgICAgICAgIGNvbnN0IGVuZENoYXJDb2RlID0gZmlsZS5nZXRJbnQzMigpID4+PiAwOwogICAgICAgICAgbGV0IGdseXBoQ29kZSA9IGZpbGUuZ2V0SW50MzIoKSA+Pj4gMDsKICAgICAgICAgIGZvciAobGV0IGNoYXJDb2RlID0gc3RhcnRDaGFyQ29kZTsgY2hhckNvZGUgPD0gZW5kQ2hhckNvZGU7IGNoYXJDb2RlKyspIHsKICAgICAgICAgICAgbWFwcGluZ3MucHVzaCh7CiAgICAgICAgICAgICAgY2hhckNvZGUsCiAgICAgICAgICAgICAgZ2x5cGhJZDogZ2x5cGhDb2RlKysKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHdhcm4oImNtYXAgdGFibGUgaGFzIHVuc3VwcG9ydGVkIGZvcm1hdDogIiArIGZvcm1hdCk7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIHBsYXRmb3JtSWQ6IC0xLAogICAgICAgICAgZW5jb2RpbmdJZDogLTEsCiAgICAgICAgICBtYXBwaW5nczogW10sCiAgICAgICAgICBoYXNTaG9ydENtYXA6IGZhbHNlCiAgICAgICAgfTsKICAgICAgfQogICAgICBtYXBwaW5ncy5zb3J0KChhLCBiKSA9PiBhLmNoYXJDb2RlIC0gYi5jaGFyQ29kZSk7CiAgICAgIGNvbnN0IGZpbmFsTWFwcGluZ3MgPSBbXSwKICAgICAgICBzZWVuQ2hhckNvZGVzID0gbmV3IFNldCgpOwogICAgICBmb3IgKGNvbnN0IG1hcCBvZiBtYXBwaW5ncykgewogICAgICAgIGNvbnN0IHsKICAgICAgICAgIGNoYXJDb2RlCiAgICAgICAgfSA9IG1hcDsKICAgICAgICBpZiAoc2VlbkNoYXJDb2Rlcy5oYXMoY2hhckNvZGUpKSB7CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CiAgICAgICAgc2VlbkNoYXJDb2Rlcy5hZGQoY2hhckNvZGUpOwogICAgICAgIGZpbmFsTWFwcGluZ3MucHVzaChtYXApOwogICAgICB9CiAgICAgIHJldHVybiB7CiAgICAgICAgcGxhdGZvcm1JZDogcG90ZW50aWFsVGFibGUucGxhdGZvcm1JZCwKICAgICAgICBlbmNvZGluZ0lkOiBwb3RlbnRpYWxUYWJsZS5lbmNvZGluZ0lkLAogICAgICAgIG1hcHBpbmdzOiBmaW5hbE1hcHBpbmdzLAogICAgICAgIGhhc1Nob3J0Q21hcAogICAgICB9OwogICAgfQogICAgZnVuY3Rpb24gc2FuaXRpemVNZXRyaWNzKGZpbGUsIGhlYWRlciwgbWV0cmljcywgaGVhZFRhYmxlLCBudW1HbHlwaHMsIGR1cEZpcnN0RW50cnkpIHsKICAgICAgaWYgKCFoZWFkZXIpIHsKICAgICAgICBpZiAobWV0cmljcykgewogICAgICAgICAgbWV0cmljcy5kYXRhID0gbnVsbDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIGZpbGUucG9zID0gKGZpbGUuc3RhcnQgfHwgMCkgKyBoZWFkZXIub2Zmc2V0OwogICAgICBmaWxlLnBvcyArPSA0OwogICAgICBmaWxlLnBvcyArPSAyOwogICAgICBmaWxlLnBvcyArPSAyOwogICAgICBmaWxlLnBvcyArPSAyOwogICAgICBmaWxlLnBvcyArPSAyOwogICAgICBmaWxlLnBvcyArPSAyOwogICAgICBmaWxlLnBvcyArPSAyOwogICAgICBmaWxlLnBvcyArPSAyOwogICAgICBmaWxlLnBvcyArPSAyOwogICAgICBmaWxlLnBvcyArPSAyOwogICAgICBjb25zdCBjYXJldE9mZnNldCA9IGZpbGUuZ2V0VWludDE2KCk7CiAgICAgIGZpbGUucG9zICs9IDg7CiAgICAgIGZpbGUucG9zICs9IDI7CiAgICAgIGxldCBudW1PZk1ldHJpY3MgPSBmaWxlLmdldFVpbnQxNigpOwogICAgICBpZiAoY2FyZXRPZmZzZXQgIT09IDApIHsKICAgICAgICBjb25zdCBtYWNTdHlsZSA9IGludDE2KGhlYWRUYWJsZS5kYXRhWzQ0XSwgaGVhZFRhYmxlLmRhdGFbNDVdKTsKICAgICAgICBpZiAoIShtYWNTdHlsZSAmIDIpKSB7CiAgICAgICAgICBoZWFkZXIuZGF0YVsyMl0gPSAwOwogICAgICAgICAgaGVhZGVyLmRhdGFbMjNdID0gMDsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKG51bU9mTWV0cmljcyA+IG51bUdseXBocykgewogICAgICAgIGluZm8oYFRoZSBudW1PZk1ldHJpY3MgKCR7bnVtT2ZNZXRyaWNzfSkgc2hvdWxkIG5vdCBiZSBgICsgYGdyZWF0ZXIgdGhhbiB0aGUgbnVtR2x5cGhzICgke251bUdseXBoc30pLmApOwogICAgICAgIG51bU9mTWV0cmljcyA9IG51bUdseXBoczsKICAgICAgICBoZWFkZXIuZGF0YVszNF0gPSAobnVtT2ZNZXRyaWNzICYgMHhmZjAwKSA+PiA4OwogICAgICAgIGhlYWRlci5kYXRhWzM1XSA9IG51bU9mTWV0cmljcyAmIDB4MDBmZjsKICAgICAgfQogICAgICBjb25zdCBudW1PZlNpZGViZWFyaW5ncyA9IG51bUdseXBocyAtIG51bU9mTWV0cmljczsKICAgICAgY29uc3QgbnVtTWlzc2luZyA9IG51bU9mU2lkZWJlYXJpbmdzIC0gKG1ldHJpY3MubGVuZ3RoIC0gbnVtT2ZNZXRyaWNzICogNCA+PiAxKTsKICAgICAgaWYgKG51bU1pc3NpbmcgPiAwKSB7CiAgICAgICAgY29uc3QgZW50cmllcyA9IG5ldyBVaW50OEFycmF5KG1ldHJpY3MubGVuZ3RoICsgbnVtTWlzc2luZyAqIDIpOwogICAgICAgIGVudHJpZXMuc2V0KG1ldHJpY3MuZGF0YSk7CiAgICAgICAgaWYgKGR1cEZpcnN0RW50cnkpIHsKICAgICAgICAgIGVudHJpZXNbbWV0cmljcy5sZW5ndGhdID0gbWV0cmljcy5kYXRhWzJdOwogICAgICAgICAgZW50cmllc1ttZXRyaWNzLmxlbmd0aCArIDFdID0gbWV0cmljcy5kYXRhWzNdOwogICAgICAgIH0KICAgICAgICBtZXRyaWNzLmRhdGEgPSBlbnRyaWVzOwogICAgICB9CiAgICB9CiAgICBmdW5jdGlvbiBzYW5pdGl6ZUdseXBoKHNvdXJjZSwgc291cmNlU3RhcnQsIHNvdXJjZUVuZCwgZGVzdCwgZGVzdFN0YXJ0LCBoaW50c1ZhbGlkKSB7CiAgICAgIGNvbnN0IGdseXBoUHJvZmlsZSA9IHsKICAgICAgICBsZW5ndGg6IDAsCiAgICAgICAgc2l6ZU9mSW5zdHJ1Y3Rpb25zOiAwCiAgICAgIH07CiAgICAgIGlmIChzb3VyY2VTdGFydCA8IDAgfHwgc291cmNlU3RhcnQgPj0gc291cmNlLmxlbmd0aCB8fCBzb3VyY2VFbmQgPiBzb3VyY2UubGVuZ3RoIHx8IHNvdXJjZUVuZCAtIHNvdXJjZVN0YXJ0IDw9IDEyKSB7CiAgICAgICAgcmV0dXJuIGdseXBoUHJvZmlsZTsKICAgICAgfQogICAgICBjb25zdCBnbHlmID0gc291cmNlLnN1YmFycmF5KHNvdXJjZVN0YXJ0LCBzb3VyY2VFbmQpOwogICAgICBjb25zdCB4TWluID0gc2lnbmVkSW50MTYoZ2x5ZlsyXSwgZ2x5ZlszXSk7CiAgICAgIGNvbnN0IHlNaW4gPSBzaWduZWRJbnQxNihnbHlmWzRdLCBnbHlmWzVdKTsKICAgICAgY29uc3QgeE1heCA9IHNpZ25lZEludDE2KGdseWZbNl0sIGdseWZbN10pOwogICAgICBjb25zdCB5TWF4ID0gc2lnbmVkSW50MTYoZ2x5Zls4XSwgZ2x5Zls5XSk7CiAgICAgIGlmICh4TWluID4geE1heCkgewogICAgICAgIHdyaXRlU2lnbmVkSW50MTYoZ2x5ZiwgMiwgeE1heCk7CiAgICAgICAgd3JpdGVTaWduZWRJbnQxNihnbHlmLCA2LCB4TWluKTsKICAgICAgfQogICAgICBpZiAoeU1pbiA+IHlNYXgpIHsKICAgICAgICB3cml0ZVNpZ25lZEludDE2KGdseWYsIDQsIHlNYXgpOwogICAgICAgIHdyaXRlU2lnbmVkSW50MTYoZ2x5ZiwgOCwgeU1pbik7CiAgICAgIH0KICAgICAgY29uc3QgY29udG91cnNDb3VudCA9IHNpZ25lZEludDE2KGdseWZbMF0sIGdseWZbMV0pOwogICAgICBpZiAoY29udG91cnNDb3VudCA8IDApIHsKICAgICAgICBpZiAoY29udG91cnNDb3VudCA8IC0xKSB7CiAgICAgICAgICByZXR1cm4gZ2x5cGhQcm9maWxlOwogICAgICAgIH0KICAgICAgICBkZXN0LnNldChnbHlmLCBkZXN0U3RhcnQpOwogICAgICAgIGdseXBoUHJvZmlsZS5sZW5ndGggPSBnbHlmLmxlbmd0aDsKICAgICAgICByZXR1cm4gZ2x5cGhQcm9maWxlOwogICAgICB9CiAgICAgIGxldCBpLAogICAgICAgIGogPSAxMCwKICAgICAgICBmbGFnc0NvdW50ID0gMDsKICAgICAgZm9yIChpID0gMDsgaSA8IGNvbnRvdXJzQ291bnQ7IGkrKykgewogICAgICAgIGNvbnN0IGVuZFBvaW50ID0gZ2x5ZltqXSA8PCA4IHwgZ2x5ZltqICsgMV07CiAgICAgICAgZmxhZ3NDb3VudCA9IGVuZFBvaW50ICsgMTsKICAgICAgICBqICs9IDI7CiAgICAgIH0KICAgICAgY29uc3QgaW5zdHJ1Y3Rpb25zU3RhcnQgPSBqOwogICAgICBjb25zdCBpbnN0cnVjdGlvbnNMZW5ndGggPSBnbHlmW2pdIDw8IDggfCBnbHlmW2ogKyAxXTsKICAgICAgZ2x5cGhQcm9maWxlLnNpemVPZkluc3RydWN0aW9ucyA9IGluc3RydWN0aW9uc0xlbmd0aDsKICAgICAgaiArPSAyICsgaW5zdHJ1Y3Rpb25zTGVuZ3RoOwogICAgICBjb25zdCBpbnN0cnVjdGlvbnNFbmQgPSBqOwogICAgICBsZXQgY29vcmRpbmF0ZXNMZW5ndGggPSAwOwogICAgICBmb3IgKGkgPSAwOyBpIDwgZmxhZ3NDb3VudDsgaSsrKSB7CiAgICAgICAgY29uc3QgZmxhZyA9IGdseWZbaisrXTsKICAgICAgICBpZiAoZmxhZyAmIDB4YzApIHsKICAgICAgICAgIGdseWZbaiAtIDFdID0gZmxhZyAmIDB4M2Y7CiAgICAgICAgfQogICAgICAgIGxldCB4TGVuZ3RoID0gMjsKICAgICAgICBpZiAoZmxhZyAmIDIpIHsKICAgICAgICAgIHhMZW5ndGggPSAxOwogICAgICAgIH0gZWxzZSBpZiAoZmxhZyAmIDE2KSB7CiAgICAgICAgICB4TGVuZ3RoID0gMDsKICAgICAgICB9CiAgICAgICAgbGV0IHlMZW5ndGggPSAyOwogICAgICAgIGlmIChmbGFnICYgNCkgewogICAgICAgICAgeUxlbmd0aCA9IDE7CiAgICAgICAgfSBlbHNlIGlmIChmbGFnICYgMzIpIHsKICAgICAgICAgIHlMZW5ndGggPSAwOwogICAgICAgIH0KICAgICAgICBjb25zdCB4eUxlbmd0aCA9IHhMZW5ndGggKyB5TGVuZ3RoOwogICAgICAgIGNvb3JkaW5hdGVzTGVuZ3RoICs9IHh5TGVuZ3RoOwogICAgICAgIGlmIChmbGFnICYgOCkgewogICAgICAgICAgY29uc3QgcmVwZWF0ID0gZ2x5ZltqKytdOwogICAgICAgICAgaWYgKHJlcGVhdCA9PT0gMCkgewogICAgICAgICAgICBnbHlmW2ogLSAxXSBePSA4OwogICAgICAgICAgfQogICAgICAgICAgaSArPSByZXBlYXQ7CiAgICAgICAgICBjb29yZGluYXRlc0xlbmd0aCArPSByZXBlYXQgKiB4eUxlbmd0aDsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKGNvb3JkaW5hdGVzTGVuZ3RoID09PSAwKSB7CiAgICAgICAgcmV0dXJuIGdseXBoUHJvZmlsZTsKICAgICAgfQogICAgICBsZXQgZ2x5cGhEYXRhTGVuZ3RoID0gaiArIGNvb3JkaW5hdGVzTGVuZ3RoOwogICAgICBpZiAoZ2x5cGhEYXRhTGVuZ3RoID4gZ2x5Zi5sZW5ndGgpIHsKICAgICAgICByZXR1cm4gZ2x5cGhQcm9maWxlOwogICAgICB9CiAgICAgIGlmICghaGludHNWYWxpZCAmJiBpbnN0cnVjdGlvbnNMZW5ndGggPiAwKSB7CiAgICAgICAgZGVzdC5zZXQoZ2x5Zi5zdWJhcnJheSgwLCBpbnN0cnVjdGlvbnNTdGFydCksIGRlc3RTdGFydCk7CiAgICAgICAgZGVzdC5zZXQoWzAsIDBdLCBkZXN0U3RhcnQgKyBpbnN0cnVjdGlvbnNTdGFydCk7CiAgICAgICAgZGVzdC5zZXQoZ2x5Zi5zdWJhcnJheShpbnN0cnVjdGlvbnNFbmQsIGdseXBoRGF0YUxlbmd0aCksIGRlc3RTdGFydCArIGluc3RydWN0aW9uc1N0YXJ0ICsgMik7CiAgICAgICAgZ2x5cGhEYXRhTGVuZ3RoIC09IGluc3RydWN0aW9uc0xlbmd0aDsKICAgICAgICBpZiAoZ2x5Zi5sZW5ndGggLSBnbHlwaERhdGFMZW5ndGggPiAzKSB7CiAgICAgICAgICBnbHlwaERhdGFMZW5ndGggPSBnbHlwaERhdGFMZW5ndGggKyAzICYgfjM7CiAgICAgICAgfQogICAgICAgIGdseXBoUHJvZmlsZS5sZW5ndGggPSBnbHlwaERhdGFMZW5ndGg7CiAgICAgICAgcmV0dXJuIGdseXBoUHJvZmlsZTsKICAgICAgfQogICAgICBpZiAoZ2x5Zi5sZW5ndGggLSBnbHlwaERhdGFMZW5ndGggPiAzKSB7CiAgICAgICAgZ2x5cGhEYXRhTGVuZ3RoID0gZ2x5cGhEYXRhTGVuZ3RoICsgMyAmIH4zOwogICAgICAgIGRlc3Quc2V0KGdseWYuc3ViYXJyYXkoMCwgZ2x5cGhEYXRhTGVuZ3RoKSwgZGVzdFN0YXJ0KTsKICAgICAgICBnbHlwaFByb2ZpbGUubGVuZ3RoID0gZ2x5cGhEYXRhTGVuZ3RoOwogICAgICAgIHJldHVybiBnbHlwaFByb2ZpbGU7CiAgICAgIH0KICAgICAgZGVzdC5zZXQoZ2x5ZiwgZGVzdFN0YXJ0KTsKICAgICAgZ2x5cGhQcm9maWxlLmxlbmd0aCA9IGdseWYubGVuZ3RoOwogICAgICByZXR1cm4gZ2x5cGhQcm9maWxlOwogICAgfQogICAgZnVuY3Rpb24gc2FuaXRpemVIZWFkKGhlYWQsIG51bUdseXBocywgbG9jYUxlbmd0aCkgewogICAgICBjb25zdCBkYXRhID0gaGVhZC5kYXRhOwogICAgICBjb25zdCB2ZXJzaW9uID0gaW50MzIoZGF0YVswXSwgZGF0YVsxXSwgZGF0YVsyXSwgZGF0YVszXSk7CiAgICAgIGlmICh2ZXJzaW9uID4+IDE2ICE9PSAxKSB7CiAgICAgICAgaW5mbygiQXR0ZW1wdGluZyB0byBmaXggaW52YWxpZCB2ZXJzaW9uIGluIGhlYWQgdGFibGU6ICIgKyB2ZXJzaW9uKTsKICAgICAgICBkYXRhWzBdID0gMDsKICAgICAgICBkYXRhWzFdID0gMTsKICAgICAgICBkYXRhWzJdID0gMDsKICAgICAgICBkYXRhWzNdID0gMDsKICAgICAgfQogICAgICBjb25zdCBpbmRleFRvTG9jRm9ybWF0ID0gaW50MTYoZGF0YVs1MF0sIGRhdGFbNTFdKTsKICAgICAgaWYgKGluZGV4VG9Mb2NGb3JtYXQgPCAwIHx8IGluZGV4VG9Mb2NGb3JtYXQgPiAxKSB7CiAgICAgICAgaW5mbygiQXR0ZW1wdGluZyB0byBmaXggaW52YWxpZCBpbmRleFRvTG9jRm9ybWF0IGluIGhlYWQgdGFibGU6ICIgKyBpbmRleFRvTG9jRm9ybWF0KTsKICAgICAgICBjb25zdCBudW1HbHlwaHNQbHVzT25lID0gbnVtR2x5cGhzICsgMTsKICAgICAgICBpZiAobG9jYUxlbmd0aCA9PT0gbnVtR2x5cGhzUGx1c09uZSA8PCAxKSB7CiAgICAgICAgICBkYXRhWzUwXSA9IDA7CiAgICAgICAgICBkYXRhWzUxXSA9IDA7CiAgICAgICAgfSBlbHNlIGlmIChsb2NhTGVuZ3RoID09PSBudW1HbHlwaHNQbHVzT25lIDw8IDIpIHsKICAgICAgICAgIGRhdGFbNTBdID0gMDsKICAgICAgICAgIGRhdGFbNTFdID0gMTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCJDb3VsZCBub3QgZml4IGluZGV4VG9Mb2NGb3JtYXQ6ICIgKyBpbmRleFRvTG9jRm9ybWF0KTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIGZ1bmN0aW9uIHNhbml0aXplR2x5cGhMb2NhdGlvbnMobG9jYSwgZ2x5ZiwgbnVtR2x5cGhzLCBpc0dseXBoTG9jYXRpb25zTG9uZywgaGludHNWYWxpZCwgZHVwRmlyc3RFbnRyeSwgbWF4U2l6ZU9mSW5zdHJ1Y3Rpb25zKSB7CiAgICAgIGxldCBpdGVtU2l6ZSwgaXRlbURlY29kZSwgaXRlbUVuY29kZTsKICAgICAgaWYgKGlzR2x5cGhMb2NhdGlvbnNMb25nKSB7CiAgICAgICAgaXRlbVNpemUgPSA0OwogICAgICAgIGl0ZW1EZWNvZGUgPSBmdW5jdGlvbiBmb250SXRlbURlY29kZUxvbmcoZGF0YSwgb2Zmc2V0KSB7CiAgICAgICAgICByZXR1cm4gZGF0YVtvZmZzZXRdIDw8IDI0IHwgZGF0YVtvZmZzZXQgKyAxXSA8PCAxNiB8IGRhdGFbb2Zmc2V0ICsgMl0gPDwgOCB8IGRhdGFbb2Zmc2V0ICsgM107CiAgICAgICAgfTsKICAgICAgICBpdGVtRW5jb2RlID0gZnVuY3Rpb24gZm9udEl0ZW1FbmNvZGVMb25nKGRhdGEsIG9mZnNldCwgdmFsdWUpIHsKICAgICAgICAgIGRhdGFbb2Zmc2V0XSA9IHZhbHVlID4+PiAyNCAmIDB4ZmY7CiAgICAgICAgICBkYXRhW29mZnNldCArIDFdID0gdmFsdWUgPj4gMTYgJiAweGZmOwogICAgICAgICAgZGF0YVtvZmZzZXQgKyAyXSA9IHZhbHVlID4+IDggJiAweGZmOwogICAgICAgICAgZGF0YVtvZmZzZXQgKyAzXSA9IHZhbHVlICYgMHhmZjsKICAgICAgICB9OwogICAgICB9IGVsc2UgewogICAgICAgIGl0ZW1TaXplID0gMjsKICAgICAgICBpdGVtRGVjb2RlID0gZnVuY3Rpb24gZm9udEl0ZW1EZWNvZGUoZGF0YSwgb2Zmc2V0KSB7CiAgICAgICAgICByZXR1cm4gZGF0YVtvZmZzZXRdIDw8IDkgfCBkYXRhW29mZnNldCArIDFdIDw8IDE7CiAgICAgICAgfTsKICAgICAgICBpdGVtRW5jb2RlID0gZnVuY3Rpb24gZm9udEl0ZW1FbmNvZGUoZGF0YSwgb2Zmc2V0LCB2YWx1ZSkgewogICAgICAgICAgZGF0YVtvZmZzZXRdID0gdmFsdWUgPj4gOSAmIDB4ZmY7CiAgICAgICAgICBkYXRhW29mZnNldCArIDFdID0gdmFsdWUgPj4gMSAmIDB4ZmY7CiAgICAgICAgfTsKICAgICAgfQogICAgICBjb25zdCBudW1HbHlwaHNPdXQgPSBkdXBGaXJzdEVudHJ5ID8gbnVtR2x5cGhzICsgMSA6IG51bUdseXBoczsKICAgICAgY29uc3QgbG9jYURhdGFTaXplID0gaXRlbVNpemUgKiAoMSArIG51bUdseXBoc091dCk7CiAgICAgIGNvbnN0IGxvY2FEYXRhID0gbmV3IFVpbnQ4QXJyYXkobG9jYURhdGFTaXplKTsKICAgICAgbG9jYURhdGEuc2V0KGxvY2EuZGF0YS5zdWJhcnJheSgwLCBsb2NhRGF0YVNpemUpKTsKICAgICAgbG9jYS5kYXRhID0gbG9jYURhdGE7CiAgICAgIGNvbnN0IG9sZEdseWZEYXRhID0gZ2x5Zi5kYXRhOwogICAgICBjb25zdCBvbGRHbHlmRGF0YUxlbmd0aCA9IG9sZEdseWZEYXRhLmxlbmd0aDsKICAgICAgY29uc3QgbmV3R2x5ZkRhdGEgPSBuZXcgVWludDhBcnJheShvbGRHbHlmRGF0YUxlbmd0aCk7CiAgICAgIGxldCBpLCBqOwogICAgICBjb25zdCBsb2NhRW50cmllcyA9IFtdOwogICAgICBmb3IgKGkgPSAwLCBqID0gMDsgaSA8IG51bUdseXBocyArIDE7IGkrKywgaiArPSBpdGVtU2l6ZSkgewogICAgICAgIGxldCBvZmZzZXQgPSBpdGVtRGVjb2RlKGxvY2FEYXRhLCBqKTsKICAgICAgICBpZiAob2Zmc2V0ID4gb2xkR2x5ZkRhdGFMZW5ndGgpIHsKICAgICAgICAgIG9mZnNldCA9IG9sZEdseWZEYXRhTGVuZ3RoOwogICAgICAgIH0KICAgICAgICBsb2NhRW50cmllcy5wdXNoKHsKICAgICAgICAgIGluZGV4OiBpLAogICAgICAgICAgb2Zmc2V0LAogICAgICAgICAgZW5kT2Zmc2V0OiAwCiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgbG9jYUVudHJpZXMuc29ydCgoYSwgYikgPT4gYS5vZmZzZXQgLSBiLm9mZnNldCk7CiAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1HbHlwaHM7IGkrKykgewogICAgICAgIGxvY2FFbnRyaWVzW2ldLmVuZE9mZnNldCA9IGxvY2FFbnRyaWVzW2kgKyAxXS5vZmZzZXQ7CiAgICAgIH0KICAgICAgbG9jYUVudHJpZXMuc29ydCgoYSwgYikgPT4gYS5pbmRleCAtIGIuaW5kZXgpOwogICAgICBmb3IgKGkgPSAwOyBpIDwgbnVtR2x5cGhzOyBpKyspIHsKICAgICAgICBjb25zdCB7CiAgICAgICAgICBvZmZzZXQsCiAgICAgICAgICBlbmRPZmZzZXQKICAgICAgICB9ID0gbG9jYUVudHJpZXNbaV07CiAgICAgICAgaWYgKG9mZnNldCAhPT0gMCB8fCBlbmRPZmZzZXQgIT09IDApIHsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgICBjb25zdCBuZXh0T2Zmc2V0ID0gbG9jYUVudHJpZXNbaSArIDFdLm9mZnNldDsKICAgICAgICBpZiAobmV4dE9mZnNldCA9PT0gMCkgewogICAgICAgICAgY29udGludWU7CiAgICAgICAgfQogICAgICAgIGxvY2FFbnRyaWVzW2ldLmVuZE9mZnNldCA9IG5leHRPZmZzZXQ7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgICAgY29uc3QgbGFzdCA9IGxvY2FFbnRyaWVzLmF0KC0yKTsKICAgICAgaWYgKGxhc3Qub2Zmc2V0ICE9PSAwICYmIGxhc3QuZW5kT2Zmc2V0ID09PSAwKSB7CiAgICAgICAgbGFzdC5lbmRPZmZzZXQgPSBvbGRHbHlmRGF0YUxlbmd0aDsKICAgICAgfQogICAgICBjb25zdCBtaXNzaW5nR2x5cGhzID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgICAgbGV0IHdyaXRlT2Zmc2V0ID0gMDsKICAgICAgaXRlbUVuY29kZShsb2NhRGF0YSwgMCwgd3JpdGVPZmZzZXQpOwogICAgICBmb3IgKGkgPSAwLCBqID0gaXRlbVNpemU7IGkgPCBudW1HbHlwaHM7IGkrKywgaiArPSBpdGVtU2l6ZSkgewogICAgICAgIGNvbnN0IGdseXBoUHJvZmlsZSA9IHNhbml0aXplR2x5cGgob2xkR2x5ZkRhdGEsIGxvY2FFbnRyaWVzW2ldLm9mZnNldCwgbG9jYUVudHJpZXNbaV0uZW5kT2Zmc2V0LCBuZXdHbHlmRGF0YSwgd3JpdGVPZmZzZXQsIGhpbnRzVmFsaWQpOwogICAgICAgIGNvbnN0IG5ld0xlbmd0aCA9IGdseXBoUHJvZmlsZS5sZW5ndGg7CiAgICAgICAgaWYgKG5ld0xlbmd0aCA9PT0gMCkgewogICAgICAgICAgbWlzc2luZ0dseXBoc1tpXSA9IHRydWU7CiAgICAgICAgfQogICAgICAgIGlmIChnbHlwaFByb2ZpbGUuc2l6ZU9mSW5zdHJ1Y3Rpb25zID4gbWF4U2l6ZU9mSW5zdHJ1Y3Rpb25zKSB7CiAgICAgICAgICBtYXhTaXplT2ZJbnN0cnVjdGlvbnMgPSBnbHlwaFByb2ZpbGUuc2l6ZU9mSW5zdHJ1Y3Rpb25zOwogICAgICAgIH0KICAgICAgICB3cml0ZU9mZnNldCArPSBuZXdMZW5ndGg7CiAgICAgICAgaXRlbUVuY29kZShsb2NhRGF0YSwgaiwgd3JpdGVPZmZzZXQpOwogICAgICB9CiAgICAgIGlmICh3cml0ZU9mZnNldCA9PT0gMCkgewogICAgICAgIGNvbnN0IHNpbXBsZUdseXBoID0gbmV3IFVpbnQ4QXJyYXkoWzAsIDEsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDQ5LCAwXSk7CiAgICAgICAgZm9yIChpID0gMCwgaiA9IGl0ZW1TaXplOyBpIDwgbnVtR2x5cGhzT3V0OyBpKyssIGogKz0gaXRlbVNpemUpIHsKICAgICAgICAgIGl0ZW1FbmNvZGUobG9jYURhdGEsIGosIHNpbXBsZUdseXBoLmxlbmd0aCk7CiAgICAgICAgfQogICAgICAgIGdseWYuZGF0YSA9IHNpbXBsZUdseXBoOwogICAgICB9IGVsc2UgaWYgKGR1cEZpcnN0RW50cnkpIHsKICAgICAgICBjb25zdCBmaXJzdEVudHJ5TGVuZ3RoID0gaXRlbURlY29kZShsb2NhRGF0YSwgaXRlbVNpemUpOwogICAgICAgIGlmIChuZXdHbHlmRGF0YS5sZW5ndGggPiBmaXJzdEVudHJ5TGVuZ3RoICsgd3JpdGVPZmZzZXQpIHsKICAgICAgICAgIGdseWYuZGF0YSA9IG5ld0dseWZEYXRhLnN1YmFycmF5KDAsIGZpcnN0RW50cnlMZW5ndGggKyB3cml0ZU9mZnNldCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGdseWYuZGF0YSA9IG5ldyBVaW50OEFycmF5KGZpcnN0RW50cnlMZW5ndGggKyB3cml0ZU9mZnNldCk7CiAgICAgICAgICBnbHlmLmRhdGEuc2V0KG5ld0dseWZEYXRhLnN1YmFycmF5KDAsIHdyaXRlT2Zmc2V0KSk7CiAgICAgICAgfQogICAgICAgIGdseWYuZGF0YS5zZXQobmV3R2x5ZkRhdGEuc3ViYXJyYXkoMCwgZmlyc3RFbnRyeUxlbmd0aCksIHdyaXRlT2Zmc2V0KTsKICAgICAgICBpdGVtRW5jb2RlKGxvY2EuZGF0YSwgbG9jYURhdGEubGVuZ3RoIC0gaXRlbVNpemUsIHdyaXRlT2Zmc2V0ICsgZmlyc3RFbnRyeUxlbmd0aCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZ2x5Zi5kYXRhID0gbmV3R2x5ZkRhdGEuc3ViYXJyYXkoMCwgd3JpdGVPZmZzZXQpOwogICAgICB9CiAgICAgIHJldHVybiB7CiAgICAgICAgbWlzc2luZ0dseXBocywKICAgICAgICBtYXhTaXplT2ZJbnN0cnVjdGlvbnMKICAgICAgfTsKICAgIH0KICAgIGZ1bmN0aW9uIHJlYWRQb3N0U2NyaXB0VGFibGUocG9zdCwgcHJvcGVydGllc09iaiwgbWF4cE51bUdseXBocykgewogICAgICBjb25zdCBzdGFydCA9IChmb250LnN0YXJ0IHx8IDApICsgcG9zdC5vZmZzZXQ7CiAgICAgIGZvbnQucG9zID0gc3RhcnQ7CiAgICAgIGNvbnN0IGxlbmd0aCA9IHBvc3QubGVuZ3RoLAogICAgICAgIGVuZCA9IHN0YXJ0ICsgbGVuZ3RoOwogICAgICBjb25zdCB2ZXJzaW9uID0gZm9udC5nZXRJbnQzMigpOwogICAgICBmb250LnNraXAoMjgpOwogICAgICBsZXQgZ2x5cGhOYW1lczsKICAgICAgbGV0IHZhbGlkID0gdHJ1ZTsKICAgICAgbGV0IGk7CiAgICAgIHN3aXRjaCAodmVyc2lvbikgewogICAgICAgIGNhc2UgMHgwMDAxMDAwMDoKICAgICAgICAgIGdseXBoTmFtZXMgPSBNYWNTdGFuZGFyZEdseXBoT3JkZXJpbmc7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIDB4MDAwMjAwMDA6CiAgICAgICAgICBjb25zdCBudW1HbHlwaHMgPSBmb250LmdldFVpbnQxNigpOwogICAgICAgICAgaWYgKG51bUdseXBocyAhPT0gbWF4cE51bUdseXBocykgewogICAgICAgICAgICB2YWxpZCA9IGZhbHNlOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IGdseXBoTmFtZUluZGV4ZXMgPSBbXTsKICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1HbHlwaHM7ICsraSkgewogICAgICAgICAgICBjb25zdCBpbmRleCA9IGZvbnQuZ2V0VWludDE2KCk7CiAgICAgICAgICAgIGlmIChpbmRleCA+PSAzMjc2OCkgewogICAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZ2x5cGhOYW1lSW5kZXhlcy5wdXNoKGluZGV4KTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICghdmFsaWQpIHsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgICBjb25zdCBjdXN0b21OYW1lcyA9IFtdLAogICAgICAgICAgICBzdHJCdWYgPSBbXTsKICAgICAgICAgIHdoaWxlIChmb250LnBvcyA8IGVuZCkgewogICAgICAgICAgICBjb25zdCBzdHJpbmdMZW5ndGggPSBmb250LmdldEJ5dGUoKTsKICAgICAgICAgICAgc3RyQnVmLmxlbmd0aCA9IHN0cmluZ0xlbmd0aDsKICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHN0cmluZ0xlbmd0aDsgKytpKSB7CiAgICAgICAgICAgICAgc3RyQnVmW2ldID0gU3RyaW5nLmZyb21DaGFyQ29kZShmb250LmdldEJ5dGUoKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY3VzdG9tTmFtZXMucHVzaChzdHJCdWYuam9pbigiIikpOwogICAgICAgICAgfQogICAgICAgICAgZ2x5cGhOYW1lcyA9IFtdOwogICAgICAgICAgZm9yIChpID0gMDsgaSA8IG51bUdseXBoczsgKytpKSB7CiAgICAgICAgICAgIGNvbnN0IGogPSBnbHlwaE5hbWVJbmRleGVzW2ldOwogICAgICAgICAgICBpZiAoaiA8IDI1OCkgewogICAgICAgICAgICAgIGdseXBoTmFtZXMucHVzaChNYWNTdGFuZGFyZEdseXBoT3JkZXJpbmdbal0pOwogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGdseXBoTmFtZXMucHVzaChjdXN0b21OYW1lc1tqIC0gMjU4XSk7CiAgICAgICAgICB9CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIDB4MDAwMzAwMDA6CiAgICAgICAgICBicmVhazsKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgd2FybigiVW5rbm93bi91bnN1cHBvcnRlZCBwb3N0IHRhYmxlIHZlcnNpb24gIiArIHZlcnNpb24pOwogICAgICAgICAgdmFsaWQgPSBmYWxzZTsKICAgICAgICAgIGlmIChwcm9wZXJ0aWVzT2JqLmRlZmF1bHRFbmNvZGluZykgewogICAgICAgICAgICBnbHlwaE5hbWVzID0gcHJvcGVydGllc09iai5kZWZhdWx0RW5jb2Rpbmc7CiAgICAgICAgICB9CiAgICAgICAgICBicmVhazsKICAgICAgfQogICAgICBwcm9wZXJ0aWVzT2JqLmdseXBoTmFtZXMgPSBnbHlwaE5hbWVzOwogICAgICByZXR1cm4gdmFsaWQ7CiAgICB9CiAgICBmdW5jdGlvbiByZWFkTmFtZVRhYmxlKG5hbWVUYWJsZSkgewogICAgICBjb25zdCBzdGFydCA9IChmb250LnN0YXJ0IHx8IDApICsgbmFtZVRhYmxlLm9mZnNldDsKICAgICAgZm9udC5wb3MgPSBzdGFydDsKICAgICAgY29uc3QgbmFtZXMgPSBbW10sIFtdXSwKICAgICAgICByZWNvcmRzID0gW107CiAgICAgIGNvbnN0IGxlbmd0aCA9IG5hbWVUYWJsZS5sZW5ndGgsCiAgICAgICAgZW5kID0gc3RhcnQgKyBsZW5ndGg7CiAgICAgIGNvbnN0IGZvcm1hdCA9IGZvbnQuZ2V0VWludDE2KCk7CiAgICAgIGNvbnN0IEZPUk1BVF8wX0hFQURFUl9MRU5HVEggPSA2OwogICAgICBpZiAoZm9ybWF0ICE9PSAwIHx8IGxlbmd0aCA8IEZPUk1BVF8wX0hFQURFUl9MRU5HVEgpIHsKICAgICAgICByZXR1cm4gW25hbWVzLCByZWNvcmRzXTsKICAgICAgfQogICAgICBjb25zdCBudW1SZWNvcmRzID0gZm9udC5nZXRVaW50MTYoKTsKICAgICAgY29uc3Qgc3RyaW5nc1N0YXJ0ID0gZm9udC5nZXRVaW50MTYoKTsKICAgICAgY29uc3QgTkFNRV9SRUNPUkRfTEVOR1RIID0gMTI7CiAgICAgIGxldCBpLCBpaTsKICAgICAgZm9yIChpID0gMDsgaSA8IG51bVJlY29yZHMgJiYgZm9udC5wb3MgKyBOQU1FX1JFQ09SRF9MRU5HVEggPD0gZW5kOyBpKyspIHsKICAgICAgICBjb25zdCByID0gewogICAgICAgICAgcGxhdGZvcm06IGZvbnQuZ2V0VWludDE2KCksCiAgICAgICAgICBlbmNvZGluZzogZm9udC5nZXRVaW50MTYoKSwKICAgICAgICAgIGxhbmd1YWdlOiBmb250LmdldFVpbnQxNigpLAogICAgICAgICAgbmFtZTogZm9udC5nZXRVaW50MTYoKSwKICAgICAgICAgIGxlbmd0aDogZm9udC5nZXRVaW50MTYoKSwKICAgICAgICAgIG9mZnNldDogZm9udC5nZXRVaW50MTYoKQogICAgICAgIH07CiAgICAgICAgaWYgKGlzTWFjTmFtZVJlY29yZChyKSB8fCBpc1dpbk5hbWVSZWNvcmQocikpIHsKICAgICAgICAgIHJlY29yZHMucHVzaChyKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgZm9yIChpID0gMCwgaWkgPSByZWNvcmRzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgICBjb25zdCByZWNvcmQgPSByZWNvcmRzW2ldOwogICAgICAgIGlmIChyZWNvcmQubGVuZ3RoIDw9IDApIHsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgICBjb25zdCBwb3MgPSBzdGFydCArIHN0cmluZ3NTdGFydCArIHJlY29yZC5vZmZzZXQ7CiAgICAgICAgaWYgKHBvcyArIHJlY29yZC5sZW5ndGggPiBlbmQpIHsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgICBmb250LnBvcyA9IHBvczsKICAgICAgICBjb25zdCBuYW1lSW5kZXggPSByZWNvcmQubmFtZTsKICAgICAgICBpZiAocmVjb3JkLmVuY29kaW5nKSB7CiAgICAgICAgICBsZXQgc3RyID0gIiI7CiAgICAgICAgICBmb3IgKGxldCBqID0gMCwgamogPSByZWNvcmQubGVuZ3RoOyBqIDwgamo7IGogKz0gMikgewogICAgICAgICAgICBzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShmb250LmdldFVpbnQxNigpKTsKICAgICAgICAgIH0KICAgICAgICAgIG5hbWVzWzFdW25hbWVJbmRleF0gPSBzdHI7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIG5hbWVzWzBdW25hbWVJbmRleF0gPSBmb250LmdldFN0cmluZyhyZWNvcmQubGVuZ3RoKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIFtuYW1lcywgcmVjb3Jkc107CiAgICB9CiAgICBjb25zdCBUVE9wc1N0YWNrRGVsdGFzID0gWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIC0yLCAtMiwgLTIsIC0yLCAwLCAwLCAtMiwgLTUsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgMCwgMCwgLTEsIDAsIC0xLCAtMSwgLTEsIC0xLCAxLCAtMSwgLTk5OSwgMCwgMSwgMCwgLTEsIC0yLCAwLCAtMSwgLTIsIC0xLCAtMSwgMCwgLTEsIC0xLCAwLCAwLCAtOTk5LCAtOTk5LCAtMSwgLTEsIC0xLCAtMSwgLTIsIC05OTksIC0yLCAtMiwgLTk5OSwgMCwgLTIsIC0yLCAwLCAwLCAtMiwgMCwgLTIsIDAsIDAsIDAsIC0yLCAtMSwgLTEsIDEsIDEsIDAsIDAsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAwLCAwLCAtMSwgMCwgLTEsIC0xLCAwLCAtOTk5LCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAtMiwgLTk5OSwgLTk5OSwgLTk5OSwgLTk5OSwgLTk5OSwgLTEsIC0xLCAtMiwgLTIsIDAsIDAsIDAsIDAsIC0xLCAtMSwgLTk5OSwgLTIsIC0yLCAwLCAwLCAtMSwgLTIsIC0yLCAwLCAwLCAwLCAtMSwgLTEsIC0xLCAtMl07CiAgICBmdW5jdGlvbiBzYW5pdGl6ZVRUUHJvZ3JhbSh0YWJsZSwgdHRDb250ZXh0KSB7CiAgICAgIGxldCBkYXRhID0gdGFibGUuZGF0YTsKICAgICAgbGV0IGkgPSAwLAogICAgICAgIGosCiAgICAgICAgbiwKICAgICAgICBiLAogICAgICAgIGZ1bmNJZCwKICAgICAgICBwYywKICAgICAgICBsYXN0RW5kZiA9IDAsCiAgICAgICAgbGFzdERlZmYgPSAwOwogICAgICBjb25zdCBzdGFjayA9IFtdOwogICAgICBjb25zdCBjYWxsc3RhY2sgPSBbXTsKICAgICAgY29uc3QgZnVuY3Rpb25zQ2FsbGVkID0gW107CiAgICAgIGxldCB0b29Db21wbGV4VG9Gb2xsb3dGdW5jdGlvbnMgPSB0dENvbnRleHQudG9vQ29tcGxleFRvRm9sbG93RnVuY3Rpb25zOwogICAgICBsZXQgaW5GREVGID0gZmFsc2UsCiAgICAgICAgaWZMZXZlbCA9IDAsCiAgICAgICAgaW5FTFNFID0gMDsKICAgICAgZm9yIChsZXQgaWkgPSBkYXRhLmxlbmd0aDsgaSA8IGlpOykgewogICAgICAgIGNvbnN0IG9wID0gZGF0YVtpKytdOwogICAgICAgIGlmIChvcCA9PT0gMHg0MCkgewogICAgICAgICAgbiA9IGRhdGFbaSsrXTsKICAgICAgICAgIGlmIChpbkZERUYgfHwgaW5FTFNFKSB7CiAgICAgICAgICAgIGkgKz0gbjsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBuOyBqKyspIHsKICAgICAgICAgICAgICBzdGFjay5wdXNoKGRhdGFbaSsrXSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKG9wID09PSAweDQxKSB7CiAgICAgICAgICBuID0gZGF0YVtpKytdOwogICAgICAgICAgaWYgKGluRkRFRiB8fCBpbkVMU0UpIHsKICAgICAgICAgICAgaSArPSBuICogMjsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBuOyBqKyspIHsKICAgICAgICAgICAgICBiID0gZGF0YVtpKytdOwogICAgICAgICAgICAgIHN0YWNrLnB1c2goYiA8PCA4IHwgZGF0YVtpKytdKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAoKG9wICYgMHhmOCkgPT09IDB4YjApIHsKICAgICAgICAgIG4gPSBvcCAtIDB4YjAgKyAxOwogICAgICAgICAgaWYgKGluRkRFRiB8fCBpbkVMU0UpIHsKICAgICAgICAgICAgaSArPSBuOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IG47IGorKykgewogICAgICAgICAgICAgIHN0YWNrLnB1c2goZGF0YVtpKytdKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAoKG9wICYgMHhmOCkgPT09IDB4YjgpIHsKICAgICAgICAgIG4gPSBvcCAtIDB4YjggKyAxOwogICAgICAgICAgaWYgKGluRkRFRiB8fCBpbkVMU0UpIHsKICAgICAgICAgICAgaSArPSBuICogMjsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBuOyBqKyspIHsKICAgICAgICAgICAgICBiID0gZGF0YVtpKytdOwogICAgICAgICAgICAgIHN0YWNrLnB1c2goc2lnbmVkSW50MTYoYiwgZGF0YVtpKytdKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKG9wID09PSAweDJiICYmICF0b29Db21wbGV4VG9Gb2xsb3dGdW5jdGlvbnMpIHsKICAgICAgICAgIGlmICghaW5GREVGICYmICFpbkVMU0UpIHsKICAgICAgICAgICAgZnVuY0lkID0gc3RhY2suYXQoLTEpOwogICAgICAgICAgICBpZiAoaXNOYU4oZnVuY0lkKSkgewogICAgICAgICAgICAgIGluZm8oIlRUOiBDQUxMIGVtcHR5IHN0YWNrIChvciBpbnZhbGlkIGVudHJ5KS4iKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB0dENvbnRleHQuZnVuY3Rpb25zVXNlZFtmdW5jSWRdID0gdHJ1ZTsKICAgICAgICAgICAgICBpZiAoZnVuY0lkIGluIHR0Q29udGV4dC5mdW5jdGlvbnNTdGFja0RlbHRhcykgewogICAgICAgICAgICAgICAgY29uc3QgbmV3U3RhY2tMZW5ndGggPSBzdGFjay5sZW5ndGggKyB0dENvbnRleHQuZnVuY3Rpb25zU3RhY2tEZWx0YXNbZnVuY0lkXTsKICAgICAgICAgICAgICAgIGlmIChuZXdTdGFja0xlbmd0aCA8IDApIHsKICAgICAgICAgICAgICAgICAgd2FybigiVFQ6IENBTEwgaW52YWxpZCBmdW5jdGlvbnMgc3RhY2sgZGVsdGEuIik7CiAgICAgICAgICAgICAgICAgIHR0Q29udGV4dC5oaW50c1ZhbGlkID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHN0YWNrLmxlbmd0aCA9IG5ld1N0YWNrTGVuZ3RoOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAoZnVuY0lkIGluIHR0Q29udGV4dC5mdW5jdGlvbnNEZWZpbmVkICYmICFmdW5jdGlvbnNDYWxsZWQuaW5jbHVkZXMoZnVuY0lkKSkgewogICAgICAgICAgICAgICAgY2FsbHN0YWNrLnB1c2goewogICAgICAgICAgICAgICAgICBkYXRhLAogICAgICAgICAgICAgICAgICBpLAogICAgICAgICAgICAgICAgICBzdGFja1RvcDogc3RhY2subGVuZ3RoIC0gMQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBmdW5jdGlvbnNDYWxsZWQucHVzaChmdW5jSWQpOwogICAgICAgICAgICAgICAgcGMgPSB0dENvbnRleHQuZnVuY3Rpb25zRGVmaW5lZFtmdW5jSWRdOwogICAgICAgICAgICAgICAgaWYgKCFwYykgewogICAgICAgICAgICAgICAgICB3YXJuKCJUVDogQ0FMTCBub24tZXhpc3RlbnQgZnVuY3Rpb24iKTsKICAgICAgICAgICAgICAgICAgdHRDb250ZXh0LmhpbnRzVmFsaWQgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZGF0YSA9IHBjLmRhdGE7CiAgICAgICAgICAgICAgICBpID0gcGMuaTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKG9wID09PSAweDJjICYmICF0b29Db21wbGV4VG9Gb2xsb3dGdW5jdGlvbnMpIHsKICAgICAgICAgIGlmIChpbkZERUYgfHwgaW5FTFNFKSB7CiAgICAgICAgICAgIHdhcm4oIlRUOiBuZXN0ZWQgRkRFRnMgbm90IGFsbG93ZWQiKTsKICAgICAgICAgICAgdG9vQ29tcGxleFRvRm9sbG93RnVuY3Rpb25zID0gdHJ1ZTsKICAgICAgICAgIH0KICAgICAgICAgIGluRkRFRiA9IHRydWU7CiAgICAgICAgICBsYXN0RGVmZiA9IGk7CiAgICAgICAgICBmdW5jSWQgPSBzdGFjay5wb3AoKTsKICAgICAgICAgIHR0Q29udGV4dC5mdW5jdGlvbnNEZWZpbmVkW2Z1bmNJZF0gPSB7CiAgICAgICAgICAgIGRhdGEsCiAgICAgICAgICAgIGkKICAgICAgICAgIH07CiAgICAgICAgfSBlbHNlIGlmIChvcCA9PT0gMHgyZCkgewogICAgICAgICAgaWYgKGluRkRFRikgewogICAgICAgICAgICBpbkZERUYgPSBmYWxzZTsKICAgICAgICAgICAgbGFzdEVuZGYgPSBpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcGMgPSBjYWxsc3RhY2sucG9wKCk7CiAgICAgICAgICAgIGlmICghcGMpIHsKICAgICAgICAgICAgICB3YXJuKCJUVDogRU5ERiBiYWQgc3RhY2siKTsKICAgICAgICAgICAgICB0dENvbnRleHQuaGludHNWYWxpZCA9IGZhbHNlOwogICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jSWQgPSBmdW5jdGlvbnNDYWxsZWQucG9wKCk7CiAgICAgICAgICAgIGRhdGEgPSBwYy5kYXRhOwogICAgICAgICAgICBpID0gcGMuaTsKICAgICAgICAgICAgdHRDb250ZXh0LmZ1bmN0aW9uc1N0YWNrRGVsdGFzW2Z1bmNJZF0gPSBzdGFjay5sZW5ndGggLSBwYy5zdGFja1RvcDsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKG9wID09PSAweDg5KSB7CiAgICAgICAgICBpZiAoaW5GREVGIHx8IGluRUxTRSkgewogICAgICAgICAgICB3YXJuKCJUVDogbmVzdGVkIElERUZzIG5vdCBhbGxvd2VkIik7CiAgICAgICAgICAgIHRvb0NvbXBsZXhUb0ZvbGxvd0Z1bmN0aW9ucyA9IHRydWU7CiAgICAgICAgICB9CiAgICAgICAgICBpbkZERUYgPSB0cnVlOwogICAgICAgICAgbGFzdERlZmYgPSBpOwogICAgICAgIH0gZWxzZSBpZiAob3AgPT09IDB4NTgpIHsKICAgICAgICAgICsraWZMZXZlbDsKICAgICAgICB9IGVsc2UgaWYgKG9wID09PSAweDFiKSB7CiAgICAgICAgICBpbkVMU0UgPSBpZkxldmVsOwogICAgICAgIH0gZWxzZSBpZiAob3AgPT09IDB4NTkpIHsKICAgICAgICAgIGlmIChpbkVMU0UgPT09IGlmTGV2ZWwpIHsKICAgICAgICAgICAgaW5FTFNFID0gMDsKICAgICAgICAgIH0KICAgICAgICAgIC0taWZMZXZlbDsKICAgICAgICB9IGVsc2UgaWYgKG9wID09PSAweDFjKSB7CiAgICAgICAgICBpZiAoIWluRkRFRiAmJiAhaW5FTFNFKSB7CiAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IHN0YWNrLmF0KC0xKTsKICAgICAgICAgICAgaWYgKG9mZnNldCA+IDApIHsKICAgICAgICAgICAgICBpICs9IG9mZnNldCAtIDE7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKCFpbkZERUYgJiYgIWluRUxTRSkgewogICAgICAgICAgbGV0IHN0YWNrRGVsdGEgPSAwOwogICAgICAgICAgaWYgKG9wIDw9IDB4OGUpIHsKICAgICAgICAgICAgc3RhY2tEZWx0YSA9IFRUT3BzU3RhY2tEZWx0YXNbb3BdOwogICAgICAgICAgfSBlbHNlIGlmIChvcCA+PSAweGMwICYmIG9wIDw9IDB4ZGYpIHsKICAgICAgICAgICAgc3RhY2tEZWx0YSA9IC0xOwogICAgICAgICAgfSBlbHNlIGlmIChvcCA+PSAweGUwKSB7CiAgICAgICAgICAgIHN0YWNrRGVsdGEgPSAtMjsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChvcCA+PSAweDcxICYmIG9wIDw9IDB4NzUpIHsKICAgICAgICAgICAgbiA9IHN0YWNrLnBvcCgpOwogICAgICAgICAgICBpZiAoIWlzTmFOKG4pKSB7CiAgICAgICAgICAgICAgc3RhY2tEZWx0YSA9IC1uICogMjsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgd2hpbGUgKHN0YWNrRGVsdGEgPCAwICYmIHN0YWNrLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgc3RhY2sucG9wKCk7CiAgICAgICAgICAgIHN0YWNrRGVsdGErKzsKICAgICAgICAgIH0KICAgICAgICAgIHdoaWxlIChzdGFja0RlbHRhID4gMCkgewogICAgICAgICAgICBzdGFjay5wdXNoKE5hTik7CiAgICAgICAgICAgIHN0YWNrRGVsdGEtLTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgdHRDb250ZXh0LnRvb0NvbXBsZXhUb0ZvbGxvd0Z1bmN0aW9ucyA9IHRvb0NvbXBsZXhUb0ZvbGxvd0Z1bmN0aW9uczsKICAgICAgY29uc3QgY29udGVudCA9IFtkYXRhXTsKICAgICAgaWYgKGkgPiBkYXRhLmxlbmd0aCkgewogICAgICAgIGNvbnRlbnQucHVzaChuZXcgVWludDhBcnJheShpIC0gZGF0YS5sZW5ndGgpKTsKICAgICAgfQogICAgICBpZiAobGFzdERlZmYgPiBsYXN0RW5kZikgewogICAgICAgIHdhcm4oIlRUOiBjb21wbGVtZW50aW5nIGEgbWlzc2luZyBmdW5jdGlvbiB0YWlsIik7CiAgICAgICAgY29udGVudC5wdXNoKG5ldyBVaW50OEFycmF5KFsweDIyLCAweDJkXSkpOwogICAgICB9CiAgICAgIGZvbGRUVFRhYmxlKHRhYmxlLCBjb250ZW50KTsKICAgIH0KICAgIGZ1bmN0aW9uIGNoZWNrSW52YWxpZEZ1bmN0aW9ucyh0dENvbnRleHQsIG1heEZ1bmN0aW9uRGVmcykgewogICAgICBpZiAodHRDb250ZXh0LnRvb0NvbXBsZXhUb0ZvbGxvd0Z1bmN0aW9ucykgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBpZiAodHRDb250ZXh0LmZ1bmN0aW9uc0RlZmluZWQubGVuZ3RoID4gbWF4RnVuY3Rpb25EZWZzKSB7CiAgICAgICAgd2FybigiVFQ6IG1vcmUgZnVuY3Rpb25zIGRlZmluZWQgdGhhbiBleHBlY3RlZCIpOwogICAgICAgIHR0Q29udGV4dC5oaW50c1ZhbGlkID0gZmFsc2U7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIGZvciAobGV0IGogPSAwLCBqaiA9IHR0Q29udGV4dC5mdW5jdGlvbnNVc2VkLmxlbmd0aDsgaiA8IGpqOyBqKyspIHsKICAgICAgICBpZiAoaiA+IG1heEZ1bmN0aW9uRGVmcykgewogICAgICAgICAgd2FybigiVFQ6IGludmFsaWQgZnVuY3Rpb24gaWQ6ICIgKyBqKTsKICAgICAgICAgIHR0Q29udGV4dC5oaW50c1ZhbGlkID0gZmFsc2U7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGlmICh0dENvbnRleHQuZnVuY3Rpb25zVXNlZFtqXSAmJiAhdHRDb250ZXh0LmZ1bmN0aW9uc0RlZmluZWRbal0pIHsKICAgICAgICAgIHdhcm4oIlRUOiB1bmRlZmluZWQgZnVuY3Rpb246ICIgKyBqKTsKICAgICAgICAgIHR0Q29udGV4dC5oaW50c1ZhbGlkID0gZmFsc2U7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBmdW5jdGlvbiBmb2xkVFRUYWJsZSh0YWJsZSwgY29udGVudCkgewogICAgICBpZiAoY29udGVudC5sZW5ndGggPiAxKSB7CiAgICAgICAgbGV0IG5ld0xlbmd0aCA9IDA7CiAgICAgICAgbGV0IGosIGpqOwogICAgICAgIGZvciAoaiA9IDAsIGpqID0gY29udGVudC5sZW5ndGg7IGogPCBqajsgaisrKSB7CiAgICAgICAgICBuZXdMZW5ndGggKz0gY29udGVudFtqXS5sZW5ndGg7CiAgICAgICAgfQogICAgICAgIG5ld0xlbmd0aCA9IG5ld0xlbmd0aCArIDMgJiB+MzsKICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgVWludDhBcnJheShuZXdMZW5ndGgpOwogICAgICAgIGxldCBwb3MgPSAwOwogICAgICAgIGZvciAoaiA9IDAsIGpqID0gY29udGVudC5sZW5ndGg7IGogPCBqajsgaisrKSB7CiAgICAgICAgICByZXN1bHQuc2V0KGNvbnRlbnRbal0sIHBvcyk7CiAgICAgICAgICBwb3MgKz0gY29udGVudFtqXS5sZW5ndGg7CiAgICAgICAgfQogICAgICAgIHRhYmxlLmRhdGEgPSByZXN1bHQ7CiAgICAgICAgdGFibGUubGVuZ3RoID0gbmV3TGVuZ3RoOwogICAgICB9CiAgICB9CiAgICBmdW5jdGlvbiBzYW5pdGl6ZVRUUHJvZ3JhbXMoZnBnbSwgcHJlcCwgY3Z0LCBtYXhGdW5jdGlvbkRlZnMpIHsKICAgICAgY29uc3QgdHRDb250ZXh0ID0gewogICAgICAgIGZ1bmN0aW9uc0RlZmluZWQ6IFtdLAogICAgICAgIGZ1bmN0aW9uc1VzZWQ6IFtdLAogICAgICAgIGZ1bmN0aW9uc1N0YWNrRGVsdGFzOiBbXSwKICAgICAgICB0b29Db21wbGV4VG9Gb2xsb3dGdW5jdGlvbnM6IGZhbHNlLAogICAgICAgIGhpbnRzVmFsaWQ6IHRydWUKICAgICAgfTsKICAgICAgaWYgKGZwZ20pIHsKICAgICAgICBzYW5pdGl6ZVRUUHJvZ3JhbShmcGdtLCB0dENvbnRleHQpOwogICAgICB9CiAgICAgIGlmIChwcmVwKSB7CiAgICAgICAgc2FuaXRpemVUVFByb2dyYW0ocHJlcCwgdHRDb250ZXh0KTsKICAgICAgfQogICAgICBpZiAoZnBnbSkgewogICAgICAgIGNoZWNrSW52YWxpZEZ1bmN0aW9ucyh0dENvbnRleHQsIG1heEZ1bmN0aW9uRGVmcyk7CiAgICAgIH0KICAgICAgaWYgKGN2dCAmJiBjdnQubGVuZ3RoICYgMSkgewogICAgICAgIGNvbnN0IGN2dERhdGEgPSBuZXcgVWludDhBcnJheShjdnQubGVuZ3RoICsgMSk7CiAgICAgICAgY3Z0RGF0YS5zZXQoY3Z0LmRhdGEpOwogICAgICAgIGN2dC5kYXRhID0gY3Z0RGF0YTsKICAgICAgfQogICAgICByZXR1cm4gdHRDb250ZXh0LmhpbnRzVmFsaWQ7CiAgICB9CiAgICBmb250ID0gbmV3IFN0cmVhbShuZXcgVWludDhBcnJheShmb250LmdldEJ5dGVzKCkpKTsKICAgIGxldCBoZWFkZXIsIHRhYmxlczsKICAgIGlmIChpc1RydWVUeXBlQ29sbGVjdGlvbkZpbGUoZm9udCkpIHsKICAgICAgY29uc3QgdHRjRGF0YSA9IHJlYWRUcnVlVHlwZUNvbGxlY3Rpb25EYXRhKGZvbnQsIHRoaXMubmFtZSk7CiAgICAgIGhlYWRlciA9IHR0Y0RhdGEuaGVhZGVyOwogICAgICB0YWJsZXMgPSB0dGNEYXRhLnRhYmxlczsKICAgIH0gZWxzZSB7CiAgICAgIGhlYWRlciA9IHJlYWRPcGVuVHlwZUhlYWRlcihmb250KTsKICAgICAgdGFibGVzID0gcmVhZFRhYmxlcyhmb250LCBoZWFkZXIubnVtVGFibGVzKTsKICAgIH0KICAgIGxldCBjZmYsIGNmZkZpbGU7CiAgICBjb25zdCBpc1RydWVUeXBlID0gIXRhYmxlc1siQ0ZGICJdOwogICAgaWYgKCFpc1RydWVUeXBlKSB7CiAgICAgIGNvbnN0IGlzQ29tcG9zaXRlID0gcHJvcGVydGllcy5jb21wb3NpdGUgJiYgKHByb3BlcnRpZXMuY2lkVG9HaWRNYXA/Lmxlbmd0aCA+IDAgfHwgIShwcm9wZXJ0aWVzLmNNYXAgaW5zdGFuY2VvZiBJZGVudGl0eUNNYXApKTsKICAgICAgaWYgKGhlYWRlci52ZXJzaW9uID09PSAiT1RUTyIgJiYgIWlzQ29tcG9zaXRlIHx8ICF0YWJsZXMuaGVhZCB8fCAhdGFibGVzLmhoZWEgfHwgIXRhYmxlcy5tYXhwIHx8ICF0YWJsZXMucG9zdCkgewogICAgICAgIGNmZkZpbGUgPSBuZXcgU3RyZWFtKHRhYmxlc1siQ0ZGICJdLmRhdGEpOwogICAgICAgIGNmZiA9IG5ldyBDRkZGb250KGNmZkZpbGUsIHByb3BlcnRpZXMpOwogICAgICAgIHJldHVybiB0aGlzLmNvbnZlcnQobmFtZSwgY2ZmLCBwcm9wZXJ0aWVzKTsKICAgICAgfQogICAgICBkZWxldGUgdGFibGVzLmdseWY7CiAgICAgIGRlbGV0ZSB0YWJsZXMubG9jYTsKICAgICAgZGVsZXRlIHRhYmxlcy5mcGdtOwogICAgICBkZWxldGUgdGFibGVzLnByZXA7CiAgICAgIGRlbGV0ZSB0YWJsZXNbImN2dCAiXTsKICAgICAgdGhpcy5pc09wZW5UeXBlID0gdHJ1ZTsKICAgIH0gZWxzZSB7CiAgICAgIGlmICghdGFibGVzLmxvY2EpIHsKICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoJ1JlcXVpcmVkICJsb2NhIiB0YWJsZSBpcyBub3QgZm91bmQnKTsKICAgICAgfQogICAgICBpZiAoIXRhYmxlcy5nbHlmKSB7CiAgICAgICAgd2FybignUmVxdWlyZWQgImdseWYiIHRhYmxlIGlzIG5vdCBmb3VuZCAtLSB0cnlpbmcgdG8gcmVjb3Zlci4nKTsKICAgICAgICB0YWJsZXMuZ2x5ZiA9IHsKICAgICAgICAgIHRhZzogImdseWYiLAogICAgICAgICAgZGF0YTogbmV3IFVpbnQ4QXJyYXkoMCkKICAgICAgICB9OwogICAgICB9CiAgICAgIHRoaXMuaXNPcGVuVHlwZSA9IGZhbHNlOwogICAgfQogICAgaWYgKCF0YWJsZXMubWF4cCkgewogICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoJ1JlcXVpcmVkICJtYXhwIiB0YWJsZSBpcyBub3QgZm91bmQnKTsKICAgIH0KICAgIGZvbnQucG9zID0gKGZvbnQuc3RhcnQgfHwgMCkgKyB0YWJsZXMubWF4cC5vZmZzZXQ7CiAgICBsZXQgdmVyc2lvbiA9IGZvbnQuZ2V0SW50MzIoKTsKICAgIGNvbnN0IG51bUdseXBocyA9IGZvbnQuZ2V0VWludDE2KCk7CiAgICBpZiAodmVyc2lvbiAhPT0gMHgwMDAxMDAwMCAmJiB2ZXJzaW9uICE9PSAweDAwMDA1MDAwKSB7CiAgICAgIGlmICh0YWJsZXMubWF4cC5sZW5ndGggPT09IDYpIHsKICAgICAgICB2ZXJzaW9uID0gMHgwMDA1MDAwOwogICAgICB9IGVsc2UgaWYgKHRhYmxlcy5tYXhwLmxlbmd0aCA+PSAzMikgewogICAgICAgIHZlcnNpb24gPSAweDAwMDEwMDAwOwogICAgICB9IGVsc2UgewogICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcihgIm1heHAiIHRhYmxlIGhhcyBhIHdyb25nIHZlcnNpb24gbnVtYmVyYCk7CiAgICAgIH0KICAgICAgd3JpdGVVaW50MzIodGFibGVzLm1heHAuZGF0YSwgMCwgdmVyc2lvbik7CiAgICB9CiAgICBpZiAocHJvcGVydGllcy5zY2FsZUZhY3RvcnM/Lmxlbmd0aCA9PT0gbnVtR2x5cGhzICYmIGlzVHJ1ZVR5cGUpIHsKICAgICAgY29uc3QgewogICAgICAgIHNjYWxlRmFjdG9ycwogICAgICB9ID0gcHJvcGVydGllczsKICAgICAgY29uc3QgaXNHbHlwaExvY2F0aW9uc0xvbmcgPSBpbnQxNih0YWJsZXMuaGVhZC5kYXRhWzUwXSwgdGFibGVzLmhlYWQuZGF0YVs1MV0pOwogICAgICBjb25zdCBnbHlwaHMgPSBuZXcgR2x5ZlRhYmxlKHsKICAgICAgICBnbHlmVGFibGU6IHRhYmxlcy5nbHlmLmRhdGEsCiAgICAgICAgaXNHbHlwaExvY2F0aW9uc0xvbmcsCiAgICAgICAgbG9jYVRhYmxlOiB0YWJsZXMubG9jYS5kYXRhLAogICAgICAgIG51bUdseXBocwogICAgICB9KTsKICAgICAgZ2x5cGhzLnNjYWxlKHNjYWxlRmFjdG9ycyk7CiAgICAgIGNvbnN0IHsKICAgICAgICBnbHlmLAogICAgICAgIGxvY2EsCiAgICAgICAgaXNMb2NhdGlvbkxvbmcKICAgICAgfSA9IGdseXBocy53cml0ZSgpOwogICAgICB0YWJsZXMuZ2x5Zi5kYXRhID0gZ2x5ZjsKICAgICAgdGFibGVzLmxvY2EuZGF0YSA9IGxvY2E7CiAgICAgIGlmIChpc0xvY2F0aW9uTG9uZyAhPT0gISFpc0dseXBoTG9jYXRpb25zTG9uZykgewogICAgICAgIHRhYmxlcy5oZWFkLmRhdGFbNTBdID0gMDsKICAgICAgICB0YWJsZXMuaGVhZC5kYXRhWzUxXSA9IGlzTG9jYXRpb25Mb25nID8gMSA6IDA7CiAgICAgIH0KICAgICAgY29uc3QgbWV0cmljcyA9IHRhYmxlcy5obXR4LmRhdGE7CiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtR2x5cGhzOyBpKyspIHsKICAgICAgICBjb25zdCBqID0gNCAqIGk7CiAgICAgICAgY29uc3QgYWR2YW5jZVdpZHRoID0gTWF0aC5yb3VuZChzY2FsZUZhY3RvcnNbaV0gKiBpbnQxNihtZXRyaWNzW2pdLCBtZXRyaWNzW2ogKyAxXSkpOwogICAgICAgIG1ldHJpY3Nbal0gPSBhZHZhbmNlV2lkdGggPj4gOCAmIDB4ZmY7CiAgICAgICAgbWV0cmljc1tqICsgMV0gPSBhZHZhbmNlV2lkdGggJiAweGZmOwogICAgICAgIGNvbnN0IGxzYiA9IE1hdGgucm91bmQoc2NhbGVGYWN0b3JzW2ldICogc2lnbmVkSW50MTYobWV0cmljc1tqICsgMl0sIG1ldHJpY3NbaiArIDNdKSk7CiAgICAgICAgd3JpdGVTaWduZWRJbnQxNihtZXRyaWNzLCBqICsgMiwgbHNiKTsKICAgICAgfQogICAgfQogICAgbGV0IG51bUdseXBoc091dCA9IG51bUdseXBocyArIDE7CiAgICBsZXQgZHVwRmlyc3RFbnRyeSA9IHRydWU7CiAgICBpZiAobnVtR2x5cGhzT3V0ID4gMHhmZmZmKSB7CiAgICAgIGR1cEZpcnN0RW50cnkgPSBmYWxzZTsKICAgICAgbnVtR2x5cGhzT3V0ID0gbnVtR2x5cGhzOwogICAgICB3YXJuKCJOb3QgZW5vdWdoIHNwYWNlIGluIGdseWZzIHRvIGR1cGxpY2F0ZSBmaXJzdCBnbHlwaC4iKTsKICAgIH0KICAgIGxldCBtYXhGdW5jdGlvbkRlZnMgPSAwOwogICAgbGV0IG1heFNpemVPZkluc3RydWN0aW9ucyA9IDA7CiAgICBpZiAodmVyc2lvbiA+PSAweDAwMDEwMDAwICYmIHRhYmxlcy5tYXhwLmxlbmd0aCA+PSAzMikgewogICAgICBmb250LnBvcyArPSA4OwogICAgICBjb25zdCBtYXhab25lcyA9IGZvbnQuZ2V0VWludDE2KCk7CiAgICAgIGlmIChtYXhab25lcyA+IDIpIHsKICAgICAgICB0YWJsZXMubWF4cC5kYXRhWzE0XSA9IDA7CiAgICAgICAgdGFibGVzLm1heHAuZGF0YVsxNV0gPSAyOwogICAgICB9CiAgICAgIGZvbnQucG9zICs9IDQ7CiAgICAgIG1heEZ1bmN0aW9uRGVmcyA9IGZvbnQuZ2V0VWludDE2KCk7CiAgICAgIGZvbnQucG9zICs9IDQ7CiAgICAgIG1heFNpemVPZkluc3RydWN0aW9ucyA9IGZvbnQuZ2V0VWludDE2KCk7CiAgICB9CiAgICB0YWJsZXMubWF4cC5kYXRhWzRdID0gbnVtR2x5cGhzT3V0ID4+IDg7CiAgICB0YWJsZXMubWF4cC5kYXRhWzVdID0gbnVtR2x5cGhzT3V0ICYgMjU1OwogICAgY29uc3QgaGludHNWYWxpZCA9IHNhbml0aXplVFRQcm9ncmFtcyh0YWJsZXMuZnBnbSwgdGFibGVzLnByZXAsIHRhYmxlc1siY3Z0ICJdLCBtYXhGdW5jdGlvbkRlZnMpOwogICAgaWYgKCFoaW50c1ZhbGlkKSB7CiAgICAgIGRlbGV0ZSB0YWJsZXMuZnBnbTsKICAgICAgZGVsZXRlIHRhYmxlcy5wcmVwOwogICAgICBkZWxldGUgdGFibGVzWyJjdnQgIl07CiAgICB9CiAgICBzYW5pdGl6ZU1ldHJpY3MoZm9udCwgdGFibGVzLmhoZWEsIHRhYmxlcy5obXR4LCB0YWJsZXMuaGVhZCwgbnVtR2x5cGhzT3V0LCBkdXBGaXJzdEVudHJ5KTsKICAgIGlmICghdGFibGVzLmhlYWQpIHsKICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCdSZXF1aXJlZCAiaGVhZCIgdGFibGUgaXMgbm90IGZvdW5kJyk7CiAgICB9CiAgICBzYW5pdGl6ZUhlYWQodGFibGVzLmhlYWQsIG51bUdseXBocywgaXNUcnVlVHlwZSA/IHRhYmxlcy5sb2NhLmxlbmd0aCA6IDApOwogICAgbGV0IG1pc3NpbmdHbHlwaHMgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgaWYgKGlzVHJ1ZVR5cGUpIHsKICAgICAgY29uc3QgaXNHbHlwaExvY2F0aW9uc0xvbmcgPSBpbnQxNih0YWJsZXMuaGVhZC5kYXRhWzUwXSwgdGFibGVzLmhlYWQuZGF0YVs1MV0pOwogICAgICBjb25zdCBnbHlwaHNJbmZvID0gc2FuaXRpemVHbHlwaExvY2F0aW9ucyh0YWJsZXMubG9jYSwgdGFibGVzLmdseWYsIG51bUdseXBocywgaXNHbHlwaExvY2F0aW9uc0xvbmcsIGhpbnRzVmFsaWQsIGR1cEZpcnN0RW50cnksIG1heFNpemVPZkluc3RydWN0aW9ucyk7CiAgICAgIG1pc3NpbmdHbHlwaHMgPSBnbHlwaHNJbmZvLm1pc3NpbmdHbHlwaHM7CiAgICAgIGlmICh2ZXJzaW9uID49IDB4MDAwMTAwMDAgJiYgdGFibGVzLm1heHAubGVuZ3RoID49IDMyKSB7CiAgICAgICAgdGFibGVzLm1heHAuZGF0YVsyNl0gPSBnbHlwaHNJbmZvLm1heFNpemVPZkluc3RydWN0aW9ucyA+PiA4OwogICAgICAgIHRhYmxlcy5tYXhwLmRhdGFbMjddID0gZ2x5cGhzSW5mby5tYXhTaXplT2ZJbnN0cnVjdGlvbnMgJiAyNTU7CiAgICAgIH0KICAgIH0KICAgIGlmICghdGFibGVzLmhoZWEpIHsKICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCdSZXF1aXJlZCAiaGhlYSIgdGFibGUgaXMgbm90IGZvdW5kJyk7CiAgICB9CiAgICBpZiAodGFibGVzLmhoZWEuZGF0YVsxMF0gPT09IDAgJiYgdGFibGVzLmhoZWEuZGF0YVsxMV0gPT09IDApIHsKICAgICAgdGFibGVzLmhoZWEuZGF0YVsxMF0gPSAweGZmOwogICAgICB0YWJsZXMuaGhlYS5kYXRhWzExXSA9IDB4ZmY7CiAgICB9CiAgICBjb25zdCBtZXRyaWNzT3ZlcnJpZGUgPSB7CiAgICAgIHVuaXRzUGVyRW06IGludDE2KHRhYmxlcy5oZWFkLmRhdGFbMThdLCB0YWJsZXMuaGVhZC5kYXRhWzE5XSksCiAgICAgIHlNYXg6IHNpZ25lZEludDE2KHRhYmxlcy5oZWFkLmRhdGFbNDJdLCB0YWJsZXMuaGVhZC5kYXRhWzQzXSksCiAgICAgIHlNaW46IHNpZ25lZEludDE2KHRhYmxlcy5oZWFkLmRhdGFbMzhdLCB0YWJsZXMuaGVhZC5kYXRhWzM5XSksCiAgICAgIGFzY2VudDogc2lnbmVkSW50MTYodGFibGVzLmhoZWEuZGF0YVs0XSwgdGFibGVzLmhoZWEuZGF0YVs1XSksCiAgICAgIGRlc2NlbnQ6IHNpZ25lZEludDE2KHRhYmxlcy5oaGVhLmRhdGFbNl0sIHRhYmxlcy5oaGVhLmRhdGFbN10pLAogICAgICBsaW5lR2FwOiBzaWduZWRJbnQxNih0YWJsZXMuaGhlYS5kYXRhWzhdLCB0YWJsZXMuaGhlYS5kYXRhWzldKQogICAgfTsKICAgIHRoaXMuYXNjZW50ID0gbWV0cmljc092ZXJyaWRlLmFzY2VudCAvIG1ldHJpY3NPdmVycmlkZS51bml0c1BlckVtOwogICAgdGhpcy5kZXNjZW50ID0gbWV0cmljc092ZXJyaWRlLmRlc2NlbnQgLyBtZXRyaWNzT3ZlcnJpZGUudW5pdHNQZXJFbTsKICAgIHRoaXMubGluZUdhcCA9IG1ldHJpY3NPdmVycmlkZS5saW5lR2FwIC8gbWV0cmljc092ZXJyaWRlLnVuaXRzUGVyRW07CiAgICBpZiAodGhpcy5jc3NGb250SW5mbz8ubGluZUhlaWdodCkgewogICAgICB0aGlzLmxpbmVIZWlnaHQgPSB0aGlzLmNzc0ZvbnRJbmZvLm1ldHJpY3MubGluZUhlaWdodDsKICAgICAgdGhpcy5saW5lR2FwID0gdGhpcy5jc3NGb250SW5mby5tZXRyaWNzLmxpbmVHYXA7CiAgICB9IGVsc2UgewogICAgICB0aGlzLmxpbmVIZWlnaHQgPSB0aGlzLmFzY2VudCAtIHRoaXMuZGVzY2VudCArIHRoaXMubGluZUdhcDsKICAgIH0KICAgIGlmICh0YWJsZXMucG9zdCkgewogICAgICByZWFkUG9zdFNjcmlwdFRhYmxlKHRhYmxlcy5wb3N0LCBwcm9wZXJ0aWVzLCBudW1HbHlwaHMpOwogICAgfQogICAgdGFibGVzLnBvc3QgPSB7CiAgICAgIHRhZzogInBvc3QiLAogICAgICBkYXRhOiBjcmVhdGVQb3N0VGFibGUocHJvcGVydGllcykKICAgIH07CiAgICBjb25zdCBjaGFyQ29kZVRvR2x5cGhJZCA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgICBmdW5jdGlvbiBoYXNHbHlwaChnbHlwaElkKSB7CiAgICAgIHJldHVybiAhbWlzc2luZ0dseXBoc1tnbHlwaElkXTsKICAgIH0KICAgIGlmIChwcm9wZXJ0aWVzLmNvbXBvc2l0ZSkgewogICAgICBjb25zdCBjaWRUb0dpZE1hcCA9IHByb3BlcnRpZXMuY2lkVG9HaWRNYXAgfHwgW107CiAgICAgIGNvbnN0IGlzQ2lkVG9HaWRNYXBFbXB0eSA9IGNpZFRvR2lkTWFwLmxlbmd0aCA9PT0gMDsKICAgICAgcHJvcGVydGllcy5jTWFwLmZvckVhY2goZnVuY3Rpb24gKGNoYXJDb2RlLCBjaWQpIHsKICAgICAgICBpZiAodHlwZW9mIGNpZCA9PT0gInN0cmluZyIpIHsKICAgICAgICAgIGNpZCA9IGNvbnZlcnRDaWRTdHJpbmcoY2hhckNvZGUsIGNpZCwgdHJ1ZSk7CiAgICAgICAgfQogICAgICAgIGlmIChjaWQgPiAweGZmZmYpIHsKICAgICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigiTWF4IHNpemUgb2YgQ0lEIGlzIDY1LDUzNSIpOwogICAgICAgIH0KICAgICAgICBsZXQgZ2x5cGhJZCA9IC0xOwogICAgICAgIGlmIChpc0NpZFRvR2lkTWFwRW1wdHkpIHsKICAgICAgICAgIGdseXBoSWQgPSBjaWQ7CiAgICAgICAgfSBlbHNlIGlmIChjaWRUb0dpZE1hcFtjaWRdICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgIGdseXBoSWQgPSBjaWRUb0dpZE1hcFtjaWRdOwogICAgICAgIH0KICAgICAgICBpZiAoZ2x5cGhJZCA+PSAwICYmIGdseXBoSWQgPCBudW1HbHlwaHMgJiYgaGFzR2x5cGgoZ2x5cGhJZCkpIHsKICAgICAgICAgIGNoYXJDb2RlVG9HbHlwaElkW2NoYXJDb2RlXSA9IGdseXBoSWQ7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0gZWxzZSB7CiAgICAgIGNvbnN0IGNtYXBUYWJsZSA9IHJlYWRDbWFwVGFibGUodGFibGVzLmNtYXAsIGZvbnQsIHRoaXMuaXNTeW1ib2xpY0ZvbnQsIHByb3BlcnRpZXMuaGFzRW5jb2RpbmcpOwogICAgICBjb25zdCBjbWFwUGxhdGZvcm1JZCA9IGNtYXBUYWJsZS5wbGF0Zm9ybUlkOwogICAgICBjb25zdCBjbWFwRW5jb2RpbmdJZCA9IGNtYXBUYWJsZS5lbmNvZGluZ0lkOwogICAgICBjb25zdCBjbWFwTWFwcGluZ3MgPSBjbWFwVGFibGUubWFwcGluZ3M7CiAgICAgIGxldCBiYXNlRW5jb2RpbmcgPSBbXSwKICAgICAgICBmb3JjZVBvc3RUYWJsZSA9IGZhbHNlOwogICAgICBpZiAocHJvcGVydGllcy5oYXNFbmNvZGluZyAmJiAocHJvcGVydGllcy5iYXNlRW5jb2RpbmdOYW1lID09PSAiTWFjUm9tYW5FbmNvZGluZyIgfHwgcHJvcGVydGllcy5iYXNlRW5jb2RpbmdOYW1lID09PSAiV2luQW5zaUVuY29kaW5nIikpIHsKICAgICAgICBiYXNlRW5jb2RpbmcgPSBnZXRFbmNvZGluZyhwcm9wZXJ0aWVzLmJhc2VFbmNvZGluZ05hbWUpOwogICAgICB9CiAgICAgIGlmIChwcm9wZXJ0aWVzLmhhc0VuY29kaW5nICYmICF0aGlzLmlzU3ltYm9saWNGb250ICYmIChjbWFwUGxhdGZvcm1JZCA9PT0gMyAmJiBjbWFwRW5jb2RpbmdJZCA9PT0gMSB8fCBjbWFwUGxhdGZvcm1JZCA9PT0gMSAmJiBjbWFwRW5jb2RpbmdJZCA9PT0gMCkpIHsKICAgICAgICBjb25zdCBnbHlwaHNVbmljb2RlTWFwID0gZ2V0R2x5cGhzVW5pY29kZSgpOwogICAgICAgIGZvciAobGV0IGNoYXJDb2RlID0gMDsgY2hhckNvZGUgPCAyNTY7IGNoYXJDb2RlKyspIHsKICAgICAgICAgIGxldCBnbHlwaE5hbWU7CiAgICAgICAgICBpZiAodGhpcy5kaWZmZXJlbmNlc1tjaGFyQ29kZV0gIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICBnbHlwaE5hbWUgPSB0aGlzLmRpZmZlcmVuY2VzW2NoYXJDb2RlXTsKICAgICAgICAgIH0gZWxzZSBpZiAoYmFzZUVuY29kaW5nLmxlbmd0aCAmJiBiYXNlRW5jb2RpbmdbY2hhckNvZGVdICE9PSAiIikgewogICAgICAgICAgICBnbHlwaE5hbWUgPSBiYXNlRW5jb2RpbmdbY2hhckNvZGVdOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZ2x5cGhOYW1lID0gU3RhbmRhcmRFbmNvZGluZ1tjaGFyQ29kZV07CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoIWdseXBoTmFtZSkgewogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IHN0YW5kYXJkR2x5cGhOYW1lID0gcmVjb3ZlckdseXBoTmFtZShnbHlwaE5hbWUsIGdseXBoc1VuaWNvZGVNYXApOwogICAgICAgICAgbGV0IHVuaWNvZGVPckNoYXJDb2RlOwogICAgICAgICAgaWYgKGNtYXBQbGF0Zm9ybUlkID09PSAzICYmIGNtYXBFbmNvZGluZ0lkID09PSAxKSB7CiAgICAgICAgICAgIHVuaWNvZGVPckNoYXJDb2RlID0gZ2x5cGhzVW5pY29kZU1hcFtzdGFuZGFyZEdseXBoTmFtZV07CiAgICAgICAgICB9IGVsc2UgaWYgKGNtYXBQbGF0Zm9ybUlkID09PSAxICYmIGNtYXBFbmNvZGluZ0lkID09PSAwKSB7CiAgICAgICAgICAgIHVuaWNvZGVPckNoYXJDb2RlID0gTWFjUm9tYW5FbmNvZGluZy5pbmRleE9mKHN0YW5kYXJkR2x5cGhOYW1lKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh1bmljb2RlT3JDaGFyQ29kZSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIGlmICghcHJvcGVydGllcy5nbHlwaE5hbWVzICYmIHByb3BlcnRpZXMuaGFzSW5jbHVkZWRUb1VuaWNvZGVNYXAgJiYgISh0aGlzLnRvVW5pY29kZSBpbnN0YW5jZW9mIElkZW50aXR5VG9Vbmljb2RlTWFwKSkgewogICAgICAgICAgICAgIGNvbnN0IHVuaWNvZGUgPSB0aGlzLnRvVW5pY29kZS5nZXQoY2hhckNvZGUpOwogICAgICAgICAgICAgIGlmICh1bmljb2RlKSB7CiAgICAgICAgICAgICAgICB1bmljb2RlT3JDaGFyQ29kZSA9IHVuaWNvZGUuY29kZVBvaW50QXQoMCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh1bmljb2RlT3JDaGFyQ29kZSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGZvciAoY29uc3QgbWFwcGluZyBvZiBjbWFwTWFwcGluZ3MpIHsKICAgICAgICAgICAgaWYgKG1hcHBpbmcuY2hhckNvZGUgIT09IHVuaWNvZGVPckNoYXJDb2RlKSB7CiAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2hhckNvZGVUb0dseXBoSWRbY2hhckNvZGVdID0gbWFwcGluZy5nbHlwaElkOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAoY21hcFBsYXRmb3JtSWQgPT09IDApIHsKICAgICAgICBmb3IgKGNvbnN0IG1hcHBpbmcgb2YgY21hcE1hcHBpbmdzKSB7CiAgICAgICAgICBjaGFyQ29kZVRvR2x5cGhJZFttYXBwaW5nLmNoYXJDb2RlXSA9IG1hcHBpbmcuZ2x5cGhJZDsKICAgICAgICB9CiAgICAgICAgZm9yY2VQb3N0VGFibGUgPSB0cnVlOwogICAgICB9IGVsc2UgaWYgKGNtYXBQbGF0Zm9ybUlkID09PSAzICYmIGNtYXBFbmNvZGluZ0lkID09PSAwKSB7CiAgICAgICAgZm9yIChjb25zdCBtYXBwaW5nIG9mIGNtYXBNYXBwaW5ncykgewogICAgICAgICAgbGV0IGNoYXJDb2RlID0gbWFwcGluZy5jaGFyQ29kZTsKICAgICAgICAgIGlmIChjaGFyQ29kZSA+PSAweGYwMDAgJiYgY2hhckNvZGUgPD0gMHhmMGZmKSB7CiAgICAgICAgICAgIGNoYXJDb2RlICY9IDB4ZmY7CiAgICAgICAgICB9CiAgICAgICAgICBjaGFyQ29kZVRvR2x5cGhJZFtjaGFyQ29kZV0gPSBtYXBwaW5nLmdseXBoSWQ7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIGZvciAoY29uc3QgbWFwcGluZyBvZiBjbWFwTWFwcGluZ3MpIHsKICAgICAgICAgIGNoYXJDb2RlVG9HbHlwaElkW21hcHBpbmcuY2hhckNvZGVdID0gbWFwcGluZy5nbHlwaElkOwogICAgICAgIH0KICAgICAgfQogICAgICBpZiAocHJvcGVydGllcy5nbHlwaE5hbWVzICYmIChiYXNlRW5jb2RpbmcubGVuZ3RoIHx8IHRoaXMuZGlmZmVyZW5jZXMubGVuZ3RoKSkgewogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMjU2OyArK2kpIHsKICAgICAgICAgIGlmICghZm9yY2VQb3N0VGFibGUgJiYgY2hhckNvZGVUb0dseXBoSWRbaV0gIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IGdseXBoTmFtZSA9IHRoaXMuZGlmZmVyZW5jZXNbaV0gfHwgYmFzZUVuY29kaW5nW2ldOwogICAgICAgICAgaWYgKCFnbHlwaE5hbWUpIHsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICBjb25zdCBnbHlwaElkID0gcHJvcGVydGllcy5nbHlwaE5hbWVzLmluZGV4T2YoZ2x5cGhOYW1lKTsKICAgICAgICAgIGlmIChnbHlwaElkID4gMCAmJiBoYXNHbHlwaChnbHlwaElkKSkgewogICAgICAgICAgICBjaGFyQ29kZVRvR2x5cGhJZFtpXSA9IGdseXBoSWQ7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBpZiAoY2hhckNvZGVUb0dseXBoSWQubGVuZ3RoID09PSAwKSB7CiAgICAgIGNoYXJDb2RlVG9HbHlwaElkWzBdID0gMDsKICAgIH0KICAgIGxldCBnbHlwaFplcm9JZCA9IG51bUdseXBoc091dCAtIDE7CiAgICBpZiAoIWR1cEZpcnN0RW50cnkpIHsKICAgICAgZ2x5cGhaZXJvSWQgPSAwOwogICAgfQogICAgaWYgKCFwcm9wZXJ0aWVzLmNzc0ZvbnRJbmZvKSB7CiAgICAgIGNvbnN0IG5ld01hcHBpbmcgPSBhZGp1c3RNYXBwaW5nKGNoYXJDb2RlVG9HbHlwaElkLCBoYXNHbHlwaCwgZ2x5cGhaZXJvSWQsIHRoaXMudG9Vbmljb2RlKTsKICAgICAgdGhpcy50b0ZvbnRDaGFyID0gbmV3TWFwcGluZy50b0ZvbnRDaGFyOwogICAgICB0YWJsZXMuY21hcCA9IHsKICAgICAgICB0YWc6ICJjbWFwIiwKICAgICAgICBkYXRhOiBjcmVhdGVDbWFwVGFibGUobmV3TWFwcGluZy5jaGFyQ29kZVRvR2x5cGhJZCwgbmV3TWFwcGluZy50b1VuaWNvZGVFeHRyYU1hcCwgbnVtR2x5cGhzT3V0KQogICAgICB9OwogICAgICBpZiAoIXRhYmxlc1siT1MvMiJdIHx8ICF2YWxpZGF0ZU9TMlRhYmxlKHRhYmxlc1siT1MvMiJdLCBmb250KSkgewogICAgICAgIHRhYmxlc1siT1MvMiJdID0gewogICAgICAgICAgdGFnOiAiT1MvMiIsCiAgICAgICAgICBkYXRhOiBjcmVhdGVPUzJUYWJsZShwcm9wZXJ0aWVzLCBuZXdNYXBwaW5nLmNoYXJDb2RlVG9HbHlwaElkLCBtZXRyaWNzT3ZlcnJpZGUpCiAgICAgICAgfTsKICAgICAgfQogICAgfQogICAgaWYgKCFpc1RydWVUeXBlKSB7CiAgICAgIHRyeSB7CiAgICAgICAgY2ZmRmlsZSA9IG5ldyBTdHJlYW0odGFibGVzWyJDRkYgIl0uZGF0YSk7CiAgICAgICAgY29uc3QgcGFyc2VyID0gbmV3IENGRlBhcnNlcihjZmZGaWxlLCBwcm9wZXJ0aWVzLCBTRUFDX0FOQUxZU0lTX0VOQUJMRUQpOwogICAgICAgIGNmZiA9IHBhcnNlci5wYXJzZSgpOwogICAgICAgIGNmZi5kdXBsaWNhdGVGaXJzdEdseXBoKCk7CiAgICAgICAgY29uc3QgY29tcGlsZXIgPSBuZXcgQ0ZGQ29tcGlsZXIoY2ZmKTsKICAgICAgICB0YWJsZXNbIkNGRiAiXS5kYXRhID0gY29tcGlsZXIuY29tcGlsZSgpOwogICAgICB9IGNhdGNoIHsKICAgICAgICB3YXJuKCJGYWlsZWQgdG8gY29tcGlsZSBmb250ICIgKyBwcm9wZXJ0aWVzLmxvYWRlZE5hbWUpOwogICAgICB9CiAgICB9CiAgICBpZiAoIXRhYmxlcy5uYW1lKSB7CiAgICAgIHRhYmxlcy5uYW1lID0gewogICAgICAgIHRhZzogIm5hbWUiLAogICAgICAgIGRhdGE6IGNyZWF0ZU5hbWVUYWJsZSh0aGlzLm5hbWUpCiAgICAgIH07CiAgICB9IGVsc2UgewogICAgICBjb25zdCBbbmFtZVByb3RvdHlwZSwgbmFtZVJlY29yZHNdID0gcmVhZE5hbWVUYWJsZSh0YWJsZXMubmFtZSk7CiAgICAgIHRhYmxlcy5uYW1lLmRhdGEgPSBjcmVhdGVOYW1lVGFibGUobmFtZSwgbmFtZVByb3RvdHlwZSk7CiAgICAgIHRoaXMucHNOYW1lID0gbmFtZVByb3RvdHlwZVswXVs2XSB8fCBudWxsOwogICAgICBpZiAoIXByb3BlcnRpZXMuY29tcG9zaXRlKSB7CiAgICAgICAgYWRqdXN0VHJ1ZVR5cGVUb1VuaWNvZGUocHJvcGVydGllcywgdGhpcy5pc1N5bWJvbGljRm9udCwgbmFtZVJlY29yZHMpOwogICAgICB9CiAgICB9CiAgICBjb25zdCBidWlsZGVyID0gbmV3IE9wZW5UeXBlRmlsZUJ1aWxkZXIoaGVhZGVyLnZlcnNpb24pOwogICAgZm9yIChjb25zdCB0YWJsZVRhZyBpbiB0YWJsZXMpIHsKICAgICAgYnVpbGRlci5hZGRUYWJsZSh0YWJsZVRhZywgdGFibGVzW3RhYmxlVGFnXS5kYXRhKTsKICAgIH0KICAgIHJldHVybiBidWlsZGVyLnRvQXJyYXkoKTsKICB9CiAgY29udmVydChmb250TmFtZSwgZm9udCwgcHJvcGVydGllcykgewogICAgcHJvcGVydGllcy5maXhlZFBpdGNoID0gZmFsc2U7CiAgICBpZiAocHJvcGVydGllcy5idWlsdEluRW5jb2RpbmcpIHsKICAgICAgYWRqdXN0VHlwZTFUb1VuaWNvZGUocHJvcGVydGllcywgcHJvcGVydGllcy5idWlsdEluRW5jb2RpbmcpOwogICAgfQogICAgbGV0IGdseXBoWmVyb0lkID0gMTsKICAgIGlmIChmb250IGluc3RhbmNlb2YgQ0ZGRm9udCkgewogICAgICBnbHlwaFplcm9JZCA9IGZvbnQubnVtR2x5cGhzIC0gMTsKICAgIH0KICAgIGNvbnN0IG1hcHBpbmcgPSBmb250LmdldEdseXBoTWFwcGluZyhwcm9wZXJ0aWVzKTsKICAgIGxldCBuZXdNYXBwaW5nID0gbnVsbDsKICAgIGxldCBuZXdDaGFyQ29kZVRvR2x5cGhJZCA9IG1hcHBpbmc7CiAgICBsZXQgdG9Vbmljb2RlRXh0cmFNYXAgPSBudWxsOwogICAgaWYgKCFwcm9wZXJ0aWVzLmNzc0ZvbnRJbmZvKSB7CiAgICAgIG5ld01hcHBpbmcgPSBhZGp1c3RNYXBwaW5nKG1hcHBpbmcsIGZvbnQuaGFzR2x5cGhJZC5iaW5kKGZvbnQpLCBnbHlwaFplcm9JZCwgdGhpcy50b1VuaWNvZGUpOwogICAgICB0aGlzLnRvRm9udENoYXIgPSBuZXdNYXBwaW5nLnRvRm9udENoYXI7CiAgICAgIG5ld0NoYXJDb2RlVG9HbHlwaElkID0gbmV3TWFwcGluZy5jaGFyQ29kZVRvR2x5cGhJZDsKICAgICAgdG9Vbmljb2RlRXh0cmFNYXAgPSBuZXdNYXBwaW5nLnRvVW5pY29kZUV4dHJhTWFwOwogICAgfQogICAgY29uc3QgbnVtR2x5cGhzID0gZm9udC5udW1HbHlwaHM7CiAgICBmdW5jdGlvbiBnZXRDaGFyQ29kZXMoY2hhckNvZGVUb0dseXBoSWQsIGdseXBoSWQpIHsKICAgICAgbGV0IGNoYXJDb2RlcyA9IG51bGw7CiAgICAgIGZvciAoY29uc3QgY2hhckNvZGUgaW4gY2hhckNvZGVUb0dseXBoSWQpIHsKICAgICAgICBpZiAoZ2x5cGhJZCA9PT0gY2hhckNvZGVUb0dseXBoSWRbY2hhckNvZGVdKSB7CiAgICAgICAgICAoY2hhckNvZGVzIHx8PSBbXSkucHVzaChjaGFyQ29kZSB8IDApOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gY2hhckNvZGVzOwogICAgfQogICAgZnVuY3Rpb24gY3JlYXRlQ2hhckNvZGUoY2hhckNvZGVUb0dseXBoSWQsIGdseXBoSWQpIHsKICAgICAgZm9yIChjb25zdCBjaGFyQ29kZSBpbiBjaGFyQ29kZVRvR2x5cGhJZCkgewogICAgICAgIGlmIChnbHlwaElkID09PSBjaGFyQ29kZVRvR2x5cGhJZFtjaGFyQ29kZV0pIHsKICAgICAgICAgIHJldHVybiBjaGFyQ29kZSB8IDA7CiAgICAgICAgfQogICAgICB9CiAgICAgIG5ld01hcHBpbmcuY2hhckNvZGVUb0dseXBoSWRbbmV3TWFwcGluZy5uZXh0QXZhaWxhYmxlRm9udENoYXJDb2RlXSA9IGdseXBoSWQ7CiAgICAgIHJldHVybiBuZXdNYXBwaW5nLm5leHRBdmFpbGFibGVGb250Q2hhckNvZGUrKzsKICAgIH0KICAgIGNvbnN0IHNlYWNzID0gZm9udC5zZWFjczsKICAgIGlmIChuZXdNYXBwaW5nICYmIFNFQUNfQU5BTFlTSVNfRU5BQkxFRCAmJiBzZWFjcz8ubGVuZ3RoKSB7CiAgICAgIGNvbnN0IG1hdHJpeCA9IHByb3BlcnRpZXMuZm9udE1hdHJpeCB8fCBGT05UX0lERU5USVRZX01BVFJJWDsKICAgICAgY29uc3QgY2hhcnNldCA9IGZvbnQuZ2V0Q2hhcnNldCgpOwogICAgICBjb25zdCBzZWFjTWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgICAgZm9yIChsZXQgZ2x5cGhJZCBpbiBzZWFjcykgewogICAgICAgIGdseXBoSWQgfD0gMDsKICAgICAgICBjb25zdCBzZWFjID0gc2VhY3NbZ2x5cGhJZF07CiAgICAgICAgY29uc3QgYmFzZUdseXBoTmFtZSA9IFN0YW5kYXJkRW5jb2Rpbmdbc2VhY1syXV07CiAgICAgICAgY29uc3QgYWNjZW50R2x5cGhOYW1lID0gU3RhbmRhcmRFbmNvZGluZ1tzZWFjWzNdXTsKICAgICAgICBjb25zdCBiYXNlR2x5cGhJZCA9IGNoYXJzZXQuaW5kZXhPZihiYXNlR2x5cGhOYW1lKTsKICAgICAgICBjb25zdCBhY2NlbnRHbHlwaElkID0gY2hhcnNldC5pbmRleE9mKGFjY2VudEdseXBoTmFtZSk7CiAgICAgICAgaWYgKGJhc2VHbHlwaElkIDwgMCB8fCBhY2NlbnRHbHlwaElkIDwgMCkgewogICAgICAgICAgY29udGludWU7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGFjY2VudE9mZnNldCA9IHsKICAgICAgICAgIHg6IHNlYWNbMF0gKiBtYXRyaXhbMF0gKyBzZWFjWzFdICogbWF0cml4WzJdICsgbWF0cml4WzRdLAogICAgICAgICAgeTogc2VhY1swXSAqIG1hdHJpeFsxXSArIHNlYWNbMV0gKiBtYXRyaXhbM10gKyBtYXRyaXhbNV0KICAgICAgICB9OwogICAgICAgIGNvbnN0IGNoYXJDb2RlcyA9IGdldENoYXJDb2RlcyhtYXBwaW5nLCBnbHlwaElkKTsKICAgICAgICBpZiAoIWNoYXJDb2RlcykgewogICAgICAgICAgY29udGludWU7CiAgICAgICAgfQogICAgICAgIGZvciAoY29uc3QgY2hhckNvZGUgb2YgY2hhckNvZGVzKSB7CiAgICAgICAgICBjb25zdCBjaGFyQ29kZVRvR2x5cGhJZCA9IG5ld01hcHBpbmcuY2hhckNvZGVUb0dseXBoSWQ7CiAgICAgICAgICBjb25zdCBiYXNlRm9udENoYXJDb2RlID0gY3JlYXRlQ2hhckNvZGUoY2hhckNvZGVUb0dseXBoSWQsIGJhc2VHbHlwaElkKTsKICAgICAgICAgIGNvbnN0IGFjY2VudEZvbnRDaGFyQ29kZSA9IGNyZWF0ZUNoYXJDb2RlKGNoYXJDb2RlVG9HbHlwaElkLCBhY2NlbnRHbHlwaElkKTsKICAgICAgICAgIHNlYWNNYXBbY2hhckNvZGVdID0gewogICAgICAgICAgICBiYXNlRm9udENoYXJDb2RlLAogICAgICAgICAgICBhY2NlbnRGb250Q2hhckNvZGUsCiAgICAgICAgICAgIGFjY2VudE9mZnNldAogICAgICAgICAgfTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcHJvcGVydGllcy5zZWFjTWFwID0gc2VhY01hcDsKICAgIH0KICAgIGNvbnN0IHVuaXRzUGVyRW0gPSBwcm9wZXJ0aWVzLmZvbnRNYXRyaXggPyAxIC8gTWF0aC5tYXgoLi4ucHJvcGVydGllcy5mb250TWF0cml4LnNsaWNlKDAsIDQpLm1hcChNYXRoLmFicykpIDogMTAwMDsKICAgIGNvbnN0IGJ1aWxkZXIgPSBuZXcgT3BlblR5cGVGaWxlQnVpbGRlcigiXHg0Rlx4NTRceDU0XHg0RiIpOwogICAgYnVpbGRlci5hZGRUYWJsZSgiQ0ZGICIsIGZvbnQuZGF0YSk7CiAgICBidWlsZGVyLmFkZFRhYmxlKCJPUy8yIiwgY3JlYXRlT1MyVGFibGUocHJvcGVydGllcywgbmV3Q2hhckNvZGVUb0dseXBoSWQpKTsKICAgIGJ1aWxkZXIuYWRkVGFibGUoImNtYXAiLCBjcmVhdGVDbWFwVGFibGUobmV3Q2hhckNvZGVUb0dseXBoSWQsIHRvVW5pY29kZUV4dHJhTWFwLCBudW1HbHlwaHMpKTsKICAgIGJ1aWxkZXIuYWRkVGFibGUoImhlYWQiLCAiXHgwMFx4MDFceDAwXHgwMCIgKyAiXHgwMFx4MDBceDEwXHgwMCIgKyAiXHgwMFx4MDBceDAwXHgwMCIgKyAiXHg1Rlx4MEZceDNDXHhGNSIgKyAiXHgwMFx4MDAiICsgc2FmZVN0cmluZzE2KHVuaXRzUGVyRW0pICsgIlx4MDBceDAwXHgwMFx4MDBceDllXHgwYlx4N2VceDI3IiArICJceDAwXHgwMFx4MDBceDAwXHg5ZVx4MGJceDdlXHgyNyIgKyAiXHgwMFx4MDAiICsgc2FmZVN0cmluZzE2KHByb3BlcnRpZXMuZGVzY2VudCkgKyAiXHgwRlx4RkYiICsgc2FmZVN0cmluZzE2KHByb3BlcnRpZXMuYXNjZW50KSArIHN0cmluZzE2KHByb3BlcnRpZXMuaXRhbGljQW5nbGUgPyAyIDogMCkgKyAiXHgwMFx4MTEiICsgIlx4MDBceDAwIiArICJceDAwXHgwMCIgKyAiXHgwMFx4MDAiKTsKICAgIGJ1aWxkZXIuYWRkVGFibGUoImhoZWEiLCAiXHgwMFx4MDFceDAwXHgwMCIgKyBzYWZlU3RyaW5nMTYocHJvcGVydGllcy5hc2NlbnQpICsgc2FmZVN0cmluZzE2KHByb3BlcnRpZXMuZGVzY2VudCkgKyAiXHgwMFx4MDAiICsgIlx4RkZceEZGIiArICJceDAwXHgwMCIgKyAiXHgwMFx4MDAiICsgIlx4MDBceDAwIiArIHNhZmVTdHJpbmcxNihwcm9wZXJ0aWVzLmNhcEhlaWdodCkgKyBzYWZlU3RyaW5nMTYoTWF0aC50YW4ocHJvcGVydGllcy5pdGFsaWNBbmdsZSkgKiBwcm9wZXJ0aWVzLnhIZWlnaHQpICsgIlx4MDBceDAwIiArICJceDAwXHgwMCIgKyAiXHgwMFx4MDAiICsgIlx4MDBceDAwIiArICJceDAwXHgwMCIgKyAiXHgwMFx4MDAiICsgc3RyaW5nMTYobnVtR2x5cGhzKSk7CiAgICBidWlsZGVyLmFkZFRhYmxlKCJobXR4IiwgZnVuY3Rpb24gZm9udEZpZWxkc0htdHgoKSB7CiAgICAgIGNvbnN0IGNoYXJzdHJpbmdzID0gZm9udC5jaGFyc3RyaW5nczsKICAgICAgY29uc3QgY2ZmV2lkdGhzID0gZm9udC5jZmYgPyBmb250LmNmZi53aWR0aHMgOiBudWxsOwogICAgICBsZXQgaG10eCA9ICJceDAwXHgwMFx4MDBceDAwIjsKICAgICAgZm9yIChsZXQgaSA9IDEsIGlpID0gbnVtR2x5cGhzOyBpIDwgaWk7IGkrKykgewogICAgICAgIGxldCB3aWR0aCA9IDA7CiAgICAgICAgaWYgKGNoYXJzdHJpbmdzKSB7CiAgICAgICAgICBjb25zdCBjaGFyc3RyaW5nID0gY2hhcnN0cmluZ3NbaSAtIDFdOwogICAgICAgICAgd2lkdGggPSAid2lkdGgiIGluIGNoYXJzdHJpbmcgPyBjaGFyc3RyaW5nLndpZHRoIDogMDsKICAgICAgICB9IGVsc2UgaWYgKGNmZldpZHRocykgewogICAgICAgICAgd2lkdGggPSBNYXRoLmNlaWwoY2ZmV2lkdGhzW2ldIHx8IDApOwogICAgICAgIH0KICAgICAgICBobXR4ICs9IHN0cmluZzE2KHdpZHRoKSArIHN0cmluZzE2KDApOwogICAgICB9CiAgICAgIHJldHVybiBobXR4OwogICAgfSgpKTsKICAgIGJ1aWxkZXIuYWRkVGFibGUoIm1heHAiLCAiXHgwMFx4MDBceDUwXHgwMCIgKyBzdHJpbmcxNihudW1HbHlwaHMpKTsKICAgIGJ1aWxkZXIuYWRkVGFibGUoIm5hbWUiLCBjcmVhdGVOYW1lVGFibGUoZm9udE5hbWUpKTsKICAgIGJ1aWxkZXIuYWRkVGFibGUoInBvc3QiLCBjcmVhdGVQb3N0VGFibGUocHJvcGVydGllcykpOwogICAgcmV0dXJuIGJ1aWxkZXIudG9BcnJheSgpOwogIH0KICBnZXQgX3NwYWNlV2lkdGgoKSB7CiAgICBjb25zdCBwb3NzaWJsZVNwYWNlUmVwbGFjZW1lbnRzID0gWyJzcGFjZSIsICJtaW51cyIsICJvbmUiLCAiaSIsICJJIl07CiAgICBsZXQgd2lkdGg7CiAgICBmb3IgKGNvbnN0IGdseXBoTmFtZSBvZiBwb3NzaWJsZVNwYWNlUmVwbGFjZW1lbnRzKSB7CiAgICAgIGlmIChnbHlwaE5hbWUgaW4gdGhpcy53aWR0aHMpIHsKICAgICAgICB3aWR0aCA9IHRoaXMud2lkdGhzW2dseXBoTmFtZV07CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgICAgY29uc3QgZ2x5cGhzVW5pY29kZU1hcCA9IGdldEdseXBoc1VuaWNvZGUoKTsKICAgICAgY29uc3QgZ2x5cGhVbmljb2RlID0gZ2x5cGhzVW5pY29kZU1hcFtnbHlwaE5hbWVdOwogICAgICBsZXQgY2hhcmNvZGUgPSAwOwogICAgICBpZiAodGhpcy5jb21wb3NpdGUgJiYgdGhpcy5jTWFwLmNvbnRhaW5zKGdseXBoVW5pY29kZSkpIHsKICAgICAgICBjaGFyY29kZSA9IHRoaXMuY01hcC5sb29rdXAoZ2x5cGhVbmljb2RlKTsKICAgICAgICBpZiAodHlwZW9mIGNoYXJjb2RlID09PSAic3RyaW5nIikgewogICAgICAgICAgY2hhcmNvZGUgPSBjb252ZXJ0Q2lkU3RyaW5nKGdseXBoVW5pY29kZSwgY2hhcmNvZGUpOwogICAgICAgIH0KICAgICAgfQogICAgICBpZiAoIWNoYXJjb2RlICYmIHRoaXMudG9Vbmljb2RlKSB7CiAgICAgICAgY2hhcmNvZGUgPSB0aGlzLnRvVW5pY29kZS5jaGFyQ29kZU9mKGdseXBoVW5pY29kZSk7CiAgICAgIH0KICAgICAgaWYgKGNoYXJjb2RlIDw9IDApIHsKICAgICAgICBjaGFyY29kZSA9IGdseXBoVW5pY29kZTsKICAgICAgfQogICAgICB3aWR0aCA9IHRoaXMud2lkdGhzW2NoYXJjb2RlXTsKICAgICAgaWYgKHdpZHRoKSB7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBzaGFkb3codGhpcywgIl9zcGFjZVdpZHRoIiwgd2lkdGggfHwgdGhpcy5kZWZhdWx0V2lkdGgpOwogIH0KICBfY2hhclRvR2x5cGgoY2hhcmNvZGUsIGlzU3BhY2UgPSBmYWxzZSkgewogICAgbGV0IGdseXBoID0gdGhpcy5fZ2x5cGhDYWNoZVtjaGFyY29kZV07CiAgICBpZiAoZ2x5cGg/LmlzU3BhY2UgPT09IGlzU3BhY2UpIHsKICAgICAgcmV0dXJuIGdseXBoOwogICAgfQogICAgbGV0IGZvbnRDaGFyQ29kZSwgd2lkdGgsIG9wZXJhdG9yTGlzdElkOwogICAgbGV0IHdpZHRoQ29kZSA9IGNoYXJjb2RlOwogICAgaWYgKHRoaXMuY01hcD8uY29udGFpbnMoY2hhcmNvZGUpKSB7CiAgICAgIHdpZHRoQ29kZSA9IHRoaXMuY01hcC5sb29rdXAoY2hhcmNvZGUpOwogICAgICBpZiAodHlwZW9mIHdpZHRoQ29kZSA9PT0gInN0cmluZyIpIHsKICAgICAgICB3aWR0aENvZGUgPSBjb252ZXJ0Q2lkU3RyaW5nKGNoYXJjb2RlLCB3aWR0aENvZGUpOwogICAgICB9CiAgICB9CiAgICB3aWR0aCA9IHRoaXMud2lkdGhzW3dpZHRoQ29kZV07CiAgICBpZiAodHlwZW9mIHdpZHRoICE9PSAibnVtYmVyIikgewogICAgICB3aWR0aCA9IHRoaXMuZGVmYXVsdFdpZHRoOwogICAgfQogICAgY29uc3Qgdm1ldHJpYyA9IHRoaXMudm1ldHJpY3M/Llt3aWR0aENvZGVdOwogICAgbGV0IHVuaWNvZGUgPSB0aGlzLnRvVW5pY29kZS5nZXQoY2hhcmNvZGUpIHx8IGNoYXJjb2RlOwogICAgaWYgKHR5cGVvZiB1bmljb2RlID09PSAibnVtYmVyIikgewogICAgICB1bmljb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZSh1bmljb2RlKTsKICAgIH0KICAgIGxldCBpc0luRm9udCA9IHRoaXMudG9Gb250Q2hhcltjaGFyY29kZV0gIT09IHVuZGVmaW5lZDsKICAgIGZvbnRDaGFyQ29kZSA9IHRoaXMudG9Gb250Q2hhcltjaGFyY29kZV0gfHwgY2hhcmNvZGU7CiAgICBpZiAodGhpcy5taXNzaW5nRmlsZSkgewogICAgICBjb25zdCBnbHlwaE5hbWUgPSB0aGlzLmRpZmZlcmVuY2VzW2NoYXJjb2RlXSB8fCB0aGlzLmRlZmF1bHRFbmNvZGluZ1tjaGFyY29kZV07CiAgICAgIGlmICgoZ2x5cGhOYW1lID09PSAiLm5vdGRlZiIgfHwgZ2x5cGhOYW1lID09PSAiIikgJiYgdGhpcy50eXBlID09PSAiVHlwZTEiKSB7CiAgICAgICAgZm9udENoYXJDb2RlID0gMHgyMDsKICAgICAgICBpZiAoZ2x5cGhOYW1lID09PSAiIikgewogICAgICAgICAgd2lkdGggfHw9IHRoaXMuX3NwYWNlV2lkdGg7CiAgICAgICAgICB1bmljb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZShmb250Q2hhckNvZGUpOwogICAgICAgIH0KICAgICAgfQogICAgICBmb250Q2hhckNvZGUgPSBtYXBTcGVjaWFsVW5pY29kZVZhbHVlcyhmb250Q2hhckNvZGUpOwogICAgfQogICAgaWYgKHRoaXMuaXNUeXBlM0ZvbnQpIHsKICAgICAgb3BlcmF0b3JMaXN0SWQgPSBmb250Q2hhckNvZGU7CiAgICB9CiAgICBsZXQgYWNjZW50ID0gbnVsbDsKICAgIGlmICh0aGlzLnNlYWNNYXA/LltjaGFyY29kZV0pIHsKICAgICAgaXNJbkZvbnQgPSB0cnVlOwogICAgICBjb25zdCBzZWFjID0gdGhpcy5zZWFjTWFwW2NoYXJjb2RlXTsKICAgICAgZm9udENoYXJDb2RlID0gc2VhYy5iYXNlRm9udENoYXJDb2RlOwogICAgICBhY2NlbnQgPSB7CiAgICAgICAgZm9udENoYXI6IFN0cmluZy5mcm9tQ29kZVBvaW50KHNlYWMuYWNjZW50Rm9udENoYXJDb2RlKSwKICAgICAgICBvZmZzZXQ6IHNlYWMuYWNjZW50T2Zmc2V0CiAgICAgIH07CiAgICB9CiAgICBsZXQgZm9udENoYXIgPSAiIjsKICAgIGlmICh0eXBlb2YgZm9udENoYXJDb2RlID09PSAibnVtYmVyIikgewogICAgICBpZiAoZm9udENoYXJDb2RlIDw9IDB4MTBmZmZmKSB7CiAgICAgICAgZm9udENoYXIgPSBTdHJpbmcuZnJvbUNvZGVQb2ludChmb250Q2hhckNvZGUpOwogICAgICB9IGVsc2UgewogICAgICAgIHdhcm4oYGNoYXJUb0dseXBoIC0gaW52YWxpZCBmb250Q2hhckNvZGU6ICR7Zm9udENoYXJDb2RlfWApOwogICAgICB9CiAgICB9CiAgICBpZiAodGhpcy5taXNzaW5nRmlsZSAmJiB0aGlzLnZlcnRpY2FsICYmIGZvbnRDaGFyLmxlbmd0aCA9PT0gMSkgewogICAgICBjb25zdCB2ZXJ0aWNhbCA9IGdldFZlcnRpY2FsUHJlc2VudGF0aW9uRm9ybSgpW2ZvbnRDaGFyLmNoYXJDb2RlQXQoMCldOwogICAgICBpZiAodmVydGljYWwpIHsKICAgICAgICBmb250Q2hhciA9IHVuaWNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHZlcnRpY2FsKTsKICAgICAgfQogICAgfQogICAgZ2x5cGggPSBuZXcgZm9udHNfR2x5cGgoY2hhcmNvZGUsIGZvbnRDaGFyLCB1bmljb2RlLCBhY2NlbnQsIHdpZHRoLCB2bWV0cmljLCBvcGVyYXRvckxpc3RJZCwgaXNTcGFjZSwgaXNJbkZvbnQpOwogICAgcmV0dXJuIHRoaXMuX2dseXBoQ2FjaGVbY2hhcmNvZGVdID0gZ2x5cGg7CiAgfQogIGNoYXJzVG9HbHlwaHMoY2hhcnMpIHsKICAgIGxldCBnbHlwaHMgPSB0aGlzLl9jaGFyc0NhY2hlW2NoYXJzXTsKICAgIGlmIChnbHlwaHMpIHsKICAgICAgcmV0dXJuIGdseXBoczsKICAgIH0KICAgIGdseXBocyA9IFtdOwogICAgaWYgKHRoaXMuY01hcCkgewogICAgICBjb25zdCBjID0gT2JqZWN0LmNyZWF0ZShudWxsKSwKICAgICAgICBpaSA9IGNoYXJzLmxlbmd0aDsKICAgICAgbGV0IGkgPSAwOwogICAgICB3aGlsZSAoaSA8IGlpKSB7CiAgICAgICAgdGhpcy5jTWFwLnJlYWRDaGFyQ29kZShjaGFycywgaSwgYyk7CiAgICAgICAgY29uc3QgewogICAgICAgICAgY2hhcmNvZGUsCiAgICAgICAgICBsZW5ndGgKICAgICAgICB9ID0gYzsKICAgICAgICBpICs9IGxlbmd0aDsKICAgICAgICBjb25zdCBnbHlwaCA9IHRoaXMuX2NoYXJUb0dseXBoKGNoYXJjb2RlLCBsZW5ndGggPT09IDEgJiYgY2hhcnMuY2hhckNvZGVBdChpIC0gMSkgPT09IDB4MjApOwogICAgICAgIGdseXBocy5wdXNoKGdseXBoKTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gY2hhcnMubGVuZ3RoOyBpIDwgaWk7ICsraSkgewogICAgICAgIGNvbnN0IGNoYXJjb2RlID0gY2hhcnMuY2hhckNvZGVBdChpKTsKICAgICAgICBjb25zdCBnbHlwaCA9IHRoaXMuX2NoYXJUb0dseXBoKGNoYXJjb2RlLCBjaGFyY29kZSA9PT0gMHgyMCk7CiAgICAgICAgZ2x5cGhzLnB1c2goZ2x5cGgpOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gdGhpcy5fY2hhcnNDYWNoZVtjaGFyc10gPSBnbHlwaHM7CiAgfQogIGdldENoYXJQb3NpdGlvbnMoY2hhcnMpIHsKICAgIGNvbnN0IHBvc2l0aW9ucyA9IFtdOwogICAgaWYgKHRoaXMuY01hcCkgewogICAgICBjb25zdCBjID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgICAgbGV0IGkgPSAwOwogICAgICB3aGlsZSAoaSA8IGNoYXJzLmxlbmd0aCkgewogICAgICAgIHRoaXMuY01hcC5yZWFkQ2hhckNvZGUoY2hhcnMsIGksIGMpOwogICAgICAgIGNvbnN0IGxlbmd0aCA9IGMubGVuZ3RoOwogICAgICAgIHBvc2l0aW9ucy5wdXNoKFtpLCBpICsgbGVuZ3RoXSk7CiAgICAgICAgaSArPSBsZW5ndGg7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGNoYXJzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHsKICAgICAgICBwb3NpdGlvbnMucHVzaChbaSwgaSArIDFdKTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIHBvc2l0aW9uczsKICB9CiAgZ2V0IGdseXBoQ2FjaGVWYWx1ZXMoKSB7CiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyh0aGlzLl9nbHlwaENhY2hlKTsKICB9CiAgZW5jb2RlU3RyaW5nKHN0cikgewogICAgY29uc3QgYnVmZmVycyA9IFtdOwogICAgY29uc3QgY3VycmVudEJ1ZiA9IFtdOwogICAgY29uc3QgaGFzQ3VycmVudEJ1ZkVycm9ycyA9ICgpID0+IGJ1ZmZlcnMubGVuZ3RoICUgMiA9PT0gMTsKICAgIGNvbnN0IGdldENoYXJDb2RlID0gdGhpcy50b1VuaWNvZGUgaW5zdGFuY2VvZiBJZGVudGl0eVRvVW5pY29kZU1hcCA/IHVuaWNvZGUgPT4gdGhpcy50b1VuaWNvZGUuY2hhckNvZGVPZih1bmljb2RlKSA6IHVuaWNvZGUgPT4gdGhpcy50b1VuaWNvZGUuY2hhckNvZGVPZihTdHJpbmcuZnJvbUNvZGVQb2ludCh1bmljb2RlKSk7CiAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBzdHIubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgICBjb25zdCB1bmljb2RlID0gc3RyLmNvZGVQb2ludEF0KGkpOwogICAgICBpZiAodW5pY29kZSA+IDB4ZDdmZiAmJiAodW5pY29kZSA8IDB4ZTAwMCB8fCB1bmljb2RlID4gMHhmZmZkKSkgewogICAgICAgIGkrKzsKICAgICAgfQogICAgICBpZiAodGhpcy50b1VuaWNvZGUpIHsKICAgICAgICBjb25zdCBjaGFyQ29kZSA9IGdldENoYXJDb2RlKHVuaWNvZGUpOwogICAgICAgIGlmIChjaGFyQ29kZSAhPT0gLTEpIHsKICAgICAgICAgIGlmIChoYXNDdXJyZW50QnVmRXJyb3JzKCkpIHsKICAgICAgICAgICAgYnVmZmVycy5wdXNoKGN1cnJlbnRCdWYuam9pbigiIikpOwogICAgICAgICAgICBjdXJyZW50QnVmLmxlbmd0aCA9IDA7CiAgICAgICAgICB9CiAgICAgICAgICBjb25zdCBjaGFyQ29kZUxlbmd0aCA9IHRoaXMuY01hcCA/IHRoaXMuY01hcC5nZXRDaGFyQ29kZUxlbmd0aChjaGFyQ29kZSkgOiAxOwogICAgICAgICAgZm9yIChsZXQgaiA9IGNoYXJDb2RlTGVuZ3RoIC0gMTsgaiA+PSAwOyBqLS0pIHsKICAgICAgICAgICAgY3VycmVudEJ1Zi5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoY2hhckNvZGUgPj4gOCAqIGogJiAweGZmKSk7CiAgICAgICAgICB9CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKCFoYXNDdXJyZW50QnVmRXJyb3JzKCkpIHsKICAgICAgICBidWZmZXJzLnB1c2goY3VycmVudEJ1Zi5qb2luKCIiKSk7CiAgICAgICAgY3VycmVudEJ1Zi5sZW5ndGggPSAwOwogICAgICB9CiAgICAgIGN1cnJlbnRCdWYucHVzaChTdHJpbmcuZnJvbUNvZGVQb2ludCh1bmljb2RlKSk7CiAgICB9CiAgICBidWZmZXJzLnB1c2goY3VycmVudEJ1Zi5qb2luKCIiKSk7CiAgICByZXR1cm4gYnVmZmVyczsKICB9Cn0KY2xhc3MgRXJyb3JGb250IHsKICBjb25zdHJ1Y3RvcihlcnJvcikgewogICAgdGhpcy5lcnJvciA9IGVycm9yOwogICAgdGhpcy5sb2FkZWROYW1lID0gImdfZm9udF9lcnJvciI7CiAgICB0aGlzLm1pc3NpbmdGaWxlID0gdHJ1ZTsKICB9CiAgY2hhcnNUb0dseXBocygpIHsKICAgIHJldHVybiBbXTsKICB9CiAgZW5jb2RlU3RyaW5nKGNoYXJzKSB7CiAgICByZXR1cm4gW2NoYXJzXTsKICB9CiAgZXhwb3J0RGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGVycm9yOiB0aGlzLmVycm9yCiAgICB9OwogIH0KfQoKOy8vIC4vc3JjL2NvcmUvcGF0dGVybi5qcwoKCgoKCgoKCgoKCgoKY29uc3QgU2hhZGluZ1R5cGUgPSB7CiAgRlVOQ1RJT05fQkFTRUQ6IDEsCiAgQVhJQUw6IDIsCiAgUkFESUFMOiAzLAogIEZSRUVfRk9STV9NRVNIOiA0LAogIExBVFRJQ0VfRk9STV9NRVNIOiA1LAogIENPT05TX1BBVENIX01FU0g6IDYsCiAgVEVOU09SX1BBVENIX01FU0g6IDcKfTsKY2xhc3MgUGF0dGVybiB7CiAgY29uc3RydWN0b3IoKSB7CiAgICB1bnJlYWNoYWJsZSgiQ2Fubm90IGluaXRpYWxpemUgUGF0dGVybi4iKTsKICB9CiAgc3RhdGljIHBhcnNlU2hhZGluZyhzaGFkaW5nLCB4cmVmLCByZXMsIHBkZkZ1bmN0aW9uRmFjdG9yeSwgZ2xvYmFsQ29sb3JTcGFjZUNhY2hlLCBsb2NhbENvbG9yU3BhY2VDYWNoZSkgewogICAgY29uc3QgZGljdCA9IHNoYWRpbmcgaW5zdGFuY2VvZiBCYXNlU3RyZWFtID8gc2hhZGluZy5kaWN0IDogc2hhZGluZzsKICAgIGNvbnN0IHR5cGUgPSBkaWN0LmdldCgiU2hhZGluZ1R5cGUiKTsKICAgIHRyeSB7CiAgICAgIHN3aXRjaCAodHlwZSkgewogICAgICAgIGNhc2UgU2hhZGluZ1R5cGUuQVhJQUw6CiAgICAgICAgY2FzZSBTaGFkaW5nVHlwZS5SQURJQUw6CiAgICAgICAgICByZXR1cm4gbmV3IFJhZGlhbEF4aWFsU2hhZGluZyhkaWN0LCB4cmVmLCByZXMsIHBkZkZ1bmN0aW9uRmFjdG9yeSwgZ2xvYmFsQ29sb3JTcGFjZUNhY2hlLCBsb2NhbENvbG9yU3BhY2VDYWNoZSk7CiAgICAgICAgY2FzZSBTaGFkaW5nVHlwZS5GUkVFX0ZPUk1fTUVTSDoKICAgICAgICBjYXNlIFNoYWRpbmdUeXBlLkxBVFRJQ0VfRk9STV9NRVNIOgogICAgICAgIGNhc2UgU2hhZGluZ1R5cGUuQ09PTlNfUEFUQ0hfTUVTSDoKICAgICAgICBjYXNlIFNoYWRpbmdUeXBlLlRFTlNPUl9QQVRDSF9NRVNIOgogICAgICAgICAgcmV0dXJuIG5ldyBNZXNoU2hhZGluZyhzaGFkaW5nLCB4cmVmLCByZXMsIHBkZkZ1bmN0aW9uRmFjdG9yeSwgZ2xvYmFsQ29sb3JTcGFjZUNhY2hlLCBsb2NhbENvbG9yU3BhY2VDYWNoZSk7CiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigiVW5zdXBwb3J0ZWQgU2hhZGluZ1R5cGU6ICIgKyB0eXBlKTsKICAgICAgfQogICAgfSBjYXRjaCAoZXgpIHsKICAgICAgaWYgKGV4IGluc3RhbmNlb2YgTWlzc2luZ0RhdGFFeGNlcHRpb24pIHsKICAgICAgICB0aHJvdyBleDsKICAgICAgfQogICAgICB3YXJuKGV4KTsKICAgICAgcmV0dXJuIG5ldyBEdW1teVNoYWRpbmcoKTsKICAgIH0KICB9Cn0KY2xhc3MgQmFzZVNoYWRpbmcgewogIHN0YXRpYyBTTUFMTF9OVU1CRVIgPSAxZS02OwogIGdldElSKCkgewogICAgdW5yZWFjaGFibGUoIkFic3RyYWN0IG1ldGhvZCBgZ2V0SVJgIGNhbGxlZC4iKTsKICB9Cn0KY2xhc3MgUmFkaWFsQXhpYWxTaGFkaW5nIGV4dGVuZHMgQmFzZVNoYWRpbmcgewogIGNvbnN0cnVjdG9yKGRpY3QsIHhyZWYsIHJlc291cmNlcywgcGRmRnVuY3Rpb25GYWN0b3J5LCBnbG9iYWxDb2xvclNwYWNlQ2FjaGUsIGxvY2FsQ29sb3JTcGFjZUNhY2hlKSB7CiAgICBzdXBlcigpOwogICAgdGhpcy5zaGFkaW5nVHlwZSA9IGRpY3QuZ2V0KCJTaGFkaW5nVHlwZSIpOwogICAgbGV0IGNvb3Jkc0xlbiA9IDA7CiAgICBpZiAodGhpcy5zaGFkaW5nVHlwZSA9PT0gU2hhZGluZ1R5cGUuQVhJQUwpIHsKICAgICAgY29vcmRzTGVuID0gNDsKICAgIH0gZWxzZSBpZiAodGhpcy5zaGFkaW5nVHlwZSA9PT0gU2hhZGluZ1R5cGUuUkFESUFMKSB7CiAgICAgIGNvb3Jkc0xlbiA9IDY7CiAgICB9CiAgICB0aGlzLmNvb3Jkc0FyciA9IGRpY3QuZ2V0QXJyYXkoIkNvb3JkcyIpOwogICAgaWYgKCFpc051bWJlckFycmF5KHRoaXMuY29vcmRzQXJyLCBjb29yZHNMZW4pKSB7CiAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigiUmFkaWFsQXhpYWxTaGFkaW5nOiBJbnZhbGlkIC9Db29yZHMgYXJyYXkuIik7CiAgICB9CiAgICBjb25zdCBjcyA9IENvbG9yU3BhY2VVdGlscy5wYXJzZSh7CiAgICAgIGNzOiBkaWN0LmdldFJhdygiQ1MiKSB8fCBkaWN0LmdldFJhdygiQ29sb3JTcGFjZSIpLAogICAgICB4cmVmLAogICAgICByZXNvdXJjZXMsCiAgICAgIHBkZkZ1bmN0aW9uRmFjdG9yeSwKICAgICAgZ2xvYmFsQ29sb3JTcGFjZUNhY2hlLAogICAgICBsb2NhbENvbG9yU3BhY2VDYWNoZQogICAgfSk7CiAgICB0aGlzLmJib3ggPSBsb29rdXBOb3JtYWxSZWN0KGRpY3QuZ2V0QXJyYXkoIkJCb3giKSwgbnVsbCk7CiAgICBsZXQgdDAgPSAwLjAsCiAgICAgIHQxID0gMS4wOwogICAgY29uc3QgZG9tYWluQXJyID0gZGljdC5nZXRBcnJheSgiRG9tYWluIik7CiAgICBpZiAoaXNOdW1iZXJBcnJheShkb21haW5BcnIsIDIpKSB7CiAgICAgIFt0MCwgdDFdID0gZG9tYWluQXJyOwogICAgfQogICAgbGV0IGV4dGVuZFN0YXJ0ID0gZmFsc2UsCiAgICAgIGV4dGVuZEVuZCA9IGZhbHNlOwogICAgY29uc3QgZXh0ZW5kQXJyID0gZGljdC5nZXRBcnJheSgiRXh0ZW5kIik7CiAgICBpZiAoaXNCb29sZWFuQXJyYXkoZXh0ZW5kQXJyLCAyKSkgewogICAgICBbZXh0ZW5kU3RhcnQsIGV4dGVuZEVuZF0gPSBleHRlbmRBcnI7CiAgICB9CiAgICBpZiAodGhpcy5zaGFkaW5nVHlwZSA9PT0gU2hhZGluZ1R5cGUuUkFESUFMICYmICghZXh0ZW5kU3RhcnQgfHwgIWV4dGVuZEVuZCkpIHsKICAgICAgY29uc3QgW3gxLCB5MSwgcjEsIHgyLCB5MiwgcjJdID0gdGhpcy5jb29yZHNBcnI7CiAgICAgIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5oeXBvdCh4MSAtIHgyLCB5MSAtIHkyKTsKICAgICAgaWYgKHIxIDw9IHIyICsgZGlzdGFuY2UgJiYgcjIgPD0gcjEgKyBkaXN0YW5jZSkgewogICAgICAgIHdhcm4oIlVuc3VwcG9ydGVkIHJhZGlhbCBncmFkaWVudC4iKTsKICAgICAgfQogICAgfQogICAgdGhpcy5leHRlbmRTdGFydCA9IGV4dGVuZFN0YXJ0OwogICAgdGhpcy5leHRlbmRFbmQgPSBleHRlbmRFbmQ7CiAgICBjb25zdCBmbk9iaiA9IGRpY3QuZ2V0UmF3KCJGdW5jdGlvbiIpOwogICAgY29uc3QgZm4gPSBwZGZGdW5jdGlvbkZhY3RvcnkuY3JlYXRlKGZuT2JqLCB0cnVlKTsKICAgIGNvbnN0IE5VTUJFUl9PRl9TQU1QTEVTID0gODQwOwogICAgY29uc3Qgc3RlcCA9ICh0MSAtIHQwKSAvIE5VTUJFUl9PRl9TQU1QTEVTOwogICAgY29uc3QgY29sb3JTdG9wcyA9IHRoaXMuY29sb3JTdG9wcyA9IFtdOwogICAgaWYgKHQwID49IHQxIHx8IHN0ZXAgPD0gMCkgewogICAgICBpbmZvKCJCYWQgc2hhZGluZyBkb21haW4uIik7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGNvbnN0IGNvbG9yID0gbmV3IEZsb2F0MzJBcnJheShjcy5udW1Db21wcyksCiAgICAgIHJhdGlvID0gbmV3IEZsb2F0MzJBcnJheSgxKTsKICAgIGxldCBpQmFzZSA9IDA7CiAgICByYXRpb1swXSA9IHQwOwogICAgZm4ocmF0aW8sIDAsIGNvbG9yLCAwKTsKICAgIGNvbnN0IHJnYkJ1ZmZlciA9IG5ldyBVaW50OENsYW1wZWRBcnJheSgzKTsKICAgIGNzLmdldFJnYihjb2xvciwgMCwgcmdiQnVmZmVyKTsKICAgIGxldCBbckJhc2UsIGdCYXNlLCBiQmFzZV0gPSByZ2JCdWZmZXI7CiAgICBjb2xvclN0b3BzLnB1c2goWzAsIFV0aWwubWFrZUhleENvbG9yKHJCYXNlLCBnQmFzZSwgYkJhc2UpXSk7CiAgICBsZXQgaVByZXYgPSAxOwogICAgcmF0aW9bMF0gPSB0MCArIHN0ZXA7CiAgICBmbihyYXRpbywgMCwgY29sb3IsIDApOwogICAgY3MuZ2V0UmdiKGNvbG9yLCAwLCByZ2JCdWZmZXIpOwogICAgbGV0IFtyUHJldiwgZ1ByZXYsIGJQcmV2XSA9IHJnYkJ1ZmZlcjsKICAgIGxldCBtYXhTbG9wZVIgPSByUHJldiAtIHJCYXNlICsgMTsKICAgIGxldCBtYXhTbG9wZUcgPSBnUHJldiAtIGdCYXNlICsgMTsKICAgIGxldCBtYXhTbG9wZUIgPSBiUHJldiAtIGJCYXNlICsgMTsKICAgIGxldCBtaW5TbG9wZVIgPSByUHJldiAtIHJCYXNlIC0gMTsKICAgIGxldCBtaW5TbG9wZUcgPSBnUHJldiAtIGdCYXNlIC0gMTsKICAgIGxldCBtaW5TbG9wZUIgPSBiUHJldiAtIGJCYXNlIC0gMTsKICAgIGZvciAobGV0IGkgPSAyOyBpIDwgTlVNQkVSX09GX1NBTVBMRVM7IGkrKykgewogICAgICByYXRpb1swXSA9IHQwICsgaSAqIHN0ZXA7CiAgICAgIGZuKHJhdGlvLCAwLCBjb2xvciwgMCk7CiAgICAgIGNzLmdldFJnYihjb2xvciwgMCwgcmdiQnVmZmVyKTsKICAgICAgY29uc3QgW3IsIGcsIGJdID0gcmdiQnVmZmVyOwogICAgICBjb25zdCBydW4gPSBpIC0gaUJhc2U7CiAgICAgIG1heFNsb3BlUiA9IE1hdGgubWluKG1heFNsb3BlUiwgKHIgLSByQmFzZSArIDEpIC8gcnVuKTsKICAgICAgbWF4U2xvcGVHID0gTWF0aC5taW4obWF4U2xvcGVHLCAoZyAtIGdCYXNlICsgMSkgLyBydW4pOwogICAgICBtYXhTbG9wZUIgPSBNYXRoLm1pbihtYXhTbG9wZUIsIChiIC0gYkJhc2UgKyAxKSAvIHJ1bik7CiAgICAgIG1pblNsb3BlUiA9IE1hdGgubWF4KG1pblNsb3BlUiwgKHIgLSByQmFzZSAtIDEpIC8gcnVuKTsKICAgICAgbWluU2xvcGVHID0gTWF0aC5tYXgobWluU2xvcGVHLCAoZyAtIGdCYXNlIC0gMSkgLyBydW4pOwogICAgICBtaW5TbG9wZUIgPSBNYXRoLm1heChtaW5TbG9wZUIsIChiIC0gYkJhc2UgLSAxKSAvIHJ1bik7CiAgICAgIGNvbnN0IHNsb3Blc0V4aXN0ID0gbWluU2xvcGVSIDw9IG1heFNsb3BlUiAmJiBtaW5TbG9wZUcgPD0gbWF4U2xvcGVHICYmIG1pblNsb3BlQiA8PSBtYXhTbG9wZUI7CiAgICAgIGlmICghc2xvcGVzRXhpc3QpIHsKICAgICAgICBjb25zdCBjc3NDb2xvciA9IFV0aWwubWFrZUhleENvbG9yKHJQcmV2LCBnUHJldiwgYlByZXYpOwogICAgICAgIGNvbG9yU3RvcHMucHVzaChbaVByZXYgLyBOVU1CRVJfT0ZfU0FNUExFUywgY3NzQ29sb3JdKTsKICAgICAgICBtYXhTbG9wZVIgPSByIC0gclByZXYgKyAxOwogICAgICAgIG1heFNsb3BlRyA9IGcgLSBnUHJldiArIDE7CiAgICAgICAgbWF4U2xvcGVCID0gYiAtIGJQcmV2ICsgMTsKICAgICAgICBtaW5TbG9wZVIgPSByIC0gclByZXYgLSAxOwogICAgICAgIG1pblNsb3BlRyA9IGcgLSBnUHJldiAtIDE7CiAgICAgICAgbWluU2xvcGVCID0gYiAtIGJQcmV2IC0gMTsKICAgICAgICBpQmFzZSA9IGlQcmV2OwogICAgICAgIHJCYXNlID0gclByZXY7CiAgICAgICAgZ0Jhc2UgPSBnUHJldjsKICAgICAgICBiQmFzZSA9IGJQcmV2OwogICAgICB9CiAgICAgIGlQcmV2ID0gaTsKICAgICAgclByZXYgPSByOwogICAgICBnUHJldiA9IGc7CiAgICAgIGJQcmV2ID0gYjsKICAgIH0KICAgIGNvbG9yU3RvcHMucHVzaChbMSwgVXRpbC5tYWtlSGV4Q29sb3IoclByZXYsIGdQcmV2LCBiUHJldildKTsKICAgIGxldCBiYWNrZ3JvdW5kID0gInRyYW5zcGFyZW50IjsKICAgIGlmIChkaWN0LmhhcygiQmFja2dyb3VuZCIpKSB7CiAgICAgIGJhY2tncm91bmQgPSBjcy5nZXRSZ2JIZXgoZGljdC5nZXQoIkJhY2tncm91bmQiKSwgMCk7CiAgICB9CiAgICBpZiAoIWV4dGVuZFN0YXJ0KSB7CiAgICAgIGNvbG9yU3RvcHMudW5zaGlmdChbMCwgYmFja2dyb3VuZF0pOwogICAgICBjb2xvclN0b3BzWzFdWzBdICs9IEJhc2VTaGFkaW5nLlNNQUxMX05VTUJFUjsKICAgIH0KICAgIGlmICghZXh0ZW5kRW5kKSB7CiAgICAgIGNvbG9yU3RvcHMuYXQoLTEpWzBdIC09IEJhc2VTaGFkaW5nLlNNQUxMX05VTUJFUjsKICAgICAgY29sb3JTdG9wcy5wdXNoKFsxLCBiYWNrZ3JvdW5kXSk7CiAgICB9CiAgICB0aGlzLmNvbG9yU3RvcHMgPSBjb2xvclN0b3BzOwogIH0KICBnZXRJUigpIHsKICAgIGNvbnN0IHsKICAgICAgY29vcmRzQXJyLAogICAgICBzaGFkaW5nVHlwZQogICAgfSA9IHRoaXM7CiAgICBsZXQgdHlwZSwgcDAsIHAxLCByMCwgcjE7CiAgICBpZiAoc2hhZGluZ1R5cGUgPT09IFNoYWRpbmdUeXBlLkFYSUFMKSB7CiAgICAgIHAwID0gW2Nvb3Jkc0FyclswXSwgY29vcmRzQXJyWzFdXTsKICAgICAgcDEgPSBbY29vcmRzQXJyWzJdLCBjb29yZHNBcnJbM11dOwogICAgICByMCA9IG51bGw7CiAgICAgIHIxID0gbnVsbDsKICAgICAgdHlwZSA9ICJheGlhbCI7CiAgICB9IGVsc2UgaWYgKHNoYWRpbmdUeXBlID09PSBTaGFkaW5nVHlwZS5SQURJQUwpIHsKICAgICAgcDAgPSBbY29vcmRzQXJyWzBdLCBjb29yZHNBcnJbMV1dOwogICAgICBwMSA9IFtjb29yZHNBcnJbM10sIGNvb3Jkc0Fycls0XV07CiAgICAgIHIwID0gY29vcmRzQXJyWzJdOwogICAgICByMSA9IGNvb3Jkc0Fycls1XTsKICAgICAgdHlwZSA9ICJyYWRpYWwiOwogICAgfSBlbHNlIHsKICAgICAgdW5yZWFjaGFibGUoYGdldFBhdHRlcm4gdHlwZSB1bmtub3duOiAke3NoYWRpbmdUeXBlfWApOwogICAgfQogICAgcmV0dXJuIFsiUmFkaWFsQXhpYWwiLCB0eXBlLCB0aGlzLmJib3gsIHRoaXMuY29sb3JTdG9wcywgcDAsIHAxLCByMCwgcjFdOwogIH0KfQpjbGFzcyBNZXNoU3RyZWFtUmVhZGVyIHsKICBjb25zdHJ1Y3RvcihzdHJlYW0sIGNvbnRleHQpIHsKICAgIHRoaXMuc3RyZWFtID0gc3RyZWFtOwogICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDsKICAgIHRoaXMuYnVmZmVyID0gMDsKICAgIHRoaXMuYnVmZmVyTGVuZ3RoID0gMDsKICAgIGNvbnN0IG51bUNvbXBzID0gY29udGV4dC5udW1Db21wczsKICAgIHRoaXMudG1wQ29tcHNCdWYgPSBuZXcgRmxvYXQzMkFycmF5KG51bUNvbXBzKTsKICAgIGNvbnN0IGNzTnVtQ29tcHMgPSBjb250ZXh0LmNvbG9yU3BhY2UubnVtQ29tcHM7CiAgICB0aGlzLnRtcENzQ29tcHNCdWYgPSBjb250ZXh0LmNvbG9yRm4gPyBuZXcgRmxvYXQzMkFycmF5KGNzTnVtQ29tcHMpIDogdGhpcy50bXBDb21wc0J1ZjsKICB9CiAgZ2V0IGhhc0RhdGEoKSB7CiAgICBpZiAodGhpcy5zdHJlYW0uZW5kKSB7CiAgICAgIHJldHVybiB0aGlzLnN0cmVhbS5wb3MgPCB0aGlzLnN0cmVhbS5lbmQ7CiAgICB9CiAgICBpZiAodGhpcy5idWZmZXJMZW5ndGggPiAwKSB7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgY29uc3QgbmV4dEJ5dGUgPSB0aGlzLnN0cmVhbS5nZXRCeXRlKCk7CiAgICBpZiAobmV4dEJ5dGUgPCAwKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICAgIHRoaXMuYnVmZmVyID0gbmV4dEJ5dGU7CiAgICB0aGlzLmJ1ZmZlckxlbmd0aCA9IDg7CiAgICByZXR1cm4gdHJ1ZTsKICB9CiAgcmVhZEJpdHMobikgewogICAgY29uc3QgewogICAgICBzdHJlYW0KICAgIH0gPSB0aGlzOwogICAgbGV0IHsKICAgICAgYnVmZmVyLAogICAgICBidWZmZXJMZW5ndGgKICAgIH0gPSB0aGlzOwogICAgaWYgKG4gPT09IDMyKSB7CiAgICAgIGlmIChidWZmZXJMZW5ndGggPT09IDApIHsKICAgICAgICByZXR1cm4gc3RyZWFtLmdldEludDMyKCkgPj4+IDA7CiAgICAgIH0KICAgICAgYnVmZmVyID0gYnVmZmVyIDw8IDI0IHwgc3RyZWFtLmdldEJ5dGUoKSA8PCAxNiB8IHN0cmVhbS5nZXRCeXRlKCkgPDwgOCB8IHN0cmVhbS5nZXRCeXRlKCk7CiAgICAgIGNvbnN0IG5leHRCeXRlID0gc3RyZWFtLmdldEJ5dGUoKTsKICAgICAgdGhpcy5idWZmZXIgPSBuZXh0Qnl0ZSAmICgxIDw8IGJ1ZmZlckxlbmd0aCkgLSAxOwogICAgICByZXR1cm4gKGJ1ZmZlciA8PCA4IC0gYnVmZmVyTGVuZ3RoIHwgKG5leHRCeXRlICYgMHhmZikgPj4gYnVmZmVyTGVuZ3RoKSA+Pj4gMDsKICAgIH0KICAgIGlmIChuID09PSA4ICYmIGJ1ZmZlckxlbmd0aCA9PT0gMCkgewogICAgICByZXR1cm4gc3RyZWFtLmdldEJ5dGUoKTsKICAgIH0KICAgIHdoaWxlIChidWZmZXJMZW5ndGggPCBuKSB7CiAgICAgIGJ1ZmZlciA9IGJ1ZmZlciA8PCA4IHwgc3RyZWFtLmdldEJ5dGUoKTsKICAgICAgYnVmZmVyTGVuZ3RoICs9IDg7CiAgICB9CiAgICBidWZmZXJMZW5ndGggLT0gbjsKICAgIHRoaXMuYnVmZmVyTGVuZ3RoID0gYnVmZmVyTGVuZ3RoOwogICAgdGhpcy5idWZmZXIgPSBidWZmZXIgJiAoMSA8PCBidWZmZXJMZW5ndGgpIC0gMTsKICAgIHJldHVybiBidWZmZXIgPj4gYnVmZmVyTGVuZ3RoOwogIH0KICBhbGlnbigpIHsKICAgIHRoaXMuYnVmZmVyID0gMDsKICAgIHRoaXMuYnVmZmVyTGVuZ3RoID0gMDsKICB9CiAgcmVhZEZsYWcoKSB7CiAgICByZXR1cm4gdGhpcy5yZWFkQml0cyh0aGlzLmNvbnRleHQuYml0c1BlckZsYWcpOwogIH0KICByZWFkQ29vcmRpbmF0ZSgpIHsKICAgIGNvbnN0IHsKICAgICAgYml0c1BlckNvb3JkaW5hdGUsCiAgICAgIGRlY29kZQogICAgfSA9IHRoaXMuY29udGV4dDsKICAgIGNvbnN0IHhpID0gdGhpcy5yZWFkQml0cyhiaXRzUGVyQ29vcmRpbmF0ZSk7CiAgICBjb25zdCB5aSA9IHRoaXMucmVhZEJpdHMoYml0c1BlckNvb3JkaW5hdGUpOwogICAgY29uc3Qgc2NhbGUgPSBiaXRzUGVyQ29vcmRpbmF0ZSA8IDMyID8gMSAvICgoMSA8PCBiaXRzUGVyQ29vcmRpbmF0ZSkgLSAxKSA6IDIuMzI4MzA2NDM2NTM4Njk2M2UtMTA7CiAgICByZXR1cm4gW3hpICogc2NhbGUgKiAoZGVjb2RlWzFdIC0gZGVjb2RlWzBdKSArIGRlY29kZVswXSwgeWkgKiBzY2FsZSAqIChkZWNvZGVbM10gLSBkZWNvZGVbMl0pICsgZGVjb2RlWzJdXTsKICB9CiAgcmVhZENvbXBvbmVudHMoKSB7CiAgICBjb25zdCB7CiAgICAgIGJpdHNQZXJDb21wb25lbnQsCiAgICAgIGNvbG9yRm4sCiAgICAgIGNvbG9yU3BhY2UsCiAgICAgIGRlY29kZSwKICAgICAgbnVtQ29tcHMKICAgIH0gPSB0aGlzLmNvbnRleHQ7CiAgICBjb25zdCBzY2FsZSA9IGJpdHNQZXJDb21wb25lbnQgPCAzMiA/IDEgLyAoKDEgPDwgYml0c1BlckNvbXBvbmVudCkgLSAxKSA6IDIuMzI4MzA2NDM2NTM4Njk2M2UtMTA7CiAgICBjb25zdCBjb21wb25lbnRzID0gdGhpcy50bXBDb21wc0J1ZjsKICAgIGZvciAobGV0IGkgPSAwLCBqID0gNDsgaSA8IG51bUNvbXBzOyBpKyssIGogKz0gMikgewogICAgICBjb25zdCBjaSA9IHRoaXMucmVhZEJpdHMoYml0c1BlckNvbXBvbmVudCk7CiAgICAgIGNvbXBvbmVudHNbaV0gPSBjaSAqIHNjYWxlICogKGRlY29kZVtqICsgMV0gLSBkZWNvZGVbal0pICsgZGVjb2RlW2pdOwogICAgfQogICAgY29uc3QgY29sb3IgPSB0aGlzLnRtcENzQ29tcHNCdWY7CiAgICBjb2xvckZuPy4oY29tcG9uZW50cywgMCwgY29sb3IsIDApOwogICAgcmV0dXJuIGNvbG9yU3BhY2UuZ2V0UmdiKGNvbG9yLCAwKTsKICB9Cn0KbGV0IGJDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7CmZ1bmN0aW9uIGJ1aWxkQihjb3VudCkgewogIGNvbnN0IGx1dCA9IFtdOwogIGZvciAobGV0IGkgPSAwOyBpIDw9IGNvdW50OyBpKyspIHsKICAgIGNvbnN0IHQgPSBpIC8gY291bnQsCiAgICAgIHRfID0gMSAtIHQ7CiAgICBsdXQucHVzaChuZXcgRmxvYXQzMkFycmF5KFt0XyAqKiAzLCAzICogdCAqIHRfICoqIDIsIDMgKiB0ICoqIDIgKiB0XywgdCAqKiAzXSkpOwogIH0KICByZXR1cm4gbHV0Owp9CmZ1bmN0aW9uIGdldEIoY291bnQpIHsKICByZXR1cm4gYkNhY2hlW2NvdW50XSB8fD0gYnVpbGRCKGNvdW50KTsKfQpmdW5jdGlvbiBjbGVhclBhdHRlcm5DYWNoZXMoKSB7CiAgYkNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKfQpjbGFzcyBNZXNoU2hhZGluZyBleHRlbmRzIEJhc2VTaGFkaW5nIHsKICBzdGF0aWMgTUlOX1NQTElUX1BBVENIX0NIVU5LU19BTU9VTlQgPSAzOwogIHN0YXRpYyBNQVhfU1BMSVRfUEFUQ0hfQ0hVTktTX0FNT1VOVCA9IDIwOwogIHN0YXRpYyBUUklBTkdMRV9ERU5TSVRZID0gMjA7CiAgY29uc3RydWN0b3Ioc3RyZWFtLCB4cmVmLCByZXNvdXJjZXMsIHBkZkZ1bmN0aW9uRmFjdG9yeSwgZ2xvYmFsQ29sb3JTcGFjZUNhY2hlLCBsb2NhbENvbG9yU3BhY2VDYWNoZSkgewogICAgc3VwZXIoKTsKICAgIGlmICghKHN0cmVhbSBpbnN0YW5jZW9mIEJhc2VTdHJlYW0pKSB7CiAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigiTWVzaCBkYXRhIGlzIG5vdCBhIHN0cmVhbSIpOwogICAgfQogICAgY29uc3QgZGljdCA9IHN0cmVhbS5kaWN0OwogICAgdGhpcy5zaGFkaW5nVHlwZSA9IGRpY3QuZ2V0KCJTaGFkaW5nVHlwZSIpOwogICAgdGhpcy5iYm94ID0gbG9va3VwTm9ybWFsUmVjdChkaWN0LmdldEFycmF5KCJCQm94IiksIG51bGwpOwogICAgY29uc3QgY3MgPSBDb2xvclNwYWNlVXRpbHMucGFyc2UoewogICAgICBjczogZGljdC5nZXRSYXcoIkNTIikgfHwgZGljdC5nZXRSYXcoIkNvbG9yU3BhY2UiKSwKICAgICAgeHJlZiwKICAgICAgcmVzb3VyY2VzLAogICAgICBwZGZGdW5jdGlvbkZhY3RvcnksCiAgICAgIGdsb2JhbENvbG9yU3BhY2VDYWNoZSwKICAgICAgbG9jYWxDb2xvclNwYWNlQ2FjaGUKICAgIH0pOwogICAgdGhpcy5iYWNrZ3JvdW5kID0gZGljdC5oYXMoIkJhY2tncm91bmQiKSA/IGNzLmdldFJnYihkaWN0LmdldCgiQmFja2dyb3VuZCIpLCAwKSA6IG51bGw7CiAgICBjb25zdCBmbk9iaiA9IGRpY3QuZ2V0UmF3KCJGdW5jdGlvbiIpOwogICAgY29uc3QgZm4gPSBmbk9iaiA/IHBkZkZ1bmN0aW9uRmFjdG9yeS5jcmVhdGUoZm5PYmosIHRydWUpIDogbnVsbDsKICAgIHRoaXMuY29vcmRzID0gW107CiAgICB0aGlzLmNvbG9ycyA9IFtdOwogICAgdGhpcy5maWd1cmVzID0gW107CiAgICBjb25zdCBkZWNvZGVDb250ZXh0ID0gewogICAgICBiaXRzUGVyQ29vcmRpbmF0ZTogZGljdC5nZXQoIkJpdHNQZXJDb29yZGluYXRlIiksCiAgICAgIGJpdHNQZXJDb21wb25lbnQ6IGRpY3QuZ2V0KCJCaXRzUGVyQ29tcG9uZW50IiksCiAgICAgIGJpdHNQZXJGbGFnOiBkaWN0LmdldCgiQml0c1BlckZsYWciKSwKICAgICAgZGVjb2RlOiBkaWN0LmdldEFycmF5KCJEZWNvZGUiKSwKICAgICAgY29sb3JGbjogZm4sCiAgICAgIGNvbG9yU3BhY2U6IGNzLAogICAgICBudW1Db21wczogZm4gPyAxIDogY3MubnVtQ29tcHMKICAgIH07CiAgICBjb25zdCByZWFkZXIgPSBuZXcgTWVzaFN0cmVhbVJlYWRlcihzdHJlYW0sIGRlY29kZUNvbnRleHQpOwogICAgbGV0IHBhdGNoTWVzaCA9IGZhbHNlOwogICAgc3dpdGNoICh0aGlzLnNoYWRpbmdUeXBlKSB7CiAgICAgIGNhc2UgU2hhZGluZ1R5cGUuRlJFRV9GT1JNX01FU0g6CiAgICAgICAgdGhpcy5fZGVjb2RlVHlwZTRTaGFkaW5nKHJlYWRlcik7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgU2hhZGluZ1R5cGUuTEFUVElDRV9GT1JNX01FU0g6CiAgICAgICAgY29uc3QgdmVydGljZXNQZXJSb3cgPSBkaWN0LmdldCgiVmVydGljZXNQZXJSb3ciKSB8IDA7CiAgICAgICAgaWYgKHZlcnRpY2VzUGVyUm93IDwgMikgewogICAgICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCJJbnZhbGlkIFZlcnRpY2VzUGVyUm93Iik7CiAgICAgICAgfQogICAgICAgIHRoaXMuX2RlY29kZVR5cGU1U2hhZGluZyhyZWFkZXIsIHZlcnRpY2VzUGVyUm93KTsKICAgICAgICBicmVhazsKICAgICAgY2FzZSBTaGFkaW5nVHlwZS5DT09OU19QQVRDSF9NRVNIOgogICAgICAgIHRoaXMuX2RlY29kZVR5cGU2U2hhZGluZyhyZWFkZXIpOwogICAgICAgIHBhdGNoTWVzaCA9IHRydWU7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgU2hhZGluZ1R5cGUuVEVOU09SX1BBVENIX01FU0g6CiAgICAgICAgdGhpcy5fZGVjb2RlVHlwZTdTaGFkaW5nKHJlYWRlcik7CiAgICAgICAgcGF0Y2hNZXNoID0gdHJ1ZTsKICAgICAgICBicmVhazsKICAgICAgZGVmYXVsdDoKICAgICAgICB1bnJlYWNoYWJsZSgiVW5zdXBwb3J0ZWQgbWVzaCB0eXBlLiIpOwogICAgICAgIGJyZWFrOwogICAgfQogICAgaWYgKHBhdGNoTWVzaCkgewogICAgICB0aGlzLl91cGRhdGVCb3VuZHMoKTsKICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gdGhpcy5maWd1cmVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgICB0aGlzLl9idWlsZEZpZ3VyZUZyb21QYXRjaChpKTsKICAgICAgfQogICAgfQogICAgdGhpcy5fdXBkYXRlQm91bmRzKCk7CiAgICB0aGlzLl9wYWNrRGF0YSgpOwogIH0KICBfZGVjb2RlVHlwZTRTaGFkaW5nKHJlYWRlcikgewogICAgY29uc3QgY29vcmRzID0gdGhpcy5jb29yZHM7CiAgICBjb25zdCBjb2xvcnMgPSB0aGlzLmNvbG9yczsKICAgIGNvbnN0IG9wZXJhdG9ycyA9IFtdOwogICAgY29uc3QgcHMgPSBbXTsKICAgIGxldCB2ZXJ0aWNlc0xlZnQgPSAwOwogICAgd2hpbGUgKHJlYWRlci5oYXNEYXRhKSB7CiAgICAgIGNvbnN0IGYgPSByZWFkZXIucmVhZEZsYWcoKTsKICAgICAgY29uc3QgY29vcmQgPSByZWFkZXIucmVhZENvb3JkaW5hdGUoKTsKICAgICAgY29uc3QgY29sb3IgPSByZWFkZXIucmVhZENvbXBvbmVudHMoKTsKICAgICAgaWYgKHZlcnRpY2VzTGVmdCA9PT0gMCkgewogICAgICAgIGlmICghKDAgPD0gZiAmJiBmIDw9IDIpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoIlVua25vd24gdHlwZTQgZmxhZyIpOwogICAgICAgIH0KICAgICAgICBzd2l0Y2ggKGYpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgdmVydGljZXNMZWZ0ID0gMzsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgIHBzLnB1c2gocHMuYXQoLTIpLCBwcy5hdCgtMSkpOwogICAgICAgICAgICB2ZXJ0aWNlc0xlZnQgPSAxOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgcHMucHVzaChwcy5hdCgtMyksIHBzLmF0KC0xKSk7CiAgICAgICAgICAgIHZlcnRpY2VzTGVmdCA9IDE7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgICBvcGVyYXRvcnMucHVzaChmKTsKICAgICAgfQogICAgICBwcy5wdXNoKGNvb3Jkcy5sZW5ndGgpOwogICAgICBjb29yZHMucHVzaChjb29yZCk7CiAgICAgIGNvbG9ycy5wdXNoKGNvbG9yKTsKICAgICAgdmVydGljZXNMZWZ0LS07CiAgICAgIHJlYWRlci5hbGlnbigpOwogICAgfQogICAgdGhpcy5maWd1cmVzLnB1c2goewogICAgICB0eXBlOiAidHJpYW5nbGVzIiwKICAgICAgY29vcmRzOiBuZXcgSW50MzJBcnJheShwcyksCiAgICAgIGNvbG9yczogbmV3IEludDMyQXJyYXkocHMpCiAgICB9KTsKICB9CiAgX2RlY29kZVR5cGU1U2hhZGluZyhyZWFkZXIsIHZlcnRpY2VzUGVyUm93KSB7CiAgICBjb25zdCBjb29yZHMgPSB0aGlzLmNvb3JkczsKICAgIGNvbnN0IGNvbG9ycyA9IHRoaXMuY29sb3JzOwogICAgY29uc3QgcHMgPSBbXTsKICAgIHdoaWxlIChyZWFkZXIuaGFzRGF0YSkgewogICAgICBjb25zdCBjb29yZCA9IHJlYWRlci5yZWFkQ29vcmRpbmF0ZSgpOwogICAgICBjb25zdCBjb2xvciA9IHJlYWRlci5yZWFkQ29tcG9uZW50cygpOwogICAgICBwcy5wdXNoKGNvb3Jkcy5sZW5ndGgpOwogICAgICBjb29yZHMucHVzaChjb29yZCk7CiAgICAgIGNvbG9ycy5wdXNoKGNvbG9yKTsKICAgIH0KICAgIHRoaXMuZmlndXJlcy5wdXNoKHsKICAgICAgdHlwZTogImxhdHRpY2UiLAogICAgICBjb29yZHM6IG5ldyBJbnQzMkFycmF5KHBzKSwKICAgICAgY29sb3JzOiBuZXcgSW50MzJBcnJheShwcyksCiAgICAgIHZlcnRpY2VzUGVyUm93CiAgICB9KTsKICB9CiAgX2RlY29kZVR5cGU2U2hhZGluZyhyZWFkZXIpIHsKICAgIGNvbnN0IGNvb3JkcyA9IHRoaXMuY29vcmRzOwogICAgY29uc3QgY29sb3JzID0gdGhpcy5jb2xvcnM7CiAgICBjb25zdCBwcyA9IG5ldyBJbnQzMkFycmF5KDE2KTsKICAgIGNvbnN0IGNzID0gbmV3IEludDMyQXJyYXkoNCk7CiAgICB3aGlsZSAocmVhZGVyLmhhc0RhdGEpIHsKICAgICAgY29uc3QgZiA9IHJlYWRlci5yZWFkRmxhZygpOwogICAgICBpZiAoISgwIDw9IGYgJiYgZiA8PSAzKSkgewogICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigiVW5rbm93biB0eXBlNiBmbGFnIik7CiAgICAgIH0KICAgICAgY29uc3QgcGkgPSBjb29yZHMubGVuZ3RoOwogICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBmICE9PSAwID8gOCA6IDEyOyBpIDwgaWk7IGkrKykgewogICAgICAgIGNvb3Jkcy5wdXNoKHJlYWRlci5yZWFkQ29vcmRpbmF0ZSgpKTsKICAgICAgfQogICAgICBjb25zdCBjaSA9IGNvbG9ycy5sZW5ndGg7CiAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGYgIT09IDAgPyAyIDogNDsgaSA8IGlpOyBpKyspIHsKICAgICAgICBjb2xvcnMucHVzaChyZWFkZXIucmVhZENvbXBvbmVudHMoKSk7CiAgICAgIH0KICAgICAgbGV0IHRtcDEsIHRtcDIsIHRtcDMsIHRtcDQ7CiAgICAgIHN3aXRjaCAoZikgewogICAgICAgIGNhc2UgMDoKICAgICAgICAgIHBzWzEyXSA9IHBpICsgMzsKICAgICAgICAgIHBzWzEzXSA9IHBpICsgNDsKICAgICAgICAgIHBzWzE0XSA9IHBpICsgNTsKICAgICAgICAgIHBzWzE1XSA9IHBpICsgNjsKICAgICAgICAgIHBzWzhdID0gcGkgKyAyOwogICAgICAgICAgcHNbMTFdID0gcGkgKyA3OwogICAgICAgICAgcHNbNF0gPSBwaSArIDE7CiAgICAgICAgICBwc1s3XSA9IHBpICsgODsKICAgICAgICAgIHBzWzBdID0gcGk7CiAgICAgICAgICBwc1sxXSA9IHBpICsgMTE7CiAgICAgICAgICBwc1syXSA9IHBpICsgMTA7CiAgICAgICAgICBwc1szXSA9IHBpICsgOTsKICAgICAgICAgIGNzWzJdID0gY2kgKyAxOwogICAgICAgICAgY3NbM10gPSBjaSArIDI7CiAgICAgICAgICBjc1swXSA9IGNpOwogICAgICAgICAgY3NbMV0gPSBjaSArIDM7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIDE6CiAgICAgICAgICB0bXAxID0gcHNbMTJdOwogICAgICAgICAgdG1wMiA9IHBzWzEzXTsKICAgICAgICAgIHRtcDMgPSBwc1sxNF07CiAgICAgICAgICB0bXA0ID0gcHNbMTVdOwogICAgICAgICAgcHNbMTJdID0gdG1wNDsKICAgICAgICAgIHBzWzEzXSA9IHBpICsgMDsKICAgICAgICAgIHBzWzE0XSA9IHBpICsgMTsKICAgICAgICAgIHBzWzE1XSA9IHBpICsgMjsKICAgICAgICAgIHBzWzhdID0gdG1wMzsKICAgICAgICAgIHBzWzExXSA9IHBpICsgMzsKICAgICAgICAgIHBzWzRdID0gdG1wMjsKICAgICAgICAgIHBzWzddID0gcGkgKyA0OwogICAgICAgICAgcHNbMF0gPSB0bXAxOwogICAgICAgICAgcHNbMV0gPSBwaSArIDc7CiAgICAgICAgICBwc1syXSA9IHBpICsgNjsKICAgICAgICAgIHBzWzNdID0gcGkgKyA1OwogICAgICAgICAgdG1wMSA9IGNzWzJdOwogICAgICAgICAgdG1wMiA9IGNzWzNdOwogICAgICAgICAgY3NbMl0gPSB0bXAyOwogICAgICAgICAgY3NbM10gPSBjaTsKICAgICAgICAgIGNzWzBdID0gdG1wMTsKICAgICAgICAgIGNzWzFdID0gY2kgKyAxOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAyOgogICAgICAgICAgdG1wMSA9IHBzWzE1XTsKICAgICAgICAgIHRtcDIgPSBwc1sxMV07CiAgICAgICAgICBwc1sxMl0gPSBwc1szXTsKICAgICAgICAgIHBzWzEzXSA9IHBpICsgMDsKICAgICAgICAgIHBzWzE0XSA9IHBpICsgMTsKICAgICAgICAgIHBzWzE1XSA9IHBpICsgMjsKICAgICAgICAgIHBzWzhdID0gcHNbN107CiAgICAgICAgICBwc1sxMV0gPSBwaSArIDM7CiAgICAgICAgICBwc1s0XSA9IHRtcDI7CiAgICAgICAgICBwc1s3XSA9IHBpICsgNDsKICAgICAgICAgIHBzWzBdID0gdG1wMTsKICAgICAgICAgIHBzWzFdID0gcGkgKyA3OwogICAgICAgICAgcHNbMl0gPSBwaSArIDY7CiAgICAgICAgICBwc1szXSA9IHBpICsgNTsKICAgICAgICAgIHRtcDEgPSBjc1szXTsKICAgICAgICAgIGNzWzJdID0gY3NbMV07CiAgICAgICAgICBjc1szXSA9IGNpOwogICAgICAgICAgY3NbMF0gPSB0bXAxOwogICAgICAgICAgY3NbMV0gPSBjaSArIDE7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIDM6CiAgICAgICAgICBwc1sxMl0gPSBwc1swXTsKICAgICAgICAgIHBzWzEzXSA9IHBpICsgMDsKICAgICAgICAgIHBzWzE0XSA9IHBpICsgMTsKICAgICAgICAgIHBzWzE1XSA9IHBpICsgMjsKICAgICAgICAgIHBzWzhdID0gcHNbMV07CiAgICAgICAgICBwc1sxMV0gPSBwaSArIDM7CiAgICAgICAgICBwc1s0XSA9IHBzWzJdOwogICAgICAgICAgcHNbN10gPSBwaSArIDQ7CiAgICAgICAgICBwc1swXSA9IHBzWzNdOwogICAgICAgICAgcHNbMV0gPSBwaSArIDc7CiAgICAgICAgICBwc1syXSA9IHBpICsgNjsKICAgICAgICAgIHBzWzNdID0gcGkgKyA1OwogICAgICAgICAgY3NbMl0gPSBjc1swXTsKICAgICAgICAgIGNzWzNdID0gY2k7CiAgICAgICAgICBjc1swXSA9IGNzWzFdOwogICAgICAgICAgY3NbMV0gPSBjaSArIDE7CiAgICAgICAgICBicmVhazsKICAgICAgfQogICAgICBwc1s1XSA9IGNvb3Jkcy5sZW5ndGg7CiAgICAgIGNvb3Jkcy5wdXNoKFsoLTQgKiBjb29yZHNbcHNbMF1dWzBdIC0gY29vcmRzW3BzWzE1XV1bMF0gKyA2ICogKGNvb3Jkc1twc1s0XV1bMF0gKyBjb29yZHNbcHNbMV1dWzBdKSAtIDIgKiAoY29vcmRzW3BzWzEyXV1bMF0gKyBjb29yZHNbcHNbM11dWzBdKSArIDMgKiAoY29vcmRzW3BzWzEzXV1bMF0gKyBjb29yZHNbcHNbN11dWzBdKSkgLyA5LCAoLTQgKiBjb29yZHNbcHNbMF1dWzFdIC0gY29vcmRzW3BzWzE1XV1bMV0gKyA2ICogKGNvb3Jkc1twc1s0XV1bMV0gKyBjb29yZHNbcHNbMV1dWzFdKSAtIDIgKiAoY29vcmRzW3BzWzEyXV1bMV0gKyBjb29yZHNbcHNbM11dWzFdKSArIDMgKiAoY29vcmRzW3BzWzEzXV1bMV0gKyBjb29yZHNbcHNbN11dWzFdKSkgLyA5XSk7CiAgICAgIHBzWzZdID0gY29vcmRzLmxlbmd0aDsKICAgICAgY29vcmRzLnB1c2goWygtNCAqIGNvb3Jkc1twc1szXV1bMF0gLSBjb29yZHNbcHNbMTJdXVswXSArIDYgKiAoY29vcmRzW3BzWzJdXVswXSArIGNvb3Jkc1twc1s3XV1bMF0pIC0gMiAqIChjb29yZHNbcHNbMF1dWzBdICsgY29vcmRzW3BzWzE1XV1bMF0pICsgMyAqIChjb29yZHNbcHNbNF1dWzBdICsgY29vcmRzW3BzWzE0XV1bMF0pKSAvIDksICgtNCAqIGNvb3Jkc1twc1szXV1bMV0gLSBjb29yZHNbcHNbMTJdXVsxXSArIDYgKiAoY29vcmRzW3BzWzJdXVsxXSArIGNvb3Jkc1twc1s3XV1bMV0pIC0gMiAqIChjb29yZHNbcHNbMF1dWzFdICsgY29vcmRzW3BzWzE1XV1bMV0pICsgMyAqIChjb29yZHNbcHNbNF1dWzFdICsgY29vcmRzW3BzWzE0XV1bMV0pKSAvIDldKTsKICAgICAgcHNbOV0gPSBjb29yZHMubGVuZ3RoOwogICAgICBjb29yZHMucHVzaChbKC00ICogY29vcmRzW3BzWzEyXV1bMF0gLSBjb29yZHNbcHNbM11dWzBdICsgNiAqIChjb29yZHNbcHNbOF1dWzBdICsgY29vcmRzW3BzWzEzXV1bMF0pIC0gMiAqIChjb29yZHNbcHNbMF1dWzBdICsgY29vcmRzW3BzWzE1XV1bMF0pICsgMyAqIChjb29yZHNbcHNbMTFdXVswXSArIGNvb3Jkc1twc1sxXV1bMF0pKSAvIDksICgtNCAqIGNvb3Jkc1twc1sxMl1dWzFdIC0gY29vcmRzW3BzWzNdXVsxXSArIDYgKiAoY29vcmRzW3BzWzhdXVsxXSArIGNvb3Jkc1twc1sxM11dWzFdKSAtIDIgKiAoY29vcmRzW3BzWzBdXVsxXSArIGNvb3Jkc1twc1sxNV1dWzFdKSArIDMgKiAoY29vcmRzW3BzWzExXV1bMV0gKyBjb29yZHNbcHNbMV1dWzFdKSkgLyA5XSk7CiAgICAgIHBzWzEwXSA9IGNvb3Jkcy5sZW5ndGg7CiAgICAgIGNvb3Jkcy5wdXNoKFsoLTQgKiBjb29yZHNbcHNbMTVdXVswXSAtIGNvb3Jkc1twc1swXV1bMF0gKyA2ICogKGNvb3Jkc1twc1sxMV1dWzBdICsgY29vcmRzW3BzWzE0XV1bMF0pIC0gMiAqIChjb29yZHNbcHNbMTJdXVswXSArIGNvb3Jkc1twc1szXV1bMF0pICsgMyAqIChjb29yZHNbcHNbMl1dWzBdICsgY29vcmRzW3BzWzhdXVswXSkpIC8gOSwgKC00ICogY29vcmRzW3BzWzE1XV1bMV0gLSBjb29yZHNbcHNbMF1dWzFdICsgNiAqIChjb29yZHNbcHNbMTFdXVsxXSArIGNvb3Jkc1twc1sxNF1dWzFdKSAtIDIgKiAoY29vcmRzW3BzWzEyXV1bMV0gKyBjb29yZHNbcHNbM11dWzFdKSArIDMgKiAoY29vcmRzW3BzWzJdXVsxXSArIGNvb3Jkc1twc1s4XV1bMV0pKSAvIDldKTsKICAgICAgdGhpcy5maWd1cmVzLnB1c2goewogICAgICAgIHR5cGU6ICJwYXRjaCIsCiAgICAgICAgY29vcmRzOiBuZXcgSW50MzJBcnJheShwcyksCiAgICAgICAgY29sb3JzOiBuZXcgSW50MzJBcnJheShjcykKICAgICAgfSk7CiAgICB9CiAgfQogIF9kZWNvZGVUeXBlN1NoYWRpbmcocmVhZGVyKSB7CiAgICBjb25zdCBjb29yZHMgPSB0aGlzLmNvb3JkczsKICAgIGNvbnN0IGNvbG9ycyA9IHRoaXMuY29sb3JzOwogICAgY29uc3QgcHMgPSBuZXcgSW50MzJBcnJheSgxNik7CiAgICBjb25zdCBjcyA9IG5ldyBJbnQzMkFycmF5KDQpOwogICAgd2hpbGUgKHJlYWRlci5oYXNEYXRhKSB7CiAgICAgIGNvbnN0IGYgPSByZWFkZXIucmVhZEZsYWcoKTsKICAgICAgaWYgKCEoMCA8PSBmICYmIGYgPD0gMykpIHsKICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoIlVua25vd24gdHlwZTcgZmxhZyIpOwogICAgICB9CiAgICAgIGNvbnN0IHBpID0gY29vcmRzLmxlbmd0aDsKICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gZiAhPT0gMCA/IDEyIDogMTY7IGkgPCBpaTsgaSsrKSB7CiAgICAgICAgY29vcmRzLnB1c2gocmVhZGVyLnJlYWRDb29yZGluYXRlKCkpOwogICAgICB9CiAgICAgIGNvbnN0IGNpID0gY29sb3JzLmxlbmd0aDsKICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gZiAhPT0gMCA/IDIgOiA0OyBpIDwgaWk7IGkrKykgewogICAgICAgIGNvbG9ycy5wdXNoKHJlYWRlci5yZWFkQ29tcG9uZW50cygpKTsKICAgICAgfQogICAgICBsZXQgdG1wMSwgdG1wMiwgdG1wMywgdG1wNDsKICAgICAgc3dpdGNoIChmKSB7CiAgICAgICAgY2FzZSAwOgogICAgICAgICAgcHNbMTJdID0gcGkgKyAzOwogICAgICAgICAgcHNbMTNdID0gcGkgKyA0OwogICAgICAgICAgcHNbMTRdID0gcGkgKyA1OwogICAgICAgICAgcHNbMTVdID0gcGkgKyA2OwogICAgICAgICAgcHNbOF0gPSBwaSArIDI7CiAgICAgICAgICBwc1s5XSA9IHBpICsgMTM7CiAgICAgICAgICBwc1sxMF0gPSBwaSArIDE0OwogICAgICAgICAgcHNbMTFdID0gcGkgKyA3OwogICAgICAgICAgcHNbNF0gPSBwaSArIDE7CiAgICAgICAgICBwc1s1XSA9IHBpICsgMTI7CiAgICAgICAgICBwc1s2XSA9IHBpICsgMTU7CiAgICAgICAgICBwc1s3XSA9IHBpICsgODsKICAgICAgICAgIHBzWzBdID0gcGk7CiAgICAgICAgICBwc1sxXSA9IHBpICsgMTE7CiAgICAgICAgICBwc1syXSA9IHBpICsgMTA7CiAgICAgICAgICBwc1szXSA9IHBpICsgOTsKICAgICAgICAgIGNzWzJdID0gY2kgKyAxOwogICAgICAgICAgY3NbM10gPSBjaSArIDI7CiAgICAgICAgICBjc1swXSA9IGNpOwogICAgICAgICAgY3NbMV0gPSBjaSArIDM7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIDE6CiAgICAgICAgICB0bXAxID0gcHNbMTJdOwogICAgICAgICAgdG1wMiA9IHBzWzEzXTsKICAgICAgICAgIHRtcDMgPSBwc1sxNF07CiAgICAgICAgICB0bXA0ID0gcHNbMTVdOwogICAgICAgICAgcHNbMTJdID0gdG1wNDsKICAgICAgICAgIHBzWzEzXSA9IHBpICsgMDsKICAgICAgICAgIHBzWzE0XSA9IHBpICsgMTsKICAgICAgICAgIHBzWzE1XSA9IHBpICsgMjsKICAgICAgICAgIHBzWzhdID0gdG1wMzsKICAgICAgICAgIHBzWzldID0gcGkgKyA5OwogICAgICAgICAgcHNbMTBdID0gcGkgKyAxMDsKICAgICAgICAgIHBzWzExXSA9IHBpICsgMzsKICAgICAgICAgIHBzWzRdID0gdG1wMjsKICAgICAgICAgIHBzWzVdID0gcGkgKyA4OwogICAgICAgICAgcHNbNl0gPSBwaSArIDExOwogICAgICAgICAgcHNbN10gPSBwaSArIDQ7CiAgICAgICAgICBwc1swXSA9IHRtcDE7CiAgICAgICAgICBwc1sxXSA9IHBpICsgNzsKICAgICAgICAgIHBzWzJdID0gcGkgKyA2OwogICAgICAgICAgcHNbM10gPSBwaSArIDU7CiAgICAgICAgICB0bXAxID0gY3NbMl07CiAgICAgICAgICB0bXAyID0gY3NbM107CiAgICAgICAgICBjc1syXSA9IHRtcDI7CiAgICAgICAgICBjc1szXSA9IGNpOwogICAgICAgICAgY3NbMF0gPSB0bXAxOwogICAgICAgICAgY3NbMV0gPSBjaSArIDE7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIDI6CiAgICAgICAgICB0bXAxID0gcHNbMTVdOwogICAgICAgICAgdG1wMiA9IHBzWzExXTsKICAgICAgICAgIHBzWzEyXSA9IHBzWzNdOwogICAgICAgICAgcHNbMTNdID0gcGkgKyAwOwogICAgICAgICAgcHNbMTRdID0gcGkgKyAxOwogICAgICAgICAgcHNbMTVdID0gcGkgKyAyOwogICAgICAgICAgcHNbOF0gPSBwc1s3XTsKICAgICAgICAgIHBzWzldID0gcGkgKyA5OwogICAgICAgICAgcHNbMTBdID0gcGkgKyAxMDsKICAgICAgICAgIHBzWzExXSA9IHBpICsgMzsKICAgICAgICAgIHBzWzRdID0gdG1wMjsKICAgICAgICAgIHBzWzVdID0gcGkgKyA4OwogICAgICAgICAgcHNbNl0gPSBwaSArIDExOwogICAgICAgICAgcHNbN10gPSBwaSArIDQ7CiAgICAgICAgICBwc1swXSA9IHRtcDE7CiAgICAgICAgICBwc1sxXSA9IHBpICsgNzsKICAgICAgICAgIHBzWzJdID0gcGkgKyA2OwogICAgICAgICAgcHNbM10gPSBwaSArIDU7CiAgICAgICAgICB0bXAxID0gY3NbM107CiAgICAgICAgICBjc1syXSA9IGNzWzFdOwogICAgICAgICAgY3NbM10gPSBjaTsKICAgICAgICAgIGNzWzBdID0gdG1wMTsKICAgICAgICAgIGNzWzFdID0gY2kgKyAxOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAzOgogICAgICAgICAgcHNbMTJdID0gcHNbMF07CiAgICAgICAgICBwc1sxM10gPSBwaSArIDA7CiAgICAgICAgICBwc1sxNF0gPSBwaSArIDE7CiAgICAgICAgICBwc1sxNV0gPSBwaSArIDI7CiAgICAgICAgICBwc1s4XSA9IHBzWzFdOwogICAgICAgICAgcHNbOV0gPSBwaSArIDk7CiAgICAgICAgICBwc1sxMF0gPSBwaSArIDEwOwogICAgICAgICAgcHNbMTFdID0gcGkgKyAzOwogICAgICAgICAgcHNbNF0gPSBwc1syXTsKICAgICAgICAgIHBzWzVdID0gcGkgKyA4OwogICAgICAgICAgcHNbNl0gPSBwaSArIDExOwogICAgICAgICAgcHNbN10gPSBwaSArIDQ7CiAgICAgICAgICBwc1swXSA9IHBzWzNdOwogICAgICAgICAgcHNbMV0gPSBwaSArIDc7CiAgICAgICAgICBwc1syXSA9IHBpICsgNjsKICAgICAgICAgIHBzWzNdID0gcGkgKyA1OwogICAgICAgICAgY3NbMl0gPSBjc1swXTsKICAgICAgICAgIGNzWzNdID0gY2k7CiAgICAgICAgICBjc1swXSA9IGNzWzFdOwogICAgICAgICAgY3NbMV0gPSBjaSArIDE7CiAgICAgICAgICBicmVhazsKICAgICAgfQogICAgICB0aGlzLmZpZ3VyZXMucHVzaCh7CiAgICAgICAgdHlwZTogInBhdGNoIiwKICAgICAgICBjb29yZHM6IG5ldyBJbnQzMkFycmF5KHBzKSwKICAgICAgICBjb2xvcnM6IG5ldyBJbnQzMkFycmF5KGNzKQogICAgICB9KTsKICAgIH0KICB9CiAgX2J1aWxkRmlndXJlRnJvbVBhdGNoKGluZGV4KSB7CiAgICBjb25zdCBmaWd1cmUgPSB0aGlzLmZpZ3VyZXNbaW5kZXhdOwogICAgYXNzZXJ0KGZpZ3VyZS50eXBlID09PSAicGF0Y2giLCAiVW5leHBlY3RlZCBwYXRjaCBtZXNoIGZpZ3VyZSIpOwogICAgY29uc3QgY29vcmRzID0gdGhpcy5jb29yZHMsCiAgICAgIGNvbG9ycyA9IHRoaXMuY29sb3JzOwogICAgY29uc3QgcGkgPSBmaWd1cmUuY29vcmRzOwogICAgY29uc3QgY2kgPSBmaWd1cmUuY29sb3JzOwogICAgY29uc3QgZmlndXJlTWluWCA9IE1hdGgubWluKGNvb3Jkc1twaVswXV1bMF0sIGNvb3Jkc1twaVszXV1bMF0sIGNvb3Jkc1twaVsxMl1dWzBdLCBjb29yZHNbcGlbMTVdXVswXSk7CiAgICBjb25zdCBmaWd1cmVNaW5ZID0gTWF0aC5taW4oY29vcmRzW3BpWzBdXVsxXSwgY29vcmRzW3BpWzNdXVsxXSwgY29vcmRzW3BpWzEyXV1bMV0sIGNvb3Jkc1twaVsxNV1dWzFdKTsKICAgIGNvbnN0IGZpZ3VyZU1heFggPSBNYXRoLm1heChjb29yZHNbcGlbMF1dWzBdLCBjb29yZHNbcGlbM11dWzBdLCBjb29yZHNbcGlbMTJdXVswXSwgY29vcmRzW3BpWzE1XV1bMF0pOwogICAgY29uc3QgZmlndXJlTWF4WSA9IE1hdGgubWF4KGNvb3Jkc1twaVswXV1bMV0sIGNvb3Jkc1twaVszXV1bMV0sIGNvb3Jkc1twaVsxMl1dWzFdLCBjb29yZHNbcGlbMTVdXVsxXSk7CiAgICBsZXQgc3BsaXRYQnkgPSBNYXRoLmNlaWwoKGZpZ3VyZU1heFggLSBmaWd1cmVNaW5YKSAqIE1lc2hTaGFkaW5nLlRSSUFOR0xFX0RFTlNJVFkgLyAodGhpcy5ib3VuZHNbMl0gLSB0aGlzLmJvdW5kc1swXSkpOwogICAgc3BsaXRYQnkgPSBNYXRoQ2xhbXAoc3BsaXRYQnksIE1lc2hTaGFkaW5nLk1JTl9TUExJVF9QQVRDSF9DSFVOS1NfQU1PVU5ULCBNZXNoU2hhZGluZy5NQVhfU1BMSVRfUEFUQ0hfQ0hVTktTX0FNT1VOVCk7CiAgICBsZXQgc3BsaXRZQnkgPSBNYXRoLmNlaWwoKGZpZ3VyZU1heFkgLSBmaWd1cmVNaW5ZKSAqIE1lc2hTaGFkaW5nLlRSSUFOR0xFX0RFTlNJVFkgLyAodGhpcy5ib3VuZHNbM10gLSB0aGlzLmJvdW5kc1sxXSkpOwogICAgc3BsaXRZQnkgPSBNYXRoQ2xhbXAoc3BsaXRZQnksIE1lc2hTaGFkaW5nLk1JTl9TUExJVF9QQVRDSF9DSFVOS1NfQU1PVU5ULCBNZXNoU2hhZGluZy5NQVhfU1BMSVRfUEFUQ0hfQ0hVTktTX0FNT1VOVCk7CiAgICBjb25zdCB2ZXJ0aWNlc1BlclJvdyA9IHNwbGl0WEJ5ICsgMTsKICAgIGNvbnN0IGZpZ3VyZUNvb3JkcyA9IG5ldyBJbnQzMkFycmF5KChzcGxpdFlCeSArIDEpICogdmVydGljZXNQZXJSb3cpOwogICAgY29uc3QgZmlndXJlQ29sb3JzID0gbmV3IEludDMyQXJyYXkoKHNwbGl0WUJ5ICsgMSkgKiB2ZXJ0aWNlc1BlclJvdyk7CiAgICBsZXQgayA9IDA7CiAgICBjb25zdCBjbCA9IG5ldyBVaW50OEFycmF5KDMpLAogICAgICBjciA9IG5ldyBVaW50OEFycmF5KDMpOwogICAgY29uc3QgYzAgPSBjb2xvcnNbY2lbMF1dLAogICAgICBjMSA9IGNvbG9yc1tjaVsxXV0sCiAgICAgIGMyID0gY29sb3JzW2NpWzJdXSwKICAgICAgYzMgPSBjb2xvcnNbY2lbM11dOwogICAgY29uc3QgYlJvdyA9IGdldEIoc3BsaXRZQnkpLAogICAgICBiQ29sID0gZ2V0QihzcGxpdFhCeSk7CiAgICBmb3IgKGxldCByb3cgPSAwOyByb3cgPD0gc3BsaXRZQnk7IHJvdysrKSB7CiAgICAgIGNsWzBdID0gKGMwWzBdICogKHNwbGl0WUJ5IC0gcm93KSArIGMyWzBdICogcm93KSAvIHNwbGl0WUJ5IHwgMDsKICAgICAgY2xbMV0gPSAoYzBbMV0gKiAoc3BsaXRZQnkgLSByb3cpICsgYzJbMV0gKiByb3cpIC8gc3BsaXRZQnkgfCAwOwogICAgICBjbFsyXSA9IChjMFsyXSAqIChzcGxpdFlCeSAtIHJvdykgKyBjMlsyXSAqIHJvdykgLyBzcGxpdFlCeSB8IDA7CiAgICAgIGNyWzBdID0gKGMxWzBdICogKHNwbGl0WUJ5IC0gcm93KSArIGMzWzBdICogcm93KSAvIHNwbGl0WUJ5IHwgMDsKICAgICAgY3JbMV0gPSAoYzFbMV0gKiAoc3BsaXRZQnkgLSByb3cpICsgYzNbMV0gKiByb3cpIC8gc3BsaXRZQnkgfCAwOwogICAgICBjclsyXSA9IChjMVsyXSAqIChzcGxpdFlCeSAtIHJvdykgKyBjM1syXSAqIHJvdykgLyBzcGxpdFlCeSB8IDA7CiAgICAgIGZvciAobGV0IGNvbCA9IDA7IGNvbCA8PSBzcGxpdFhCeTsgY29sKyssIGsrKykgewogICAgICAgIGlmICgocm93ID09PSAwIHx8IHJvdyA9PT0gc3BsaXRZQnkpICYmIChjb2wgPT09IDAgfHwgY29sID09PSBzcGxpdFhCeSkpIHsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgICBsZXQgeCA9IDAsCiAgICAgICAgICB5ID0gMDsKICAgICAgICBsZXQgcSA9IDA7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gMzsgaSsrKSB7CiAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8PSAzOyBqKyssIHErKykgewogICAgICAgICAgICBjb25zdCBtID0gYlJvd1tyb3ddW2ldICogYkNvbFtjb2xdW2pdOwogICAgICAgICAgICB4ICs9IGNvb3Jkc1twaVtxXV1bMF0gKiBtOwogICAgICAgICAgICB5ICs9IGNvb3Jkc1twaVtxXV1bMV0gKiBtOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBmaWd1cmVDb29yZHNba10gPSBjb29yZHMubGVuZ3RoOwogICAgICAgIGNvb3Jkcy5wdXNoKFt4LCB5XSk7CiAgICAgICAgZmlndXJlQ29sb3JzW2tdID0gY29sb3JzLmxlbmd0aDsKICAgICAgICBjb25zdCBuZXdDb2xvciA9IG5ldyBVaW50OEFycmF5KDMpOwogICAgICAgIG5ld0NvbG9yWzBdID0gKGNsWzBdICogKHNwbGl0WEJ5IC0gY29sKSArIGNyWzBdICogY29sKSAvIHNwbGl0WEJ5IHwgMDsKICAgICAgICBuZXdDb2xvclsxXSA9IChjbFsxXSAqIChzcGxpdFhCeSAtIGNvbCkgKyBjclsxXSAqIGNvbCkgLyBzcGxpdFhCeSB8IDA7CiAgICAgICAgbmV3Q29sb3JbMl0gPSAoY2xbMl0gKiAoc3BsaXRYQnkgLSBjb2wpICsgY3JbMl0gKiBjb2wpIC8gc3BsaXRYQnkgfCAwOwogICAgICAgIGNvbG9ycy5wdXNoKG5ld0NvbG9yKTsKICAgICAgfQogICAgfQogICAgZmlndXJlQ29vcmRzWzBdID0gcGlbMF07CiAgICBmaWd1cmVDb2xvcnNbMF0gPSBjaVswXTsKICAgIGZpZ3VyZUNvb3Jkc1tzcGxpdFhCeV0gPSBwaVszXTsKICAgIGZpZ3VyZUNvbG9yc1tzcGxpdFhCeV0gPSBjaVsxXTsKICAgIGZpZ3VyZUNvb3Jkc1t2ZXJ0aWNlc1BlclJvdyAqIHNwbGl0WUJ5XSA9IHBpWzEyXTsKICAgIGZpZ3VyZUNvbG9yc1t2ZXJ0aWNlc1BlclJvdyAqIHNwbGl0WUJ5XSA9IGNpWzJdOwogICAgZmlndXJlQ29vcmRzW3ZlcnRpY2VzUGVyUm93ICogc3BsaXRZQnkgKyBzcGxpdFhCeV0gPSBwaVsxNV07CiAgICBmaWd1cmVDb2xvcnNbdmVydGljZXNQZXJSb3cgKiBzcGxpdFlCeSArIHNwbGl0WEJ5XSA9IGNpWzNdOwogICAgdGhpcy5maWd1cmVzW2luZGV4XSA9IHsKICAgICAgdHlwZTogImxhdHRpY2UiLAogICAgICBjb29yZHM6IGZpZ3VyZUNvb3JkcywKICAgICAgY29sb3JzOiBmaWd1cmVDb2xvcnMsCiAgICAgIHZlcnRpY2VzUGVyUm93CiAgICB9OwogIH0KICBfdXBkYXRlQm91bmRzKCkgewogICAgbGV0IG1pblggPSB0aGlzLmNvb3Jkc1swXVswXSwKICAgICAgbWluWSA9IHRoaXMuY29vcmRzWzBdWzFdLAogICAgICBtYXhYID0gbWluWCwKICAgICAgbWF4WSA9IG1pblk7CiAgICBmb3IgKGxldCBpID0gMSwgaWkgPSB0aGlzLmNvb3Jkcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgIGNvbnN0IHggPSB0aGlzLmNvb3Jkc1tpXVswXSwKICAgICAgICB5ID0gdGhpcy5jb29yZHNbaV1bMV07CiAgICAgIG1pblggPSBtaW5YID4geCA/IHggOiBtaW5YOwogICAgICBtaW5ZID0gbWluWSA+IHkgPyB5IDogbWluWTsKICAgICAgbWF4WCA9IG1heFggPCB4ID8geCA6IG1heFg7CiAgICAgIG1heFkgPSBtYXhZIDwgeSA/IHkgOiBtYXhZOwogICAgfQogICAgdGhpcy5ib3VuZHMgPSBbbWluWCwgbWluWSwgbWF4WCwgbWF4WV07CiAgfQogIF9wYWNrRGF0YSgpIHsKICAgIGxldCBpLCBpaSwgaiwgamo7CiAgICBjb25zdCBjb29yZHMgPSB0aGlzLmNvb3JkczsKICAgIGNvbnN0IGNvb3Jkc1BhY2tlZCA9IG5ldyBGbG9hdDMyQXJyYXkoY29vcmRzLmxlbmd0aCAqIDIpOwogICAgZm9yIChpID0gMCwgaiA9IDAsIGlpID0gY29vcmRzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgY29uc3QgeHkgPSBjb29yZHNbaV07CiAgICAgIGNvb3Jkc1BhY2tlZFtqKytdID0geHlbMF07CiAgICAgIGNvb3Jkc1BhY2tlZFtqKytdID0geHlbMV07CiAgICB9CiAgICB0aGlzLmNvb3JkcyA9IGNvb3Jkc1BhY2tlZDsKICAgIGNvbnN0IGNvbG9ycyA9IHRoaXMuY29sb3JzOwogICAgY29uc3QgY29sb3JzUGFja2VkID0gbmV3IFVpbnQ4QXJyYXkoY29sb3JzLmxlbmd0aCAqIDMpOwogICAgZm9yIChpID0gMCwgaiA9IDAsIGlpID0gY29sb3JzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgY29uc3QgYyA9IGNvbG9yc1tpXTsKICAgICAgY29sb3JzUGFja2VkW2orK10gPSBjWzBdOwogICAgICBjb2xvcnNQYWNrZWRbaisrXSA9IGNbMV07CiAgICAgIGNvbG9yc1BhY2tlZFtqKytdID0gY1syXTsKICAgIH0KICAgIHRoaXMuY29sb3JzID0gY29sb3JzUGFja2VkOwogICAgY29uc3QgZmlndXJlcyA9IHRoaXMuZmlndXJlczsKICAgIGZvciAoaSA9IDAsIGlpID0gZmlndXJlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgIGNvbnN0IGZpZ3VyZSA9IGZpZ3VyZXNbaV0sCiAgICAgICAgcHMgPSBmaWd1cmUuY29vcmRzLAogICAgICAgIGNzID0gZmlndXJlLmNvbG9yczsKICAgICAgZm9yIChqID0gMCwgamogPSBwcy5sZW5ndGg7IGogPCBqajsgaisrKSB7CiAgICAgICAgcHNbal0gKj0gMjsKICAgICAgICBjc1tqXSAqPSAzOwogICAgICB9CiAgICB9CiAgfQogIGdldElSKCkgewogICAgY29uc3QgewogICAgICBib3VuZHMKICAgIH0gPSB0aGlzOwogICAgaWYgKGJvdW5kc1syXSAtIGJvdW5kc1swXSA9PT0gMCB8fCBib3VuZHNbM10gLSBib3VuZHNbMV0gPT09IDApIHsKICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKGBJbnZhbGlkIE1lc2hTaGFkaW5nIGJvdW5kczogWyR7Ym91bmRzfV0uYCk7CiAgICB9CiAgICByZXR1cm4gWyJNZXNoIiwgdGhpcy5zaGFkaW5nVHlwZSwgdGhpcy5jb29yZHMsIHRoaXMuY29sb3JzLCB0aGlzLmZpZ3VyZXMsIGJvdW5kcywgdGhpcy5iYm94LCB0aGlzLmJhY2tncm91bmRdOwogIH0KfQpjbGFzcyBEdW1teVNoYWRpbmcgZXh0ZW5kcyBCYXNlU2hhZGluZyB7CiAgZ2V0SVIoKSB7CiAgICByZXR1cm4gWyJEdW1teSJdOwogIH0KfQpmdW5jdGlvbiBnZXRUaWxpbmdQYXR0ZXJuSVIob3BlcmF0b3JMaXN0LCBkaWN0LCBjb2xvcikgewogIGNvbnN0IG1hdHJpeCA9IGxvb2t1cE1hdHJpeChkaWN0LmdldEFycmF5KCJNYXRyaXgiKSwgSURFTlRJVFlfTUFUUklYKTsKICBjb25zdCBiYm94ID0gbG9va3VwTm9ybWFsUmVjdChkaWN0LmdldEFycmF5KCJCQm94IiksIG51bGwpOwogIGlmICghYmJveCB8fCBiYm94WzJdIC0gYmJveFswXSA9PT0gMCB8fCBiYm94WzNdIC0gYmJveFsxXSA9PT0gMCkgewogICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKGBJbnZhbGlkIGdldFRpbGluZ1BhdHRlcm5JUiAvQkJveCBhcnJheS5gKTsKICB9CiAgY29uc3QgeHN0ZXAgPSBkaWN0LmdldCgiWFN0ZXAiKTsKICBpZiAodHlwZW9mIHhzdGVwICE9PSAibnVtYmVyIikgewogICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKGBJbnZhbGlkIGdldFRpbGluZ1BhdHRlcm5JUiAvWFN0ZXAgdmFsdWUuYCk7CiAgfQogIGNvbnN0IHlzdGVwID0gZGljdC5nZXQoIllTdGVwIik7CiAgaWYgKHR5cGVvZiB5c3RlcCAhPT0gIm51bWJlciIpIHsKICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcihgSW52YWxpZCBnZXRUaWxpbmdQYXR0ZXJuSVIgL1lTdGVwIHZhbHVlLmApOwogIH0KICBjb25zdCBwYWludFR5cGUgPSBkaWN0LmdldCgiUGFpbnRUeXBlIik7CiAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKHBhaW50VHlwZSkpIHsKICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcihgSW52YWxpZCBnZXRUaWxpbmdQYXR0ZXJuSVIgL1BhaW50VHlwZSB2YWx1ZS5gKTsKICB9CiAgY29uc3QgdGlsaW5nVHlwZSA9IGRpY3QuZ2V0KCJUaWxpbmdUeXBlIik7CiAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKHRpbGluZ1R5cGUpKSB7CiAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoYEludmFsaWQgZ2V0VGlsaW5nUGF0dGVybklSIC9UaWxpbmdUeXBlIHZhbHVlLmApOwogIH0KICByZXR1cm4gWyJUaWxpbmdQYXR0ZXJuIiwgY29sb3IsIG9wZXJhdG9yTGlzdCwgbWF0cml4LCBiYm94LCB4c3RlcCwgeXN0ZXAsIHBhaW50VHlwZSwgdGlsaW5nVHlwZV07Cn0KCjsvLyAuL3NyYy9jb3JlL2NhbGlicmlfZmFjdG9ycy5qcwpjb25zdCBDYWxpYnJpQm9sZEZhY3RvcnMgPSBbMS4zODc3LCAxLCAxLCAxLCAwLjk3ODAxLCAwLjkyNDgyLCAwLjg5NTUyLCAwLjkxMTMzLCAwLjgxOTg4LCAwLjk3NTY2LCAwLjk4MTUyLCAwLjkzNTQ4LCAwLjkzNTQ4LCAxLjI3OTgsIDAuODUyODQsIDAuOTI3OTQsIDEsIDAuOTYxMzQsIDEuNTQ2NTcsIDAuOTExMzMsIDAuOTExMzMsIDAuOTExMzMsIDAuOTExMzMsIDAuOTExMzMsIDAuOTExMzMsIDAuOTExMzMsIDAuOTExMzMsIDAuOTExMzMsIDAuOTExMzMsIDAuODI4NDUsIDAuODI4NDUsIDAuODUyODQsIDAuODUyODQsIDAuODUyODQsIDAuNzU4NTksIDAuOTIxMzgsIDAuODM5MDgsIDAuNzc2MiwgMC43MzI5MywgMC44NzI4OSwgMC43MzEzMywgMC43NTE0LCAwLjgxOTIxLCAwLjg3MzU2LCAwLjk1OTU4LCAwLjU5NTI2LCAwLjc1NzI3LCAwLjY5MjI1LCAxLjA0OTI0LCAwLjkxMjEsIDAuODY5NDMsIDAuNzk3OTUsIDAuODgxOTgsIDAuNzc5NTgsIDAuNzA4NjQsIDAuODEwNTUsIDAuOTAzOTksIDAuODg2NTMsIDAuOTYwMTcsIDAuODI1NzcsIDAuNzc4OTIsIDAuNzgyNTcsIDAuOTc1MDcsIDEuNTQ2NTcsIDAuOTc1MDcsIDAuODUyODQsIDAuODk1NTIsIDAuOTAxNzYsIDAuODg3NjIsIDAuODc4NSwgMC43NTI0MSwgMC44Nzg1LCAwLjkwNTE4LCAwLjk1MDE1LCAwLjc3NjE4LCAwLjg3ODUsIDAuODg0MDEsIDAuOTE5MTYsIDAuODYzMDQsIDAuODg0MDEsIDAuOTE0ODgsIDAuODc4NSwgMC44ODAxLCAwLjg3ODUsIDAuODc4NSwgMC45MTM0MywgMC43MTczLCAxLjA0MTA2LCAwLjg3ODUsIDAuODUwNzUsIDAuOTU3OTQsIDAuODI2MTYsIDAuODUxNjIsIDAuNzk0OTIsIDAuODgzMzEsIDEuNjk4MDgsIDAuODgzMzEsIDAuODUyODQsIDAuOTc4MDEsIDAuODk1NTIsIDAuOTExMzMsIDAuODk1NTIsIDAuOTExMzMsIDEuNzgwMSwgMC44OTU1MiwgMS4yNDQ4NywgMS4xMzI1NCwgMS4xMjQwMSwgMC45NjgzOSwgMC44NTI4NCwgMC42ODc4NywgMC43MDY0NSwgMC44NTU5MiwgMC45MDc0NywgMS4wMTQ2NiwgMS4wMDg4LCAwLjkwMzIzLCAxLCAxLjA3NDYzLCAxLCAwLjkxMDU2LCAwLjc1ODA2LCAxLjE5MTE4LCAwLjk2ODM5LCAwLjc4ODY0LCAwLjgyODQ1LCAwLjg0MTMzLCAwLjc1ODU5LCAwLjgzOTA4LCAwLjgzOTA4LCAwLjgzOTA4LCAwLjgzOTA4LCAwLjgzOTA4LCAwLjgzOTA4LCAwLjc3NTM5LCAwLjczMjkzLCAwLjczMTMzLCAwLjczMTMzLCAwLjczMTMzLCAwLjczMTMzLCAwLjk1OTU4LCAwLjk1OTU4LCAwLjk1OTU4LCAwLjk1OTU4LCAwLjg4NTA2LCAwLjkxMjEsIDAuODY5NDMsIDAuODY5NDMsIDAuODY5NDMsIDAuODY5NDMsIDAuODY5NDMsIDAuODUyODQsIDAuODc1MDgsIDAuOTAzOTksIDAuOTAzOTksIDAuOTAzOTksIDAuOTAzOTksIDAuNzc4OTIsIDAuNzk3OTUsIDAuOTA4MDcsIDAuODg3NjIsIDAuODg3NjIsIDAuODg3NjIsIDAuODg3NjIsIDAuODg3NjIsIDAuODg3NjIsIDAuODcxNSwgMC43NTI0MSwgMC45MDUxOCwgMC45MDUxOCwgMC45MDUxOCwgMC45MDUxOCwgMC44ODQwMSwgMC44ODQwMSwgMC44ODQwMSwgMC44ODQwMSwgMC44Nzg1LCAwLjg3ODUsIDAuODgwMSwgMC44ODAxLCAwLjg4MDEsIDAuODgwMSwgMC44ODAxLCAwLjkwNzQ3LCAwLjg5MDQ5LCAwLjg3ODUsIDAuODc4NSwgMC44Nzg1LCAwLjg3ODUsIDAuODUxNjIsIDAuODc4NSwgMC44NTE2MiwgMC44MzkwOCwgMC44ODc2MiwgMC44MzkwOCwgMC44ODc2MiwgMC44MzkwOCwgMC44ODc2MiwgMC43MzI5MywgMC43NTI0MSwgMC43MzI5MywgMC43NTI0MSwgMC43MzI5MywgMC43NTI0MSwgMC43MzI5MywgMC43NTI0MSwgMC44NzI4OSwgMC44MzAxNiwgMC44ODUwNiwgMC45MzEyNSwgMC43MzEzMywgMC45MDUxOCwgMC43MzEzMywgMC45MDUxOCwgMC43MzEzMywgMC45MDUxOCwgMC43MzEzMywgMC45MDUxOCwgMC43MzEzMywgMC45MDUxOCwgMC44MTkyMSwgMC43NzYxOCwgMC44MTkyMSwgMC43NzYxOCwgMC44MTkyMSwgMC43NzYxOCwgMSwgMSwgMC44NzM1NiwgMC44Nzg1LCAwLjkxMDc1LCAwLjg5NjA4LCAwLjk1OTU4LCAwLjg4NDAxLCAwLjk1OTU4LCAwLjg4NDAxLCAwLjk1OTU4LCAwLjg4NDAxLCAwLjk1OTU4LCAwLjg4NDAxLCAwLjk1OTU4LCAwLjg4NDAxLCAwLjc2MjI5LCAwLjkwMTY3LCAwLjU5NTI2LCAwLjkxOTE2LCAxLCAxLCAwLjg2MzA0LCAwLjY5MjI1LCAwLjg4NDAxLCAxLCAxLCAwLjcwNDI0LCAwLjc5NDY4LCAwLjkxOTI2LCAwLjg4MTc1LCAwLjcwODIzLCAwLjk0OTAzLCAwLjkxMjEsIDAuODc4NSwgMSwgMSwgMC45MTIxLCAwLjg3ODUsIDAuODc4MDIsIDAuODg2NTYsIDAuODc4NSwgMC44Njk0MywgMC44ODAxLCAwLjg2OTQzLCAwLjg4MDEsIDAuODY5NDMsIDAuODgwMSwgMC44NzQwMiwgMC44OTI5MSwgMC43Nzk1OCwgMC45MTM0MywgMSwgMSwgMC43Nzk1OCwgMC45MTM0MywgMC43MDg2NCwgMC43MTczLCAwLjcwODY0LCAwLjcxNzMsIDAuNzA4NjQsIDAuNzE3MywgMC43MDg2NCwgMC43MTczLCAxLCAxLCAwLjgxMDU1LCAwLjc1ODQxLCAwLjgxMDU1LCAxLjA2NDUyLCAwLjkwMzk5LCAwLjg3ODUsIDAuOTAzOTksIDAuODc4NSwgMC45MDM5OSwgMC44Nzg1LCAwLjkwMzk5LCAwLjg3ODUsIDAuOTAzOTksIDAuODc4NSwgMC45MDM5OSwgMC44Nzg1LCAwLjk2MDE3LCAwLjk1Nzk0LCAwLjc3ODkyLCAwLjg1MTYyLCAwLjc3ODkyLCAwLjc4MjU3LCAwLjc5NDkyLCAwLjc4MjU3LCAwLjc5NDkyLCAwLjc4MjU3LCAwLjc5NDkyLCAwLjkyOTcsIDAuNTY4OTIsIDAuODM5MDgsIDAuODg3NjIsIDAuNzc1MzksIDAuODcxNSwgMC44NzUwOCwgMC44OTA0OSwgMSwgMSwgMC44MTA1NSwgMS4wNDEwNiwgMS4yMDUyOCwgMS4yMDUyOCwgMSwgMS4xNTU0MywgMC43MDY3NCwgMC45ODM4NywgMC45NDcyMSwgMS4zMzQzMSwgMS40NTg5NCwgMC45NTE2MSwgMS4wNjMwMywgMC44MzkwOCwgMC44MDM1MiwgMC41NzE4NCwgMC42OTY1LCAwLjU2Mjg5LCAwLjgyMDAxLCAwLjU2MDI5LCAwLjgxMjM1LCAxLjAyOTg4LCAwLjgzOTA4LCAwLjc3NjIsIDAuNjgxNTYsIDAuODAzNjcsIDAuNzMxMzMsIDAuNzgyNTcsIDAuODczNTYsIDAuODY5NDMsIDAuOTU5NTgsIDAuNzU3MjcsIDAuODkwMTksIDEuMDQ5MjQsIDAuOTEyMSwgMC43NjQ4LCAwLjg2OTQzLCAwLjg3MzU2LCAwLjc5Nzk1LCAwLjc4Mjc1LCAwLjgxMDU1LCAwLjc3ODkyLCAwLjk3NjIsIDAuODI1NzcsIDAuOTk4MTksIDAuODQ4OTYsIDAuOTU5NTgsIDAuNzc4OTIsIDAuOTYxMDgsIDEuMDE0MDcsIDAuODkwNDksIDEuMDI5ODgsIDAuOTQyMTEsIDAuOTYxMDgsIDAuODkzNiwgMC44NDAyMSwgMC44Nzg0MiwgMC45NjM5OSwgMC43OTEwOSwgMC44OTA0OSwgMS4wMDgxMywgMS4wMjk4OCwgMC44NjA3NywgMC44NzQ0NSwgMC45MjA5OSwgMC44NDcyMywgMC44NjUxMywgMC44ODAxLCAwLjc1NjM4LCAwLjg1NzE0LCAwLjc4MjE2LCAwLjc5NTg2LCAwLjg3OTY1LCAwLjk0MjExLCAwLjk3NzQ3LCAwLjc4Mjg3LCAwLjk3OTI2LCAwLjg0OTcxLCAxLjAyOTg4LCAwLjk0MjExLCAwLjg4MDEsIDAuOTQyMTEsIDAuODQ5NzEsIDAuNzMxMzMsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDAuOTAyNjQsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDAuOTA1MTgsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDAuOTA1NDgsIDEsIDEsIDEsIDEsIDEsIDEsIDAuOTYwMTcsIDAuOTU3OTQsIDAuOTYwMTcsIDAuOTU3OTQsIDAuOTYwMTcsIDAuOTU3OTQsIDAuNzc4OTIsIDAuODUxNjIsIDEsIDEsIDAuODk1NTIsIDAuOTA1MjcsIDEsIDAuOTAzNjMsIDAuOTI3OTQsIDAuOTI3OTQsIDAuOTI3OTQsIDAuOTI3OTQsIDAuODcwMTIsIDAuODcwMTIsIDAuODcwMTIsIDAuODk1NTIsIDAuODk1NTIsIDEuNDIyNTksIDAuNzExNDMsIDEuMDYxNTIsIDEsIDEsIDEuMDMzNzIsIDEuMDMzNzIsIDAuOTcxNzEsIDEuNDk1NiwgMi4yODA3LCAwLjkzODM1LCAwLjgzNDA2LCAwLjkxMTMzLCAwLjg0MTA3LCAwLjkxMTMzLCAxLCAxLCAxLCAwLjcyMDIxLCAxLCAxLjIzMTA4LCAwLjgzNDg5LCAwLjg4NTI1LCAwLjg4NTI1LCAwLjgxNDk5LCAwLjkwNTI3LCAxLjgxMDU1LCAwLjkwNTI3LCAxLjgxMDU1LCAxLjMxMDA2LCAxLjUzNzExLCAwLjk0NDM0LCAxLjA4Njk2LCAxLCAwLjk1MDE4LCAwLjc3MTkyLCAwLjg1Mjg0LCAwLjkwNzQ3LCAxLjE3NTM0LCAwLjY5ODI1LCAwLjk3MTYsIDEuMzcwNzcsIDAuOTA3NDcsIDAuOTA3NDcsIDAuODUzNTYsIDAuOTA3NDcsIDAuOTA3NDcsIDEuNDQ5NDcsIDAuODUyODQsIDAuODk0MSwgMC44OTQxLCAwLjcwNTcyLCAwLjgsIDAuNzA1NzIsIDAuNzA1NzIsIDAuNzA1NzIsIDAuNzA1NzIsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDAuOTk4NjIsIDAuOTk4NjIsIDEsIDEsIDEsIDEsIDEsIDEuMDgwMDQsIDAuOTEwMjcsIDEsIDEsIDEsIDAuOTk4NjIsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDAuOTA3MjcsIDAuOTA3MjcsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDFdOwpjb25zdCBDYWxpYnJpQm9sZE1ldHJpY3MgPSB7CiAgbGluZUhlaWdodDogMS4yMjA3LAogIGxpbmVHYXA6IDAuMjIwNwp9Owpjb25zdCBDYWxpYnJpQm9sZEl0YWxpY0ZhY3RvcnMgPSBbMS4zODc3LCAxLCAxLCAxLCAwLjk3ODAxLCAwLjkyNDgyLCAwLjg5NTUyLCAwLjkxMTMzLCAwLjgxOTg4LCAwLjk3NTY2LCAwLjk4MTUyLCAwLjkzNTQ4LCAwLjkzNTQ4LCAxLjI3OTgsIDAuODUyODQsIDAuOTI3OTQsIDEsIDAuOTYxMzQsIDEuNTYyMzksIDAuOTExMzMsIDAuOTExMzMsIDAuOTExMzMsIDAuOTExMzMsIDAuOTExMzMsIDAuOTExMzMsIDAuOTExMzMsIDAuOTExMzMsIDAuOTExMzMsIDAuOTExMzMsIDAuODI4NDUsIDAuODI4NDUsIDAuODUyODQsIDAuODUyODQsIDAuODUyODQsIDAuNzU4NTksIDAuOTIxMzgsIDAuODM5MDgsIDAuNzc2MiwgMC43MTgwNSwgMC44NzI4OSwgMC43MzEzMywgMC43NTE0LCAwLjgxOTIxLCAwLjg3MzU2LCAwLjk1OTU4LCAwLjU5NTI2LCAwLjc1NzI3LCAwLjY5MjI1LCAxLjA0OTI0LCAwLjkwODcyLCAwLjg1OTM4LCAwLjc5Nzk1LCAwLjg3MDY4LCAwLjc3OTU4LCAwLjY5NzY2LCAwLjgxMDU1LCAwLjkwMzk5LCAwLjg4NjUzLCAwLjk2MDY4LCAwLjgyNTc3LCAwLjc3ODkyLCAwLjc4MjU3LCAwLjk3NTA3LCAxLjUyOSwgMC45NzUwNywgMC44NTI4NCwgMC44OTU1MiwgMC45MDE3NiwgMC45NDkwOCwgMC44NjQxMSwgMC43NDAxMiwgMC44NjQxMSwgMC44ODMyMywgMC45NTAxNSwgMC44NjQxMSwgMC44NjMzMSwgMC44ODQwMSwgMC45MTkxNiwgMC44NjMwNCwgMC44ODQwMSwgMC45MDM5LCAwLjg2MzMxLCAwLjg2MzMxLCAwLjg2NDExLCAwLjg2NDExLCAwLjkwNDY0LCAwLjcwODUyLCAxLjA0MTA2LCAwLjg2MzMxLCAwLjg0MzcyLCAwLjk1Nzk0LCAwLjgyNjE2LCAwLjg0NTQ4LCAwLjc5NDkyLCAwLjg4MzMxLCAxLjY5ODA4LCAwLjg4MzMxLCAwLjg1Mjg0LCAwLjk3ODAxLCAwLjg5NTUyLCAwLjkxMTMzLCAwLjg5NTUyLCAwLjkxMTMzLCAxLjc4MDEsIDAuODk1NTIsIDEuMjQ0ODcsIDEuMTMyNTQsIDEuMTkxMjksIDAuOTY4MzksIDAuODUyODQsIDAuNjg3ODcsIDAuNzA2NDUsIDAuODU1OTIsIDAuOTA3NDcsIDEuMDE0NjYsIDEuMDA4OCwgMC45MDMyMywgMSwgMS4wNzQ2MywgMSwgMC45MTA1NiwgMC43NTgwNiwgMS4xOTExOCwgMC45NjgzOSwgMC43ODg2NCwgMC44Mjg0NSwgMC44NDEzMywgMC43NTg1OSwgMC44MzkwOCwgMC44MzkwOCwgMC44MzkwOCwgMC44MzkwOCwgMC44MzkwOCwgMC44MzkwOCwgMC43NzUzOSwgMC43MTgwNSwgMC43MzEzMywgMC43MzEzMywgMC43MzEzMywgMC43MzEzMywgMC45NTk1OCwgMC45NTk1OCwgMC45NTk1OCwgMC45NTk1OCwgMC44ODUwNiwgMC45MDg3MiwgMC44NTkzOCwgMC44NTkzOCwgMC44NTkzOCwgMC44NTkzOCwgMC44NTkzOCwgMC44NTI4NCwgMC44NzA2OCwgMC45MDM5OSwgMC45MDM5OSwgMC45MDM5OSwgMC45MDM5OSwgMC43Nzg5MiwgMC43OTc5NSwgMC45MDgwNywgMC45NDkwOCwgMC45NDkwOCwgMC45NDkwOCwgMC45NDkwOCwgMC45NDkwOCwgMC45NDkwOCwgMC44NTg4NywgMC43NDAxMiwgMC44ODMyMywgMC44ODMyMywgMC44ODMyMywgMC44ODMyMywgMC44ODQwMSwgMC44ODQwMSwgMC44ODQwMSwgMC44ODQwMSwgMC44Nzg1LCAwLjg2MzMxLCAwLjg2MzMxLCAwLjg2MzMxLCAwLjg2MzMxLCAwLjg2MzMxLCAwLjg2MzMxLCAwLjkwNzQ3LCAwLjg5MDQ5LCAwLjg2MzMxLCAwLjg2MzMxLCAwLjg2MzMxLCAwLjg2MzMxLCAwLjg0NTQ4LCAwLjg2NDExLCAwLjg0NTQ4LCAwLjgzOTA4LCAwLjk0OTA4LCAwLjgzOTA4LCAwLjk0OTA4LCAwLjgzOTA4LCAwLjk0OTA4LCAwLjcxODA1LCAwLjc0MDEyLCAwLjcxODA1LCAwLjc0MDEyLCAwLjcxODA1LCAwLjc0MDEyLCAwLjcxODA1LCAwLjc0MDEyLCAwLjg3Mjg5LCAwLjc5NTM4LCAwLjg4NTA2LCAwLjkyNzI2LCAwLjczMTMzLCAwLjg4MzIzLCAwLjczMTMzLCAwLjg4MzIzLCAwLjczMTMzLCAwLjg4MzIzLCAwLjczMTMzLCAwLjg4MzIzLCAwLjczMTMzLCAwLjg4MzIzLCAwLjgxOTIxLCAwLjg2NDExLCAwLjgxOTIxLCAwLjg2NDExLCAwLjgxOTIxLCAwLjg2NDExLCAxLCAxLCAwLjg3MzU2LCAwLjg2MzMxLCAwLjkxMDc1LCAwLjg3NzcsIDAuOTU5NTgsIDAuODg0MDEsIDAuOTU5NTgsIDAuODg0MDEsIDAuOTU5NTgsIDAuODg0MDEsIDAuOTU5NTgsIDAuODg0MDEsIDAuOTU5NTgsIDAuODg0MDEsIDAuNzY0NjcsIDAuOTAxNjcsIDAuNTk1MjYsIDAuOTE5MTYsIDEsIDEsIDAuODYzMDQsIDAuNjkyMjUsIDAuODg0MDEsIDEsIDEsIDAuNzA0MjQsIDAuNzczMTIsIDAuOTE5MjYsIDAuODgxNzUsIDAuNzA4MjMsIDAuOTQ5MDMsIDAuOTA4NzIsIDAuODYzMzEsIDEsIDEsIDAuOTA4NzIsIDAuODYzMzEsIDAuODY5MDYsIDAuODgxMTYsIDAuODYzMzEsIDAuODU5MzgsIDAuODYzMzEsIDAuODU5MzgsIDAuODYzMzEsIDAuODU5MzgsIDAuODYzMzEsIDAuODc0MDIsIDAuODY1NDksIDAuNzc5NTgsIDAuOTA0NjQsIDEsIDEsIDAuNzc5NTgsIDAuOTA0NjQsIDAuNjk3NjYsIDAuNzA4NTIsIDAuNjk3NjYsIDAuNzA4NTIsIDAuNjk3NjYsIDAuNzA4NTIsIDAuNjk3NjYsIDAuNzA4NTIsIDEsIDEsIDAuODEwNTUsIDAuNzU4NDEsIDAuODEwNTUsIDEuMDY0NTIsIDAuOTAzOTksIDAuODYzMzEsIDAuOTAzOTksIDAuODYzMzEsIDAuOTAzOTksIDAuODYzMzEsIDAuOTAzOTksIDAuODYzMzEsIDAuOTAzOTksIDAuODYzMzEsIDAuOTAzOTksIDAuODYzMzEsIDAuOTYwNjgsIDAuOTU3OTQsIDAuNzc4OTIsIDAuODQ1NDgsIDAuNzc4OTIsIDAuNzgyNTcsIDAuNzk0OTIsIDAuNzgyNTcsIDAuNzk0OTIsIDAuNzgyNTcsIDAuNzk0OTIsIDAuOTI5NywgMC41Njg5MiwgMC44MzkwOCwgMC45NDkwOCwgMC43NzUzOSwgMC44NTg4NywgMC44NzA2OCwgMC44OTA0OSwgMSwgMSwgMC44MTA1NSwgMS4wNDEwNiwgMS4yMDUyOCwgMS4yMDUyOCwgMSwgMS4xNTU0MywgMC43MDA4OCwgMC45ODM4NywgMC45NDcyMSwgMS4zMzQzMSwgMS40NTg5NCwgMC45NTE2MSwgMS40ODM4NywgMC44MzkwOCwgMC44MDM1MiwgMC41NzExOCwgMC42OTY1LCAwLjU2MzQ3LCAwLjc5MTc5LCAwLjU1ODUzLCAwLjgwMzQ2LCAxLjAyOTg4LCAwLjgzOTA4LCAwLjc3NjIsIDAuNjcxNzQsIDAuODYwMzYsIDAuNzMxMzMsIDAuNzgyNTcsIDAuODczNTYsIDAuODY0NDEsIDAuOTU5NTgsIDAuNzU3MjcsIDAuODkwMTksIDEuMDQ5MjQsIDAuOTA4NzIsIDAuNzQ4ODksIDAuODU5MzgsIDAuODc4OTEsIDAuNzk3OTUsIDAuNzk1NywgMC44MTA1NSwgMC43Nzg5MiwgMC45NzQ0NywgMC44MjU3NywgMC45NzQ2NiwgMC44NzE3OSwgMC45NTk1OCwgMC43Nzg5MiwgMC45NDI1MiwgMC45NTYxMiwgMC44NzUzLCAxLjAyOTg4LCAwLjkyNzMzLCAwLjk0MjUyLCAwLjg3NDExLCAwLjg0MDIxLCAwLjg3MjgsIDAuOTU2MTIsIDAuNzQwODEsIDAuODc1MywgMS4wMjE4OSwgMS4wMjk4OCwgMC44NDgxNCwgMC44NzQ0NSwgMC45MTgyMiwgMC44NDcyMywgMC44NTY2OCwgMC44NjMzMSwgMC44MTM0NCwgMC44NzU4MSwgMC43NjQyMiwgMC44MjA0NiwgMC45NjA1NywgMC45MjczMywgMC45OTM3NSwgMC43ODAyMiwgMC45NTQ1MiwgMC44NjAxNSwgMS4wMjk4OCwgMC45MjczMywgMC44NjMzMSwgMC45MjczMywgMC44NjAxNSwgMC43MzEzMywgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMC45MDYzMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMC44ODMyMywgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMC44NTE3NCwgMSwgMSwgMSwgMSwgMSwgMSwgMC45NjA2OCwgMC45NTc5NCwgMC45NjA2OCwgMC45NTc5NCwgMC45NjA2OCwgMC45NTc5NCwgMC43Nzg5MiwgMC44NDU0OCwgMSwgMSwgMC44OTU1MiwgMC45MDUyNywgMSwgMC45MDM2MywgMC45Mjc5NCwgMC45Mjc5NCwgMC45Mjc5NCwgMC44OTgwNywgMC44NzAxMiwgMC44NzAxMiwgMC44NzAxMiwgMC44OTU1MiwgMC44OTU1MiwgMS40MjI1OSwgMC43MTA5NCwgMS4wNjE1MiwgMSwgMSwgMS4wMzM3MiwgMS4wMzM3MiwgMC45NzE3MSwgMS40OTU2LCAyLjI4MDcsIDAuOTI5NzIsIDAuODM0MDYsIDAuOTExMzMsIDAuODMzMjYsIDAuOTExMzMsIDEsIDEsIDEsIDAuNzIwMjEsIDEsIDEuMjMxMDgsIDAuODM0ODksIDAuODg1MjUsIDAuODg1MjUsIDAuODE0OTksIDAuOTA2MTYsIDEuODEwNTUsIDAuOTA1MjcsIDEuODEwNTUsIDEuMzEwNywgMS41MzcxMSwgMC45NDQzNCwgMS4wODY5NiwgMSwgMC45NTAxOCwgMC43NzE5MiwgMC44NTI4NCwgMC45MDc0NywgMS4xNzUzNCwgMC42OTgyNSwgMC45NzE2LCAxLjM3MDc3LCAwLjkwNzQ3LCAwLjkwNzQ3LCAwLjg1MzU2LCAwLjkwNzQ3LCAwLjkwNzQ3LCAxLjQ0OTQ3LCAwLjg1Mjg0LCAwLjg5NDEsIDAuODk0MSwgMC43MDU3MiwgMC44LCAwLjcwNTcyLCAwLjcwNTcyLCAwLjcwNTcyLCAwLjcwNTcyLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAwLjk5ODYyLCAwLjk5ODYyLCAxLCAxLCAxLCAxLCAxLCAxLjA4MDA0LCAwLjkxMDI3LCAxLCAxLCAxLCAwLjk5ODYyLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAwLjkwNzI3LCAwLjkwNzI3LCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxXTsKY29uc3QgQ2FsaWJyaUJvbGRJdGFsaWNNZXRyaWNzID0gewogIGxpbmVIZWlnaHQ6IDEuMjIwNywKICBsaW5lR2FwOiAwLjIyMDcKfTsKY29uc3QgQ2FsaWJyaUl0YWxpY0ZhY3RvcnMgPSBbMS4zODc3LCAxLCAxLCAxLCAxLjE3MjIzLCAxLjEyOTMsIDAuODk1NTIsIDAuOTExMzMsIDAuODAzOTUsIDEuMDIyNjksIDEuMTU2MDEsIDAuOTEwNTYsIDAuOTEwNTYsIDEuMjc5OCwgMC44NTI4NCwgMC44OTgwNywgMSwgMC45MDg2MSwgMS4zOTU0MywgMC45MTEzMywgMC45MTEzMywgMC45MTEzMywgMC45MTEzMywgMC45MTEzMywgMC45MTEzMywgMC45MTEzMywgMC45MTEzMywgMC45MTEzMywgMC45MTEzMywgMC45NjMwOSwgMC45NjMwOSwgMC44NTI4NCwgMC44NTI4NCwgMC44NTI4NCwgMC44MzMxOSwgMC44ODA3MSwgMC44Njc1LCAwLjgxNTUyLCAwLjcyMzQ2LCAwLjg1MTkzLCAwLjczMjA2LCAwLjc1MjIsIDAuODExMDUsIDAuODYyNzUsIDAuOTA2ODUsIDAuNjM3NywgMC43Nzg5MiwgMC43NTU5MywgMS4wMjYzOCwgMC44OTI0OSwgMC44NDExOCwgMC43NzQ1MiwgMC44NTM3NCwgMC43NTE4NiwgMC42Nzc4OSwgMC43OTc3NiwgMC44ODg0NCwgMC44NTA2NiwgMC45NDMwOSwgMC43NzgxOCwgMC43MzA2LCAwLjc2NjU5LCAxLjEwMzY5LCAxLjM4MzEzLCAxLjEwMzY5LCAxLjA2MTM5LCAwLjg5NTUyLCAwLjg3MzksIDAuOTI0NSwgMC45MjQ1LCAwLjgzMjAzLCAwLjkyNDUsIDAuODU4NjUsIDEuMDk4NDIsIDAuOTI0NSwgMC45MjQ1LCAxLjAzMjk3LCAxLjA3NjkyLCAwLjkwOTE4LCAxLjAzMjk3LCAwLjk0OTU5LCAwLjkyNDUsIDAuOTIyNzQsIDAuOTI0NSwgMC45MjQ1LCAxLjAyOTMzLCAwLjc3ODMyLCAxLjIwNTYyLCAwLjkyNDUsIDAuODkxNiwgMC45ODk4NiwgMC44NjYyMSwgMC44OTQ1MywgMC43OTAwNCwgMC45NDE1MiwgMS43NzI1NiwgMC45NDE1MiwgMC44NTI4NCwgMC45NzgwMSwgMC44OTU1MiwgMC45MTEzMywgMC44OTU1MiwgMC45MTEzMywgMS45MTcyOSwgMC44OTU1MiwgMS4xNzg4OSwgMS4xMzI1NCwgMS4xNjM1OSwgMC45MjA5OCwgMC44NTI4NCwgMC42ODc4NywgMC43MTM1MywgMC44NDczNywgMC45MDc0NywgMS4wMDg4LCAxLjAwNDQsIDAuODc2ODMsIDEsIDEuMDkwOTEsIDEsIDAuOTIyMjksIDAuNzM5LCAxLjE1NjQyLCAwLjkyMDk4LCAwLjc2Mjg4LCAwLjgwNTA0LCAwLjgwOTcyLCAwLjc1ODU5LCAwLjg2NzUsIDAuODY3NSwgMC44Njc1LCAwLjg2NzUsIDAuODY3NSwgMC44Njc1LCAwLjc2MzE4LCAwLjcyMzQ2LCAwLjczMjA2LCAwLjczMjA2LCAwLjczMjA2LCAwLjczMjA2LCAwLjkwNjg1LCAwLjkwNjg1LCAwLjkwNjg1LCAwLjkwNjg1LCAwLjg2NDc3LCAwLjg5MjQ5LCAwLjg0MTE4LCAwLjg0MTE4LCAwLjg0MTE4LCAwLjg0MTE4LCAwLjg0MTE4LCAwLjg1Mjg0LCAwLjg0NTU3LCAwLjg4ODQ0LCAwLjg4ODQ0LCAwLjg4ODQ0LCAwLjg4ODQ0LCAwLjczMDYsIDAuNzc0NTIsIDAuODYzMzEsIDAuOTI0NSwgMC45MjQ1LCAwLjkyNDUsIDAuOTI0NSwgMC45MjQ1LCAwLjkyNDUsIDAuODQ4NDMsIDAuODMyMDMsIDAuODU4NjUsIDAuODU4NjUsIDAuODU4NjUsIDAuODU4NjUsIDAuODI2MDEsIDAuODI2MDEsIDAuODI2MDEsIDAuODI2MDEsIDAuOTQ0NjksIDAuOTI0NSwgMC45MjI3NCwgMC45MjI3NCwgMC45MjI3NCwgMC45MjI3NCwgMC45MjI3NCwgMC45MDc0NywgMC44NjY1MSwgMC45MjQ1LCAwLjkyNDUsIDAuOTI0NSwgMC45MjQ1LCAwLjg5NDUzLCAwLjkyNDUsIDAuODk0NTMsIDAuODY3NSwgMC45MjQ1LCAwLjg2NzUsIDAuOTI0NSwgMC44Njc1LCAwLjkyNDUsIDAuNzIzNDYsIDAuODMyMDMsIDAuNzIzNDYsIDAuODMyMDMsIDAuNzIzNDYsIDAuODMyMDMsIDAuNzIzNDYsIDAuODMyMDMsIDAuODUxOTMsIDAuODg3NSwgMC44NjQ3NywgMC45OTAzNCwgMC43MzIwNiwgMC44NTg2NSwgMC43MzIwNiwgMC44NTg2NSwgMC43MzIwNiwgMC44NTg2NSwgMC43MzIwNiwgMC44NTg2NSwgMC43MzIwNiwgMC44NTg2NSwgMC44MTEwNSwgMC45MjQ1LCAwLjgxMTA1LCAwLjkyNDUsIDAuODExMDUsIDAuOTI0NSwgMSwgMSwgMC44NjI3NSwgMC45MjQ1LCAwLjkwODcyLCAwLjkzNTkxLCAwLjkwNjg1LCAwLjgyNjAxLCAwLjkwNjg1LCAwLjgyNjAxLCAwLjkwNjg1LCAwLjgyNjAxLCAwLjkwNjg1LCAxLjAzMjk3LCAwLjkwNjg1LCAwLjgyNjAxLCAwLjc3ODk2LCAxLjA1NjExLCAwLjYzNzcsIDEuMDc2OTIsIDEsIDEsIDAuOTA5MTgsIDAuNzU1OTMsIDEuMDMyOTcsIDEsIDEsIDAuNzYwMzIsIDAuOTM3NSwgMC45ODE1NiwgMC45MzQwNywgMC43NzI2MSwgMS4xMTQyOSwgMC44OTI0OSwgMC45MjQ1LCAxLCAxLCAwLjg5MjQ5LCAwLjkyNDUsIDAuOTI1MzQsIDAuODY2OTgsIDAuOTI0NSwgMC44NDExOCwgMC45MjI3NCwgMC44NDExOCwgMC45MjI3NCwgMC44NDExOCwgMC45MjI3NCwgMC44NjY3LCAwLjg2MjkxLCAwLjc1MTg2LCAxLjAyOTMzLCAxLCAxLCAwLjc1MTg2LCAxLjAyOTMzLCAwLjY3Nzg5LCAwLjc3ODMyLCAwLjY3Nzg5LCAwLjc3ODMyLCAwLjY3Nzg5LCAwLjc3ODMyLCAwLjY3Nzg5LCAwLjc3ODMyLCAxLCAxLCAwLjc5Nzc2LCAwLjk3NjU1LCAwLjc5Nzc2LCAxLjIzMDIzLCAwLjg4ODQ0LCAwLjkyNDUsIDAuODg4NDQsIDAuOTI0NSwgMC44ODg0NCwgMC45MjQ1LCAwLjg4ODQ0LCAwLjkyNDUsIDAuODg4NDQsIDAuOTI0NSwgMC44ODg0NCwgMC45MjQ1LCAwLjk0MzA5LCAwLjk4OTg2LCAwLjczMDYsIDAuODk0NTMsIDAuNzMwNiwgMC43NjY1OSwgMC43OTAwNCwgMC43NjY1OSwgMC43OTAwNCwgMC43NjY1OSwgMC43OTAwNCwgMS4wOTIzMSwgMC41NDg3MywgMC44Njc1LCAwLjkyNDUsIDAuNzYzMTgsIDAuODQ4NDMsIDAuODQ1NTcsIDAuODY2NTEsIDEsIDEsIDAuNzk3NzYsIDEuMjA1NjIsIDEuMTg2MjIsIDEuMTg2MjIsIDEsIDEuMTQzNywgMC42NzAwOSwgMC45NjMzNCwgMC45MzY5NSwgMS4zNTE5MSwgMS40MDkwOSwgMC45NTE2MSwgMS40ODM4NywgMC44Njc1LCAwLjkwODYxLCAwLjYxOTIsIDAuNzM2MywgMC42NDgyNCwgMC44MjQxMSwgMC41NjMyMSwgMC44NTY5NiwgMS4yMzUxNiwgMC44Njc1LCAwLjgxNTUyLCAwLjcyODYsIDAuODQxMzQsIDAuNzMyMDYsIDAuNzY2NTksIDAuODYyNzUsIDAuODQzNjksIDAuOTA2ODUsIDAuNzc4OTIsIDAuODU4NzEsIDEuMDI2MzgsIDAuODkyNDksIDAuNzU4MjgsIDAuODQxMTgsIDAuODU5ODQsIDAuNzc0NTIsIDAuNzY0NjYsIDAuNzk3NzYsIDAuNzMwNiwgMC45MDc4MiwgMC43NzgxOCwgMC45MDMsIDAuODcyOTEsIDAuOTA2ODUsIDAuNzMwNiwgMC45OTA1OCwgMS4wMzY2NywgMC45NDYzNSwgMS4yMzUxNiwgMC45ODQ5LCAwLjk5MDU4LCAwLjkyMzkzLCAwLjg5MTYsIDAuOTQyLCAxLjAzNjY3LCAwLjc1MDI2LCAwLjk0NjM1LCAxLjAyOTcsIDEuMjM1MTYsIDAuOTA5MTgsIDAuOTQwNDgsIDAuOTgyMTcsIDAuODk3NDYsIDAuODQxNTMsIDAuOTIyNzQsIDAuODI1MDcsIDAuODg4MzIsIDAuODQ0MzgsIDAuODgxNzgsIDEuMDM1MjUsIDAuOTg0OSwgMS4wMDIyNSwgMC43ODA4NiwgMC45NzI0OCwgMC44OTQwNCwgMS4yMzUxNiwgMC45ODQ5LCAwLjkyMjc0LCAwLjk4NDksIDAuODk0MDQsIDAuNzMyMDYsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDAuODk2OTMsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDAuODU4NjUsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDAuOTA5MzMsIDEsIDEsIDEsIDEsIDEsIDEsIDAuOTQzMDksIDAuOTg5ODYsIDAuOTQzMDksIDAuOTg5ODYsIDAuOTQzMDksIDAuOTg5ODYsIDAuNzMwNiwgMC44OTQ1MywgMSwgMSwgMC44OTU1MiwgMC45MDUyNywgMSwgMC45MDE4NiwgMS4xMjMwOCwgMS4xMjMwOCwgMS4xMjMwOCwgMS4xMjMwOCwgMS4yNTY2LCAxLjI1NjYsIDEuMjU2NiwgMC44OTU1MiwgMC44OTU1MiwgMS40MjI1OSwgMC42ODk5NCwgMS4wMzgwOSwgMSwgMSwgMS4wMTc2LCAxLjAxNzYsIDEuMTE1MjMsIDEuNDk1NiwgMi4wMTQ2MiwgMC45Nzg1OCwgMC44MjYxNiwgMC45MTEzMywgMC44MzQzNywgMC45MTEzMywgMSwgMSwgMSwgMC43MDUwOCwgMSwgMS4yMzEwOCwgMC43OTgwMSwgMC44NDQyNiwgMC44NDQyNiwgMC43NzQsIDAuOTA1NzIsIDEuODEwNTUsIDAuOTA3NDksIDEuODEwNTUsIDEuMjg4MDksIDEuNTU0NjksIDAuOTQ0MzQsIDEuMDc4MDYsIDEsIDAuOTcwOTQsIDAuNzU4OSwgMC44NTI4NCwgMC45MDc0NywgMS4xOTY1OCwgMC42OTgyNSwgMC45NzYyMiwgMS4zMzUxMiwgMC45MDc0NywgMC45MDc0NywgMC44NTI4NCwgMC45MDc0NywgMC45MDc0NywgMS40NDk0NywgMC44NTI4NCwgMC44OTQxLCAwLjg5NDEsIDAuNzA1NzIsIDAuOCwgMC43MDU3MiwgMC43MDU3MiwgMC43MDU3MiwgMC43MDU3MiwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMC45OTg2MiwgMC45OTg2MiwgMSwgMSwgMSwgMSwgMSwgMS4wMzM2LCAwLjkxMDI3LCAxLCAxLCAxLCAwLjk5ODYyLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLjA1ODU5LCAxLjA1ODU5LCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxXTsKY29uc3QgQ2FsaWJyaUl0YWxpY01ldHJpY3MgPSB7CiAgbGluZUhlaWdodDogMS4yMjA3LAogIGxpbmVHYXA6IDAuMjIwNwp9Owpjb25zdCBDYWxpYnJpUmVndWxhckZhY3RvcnMgPSBbMS4zODc3LCAxLCAxLCAxLCAxLjE3MjIzLCAxLjEyOTMsIDAuODk1NTIsIDAuOTExMzMsIDAuODAzOTUsIDEuMDIyNjksIDEuMTU2MDEsIDAuOTEwNTYsIDAuOTEwNTYsIDEuMjc5OCwgMC44NTI4NCwgMC44OTgwNywgMSwgMC45MDg2MSwgMS4zOTAxNiwgMC45MTEzMywgMC45MTEzMywgMC45MTEzMywgMC45MTEzMywgMC45MTEzMywgMC45MTEzMywgMC45MTEzMywgMC45MTEzMywgMC45MTEzMywgMC45MTEzMywgMC45NjMwOSwgMC45NjMwOSwgMC44NTI4NCwgMC44NTI4NCwgMC44NTI4NCwgMC44MzMxOSwgMC44ODA3MSwgMC44Njc1LCAwLjgxNTUyLCAwLjczODM0LCAwLjg1MTkzLCAwLjczMjA2LCAwLjc1MjIsIDAuODExMDUsIDAuODYyNzUsIDAuOTA2ODUsIDAuNjM3NywgMC43Nzg5MiwgMC43NTU5MywgMS4wMjYzOCwgMC44OTM4NSwgMC44NTEyMiwgMC43NzQ1MiwgMC44NjUwMywgMC43NTE4NiwgMC42ODg4NywgMC43OTc3NiwgMC44ODg0NCwgMC44NTA2NiwgMC45NDI1OCwgMC43NzgxOCwgMC43MzA2LCAwLjc2NjU5LCAxLjEwMzY5LCAxLjM5MDE2LCAxLjEwMzY5LCAxLjA2MTM5LCAwLjg5NTUyLCAwLjg3MzksIDAuODYxMjgsIDAuOTQ0NjksIDAuODQ1NywgMC45NDQ2OSwgMC44OTQ2NCwgMS4wOTg0MiwgMC44NDYzNiwgMC45NDQ2OSwgMS4wMzI5NywgMS4wNzY5MiwgMC45MDkxOCwgMS4wMzI5NywgMC45NTg5NywgMC45NDQ2OSwgMC45NDgyLCAwLjk0NDY5LCAwLjk0NDY5LCAxLjA0NjkyLCAwLjc4MjIzLCAxLjIwNTYyLCAwLjk0NDY5LCAwLjkwMzMyLCAwLjk4OTg2LCAwLjg2NjIxLCAwLjkwNTI3LCAwLjc5MDA0LCAwLjk0MTUyLCAxLjc3MjU2LCAwLjk0MTUyLCAwLjg1Mjg0LCAwLjk3ODAxLCAwLjg5NTUyLCAwLjkxMTMzLCAwLjg5NTUyLCAwLjkxMTMzLCAxLjkxNzI5LCAwLjg5NTUyLCAxLjE3ODg5LCAxLjEzMjU0LCAxLjA4NzA3LCAwLjkyMDk4LCAwLjg1Mjg0LCAwLjY4Nzg3LCAwLjcxMzUzLCAwLjg0NzM3LCAwLjkwNzQ3LCAxLjAwODgsIDEuMDA0NCwgMC44NzY4MywgMSwgMS4wOTA5MSwgMSwgMC45MjIyOSwgMC43MzksIDEuMTU2NDIsIDAuOTIwOTgsIDAuNzYyODgsIDAuODA1MDQsIDAuODA5NzIsIDAuNzU4NTksIDAuODY3NSwgMC44Njc1LCAwLjg2NzUsIDAuODY3NSwgMC44Njc1LCAwLjg2NzUsIDAuNzYzMTgsIDAuNzM4MzQsIDAuNzMyMDYsIDAuNzMyMDYsIDAuNzMyMDYsIDAuNzMyMDYsIDAuOTA2ODUsIDAuOTA2ODUsIDAuOTA2ODUsIDAuOTA2ODUsIDAuODY0NzcsIDAuODkzODUsIDAuODUxMjIsIDAuODUxMjIsIDAuODUxMjIsIDAuODUxMjIsIDAuODUxMjIsIDAuODUyODQsIDAuODUzMTEsIDAuODg4NDQsIDAuODg4NDQsIDAuODg4NDQsIDAuODg4NDQsIDAuNzMwNiwgMC43NzQ1MiwgMC44NjMzMSwgMC44NjEyOCwgMC44NjEyOCwgMC44NjEyOCwgMC44NjEyOCwgMC44NjEyOCwgMC44NjEyOCwgMC44NjkzLCAwLjg0NTcsIDAuODk0NjQsIDAuODk0NjQsIDAuODk0NjQsIDAuODk0NjQsIDAuODI2MDEsIDAuODI2MDEsIDAuODI2MDEsIDAuODI2MDEsIDAuOTQ0NjksIDAuOTQ0NjksIDAuOTQ4MiwgMC45NDgyLCAwLjk0ODIsIDAuOTQ4MiwgMC45NDgyLCAwLjkwNzQ3LCAwLjg2NjUxLCAwLjk0NDY5LCAwLjk0NDY5LCAwLjk0NDY5LCAwLjk0NDY5LCAwLjkwNTI3LCAwLjk0NDY5LCAwLjkwNTI3LCAwLjg2NzUsIDAuODYxMjgsIDAuODY3NSwgMC44NjEyOCwgMC44Njc1LCAwLjg2MTI4LCAwLjczODM0LCAwLjg0NTcsIDAuNzM4MzQsIDAuODQ1NywgMC43MzgzNCwgMC44NDU3LCAwLjczODM0LCAwLjg0NTcsIDAuODUxOTMsIDAuOTI0NTQsIDAuODY0NzcsIDAuOTkyMSwgMC43MzIwNiwgMC44OTQ2NCwgMC43MzIwNiwgMC44OTQ2NCwgMC43MzIwNiwgMC44OTQ2NCwgMC43MzIwNiwgMC44OTQ2NCwgMC43MzIwNiwgMC44OTQ2NCwgMC44MTEwNSwgMC44NDYzNiwgMC44MTEwNSwgMC44NDYzNiwgMC44MTEwNSwgMC44NDYzNiwgMSwgMSwgMC44NjI3NSwgMC45NDQ2OSwgMC45MDg3MiwgMC45NTc4NiwgMC45MDY4NSwgMC44MjYwMSwgMC45MDY4NSwgMC44MjYwMSwgMC45MDY4NSwgMC44MjYwMSwgMC45MDY4NSwgMS4wMzI5NywgMC45MDY4NSwgMC44MjYwMSwgMC43Nzc0MSwgMS4wNTYxMSwgMC42Mzc3LCAxLjA3NjkyLCAxLCAxLCAwLjkwOTE4LCAwLjc1NTkzLCAxLjAzMjk3LCAxLCAxLCAwLjc2MDMyLCAwLjkwNDUyLCAwLjk4MTU2LCAxLjExODQyLCAwLjc3MjYxLCAxLjExNDI5LCAwLjg5Mzg1LCAwLjk0NDY5LCAxLCAxLCAwLjg5Mzg1LCAwLjk0NDY5LCAwLjk1ODc3LCAwLjg2OTAxLCAwLjk0NDY5LCAwLjg1MTIyLCAwLjk0ODIsIDAuODUxMjIsIDAuOTQ4MiwgMC44NTEyMiwgMC45NDgyLCAwLjg2NjcsIDAuOTAwMTYsIDAuNzUxODYsIDEuMDQ2OTIsIDEsIDEsIDAuNzUxODYsIDEuMDQ2OTIsIDAuNjg4ODcsIDAuNzgyMjMsIDAuNjg4ODcsIDAuNzgyMjMsIDAuNjg4ODcsIDAuNzgyMjMsIDAuNjg4ODcsIDAuNzgyMjMsIDEsIDEsIDAuNzk3NzYsIDAuOTIxODgsIDAuNzk3NzYsIDEuMjMwMjMsIDAuODg4NDQsIDAuOTQ0NjksIDAuODg4NDQsIDAuOTQ0NjksIDAuODg4NDQsIDAuOTQ0NjksIDAuODg4NDQsIDAuOTQ0NjksIDAuODg4NDQsIDAuOTQ0NjksIDAuODg4NDQsIDAuOTQ0NjksIDAuOTQyNTgsIDAuOTg5ODYsIDAuNzMwNiwgMC45MDUyNywgMC43MzA2LCAwLjc2NjU5LCAwLjc5MDA0LCAwLjc2NjU5LCAwLjc5MDA0LCAwLjc2NjU5LCAwLjc5MDA0LCAxLjA5MjMxLCAwLjU0ODczLCAwLjg2NzUsIDAuODYxMjgsIDAuNzYzMTgsIDAuODY5MywgMC44NTMxMSwgMC44NjY1MSwgMSwgMSwgMC43OTc3NiwgMS4yMDU2MiwgMS4xODYyMiwgMS4xODYyMiwgMSwgMS4xNDM3LCAwLjY3NzQyLCAwLjk2MzM0LCAwLjkzNjk1LCAxLjM1MTkxLCAxLjQwOTA5LCAwLjk1MTYxLCAxLjQ4Mzg3LCAwLjg2Njg2LCAwLjkwODYxLCAwLjYyMjY3LCAwLjc0MzU5LCAwLjY1NjQ5LCAwLjg1NDk4LCAwLjU2OTYzLCAwLjg4MjU0LCAxLjIzNTE2LCAwLjg2NzUsIDAuODE1NTIsIDAuNzU0NDMsIDAuODQ1MDMsIDAuNzMyMDYsIDAuNzY2NTksIDAuODYyNzUsIDAuODUxMjIsIDAuOTA2ODUsIDAuNzc4OTIsIDAuODU3NDYsIDEuMDI2MzgsIDAuODkzODUsIDAuNzU2NTcsIDAuODUxMjIsIDAuODYyNzUsIDAuNzc0NTIsIDAuNzQxNzEsIDAuNzk3NzYsIDAuNzMwNiwgMC45NTE2NSwgMC43NzgxOCwgMC44OTc3MiwgMC44ODgzMSwgMC45MDY4NSwgMC43MzA2LCAwLjk4MTQyLCAxLjAyMTkxLCAwLjk2NTc2LCAxLjIzNTE2LCAwLjk5MDE4LCAwLjk4MTQyLCAwLjkyMzYsIDAuODkyNTgsIDAuOTQwMzUsIDEuMDIxOTEsIDAuNzg4NDgsIDAuOTY1NzYsIDAuOTU2MSwgMS4yMzUxNiwgMC45MDkxOCwgMC45MjU3OCwgMC45NTQyNCwgMC44OTc0NiwgMC44Mzk2OSwgMC45NDgyLCAwLjgwMTEzLCAwLjg5NDQyLCAwLjg1MjA4LCAwLjg2MTU1LCAwLjk4MDIyLCAwLjk5MDE4LCAxLjAwNDUyLCAwLjgxMjA5LCAwLjk5MjQ3LCAwLjg5MTgxLCAxLjIzNTE2LCAwLjk5MDE4LCAwLjk0ODIsIDAuOTkwMTgsIDAuODkxODEsIDAuNzMyMDYsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDAuODg4NDQsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDAuODk0NjQsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDAuOTY3NjYsIDEsIDEsIDEsIDEsIDEsIDEsIDAuOTQyNTgsIDAuOTg5ODYsIDAuOTQyNTgsIDAuOTg5ODYsIDAuOTQyNTgsIDAuOTg5ODYsIDAuNzMwNiwgMC45MDUyNywgMSwgMSwgMC44OTU1MiwgMC45MDUyNywgMSwgMC45MDE4NiwgMS4xMjMwOCwgMS4xMjMwOCwgMS4xMjMwOCwgMS4xMjMwOCwgMS4yNTY2LCAxLjI1NjYsIDEuMjU2NiwgMC44OTU1MiwgMC44OTU1MiwgMS40MjI1OSwgMC42OTA0MywgMS4wMzgwOSwgMSwgMSwgMS4wMTc2LCAxLjAxNzYsIDEuMTE1MjMsIDEuNDk1NiwgMi4wMTQ2MiwgMC45OTMzMSwgMC44MjYxNiwgMC45MTEzMywgMC44NDI4NiwgMC45MTEzMywgMSwgMSwgMSwgMC43MDUwOCwgMSwgMS4yMzEwOCwgMC43OTgwMSwgMC44NDQyNiwgMC44NDQyNiwgMC43NzQsIDAuOTA1MjcsIDEuODEwNTUsIDAuOTA1MjcsIDEuODEwNTUsIDEuMjg4MDksIDEuNTU0NjksIDAuOTQ0MzQsIDEuMDc4MDYsIDEsIDAuOTcwOTQsIDAuNzU4OSwgMC44NTI4NCwgMC45MDc0NywgMS4xOTY1OCwgMC42OTgyNSwgMC45NzYyMiwgMS4zMzUxMiwgMC45MDc0NywgMC45MDc0NywgMC44NTM1NiwgMC45MDc0NywgMC45MDc0NywgMS40NDk0NywgMC44NTI4NCwgMC44OTQxLCAwLjg5NDEsIDAuNzA1NzIsIDAuOCwgMC43MDU3MiwgMC43MDU3MiwgMC43MDU3MiwgMC43MDU3MiwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMC45OTg2MiwgMC45OTg2MiwgMSwgMSwgMSwgMSwgMSwgMS4wMzM2LCAwLjkxMDI3LCAxLCAxLCAxLCAwLjk5ODYyLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLjA1ODU5LCAxLjA1ODU5LCAxLCAxLCAxLCAxLjA3MTg1LCAwLjk5NDEzLCAwLjk2MzM0LCAxLjA4MDY1LCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxXTsKY29uc3QgQ2FsaWJyaVJlZ3VsYXJNZXRyaWNzID0gewogIGxpbmVIZWlnaHQ6IDEuMjIwNywKICBsaW5lR2FwOiAwLjIyMDcKfTsKCjsvLyAuL3NyYy9jb3JlL2hlbHZldGljYV9mYWN0b3JzLmpzCmNvbnN0IEhlbHZldGljYUJvbGRGYWN0b3JzID0gWzAuNzYxMTYsIDEsIDEsIDEuMDAwNiwgMC45OTk5OCwgMC45OTk3NCwgMC45OTk3MywgMC45OTk3MywgMC45OTk4MiwgMC45OTk3NywgMS4wMDA4NywgMC45OTk5OCwgMC45OTk5OCwgMC45OTk1OSwgMS4wMDAwMywgMS4wMDA2LCAwLjk5OTk4LCAxLjAwMDYsIDEuMDAwNiwgMC45OTk3MywgMC45OTk3MywgMC45OTk3MywgMC45OTk3MywgMC45OTk3MywgMC45OTk3MywgMC45OTk3MywgMC45OTk3MywgMC45OTk3MywgMC45OTk3MywgMC45OTk5OCwgMSwgMS4wMDAwMywgMS4wMDAwMywgMS4wMDAwMywgMS4wMDAyNiwgMC45OTk5LCAwLjk5OTc3LCAwLjk5OTc3LCAwLjk5OTc3LCAwLjk5OTc3LCAxLjAwMDAxLCAxLjAwMDI2LCAxLjAwMDIyLCAwLjk5OTc3LCAxLjAwMDYsIDAuOTk5NzMsIDAuOTk5NzcsIDEuMDAwMjYsIDAuOTk5OTksIDAuOTk5NzcsIDEuMDAwMjIsIDEuMDAwMDEsIDEuMDAwMjIsIDAuOTk5NzcsIDEuMDAwMDEsIDEuMDAwMjYsIDAuOTk5NzcsIDEuMDAwMDEsIDEuMDAwMTYsIDEuMDAwMDEsIDEuMDAwMDEsIDEuMDAwMjYsIDAuOTk5OTgsIDEuMDAwNiwgMC45OTk5OCwgMS4wMDAwMywgMC45OTk3MywgMC45OTk5OCwgMC45OTk3MywgMS4wMDAyNiwgMC45OTk3MywgMS4wMDAyNiwgMC45OTk3MywgMC45OTk5OCwgMS4wMDAyNiwgMS4wMDAyNiwgMS4wMDA2LCAxLjAwMDYsIDAuOTk5NzMsIDEuMDAwNiwgMC45OTk4MiwgMS4wMDAyNiwgMS4wMDAyNiwgMS4wMDAyNiwgMS4wMDAyNiwgMC45OTk1OSwgMC45OTk3MywgMC45OTk5OCwgMS4wMDAyNiwgMC45OTk3MywgMS4wMDAyMiwgMC45OTk3MywgMC45OTk3MywgMSwgMC45OTk1OSwgMS4wMDA3NywgMC45OTk1OSwgMS4wMDAwMywgMC45OTk5OCwgMC45OTk3MywgMC45OTk3MywgMC45OTk3MywgMC45OTk3MywgMS4wMDA3NywgMC45OTk3MywgMC45OTk5OCwgMS4wMDAyNSwgMC45OTk2OCwgMC45OTk3MywgMS4wMDAwMywgMS4wMDAyNSwgMC42MDI5OSwgMS4wMDAyNCwgMS4wNjQwOSwgMSwgMSwgMC45OTk5OCwgMSwgMC45OTk3MywgMS4wMDA2LCAwLjk5OTk4LCAxLCAwLjk5OTM2LCAwLjk5OTczLCAxLjAwMDAyLCAxLjAwMDAyLCAxLjAwMDAyLCAxLjAwMDI2LCAwLjk5OTc3LCAwLjk5OTc3LCAwLjk5OTc3LCAwLjk5OTc3LCAwLjk5OTc3LCAwLjk5OTc3LCAxLCAwLjk5OTc3LCAxLjAwMDAxLCAxLjAwMDAxLCAxLjAwMDAxLCAxLjAwMDAxLCAxLjAwMDYsIDEuMDAwNiwgMS4wMDA2LCAxLjAwMDYsIDAuOTk5NzcsIDAuOTk5NzcsIDEuMDAwMjIsIDEuMDAwMjIsIDEuMDAwMjIsIDEuMDAwMjIsIDEuMDAwMjIsIDEuMDAwMDMsIDEuMDAwMjIsIDAuOTk5NzcsIDAuOTk5NzcsIDAuOTk5NzcsIDAuOTk5NzcsIDEuMDAwMDEsIDEuMDAwMDEsIDEuMDAwMjYsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5ODIsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5NzMsIDEuMDAwNiwgMS4wMDA2LCAxLjAwMDYsIDEuMDAwNiwgMS4wMDAyNiwgMS4wMDAyNiwgMS4wMDAyNiwgMS4wMDAyNiwgMS4wMDAyNiwgMS4wMDAyNiwgMS4wMDAyNiwgMS4wNjQwOSwgMS4wMDAyNiwgMS4wMDAyNiwgMS4wMDAyNiwgMS4wMDAyNiwgMS4wMDAyNiwgMC45OTk3MywgMS4wMDAyNiwgMC45OTk3MywgMC45OTk3NywgMC45OTk3MywgMC45OTk3NywgMC45OTk3MywgMC45OTk3NywgMC45OTk3MywgMC45OTk3NywgMC45OTk3MywgMC45OTk3NywgMC45OTk3MywgMC45OTk3NywgMC45OTk3MywgMC45OTk3NywgMC45OTk3MywgMC45OTk3NywgMS4wMzM3NCwgMC45OTk3NywgMS4wMDAyNiwgMS4wMDAwMSwgMC45OTk3MywgMS4wMDAwMSwgMC45OTk3MywgMS4wMDAwMSwgMC45OTk3MywgMS4wMDAwMSwgMC45OTk3MywgMS4wMDAwMSwgMC45OTk3MywgMS4wMDAyMiwgMS4wMDAyNiwgMS4wMDAyMiwgMS4wMDAyNiwgMS4wMDAyMiwgMS4wMDAyNiwgMS4wMDAyMiwgMS4wMDAyNiwgMC45OTk3NywgMS4wMDAyNiwgMC45OTk3NywgMS4wMDAyNiwgMS4wMDA2LCAxLjAwMDYsIDEuMDAwNiwgMS4wMDA2LCAxLjAwMDYsIDEuMDAwNiwgMS4wMDA2LCAxLjAwMDYsIDEuMDAwNiwgMS4wMDA2LCAxLjAwMDQyLCAwLjk5OTczLCAwLjk5OTczLCAxLjAwMDYsIDAuOTk5NzcsIDAuOTk5NzMsIDAuOTk5NzMsIDEuMDAwMjYsIDEuMDAwNiwgMS4wMDAyNiwgMS4wMDA2LCAxLjAwMDI2LCAxLjAzODI4LCAxLjAwMDI2LCAwLjk5OTk5LCAxLjAwMDI2LCAxLjAwMDYsIDAuOTk5NzcsIDEuMDAwMjYsIDAuOTk5NzcsIDEuMDAwMjYsIDAuOTk5NzcsIDEuMDAwMjYsIDAuOTk5MywgMC45OTk4LCAxLjAwMDI2LCAxLjAwMDIyLCAxLjAwMDI2LCAxLjAwMDIyLCAxLjAwMDI2LCAxLjAwMDIyLCAxLjAwMDI2LCAxLCAxLjAwMDE2LCAwLjk5OTc3LCAwLjk5OTU5LCAwLjk5OTc3LCAwLjk5OTU5LCAwLjk5OTc3LCAwLjk5OTU5LCAxLjAwMDAxLCAwLjk5OTczLCAxLjAwMDAxLCAwLjk5OTczLCAxLjAwMDAxLCAwLjk5OTczLCAxLjAwMDAxLCAwLjk5OTczLCAxLjAwMDI2LCAwLjk5OTk4LCAxLjAwMDI2LCAwLjgxMjEsIDEuMDAwMjYsIDAuOTk5OTgsIDAuOTk5NzcsIDEuMDAwMjYsIDAuOTk5NzcsIDEuMDAwMjYsIDAuOTk5NzcsIDEuMDAwMjYsIDAuOTk5NzcsIDEuMDAwMjYsIDAuOTk5NzcsIDEuMDAwMjYsIDAuOTk5NzcsIDEuMDAwMjYsIDEuMDAwMTYsIDEuMDAwMjIsIDEuMDAwMDEsIDAuOTk5NzMsIDEuMDAwMDEsIDEuMDAwMjYsIDEsIDEuMDAwMjYsIDEsIDEuMDAwMjYsIDEsIDEuMDAwNiwgMC45OTk3MywgMC45OTk3NywgMC45OTk3MywgMSwgMC45OTk4MiwgMS4wMDAyMiwgMS4wMDAyNiwgMS4wMDAwMSwgMC45OTk3MywgMS4wMDAyNiwgMC45OTk5OCwgMC45OTk5OCwgMC45OTk5OCwgMC45OTk5OCwgMC45OTk5OCwgMC45OTk5OCwgMC45OTk5OCwgMC45OTk5OCwgMC45OTk5OCwgMC45OTk5OCwgMC45OTk5OCwgMS4wMDAzNCwgMC45OTk3NywgMSwgMC45OTk5NywgMS4wMDAyNiwgMS4wMDA3OCwgMS4wMDAzNiwgMC45OTk3MywgMS4wMDAxMywgMS4wMDA2LCAwLjk5OTc3LCAwLjk5OTc3LCAwLjk5OTg4LCAwLjg1MTQ4LCAxLjAwMDAxLCAxLjAwMDI2LCAwLjk5OTc3LCAxLjAwMDIyLCAxLjAwMDYsIDAuOTk5NzcsIDEuMDAwMDEsIDAuOTk5OTksIDAuOTk5NzcsIDEuMDAwNjksIDEuMDAwMjIsIDAuOTk5NzcsIDEuMDAwMDEsIDAuOTk5ODQsIDEuMDAwMjYsIDEuMDAwMDEsIDEuMDAwMjQsIDEuMDAwMDEsIDAuOTk5OSwgMSwgMS4wMDA2LCAxLjAwMDAxLCAxLjAwMDQxLCAwLjk5OTYyLCAxLjAwMDI2LCAxLjAwMDYsIDAuOTk5OTUsIDEuMDAwNDEsIDAuOTk5NDIsIDAuOTk5NzMsIDAuOTk5MjcsIDEuMDAwODIsIDAuOTk5MDIsIDEuMDAwMjYsIDEuMDAwODcsIDEuMDAwNiwgMS4wMDA2OSwgMC45OTk3MywgMC45OTg2NywgMC45OTk3MywgMC45OTkzLCAxLjAwMDI2LCAxLjAwMDQ5LCAxLjAwMDU2LCAxLCAwLjk5OTg4LCAwLjk5OTM1LCAwLjk5OTk1LCAwLjk5OTU0LCAxLjAwMDU1LCAwLjk5OTQ1LCAxLjAwMDMyLCAxLjAwMDYsIDAuOTk5OTUsIDEuMDAwMjYsIDAuOTk5OTUsIDEuMDAwMzIsIDEuMDAwMDEsIDEuMDAwMDgsIDAuOTk5NzEsIDEuMDAwMTksIDAuOTk5NCwgMS4wMDAwMSwgMS4wMDA2LCAxLjAwMDQ0LCAwLjk5OTczLCAxLjAwMDIzLCAxLjAwMDQ3LCAxLCAwLjk5OTQyLCAwLjk5NTYxLCAwLjk5OTg5LCAxLjAwMDM1LCAwLjk5OTc3LCAxLjAwMDM1LCAwLjk5OTc3LCAxLjAwMDE5LCAwLjk5OTQ0LCAxLjAwMDAxLCAxLjAwMDIxLCAwLjk5OTI2LCAxLjAwMDM1LCAxLjAwMDM1LCAwLjk5OTQyLCAxLjAwMDQ4LCAwLjk5OTk5LCAwLjk5OTc3LCAxLjAwMDIyLCAxLjAwMDM1LCAxLjAwMDAxLCAwLjk5OTc3LCAxLjAwMDI2LCAwLjk5OTg5LCAxLjAwMDU3LCAxLjAwMDAxLCAwLjk5OTM2LCAxLjAwMDUyLCAxLjAwMDEyLCAwLjk5OTk2LCAxLjAwMDQzLCAxLCAxLjAwMDM1LCAwLjk5OTQsIDAuOTk5NzYsIDEuMDAwMzUsIDAuOTk5NzMsIDEuMDAwNTIsIDEuMDAwNDEsIDEuMDAxMTksIDEuMDAwMzcsIDAuOTk5NzMsIDEuMDAwMDIsIDAuOTk5ODYsIDEuMDAwNDEsIDEuMDAwNDEsIDAuOTk5MDIsIDAuOTk5NiwgMS4wMDAzNCwgMC45OTk5OSwgMS4wMDAyNiwgMC45OTk5OSwgMS4wMDAyNiwgMC45OTk3MywgMS4wMDA1MiwgMC45OTk3MywgMSwgMC45OTk3MywgMS4wMDA0MSwgMS4wMDA3NSwgMC45OTk0LCAxLjAwMDMsIDAuOTk5OTksIDEsIDEuMDAwNDEsIDAuOTk5NTUsIDEsIDAuOTk5MTUsIDAuOTk5NzMsIDAuOTk5NzMsIDEuMDAwMjYsIDEuMDAxMTksIDAuOTk5NTUsIDAuOTk5NzMsIDEuMDAwNiwgMC45OTkxMSwgMS4wMDA2LCAxLjAwMDI2LCAwLjk5OTcyLCAxLjAwMDI2LCAwLjk5OTAyLCAxLjAwMDQxLCAwLjk5OTczLCAwLjk5OTk5LCAxLCAxLCAxLjAwMDM4LCAxLjAwMDUsIDEuMDAwMTYsIDEuMDAwMjIsIDEuMDAwMTYsIDEuMDAwMjIsIDEuMDAwMTYsIDEuMDAwMjIsIDEuMDAwMDEsIDAuOTk5NzMsIDEsIDEsIDAuOTk5NzMsIDEsIDEsIDAuOTk5NTUsIDEuMDAwNiwgMS4wMDA2LCAxLjAwMDYsIDEuMDAwNiwgMSwgMSwgMSwgMC45OTk3MywgMC45OTk3MywgMC45OTk3MiwgMSwgMSwgMS4wMDEwNiwgMC45OTk5OSwgMC45OTk5OCwgMC45OTk5OCwgMC45OTk5OSwgMC45OTk5OCwgMS42NjQ3NSwgMSwgMC45OTk3MywgMC45OTk3MywgMS4wMDAyMywgMC45OTk3MywgMC45OTk3MSwgMS4wMDA0NywgMS4wMDAyMywgMSwgMC45OTk5MSwgMC45OTk4NCwgMS4wMDAwMiwgMS4wMDAwMiwgMS4wMDAwMiwgMS4wMDAwMiwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMC45OTk3MiwgMSwgMS4yMDk4NSwgMS4zOTcxMywgMS4wMDAwMywgMS4wMDAzMSwgMS4wMDAxNSwgMSwgMC45OTU2MSwgMS4wMDAyNywgMS4wMDAzMSwgMS4wMDAzMSwgMC45OTkxNSwgMS4wMDAzMSwgMS4wMDAzMSwgMC45OTk5OSwgMS4wMDAwMywgMC45OTk5OSwgMC45OTk5OSwgMS40MTE0NCwgMS42LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQwNTc5LCAxLjQwNTc5LCAxLjM2NjI1LCAwLjk5OTk5LCAxLCAwLjk5ODYxLCAwLjk5ODYxLCAxLCAxLjAwMDI2LCAxLjAwMDI2LCAxLjAwMDI2LCAxLjAwMDI2LCAwLjk5OTcyLCAwLjk5OTk5LCAwLjk5OTk5LCAwLjk5OTk5LCAwLjk5OTk5LCAxLjQwNDgzLCAxLCAwLjk5OTc3LCAxLjAwMDU0LCAxLCAxLCAwLjk5OTUzLCAwLjk5OTYyLCAxLjAwMDQyLCAwLjk5OTUsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDAuOTk5OTgsIDAuOTk5OTgsIDAuOTk5OTgsIDAuOTk5OTgsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDFdOwpjb25zdCBIZWx2ZXRpY2FCb2xkTWV0cmljcyA9IHsKICBsaW5lSGVpZ2h0OiAxLjIsCiAgbGluZUdhcDogMC4yCn07CmNvbnN0IEhlbHZldGljYUJvbGRJdGFsaWNGYWN0b3JzID0gWzAuNzYxMTYsIDEsIDEsIDEuMDAwNiwgMC45OTk5OCwgMC45OTk3NCwgMC45OTk3MywgMC45OTk3MywgMC45OTk4MiwgMC45OTk3NywgMS4wMDA4NywgMC45OTk5OCwgMC45OTk5OCwgMC45OTk1OSwgMS4wMDAwMywgMS4wMDA2LCAwLjk5OTk4LCAxLjAwMDYsIDEuMDAwNiwgMC45OTk3MywgMC45OTk3MywgMC45OTk3MywgMC45OTk3MywgMC45OTk3MywgMC45OTk3MywgMC45OTk3MywgMC45OTk3MywgMC45OTk3MywgMC45OTk3MywgMC45OTk5OCwgMSwgMS4wMDAwMywgMS4wMDAwMywgMS4wMDAwMywgMS4wMDAyNiwgMC45OTk5LCAwLjk5OTc3LCAwLjk5OTc3LCAwLjk5OTc3LCAwLjk5OTc3LCAxLjAwMDAxLCAxLjAwMDI2LCAxLjAwMDIyLCAwLjk5OTc3LCAxLjAwMDYsIDAuOTk5NzMsIDAuOTk5NzcsIDEuMDAwMjYsIDAuOTk5OTksIDAuOTk5NzcsIDEuMDAwMjIsIDEuMDAwMDEsIDEuMDAwMjIsIDAuOTk5NzcsIDEuMDAwMDEsIDEuMDAwMjYsIDAuOTk5NzcsIDEuMDAwMDEsIDEuMDAwMTYsIDEuMDAwMDEsIDEuMDAwMDEsIDEuMDAwMjYsIDAuOTk5OTgsIDEuMDAwNiwgMC45OTk5OCwgMS4wMDAwMywgMC45OTk3MywgMC45OTk5OCwgMC45OTk3MywgMS4wMDAyNiwgMC45OTk3MywgMS4wMDAyNiwgMC45OTk3MywgMC45OTk5OCwgMS4wMDAyNiwgMS4wMDAyNiwgMS4wMDA2LCAxLjAwMDYsIDAuOTk5NzMsIDEuMDAwNiwgMC45OTk4MiwgMS4wMDAyNiwgMS4wMDAyNiwgMS4wMDAyNiwgMS4wMDAyNiwgMC45OTk1OSwgMC45OTk3MywgMC45OTk5OCwgMS4wMDAyNiwgMC45OTk3MywgMS4wMDAyMiwgMC45OTk3MywgMC45OTk3MywgMSwgMC45OTk1OSwgMS4wMDA3NywgMC45OTk1OSwgMS4wMDAwMywgMC45OTk5OCwgMC45OTk3MywgMC45OTk3MywgMC45OTk3MywgMC45OTk3MywgMS4wMDA3NywgMC45OTk3MywgMC45OTk5OCwgMS4wMDAyNSwgMC45OTk2OCwgMC45OTk3MywgMS4wMDAwMywgMS4wMDAyNSwgMC42MDI5OSwgMS4wMDAyNCwgMS4wNjQwOSwgMSwgMSwgMC45OTk5OCwgMSwgMC45OTk3MywgMS4wMDA2LCAwLjk5OTk4LCAxLCAwLjk5OTM2LCAwLjk5OTczLCAxLjAwMDAyLCAxLjAwMDAyLCAxLjAwMDAyLCAxLjAwMDI2LCAwLjk5OTc3LCAwLjk5OTc3LCAwLjk5OTc3LCAwLjk5OTc3LCAwLjk5OTc3LCAwLjk5OTc3LCAxLCAwLjk5OTc3LCAxLjAwMDAxLCAxLjAwMDAxLCAxLjAwMDAxLCAxLjAwMDAxLCAxLjAwMDYsIDEuMDAwNiwgMS4wMDA2LCAxLjAwMDYsIDAuOTk5NzcsIDAuOTk5NzcsIDEuMDAwMjIsIDEuMDAwMjIsIDEuMDAwMjIsIDEuMDAwMjIsIDEuMDAwMjIsIDEuMDAwMDMsIDEuMDAwMjIsIDAuOTk5NzcsIDAuOTk5NzcsIDAuOTk5NzcsIDAuOTk5NzcsIDEuMDAwMDEsIDEuMDAwMDEsIDEuMDAwMjYsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5ODIsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5NzMsIDEuMDAwNiwgMS4wMDA2LCAxLjAwMDYsIDEuMDAwNiwgMS4wMDAyNiwgMS4wMDAyNiwgMS4wMDAyNiwgMS4wMDAyNiwgMS4wMDAyNiwgMS4wMDAyNiwgMS4wMDAyNiwgMS4wNjQwOSwgMS4wMDAyNiwgMS4wMDAyNiwgMS4wMDAyNiwgMS4wMDAyNiwgMS4wMDAyNiwgMC45OTk3MywgMS4wMDAyNiwgMC45OTk3MywgMC45OTk3NywgMC45OTk3MywgMC45OTk3NywgMC45OTk3MywgMC45OTk3NywgMC45OTk3MywgMC45OTk3NywgMC45OTk3MywgMC45OTk3NywgMC45OTk3MywgMC45OTk3NywgMC45OTk3MywgMC45OTk3NywgMC45OTk3MywgMC45OTk3NywgMS4wMDQ0LCAwLjk5OTc3LCAxLjAwMDI2LCAxLjAwMDAxLCAwLjk5OTczLCAxLjAwMDAxLCAwLjk5OTczLCAxLjAwMDAxLCAwLjk5OTczLCAxLjAwMDAxLCAwLjk5OTczLCAxLjAwMDAxLCAwLjk5OTczLCAxLjAwMDIyLCAxLjAwMDI2LCAxLjAwMDIyLCAxLjAwMDI2LCAxLjAwMDIyLCAxLjAwMDI2LCAxLjAwMDIyLCAxLjAwMDI2LCAwLjk5OTc3LCAxLjAwMDI2LCAwLjk5OTc3LCAxLjAwMDI2LCAxLjAwMDYsIDEuMDAwNiwgMS4wMDA2LCAxLjAwMDYsIDEuMDAwNiwgMS4wMDA2LCAxLjAwMDYsIDEuMDAwNiwgMS4wMDA2LCAxLjAwMDYsIDAuOTk5NzEsIDAuOTk5NzMsIDAuOTk5NzMsIDEuMDAwNiwgMC45OTk3NywgMC45OTk3MywgMC45OTk3MywgMS4wMDAyNiwgMS4wMDA2LCAxLjAwMDI2LCAxLjAwMDYsIDEuMDAwMjYsIDEuMDEwMTEsIDEuMDAwMjYsIDAuOTk5OTksIDEuMDAwMjYsIDEuMDAwNiwgMC45OTk3NywgMS4wMDAyNiwgMC45OTk3NywgMS4wMDAyNiwgMC45OTk3NywgMS4wMDAyNiwgMC45OTkzLCAwLjk5OTgsIDEuMDAwMjYsIDEuMDAwMjIsIDEuMDAwMjYsIDEuMDAwMjIsIDEuMDAwMjYsIDEuMDAwMjIsIDEuMDAwMjYsIDEsIDEuMDAwMTYsIDAuOTk5NzcsIDAuOTk5NTksIDAuOTk5NzcsIDAuOTk5NTksIDAuOTk5NzcsIDAuOTk5NTksIDEuMDAwMDEsIDAuOTk5NzMsIDEuMDAwMDEsIDAuOTk5NzMsIDEuMDAwMDEsIDAuOTk5NzMsIDEuMDAwMDEsIDAuOTk5NzMsIDEuMDAwMjYsIDAuOTk5OTgsIDEuMDAwMjYsIDAuODEyMSwgMS4wMDAyNiwgMC45OTk5OCwgMC45OTk3NywgMS4wMDAyNiwgMC45OTk3NywgMS4wMDAyNiwgMC45OTk3NywgMS4wMDAyNiwgMC45OTk3NywgMS4wMDAyNiwgMC45OTk3NywgMS4wMDAyNiwgMC45OTk3NywgMS4wMDAyNiwgMS4wMDAxNiwgMS4wMDAyMiwgMS4wMDAwMSwgMC45OTk3MywgMS4wMDAwMSwgMS4wMDAyNiwgMSwgMS4wMDAyNiwgMSwgMS4wMDAyNiwgMSwgMS4wMDA2LCAwLjk5OTczLCAwLjk5OTc3LCAwLjk5OTczLCAxLCAwLjk5OTgyLCAxLjAwMDIyLCAxLjAwMDI2LCAxLjAwMDAxLCAwLjk5OTczLCAxLjAwMDI2LCAwLjk5OTk4LCAwLjk5OTk4LCAwLjk5OTk4LCAwLjk5OTk4LCAwLjk5OTk4LCAwLjk5OTk4LCAwLjk5OTk4LCAwLjk5OTk4LCAwLjk5OTk4LCAwLjk5OTk4LCAwLjk5OTk4LCAwLjk5OTk4LCAwLjk5OTc3LCAxLCAxLCAxLjAwMDI2LCAwLjk5OTY5LCAwLjk5OTcyLCAwLjk5OTgxLCAwLjk5OTgsIDEuMDAwNiwgMC45OTk3NywgMC45OTk3NywgMS4wMDAyMiwgMC45MTE1NSwgMS4wMDAwMSwgMS4wMDAyNiwgMC45OTk3NywgMS4wMDAyMiwgMS4wMDA2LCAwLjk5OTc3LCAxLjAwMDAxLCAwLjk5OTk5LCAwLjk5OTc3LCAwLjk5OTY2LCAxLjAwMDIyLCAxLjAwMDMyLCAxLjAwMDAxLCAwLjk5OTQ0LCAxLjAwMDI2LCAxLjAwMDAxLCAwLjk5OTY4LCAxLjAwMDAxLCAxLjAwMDQ3LCAxLCAxLjAwMDYsIDEuMDAwMDEsIDAuOTk5ODEsIDEuMDAxMDEsIDEuMDAwMjYsIDEuMDAwNiwgMC45OTk0OCwgMC45OTk4MSwgMS4wMDA2NCwgMC45OTk3MywgMC45OTk0MiwgMS4wMDEwMSwgMS4wMDA2MSwgMS4wMDAyNiwgMS4wMDA2OSwgMS4wMDA2LCAxLjAwMDE0LCAwLjk5OTczLCAxLjAxMzIyLCAwLjk5OTczLCAxLjAwMDY1LCAxLjAwMDI2LCAxLjAwMDEyLCAwLjk5OTIzLCAxLCAxLjAwMDY0LCAxLjAwMDc2LCAwLjk5OTQ4LCAxLjAwMDU1LCAxLjAwMDYzLCAxLjAwMDA3LCAwLjk5OTQzLCAxLjAwMDYsIDAuOTk5NDgsIDEuMDAwMjYsIDAuOTk5NDgsIDAuOTk5NDMsIDEuMDAwMDEsIDEuMDAwMDEsIDEuMDAwMjksIDEuMDAwMzgsIDEuMDAwMzUsIDEuMDAwMDEsIDEuMDAwNiwgMS4wMDA2LCAwLjk5OTczLCAwLjk5OTc4LCAxLjAwMDAxLCAxLjAwMDU3LCAwLjk5OTg5LCAwLjk5OTY3LCAwLjk5OTY0LCAwLjk5OTY3LCAwLjk5OTc3LCAwLjk5OTk5LCAwLjk5OTc3LCAxLjAwMDM4LCAwLjk5OTc3LCAxLjAwMDAxLCAwLjk5OTczLCAxLjAwMDY2LCAwLjk5OTY3LCAwLjk5OTY3LCAxLjAwMDQxLCAwLjk5OTk4LCAwLjk5OTk5LCAwLjk5OTc3LCAxLjAwMDIyLCAwLjk5OTY3LCAxLjAwMDAxLCAwLjk5OTc3LCAxLjAwMDI2LCAwLjk5OTY0LCAxLjAwMDMxLCAxLjAwMDAxLCAwLjk5OTk5LCAwLjk5OTk5LCAxLCAxLjAwMDIzLCAxLCAxLCAwLjk5OTk5LCAxLjAwMDM1LCAxLjAwMDAxLCAwLjk5OTk5LCAwLjk5OTczLCAwLjk5OTc3LCAwLjk5OTk5LCAxLjAwMDU4LCAwLjk5OTczLCAwLjk5OTczLCAwLjk5OTU1LCAwLjk5OTUsIDEuMDAwMjYsIDEuMDAwMjYsIDEuMDAwMzIsIDAuOTk5ODksIDEuMDAwMzQsIDAuOTk5OTksIDEuMDAwMjYsIDEuMDAwMjYsIDEuMDAwMjYsIDAuOTk5NzMsIDAuNDU5OTgsIDAuOTk5NzMsIDEuMDAwMjYsIDAuOTk5NzMsIDEuMDAwMDEsIDAuOTk5OTksIDAuOTk5ODIsIDAuOTk5OTQsIDAuOTk5OTYsIDEsIDEuMDAwNDIsIDEuMDAwNDQsIDEuMDAwMjksIDEuMDAwMjMsIDAuOTk5NzMsIDAuOTk5NzMsIDEuMDAwMjYsIDAuOTk5NDksIDEuMDAwMDIsIDAuOTk5NzMsIDEuMDAwNiwgMS4wMDA2LCAxLjAwMDYsIDAuOTk5NzUsIDEuMDAwMjYsIDEuMDAwMjYsIDEuMDAwMzIsIDAuOTg2ODUsIDAuOTk5NzMsIDEuMDAwMjYsIDEsIDEsIDAuOTk5NjYsIDEuMDAwNDQsIDEuMDAwMTYsIDEuMDAwMjIsIDEuMDAwMTYsIDEuMDAwMjIsIDEuMDAwMTYsIDEuMDAwMjIsIDEuMDAwMDEsIDAuOTk5NzMsIDEsIDEsIDAuOTk5NzMsIDEsIDEsIDAuOTk5NTUsIDEuMDAwNiwgMS4wMDA2LCAxLjAwMDYsIDEuMDAwNiwgMSwgMSwgMSwgMC45OTk3MywgMC45OTk3MywgMC45OTk3MiwgMSwgMSwgMS4wMDEwNiwgMC45OTk5OSwgMC45OTk5OCwgMC45OTk5OCwgMC45OTk5OSwgMC45OTk5OCwgMS42NjQ3NSwgMSwgMC45OTk3MywgMC45OTk3MywgMSwgMC45OTk3MywgMC45OTk3MSwgMC45OTk3OCwgMSwgMSwgMC45OTk5MSwgMC45OTk4NCwgMS4wMDAwMiwgMS4wMDAwMiwgMS4wMDAwMiwgMS4wMDAwMiwgMS4wMDA5OCwgMSwgMSwgMSwgMS4wMDA0OSwgMSwgMSwgMC45OTk3MiwgMSwgMS4yMDk4NSwgMS4zOTcxMywgMS4wMDAwMywgMS4wMDAzMSwgMS4wMDAxNSwgMSwgMC45OTU2MSwgMS4wMDAyNywgMS4wMDAzMSwgMS4wMDAzMSwgMC45OTkxNSwgMS4wMDAzMSwgMS4wMDAzMSwgMC45OTk5OSwgMS4wMDAwMywgMC45OTk5OSwgMC45OTk5OSwgMS40MTE0NCwgMS42LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQxMTQ0LCAxLjQwNTc5LCAxLjQwNTc5LCAxLjM2NjI1LCAwLjk5OTk5LCAxLCAwLjk5ODYxLCAwLjk5ODYxLCAxLCAxLjAwMDI2LCAxLjAwMDI2LCAxLjAwMDI2LCAxLjAwMDI2LCAwLjk5OTcyLCAwLjk5OTk5LCAwLjk5OTk5LCAwLjk5OTk5LCAwLjk5OTk5LCAxLjQwNDgzLCAxLCAwLjk5OTc3LCAxLjAwMDU0LCAxLCAxLCAwLjk5OTUzLCAwLjk5OTYyLCAxLjAwMDQyLCAwLjk5OTUsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDAuOTk5OTgsIDAuOTk5OTgsIDAuOTk5OTgsIDAuOTk5OTgsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDFdOwpjb25zdCBIZWx2ZXRpY2FCb2xkSXRhbGljTWV0cmljcyA9IHsKICBsaW5lSGVpZ2h0OiAxLjM1LAogIGxpbmVHYXA6IDAuMgp9Owpjb25zdCBIZWx2ZXRpY2FJdGFsaWNGYWN0b3JzID0gWzAuNzYxMTYsIDEsIDEsIDEuMDAwNiwgMS4wMDA2LCAxLjAwMDA2LCAwLjk5OTczLCAwLjk5OTczLCAwLjk5OTgyLCAxLjAwMDAxLCAxLjAwMDQzLCAwLjk5OTk4LCAwLjk5OTk4LCAwLjk5OTU5LCAxLjAwMDAzLCAxLjAwMDYsIDAuOTk5OTgsIDEuMDAwNiwgMS4wMDA2LCAwLjk5OTczLCAwLjk5OTczLCAwLjk5OTczLCAwLjk5OTczLCAwLjk5OTczLCAwLjk5OTczLCAwLjk5OTczLCAwLjk5OTczLCAwLjk5OTczLCAwLjk5OTczLCAxLjAwMDYsIDEsIDEuMDAwMDMsIDEuMDAwMDMsIDEuMDAwMDMsIDAuOTk5NzMsIDAuOTk5ODcsIDEuMDAwMDEsIDEuMDAwMDEsIDAuOTk5NzcsIDAuOTk5NzcsIDEuMDAwMDEsIDEuMDAwMjYsIDEuMDAwMjIsIDAuOTk5NzcsIDEuMDAwNiwgMSwgMS4wMDAwMSwgMC45OTk3MywgMC45OTk5OSwgMC45OTk3NywgMS4wMDAyMiwgMS4wMDAwMSwgMS4wMDAyMiwgMC45OTk3NywgMS4wMDAwMSwgMS4wMDAyNiwgMC45OTk3NywgMS4wMDAwMSwgMS4wMDAxNiwgMS4wMDAwMSwgMS4wMDAwMSwgMS4wMDAyNiwgMS4wMDA2LCAxLjAwMDYsIDEuMDAwNiwgMC45OTk0OSwgMC45OTk3MywgMC45OTk5OCwgMC45OTk3MywgMC45OTk3MywgMSwgMC45OTk3MywgMC45OTk3MywgMS4wMDA2LCAwLjk5OTczLCAwLjk5OTczLCAwLjk5OTI0LCAwLjk5OTI0LCAxLCAwLjk5OTI0LCAwLjk5OTk5LCAwLjk5OTczLCAwLjk5OTczLCAwLjk5OTczLCAwLjk5OTczLCAwLjk5OTk4LCAxLCAxLjAwMDYsIDAuOTk5NzMsIDEsIDAuOTk5NzcsIDEsIDEsIDEsIDEuMDAwMDUsIDEuMDAwOSwgMS4wMDAwNSwgMS4wMDAwMywgMC45OTk5OCwgMC45OTk3MywgMC45OTk3MywgMC45OTk3MywgMC45OTk3MywgMS4wMDA5LCAwLjk5OTczLCAwLjk5OTk4LCAxLjAwMDI1LCAwLjk5OTY4LCAwLjk5OTczLCAxLjAwMDAzLCAxLjAwMDI1LCAwLjYwMjk5LCAxLjAwMDI0LCAxLjA2NDA5LCAxLCAxLCAwLjk5OTk4LCAxLCAwLjk5OTgsIDEuMDAwNiwgMC45OTk5OCwgMSwgMC45OTkzNiwgMC45OTk3MywgMS4wMDAwMiwgMS4wMDAwMiwgMS4wMDAwMiwgMS4wMDAyNiwgMS4wMDAwMSwgMS4wMDAwMSwgMS4wMDAwMSwgMS4wMDAwMSwgMS4wMDAwMSwgMS4wMDAwMSwgMSwgMC45OTk3NywgMS4wMDAwMSwgMS4wMDAwMSwgMS4wMDAwMSwgMS4wMDAwMSwgMS4wMDA2LCAxLjAwMDYsIDEuMDAwNiwgMS4wMDA2LCAwLjk5OTc3LCAwLjk5OTc3LCAxLjAwMDIyLCAxLjAwMDIyLCAxLjAwMDIyLCAxLjAwMDIyLCAxLjAwMDIyLCAxLjAwMDAzLCAxLjAwMDIyLCAwLjk5OTc3LCAwLjk5OTc3LCAwLjk5OTc3LCAwLjk5OTc3LCAxLjAwMDAxLCAxLjAwMDAxLCAxLjAwMDI2LCAwLjk5OTczLCAwLjk5OTczLCAwLjk5OTczLCAwLjk5OTczLCAwLjk5OTczLCAwLjk5OTczLCAwLjk5OTgyLCAxLCAwLjk5OTczLCAwLjk5OTczLCAwLjk5OTczLCAwLjk5OTczLCAxLjAwMDYsIDEuMDAwNiwgMS4wMDA2LCAxLjAwMDYsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5NzMsIDEuMDY0MDksIDEuMDAwMjYsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5NzMsIDEsIDAuOTk5NzMsIDEsIDEuMDAwMDEsIDAuOTk5NzMsIDEuMDAwMDEsIDAuOTk5NzMsIDEuMDAwMDEsIDAuOTk5NzMsIDAuOTk5NzcsIDEsIDAuOTk5NzcsIDEsIDAuOTk5NzcsIDEsIDAuOTk5NzcsIDEsIDAuOTk5NzcsIDEuMDI4OCwgMC45OTk3NywgMC45OTk3MywgMS4wMDAwMSwgMC45OTk3MywgMS4wMDAwMSwgMC45OTk3MywgMS4wMDAwMSwgMC45OTk3MywgMS4wMDAwMSwgMC45OTk3MywgMS4wMDAwMSwgMC45OTk3MywgMS4wMDAyMiwgMC45OTk3MywgMS4wMDAyMiwgMC45OTk3MywgMS4wMDAyMiwgMC45OTk3MywgMS4wMDAyMiwgMC45OTk3MywgMC45OTk3NywgMC45OTk3MywgMC45OTk3NywgMC45OTk3MywgMS4wMDA2LCAxLjAwMDYsIDEuMDAwNiwgMS4wMDA2LCAxLjAwMDYsIDEuMDAwNiwgMS4wMDA2LCAwLjk5OTI0LCAxLjAwMDYsIDEuMDAwNiwgMC45OTk0NiwgMS4wMDAzNCwgMSwgMC45OTkyNCwgMS4wMDAwMSwgMSwgMSwgMC45OTk3MywgMC45OTkyNCwgMC45OTk3MywgMC45OTkyNCwgMC45OTk3MywgMS4wNjMxMSwgMC45OTk3MywgMS4wMDAyNCwgMC45OTk3MywgMC45OTkyNCwgMC45OTk3NywgMC45OTk3MywgMC45OTk3NywgMC45OTk3MywgMC45OTk3NywgMC45OTk3MywgMS4wMDA0MSwgMC45OTk4LCAwLjk5OTczLCAxLjAwMDIyLCAwLjk5OTczLCAxLjAwMDIyLCAwLjk5OTczLCAxLjAwMDIyLCAwLjk5OTczLCAxLCAxLjAwMDE2LCAwLjk5OTc3LCAwLjk5OTk4LCAwLjk5OTc3LCAwLjk5OTk4LCAwLjk5OTc3LCAwLjk5OTk4LCAxLjAwMDAxLCAxLCAxLjAwMDAxLCAxLCAxLjAwMDAxLCAxLCAxLjAwMDAxLCAxLCAxLjAwMDI2LCAxLjAwMDYsIDEuMDAwMjYsIDAuODk1NDcsIDEuMDAwMjYsIDEuMDAwNiwgMC45OTk3NywgMC45OTk3MywgMC45OTk3NywgMC45OTk3MywgMC45OTk3NywgMC45OTk3MywgMC45OTk3NywgMC45OTk3MywgMC45OTk3NywgMC45OTk3MywgMC45OTk3NywgMC45OTk3MywgMS4wMDAxNiwgMC45OTk3NywgMS4wMDAwMSwgMSwgMS4wMDAwMSwgMS4wMDAyNiwgMSwgMS4wMDAyNiwgMSwgMS4wMDAyNiwgMSwgMC45OTkyNCwgMC45OTk3MywgMS4wMDAwMSwgMC45OTk3MywgMSwgMC45OTk4MiwgMS4wMDAyMiwgMS4wMDAyNiwgMS4wMDAwMSwgMSwgMS4wMDAyNiwgMS4wMDA2LCAwLjk5OTk4LCAwLjk5OTk4LCAwLjk5OTk4LCAwLjk5OTk4LCAwLjk5OTk4LCAwLjk5OTk4LCAwLjk5OTk4LCAwLjk5OTk4LCAwLjk5OTk4LCAwLjk5OTk4LCAwLjk5OTk4LCAxLjAwMDAxLCAxLCAxLjAwMDU0LCAwLjk5OTc3LCAxLjAwMDg0LCAxLjAwMDA3LCAwLjk5OTczLCAxLjAwMDEzLCAwLjk5OTI0LCAxLjAwMDAxLCAxLjAwMDAxLCAwLjk5OTQ1LCAwLjkxMjIxLCAxLjAwMDAxLCAxLjAwMDI2LCAwLjk5OTc3LCAxLjAwMDIyLCAxLjAwMDYsIDEuMDAwMDEsIDEuMDAwMDEsIDAuOTk5OTksIDAuOTk5NzcsIDAuOTk5MzMsIDEuMDAwMjIsIDEuMDAwNTQsIDEuMDAwMDEsIDEuMDAwNjUsIDEuMDAwMjYsIDEuMDAwMDEsIDEuMDAwMSwgMS4wMDAwMSwgMS4wMDA1MiwgMSwgMS4wMDA2LCAxLjAwMDAxLCAwLjk5OTQ1LCAwLjk5ODk3LCAwLjk5OTY4LCAwLjk5OTI0LCAxLjAwMDM2LCAwLjk5OTQ1LCAwLjk5OTQ5LCAxLCAxLjAwMDYsIDAuOTk4OTcsIDAuOTk5MTgsIDAuOTk5NjgsIDAuOTk5MTEsIDAuOTk5MjQsIDEsIDAuOTk5NjIsIDEuMDE0ODcsIDEsIDEuMDAwNSwgMC45OTk3MywgMS4wMDAxMiwgMS4wMDA0MywgMSwgMC45OTk5NSwgMC45OTk5NCwgMS4wMDAzNiwgMC45OTk0NywgMS4wMDAxOSwgMS4wMDA2MywgMS4wMDAyNSwgMC45OTkyNCwgMS4wMDAzNiwgMC45OTk3MywgMS4wMDAzNiwgMS4wMDAyNSwgMS4wMDAwMSwgMS4wMDAwMSwgMS4wMDAyNywgMS4wMDAxLCAxLjAwMDY4LCAxLjAwMDAxLCAxLjAwMDYsIDEuMDAwNiwgMSwgMS4wMDAwOCwgMC45OTk1NywgMC45OTk3MiwgMC45OTk0LCAwLjk5OTU0LCAwLjk5OTc1LCAxLjAwMDUxLCAxLjAwMDAxLCAxLjAwMDE5LCAxLjAwMDAxLCAxLjAwMDEsIDAuOTk5ODYsIDEuMDAwMDEsIDEuMDAwMDEsIDEuMDAwMzgsIDAuOTk5NTQsIDAuOTk5NTQsIDAuOTk5NCwgMS4wMDA2NiwgMC45OTk5OSwgMC45OTk3NywgMS4wMDAyMiwgMS4wMDA1NCwgMS4wMDAwMSwgMC45OTk3NywgMS4wMDAyNiwgMC45OTk3NSwgMS4wMDAxLCAxLjAwMDAxLCAwLjk5OTkzLCAwLjk5OTUsIDAuOTk5NTUsIDEuMDAwMTYsIDAuOTk5NzgsIDAuOTk5NzQsIDEuMDAwMTksIDEuMDAwMjIsIDAuOTk5NTUsIDEuMDAwNTMsIDAuOTk5NzMsIDEuMDAwODksIDEuMDAwMDUsIDAuOTk5NjcsIDEuMDAwNDgsIDAuOTk5NzMsIDEuMDAwMDIsIDEuMDAwMzQsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5NjQsIDEuMDAwMDYsIDEuMDAwNjYsIDAuOTk5NDcsIDAuOTk5NzMsIDAuOTg4OTQsIDAuOTk5NzMsIDEsIDAuNDQ4OTgsIDEsIDAuOTk5NDYsIDEsIDEuMDAwMzksIDEuMDAwODIsIDAuOTk5OTEsIDAuOTk5OTEsIDAuOTk5ODUsIDEuMDAwMjIsIDEuMDAwMjMsIDEuMDAwNjEsIDEuMDAwMDYsIDAuOTk5NjYsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5NzMsIDEuMDAwMTksIDEuMDAwOCwgMSwgMC45OTkyNCwgMC45OTkyNCwgMC45OTkyNCwgMC45OTk4MywgMS4wMDA0NCwgMC45OTk3MywgMC45OTk2NCwgMC45ODMzMiwgMSwgMC45OTk3MywgMSwgMSwgMC45OTk2MiwgMC45OTg5NSwgMS4wMDAxNiwgMC45OTk3NywgMS4wMDAxNiwgMC45OTk3NywgMS4wMDAxNiwgMC45OTk3NywgMS4wMDAwMSwgMSwgMSwgMSwgMC45OTk3MywgMSwgMSwgMC45OTk1NSwgMC45OTkyNCwgMC45OTkyNCwgMC45OTkyNCwgMC45OTkyNCwgMC45OTk5OCwgMC45OTk5OCwgMC45OTk5OCwgMC45OTk3MywgMC45OTk3MywgMC45OTk3MiwgMSwgMSwgMS4wMDI2NywgMC45OTk5OSwgMC45OTk5OCwgMC45OTk5OCwgMSwgMC45OTk5OCwgMS42NjQ3NSwgMSwgMC45OTk3MywgMC45OTk3MywgMS4wMDAyMywgMC45OTk3MywgMS4wMDQyMywgMC45OTkyNSwgMC45OTk5OSwgMSwgMC45OTk5MSwgMC45OTk4NCwgMS4wMDAwMiwgMS4wMDAwMiwgMS4wMDAwMiwgMS4wMDAwMiwgMS4wMDA0OSwgMSwgMS4wMDI0NSwgMSwgMSwgMSwgMSwgMC45NjMyOSwgMSwgMS4yMDk4NSwgMS4zOTcxMywgMS4wMDAwMywgMC44MjU0LCAxLjAwMDE1LCAxLCAxLjAwMDM1LCAxLjAwMDI3LCAxLjAwMDMxLCAxLjAwMDMxLCAxLjAwMDAzLCAxLjAwMDMxLCAxLjAwMDMxLCAwLjk5OTk5LCAxLjAwMDAzLCAwLjk5OTk5LCAwLjk5OTk5LCAxLjQxMTQ0LCAxLjYsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDExNDQsIDEuNDA1NzksIDEuNDA1NzksIDEuMzY2MjUsIDAuOTk5OTksIDEsIDAuOTk4NjEsIDAuOTk4NjEsIDEsIDEuMDAwMjYsIDEuMDAwMjYsIDEuMDAwMjYsIDEuMDAwMjYsIDAuOTUzMTcsIDAuOTk5OTksIDAuOTk5OTksIDAuOTk5OTksIDAuOTk5OTksIDEuNDA0ODMsIDEsIDAuOTk5NzcsIDEuMDAwNTQsIDEsIDEsIDAuOTk5NTMsIDAuOTk5NjIsIDEuMDAwNDIsIDAuOTk5NSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMC45OTk5OCwgMC45OTk5OCwgMC45OTk5OCwgMC45OTk5OCwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMV07CmNvbnN0IEhlbHZldGljYUl0YWxpY01ldHJpY3MgPSB7CiAgbGluZUhlaWdodDogMS4zNSwKICBsaW5lR2FwOiAwLjIKfTsKY29uc3QgSGVsdmV0aWNhUmVndWxhckZhY3RvcnMgPSBbMC43NjExNiwgMSwgMSwgMS4wMDA2LCAxLjAwMDYsIDEuMDAwMDYsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5ODIsIDEuMDAwMDEsIDEuMDAwNDMsIDAuOTk5OTgsIDAuOTk5OTgsIDAuOTk5NTksIDEuMDAwMDMsIDEuMDAwNiwgMC45OTk5OCwgMS4wMDA2LCAxLjAwMDYsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5NzMsIDEuMDAwNiwgMSwgMS4wMDAwMywgMS4wMDAwMywgMS4wMDAwMywgMC45OTk3MywgMC45OTk4NywgMS4wMDAwMSwgMS4wMDAwMSwgMC45OTk3NywgMC45OTk3NywgMS4wMDAwMSwgMS4wMDAyNiwgMS4wMDAyMiwgMC45OTk3NywgMS4wMDA2LCAxLCAxLjAwMDAxLCAwLjk5OTczLCAwLjk5OTk5LCAwLjk5OTc3LCAxLjAwMDIyLCAxLjAwMDAxLCAxLjAwMDIyLCAwLjk5OTc3LCAxLjAwMDAxLCAxLjAwMDI2LCAwLjk5OTc3LCAxLjAwMDAxLCAxLjAwMDE2LCAxLjAwMDAxLCAxLjAwMDAxLCAxLjAwMDI2LCAxLjAwMDYsIDEuMDAwNiwgMS4wMDA2LCAwLjk5OTQ5LCAwLjk5OTczLCAwLjk5OTk4LCAwLjk5OTczLCAwLjk5OTczLCAxLCAwLjk5OTczLCAwLjk5OTczLCAxLjAwMDYsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5MjQsIDAuOTk5MjQsIDEsIDAuOTk5MjQsIDAuOTk5OTksIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5OTgsIDEsIDEuMDAwNiwgMC45OTk3MywgMSwgMC45OTk3NywgMSwgMSwgMSwgMS4wMDAwNSwgMS4wMDA5LCAxLjAwMDA1LCAxLjAwMDAzLCAwLjk5OTk4LCAwLjk5OTczLCAwLjk5OTczLCAwLjk5OTczLCAwLjk5OTczLCAxLjAwMDksIDAuOTk5NzMsIDAuOTk5OTgsIDEuMDAwMjUsIDAuOTk5NjgsIDAuOTk5NzMsIDEuMDAwMDMsIDEuMDAwMjUsIDAuNjAyOTksIDEuMDAwMjQsIDEuMDY0MDksIDEsIDEsIDAuOTk5OTgsIDEsIDAuOTk5OCwgMS4wMDA2LCAwLjk5OTk4LCAxLCAwLjk5OTM2LCAwLjk5OTczLCAxLjAwMDAyLCAxLjAwMDAyLCAxLjAwMDAyLCAxLjAwMDI2LCAxLjAwMDAxLCAxLjAwMDAxLCAxLjAwMDAxLCAxLjAwMDAxLCAxLjAwMDAxLCAxLjAwMDAxLCAxLCAwLjk5OTc3LCAxLjAwMDAxLCAxLjAwMDAxLCAxLjAwMDAxLCAxLjAwMDAxLCAxLjAwMDYsIDEuMDAwNiwgMS4wMDA2LCAxLjAwMDYsIDAuOTk5NzcsIDAuOTk5NzcsIDEuMDAwMjIsIDEuMDAwMjIsIDEuMDAwMjIsIDEuMDAwMjIsIDEuMDAwMjIsIDEuMDAwMDMsIDEuMDAwMjIsIDAuOTk5NzcsIDAuOTk5NzcsIDAuOTk5NzcsIDAuOTk5NzcsIDEuMDAwMDEsIDEuMDAwMDEsIDEuMDAwMjYsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5ODIsIDEsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5NzMsIDAuOTk5NzMsIDEuMDAwNiwgMS4wMDA2LCAxLjAwMDYsIDEuMDAwNiwgMC45OTk3MywgMC45OTk3MywgMC45OTk3MywgMC45OTk3MywgMC45OTk3MywgMC45OTk3MywgMC45OTk3MywgMS4wNjQwOSwgMS4wMDAyNiwgMC45OTk3MywgMC45OTk3MywgMC45OTk3MywgMC45OTk3MywgMSwgMC45OTk3MywgMSwgMS4wMDAwMSwgMC45OTk3MywgMS4wMDAwMSwgMC45OTk3MywgMS4wMDAwMSwgMC45OTk3MywgMC45OTk3NywgMSwgMC45OTk3NywgMSwgMC45OTk3NywgMSwgMC45OTk3NywgMSwgMC45OTk3NywgMS4wNDU5NiwgMC45OTk3NywgMC45OTk3MywgMS4wMDAwMSwgMC45OTk3MywgMS4wMDAwMSwgMC45OTk3MywgMS4wMDAwMSwgMC45OTk3MywgMS4wMDAwMSwgMC45OTk3MywgMS4wMDAwMSwgMC45OTk3MywgMS4wMDAyMiwgMC45OTk3MywgMS4wMDAyMiwgMC45OTk3MywgMS4wMDAyMiwgMC45OTk3MywgMS4wMDAyMiwgMC45OTk3MywgMC45OTk3NywgMC45OTk3MywgMC45OTk3NywgMC45OTk3MywgMS4wMDA2LCAxLjAwMDYsIDEuMDAwNiwgMS4wMDA2LCAxLjAwMDYsIDEuMDAwNiwgMS4wMDA2LCAwLjk5OTI0LCAxLjAwMDYsIDEuMDAwNiwgMS4wMDAxOSwgMS4wMDAzNCwgMSwgMC45OTkyNCwgMS4wMDAwMSwgMSwgMSwgMC45OTk3MywgMC45OTkyNCwgMC45OTk3MywgMC45OTkyNCwgMC45OTk3MywgMS4wMjU3MiwgMC45OTk3MywgMS4wMDAwNSwgMC45OTk3MywgMC45OTkyNCwgMC45OTk3NywgMC45OTk3MywgMC45OTk3NywgMC45OTk3MywgMC45OTk3NywgMC45OTk3MywgMC45OTk5OSwgMC45OTk4LCAwLjk5OTczLCAxLjAwMDIyLCAwLjk5OTczLCAxLjAwMDIyLCAwLjk5OTczLCAxLjAwMDIyLCAwLjk5OTczLCAxLCAxLjAwMDE2LCAwLjk5OTc3LCAwLjk5OTk4LCAwLjk5OTc3LCAwLjk5OTk4LCAwLjk5OTc3LCAwLjk5OTk4LCAxLjAwMDAxLCAxLCAxLjAwMDAxLCAxLCAxLjAwMDAxLCAxLCAxLjAwMDAxLCAxLCAxLjAwMDI2LCAxLjAwMDYsIDEuMDAwMjYsIDAuODQ1MzMsIDEuMDAwMjYsIDEuMDAwNiwgMC45OTk3NywgMC45OTk3MywgMC45OTk3NywgMC45OTk3MywgMC45OTk3NywgMC45OTk3MywgMC45OTk3NywgMC45OTk3MywgMC45OTk3NywgMC45OTk3MywgMC45OTk3NywgMC45OTk3MywgMS4wMDAxNiwgMC45OTk3NywgMS4wMDAwMSwgMSwgMS4wMDAwMSwgMS4wMDAyNiwgMSwgMS4wMDAyNiwgMSwgMS4wMDAyNiwgMSwgMC45OTkyNCwgMC45OTk3MywgMS4wMDAwMSwgMC45OTk3MywgMSwgMC45OTk4MiwgMS4wMDAyMiwgMS4wMDAyNiwgMS4wMDAwMSwgMSwgMS4wMDAyNiwgMS4wMDA2LCAwLjk5OTk4LCAwLjk5OTk4LCAwLjk5OTk4LCAwLjk5OTk4LCAwLjk5OTk4LCAwLjk5OTk4LCAwLjk5OTk4LCAwLjk5OTk4LCAwLjk5OTk4LCAwLjk5OTk4LCAwLjk5OTk4LCAwLjk5OTI4LCAxLCAwLjk5OTc3LCAxLjAwMDEzLCAxLjAwMDU1LCAwLjk5OTQ3LCAwLjk5OTQ1LCAwLjk5OTQxLCAwLjk5OTI0LCAxLjAwMDAxLCAxLjAwMDAxLCAxLjAwMDQsIDAuOTE2MjEsIDEuMDAwMDEsIDEuMDAwMjYsIDAuOTk5NzcsIDEuMDAwMjIsIDEuMDAwNiwgMS4wMDAwMSwgMS4wMDAwNSwgMC45OTk5OSwgMC45OTk3NywgMS4wMDAxNSwgMS4wMDAyMiwgMC45OTk3NywgMS4wMDAwMSwgMC45OTk3MywgMS4wMDAyNiwgMS4wMDAwMSwgMS4wMDAxOSwgMS4wMDAwMSwgMC45OTk0NiwgMSwgMS4wMDA2LCAxLjAwMDAxLCAwLjk5OTc4LCAxLjAwMDQ1LCAwLjk5OTczLCAwLjk5OTI0LCAxLjAwMDIzLCAwLjk5OTc4LCAwLjk5OTY2LCAxLCAxLjAwMDY1LCAxLjAwMDQ1LCAxLjAwMDE5LCAwLjk5OTczLCAwLjk5OTczLCAwLjk5OTI0LCAxLCAxLCAwLjk2NDk5LCAxLCAxLjAwMDU1LCAwLjk5OTczLCAxLjAwMDA4LCAxLjAwMDI3LCAxLCAwLjk5OTcsIDAuOTk5OTUsIDEuMDAwMjMsIDAuOTk5MzMsIDEuMDAwMTksIDEuMDAwMTUsIDEuMDAwMzEsIDAuOTk5MjQsIDEuMDAwMjMsIDAuOTk5NzMsIDEuMDAwMjMsIDEuMDAwMzEsIDEuMDAwMDEsIDAuOTk5MjgsIDEuMDAwMjksIDEuMDAwOTIsIDEuMDAwMzUsIDEuMDAwMDEsIDEuMDAwNiwgMS4wMDA2LCAxLCAwLjk5OTg4LCAwLjk5OTc1LCAxLCAxLjAwMDgyLCAwLjk5NTYxLCAwLjk5OTYsIDEuMDAwMzUsIDEuMDAwMDEsIDAuOTk5NjIsIDEuMDAwMDEsIDEuMDAwOTIsIDAuOTk5NjQsIDEuMDAwMDEsIDAuOTk5NjMsIDAuOTk5OTksIDEuMDAwMzUsIDEuMDAwMzUsIDEuMDAwODIsIDAuOTk5NjIsIDAuOTk5OTksIDAuOTk5NzcsIDEuMDAwMjIsIDEuMDAwMzUsIDEuMDAwMDEsIDAuOTk5NzcsIDEuMDAwMjYsIDAuOTk5NiwgMC45OTk2NywgMS4wMDAwMSwgMS4wMDAzNCwgMS4wMDA3NCwgMS4wMDA1NCwgMS4wMDA1MywgMS4wMDA2MywgMC45OTk3MSwgMC45OTk2MiwgMS4wMDAzNSwgMC45OTk3NSwgMC45OTk3NywgMC45OTk3MywgMS4wMDA0MywgMC45OTk1MywgMS4wMDA3LCAwLjk5OTE1LCAwLjk5OTczLCAxLjAwMDA4LCAwLjk5ODkyLCAxLjAwMDczLCAxLjAwMDczLCAxLjAwMTE0LCAwLjk5OTE1LCAxLjAwMDczLCAwLjk5OTU1LCAwLjk5OTczLCAxLjAwMDkyLCAwLjk5OTczLCAxLCAwLjk5OTk4LCAxLCAxLjAwMDMsIDEsIDEuMDAwNDMsIDEuMDAwMDEsIDAuOTk5NjksIDEuMDAwMywgMSwgMS4wMDAzNSwgMS4wMDAwMSwgMC45OTk1LCAxLCAxLjAwMDkyLCAwLjk5OTczLCAwLjk5OTczLCAwLjk5OTczLCAxLjAwMDcsIDAuOTk5NSwgMSwgMC45OTkyNCwgMS4wMDA2LCAwLjk5OTI0LCAwLjk5OTcyLCAxLjAwMDYyLCAwLjk5OTczLCAxLjAwMTE0LCAxLjAwMDczLCAxLCAwLjk5OTU1LCAxLCAxLCAxLjAwMDQ3LCAwLjk5OTY4LCAxLjAwMDE2LCAwLjk5OTc3LCAxLjAwMDE2LCAwLjk5OTc3LCAxLjAwMDE2LCAwLjk5OTc3LCAxLjAwMDAxLCAxLCAxLCAxLCAwLjk5OTczLCAxLCAxLCAwLjk5OTU1LCAwLjk5OTI0LCAwLjk5OTI0LCAwLjk5OTI0LCAwLjk5OTI0LCAwLjk5OTk4LCAwLjk5OTk4LCAwLjk5OTk4LCAwLjk5OTczLCAwLjk5OTczLCAwLjk5OTcyLCAxLCAxLCAxLjAwMjY3LCAwLjk5OTk5LCAwLjk5OTk4LCAwLjk5OTk4LCAxLCAwLjk5OTk4LCAxLjY2NDc1LCAxLCAwLjk5OTczLCAwLjk5OTczLCAxLjAwMDIzLCAwLjk5OTczLCAwLjk5OTcxLCAwLjk5OTI1LCAxLjAwMDIzLCAxLCAwLjk5OTkxLCAwLjk5OTg0LCAxLjAwMDAyLCAxLjAwMDAyLCAxLjAwMDAyLCAxLjAwMDAyLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAwLjk2MzI5LCAxLCAxLjIwOTg1LCAxLjM5NzEzLCAxLjAwMDAzLCAwLjgyNTQsIDEuMDAwMTUsIDEsIDEuMDAwMzUsIDEuMDAwMjcsIDEuMDAwMzEsIDEuMDAwMzEsIDAuOTk5MTUsIDEuMDAwMzEsIDEuMDAwMzEsIDAuOTk5OTksIDEuMDAwMDMsIDAuOTk5OTksIDAuOTk5OTksIDEuNDExNDQsIDEuNiwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MTE0NCwgMS40MDU3OSwgMS40MDU3OSwgMS4zNjYyNSwgMC45OTk5OSwgMSwgMC45OTg2MSwgMC45OTg2MSwgMSwgMS4wMDAyNiwgMS4wMDAyNiwgMS4wMDAyNiwgMS4wMDAyNiwgMC45NTMxNywgMC45OTk5OSwgMC45OTk5OSwgMC45OTk5OSwgMC45OTk5OSwgMS40MDQ4MywgMSwgMC45OTk3NywgMS4wMDA1NCwgMSwgMSwgMC45OTk1MywgMC45OTk2MiwgMS4wMDA0MiwgMC45OTk1LCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxXTsKY29uc3QgSGVsdmV0aWNhUmVndWxhck1ldHJpY3MgPSB7CiAgbGluZUhlaWdodDogMS4yLAogIGxpbmVHYXA6IDAuMgp9OwoKOy8vIC4vc3JjL2NvcmUvbGliZXJhdGlvbnNhbnNfd2lkdGhzLmpzCmNvbnN0IExpYmVyYXRpb25TYW5zQm9sZFdpZHRocyA9IFszNjUsIDAsIDMzMywgMjc4LCAzMzMsIDQ3NCwgNTU2LCA1NTYsIDg4OSwgNzIyLCAyMzgsIDMzMywgMzMzLCAzODksIDU4NCwgMjc4LCAzMzMsIDI3OCwgMjc4LCA1NTYsIDU1NiwgNTU2LCA1NTYsIDU1NiwgNTU2LCA1NTYsIDU1NiwgNTU2LCA1NTYsIDMzMywgMzMzLCA1ODQsIDU4NCwgNTg0LCA2MTEsIDk3NSwgNzIyLCA3MjIsIDcyMiwgNzIyLCA2NjcsIDYxMSwgNzc4LCA3MjIsIDI3OCwgNTU2LCA3MjIsIDYxMSwgODMzLCA3MjIsIDc3OCwgNjY3LCA3NzgsIDcyMiwgNjY3LCA2MTEsIDcyMiwgNjY3LCA5NDQsIDY2NywgNjY3LCA2MTEsIDMzMywgMjc4LCAzMzMsIDU4NCwgNTU2LCAzMzMsIDU1NiwgNjExLCA1NTYsIDYxMSwgNTU2LCAzMzMsIDYxMSwgNjExLCAyNzgsIDI3OCwgNTU2LCAyNzgsIDg4OSwgNjExLCA2MTEsIDYxMSwgNjExLCAzODksIDU1NiwgMzMzLCA2MTEsIDU1NiwgNzc4LCA1NTYsIDU1NiwgNTAwLCAzODksIDI4MCwgMzg5LCA1ODQsIDMzMywgNTU2LCA1NTYsIDU1NiwgNTU2LCAyODAsIDU1NiwgMzMzLCA3MzcsIDM3MCwgNTU2LCA1ODQsIDczNywgNTUyLCA0MDAsIDU0OSwgMzMzLCAzMzMsIDMzMywgNTc2LCA1NTYsIDI3OCwgMzMzLCAzMzMsIDM2NSwgNTU2LCA4MzQsIDgzNCwgODM0LCA2MTEsIDcyMiwgNzIyLCA3MjIsIDcyMiwgNzIyLCA3MjIsIDEwMDAsIDcyMiwgNjY3LCA2NjcsIDY2NywgNjY3LCAyNzgsIDI3OCwgMjc4LCAyNzgsIDcyMiwgNzIyLCA3NzgsIDc3OCwgNzc4LCA3NzgsIDc3OCwgNTg0LCA3NzgsIDcyMiwgNzIyLCA3MjIsIDcyMiwgNjY3LCA2NjcsIDYxMSwgNTU2LCA1NTYsIDU1NiwgNTU2LCA1NTYsIDU1NiwgODg5LCA1NTYsIDU1NiwgNTU2LCA1NTYsIDU1NiwgMjc4LCAyNzgsIDI3OCwgMjc4LCA2MTEsIDYxMSwgNjExLCA2MTEsIDYxMSwgNjExLCA2MTEsIDU0OSwgNjExLCA2MTEsIDYxMSwgNjExLCA2MTEsIDU1NiwgNjExLCA1NTYsIDcyMiwgNTU2LCA3MjIsIDU1NiwgNzIyLCA1NTYsIDcyMiwgNTU2LCA3MjIsIDU1NiwgNzIyLCA1NTYsIDcyMiwgNTU2LCA3MjIsIDcxOSwgNzIyLCA2MTEsIDY2NywgNTU2LCA2NjcsIDU1NiwgNjY3LCA1NTYsIDY2NywgNTU2LCA2NjcsIDU1NiwgNzc4LCA2MTEsIDc3OCwgNjExLCA3NzgsIDYxMSwgNzc4LCA2MTEsIDcyMiwgNjExLCA3MjIsIDYxMSwgMjc4LCAyNzgsIDI3OCwgMjc4LCAyNzgsIDI3OCwgMjc4LCAyNzgsIDI3OCwgMjc4LCA3ODUsIDU1NiwgNTU2LCAyNzgsIDcyMiwgNTU2LCA1NTYsIDYxMSwgMjc4LCA2MTEsIDI3OCwgNjExLCAzODUsIDYxMSwgNDc5LCA2MTEsIDI3OCwgNzIyLCA2MTEsIDcyMiwgNjExLCA3MjIsIDYxMSwgNzA4LCA3MjMsIDYxMSwgNzc4LCA2MTEsIDc3OCwgNjExLCA3NzgsIDYxMSwgMTAwMCwgOTQ0LCA3MjIsIDM4OSwgNzIyLCAzODksIDcyMiwgMzg5LCA2NjcsIDU1NiwgNjY3LCA1NTYsIDY2NywgNTU2LCA2NjcsIDU1NiwgNjExLCAzMzMsIDYxMSwgNDc5LCA2MTEsIDMzMywgNzIyLCA2MTEsIDcyMiwgNjExLCA3MjIsIDYxMSwgNzIyLCA2MTEsIDcyMiwgNjExLCA3MjIsIDYxMSwgOTQ0LCA3NzgsIDY2NywgNTU2LCA2NjcsIDYxMSwgNTAwLCA2MTEsIDUwMCwgNjExLCA1MDAsIDI3OCwgNTU2LCA3MjIsIDU1NiwgMTAwMCwgODg5LCA3NzgsIDYxMSwgNjY3LCA1NTYsIDYxMSwgMzMzLCAzMzMsIDMzMywgMzMzLCAzMzMsIDMzMywgMzMzLCAzMzMsIDMzMywgMzMzLCAzMzMsIDQ2NSwgNzIyLCAzMzMsIDg1MywgOTA2LCA0NzQsIDgyNSwgOTI3LCA4MzgsIDI3OCwgNzIyLCA3MjIsIDYwMSwgNzE5LCA2NjcsIDYxMSwgNzIyLCA3NzgsIDI3OCwgNzIyLCA2NjcsIDgzMywgNzIyLCA2NDQsIDc3OCwgNzIyLCA2NjcsIDYwMCwgNjExLCA2NjcsIDgyMSwgNjY3LCA4MDksIDgwMiwgMjc4LCA2NjcsIDYxNSwgNDUxLCA2MTEsIDI3OCwgNTgyLCA2MTUsIDYxMCwgNTU2LCA2MDYsIDQ3NSwgNDYwLCA2MTEsIDU0MSwgMjc4LCA1NTgsIDU1NiwgNjEyLCA1NTYsIDQ0NSwgNjExLCA3NjYsIDYxOSwgNTIwLCA2ODQsIDQ0NiwgNTgyLCA3MTUsIDU3NiwgNzUzLCA4NDUsIDI3OCwgNTgyLCA2MTEsIDU4MiwgODQ1LCA2NjcsIDY2OSwgODg1LCA1NjcsIDcxMSwgNjY3LCAyNzgsIDI3NiwgNTU2LCAxMDk0LCAxMDYyLCA4NzUsIDYxMCwgNzIyLCA2MjIsIDcxOSwgNzIyLCA3MTksIDcyMiwgNTY3LCA3MTIsIDY2NywgOTA0LCA2MjYsIDcxOSwgNzE5LCA2MTAsIDcwMiwgODMzLCA3MjIsIDc3OCwgNzE5LCA2NjcsIDcyMiwgNjExLCA2MjIsIDg1NCwgNjY3LCA3MzAsIDcwMywgMTAwNSwgMTAxOSwgODcwLCA5NzksIDcxOSwgNzExLCAxMDMxLCA3MTksIDU1NiwgNjE4LCA2MTUsIDQxNywgNjM1LCA1NTYsIDcwOSwgNDk3LCA2MTUsIDYxNSwgNTAwLCA2MzUsIDc0MCwgNjA0LCA2MTEsIDYwNCwgNjExLCA1NTYsIDQ5MCwgNTU2LCA4NzUsIDU1NiwgNjE1LCA1ODEsIDgzMywgODQ0LCA3MjksIDg1NCwgNjE1LCA1NTIsIDg1NCwgNTgzLCA1NTYsIDU1NiwgNjExLCA0MTcsIDU1MiwgNTU2LCAyNzgsIDI4MSwgMjc4LCA5NjksIDkwNiwgNjExLCA1MDAsIDYxNSwgNTU2LCA2MDQsIDc3OCwgNjExLCA0ODcsIDQ0NywgOTQ0LCA3NzgsIDk0NCwgNzc4LCA5NDQsIDc3OCwgNjY3LCA1NTYsIDMzMywgMzMzLCA1NTYsIDEwMDAsIDEwMDAsIDU1MiwgMjc4LCAyNzgsIDI3OCwgMjc4LCA1MDAsIDUwMCwgNTAwLCA1NTYsIDU1NiwgMzUwLCAxMDAwLCAxMDAwLCAyNDAsIDQ3OSwgMzMzLCAzMzMsIDYwNCwgMzMzLCAxNjcsIDM5NiwgNTU2LCA1NTYsIDEwOTQsIDU1NiwgODg1LCA0ODksIDExMTUsIDEwMDAsIDc2OCwgNjAwLCA4MzQsIDgzNCwgODM0LCA4MzQsIDEwMDAsIDUwMCwgMTAwMCwgNTAwLCAxMDAwLCA1MDAsIDUwMCwgNDk0LCA2MTIsIDgyMywgNzEzLCA1ODQsIDU0OSwgNzEzLCA5NzksIDcyMiwgMjc0LCA1NDksIDU0OSwgNTgzLCA1NDksIDU0OSwgNjA0LCA1ODQsIDYwNCwgNjA0LCA3MDgsIDYyNSwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzI5LCA2MDQsIDYwNCwgMzU0LCAzNTQsIDEwMDAsIDk5MCwgOTkwLCA5OTAsIDk5MCwgNDk0LCA2MDQsIDYwNCwgNjA0LCA2MDQsIDM1NCwgMTAyMSwgMTA1MiwgOTE3LCA3NTAsIDc1MCwgNTMxLCA2NTYsIDU5NCwgNTEwLCA1MDAsIDc1MCwgNzUwLCA2MTEsIDYxMSwgMzMzLCAzMzMsIDMzMywgMzMzLCAzMzMsIDMzMywgMzMzLCAzMzMsIDIyMiwgMjIyLCAzMzMsIDMzMywgMzMzLCAzMzMsIDMzMywgMzMzLCAzMzMsIDMzM107CmNvbnN0IExpYmVyYXRpb25TYW5zQm9sZE1hcHBpbmcgPSBbLTEsIC0xLCAtMSwgMzIsIDMzLCAzNCwgMzUsIDM2LCAzNywgMzgsIDM5LCA0MCwgNDEsIDQyLCA0MywgNDQsIDQ1LCA0NiwgNDcsIDQ4LCA0OSwgNTAsIDUxLCA1MiwgNTMsIDU0LCA1NSwgNTYsIDU3LCA1OCwgNTksIDYwLCA2MSwgNjIsIDYzLCA2NCwgNjUsIDY2LCA2NywgNjgsIDY5LCA3MCwgNzEsIDcyLCA3MywgNzQsIDc1LCA3NiwgNzcsIDc4LCA3OSwgODAsIDgxLCA4MiwgODMsIDg0LCA4NSwgODYsIDg3LCA4OCwgODksIDkwLCA5MSwgOTIsIDkzLCA5NCwgOTUsIDk2LCA5NywgOTgsIDk5LCAxMDAsIDEwMSwgMTAyLCAxMDMsIDEwNCwgMTA1LCAxMDYsIDEwNywgMTA4LCAxMDksIDExMCwgMTExLCAxMTIsIDExMywgMTE0LCAxMTUsIDExNiwgMTE3LCAxMTgsIDExOSwgMTIwLCAxMjEsIDEyMiwgMTIzLCAxMjQsIDEyNSwgMTI2LCAxNjEsIDE2MiwgMTYzLCAxNjQsIDE2NSwgMTY2LCAxNjcsIDE2OCwgMTY5LCAxNzAsIDE3MSwgMTcyLCAxNzQsIDE3NSwgMTc2LCAxNzcsIDE3OCwgMTc5LCAxODAsIDE4MSwgMTgyLCAxODMsIDE4NCwgMTg1LCAxODYsIDE4NywgMTg4LCAxODksIDE5MCwgMTkxLCAxOTIsIDE5MywgMTk0LCAxOTUsIDE5NiwgMTk3LCAxOTgsIDE5OSwgMjAwLCAyMDEsIDIwMiwgMjAzLCAyMDQsIDIwNSwgMjA2LCAyMDcsIDIwOCwgMjA5LCAyMTAsIDIxMSwgMjEyLCAyMTMsIDIxNCwgMjE1LCAyMTYsIDIxNywgMjE4LCAyMTksIDIyMCwgMjIxLCAyMjIsIDIyMywgMjI0LCAyMjUsIDIyNiwgMjI3LCAyMjgsIDIyOSwgMjMwLCAyMzEsIDIzMiwgMjMzLCAyMzQsIDIzNSwgMjM2LCAyMzcsIDIzOCwgMjM5LCAyNDAsIDI0MSwgMjQyLCAyNDMsIDI0NCwgMjQ1LCAyNDYsIDI0NywgMjQ4LCAyNDksIDI1MCwgMjUxLCAyNTIsIDI1MywgMjU0LCAyNTUsIDI1NiwgMjU3LCAyNTgsIDI1OSwgMjYwLCAyNjEsIDI2MiwgMjYzLCAyNjQsIDI2NSwgMjY2LCAyNjcsIDI2OCwgMjY5LCAyNzAsIDI3MSwgMjcyLCAyNzMsIDI3NCwgMjc1LCAyNzYsIDI3NywgMjc4LCAyNzksIDI4MCwgMjgxLCAyODIsIDI4MywgMjg0LCAyODUsIDI4NiwgMjg3LCAyODgsIDI4OSwgMjkwLCAyOTEsIDI5MiwgMjkzLCAyOTQsIDI5NSwgMjk2LCAyOTcsIDI5OCwgMjk5LCAzMDAsIDMwMSwgMzAyLCAzMDMsIDMwNCwgMzA1LCAzMDYsIDMwNywgMzA4LCAzMDksIDMxMCwgMzExLCAzMTIsIDMxMywgMzE0LCAzMTUsIDMxNiwgMzE3LCAzMTgsIDMxOSwgMzIwLCAzMjEsIDMyMiwgMzIzLCAzMjQsIDMyNSwgMzI2LCAzMjcsIDMyOCwgMzI5LCAzMzAsIDMzMSwgMzMyLCAzMzMsIDMzNCwgMzM1LCAzMzYsIDMzNywgMzM4LCAzMzksIDM0MCwgMzQxLCAzNDIsIDM0MywgMzQ0LCAzNDUsIDM0NiwgMzQ3LCAzNDgsIDM0OSwgMzUwLCAzNTEsIDM1MiwgMzUzLCAzNTQsIDM1NSwgMzU2LCAzNTcsIDM1OCwgMzU5LCAzNjAsIDM2MSwgMzYyLCAzNjMsIDM2NCwgMzY1LCAzNjYsIDM2NywgMzY4LCAzNjksIDM3MCwgMzcxLCAzNzIsIDM3MywgMzc0LCAzNzUsIDM3NiwgMzc3LCAzNzgsIDM3OSwgMzgwLCAzODEsIDM4MiwgMzgzLCA0MDIsIDUwNiwgNTA3LCA1MDgsIDUwOSwgNTEwLCA1MTEsIDUzNiwgNTM3LCA1MzgsIDUzOSwgNzEwLCA3MTEsIDcxMywgNzI4LCA3MjksIDczMCwgNzMxLCA3MzIsIDczMywgOTAwLCA5MDEsIDkwMiwgOTAzLCA5MDQsIDkwNSwgOTA2LCA5MDgsIDkxMCwgOTExLCA5MTIsIDkxMywgOTE0LCA5MTUsIDkxNiwgOTE3LCA5MTgsIDkxOSwgOTIwLCA5MjEsIDkyMiwgOTIzLCA5MjQsIDkyNSwgOTI2LCA5MjcsIDkyOCwgOTI5LCA5MzEsIDkzMiwgOTMzLCA5MzQsIDkzNSwgOTM2LCA5MzcsIDkzOCwgOTM5LCA5NDAsIDk0MSwgOTQyLCA5NDMsIDk0NCwgOTQ1LCA5NDYsIDk0NywgOTQ4LCA5NDksIDk1MCwgOTUxLCA5NTIsIDk1MywgOTU0LCA5NTUsIDk1NiwgOTU3LCA5NTgsIDk1OSwgOTYwLCA5NjEsIDk2MiwgOTYzLCA5NjQsIDk2NSwgOTY2LCA5NjcsIDk2OCwgOTY5LCA5NzAsIDk3MSwgOTcyLCA5NzMsIDk3NCwgMTAyNCwgMTAyNSwgMTAyNiwgMTAyNywgMTAyOCwgMTAyOSwgMTAzMCwgMTAzMSwgMTAzMiwgMTAzMywgMTAzNCwgMTAzNSwgMTAzNiwgMTAzNywgMTAzOCwgMTAzOSwgMTA0MCwgMTA0MSwgMTA0MiwgMTA0MywgMTA0NCwgMTA0NSwgMTA0NiwgMTA0NywgMTA0OCwgMTA0OSwgMTA1MCwgMTA1MSwgMTA1MiwgMTA1MywgMTA1NCwgMTA1NSwgMTA1NiwgMTA1NywgMTA1OCwgMTA1OSwgMTA2MCwgMTA2MSwgMTA2MiwgMTA2MywgMTA2NCwgMTA2NSwgMTA2NiwgMTA2NywgMTA2OCwgMTA2OSwgMTA3MCwgMTA3MSwgMTA3MiwgMTA3MywgMTA3NCwgMTA3NSwgMTA3NiwgMTA3NywgMTA3OCwgMTA3OSwgMTA4MCwgMTA4MSwgMTA4MiwgMTA4MywgMTA4NCwgMTA4NSwgMTA4NiwgMTA4NywgMTA4OCwgMTA4OSwgMTA5MCwgMTA5MSwgMTA5MiwgMTA5MywgMTA5NCwgMTA5NSwgMTA5NiwgMTA5NywgMTA5OCwgMTA5OSwgMTEwMCwgMTEwMSwgMTEwMiwgMTEwMywgMTEwNCwgMTEwNSwgMTEwNiwgMTEwNywgMTEwOCwgMTEwOSwgMTExMCwgMTExMSwgMTExMiwgMTExMywgMTExNCwgMTExNSwgMTExNiwgMTExNywgMTExOCwgMTExOSwgMTEzOCwgMTEzOSwgMTE2OCwgMTE2OSwgNzgwOCwgNzgwOSwgNzgxMCwgNzgxMSwgNzgxMiwgNzgxMywgNzkyMiwgNzkyMywgODIwOCwgODIwOSwgODIxMSwgODIxMiwgODIxMywgODIxNSwgODIxNiwgODIxNywgODIxOCwgODIxOSwgODIyMCwgODIyMSwgODIyMiwgODIyNCwgODIyNSwgODIyNiwgODIzMCwgODI0MCwgODI0MiwgODI0MywgODI0OSwgODI1MCwgODI1MiwgODI1NCwgODI2MCwgODMxOSwgODM1NSwgODM1NiwgODM1OSwgODM2NCwgODQ1MywgODQ2NywgODQ3MCwgODQ4MiwgODQ4NiwgODQ5NCwgODUzOSwgODU0MCwgODU0MSwgODU0MiwgODU5MiwgODU5MywgODU5NCwgODU5NSwgODU5NiwgODU5NywgODYxNiwgODcwNiwgODcxMCwgODcxOSwgODcyMSwgODcyMiwgODczMCwgODczNCwgODczNSwgODc0NSwgODc0NywgODc3NiwgODgwMCwgODgwMSwgODgwNCwgODgwNSwgODk2MiwgODk3NiwgODk5MiwgODk5MywgOTQ3MiwgOTQ3NCwgOTQ4NCwgOTQ4OCwgOTQ5MiwgOTQ5NiwgOTUwMCwgOTUwOCwgOTUxNiwgOTUyNCwgOTUzMiwgOTU1MiwgOTU1MywgOTU1NCwgOTU1NSwgOTU1NiwgOTU1NywgOTU1OCwgOTU1OSwgOTU2MCwgOTU2MSwgOTU2MiwgOTU2MywgOTU2NCwgOTU2NSwgOTU2NiwgOTU2NywgOTU2OCwgOTU2OSwgOTU3MCwgOTU3MSwgOTU3MiwgOTU3MywgOTU3NCwgOTU3NSwgOTU3NiwgOTU3NywgOTU3OCwgOTU3OSwgOTU4MCwgOTYwMCwgOTYwNCwgOTYwOCwgOTYxMiwgOTYxNiwgOTYxNywgOTYxOCwgOTYxOSwgOTYzMiwgOTYzMywgOTY0MiwgOTY0MywgOTY0NCwgOTY1MCwgOTY1OCwgOTY2MCwgOTY2OCwgOTY3NCwgOTY3NSwgOTY3OSwgOTY4OCwgOTY4OSwgOTcwMiwgOTc4NiwgOTc4NywgOTc4OCwgOTc5MiwgOTc5NCwgOTgyNCwgOTgyNywgOTgyOSwgOTgzMCwgOTgzNCwgOTgzNSwgOTgzNiwgNjE0NDEsIDYxNDQyLCA2MTQ0NSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xXTsKY29uc3QgTGliZXJhdGlvblNhbnNCb2xkSXRhbGljV2lkdGhzID0gWzM2NSwgMCwgMzMzLCAyNzgsIDMzMywgNDc0LCA1NTYsIDU1NiwgODg5LCA3MjIsIDIzOCwgMzMzLCAzMzMsIDM4OSwgNTg0LCAyNzgsIDMzMywgMjc4LCAyNzgsIDU1NiwgNTU2LCA1NTYsIDU1NiwgNTU2LCA1NTYsIDU1NiwgNTU2LCA1NTYsIDU1NiwgMzMzLCAzMzMsIDU4NCwgNTg0LCA1ODQsIDYxMSwgOTc1LCA3MjIsIDcyMiwgNzIyLCA3MjIsIDY2NywgNjExLCA3NzgsIDcyMiwgMjc4LCA1NTYsIDcyMiwgNjExLCA4MzMsIDcyMiwgNzc4LCA2NjcsIDc3OCwgNzIyLCA2NjcsIDYxMSwgNzIyLCA2NjcsIDk0NCwgNjY3LCA2NjcsIDYxMSwgMzMzLCAyNzgsIDMzMywgNTg0LCA1NTYsIDMzMywgNTU2LCA2MTEsIDU1NiwgNjExLCA1NTYsIDMzMywgNjExLCA2MTEsIDI3OCwgMjc4LCA1NTYsIDI3OCwgODg5LCA2MTEsIDYxMSwgNjExLCA2MTEsIDM4OSwgNTU2LCAzMzMsIDYxMSwgNTU2LCA3NzgsIDU1NiwgNTU2LCA1MDAsIDM4OSwgMjgwLCAzODksIDU4NCwgMzMzLCA1NTYsIDU1NiwgNTU2LCA1NTYsIDI4MCwgNTU2LCAzMzMsIDczNywgMzcwLCA1NTYsIDU4NCwgNzM3LCA1NTIsIDQwMCwgNTQ5LCAzMzMsIDMzMywgMzMzLCA1NzYsIDU1NiwgMjc4LCAzMzMsIDMzMywgMzY1LCA1NTYsIDgzNCwgODM0LCA4MzQsIDYxMSwgNzIyLCA3MjIsIDcyMiwgNzIyLCA3MjIsIDcyMiwgMTAwMCwgNzIyLCA2NjcsIDY2NywgNjY3LCA2NjcsIDI3OCwgMjc4LCAyNzgsIDI3OCwgNzIyLCA3MjIsIDc3OCwgNzc4LCA3NzgsIDc3OCwgNzc4LCA1ODQsIDc3OCwgNzIyLCA3MjIsIDcyMiwgNzIyLCA2NjcsIDY2NywgNjExLCA1NTYsIDU1NiwgNTU2LCA1NTYsIDU1NiwgNTU2LCA4ODksIDU1NiwgNTU2LCA1NTYsIDU1NiwgNTU2LCAyNzgsIDI3OCwgMjc4LCAyNzgsIDYxMSwgNjExLCA2MTEsIDYxMSwgNjExLCA2MTEsIDYxMSwgNTQ5LCA2MTEsIDYxMSwgNjExLCA2MTEsIDYxMSwgNTU2LCA2MTEsIDU1NiwgNzIyLCA1NTYsIDcyMiwgNTU2LCA3MjIsIDU1NiwgNzIyLCA1NTYsIDcyMiwgNTU2LCA3MjIsIDU1NiwgNzIyLCA1NTYsIDcyMiwgNzQwLCA3MjIsIDYxMSwgNjY3LCA1NTYsIDY2NywgNTU2LCA2NjcsIDU1NiwgNjY3LCA1NTYsIDY2NywgNTU2LCA3NzgsIDYxMSwgNzc4LCA2MTEsIDc3OCwgNjExLCA3NzgsIDYxMSwgNzIyLCA2MTEsIDcyMiwgNjExLCAyNzgsIDI3OCwgMjc4LCAyNzgsIDI3OCwgMjc4LCAyNzgsIDI3OCwgMjc4LCAyNzgsIDc4MiwgNTU2LCA1NTYsIDI3OCwgNzIyLCA1NTYsIDU1NiwgNjExLCAyNzgsIDYxMSwgMjc4LCA2MTEsIDM5NiwgNjExLCA0NzksIDYxMSwgMjc4LCA3MjIsIDYxMSwgNzIyLCA2MTEsIDcyMiwgNjExLCA3MDgsIDcyMywgNjExLCA3NzgsIDYxMSwgNzc4LCA2MTEsIDc3OCwgNjExLCAxMDAwLCA5NDQsIDcyMiwgMzg5LCA3MjIsIDM4OSwgNzIyLCAzODksIDY2NywgNTU2LCA2NjcsIDU1NiwgNjY3LCA1NTYsIDY2NywgNTU2LCA2MTEsIDMzMywgNjExLCA0NzksIDYxMSwgMzMzLCA3MjIsIDYxMSwgNzIyLCA2MTEsIDcyMiwgNjExLCA3MjIsIDYxMSwgNzIyLCA2MTEsIDcyMiwgNjExLCA5NDQsIDc3OCwgNjY3LCA1NTYsIDY2NywgNjExLCA1MDAsIDYxMSwgNTAwLCA2MTEsIDUwMCwgMjc4LCA1NTYsIDcyMiwgNTU2LCAxMDAwLCA4ODksIDc3OCwgNjExLCA2NjcsIDU1NiwgNjExLCAzMzMsIDMzMywgMzMzLCAzMzMsIDMzMywgMzMzLCAzMzMsIDMzMywgMzMzLCAzMzMsIDMzMywgMzMzLCA3MjIsIDMzMywgODU0LCA5MDYsIDQ3MywgODQ0LCA5MzAsIDg0NywgMjc4LCA3MjIsIDcyMiwgNjEwLCA2NzEsIDY2NywgNjExLCA3MjIsIDc3OCwgMjc4LCA3MjIsIDY2NywgODMzLCA3MjIsIDY1NywgNzc4LCA3MTgsIDY2NywgNTkwLCA2MTEsIDY2NywgODIyLCA2NjcsIDgyOSwgNzgxLCAyNzgsIDY2NywgNjIwLCA0NzksIDYxMSwgMjc4LCA1OTEsIDYyMCwgNjIxLCA1NTYsIDYxMCwgNDc5LCA0OTIsIDYxMSwgNTU4LCAyNzgsIDU2NiwgNTU2LCA2MDMsIDU1NiwgNDUwLCA2MTEsIDcxMiwgNjA1LCA1MzIsIDY2NCwgNDA5LCA1OTEsIDcwNCwgNTc4LCA3NzMsIDgzNCwgMjc4LCA1OTEsIDYxMSwgNTkxLCA4MzQsIDY2NywgNjY3LCA4ODYsIDYxNCwgNzE5LCA2NjcsIDI3OCwgMjc4LCA1NTYsIDEwOTQsIDEwNDIsIDg1NCwgNjIyLCA3MTksIDY3NywgNzE5LCA3MjIsIDcwOCwgNzIyLCA2MTQsIDcyMiwgNjY3LCA5MjcsIDY0MywgNzE5LCA3MTksIDYxNSwgNjg3LCA4MzMsIDcyMiwgNzc4LCA3MTksIDY2NywgNzIyLCA2MTEsIDY3NywgNzgxLCA2NjcsIDcyOSwgNzA4LCA5NzksIDk4OSwgODU0LCAxMDAwLCA3MDgsIDcxOSwgMTA0MiwgNzI5LCA1NTYsIDYxOSwgNjA0LCA1MzQsIDYxOCwgNTU2LCA3MzYsIDUxMCwgNjExLCA2MTEsIDUwNywgNjIyLCA3NDAsIDYwNCwgNjExLCA2MTEsIDYxMSwgNTU2LCA4ODksIDU1NiwgODg1LCA1NTYsIDY0NiwgNTgzLCA4ODksIDkzNSwgNzA3LCA4NTQsIDU5NCwgNTUyLCA4NjUsIDU4OSwgNTU2LCA1NTYsIDYxMSwgNDY5LCA1NjMsIDU1NiwgMjc4LCAyNzgsIDI3OCwgOTY5LCA5MDYsIDYxMSwgNTA3LCA2MTksIDU1NiwgNjExLCA3NzgsIDYxMSwgNTc1LCA0NjcsIDk0NCwgNzc4LCA5NDQsIDc3OCwgOTQ0LCA3NzgsIDY2NywgNTU2LCAzMzMsIDMzMywgNTU2LCAxMDAwLCAxMDAwLCA1NTIsIDI3OCwgMjc4LCAyNzgsIDI3OCwgNTAwLCA1MDAsIDUwMCwgNTU2LCA1NTYsIDM1MCwgMTAwMCwgMTAwMCwgMjQwLCA0NzksIDMzMywgMzMzLCA2MDQsIDMzMywgMTY3LCAzOTYsIDU1NiwgNTU2LCAxMTA0LCA1NTYsIDg4NSwgNTE2LCAxMTQ2LCAxMDAwLCA3NjgsIDYwMCwgODM0LCA4MzQsIDgzNCwgODM0LCA5OTksIDUwMCwgMTAwMCwgNTAwLCAxMDAwLCA1MDAsIDUwMCwgNDk0LCA2MTIsIDgyMywgNzEzLCA1ODQsIDU0OSwgNzEzLCA5NzksIDcyMiwgMjc0LCA1NDksIDU0OSwgNTgzLCA1NDksIDU0OSwgNjA0LCA1ODQsIDYwNCwgNjA0LCA3MDgsIDYyNSwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzI5LCA2MDQsIDYwNCwgMzU0LCAzNTQsIDEwMDAsIDk5MCwgOTkwLCA5OTAsIDk5MCwgNDk0LCA2MDQsIDYwNCwgNjA0LCA2MDQsIDM1NCwgMTAyMSwgMTA1MiwgOTE3LCA3NTAsIDc1MCwgNTMxLCA2NTYsIDU5NCwgNTEwLCA1MDAsIDc1MCwgNzUwLCA2MTEsIDYxMSwgMzMzLCAzMzMsIDMzMywgMzMzLCAzMzMsIDMzMywgMzMzLCAzMzMsIDIyMiwgMjIyLCAzMzMsIDMzMywgMzMzLCAzMzMsIDMzMywgMzMzLCAzMzMsIDMzM107CmNvbnN0IExpYmVyYXRpb25TYW5zQm9sZEl0YWxpY01hcHBpbmcgPSBbLTEsIC0xLCAtMSwgMzIsIDMzLCAzNCwgMzUsIDM2LCAzNywgMzgsIDM5LCA0MCwgNDEsIDQyLCA0MywgNDQsIDQ1LCA0NiwgNDcsIDQ4LCA0OSwgNTAsIDUxLCA1MiwgNTMsIDU0LCA1NSwgNTYsIDU3LCA1OCwgNTksIDYwLCA2MSwgNjIsIDYzLCA2NCwgNjUsIDY2LCA2NywgNjgsIDY5LCA3MCwgNzEsIDcyLCA3MywgNzQsIDc1LCA3NiwgNzcsIDc4LCA3OSwgODAsIDgxLCA4MiwgODMsIDg0LCA4NSwgODYsIDg3LCA4OCwgODksIDkwLCA5MSwgOTIsIDkzLCA5NCwgOTUsIDk2LCA5NywgOTgsIDk5LCAxMDAsIDEwMSwgMTAyLCAxMDMsIDEwNCwgMTA1LCAxMDYsIDEwNywgMTA4LCAxMDksIDExMCwgMTExLCAxMTIsIDExMywgMTE0LCAxMTUsIDExNiwgMTE3LCAxMTgsIDExOSwgMTIwLCAxMjEsIDEyMiwgMTIzLCAxMjQsIDEyNSwgMTI2LCAxNjEsIDE2MiwgMTYzLCAxNjQsIDE2NSwgMTY2LCAxNjcsIDE2OCwgMTY5LCAxNzAsIDE3MSwgMTcyLCAxNzQsIDE3NSwgMTc2LCAxNzcsIDE3OCwgMTc5LCAxODAsIDE4MSwgMTgyLCAxODMsIDE4NCwgMTg1LCAxODYsIDE4NywgMTg4LCAxODksIDE5MCwgMTkxLCAxOTIsIDE5MywgMTk0LCAxOTUsIDE5NiwgMTk3LCAxOTgsIDE5OSwgMjAwLCAyMDEsIDIwMiwgMjAzLCAyMDQsIDIwNSwgMjA2LCAyMDcsIDIwOCwgMjA5LCAyMTAsIDIxMSwgMjEyLCAyMTMsIDIxNCwgMjE1LCAyMTYsIDIxNywgMjE4LCAyMTksIDIyMCwgMjIxLCAyMjIsIDIyMywgMjI0LCAyMjUsIDIyNiwgMjI3LCAyMjgsIDIyOSwgMjMwLCAyMzEsIDIzMiwgMjMzLCAyMzQsIDIzNSwgMjM2LCAyMzcsIDIzOCwgMjM5LCAyNDAsIDI0MSwgMjQyLCAyNDMsIDI0NCwgMjQ1LCAyNDYsIDI0NywgMjQ4LCAyNDksIDI1MCwgMjUxLCAyNTIsIDI1MywgMjU0LCAyNTUsIDI1NiwgMjU3LCAyNTgsIDI1OSwgMjYwLCAyNjEsIDI2MiwgMjYzLCAyNjQsIDI2NSwgMjY2LCAyNjcsIDI2OCwgMjY5LCAyNzAsIDI3MSwgMjcyLCAyNzMsIDI3NCwgMjc1LCAyNzYsIDI3NywgMjc4LCAyNzksIDI4MCwgMjgxLCAyODIsIDI4MywgMjg0LCAyODUsIDI4NiwgMjg3LCAyODgsIDI4OSwgMjkwLCAyOTEsIDI5MiwgMjkzLCAyOTQsIDI5NSwgMjk2LCAyOTcsIDI5OCwgMjk5LCAzMDAsIDMwMSwgMzAyLCAzMDMsIDMwNCwgMzA1LCAzMDYsIDMwNywgMzA4LCAzMDksIDMxMCwgMzExLCAzMTIsIDMxMywgMzE0LCAzMTUsIDMxNiwgMzE3LCAzMTgsIDMxOSwgMzIwLCAzMjEsIDMyMiwgMzIzLCAzMjQsIDMyNSwgMzI2LCAzMjcsIDMyOCwgMzI5LCAzMzAsIDMzMSwgMzMyLCAzMzMsIDMzNCwgMzM1LCAzMzYsIDMzNywgMzM4LCAzMzksIDM0MCwgMzQxLCAzNDIsIDM0MywgMzQ0LCAzNDUsIDM0NiwgMzQ3LCAzNDgsIDM0OSwgMzUwLCAzNTEsIDM1MiwgMzUzLCAzNTQsIDM1NSwgMzU2LCAzNTcsIDM1OCwgMzU5LCAzNjAsIDM2MSwgMzYyLCAzNjMsIDM2NCwgMzY1LCAzNjYsIDM2NywgMzY4LCAzNjksIDM3MCwgMzcxLCAzNzIsIDM3MywgMzc0LCAzNzUsIDM3NiwgMzc3LCAzNzgsIDM3OSwgMzgwLCAzODEsIDM4MiwgMzgzLCA0MDIsIDUwNiwgNTA3LCA1MDgsIDUwOSwgNTEwLCA1MTEsIDUzNiwgNTM3LCA1MzgsIDUzOSwgNzEwLCA3MTEsIDcxMywgNzI4LCA3MjksIDczMCwgNzMxLCA3MzIsIDczMywgOTAwLCA5MDEsIDkwMiwgOTAzLCA5MDQsIDkwNSwgOTA2LCA5MDgsIDkxMCwgOTExLCA5MTIsIDkxMywgOTE0LCA5MTUsIDkxNiwgOTE3LCA5MTgsIDkxOSwgOTIwLCA5MjEsIDkyMiwgOTIzLCA5MjQsIDkyNSwgOTI2LCA5MjcsIDkyOCwgOTI5LCA5MzEsIDkzMiwgOTMzLCA5MzQsIDkzNSwgOTM2LCA5MzcsIDkzOCwgOTM5LCA5NDAsIDk0MSwgOTQyLCA5NDMsIDk0NCwgOTQ1LCA5NDYsIDk0NywgOTQ4LCA5NDksIDk1MCwgOTUxLCA5NTIsIDk1MywgOTU0LCA5NTUsIDk1NiwgOTU3LCA5NTgsIDk1OSwgOTYwLCA5NjEsIDk2MiwgOTYzLCA5NjQsIDk2NSwgOTY2LCA5NjcsIDk2OCwgOTY5LCA5NzAsIDk3MSwgOTcyLCA5NzMsIDk3NCwgMTAyNCwgMTAyNSwgMTAyNiwgMTAyNywgMTAyOCwgMTAyOSwgMTAzMCwgMTAzMSwgMTAzMiwgMTAzMywgMTAzNCwgMTAzNSwgMTAzNiwgMTAzNywgMTAzOCwgMTAzOSwgMTA0MCwgMTA0MSwgMTA0MiwgMTA0MywgMTA0NCwgMTA0NSwgMTA0NiwgMTA0NywgMTA0OCwgMTA0OSwgMTA1MCwgMTA1MSwgMTA1MiwgMTA1MywgMTA1NCwgMTA1NSwgMTA1NiwgMTA1NywgMTA1OCwgMTA1OSwgMTA2MCwgMTA2MSwgMTA2MiwgMTA2MywgMTA2NCwgMTA2NSwgMTA2NiwgMTA2NywgMTA2OCwgMTA2OSwgMTA3MCwgMTA3MSwgMTA3MiwgMTA3MywgMTA3NCwgMTA3NSwgMTA3NiwgMTA3NywgMTA3OCwgMTA3OSwgMTA4MCwgMTA4MSwgMTA4MiwgMTA4MywgMTA4NCwgMTA4NSwgMTA4NiwgMTA4NywgMTA4OCwgMTA4OSwgMTA5MCwgMTA5MSwgMTA5MiwgMTA5MywgMTA5NCwgMTA5NSwgMTA5NiwgMTA5NywgMTA5OCwgMTA5OSwgMTEwMCwgMTEwMSwgMTEwMiwgMTEwMywgMTEwNCwgMTEwNSwgMTEwNiwgMTEwNywgMTEwOCwgMTEwOSwgMTExMCwgMTExMSwgMTExMiwgMTExMywgMTExNCwgMTExNSwgMTExNiwgMTExNywgMTExOCwgMTExOSwgMTEzOCwgMTEzOSwgMTE2OCwgMTE2OSwgNzgwOCwgNzgwOSwgNzgxMCwgNzgxMSwgNzgxMiwgNzgxMywgNzkyMiwgNzkyMywgODIwOCwgODIwOSwgODIxMSwgODIxMiwgODIxMywgODIxNSwgODIxNiwgODIxNywgODIxOCwgODIxOSwgODIyMCwgODIyMSwgODIyMiwgODIyNCwgODIyNSwgODIyNiwgODIzMCwgODI0MCwgODI0MiwgODI0MywgODI0OSwgODI1MCwgODI1MiwgODI1NCwgODI2MCwgODMxOSwgODM1NSwgODM1NiwgODM1OSwgODM2NCwgODQ1MywgODQ2NywgODQ3MCwgODQ4MiwgODQ4NiwgODQ5NCwgODUzOSwgODU0MCwgODU0MSwgODU0MiwgODU5MiwgODU5MywgODU5NCwgODU5NSwgODU5NiwgODU5NywgODYxNiwgODcwNiwgODcxMCwgODcxOSwgODcyMSwgODcyMiwgODczMCwgODczNCwgODczNSwgODc0NSwgODc0NywgODc3NiwgODgwMCwgODgwMSwgODgwNCwgODgwNSwgODk2MiwgODk3NiwgODk5MiwgODk5MywgOTQ3MiwgOTQ3NCwgOTQ4NCwgOTQ4OCwgOTQ5MiwgOTQ5NiwgOTUwMCwgOTUwOCwgOTUxNiwgOTUyNCwgOTUzMiwgOTU1MiwgOTU1MywgOTU1NCwgOTU1NSwgOTU1NiwgOTU1NywgOTU1OCwgOTU1OSwgOTU2MCwgOTU2MSwgOTU2MiwgOTU2MywgOTU2NCwgOTU2NSwgOTU2NiwgOTU2NywgOTU2OCwgOTU2OSwgOTU3MCwgOTU3MSwgOTU3MiwgOTU3MywgOTU3NCwgOTU3NSwgOTU3NiwgOTU3NywgOTU3OCwgOTU3OSwgOTU4MCwgOTYwMCwgOTYwNCwgOTYwOCwgOTYxMiwgOTYxNiwgOTYxNywgOTYxOCwgOTYxOSwgOTYzMiwgOTYzMywgOTY0MiwgOTY0MywgOTY0NCwgOTY1MCwgOTY1OCwgOTY2MCwgOTY2OCwgOTY3NCwgOTY3NSwgOTY3OSwgOTY4OCwgOTY4OSwgOTcwMiwgOTc4NiwgOTc4NywgOTc4OCwgOTc5MiwgOTc5NCwgOTgyNCwgOTgyNywgOTgyOSwgOTgzMCwgOTgzNCwgOTgzNSwgOTgzNiwgNjE0NDEsIDYxNDQyLCA2MTQ0NSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xXTsKY29uc3QgTGliZXJhdGlvblNhbnNJdGFsaWNXaWR0aHMgPSBbMzY1LCAwLCAzMzMsIDI3OCwgMjc4LCAzNTUsIDU1NiwgNTU2LCA4ODksIDY2NywgMTkxLCAzMzMsIDMzMywgMzg5LCA1ODQsIDI3OCwgMzMzLCAyNzgsIDI3OCwgNTU2LCA1NTYsIDU1NiwgNTU2LCA1NTYsIDU1NiwgNTU2LCA1NTYsIDU1NiwgNTU2LCAyNzgsIDI3OCwgNTg0LCA1ODQsIDU4NCwgNTU2LCAxMDE1LCA2NjcsIDY2NywgNzIyLCA3MjIsIDY2NywgNjExLCA3NzgsIDcyMiwgMjc4LCA1MDAsIDY2NywgNTU2LCA4MzMsIDcyMiwgNzc4LCA2NjcsIDc3OCwgNzIyLCA2NjcsIDYxMSwgNzIyLCA2NjcsIDk0NCwgNjY3LCA2NjcsIDYxMSwgMjc4LCAyNzgsIDI3OCwgNDY5LCA1NTYsIDMzMywgNTU2LCA1NTYsIDUwMCwgNTU2LCA1NTYsIDI3OCwgNTU2LCA1NTYsIDIyMiwgMjIyLCA1MDAsIDIyMiwgODMzLCA1NTYsIDU1NiwgNTU2LCA1NTYsIDMzMywgNTAwLCAyNzgsIDU1NiwgNTAwLCA3MjIsIDUwMCwgNTAwLCA1MDAsIDMzNCwgMjYwLCAzMzQsIDU4NCwgMzMzLCA1NTYsIDU1NiwgNTU2LCA1NTYsIDI2MCwgNTU2LCAzMzMsIDczNywgMzcwLCA1NTYsIDU4NCwgNzM3LCA1NTIsIDQwMCwgNTQ5LCAzMzMsIDMzMywgMzMzLCA1NzYsIDUzNywgMjc4LCAzMzMsIDMzMywgMzY1LCA1NTYsIDgzNCwgODM0LCA4MzQsIDYxMSwgNjY3LCA2NjcsIDY2NywgNjY3LCA2NjcsIDY2NywgMTAwMCwgNzIyLCA2NjcsIDY2NywgNjY3LCA2NjcsIDI3OCwgMjc4LCAyNzgsIDI3OCwgNzIyLCA3MjIsIDc3OCwgNzc4LCA3NzgsIDc3OCwgNzc4LCA1ODQsIDc3OCwgNzIyLCA3MjIsIDcyMiwgNzIyLCA2NjcsIDY2NywgNjExLCA1NTYsIDU1NiwgNTU2LCA1NTYsIDU1NiwgNTU2LCA4ODksIDUwMCwgNTU2LCA1NTYsIDU1NiwgNTU2LCAyNzgsIDI3OCwgMjc4LCAyNzgsIDU1NiwgNTU2LCA1NTYsIDU1NiwgNTU2LCA1NTYsIDU1NiwgNTQ5LCA2MTEsIDU1NiwgNTU2LCA1NTYsIDU1NiwgNTAwLCA1NTYsIDUwMCwgNjY3LCA1NTYsIDY2NywgNTU2LCA2NjcsIDU1NiwgNzIyLCA1MDAsIDcyMiwgNTAwLCA3MjIsIDUwMCwgNzIyLCA1MDAsIDcyMiwgNjI1LCA3MjIsIDU1NiwgNjY3LCA1NTYsIDY2NywgNTU2LCA2NjcsIDU1NiwgNjY3LCA1NTYsIDY2NywgNTU2LCA3NzgsIDU1NiwgNzc4LCA1NTYsIDc3OCwgNTU2LCA3NzgsIDU1NiwgNzIyLCA1NTYsIDcyMiwgNTU2LCAyNzgsIDI3OCwgMjc4LCAyNzgsIDI3OCwgMjc4LCAyNzgsIDIyMiwgMjc4LCAyNzgsIDczMywgNDQ0LCA1MDAsIDIyMiwgNjY3LCA1MDAsIDUwMCwgNTU2LCAyMjIsIDU1NiwgMjIyLCA1NTYsIDI4MSwgNTU2LCA0MDAsIDU1NiwgMjIyLCA3MjIsIDU1NiwgNzIyLCA1NTYsIDcyMiwgNTU2LCA2MTUsIDcyMywgNTU2LCA3NzgsIDU1NiwgNzc4LCA1NTYsIDc3OCwgNTU2LCAxMDAwLCA5NDQsIDcyMiwgMzMzLCA3MjIsIDMzMywgNzIyLCAzMzMsIDY2NywgNTAwLCA2NjcsIDUwMCwgNjY3LCA1MDAsIDY2NywgNTAwLCA2MTEsIDI3OCwgNjExLCAzNTQsIDYxMSwgMjc4LCA3MjIsIDU1NiwgNzIyLCA1NTYsIDcyMiwgNTU2LCA3MjIsIDU1NiwgNzIyLCA1NTYsIDcyMiwgNTU2LCA5NDQsIDcyMiwgNjY3LCA1MDAsIDY2NywgNjExLCA1MDAsIDYxMSwgNTAwLCA2MTEsIDUwMCwgMjIyLCA1NTYsIDY2NywgNTU2LCAxMDAwLCA4ODksIDc3OCwgNjExLCA2NjcsIDUwMCwgNjExLCAyNzgsIDMzMywgMzMzLCAzMzMsIDMzMywgMzMzLCAzMzMsIDMzMywgMzMzLCAzMzMsIDMzMywgMzMzLCA2NjcsIDI3OCwgNzg5LCA4NDYsIDM4OSwgNzk0LCA4NjUsIDc3NSwgMjIyLCA2NjcsIDY2NywgNTcwLCA2NzEsIDY2NywgNjExLCA3MjIsIDc3OCwgMjc4LCA2NjcsIDY2NywgODMzLCA3MjIsIDY0OCwgNzc4LCA3MjUsIDY2NywgNjAwLCA2MTEsIDY2NywgODM3LCA2NjcsIDgzMSwgNzYxLCAyNzgsIDY2NywgNTcwLCA0MzksIDU1NSwgMjIyLCA1NTAsIDU3MCwgNTcxLCA1MDAsIDU1NiwgNDM5LCA0NjMsIDU1NSwgNTQyLCAyMjIsIDUwMCwgNDkyLCA1NDgsIDUwMCwgNDQ3LCA1NTYsIDY3MCwgNTczLCA0ODYsIDYwMywgMzc0LCA1NTAsIDY1MiwgNTQ2LCA3MjgsIDc3OSwgMjIyLCA1NTAsIDU1NiwgNTUwLCA3NzksIDY2NywgNjY3LCA4NDMsIDU0NCwgNzA4LCA2NjcsIDI3OCwgMjc4LCA1MDAsIDEwNjYsIDk4MiwgODQ0LCA1ODksIDcxNSwgNjM5LCA3MjQsIDY2NywgNjUxLCA2NjcsIDU0NCwgNzA0LCA2NjcsIDkxNywgNjE0LCA3MTUsIDcxNSwgNTg5LCA2ODYsIDgzMywgNzIyLCA3NzgsIDcyNSwgNjY3LCA3MjIsIDYxMSwgNjM5LCA3OTUsIDY2NywgNzI3LCA2NzMsIDkyMCwgOTIzLCA4MDUsIDg4NiwgNjUxLCA2OTQsIDEwMjIsIDY4MiwgNTU2LCA1NjIsIDUyMiwgNDkzLCA1NTMsIDU1NiwgNjg4LCA0NjUsIDU1NiwgNTU2LCA0NzIsIDU2NCwgNjg2LCA1NTAsIDU1NiwgNTU2LCA1NTYsIDUwMCwgODMzLCA1MDAsIDgzNSwgNTAwLCA1NzIsIDUxOCwgODMwLCA4NTEsIDYyMSwgNzM2LCA1MjYsIDQ5MiwgNzUyLCA1MzQsIDU1NiwgNTU2LCA1NTYsIDM3OCwgNDk2LCA1MDAsIDIyMiwgMjIyLCAyMjIsIDkxMCwgODI4LCA1NTYsIDQ3MiwgNTY1LCA1MDAsIDU1NiwgNzc4LCA1NTYsIDQ5MiwgMzM5LCA5NDQsIDcyMiwgOTQ0LCA3MjIsIDk0NCwgNzIyLCA2NjcsIDUwMCwgMzMzLCAzMzMsIDU1NiwgMTAwMCwgMTAwMCwgNTUyLCAyMjIsIDIyMiwgMjIyLCAyMjIsIDMzMywgMzMzLCAzMzMsIDU1NiwgNTU2LCAzNTAsIDEwMDAsIDEwMDAsIDE4OCwgMzU0LCAzMzMsIDMzMywgNTAwLCAzMzMsIDE2NywgMzY1LCA1NTYsIDU1NiwgMTA5NCwgNTU2LCA4ODUsIDMyMywgMTA4MywgMTAwMCwgNzY4LCA2MDAsIDgzNCwgODM0LCA4MzQsIDgzNCwgMTAwMCwgNTAwLCA5OTgsIDUwMCwgMTAwMCwgNTAwLCA1MDAsIDQ5NCwgNjEyLCA4MjMsIDcxMywgNTg0LCA1NDksIDcxMywgOTc5LCA3MTksIDI3NCwgNTQ5LCA1NDksIDU4NCwgNTQ5LCA1NDksIDYwNCwgNTg0LCA2MDQsIDYwNCwgNzA4LCA2MjUsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcyOSwgNjA0LCA2MDQsIDM1NCwgMzU0LCAxMDAwLCA5OTAsIDk5MCwgOTkwLCA5OTAsIDQ5NCwgNjA0LCA2MDQsIDYwNCwgNjA0LCAzNTQsIDEwMjEsIDEwNTIsIDkxNywgNzUwLCA3NTAsIDUzMSwgNjU2LCA1OTQsIDUxMCwgNTAwLCA3NTAsIDc1MCwgNTAwLCA1MDAsIDMzMywgMzMzLCAzMzMsIDMzMywgMzMzLCAzMzMsIDMzMywgMzMzLCAyMjIsIDIyMiwgMjk0LCAyOTQsIDMyNCwgMzI0LCAzMTYsIDMyOCwgMzk4LCAyODVdOwpjb25zdCBMaWJlcmF0aW9uU2Fuc0l0YWxpY01hcHBpbmcgPSBbLTEsIC0xLCAtMSwgMzIsIDMzLCAzNCwgMzUsIDM2LCAzNywgMzgsIDM5LCA0MCwgNDEsIDQyLCA0MywgNDQsIDQ1LCA0NiwgNDcsIDQ4LCA0OSwgNTAsIDUxLCA1MiwgNTMsIDU0LCA1NSwgNTYsIDU3LCA1OCwgNTksIDYwLCA2MSwgNjIsIDYzLCA2NCwgNjUsIDY2LCA2NywgNjgsIDY5LCA3MCwgNzEsIDcyLCA3MywgNzQsIDc1LCA3NiwgNzcsIDc4LCA3OSwgODAsIDgxLCA4MiwgODMsIDg0LCA4NSwgODYsIDg3LCA4OCwgODksIDkwLCA5MSwgOTIsIDkzLCA5NCwgOTUsIDk2LCA5NywgOTgsIDk5LCAxMDAsIDEwMSwgMTAyLCAxMDMsIDEwNCwgMTA1LCAxMDYsIDEwNywgMTA4LCAxMDksIDExMCwgMTExLCAxMTIsIDExMywgMTE0LCAxMTUsIDExNiwgMTE3LCAxMTgsIDExOSwgMTIwLCAxMjEsIDEyMiwgMTIzLCAxMjQsIDEyNSwgMTI2LCAxNjEsIDE2MiwgMTYzLCAxNjQsIDE2NSwgMTY2LCAxNjcsIDE2OCwgMTY5LCAxNzAsIDE3MSwgMTcyLCAxNzQsIDE3NSwgMTc2LCAxNzcsIDE3OCwgMTc5LCAxODAsIDE4MSwgMTgyLCAxODMsIDE4NCwgMTg1LCAxODYsIDE4NywgMTg4LCAxODksIDE5MCwgMTkxLCAxOTIsIDE5MywgMTk0LCAxOTUsIDE5NiwgMTk3LCAxOTgsIDE5OSwgMjAwLCAyMDEsIDIwMiwgMjAzLCAyMDQsIDIwNSwgMjA2LCAyMDcsIDIwOCwgMjA5LCAyMTAsIDIxMSwgMjEyLCAyMTMsIDIxNCwgMjE1LCAyMTYsIDIxNywgMjE4LCAyMTksIDIyMCwgMjIxLCAyMjIsIDIyMywgMjI0LCAyMjUsIDIyNiwgMjI3LCAyMjgsIDIyOSwgMjMwLCAyMzEsIDIzMiwgMjMzLCAyMzQsIDIzNSwgMjM2LCAyMzcsIDIzOCwgMjM5LCAyNDAsIDI0MSwgMjQyLCAyNDMsIDI0NCwgMjQ1LCAyNDYsIDI0NywgMjQ4LCAyNDksIDI1MCwgMjUxLCAyNTIsIDI1MywgMjU0LCAyNTUsIDI1NiwgMjU3LCAyNTgsIDI1OSwgMjYwLCAyNjEsIDI2MiwgMjYzLCAyNjQsIDI2NSwgMjY2LCAyNjcsIDI2OCwgMjY5LCAyNzAsIDI3MSwgMjcyLCAyNzMsIDI3NCwgMjc1LCAyNzYsIDI3NywgMjc4LCAyNzksIDI4MCwgMjgxLCAyODIsIDI4MywgMjg0LCAyODUsIDI4NiwgMjg3LCAyODgsIDI4OSwgMjkwLCAyOTEsIDI5MiwgMjkzLCAyOTQsIDI5NSwgMjk2LCAyOTcsIDI5OCwgMjk5LCAzMDAsIDMwMSwgMzAyLCAzMDMsIDMwNCwgMzA1LCAzMDYsIDMwNywgMzA4LCAzMDksIDMxMCwgMzExLCAzMTIsIDMxMywgMzE0LCAzMTUsIDMxNiwgMzE3LCAzMTgsIDMxOSwgMzIwLCAzMjEsIDMyMiwgMzIzLCAzMjQsIDMyNSwgMzI2LCAzMjcsIDMyOCwgMzI5LCAzMzAsIDMzMSwgMzMyLCAzMzMsIDMzNCwgMzM1LCAzMzYsIDMzNywgMzM4LCAzMzksIDM0MCwgMzQxLCAzNDIsIDM0MywgMzQ0LCAzNDUsIDM0NiwgMzQ3LCAzNDgsIDM0OSwgMzUwLCAzNTEsIDM1MiwgMzUzLCAzNTQsIDM1NSwgMzU2LCAzNTcsIDM1OCwgMzU5LCAzNjAsIDM2MSwgMzYyLCAzNjMsIDM2NCwgMzY1LCAzNjYsIDM2NywgMzY4LCAzNjksIDM3MCwgMzcxLCAzNzIsIDM3MywgMzc0LCAzNzUsIDM3NiwgMzc3LCAzNzgsIDM3OSwgMzgwLCAzODEsIDM4MiwgMzgzLCA0MDIsIDUwNiwgNTA3LCA1MDgsIDUwOSwgNTEwLCA1MTEsIDUzNiwgNTM3LCA1MzgsIDUzOSwgNzEwLCA3MTEsIDcxMywgNzI4LCA3MjksIDczMCwgNzMxLCA3MzIsIDczMywgOTAwLCA5MDEsIDkwMiwgOTAzLCA5MDQsIDkwNSwgOTA2LCA5MDgsIDkxMCwgOTExLCA5MTIsIDkxMywgOTE0LCA5MTUsIDkxNiwgOTE3LCA5MTgsIDkxOSwgOTIwLCA5MjEsIDkyMiwgOTIzLCA5MjQsIDkyNSwgOTI2LCA5MjcsIDkyOCwgOTI5LCA5MzEsIDkzMiwgOTMzLCA5MzQsIDkzNSwgOTM2LCA5MzcsIDkzOCwgOTM5LCA5NDAsIDk0MSwgOTQyLCA5NDMsIDk0NCwgOTQ1LCA5NDYsIDk0NywgOTQ4LCA5NDksIDk1MCwgOTUxLCA5NTIsIDk1MywgOTU0LCA5NTUsIDk1NiwgOTU3LCA5NTgsIDk1OSwgOTYwLCA5NjEsIDk2MiwgOTYzLCA5NjQsIDk2NSwgOTY2LCA5NjcsIDk2OCwgOTY5LCA5NzAsIDk3MSwgOTcyLCA5NzMsIDk3NCwgMTAyNCwgMTAyNSwgMTAyNiwgMTAyNywgMTAyOCwgMTAyOSwgMTAzMCwgMTAzMSwgMTAzMiwgMTAzMywgMTAzNCwgMTAzNSwgMTAzNiwgMTAzNywgMTAzOCwgMTAzOSwgMTA0MCwgMTA0MSwgMTA0MiwgMTA0MywgMTA0NCwgMTA0NSwgMTA0NiwgMTA0NywgMTA0OCwgMTA0OSwgMTA1MCwgMTA1MSwgMTA1MiwgMTA1MywgMTA1NCwgMTA1NSwgMTA1NiwgMTA1NywgMTA1OCwgMTA1OSwgMTA2MCwgMTA2MSwgMTA2MiwgMTA2MywgMTA2NCwgMTA2NSwgMTA2NiwgMTA2NywgMTA2OCwgMTA2OSwgMTA3MCwgMTA3MSwgMTA3MiwgMTA3MywgMTA3NCwgMTA3NSwgMTA3NiwgMTA3NywgMTA3OCwgMTA3OSwgMTA4MCwgMTA4MSwgMTA4MiwgMTA4MywgMTA4NCwgMTA4NSwgMTA4NiwgMTA4NywgMTA4OCwgMTA4OSwgMTA5MCwgMTA5MSwgMTA5MiwgMTA5MywgMTA5NCwgMTA5NSwgMTA5NiwgMTA5NywgMTA5OCwgMTA5OSwgMTEwMCwgMTEwMSwgMTEwMiwgMTEwMywgMTEwNCwgMTEwNSwgMTEwNiwgMTEwNywgMTEwOCwgMTEwOSwgMTExMCwgMTExMSwgMTExMiwgMTExMywgMTExNCwgMTExNSwgMTExNiwgMTExNywgMTExOCwgMTExOSwgMTEzOCwgMTEzOSwgMTE2OCwgMTE2OSwgNzgwOCwgNzgwOSwgNzgxMCwgNzgxMSwgNzgxMiwgNzgxMywgNzkyMiwgNzkyMywgODIwOCwgODIwOSwgODIxMSwgODIxMiwgODIxMywgODIxNSwgODIxNiwgODIxNywgODIxOCwgODIxOSwgODIyMCwgODIyMSwgODIyMiwgODIyNCwgODIyNSwgODIyNiwgODIzMCwgODI0MCwgODI0MiwgODI0MywgODI0OSwgODI1MCwgODI1MiwgODI1NCwgODI2MCwgODMxOSwgODM1NSwgODM1NiwgODM1OSwgODM2NCwgODQ1MywgODQ2NywgODQ3MCwgODQ4MiwgODQ4NiwgODQ5NCwgODUzOSwgODU0MCwgODU0MSwgODU0MiwgODU5MiwgODU5MywgODU5NCwgODU5NSwgODU5NiwgODU5NywgODYxNiwgODcwNiwgODcxMCwgODcxOSwgODcyMSwgODcyMiwgODczMCwgODczNCwgODczNSwgODc0NSwgODc0NywgODc3NiwgODgwMCwgODgwMSwgODgwNCwgODgwNSwgODk2MiwgODk3NiwgODk5MiwgODk5MywgOTQ3MiwgOTQ3NCwgOTQ4NCwgOTQ4OCwgOTQ5MiwgOTQ5NiwgOTUwMCwgOTUwOCwgOTUxNiwgOTUyNCwgOTUzMiwgOTU1MiwgOTU1MywgOTU1NCwgOTU1NSwgOTU1NiwgOTU1NywgOTU1OCwgOTU1OSwgOTU2MCwgOTU2MSwgOTU2MiwgOTU2MywgOTU2NCwgOTU2NSwgOTU2NiwgOTU2NywgOTU2OCwgOTU2OSwgOTU3MCwgOTU3MSwgOTU3MiwgOTU3MywgOTU3NCwgOTU3NSwgOTU3NiwgOTU3NywgOTU3OCwgOTU3OSwgOTU4MCwgOTYwMCwgOTYwNCwgOTYwOCwgOTYxMiwgOTYxNiwgOTYxNywgOTYxOCwgOTYxOSwgOTYzMiwgOTYzMywgOTY0MiwgOTY0MywgOTY0NCwgOTY1MCwgOTY1OCwgOTY2MCwgOTY2OCwgOTY3NCwgOTY3NSwgOTY3OSwgOTY4OCwgOTY4OSwgOTcwMiwgOTc4NiwgOTc4NywgOTc4OCwgOTc5MiwgOTc5NCwgOTgyNCwgOTgyNywgOTgyOSwgOTgzMCwgOTgzNCwgOTgzNSwgOTgzNiwgNjE0NDEsIDYxNDQyLCA2MTQ0NSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xXTsKY29uc3QgTGliZXJhdGlvblNhbnNSZWd1bGFyV2lkdGhzID0gWzM2NSwgMCwgMzMzLCAyNzgsIDI3OCwgMzU1LCA1NTYsIDU1NiwgODg5LCA2NjcsIDE5MSwgMzMzLCAzMzMsIDM4OSwgNTg0LCAyNzgsIDMzMywgMjc4LCAyNzgsIDU1NiwgNTU2LCA1NTYsIDU1NiwgNTU2LCA1NTYsIDU1NiwgNTU2LCA1NTYsIDU1NiwgMjc4LCAyNzgsIDU4NCwgNTg0LCA1ODQsIDU1NiwgMTAxNSwgNjY3LCA2NjcsIDcyMiwgNzIyLCA2NjcsIDYxMSwgNzc4LCA3MjIsIDI3OCwgNTAwLCA2NjcsIDU1NiwgODMzLCA3MjIsIDc3OCwgNjY3LCA3NzgsIDcyMiwgNjY3LCA2MTEsIDcyMiwgNjY3LCA5NDQsIDY2NywgNjY3LCA2MTEsIDI3OCwgMjc4LCAyNzgsIDQ2OSwgNTU2LCAzMzMsIDU1NiwgNTU2LCA1MDAsIDU1NiwgNTU2LCAyNzgsIDU1NiwgNTU2LCAyMjIsIDIyMiwgNTAwLCAyMjIsIDgzMywgNTU2LCA1NTYsIDU1NiwgNTU2LCAzMzMsIDUwMCwgMjc4LCA1NTYsIDUwMCwgNzIyLCA1MDAsIDUwMCwgNTAwLCAzMzQsIDI2MCwgMzM0LCA1ODQsIDMzMywgNTU2LCA1NTYsIDU1NiwgNTU2LCAyNjAsIDU1NiwgMzMzLCA3MzcsIDM3MCwgNTU2LCA1ODQsIDczNywgNTUyLCA0MDAsIDU0OSwgMzMzLCAzMzMsIDMzMywgNTc2LCA1MzcsIDI3OCwgMzMzLCAzMzMsIDM2NSwgNTU2LCA4MzQsIDgzNCwgODM0LCA2MTEsIDY2NywgNjY3LCA2NjcsIDY2NywgNjY3LCA2NjcsIDEwMDAsIDcyMiwgNjY3LCA2NjcsIDY2NywgNjY3LCAyNzgsIDI3OCwgMjc4LCAyNzgsIDcyMiwgNzIyLCA3NzgsIDc3OCwgNzc4LCA3NzgsIDc3OCwgNTg0LCA3NzgsIDcyMiwgNzIyLCA3MjIsIDcyMiwgNjY3LCA2NjcsIDYxMSwgNTU2LCA1NTYsIDU1NiwgNTU2LCA1NTYsIDU1NiwgODg5LCA1MDAsIDU1NiwgNTU2LCA1NTYsIDU1NiwgMjc4LCAyNzgsIDI3OCwgMjc4LCA1NTYsIDU1NiwgNTU2LCA1NTYsIDU1NiwgNTU2LCA1NTYsIDU0OSwgNjExLCA1NTYsIDU1NiwgNTU2LCA1NTYsIDUwMCwgNTU2LCA1MDAsIDY2NywgNTU2LCA2NjcsIDU1NiwgNjY3LCA1NTYsIDcyMiwgNTAwLCA3MjIsIDUwMCwgNzIyLCA1MDAsIDcyMiwgNTAwLCA3MjIsIDYxNSwgNzIyLCA1NTYsIDY2NywgNTU2LCA2NjcsIDU1NiwgNjY3LCA1NTYsIDY2NywgNTU2LCA2NjcsIDU1NiwgNzc4LCA1NTYsIDc3OCwgNTU2LCA3NzgsIDU1NiwgNzc4LCA1NTYsIDcyMiwgNTU2LCA3MjIsIDU1NiwgMjc4LCAyNzgsIDI3OCwgMjc4LCAyNzgsIDI3OCwgMjc4LCAyMjIsIDI3OCwgMjc4LCA3MzUsIDQ0NCwgNTAwLCAyMjIsIDY2NywgNTAwLCA1MDAsIDU1NiwgMjIyLCA1NTYsIDIyMiwgNTU2LCAyOTIsIDU1NiwgMzM0LCA1NTYsIDIyMiwgNzIyLCA1NTYsIDcyMiwgNTU2LCA3MjIsIDU1NiwgNjA0LCA3MjMsIDU1NiwgNzc4LCA1NTYsIDc3OCwgNTU2LCA3NzgsIDU1NiwgMTAwMCwgOTQ0LCA3MjIsIDMzMywgNzIyLCAzMzMsIDcyMiwgMzMzLCA2NjcsIDUwMCwgNjY3LCA1MDAsIDY2NywgNTAwLCA2NjcsIDUwMCwgNjExLCAyNzgsIDYxMSwgMzc1LCA2MTEsIDI3OCwgNzIyLCA1NTYsIDcyMiwgNTU2LCA3MjIsIDU1NiwgNzIyLCA1NTYsIDcyMiwgNTU2LCA3MjIsIDU1NiwgOTQ0LCA3MjIsIDY2NywgNTAwLCA2NjcsIDYxMSwgNTAwLCA2MTEsIDUwMCwgNjExLCA1MDAsIDIyMiwgNTU2LCA2NjcsIDU1NiwgMTAwMCwgODg5LCA3NzgsIDYxMSwgNjY3LCA1MDAsIDYxMSwgMjc4LCAzMzMsIDMzMywgMzMzLCAzMzMsIDMzMywgMzMzLCAzMzMsIDMzMywgMzMzLCAzMzMsIDMzMywgNjY3LCAyNzgsIDc4NCwgODM4LCAzODQsIDc3NCwgODU1LCA3NTIsIDIyMiwgNjY3LCA2NjcsIDU1MSwgNjY4LCA2NjcsIDYxMSwgNzIyLCA3NzgsIDI3OCwgNjY3LCA2NjgsIDgzMywgNzIyLCA2NTAsIDc3OCwgNzIyLCA2NjcsIDYxOCwgNjExLCA2NjcsIDc5OCwgNjY3LCA4MzUsIDc0OCwgMjc4LCA2NjcsIDU3OCwgNDQ2LCA1NTYsIDIyMiwgNTQ3LCA1NzgsIDU3NSwgNTAwLCA1NTcsIDQ0NiwgNDQxLCA1NTYsIDU1NiwgMjIyLCA1MDAsIDUwMCwgNTc2LCA1MDAsIDQ0OCwgNTU2LCA2OTAsIDU2OSwgNDgyLCA2MTcsIDM5NSwgNTQ3LCA2NDgsIDUyNSwgNzEzLCA3ODEsIDIyMiwgNTQ3LCA1NTYsIDU0NywgNzgxLCA2NjcsIDY2NywgODY1LCA1NDIsIDcxOSwgNjY3LCAyNzgsIDI3OCwgNTAwLCAxMDU3LCAxMDEwLCA4NTQsIDU4MywgNzIyLCA2MzUsIDcxOSwgNjY3LCA2NTYsIDY2NywgNTQyLCA2NzcsIDY2NywgOTIzLCA2MDQsIDcxOSwgNzE5LCA1ODMsIDY1NiwgODMzLCA3MjIsIDc3OCwgNzE5LCA2NjcsIDcyMiwgNjExLCA2MzUsIDc2MCwgNjY3LCA3NDAsIDY2NywgOTE3LCA5MzgsIDc5MiwgODg1LCA2NTYsIDcxOSwgMTAxMCwgNzIyLCA1NTYsIDU3MywgNTMxLCAzNjUsIDU4MywgNTU2LCA2NjksIDQ1OCwgNTU5LCA1NTksIDQzOCwgNTgzLCA2ODgsIDU1MiwgNTU2LCA1NDIsIDU1NiwgNTAwLCA0NTgsIDUwMCwgODIzLCA1MDAsIDU3MywgNTIxLCA4MDIsIDgyMywgNjI1LCA3MTksIDUyMSwgNTEwLCA3NTAsIDU0MiwgNTU2LCA1NTYsIDU1NiwgMzY1LCA1MTAsIDUwMCwgMjIyLCAyNzgsIDIyMiwgOTA2LCA4MTIsIDU1NiwgNDM4LCA1NTksIDUwMCwgNTUyLCA3NzgsIDU1NiwgNDg5LCA0MTEsIDk0NCwgNzIyLCA5NDQsIDcyMiwgOTQ0LCA3MjIsIDY2NywgNTAwLCAzMzMsIDMzMywgNTU2LCAxMDAwLCAxMDAwLCA1NTIsIDIyMiwgMjIyLCAyMjIsIDIyMiwgMzMzLCAzMzMsIDMzMywgNTU2LCA1NTYsIDM1MCwgMTAwMCwgMTAwMCwgMTg4LCAzNTQsIDMzMywgMzMzLCA1MDAsIDMzMywgMTY3LCAzNjUsIDU1NiwgNTU2LCAxMDk0LCA1NTYsIDg4NSwgMzIzLCAxMDczLCAxMDAwLCA3NjgsIDYwMCwgODM0LCA4MzQsIDgzNCwgODM0LCAxMDAwLCA1MDAsIDEwMDAsIDUwMCwgMTAwMCwgNTAwLCA1MDAsIDQ5NCwgNjEyLCA4MjMsIDcxMywgNTg0LCA1NDksIDcxMywgOTc5LCA3MTksIDI3NCwgNTQ5LCA1NDksIDU4MywgNTQ5LCA1NDksIDYwNCwgNTg0LCA2MDQsIDYwNCwgNzA4LCA2MjUsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcwOCwgNzA4LCA3MDgsIDcyOSwgNjA0LCA2MDQsIDM1NCwgMzU0LCAxMDAwLCA5OTAsIDk5MCwgOTkwLCA5OTAsIDQ5NCwgNjA0LCA2MDQsIDYwNCwgNjA0LCAzNTQsIDEwMjEsIDEwNTIsIDkxNywgNzUwLCA3NTAsIDUzMSwgNjU2LCA1OTQsIDUxMCwgNTAwLCA3NTAsIDc1MCwgNTAwLCA1MDAsIDMzMywgMzMzLCAzMzMsIDMzMywgMzMzLCAzMzMsIDMzMywgMzMzLCAyMjIsIDIyMiwgMjk0LCAyOTQsIDMyNCwgMzI0LCAzMTYsIDMyOCwgMzk4LCAyODVdOwpjb25zdCBMaWJlcmF0aW9uU2Fuc1JlZ3VsYXJNYXBwaW5nID0gWy0xLCAtMSwgLTEsIDMyLCAzMywgMzQsIDM1LCAzNiwgMzcsIDM4LCAzOSwgNDAsIDQxLCA0MiwgNDMsIDQ0LCA0NSwgNDYsIDQ3LCA0OCwgNDksIDUwLCA1MSwgNTIsIDUzLCA1NCwgNTUsIDU2LCA1NywgNTgsIDU5LCA2MCwgNjEsIDYyLCA2MywgNjQsIDY1LCA2NiwgNjcsIDY4LCA2OSwgNzAsIDcxLCA3MiwgNzMsIDc0LCA3NSwgNzYsIDc3LCA3OCwgNzksIDgwLCA4MSwgODIsIDgzLCA4NCwgODUsIDg2LCA4NywgODgsIDg5LCA5MCwgOTEsIDkyLCA5MywgOTQsIDk1LCA5NiwgOTcsIDk4LCA5OSwgMTAwLCAxMDEsIDEwMiwgMTAzLCAxMDQsIDEwNSwgMTA2LCAxMDcsIDEwOCwgMTA5LCAxMTAsIDExMSwgMTEyLCAxMTMsIDExNCwgMTE1LCAxMTYsIDExNywgMTE4LCAxMTksIDEyMCwgMTIxLCAxMjIsIDEyMywgMTI0LCAxMjUsIDEyNiwgMTYxLCAxNjIsIDE2MywgMTY0LCAxNjUsIDE2NiwgMTY3LCAxNjgsIDE2OSwgMTcwLCAxNzEsIDE3MiwgMTc0LCAxNzUsIDE3NiwgMTc3LCAxNzgsIDE3OSwgMTgwLCAxODEsIDE4MiwgMTgzLCAxODQsIDE4NSwgMTg2LCAxODcsIDE4OCwgMTg5LCAxOTAsIDE5MSwgMTkyLCAxOTMsIDE5NCwgMTk1LCAxOTYsIDE5NywgMTk4LCAxOTksIDIwMCwgMjAxLCAyMDIsIDIwMywgMjA0LCAyMDUsIDIwNiwgMjA3LCAyMDgsIDIwOSwgMjEwLCAyMTEsIDIxMiwgMjEzLCAyMTQsIDIxNSwgMjE2LCAyMTcsIDIxOCwgMjE5LCAyMjAsIDIyMSwgMjIyLCAyMjMsIDIyNCwgMjI1LCAyMjYsIDIyNywgMjI4LCAyMjksIDIzMCwgMjMxLCAyMzIsIDIzMywgMjM0LCAyMzUsIDIzNiwgMjM3LCAyMzgsIDIzOSwgMjQwLCAyNDEsIDI0MiwgMjQzLCAyNDQsIDI0NSwgMjQ2LCAyNDcsIDI0OCwgMjQ5LCAyNTAsIDI1MSwgMjUyLCAyNTMsIDI1NCwgMjU1LCAyNTYsIDI1NywgMjU4LCAyNTksIDI2MCwgMjYxLCAyNjIsIDI2MywgMjY0LCAyNjUsIDI2NiwgMjY3LCAyNjgsIDI2OSwgMjcwLCAyNzEsIDI3MiwgMjczLCAyNzQsIDI3NSwgMjc2LCAyNzcsIDI3OCwgMjc5LCAyODAsIDI4MSwgMjgyLCAyODMsIDI4NCwgMjg1LCAyODYsIDI4NywgMjg4LCAyODksIDI5MCwgMjkxLCAyOTIsIDI5MywgMjk0LCAyOTUsIDI5NiwgMjk3LCAyOTgsIDI5OSwgMzAwLCAzMDEsIDMwMiwgMzAzLCAzMDQsIDMwNSwgMzA2LCAzMDcsIDMwOCwgMzA5LCAzMTAsIDMxMSwgMzEyLCAzMTMsIDMxNCwgMzE1LCAzMTYsIDMxNywgMzE4LCAzMTksIDMyMCwgMzIxLCAzMjIsIDMyMywgMzI0LCAzMjUsIDMyNiwgMzI3LCAzMjgsIDMyOSwgMzMwLCAzMzEsIDMzMiwgMzMzLCAzMzQsIDMzNSwgMzM2LCAzMzcsIDMzOCwgMzM5LCAzNDAsIDM0MSwgMzQyLCAzNDMsIDM0NCwgMzQ1LCAzNDYsIDM0NywgMzQ4LCAzNDksIDM1MCwgMzUxLCAzNTIsIDM1MywgMzU0LCAzNTUsIDM1NiwgMzU3LCAzNTgsIDM1OSwgMzYwLCAzNjEsIDM2MiwgMzYzLCAzNjQsIDM2NSwgMzY2LCAzNjcsIDM2OCwgMzY5LCAzNzAsIDM3MSwgMzcyLCAzNzMsIDM3NCwgMzc1LCAzNzYsIDM3NywgMzc4LCAzNzksIDM4MCwgMzgxLCAzODIsIDM4MywgNDAyLCA1MDYsIDUwNywgNTA4LCA1MDksIDUxMCwgNTExLCA1MzYsIDUzNywgNTM4LCA1MzksIDcxMCwgNzExLCA3MTMsIDcyOCwgNzI5LCA3MzAsIDczMSwgNzMyLCA3MzMsIDkwMCwgOTAxLCA5MDIsIDkwMywgOTA0LCA5MDUsIDkwNiwgOTA4LCA5MTAsIDkxMSwgOTEyLCA5MTMsIDkxNCwgOTE1LCA5MTYsIDkxNywgOTE4LCA5MTksIDkyMCwgOTIxLCA5MjIsIDkyMywgOTI0LCA5MjUsIDkyNiwgOTI3LCA5MjgsIDkyOSwgOTMxLCA5MzIsIDkzMywgOTM0LCA5MzUsIDkzNiwgOTM3LCA5MzgsIDkzOSwgOTQwLCA5NDEsIDk0MiwgOTQzLCA5NDQsIDk0NSwgOTQ2LCA5NDcsIDk0OCwgOTQ5LCA5NTAsIDk1MSwgOTUyLCA5NTMsIDk1NCwgOTU1LCA5NTYsIDk1NywgOTU4LCA5NTksIDk2MCwgOTYxLCA5NjIsIDk2MywgOTY0LCA5NjUsIDk2NiwgOTY3LCA5NjgsIDk2OSwgOTcwLCA5NzEsIDk3MiwgOTczLCA5NzQsIDEwMjQsIDEwMjUsIDEwMjYsIDEwMjcsIDEwMjgsIDEwMjksIDEwMzAsIDEwMzEsIDEwMzIsIDEwMzMsIDEwMzQsIDEwMzUsIDEwMzYsIDEwMzcsIDEwMzgsIDEwMzksIDEwNDAsIDEwNDEsIDEwNDIsIDEwNDMsIDEwNDQsIDEwNDUsIDEwNDYsIDEwNDcsIDEwNDgsIDEwNDksIDEwNTAsIDEwNTEsIDEwNTIsIDEwNTMsIDEwNTQsIDEwNTUsIDEwNTYsIDEwNTcsIDEwNTgsIDEwNTksIDEwNjAsIDEwNjEsIDEwNjIsIDEwNjMsIDEwNjQsIDEwNjUsIDEwNjYsIDEwNjcsIDEwNjgsIDEwNjksIDEwNzAsIDEwNzEsIDEwNzIsIDEwNzMsIDEwNzQsIDEwNzUsIDEwNzYsIDEwNzcsIDEwNzgsIDEwNzksIDEwODAsIDEwODEsIDEwODIsIDEwODMsIDEwODQsIDEwODUsIDEwODYsIDEwODcsIDEwODgsIDEwODksIDEwOTAsIDEwOTEsIDEwOTIsIDEwOTMsIDEwOTQsIDEwOTUsIDEwOTYsIDEwOTcsIDEwOTgsIDEwOTksIDExMDAsIDExMDEsIDExMDIsIDExMDMsIDExMDQsIDExMDUsIDExMDYsIDExMDcsIDExMDgsIDExMDksIDExMTAsIDExMTEsIDExMTIsIDExMTMsIDExMTQsIDExMTUsIDExMTYsIDExMTcsIDExMTgsIDExMTksIDExMzgsIDExMzksIDExNjgsIDExNjksIDc4MDgsIDc4MDksIDc4MTAsIDc4MTEsIDc4MTIsIDc4MTMsIDc5MjIsIDc5MjMsIDgyMDgsIDgyMDksIDgyMTEsIDgyMTIsIDgyMTMsIDgyMTUsIDgyMTYsIDgyMTcsIDgyMTgsIDgyMTksIDgyMjAsIDgyMjEsIDgyMjIsIDgyMjQsIDgyMjUsIDgyMjYsIDgyMzAsIDgyNDAsIDgyNDIsIDgyNDMsIDgyNDksIDgyNTAsIDgyNTIsIDgyNTQsIDgyNjAsIDgzMTksIDgzNTUsIDgzNTYsIDgzNTksIDgzNjQsIDg0NTMsIDg0NjcsIDg0NzAsIDg0ODIsIDg0ODYsIDg0OTQsIDg1MzksIDg1NDAsIDg1NDEsIDg1NDIsIDg1OTIsIDg1OTMsIDg1OTQsIDg1OTUsIDg1OTYsIDg1OTcsIDg2MTYsIDg3MDYsIDg3MTAsIDg3MTksIDg3MjEsIDg3MjIsIDg3MzAsIDg3MzQsIDg3MzUsIDg3NDUsIDg3NDcsIDg3NzYsIDg4MDAsIDg4MDEsIDg4MDQsIDg4MDUsIDg5NjIsIDg5NzYsIDg5OTIsIDg5OTMsIDk0NzIsIDk0NzQsIDk0ODQsIDk0ODgsIDk0OTIsIDk0OTYsIDk1MDAsIDk1MDgsIDk1MTYsIDk1MjQsIDk1MzIsIDk1NTIsIDk1NTMsIDk1NTQsIDk1NTUsIDk1NTYsIDk1NTcsIDk1NTgsIDk1NTksIDk1NjAsIDk1NjEsIDk1NjIsIDk1NjMsIDk1NjQsIDk1NjUsIDk1NjYsIDk1NjcsIDk1NjgsIDk1NjksIDk1NzAsIDk1NzEsIDk1NzIsIDk1NzMsIDk1NzQsIDk1NzUsIDk1NzYsIDk1NzcsIDk1NzgsIDk1NzksIDk1ODAsIDk2MDAsIDk2MDQsIDk2MDgsIDk2MTIsIDk2MTYsIDk2MTcsIDk2MTgsIDk2MTksIDk2MzIsIDk2MzMsIDk2NDIsIDk2NDMsIDk2NDQsIDk2NTAsIDk2NTgsIDk2NjAsIDk2NjgsIDk2NzQsIDk2NzUsIDk2NzksIDk2ODgsIDk2ODksIDk3MDIsIDk3ODYsIDk3ODcsIDk3ODgsIDk3OTIsIDk3OTQsIDk4MjQsIDk4MjcsIDk4MjksIDk4MzAsIDk4MzQsIDk4MzUsIDk4MzYsIDYxNDQxLCA2MTQ0MiwgNjE0NDUsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMV07Cgo7Ly8gLi9zcmMvY29yZS9teXJpYWRwcm9fZmFjdG9ycy5qcwpjb25zdCBNeXJpYWRQcm9Cb2xkRmFjdG9ycyA9IFsxLjM2ODk4LCAxLCAxLCAwLjcyNzA2LCAwLjgwNDc5LCAwLjgzNzM0LCAwLjk4ODk0LCAwLjk5NzkzLCAwLjk4OTcsIDAuOTM4ODQsIDAuODYyMDksIDAuOTQyOTIsIDAuOTQyOTIsIDEuMTY2NjEsIDEuMDIwNTgsIDAuOTM1ODIsIDAuOTY2OTQsIDAuOTM1ODIsIDEuMTkxMzcsIDAuOTk3OTMsIDAuOTk3OTMsIDAuOTk3OTMsIDAuOTk3OTMsIDAuOTk3OTMsIDAuOTk3OTMsIDAuOTk3OTMsIDAuOTk3OTMsIDAuOTk3OTMsIDAuOTk3OTMsIDAuNzgwNzYsIDAuNzgwNzYsIDEuMDIwNTgsIDEuMDIwNTgsIDEuMDIwNTgsIDAuNzI4NTEsIDAuNzg5NjYsIDAuOTA4MzgsIDAuODM2MzcsIDAuODIzOTEsIDAuOTYzNzYsIDAuODAwNjEsIDAuODYyNzUsIDAuODc2OCwgMC45NTQwNywgMS4wMjU4LCAwLjczOTAxLCAwLjg1MDIyLCAwLjgzNjU1LCAxLjAxNTYsIDAuOTU1NDYsIDAuOTIxNzksIDAuODcxMDcsIDAuOTIxNzksIDAuODIxMTQsIDAuODA5NiwgMC44OTcxMywgMC45NDQzOCwgMC45NTM1MywgMC45NDA4MywgMC45MTkwNSwgMC45MDQwNiwgMC45NDQ2LCAwLjk0MjkyLCAxLjE4Nzc3LCAwLjk0MjkyLCAxLjAyMDU4LCAwLjg5OTAzLCAwLjkwMDg4LCAwLjk0OTM4LCAwLjk3ODk4LCAwLjgxMDkzLCAwLjk3NTcxLCAwLjk0OTM4LCAxLjAyNCwgMC45NTc3LCAwLjk1OTMzLCAwLjk4NjIxLCAxLjA0NzQsIDAuOTc0NTUsIDAuOTg5ODEsIDAuOTY3MiwgMC45NTkzMywgMC45NDQ2LCAwLjk3ODk4LCAwLjk3NDA3LCAwLjk3NjQ2LCAwLjc4MDM2LCAxLjEwMjA4LCAwLjk1NDQyLCAwLjk1Mjk4LCAwLjk3NTc5LCAwLjkzMzIsIDAuOTQwMzksIDAuOTM4LCAwLjgwNjg3LCAxLjAxMTQ5LCAwLjgwNjg3LCAxLjAyMDU4LCAwLjgwNDc5LCAwLjk5NzkzLCAwLjk5NzkzLCAwLjk5NzkzLCAwLjk5NzkzLCAxLjAxMTQ5LCAxLjAwODcyLCAwLjkwMDg4LCAwLjkxODgyLCAxLjAyMTMsIDAuODM2MSwgMS4wMjA1OCwgMC42MjI5NSwgMC41NDMyNCwgMC44OTAyMiwgMS4wODU5NSwgMSwgMSwgMC45MDA4OCwgMSwgMC45NzQ1NSwgMC45MzU4MiwgMC45MDA4OCwgMSwgMS4wNTY4NiwgMC44MzYxLCAwLjk5NjQyLCAwLjk5NjQyLCAwLjk5NjQyLCAwLjcyODUxLCAwLjkwODM4LCAwLjkwODM4LCAwLjkwODM4LCAwLjkwODM4LCAwLjkwODM4LCAwLjkwODM4LCAwLjg2OCwgMC44MjM5MSwgMC44MDA2MSwgMC44MDA2MSwgMC44MDA2MSwgMC44MDA2MSwgMS4wMjU4LCAxLjAyNTgsIDEuMDI1OCwgMS4wMjU4LCAwLjk3NDg0LCAwLjk1NTQ2LCAwLjkyMTc5LCAwLjkyMTc5LCAwLjkyMTc5LCAwLjkyMTc5LCAwLjkyMTc5LCAxLjAyMDU4LCAwLjkyMTc5LCAwLjk0NDM4LCAwLjk0NDM4LCAwLjk0NDM4LCAwLjk0NDM4LCAwLjkwNDA2LCAwLjg2OTU4LCAwLjk4MjI1LCAwLjk0OTM4LCAwLjk0OTM4LCAwLjk0OTM4LCAwLjk0OTM4LCAwLjk0OTM4LCAwLjk0OTM4LCAwLjkwMzEsIDAuODEwOTMsIDAuOTQ5MzgsIDAuOTQ5MzgsIDAuOTQ5MzgsIDAuOTQ5MzgsIDAuOTg2MjEsIDAuOTg2MjEsIDAuOTg2MjEsIDAuOTg2MjEsIDAuOTM5NjksIDAuOTU5MzMsIDAuOTQ0NiwgMC45NDQ2LCAwLjk0NDYsIDAuOTQ0NiwgMC45NDQ2LCAxLjA4NTk1LCAwLjk0NDYsIDAuOTU0NDIsIDAuOTU0NDIsIDAuOTU0NDIsIDAuOTU0NDIsIDAuOTQwMzksIDAuOTc4OTgsIDAuOTQwMzksIDAuOTA4MzgsIDAuOTQ5MzgsIDAuOTA4MzgsIDAuOTQ5MzgsIDAuOTA4MzgsIDAuOTQ5MzgsIDAuODIzOTEsIDAuODEwOTMsIDAuODIzOTEsIDAuODEwOTMsIDAuODIzOTEsIDAuODEwOTMsIDAuODIzOTEsIDAuODEwOTMsIDAuOTYzNzYsIDAuODQzMTMsIDAuOTc0ODQsIDAuOTc1NzEsIDAuODAwNjEsIDAuOTQ5MzgsIDAuODAwNjEsIDAuOTQ5MzgsIDAuODAwNjEsIDAuOTQ5MzgsIDAuODAwNjEsIDAuOTQ5MzgsIDAuODAwNjEsIDAuOTQ5MzgsIDAuODc2OCwgMC45NTc3LCAwLjg3NjgsIDAuOTU3NywgMC44NzY4LCAwLjk1NzcsIDEsIDEsIDAuOTU0MDcsIDAuOTU5MzMsIDAuOTcwNjksIDAuOTU5MzMsIDEuMDI1OCwgMC45ODYyMSwgMS4wMjU4LCAwLjk4NjIxLCAxLjAyNTgsIDAuOTg2MjEsIDEuMDI1OCwgMC45ODYyMSwgMS4wMjU4LCAwLjk4NjIxLCAwLjg4NywgMS4wMTU5MSwgMC43MzkwMSwgMS4wNDc0LCAxLCAxLCAwLjk3NDU1LCAwLjgzNjU1LCAwLjk4OTgxLCAxLCAxLCAwLjgzNjU1LCAwLjczOTc3LCAwLjgzNjU1LCAwLjczOTAzLCAwLjg0NjM4LCAxLjAzMywgMC45NTU0NiwgMC45NTkzMywgMSwgMSwgMC45NTU0NiwgMC45NTkzMywgMC44MjcxLCAwLjk1NDE3LCAwLjk1OTMzLCAwLjkyMTc5LCAwLjk0NDYsIDAuOTIxNzksIDAuOTQ0NiwgMC45MjE3OSwgMC45NDQ2LCAwLjkzNiwgMC45MTk2NCwgMC44MjExNCwgMC45NzY0NiwgMSwgMSwgMC44MjExNCwgMC45NzY0NiwgMC44MDk2LCAwLjc4MDM2LCAwLjgwOTYsIDAuNzgwMzYsIDEsIDEsIDAuODA5NiwgMC43ODAzNiwgMSwgMSwgMC44OTcxMywgMC43NzQ1MiwgMC44OTcxMywgMS4xMDIwOCwgMC45NDQzOCwgMC45NTQ0MiwgMC45NDQzOCwgMC45NTQ0MiwgMC45NDQzOCwgMC45NTQ0MiwgMC45NDQzOCwgMC45NTQ0MiwgMC45NDQzOCwgMC45NTQ0MiwgMC45NDQzOCwgMC45NTQ0MiwgMC45NDA4MywgMC45NzU3OSwgMC45MDQwNiwgMC45NDAzOSwgMC45MDQwNiwgMC45NDQ2LCAwLjkzOCwgMC45NDQ2LCAwLjkzOCwgMC45NDQ2LCAwLjkzOCwgMSwgMC45OTc5MywgMC45MDgzOCwgMC45NDkzOCwgMC44NjgsIDAuOTAzMSwgMC45MjE3OSwgMC45NDQ2LCAxLCAxLCAwLjg5NzEzLCAxLjEwMjA4LCAwLjkwMDg4LCAwLjkwMDg4LCAwLjkwMDg4LCAwLjkwMDg4LCAwLjkwMDg4LCAwLjkwMDg4LCAwLjkwMDg4LCAwLjkwMDg4LCAwLjkwMDg4LCAwLjkwOTg5LCAwLjkzNTgsIDAuOTE5NDUsIDAuODMxODEsIDAuNzUyNjEsIDAuODc5OTIsIDAuODI5NzYsIDAuOTYwMzQsIDAuODM2ODksIDAuOTcyNjgsIDEuMDA3OCwgMC45MDgzOCwgMC44MzYzNywgMC44MDE5LCAwLjkwMTU3LCAwLjgwMDYxLCAwLjk0NDYsIDAuOTU0MDcsIDAuOTI0MzYsIDEuMDI1OCwgMC44NTAyMiwgMC45NzE1MywgMS4wMTU2LCAwLjk1NTQ2LCAwLjg5MTkyLCAwLjkyMTc5LCAwLjkyMzYxLCAwLjg3MTA3LCAwLjk2MzE4LCAwLjg5NzEzLCAwLjkzNzA0LCAwLjk1NjM4LCAwLjkxOTA1LCAwLjkxNzA5LCAwLjkyNzk2LCAxLjAyNTgsIDAuOTM3MDQsIDAuOTQ4MzYsIDEuMDM3MywgMC45NTkzMywgMS4wMDc4LCAwLjk1ODcxLCAwLjk0ODM2LCAwLjk2MTc0LCAwLjkyNjAxLCAwLjk0OTgsIDAuOTg2MDcsIDAuOTU3NzYsIDAuOTU5MzMsIDEuMDU0NTMsIDEuMDA3OCwgMC45ODI3NSwgMC45MzE0LCAwLjk1NjE3LCAwLjkxNzAxLCAxLjA1OTkzLCAwLjk0NDYsIDAuNzgzNjcsIDAuOTU1MywgMSwgMC44NjgzMiwgMS4wMTI4LCAwLjk1ODcxLCAwLjk5Mzk0LCAwLjg3NTQ4LCAwLjk2MzYxLCAwLjg2Nzc0LCAxLjAwNzgsIDAuOTU4NzEsIDAuOTQ0NiwgMC45NTg3MSwgMC44Njc3NCwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMC45NDA4MywgMC45NzU3OSwgMC45NDA4MywgMC45NzU3OSwgMC45NDA4MywgMC45NzU3OSwgMC45MDQwNiwgMC45NDAzOSwgMC45NjY5NCwgMSwgMC44OTkwMywgMSwgMSwgMSwgMC45MzU4MiwgMC45MzU4MiwgMC45MzU4MiwgMSwgMC45MDgsIDAuOTA4LCAwLjkxOCwgMC45NDIxOSwgMC45NDIxOSwgMC45NjU0NCwgMSwgMS4yODUsIDEsIDEsIDAuODEwNzksIDAuODEwNzksIDEsIDEsIDAuNzQ4NTQsIDEsIDEsIDEsIDEsIDAuOTk3OTMsIDEsIDEsIDEsIDAuNjUsIDEsIDEuMzYxNDUsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEuMTcxNzMsIDEsIDAuODA1MzUsIDAuNzYxNjksIDEuMDIwNTgsIDEuMDczMiwgMS4wNTQ4NiwgMSwgMSwgMS4zMDY5MiwgMS4wODU5NSwgMS4wODU5NSwgMSwgMS4wODU5NSwgMS4wODU5NSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMS4xNjE2MSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMV07CmNvbnN0IE15cmlhZFByb0JvbGRNZXRyaWNzID0gewogIGxpbmVIZWlnaHQ6IDEuMiwKICBsaW5lR2FwOiAwLjIKfTsKY29uc3QgTXlyaWFkUHJvQm9sZEl0YWxpY0ZhY3RvcnMgPSBbMS4zNjg5OCwgMSwgMSwgMC42NjIyNywgMC44MDc3OSwgMC44MTYyNSwgMC45NzI3NiwgMC45NzI3NiwgMC45NzczMywgMC45MjIyMiwgMC44MzI2NiwgMC45NDI5MiwgMC45NDI5MiwgMS4xNjE0OCwgMS4wMjA1OCwgMC45MzU4MiwgMC45NjY5NCwgMC45MzU4MiwgMS4xNzMzNywgMC45NzI3NiwgMC45NzI3NiwgMC45NzI3NiwgMC45NzI3NiwgMC45NzI3NiwgMC45NzI3NiwgMC45NzI3NiwgMC45NzI3NiwgMC45NzI3NiwgMC45NzI3NiwgMC43ODA3NiwgMC43ODA3NiwgMS4wMjA1OCwgMS4wMjA1OCwgMS4wMjA1OCwgMC43MTU0MSwgMC43NjgxMywgMC44NTU3NiwgMC44MDU5MSwgMC44MDcyOSwgMC45NDI5OSwgMC43NzUxMiwgMC44MzY1NSwgMC44NjUyMywgMC45MjIyMiwgMC45ODYyMSwgMC43MTc0MywgMC44MTY5OCwgMC43OTcyNiwgMC45ODU1OCwgMC45MjIyMiwgMC45MDYzNywgMC44MzgwOSwgMC45MDYzNywgMC44MDcyOSwgMC43NjQ2MywgMC44NjI3NSwgMC45MDY5OSwgMC45MTYwNSwgMC45MTU0LCAwLjg1MzA4LCAwLjg1NDU4LCAwLjkwNTMxLCAwLjk0MjkyLCAxLjIxMjk2LCAwLjk0MjkyLCAxLjAyMDU4LCAwLjg5OTAzLCAxLjE4NjE2LCAwLjk5NjEzLCAwLjkxNjc3LCAwLjc4MjE2LCAwLjkxNjc3LCAwLjkwMDgzLCAwLjk4Nzk2LCAwLjkxMzUsIDAuOTIxNjgsIDAuOTUzODEsIDAuOTg5ODEsIDAuOTUyOTgsIDAuOTUzODEsIDAuOTM0NTksIDAuOTIxNjgsIDAuOTE1MTMsIDAuOTIwMDQsIDAuOTE2NzcsIDAuOTUwNzcsIDAuNzQ4LCAxLjA0NTAyLCAwLjkxNjc3LCAwLjkyMDYxLCAwLjk0MjM2LCAwLjg5NTQ0LCAwLjg5MzY0LCAwLjksIDAuODA2ODcsIDAuODU3OCwgMC44MDY4NywgMS4wMjA1OCwgMC44MDc3OSwgMC45NzI3NiwgMC45NzI3NiwgMC45NzI3NiwgMC45NzI3NiwgMC44NTc4LCAwLjk5OTczLCAxLjE4NjE2LCAwLjkxMzM5LCAxLjA4MDc0LCAwLjgyODkxLCAxLjAyMDU4LCAwLjU1NTA5LCAwLjcxNTI2LCAwLjg5MDIyLCAxLjA4NTk1LCAxLCAxLCAxLjE4NjE2LCAxLCAwLjk2NzM2LCAwLjkzNTgyLCAxLjE4NjE2LCAxLCAxLjA0ODY0LCAwLjgyNzExLCAwLjk5MDQzLCAwLjk5MDQzLCAwLjk5MDQzLCAwLjcxNTQxLCAwLjg1NTc2LCAwLjg1NTc2LCAwLjg1NTc2LCAwLjg1NTc2LCAwLjg1NTc2LCAwLjg1NTc2LCAwLjg0NSwgMC44MDcyOSwgMC43NzUxMiwgMC43NzUxMiwgMC43NzUxMiwgMC43NzUxMiwgMC45ODYyMSwgMC45ODYyMSwgMC45ODYyMSwgMC45ODYyMSwgMC45NTk2MSwgMC45MjIyMiwgMC45MDYzNywgMC45MDYzNywgMC45MDYzNywgMC45MDYzNywgMC45MDYzNywgMS4wMjA1OCwgMC45MDI1MSwgMC45MDY5OSwgMC45MDY5OSwgMC45MDY5OSwgMC45MDY5OSwgMC44NTQ1OCwgMC44MzY1OSwgMC45NDk1MSwgMC45OTYxMywgMC45OTYxMywgMC45OTYxMywgMC45OTYxMywgMC45OTYxMywgMC45OTYxMywgMC44NTgxMSwgMC43ODIxNiwgMC45MDA4MywgMC45MDA4MywgMC45MDA4MywgMC45MDA4MywgMC45NTM4MSwgMC45NTM4MSwgMC45NTM4MSwgMC45NTM4MSwgMC45MTM1LCAwLjkyMTY4LCAwLjkxNTEzLCAwLjkxNTEzLCAwLjkxNTEzLCAwLjkxNTEzLCAwLjkxNTEzLCAxLjA4NTk1LCAwLjkxNjc3LCAwLjkxNjc3LCAwLjkxNjc3LCAwLjkxNjc3LCAwLjkxNjc3LCAwLjg5MzY0LCAwLjkyMzMyLCAwLjg5MzY0LCAwLjg1NTc2LCAwLjk5NjEzLCAwLjg1NTc2LCAwLjk5NjEzLCAwLjg1NTc2LCAwLjk5NjEzLCAwLjgwNzI5LCAwLjc4MjE2LCAwLjgwNzI5LCAwLjc4MjE2LCAwLjgwNzI5LCAwLjc4MjE2LCAwLjgwNzI5LCAwLjc4MjE2LCAwLjk0Mjk5LCAwLjc2NzgzLCAwLjk1OTYxLCAwLjkxNjc3LCAwLjc3NTEyLCAwLjkwMDgzLCAwLjc3NTEyLCAwLjkwMDgzLCAwLjc3NTEyLCAwLjkwMDgzLCAwLjc3NTEyLCAwLjkwMDgzLCAwLjc3NTEyLCAwLjkwMDgzLCAwLjg2NTIzLCAwLjkxMzUsIDAuODY1MjMsIDAuOTEzNSwgMC44NjUyMywgMC45MTM1LCAxLCAxLCAwLjkyMjIyLCAwLjkyMTY4LCAwLjkyMjIyLCAwLjkyMTY4LCAwLjk4NjIxLCAwLjk1MzgxLCAwLjk4NjIxLCAwLjk1MzgxLCAwLjk4NjIxLCAwLjk1MzgxLCAwLjk4NjIxLCAwLjk1MzgxLCAwLjk4NjIxLCAwLjk1MzgxLCAwLjg2MDM2LCAwLjk3MDk2LCAwLjcxNzQzLCAwLjk4OTgxLCAxLCAxLCAwLjk1Mjk4LCAwLjc5NzI2LCAwLjk1MzgxLCAxLCAxLCAwLjc5NzI2LCAwLjY4OTQsIDAuNzk3MjYsIDAuNzQzMjEsIDAuODE2OTEsIDEuMDAwNiwgMC45MjIyMiwgMC45MjE2OCwgMSwgMSwgMC45MjIyMiwgMC45MjE2OCwgMC43OTQ2NCwgMC45MjA5OCwgMC45MjE2OCwgMC45MDYzNywgMC45MTUxMywgMC45MDYzNywgMC45MTUxMywgMC45MDYzNywgMC45MTUxMywgMC45MDksIDAuODc1MTQsIDAuODA3MjksIDAuOTUwNzcsIDEsIDEsIDAuODA3MjksIDAuOTUwNzcsIDAuNzY0NjMsIDAuNzQ4LCAwLjc2NDYzLCAwLjc0OCwgMSwgMSwgMC43NjQ2MywgMC43NDgsIDEsIDEsIDAuODYyNzUsIDAuNzI2NTEsIDAuODYyNzUsIDEuMDQ1MDIsIDAuOTA2OTksIDAuOTE2NzcsIDAuOTA2OTksIDAuOTE2NzcsIDAuOTA2OTksIDAuOTE2NzcsIDAuOTA2OTksIDAuOTE2NzcsIDAuOTA2OTksIDAuOTE2NzcsIDAuOTA2OTksIDAuOTE2NzcsIDAuOTE1NCwgMC45NDIzNiwgMC44NTQ1OCwgMC44OTM2NCwgMC44NTQ1OCwgMC45MDUzMSwgMC45LCAwLjkwNTMxLCAwLjksIDAuOTA1MzEsIDAuOSwgMSwgMC45NzI3NiwgMC44NTU3NiwgMC45OTYxMywgMC44NDUsIDAuODU4MTEsIDAuOTAyNTEsIDAuOTE2NzcsIDEsIDEsIDAuODYyNzUsIDEuMDQ1MDIsIDEuMTg2MTYsIDEuMTg2MTYsIDEuMTg2MTYsIDEuMTg2MTYsIDEuMTg2MTYsIDEuMTg2MTYsIDEuMTg2MTYsIDEuMTg2MTYsIDEuMTg2MTYsIDEuMDA4OTksIDEuMzA2MjgsIDAuODU1NzYsIDAuODAxNzgsIDAuNjY4NjIsIDAuNzkyNywgMC42OTMyMywgMC44ODEyNywgMC43MjQ1OSwgMC44OTcxMSwgMC45NTM4MSwgMC44NTU3NiwgMC44MDU5MSwgMC43ODA1LCAwLjk0NzI5LCAwLjc3NTEyLCAwLjkwNTMxLCAwLjkyMjIyLCAwLjkwNjM3LCAwLjk4NjIxLCAwLjgxNjk4LCAwLjkyNjU1LCAwLjk4NTU4LCAwLjkyMjIyLCAwLjg1MzU5LCAwLjkwNjM3LCAwLjkwOTc2LCAwLjgzODA5LCAwLjk0NTIzLCAwLjg2Mjc1LCAwLjgzNTA5LCAwLjkzMTU3LCAwLjg1MzA4LCAwLjgzMzkyLCAwLjkyMzQ2LCAwLjk4NjIxLCAwLjgzNTA5LCAwLjkyODg2LCAwLjkxMzI0LCAwLjkyMTY4LCAwLjk1MzgxLCAwLjkwNjQ2LCAwLjkyODg2LCAwLjkwNTU3LCAwLjg2ODQ3LCAwLjkwMjc2LCAwLjkxMzI0LCAwLjg2ODQyLCAwLjkyMTY4LCAwLjk5NTMxLCAwLjk1MzgxLCAwLjkyMjQsIDAuODU0MDgsIDAuOTI2OTksIDAuODY4NDcsIDEuMDA1MSwgMC45MTUxMywgMC44MDQ4NywgMC45MzQ4MSwgMSwgMC44ODE1OSwgMS4wNTIxNCwgMC45MDY0NiwgMC45NzM1NSwgMC44MTUzOSwgMC44OTM5OCwgMC44NTkyMywgMC45NTM4MSwgMC45MDY0NiwgMC45MTUxMywgMC45MDY0NiwgMC44NTkyMywgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMC45MTU0LCAwLjk0MjM2LCAwLjkxNTQsIDAuOTQyMzYsIDAuOTE1NCwgMC45NDIzNiwgMC44NTQ1OCwgMC44OTM2NCwgMC45NjY5NCwgMSwgMC44OTkwMywgMSwgMSwgMSwgMC45MTc4MiwgMC45MTc4MiwgMC45MTc4MiwgMSwgMC44OTYsIDAuODk2LCAwLjg5NiwgMC45MzMyLCAwLjkzMzIsIDAuOTU5NzMsIDEsIDEuMjYsIDEsIDEsIDAuODA0NzksIDAuODAxNzgsIDEsIDEsIDAuODU2MzMsIDEsIDEsIDEsIDEsIDAuOTcyNzYsIDEsIDEsIDEsIDAuNjk4LCAxLCAxLjM2MTQ1LCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLjE0NTQyLCAxLCAwLjc5MTk5LCAwLjc4Njk0LCAxLjAyMDU4LCAxLjAzNDkzLCAxLjA1NDg2LCAxLCAxLCAxLjIzMDI2LCAxLjA4NTk1LCAxLjA4NTk1LCAxLCAxLjA4NTk1LCAxLjA4NTk1LCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLjIwMDA2LCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxXTsKY29uc3QgTXlyaWFkUHJvQm9sZEl0YWxpY01ldHJpY3MgPSB7CiAgbGluZUhlaWdodDogMS4yLAogIGxpbmVHYXA6IDAuMgp9Owpjb25zdCBNeXJpYWRQcm9JdGFsaWNGYWN0b3JzID0gWzEuMzY4OTgsIDEsIDEsIDAuNjU1MDcsIDAuODQ5NDMsIDAuODU2MzksIDAuODg0NjUsIDAuODg0NjUsIDAuODY5MzYsIDAuODgzMDcsIDAuODY5NDgsIDAuODUyODMsIDAuODUyODMsIDEuMDYzODMsIDEuMDIwNTgsIDAuNzU5NDUsIDAuOTIxOSwgMC43NTk0NSwgMS4xNzMzNywgMC44ODQ2NSwgMC44ODQ2NSwgMC44ODQ2NSwgMC44ODQ2NSwgMC44ODQ2NSwgMC44ODQ2NSwgMC44ODQ2NSwgMC44ODQ2NSwgMC44ODQ2NSwgMC44ODQ2NSwgMC43NTk0NSwgMC43NTk0NSwgMS4wMjA1OCwgMS4wMjA1OCwgMS4wMjA1OCwgMC42OTA0NiwgMC43MDkyNiwgMC44NTE1OCwgMC43NzgxMiwgMC43Njg1MiwgMC44OTU5MSwgMC43MDQ2NiwgMC43NjEyNSwgMC44MDA5NCwgMC44NjgyMiwgMC44Mzg2NCwgMC43MjgsIDAuNzcyMTIsIDAuNzk0NzUsIDAuOTM2MzcsIDAuODc1MTQsIDAuODU4OCwgMC43NjAxMywgMC44NTg4LCAwLjcyNDIxLCAwLjY5ODY2LCAwLjc3NTk4LCAwLjg1OTkxLCAwLjgwODExLCAwLjg3ODMyLCAwLjc4MTEyLCAwLjc3NTEyLCAwLjg1NjIsIDEuMDIyMiwgMS4xODQxNywgMS4wMjIyLCAxLjI3MDE0LCAwLjg5OTAzLCAxLjE1MDEyLCAwLjkzODU5LCAwLjk0Mzk5LCAwLjg0NiwgMC45NDM5OSwgMC44MTQ1MywgMS4wMTg2LCAwLjk0MjE5LCAwLjk2MDE3LCAxLjAzMDc1LCAxLjAyMTc1LCAwLjkxMiwgMS4wMzA3NSwgMC45Njk5OCwgMC45NjAxNywgMC45Mzg1OSwgMC45NDM5OSwgMC45NDM5OSwgMC45NTQ5MywgMC43NDYsIDEuMTI2NTgsIDAuOTQ1NzgsIDAuOTEsIDAuOTc5LCAwLjg4MiwgMC44ODIsIDAuODMsIDAuODUwMzQsIDAuODM1MzcsIDAuODUwMzQsIDEuMDIwNTgsIDAuNzA4NjksIDAuODg0NjUsIDAuODg0NjUsIDAuODg0NjUsIDAuODg0NjUsIDAuODM1MzcsIDAuOTAwODMsIDEuMTUwMTIsIDAuOTE2MSwgMC45NDU2NSwgMC43MzU0MSwgMS4wMjA1OCwgMC41MzYwOSwgMC42OTM1MywgMC43OTUxOSwgMS4wODU5NSwgMSwgMSwgMS4xNTAxMiwgMSwgMC45MTk3NCwgMC43NTk0NSwgMS4xNTAxMiwgMSwgMC45NDQ2LCAwLjczMzYxLCAwLjkwMDUsIDAuOTAwNSwgMC45MDA1LCAwLjYyODY0LCAwLjg1MTU4LCAwLjg1MTU4LCAwLjg1MTU4LCAwLjg1MTU4LCAwLjg1MTU4LCAwLjg1MTU4LCAwLjc3MywgMC43Njg1MiwgMC43MDQ2NiwgMC43MDQ2NiwgMC43MDQ2NiwgMC43MDQ2NiwgMC44Mzg2NCwgMC44Mzg2NCwgMC44Mzg2NCwgMC44Mzg2NCwgMC45MDU2MSwgMC44NzUxNCwgMC44NTg4LCAwLjg1ODgsIDAuODU4OCwgMC44NTg4LCAwLjg1ODgsIDEuMDIwNTgsIDAuODU3NTEsIDAuODU5OTEsIDAuODU5OTEsIDAuODU5OTEsIDAuODU5OTEsIDAuNzc1MTIsIDAuNzYwMTMsIDAuODgwNzUsIDAuOTM4NTksIDAuOTM4NTksIDAuOTM4NTksIDAuOTM4NTksIDAuOTM4NTksIDAuOTM4NTksIDAuODA3NSwgMC44NDYsIDAuODE0NTMsIDAuODE0NTMsIDAuODE0NTMsIDAuODE0NTMsIDAuODI0MjQsIDAuODI0MjQsIDAuODI0MjQsIDAuODI0MjQsIDAuOTI3OCwgMC45NjAxNywgMC45Mzg1OSwgMC45Mzg1OSwgMC45Mzg1OSwgMC45Mzg1OSwgMC45Mzg1OSwgMS4wODU5NSwgMC44NTYyLCAwLjk0NTc4LCAwLjk0NTc4LCAwLjk0NTc4LCAwLjk0NTc4LCAwLjg4MiwgMC45NDU3OCwgMC44ODIsIDAuODUxNTgsIDAuOTM4NTksIDAuODUxNTgsIDAuOTM4NTksIDAuODUxNTgsIDAuOTM4NTksIDAuNzY4NTIsIDAuODQ2LCAwLjc2ODUyLCAwLjg0NiwgMC43Njg1MiwgMC44NDYsIDAuNzY4NTIsIDAuODQ2LCAwLjg5NTkxLCAwLjg1NDQsIDAuOTA1NjEsIDAuOTQzOTksIDAuNzA0NjYsIDAuODE0NTMsIDAuNzA0NjYsIDAuODE0NTMsIDAuNzA0NjYsIDAuODE0NTMsIDAuNzA0NjYsIDAuODE0NTMsIDAuNzA0NjYsIDAuODE0NTMsIDAuODAwOTQsIDAuOTQyMTksIDAuODAwOTQsIDAuOTQyMTksIDAuODAwOTQsIDAuOTQyMTksIDEsIDEsIDAuODY4MjIsIDAuOTYwMTcsIDAuODY4MjIsIDAuOTYwMTcsIDAuODM4NjQsIDAuODI0MjQsIDAuODM4NjQsIDAuODI0MjQsIDAuODM4NjQsIDAuODI0MjQsIDAuODM4NjQsIDEuMDMwNzUsIDAuODM4NjQsIDAuODI0MjQsIDAuODE0MDIsIDEuMDI3MzgsIDAuNzI4LCAxLjAyMTc1LCAxLCAxLCAwLjkxMiwgMC43OTQ3NSwgMS4wMzA3NSwgMSwgMSwgMC43OTQ3NSwgMC44MzkxMSwgMC43OTQ3NSwgMC42NjI2NiwgMC44MDU1MywgMS4wNjY3NiwgMC44NzUxNCwgMC45NjAxNywgMSwgMSwgMC44NzUxNCwgMC45NjAxNywgMC44Njg2NSwgMC44NzM5NiwgMC45NjAxNywgMC44NTg4LCAwLjkzODU5LCAwLjg1ODgsIDAuOTM4NTksIDAuODU4OCwgMC45Mzg1OSwgMC44NjcsIDAuODQ3NTksIDAuNzI0MjEsIDAuOTU0OTMsIDEsIDEsIDAuNzI0MjEsIDAuOTU0OTMsIDAuNjk4NjYsIDAuNzQ2LCAwLjY5ODY2LCAwLjc0NiwgMSwgMSwgMC42OTg2NiwgMC43NDYsIDEsIDEsIDAuNzc1OTgsIDAuODg0MTcsIDAuNzc1OTgsIDEuMTI2NTgsIDAuODU5OTEsIDAuOTQ1NzgsIDAuODU5OTEsIDAuOTQ1NzgsIDAuODU5OTEsIDAuOTQ1NzgsIDAuODU5OTEsIDAuOTQ1NzgsIDAuODU5OTEsIDAuOTQ1NzgsIDAuODU5OTEsIDAuOTQ1NzgsIDAuODc4MzIsIDAuOTc5LCAwLjc3NTEyLCAwLjg4MiwgMC43NzUxMiwgMC44NTYyLCAwLjgzLCAwLjg1NjIsIDAuODMsIDAuODU2MiwgMC44MywgMSwgMC44ODQ2NSwgMC44NTE1OCwgMC45Mzg1OSwgMC43NzMsIDAuODA3NSwgMC44NTc1MSwgMC44NTYyLCAxLCAxLCAwLjc3NTk4LCAxLjEyNjU4LCAxLjE1MDEyLCAxLjE1MDEyLCAxLjE1MDEyLCAxLjE1MDEyLCAxLjE1MDEyLCAxLjE1MzEzLCAxLjE1MDEyLCAxLjE1MDEyLCAxLjE1MDEyLCAxLjA4MTA2LCAxLjAzOTAxLCAwLjg1MTU4LCAwLjc3MDI1LCAwLjYyMjY0LCAwLjc2NDYsIDAuNjUzNTEsIDAuODYwMjYsIDAuNjk0NjEsIDAuODk5NDcsIDEuMDMwNzUsIDAuODUxNTgsIDAuNzc4MTIsIDAuNzY0NDksIDAuODg4MzYsIDAuNzA0NjYsIDAuODU2MiwgMC44NjgyMiwgMC44NTg4LCAwLjgzODY0LCAwLjc3MjEyLCAwLjg1MzA4LCAwLjkzNjM3LCAwLjg3NTE0LCAwLjgyMzUyLCAwLjg1ODgsIDAuODU3MDEsIDAuNzYwMTMsIDAuODkwNTgsIDAuNzc1OTgsIDAuODE1NiwgMC44MjU2NSwgMC43ODExMiwgMC43Nzg5OSwgMC44OTM4NiwgMC44Mzg2NCwgMC44MTU2LCAwLjk0ODYsIDAuOTIzODgsIDAuOTYxODYsIDEuMDMwNzUsIDAuOTExMjMsIDAuOTQ4NiwgMC45MzI5OCwgMC44NzgsIDAuOTM5NDIsIDAuOTIzODgsIDAuODQ1OTYsIDAuOTYxODYsIDAuOTUxMTksIDEuMDMwNzUsIDAuOTIyLCAwLjg4Nzg3LCAwLjk1ODI5LCAwLjg4LCAwLjkzNTU5LCAwLjkzODU5LCAwLjc4ODE1LCAwLjkzNzU4LCAxLCAwLjg5MjE3LCAxLjAzNzM3LCAwLjkxMTIzLCAwLjkzOTY5LCAwLjc3NDg3LCAwLjg1NzY5LCAwLjg2Nzk5LCAxLjAzMDc1LCAwLjkxMTIzLCAwLjkzODU5LCAwLjkxMTIzLCAwLjg2Nzk5LCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAwLjg3ODMyLCAwLjk3OSwgMC44NzgzMiwgMC45NzksIDAuODc4MzIsIDAuOTc5LCAwLjc3NTEyLCAwLjg4MiwgMC45MjE5LCAxLCAwLjg5OTAzLCAxLCAxLCAxLCAwLjg3MzIxLCAwLjg3MzIxLCAwLjg3MzIxLCAxLCAxLjAyNywgMS4wMjcsIDEuMDI3LCAwLjg2ODQ3LCAwLjg2ODQ3LCAwLjc5MTIxLCAxLCAxLjEyNCwgMSwgMSwgMC43MzU3MiwgMC43MzU3MiwgMSwgMSwgMC44NTAzNCwgMSwgMSwgMSwgMSwgMC44ODQ2NSwgMSwgMSwgMSwgMC42NjksIDEsIDEuMzYxNDUsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEuMDQ4MjgsIDEsIDAuNzQ5NDgsIDAuNzUxODcsIDEuMDIwNTgsIDAuOTgzOTEsIDEuMDIxMTksIDEsIDEsIDEuMDYyMzMsIDEuMDg1OTUsIDEuMDg1OTUsIDEsIDEuMDg1OTUsIDEuMDg1OTUsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEuMDUyMzMsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDFdOwpjb25zdCBNeXJpYWRQcm9JdGFsaWNNZXRyaWNzID0gewogIGxpbmVIZWlnaHQ6IDEuMiwKICBsaW5lR2FwOiAwLjIKfTsKY29uc3QgTXlyaWFkUHJvUmVndWxhckZhY3RvcnMgPSBbMS4zNjg5OCwgMSwgMSwgMC43NjMwNSwgMC44Mjc4NCwgMC45NDkzNSwgMC44OTM2NCwgMC45MjI0MSwgMC44OTA3MywgMC45MDcwNiwgMC45ODQ3MiwgMC44NTI4MywgMC44NTI4MywgMS4wNjY0LCAxLjAyMDU4LCAwLjc0NTA1LCAwLjkyMTksIDAuNzQ1MDUsIDEuMjM0NTYsIDAuOTIyNDEsIDAuOTIyNDEsIDAuOTIyNDEsIDAuOTIyNDEsIDAuOTIyNDEsIDAuOTIyNDEsIDAuOTIyNDEsIDAuOTIyNDEsIDAuOTIyNDEsIDAuOTIyNDEsIDAuNzQ1MDUsIDAuNzQ1MDUsIDEuMDIwNTgsIDEuMDIwNTgsIDEuMDIwNTgsIDAuNzMwMDIsIDAuNzI2MDEsIDAuOTE3NTUsIDAuODEyNiwgMC44MDMxNCwgMC45MjIyMiwgMC43Mzc2NCwgMC43OTcyNiwgMC44MzA1MSwgMC45MDI4NCwgMC44NjAyMywgMC43NCwgMC44MTI2LCAwLjg0ODY5LCAwLjk2NTE4LCAwLjkxMTE1LCAwLjg4NTgsIDAuNzk3NjEsIDAuODg1OCwgMC43NDQ5OCwgMC43MzkxNCwgMC44MTM2MywgMC44OTU5MSwgMC44MzY1OSwgMC44OTYzMywgMC44NTYwOCwgMC44MTExLCAwLjkwNTMxLCAxLjAyMjIsIDEuMjI3MzYsIDEuMDIyMiwgMS4yNzAxNCwgMC44OTkwMywgMC45MDA4OCwgMC44NjY2NywgMS4wMjMxLCAwLjg5NiwgMS4wMTQxMSwgMC45MDA4MywgMS4wNTA5OSwgMS4wMDUxMiwgMC45OTc5MywgMS4wNTMyNiwgMS4wOTM3NywgMC45MzgsIDEuMDYyMjYsIDEuMDAxMTksIDAuOTk3OTMsIDAuOTg3MTQsIDEuMDIzMSwgMS4wMTIzMSwgMC45ODE5NiwgMC43OTIsIDEuMTkxMzcsIDAuOTkwNzQsIDAuOTYyLCAxLjAxOTE1LCAwLjkyNiwgMC45NDIsIDAuODU2LCAwLjg1MDM0LCAwLjkyMDA2LCAwLjg1MDM0LCAxLjAyMDU4LCAwLjY5MDY3LCAwLjkyMjQxLCAwLjkyMjQxLCAwLjkyMjQxLCAwLjkyMjQxLCAwLjkyMDA2LCAwLjkzMzIsIDAuOTAwODgsIDAuOTE4ODIsIDAuOTM0ODQsIDAuNzUzMzksIDEuMDIwNTgsIDAuNTY4NjYsIDAuNTQzMjQsIDAuNzk1MTksIDEuMDg1OTUsIDEsIDEsIDAuOTAwODgsIDEsIDAuOTUzMjUsIDAuNzQ1MDUsIDAuOTAwODgsIDEsIDAuOTcxOTgsIDAuNzUzMzksIDAuOTEwMDksIDAuOTEwMDksIDAuOTEwMDksIDAuNjY0NjYsIDAuOTE3NTUsIDAuOTE3NTUsIDAuOTE3NTUsIDAuOTE3NTUsIDAuOTE3NTUsIDAuOTE3NTUsIDAuNzg4LCAwLjgwMzE0LCAwLjczNzY0LCAwLjczNzY0LCAwLjczNzY0LCAwLjczNzY0LCAwLjg2MDIzLCAwLjg2MDIzLCAwLjg2MDIzLCAwLjg2MDIzLCAwLjkyOTE1LCAwLjkxMTE1LCAwLjg4NTgsIDAuODg1OCwgMC44ODU4LCAwLjg4NTgsIDAuODg1OCwgMS4wMjA1OCwgMC44ODU4LCAwLjg5NTkxLCAwLjg5NTkxLCAwLjg5NTkxLCAwLjg5NTkxLCAwLjgxMTEsIDAuNzk2MTEsIDAuODk3MTMsIDAuODY2NjcsIDAuODY2NjcsIDAuODY2NjcsIDAuODY2NjcsIDAuODY2NjcsIDAuODY2NjcsIDAuODY5MzYsIDAuODk2LCAwLjkwMDgzLCAwLjkwMDgzLCAwLjkwMDgzLCAwLjkwMDgzLCAwLjg0MjI0LCAwLjg0MjI0LCAwLjg0MjI0LCAwLjg0MjI0LCAwLjk3Mjc2LCAwLjk5NzkzLCAwLjk4NzE0LCAwLjk4NzE0LCAwLjk4NzE0LCAwLjk4NzE0LCAwLjk4NzE0LCAxLjA4NTk1LCAwLjg5ODc2LCAwLjk5MDc0LCAwLjk5MDc0LCAwLjk5MDc0LCAwLjk5MDc0LCAwLjk0MiwgMS4wMjMxLCAwLjk0MiwgMC45MTc1NSwgMC44NjY2NywgMC45MTc1NSwgMC44NjY2NywgMC45MTc1NSwgMC44NjY2NywgMC44MDMxNCwgMC44OTYsIDAuODAzMTQsIDAuODk2LCAwLjgwMzE0LCAwLjg5NiwgMC44MDMxNCwgMC44OTYsIDAuOTIyMjIsIDAuOTMzNzIsIDAuOTI5MTUsIDEuMDE0MTEsIDAuNzM3NjQsIDAuOTAwODMsIDAuNzM3NjQsIDAuOTAwODMsIDAuNzM3NjQsIDAuOTAwODMsIDAuNzM3NjQsIDAuOTAwODMsIDAuNzM3NjQsIDAuOTAwODMsIDAuODMwNTEsIDEuMDA1MTIsIDAuODMwNTEsIDEuMDA1MTIsIDAuODMwNTEsIDEuMDA1MTIsIDEsIDEsIDAuOTAyODQsIDAuOTk3OTMsIDAuOTA5NzYsIDAuOTk3OTMsIDAuODYwMjMsIDAuODQyMjQsIDAuODYwMjMsIDAuODQyMjQsIDAuODYwMjMsIDAuODQyMjQsIDAuODYwMjMsIDEuMDUzMjYsIDAuODYwMjMsIDAuODQyMjQsIDAuODI4NzMsIDEuMDc0NjksIDAuNzQsIDEuMDkzNzcsIDEsIDEsIDAuOTM4LCAwLjg0ODY5LCAxLjA2MjI2LCAxLCAxLCAwLjg0ODY5LCAwLjgzNzA0LCAwLjg0ODY5LCAwLjgxNDQxLCAwLjg1NTg4LCAxLjA4OTI3LCAwLjkxMTE1LCAwLjk5NzkzLCAxLCAxLCAwLjkxMTE1LCAwLjk5NzkzLCAwLjkxODg3LCAwLjkwOTkxLCAwLjk5NzkzLCAwLjg4NTgsIDAuOTg3MTQsIDAuODg1OCwgMC45ODcxNCwgMC44ODU4LCAwLjk4NzE0LCAwLjg5NCwgMC45MTQzNCwgMC43NDQ5OCwgMC45ODE5NiwgMSwgMSwgMC43NDQ5OCwgMC45ODE5NiwgMC43MzkxNCwgMC43OTIsIDAuNzM5MTQsIDAuNzkyLCAxLCAxLCAwLjczOTE0LCAwLjc5MiwgMSwgMSwgMC44MTM2MywgMC45MDQsIDAuODEzNjMsIDEuMTkxMzcsIDAuODk1OTEsIDAuOTkwNzQsIDAuODk1OTEsIDAuOTkwNzQsIDAuODk1OTEsIDAuOTkwNzQsIDAuODk1OTEsIDAuOTkwNzQsIDAuODk1OTEsIDAuOTkwNzQsIDAuODk1OTEsIDAuOTkwNzQsIDAuODk2MzMsIDEuMDE5MTUsIDAuODExMSwgMC45NDIsIDAuODExMSwgMC45MDUzMSwgMC44NTYsIDAuOTA1MzEsIDAuODU2LCAwLjkwNTMxLCAwLjg1NiwgMSwgMC45MjI0MSwgMC45MTc1NSwgMC44NjY2NywgMC43ODgsIDAuODY5MzYsIDAuODg1OCwgMC44OTg3NiwgMSwgMSwgMC44MTM2MywgMS4xOTEzNywgMC45MDA4OCwgMC45MDA4OCwgMC45MDA4OCwgMC45MDA4OCwgMC45MDA4OCwgMC45MDA4OCwgMC45MDA4OCwgMC45MDA4OCwgMC45MDA4OCwgMC45MDM4OCwgMS4wMzkwMSwgMC45MjEzOCwgMC43ODEwNSwgMC43MTU0LCAwLjg2MTY5LCAwLjgwNTEzLCAwLjk0MDA3LCAwLjgyNTI4LCAwLjk4NjEyLCAxLjA2MjI2LCAwLjkxNzU1LCAwLjgxMjYsIDAuODE4ODQsIDAuOTI4MTksIDAuNzM3NjQsIDAuOTA1MzEsIDAuOTAyODQsIDAuODg1OCwgMC44NjAyMywgMC44MTI2LCAwLjkxMTcyLCAwLjk2NTE4LCAwLjkxMTE1LCAwLjgzMDg5LCAwLjg4NTgsIDAuODc3OTEsIDAuNzk3NjEsIDAuODkyOTcsIDAuODEzNjMsIDAuODgxNTcsIDAuODk5OTIsIDAuODU2MDgsIDAuODE5OTIsIDAuOTQzMDcsIDAuODYwMjMsIDAuODgxNTcsIDAuOTUzMDgsIDAuOTg2OTksIDAuOTk3OTMsIDEuMDYyMjYsIDAuOTU4MTcsIDAuOTUzMDgsIDAuOTczNTgsIDAuOTI4LCAwLjk4MDg4LCAwLjk4Njk5LCAwLjkyNzYxLCAwLjk5NzkzLCAwLjk2MDE3LCAxLjA2MjI2LCAwLjk4NiwgMC45NDQsIDAuOTU5NzgsIDAuOTM4LCAwLjk2NzA1LCAwLjk4NzE0LCAwLjgwNDQyLCAwLjk4OTcyLCAxLCAwLjg5NzYyLCAxLjA0NTUyLCAwLjk1ODE3LCAwLjk5MDA3LCAwLjg3MDY0LCAwLjkxODc5LCAwLjg4ODg4LCAxLjA2MjI2LCAwLjk1ODE3LCAwLjk4NzE0LCAwLjk1ODE3LCAwLjg4ODg4LCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAwLjg5NjMzLCAxLjAxOTE1LCAwLjg5NjMzLCAxLjAxOTE1LCAwLjg5NjMzLCAxLjAxOTE1LCAwLjgxMTEsIDAuOTQyLCAwLjkyMTksIDEsIDAuODk5MDMsIDEsIDEsIDEsIDAuOTMxNzMsIDAuOTMxNzMsIDAuOTMxNzMsIDEsIDEuMDYzMDQsIDEuMDYzMDQsIDEuMDY5MDQsIDAuODk5MDMsIDAuODk5MDMsIDAuODA1NDksIDEsIDEuMTU2LCAxLCAxLCAwLjc2NTc1LCAwLjc2NTc1LCAxLCAxLCAwLjcyNDU4LCAxLCAxLCAxLCAxLCAwLjkyMjQxLCAxLCAxLCAxLCAwLjYxOSwgMSwgMS4zNjE0NSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMS4wNzI1NywgMSwgMC43NDcwNSwgMC43MTExOSwgMS4wMjA1OCwgMS4wMjQsIDEuMDIxMTksIDEsIDEsIDEuMTUzNiwgMS4wODU5NSwgMS4wODU5NSwgMSwgMS4wODU5NSwgMS4wODU5NSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMS4wNTYzOCwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMV07CmNvbnN0IE15cmlhZFByb1JlZ3VsYXJNZXRyaWNzID0gewogIGxpbmVIZWlnaHQ6IDEuMiwKICBsaW5lR2FwOiAwLjIKfTsKCjsvLyAuL3NyYy9jb3JlL3NlZ29ldWlfZmFjdG9ycy5qcwpjb25zdCBTZWdvZXVpQm9sZEZhY3RvcnMgPSBbMS43NjczOCwgMSwgMSwgMC45OTI5NywgMC45ODI0LCAxLjA0MDE2LCAxLjA2NDk3LCAxLjAzNDI0LCAwLjk3NTI5LCAxLjE3NjQ3LCAxLjIzMjAzLCAxLjEwODUsIDEuMTA4NSwgMS4xNjkzOSwgMS4yMTA3LCAwLjk3NTQsIDEuMjE0MDgsIDAuOTc1NCwgMS41OTU3OCwgMS4wMzQyNCwgMS4wMzQyNCwgMS4wMzQyNCwgMS4wMzQyNCwgMS4wMzQyNCwgMS4wMzQyNCwgMS4wMzQyNCwgMS4wMzQyNCwgMS4wMzQyNCwgMS4wMzQyNCwgMC44MTM3OCwgMC44MTM3OCwgMS4yMTA3LCAxLjIxMDcsIDEuMjEwNywgMC43MTcwMywgMC45Nzg0NywgMC45NzM2MywgMC44ODc3NiwgMC44NjQxLCAxLjAyMDk2LCAwLjc5Nzk1LCAwLjg1MTMyLCAwLjkxNCwgMS4wNjA4NSwgMS4xNDA2LCAwLjgwMDcsIDAuODk4NTgsIDAuODM2OTMsIDEuMTQ4ODksIDEuMDkzOTgsIDAuOTc0ODksIDAuOTIwOTQsIDAuOTc0ODksIDAuOTAzOTksIDAuODQwNDEsIDAuOTU5MjMsIDEuMDAxMzUsIDEsIDEuMDY0NjcsIDAuOTgyNDMsIDAuOTA5OTYsIDAuOTkzNjEsIDEuMTA4NSwgMS41Njk0MiwgMS4xMDg1LCAxLjIxMDcsIDAuNzQ2MjcsIDAuOTQyODIsIDAuOTY3NTIsIDEuMDE1MTksIDAuODYzMDQsIDEuMDEzNTksIDAuOTcyNzgsIDEuMTUxMDMsIDEuMDEzNTksIDAuOTg1NjEsIDEuMDIyODUsIDEuMDIyODUsIDEuMDA1MjcsIDEuMDIyODUsIDEuMDMwMiwgMC45OTA0MSwgMS4wMDA4LCAxLjAxNTE5LCAxLjAxMzU5LCAxLjAyMjU4LCAwLjc5MTA0LCAxLjE2ODYyLCAwLjk5MDQxLCAwLjk3NDU0LCAxLjAyNTExLCAwLjk5Mjk4LCAwLjk2NzUyLCAwLjk1ODAxLCAwLjk0ODU2LCAxLjE2NTc5LCAwLjk0ODU2LCAxLjIxMDcsIDAuOTgyNCwgMS4wMzQyNCwgMS4wMzQyNCwgMSwgMS4wMzQyNCwgMS4xNjU3OSwgMC44NzI3LCAxLjM4NzEsIDEuMTg2MjIsIDEuMTA4MTgsIDEuMDQ0NzgsIDEuMjEwNywgMS4xODYyMiwgMC43NTE1NSwgMC45NDk5NCwgMS4yODgyNiwgMS4yMTQwOCwgMS4yMTQwOCwgMC45MTA1NiwgMSwgMC45MTU3MiwgMC45NzU0LCAwLjY0NjYzLCAxLjE4MzI4LCAxLjI0ODY2LCAxLjA0NDc4LCAxLjE0MTY5LCAxLjE1NzQ5LCAxLjE3Mzg5LCAwLjcxNzAzLCAwLjk3MzYzLCAwLjk3MzYzLCAwLjk3MzYzLCAwLjk3MzYzLCAwLjk3MzYzLCAwLjk3MzYzLCAwLjkzNTA2LCAwLjg2NDEsIDAuNzk3OTUsIDAuNzk3OTUsIDAuNzk3OTUsIDAuNzk3OTUsIDEuMTQwNiwgMS4xNDA2LCAxLjE0MDYsIDEuMTQwNiwgMS4wMjA5NiwgMS4wOTM5OCwgMC45NzQyNiwgMC45NzQyNiwgMC45NzQyNiwgMC45NzQyNiwgMC45NzQyNiwgMS4yMTA3LCAwLjk3NDg5LCAxLjAwMTM1LCAxLjAwMTM1LCAxLjAwMTM1LCAxLjAwMTM1LCAwLjkwOTk2LCAwLjkyMDk0LCAxLjAyNzk4LCAwLjk2NzUyLCAwLjk2NzUyLCAwLjk2NzUyLCAwLjk2NzUyLCAwLjk2NzUyLCAwLjk2NzUyLCAwLjkzMTM2LCAwLjg2MzA0LCAwLjk3Mjc4LCAwLjk3Mjc4LCAwLjk3Mjc4LCAwLjk3Mjc4LCAxLjAyMjg1LCAxLjAyMjg1LCAxLjAyMjg1LCAxLjAyMjg1LCAwLjk3MTIyLCAwLjk5MDQxLCAxLCAxLCAxLCAxLCAxLCAxLjI4ODI2LCAxLjAwMDgsIDAuOTkwNDEsIDAuOTkwNDEsIDAuOTkwNDEsIDAuOTkwNDEsIDAuOTY3NTIsIDEuMDE1MTksIDAuOTY3NTIsIDAuOTczNjMsIDAuOTY3NTIsIDAuOTczNjMsIDAuOTY3NTIsIDAuOTczNjMsIDAuOTY3NTIsIDAuODY0MSwgMC44NjMwNCwgMC44NjQxLCAwLjg2MzA0LCAwLjg2NDEsIDAuODYzMDQsIDAuODY0MSwgMC44NjMwNCwgMS4wMjA5NiwgMS4wMzA1NywgMS4wMjA5NiwgMS4wMzUxNywgMC43OTc5NSwgMC45NzI3OCwgMC43OTc5NSwgMC45NzI3OCwgMC43OTc5NSwgMC45NzI3OCwgMC43OTc5NSwgMC45NzI3OCwgMC43OTc5NSwgMC45NzI3OCwgMC45MTQsIDEuMDEzNTksIDAuOTE0LCAxLjAxMzU5LCAwLjkxNCwgMS4wMTM1OSwgMSwgMSwgMS4wNjA4NSwgMC45ODU2MSwgMS4wNjA4NSwgMS4wMDg3OSwgMS4xNDA2LCAxLjAyMjg1LCAxLjE0MDYsIDEuMDIyODUsIDEuMTQwNiwgMS4wMjI4NSwgMS4xNDA2LCAxLjAyMjg1LCAxLjE0MDYsIDEuMDIyODUsIDAuOTcxMzgsIDEuMDg2OTIsIDAuODAwNywgMS4wMjI4NSwgMSwgMSwgMS4wMDUyNywgMC44MzY5MywgMS4wMjI4NSwgMSwgMSwgMC44MzY5MywgMC45NDU1LCAwLjgzNjkzLCAwLjkwNDE4LCAwLjgzNjkzLCAxLjEzMDA1LCAxLjA5Mzk4LCAwLjk5MDQxLCAxLCAxLCAxLjA5Mzk4LCAwLjk5MDQxLCAwLjk2NjkyLCAxLjA5MjUxLCAwLjk5MDQxLCAwLjk3NDg5LCAxLjAwMDgsIDAuOTc0ODksIDEuMDAwOCwgMC45NzQ4OSwgMS4wMDA4LCAwLjkzOTk0LCAwLjk3OTMxLCAwLjkwMzk5LCAxLjAyMjU4LCAxLCAxLCAwLjkwMzk5LCAxLjAyMjU4LCAwLjg0MDQxLCAwLjc5MTA0LCAwLjg0MDQxLCAwLjc5MTA0LCAwLjg0MDQxLCAwLjc5MTA0LCAwLjg0MDQxLCAwLjc5MTA0LCAxLCAxLCAwLjk1OTIzLCAxLjA3MDM0LCAwLjk1OTIzLCAxLjE2ODYyLCAxLjAwMTM1LCAwLjk5MDQxLCAxLjAwMTM1LCAwLjk5MDQxLCAxLjAwMTM1LCAwLjk5MDQxLCAxLjAwMTM1LCAwLjk5MDQxLCAxLjAwMTM1LCAwLjk5MDQxLCAxLjAwMTM1LCAwLjk5MDQxLCAxLjA2NDY3LCAxLjAyNTExLCAwLjkwOTk2LCAwLjk2NzUyLCAwLjkwOTk2LCAwLjk5MzYxLCAwLjk1ODAxLCAwLjk5MzYxLCAwLjk1ODAxLCAwLjk5MzYxLCAwLjk1ODAxLCAxLjA3NzMzLCAxLjAzNDI0LCAwLjk3MzYzLCAwLjk2NzUyLCAwLjkzNTA2LCAwLjkzMTM2LCAwLjk3NDg5LCAxLjAwMDgsIDEsIDEsIDAuOTU5MjMsIDEuMTY4NjIsIDEuMTUxMDMsIDEuMTUxMDMsIDEuMDExNzMsIDEuMDM5NTksIDAuNzU5NTMsIDAuODEzNzgsIDAuNzk5MTIsIDEuMTUxMDMsIDEuMjE5OTQsIDAuOTUxNjEsIDAuODc4MTUsIDEuMDExNDksIDAuODE1MjUsIDAuNzY3NiwgMC45ODE2NywgMS4wMTEzNCwgMS4wMjU0NiwgMC44NDA5NywgMS4wMzA4OSwgMS4xODEwMiwgMC45NzM2MywgMC44ODc3NiwgMC44NTEzNCwgMC45NzgyNiwgMC43OTc5NSwgMC45OTM2MSwgMS4wNjA4NSwgMC45NzQ4OSwgMS4xNDA2LCAwLjg5ODU4LCAxLjAzODgsIDEuMTQ4ODksIDEuMDkzOTgsIDAuODYwMzksIDAuOTc0ODksIDEuMDU5NSwgMC45MjA5NCwgMC45NDc5MywgMC45NTkyMywgMC45MDk5NiwgMC45OTM0NiwgMC45ODI0MywgMS4wMjExMiwgMC45NTQ5MywgMS4xNDA2LCAwLjkwOTk2LCAxLjAzNTc0LCAxLjAyNTk3LCAxLjAwMDgsIDEuMTgxMDIsIDEuMDY2MjgsIDEuMDM1NzQsIDEuMDE5MiwgMS4wMTkzMiwgMS4wMDg4NiwgMC45NzUzMSwgMS4wMTA2LCAxLjAwMDgsIDEuMTMxODksIDEuMTgxMDIsIDEuMDIyNzcsIDAuOTg2ODMsIDEuMDAxNiwgMC45OTU2MSwgMS4wNzIzNywgMS4wMDA4LCAwLjkwNDM0LCAwLjk5OTIxLCAwLjkzODAzLCAwLjg5NjUsIDEuMjMwODUsIDEuMDY2MjgsIDEuMDQ5ODMsIDAuOTYyNjgsIDEuMDQ5OSwgMC45ODQzOSwgMS4xODEwMiwgMS4wNjYyOCwgMS4wMDA4LCAxLjA2NjI4LCAwLjk4NDM5LCAwLjc5Nzk1LCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLjA5NDY2LCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAwLjk3Mjc4LCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLjAyMDY1LCAxLCAxLCAxLCAxLCAxLCAxLCAxLjA2NDY3LCAxLjAyNTExLCAxLjA2NDY3LCAxLjAyNTExLCAxLjA2NDY3LCAxLjAyNTExLCAwLjkwOTk2LCAwLjk2NzUyLCAxLCAxLjIxNDA4LCAwLjg5OTAzLCAxLCAxLCAwLjc1MTU1LCAxLjA0Mzk0LCAxLjA0Mzk0LCAxLjA0Mzk0LCAxLjA0Mzk0LCAwLjk4NjMzLCAwLjk4NjMzLCAwLjk4NjMzLCAwLjczMDQ3LCAwLjczMDQ3LCAxLjIwNjQyLCAwLjkxMjExLCAxLjI1NjM1LCAxLjIyMiwgMS4wMjk1NiwgMS4wMzM3MiwgMS4wMzM3MiwgMC45NjAzOSwgMS4yNDYzMywgMSwgMS4xMjQ1NCwgMC45MzUwMywgMS4wMzQyNCwgMS4xOTY4NywgMS4wMzQyNCwgMSwgMSwgMSwgMC43NzEsIDEsIDEsIDEuMTU3NDksIDEuMTU3NDksIDEuMTU3NDksIDEuMTA5NDgsIDAuODYyNzksIDAuOTQ0MzQsIDAuODYyNzksIDAuOTQ0MzQsIDAuODYxODIsIDEsIDEsIDEuMTY4OTcsIDEsIDAuOTYwODUsIDAuOTAxMzcsIDEuMjEwNywgMS4xODQxNiwgMS4xMzk3MywgMC42OTgyNSwgMC45NzE2LCAyLjEwMzM5LCAxLjI5MDA0LCAxLjI5MDA0LCAxLjIxMTcyLCAxLjI5MDA0LCAxLjI5MDA0LCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLjQyNjAzLCAxLCAwLjk5ODYyLCAwLjk5ODYyLCAxLCAwLjg3MDI1LCAwLjg3MDI1LCAwLjg3MDI1LCAwLjg3MDI1LCAxLjE4ODc0LCAxLjQyNjAzLCAxLCAxLjQyNjAzLCAxLjQyNjAzLCAwLjk5ODYyLCAxLCAxLCAxLCAxLCAxLCAxLjI4ODYsIDEuMDQzMTUsIDEuMTUyOTYsIDEuMzQxNjMsIDEsIDEsIDEsIDEuMDkxOTMsIDEuMDkxOTMsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDFdOwpjb25zdCBTZWdvZXVpQm9sZE1ldHJpY3MgPSB7CiAgbGluZUhlaWdodDogMS4zMzAwOCwKICBsaW5lR2FwOiAwCn07CmNvbnN0IFNlZ29ldWlCb2xkSXRhbGljRmFjdG9ycyA9IFsxLjc2NzM4LCAxLCAxLCAwLjk4OTQ2LCAxLjAzOTU5LCAxLjA0MDE2LCAxLjAyODA5LCAxLjAzNiwgMC45NzYzOSwgMS4xMDk1MywgMS4yMzIwMywgMS4xMTE0NCwgMS4xMTE0NCwgMS4xNjkzOSwgMS4yMTIzNywgMC45NzU0LCAxLjIxMjYxLCAwLjk3NTQsIDEuNTk3NTQsIDEuMDM2LCAxLjAzNiwgMS4wMzYsIDEuMDM2LCAxLjAzNiwgMS4wMzYsIDEuMDM2LCAxLjAzNiwgMS4wMzYsIDEuMDM2LCAwLjgxMzc4LCAwLjgxMzc4LCAxLjIxMjM3LCAxLjIxMjM3LCAxLjIxMjM3LCAwLjczNTQxLCAwLjk3ODQ3LCAwLjk3MzYzLCAwLjg5NzIzLCAwLjg3ODk3LCAxLjA0MjYsIDAuNzk0MjksIDAuODUyOTIsIDAuOTExNDksIDEuMDU4MTUsIDEuMTQwNiwgMC43OTYzMSwgMC45MDEyOCwgMC44Mzg1MywgMS4wNDM5NiwgMS4xMDYxNSwgMC45NzU1MiwgMC45NDQzNiwgMC45NzU1MiwgMC44ODY0MSwgMC44MDUyNywgMC45NjA4MywgMS4wMDEzNSwgMSwgMS4wNjc3NywgMC45ODE3LCAwLjkxMTQyLCAwLjk5MzYxLCAxLjExMTQ0LCAxLjU3MjkzLCAxLjExMTQ0LCAxLjIxMjM3LCAwLjc0NjI3LCAxLjMxODE4LCAxLjA2NTg1LCAwLjk3MDQyLCAwLjgzMDU1LCAwLjk3MDQyLCAwLjkzNTAzLCAxLjEyNjEsIDAuOTcwNDIsIDAuOTc5MjIsIDEuMTQyMzYsIDAuOTQ1NTIsIDEuMDEwNTQsIDEuMTQyMzYsIDEuMDI0NzEsIDAuOTc5MjIsIDAuOTQxNjUsIDAuOTcwNDIsIDAuOTcwNDIsIDEuMDI3NiwgMC43ODkyOSwgMS4xMjYxLCAwLjk3OTIyLCAwLjk1ODc0LCAxLjAyMTk3LCAwLjk4NTA3LCAwLjk2NzUyLCAwLjk3MTY4LCAwLjk1MTA3LCAxLjE2NTc5LCAwLjk1MTA3LCAxLjIxMjM3LCAxLjAzOTU5LCAxLjAzNiwgMS4wMzYsIDEsIDEuMDM2LCAxLjE2NTc5LCAwLjg3MzU3LCAxLjMxODE4LCAxLjE4NzU0LCAxLjI2NzgxLCAxLjA1MzU2LCAxLjIxMjM3LCAxLjE4NjIyLCAwLjc5NDg3LCAwLjk0OTk0LCAxLjI5MDA0LCAxLjI0MDQ3LCAxLjI0MDQ3LCAxLjMxODE4LCAxLCAwLjkxNDg0LCAwLjk3NTQsIDEuMzE4MTgsIDEuMTM0OSwgMS4yNDg2NiwgMS4wNTM1NiwgMS4xMzkzNCwgMS4xNTU3NCwgMS4xNzM4OSwgMC43MzU0MSwgMC45NzM2MywgMC45NzM2MywgMC45NzM2MywgMC45NzM2MywgMC45NzM2MywgMC45NzM2MywgMC45NDM4NSwgMC44Nzg5NywgMC43OTQyOSwgMC43OTQyOSwgMC43OTQyOSwgMC43OTQyOSwgMS4xNDA2LCAxLjE0MDYsIDEuMTQwNiwgMS4xNDA2LCAxLjA0MjYsIDEuMTA2MTUsIDAuOTc1NTIsIDAuOTc1NTIsIDAuOTc1NTIsIDAuOTc1NTIsIDAuOTc1NTIsIDEuMjEyMzcsIDAuOTc1NTIsIDEuMDAxMzUsIDEuMDAxMzUsIDEuMDAxMzUsIDEuMDAxMzUsIDAuOTExNDIsIDAuOTQ0MzYsIDAuOTg3MjEsIDEuMDY1ODUsIDEuMDY1ODUsIDEuMDY1ODUsIDEuMDY1ODUsIDEuMDY1ODUsIDEuMDY1ODUsIDAuOTY3MDUsIDAuODMwNTUsIDAuOTM1MDMsIDAuOTM1MDMsIDAuOTM1MDMsIDAuOTM1MDMsIDEuMTQyMzYsIDEuMTQyMzYsIDEuMTQyMzYsIDEuMTQyMzYsIDAuOTMxMjUsIDAuOTc5MjIsIDAuOTQxNjUsIDAuOTQxNjUsIDAuOTQxNjUsIDAuOTQxNjUsIDAuOTQxNjUsIDEuMjkwMDQsIDAuOTQxNjUsIDAuOTc5MjIsIDAuOTc5MjIsIDAuOTc5MjIsIDAuOTc5MjIsIDAuOTY3NTIsIDAuOTcwNDIsIDAuOTY3NTIsIDAuOTczNjMsIDEuMDY1ODUsIDAuOTczNjMsIDEuMDY1ODUsIDAuOTczNjMsIDEuMDY1ODUsIDAuODc4OTcsIDAuODMwNTUsIDAuODc4OTcsIDAuODMwNTUsIDAuODc4OTcsIDAuODMwNTUsIDAuODc4OTcsIDAuODMwNTUsIDEuMDQyNiwgMS4wMDMzLCAxLjA0MjYsIDAuOTcwNDIsIDAuNzk0MjksIDAuOTM1MDMsIDAuNzk0MjksIDAuOTM1MDMsIDAuNzk0MjksIDAuOTM1MDMsIDAuNzk0MjksIDAuOTM1MDMsIDAuNzk0MjksIDAuOTM1MDMsIDAuOTExNDksIDAuOTcwNDIsIDAuOTExNDksIDAuOTcwNDIsIDAuOTExNDksIDAuOTcwNDIsIDEsIDEsIDEuMDU4MTUsIDAuOTc5MjIsIDEuMDU4MTUsIDAuOTc5MjIsIDEuMTQwNiwgMS4xNDIzNiwgMS4xNDA2LCAxLjE0MjM2LCAxLjE0MDYsIDEuMTQyMzYsIDEuMTQwNiwgMS4xNDIzNiwgMS4xNDA2LCAxLjE0MjM2LCAwLjk3NDQxLCAxLjA0MzAyLCAwLjc5NjMxLCAxLjAxNTgyLCAxLCAxLCAxLjAxMDU0LCAwLjgzODUzLCAxLjE0MjM2LCAxLCAxLCAwLjgzODUzLCAxLjA5MTI1LCAwLjgzODUzLCAwLjkwNDE4LCAwLjgzODUzLCAxLjE5NTA4LCAxLjEwNjE1LCAwLjk3OTIyLCAxLCAxLCAxLjEwNjE1LCAwLjk3OTIyLCAxLjAxMDM0LCAxLjEwNDY2LCAwLjk3OTIyLCAwLjk3NTUyLCAwLjk0MTY1LCAwLjk3NTUyLCAwLjk0MTY1LCAwLjk3NTUyLCAwLjk0MTY1LCAwLjkxNjAyLCAwLjkxOTgxLCAwLjg4NjQxLCAxLjAyNzYsIDEsIDEsIDAuODg2NDEsIDEuMDI3NiwgMC44MDUyNywgMC43ODkyOSwgMC44MDUyNywgMC43ODkyOSwgMC44MDUyNywgMC43ODkyOSwgMC44MDUyNywgMC43ODkyOSwgMSwgMSwgMC45NjA4MywgMS4wNTQwMywgMC45NTkyMywgMS4xNjg2MiwgMS4wMDEzNSwgMC45NzkyMiwgMS4wMDEzNSwgMC45NzkyMiwgMS4wMDEzNSwgMC45NzkyMiwgMS4wMDEzNSwgMC45NzkyMiwgMS4wMDEzNSwgMC45NzkyMiwgMS4wMDEzNSwgMC45NzkyMiwgMS4wNjc3NywgMS4wMjE5NywgMC45MTE0MiwgMC45Njc1MiwgMC45MTE0MiwgMC45OTM2MSwgMC45NzE2OCwgMC45OTM2MSwgMC45NzE2OCwgMC45OTM2MSwgMC45NzE2OCwgMS4yMzE5OSwgMS4wMzYsIDAuOTczNjMsIDEuMDY1ODUsIDAuOTQzODUsIDAuOTY3MDUsIDAuOTc1NTIsIDAuOTQxNjUsIDEsIDEsIDAuOTYwODMsIDEuMTI2MSwgMS4zMTgxOCwgMS4zMTgxOCwgMS4zMTgxOCwgMS4zMTgxOCwgMS4zMTgxOCwgMS4zMTgxOCwgMS4zMTgxOCwgMS4zMTgxOCwgMS4zMTgxOCwgMC45NTE2MSwgMS4yNzEyNiwgMS4wMDgxMSwgMC44MzI4NCwgMC43NzcwMiwgMC45OTEzNywgMC45NTI1MywgMS4wMzQ3LCAwLjg2MTQyLCAxLjA3MjA1LCAxLjE0MjM2LCAwLjk3MzYzLCAwLjg5NzIzLCAwLjg2ODY5LCAxLjA5ODE4LCAwLjc5NDI5LCAwLjk5MzYxLCAxLjA1ODE1LCAwLjk3NTUyLCAxLjE0MDYsIDAuOTAxMjgsIDEuMDY2NjIsIDEuMDQzOTYsIDEuMTA2MTUsIDAuODQ5MTgsIDAuOTc1NTIsIDEuMDQ2OTQsIDAuOTQ0MzYsIDAuOTgwMTUsIDAuOTYwODMsIDAuOTExNDIsIDEuMDAzNTYsIDAuOTgxNywgMS4wMTk0NSwgMC45ODk5OSwgMS4xNDA2LCAwLjkxMTQyLCAxLjA0OTYxLCAwLjk4OTgsIDEuMDA2MzksIDEuMTQyMzYsIDEuMDc1MTQsIDEuMDQ5NjEsIDAuOTk2MDcsIDEuMDI4OTcsIDEuMDA4LCAwLjk4OTgsIDAuOTUxMzQsIDEuMDA2MzksIDEuMTExMjEsIDEuMTQyMzYsIDEuMDA1MTgsIDAuOTc5ODEsIDEuMDIxODYsIDEsIDEuMDg1NzgsIDAuOTQxNjUsIDAuOTkzMTQsIDAuOTgzODcsIDAuOTMwMjgsIDAuOTMzNzcsIDEuMzUxMjUsIDEuMDc1MTQsIDEuMTA2ODcsIDAuOTM0OTEsIDEuMDQyMzIsIDEuMDAzNTEsIDEuMTQyMzYsIDEuMDc1MTQsIDAuOTQxNjUsIDEuMDc1MTQsIDEuMDAzNTEsIDAuNzk0MjksIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEuMDkwOTcsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDAuOTM1MDMsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDAuOTY2MDksIDEsIDEsIDEsIDEsIDEsIDEsIDEuMDY3NzcsIDEuMDIxOTcsIDEuMDY3NzcsIDEuMDIxOTcsIDEuMDY3NzcsIDEuMDIxOTcsIDAuOTExNDIsIDAuOTY3NTIsIDEsIDEuMjEyNjEsIDAuODk5MDMsIDEsIDEsIDAuNzUxNTUsIDEuMDQ3NDUsIDEuMDQ3NDUsIDEuMDQ3NDUsIDEuMDQzOTQsIDAuOTg2MzMsIDAuOTg2MzMsIDAuOTg2MzMsIDAuNzI5NTksIDAuNzI5NTksIDEuMjA1MDIsIDAuOTE0MDYsIDEuMjY1MTQsIDEuMjIyLCAxLjAyOTU2LCAxLjAzMzcyLCAxLjAzMzcyLCAwLjk2MDM5LCAxLjI0NjMzLCAxLCAxLjA5MTI1LCAwLjkzMzI3LCAxLjAzMzM2LCAxLjE2NTQxLCAxLjAzNiwgMSwgMSwgMSwgMC43NzEsIDEsIDEsIDEuMTU1NzQsIDEuMTU1NzQsIDEuMTU1NzQsIDEuMTU1NzQsIDAuODYzNjQsIDAuOTQ0MzQsIDAuODYyNzksIDAuOTQ0MzQsIDAuODYyMjQsIDEsIDEsIDEuMTY3OTgsIDEsIDAuOTYwODUsIDAuOTAwNjgsIDEuMjEyMzcsIDEuMTg0MTYsIDEuMTM5MDQsIDAuNjk4MjUsIDAuOTcxNiwgMi4xMDMzOSwgMS4yOTAwNCwgMS4yOTAwNCwgMS4yMTMzOSwgMS4yOTAwNCwgMS4yOTAwNCwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMS40MjYwMywgMSwgMC45OTg2MiwgMC45OTg2MiwgMSwgMC44NzAyNSwgMC44NzAyNSwgMC44NzAyNSwgMC44NzAyNSwgMS4xODc3NSwgMS40MjYwMywgMSwgMS40MjYwMywgMS40MjYwMywgMC45OTg2MiwgMSwgMSwgMSwgMSwgMSwgMS4yODg2LCAxLjA0MzE1LCAxLjE1Mjk2LCAxLjM0MTYzLCAxLCAxLCAxLCAxLjEzMjY5LCAxLjEzMjY5LCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxXTsKY29uc3QgU2Vnb2V1aUJvbGRJdGFsaWNNZXRyaWNzID0gewogIGxpbmVIZWlnaHQ6IDEuMzMwMDgsCiAgbGluZUdhcDogMAp9Owpjb25zdCBTZWdvZXVpSXRhbGljRmFjdG9ycyA9IFsxLjc2NzM4LCAxLCAxLCAwLjk4OTQ2LCAxLjE0NzYzLCAxLjA1MzY1LCAxLjA2MjM0LCAwLjk2OTI3LCAwLjkyNTg2LCAxLjE1MzczLCAxLjE4NDE0LCAwLjkxMzQ5LCAwLjkxMzQ5LCAxLjA3NDAzLCAxLjE3MzA4LCAwLjc4MzgzLCAxLjIwMDg4LCAwLjc4MzgzLCAxLjQyNTMxLCAwLjk2OTI3LCAwLjk2OTI3LCAwLjk2OTI3LCAwLjk2OTI3LCAwLjk2OTI3LCAwLjk2OTI3LCAwLjk2OTI3LCAwLjk2OTI3LCAwLjk2OTI3LCAwLjk2OTI3LCAwLjc4MzgzLCAwLjc4MzgzLCAxLjE3MzA4LCAxLjE3MzA4LCAxLjE3MzA4LCAwLjc3MzQ5LCAwLjk0NTY1LCAwLjk0NzI5LCAwLjg1OTQ0LCAwLjg4NTA2LCAwLjk4NTgsIDAuNzQ4MTcsIDAuODAwMTYsIDAuODg0NDksIDAuOTgwMzksIDAuOTU3ODIsIDAuNjkyMzgsIDAuODk4OTgsIDAuODMyMzEsIDAuOTgxODMsIDEuMDM5ODksIDAuOTY5MjQsIDAuODYyMzcsIDAuOTY5MjQsIDAuODA1OTUsIDAuNzQ1MjQsIDAuODYwOTEsIDAuOTU0MDIsIDAuOTQxNDMsIDAuOTg0NDgsIDAuODg1OCwgMC44MzA4OSwgMC45MzI4NSwgMS4wOTQ5LCAxLjM5MDE2LCAxLjA5NDksIDEuNDU5OTQsIDAuNzQ2MjcsIDEuMDQ4MzksIDAuOTc0NTQsIDAuOTc0NTQsIDAuODcyMDcsIDAuOTc0NTQsIDAuODc1MzMsIDEuMDYxNTEsIDAuOTc0NTQsIDEuMDAxNzYsIDEuMTY0ODQsIDEuMDgxMzIsIDAuOTgwNDcsIDEuMTY0ODQsIDEuMDI5ODksIDEuMDEwNTQsIDAuOTYyMjUsIDAuOTc0NTQsIDAuOTc0NTQsIDEuMDY1OTgsIDAuNzkwMDQsIDEuMTYzNDQsIDEuMDAzNTEsIDAuOTQ2MjksIDAuOTk3MywgMC45MTAxNiwgMC45Njc3NywgMC45MDQzLCAwLjkxMDgyLCAwLjkyNDgxLCAwLjkxMDgyLCAxLjE3MzA4LCAwLjk1NzQ4LCAwLjk2OTI3LCAwLjk2OTI3LCAxLCAwLjk2OTI3LCAwLjkyNDgxLCAwLjgwNTk3LCAxLjA0ODM5LCAxLjIzMzkzLCAxLjE3ODEsIDAuOTI0NSwgMS4xNzMwOCwgMS4yMDgwOCwgMC42MzIxOCwgMC45NDI2MSwgMS4yNDgyMiwgMS4wOTk3MSwgMS4wOTk3MSwgMS4wNDgzOSwgMSwgMC44NTI3MywgMC43ODAzMiwgMS4wNDgzOSwgMS4wOTk3MSwgMS4yMjMyNiwgMC45MjQ1LCAxLjA5ODM2LCAxLjEzNTI1LCAxLjE1MjIyLCAwLjcwNDI0LCAwLjk0NzI5LCAwLjk0NzI5LCAwLjk0NzI5LCAwLjk0NzI5LCAwLjk0NzI5LCAwLjk0NzI5LCAwLjg1NDk4LCAwLjg4NTA2LCAwLjc0ODE3LCAwLjc0ODE3LCAwLjc0ODE3LCAwLjc0ODE3LCAwLjk1NzgyLCAwLjk1NzgyLCAwLjk1NzgyLCAwLjk1NzgyLCAwLjk4NTgsIDEuMDM5ODksIDAuOTY5MjQsIDAuOTY5MjQsIDAuOTY5MjQsIDAuOTY5MjQsIDAuOTY5MjQsIDEuMTczMDgsIDAuOTY5MjQsIDAuOTU0MDIsIDAuOTU0MDIsIDAuOTU0MDIsIDAuOTU0MDIsIDAuODMwODksIDAuODYyMzcsIDAuODg0MDksIDAuOTc0NTQsIDAuOTc0NTQsIDAuOTc0NTQsIDAuOTc0NTQsIDAuOTc0NTQsIDAuOTc0NTQsIDAuOTI5MTYsIDAuODcyMDcsIDAuODc1MzMsIDAuODc1MzMsIDAuODc1MzMsIDAuODc1MzMsIDAuOTMxNDYsIDAuOTMxNDYsIDAuOTMxNDYsIDAuOTMxNDYsIDAuOTM4NTQsIDEuMDEwNTQsIDAuOTYyMjUsIDAuOTYyMjUsIDAuOTYyMjUsIDAuOTYyMjUsIDAuOTYyMjUsIDEuMjQ4MjIsIDAuODc2MSwgMS4wMDM1MSwgMS4wMDM1MSwgMS4wMDM1MSwgMS4wMDM1MSwgMC45Njc3NywgMC45NzQ1NCwgMC45Njc3NywgMC45NDcyOSwgMC45NzQ1NCwgMC45NDcyOSwgMC45NzQ1NCwgMC45NDcyOSwgMC45NzQ1NCwgMC44ODUwNiwgMC44NzIwNywgMC44ODUwNiwgMC44NzIwNywgMC44ODUwNiwgMC44NzIwNywgMC44ODUwNiwgMC44NzIwNywgMC45ODU4LCAwLjk1MzkxLCAwLjk4NTgsIDAuOTc0NTQsIDAuNzQ4MTcsIDAuODc1MzMsIDAuNzQ4MTcsIDAuODc1MzMsIDAuNzQ4MTcsIDAuODc1MzMsIDAuNzQ4MTcsIDAuODc1MzMsIDAuNzQ4MTcsIDAuODc1MzMsIDAuODg0NDksIDAuOTc0NTQsIDAuODg0NDksIDAuOTc0NTQsIDAuODg0NDksIDAuOTc0NTQsIDEsIDEsIDAuOTgwMzksIDEuMDAxNzYsIDAuOTgwMzksIDEuMDAxNzYsIDAuOTU3ODIsIDAuOTMxNDYsIDAuOTU3ODIsIDAuOTMxNDYsIDAuOTU3ODIsIDAuOTMxNDYsIDAuOTU3ODIsIDEuMTY0ODQsIDAuOTU3ODIsIDAuOTMxNDYsIDAuODQ0MjEsIDEuMTI3NjEsIDAuNjkyMzgsIDEuMDgxMzIsIDEsIDEsIDAuOTgwNDcsIDAuODMyMzEsIDEuMTY0ODQsIDEsIDEsIDAuODQ3MjMsIDEuMDQ4NjEsIDAuODQ3MjMsIDAuNzg3NTUsIDAuODMyMzEsIDEuMjM3MzYsIDEuMDM5ODksIDEuMDEwNTQsIDEsIDEsIDEuMDM5ODksIDEuMDEwNTQsIDAuOTg1NywgMS4wMzg0OSwgMS4wMTA1NCwgMC45NjkyNCwgMC45NjIyNSwgMC45NjkyNCwgMC45NjIyNSwgMC45NjkyNCwgMC45NjIyNSwgMC45MjM4MywgMC45MDE3MSwgMC44MDU5NSwgMS4wNjU5OCwgMSwgMSwgMC44MDU5NSwgMS4wNjU5OCwgMC43NDUyNCwgMC43OTAwNCwgMC43NDUyNCwgMC43OTAwNCwgMC43NDUyNCwgMC43OTAwNCwgMC43NDUyNCwgMC43OTAwNCwgMSwgMSwgMC44NjA5MSwgMS4wMjc1OSwgMC44NTc3MSwgMS4xNjM0NCwgMC45NTQwMiwgMS4wMDM1MSwgMC45NTQwMiwgMS4wMDM1MSwgMC45NTQwMiwgMS4wMDM1MSwgMC45NTQwMiwgMS4wMDM1MSwgMC45NTQwMiwgMS4wMDM1MSwgMC45NTQwMiwgMS4wMDM1MSwgMC45ODQ0OCwgMC45OTczLCAwLjgzMDg5LCAwLjk2Nzc3LCAwLjgzMDg5LCAwLjkzMjg1LCAwLjkwNDMsIDAuOTMyODUsIDAuOTA0MywgMC45MzI4NSwgMC45MDQzLCAxLjMxODY4LCAwLjk2OTI3LCAwLjk0NzI5LCAwLjk3NDU0LCAwLjg1NDk4LCAwLjkyOTE2LCAwLjk2OTI0LCAwLjg3NjEsIDEsIDEsIDAuODYwOTEsIDEuMTYzNDQsIDEuMDQ4MzksIDEuMDQ4MzksIDEuMDQ4MzksIDEuMDQ4MzksIDEuMDQ4MzksIDEuMDQ4MzksIDEuMDQ4MzksIDEuMDQ4MzksIDEuMDQ4MzksIDAuODE5NjUsIDAuODE5NjUsIDAuOTQ3MjksIDAuNzgwMzIsIDAuNzEwMjIsIDAuOTA4ODMsIDAuODQxNzEsIDAuOTk4NzcsIDAuNzc1OTYsIDEuMDU3MzQsIDEuMiwgMC45NDcyOSwgMC44NTk0NCwgMC44Mjc5MSwgMC45NjA3LCAwLjc0ODE3LCAwLjkzMjg1LCAwLjk4MDM5LCAwLjk2OTI0LCAwLjk1NzgyLCAwLjg5ODk4LCAwLjk4MzE2LCAwLjk4MTgzLCAxLjAzOTg5LCAwLjc4NjE0LCAwLjk2OTI0LCAwLjk3NjQyLCAwLjg2MjM3LCAwLjg2MDc1LCAwLjg2MDkxLCAwLjgzMDg5LCAwLjkwMDgyLCAwLjg4NTgsIDAuOTcyOTYsIDEuMDEyODQsIDAuOTU3ODIsIDAuODMwODksIDEuMDk3NiwgMS4wNCwgMS4wMzM0MiwgMS4yLCAxLjA2NzUsIDEuMDk3NiwgMC45ODIwNSwgMS4wMzgwOSwgMS4wNTA5NywgMS4wNCwgMC45NTM2NCwgMS4wMzM0MiwgMS4wNTQwMSwgMS4yLCAxLjAyMTQ4LCAxLjAxMTksIDEuMDQ3MjQsIDEuMDEyNywgMS4wMjczMiwgMC45NjIyNSwgMC44OTY1LCAwLjk3NzgzLCAwLjkzNTc0LCAwLjk0ODE4LCAxLjMwNjc5LCAxLjA2NzUsIDEuMTE4MjYsIDAuOTk4MjEsIDEuMDU1NywgMS4wMzI2LCAxLjIsIDEuMDY3NSwgMC45NjIyNSwgMS4wNjc1LCAxLjAzMjYsIDAuNzQ4MTcsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEuMDM3NTQsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDAuODc1MzMsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDAuOTg3MDUsIDEsIDEsIDEsIDEsIDEsIDEsIDAuOTg0NDgsIDAuOTk3MywgMC45ODQ0OCwgMC45OTczLCAwLjk4NDQ4LCAwLjk5NzMsIDAuODMwODksIDAuOTY3NzcsIDEsIDEuMjAwODgsIDAuODk5MDMsIDEsIDEsIDAuNzUxNTUsIDAuOTQ5NDUsIDAuOTQ5NDUsIDAuOTQ5NDUsIDAuOTQ5NDUsIDEuMTIzMTcsIDEuMTIzMTcsIDEuMTIzMTcsIDAuNjc2MDMsIDAuNjc2MDMsIDEuMTU2MjEsIDAuNzM1ODQsIDEuMjExOTEsIDEuMjIxMzUsIDEuMDY0ODMsIDAuOTQ4NjgsIDAuOTQ4NjgsIDAuOTU5OTYsIDEuMjQ2MzMsIDEsIDEuMDc0OTcsIDAuODc3MDksIDAuOTY5MjcsIDEuMDE0NzMsIDAuOTY5MjcsIDEsIDEsIDEsIDAuNzcyOTUsIDEsIDEsIDEuMDk4MzYsIDEuMDk4MzYsIDEuMDk4MzYsIDEuMDE1MjIsIDAuODYzMjEsIDAuOTQ0MzQsIDAuODY0OSwgMC45NDQzNCwgMC44NjE4MiwgMSwgMSwgMS4wODMsIDEsIDAuOTE1NzgsIDAuODY0MzgsIDEuMTczMDgsIDEuMTg0MTYsIDEuMTQ1ODksIDAuNjk4MjUsIDAuOTc2MjIsIDEuOTY3OTEsIDEuMjQ4MjIsIDEuMjQ4MjIsIDEuMTczMDgsIDEuMjQ4MjIsIDEuMjQ4MjIsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEuNDI2MDMsIDEsIDAuOTk4NjIsIDAuOTk4NjIsIDEsIDAuODcwMjUsIDAuODcwMjUsIDAuODcwMjUsIDAuODcwMjUsIDEuMTc5ODQsIDEuNDI2MDMsIDEsIDEuNDI2MDMsIDEuNDI2MDMsIDAuOTk4NjIsIDEsIDEsIDEsIDEsIDEsIDEuMjg4NiwgMS4wNDMxNSwgMS4xNTI5NiwgMS4zNDE2MywgMSwgMSwgMSwgMS4xMDc0MiwgMS4xMDc0MiwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMV07CmNvbnN0IFNlZ29ldWlJdGFsaWNNZXRyaWNzID0gewogIGxpbmVIZWlnaHQ6IDEuMzMwMDgsCiAgbGluZUdhcDogMAp9Owpjb25zdCBTZWdvZXVpUmVndWxhckZhY3RvcnMgPSBbMS43NjczOCwgMSwgMSwgMC45ODU5NCwgMS4wMjI4NSwgMS4xMDQ1NCwgMS4wNjIzNCwgMC45NjkyNywgMC45MjAzNywgMS4xOTk4NSwgMS4yMDQ2LCAwLjkwNjE2LCAwLjkwNjE2LCAxLjA3MTUyLCAxLjE3MTQsIDAuNzgwMzIsIDEuMjAwODgsIDAuNzgwMzIsIDEuNDAyNDYsIDAuOTY5MjcsIDAuOTY5MjcsIDAuOTY5MjcsIDAuOTY5MjcsIDAuOTY5MjcsIDAuOTY5MjcsIDAuOTY5MjcsIDAuOTY5MjcsIDAuOTY5MjcsIDAuOTY5MjcsIDAuNzgwMzIsIDAuNzgwMzIsIDEuMTcxNCwgMS4xNzE0LCAxLjE3MTQsIDAuODA1OTcsIDAuOTQwODQsIDAuOTY3MDYsIDAuODU5NDQsIDAuODU3MzQsIDAuOTcwOTMsIDAuNzU4NDIsIDAuNzk5MzYsIDAuODgxOTgsIDAuOTgzMSwgMC45NTc4MiwgMC43MTM4NywgMC44Njk2OSwgMC44NDYzNiwgMS4wNzc5NiwgMS4wMzU4NCwgMC45NjkyNCwgMC44Mzk2OCwgMC45NjkyNCwgMC44MjgyNiwgMC43OTY0OSwgMC44NTc3MSwgMC45NTEzMiwgMC45MzExOSwgMC45ODk2NSwgMC44ODQzMywgMC44Mjg3LCAwLjkzMzY1LCAxLjA4NjEyLCAxLjM2MzgsIDEuMDg2MTIsIDEuNDU3ODYsIDAuNzQ2MjcsIDAuODA0OTksIDAuOTE0ODQsIDEuMDU3MDcsIDAuOTIzODMsIDEuMDU4ODIsIDAuOTQwMywgMS4xMjY1NCwgMS4wNTg4MiwgMS4wMTc1NiwgMS4wOTAxMSwgMS4wOTAxMSwgMC45OTQxNCwgMS4wOTAxMSwgMS4wMzQsIDEuMDE3NTYsIDEuMDUzNTYsIDEuMDU3MDcsIDEuMDU4ODIsIDEuMDQzOTksIDAuODQ4NjMsIDEuMjE5NjgsIDEuMDE3NTYsIDAuOTU4MDEsIDEuMDAwNjgsIDAuOTE3OTcsIDAuOTY3NzcsIDAuOTA0MywgMC45MDM1MSwgMC45MjEwNSwgMC45MDM1MSwgMS4xNzE0LCAwLjg1MzM3LCAwLjk2OTI3LCAwLjk2OTI3LCAwLjk5OTEyLCAwLjk2OTI3LCAwLjkyMTA1LCAwLjgwNTk3LCAxLjI0MzQsIDEuMjA4MDgsIDEuMDU5MzcsIDAuOTA5NTcsIDEuMTcxNCwgMS4yMDgwOCwgMC43NTE1NSwgMC45NDI2MSwgMS4yNDY0NCwgMS4wOTk3MSwgMS4wOTk3MSwgMC44NDc1MSwgMSwgMC44NTI3MywgMC43ODAzMiwgMC42MTU4NCwgMS4wNTQyNSwgMS4xNzkxNCwgMC45MDk1NywgMS4wODY2NSwgMS4xMTU5MywgMS4xNDE2OSwgMC43MzM4MSwgMC45NjcwNiwgMC45NjcwNiwgMC45NjcwNiwgMC45NjcwNiwgMC45NjcwNiwgMC45NjcwNiwgMC44NjAzNSwgMC44NTczNCwgMC43NTg0MiwgMC43NTg0MiwgMC43NTg0MiwgMC43NTg0MiwgMC45NTc4MiwgMC45NTc4MiwgMC45NTc4MiwgMC45NTc4MiwgMC45NzA5MywgMS4wMzU4NCwgMC45NjkyNCwgMC45NjkyNCwgMC45NjkyNCwgMC45NjkyNCwgMC45NjkyNCwgMS4xNzE0LCAwLjk2OTI0LCAwLjk1MTMyLCAwLjk1MTMyLCAwLjk1MTMyLCAwLjk1MTMyLCAwLjgyODcsIDAuODM5NjgsIDAuODkwNDksIDAuOTE0ODQsIDAuOTE0ODQsIDAuOTE0ODQsIDAuOTE0ODQsIDAuOTE0ODQsIDAuOTE0ODQsIDAuOTM1NzUsIDAuOTIzODMsIDAuOTQwMywgMC45NDAzLCAwLjk0MDMsIDAuOTQwMywgMC44NzE3LCAwLjg3MTcsIDAuODcxNywgMC44NzE3LCAxLjAwNTI3LCAxLjAxNzU2LCAxLjA1MzU2LCAxLjA1MzU2LCAxLjA1MzU2LCAxLjA1MzU2LCAxLjA1MzU2LCAxLjI0NjQ0LCAwLjk1OTIzLCAxLjAxNzU2LCAxLjAxNzU2LCAxLjAxNzU2LCAxLjAxNzU2LCAwLjk2Nzc3LCAxLjA1NzA3LCAwLjk2Nzc3LCAwLjk2NzA2LCAwLjkxNDg0LCAwLjk2NzA2LCAwLjkxNDg0LCAwLjk2NzA2LCAwLjkxNDg0LCAwLjg1NzM0LCAwLjkyMzgzLCAwLjg1NzM0LCAwLjkyMzgzLCAwLjg1NzM0LCAwLjkyMzgzLCAwLjg1NzM0LCAwLjkyMzgzLCAwLjk3MDkzLCAxLjA5NjksIDAuOTcwOTMsIDEuMDU4ODIsIDAuNzU4NDIsIDAuOTQwMywgMC43NTg0MiwgMC45NDAzLCAwLjc1ODQyLCAwLjk0MDMsIDAuNzU4NDIsIDAuOTQwMywgMC43NTg0MiwgMC45NDAzLCAwLjg4MTk4LCAxLjA1ODgyLCAwLjg4MTk4LCAxLjA1ODgyLCAwLjg4MTk4LCAxLjA1ODgyLCAxLCAxLCAwLjk4MzEsIDEuMDE3NTYsIDAuOTgzMSwgMS4wMTc1NiwgMC45NTc4MiwgMC44NzE3LCAwLjk1NzgyLCAwLjg3MTcsIDAuOTU3ODIsIDAuODcxNywgMC45NTc4MiwgMS4wOTAxMSwgMC45NTc4MiwgMC44NzE3LCAwLjg0Nzg0LCAxLjExNTUxLCAwLjcxMzg3LCAxLjA5MDExLCAxLCAxLCAwLjk5NDE0LCAwLjg0NjM2LCAxLjA5MDExLCAxLCAxLCAwLjg0NjM2LCAxLjA1MzYsIDAuODQ2MzYsIDAuOTQyOTgsIDAuODQ2MzYsIDEuMjMyOTcsIDEuMDM1ODQsIDEuMDE3NTYsIDEsIDEsIDEuMDM1ODQsIDEuMDE3NTYsIDEuMDAzMjMsIDEuMDM0NDQsIDEuMDE3NTYsIDAuOTY5MjQsIDEuMDUzNTYsIDAuOTY5MjQsIDEuMDUzNTYsIDAuOTY5MjQsIDEuMDUzNTYsIDAuOTMwNjYsIDAuOTgyOTMsIDAuODI4MjYsIDEuMDQzOTksIDEsIDEsIDAuODI4MjYsIDEuMDQzOTksIDAuNzk2NDksIDAuODQ4NjMsIDAuNzk2NDksIDAuODQ4NjMsIDAuNzk2NDksIDAuODQ4NjMsIDAuNzk2NDksIDAuODQ4NjMsIDEsIDEsIDAuODU3NzEsIDEuMTczMTgsIDAuODU3NzEsIDEuMjE5NjgsIDAuOTUxMzIsIDEuMDE3NTYsIDAuOTUxMzIsIDEuMDE3NTYsIDAuOTUxMzIsIDEuMDE3NTYsIDAuOTUxMzIsIDEuMDE3NTYsIDAuOTUxMzIsIDEuMDE3NTYsIDAuOTUxMzIsIDEuMDE3NTYsIDAuOTg5NjUsIDEuMDAwNjgsIDAuODI4NywgMC45Njc3NywgMC44Mjg3LCAwLjkzMzY1LCAwLjkwNDMsIDAuOTMzNjUsIDAuOTA0MywgMC45MzM2NSwgMC45MDQzLCAxLjA4NTcxLCAwLjk2OTI3LCAwLjk2NzA2LCAwLjkxNDg0LCAwLjg2MDM1LCAwLjkzNTc1LCAwLjk2OTI0LCAwLjk1OTIzLCAxLCAxLCAwLjg1NzcxLCAxLjIxOTY4LCAxLjExNDM3LCAxLjExNDM3LCAwLjkzMTA5LCAwLjkxMjAyLCAwLjYwNDExLCAwLjg0MTY0LCAwLjU1NTcyLCAxLjAxMTczLCAwLjk3MzYxLCAwLjgxODE4LCAwLjgxODE4LCAwLjk2NjM1LCAwLjc4MDMyLCAwLjcyNzI3LCAwLjkyMzY2LCAwLjk4NjAxLCAxLjAzNDA1LCAwLjc3OTY4LCAxLjA5Nzk5LCAxLjIsIDAuOTY3MDYsIDAuODU5NDQsIDAuODU2MzgsIDAuOTY0OTEsIDAuNzU4NDIsIDAuOTMzNjUsIDAuOTgzMSwgMC45NjkyNCwgMC45NTc4MiwgMC44Njk2OSwgMC45NDE1MiwgMS4wNzc5NiwgMS4wMzU4NCwgMC43ODQzNywgMC45NjkyNCwgMC45ODcxNSwgMC44Mzk2OCwgMC44MzQ5MSwgMC44NTc3MSwgMC44Mjg3LCAwLjk0NDkyLCAwLjg4NDMzLCAwLjkyODcsIDEuMDA5OCwgMC45NTc4MiwgMC44Mjg3LCAxLjA2MjUsIDAuOTgyNDgsIDEuMDM0MjQsIDEuMiwgMS4wMTA3MSwgMS4wNjI1LCAwLjk1MjQ2LCAxLjAzODA5LCAxLjA0OTEyLCAwLjk4MjQ4LCAxLjAwMjIxLCAxLjAzNDI0LCAxLjA1NDQzLCAxLjIsIDEuMDQ3ODUsIDAuOTk2MDksIDEuMDAxNjksIDEuMDUxNzYsIDAuOTkzNDYsIDEuMDUzNTYsIDAuOTA4NywgMS4wMzAwNCwgMC45NTU0MiwgMC45MzExNywgMS4yMzM2MiwgMS4wMTA3MSwgMS4wNzgzMSwgMS4wMjUxMiwgMS4wNTIwNSwgMS4wMzUwMiwgMS4yLCAxLjAxMDcxLCAxLjA1MzU2LCAxLjAxMDcxLCAxLjAzNTAyLCAwLjc1ODQyLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLjAzNzE5LCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAwLjk0MDMsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEuMDQwMjEsIDEsIDEsIDEsIDEsIDEsIDEsIDAuOTg5NjUsIDEuMDAwNjgsIDAuOTg5NjUsIDEuMDAwNjgsIDAuOTg5NjUsIDEuMDAwNjgsIDAuODI4NywgMC45Njc3NywgMSwgMS4yMDA4OCwgMC44OTkwMywgMSwgMSwgMC43NTE1NSwgMS4wMzA3NywgMS4wMzA3NywgMS4wMzA3NywgMS4wMzA3NywgMS4xMzE5NiwgMS4xMzE5NiwgMS4xMzE5NiwgMC42NzQyOCwgMC42NzQyOCwgMS4xNjAzOSwgMC43MzI5MSwgMS4yMDk5NiwgMS4yMjEzNSwgMS4wNjQ4MywgMC45NDg2OCwgMC45NDg2OCwgMC45NTk5NiwgMS4yNDYzMywgMSwgMS4wNzQ5NywgMC44Nzc5NiwgMC45NjkyNywgMS4wMTUxOCwgMC45NjkyNywgMSwgMSwgMSwgMC43NzI5NSwgMSwgMSwgMS4xMDUzOSwgMS4xMDUzOSwgMS4xMTM1OCwgMS4wNjk2NywgMC44NjI3OSwgMC45NDQzNCwgMC44NjI3OSwgMC45NDQzNCwgMC44NjE4MiwgMSwgMSwgMS4wODMsIDEsIDAuOTE1NzgsIDAuODY1MDcsIDEuMTcxNCwgMS4xODQxNiwgMS4xNDU4OSwgMC42OTgyNSwgMC45NzYyMiwgMS45Njk3LCAxLjI0ODIyLCAxLjI0ODIyLCAxLjE3MjM4LCAxLjI0ODIyLCAxLjI0ODIyLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLjQyNjAzLCAxLCAwLjk5ODYyLCAwLjk5ODYyLCAxLCAwLjg3MDI1LCAwLjg3MDI1LCAwLjg3MDI1LCAwLjg3MDI1LCAxLjE4MDgzLCAxLjQyNjAzLCAxLCAxLjQyNjAzLCAxLjQyNjAzLCAwLjk5ODYyLCAxLCAxLCAxLCAxLCAxLCAxLjI4ODYsIDEuMDQzMTUsIDEuMTUyOTYsIDEuMzQxNjMsIDEsIDEsIDEsIDEuMTA5MzgsIDEuMTA5MzgsIDEsIDEsIDEsIDEuMDU0MjUsIDEuMDk5NzEsIDEuMDk5NzEsIDEuMDk5NzEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDFdOwpjb25zdCBTZWdvZXVpUmVndWxhck1ldHJpY3MgPSB7CiAgbGluZUhlaWdodDogMS4zMzAwOCwKICBsaW5lR2FwOiAwCn07Cgo7Ly8gLi9zcmMvY29yZS94ZmFfZm9udHMuanMKCgoKCgoKCgoKCgpjb25zdCBnZXRYRkFGb250TWFwID0gZ2V0TG9va3VwVGFibGVGYWN0b3J5KGZ1bmN0aW9uICh0KSB7CiAgdFsiTXlyaWFkUHJvLVJlZ3VsYXIiXSA9IHRbIlBkZkpTLUZhbGxiYWNrLVJlZ3VsYXIiXSA9IHsKICAgIG5hbWU6ICJMaWJlcmF0aW9uU2Fucy1SZWd1bGFyIiwKICAgIGZhY3RvcnM6IE15cmlhZFByb1JlZ3VsYXJGYWN0b3JzLAogICAgYmFzZVdpZHRoczogTGliZXJhdGlvblNhbnNSZWd1bGFyV2lkdGhzLAogICAgYmFzZU1hcHBpbmc6IExpYmVyYXRpb25TYW5zUmVndWxhck1hcHBpbmcsCiAgICBtZXRyaWNzOiBNeXJpYWRQcm9SZWd1bGFyTWV0cmljcwogIH07CiAgdFsiTXlyaWFkUHJvLUJvbGQiXSA9IHRbIlBkZkpTLUZhbGxiYWNrLUJvbGQiXSA9IHsKICAgIG5hbWU6ICJMaWJlcmF0aW9uU2Fucy1Cb2xkIiwKICAgIGZhY3RvcnM6IE15cmlhZFByb0JvbGRGYWN0b3JzLAogICAgYmFzZVdpZHRoczogTGliZXJhdGlvblNhbnNCb2xkV2lkdGhzLAogICAgYmFzZU1hcHBpbmc6IExpYmVyYXRpb25TYW5zQm9sZE1hcHBpbmcsCiAgICBtZXRyaWNzOiBNeXJpYWRQcm9Cb2xkTWV0cmljcwogIH07CiAgdFsiTXlyaWFkUHJvLUl0Il0gPSB0WyJNeXJpYWRQcm8tSXRhbGljIl0gPSB0WyJQZGZKUy1GYWxsYmFjay1JdGFsaWMiXSA9IHsKICAgIG5hbWU6ICJMaWJlcmF0aW9uU2Fucy1JdGFsaWMiLAogICAgZmFjdG9yczogTXlyaWFkUHJvSXRhbGljRmFjdG9ycywKICAgIGJhc2VXaWR0aHM6IExpYmVyYXRpb25TYW5zSXRhbGljV2lkdGhzLAogICAgYmFzZU1hcHBpbmc6IExpYmVyYXRpb25TYW5zSXRhbGljTWFwcGluZywKICAgIG1ldHJpY3M6IE15cmlhZFByb0l0YWxpY01ldHJpY3MKICB9OwogIHRbIk15cmlhZFByby1Cb2xkSXQiXSA9IHRbIk15cmlhZFByby1Cb2xkSXRhbGljIl0gPSB0WyJQZGZKUy1GYWxsYmFjay1Cb2xkSXRhbGljIl0gPSB7CiAgICBuYW1lOiAiTGliZXJhdGlvblNhbnMtQm9sZEl0YWxpYyIsCiAgICBmYWN0b3JzOiBNeXJpYWRQcm9Cb2xkSXRhbGljRmFjdG9ycywKICAgIGJhc2VXaWR0aHM6IExpYmVyYXRpb25TYW5zQm9sZEl0YWxpY1dpZHRocywKICAgIGJhc2VNYXBwaW5nOiBMaWJlcmF0aW9uU2Fuc0JvbGRJdGFsaWNNYXBwaW5nLAogICAgbWV0cmljczogTXlyaWFkUHJvQm9sZEl0YWxpY01ldHJpY3MKICB9OwogIHQuQXJpYWxNVCA9IHQuQXJpYWwgPSB0WyJBcmlhbC1SZWd1bGFyIl0gPSB7CiAgICBuYW1lOiAiTGliZXJhdGlvblNhbnMtUmVndWxhciIsCiAgICBiYXNlV2lkdGhzOiBMaWJlcmF0aW9uU2Fuc1JlZ3VsYXJXaWR0aHMsCiAgICBiYXNlTWFwcGluZzogTGliZXJhdGlvblNhbnNSZWd1bGFyTWFwcGluZwogIH07CiAgdFsiQXJpYWwtQm9sZE1UIl0gPSB0WyJBcmlhbC1Cb2xkIl0gPSB7CiAgICBuYW1lOiAiTGliZXJhdGlvblNhbnMtQm9sZCIsCiAgICBiYXNlV2lkdGhzOiBMaWJlcmF0aW9uU2Fuc0JvbGRXaWR0aHMsCiAgICBiYXNlTWFwcGluZzogTGliZXJhdGlvblNhbnNCb2xkTWFwcGluZwogIH07CiAgdFsiQXJpYWwtSXRhbGljTVQiXSA9IHRbIkFyaWFsLUl0YWxpYyJdID0gewogICAgbmFtZTogIkxpYmVyYXRpb25TYW5zLUl0YWxpYyIsCiAgICBiYXNlV2lkdGhzOiBMaWJlcmF0aW9uU2Fuc0l0YWxpY1dpZHRocywKICAgIGJhc2VNYXBwaW5nOiBMaWJlcmF0aW9uU2Fuc0l0YWxpY01hcHBpbmcKICB9OwogIHRbIkFyaWFsLUJvbGRJdGFsaWNNVCJdID0gdFsiQXJpYWwtQm9sZEl0YWxpYyJdID0gewogICAgbmFtZTogIkxpYmVyYXRpb25TYW5zLUJvbGRJdGFsaWMiLAogICAgYmFzZVdpZHRoczogTGliZXJhdGlvblNhbnNCb2xkSXRhbGljV2lkdGhzLAogICAgYmFzZU1hcHBpbmc6IExpYmVyYXRpb25TYW5zQm9sZEl0YWxpY01hcHBpbmcKICB9OwogIHRbIkNhbGlicmktUmVndWxhciJdID0gewogICAgbmFtZTogIkxpYmVyYXRpb25TYW5zLVJlZ3VsYXIiLAogICAgZmFjdG9yczogQ2FsaWJyaVJlZ3VsYXJGYWN0b3JzLAogICAgYmFzZVdpZHRoczogTGliZXJhdGlvblNhbnNSZWd1bGFyV2lkdGhzLAogICAgYmFzZU1hcHBpbmc6IExpYmVyYXRpb25TYW5zUmVndWxhck1hcHBpbmcsCiAgICBtZXRyaWNzOiBDYWxpYnJpUmVndWxhck1ldHJpY3MKICB9OwogIHRbIkNhbGlicmktQm9sZCJdID0gewogICAgbmFtZTogIkxpYmVyYXRpb25TYW5zLUJvbGQiLAogICAgZmFjdG9yczogQ2FsaWJyaUJvbGRGYWN0b3JzLAogICAgYmFzZVdpZHRoczogTGliZXJhdGlvblNhbnNCb2xkV2lkdGhzLAogICAgYmFzZU1hcHBpbmc6IExpYmVyYXRpb25TYW5zQm9sZE1hcHBpbmcsCiAgICBtZXRyaWNzOiBDYWxpYnJpQm9sZE1ldHJpY3MKICB9OwogIHRbIkNhbGlicmktSXRhbGljIl0gPSB7CiAgICBuYW1lOiAiTGliZXJhdGlvblNhbnMtSXRhbGljIiwKICAgIGZhY3RvcnM6IENhbGlicmlJdGFsaWNGYWN0b3JzLAogICAgYmFzZVdpZHRoczogTGliZXJhdGlvblNhbnNJdGFsaWNXaWR0aHMsCiAgICBiYXNlTWFwcGluZzogTGliZXJhdGlvblNhbnNJdGFsaWNNYXBwaW5nLAogICAgbWV0cmljczogQ2FsaWJyaUl0YWxpY01ldHJpY3MKICB9OwogIHRbIkNhbGlicmktQm9sZEl0YWxpYyJdID0gewogICAgbmFtZTogIkxpYmVyYXRpb25TYW5zLUJvbGRJdGFsaWMiLAogICAgZmFjdG9yczogQ2FsaWJyaUJvbGRJdGFsaWNGYWN0b3JzLAogICAgYmFzZVdpZHRoczogTGliZXJhdGlvblNhbnNCb2xkSXRhbGljV2lkdGhzLAogICAgYmFzZU1hcHBpbmc6IExpYmVyYXRpb25TYW5zQm9sZEl0YWxpY01hcHBpbmcsCiAgICBtZXRyaWNzOiBDYWxpYnJpQm9sZEl0YWxpY01ldHJpY3MKICB9OwogIHRbIlNlZ29ldWktUmVndWxhciJdID0gewogICAgbmFtZTogIkxpYmVyYXRpb25TYW5zLVJlZ3VsYXIiLAogICAgZmFjdG9yczogU2Vnb2V1aVJlZ3VsYXJGYWN0b3JzLAogICAgYmFzZVdpZHRoczogTGliZXJhdGlvblNhbnNSZWd1bGFyV2lkdGhzLAogICAgYmFzZU1hcHBpbmc6IExpYmVyYXRpb25TYW5zUmVndWxhck1hcHBpbmcsCiAgICBtZXRyaWNzOiBTZWdvZXVpUmVndWxhck1ldHJpY3MKICB9OwogIHRbIlNlZ29ldWktQm9sZCJdID0gewogICAgbmFtZTogIkxpYmVyYXRpb25TYW5zLUJvbGQiLAogICAgZmFjdG9yczogU2Vnb2V1aUJvbGRGYWN0b3JzLAogICAgYmFzZVdpZHRoczogTGliZXJhdGlvblNhbnNCb2xkV2lkdGhzLAogICAgYmFzZU1hcHBpbmc6IExpYmVyYXRpb25TYW5zQm9sZE1hcHBpbmcsCiAgICBtZXRyaWNzOiBTZWdvZXVpQm9sZE1ldHJpY3MKICB9OwogIHRbIlNlZ29ldWktSXRhbGljIl0gPSB7CiAgICBuYW1lOiAiTGliZXJhdGlvblNhbnMtSXRhbGljIiwKICAgIGZhY3RvcnM6IFNlZ29ldWlJdGFsaWNGYWN0b3JzLAogICAgYmFzZVdpZHRoczogTGliZXJhdGlvblNhbnNJdGFsaWNXaWR0aHMsCiAgICBiYXNlTWFwcGluZzogTGliZXJhdGlvblNhbnNJdGFsaWNNYXBwaW5nLAogICAgbWV0cmljczogU2Vnb2V1aUl0YWxpY01ldHJpY3MKICB9OwogIHRbIlNlZ29ldWktQm9sZEl0YWxpYyJdID0gewogICAgbmFtZTogIkxpYmVyYXRpb25TYW5zLUJvbGRJdGFsaWMiLAogICAgZmFjdG9yczogU2Vnb2V1aUJvbGRJdGFsaWNGYWN0b3JzLAogICAgYmFzZVdpZHRoczogTGliZXJhdGlvblNhbnNCb2xkSXRhbGljV2lkdGhzLAogICAgYmFzZU1hcHBpbmc6IExpYmVyYXRpb25TYW5zQm9sZEl0YWxpY01hcHBpbmcsCiAgICBtZXRyaWNzOiBTZWdvZXVpQm9sZEl0YWxpY01ldHJpY3MKICB9OwogIHRbIkhlbHZldGljYS1SZWd1bGFyIl0gPSB0LkhlbHZldGljYSA9IHsKICAgIG5hbWU6ICJMaWJlcmF0aW9uU2Fucy1SZWd1bGFyIiwKICAgIGZhY3RvcnM6IEhlbHZldGljYVJlZ3VsYXJGYWN0b3JzLAogICAgYmFzZVdpZHRoczogTGliZXJhdGlvblNhbnNSZWd1bGFyV2lkdGhzLAogICAgYmFzZU1hcHBpbmc6IExpYmVyYXRpb25TYW5zUmVndWxhck1hcHBpbmcsCiAgICBtZXRyaWNzOiBIZWx2ZXRpY2FSZWd1bGFyTWV0cmljcwogIH07CiAgdFsiSGVsdmV0aWNhLUJvbGQiXSA9IHsKICAgIG5hbWU6ICJMaWJlcmF0aW9uU2Fucy1Cb2xkIiwKICAgIGZhY3RvcnM6IEhlbHZldGljYUJvbGRGYWN0b3JzLAogICAgYmFzZVdpZHRoczogTGliZXJhdGlvblNhbnNCb2xkV2lkdGhzLAogICAgYmFzZU1hcHBpbmc6IExpYmVyYXRpb25TYW5zQm9sZE1hcHBpbmcsCiAgICBtZXRyaWNzOiBIZWx2ZXRpY2FCb2xkTWV0cmljcwogIH07CiAgdFsiSGVsdmV0aWNhLUl0YWxpYyJdID0gewogICAgbmFtZTogIkxpYmVyYXRpb25TYW5zLUl0YWxpYyIsCiAgICBmYWN0b3JzOiBIZWx2ZXRpY2FJdGFsaWNGYWN0b3JzLAogICAgYmFzZVdpZHRoczogTGliZXJhdGlvblNhbnNJdGFsaWNXaWR0aHMsCiAgICBiYXNlTWFwcGluZzogTGliZXJhdGlvblNhbnNJdGFsaWNNYXBwaW5nLAogICAgbWV0cmljczogSGVsdmV0aWNhSXRhbGljTWV0cmljcwogIH07CiAgdFsiSGVsdmV0aWNhLUJvbGRJdGFsaWMiXSA9IHsKICAgIG5hbWU6ICJMaWJlcmF0aW9uU2Fucy1Cb2xkSXRhbGljIiwKICAgIGZhY3RvcnM6IEhlbHZldGljYUJvbGRJdGFsaWNGYWN0b3JzLAogICAgYmFzZVdpZHRoczogTGliZXJhdGlvblNhbnNCb2xkSXRhbGljV2lkdGhzLAogICAgYmFzZU1hcHBpbmc6IExpYmVyYXRpb25TYW5zQm9sZEl0YWxpY01hcHBpbmcsCiAgICBtZXRyaWNzOiBIZWx2ZXRpY2FCb2xkSXRhbGljTWV0cmljcwogIH07Cn0pOwpmdW5jdGlvbiBnZXRYZmFGb250TmFtZShuYW1lKSB7CiAgY29uc3QgZm9udE5hbWUgPSBub3JtYWxpemVGb250TmFtZShuYW1lKTsKICBjb25zdCBmb250TWFwID0gZ2V0WEZBRm9udE1hcCgpOwogIHJldHVybiBmb250TWFwW2ZvbnROYW1lXTsKfQpmdW5jdGlvbiBnZXRYZmFGb250V2lkdGhzKG5hbWUpIHsKICBjb25zdCBpbmZvID0gZ2V0WGZhRm9udE5hbWUobmFtZSk7CiAgaWYgKCFpbmZvKSB7CiAgICByZXR1cm4gbnVsbDsKICB9CiAgY29uc3QgewogICAgYmFzZVdpZHRocywKICAgIGJhc2VNYXBwaW5nLAogICAgZmFjdG9ycwogIH0gPSBpbmZvOwogIGNvbnN0IHJlc2NhbGVkQmFzZVdpZHRocyA9ICFmYWN0b3JzID8gYmFzZVdpZHRocyA6IGJhc2VXaWR0aHMubWFwKCh3LCBpKSA9PiB3ICogZmFjdG9yc1tpXSk7CiAgbGV0IGN1cnJlbnRDb2RlID0gLTI7CiAgbGV0IGN1cnJlbnRBcnJheTsKICBjb25zdCBuZXdXaWR0aHMgPSBbXTsKICBmb3IgKGNvbnN0IFt1bmljb2RlLCBnbHlwaEluZGV4XSBvZiBiYXNlTWFwcGluZy5tYXAoKGNoYXJVbmljb2RlLCBpbmRleCkgPT4gW2NoYXJVbmljb2RlLCBpbmRleF0pLnNvcnQoKFt1bmljb2RlMV0sIFt1bmljb2RlMl0pID0+IHVuaWNvZGUxIC0gdW5pY29kZTIpKSB7CiAgICBpZiAodW5pY29kZSA9PT0gLTEpIHsKICAgICAgY29udGludWU7CiAgICB9CiAgICBpZiAodW5pY29kZSA9PT0gY3VycmVudENvZGUgKyAxKSB7CiAgICAgIGN1cnJlbnRBcnJheS5wdXNoKHJlc2NhbGVkQmFzZVdpZHRoc1tnbHlwaEluZGV4XSk7CiAgICAgIGN1cnJlbnRDb2RlICs9IDE7CiAgICB9IGVsc2UgewogICAgICBjdXJyZW50Q29kZSA9IHVuaWNvZGU7CiAgICAgIGN1cnJlbnRBcnJheSA9IFtyZXNjYWxlZEJhc2VXaWR0aHNbZ2x5cGhJbmRleF1dOwogICAgICBuZXdXaWR0aHMucHVzaCh1bmljb2RlLCBjdXJyZW50QXJyYXkpOwogICAgfQogIH0KICByZXR1cm4gbmV3V2lkdGhzOwp9CmZ1bmN0aW9uIGdldFhmYUZvbnREaWN0KG5hbWUpIHsKICBjb25zdCB3aWR0aHMgPSBnZXRYZmFGb250V2lkdGhzKG5hbWUpOwogIGNvbnN0IGRpY3QgPSBuZXcgRGljdChudWxsKTsKICBkaWN0LnNldCgiQmFzZUZvbnQiLCBOYW1lLmdldChuYW1lKSk7CiAgZGljdC5zZXQoIlR5cGUiLCBOYW1lLmdldCgiRm9udCIpKTsKICBkaWN0LnNldCgiU3VidHlwZSIsIE5hbWUuZ2V0KCJDSURGb250VHlwZTIiKSk7CiAgZGljdC5zZXQoIkVuY29kaW5nIiwgTmFtZS5nZXQoIklkZW50aXR5LUgiKSk7CiAgZGljdC5zZXQoIkNJRFRvR0lETWFwIiwgTmFtZS5nZXQoIklkZW50aXR5IikpOwogIGRpY3Quc2V0KCJXIiwgd2lkdGhzKTsKICBkaWN0LnNldCgiRmlyc3RDaGFyIiwgd2lkdGhzWzBdKTsKICBkaWN0LnNldCgiTGFzdENoYXIiLCB3aWR0aHMuYXQoLTIpICsgd2lkdGhzLmF0KC0xKS5sZW5ndGggLSAxKTsKICBjb25zdCBkZXNjcmlwdG9yID0gbmV3IERpY3QobnVsbCk7CiAgZGljdC5zZXQoIkZvbnREZXNjcmlwdG9yIiwgZGVzY3JpcHRvcik7CiAgY29uc3Qgc3lzdGVtSW5mbyA9IG5ldyBEaWN0KG51bGwpOwogIHN5c3RlbUluZm8uc2V0KCJPcmRlcmluZyIsICJJZGVudGl0eSIpOwogIHN5c3RlbUluZm8uc2V0KCJSZWdpc3RyeSIsICJBZG9iZSIpOwogIHN5c3RlbUluZm8uc2V0KCJTdXBwbGVtZW50IiwgMCk7CiAgZGljdC5zZXQoIkNJRFN5c3RlbUluZm8iLCBzeXN0ZW1JbmZvKTsKICByZXR1cm4gZGljdDsKfQoKOy8vIC4vc3JjL2NvcmUvcHNfcGFyc2VyLmpzCgoKCgpjbGFzcyBQb3N0U2NyaXB0UGFyc2VyIHsKICBjb25zdHJ1Y3RvcihsZXhlcikgewogICAgdGhpcy5sZXhlciA9IGxleGVyOwogICAgdGhpcy5vcGVyYXRvcnMgPSBbXTsKICAgIHRoaXMudG9rZW4gPSBudWxsOwogICAgdGhpcy5wcmV2ID0gbnVsbDsKICB9CiAgbmV4dFRva2VuKCkgewogICAgdGhpcy5wcmV2ID0gdGhpcy50b2tlbjsKICAgIHRoaXMudG9rZW4gPSB0aGlzLmxleGVyLmdldFRva2VuKCk7CiAgfQogIGFjY2VwdCh0eXBlKSB7CiAgICBpZiAodGhpcy50b2tlbi50eXBlID09PSB0eXBlKSB7CiAgICAgIHRoaXMubmV4dFRva2VuKCk7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgcmV0dXJuIGZhbHNlOwogIH0KICBleHBlY3QodHlwZSkgewogICAgaWYgKHRoaXMuYWNjZXB0KHR5cGUpKSB7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKGBVbmV4cGVjdGVkIHN5bWJvbDogZm91bmQgJHt0aGlzLnRva2VuLnR5cGV9IGV4cGVjdGVkICR7dHlwZX0uYCk7CiAgfQogIHBhcnNlKCkgewogICAgdGhpcy5uZXh0VG9rZW4oKTsKICAgIHRoaXMuZXhwZWN0KFBvc3RTY3JpcHRUb2tlblR5cGVzLkxCUkFDRSk7CiAgICB0aGlzLnBhcnNlQmxvY2soKTsKICAgIHRoaXMuZXhwZWN0KFBvc3RTY3JpcHRUb2tlblR5cGVzLlJCUkFDRSk7CiAgICByZXR1cm4gdGhpcy5vcGVyYXRvcnM7CiAgfQogIHBhcnNlQmxvY2soKSB7CiAgICB3aGlsZSAodHJ1ZSkgewogICAgICBpZiAodGhpcy5hY2NlcHQoUG9zdFNjcmlwdFRva2VuVHlwZXMuTlVNQkVSKSkgewogICAgICAgIHRoaXMub3BlcmF0b3JzLnB1c2godGhpcy5wcmV2LnZhbHVlKTsKICAgICAgfSBlbHNlIGlmICh0aGlzLmFjY2VwdChQb3N0U2NyaXB0VG9rZW5UeXBlcy5PUEVSQVRPUikpIHsKICAgICAgICB0aGlzLm9wZXJhdG9ycy5wdXNoKHRoaXMucHJldi52YWx1ZSk7CiAgICAgIH0gZWxzZSBpZiAodGhpcy5hY2NlcHQoUG9zdFNjcmlwdFRva2VuVHlwZXMuTEJSQUNFKSkgewogICAgICAgIHRoaXMucGFyc2VDb25kaXRpb24oKTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgIH0KICB9CiAgcGFyc2VDb25kaXRpb24oKSB7CiAgICBjb25zdCBjb25kaXRpb25Mb2NhdGlvbiA9IHRoaXMub3BlcmF0b3JzLmxlbmd0aDsKICAgIHRoaXMub3BlcmF0b3JzLnB1c2gobnVsbCwgbnVsbCk7CiAgICB0aGlzLnBhcnNlQmxvY2soKTsKICAgIHRoaXMuZXhwZWN0KFBvc3RTY3JpcHRUb2tlblR5cGVzLlJCUkFDRSk7CiAgICBpZiAodGhpcy5hY2NlcHQoUG9zdFNjcmlwdFRva2VuVHlwZXMuSUYpKSB7CiAgICAgIHRoaXMub3BlcmF0b3JzW2NvbmRpdGlvbkxvY2F0aW9uXSA9IHRoaXMub3BlcmF0b3JzLmxlbmd0aDsKICAgICAgdGhpcy5vcGVyYXRvcnNbY29uZGl0aW9uTG9jYXRpb24gKyAxXSA9ICJqeiI7CiAgICB9IGVsc2UgaWYgKHRoaXMuYWNjZXB0KFBvc3RTY3JpcHRUb2tlblR5cGVzLkxCUkFDRSkpIHsKICAgICAgY29uc3QganVtcExvY2F0aW9uID0gdGhpcy5vcGVyYXRvcnMubGVuZ3RoOwogICAgICB0aGlzLm9wZXJhdG9ycy5wdXNoKG51bGwsIG51bGwpOwogICAgICBjb25zdCBlbmRPZlRydWUgPSB0aGlzLm9wZXJhdG9ycy5sZW5ndGg7CiAgICAgIHRoaXMucGFyc2VCbG9jaygpOwogICAgICB0aGlzLmV4cGVjdChQb3N0U2NyaXB0VG9rZW5UeXBlcy5SQlJBQ0UpOwogICAgICB0aGlzLmV4cGVjdChQb3N0U2NyaXB0VG9rZW5UeXBlcy5JRkVMU0UpOwogICAgICB0aGlzLm9wZXJhdG9yc1tqdW1wTG9jYXRpb25dID0gdGhpcy5vcGVyYXRvcnMubGVuZ3RoOwogICAgICB0aGlzLm9wZXJhdG9yc1tqdW1wTG9jYXRpb24gKyAxXSA9ICJqIjsKICAgICAgdGhpcy5vcGVyYXRvcnNbY29uZGl0aW9uTG9jYXRpb25dID0gZW5kT2ZUcnVlOwogICAgICB0aGlzLm9wZXJhdG9yc1tjb25kaXRpb25Mb2NhdGlvbiArIDFdID0gImp6IjsKICAgIH0gZWxzZSB7CiAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigiUFMgRnVuY3Rpb246IGVycm9yIHBhcnNpbmcgY29uZGl0aW9uYWwuIik7CiAgICB9CiAgfQp9CmNvbnN0IFBvc3RTY3JpcHRUb2tlblR5cGVzID0gewogIExCUkFDRTogMCwKICBSQlJBQ0U6IDEsCiAgTlVNQkVSOiAyLAogIE9QRVJBVE9SOiAzLAogIElGOiA0LAogIElGRUxTRTogNQp9OwpjbGFzcyBQb3N0U2NyaXB0VG9rZW4gewogIHN0YXRpYyBnZXQgb3BDYWNoZSgpIHsKICAgIHJldHVybiBzaGFkb3codGhpcywgIm9wQ2FjaGUiLCBPYmplY3QuY3JlYXRlKG51bGwpKTsKICB9CiAgY29uc3RydWN0b3IodHlwZSwgdmFsdWUpIHsKICAgIHRoaXMudHlwZSA9IHR5cGU7CiAgICB0aGlzLnZhbHVlID0gdmFsdWU7CiAgfQogIHN0YXRpYyBnZXRPcGVyYXRvcihvcCkgewogICAgcmV0dXJuIFBvc3RTY3JpcHRUb2tlbi5vcENhY2hlW29wXSB8fD0gbmV3IFBvc3RTY3JpcHRUb2tlbihQb3N0U2NyaXB0VG9rZW5UeXBlcy5PUEVSQVRPUiwgb3ApOwogIH0KICBzdGF0aWMgZ2V0IExCUkFDRSgpIHsKICAgIHJldHVybiBzaGFkb3codGhpcywgIkxCUkFDRSIsIG5ldyBQb3N0U2NyaXB0VG9rZW4oUG9zdFNjcmlwdFRva2VuVHlwZXMuTEJSQUNFLCAieyIpKTsKICB9CiAgc3RhdGljIGdldCBSQlJBQ0UoKSB7CiAgICByZXR1cm4gc2hhZG93KHRoaXMsICJSQlJBQ0UiLCBuZXcgUG9zdFNjcmlwdFRva2VuKFBvc3RTY3JpcHRUb2tlblR5cGVzLlJCUkFDRSwgIn0iKSk7CiAgfQogIHN0YXRpYyBnZXQgSUYoKSB7CiAgICByZXR1cm4gc2hhZG93KHRoaXMsICJJRiIsIG5ldyBQb3N0U2NyaXB0VG9rZW4oUG9zdFNjcmlwdFRva2VuVHlwZXMuSUYsICJJRiIpKTsKICB9CiAgc3RhdGljIGdldCBJRkVMU0UoKSB7CiAgICByZXR1cm4gc2hhZG93KHRoaXMsICJJRkVMU0UiLCBuZXcgUG9zdFNjcmlwdFRva2VuKFBvc3RTY3JpcHRUb2tlblR5cGVzLklGRUxTRSwgIklGRUxTRSIpKTsKICB9Cn0KY2xhc3MgUG9zdFNjcmlwdExleGVyIHsKICBjb25zdHJ1Y3RvcihzdHJlYW0pIHsKICAgIHRoaXMuc3RyZWFtID0gc3RyZWFtOwogICAgdGhpcy5uZXh0Q2hhcigpOwogICAgdGhpcy5zdHJCdWYgPSBbXTsKICB9CiAgbmV4dENoYXIoKSB7CiAgICByZXR1cm4gdGhpcy5jdXJyZW50Q2hhciA9IHRoaXMuc3RyZWFtLmdldEJ5dGUoKTsKICB9CiAgZ2V0VG9rZW4oKSB7CiAgICBsZXQgY29tbWVudCA9IGZhbHNlOwogICAgbGV0IGNoID0gdGhpcy5jdXJyZW50Q2hhcjsKICAgIHdoaWxlICh0cnVlKSB7CiAgICAgIGlmIChjaCA8IDApIHsKICAgICAgICByZXR1cm4gRU9GOwogICAgICB9CiAgICAgIGlmIChjb21tZW50KSB7CiAgICAgICAgaWYgKGNoID09PSAweDBhIHx8IGNoID09PSAweDBkKSB7CiAgICAgICAgICBjb21tZW50ID0gZmFsc2U7CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKGNoID09PSAweDI1KSB7CiAgICAgICAgY29tbWVudCA9IHRydWU7CiAgICAgIH0gZWxzZSBpZiAoIWlzV2hpdGVTcGFjZShjaCkpIHsKICAgICAgICBicmVhazsKICAgICAgfQogICAgICBjaCA9IHRoaXMubmV4dENoYXIoKTsKICAgIH0KICAgIHN3aXRjaCAoY2ggfCAwKSB7CiAgICAgIGNhc2UgMHgzMDoKICAgICAgY2FzZSAweDMxOgogICAgICBjYXNlIDB4MzI6CiAgICAgIGNhc2UgMHgzMzoKICAgICAgY2FzZSAweDM0OgogICAgICBjYXNlIDB4MzU6CiAgICAgIGNhc2UgMHgzNjoKICAgICAgY2FzZSAweDM3OgogICAgICBjYXNlIDB4Mzg6CiAgICAgIGNhc2UgMHgzOToKICAgICAgY2FzZSAweDJiOgogICAgICBjYXNlIDB4MmQ6CiAgICAgIGNhc2UgMHgyZToKICAgICAgICByZXR1cm4gbmV3IFBvc3RTY3JpcHRUb2tlbihQb3N0U2NyaXB0VG9rZW5UeXBlcy5OVU1CRVIsIHRoaXMuZ2V0TnVtYmVyKCkpOwogICAgICBjYXNlIDB4N2I6CiAgICAgICAgdGhpcy5uZXh0Q2hhcigpOwogICAgICAgIHJldHVybiBQb3N0U2NyaXB0VG9rZW4uTEJSQUNFOwogICAgICBjYXNlIDB4N2Q6CiAgICAgICAgdGhpcy5uZXh0Q2hhcigpOwogICAgICAgIHJldHVybiBQb3N0U2NyaXB0VG9rZW4uUkJSQUNFOwogICAgfQogICAgY29uc3Qgc3RyQnVmID0gdGhpcy5zdHJCdWY7CiAgICBzdHJCdWYubGVuZ3RoID0gMDsKICAgIHN0ckJ1ZlswXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2gpOwogICAgd2hpbGUgKChjaCA9IHRoaXMubmV4dENoYXIoKSkgPj0gMCAmJiAoY2ggPj0gMHg0MSAmJiBjaCA8PSAweDVhIHx8IGNoID49IDB4NjEgJiYgY2ggPD0gMHg3YSkpIHsKICAgICAgc3RyQnVmLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShjaCkpOwogICAgfQogICAgY29uc3Qgc3RyID0gc3RyQnVmLmpvaW4oIiIpOwogICAgc3dpdGNoIChzdHIudG9Mb3dlckNhc2UoKSkgewogICAgICBjYXNlICJpZiI6CiAgICAgICAgcmV0dXJuIFBvc3RTY3JpcHRUb2tlbi5JRjsKICAgICAgY2FzZSAiaWZlbHNlIjoKICAgICAgICByZXR1cm4gUG9zdFNjcmlwdFRva2VuLklGRUxTRTsKICAgICAgZGVmYXVsdDoKICAgICAgICByZXR1cm4gUG9zdFNjcmlwdFRva2VuLmdldE9wZXJhdG9yKHN0cik7CiAgICB9CiAgfQogIGdldE51bWJlcigpIHsKICAgIGxldCBjaCA9IHRoaXMuY3VycmVudENoYXI7CiAgICBjb25zdCBzdHJCdWYgPSB0aGlzLnN0ckJ1ZjsKICAgIHN0ckJ1Zi5sZW5ndGggPSAwOwogICAgc3RyQnVmWzBdID0gU3RyaW5nLmZyb21DaGFyQ29kZShjaCk7CiAgICB3aGlsZSAoKGNoID0gdGhpcy5uZXh0Q2hhcigpKSA+PSAwKSB7CiAgICAgIGlmIChjaCA+PSAweDMwICYmIGNoIDw9IDB4MzkgfHwgY2ggPT09IDB4MmQgfHwgY2ggPT09IDB4MmUpIHsKICAgICAgICBzdHJCdWYucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGNoKSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KICAgIGNvbnN0IHZhbHVlID0gcGFyc2VGbG9hdChzdHJCdWYuam9pbigiIikpOwogICAgaWYgKGlzTmFOKHZhbHVlKSkgewogICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoYEludmFsaWQgZmxvYXRpbmcgcG9pbnQgbnVtYmVyOiAke3ZhbHVlfWApOwogICAgfQogICAgcmV0dXJuIHZhbHVlOwogIH0KfQoKOy8vIC4vc3JjL2NvcmUvaW1hZ2VfdXRpbHMuanMKCgoKCgoKCgoKY2xhc3MgQmFzZUxvY2FsQ2FjaGUgewogIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHsKICAgIHRoaXMuX29ubHlSZWZzID0gb3B0aW9ucz8ub25seVJlZnMgPT09IHRydWU7CiAgICBpZiAoIXRoaXMuX29ubHlSZWZzKSB7CiAgICAgIHRoaXMuX25hbWVSZWZNYXAgPSBuZXcgTWFwKCk7CiAgICAgIHRoaXMuX2ltYWdlTWFwID0gbmV3IE1hcCgpOwogICAgfQogICAgdGhpcy5faW1hZ2VDYWNoZSA9IG5ldyBSZWZTZXRDYWNoZSgpOwogIH0KICBnZXRCeU5hbWUobmFtZSkgewogICAgaWYgKHRoaXMuX29ubHlSZWZzKSB7CiAgICAgIHVucmVhY2hhYmxlKCJTaG91bGQgbm90IGNhbGwgYGdldEJ5TmFtZWAgbWV0aG9kLiIpOwogICAgfQogICAgY29uc3QgcmVmID0gdGhpcy5fbmFtZVJlZk1hcC5nZXQobmFtZSk7CiAgICBpZiAocmVmKSB7CiAgICAgIHJldHVybiB0aGlzLmdldEJ5UmVmKHJlZik7CiAgICB9CiAgICByZXR1cm4gdGhpcy5faW1hZ2VNYXAuZ2V0KG5hbWUpIHx8IG51bGw7CiAgfQogIGdldEJ5UmVmKHJlZikgewogICAgcmV0dXJuIHRoaXMuX2ltYWdlQ2FjaGUuZ2V0KHJlZikgfHwgbnVsbDsKICB9CiAgc2V0KG5hbWUsIHJlZiwgZGF0YSkgewogICAgdW5yZWFjaGFibGUoIkFic3RyYWN0IG1ldGhvZCBgc2V0YCBjYWxsZWQuIik7CiAgfQp9CmNsYXNzIExvY2FsSW1hZ2VDYWNoZSBleHRlbmRzIEJhc2VMb2NhbENhY2hlIHsKICBzZXQobmFtZSwgcmVmID0gbnVsbCwgZGF0YSkgewogICAgaWYgKHR5cGVvZiBuYW1lICE9PSAic3RyaW5nIikgewogICAgICB0aHJvdyBuZXcgRXJyb3IoJ0xvY2FsSW1hZ2VDYWNoZS5zZXQgLSBleHBlY3RlZCAibmFtZSIgYXJndW1lbnQuJyk7CiAgICB9CiAgICBpZiAocmVmKSB7CiAgICAgIGlmICh0aGlzLl9pbWFnZUNhY2hlLmhhcyhyZWYpKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIHRoaXMuX25hbWVSZWZNYXAuc2V0KG5hbWUsIHJlZik7CiAgICAgIHRoaXMuX2ltYWdlQ2FjaGUucHV0KHJlZiwgZGF0YSk7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGlmICh0aGlzLl9pbWFnZU1hcC5oYXMobmFtZSkpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgdGhpcy5faW1hZ2VNYXAuc2V0KG5hbWUsIGRhdGEpOwogIH0KfQpjbGFzcyBMb2NhbENvbG9yU3BhY2VDYWNoZSBleHRlbmRzIEJhc2VMb2NhbENhY2hlIHsKICBzZXQobmFtZSA9IG51bGwsIHJlZiA9IG51bGwsIGRhdGEpIHsKICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gInN0cmluZyIgJiYgIXJlZikgewogICAgICB0aHJvdyBuZXcgRXJyb3IoJ0xvY2FsQ29sb3JTcGFjZUNhY2hlLnNldCAtIGV4cGVjdGVkICJuYW1lIiBhbmQvb3IgInJlZiIgYXJndW1lbnQuJyk7CiAgICB9CiAgICBpZiAocmVmKSB7CiAgICAgIGlmICh0aGlzLl9pbWFnZUNhY2hlLmhhcyhyZWYpKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIGlmIChuYW1lICE9PSBudWxsKSB7CiAgICAgICAgdGhpcy5fbmFtZVJlZk1hcC5zZXQobmFtZSwgcmVmKTsKICAgICAgfQogICAgICB0aGlzLl9pbWFnZUNhY2hlLnB1dChyZWYsIGRhdGEpOwogICAgICByZXR1cm47CiAgICB9CiAgICBpZiAodGhpcy5faW1hZ2VNYXAuaGFzKG5hbWUpKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIHRoaXMuX2ltYWdlTWFwLnNldChuYW1lLCBkYXRhKTsKICB9Cn0KY2xhc3MgTG9jYWxGdW5jdGlvbkNhY2hlIGV4dGVuZHMgQmFzZUxvY2FsQ2FjaGUgewogIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHsKICAgIHN1cGVyKHsKICAgICAgb25seVJlZnM6IHRydWUKICAgIH0pOwogIH0KICBzZXQobmFtZSA9IG51bGwsIHJlZiwgZGF0YSkgewogICAgaWYgKCFyZWYpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCdMb2NhbEZ1bmN0aW9uQ2FjaGUuc2V0IC0gZXhwZWN0ZWQgInJlZiIgYXJndW1lbnQuJyk7CiAgICB9CiAgICBpZiAodGhpcy5faW1hZ2VDYWNoZS5oYXMocmVmKSkgewogICAgICByZXR1cm47CiAgICB9CiAgICB0aGlzLl9pbWFnZUNhY2hlLnB1dChyZWYsIGRhdGEpOwogIH0KfQpjbGFzcyBMb2NhbEdTdGF0ZUNhY2hlIGV4dGVuZHMgQmFzZUxvY2FsQ2FjaGUgewogIHNldChuYW1lLCByZWYgPSBudWxsLCBkYXRhKSB7CiAgICBpZiAodHlwZW9mIG5hbWUgIT09ICJzdHJpbmciKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcignTG9jYWxHU3RhdGVDYWNoZS5zZXQgLSBleHBlY3RlZCAibmFtZSIgYXJndW1lbnQuJyk7CiAgICB9CiAgICBpZiAocmVmKSB7CiAgICAgIGlmICh0aGlzLl9pbWFnZUNhY2hlLmhhcyhyZWYpKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIHRoaXMuX25hbWVSZWZNYXAuc2V0KG5hbWUsIHJlZik7CiAgICAgIHRoaXMuX2ltYWdlQ2FjaGUucHV0KHJlZiwgZGF0YSk7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGlmICh0aGlzLl9pbWFnZU1hcC5oYXMobmFtZSkpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgdGhpcy5faW1hZ2VNYXAuc2V0KG5hbWUsIGRhdGEpOwogIH0KfQpjbGFzcyBMb2NhbFRpbGluZ1BhdHRlcm5DYWNoZSBleHRlbmRzIEJhc2VMb2NhbENhY2hlIHsKICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7CiAgICBzdXBlcih7CiAgICAgIG9ubHlSZWZzOiB0cnVlCiAgICB9KTsKICB9CiAgc2V0KG5hbWUgPSBudWxsLCByZWYsIGRhdGEpIHsKICAgIGlmICghcmVmKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcignTG9jYWxUaWxpbmdQYXR0ZXJuQ2FjaGUuc2V0IC0gZXhwZWN0ZWQgInJlZiIgYXJndW1lbnQuJyk7CiAgICB9CiAgICBpZiAodGhpcy5faW1hZ2VDYWNoZS5oYXMocmVmKSkgewogICAgICByZXR1cm47CiAgICB9CiAgICB0aGlzLl9pbWFnZUNhY2hlLnB1dChyZWYsIGRhdGEpOwogIH0KfQpjbGFzcyBSZWdpb25hbEltYWdlQ2FjaGUgZXh0ZW5kcyBCYXNlTG9jYWxDYWNoZSB7CiAgY29uc3RydWN0b3Iob3B0aW9ucykgewogICAgc3VwZXIoewogICAgICBvbmx5UmVmczogdHJ1ZQogICAgfSk7CiAgfQogIHNldChuYW1lID0gbnVsbCwgcmVmLCBkYXRhKSB7CiAgICBpZiAoIXJlZikgewogICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlZ2lvbmFsSW1hZ2VDYWNoZS5zZXQgLSBleHBlY3RlZCAicmVmIiBhcmd1bWVudC4nKTsKICAgIH0KICAgIGlmICh0aGlzLl9pbWFnZUNhY2hlLmhhcyhyZWYpKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIHRoaXMuX2ltYWdlQ2FjaGUucHV0KHJlZiwgZGF0YSk7CiAgfQp9CmNsYXNzIEdsb2JhbENvbG9yU3BhY2VDYWNoZSBleHRlbmRzIEJhc2VMb2NhbENhY2hlIHsKICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7CiAgICBzdXBlcih7CiAgICAgIG9ubHlSZWZzOiB0cnVlCiAgICB9KTsKICB9CiAgc2V0KG5hbWUgPSBudWxsLCByZWYsIGRhdGEpIHsKICAgIGlmICghcmVmKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcignR2xvYmFsQ29sb3JTcGFjZUNhY2hlLnNldCAtIGV4cGVjdGVkICJyZWYiIGFyZ3VtZW50LicpOwogICAgfQogICAgaWYgKHRoaXMuX2ltYWdlQ2FjaGUuaGFzKHJlZikpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgdGhpcy5faW1hZ2VDYWNoZS5wdXQocmVmLCBkYXRhKTsKICB9CiAgY2xlYXIoKSB7CiAgICB0aGlzLl9pbWFnZUNhY2hlLmNsZWFyKCk7CiAgfQp9CmNsYXNzIEdsb2JhbEltYWdlQ2FjaGUgewogIHN0YXRpYyBOVU1fUEFHRVNfVEhSRVNIT0xEID0gMjsKICBzdGF0aWMgTUlOX0lNQUdFU19UT19DQUNIRSA9IDEwOwogIHN0YXRpYyBNQVhfQllURV9TSVpFID0gNWU3OwogICNkZWNvZGVGYWlsZWRTZXQgPSBuZXcgUmVmU2V0KCk7CiAgY29uc3RydWN0b3IoKSB7CiAgICB0aGlzLl9yZWZDYWNoZSA9IG5ldyBSZWZTZXRDYWNoZSgpOwogICAgdGhpcy5faW1hZ2VDYWNoZSA9IG5ldyBSZWZTZXRDYWNoZSgpOwogIH0KICBnZXQgI2J5dGVTaXplKCkgewogICAgbGV0IGJ5dGVTaXplID0gMDsKICAgIGZvciAoY29uc3QgaW1hZ2VEYXRhIG9mIHRoaXMuX2ltYWdlQ2FjaGUpIHsKICAgICAgYnl0ZVNpemUgKz0gaW1hZ2VEYXRhLmJ5dGVTaXplOwogICAgfQogICAgcmV0dXJuIGJ5dGVTaXplOwogIH0KICBnZXQgI2NhY2hlTGltaXRSZWFjaGVkKCkgewogICAgaWYgKHRoaXMuX2ltYWdlQ2FjaGUuc2l6ZSA8IEdsb2JhbEltYWdlQ2FjaGUuTUlOX0lNQUdFU19UT19DQUNIRSkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgICBpZiAodGhpcy4jYnl0ZVNpemUgPCBHbG9iYWxJbWFnZUNhY2hlLk1BWF9CWVRFX1NJWkUpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgcmV0dXJuIHRydWU7CiAgfQogIHNob3VsZENhY2hlKHJlZiwgcGFnZUluZGV4KSB7CiAgICBsZXQgcGFnZUluZGV4U2V0ID0gdGhpcy5fcmVmQ2FjaGUuZ2V0KHJlZik7CiAgICBpZiAoIXBhZ2VJbmRleFNldCkgewogICAgICBwYWdlSW5kZXhTZXQgPSBuZXcgU2V0KCk7CiAgICAgIHRoaXMuX3JlZkNhY2hlLnB1dChyZWYsIHBhZ2VJbmRleFNldCk7CiAgICB9CiAgICBwYWdlSW5kZXhTZXQuYWRkKHBhZ2VJbmRleCk7CiAgICBpZiAocGFnZUluZGV4U2V0LnNpemUgPCBHbG9iYWxJbWFnZUNhY2hlLk5VTV9QQUdFU19USFJFU0hPTEQpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgaWYgKCF0aGlzLl9pbWFnZUNhY2hlLmhhcyhyZWYpICYmIHRoaXMuI2NhY2hlTGltaXRSZWFjaGVkKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICAgIHJldHVybiB0cnVlOwogIH0KICBhZGREZWNvZGVGYWlsZWQocmVmKSB7CiAgICB0aGlzLiNkZWNvZGVGYWlsZWRTZXQucHV0KHJlZik7CiAgfQogIGhhc0RlY29kZUZhaWxlZChyZWYpIHsKICAgIHJldHVybiB0aGlzLiNkZWNvZGVGYWlsZWRTZXQuaGFzKHJlZik7CiAgfQogIGFkZEJ5dGVTaXplKHJlZiwgYnl0ZVNpemUpIHsKICAgIGNvbnN0IGltYWdlRGF0YSA9IHRoaXMuX2ltYWdlQ2FjaGUuZ2V0KHJlZik7CiAgICBpZiAoIWltYWdlRGF0YSkgewogICAgICByZXR1cm47CiAgICB9CiAgICBpZiAoaW1hZ2VEYXRhLmJ5dGVTaXplKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGltYWdlRGF0YS5ieXRlU2l6ZSA9IGJ5dGVTaXplOwogIH0KICBnZXREYXRhKHJlZiwgcGFnZUluZGV4KSB7CiAgICBjb25zdCBwYWdlSW5kZXhTZXQgPSB0aGlzLl9yZWZDYWNoZS5nZXQocmVmKTsKICAgIGlmICghcGFnZUluZGV4U2V0KSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgaWYgKHBhZ2VJbmRleFNldC5zaXplIDwgR2xvYmFsSW1hZ2VDYWNoZS5OVU1fUEFHRVNfVEhSRVNIT0xEKSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgY29uc3QgaW1hZ2VEYXRhID0gdGhpcy5faW1hZ2VDYWNoZS5nZXQocmVmKTsKICAgIGlmICghaW1hZ2VEYXRhKSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgcGFnZUluZGV4U2V0LmFkZChwYWdlSW5kZXgpOwogICAgcmV0dXJuIGltYWdlRGF0YTsKICB9CiAgc2V0RGF0YShyZWYsIGRhdGEpIHsKICAgIGlmICghdGhpcy5fcmVmQ2FjaGUuaGFzKHJlZikpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCdHbG9iYWxJbWFnZUNhY2hlLnNldERhdGEgLSBleHBlY3RlZCAic2hvdWxkQ2FjaGUiIHRvIGhhdmUgYmVlbiBjYWxsZWQuJyk7CiAgICB9CiAgICBpZiAodGhpcy5faW1hZ2VDYWNoZS5oYXMocmVmKSkgewogICAgICByZXR1cm47CiAgICB9CiAgICBpZiAodGhpcy4jY2FjaGVMaW1pdFJlYWNoZWQpIHsKICAgICAgd2FybigiR2xvYmFsSW1hZ2VDYWNoZS5zZXREYXRhIC0gY2FjaGUgbGltaXQgcmVhY2hlZC4iKTsKICAgICAgcmV0dXJuOwogICAgfQogICAgdGhpcy5faW1hZ2VDYWNoZS5wdXQocmVmLCBkYXRhKTsKICB9CiAgY2xlYXIob25seURhdGEgPSBmYWxzZSkgewogICAgaWYgKCFvbmx5RGF0YSkgewogICAgICB0aGlzLiNkZWNvZGVGYWlsZWRTZXQuY2xlYXIoKTsKICAgICAgdGhpcy5fcmVmQ2FjaGUuY2xlYXIoKTsKICAgIH0KICAgIHRoaXMuX2ltYWdlQ2FjaGUuY2xlYXIoKTsKICB9Cn0KCjsvLyAuL3NyYy9jb3JlL2Z1bmN0aW9uLmpzCgoKCgoKCgoKCgoKCgpjbGFzcyBQREZGdW5jdGlvbkZhY3RvcnkgewogIGNvbnN0cnVjdG9yKHsKICAgIHhyZWYsCiAgICBpc0V2YWxTdXBwb3J0ZWQgPSB0cnVlCiAgfSkgewogICAgdGhpcy54cmVmID0geHJlZjsKICAgIHRoaXMuaXNFdmFsU3VwcG9ydGVkID0gaXNFdmFsU3VwcG9ydGVkICE9PSBmYWxzZTsKICB9CiAgY3JlYXRlKGZuLCBwYXJzZUFycmF5ID0gZmFsc2UpIHsKICAgIGxldCBmblJlZiwgcGFyc2VkRm47CiAgICBpZiAoZm4gaW5zdGFuY2VvZiBSZWYpIHsKICAgICAgZm5SZWYgPSBmbjsKICAgIH0gZWxzZSBpZiAoZm4gaW5zdGFuY2VvZiBEaWN0KSB7CiAgICAgIGZuUmVmID0gZm4ub2JqSWQ7CiAgICB9IGVsc2UgaWYgKGZuIGluc3RhbmNlb2YgQmFzZVN0cmVhbSkgewogICAgICBmblJlZiA9IGZuLmRpY3Q/Lm9iaklkOwogICAgfQogICAgaWYgKGZuUmVmKSB7CiAgICAgIGNvbnN0IGNhY2hlZEZuID0gdGhpcy5fbG9jYWxGdW5jdGlvbkNhY2hlLmdldEJ5UmVmKGZuUmVmKTsKICAgICAgaWYgKGNhY2hlZEZuKSB7CiAgICAgICAgcmV0dXJuIGNhY2hlZEZuOwogICAgICB9CiAgICB9CiAgICBjb25zdCBmbk9iaiA9IHRoaXMueHJlZi5mZXRjaElmUmVmKGZuKTsKICAgIGlmIChBcnJheS5pc0FycmF5KGZuT2JqKSkgewogICAgICBpZiAoIXBhcnNlQXJyYXkpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BERkZ1bmN0aW9uRmFjdG9yeS5jcmVhdGUgLSBleHBlY3RlZCAicGFyc2VBcnJheSIgYXJndW1lbnQuJyk7CiAgICAgIH0KICAgICAgcGFyc2VkRm4gPSBQREZGdW5jdGlvbi5wYXJzZUFycmF5KHRoaXMsIGZuT2JqKTsKICAgIH0gZWxzZSB7CiAgICAgIHBhcnNlZEZuID0gUERGRnVuY3Rpb24ucGFyc2UodGhpcywgZm5PYmopOwogICAgfQogICAgaWYgKGZuUmVmKSB7CiAgICAgIHRoaXMuX2xvY2FsRnVuY3Rpb25DYWNoZS5zZXQobnVsbCwgZm5SZWYsIHBhcnNlZEZuKTsKICAgIH0KICAgIHJldHVybiBwYXJzZWRGbjsKICB9CiAgZ2V0IF9sb2NhbEZ1bmN0aW9uQ2FjaGUoKSB7CiAgICByZXR1cm4gc2hhZG93KHRoaXMsICJfbG9jYWxGdW5jdGlvbkNhY2hlIiwgbmV3IExvY2FsRnVuY3Rpb25DYWNoZSgpKTsKICB9Cn0KZnVuY3Rpb24gdG9OdW1iZXJBcnJheShhcnIpIHsKICBpZiAoIUFycmF5LmlzQXJyYXkoYXJyKSkgewogICAgcmV0dXJuIG51bGw7CiAgfQogIGlmICghaXNOdW1iZXJBcnJheShhcnIsIG51bGwpKSB7CiAgICByZXR1cm4gYXJyLm1hcCh4ID0+ICt4KTsKICB9CiAgcmV0dXJuIGFycjsKfQpjbGFzcyBQREZGdW5jdGlvbiB7CiAgc3RhdGljIGdldFNhbXBsZUFycmF5KHNpemUsIG91dHB1dFNpemUsIGJwcywgc3RyZWFtKSB7CiAgICBsZXQgaSwgaWk7CiAgICBsZXQgbGVuZ3RoID0gMTsKICAgIGZvciAoaSA9IDAsIGlpID0gc2l6ZS5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgIGxlbmd0aCAqPSBzaXplW2ldOwogICAgfQogICAgbGVuZ3RoICo9IG91dHB1dFNpemU7CiAgICBjb25zdCBhcnJheSA9IG5ldyBBcnJheShsZW5ndGgpOwogICAgbGV0IGNvZGVTaXplID0gMDsKICAgIGxldCBjb2RlQnVmID0gMDsKICAgIGNvbnN0IHNhbXBsZU11bCA9IDEuMCAvICgyLjAgKiogYnBzIC0gMSk7CiAgICBjb25zdCBzdHJCeXRlcyA9IHN0cmVhbS5nZXRCeXRlcygobGVuZ3RoICogYnBzICsgNykgLyA4KTsKICAgIGxldCBzdHJJZHggPSAwOwogICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgIHdoaWxlIChjb2RlU2l6ZSA8IGJwcykgewogICAgICAgIGNvZGVCdWYgPDw9IDg7CiAgICAgICAgY29kZUJ1ZiB8PSBzdHJCeXRlc1tzdHJJZHgrK107CiAgICAgICAgY29kZVNpemUgKz0gODsKICAgICAgfQogICAgICBjb2RlU2l6ZSAtPSBicHM7CiAgICAgIGFycmF5W2ldID0gKGNvZGVCdWYgPj4gY29kZVNpemUpICogc2FtcGxlTXVsOwogICAgICBjb2RlQnVmICY9ICgxIDw8IGNvZGVTaXplKSAtIDE7CiAgICB9CiAgICByZXR1cm4gYXJyYXk7CiAgfQogIHN0YXRpYyBwYXJzZShmYWN0b3J5LCBmbikgewogICAgY29uc3QgZGljdCA9IGZuLmRpY3QgfHwgZm47CiAgICBjb25zdCB0eXBlTnVtID0gZGljdC5nZXQoIkZ1bmN0aW9uVHlwZSIpOwogICAgc3dpdGNoICh0eXBlTnVtKSB7CiAgICAgIGNhc2UgMDoKICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3RTYW1wbGVkKGZhY3RvcnksIGZuLCBkaWN0KTsKICAgICAgY2FzZSAxOgogICAgICAgIGJyZWFrOwogICAgICBjYXNlIDI6CiAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0SW50ZXJwb2xhdGVkKGZhY3RvcnksIGRpY3QpOwogICAgICBjYXNlIDM6CiAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0U3RpY2hlZChmYWN0b3J5LCBkaWN0KTsKICAgICAgY2FzZSA0OgogICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdFBvc3RTY3JpcHQoZmFjdG9yeSwgZm4sIGRpY3QpOwogICAgfQogICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCJVbmtub3duIHR5cGUgb2YgZnVuY3Rpb24iKTsKICB9CiAgc3RhdGljIHBhcnNlQXJyYXkoZmFjdG9yeSwgZm5PYmopIHsKICAgIGNvbnN0IHsKICAgICAgeHJlZgogICAgfSA9IGZhY3Rvcnk7CiAgICBjb25zdCBmbkFycmF5ID0gW107CiAgICBmb3IgKGNvbnN0IGZuIG9mIGZuT2JqKSB7CiAgICAgIGZuQXJyYXkucHVzaCh0aGlzLnBhcnNlKGZhY3RvcnksIHhyZWYuZmV0Y2hJZlJlZihmbikpKTsKICAgIH0KICAgIHJldHVybiBmdW5jdGlvbiAoc3JjLCBzcmNPZmZzZXQsIGRlc3QsIGRlc3RPZmZzZXQpIHsKICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gZm5BcnJheS5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgICAgZm5BcnJheVtpXShzcmMsIHNyY09mZnNldCwgZGVzdCwgZGVzdE9mZnNldCArIGkpOwogICAgICB9CiAgICB9OwogIH0KICBzdGF0aWMgY29uc3RydWN0U2FtcGxlZChmYWN0b3J5LCBmbiwgZGljdCkgewogICAgZnVuY3Rpb24gdG9NdWx0aUFycmF5KGFycikgewogICAgICBjb25zdCBpbnB1dExlbmd0aCA9IGFyci5sZW5ndGg7CiAgICAgIGNvbnN0IG91dCA9IFtdOwogICAgICBsZXQgaW5kZXggPSAwOwogICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0TGVuZ3RoOyBpICs9IDIpIHsKICAgICAgICBvdXRbaW5kZXgrK10gPSBbYXJyW2ldLCBhcnJbaSArIDFdXTsKICAgICAgfQogICAgICByZXR1cm4gb3V0OwogICAgfQogICAgZnVuY3Rpb24gaW50ZXJwb2xhdGUoeCwgeG1pbiwgeG1heCwgeW1pbiwgeW1heCkgewogICAgICByZXR1cm4geW1pbiArICh4IC0geG1pbikgKiAoKHltYXggLSB5bWluKSAvICh4bWF4IC0geG1pbikpOwogICAgfQogICAgbGV0IGRvbWFpbiA9IHRvTnVtYmVyQXJyYXkoZGljdC5nZXRBcnJheSgiRG9tYWluIikpOwogICAgbGV0IHJhbmdlID0gdG9OdW1iZXJBcnJheShkaWN0LmdldEFycmF5KCJSYW5nZSIpKTsKICAgIGlmICghZG9tYWluIHx8ICFyYW5nZSkgewogICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoIk5vIGRvbWFpbiBvciByYW5nZSIpOwogICAgfQogICAgY29uc3QgaW5wdXRTaXplID0gZG9tYWluLmxlbmd0aCAvIDI7CiAgICBjb25zdCBvdXRwdXRTaXplID0gcmFuZ2UubGVuZ3RoIC8gMjsKICAgIGRvbWFpbiA9IHRvTXVsdGlBcnJheShkb21haW4pOwogICAgcmFuZ2UgPSB0b011bHRpQXJyYXkocmFuZ2UpOwogICAgY29uc3Qgc2l6ZSA9IHRvTnVtYmVyQXJyYXkoZGljdC5nZXRBcnJheSgiU2l6ZSIpKTsKICAgIGNvbnN0IGJwcyA9IGRpY3QuZ2V0KCJCaXRzUGVyU2FtcGxlIik7CiAgICBjb25zdCBvcmRlciA9IGRpY3QuZ2V0KCJPcmRlciIpIHx8IDE7CiAgICBpZiAob3JkZXIgIT09IDEpIHsKICAgICAgaW5mbygiTm8gc3VwcG9ydCBmb3IgY3ViaWMgc3BsaW5lIGludGVycG9sYXRpb246ICIgKyBvcmRlcik7CiAgICB9CiAgICBsZXQgZW5jb2RlID0gdG9OdW1iZXJBcnJheShkaWN0LmdldEFycmF5KCJFbmNvZGUiKSk7CiAgICBpZiAoIWVuY29kZSkgewogICAgICBlbmNvZGUgPSBbXTsKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dFNpemU7ICsraSkgewogICAgICAgIGVuY29kZS5wdXNoKFswLCBzaXplW2ldIC0gMV0pOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBlbmNvZGUgPSB0b011bHRpQXJyYXkoZW5jb2RlKTsKICAgIH0KICAgIGxldCBkZWNvZGUgPSB0b051bWJlckFycmF5KGRpY3QuZ2V0QXJyYXkoIkRlY29kZSIpKTsKICAgIGRlY29kZSA9ICFkZWNvZGUgPyByYW5nZSA6IHRvTXVsdGlBcnJheShkZWNvZGUpOwogICAgY29uc3Qgc2FtcGxlcyA9IHRoaXMuZ2V0U2FtcGxlQXJyYXkoc2l6ZSwgb3V0cHV0U2l6ZSwgYnBzLCBmbik7CiAgICByZXR1cm4gZnVuY3Rpb24gY29uc3RydWN0U2FtcGxlZEZuKHNyYywgc3JjT2Zmc2V0LCBkZXN0LCBkZXN0T2Zmc2V0KSB7CiAgICAgIGNvbnN0IGN1YmVWZXJ0aWNlcyA9IDEgPDwgaW5wdXRTaXplOwogICAgICBjb25zdCBjdWJlTiA9IG5ldyBGbG9hdDY0QXJyYXkoY3ViZVZlcnRpY2VzKS5maWxsKDEpOwogICAgICBjb25zdCBjdWJlVmVydGV4ID0gbmV3IFVpbnQzMkFycmF5KGN1YmVWZXJ0aWNlcyk7CiAgICAgIGxldCBpLCBqOwogICAgICBsZXQgayA9IG91dHB1dFNpemUsCiAgICAgICAgcG9zID0gMTsKICAgICAgZm9yIChpID0gMDsgaSA8IGlucHV0U2l6ZTsgKytpKSB7CiAgICAgICAgY29uc3QgZG9tYWluXzJpID0gZG9tYWluW2ldWzBdOwogICAgICAgIGNvbnN0IGRvbWFpbl8yaV8xID0gZG9tYWluW2ldWzFdOwogICAgICAgIGNvbnN0IHhpID0gTWF0aENsYW1wKHNyY1tzcmNPZmZzZXQgKyBpXSwgZG9tYWluXzJpLCBkb21haW5fMmlfMSk7CiAgICAgICAgbGV0IGUgPSBpbnRlcnBvbGF0ZSh4aSwgZG9tYWluXzJpLCBkb21haW5fMmlfMSwgZW5jb2RlW2ldWzBdLCBlbmNvZGVbaV1bMV0pOwogICAgICAgIGNvbnN0IHNpemVfaSA9IHNpemVbaV07CiAgICAgICAgZSA9IE1hdGhDbGFtcChlLCAwLCBzaXplX2kgLSAxKTsKICAgICAgICBjb25zdCBlMCA9IGUgPCBzaXplX2kgLSAxID8gTWF0aC5mbG9vcihlKSA6IGUgLSAxOwogICAgICAgIGNvbnN0IG4wID0gZTAgKyAxIC0gZTsKICAgICAgICBjb25zdCBuMSA9IGUgLSBlMDsKICAgICAgICBjb25zdCBvZmZzZXQwID0gZTAgKiBrOwogICAgICAgIGNvbnN0IG9mZnNldDEgPSBvZmZzZXQwICsgazsKICAgICAgICBmb3IgKGogPSAwOyBqIDwgY3ViZVZlcnRpY2VzOyBqKyspIHsKICAgICAgICAgIGlmIChqICYgcG9zKSB7CiAgICAgICAgICAgIGN1YmVOW2pdICo9IG4xOwogICAgICAgICAgICBjdWJlVmVydGV4W2pdICs9IG9mZnNldDE7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjdWJlTltqXSAqPSBuMDsKICAgICAgICAgICAgY3ViZVZlcnRleFtqXSArPSBvZmZzZXQwOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBrICo9IHNpemVfaTsKICAgICAgICBwb3MgPDw9IDE7CiAgICAgIH0KICAgICAgZm9yIChqID0gMDsgaiA8IG91dHB1dFNpemU7ICsraikgewogICAgICAgIGxldCByaiA9IDA7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGN1YmVWZXJ0aWNlczsgaSsrKSB7CiAgICAgICAgICByaiArPSBzYW1wbGVzW2N1YmVWZXJ0ZXhbaV0gKyBqXSAqIGN1YmVOW2ldOwogICAgICAgIH0KICAgICAgICByaiA9IGludGVycG9sYXRlKHJqLCAwLCAxLCBkZWNvZGVbal1bMF0sIGRlY29kZVtqXVsxXSk7CiAgICAgICAgZGVzdFtkZXN0T2Zmc2V0ICsgal0gPSBNYXRoQ2xhbXAocmosIHJhbmdlW2pdWzBdLCByYW5nZVtqXVsxXSk7CiAgICAgIH0KICAgIH07CiAgfQogIHN0YXRpYyBjb25zdHJ1Y3RJbnRlcnBvbGF0ZWQoZmFjdG9yeSwgZGljdCkgewogICAgY29uc3QgYzAgPSB0b051bWJlckFycmF5KGRpY3QuZ2V0QXJyYXkoIkMwIikpIHx8IFswXTsKICAgIGNvbnN0IGMxID0gdG9OdW1iZXJBcnJheShkaWN0LmdldEFycmF5KCJDMSIpKSB8fCBbMV07CiAgICBjb25zdCBuID0gZGljdC5nZXQoIk4iKTsKICAgIGNvbnN0IGRpZmYgPSBbXTsKICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGMwLmxlbmd0aDsgaSA8IGlpOyArK2kpIHsKICAgICAgZGlmZi5wdXNoKGMxW2ldIC0gYzBbaV0pOwogICAgfQogICAgY29uc3QgbGVuZ3RoID0gZGlmZi5sZW5ndGg7CiAgICByZXR1cm4gZnVuY3Rpb24gY29uc3RydWN0SW50ZXJwb2xhdGVkRm4oc3JjLCBzcmNPZmZzZXQsIGRlc3QsIGRlc3RPZmZzZXQpIHsKICAgICAgY29uc3QgeCA9IG4gPT09IDEgPyBzcmNbc3JjT2Zmc2V0XSA6IHNyY1tzcmNPZmZzZXRdICoqIG47CiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbGVuZ3RoOyArK2opIHsKICAgICAgICBkZXN0W2Rlc3RPZmZzZXQgKyBqXSA9IGMwW2pdICsgeCAqIGRpZmZbal07CiAgICAgIH0KICAgIH07CiAgfQogIHN0YXRpYyBjb25zdHJ1Y3RTdGljaGVkKGZhY3RvcnksIGRpY3QpIHsKICAgIGNvbnN0IGRvbWFpbiA9IHRvTnVtYmVyQXJyYXkoZGljdC5nZXRBcnJheSgiRG9tYWluIikpOwogICAgaWYgKCFkb21haW4pIHsKICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCJObyBkb21haW4iKTsKICAgIH0KICAgIGNvbnN0IGlucHV0U2l6ZSA9IGRvbWFpbi5sZW5ndGggLyAyOwogICAgaWYgKGlucHV0U2l6ZSAhPT0gMSkgewogICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoIkJhZCBkb21haW4gZm9yIHN0aWNoZWQgZnVuY3Rpb24iKTsKICAgIH0KICAgIGNvbnN0IHsKICAgICAgeHJlZgogICAgfSA9IGZhY3Rvcnk7CiAgICBjb25zdCBmbnMgPSBbXTsKICAgIGZvciAoY29uc3QgZm4gb2YgZGljdC5nZXQoIkZ1bmN0aW9ucyIpKSB7CiAgICAgIGZucy5wdXNoKHRoaXMucGFyc2UoZmFjdG9yeSwgeHJlZi5mZXRjaElmUmVmKGZuKSkpOwogICAgfQogICAgY29uc3QgYm91bmRzID0gdG9OdW1iZXJBcnJheShkaWN0LmdldEFycmF5KCJCb3VuZHMiKSk7CiAgICBjb25zdCBlbmNvZGUgPSB0b051bWJlckFycmF5KGRpY3QuZ2V0QXJyYXkoIkVuY29kZSIpKTsKICAgIGNvbnN0IHRtcEJ1ZiA9IG5ldyBGbG9hdDMyQXJyYXkoMSk7CiAgICByZXR1cm4gZnVuY3Rpb24gY29uc3RydWN0U3RpY2hlZEZuKHNyYywgc3JjT2Zmc2V0LCBkZXN0LCBkZXN0T2Zmc2V0KSB7CiAgICAgIGNvbnN0IHYgPSBNYXRoQ2xhbXAoc3JjW3NyY09mZnNldF0sIGRvbWFpblswXSwgZG9tYWluWzFdKTsKICAgICAgY29uc3QgbGVuZ3RoID0gYm91bmRzLmxlbmd0aDsKICAgICAgbGV0IGk7CiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgICAgIGlmICh2IDwgYm91bmRzW2ldKSB7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0KICAgICAgbGV0IGRtaW4gPSBkb21haW5bMF07CiAgICAgIGlmIChpID4gMCkgewogICAgICAgIGRtaW4gPSBib3VuZHNbaSAtIDFdOwogICAgICB9CiAgICAgIGxldCBkbWF4ID0gZG9tYWluWzFdOwogICAgICBpZiAoaSA8IGJvdW5kcy5sZW5ndGgpIHsKICAgICAgICBkbWF4ID0gYm91bmRzW2ldOwogICAgICB9CiAgICAgIGNvbnN0IHJtaW4gPSBlbmNvZGVbMiAqIGldOwogICAgICBjb25zdCBybWF4ID0gZW5jb2RlWzIgKiBpICsgMV07CiAgICAgIHRtcEJ1ZlswXSA9IGRtaW4gPT09IGRtYXggPyBybWluIDogcm1pbiArICh2IC0gZG1pbikgKiAocm1heCAtIHJtaW4pIC8gKGRtYXggLSBkbWluKTsKICAgICAgZm5zW2ldKHRtcEJ1ZiwgMCwgZGVzdCwgZGVzdE9mZnNldCk7CiAgICB9OwogIH0KICBzdGF0aWMgY29uc3RydWN0UG9zdFNjcmlwdChmYWN0b3J5LCBmbiwgZGljdCkgewogICAgY29uc3QgZG9tYWluID0gdG9OdW1iZXJBcnJheShkaWN0LmdldEFycmF5KCJEb21haW4iKSk7CiAgICBjb25zdCByYW5nZSA9IHRvTnVtYmVyQXJyYXkoZGljdC5nZXRBcnJheSgiUmFuZ2UiKSk7CiAgICBpZiAoIWRvbWFpbikgewogICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoIk5vIGRvbWFpbi4iKTsKICAgIH0KICAgIGlmICghcmFuZ2UpIHsKICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCJObyByYW5nZS4iKTsKICAgIH0KICAgIGNvbnN0IGxleGVyID0gbmV3IFBvc3RTY3JpcHRMZXhlcihmbik7CiAgICBjb25zdCBwYXJzZXIgPSBuZXcgUG9zdFNjcmlwdFBhcnNlcihsZXhlcik7CiAgICBjb25zdCBjb2RlID0gcGFyc2VyLnBhcnNlKCk7CiAgICBpZiAoZmFjdG9yeS5pc0V2YWxTdXBwb3J0ZWQgJiYgRmVhdHVyZVRlc3QuaXNFdmFsU3VwcG9ydGVkKSB7CiAgICAgIGNvbnN0IGNvbXBpbGVkID0gbmV3IFBvc3RTY3JpcHRDb21waWxlcigpLmNvbXBpbGUoY29kZSwgZG9tYWluLCByYW5nZSk7CiAgICAgIGlmIChjb21waWxlZCkgewogICAgICAgIHJldHVybiBuZXcgRnVuY3Rpb24oInNyYyIsICJzcmNPZmZzZXQiLCAiZGVzdCIsICJkZXN0T2Zmc2V0IiwgY29tcGlsZWQpOwogICAgICB9CiAgICB9CiAgICBpbmZvKCJVbmFibGUgdG8gY29tcGlsZSBQUyBmdW5jdGlvbiIpOwogICAgY29uc3QgbnVtT3V0cHV0cyA9IHJhbmdlLmxlbmd0aCA+PiAxOwogICAgY29uc3QgbnVtSW5wdXRzID0gZG9tYWluLmxlbmd0aCA+PiAxOwogICAgY29uc3QgZXZhbHVhdG9yID0gbmV3IFBvc3RTY3JpcHRFdmFsdWF0b3IoY29kZSk7CiAgICBjb25zdCBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgICBjb25zdCBNQVhfQ0FDSEVfU0laRSA9IDIwNDggKiA0OwogICAgbGV0IGNhY2hlX2F2YWlsYWJsZSA9IE1BWF9DQUNIRV9TSVpFOwogICAgY29uc3QgdG1wQnVmID0gbmV3IEZsb2F0MzJBcnJheShudW1JbnB1dHMpOwogICAgcmV0dXJuIGZ1bmN0aW9uIGNvbnN0cnVjdFBvc3RTY3JpcHRGbihzcmMsIHNyY09mZnNldCwgZGVzdCwgZGVzdE9mZnNldCkgewogICAgICBsZXQgaSwgdmFsdWU7CiAgICAgIGxldCBrZXkgPSAiIjsKICAgICAgY29uc3QgaW5wdXQgPSB0bXBCdWY7CiAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1JbnB1dHM7IGkrKykgewogICAgICAgIHZhbHVlID0gc3JjW3NyY09mZnNldCArIGldOwogICAgICAgIGlucHV0W2ldID0gdmFsdWU7CiAgICAgICAga2V5ICs9IHZhbHVlICsgIl8iOwogICAgICB9CiAgICAgIGNvbnN0IGNhY2hlZFZhbHVlID0gY2FjaGVba2V5XTsKICAgICAgaWYgKGNhY2hlZFZhbHVlICE9PSB1bmRlZmluZWQpIHsKICAgICAgICBkZXN0LnNldChjYWNoZWRWYWx1ZSwgZGVzdE9mZnNldCk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIGNvbnN0IG91dHB1dCA9IG5ldyBGbG9hdDMyQXJyYXkobnVtT3V0cHV0cyk7CiAgICAgIGNvbnN0IHN0YWNrID0gZXZhbHVhdG9yLmV4ZWN1dGUoaW5wdXQpOwogICAgICBjb25zdCBzdGFja0luZGV4ID0gc3RhY2subGVuZ3RoIC0gbnVtT3V0cHV0czsKICAgICAgZm9yIChpID0gMDsgaSA8IG51bU91dHB1dHM7IGkrKykgewogICAgICAgIHZhbHVlID0gc3RhY2tbc3RhY2tJbmRleCArIGldOwogICAgICAgIGxldCBib3VuZCA9IHJhbmdlW2kgKiAyXTsKICAgICAgICBpZiAodmFsdWUgPCBib3VuZCkgewogICAgICAgICAgdmFsdWUgPSBib3VuZDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgYm91bmQgPSByYW5nZVtpICogMiArIDFdOwogICAgICAgICAgaWYgKHZhbHVlID4gYm91bmQpIHsKICAgICAgICAgICAgdmFsdWUgPSBib3VuZDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgb3V0cHV0W2ldID0gdmFsdWU7CiAgICAgIH0KICAgICAgaWYgKGNhY2hlX2F2YWlsYWJsZSA+IDApIHsKICAgICAgICBjYWNoZV9hdmFpbGFibGUtLTsKICAgICAgICBjYWNoZVtrZXldID0gb3V0cHV0OwogICAgICB9CiAgICAgIGRlc3Quc2V0KG91dHB1dCwgZGVzdE9mZnNldCk7CiAgICB9OwogIH0KfQpmdW5jdGlvbiBpc1BERkZ1bmN0aW9uKHYpIHsKICBsZXQgZm5EaWN0OwogIGlmICh2IGluc3RhbmNlb2YgRGljdCkgewogICAgZm5EaWN0ID0gdjsKICB9IGVsc2UgaWYgKHYgaW5zdGFuY2VvZiBCYXNlU3RyZWFtKSB7CiAgICBmbkRpY3QgPSB2LmRpY3Q7CiAgfSBlbHNlIHsKICAgIHJldHVybiBmYWxzZTsKICB9CiAgcmV0dXJuIGZuRGljdC5oYXMoIkZ1bmN0aW9uVHlwZSIpOwp9CmNsYXNzIFBvc3RTY3JpcHRTdGFjayB7CiAgc3RhdGljIE1BWF9TVEFDS19TSVpFID0gMTAwOwogIGNvbnN0cnVjdG9yKGluaXRpYWxTdGFjaykgewogICAgdGhpcy5zdGFjayA9IGluaXRpYWxTdGFjayA/IEFycmF5LmZyb20oaW5pdGlhbFN0YWNrKSA6IFtdOwogIH0KICBwdXNoKHZhbHVlKSB7CiAgICBpZiAodGhpcy5zdGFjay5sZW5ndGggPj0gUG9zdFNjcmlwdFN0YWNrLk1BWF9TVEFDS19TSVpFKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcigiUG9zdFNjcmlwdCBmdW5jdGlvbiBzdGFjayBvdmVyZmxvdy4iKTsKICAgIH0KICAgIHRoaXMuc3RhY2sucHVzaCh2YWx1ZSk7CiAgfQogIHBvcCgpIHsKICAgIGlmICh0aGlzLnN0YWNrLmxlbmd0aCA8PSAwKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcigiUG9zdFNjcmlwdCBmdW5jdGlvbiBzdGFjayB1bmRlcmZsb3cuIik7CiAgICB9CiAgICByZXR1cm4gdGhpcy5zdGFjay5wb3AoKTsKICB9CiAgY29weShuKSB7CiAgICBpZiAodGhpcy5zdGFjay5sZW5ndGggKyBuID49IFBvc3RTY3JpcHRTdGFjay5NQVhfU1RBQ0tfU0laRSkgewogICAgICB0aHJvdyBuZXcgRXJyb3IoIlBvc3RTY3JpcHQgZnVuY3Rpb24gc3RhY2sgb3ZlcmZsb3cuIik7CiAgICB9CiAgICBjb25zdCBzdGFjayA9IHRoaXMuc3RhY2s7CiAgICBmb3IgKGxldCBpID0gc3RhY2subGVuZ3RoIC0gbiwgaiA9IG4gLSAxOyBqID49IDA7IGotLSwgaSsrKSB7CiAgICAgIHN0YWNrLnB1c2goc3RhY2tbaV0pOwogICAgfQogIH0KICBpbmRleChuKSB7CiAgICB0aGlzLnB1c2godGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIG4gLSAxXSk7CiAgfQogIHJvbGwobiwgcCkgewogICAgY29uc3Qgc3RhY2sgPSB0aGlzLnN0YWNrOwogICAgY29uc3QgbCA9IHN0YWNrLmxlbmd0aCAtIG47CiAgICBjb25zdCByID0gc3RhY2subGVuZ3RoIC0gMTsKICAgIGNvbnN0IGMgPSBsICsgKHAgLSBNYXRoLmZsb29yKHAgLyBuKSAqIG4pOwogICAgZm9yIChsZXQgaSA9IGwsIGogPSByOyBpIDwgajsgaSsrLCBqLS0pIHsKICAgICAgY29uc3QgdCA9IHN0YWNrW2ldOwogICAgICBzdGFja1tpXSA9IHN0YWNrW2pdOwogICAgICBzdGFja1tqXSA9IHQ7CiAgICB9CiAgICBmb3IgKGxldCBpID0gbCwgaiA9IGMgLSAxOyBpIDwgajsgaSsrLCBqLS0pIHsKICAgICAgY29uc3QgdCA9IHN0YWNrW2ldOwogICAgICBzdGFja1tpXSA9IHN0YWNrW2pdOwogICAgICBzdGFja1tqXSA9IHQ7CiAgICB9CiAgICBmb3IgKGxldCBpID0gYywgaiA9IHI7IGkgPCBqOyBpKyssIGotLSkgewogICAgICBjb25zdCB0ID0gc3RhY2tbaV07CiAgICAgIHN0YWNrW2ldID0gc3RhY2tbal07CiAgICAgIHN0YWNrW2pdID0gdDsKICAgIH0KICB9Cn0KY2xhc3MgUG9zdFNjcmlwdEV2YWx1YXRvciB7CiAgY29uc3RydWN0b3Iob3BlcmF0b3JzKSB7CiAgICB0aGlzLm9wZXJhdG9ycyA9IG9wZXJhdG9yczsKICB9CiAgZXhlY3V0ZShpbml0aWFsU3RhY2spIHsKICAgIGNvbnN0IHN0YWNrID0gbmV3IFBvc3RTY3JpcHRTdGFjayhpbml0aWFsU3RhY2spOwogICAgbGV0IGNvdW50ZXIgPSAwOwogICAgY29uc3Qgb3BlcmF0b3JzID0gdGhpcy5vcGVyYXRvcnM7CiAgICBjb25zdCBsZW5ndGggPSBvcGVyYXRvcnMubGVuZ3RoOwogICAgbGV0IG9wZXJhdG9yLCBhLCBiOwogICAgd2hpbGUgKGNvdW50ZXIgPCBsZW5ndGgpIHsKICAgICAgb3BlcmF0b3IgPSBvcGVyYXRvcnNbY291bnRlcisrXTsKICAgICAgaWYgKHR5cGVvZiBvcGVyYXRvciA9PT0gIm51bWJlciIpIHsKICAgICAgICBzdGFjay5wdXNoKG9wZXJhdG9yKTsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBzd2l0Y2ggKG9wZXJhdG9yKSB7CiAgICAgICAgY2FzZSAianoiOgogICAgICAgICAgYiA9IHN0YWNrLnBvcCgpOwogICAgICAgICAgYSA9IHN0YWNrLnBvcCgpOwogICAgICAgICAgaWYgKCFhKSB7CiAgICAgICAgICAgIGNvdW50ZXIgPSBiOwogICAgICAgICAgfQogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAiaiI6CiAgICAgICAgICBhID0gc3RhY2sucG9wKCk7CiAgICAgICAgICBjb3VudGVyID0gYTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgImFicyI6CiAgICAgICAgICBhID0gc3RhY2sucG9wKCk7CiAgICAgICAgICBzdGFjay5wdXNoKE1hdGguYWJzKGEpKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgImFkZCI6CiAgICAgICAgICBiID0gc3RhY2sucG9wKCk7CiAgICAgICAgICBhID0gc3RhY2sucG9wKCk7CiAgICAgICAgICBzdGFjay5wdXNoKGEgKyBiKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgImFuZCI6CiAgICAgICAgICBiID0gc3RhY2sucG9wKCk7CiAgICAgICAgICBhID0gc3RhY2sucG9wKCk7CiAgICAgICAgICBpZiAodHlwZW9mIGEgPT09ICJib29sZWFuIiAmJiB0eXBlb2YgYiA9PT0gImJvb2xlYW4iKSB7CiAgICAgICAgICAgIHN0YWNrLnB1c2goYSAmJiBiKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHN0YWNrLnB1c2goYSAmIGIpOwogICAgICAgICAgfQogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAiYXRhbiI6CiAgICAgICAgICBiID0gc3RhY2sucG9wKCk7CiAgICAgICAgICBhID0gc3RhY2sucG9wKCk7CiAgICAgICAgICBhID0gTWF0aC5hdGFuMihhLCBiKSAvIE1hdGguUEkgKiAxODA7CiAgICAgICAgICBpZiAoYSA8IDApIHsKICAgICAgICAgICAgYSArPSAzNjA7CiAgICAgICAgICB9CiAgICAgICAgICBzdGFjay5wdXNoKGEpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAiYml0c2hpZnQiOgogICAgICAgICAgYiA9IHN0YWNrLnBvcCgpOwogICAgICAgICAgYSA9IHN0YWNrLnBvcCgpOwogICAgICAgICAgaWYgKGEgPiAwKSB7CiAgICAgICAgICAgIHN0YWNrLnB1c2goYSA8PCBiKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHN0YWNrLnB1c2goYSA+PiBiKTsKICAgICAgICAgIH0KICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgImNlaWxpbmciOgogICAgICAgICAgYSA9IHN0YWNrLnBvcCgpOwogICAgICAgICAgc3RhY2sucHVzaChNYXRoLmNlaWwoYSkpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAiY29weSI6CiAgICAgICAgICBhID0gc3RhY2sucG9wKCk7CiAgICAgICAgICBzdGFjay5jb3B5KGEpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAiY29zIjoKICAgICAgICAgIGEgPSBzdGFjay5wb3AoKTsKICAgICAgICAgIHN0YWNrLnB1c2goTWF0aC5jb3MoYSAlIDM2MCAvIDE4MCAqIE1hdGguUEkpKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgImN2aSI6CiAgICAgICAgICBhID0gc3RhY2sucG9wKCkgfCAwOwogICAgICAgICAgc3RhY2sucHVzaChhKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgImN2ciI6CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJkaXYiOgogICAgICAgICAgYiA9IHN0YWNrLnBvcCgpOwogICAgICAgICAgYSA9IHN0YWNrLnBvcCgpOwogICAgICAgICAgc3RhY2sucHVzaChhIC8gYik7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJkdXAiOgogICAgICAgICAgc3RhY2suY29weSgxKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgImVxIjoKICAgICAgICAgIGIgPSBzdGFjay5wb3AoKTsKICAgICAgICAgIGEgPSBzdGFjay5wb3AoKTsKICAgICAgICAgIHN0YWNrLnB1c2goYSA9PT0gYik7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJleGNoIjoKICAgICAgICAgIHN0YWNrLnJvbGwoMiwgMSk7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJleHAiOgogICAgICAgICAgYiA9IHN0YWNrLnBvcCgpOwogICAgICAgICAgYSA9IHN0YWNrLnBvcCgpOwogICAgICAgICAgc3RhY2sucHVzaChhICoqIGIpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAiZmFsc2UiOgogICAgICAgICAgc3RhY2sucHVzaChmYWxzZSk7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJmbG9vciI6CiAgICAgICAgICBhID0gc3RhY2sucG9wKCk7CiAgICAgICAgICBzdGFjay5wdXNoKE1hdGguZmxvb3IoYSkpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAiZ2UiOgogICAgICAgICAgYiA9IHN0YWNrLnBvcCgpOwogICAgICAgICAgYSA9IHN0YWNrLnBvcCgpOwogICAgICAgICAgc3RhY2sucHVzaChhID49IGIpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAiZ3QiOgogICAgICAgICAgYiA9IHN0YWNrLnBvcCgpOwogICAgICAgICAgYSA9IHN0YWNrLnBvcCgpOwogICAgICAgICAgc3RhY2sucHVzaChhID4gYik7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJpZGl2IjoKICAgICAgICAgIGIgPSBzdGFjay5wb3AoKTsKICAgICAgICAgIGEgPSBzdGFjay5wb3AoKTsKICAgICAgICAgIHN0YWNrLnB1c2goYSAvIGIgfCAwKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgImluZGV4IjoKICAgICAgICAgIGEgPSBzdGFjay5wb3AoKTsKICAgICAgICAgIHN0YWNrLmluZGV4KGEpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAibGUiOgogICAgICAgICAgYiA9IHN0YWNrLnBvcCgpOwogICAgICAgICAgYSA9IHN0YWNrLnBvcCgpOwogICAgICAgICAgc3RhY2sucHVzaChhIDw9IGIpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAibG4iOgogICAgICAgICAgYSA9IHN0YWNrLnBvcCgpOwogICAgICAgICAgc3RhY2sucHVzaChNYXRoLmxvZyhhKSk7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJsb2ciOgogICAgICAgICAgYSA9IHN0YWNrLnBvcCgpOwogICAgICAgICAgc3RhY2sucHVzaChNYXRoLmxvZzEwKGEpKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgImx0IjoKICAgICAgICAgIGIgPSBzdGFjay5wb3AoKTsKICAgICAgICAgIGEgPSBzdGFjay5wb3AoKTsKICAgICAgICAgIHN0YWNrLnB1c2goYSA8IGIpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAibW9kIjoKICAgICAgICAgIGIgPSBzdGFjay5wb3AoKTsKICAgICAgICAgIGEgPSBzdGFjay5wb3AoKTsKICAgICAgICAgIHN0YWNrLnB1c2goYSAlIGIpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAibXVsIjoKICAgICAgICAgIGIgPSBzdGFjay5wb3AoKTsKICAgICAgICAgIGEgPSBzdGFjay5wb3AoKTsKICAgICAgICAgIHN0YWNrLnB1c2goYSAqIGIpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAibmUiOgogICAgICAgICAgYiA9IHN0YWNrLnBvcCgpOwogICAgICAgICAgYSA9IHN0YWNrLnBvcCgpOwogICAgICAgICAgc3RhY2sucHVzaChhICE9PSBiKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgIm5lZyI6CiAgICAgICAgICBhID0gc3RhY2sucG9wKCk7CiAgICAgICAgICBzdGFjay5wdXNoKC1hKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgIm5vdCI6CiAgICAgICAgICBhID0gc3RhY2sucG9wKCk7CiAgICAgICAgICBpZiAodHlwZW9mIGEgPT09ICJib29sZWFuIikgewogICAgICAgICAgICBzdGFjay5wdXNoKCFhKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHN0YWNrLnB1c2gofmEpOwogICAgICAgICAgfQogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAib3IiOgogICAgICAgICAgYiA9IHN0YWNrLnBvcCgpOwogICAgICAgICAgYSA9IHN0YWNrLnBvcCgpOwogICAgICAgICAgaWYgKHR5cGVvZiBhID09PSAiYm9vbGVhbiIgJiYgdHlwZW9mIGIgPT09ICJib29sZWFuIikgewogICAgICAgICAgICBzdGFjay5wdXNoKGEgfHwgYik7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBzdGFjay5wdXNoKGEgfCBiKTsKICAgICAgICAgIH0KICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgInBvcCI6CiAgICAgICAgICBzdGFjay5wb3AoKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgInJvbGwiOgogICAgICAgICAgYiA9IHN0YWNrLnBvcCgpOwogICAgICAgICAgYSA9IHN0YWNrLnBvcCgpOwogICAgICAgICAgc3RhY2sucm9sbChhLCBiKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgInJvdW5kIjoKICAgICAgICAgIGEgPSBzdGFjay5wb3AoKTsKICAgICAgICAgIHN0YWNrLnB1c2goTWF0aC5yb3VuZChhKSk7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJzaW4iOgogICAgICAgICAgYSA9IHN0YWNrLnBvcCgpOwogICAgICAgICAgc3RhY2sucHVzaChNYXRoLnNpbihhICUgMzYwIC8gMTgwICogTWF0aC5QSSkpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAic3FydCI6CiAgICAgICAgICBhID0gc3RhY2sucG9wKCk7CiAgICAgICAgICBzdGFjay5wdXNoKE1hdGguc3FydChhKSk7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJzdWIiOgogICAgICAgICAgYiA9IHN0YWNrLnBvcCgpOwogICAgICAgICAgYSA9IHN0YWNrLnBvcCgpOwogICAgICAgICAgc3RhY2sucHVzaChhIC0gYik7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJ0cnVlIjoKICAgICAgICAgIHN0YWNrLnB1c2godHJ1ZSk7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJ0cnVuY2F0ZSI6CiAgICAgICAgICBhID0gc3RhY2sucG9wKCk7CiAgICAgICAgICBhID0gYSA8IDAgPyBNYXRoLmNlaWwoYSkgOiBNYXRoLmZsb29yKGEpOwogICAgICAgICAgc3RhY2sucHVzaChhKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgInhvciI6CiAgICAgICAgICBiID0gc3RhY2sucG9wKCk7CiAgICAgICAgICBhID0gc3RhY2sucG9wKCk7CiAgICAgICAgICBpZiAodHlwZW9mIGEgPT09ICJib29sZWFuIiAmJiB0eXBlb2YgYiA9PT0gImJvb2xlYW4iKSB7CiAgICAgICAgICAgIHN0YWNrLnB1c2goYSAhPT0gYik7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBzdGFjay5wdXNoKGEgXiBiKTsKICAgICAgICAgIH0KICAgICAgICAgIGJyZWFrOwogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoYFVua25vd24gb3BlcmF0b3IgJHtvcGVyYXRvcn1gKTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIHN0YWNrLnN0YWNrOwogIH0KfQpjbGFzcyBBc3ROb2RlIHsKICBjb25zdHJ1Y3Rvcih0eXBlKSB7CiAgICB0aGlzLnR5cGUgPSB0eXBlOwogIH0KICB2aXNpdCh2aXNpdG9yKSB7CiAgICB1bnJlYWNoYWJsZSgiYWJzdHJhY3QgbWV0aG9kIik7CiAgfQp9CmNsYXNzIEFzdEFyZ3VtZW50IGV4dGVuZHMgQXN0Tm9kZSB7CiAgY29uc3RydWN0b3IoaW5kZXgsIG1pbiwgbWF4KSB7CiAgICBzdXBlcigiYXJncyIpOwogICAgdGhpcy5pbmRleCA9IGluZGV4OwogICAgdGhpcy5taW4gPSBtaW47CiAgICB0aGlzLm1heCA9IG1heDsKICB9CiAgdmlzaXQodmlzaXRvcikgewogICAgdmlzaXRvci52aXNpdEFyZ3VtZW50KHRoaXMpOwogIH0KfQpjbGFzcyBBc3RMaXRlcmFsIGV4dGVuZHMgQXN0Tm9kZSB7CiAgY29uc3RydWN0b3IobnVtYmVyKSB7CiAgICBzdXBlcigibGl0ZXJhbCIpOwogICAgdGhpcy5udW1iZXIgPSBudW1iZXI7CiAgICB0aGlzLm1pbiA9IG51bWJlcjsKICAgIHRoaXMubWF4ID0gbnVtYmVyOwogIH0KICB2aXNpdCh2aXNpdG9yKSB7CiAgICB2aXNpdG9yLnZpc2l0TGl0ZXJhbCh0aGlzKTsKICB9Cn0KY2xhc3MgQXN0QmluYXJ5T3BlcmF0aW9uIGV4dGVuZHMgQXN0Tm9kZSB7CiAgY29uc3RydWN0b3Iob3AsIGFyZzEsIGFyZzIsIG1pbiwgbWF4KSB7CiAgICBzdXBlcigiYmluYXJ5Iik7CiAgICB0aGlzLm9wID0gb3A7CiAgICB0aGlzLmFyZzEgPSBhcmcxOwogICAgdGhpcy5hcmcyID0gYXJnMjsKICAgIHRoaXMubWluID0gbWluOwogICAgdGhpcy5tYXggPSBtYXg7CiAgfQogIHZpc2l0KHZpc2l0b3IpIHsKICAgIHZpc2l0b3IudmlzaXRCaW5hcnlPcGVyYXRpb24odGhpcyk7CiAgfQp9CmNsYXNzIEFzdE1pbiBleHRlbmRzIEFzdE5vZGUgewogIGNvbnN0cnVjdG9yKGFyZywgbWF4KSB7CiAgICBzdXBlcigibWF4Iik7CiAgICB0aGlzLmFyZyA9IGFyZzsKICAgIHRoaXMubWluID0gYXJnLm1pbjsKICAgIHRoaXMubWF4ID0gbWF4OwogIH0KICB2aXNpdCh2aXNpdG9yKSB7CiAgICB2aXNpdG9yLnZpc2l0TWluKHRoaXMpOwogIH0KfQpjbGFzcyBBc3RWYXJpYWJsZSBleHRlbmRzIEFzdE5vZGUgewogIGNvbnN0cnVjdG9yKGluZGV4LCBtaW4sIG1heCkgewogICAgc3VwZXIoInZhciIpOwogICAgdGhpcy5pbmRleCA9IGluZGV4OwogICAgdGhpcy5taW4gPSBtaW47CiAgICB0aGlzLm1heCA9IG1heDsKICB9CiAgdmlzaXQodmlzaXRvcikgewogICAgdmlzaXRvci52aXNpdFZhcmlhYmxlKHRoaXMpOwogIH0KfQpjbGFzcyBBc3RWYXJpYWJsZURlZmluaXRpb24gZXh0ZW5kcyBBc3ROb2RlIHsKICBjb25zdHJ1Y3Rvcih2YXJpYWJsZSwgYXJnKSB7CiAgICBzdXBlcigiZGVmaW5pdGlvbiIpOwogICAgdGhpcy52YXJpYWJsZSA9IHZhcmlhYmxlOwogICAgdGhpcy5hcmcgPSBhcmc7CiAgfQogIHZpc2l0KHZpc2l0b3IpIHsKICAgIHZpc2l0b3IudmlzaXRWYXJpYWJsZURlZmluaXRpb24odGhpcyk7CiAgfQp9CmNsYXNzIEV4cHJlc3Npb25CdWlsZGVyVmlzaXRvciB7CiAgY29uc3RydWN0b3IoKSB7CiAgICB0aGlzLnBhcnRzID0gW107CiAgfQogIHZpc2l0QXJndW1lbnQoYXJnKSB7CiAgICB0aGlzLnBhcnRzLnB1c2goIk1hdGgubWF4KCIsIGFyZy5taW4sICIsIE1hdGgubWluKCIsIGFyZy5tYXgsICIsIHNyY1tzcmNPZmZzZXQgKyAiLCBhcmcuaW5kZXgsICJdKSkiKTsKICB9CiAgdmlzaXRWYXJpYWJsZSh2YXJpYWJsZSkgewogICAgdGhpcy5wYXJ0cy5wdXNoKCJ2IiwgdmFyaWFibGUuaW5kZXgpOwogIH0KICB2aXNpdExpdGVyYWwobGl0ZXJhbCkgewogICAgdGhpcy5wYXJ0cy5wdXNoKGxpdGVyYWwubnVtYmVyKTsKICB9CiAgdmlzaXRCaW5hcnlPcGVyYXRpb24ob3BlcmF0aW9uKSB7CiAgICB0aGlzLnBhcnRzLnB1c2goIigiKTsKICAgIG9wZXJhdGlvbi5hcmcxLnZpc2l0KHRoaXMpOwogICAgdGhpcy5wYXJ0cy5wdXNoKCIgIiwgb3BlcmF0aW9uLm9wLCAiICIpOwogICAgb3BlcmF0aW9uLmFyZzIudmlzaXQodGhpcyk7CiAgICB0aGlzLnBhcnRzLnB1c2goIikiKTsKICB9CiAgdmlzaXRWYXJpYWJsZURlZmluaXRpb24oZGVmaW5pdGlvbikgewogICAgdGhpcy5wYXJ0cy5wdXNoKCJ2YXIgIik7CiAgICBkZWZpbml0aW9uLnZhcmlhYmxlLnZpc2l0KHRoaXMpOwogICAgdGhpcy5wYXJ0cy5wdXNoKCIgPSAiKTsKICAgIGRlZmluaXRpb24uYXJnLnZpc2l0KHRoaXMpOwogICAgdGhpcy5wYXJ0cy5wdXNoKCI7Iik7CiAgfQogIHZpc2l0TWluKG1heCkgewogICAgdGhpcy5wYXJ0cy5wdXNoKCJNYXRoLm1pbigiKTsKICAgIG1heC5hcmcudmlzaXQodGhpcyk7CiAgICB0aGlzLnBhcnRzLnB1c2goIiwgIiwgbWF4Lm1heCwgIikiKTsKICB9CiAgdG9TdHJpbmcoKSB7CiAgICByZXR1cm4gdGhpcy5wYXJ0cy5qb2luKCIiKTsKICB9Cn0KZnVuY3Rpb24gYnVpbGRBZGRPcGVyYXRpb24obnVtMSwgbnVtMikgewogIGlmIChudW0yLnR5cGUgPT09ICJsaXRlcmFsIiAmJiBudW0yLm51bWJlciA9PT0gMCkgewogICAgcmV0dXJuIG51bTE7CiAgfQogIGlmIChudW0xLnR5cGUgPT09ICJsaXRlcmFsIiAmJiBudW0xLm51bWJlciA9PT0gMCkgewogICAgcmV0dXJuIG51bTI7CiAgfQogIGlmIChudW0yLnR5cGUgPT09ICJsaXRlcmFsIiAmJiBudW0xLnR5cGUgPT09ICJsaXRlcmFsIikgewogICAgcmV0dXJuIG5ldyBBc3RMaXRlcmFsKG51bTEubnVtYmVyICsgbnVtMi5udW1iZXIpOwogIH0KICByZXR1cm4gbmV3IEFzdEJpbmFyeU9wZXJhdGlvbigiKyIsIG51bTEsIG51bTIsIG51bTEubWluICsgbnVtMi5taW4sIG51bTEubWF4ICsgbnVtMi5tYXgpOwp9CmZ1bmN0aW9uIGJ1aWxkTXVsT3BlcmF0aW9uKG51bTEsIG51bTIpIHsKICBpZiAobnVtMi50eXBlID09PSAibGl0ZXJhbCIpIHsKICAgIGlmIChudW0yLm51bWJlciA9PT0gMCkgewogICAgICByZXR1cm4gbmV3IEFzdExpdGVyYWwoMCk7CiAgICB9IGVsc2UgaWYgKG51bTIubnVtYmVyID09PSAxKSB7CiAgICAgIHJldHVybiBudW0xOwogICAgfSBlbHNlIGlmIChudW0xLnR5cGUgPT09ICJsaXRlcmFsIikgewogICAgICByZXR1cm4gbmV3IEFzdExpdGVyYWwobnVtMS5udW1iZXIgKiBudW0yLm51bWJlcik7CiAgICB9CiAgfQogIGlmIChudW0xLnR5cGUgPT09ICJsaXRlcmFsIikgewogICAgaWYgKG51bTEubnVtYmVyID09PSAwKSB7CiAgICAgIHJldHVybiBuZXcgQXN0TGl0ZXJhbCgwKTsKICAgIH0gZWxzZSBpZiAobnVtMS5udW1iZXIgPT09IDEpIHsKICAgICAgcmV0dXJuIG51bTI7CiAgICB9CiAgfQogIGNvbnN0IG1pbiA9IE1hdGgubWluKG51bTEubWluICogbnVtMi5taW4sIG51bTEubWluICogbnVtMi5tYXgsIG51bTEubWF4ICogbnVtMi5taW4sIG51bTEubWF4ICogbnVtMi5tYXgpOwogIGNvbnN0IG1heCA9IE1hdGgubWF4KG51bTEubWluICogbnVtMi5taW4sIG51bTEubWluICogbnVtMi5tYXgsIG51bTEubWF4ICogbnVtMi5taW4sIG51bTEubWF4ICogbnVtMi5tYXgpOwogIHJldHVybiBuZXcgQXN0QmluYXJ5T3BlcmF0aW9uKCIqIiwgbnVtMSwgbnVtMiwgbWluLCBtYXgpOwp9CmZ1bmN0aW9uIGJ1aWxkU3ViT3BlcmF0aW9uKG51bTEsIG51bTIpIHsKICBpZiAobnVtMi50eXBlID09PSAibGl0ZXJhbCIpIHsKICAgIGlmIChudW0yLm51bWJlciA9PT0gMCkgewogICAgICByZXR1cm4gbnVtMTsKICAgIH0gZWxzZSBpZiAobnVtMS50eXBlID09PSAibGl0ZXJhbCIpIHsKICAgICAgcmV0dXJuIG5ldyBBc3RMaXRlcmFsKG51bTEubnVtYmVyIC0gbnVtMi5udW1iZXIpOwogICAgfQogIH0KICBpZiAobnVtMi50eXBlID09PSAiYmluYXJ5IiAmJiBudW0yLm9wID09PSAiLSIgJiYgbnVtMS50eXBlID09PSAibGl0ZXJhbCIgJiYgbnVtMS5udW1iZXIgPT09IDEgJiYgbnVtMi5hcmcxLnR5cGUgPT09ICJsaXRlcmFsIiAmJiBudW0yLmFyZzEubnVtYmVyID09PSAxKSB7CiAgICByZXR1cm4gbnVtMi5hcmcyOwogIH0KICByZXR1cm4gbmV3IEFzdEJpbmFyeU9wZXJhdGlvbigiLSIsIG51bTEsIG51bTIsIG51bTEubWluIC0gbnVtMi5tYXgsIG51bTEubWF4IC0gbnVtMi5taW4pOwp9CmZ1bmN0aW9uIGJ1aWxkTWluT3BlcmF0aW9uKG51bTEsIG1heCkgewogIGlmIChudW0xLm1pbiA+PSBtYXgpIHsKICAgIHJldHVybiBuZXcgQXN0TGl0ZXJhbChtYXgpOwogIH0gZWxzZSBpZiAobnVtMS5tYXggPD0gbWF4KSB7CiAgICByZXR1cm4gbnVtMTsKICB9CiAgcmV0dXJuIG5ldyBBc3RNaW4obnVtMSwgbWF4KTsKfQpjbGFzcyBQb3N0U2NyaXB0Q29tcGlsZXIgewogIGNvbXBpbGUoY29kZSwgZG9tYWluLCByYW5nZSkgewogICAgY29uc3Qgc3RhY2sgPSBbXTsKICAgIGNvbnN0IGluc3RydWN0aW9ucyA9IFtdOwogICAgY29uc3QgaW5wdXRTaXplID0gZG9tYWluLmxlbmd0aCA+PiAxLAogICAgICBvdXRwdXRTaXplID0gcmFuZ2UubGVuZ3RoID4+IDE7CiAgICBsZXQgbGFzdFJlZ2lzdGVyID0gMDsKICAgIGxldCBuLCBqOwogICAgbGV0IG51bTEsIG51bTIsIGFzdDEsIGFzdDIsIHRtcFZhciwgaXRlbTsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXRTaXplOyBpKyspIHsKICAgICAgc3RhY2sucHVzaChuZXcgQXN0QXJndW1lbnQoaSwgZG9tYWluW2kgKiAyXSwgZG9tYWluW2kgKiAyICsgMV0pKTsKICAgIH0KICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGNvZGUubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgICBpdGVtID0gY29kZVtpXTsKICAgICAgaWYgKHR5cGVvZiBpdGVtID09PSAibnVtYmVyIikgewogICAgICAgIHN0YWNrLnB1c2gobmV3IEFzdExpdGVyYWwoaXRlbSkpOwogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIHN3aXRjaCAoaXRlbSkgewogICAgICAgIGNhc2UgImFkZCI6CiAgICAgICAgICBpZiAoc3RhY2subGVuZ3RoIDwgMikgewogICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgIH0KICAgICAgICAgIG51bTIgPSBzdGFjay5wb3AoKTsKICAgICAgICAgIG51bTEgPSBzdGFjay5wb3AoKTsKICAgICAgICAgIHN0YWNrLnB1c2goYnVpbGRBZGRPcGVyYXRpb24obnVtMSwgbnVtMikpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAiY3ZyIjoKICAgICAgICAgIGlmIChzdGFjay5sZW5ndGggPCAxKSB7CiAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgfQogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAibXVsIjoKICAgICAgICAgIGlmIChzdGFjay5sZW5ndGggPCAyKSB7CiAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgfQogICAgICAgICAgbnVtMiA9IHN0YWNrLnBvcCgpOwogICAgICAgICAgbnVtMSA9IHN0YWNrLnBvcCgpOwogICAgICAgICAgc3RhY2sucHVzaChidWlsZE11bE9wZXJhdGlvbihudW0xLCBudW0yKSk7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJzdWIiOgogICAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCA8IDIpIHsKICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICB9CiAgICAgICAgICBudW0yID0gc3RhY2sucG9wKCk7CiAgICAgICAgICBudW0xID0gc3RhY2sucG9wKCk7CiAgICAgICAgICBzdGFjay5wdXNoKGJ1aWxkU3ViT3BlcmF0aW9uKG51bTEsIG51bTIpKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgImV4Y2giOgogICAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCA8IDIpIHsKICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICB9CiAgICAgICAgICBhc3QxID0gc3RhY2sucG9wKCk7CiAgICAgICAgICBhc3QyID0gc3RhY2sucG9wKCk7CiAgICAgICAgICBzdGFjay5wdXNoKGFzdDEsIGFzdDIpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAicG9wIjoKICAgICAgICAgIGlmIChzdGFjay5sZW5ndGggPCAxKSB7CiAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgfQogICAgICAgICAgc3RhY2sucG9wKCk7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJpbmRleCI6CiAgICAgICAgICBpZiAoc3RhY2subGVuZ3RoIDwgMSkgewogICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgIH0KICAgICAgICAgIG51bTEgPSBzdGFjay5wb3AoKTsKICAgICAgICAgIGlmIChudW0xLnR5cGUgIT09ICJsaXRlcmFsIikgewogICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgIH0KICAgICAgICAgIG4gPSBudW0xLm51bWJlcjsKICAgICAgICAgIGlmIChuIDwgMCB8fCAhTnVtYmVyLmlzSW50ZWdlcihuKSB8fCBzdGFjay5sZW5ndGggPCBuKSB7CiAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgfQogICAgICAgICAgYXN0MSA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIG4gLSAxXTsKICAgICAgICAgIGlmIChhc3QxLnR5cGUgPT09ICJsaXRlcmFsIiB8fCBhc3QxLnR5cGUgPT09ICJ2YXIiKSB7CiAgICAgICAgICAgIHN0YWNrLnB1c2goYXN0MSk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgICAgdG1wVmFyID0gbmV3IEFzdFZhcmlhYmxlKGxhc3RSZWdpc3RlcisrLCBhc3QxLm1pbiwgYXN0MS5tYXgpOwogICAgICAgICAgc3RhY2tbc3RhY2subGVuZ3RoIC0gbiAtIDFdID0gdG1wVmFyOwogICAgICAgICAgc3RhY2sucHVzaCh0bXBWYXIpOwogICAgICAgICAgaW5zdHJ1Y3Rpb25zLnB1c2gobmV3IEFzdFZhcmlhYmxlRGVmaW5pdGlvbih0bXBWYXIsIGFzdDEpKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgImR1cCI6CiAgICAgICAgICBpZiAoc3RhY2subGVuZ3RoIDwgMSkgewogICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh0eXBlb2YgY29kZVtpICsgMV0gPT09ICJudW1iZXIiICYmIGNvZGVbaSArIDJdID09PSAiZ3QiICYmIGNvZGVbaSArIDNdID09PSBpICsgNyAmJiBjb2RlW2kgKyA0XSA9PT0gImp6IiAmJiBjb2RlW2kgKyA1XSA9PT0gInBvcCIgJiYgY29kZVtpICsgNl0gPT09IGNvZGVbaSArIDFdKSB7CiAgICAgICAgICAgIG51bTEgPSBzdGFjay5wb3AoKTsKICAgICAgICAgICAgc3RhY2sucHVzaChidWlsZE1pbk9wZXJhdGlvbihudW0xLCBjb2RlW2kgKyAxXSkpOwogICAgICAgICAgICBpICs9IDY7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgICAgYXN0MSA9IHN0YWNrLmF0KC0xKTsKICAgICAgICAgIGlmIChhc3QxLnR5cGUgPT09ICJsaXRlcmFsIiB8fCBhc3QxLnR5cGUgPT09ICJ2YXIiKSB7CiAgICAgICAgICAgIHN0YWNrLnB1c2goYXN0MSk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgICAgdG1wVmFyID0gbmV3IEFzdFZhcmlhYmxlKGxhc3RSZWdpc3RlcisrLCBhc3QxLm1pbiwgYXN0MS5tYXgpOwogICAgICAgICAgc3RhY2tbc3RhY2subGVuZ3RoIC0gMV0gPSB0bXBWYXI7CiAgICAgICAgICBzdGFjay5wdXNoKHRtcFZhcik7CiAgICAgICAgICBpbnN0cnVjdGlvbnMucHVzaChuZXcgQXN0VmFyaWFibGVEZWZpbml0aW9uKHRtcFZhciwgYXN0MSkpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAicm9sbCI6CiAgICAgICAgICBpZiAoc3RhY2subGVuZ3RoIDwgMikgewogICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgIH0KICAgICAgICAgIG51bTIgPSBzdGFjay5wb3AoKTsKICAgICAgICAgIG51bTEgPSBzdGFjay5wb3AoKTsKICAgICAgICAgIGlmIChudW0yLnR5cGUgIT09ICJsaXRlcmFsIiB8fCBudW0xLnR5cGUgIT09ICJsaXRlcmFsIikgewogICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgIH0KICAgICAgICAgIGogPSBudW0yLm51bWJlcjsKICAgICAgICAgIG4gPSBudW0xLm51bWJlcjsKICAgICAgICAgIGlmIChuIDw9IDAgfHwgIU51bWJlci5pc0ludGVnZXIobikgfHwgIU51bWJlci5pc0ludGVnZXIoaikgfHwgc3RhY2subGVuZ3RoIDwgbikgewogICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgIH0KICAgICAgICAgIGogPSAoaiAlIG4gKyBuKSAlIG47CiAgICAgICAgICBpZiAoaiA9PT0gMCkgewogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICAgIHN0YWNrLnB1c2goLi4uc3RhY2suc3BsaWNlKHN0YWNrLmxlbmd0aCAtIG4sIG4gLSBqKSk7CiAgICAgICAgICBicmVhazsKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgIH0KICAgIGlmIChzdGFjay5sZW5ndGggIT09IG91dHB1dFNpemUpIHsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICBjb25zdCByZXN1bHQgPSBbXTsKICAgIGZvciAoY29uc3QgaW5zdHJ1Y3Rpb24gb2YgaW5zdHJ1Y3Rpb25zKSB7CiAgICAgIGNvbnN0IHN0YXRlbWVudEJ1aWxkZXIgPSBuZXcgRXhwcmVzc2lvbkJ1aWxkZXJWaXNpdG9yKCk7CiAgICAgIGluc3RydWN0aW9uLnZpc2l0KHN0YXRlbWVudEJ1aWxkZXIpOwogICAgICByZXN1bHQucHVzaChzdGF0ZW1lbnRCdWlsZGVyLnRvU3RyaW5nKCkpOwogICAgfQogICAgZm9yIChsZXQgaSA9IDAsIGlpID0gc3RhY2subGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgICBjb25zdCBleHByID0gc3RhY2tbaV0sCiAgICAgICAgc3RhdGVtZW50QnVpbGRlciA9IG5ldyBFeHByZXNzaW9uQnVpbGRlclZpc2l0b3IoKTsKICAgICAgZXhwci52aXNpdChzdGF0ZW1lbnRCdWlsZGVyKTsKICAgICAgY29uc3QgbWluID0gcmFuZ2VbaSAqIDJdLAogICAgICAgIG1heCA9IHJhbmdlW2kgKiAyICsgMV07CiAgICAgIGNvbnN0IG91dCA9IFtzdGF0ZW1lbnRCdWlsZGVyLnRvU3RyaW5nKCldOwogICAgICBpZiAobWluID4gZXhwci5taW4pIHsKICAgICAgICBvdXQudW5zaGlmdCgiTWF0aC5tYXgoIiwgbWluLCAiLCAiKTsKICAgICAgICBvdXQucHVzaCgiKSIpOwogICAgICB9CiAgICAgIGlmIChtYXggPCBleHByLm1heCkgewogICAgICAgIG91dC51bnNoaWZ0KCJNYXRoLm1pbigiLCBtYXgsICIsICIpOwogICAgICAgIG91dC5wdXNoKCIpIik7CiAgICAgIH0KICAgICAgb3V0LnVuc2hpZnQoImRlc3RbZGVzdE9mZnNldCArICIsIGksICJdID0gIik7CiAgICAgIG91dC5wdXNoKCI7Iik7CiAgICAgIHJlc3VsdC5wdXNoKG91dC5qb2luKCIiKSk7CiAgICB9CiAgICByZXR1cm4gcmVzdWx0LmpvaW4oIlxuIik7CiAgfQp9Cgo7Ly8gLi9zcmMvY29yZS9iaWRpLmpzCgpjb25zdCBiYXNlVHlwZXMgPSBbIkJOIiwgIkJOIiwgIkJOIiwgIkJOIiwgIkJOIiwgIkJOIiwgIkJOIiwgIkJOIiwgIkJOIiwgIlMiLCAiQiIsICJTIiwgIldTIiwgIkIiLCAiQk4iLCAiQk4iLCAiQk4iLCAiQk4iLCAiQk4iLCAiQk4iLCAiQk4iLCAiQk4iLCAiQk4iLCAiQk4iLCAiQk4iLCAiQk4iLCAiQk4iLCAiQk4iLCAiQiIsICJCIiwgIkIiLCAiUyIsICJXUyIsICJPTiIsICJPTiIsICJFVCIsICJFVCIsICJFVCIsICJPTiIsICJPTiIsICJPTiIsICJPTiIsICJPTiIsICJFUyIsICJDUyIsICJFUyIsICJDUyIsICJDUyIsICJFTiIsICJFTiIsICJFTiIsICJFTiIsICJFTiIsICJFTiIsICJFTiIsICJFTiIsICJFTiIsICJFTiIsICJDUyIsICJPTiIsICJPTiIsICJPTiIsICJPTiIsICJPTiIsICJPTiIsICJMIiwgIkwiLCAiTCIsICJMIiwgIkwiLCAiTCIsICJMIiwgIkwiLCAiTCIsICJMIiwgIkwiLCAiTCIsICJMIiwgIkwiLCAiTCIsICJMIiwgIkwiLCAiTCIsICJMIiwgIkwiLCAiTCIsICJMIiwgIkwiLCAiTCIsICJMIiwgIkwiLCAiT04iLCAiT04iLCAiT04iLCAiT04iLCAiT04iLCAiT04iLCAiTCIsICJMIiwgIkwiLCAiTCIsICJMIiwgIkwiLCAiTCIsICJMIiwgIkwiLCAiTCIsICJMIiwgIkwiLCAiTCIsICJMIiwgIkwiLCAiTCIsICJMIiwgIkwiLCAiTCIsICJMIiwgIkwiLCAiTCIsICJMIiwgIkwiLCAiTCIsICJMIiwgIk9OIiwgIk9OIiwgIk9OIiwgIk9OIiwgIkJOIiwgIkJOIiwgIkJOIiwgIkJOIiwgIkJOIiwgIkJOIiwgIkIiLCAiQk4iLCAiQk4iLCAiQk4iLCAiQk4iLCAiQk4iLCAiQk4iLCAiQk4iLCAiQk4iLCAiQk4iLCAiQk4iLCAiQk4iLCAiQk4iLCAiQk4iLCAiQk4iLCAiQk4iLCAiQk4iLCAiQk4iLCAiQk4iLCAiQk4iLCAiQk4iLCAiQk4iLCAiQk4iLCAiQk4iLCAiQk4iLCAiQk4iLCAiQk4iLCAiQ1MiLCAiT04iLCAiRVQiLCAiRVQiLCAiRVQiLCAiRVQiLCAiT04iLCAiT04iLCAiT04iLCAiT04iLCAiTCIsICJPTiIsICJPTiIsICJCTiIsICJPTiIsICJPTiIsICJFVCIsICJFVCIsICJFTiIsICJFTiIsICJPTiIsICJMIiwgIk9OIiwgIk9OIiwgIk9OIiwgIkVOIiwgIkwiLCAiT04iLCAiT04iLCAiT04iLCAiT04iLCAiT04iLCAiTCIsICJMIiwgIkwiLCAiTCIsICJMIiwgIkwiLCAiTCIsICJMIiwgIkwiLCAiTCIsICJMIiwgIkwiLCAiTCIsICJMIiwgIkwiLCAiTCIsICJMIiwgIkwiLCAiTCIsICJMIiwgIkwiLCAiTCIsICJMIiwgIk9OIiwgIkwiLCAiTCIsICJMIiwgIkwiLCAiTCIsICJMIiwgIkwiLCAiTCIsICJMIiwgIkwiLCAiTCIsICJMIiwgIkwiLCAiTCIsICJMIiwgIkwiLCAiTCIsICJMIiwgIkwiLCAiTCIsICJMIiwgIkwiLCAiTCIsICJMIiwgIkwiLCAiTCIsICJMIiwgIkwiLCAiTCIsICJMIiwgIkwiLCAiT04iLCAiTCIsICJMIiwgIkwiLCAiTCIsICJMIiwgIkwiLCAiTCIsICJMIl07CmNvbnN0IGFyYWJpY1R5cGVzID0gWyJBTiIsICJBTiIsICJBTiIsICJBTiIsICJBTiIsICJBTiIsICJPTiIsICJPTiIsICJBTCIsICJFVCIsICJFVCIsICJBTCIsICJDUyIsICJBTCIsICJPTiIsICJPTiIsICJOU00iLCAiTlNNIiwgIk5TTSIsICJOU00iLCAiTlNNIiwgIk5TTSIsICJOU00iLCAiTlNNIiwgIk5TTSIsICJOU00iLCAiTlNNIiwgIkFMIiwgIkFMIiwgIiIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJBTCIsICJOU00iLCAiTlNNIiwgIk5TTSIsICJOU00iLCAiTlNNIiwgIk5TTSIsICJOU00iLCAiTlNNIiwgIk5TTSIsICJOU00iLCAiTlNNIiwgIk5TTSIsICJOU00iLCAiTlNNIiwgIk5TTSIsICJOU00iLCAiTlNNIiwgIk5TTSIsICJOU00iLCAiTlNNIiwgIk5TTSIsICJBTiIsICJBTiIsICJBTiIsICJBTiIsICJBTiIsICJBTiIsICJBTiIsICJBTiIsICJBTiIsICJBTiIsICJFVCIsICJBTiIsICJBTiIsICJBTCIsICJBTCIsICJBTCIsICJOU00iLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiQUwiLCAiTlNNIiwgIk5TTSIsICJOU00iLCAiTlNNIiwgIk5TTSIsICJOU00iLCAiTlNNIiwgIkFOIiwgIk9OIiwgIk5TTSIsICJOU00iLCAiTlNNIiwgIk5TTSIsICJOU00iLCAiTlNNIiwgIkFMIiwgIkFMIiwgIk5TTSIsICJOU00iLCAiT04iLCAiTlNNIiwgIk5TTSIsICJOU00iLCAiTlNNIiwgIkFMIiwgIkFMIiwgIkVOIiwgIkVOIiwgIkVOIiwgIkVOIiwgIkVOIiwgIkVOIiwgIkVOIiwgIkVOIiwgIkVOIiwgIkVOIiwgIkFMIiwgIkFMIiwgIkFMIiwgIkFMIiwgIkFMIiwgIkFMIl07CmZ1bmN0aW9uIGlzT2RkKGkpIHsKICByZXR1cm4gKGkgJiAxKSAhPT0gMDsKfQpmdW5jdGlvbiBpc0V2ZW4oaSkgewogIHJldHVybiAoaSAmIDEpID09PSAwOwp9CmZ1bmN0aW9uIGZpbmRVbmVxdWFsKGFyciwgc3RhcnQsIHZhbHVlKSB7CiAgbGV0IGosIGpqOwogIGZvciAoaiA9IHN0YXJ0LCBqaiA9IGFyci5sZW5ndGg7IGogPCBqajsgKytqKSB7CiAgICBpZiAoYXJyW2pdICE9PSB2YWx1ZSkgewogICAgICByZXR1cm4gajsKICAgIH0KICB9CiAgcmV0dXJuIGo7Cn0KZnVuY3Rpb24gcmV2ZXJzZVZhbHVlcyhhcnIsIHN0YXJ0LCBlbmQpIHsKICBmb3IgKGxldCBpID0gc3RhcnQsIGogPSBlbmQgLSAxOyBpIDwgajsgKytpLCAtLWopIHsKICAgIGNvbnN0IHRlbXAgPSBhcnJbaV07CiAgICBhcnJbaV0gPSBhcnJbal07CiAgICBhcnJbal0gPSB0ZW1wOwogIH0KfQpmdW5jdGlvbiBjcmVhdGVCaWRpVGV4dChzdHIsIGlzTFRSLCB2ZXJ0aWNhbCA9IGZhbHNlKSB7CiAgbGV0IGRpciA9ICJsdHIiOwogIGlmICh2ZXJ0aWNhbCkgewogICAgZGlyID0gInR0YiI7CiAgfSBlbHNlIGlmICghaXNMVFIpIHsKICAgIGRpciA9ICJydGwiOwogIH0KICByZXR1cm4gewogICAgc3RyLAogICAgZGlyCiAgfTsKfQpjb25zdCBjaGFycyA9IFtdOwpjb25zdCB0eXBlcyA9IFtdOwpmdW5jdGlvbiBiaWRpKHN0ciwgc3RhcnRMZXZlbCA9IC0xLCB2ZXJ0aWNhbCA9IGZhbHNlKSB7CiAgbGV0IGlzTFRSID0gdHJ1ZTsKICBjb25zdCBzdHJMZW5ndGggPSBzdHIubGVuZ3RoOwogIGlmIChzdHJMZW5ndGggPT09IDAgfHwgdmVydGljYWwpIHsKICAgIHJldHVybiBjcmVhdGVCaWRpVGV4dChzdHIsIGlzTFRSLCB2ZXJ0aWNhbCk7CiAgfQogIGNoYXJzLmxlbmd0aCA9IHN0ckxlbmd0aDsKICB0eXBlcy5sZW5ndGggPSBzdHJMZW5ndGg7CiAgbGV0IG51bUJpZGkgPSAwOwogIGxldCBpLCBpaTsKICBmb3IgKGkgPSAwOyBpIDwgc3RyTGVuZ3RoOyArK2kpIHsKICAgIGNoYXJzW2ldID0gc3RyLmNoYXJBdChpKTsKICAgIGNvbnN0IGNoYXJDb2RlID0gc3RyLmNoYXJDb2RlQXQoaSk7CiAgICBsZXQgY2hhclR5cGUgPSAiTCI7CiAgICBpZiAoY2hhckNvZGUgPD0gMHgwMGZmKSB7CiAgICAgIGNoYXJUeXBlID0gYmFzZVR5cGVzW2NoYXJDb2RlXTsKICAgIH0gZWxzZSBpZiAoMHgwNTkwIDw9IGNoYXJDb2RlICYmIGNoYXJDb2RlIDw9IDB4MDVmNCkgewogICAgICBjaGFyVHlwZSA9ICJSIjsKICAgIH0gZWxzZSBpZiAoMHgwNjAwIDw9IGNoYXJDb2RlICYmIGNoYXJDb2RlIDw9IDB4MDZmZikgewogICAgICBjaGFyVHlwZSA9IGFyYWJpY1R5cGVzW2NoYXJDb2RlICYgMHhmZl07CiAgICAgIGlmICghY2hhclR5cGUpIHsKICAgICAgICB3YXJuKCJCaWRpOiBpbnZhbGlkIFVuaWNvZGUgY2hhcmFjdGVyICIgKyBjaGFyQ29kZS50b1N0cmluZygxNikpOwogICAgICB9CiAgICB9IGVsc2UgaWYgKDB4MDcwMCA8PSBjaGFyQ29kZSAmJiBjaGFyQ29kZSA8PSAweDA4YWMgfHwgMHhmYjUwIDw9IGNoYXJDb2RlICYmIGNoYXJDb2RlIDw9IDB4ZmRmZiB8fCAweGZlNzAgPD0gY2hhckNvZGUgJiYgY2hhckNvZGUgPD0gMHhmZWZmKSB7CiAgICAgIGNoYXJUeXBlID0gIkFMIjsKICAgIH0KICAgIGlmIChjaGFyVHlwZSA9PT0gIlIiIHx8IGNoYXJUeXBlID09PSAiQUwiIHx8IGNoYXJUeXBlID09PSAiQU4iKSB7CiAgICAgIG51bUJpZGkrKzsKICAgIH0KICAgIHR5cGVzW2ldID0gY2hhclR5cGU7CiAgfQogIGlmIChudW1CaWRpID09PSAwKSB7CiAgICBpc0xUUiA9IHRydWU7CiAgICByZXR1cm4gY3JlYXRlQmlkaVRleHQoc3RyLCBpc0xUUik7CiAgfQogIGlmIChzdGFydExldmVsID09PSAtMSkgewogICAgaWYgKG51bUJpZGkgLyBzdHJMZW5ndGggPCAwLjMgJiYgc3RyTGVuZ3RoID4gNCkgewogICAgICBpc0xUUiA9IHRydWU7CiAgICAgIHN0YXJ0TGV2ZWwgPSAwOwogICAgfSBlbHNlIHsKICAgICAgaXNMVFIgPSBmYWxzZTsKICAgICAgc3RhcnRMZXZlbCA9IDE7CiAgICB9CiAgfQogIGNvbnN0IGxldmVscyA9IFtdOwogIGZvciAoaSA9IDA7IGkgPCBzdHJMZW5ndGg7ICsraSkgewogICAgbGV2ZWxzW2ldID0gc3RhcnRMZXZlbDsKICB9CiAgY29uc3QgZSA9IGlzT2RkKHN0YXJ0TGV2ZWwpID8gIlIiIDogIkwiOwogIGNvbnN0IHNvciA9IGU7CiAgY29uc3QgZW9yID0gc29yOwogIGxldCBsYXN0VHlwZSA9IHNvcjsKICBmb3IgKGkgPSAwOyBpIDwgc3RyTGVuZ3RoOyArK2kpIHsKICAgIGlmICh0eXBlc1tpXSA9PT0gIk5TTSIpIHsKICAgICAgdHlwZXNbaV0gPSBsYXN0VHlwZTsKICAgIH0gZWxzZSB7CiAgICAgIGxhc3RUeXBlID0gdHlwZXNbaV07CiAgICB9CiAgfQogIGxhc3RUeXBlID0gc29yOwogIGxldCB0OwogIGZvciAoaSA9IDA7IGkgPCBzdHJMZW5ndGg7ICsraSkgewogICAgdCA9IHR5cGVzW2ldOwogICAgaWYgKHQgPT09ICJFTiIpIHsKICAgICAgdHlwZXNbaV0gPSBsYXN0VHlwZSA9PT0gIkFMIiA/ICJBTiIgOiAiRU4iOwogICAgfSBlbHNlIGlmICh0ID09PSAiUiIgfHwgdCA9PT0gIkwiIHx8IHQgPT09ICJBTCIpIHsKICAgICAgbGFzdFR5cGUgPSB0OwogICAgfQogIH0KICBmb3IgKGkgPSAwOyBpIDwgc3RyTGVuZ3RoOyArK2kpIHsKICAgIHQgPSB0eXBlc1tpXTsKICAgIGlmICh0ID09PSAiQUwiKSB7CiAgICAgIHR5cGVzW2ldID0gIlIiOwogICAgfQogIH0KICBmb3IgKGkgPSAxOyBpIDwgc3RyTGVuZ3RoIC0gMTsgKytpKSB7CiAgICBpZiAodHlwZXNbaV0gPT09ICJFUyIgJiYgdHlwZXNbaSAtIDFdID09PSAiRU4iICYmIHR5cGVzW2kgKyAxXSA9PT0gIkVOIikgewogICAgICB0eXBlc1tpXSA9ICJFTiI7CiAgICB9CiAgICBpZiAodHlwZXNbaV0gPT09ICJDUyIgJiYgKHR5cGVzW2kgLSAxXSA9PT0gIkVOIiB8fCB0eXBlc1tpIC0gMV0gPT09ICJBTiIpICYmIHR5cGVzW2kgKyAxXSA9PT0gdHlwZXNbaSAtIDFdKSB7CiAgICAgIHR5cGVzW2ldID0gdHlwZXNbaSAtIDFdOwogICAgfQogIH0KICBmb3IgKGkgPSAwOyBpIDwgc3RyTGVuZ3RoOyArK2kpIHsKICAgIGlmICh0eXBlc1tpXSA9PT0gIkVOIikgewogICAgICBmb3IgKGxldCBqID0gaSAtIDE7IGogPj0gMDsgLS1qKSB7CiAgICAgICAgaWYgKHR5cGVzW2pdICE9PSAiRVQiKSB7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgICAgdHlwZXNbal0gPSAiRU4iOwogICAgICB9CiAgICAgIGZvciAobGV0IGogPSBpICsgMTsgaiA8IHN0ckxlbmd0aDsgKytqKSB7CiAgICAgICAgaWYgKHR5cGVzW2pdICE9PSAiRVQiKSB7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgICAgdHlwZXNbal0gPSAiRU4iOwogICAgICB9CiAgICB9CiAgfQogIGZvciAoaSA9IDA7IGkgPCBzdHJMZW5ndGg7ICsraSkgewogICAgdCA9IHR5cGVzW2ldOwogICAgaWYgKHQgPT09ICJXUyIgfHwgdCA9PT0gIkVTIiB8fCB0ID09PSAiRVQiIHx8IHQgPT09ICJDUyIpIHsKICAgICAgdHlwZXNbaV0gPSAiT04iOwogICAgfQogIH0KICBsYXN0VHlwZSA9IHNvcjsKICBmb3IgKGkgPSAwOyBpIDwgc3RyTGVuZ3RoOyArK2kpIHsKICAgIHQgPSB0eXBlc1tpXTsKICAgIGlmICh0ID09PSAiRU4iKSB7CiAgICAgIHR5cGVzW2ldID0gbGFzdFR5cGUgPT09ICJMIiA/ICJMIiA6ICJFTiI7CiAgICB9IGVsc2UgaWYgKHQgPT09ICJSIiB8fCB0ID09PSAiTCIpIHsKICAgICAgbGFzdFR5cGUgPSB0OwogICAgfQogIH0KICBmb3IgKGkgPSAwOyBpIDwgc3RyTGVuZ3RoOyArK2kpIHsKICAgIGlmICh0eXBlc1tpXSA9PT0gIk9OIikgewogICAgICBjb25zdCBlbmQgPSBmaW5kVW5lcXVhbCh0eXBlcywgaSArIDEsICJPTiIpOwogICAgICBsZXQgYmVmb3JlID0gc29yOwogICAgICBpZiAoaSA+IDApIHsKICAgICAgICBiZWZvcmUgPSB0eXBlc1tpIC0gMV07CiAgICAgIH0KICAgICAgbGV0IGFmdGVyID0gZW9yOwogICAgICBpZiAoZW5kICsgMSA8IHN0ckxlbmd0aCkgewogICAgICAgIGFmdGVyID0gdHlwZXNbZW5kICsgMV07CiAgICAgIH0KICAgICAgaWYgKGJlZm9yZSAhPT0gIkwiKSB7CiAgICAgICAgYmVmb3JlID0gIlIiOwogICAgICB9CiAgICAgIGlmIChhZnRlciAhPT0gIkwiKSB7CiAgICAgICAgYWZ0ZXIgPSAiUiI7CiAgICAgIH0KICAgICAgaWYgKGJlZm9yZSA9PT0gYWZ0ZXIpIHsKICAgICAgICB0eXBlcy5maWxsKGJlZm9yZSwgaSwgZW5kKTsKICAgICAgfQogICAgICBpID0gZW5kIC0gMTsKICAgIH0KICB9CiAgZm9yIChpID0gMDsgaSA8IHN0ckxlbmd0aDsgKytpKSB7CiAgICBpZiAodHlwZXNbaV0gPT09ICJPTiIpIHsKICAgICAgdHlwZXNbaV0gPSBlOwogICAgfQogIH0KICBmb3IgKGkgPSAwOyBpIDwgc3RyTGVuZ3RoOyArK2kpIHsKICAgIHQgPSB0eXBlc1tpXTsKICAgIGlmIChpc0V2ZW4obGV2ZWxzW2ldKSkgewogICAgICBpZiAodCA9PT0gIlIiKSB7CiAgICAgICAgbGV2ZWxzW2ldICs9IDE7CiAgICAgIH0gZWxzZSBpZiAodCA9PT0gIkFOIiB8fCB0ID09PSAiRU4iKSB7CiAgICAgICAgbGV2ZWxzW2ldICs9IDI7CiAgICAgIH0KICAgIH0gZWxzZSBpZiAodCA9PT0gIkwiIHx8IHQgPT09ICJBTiIgfHwgdCA9PT0gIkVOIikgewogICAgICBsZXZlbHNbaV0gKz0gMTsKICAgIH0KICB9CiAgbGV0IGhpZ2hlc3RMZXZlbCA9IC0xOwogIGxldCBsb3dlc3RPZGRMZXZlbCA9IDk5OwogIGxldCBsZXZlbDsKICBmb3IgKGkgPSAwLCBpaSA9IGxldmVscy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7CiAgICBsZXZlbCA9IGxldmVsc1tpXTsKICAgIGlmIChoaWdoZXN0TGV2ZWwgPCBsZXZlbCkgewogICAgICBoaWdoZXN0TGV2ZWwgPSBsZXZlbDsKICAgIH0KICAgIGlmIChsb3dlc3RPZGRMZXZlbCA+IGxldmVsICYmIGlzT2RkKGxldmVsKSkgewogICAgICBsb3dlc3RPZGRMZXZlbCA9IGxldmVsOwogICAgfQogIH0KICBmb3IgKGxldmVsID0gaGlnaGVzdExldmVsOyBsZXZlbCA+PSBsb3dlc3RPZGRMZXZlbDsgLS1sZXZlbCkgewogICAgbGV0IHN0YXJ0ID0gLTE7CiAgICBmb3IgKGkgPSAwLCBpaSA9IGxldmVscy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7CiAgICAgIGlmIChsZXZlbHNbaV0gPCBsZXZlbCkgewogICAgICAgIGlmIChzdGFydCA+PSAwKSB7CiAgICAgICAgICByZXZlcnNlVmFsdWVzKGNoYXJzLCBzdGFydCwgaSk7CiAgICAgICAgICBzdGFydCA9IC0xOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmIChzdGFydCA8IDApIHsKICAgICAgICBzdGFydCA9IGk7CiAgICAgIH0KICAgIH0KICAgIGlmIChzdGFydCA+PSAwKSB7CiAgICAgIHJldmVyc2VWYWx1ZXMoY2hhcnMsIHN0YXJ0LCBsZXZlbHMubGVuZ3RoKTsKICAgIH0KICB9CiAgZm9yIChpID0gMCwgaWkgPSBjaGFycy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7CiAgICBjb25zdCBjaCA9IGNoYXJzW2ldOwogICAgaWYgKGNoID09PSAiPCIgfHwgY2ggPT09ICI+IikgewogICAgICBjaGFyc1tpXSA9ICIiOwogICAgfQogIH0KICByZXR1cm4gY3JlYXRlQmlkaVRleHQoY2hhcnMuam9pbigiIiksIGlzTFRSKTsKfQoKOy8vIC4vc3JjL2NvcmUvZm9udF9zdWJzdGl0dXRpb25zLmpzCgoKCgoKCgoKCgoKCgpjb25zdCBOT1JNQUwgPSB7CiAgc3R5bGU6ICJub3JtYWwiLAogIHdlaWdodDogIm5vcm1hbCIKfTsKY29uc3QgQk9MRCA9IHsKICBzdHlsZTogIm5vcm1hbCIsCiAgd2VpZ2h0OiAiYm9sZCIKfTsKY29uc3QgSVRBTElDID0gewogIHN0eWxlOiAiaXRhbGljIiwKICB3ZWlnaHQ6ICJub3JtYWwiCn07CmNvbnN0IEJPTERJVEFMSUMgPSB7CiAgc3R5bGU6ICJpdGFsaWMiLAogIHdlaWdodDogImJvbGQiCn07CmNvbnN0IHN1YnN0aXR1dGlvbk1hcCA9IG5ldyBNYXAoW1siVGltZXMtUm9tYW4iLCB7CiAgbG9jYWw6IFsiVGltZXMgTmV3IFJvbWFuIiwgIlRpbWVzLVJvbWFuIiwgIlRpbWVzIiwgIkxpYmVyYXRpb24gU2VyaWYiLCAiTmltYnVzIFJvbWFuIiwgIk5pbWJ1cyBSb21hbiBMIiwgIlRpbm9zIiwgIlRob3JuZGFsZSIsICJUZVggR3lyZSBUZXJtZXMiLCAiRnJlZVNlcmlmIiwgIkxpbnV4IExpYmVydGluZSBPIiwgIkxpYmVydGludXMgU2VyaWYiLCAiRGVqYVZ1IFNlcmlmIiwgIkJpdHN0cmVhbSBWZXJhIFNlcmlmIiwgIlVidW50dSJdLAogIHN0eWxlOiBOT1JNQUwsCiAgdWx0aW1hdGU6ICJzZXJpZiIKfV0sIFsiVGltZXMtQm9sZCIsIHsKICBhbGlhczogIlRpbWVzLVJvbWFuIiwKICBzdHlsZTogQk9MRCwKICB1bHRpbWF0ZTogInNlcmlmIgp9XSwgWyJUaW1lcy1JdGFsaWMiLCB7CiAgYWxpYXM6ICJUaW1lcy1Sb21hbiIsCiAgc3R5bGU6IElUQUxJQywKICB1bHRpbWF0ZTogInNlcmlmIgp9XSwgWyJUaW1lcy1Cb2xkSXRhbGljIiwgewogIGFsaWFzOiAiVGltZXMtUm9tYW4iLAogIHN0eWxlOiBCT0xESVRBTElDLAogIHVsdGltYXRlOiAic2VyaWYiCn1dLCBbIkhlbHZldGljYSIsIHsKICBsb2NhbDogWyJIZWx2ZXRpY2EiLCAiSGVsdmV0aWNhIE5ldWUiLCAiQXJpYWwiLCAiQXJpYWwgTm92YSIsICJMaWJlcmF0aW9uIFNhbnMiLCAiQXJpbW8iLCAiTmltYnVzIFNhbnMiLCAiTmltYnVzIFNhbnMgTCIsICJBMDMwIiwgIlRlWCBHeXJlIEhlcm9zIiwgIkZyZWVTYW5zIiwgIkRlamFWdSBTYW5zIiwgIkFsYmFueSIsICJCaXRzdHJlYW0gVmVyYSBTYW5zIiwgIkFyaWFsIFVuaWNvZGUgTVMiLCAiTWljcm9zb2Z0IFNhbnMgU2VyaWYiLCAiQXBwbGUgU3ltYm9scyIsICJDYW50YXJlbGwiXSwKICBwYXRoOiAiTGliZXJhdGlvblNhbnMtUmVndWxhci50dGYiLAogIHN0eWxlOiBOT1JNQUwsCiAgdWx0aW1hdGU6ICJzYW5zLXNlcmlmIgp9XSwgWyJIZWx2ZXRpY2EtQm9sZCIsIHsKICBhbGlhczogIkhlbHZldGljYSIsCiAgcGF0aDogIkxpYmVyYXRpb25TYW5zLUJvbGQudHRmIiwKICBzdHlsZTogQk9MRCwKICB1bHRpbWF0ZTogInNhbnMtc2VyaWYiCn1dLCBbIkhlbHZldGljYS1PYmxpcXVlIiwgewogIGFsaWFzOiAiSGVsdmV0aWNhIiwKICBwYXRoOiAiTGliZXJhdGlvblNhbnMtSXRhbGljLnR0ZiIsCiAgc3R5bGU6IElUQUxJQywKICB1bHRpbWF0ZTogInNhbnMtc2VyaWYiCn1dLCBbIkhlbHZldGljYS1Cb2xkT2JsaXF1ZSIsIHsKICBhbGlhczogIkhlbHZldGljYSIsCiAgcGF0aDogIkxpYmVyYXRpb25TYW5zLUJvbGRJdGFsaWMudHRmIiwKICBzdHlsZTogQk9MRElUQUxJQywKICB1bHRpbWF0ZTogInNhbnMtc2VyaWYiCn1dLCBbIkNvdXJpZXIiLCB7CiAgbG9jYWw6IFsiQ291cmllciIsICJDb3VyaWVyIE5ldyIsICJMaWJlcmF0aW9uIE1vbm8iLCAiTmltYnVzIE1vbm8iLCAiTmltYnVzIE1vbm8gTCIsICJDb3VzaW5lIiwgIkN1bWJlcmxhbmQiLCAiVGVYIEd5cmUgQ3Vyc29yIiwgIkZyZWVNb25vIiwgIkxpbnV4IExpYmVydGluZSBNb25vIE8iLCAiTGliZXJ0aW51cyBNb25vIl0sCiAgc3R5bGU6IE5PUk1BTCwKICB1bHRpbWF0ZTogIm1vbm9zcGFjZSIKfV0sIFsiQ291cmllci1Cb2xkIiwgewogIGFsaWFzOiAiQ291cmllciIsCiAgc3R5bGU6IEJPTEQsCiAgdWx0aW1hdGU6ICJtb25vc3BhY2UiCn1dLCBbIkNvdXJpZXItT2JsaXF1ZSIsIHsKICBhbGlhczogIkNvdXJpZXIiLAogIHN0eWxlOiBJVEFMSUMsCiAgdWx0aW1hdGU6ICJtb25vc3BhY2UiCn1dLCBbIkNvdXJpZXItQm9sZE9ibGlxdWUiLCB7CiAgYWxpYXM6ICJDb3VyaWVyIiwKICBzdHlsZTogQk9MRElUQUxJQywKICB1bHRpbWF0ZTogIm1vbm9zcGFjZSIKfV0sIFsiQXJpYWxCbGFjayIsIHsKICBsb2NhbDogWyJBcmlhbCBCbGFjayJdLAogIHN0eWxlOiB7CiAgICBzdHlsZTogIm5vcm1hbCIsCiAgICB3ZWlnaHQ6ICI5MDAiCiAgfSwKICBmYWxsYmFjazogIkhlbHZldGljYS1Cb2xkIgp9XSwgWyJBcmlhbEJsYWNrLUJvbGQiLCB7CiAgYWxpYXM6ICJBcmlhbEJsYWNrIgp9XSwgWyJBcmlhbEJsYWNrLUl0YWxpYyIsIHsKICBhbGlhczogIkFyaWFsQmxhY2siLAogIHN0eWxlOiB7CiAgICBzdHlsZTogIml0YWxpYyIsCiAgICB3ZWlnaHQ6ICI5MDAiCiAgfSwKICBmYWxsYmFjazogIkhlbHZldGljYS1Cb2xkT2JsaXF1ZSIKfV0sIFsiQXJpYWxCbGFjay1Cb2xkSXRhbGljIiwgewogIGFsaWFzOiAiQXJpYWxCbGFjay1JdGFsaWMiCn1dLCBbIkFyaWFsTmFycm93IiwgewogIGxvY2FsOiBbIkFyaWFsIE5hcnJvdyIsICJMaWJlcmF0aW9uIFNhbnMgTmFycm93IiwgIkhlbHZldGljYSBDb25kZW5zZWQiLCAiTmltYnVzIFNhbnMgTmFycm93IiwgIlRlWCBHeXJlIEhlcm9zIENuIl0sCiAgc3R5bGU6IE5PUk1BTCwKICBmYWxsYmFjazogIkhlbHZldGljYSIKfV0sIFsiQXJpYWxOYXJyb3ctQm9sZCIsIHsKICBhbGlhczogIkFyaWFsTmFycm93IiwKICBzdHlsZTogQk9MRCwKICBmYWxsYmFjazogIkhlbHZldGljYS1Cb2xkIgp9XSwgWyJBcmlhbE5hcnJvdy1JdGFsaWMiLCB7CiAgYWxpYXM6ICJBcmlhbE5hcnJvdyIsCiAgc3R5bGU6IElUQUxJQywKICBmYWxsYmFjazogIkhlbHZldGljYS1PYmxpcXVlIgp9XSwgWyJBcmlhbE5hcnJvdy1Cb2xkSXRhbGljIiwgewogIGFsaWFzOiAiQXJpYWxOYXJyb3ciLAogIHN0eWxlOiBCT0xESVRBTElDLAogIGZhbGxiYWNrOiAiSGVsdmV0aWNhLUJvbGRPYmxpcXVlIgp9XSwgWyJDYWxpYnJpIiwgewogIGxvY2FsOiBbIkNhbGlicmkiLCAiQ2FybGl0byJdLAogIHN0eWxlOiBOT1JNQUwsCiAgZmFsbGJhY2s6ICJIZWx2ZXRpY2EiCn1dLCBbIkNhbGlicmktQm9sZCIsIHsKICBhbGlhczogIkNhbGlicmkiLAogIHN0eWxlOiBCT0xELAogIGZhbGxiYWNrOiAiSGVsdmV0aWNhLUJvbGQiCn1dLCBbIkNhbGlicmktSXRhbGljIiwgewogIGFsaWFzOiAiQ2FsaWJyaSIsCiAgc3R5bGU6IElUQUxJQywKICBmYWxsYmFjazogIkhlbHZldGljYS1PYmxpcXVlIgp9XSwgWyJDYWxpYnJpLUJvbGRJdGFsaWMiLCB7CiAgYWxpYXM6ICJDYWxpYnJpIiwKICBzdHlsZTogQk9MRElUQUxJQywKICBmYWxsYmFjazogIkhlbHZldGljYS1Cb2xkT2JsaXF1ZSIKfV0sIFsiV2luZ2RpbmdzIiwgewogIGxvY2FsOiBbIldpbmdkaW5ncyIsICJVUlcgRGluZ2JhdHMiXSwKICBzdHlsZTogTk9STUFMCn1dLCBbIldpbmdkaW5ncy1SZWd1bGFyIiwgewogIGFsaWFzOiAiV2luZ2RpbmdzIgp9XSwgWyJXaW5nZGluZ3MtQm9sZCIsIHsKICBhbGlhczogIldpbmdkaW5ncyIKfV1dKTsKY29uc3QgZm9udEFsaWFzZXMgPSBuZXcgTWFwKFtbIkFyaWFsLUJsYWNrIiwgIkFyaWFsQmxhY2siXV0pOwpmdW5jdGlvbiBnZXRTdHlsZVRvQXBwZW5kKHN0eWxlKSB7CiAgc3dpdGNoIChzdHlsZSkgewogICAgY2FzZSBCT0xEOgogICAgICByZXR1cm4gIkJvbGQiOwogICAgY2FzZSBJVEFMSUM6CiAgICAgIHJldHVybiAiSXRhbGljIjsKICAgIGNhc2UgQk9MRElUQUxJQzoKICAgICAgcmV0dXJuICJCb2xkIEl0YWxpYyI7CiAgICBkZWZhdWx0OgogICAgICBpZiAoc3R5bGU/LndlaWdodCA9PT0gImJvbGQiKSB7CiAgICAgICAgcmV0dXJuICJCb2xkIjsKICAgICAgfQogICAgICBpZiAoc3R5bGU/LnN0eWxlID09PSAiaXRhbGljIikgewogICAgICAgIHJldHVybiAiSXRhbGljIjsKICAgICAgfQogIH0KICByZXR1cm4gIiI7Cn0KZnVuY3Rpb24gZ2V0RmFtaWx5TmFtZShzdHIpIHsKICBjb25zdCBrZXl3b3JkcyA9IG5ldyBTZXQoWyJ0aGluIiwgImV4dHJhbGlnaHQiLCAidWx0cmFsaWdodCIsICJkZW1pbGlnaHQiLCAic2VtaWxpZ2h0IiwgImxpZ2h0IiwgImJvb2siLCAicmVndWxhciIsICJub3JtYWwiLCAibWVkaXVtIiwgImRlbWlib2xkIiwgInNlbWlib2xkIiwgImJvbGQiLCAiZXh0cmFib2xkIiwgInVsdHJhYm9sZCIsICJibGFjayIsICJoZWF2eSIsICJleHRyYWJsYWNrIiwgInVsdHJhYmxhY2siLCAicm9tYW4iLCAiaXRhbGljIiwgIm9ibGlxdWUiLCAidWx0cmFjb25kZW5zZWQiLCAiZXh0cmFjb25kZW5zZWQiLCAiY29uZGVuc2VkIiwgInNlbWljb25kZW5zZWQiLCAibm9ybWFsIiwgInNlbWlleHBhbmRlZCIsICJleHBhbmRlZCIsICJleHRyYWV4cGFuZGVkIiwgInVsdHJhZXhwYW5kZWQiLCAiYm9sZGl0YWxpYyJdKTsKICByZXR1cm4gc3RyLnNwbGl0KC9bLSAsK10rL2cpLmZpbHRlcih0b2sgPT4gIWtleXdvcmRzLmhhcyh0b2sudG9Mb3dlckNhc2UoKSkpLmpvaW4oIiAiKTsKfQpmdW5jdGlvbiBnZW5lcmF0ZUZvbnQoewogIGFsaWFzLAogIGxvY2FsLAogIHBhdGgsCiAgZmFsbGJhY2ssCiAgc3R5bGUsCiAgdWx0aW1hdGUKfSwgc3JjLCBsb2NhbEZvbnRQYXRoLCB1c2VGYWxsYmFjayA9IHRydWUsIHVzZVBhdGggPSB0cnVlLCBhcHBlbmQgPSAiIikgewogIGNvbnN0IHJlc3VsdCA9IHsKICAgIHN0eWxlOiBudWxsLAogICAgdWx0aW1hdGU6IG51bGwKICB9OwogIGlmIChsb2NhbCkgewogICAgY29uc3QgZXh0cmEgPSBhcHBlbmQgPyBgICR7YXBwZW5kfWAgOiAiIjsKICAgIGZvciAoY29uc3QgbmFtZSBvZiBsb2NhbCkgewogICAgICBzcmMucHVzaChgbG9jYWwoJHtuYW1lfSR7ZXh0cmF9KWApOwogICAgfQogIH0KICBpZiAoYWxpYXMpIHsKICAgIGNvbnN0IHN1YnN0aXR1dGlvbiA9IHN1YnN0aXR1dGlvbk1hcC5nZXQoYWxpYXMpOwogICAgY29uc3QgYWxpYXNBcHBlbmQgPSBhcHBlbmQgfHwgZ2V0U3R5bGVUb0FwcGVuZChzdHlsZSk7CiAgICBPYmplY3QuYXNzaWduKHJlc3VsdCwgZ2VuZXJhdGVGb250KHN1YnN0aXR1dGlvbiwgc3JjLCBsb2NhbEZvbnRQYXRoLCB1c2VGYWxsYmFjayAmJiAhZmFsbGJhY2ssIHVzZVBhdGggJiYgIXBhdGgsIGFsaWFzQXBwZW5kKSk7CiAgfQogIGlmIChzdHlsZSkgewogICAgcmVzdWx0LnN0eWxlID0gc3R5bGU7CiAgfQogIGlmICh1bHRpbWF0ZSkgewogICAgcmVzdWx0LnVsdGltYXRlID0gdWx0aW1hdGU7CiAgfQogIGlmICh1c2VGYWxsYmFjayAmJiBmYWxsYmFjaykgewogICAgY29uc3QgZmFsbGJhY2tJbmZvID0gc3Vic3RpdHV0aW9uTWFwLmdldChmYWxsYmFjayk7CiAgICBjb25zdCB7CiAgICAgIHVsdGltYXRlOiBmYWxsYmFja1VsdGltYXRlCiAgICB9ID0gZ2VuZXJhdGVGb250KGZhbGxiYWNrSW5mbywgc3JjLCBsb2NhbEZvbnRQYXRoLCB1c2VGYWxsYmFjaywgdXNlUGF0aCAmJiAhcGF0aCwgYXBwZW5kKTsKICAgIHJlc3VsdC51bHRpbWF0ZSB8fD0gZmFsbGJhY2tVbHRpbWF0ZTsKICB9CiAgaWYgKHVzZVBhdGggJiYgcGF0aCAmJiBsb2NhbEZvbnRQYXRoKSB7CiAgICBzcmMucHVzaChgdXJsKCR7bG9jYWxGb250UGF0aH0ke3BhdGh9KWApOwogIH0KICByZXR1cm4gcmVzdWx0Owp9CmZ1bmN0aW9uIGdldEZvbnRTdWJzdGl0dXRpb24oc3lzdGVtRm9udENhY2hlLCBpZEZhY3RvcnksIGxvY2FsRm9udFBhdGgsIGJhc2VGb250TmFtZSwgc3RhbmRhcmRGb250TmFtZSwgdHlwZSkgewogIGlmIChiYXNlRm9udE5hbWUuc3RhcnRzV2l0aCgiSW52YWxpZFBERmpzRm9udF8iKSkgewogICAgcmV0dXJuIG51bGw7CiAgfQogIGlmICgodHlwZSA9PT0gIlRydWVUeXBlIiB8fCB0eXBlID09PSAiVHlwZTEiKSAmJiAvXltBLVpdezZ9XCsvLnRlc3QoYmFzZUZvbnROYW1lKSkgewogICAgYmFzZUZvbnROYW1lID0gYmFzZUZvbnROYW1lLnNsaWNlKDcpOwogIH0KICBiYXNlRm9udE5hbWUgPSBub3JtYWxpemVGb250TmFtZShiYXNlRm9udE5hbWUpOwogIGNvbnN0IGtleSA9IGJhc2VGb250TmFtZTsKICBsZXQgc3Vic3RpdHV0aW9uSW5mbyA9IHN5c3RlbUZvbnRDYWNoZS5nZXQoa2V5KTsKICBpZiAoc3Vic3RpdHV0aW9uSW5mbykgewogICAgcmV0dXJuIHN1YnN0aXR1dGlvbkluZm87CiAgfQogIGxldCBzdWJzdGl0dXRpb24gPSBzdWJzdGl0dXRpb25NYXAuZ2V0KGJhc2VGb250TmFtZSk7CiAgaWYgKCFzdWJzdGl0dXRpb24pIHsKICAgIGZvciAoY29uc3QgW2FsaWFzLCBzdWJzdF0gb2YgZm9udEFsaWFzZXMpIHsKICAgICAgaWYgKGJhc2VGb250TmFtZS5zdGFydHNXaXRoKGFsaWFzKSkgewogICAgICAgIGJhc2VGb250TmFtZSA9IGAke3N1YnN0fSR7YmFzZUZvbnROYW1lLnN1YnN0cmluZyhhbGlhcy5sZW5ndGgpfWA7CiAgICAgICAgc3Vic3RpdHV0aW9uID0gc3Vic3RpdHV0aW9uTWFwLmdldChiYXNlRm9udE5hbWUpOwogICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CiAgfQogIGxldCBtdXN0QWRkQmFzZUZvbnQgPSBmYWxzZTsKICBpZiAoIXN1YnN0aXR1dGlvbikgewogICAgc3Vic3RpdHV0aW9uID0gc3Vic3RpdHV0aW9uTWFwLmdldChzdGFuZGFyZEZvbnROYW1lKTsKICAgIG11c3RBZGRCYXNlRm9udCA9IHRydWU7CiAgfQogIGNvbnN0IGxvYWRlZE5hbWUgPSBgJHtpZEZhY3RvcnkuZ2V0RG9jSWQoKX1fcyR7aWRGYWN0b3J5LmNyZWF0ZUZvbnRJZCgpfWA7CiAgaWYgKCFzdWJzdGl0dXRpb24pIHsKICAgIGlmICghdmFsaWRhdGVGb250TmFtZShiYXNlRm9udE5hbWUpKSB7CiAgICAgIHdhcm4oYENhbm5vdCBzdWJzdGl0dXRlIHRoZSBmb250IGJlY2F1c2Ugb2YgaXRzIG5hbWU6ICR7YmFzZUZvbnROYW1lfWApOwogICAgICBzeXN0ZW1Gb250Q2FjaGUuc2V0KGtleSwgbnVsbCk7CiAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgY29uc3QgYm9sZCA9IC9ib2xkL2dpLnRlc3QoYmFzZUZvbnROYW1lKTsKICAgIGNvbnN0IGl0YWxpYyA9IC9vYmxpcXVlfGl0YWxpYy9naS50ZXN0KGJhc2VGb250TmFtZSk7CiAgICBjb25zdCBzdHlsZSA9IGJvbGQgJiYgaXRhbGljICYmIEJPTERJVEFMSUMgfHwgYm9sZCAmJiBCT0xEIHx8IGl0YWxpYyAmJiBJVEFMSUMgfHwgTk9STUFMOwogICAgc3Vic3RpdHV0aW9uSW5mbyA9IHsKICAgICAgY3NzOiBgIiR7Z2V0RmFtaWx5TmFtZShiYXNlRm9udE5hbWUpfSIsJHtsb2FkZWROYW1lfWAsCiAgICAgIGd1ZXNzRmFsbGJhY2s6IHRydWUsCiAgICAgIGxvYWRlZE5hbWUsCiAgICAgIGJhc2VGb250TmFtZSwKICAgICAgc3JjOiBgbG9jYWwoJHtiYXNlRm9udE5hbWV9KWAsCiAgICAgIHN0eWxlCiAgICB9OwogICAgc3lzdGVtRm9udENhY2hlLnNldChrZXksIHN1YnN0aXR1dGlvbkluZm8pOwogICAgcmV0dXJuIHN1YnN0aXR1dGlvbkluZm87CiAgfQogIGNvbnN0IHNyYyA9IFtdOwogIGlmIChtdXN0QWRkQmFzZUZvbnQgJiYgdmFsaWRhdGVGb250TmFtZShiYXNlRm9udE5hbWUpKSB7CiAgICBzcmMucHVzaChgbG9jYWwoJHtiYXNlRm9udE5hbWV9KWApOwogIH0KICBjb25zdCB7CiAgICBzdHlsZSwKICAgIHVsdGltYXRlCiAgfSA9IGdlbmVyYXRlRm9udChzdWJzdGl0dXRpb24sIHNyYywgbG9jYWxGb250UGF0aCk7CiAgY29uc3QgZ3Vlc3NGYWxsYmFjayA9IHVsdGltYXRlID09PSBudWxsOwogIGNvbnN0IGZhbGxiYWNrID0gZ3Vlc3NGYWxsYmFjayA/ICIiIDogYCwke3VsdGltYXRlfWA7CiAgc3Vic3RpdHV0aW9uSW5mbyA9IHsKICAgIGNzczogYCIke2dldEZhbWlseU5hbWUoYmFzZUZvbnROYW1lKX0iLCR7bG9hZGVkTmFtZX0ke2ZhbGxiYWNrfWAsCiAgICBndWVzc0ZhbGxiYWNrLAogICAgbG9hZGVkTmFtZSwKICAgIGJhc2VGb250TmFtZSwKICAgIHNyYzogc3JjLmpvaW4oIiwiKSwKICAgIHN0eWxlCiAgfTsKICBzeXN0ZW1Gb250Q2FjaGUuc2V0KGtleSwgc3Vic3RpdHV0aW9uSW5mbyk7CiAgcmV0dXJuIHN1YnN0aXR1dGlvbkluZm87Cn0KCjsvLyAuL3NyYy9zaGFyZWQvbXVybXVyaGFzaDMuanMKCgoKCgoKCgpjb25zdCBTRUVEID0gMHhjM2QyZTFmMDsKY29uc3QgTUFTS19ISUdIID0gMHhmZmZmMDAwMDsKY29uc3QgTUFTS19MT1cgPSAweGZmZmY7CmNsYXNzIE11cm11ckhhc2gzXzY0IHsKICBjb25zdHJ1Y3RvcihzZWVkKSB7CiAgICB0aGlzLmgxID0gc2VlZCA/IHNlZWQgJiAweGZmZmZmZmZmIDogU0VFRDsKICAgIHRoaXMuaDIgPSBzZWVkID8gc2VlZCAmIDB4ZmZmZmZmZmYgOiBTRUVEOwogIH0KICB1cGRhdGUoaW5wdXQpIHsKICAgIGxldCBkYXRhLCBsZW5ndGg7CiAgICBpZiAodHlwZW9mIGlucHV0ID09PSAic3RyaW5nIikgewogICAgICBkYXRhID0gbmV3IFVpbnQ4QXJyYXkoaW5wdXQubGVuZ3RoICogMik7CiAgICAgIGxlbmd0aCA9IDA7CiAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGlucHV0Lmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgICBjb25zdCBjb2RlID0gaW5wdXQuY2hhckNvZGVBdChpKTsKICAgICAgICBpZiAoY29kZSA8PSAweGZmKSB7CiAgICAgICAgICBkYXRhW2xlbmd0aCsrXSA9IGNvZGU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGRhdGFbbGVuZ3RoKytdID0gY29kZSA+Pj4gODsKICAgICAgICAgIGRhdGFbbGVuZ3RoKytdID0gY29kZSAmIDB4ZmY7CiAgICAgICAgfQogICAgICB9CiAgICB9IGVsc2UgaWYgKEFycmF5QnVmZmVyLmlzVmlldyhpbnB1dCkpIHsKICAgICAgZGF0YSA9IGlucHV0LnNsaWNlKCk7CiAgICAgIGxlbmd0aCA9IGRhdGEuYnl0ZUxlbmd0aDsKICAgIH0gZWxzZSB7CiAgICAgIHRocm93IG5ldyBFcnJvcigiSW52YWxpZCBkYXRhIGZvcm1hdCwgbXVzdCBiZSBhIHN0cmluZyBvciBUeXBlZEFycmF5LiIpOwogICAgfQogICAgY29uc3QgYmxvY2tDb3VudHMgPSBsZW5ndGggPj4gMjsKICAgIGNvbnN0IHRhaWxMZW5ndGggPSBsZW5ndGggLSBibG9ja0NvdW50cyAqIDQ7CiAgICBjb25zdCBkYXRhVWludDMyID0gbmV3IFVpbnQzMkFycmF5KGRhdGEuYnVmZmVyLCAwLCBibG9ja0NvdW50cyk7CiAgICBsZXQgazEgPSAwLAogICAgICBrMiA9IDA7CiAgICBsZXQgaDEgPSB0aGlzLmgxLAogICAgICBoMiA9IHRoaXMuaDI7CiAgICBjb25zdCBDMSA9IDB4Y2M5ZTJkNTEsCiAgICAgIEMyID0gMHgxYjg3MzU5MzsKICAgIGNvbnN0IEMxX0xPVyA9IEMxICYgTUFTS19MT1csCiAgICAgIEMyX0xPVyA9IEMyICYgTUFTS19MT1c7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJsb2NrQ291bnRzOyBpKyspIHsKICAgICAgaWYgKGkgJiAxKSB7CiAgICAgICAgazEgPSBkYXRhVWludDMyW2ldOwogICAgICAgIGsxID0gazEgKiBDMSAmIE1BU0tfSElHSCB8IGsxICogQzFfTE9XICYgTUFTS19MT1c7CiAgICAgICAgazEgPSBrMSA8PCAxNSB8IGsxID4+PiAxNzsKICAgICAgICBrMSA9IGsxICogQzIgJiBNQVNLX0hJR0ggfCBrMSAqIEMyX0xPVyAmIE1BU0tfTE9XOwogICAgICAgIGgxIF49IGsxOwogICAgICAgIGgxID0gaDEgPDwgMTMgfCBoMSA+Pj4gMTk7CiAgICAgICAgaDEgPSBoMSAqIDUgKyAweGU2NTQ2YjY0OwogICAgICB9IGVsc2UgewogICAgICAgIGsyID0gZGF0YVVpbnQzMltpXTsKICAgICAgICBrMiA9IGsyICogQzEgJiBNQVNLX0hJR0ggfCBrMiAqIEMxX0xPVyAmIE1BU0tfTE9XOwogICAgICAgIGsyID0gazIgPDwgMTUgfCBrMiA+Pj4gMTc7CiAgICAgICAgazIgPSBrMiAqIEMyICYgTUFTS19ISUdIIHwgazIgKiBDMl9MT1cgJiBNQVNLX0xPVzsKICAgICAgICBoMiBePSBrMjsKICAgICAgICBoMiA9IGgyIDw8IDEzIHwgaDIgPj4+IDE5OwogICAgICAgIGgyID0gaDIgKiA1ICsgMHhlNjU0NmI2NDsKICAgICAgfQogICAgfQogICAgazEgPSAwOwogICAgc3dpdGNoICh0YWlsTGVuZ3RoKSB7CiAgICAgIGNhc2UgMzoKICAgICAgICBrMSBePSBkYXRhW2Jsb2NrQ291bnRzICogNCArIDJdIDw8IDE2OwogICAgICBjYXNlIDI6CiAgICAgICAgazEgXj0gZGF0YVtibG9ja0NvdW50cyAqIDQgKyAxXSA8PCA4OwogICAgICBjYXNlIDE6CiAgICAgICAgazEgXj0gZGF0YVtibG9ja0NvdW50cyAqIDRdOwogICAgICAgIGsxID0gazEgKiBDMSAmIE1BU0tfSElHSCB8IGsxICogQzFfTE9XICYgTUFTS19MT1c7CiAgICAgICAgazEgPSBrMSA8PCAxNSB8IGsxID4+PiAxNzsKICAgICAgICBrMSA9IGsxICogQzIgJiBNQVNLX0hJR0ggfCBrMSAqIEMyX0xPVyAmIE1BU0tfTE9XOwogICAgICAgIGlmIChibG9ja0NvdW50cyAmIDEpIHsKICAgICAgICAgIGgxIF49IGsxOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBoMiBePSBrMTsKICAgICAgICB9CiAgICB9CiAgICB0aGlzLmgxID0gaDE7CiAgICB0aGlzLmgyID0gaDI7CiAgfQogIGhleGRpZ2VzdCgpIHsKICAgIGxldCBoMSA9IHRoaXMuaDEsCiAgICAgIGgyID0gdGhpcy5oMjsKICAgIGgxIF49IGgyID4+PiAxOwogICAgaDEgPSBoMSAqIDB4ZWQ1NThjY2QgJiBNQVNLX0hJR0ggfCBoMSAqIDB4OGNjZCAmIE1BU0tfTE9XOwogICAgaDIgPSBoMiAqIDB4ZmY1MWFmZDcgJiBNQVNLX0hJR0ggfCAoKGgyIDw8IDE2IHwgaDEgPj4+IDE2KSAqIDB4YWZkN2VkNTUgJiBNQVNLX0hJR0gpID4+PiAxNjsKICAgIGgxIF49IGgyID4+PiAxOwogICAgaDEgPSBoMSAqIDB4MWE4NWVjNTMgJiBNQVNLX0hJR0ggfCBoMSAqIDB4ZWM1MyAmIE1BU0tfTE9XOwogICAgaDIgPSBoMiAqIDB4YzRjZWI5ZmUgJiBNQVNLX0hJR0ggfCAoKGgyIDw8IDE2IHwgaDEgPj4+IDE2KSAqIDB4YjlmZTFhODUgJiBNQVNLX0hJR0gpID4+PiAxNjsKICAgIGgxIF49IGgyID4+PiAxOwogICAgcmV0dXJuIChoMSA+Pj4gMCkudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDgsICIwIikgKyAoaDIgPj4+IDApLnRvU3RyaW5nKDE2KS5wYWRTdGFydCg4LCAiMCIpOwogIH0KfQoKOy8vIC4vc3JjL2NvcmUvaW1hZ2UuanMKCgoKCgoKCgoKCgoKCgoKCgoKZnVuY3Rpb24gcmVzaXplSW1hZ2VNYXNrKHNyYywgYnBjLCB3MSwgaDEsIHcyLCBoMikgewogIGNvbnN0IGxlbmd0aCA9IHcyICogaDI7CiAgbGV0IGRlc3Q7CiAgaWYgKGJwYyA8PSA4KSB7CiAgICBkZXN0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTsKICB9IGVsc2UgaWYgKGJwYyA8PSAxNikgewogICAgZGVzdCA9IG5ldyBVaW50MTZBcnJheShsZW5ndGgpOwogIH0gZWxzZSB7CiAgICBkZXN0ID0gbmV3IFVpbnQzMkFycmF5KGxlbmd0aCk7CiAgfQogIGNvbnN0IHhSYXRpbyA9IHcxIC8gdzI7CiAgY29uc3QgeVJhdGlvID0gaDEgLyBoMjsKICBsZXQgaSwKICAgIGosCiAgICBweSwKICAgIG5ld0luZGV4ID0gMCwKICAgIG9sZEluZGV4OwogIGNvbnN0IHhTY2FsZWQgPSBuZXcgVWludDE2QXJyYXkodzIpOwogIGNvbnN0IHcxU2NhbmxpbmUgPSB3MTsKICBmb3IgKGkgPSAwOyBpIDwgdzI7IGkrKykgewogICAgeFNjYWxlZFtpXSA9IE1hdGguZmxvb3IoaSAqIHhSYXRpbyk7CiAgfQogIGZvciAoaSA9IDA7IGkgPCBoMjsgaSsrKSB7CiAgICBweSA9IE1hdGguZmxvb3IoaSAqIHlSYXRpbykgKiB3MVNjYW5saW5lOwogICAgZm9yIChqID0gMDsgaiA8IHcyOyBqKyspIHsKICAgICAgb2xkSW5kZXggPSBweSArIHhTY2FsZWRbal07CiAgICAgIGRlc3RbbmV3SW5kZXgrK10gPSBzcmNbb2xkSW5kZXhdOwogICAgfQogIH0KICByZXR1cm4gZGVzdDsKfQpjbGFzcyBQREZJbWFnZSB7CiAgY29uc3RydWN0b3IoewogICAgeHJlZiwKICAgIHJlcywKICAgIGltYWdlLAogICAgaXNJbmxpbmUgPSBmYWxzZSwKICAgIHNtYXNrID0gbnVsbCwKICAgIG1hc2sgPSBudWxsLAogICAgaXNNYXNrID0gZmFsc2UsCiAgICBwZGZGdW5jdGlvbkZhY3RvcnksCiAgICBnbG9iYWxDb2xvclNwYWNlQ2FjaGUsCiAgICBsb2NhbENvbG9yU3BhY2VDYWNoZQogIH0pIHsKICAgIHRoaXMuaW1hZ2UgPSBpbWFnZTsKICAgIGNvbnN0IGRpY3QgPSBpbWFnZS5kaWN0OwogICAgY29uc3QgZmlsdGVyID0gZGljdC5nZXQoIkYiLCAiRmlsdGVyIik7CiAgICBsZXQgZmlsdGVyTmFtZTsKICAgIGlmIChmaWx0ZXIgaW5zdGFuY2VvZiBOYW1lKSB7CiAgICAgIGZpbHRlck5hbWUgPSBmaWx0ZXIubmFtZTsKICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShmaWx0ZXIpKSB7CiAgICAgIGNvbnN0IGZpbHRlclplcm8gPSB4cmVmLmZldGNoSWZSZWYoZmlsdGVyWzBdKTsKICAgICAgaWYgKGZpbHRlclplcm8gaW5zdGFuY2VvZiBOYW1lKSB7CiAgICAgICAgZmlsdGVyTmFtZSA9IGZpbHRlclplcm8ubmFtZTsKICAgICAgfQogICAgfQogICAgc3dpdGNoIChmaWx0ZXJOYW1lKSB7CiAgICAgIGNhc2UgIkpQWERlY29kZSI6CiAgICAgICAgKHsKICAgICAgICAgIHdpZHRoOiBpbWFnZS53aWR0aCwKICAgICAgICAgIGhlaWdodDogaW1hZ2UuaGVpZ2h0LAogICAgICAgICAgY29tcG9uZW50c0NvdW50OiBpbWFnZS5udW1Db21wcywKICAgICAgICAgIGJpdHNQZXJDb21wb25lbnQ6IGltYWdlLmJpdHNQZXJDb21wb25lbnQKICAgICAgICB9ID0gSnB4SW1hZ2UucGFyc2VJbWFnZVByb3BlcnRpZXMoaW1hZ2Uuc3RyZWFtKSk7CiAgICAgICAgaW1hZ2Uuc3RyZWFtLnJlc2V0KCk7CiAgICAgICAgY29uc3QgcmVkdWNlUG93ZXIgPSBJbWFnZVJlc2l6ZXIuZ2V0UmVkdWNlUG93ZXJGb3JKUFgoaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCwgaW1hZ2UubnVtQ29tcHMpOwogICAgICAgIHRoaXMuanB4RGVjb2Rlck9wdGlvbnMgPSB7CiAgICAgICAgICBudW1Db21wb25lbnRzOiAwLAogICAgICAgICAgaXNJbmRleGVkQ29sb3JtYXA6IGZhbHNlLAogICAgICAgICAgc21hc2tJbkRhdGE6IGRpY3QuaGFzKCJTTWFza0luRGF0YSIpLAogICAgICAgICAgcmVkdWNlUG93ZXIKICAgICAgICB9OwogICAgICAgIGlmIChyZWR1Y2VQb3dlcikgewogICAgICAgICAgY29uc3QgZmFjdG9yID0gMiAqKiByZWR1Y2VQb3dlcjsKICAgICAgICAgIGltYWdlLndpZHRoID0gTWF0aC5jZWlsKGltYWdlLndpZHRoIC8gZmFjdG9yKTsKICAgICAgICAgIGltYWdlLmhlaWdodCA9IE1hdGguY2VpbChpbWFnZS5oZWlnaHQgLyBmYWN0b3IpOwogICAgICAgIH0KICAgICAgICBicmVhazsKICAgICAgY2FzZSAiSkJJRzJEZWNvZGUiOgogICAgICAgIGltYWdlLmJpdHNQZXJDb21wb25lbnQgPSAxOwogICAgICAgIGltYWdlLm51bUNvbXBzID0gMTsKICAgICAgICBicmVhazsKICAgIH0KICAgIGxldCB3aWR0aCA9IGRpY3QuZ2V0KCJXIiwgIldpZHRoIik7CiAgICBsZXQgaGVpZ2h0ID0gZGljdC5nZXQoIkgiLCAiSGVpZ2h0Iik7CiAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcihpbWFnZS53aWR0aCkgJiYgaW1hZ2Uud2lkdGggPiAwICYmIE51bWJlci5pc0ludGVnZXIoaW1hZ2UuaGVpZ2h0KSAmJiBpbWFnZS5oZWlnaHQgPiAwICYmIChpbWFnZS53aWR0aCAhPT0gd2lkdGggfHwgaW1hZ2UuaGVpZ2h0ICE9PSBoZWlnaHQpKSB7CiAgICAgIHdhcm4oIlBERkltYWdlIC0gdXNpbmcgdGhlIFdpZHRoL0hlaWdodCBvZiB0aGUgaW1hZ2UgZGF0YSwgIiArICJyYXRoZXIgdGhhbiB0aGUgaW1hZ2UgZGljdGlvbmFyeS4iKTsKICAgICAgd2lkdGggPSBpbWFnZS53aWR0aDsKICAgICAgaGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0OwogICAgfSBlbHNlIHsKICAgICAgY29uc3QgdmFsaWRXaWR0aCA9IHR5cGVvZiB3aWR0aCA9PT0gIm51bWJlciIgJiYgd2lkdGggPiAwLAogICAgICAgIHZhbGlkSGVpZ2h0ID0gdHlwZW9mIGhlaWdodCA9PT0gIm51bWJlciIgJiYgaGVpZ2h0ID4gMDsKICAgICAgaWYgKCF2YWxpZFdpZHRoIHx8ICF2YWxpZEhlaWdodCkgewogICAgICAgIGlmICghaW1hZ2UuZmFsbGJhY2tEaW1zKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoYEludmFsaWQgaW1hZ2Ugd2lkdGg6ICR7d2lkdGh9IG9yIGhlaWdodDogJHtoZWlnaHR9YCk7CiAgICAgICAgfQogICAgICAgIHdhcm4oIlBERkltYWdlIC0gdXNpbmcgdGhlIFdpZHRoL0hlaWdodCBvZiB0aGUgcGFyZW50IGltYWdlLCBmb3IgU01hc2svTWFzayBkYXRhLiIpOwogICAgICAgIGlmICghdmFsaWRXaWR0aCkgewogICAgICAgICAgd2lkdGggPSBpbWFnZS5mYWxsYmFja0RpbXMud2lkdGg7CiAgICAgICAgfQogICAgICAgIGlmICghdmFsaWRIZWlnaHQpIHsKICAgICAgICAgIGhlaWdodCA9IGltYWdlLmZhbGxiYWNrRGltcy5oZWlnaHQ7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICB0aGlzLndpZHRoID0gd2lkdGg7CiAgICB0aGlzLmhlaWdodCA9IGhlaWdodDsKICAgIHRoaXMuaW50ZXJwb2xhdGUgPSBkaWN0LmdldCgiSSIsICJJbnRlcnBvbGF0ZSIpOwogICAgdGhpcy5pbWFnZU1hc2sgPSBkaWN0LmdldCgiSU0iLCAiSW1hZ2VNYXNrIikgfHwgZmFsc2U7CiAgICB0aGlzLm1hdHRlID0gZGljdC5nZXQoIk1hdHRlIikgfHwgZmFsc2U7CiAgICBsZXQgYml0c1BlckNvbXBvbmVudCA9IGltYWdlLmJpdHNQZXJDb21wb25lbnQ7CiAgICBpZiAoIWJpdHNQZXJDb21wb25lbnQpIHsKICAgICAgYml0c1BlckNvbXBvbmVudCA9IGRpY3QuZ2V0KCJCUEMiLCAiQml0c1BlckNvbXBvbmVudCIpOwogICAgICBpZiAoIWJpdHNQZXJDb21wb25lbnQpIHsKICAgICAgICBpZiAodGhpcy5pbWFnZU1hc2spIHsKICAgICAgICAgIGJpdHNQZXJDb21wb25lbnQgPSAxOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoYEJpdHMgcGVyIGNvbXBvbmVudCBtaXNzaW5nIGluIGltYWdlOiAke3RoaXMuaW1hZ2VNYXNrfWApOwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgdGhpcy5icGMgPSBiaXRzUGVyQ29tcG9uZW50OwogICAgaWYgKCF0aGlzLmltYWdlTWFzaykgewogICAgICBsZXQgY29sb3JTcGFjZSA9IGRpY3QuZ2V0UmF3KCJDUyIpIHx8IGRpY3QuZ2V0UmF3KCJDb2xvclNwYWNlIik7CiAgICAgIGNvbnN0IGhhc0NvbG9yU3BhY2UgPSAhIWNvbG9yU3BhY2U7CiAgICAgIGlmICghaGFzQ29sb3JTcGFjZSkgewogICAgICAgIGlmICh0aGlzLmpweERlY29kZXJPcHRpb25zKSB7CiAgICAgICAgICBjb2xvclNwYWNlID0gTmFtZS5nZXQoIkRldmljZVJHQkEiKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgc3dpdGNoIChpbWFnZS5udW1Db21wcykgewogICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgY29sb3JTcGFjZSA9IE5hbWUuZ2V0KCJEZXZpY2VHcmF5Iik7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICBjb2xvclNwYWNlID0gTmFtZS5nZXQoIkRldmljZVJHQiIpOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgY29sb3JTcGFjZSA9IE5hbWUuZ2V0KCJEZXZpY2VDTVlLIik7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbWFnZXMgd2l0aCAke2ltYWdlLm51bUNvbXBzfSBjb2xvciBjb21wb25lbnRzIG5vdCBzdXBwb3J0ZWQuYCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKHRoaXMuanB4RGVjb2Rlck9wdGlvbnM/LnNtYXNrSW5EYXRhKSB7CiAgICAgICAgY29sb3JTcGFjZSA9IE5hbWUuZ2V0KCJEZXZpY2VSR0JBIik7CiAgICAgIH0KICAgICAgdGhpcy5jb2xvclNwYWNlID0gQ29sb3JTcGFjZVV0aWxzLnBhcnNlKHsKICAgICAgICBjczogY29sb3JTcGFjZSwKICAgICAgICB4cmVmLAogICAgICAgIHJlc291cmNlczogaXNJbmxpbmUgPyByZXMgOiBudWxsLAogICAgICAgIHBkZkZ1bmN0aW9uRmFjdG9yeSwKICAgICAgICBnbG9iYWxDb2xvclNwYWNlQ2FjaGUsCiAgICAgICAgbG9jYWxDb2xvclNwYWNlQ2FjaGUKICAgICAgfSk7CiAgICAgIHRoaXMubnVtQ29tcHMgPSB0aGlzLmNvbG9yU3BhY2UubnVtQ29tcHM7CiAgICAgIGlmICh0aGlzLmpweERlY29kZXJPcHRpb25zKSB7CiAgICAgICAgdGhpcy5qcHhEZWNvZGVyT3B0aW9ucy5udW1Db21wb25lbnRzID0gaGFzQ29sb3JTcGFjZSA/IHRoaXMubnVtQ29tcHMgOiAwOwogICAgICAgIHRoaXMuanB4RGVjb2Rlck9wdGlvbnMuaXNJbmRleGVkQ29sb3JtYXAgPSB0aGlzLmNvbG9yU3BhY2UubmFtZSA9PT0gIkluZGV4ZWQiOwogICAgICB9CiAgICB9CiAgICB0aGlzLmRlY29kZSA9IGRpY3QuZ2V0QXJyYXkoIkQiLCAiRGVjb2RlIik7CiAgICB0aGlzLm5lZWRzRGVjb2RlID0gZmFsc2U7CiAgICBpZiAodGhpcy5kZWNvZGUgJiYgKHRoaXMuY29sb3JTcGFjZSAmJiAhdGhpcy5jb2xvclNwYWNlLmlzRGVmYXVsdERlY29kZSh0aGlzLmRlY29kZSwgYml0c1BlckNvbXBvbmVudCkgfHwgaXNNYXNrICYmICFDb2xvclNwYWNlLmlzRGVmYXVsdERlY29kZSh0aGlzLmRlY29kZSwgMSkpKSB7CiAgICAgIHRoaXMubmVlZHNEZWNvZGUgPSB0cnVlOwogICAgICBjb25zdCBtYXggPSAoMSA8PCBiaXRzUGVyQ29tcG9uZW50KSAtIDE7CiAgICAgIHRoaXMuZGVjb2RlQ29lZmZpY2llbnRzID0gW107CiAgICAgIHRoaXMuZGVjb2RlQWRkZW5kcyA9IFtdOwogICAgICBjb25zdCBpc0luZGV4ZWQgPSB0aGlzLmNvbG9yU3BhY2U/Lm5hbWUgPT09ICJJbmRleGVkIjsKICAgICAgZm9yIChsZXQgaSA9IDAsIGogPSAwOyBpIDwgdGhpcy5kZWNvZGUubGVuZ3RoOyBpICs9IDIsICsraikgewogICAgICAgIGNvbnN0IGRtaW4gPSB0aGlzLmRlY29kZVtpXTsKICAgICAgICBjb25zdCBkbWF4ID0gdGhpcy5kZWNvZGVbaSArIDFdOwogICAgICAgIHRoaXMuZGVjb2RlQ29lZmZpY2llbnRzW2pdID0gaXNJbmRleGVkID8gKGRtYXggLSBkbWluKSAvIG1heCA6IGRtYXggLSBkbWluOwogICAgICAgIHRoaXMuZGVjb2RlQWRkZW5kc1tqXSA9IGlzSW5kZXhlZCA/IGRtaW4gOiBtYXggKiBkbWluOwogICAgICB9CiAgICB9CiAgICBpZiAoc21hc2spIHsKICAgICAgc21hc2suZmFsbGJhY2tEaW1zID8/PSB7CiAgICAgICAgd2lkdGgsCiAgICAgICAgaGVpZ2h0CiAgICAgIH07CiAgICAgIHRoaXMuc21hc2sgPSBuZXcgUERGSW1hZ2UoewogICAgICAgIHhyZWYsCiAgICAgICAgcmVzLAogICAgICAgIGltYWdlOiBzbWFzaywKICAgICAgICBpc0lubGluZSwKICAgICAgICBwZGZGdW5jdGlvbkZhY3RvcnksCiAgICAgICAgZ2xvYmFsQ29sb3JTcGFjZUNhY2hlLAogICAgICAgIGxvY2FsQ29sb3JTcGFjZUNhY2hlCiAgICAgIH0pOwogICAgfSBlbHNlIGlmIChtYXNrKSB7CiAgICAgIGlmIChtYXNrIGluc3RhbmNlb2YgQmFzZVN0cmVhbSkgewogICAgICAgIGNvbnN0IG1hc2tEaWN0ID0gbWFzay5kaWN0LAogICAgICAgICAgaW1hZ2VNYXNrID0gbWFza0RpY3QuZ2V0KCJJTSIsICJJbWFnZU1hc2siKTsKICAgICAgICBpZiAoIWltYWdlTWFzaykgewogICAgICAgICAgd2FybigiSWdub3JpbmcgL01hc2sgaW4gaW1hZ2Ugd2l0aG91dCAvSW1hZ2VNYXNrLiIpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBtYXNrLmZhbGxiYWNrRGltcyA/Pz0gewogICAgICAgICAgICB3aWR0aCwKICAgICAgICAgICAgaGVpZ2h0CiAgICAgICAgICB9OwogICAgICAgICAgdGhpcy5tYXNrID0gbmV3IFBERkltYWdlKHsKICAgICAgICAgICAgeHJlZiwKICAgICAgICAgICAgcmVzLAogICAgICAgICAgICBpbWFnZTogbWFzaywKICAgICAgICAgICAgaXNJbmxpbmUsCiAgICAgICAgICAgIGlzTWFzazogdHJ1ZSwKICAgICAgICAgICAgcGRmRnVuY3Rpb25GYWN0b3J5LAogICAgICAgICAgICBnbG9iYWxDb2xvclNwYWNlQ2FjaGUsCiAgICAgICAgICAgIGxvY2FsQ29sb3JTcGFjZUNhY2hlCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5tYXNrID0gbWFzazsKICAgICAgfQogICAgfQogIH0KICBzdGF0aWMgYXN5bmMgYnVpbGRJbWFnZSh7CiAgICB4cmVmLAogICAgcmVzLAogICAgaW1hZ2UsCiAgICBpc0lubGluZSA9IGZhbHNlLAogICAgcGRmRnVuY3Rpb25GYWN0b3J5LAogICAgZ2xvYmFsQ29sb3JTcGFjZUNhY2hlLAogICAgbG9jYWxDb2xvclNwYWNlQ2FjaGUKICB9KSB7CiAgICBjb25zdCBpbWFnZURhdGEgPSBpbWFnZTsKICAgIGxldCBzbWFza0RhdGEgPSBudWxsOwogICAgbGV0IG1hc2tEYXRhID0gbnVsbDsKICAgIGNvbnN0IHNtYXNrID0gaW1hZ2UuZGljdC5nZXQoIlNNYXNrIik7CiAgICBjb25zdCBtYXNrID0gaW1hZ2UuZGljdC5nZXQoIk1hc2siKTsKICAgIGlmIChzbWFzaykgewogICAgICBpZiAoc21hc2sgaW5zdGFuY2VvZiBCYXNlU3RyZWFtKSB7CiAgICAgICAgc21hc2tEYXRhID0gc21hc2s7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgd2FybigiVW5zdXBwb3J0ZWQgL1NNYXNrIGZvcm1hdC4iKTsKICAgICAgfQogICAgfSBlbHNlIGlmIChtYXNrKSB7CiAgICAgIGlmIChtYXNrIGluc3RhbmNlb2YgQmFzZVN0cmVhbSB8fCBBcnJheS5pc0FycmF5KG1hc2spKSB7CiAgICAgICAgbWFza0RhdGEgPSBtYXNrOwogICAgICB9IGVsc2UgewogICAgICAgIHdhcm4oIlVuc3VwcG9ydGVkIC9NYXNrIGZvcm1hdC4iKTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIG5ldyBQREZJbWFnZSh7CiAgICAgIHhyZWYsCiAgICAgIHJlcywKICAgICAgaW1hZ2U6IGltYWdlRGF0YSwKICAgICAgaXNJbmxpbmUsCiAgICAgIHNtYXNrOiBzbWFza0RhdGEsCiAgICAgIG1hc2s6IG1hc2tEYXRhLAogICAgICBwZGZGdW5jdGlvbkZhY3RvcnksCiAgICAgIGdsb2JhbENvbG9yU3BhY2VDYWNoZSwKICAgICAgbG9jYWxDb2xvclNwYWNlQ2FjaGUKICAgIH0pOwogIH0KICBzdGF0aWMgYXN5bmMgY3JlYXRlTWFzayh7CiAgICBpbWFnZSwKICAgIGlzT2Zmc2NyZWVuQ2FudmFzU3VwcG9ydGVkID0gZmFsc2UKICB9KSB7CiAgICBjb25zdCB7CiAgICAgIGRpY3QKICAgIH0gPSBpbWFnZTsKICAgIGNvbnN0IHdpZHRoID0gZGljdC5nZXQoIlciLCAiV2lkdGgiKTsKICAgIGNvbnN0IGhlaWdodCA9IGRpY3QuZ2V0KCJIIiwgIkhlaWdodCIpOwogICAgY29uc3QgaW50ZXJwb2xhdGUgPSBkaWN0LmdldCgiSSIsICJJbnRlcnBvbGF0ZSIpOwogICAgY29uc3QgZGVjb2RlID0gZGljdC5nZXRBcnJheSgiRCIsICJEZWNvZGUiKTsKICAgIGNvbnN0IGludmVyc2VEZWNvZGUgPSBkZWNvZGU/LlswXSA+IDA7CiAgICBjb25zdCBjb21wdXRlZExlbmd0aCA9ICh3aWR0aCArIDcgPj4gMykgKiBoZWlnaHQ7CiAgICBjb25zdCBpbWdBcnJheSA9IGltYWdlLmdldEJ5dGVzKGNvbXB1dGVkTGVuZ3RoKTsKICAgIGNvbnN0IGlzU2luZ2xlT3BhcXVlUGl4ZWwgPSB3aWR0aCA9PT0gMSAmJiBoZWlnaHQgPT09IDEgJiYgaW52ZXJzZURlY29kZSA9PT0gKGltZ0FycmF5Lmxlbmd0aCA9PT0gMCB8fCAhIShpbWdBcnJheVswXSAmIDEyOCkpOwogICAgaWYgKGlzU2luZ2xlT3BhcXVlUGl4ZWwpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICBpc1NpbmdsZU9wYXF1ZVBpeGVsCiAgICAgIH07CiAgICB9CiAgICBpZiAoaXNPZmZzY3JlZW5DYW52YXNTdXBwb3J0ZWQpIHsKICAgICAgaWYgKEltYWdlUmVzaXplci5uZWVkc1RvQmVSZXNpemVkKHdpZHRoLCBoZWlnaHQpKSB7CiAgICAgICAgY29uc3QgZGF0YSA9IG5ldyBVaW50OENsYW1wZWRBcnJheSh3aWR0aCAqIGhlaWdodCAqIDQpOwogICAgICAgIGNvbnZlcnRCbGFja0FuZFdoaXRlVG9SR0JBKHsKICAgICAgICAgIHNyYzogaW1nQXJyYXksCiAgICAgICAgICBkZXN0OiBkYXRhLAogICAgICAgICAgd2lkdGgsCiAgICAgICAgICBoZWlnaHQsCiAgICAgICAgICBub25CbGFja0NvbG9yOiAwLAogICAgICAgICAgaW52ZXJzZURlY29kZQogICAgICAgIH0pOwogICAgICAgIHJldHVybiBJbWFnZVJlc2l6ZXIuY3JlYXRlSW1hZ2UoewogICAgICAgICAga2luZDogSW1hZ2VLaW5kLlJHQkFfMzJCUFAsCiAgICAgICAgICBkYXRhLAogICAgICAgICAgd2lkdGgsCiAgICAgICAgICBoZWlnaHQsCiAgICAgICAgICBpbnRlcnBvbGF0ZQogICAgICAgIH0pOwogICAgICB9CiAgICAgIGNvbnN0IGNhbnZhcyA9IG5ldyBPZmZzY3JlZW5DYW52YXMod2lkdGgsIGhlaWdodCk7CiAgICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCIyZCIpOwogICAgICBjb25zdCBpbWdEYXRhID0gY3R4LmNyZWF0ZUltYWdlRGF0YSh3aWR0aCwgaGVpZ2h0KTsKICAgICAgY29udmVydEJsYWNrQW5kV2hpdGVUb1JHQkEoewogICAgICAgIHNyYzogaW1nQXJyYXksCiAgICAgICAgZGVzdDogaW1nRGF0YS5kYXRhLAogICAgICAgIHdpZHRoLAogICAgICAgIGhlaWdodCwKICAgICAgICBub25CbGFja0NvbG9yOiAwLAogICAgICAgIGludmVyc2VEZWNvZGUKICAgICAgfSk7CiAgICAgIGN0eC5wdXRJbWFnZURhdGEoaW1nRGF0YSwgMCwgMCk7CiAgICAgIGNvbnN0IGJpdG1hcCA9IGNhbnZhcy50cmFuc2ZlclRvSW1hZ2VCaXRtYXAoKTsKICAgICAgcmV0dXJuIHsKICAgICAgICBkYXRhOiBudWxsLAogICAgICAgIHdpZHRoLAogICAgICAgIGhlaWdodCwKICAgICAgICBpbnRlcnBvbGF0ZSwKICAgICAgICBiaXRtYXAKICAgICAgfTsKICAgIH0KICAgIGNvbnN0IGFjdHVhbExlbmd0aCA9IGltZ0FycmF5LmJ5dGVMZW5ndGg7CiAgICBjb25zdCBoYXZlRnVsbERhdGEgPSBjb21wdXRlZExlbmd0aCA9PT0gYWN0dWFsTGVuZ3RoOwogICAgbGV0IGRhdGE7CiAgICBpZiAoaW1hZ2UgaW5zdGFuY2VvZiBEZWNvZGVTdHJlYW0gJiYgKCFpbnZlcnNlRGVjb2RlIHx8IGhhdmVGdWxsRGF0YSkpIHsKICAgICAgZGF0YSA9IGltZ0FycmF5OwogICAgfSBlbHNlIGlmICghaW52ZXJzZURlY29kZSkgewogICAgICBkYXRhID0gbmV3IFVpbnQ4QXJyYXkoaW1nQXJyYXkpOwogICAgfSBlbHNlIHsKICAgICAgZGF0YSA9IG5ldyBVaW50OEFycmF5KGNvbXB1dGVkTGVuZ3RoKTsKICAgICAgZGF0YS5zZXQoaW1nQXJyYXkpOwogICAgICBkYXRhLmZpbGwoMHhmZiwgYWN0dWFsTGVuZ3RoKTsKICAgIH0KICAgIGlmIChpbnZlcnNlRGVjb2RlKSB7CiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWN0dWFsTGVuZ3RoOyBpKyspIHsKICAgICAgICBkYXRhW2ldIF49IDB4ZmY7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiB7CiAgICAgIGRhdGEsCiAgICAgIHdpZHRoLAogICAgICBoZWlnaHQsCiAgICAgIGludGVycG9sYXRlCiAgICB9OwogIH0KICBnZXQgZHJhd1dpZHRoKCkgewogICAgcmV0dXJuIE1hdGgubWF4KHRoaXMud2lkdGgsIHRoaXMuc21hc2s/LndpZHRoIHx8IDAsIHRoaXMubWFzaz8ud2lkdGggfHwgMCk7CiAgfQogIGdldCBkcmF3SGVpZ2h0KCkgewogICAgcmV0dXJuIE1hdGgubWF4KHRoaXMuaGVpZ2h0LCB0aGlzLnNtYXNrPy5oZWlnaHQgfHwgMCwgdGhpcy5tYXNrPy5oZWlnaHQgfHwgMCk7CiAgfQogIGRlY29kZUJ1ZmZlcihidWZmZXIpIHsKICAgIGNvbnN0IGJwYyA9IHRoaXMuYnBjOwogICAgY29uc3QgbnVtQ29tcHMgPSB0aGlzLm51bUNvbXBzOwogICAgY29uc3QgZGVjb2RlQWRkZW5kcyA9IHRoaXMuZGVjb2RlQWRkZW5kczsKICAgIGNvbnN0IGRlY29kZUNvZWZmaWNpZW50cyA9IHRoaXMuZGVjb2RlQ29lZmZpY2llbnRzOwogICAgY29uc3QgbWF4ID0gKDEgPDwgYnBjKSAtIDE7CiAgICBsZXQgaSwgaWk7CiAgICBpZiAoYnBjID09PSAxKSB7CiAgICAgIGZvciAoaSA9IDAsIGlpID0gYnVmZmVyLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgICBidWZmZXJbaV0gPSArIWJ1ZmZlcltpXTsKICAgICAgfQogICAgICByZXR1cm47CiAgICB9CiAgICBsZXQgaW5kZXggPSAwOwogICAgZm9yIChpID0gMCwgaWkgPSB0aGlzLndpZHRoICogdGhpcy5oZWlnaHQ7IGkgPCBpaTsgaSsrKSB7CiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbnVtQ29tcHM7IGorKykgewogICAgICAgIGJ1ZmZlcltpbmRleF0gPSBNYXRoQ2xhbXAoZGVjb2RlQWRkZW5kc1tqXSArIGJ1ZmZlcltpbmRleF0gKiBkZWNvZGVDb2VmZmljaWVudHNbal0sIDAsIG1heCk7CiAgICAgICAgaW5kZXgrKzsKICAgICAgfQogICAgfQogIH0KICBnZXRDb21wb25lbnRzKGJ1ZmZlcikgewogICAgY29uc3QgYnBjID0gdGhpcy5icGM7CiAgICBpZiAoYnBjID09PSA4KSB7CiAgICAgIHJldHVybiBidWZmZXI7CiAgICB9CiAgICBjb25zdCB3aWR0aCA9IHRoaXMud2lkdGg7CiAgICBjb25zdCBoZWlnaHQgPSB0aGlzLmhlaWdodDsKICAgIGNvbnN0IG51bUNvbXBzID0gdGhpcy5udW1Db21wczsKICAgIGNvbnN0IGxlbmd0aCA9IHdpZHRoICogaGVpZ2h0ICogbnVtQ29tcHM7CiAgICBsZXQgYnVmZmVyUG9zID0gMDsKICAgIGxldCBvdXRwdXQ7CiAgICBpZiAoYnBjIDw9IDgpIHsKICAgICAgb3V0cHV0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTsKICAgIH0gZWxzZSBpZiAoYnBjIDw9IDE2KSB7CiAgICAgIG91dHB1dCA9IG5ldyBVaW50MTZBcnJheShsZW5ndGgpOwogICAgfSBlbHNlIHsKICAgICAgb3V0cHV0ID0gbmV3IFVpbnQzMkFycmF5KGxlbmd0aCk7CiAgICB9CiAgICBjb25zdCByb3dDb21wcyA9IHdpZHRoICogbnVtQ29tcHM7CiAgICBjb25zdCBtYXggPSAoMSA8PCBicGMpIC0gMTsKICAgIGxldCBpID0gMCwKICAgICAgaWksCiAgICAgIGJ1ZjsKICAgIGlmIChicGMgPT09IDEpIHsKICAgICAgbGV0IG1hc2ssIGxvb3AxRW5kLCBsb29wMkVuZDsKICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBoZWlnaHQ7IGorKykgewogICAgICAgIGxvb3AxRW5kID0gaSArIChyb3dDb21wcyAmIH43KTsKICAgICAgICBsb29wMkVuZCA9IGkgKyByb3dDb21wczsKICAgICAgICB3aGlsZSAoaSA8IGxvb3AxRW5kKSB7CiAgICAgICAgICBidWYgPSBidWZmZXJbYnVmZmVyUG9zKytdOwogICAgICAgICAgb3V0cHV0W2ldID0gYnVmID4+IDcgJiAxOwogICAgICAgICAgb3V0cHV0W2kgKyAxXSA9IGJ1ZiA+PiA2ICYgMTsKICAgICAgICAgIG91dHB1dFtpICsgMl0gPSBidWYgPj4gNSAmIDE7CiAgICAgICAgICBvdXRwdXRbaSArIDNdID0gYnVmID4+IDQgJiAxOwogICAgICAgICAgb3V0cHV0W2kgKyA0XSA9IGJ1ZiA+PiAzICYgMTsKICAgICAgICAgIG91dHB1dFtpICsgNV0gPSBidWYgPj4gMiAmIDE7CiAgICAgICAgICBvdXRwdXRbaSArIDZdID0gYnVmID4+IDEgJiAxOwogICAgICAgICAgb3V0cHV0W2kgKyA3XSA9IGJ1ZiAmIDE7CiAgICAgICAgICBpICs9IDg7CiAgICAgICAgfQogICAgICAgIGlmIChpIDwgbG9vcDJFbmQpIHsKICAgICAgICAgIGJ1ZiA9IGJ1ZmZlcltidWZmZXJQb3MrK107CiAgICAgICAgICBtYXNrID0gMTI4OwogICAgICAgICAgd2hpbGUgKGkgPCBsb29wMkVuZCkgewogICAgICAgICAgICBvdXRwdXRbaSsrXSA9ICshIShidWYgJiBtYXNrKTsKICAgICAgICAgICAgbWFzayA+Pj0gMTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGxldCBiaXRzID0gMDsKICAgICAgYnVmID0gMDsKICAgICAgZm9yIChpID0gMCwgaWkgPSBsZW5ndGg7IGkgPCBpaTsgKytpKSB7CiAgICAgICAgaWYgKGkgJSByb3dDb21wcyA9PT0gMCkgewogICAgICAgICAgYnVmID0gMDsKICAgICAgICAgIGJpdHMgPSAwOwogICAgICAgIH0KICAgICAgICB3aGlsZSAoYml0cyA8IGJwYykgewogICAgICAgICAgYnVmID0gYnVmIDw8IDggfCBidWZmZXJbYnVmZmVyUG9zKytdOwogICAgICAgICAgYml0cyArPSA4OwogICAgICAgIH0KICAgICAgICBjb25zdCByZW1haW5pbmdCaXRzID0gYml0cyAtIGJwYzsKICAgICAgICBsZXQgdmFsdWUgPSBidWYgPj4gcmVtYWluaW5nQml0czsKICAgICAgICBpZiAodmFsdWUgPCAwKSB7CiAgICAgICAgICB2YWx1ZSA9IDA7CiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA+IG1heCkgewogICAgICAgICAgdmFsdWUgPSBtYXg7CiAgICAgICAgfQogICAgICAgIG91dHB1dFtpXSA9IHZhbHVlOwogICAgICAgIGJ1ZiAmPSAoMSA8PCByZW1haW5pbmdCaXRzKSAtIDE7CiAgICAgICAgYml0cyA9IHJlbWFpbmluZ0JpdHM7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBvdXRwdXQ7CiAgfQogIGFzeW5jIGZpbGxPcGFjaXR5KHJnYmFCdWYsIHdpZHRoLCBoZWlnaHQsIGFjdHVhbEhlaWdodCwgaW1hZ2UpIHsKICAgIGNvbnN0IHNtYXNrID0gdGhpcy5zbWFzazsKICAgIGNvbnN0IG1hc2sgPSB0aGlzLm1hc2s7CiAgICBsZXQgYWxwaGFCdWYsIHN3LCBzaCwgaSwgaWksIGo7CiAgICBpZiAoc21hc2spIHsKICAgICAgc3cgPSBzbWFzay53aWR0aDsKICAgICAgc2ggPSBzbWFzay5oZWlnaHQ7CiAgICAgIGFscGhhQnVmID0gbmV3IFVpbnQ4Q2xhbXBlZEFycmF5KHN3ICogc2gpOwogICAgICBhd2FpdCBzbWFzay5maWxsR3JheUJ1ZmZlcihhbHBoYUJ1Zik7CiAgICAgIGlmIChzdyAhPT0gd2lkdGggfHwgc2ggIT09IGhlaWdodCkgewogICAgICAgIGFscGhhQnVmID0gcmVzaXplSW1hZ2VNYXNrKGFscGhhQnVmLCBzbWFzay5icGMsIHN3LCBzaCwgd2lkdGgsIGhlaWdodCk7CiAgICAgIH0KICAgIH0gZWxzZSBpZiAobWFzaykgewogICAgICBpZiAobWFzayBpbnN0YW5jZW9mIFBERkltYWdlKSB7CiAgICAgICAgc3cgPSBtYXNrLndpZHRoOwogICAgICAgIHNoID0gbWFzay5oZWlnaHQ7CiAgICAgICAgYWxwaGFCdWYgPSBuZXcgVWludDhDbGFtcGVkQXJyYXkoc3cgKiBzaCk7CiAgICAgICAgbWFzay5udW1Db21wcyA9IDE7CiAgICAgICAgYXdhaXQgbWFzay5maWxsR3JheUJ1ZmZlcihhbHBoYUJ1Zik7CiAgICAgICAgZm9yIChpID0gMCwgaWkgPSBzdyAqIHNoOyBpIDwgaWk7ICsraSkgewogICAgICAgICAgYWxwaGFCdWZbaV0gPSAyNTUgLSBhbHBoYUJ1ZltpXTsKICAgICAgICB9CiAgICAgICAgaWYgKHN3ICE9PSB3aWR0aCB8fCBzaCAhPT0gaGVpZ2h0KSB7CiAgICAgICAgICBhbHBoYUJ1ZiA9IHJlc2l6ZUltYWdlTWFzayhhbHBoYUJ1ZiwgbWFzay5icGMsIHN3LCBzaCwgd2lkdGgsIGhlaWdodCk7CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkobWFzaykpIHsKICAgICAgICBhbHBoYUJ1ZiA9IG5ldyBVaW50OENsYW1wZWRBcnJheSh3aWR0aCAqIGhlaWdodCk7CiAgICAgICAgY29uc3QgbnVtQ29tcHMgPSB0aGlzLm51bUNvbXBzOwogICAgICAgIGZvciAoaSA9IDAsIGlpID0gd2lkdGggKiBoZWlnaHQ7IGkgPCBpaTsgKytpKSB7CiAgICAgICAgICBsZXQgb3BhY2l0eSA9IDA7CiAgICAgICAgICBjb25zdCBpbWFnZU9mZnNldCA9IGkgKiBudW1Db21wczsKICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBudW1Db21wczsgKytqKSB7CiAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gaW1hZ2VbaW1hZ2VPZmZzZXQgKyBqXTsKICAgICAgICAgICAgY29uc3QgbWFza09mZnNldCA9IGogKiAyOwogICAgICAgICAgICBpZiAoY29sb3IgPCBtYXNrW21hc2tPZmZzZXRdIHx8IGNvbG9yID4gbWFza1ttYXNrT2Zmc2V0ICsgMV0pIHsKICAgICAgICAgICAgICBvcGFjaXR5ID0gMjU1OwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBhbHBoYUJ1ZltpXSA9IG9wYWNpdHk7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigiVW5rbm93biBtYXNrIGZvcm1hdC4iKTsKICAgICAgfQogICAgfQogICAgaWYgKGFscGhhQnVmKSB7CiAgICAgIGZvciAoaSA9IDAsIGogPSAzLCBpaSA9IHdpZHRoICogYWN0dWFsSGVpZ2h0OyBpIDwgaWk7ICsraSwgaiArPSA0KSB7CiAgICAgICAgcmdiYUJ1ZltqXSA9IGFscGhhQnVmW2ldOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBmb3IgKGkgPSAwLCBqID0gMywgaWkgPSB3aWR0aCAqIGFjdHVhbEhlaWdodDsgaSA8IGlpOyArK2ksIGogKz0gNCkgewogICAgICAgIHJnYmFCdWZbal0gPSAyNTU7CiAgICAgIH0KICAgIH0KICB9CiAgdW5kb1ByZWJsZW5kKGJ1ZmZlciwgd2lkdGgsIGhlaWdodCkgewogICAgY29uc3QgbWF0dGUgPSB0aGlzLnNtYXNrPy5tYXR0ZTsKICAgIGlmICghbWF0dGUpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgY29uc3QgbWF0dGVSZ2IgPSB0aGlzLmNvbG9yU3BhY2UuZ2V0UmdiKG1hdHRlLCAwKTsKICAgIGNvbnN0IG1hdHRlUiA9IG1hdHRlUmdiWzBdOwogICAgY29uc3QgbWF0dGVHID0gbWF0dGVSZ2JbMV07CiAgICBjb25zdCBtYXR0ZUIgPSBtYXR0ZVJnYlsyXTsKICAgIGNvbnN0IGxlbmd0aCA9IHdpZHRoICogaGVpZ2h0ICogNDsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDQpIHsKICAgICAgY29uc3QgYWxwaGEgPSBidWZmZXJbaSArIDNdOwogICAgICBpZiAoYWxwaGEgPT09IDApIHsKICAgICAgICBidWZmZXJbaV0gPSAyNTU7CiAgICAgICAgYnVmZmVyW2kgKyAxXSA9IDI1NTsKICAgICAgICBidWZmZXJbaSArIDJdID0gMjU1OwogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGNvbnN0IGsgPSAyNTUgLyBhbHBoYTsKICAgICAgYnVmZmVyW2ldID0gKGJ1ZmZlcltpXSAtIG1hdHRlUikgKiBrICsgbWF0dGVSOwogICAgICBidWZmZXJbaSArIDFdID0gKGJ1ZmZlcltpICsgMV0gLSBtYXR0ZUcpICogayArIG1hdHRlRzsKICAgICAgYnVmZmVyW2kgKyAyXSA9IChidWZmZXJbaSArIDJdIC0gbWF0dGVCKSAqIGsgKyBtYXR0ZUI7CiAgICB9CiAgfQogIGFzeW5jIGNyZWF0ZUltYWdlRGF0YShmb3JjZVJHQkEgPSBmYWxzZSwgaXNPZmZzY3JlZW5DYW52YXNTdXBwb3J0ZWQgPSBmYWxzZSkgewogICAgY29uc3QgZHJhd1dpZHRoID0gdGhpcy5kcmF3V2lkdGg7CiAgICBjb25zdCBkcmF3SGVpZ2h0ID0gdGhpcy5kcmF3SGVpZ2h0OwogICAgY29uc3QgaW1nRGF0YSA9IHsKICAgICAgd2lkdGg6IGRyYXdXaWR0aCwKICAgICAgaGVpZ2h0OiBkcmF3SGVpZ2h0LAogICAgICBpbnRlcnBvbGF0ZTogdGhpcy5pbnRlcnBvbGF0ZSwKICAgICAga2luZDogMCwKICAgICAgZGF0YTogbnVsbAogICAgfTsKICAgIGNvbnN0IG51bUNvbXBzID0gdGhpcy5udW1Db21wczsKICAgIGNvbnN0IG9yaWdpbmFsV2lkdGggPSB0aGlzLndpZHRoOwogICAgY29uc3Qgb3JpZ2luYWxIZWlnaHQgPSB0aGlzLmhlaWdodDsKICAgIGNvbnN0IGJwYyA9IHRoaXMuYnBjOwogICAgY29uc3Qgcm93Qnl0ZXMgPSBvcmlnaW5hbFdpZHRoICogbnVtQ29tcHMgKiBicGMgKyA3ID4+IDM7CiAgICBjb25zdCBtdXN0QmVSZXNpemVkID0gaXNPZmZzY3JlZW5DYW52YXNTdXBwb3J0ZWQgJiYgSW1hZ2VSZXNpemVyLm5lZWRzVG9CZVJlc2l6ZWQoZHJhd1dpZHRoLCBkcmF3SGVpZ2h0KTsKICAgIGlmICghdGhpcy5zbWFzayAmJiAhdGhpcy5tYXNrICYmIHRoaXMuY29sb3JTcGFjZS5uYW1lID09PSAiRGV2aWNlUkdCQSIpIHsKICAgICAgaW1nRGF0YS5raW5kID0gSW1hZ2VLaW5kLlJHQkFfMzJCUFA7CiAgICAgIGNvbnN0IGltZ0FycmF5ID0gaW1nRGF0YS5kYXRhID0gYXdhaXQgdGhpcy5nZXRJbWFnZUJ5dGVzKG9yaWdpbmFsSGVpZ2h0ICogb3JpZ2luYWxXaWR0aCAqIDQsIHt9KTsKICAgICAgaWYgKGlzT2Zmc2NyZWVuQ2FudmFzU3VwcG9ydGVkKSB7CiAgICAgICAgaWYgKCFtdXN0QmVSZXNpemVkKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVCaXRtYXAoSW1hZ2VLaW5kLlJHQkFfMzJCUFAsIGRyYXdXaWR0aCwgZHJhd0hlaWdodCwgaW1nQXJyYXkpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gSW1hZ2VSZXNpemVyLmNyZWF0ZUltYWdlKGltZ0RhdGEsIGZhbHNlKTsKICAgICAgfQogICAgICByZXR1cm4gaW1nRGF0YTsKICAgIH0KICAgIGlmICghZm9yY2VSR0JBKSB7CiAgICAgIGxldCBraW5kOwogICAgICBpZiAodGhpcy5jb2xvclNwYWNlLm5hbWUgPT09ICJEZXZpY2VHcmF5IiAmJiBicGMgPT09IDEpIHsKICAgICAgICBraW5kID0gSW1hZ2VLaW5kLkdSQVlTQ0FMRV8xQlBQOwogICAgICB9IGVsc2UgaWYgKHRoaXMuY29sb3JTcGFjZS5uYW1lID09PSAiRGV2aWNlUkdCIiAmJiBicGMgPT09IDggJiYgIXRoaXMubmVlZHNEZWNvZGUpIHsKICAgICAgICBraW5kID0gSW1hZ2VLaW5kLlJHQl8yNEJQUDsKICAgICAgfQogICAgICBpZiAoa2luZCAmJiAhdGhpcy5zbWFzayAmJiAhdGhpcy5tYXNrICYmIGRyYXdXaWR0aCA9PT0gb3JpZ2luYWxXaWR0aCAmJiBkcmF3SGVpZ2h0ID09PSBvcmlnaW5hbEhlaWdodCkgewogICAgICAgIGNvbnN0IGltYWdlID0gYXdhaXQgdGhpcy4jZ2V0SW1hZ2Uob3JpZ2luYWxXaWR0aCwgb3JpZ2luYWxIZWlnaHQpOwogICAgICAgIGlmIChpbWFnZSkgewogICAgICAgICAgcmV0dXJuIGltYWdlOwogICAgICAgIH0KICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5nZXRJbWFnZUJ5dGVzKG9yaWdpbmFsSGVpZ2h0ICogcm93Qnl0ZXMsIHt9KTsKICAgICAgICBpZiAoaXNPZmZzY3JlZW5DYW52YXNTdXBwb3J0ZWQpIHsKICAgICAgICAgIGlmIChtdXN0QmVSZXNpemVkKSB7CiAgICAgICAgICAgIHJldHVybiBJbWFnZVJlc2l6ZXIuY3JlYXRlSW1hZ2UoewogICAgICAgICAgICAgIGRhdGEsCiAgICAgICAgICAgICAga2luZCwKICAgICAgICAgICAgICB3aWR0aDogZHJhd1dpZHRoLAogICAgICAgICAgICAgIGhlaWdodDogZHJhd0hlaWdodCwKICAgICAgICAgICAgICBpbnRlcnBvbGF0ZTogdGhpcy5pbnRlcnBvbGF0ZQogICAgICAgICAgICB9LCB0aGlzLm5lZWRzRGVjb2RlKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUJpdG1hcChraW5kLCBvcmlnaW5hbFdpZHRoLCBvcmlnaW5hbEhlaWdodCwgZGF0YSk7CiAgICAgICAgfQogICAgICAgIGltZ0RhdGEua2luZCA9IGtpbmQ7CiAgICAgICAgaW1nRGF0YS5kYXRhID0gZGF0YTsKICAgICAgICBpZiAodGhpcy5uZWVkc0RlY29kZSkgewogICAgICAgICAgYXNzZXJ0KGtpbmQgPT09IEltYWdlS2luZC5HUkFZU0NBTEVfMUJQUCwgIlBERkltYWdlLmNyZWF0ZUltYWdlRGF0YTogVGhlIGltYWdlIG11c3QgYmUgZ3JheXNjYWxlLiIpOwogICAgICAgICAgY29uc3QgYnVmZmVyID0gaW1nRGF0YS5kYXRhOwogICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gYnVmZmVyLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgICAgICAgYnVmZmVyW2ldIF49IDB4ZmY7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBpbWdEYXRhOwogICAgICB9CiAgICAgIGlmICh0aGlzLmltYWdlIGluc3RhbmNlb2YgSnBlZ1N0cmVhbSAmJiAhdGhpcy5zbWFzayAmJiAhdGhpcy5tYXNrICYmICF0aGlzLm5lZWRzRGVjb2RlKSB7CiAgICAgICAgbGV0IGltYWdlTGVuZ3RoID0gb3JpZ2luYWxIZWlnaHQgKiByb3dCeXRlczsKICAgICAgICBpZiAoaXNPZmZzY3JlZW5DYW52YXNTdXBwb3J0ZWQgJiYgIW11c3RCZVJlc2l6ZWQpIHsKICAgICAgICAgIGxldCBpc0hhbmRsZWQgPSBmYWxzZTsKICAgICAgICAgIHN3aXRjaCAodGhpcy5jb2xvclNwYWNlLm5hbWUpIHsKICAgICAgICAgICAgY2FzZSAiRGV2aWNlR3JheSI6CiAgICAgICAgICAgICAgaW1hZ2VMZW5ndGggKj0gNDsKICAgICAgICAgICAgICBpc0hhbmRsZWQgPSB0cnVlOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlICJEZXZpY2VSR0IiOgogICAgICAgICAgICAgIGltYWdlTGVuZ3RoID0gaW1hZ2VMZW5ndGggLyAzICogNDsKICAgICAgICAgICAgICBpc0hhbmRsZWQgPSB0cnVlOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlICJEZXZpY2VDTVlLIjoKICAgICAgICAgICAgICBpc0hhbmRsZWQgPSB0cnVlOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgICAgaWYgKGlzSGFuZGxlZCkgewogICAgICAgICAgICBjb25zdCBpbWFnZSA9IGF3YWl0IHRoaXMuI2dldEltYWdlKGRyYXdXaWR0aCwgZHJhd0hlaWdodCk7CiAgICAgICAgICAgIGlmIChpbWFnZSkgewogICAgICAgICAgICAgIHJldHVybiBpbWFnZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjb25zdCByZ2JhID0gYXdhaXQgdGhpcy5nZXRJbWFnZUJ5dGVzKGltYWdlTGVuZ3RoLCB7CiAgICAgICAgICAgICAgZHJhd1dpZHRoLAogICAgICAgICAgICAgIGRyYXdIZWlnaHQsCiAgICAgICAgICAgICAgZm9yY2VSR0JBOiB0cnVlCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVCaXRtYXAoSW1hZ2VLaW5kLlJHQkFfMzJCUFAsIGRyYXdXaWR0aCwgZHJhd0hlaWdodCwgcmdiYSk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHN3aXRjaCAodGhpcy5jb2xvclNwYWNlLm5hbWUpIHsKICAgICAgICAgICAgY2FzZSAiRGV2aWNlR3JheSI6CiAgICAgICAgICAgICAgaW1hZ2VMZW5ndGggKj0gMzsKICAgICAgICAgICAgY2FzZSAiRGV2aWNlUkdCIjoKICAgICAgICAgICAgY2FzZSAiRGV2aWNlQ01ZSyI6CiAgICAgICAgICAgICAgaW1nRGF0YS5raW5kID0gSW1hZ2VLaW5kLlJHQl8yNEJQUDsKICAgICAgICAgICAgICBpbWdEYXRhLmRhdGEgPSBhd2FpdCB0aGlzLmdldEltYWdlQnl0ZXMoaW1hZ2VMZW5ndGgsIHsKICAgICAgICAgICAgICAgIGRyYXdXaWR0aCwKICAgICAgICAgICAgICAgIGRyYXdIZWlnaHQsCiAgICAgICAgICAgICAgICBmb3JjZVJHQjogdHJ1ZQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIGlmIChtdXN0QmVSZXNpemVkKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gSW1hZ2VSZXNpemVyLmNyZWF0ZUltYWdlKGltZ0RhdGEpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gaW1nRGF0YTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIGNvbnN0IGltZ0FycmF5ID0gYXdhaXQgdGhpcy5nZXRJbWFnZUJ5dGVzKG9yaWdpbmFsSGVpZ2h0ICogcm93Qnl0ZXMsIHsKICAgICAgaW50ZXJuYWw6IHRydWUKICAgIH0pOwogICAgY29uc3QgYWN0dWFsSGVpZ2h0ID0gMCB8IGltZ0FycmF5Lmxlbmd0aCAvIHJvd0J5dGVzICogZHJhd0hlaWdodCAvIG9yaWdpbmFsSGVpZ2h0OwogICAgY29uc3QgY29tcHMgPSB0aGlzLmdldENvbXBvbmVudHMoaW1nQXJyYXkpOwogICAgbGV0IGFscGhhMDEsIG1heWJlVW5kb1ByZWJsZW5kOwogICAgbGV0IGNhbnZhcywgY3R4LCBjYW52YXNJbWdEYXRhLCBkYXRhOwogICAgaWYgKGlzT2Zmc2NyZWVuQ2FudmFzU3VwcG9ydGVkICYmICFtdXN0QmVSZXNpemVkKSB7CiAgICAgIGNhbnZhcyA9IG5ldyBPZmZzY3JlZW5DYW52YXMoZHJhd1dpZHRoLCBkcmF3SGVpZ2h0KTsKICAgICAgY3R4ID0gY2FudmFzLmdldENvbnRleHQoIjJkIik7CiAgICAgIGNhbnZhc0ltZ0RhdGEgPSBjdHguY3JlYXRlSW1hZ2VEYXRhKGRyYXdXaWR0aCwgZHJhd0hlaWdodCk7CiAgICAgIGRhdGEgPSBjYW52YXNJbWdEYXRhLmRhdGE7CiAgICB9CiAgICBpbWdEYXRhLmtpbmQgPSBJbWFnZUtpbmQuUkdCQV8zMkJQUDsKICAgIGlmICghZm9yY2VSR0JBICYmICF0aGlzLnNtYXNrICYmICF0aGlzLm1hc2spIHsKICAgICAgaWYgKCFpc09mZnNjcmVlbkNhbnZhc1N1cHBvcnRlZCB8fCBtdXN0QmVSZXNpemVkKSB7CiAgICAgICAgaW1nRGF0YS5raW5kID0gSW1hZ2VLaW5kLlJHQl8yNEJQUDsKICAgICAgICBkYXRhID0gbmV3IFVpbnQ4Q2xhbXBlZEFycmF5KGRyYXdXaWR0aCAqIGRyYXdIZWlnaHQgKiAzKTsKICAgICAgICBhbHBoYTAxID0gMDsKICAgICAgfSBlbHNlIHsKICAgICAgICBjb25zdCBhcnIgPSBuZXcgVWludDMyQXJyYXkoZGF0YS5idWZmZXIpOwogICAgICAgIGFyci5maWxsKEZlYXR1cmVUZXN0LmlzTGl0dGxlRW5kaWFuID8gMHhmZjAwMDAwMCA6IDB4MDAwMDAwZmYpOwogICAgICAgIGFscGhhMDEgPSAxOwogICAgICB9CiAgICAgIG1heWJlVW5kb1ByZWJsZW5kID0gZmFsc2U7CiAgICB9IGVsc2UgewogICAgICBpZiAoIWlzT2Zmc2NyZWVuQ2FudmFzU3VwcG9ydGVkIHx8IG11c3RCZVJlc2l6ZWQpIHsKICAgICAgICBkYXRhID0gbmV3IFVpbnQ4Q2xhbXBlZEFycmF5KGRyYXdXaWR0aCAqIGRyYXdIZWlnaHQgKiA0KTsKICAgICAgfQogICAgICBhbHBoYTAxID0gMTsKICAgICAgbWF5YmVVbmRvUHJlYmxlbmQgPSB0cnVlOwogICAgICBhd2FpdCB0aGlzLmZpbGxPcGFjaXR5KGRhdGEsIGRyYXdXaWR0aCwgZHJhd0hlaWdodCwgYWN0dWFsSGVpZ2h0LCBjb21wcyk7CiAgICB9CiAgICBpZiAodGhpcy5uZWVkc0RlY29kZSkgewogICAgICB0aGlzLmRlY29kZUJ1ZmZlcihjb21wcyk7CiAgICB9CiAgICB0aGlzLmNvbG9yU3BhY2UuZmlsbFJnYihkYXRhLCBvcmlnaW5hbFdpZHRoLCBvcmlnaW5hbEhlaWdodCwgZHJhd1dpZHRoLCBkcmF3SGVpZ2h0LCBhY3R1YWxIZWlnaHQsIGJwYywgY29tcHMsIGFscGhhMDEpOwogICAgaWYgKG1heWJlVW5kb1ByZWJsZW5kKSB7CiAgICAgIHRoaXMudW5kb1ByZWJsZW5kKGRhdGEsIGRyYXdXaWR0aCwgYWN0dWFsSGVpZ2h0KTsKICAgIH0KICAgIGlmIChpc09mZnNjcmVlbkNhbnZhc1N1cHBvcnRlZCAmJiAhbXVzdEJlUmVzaXplZCkgewogICAgICBjdHgucHV0SW1hZ2VEYXRhKGNhbnZhc0ltZ0RhdGEsIDAsIDApOwogICAgICBjb25zdCBiaXRtYXAgPSBjYW52YXMudHJhbnNmZXJUb0ltYWdlQml0bWFwKCk7CiAgICAgIHJldHVybiB7CiAgICAgICAgZGF0YTogbnVsbCwKICAgICAgICB3aWR0aDogZHJhd1dpZHRoLAogICAgICAgIGhlaWdodDogZHJhd0hlaWdodCwKICAgICAgICBiaXRtYXAsCiAgICAgICAgaW50ZXJwb2xhdGU6IHRoaXMuaW50ZXJwb2xhdGUKICAgICAgfTsKICAgIH0KICAgIGltZ0RhdGEuZGF0YSA9IGRhdGE7CiAgICBpZiAobXVzdEJlUmVzaXplZCkgewogICAgICByZXR1cm4gSW1hZ2VSZXNpemVyLmNyZWF0ZUltYWdlKGltZ0RhdGEpOwogICAgfQogICAgcmV0dXJuIGltZ0RhdGE7CiAgfQogIGFzeW5jIGZpbGxHcmF5QnVmZmVyKGJ1ZmZlcikgewogICAgY29uc3QgbnVtQ29tcHMgPSB0aGlzLm51bUNvbXBzOwogICAgaWYgKG51bUNvbXBzICE9PSAxKSB7CiAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcihgUmVhZGluZyBncmF5IHNjYWxlIGZyb20gYSBjb2xvciBpbWFnZTogJHtudW1Db21wc31gKTsKICAgIH0KICAgIGNvbnN0IHdpZHRoID0gdGhpcy53aWR0aDsKICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuaGVpZ2h0OwogICAgY29uc3QgYnBjID0gdGhpcy5icGM7CiAgICBjb25zdCByb3dCeXRlcyA9IHdpZHRoICogbnVtQ29tcHMgKiBicGMgKyA3ID4+IDM7CiAgICBjb25zdCBpbWdBcnJheSA9IGF3YWl0IHRoaXMuZ2V0SW1hZ2VCeXRlcyhoZWlnaHQgKiByb3dCeXRlcywgewogICAgICBpbnRlcm5hbDogdHJ1ZQogICAgfSk7CiAgICBjb25zdCBjb21wcyA9IHRoaXMuZ2V0Q29tcG9uZW50cyhpbWdBcnJheSk7CiAgICBsZXQgaSwgbGVuZ3RoOwogICAgaWYgKGJwYyA9PT0gMSkgewogICAgICBsZW5ndGggPSB3aWR0aCAqIGhlaWdodDsKICAgICAgaWYgKHRoaXMubmVlZHNEZWNvZGUpIHsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgICAgIGJ1ZmZlcltpXSA9IGNvbXBzW2ldIC0gMSAmIDI1NTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgICBidWZmZXJbaV0gPSAtY29tcHNbaV0gJiAyNTU7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybjsKICAgIH0KICAgIGlmICh0aGlzLm5lZWRzRGVjb2RlKSB7CiAgICAgIHRoaXMuZGVjb2RlQnVmZmVyKGNvbXBzKTsKICAgIH0KICAgIGxlbmd0aCA9IHdpZHRoICogaGVpZ2h0OwogICAgY29uc3Qgc2NhbGUgPSAyNTUgLyAoKDEgPDwgYnBjKSAtIDEpOwogICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgIGJ1ZmZlcltpXSA9IHNjYWxlICogY29tcHNbaV07CiAgICB9CiAgfQogIGNyZWF0ZUJpdG1hcChraW5kLCB3aWR0aCwgaGVpZ2h0LCBzcmMpIHsKICAgIGNvbnN0IGNhbnZhcyA9IG5ldyBPZmZzY3JlZW5DYW52YXMod2lkdGgsIGhlaWdodCk7CiAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgiMmQiKTsKICAgIGxldCBpbWdEYXRhOwogICAgaWYgKGtpbmQgPT09IEltYWdlS2luZC5SR0JBXzMyQlBQKSB7CiAgICAgIGltZ0RhdGEgPSBuZXcgSW1hZ2VEYXRhKHNyYywgd2lkdGgsIGhlaWdodCk7CiAgICB9IGVsc2UgewogICAgICBpbWdEYXRhID0gY3R4LmNyZWF0ZUltYWdlRGF0YSh3aWR0aCwgaGVpZ2h0KTsKICAgICAgY29udmVydFRvUkdCQSh7CiAgICAgICAga2luZCwKICAgICAgICBzcmMsCiAgICAgICAgZGVzdDogbmV3IFVpbnQzMkFycmF5KGltZ0RhdGEuZGF0YS5idWZmZXIpLAogICAgICAgIHdpZHRoLAogICAgICAgIGhlaWdodCwKICAgICAgICBpbnZlcnNlRGVjb2RlOiB0aGlzLm5lZWRzRGVjb2RlCiAgICAgIH0pOwogICAgfQogICAgY3R4LnB1dEltYWdlRGF0YShpbWdEYXRhLCAwLCAwKTsKICAgIGNvbnN0IGJpdG1hcCA9IGNhbnZhcy50cmFuc2ZlclRvSW1hZ2VCaXRtYXAoKTsKICAgIHJldHVybiB7CiAgICAgIGRhdGE6IG51bGwsCiAgICAgIHdpZHRoLAogICAgICBoZWlnaHQsCiAgICAgIGJpdG1hcCwKICAgICAgaW50ZXJwb2xhdGU6IHRoaXMuaW50ZXJwb2xhdGUKICAgIH07CiAgfQogIGFzeW5jICNnZXRJbWFnZSh3aWR0aCwgaGVpZ2h0KSB7CiAgICBjb25zdCBiaXRtYXAgPSBhd2FpdCB0aGlzLmltYWdlLmdldFRyYW5zZmVyYWJsZUltYWdlKCk7CiAgICBpZiAoIWJpdG1hcCkgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIHJldHVybiB7CiAgICAgIGRhdGE6IG51bGwsCiAgICAgIHdpZHRoLAogICAgICBoZWlnaHQsCiAgICAgIGJpdG1hcCwKICAgICAgaW50ZXJwb2xhdGU6IHRoaXMuaW50ZXJwb2xhdGUKICAgIH07CiAgfQogIGFzeW5jIGdldEltYWdlQnl0ZXMobGVuZ3RoLCB7CiAgICBkcmF3V2lkdGgsCiAgICBkcmF3SGVpZ2h0LAogICAgZm9yY2VSR0JBID0gZmFsc2UsCiAgICBmb3JjZVJHQiA9IGZhbHNlLAogICAgaW50ZXJuYWwgPSBmYWxzZQogIH0pIHsKICAgIHRoaXMuaW1hZ2UucmVzZXQoKTsKICAgIHRoaXMuaW1hZ2UuZHJhd1dpZHRoID0gZHJhd1dpZHRoIHx8IHRoaXMud2lkdGg7CiAgICB0aGlzLmltYWdlLmRyYXdIZWlnaHQgPSBkcmF3SGVpZ2h0IHx8IHRoaXMuaGVpZ2h0OwogICAgdGhpcy5pbWFnZS5mb3JjZVJHQkEgPSAhIWZvcmNlUkdCQTsKICAgIHRoaXMuaW1hZ2UuZm9yY2VSR0IgPSAhIWZvcmNlUkdCOwogICAgY29uc3QgaW1hZ2VCeXRlcyA9IGF3YWl0IHRoaXMuaW1hZ2UuZ2V0SW1hZ2VEYXRhKGxlbmd0aCwgdGhpcy5qcHhEZWNvZGVyT3B0aW9ucyk7CiAgICBpZiAoaW50ZXJuYWwgfHwgdGhpcy5pbWFnZSBpbnN0YW5jZW9mIERlY29kZVN0cmVhbSkgewogICAgICByZXR1cm4gaW1hZ2VCeXRlczsKICAgIH0KICAgIGFzc2VydChpbWFnZUJ5dGVzIGluc3RhbmNlb2YgVWludDhBcnJheSwgJ1BERkltYWdlLmdldEltYWdlQnl0ZXM6IFVuc3VwcG9ydGVkICJpbWFnZUJ5dGVzIiB0eXBlLicpOwogICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGltYWdlQnl0ZXMpOwogIH0KfQoKOy8vIC4vc3JjL2NvcmUvZXZhbHVhdG9yLmpzCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCmNvbnN0IERlZmF1bHRQYXJ0aWFsRXZhbHVhdG9yT3B0aW9ucyA9IE9iamVjdC5mcmVlemUoewogIG1heEltYWdlU2l6ZTogLTEsCiAgZGlzYWJsZUZvbnRGYWNlOiBmYWxzZSwKICBpZ25vcmVFcnJvcnM6IGZhbHNlLAogIGlzRXZhbFN1cHBvcnRlZDogdHJ1ZSwKICBpc09mZnNjcmVlbkNhbnZhc1N1cHBvcnRlZDogZmFsc2UsCiAgaXNJbWFnZURlY29kZXJTdXBwb3J0ZWQ6IGZhbHNlLAogIGNhbnZhc01heEFyZWFJbkJ5dGVzOiAtMSwKICBmb250RXh0cmFQcm9wZXJ0aWVzOiBmYWxzZSwKICB1c2VTeXN0ZW1Gb250czogdHJ1ZSwKICB1c2VXYXNtOiB0cnVlLAogIHVzZVdvcmtlckZldGNoOiB0cnVlLAogIGNNYXBVcmw6IG51bGwsCiAgaWNjVXJsOiBudWxsLAogIHN0YW5kYXJkRm9udERhdGFVcmw6IG51bGwsCiAgd2FzbVVybDogbnVsbAp9KTsKY29uc3QgUGF0dGVyblR5cGUgPSB7CiAgVElMSU5HOiAxLAogIFNIQURJTkc6IDIKfTsKY29uc3QgVEVYVF9DSFVOS19CQVRDSF9TSVpFID0gMTA7CmNvbnN0IGRlZmVycmVkID0gUHJvbWlzZS5yZXNvbHZlKCk7CmZ1bmN0aW9uIG5vcm1hbGl6ZUJsZW5kTW9kZSh2YWx1ZSwgcGFyc2luZ0FycmF5ID0gZmFsc2UpIHsKICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHsKICAgIGZvciAoY29uc3QgdmFsIG9mIHZhbHVlKSB7CiAgICAgIGNvbnN0IG1heWJlQk0gPSBub3JtYWxpemVCbGVuZE1vZGUodmFsLCB0cnVlKTsKICAgICAgaWYgKG1heWJlQk0pIHsKICAgICAgICByZXR1cm4gbWF5YmVCTTsKICAgICAgfQogICAgfQogICAgd2FybihgVW5zdXBwb3J0ZWQgYmxlbmQgbW9kZSBBcnJheTogJHt2YWx1ZX1gKTsKICAgIHJldHVybiAic291cmNlLW92ZXIiOwogIH0KICBpZiAoISh2YWx1ZSBpbnN0YW5jZW9mIE5hbWUpKSB7CiAgICBpZiAocGFyc2luZ0FycmF5KSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgcmV0dXJuICJzb3VyY2Utb3ZlciI7CiAgfQogIHN3aXRjaCAodmFsdWUubmFtZSkgewogICAgY2FzZSAiTm9ybWFsIjoKICAgIGNhc2UgIkNvbXBhdGlibGUiOgogICAgICByZXR1cm4gInNvdXJjZS1vdmVyIjsKICAgIGNhc2UgIk11bHRpcGx5IjoKICAgICAgcmV0dXJuICJtdWx0aXBseSI7CiAgICBjYXNlICJTY3JlZW4iOgogICAgICByZXR1cm4gInNjcmVlbiI7CiAgICBjYXNlICJPdmVybGF5IjoKICAgICAgcmV0dXJuICJvdmVybGF5IjsKICAgIGNhc2UgIkRhcmtlbiI6CiAgICAgIHJldHVybiAiZGFya2VuIjsKICAgIGNhc2UgIkxpZ2h0ZW4iOgogICAgICByZXR1cm4gImxpZ2h0ZW4iOwogICAgY2FzZSAiQ29sb3JEb2RnZSI6CiAgICAgIHJldHVybiAiY29sb3ItZG9kZ2UiOwogICAgY2FzZSAiQ29sb3JCdXJuIjoKICAgICAgcmV0dXJuICJjb2xvci1idXJuIjsKICAgIGNhc2UgIkhhcmRMaWdodCI6CiAgICAgIHJldHVybiAiaGFyZC1saWdodCI7CiAgICBjYXNlICJTb2Z0TGlnaHQiOgogICAgICByZXR1cm4gInNvZnQtbGlnaHQiOwogICAgY2FzZSAiRGlmZmVyZW5jZSI6CiAgICAgIHJldHVybiAiZGlmZmVyZW5jZSI7CiAgICBjYXNlICJFeGNsdXNpb24iOgogICAgICByZXR1cm4gImV4Y2x1c2lvbiI7CiAgICBjYXNlICJIdWUiOgogICAgICByZXR1cm4gImh1ZSI7CiAgICBjYXNlICJTYXR1cmF0aW9uIjoKICAgICAgcmV0dXJuICJzYXR1cmF0aW9uIjsKICAgIGNhc2UgIkNvbG9yIjoKICAgICAgcmV0dXJuICJjb2xvciI7CiAgICBjYXNlICJMdW1pbm9zaXR5IjoKICAgICAgcmV0dXJuICJsdW1pbm9zaXR5IjsKICB9CiAgaWYgKHBhcnNpbmdBcnJheSkgewogICAgcmV0dXJuIG51bGw7CiAgfQogIHdhcm4oYFVuc3VwcG9ydGVkIGJsZW5kIG1vZGU6ICR7dmFsdWUubmFtZX1gKTsKICByZXR1cm4gInNvdXJjZS1vdmVyIjsKfQpmdW5jdGlvbiBhZGRDYWNoZWRJbWFnZU9wcyhvcExpc3QsIHsKICBvYmpJZCwKICBmbiwKICBhcmdzLAogIG9wdGlvbmFsQ29udGVudCwKICBoYXNNYXNrCn0pIHsKICBpZiAob2JqSWQpIHsKICAgIG9wTGlzdC5hZGREZXBlbmRlbmN5KG9iaklkKTsKICB9CiAgb3BMaXN0LmFkZEltYWdlT3BzKGZuLCBhcmdzLCBvcHRpb25hbENvbnRlbnQsIGhhc01hc2spOwogIGlmIChmbiA9PT0gT1BTLnBhaW50SW1hZ2VNYXNrWE9iamVjdCAmJiBhcmdzWzBdPy5jb3VudCA+IDApIHsKICAgIGFyZ3NbMF0uY291bnQrKzsKICB9Cn0KY2xhc3MgVGltZVNsb3RNYW5hZ2VyIHsKICBzdGF0aWMgVElNRV9TTE9UX0RVUkFUSU9OX01TID0gMjA7CiAgc3RhdGljIENIRUNLX1RJTUVfRVZFUlkgPSAxMDA7CiAgY29uc3RydWN0b3IoKSB7CiAgICB0aGlzLnJlc2V0KCk7CiAgfQogIGNoZWNrKCkgewogICAgaWYgKCsrdGhpcy5jaGVja2VkIDwgVGltZVNsb3RNYW5hZ2VyLkNIRUNLX1RJTUVfRVZFUlkpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgdGhpcy5jaGVja2VkID0gMDsKICAgIHJldHVybiB0aGlzLmVuZFRpbWUgPD0gRGF0ZS5ub3coKTsKICB9CiAgcmVzZXQoKSB7CiAgICB0aGlzLmVuZFRpbWUgPSBEYXRlLm5vdygpICsgVGltZVNsb3RNYW5hZ2VyLlRJTUVfU0xPVF9EVVJBVElPTl9NUzsKICAgIHRoaXMuY2hlY2tlZCA9IDA7CiAgfQp9CmNsYXNzIFBhcnRpYWxFdmFsdWF0b3IgewogIGNvbnN0cnVjdG9yKHsKICAgIHhyZWYsCiAgICBoYW5kbGVyLAogICAgcGFnZUluZGV4LAogICAgaWRGYWN0b3J5LAogICAgZm9udENhY2hlLAogICAgYnVpbHRJbkNNYXBDYWNoZSwKICAgIHN0YW5kYXJkRm9udERhdGFDYWNoZSwKICAgIGdsb2JhbENvbG9yU3BhY2VDYWNoZSwKICAgIGdsb2JhbEltYWdlQ2FjaGUsCiAgICBzeXN0ZW1Gb250Q2FjaGUsCiAgICBvcHRpb25zID0gbnVsbAogIH0pIHsKICAgIHRoaXMueHJlZiA9IHhyZWY7CiAgICB0aGlzLmhhbmRsZXIgPSBoYW5kbGVyOwogICAgdGhpcy5wYWdlSW5kZXggPSBwYWdlSW5kZXg7CiAgICB0aGlzLmlkRmFjdG9yeSA9IGlkRmFjdG9yeTsKICAgIHRoaXMuZm9udENhY2hlID0gZm9udENhY2hlOwogICAgdGhpcy5idWlsdEluQ01hcENhY2hlID0gYnVpbHRJbkNNYXBDYWNoZTsKICAgIHRoaXMuc3RhbmRhcmRGb250RGF0YUNhY2hlID0gc3RhbmRhcmRGb250RGF0YUNhY2hlOwogICAgdGhpcy5nbG9iYWxDb2xvclNwYWNlQ2FjaGUgPSBnbG9iYWxDb2xvclNwYWNlQ2FjaGU7CiAgICB0aGlzLmdsb2JhbEltYWdlQ2FjaGUgPSBnbG9iYWxJbWFnZUNhY2hlOwogICAgdGhpcy5zeXN0ZW1Gb250Q2FjaGUgPSBzeXN0ZW1Gb250Q2FjaGU7CiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IERlZmF1bHRQYXJ0aWFsRXZhbHVhdG9yT3B0aW9uczsKICAgIHRoaXMudHlwZTNGb250UmVmcyA9IG51bGw7CiAgICB0aGlzLl9yZWdpb25hbEltYWdlQ2FjaGUgPSBuZXcgUmVnaW9uYWxJbWFnZUNhY2hlKCk7CiAgICB0aGlzLl9mZXRjaEJ1aWx0SW5DTWFwQm91bmQgPSB0aGlzLmZldGNoQnVpbHRJbkNNYXAuYmluZCh0aGlzKTsKICB9CiAgZ2V0IF9wZGZGdW5jdGlvbkZhY3RvcnkoKSB7CiAgICBjb25zdCBwZGZGdW5jdGlvbkZhY3RvcnkgPSBuZXcgUERGRnVuY3Rpb25GYWN0b3J5KHsKICAgICAgeHJlZjogdGhpcy54cmVmLAogICAgICBpc0V2YWxTdXBwb3J0ZWQ6IHRoaXMub3B0aW9ucy5pc0V2YWxTdXBwb3J0ZWQKICAgIH0pOwogICAgcmV0dXJuIHNoYWRvdyh0aGlzLCAiX3BkZkZ1bmN0aW9uRmFjdG9yeSIsIHBkZkZ1bmN0aW9uRmFjdG9yeSk7CiAgfQogIGdldCBwYXJzaW5nVHlwZTNGb250KCkgewogICAgcmV0dXJuICEhdGhpcy50eXBlM0ZvbnRSZWZzOwogIH0KICBjbG9uZShuZXdPcHRpb25zID0gbnVsbCkgewogICAgY29uc3QgbmV3RXZhbHVhdG9yID0gT2JqZWN0LmNyZWF0ZSh0aGlzKTsKICAgIG5ld0V2YWx1YXRvci5vcHRpb25zID0gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKG51bGwpLCB0aGlzLm9wdGlvbnMsIG5ld09wdGlvbnMpOwogICAgcmV0dXJuIG5ld0V2YWx1YXRvcjsKICB9CiAgaGFzQmxlbmRNb2RlcyhyZXNvdXJjZXMsIG5vbkJsZW5kTW9kZXNTZXQpIHsKICAgIGlmICghKHJlc291cmNlcyBpbnN0YW5jZW9mIERpY3QpKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICAgIGlmIChyZXNvdXJjZXMub2JqSWQgJiYgbm9uQmxlbmRNb2Rlc1NldC5oYXMocmVzb3VyY2VzLm9iaklkKSkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgICBjb25zdCBwcm9jZXNzZWQgPSBuZXcgUmVmU2V0KG5vbkJsZW5kTW9kZXNTZXQpOwogICAgaWYgKHJlc291cmNlcy5vYmpJZCkgewogICAgICBwcm9jZXNzZWQucHV0KHJlc291cmNlcy5vYmpJZCk7CiAgICB9CiAgICBjb25zdCBub2RlcyA9IFtyZXNvdXJjZXNdLAogICAgICB4cmVmID0gdGhpcy54cmVmOwogICAgd2hpbGUgKG5vZGVzLmxlbmd0aCkgewogICAgICBjb25zdCBub2RlID0gbm9kZXMuc2hpZnQoKTsKICAgICAgY29uc3QgZ3JhcGhpY1N0YXRlcyA9IG5vZGUuZ2V0KCJFeHRHU3RhdGUiKTsKICAgICAgaWYgKGdyYXBoaWNTdGF0ZXMgaW5zdGFuY2VvZiBEaWN0KSB7CiAgICAgICAgZm9yIChsZXQgZ3JhcGhpY1N0YXRlIG9mIGdyYXBoaWNTdGF0ZXMuZ2V0UmF3VmFsdWVzKCkpIHsKICAgICAgICAgIGlmIChncmFwaGljU3RhdGUgaW5zdGFuY2VvZiBSZWYpIHsKICAgICAgICAgICAgaWYgKHByb2Nlc3NlZC5oYXMoZ3JhcGhpY1N0YXRlKSkgewogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgZ3JhcGhpY1N0YXRlID0geHJlZi5mZXRjaChncmFwaGljU3RhdGUpOwogICAgICAgICAgICB9IGNhdGNoIChleCkgewogICAgICAgICAgICAgIHByb2Nlc3NlZC5wdXQoZ3JhcGhpY1N0YXRlKTsKICAgICAgICAgICAgICBpbmZvKGBoYXNCbGVuZE1vZGVzIC0gaWdub3JpbmcgRXh0R1N0YXRlOiAiJHtleH0iLmApOwogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoIShncmFwaGljU3RhdGUgaW5zdGFuY2VvZiBEaWN0KSkgewogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChncmFwaGljU3RhdGUub2JqSWQpIHsKICAgICAgICAgICAgcHJvY2Vzc2VkLnB1dChncmFwaGljU3RhdGUub2JqSWQpOwogICAgICAgICAgfQogICAgICAgICAgY29uc3QgYm0gPSBncmFwaGljU3RhdGUuZ2V0KCJCTSIpOwogICAgICAgICAgaWYgKGJtIGluc3RhbmNlb2YgTmFtZSkgewogICAgICAgICAgICBpZiAoYm0ubmFtZSAhPT0gIk5vcm1hbCIpIHsKICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChibSAhPT0gdW5kZWZpbmVkICYmIEFycmF5LmlzQXJyYXkoYm0pKSB7CiAgICAgICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBibSkgewogICAgICAgICAgICAgIGlmIChlbGVtZW50IGluc3RhbmNlb2YgTmFtZSAmJiBlbGVtZW50Lm5hbWUgIT09ICJOb3JtYWwiKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgY29uc3QgeE9iamVjdHMgPSBub2RlLmdldCgiWE9iamVjdCIpOwogICAgICBpZiAoISh4T2JqZWN0cyBpbnN0YW5jZW9mIERpY3QpKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgZm9yIChsZXQgeE9iamVjdCBvZiB4T2JqZWN0cy5nZXRSYXdWYWx1ZXMoKSkgewogICAgICAgIGlmICh4T2JqZWN0IGluc3RhbmNlb2YgUmVmKSB7CiAgICAgICAgICBpZiAocHJvY2Vzc2VkLmhhcyh4T2JqZWN0KSkgewogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIHhPYmplY3QgPSB4cmVmLmZldGNoKHhPYmplY3QpOwogICAgICAgICAgfSBjYXRjaCAoZXgpIHsKICAgICAgICAgICAgcHJvY2Vzc2VkLnB1dCh4T2JqZWN0KTsKICAgICAgICAgICAgaW5mbyhgaGFzQmxlbmRNb2RlcyAtIGlnbm9yaW5nIFhPYmplY3Q6ICIke2V4fSIuYCk7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoISh4T2JqZWN0IGluc3RhbmNlb2YgQmFzZVN0cmVhbSkpIHsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgICBpZiAoeE9iamVjdC5kaWN0Lm9iaklkKSB7CiAgICAgICAgICBwcm9jZXNzZWQucHV0KHhPYmplY3QuZGljdC5vYmpJZCk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHhSZXNvdXJjZXMgPSB4T2JqZWN0LmRpY3QuZ2V0KCJSZXNvdXJjZXMiKTsKICAgICAgICBpZiAoISh4UmVzb3VyY2VzIGluc3RhbmNlb2YgRGljdCkpIHsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgICBpZiAoeFJlc291cmNlcy5vYmpJZCAmJiBwcm9jZXNzZWQuaGFzKHhSZXNvdXJjZXMub2JqSWQpKSB7CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CiAgICAgICAgbm9kZXMucHVzaCh4UmVzb3VyY2VzKTsKICAgICAgICBpZiAoeFJlc291cmNlcy5vYmpJZCkgewogICAgICAgICAgcHJvY2Vzc2VkLnB1dCh4UmVzb3VyY2VzLm9iaklkKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIGZvciAoY29uc3QgcmVmIG9mIHByb2Nlc3NlZCkgewogICAgICBub25CbGVuZE1vZGVzU2V0LnB1dChyZWYpOwogICAgfQogICAgcmV0dXJuIGZhbHNlOwogIH0KICBhc3luYyBmZXRjaEJ1aWx0SW5DTWFwKG5hbWUpIHsKICAgIGNvbnN0IGNhY2hlZERhdGEgPSB0aGlzLmJ1aWx0SW5DTWFwQ2FjaGUuZ2V0KG5hbWUpOwogICAgaWYgKGNhY2hlZERhdGEpIHsKICAgICAgcmV0dXJuIGNhY2hlZERhdGE7CiAgICB9CiAgICBsZXQgZGF0YTsKICAgIGlmICh0aGlzLm9wdGlvbnMudXNlV29ya2VyRmV0Y2gpIHsKICAgICAgZGF0YSA9IHsKICAgICAgICBjTWFwRGF0YTogYXdhaXQgZmV0Y2hCaW5hcnlEYXRhKGAke3RoaXMub3B0aW9ucy5jTWFwVXJsfSR7bmFtZX0uYmNtYXBgKSwKICAgICAgICBpc0NvbXByZXNzZWQ6IHRydWUKICAgICAgfTsKICAgIH0gZWxzZSB7CiAgICAgIGRhdGEgPSBhd2FpdCB0aGlzLmhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKCJGZXRjaEJpbmFyeURhdGEiLCB7CiAgICAgICAgdHlwZTogImNNYXBSZWFkZXJGYWN0b3J5IiwKICAgICAgICBuYW1lCiAgICAgIH0pOwogICAgfQogICAgdGhpcy5idWlsdEluQ01hcENhY2hlLnNldChuYW1lLCBkYXRhKTsKICAgIHJldHVybiBkYXRhOwogIH0KICBhc3luYyBmZXRjaFN0YW5kYXJkRm9udERhdGEobmFtZSkgewogICAgY29uc3QgY2FjaGVkRGF0YSA9IHRoaXMuc3RhbmRhcmRGb250RGF0YUNhY2hlLmdldChuYW1lKTsKICAgIGlmIChjYWNoZWREYXRhKSB7CiAgICAgIHJldHVybiBuZXcgU3RyZWFtKGNhY2hlZERhdGEpOwogICAgfQogICAgaWYgKHRoaXMub3B0aW9ucy51c2VTeXN0ZW1Gb250cyAmJiBuYW1lICE9PSAiU3ltYm9sIiAmJiBuYW1lICE9PSAiWmFwZkRpbmdiYXRzIikgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIGNvbnN0IHN0YW5kYXJkRm9udE5hbWVUb0ZpbGVOYW1lID0gZ2V0Rm9udE5hbWVUb0ZpbGVNYXAoKSwKICAgICAgZmlsZW5hbWUgPSBzdGFuZGFyZEZvbnROYW1lVG9GaWxlTmFtZVtuYW1lXTsKICAgIGxldCBkYXRhOwogICAgdHJ5IHsKICAgICAgaWYgKHRoaXMub3B0aW9ucy51c2VXb3JrZXJGZXRjaCkgewogICAgICAgIGRhdGEgPSBhd2FpdCBmZXRjaEJpbmFyeURhdGEoYCR7dGhpcy5vcHRpb25zLnN0YW5kYXJkRm9udERhdGFVcmx9JHtmaWxlbmFtZX1gKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBkYXRhID0gYXdhaXQgdGhpcy5oYW5kbGVyLnNlbmRXaXRoUHJvbWlzZSgiRmV0Y2hCaW5hcnlEYXRhIiwgewogICAgICAgICAgdHlwZTogInN0YW5kYXJkRm9udERhdGFGYWN0b3J5IiwKICAgICAgICAgIGZpbGVuYW1lCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0gY2F0Y2ggKGV4KSB7CiAgICAgIHdhcm4oZXgpOwogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIHRoaXMuc3RhbmRhcmRGb250RGF0YUNhY2hlLnNldChuYW1lLCBkYXRhKTsKICAgIHJldHVybiBuZXcgU3RyZWFtKGRhdGEpOwogIH0KICBhc3luYyBidWlsZEZvcm1YT2JqZWN0KHJlc291cmNlcywgeG9iaiwgc21hc2ssIG9wZXJhdG9yTGlzdCwgdGFzaywgaW5pdGlhbFN0YXRlLCBsb2NhbENvbG9yU3BhY2VDYWNoZSwgc2VlblJlZnMpIHsKICAgIGNvbnN0IHsKICAgICAgZGljdAogICAgfSA9IHhvYmo7CiAgICBjb25zdCBtYXRyaXggPSBsb29rdXBNYXRyaXgoZGljdC5nZXRBcnJheSgiTWF0cml4IiksIG51bGwpOwogICAgY29uc3QgYmJveCA9IGxvb2t1cE5vcm1hbFJlY3QoZGljdC5nZXRBcnJheSgiQkJveCIpLCBudWxsKTsKICAgIGxldCBvcHRpb25hbENvbnRlbnQsIGdyb3VwT3B0aW9uczsKICAgIGlmIChkaWN0LmhhcygiT0MiKSkgewogICAgICBvcHRpb25hbENvbnRlbnQgPSBhd2FpdCB0aGlzLnBhcnNlTWFya2VkQ29udGVudFByb3BzKGRpY3QuZ2V0KCJPQyIpLCByZXNvdXJjZXMpOwogICAgfQogICAgaWYgKG9wdGlvbmFsQ29udGVudCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgIG9wZXJhdG9yTGlzdC5hZGRPcChPUFMuYmVnaW5NYXJrZWRDb250ZW50UHJvcHMsIFsiT0MiLCBvcHRpb25hbENvbnRlbnRdKTsKICAgIH0KICAgIGNvbnN0IGdyb3VwID0gZGljdC5nZXQoIkdyb3VwIik7CiAgICBpZiAoZ3JvdXApIHsKICAgICAgZ3JvdXBPcHRpb25zID0gewogICAgICAgIG1hdHJpeCwKICAgICAgICBiYm94LAogICAgICAgIHNtYXNrLAogICAgICAgIGlzb2xhdGVkOiBmYWxzZSwKICAgICAgICBrbm9ja291dDogZmFsc2UKICAgICAgfTsKICAgICAgY29uc3QgZ3JvdXBTdWJ0eXBlID0gZ3JvdXAuZ2V0KCJTIik7CiAgICAgIGxldCBjb2xvclNwYWNlID0gbnVsbDsKICAgICAgaWYgKGlzTmFtZShncm91cFN1YnR5cGUsICJUcmFuc3BhcmVuY3kiKSkgewogICAgICAgIGdyb3VwT3B0aW9ucy5pc29sYXRlZCA9IGdyb3VwLmdldCgiSSIpIHx8IGZhbHNlOwogICAgICAgIGdyb3VwT3B0aW9ucy5rbm9ja291dCA9IGdyb3VwLmdldCgiSyIpIHx8IGZhbHNlOwogICAgICAgIGlmIChncm91cC5oYXMoIkNTIikpIHsKICAgICAgICAgIGNvbnN0IGNzID0gdGhpcy5fZ2V0Q29sb3JTcGFjZShncm91cC5nZXRSYXcoIkNTIiksIHJlc291cmNlcywgbG9jYWxDb2xvclNwYWNlQ2FjaGUpOwogICAgICAgICAgY29sb3JTcGFjZSA9IGNzIGluc3RhbmNlb2YgQ29sb3JTcGFjZSA/IGNzIDogYXdhaXQgdGhpcy5faGFuZGxlQ29sb3JTcGFjZShjcyk7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmIChzbWFzaz8uYmFja2Ryb3ApIHsKICAgICAgICBjb2xvclNwYWNlIHx8PSBDb2xvclNwYWNlVXRpbHMucmdiOwogICAgICAgIHNtYXNrLmJhY2tkcm9wID0gY29sb3JTcGFjZS5nZXRSZ2JIZXgoc21hc2suYmFja2Ryb3AsIDApOwogICAgICB9CiAgICAgIG9wZXJhdG9yTGlzdC5hZGRPcChPUFMuYmVnaW5Hcm91cCwgW2dyb3VwT3B0aW9uc10pOwogICAgfQogICAgY29uc3QgZjMybWF0cml4ID0gbWF0cml4ICYmIG5ldyBGbG9hdDMyQXJyYXkobWF0cml4KTsKICAgIGNvbnN0IGYzMmJib3ggPSAhZ3JvdXAgJiYgYmJveCAmJiBuZXcgRmxvYXQzMkFycmF5KGJib3gpIHx8IG51bGw7CiAgICBjb25zdCBhcmdzID0gW2YzMm1hdHJpeCwgZjMyYmJveF07CiAgICBvcGVyYXRvckxpc3QuYWRkT3AoT1BTLnBhaW50Rm9ybVhPYmplY3RCZWdpbiwgYXJncyk7CiAgICBjb25zdCBsb2NhbFJlc291cmNlcyA9IGRpY3QuZ2V0KCJSZXNvdXJjZXMiKTsKICAgIGF3YWl0IHRoaXMuZ2V0T3BlcmF0b3JMaXN0KHsKICAgICAgc3RyZWFtOiB4b2JqLAogICAgICB0YXNrLAogICAgICByZXNvdXJjZXM6IGxvY2FsUmVzb3VyY2VzIGluc3RhbmNlb2YgRGljdCA/IGxvY2FsUmVzb3VyY2VzIDogcmVzb3VyY2VzLAogICAgICBvcGVyYXRvckxpc3QsCiAgICAgIGluaXRpYWxTdGF0ZSwKICAgICAgcHJldlJlZnM6IHNlZW5SZWZzCiAgICB9KTsKICAgIG9wZXJhdG9yTGlzdC5hZGRPcChPUFMucGFpbnRGb3JtWE9iamVjdEVuZCwgW10pOwogICAgaWYgKGdyb3VwKSB7CiAgICAgIG9wZXJhdG9yTGlzdC5hZGRPcChPUFMuZW5kR3JvdXAsIFtncm91cE9wdGlvbnNdKTsKICAgIH0KICAgIGlmIChvcHRpb25hbENvbnRlbnQgIT09IHVuZGVmaW5lZCkgewogICAgICBvcGVyYXRvckxpc3QuYWRkT3AoT1BTLmVuZE1hcmtlZENvbnRlbnQsIFtdKTsKICAgIH0KICB9CiAgX3NlbmRJbWdEYXRhKG9iaklkLCBpbWdEYXRhLCBjYWNoZUdsb2JhbGx5ID0gZmFsc2UpIHsKICAgIGNvbnN0IHRyYW5zZmVycyA9IGltZ0RhdGEgPyBbaW1nRGF0YS5iaXRtYXAgfHwgaW1nRGF0YS5kYXRhLmJ1ZmZlcl0gOiBudWxsOwogICAgaWYgKHRoaXMucGFyc2luZ1R5cGUzRm9udCB8fCBjYWNoZUdsb2JhbGx5KSB7CiAgICAgIHJldHVybiB0aGlzLmhhbmRsZXIuc2VuZCgiY29tbW9ub2JqIiwgW29iaklkLCAiSW1hZ2UiLCBpbWdEYXRhXSwgdHJhbnNmZXJzKTsKICAgIH0KICAgIHJldHVybiB0aGlzLmhhbmRsZXIuc2VuZCgib2JqIiwgW29iaklkLCB0aGlzLnBhZ2VJbmRleCwgIkltYWdlIiwgaW1nRGF0YV0sIHRyYW5zZmVycyk7CiAgfQogIGFzeW5jIGJ1aWxkUGFpbnRJbWFnZVhPYmplY3QoewogICAgcmVzb3VyY2VzLAogICAgaW1hZ2UsCiAgICBpc0lubGluZSA9IGZhbHNlLAogICAgb3BlcmF0b3JMaXN0LAogICAgY2FjaGVLZXksCiAgICBsb2NhbEltYWdlQ2FjaGUsCiAgICBsb2NhbENvbG9yU3BhY2VDYWNoZQogIH0pIHsKICAgIGNvbnN0IHsKICAgICAgbWF4SW1hZ2VTaXplLAogICAgICBpZ25vcmVFcnJvcnMsCiAgICAgIGlzT2Zmc2NyZWVuQ2FudmFzU3VwcG9ydGVkCiAgICB9ID0gdGhpcy5vcHRpb25zOwogICAgY29uc3QgewogICAgICBkaWN0CiAgICB9ID0gaW1hZ2U7CiAgICBjb25zdCBpbWFnZVJlZiA9IGRpY3Qub2JqSWQ7CiAgICBjb25zdCB3ID0gZGljdC5nZXQoIlciLCAiV2lkdGgiKTsKICAgIGNvbnN0IGggPSBkaWN0LmdldCgiSCIsICJIZWlnaHQiKTsKICAgIGlmICghKHcgJiYgdHlwZW9mIHcgPT09ICJudW1iZXIiKSB8fCAhKGggJiYgdHlwZW9mIGggPT09ICJudW1iZXIiKSkgewogICAgICB3YXJuKCJJbWFnZSBkaW1lbnNpb25zIGFyZSBtaXNzaW5nLCBvciBub3QgbnVtYmVycy4iKTsKICAgICAgcmV0dXJuOwogICAgfQogICAgaWYgKG1heEltYWdlU2l6ZSAhPT0gLTEgJiYgdyAqIGggPiBtYXhJbWFnZVNpemUpIHsKICAgICAgY29uc3QgbXNnID0gIkltYWdlIGV4Y2VlZGVkIG1heGltdW0gYWxsb3dlZCBzaXplIGFuZCB3YXMgcmVtb3ZlZC4iOwogICAgICBpZiAoIWlnbm9yZUVycm9ycykgewogICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpOwogICAgICB9CiAgICAgIHdhcm4obXNnKTsKICAgICAgcmV0dXJuOwogICAgfQogICAgbGV0IG9wdGlvbmFsQ29udGVudDsKICAgIGlmIChkaWN0LmhhcygiT0MiKSkgewogICAgICBvcHRpb25hbENvbnRlbnQgPSBhd2FpdCB0aGlzLnBhcnNlTWFya2VkQ29udGVudFByb3BzKGRpY3QuZ2V0KCJPQyIpLCByZXNvdXJjZXMpOwogICAgfQogICAgY29uc3QgaW1hZ2VNYXNrID0gZGljdC5nZXQoIklNIiwgIkltYWdlTWFzayIpIHx8IGZhbHNlOwogICAgbGV0IGltZ0RhdGEsIGZuLCBhcmdzOwogICAgaWYgKGltYWdlTWFzaykgewogICAgICBpbWdEYXRhID0gYXdhaXQgUERGSW1hZ2UuY3JlYXRlTWFzayh7CiAgICAgICAgaW1hZ2UsCiAgICAgICAgaXNPZmZzY3JlZW5DYW52YXNTdXBwb3J0ZWQ6IGlzT2Zmc2NyZWVuQ2FudmFzU3VwcG9ydGVkICYmICF0aGlzLnBhcnNpbmdUeXBlM0ZvbnQKICAgICAgfSk7CiAgICAgIGlmIChpbWdEYXRhLmlzU2luZ2xlT3BhcXVlUGl4ZWwpIHsKICAgICAgICBmbiA9IE9QUy5wYWludFNvbGlkQ29sb3JJbWFnZU1hc2s7CiAgICAgICAgYXJncyA9IFtdOwogICAgICAgIG9wZXJhdG9yTGlzdC5hZGRJbWFnZU9wcyhmbiwgYXJncywgb3B0aW9uYWxDb250ZW50KTsKICAgICAgICBpZiAoY2FjaGVLZXkpIHsKICAgICAgICAgIGNvbnN0IGNhY2hlRGF0YSA9IHsKICAgICAgICAgICAgZm4sCiAgICAgICAgICAgIGFyZ3MsCiAgICAgICAgICAgIG9wdGlvbmFsQ29udGVudAogICAgICAgICAgfTsKICAgICAgICAgIGxvY2FsSW1hZ2VDYWNoZS5zZXQoY2FjaGVLZXksIGltYWdlUmVmLCBjYWNoZURhdGEpOwogICAgICAgICAgaWYgKGltYWdlUmVmKSB7CiAgICAgICAgICAgIHRoaXMuX3JlZ2lvbmFsSW1hZ2VDYWNoZS5zZXQobnVsbCwgaW1hZ2VSZWYsIGNhY2hlRGF0YSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBpZiAodGhpcy5wYXJzaW5nVHlwZTNGb250KSB7CiAgICAgICAgYXJncyA9IGNvbXBpbGVUeXBlM0dseXBoKGltZ0RhdGEpOwogICAgICAgIGlmIChhcmdzKSB7CiAgICAgICAgICBvcGVyYXRvckxpc3QuYWRkSW1hZ2VPcHMoT1BTLmNvbnN0cnVjdFBhdGgsIGFyZ3MsIG9wdGlvbmFsQ29udGVudCk7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIHdhcm4oIkNhbm5vdCBjb21waWxlIFR5cGUzIGdseXBoLiIpOwogICAgICAgIG9wZXJhdG9yTGlzdC5hZGRJbWFnZU9wcyhPUFMucGFpbnRJbWFnZU1hc2tYT2JqZWN0LCBbaW1nRGF0YV0sIG9wdGlvbmFsQ29udGVudCk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIGNvbnN0IG9iaklkID0gYG1hc2tfJHt0aGlzLmlkRmFjdG9yeS5jcmVhdGVPYmpJZCgpfWA7CiAgICAgIG9wZXJhdG9yTGlzdC5hZGREZXBlbmRlbmN5KG9iaklkKTsKICAgICAgaW1nRGF0YS5kYXRhTGVuID0gaW1nRGF0YS5iaXRtYXAgPyBpbWdEYXRhLndpZHRoICogaW1nRGF0YS5oZWlnaHQgKiA0IDogaW1nRGF0YS5kYXRhLmxlbmd0aDsKICAgICAgdGhpcy5fc2VuZEltZ0RhdGEob2JqSWQsIGltZ0RhdGEpOwogICAgICBmbiA9IE9QUy5wYWludEltYWdlTWFza1hPYmplY3Q7CiAgICAgIGFyZ3MgPSBbewogICAgICAgIGRhdGE6IG9iaklkLAogICAgICAgIHdpZHRoOiBpbWdEYXRhLndpZHRoLAogICAgICAgIGhlaWdodDogaW1nRGF0YS5oZWlnaHQsCiAgICAgICAgaW50ZXJwb2xhdGU6IGltZ0RhdGEuaW50ZXJwb2xhdGUsCiAgICAgICAgY291bnQ6IDEKICAgICAgfV07CiAgICAgIG9wZXJhdG9yTGlzdC5hZGRJbWFnZU9wcyhmbiwgYXJncywgb3B0aW9uYWxDb250ZW50KTsKICAgICAgaWYgKGNhY2hlS2V5KSB7CiAgICAgICAgY29uc3QgY2FjaGVEYXRhID0gewogICAgICAgICAgb2JqSWQsCiAgICAgICAgICBmbiwKICAgICAgICAgIGFyZ3MsCiAgICAgICAgICBvcHRpb25hbENvbnRlbnQKICAgICAgICB9OwogICAgICAgIGxvY2FsSW1hZ2VDYWNoZS5zZXQoY2FjaGVLZXksIGltYWdlUmVmLCBjYWNoZURhdGEpOwogICAgICAgIGlmIChpbWFnZVJlZikgewogICAgICAgICAgdGhpcy5fcmVnaW9uYWxJbWFnZUNhY2hlLnNldChudWxsLCBpbWFnZVJlZiwgY2FjaGVEYXRhKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuOwogICAgfQogICAgY29uc3QgU01BTExfSU1BR0VfRElNRU5TSU9OUyA9IDIwMDsKICAgIGNvbnN0IGhhc01hc2sgPSBkaWN0LmhhcygiU01hc2siKSB8fCBkaWN0LmhhcygiTWFzayIpOwogICAgaWYgKGlzSW5saW5lICYmIHcgKyBoIDwgU01BTExfSU1BR0VfRElNRU5TSU9OUyAmJiAhaGFzTWFzaykgewogICAgICB0cnkgewogICAgICAgIGNvbnN0IGltYWdlT2JqID0gbmV3IFBERkltYWdlKHsKICAgICAgICAgIHhyZWY6IHRoaXMueHJlZiwKICAgICAgICAgIHJlczogcmVzb3VyY2VzLAogICAgICAgICAgaW1hZ2UsCiAgICAgICAgICBpc0lubGluZSwKICAgICAgICAgIHBkZkZ1bmN0aW9uRmFjdG9yeTogdGhpcy5fcGRmRnVuY3Rpb25GYWN0b3J5LAogICAgICAgICAgZ2xvYmFsQ29sb3JTcGFjZUNhY2hlOiB0aGlzLmdsb2JhbENvbG9yU3BhY2VDYWNoZSwKICAgICAgICAgIGxvY2FsQ29sb3JTcGFjZUNhY2hlCiAgICAgICAgfSk7CiAgICAgICAgaW1nRGF0YSA9IGF3YWl0IGltYWdlT2JqLmNyZWF0ZUltYWdlRGF0YSh0cnVlLCBmYWxzZSk7CiAgICAgICAgb3BlcmF0b3JMaXN0LmFkZEltYWdlT3BzKE9QUy5wYWludElubGluZUltYWdlWE9iamVjdCwgW2ltZ0RhdGFdLCBvcHRpb25hbENvbnRlbnQpOwogICAgICB9IGNhdGNoIChyZWFzb24pIHsKICAgICAgICBjb25zdCBtc2cgPSBgVW5hYmxlIHRvIGRlY29kZSBpbmxpbmUgaW1hZ2U6ICIke3JlYXNvbn0iLmA7CiAgICAgICAgaWYgKCFpZ25vcmVFcnJvcnMpIHsKICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpOwogICAgICAgIH0KICAgICAgICB3YXJuKG1zZyk7CiAgICAgIH0KICAgICAgcmV0dXJuOwogICAgfQogICAgbGV0IG9iaklkID0gYGltZ18ke3RoaXMuaWRGYWN0b3J5LmNyZWF0ZU9iaklkKCl9YCwKICAgICAgY2FjaGVHbG9iYWxseSA9IGZhbHNlLAogICAgICBnbG9iYWxDYWNoZURhdGEgPSBudWxsOwogICAgaWYgKHRoaXMucGFyc2luZ1R5cGUzRm9udCkgewogICAgICBvYmpJZCA9IGAke3RoaXMuaWRGYWN0b3J5LmdldERvY0lkKCl9X3R5cGUzXyR7b2JqSWR9YDsKICAgIH0gZWxzZSBpZiAoY2FjaGVLZXkgJiYgaW1hZ2VSZWYpIHsKICAgICAgY2FjaGVHbG9iYWxseSA9IHRoaXMuZ2xvYmFsSW1hZ2VDYWNoZS5zaG91bGRDYWNoZShpbWFnZVJlZiwgdGhpcy5wYWdlSW5kZXgpOwogICAgICBpZiAoY2FjaGVHbG9iYWxseSkgewogICAgICAgIGFzc2VydCghaXNJbmxpbmUsICJDYW5ub3QgY2FjaGUgYW4gaW5saW5lIGltYWdlIGdsb2JhbGx5LiIpOwogICAgICAgIG9iaklkID0gYCR7dGhpcy5pZEZhY3RvcnkuZ2V0RG9jSWQoKX1fJHtvYmpJZH1gOwogICAgICB9CiAgICB9CiAgICBvcGVyYXRvckxpc3QuYWRkRGVwZW5kZW5jeShvYmpJZCk7CiAgICBmbiA9IE9QUy5wYWludEltYWdlWE9iamVjdDsKICAgIGFyZ3MgPSBbb2JqSWQsIHcsIGhdOwogICAgb3BlcmF0b3JMaXN0LmFkZEltYWdlT3BzKGZuLCBhcmdzLCBvcHRpb25hbENvbnRlbnQsIGhhc01hc2spOwogICAgaWYgKGNhY2hlR2xvYmFsbHkpIHsKICAgICAgZ2xvYmFsQ2FjaGVEYXRhID0gewogICAgICAgIG9iaklkLAogICAgICAgIGZuLAogICAgICAgIGFyZ3MsCiAgICAgICAgb3B0aW9uYWxDb250ZW50LAogICAgICAgIGhhc01hc2ssCiAgICAgICAgYnl0ZVNpemU6IDAKICAgICAgfTsKICAgICAgaWYgKHRoaXMuZ2xvYmFsSW1hZ2VDYWNoZS5oYXNEZWNvZGVGYWlsZWQoaW1hZ2VSZWYpKSB7CiAgICAgICAgdGhpcy5nbG9iYWxJbWFnZUNhY2hlLnNldERhdGEoaW1hZ2VSZWYsIGdsb2JhbENhY2hlRGF0YSk7CiAgICAgICAgdGhpcy5fc2VuZEltZ0RhdGEob2JqSWQsIG51bGwsIGNhY2hlR2xvYmFsbHkpOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBpZiAodyAqIGggPiAyNTAwMDAgfHwgaGFzTWFzaykgewogICAgICAgIGNvbnN0IGxvY2FsTGVuZ3RoID0gYXdhaXQgdGhpcy5oYW5kbGVyLnNlbmRXaXRoUHJvbWlzZSgiY29tbW9ub2JqIiwgW29iaklkLCAiQ29weUxvY2FsSW1hZ2UiLCB7CiAgICAgICAgICBpbWFnZVJlZgogICAgICAgIH1dKTsKICAgICAgICBpZiAobG9jYWxMZW5ndGgpIHsKICAgICAgICAgIHRoaXMuZ2xvYmFsSW1hZ2VDYWNoZS5zZXREYXRhKGltYWdlUmVmLCBnbG9iYWxDYWNoZURhdGEpOwogICAgICAgICAgdGhpcy5nbG9iYWxJbWFnZUNhY2hlLmFkZEJ5dGVTaXplKGltYWdlUmVmLCBsb2NhbExlbmd0aCk7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBQREZJbWFnZS5idWlsZEltYWdlKHsKICAgICAgeHJlZjogdGhpcy54cmVmLAogICAgICByZXM6IHJlc291cmNlcywKICAgICAgaW1hZ2UsCiAgICAgIGlzSW5saW5lLAogICAgICBwZGZGdW5jdGlvbkZhY3Rvcnk6IHRoaXMuX3BkZkZ1bmN0aW9uRmFjdG9yeSwKICAgICAgZ2xvYmFsQ29sb3JTcGFjZUNhY2hlOiB0aGlzLmdsb2JhbENvbG9yU3BhY2VDYWNoZSwKICAgICAgbG9jYWxDb2xvclNwYWNlQ2FjaGUKICAgIH0pLnRoZW4oYXN5bmMgaW1hZ2VPYmogPT4gewogICAgICBpbWdEYXRhID0gYXdhaXQgaW1hZ2VPYmouY3JlYXRlSW1hZ2VEYXRhKGZhbHNlLCBpc09mZnNjcmVlbkNhbnZhc1N1cHBvcnRlZCk7CiAgICAgIGltZ0RhdGEuZGF0YUxlbiA9IGltZ0RhdGEuYml0bWFwID8gaW1nRGF0YS53aWR0aCAqIGltZ0RhdGEuaGVpZ2h0ICogNCA6IGltZ0RhdGEuZGF0YS5sZW5ndGg7CiAgICAgIGltZ0RhdGEucmVmID0gaW1hZ2VSZWY7CiAgICAgIGlmIChjYWNoZUdsb2JhbGx5KSB7CiAgICAgICAgdGhpcy5nbG9iYWxJbWFnZUNhY2hlLmFkZEJ5dGVTaXplKGltYWdlUmVmLCBpbWdEYXRhLmRhdGFMZW4pOwogICAgICB9CiAgICAgIHJldHVybiB0aGlzLl9zZW5kSW1nRGF0YShvYmpJZCwgaW1nRGF0YSwgY2FjaGVHbG9iYWxseSk7CiAgICB9KS5jYXRjaChyZWFzb24gPT4gewogICAgICB3YXJuKGBVbmFibGUgdG8gZGVjb2RlIGltYWdlICIke29iaklkfSI6ICIke3JlYXNvbn0iLmApOwogICAgICBpZiAoaW1hZ2VSZWYpIHsKICAgICAgICB0aGlzLmdsb2JhbEltYWdlQ2FjaGUuYWRkRGVjb2RlRmFpbGVkKGltYWdlUmVmKTsKICAgICAgfQogICAgICByZXR1cm4gdGhpcy5fc2VuZEltZ0RhdGEob2JqSWQsIG51bGwsIGNhY2hlR2xvYmFsbHkpOwogICAgfSk7CiAgICBpZiAoY2FjaGVLZXkpIHsKICAgICAgY29uc3QgY2FjaGVEYXRhID0gewogICAgICAgIG9iaklkLAogICAgICAgIGZuLAogICAgICAgIGFyZ3MsCiAgICAgICAgb3B0aW9uYWxDb250ZW50LAogICAgICAgIGhhc01hc2sKICAgICAgfTsKICAgICAgbG9jYWxJbWFnZUNhY2hlLnNldChjYWNoZUtleSwgaW1hZ2VSZWYsIGNhY2hlRGF0YSk7CiAgICAgIGlmIChpbWFnZVJlZikgewogICAgICAgIHRoaXMuX3JlZ2lvbmFsSW1hZ2VDYWNoZS5zZXQobnVsbCwgaW1hZ2VSZWYsIGNhY2hlRGF0YSk7CiAgICAgICAgaWYgKGNhY2hlR2xvYmFsbHkpIHsKICAgICAgICAgIGFzc2VydChnbG9iYWxDYWNoZURhdGEsICJUaGUgZ2xvYmFsIGNhY2hlLWRhdGEgbXVzdCBiZSBhdmFpbGFibGUuIik7CiAgICAgICAgICB0aGlzLmdsb2JhbEltYWdlQ2FjaGUuc2V0RGF0YShpbWFnZVJlZiwgZ2xvYmFsQ2FjaGVEYXRhKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9CiAgaGFuZGxlU01hc2soc21hc2ssIHJlc291cmNlcywgb3BlcmF0b3JMaXN0LCB0YXNrLCBzdGF0ZU1hbmFnZXIsIGxvY2FsQ29sb3JTcGFjZUNhY2hlLCBzZWVuUmVmcykgewogICAgY29uc3Qgc21hc2tDb250ZW50ID0gc21hc2suZ2V0KCJHIik7CiAgICBjb25zdCBzbWFza09wdGlvbnMgPSB7CiAgICAgIHN1YnR5cGU6IHNtYXNrLmdldCgiUyIpLm5hbWUsCiAgICAgIGJhY2tkcm9wOiBzbWFzay5nZXQoIkJDIikKICAgIH07CiAgICBjb25zdCB0cmFuc2Zlck9iaiA9IHNtYXNrLmdldCgiVFIiKTsKICAgIGlmIChpc1BERkZ1bmN0aW9uKHRyYW5zZmVyT2JqKSkgewogICAgICBjb25zdCB0cmFuc2ZlckZuID0gdGhpcy5fcGRmRnVuY3Rpb25GYWN0b3J5LmNyZWF0ZSh0cmFuc2Zlck9iaik7CiAgICAgIGNvbnN0IHRyYW5zZmVyTWFwID0gbmV3IFVpbnQ4QXJyYXkoMjU2KTsKICAgICAgY29uc3QgdG1wID0gbmV3IEZsb2F0MzJBcnJheSgxKTsKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyNTY7IGkrKykgewogICAgICAgIHRtcFswXSA9IGkgLyAyNTU7CiAgICAgICAgdHJhbnNmZXJGbih0bXAsIDAsIHRtcCwgMCk7CiAgICAgICAgdHJhbnNmZXJNYXBbaV0gPSB0bXBbMF0gKiAyNTUgfCAwOwogICAgICB9CiAgICAgIHNtYXNrT3B0aW9ucy50cmFuc2Zlck1hcCA9IHRyYW5zZmVyTWFwOwogICAgfQogICAgcmV0dXJuIHRoaXMuYnVpbGRGb3JtWE9iamVjdChyZXNvdXJjZXMsIHNtYXNrQ29udGVudCwgc21hc2tPcHRpb25zLCBvcGVyYXRvckxpc3QsIHRhc2ssIHN0YXRlTWFuYWdlci5zdGF0ZS5jbG9uZSh7CiAgICAgIG5ld1BhdGg6IHRydWUKICAgIH0pLCBsb2NhbENvbG9yU3BhY2VDYWNoZSwgc2VlblJlZnMpOwogIH0KICBoYW5kbGVUcmFuc2ZlckZ1bmN0aW9uKHRyKSB7CiAgICBsZXQgdHJhbnNmZXJBcnJheTsKICAgIGlmIChBcnJheS5pc0FycmF5KHRyKSkgewogICAgICB0cmFuc2ZlckFycmF5ID0gdHI7CiAgICB9IGVsc2UgaWYgKGlzUERGRnVuY3Rpb24odHIpKSB7CiAgICAgIHRyYW5zZmVyQXJyYXkgPSBbdHJdOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICBjb25zdCB0cmFuc2Zlck1hcHMgPSBbXTsKICAgIGxldCBudW1GbnMgPSAwLAogICAgICBudW1FZmZlY3RmdWxGbnMgPSAwOwogICAgZm9yIChjb25zdCBlbnRyeSBvZiB0cmFuc2ZlckFycmF5KSB7CiAgICAgIGNvbnN0IHRyYW5zZmVyT2JqID0gdGhpcy54cmVmLmZldGNoSWZSZWYoZW50cnkpOwogICAgICBudW1GbnMrKzsKICAgICAgaWYgKGlzTmFtZSh0cmFuc2Zlck9iaiwgIklkZW50aXR5IikpIHsKICAgICAgICB0cmFuc2Zlck1hcHMucHVzaChudWxsKTsKICAgICAgICBjb250aW51ZTsKICAgICAgfSBlbHNlIGlmICghaXNQREZGdW5jdGlvbih0cmFuc2Zlck9iaikpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgICBjb25zdCB0cmFuc2ZlckZuID0gdGhpcy5fcGRmRnVuY3Rpb25GYWN0b3J5LmNyZWF0ZSh0cmFuc2Zlck9iaik7CiAgICAgIGNvbnN0IHRyYW5zZmVyTWFwID0gbmV3IFVpbnQ4QXJyYXkoMjU2KSwKICAgICAgICB0bXAgPSBuZXcgRmxvYXQzMkFycmF5KDEpOwogICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDI1NjsgaisrKSB7CiAgICAgICAgdG1wWzBdID0gaiAvIDI1NTsKICAgICAgICB0cmFuc2ZlckZuKHRtcCwgMCwgdG1wLCAwKTsKICAgICAgICB0cmFuc2Zlck1hcFtqXSA9IHRtcFswXSAqIDI1NSB8IDA7CiAgICAgIH0KICAgICAgdHJhbnNmZXJNYXBzLnB1c2godHJhbnNmZXJNYXApOwogICAgICBudW1FZmZlY3RmdWxGbnMrKzsKICAgIH0KICAgIGlmICghKG51bUZucyA9PT0gMSB8fCBudW1GbnMgPT09IDQpKSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgaWYgKG51bUVmZmVjdGZ1bEZucyA9PT0gMCkgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIHJldHVybiB0cmFuc2Zlck1hcHM7CiAgfQogIGhhbmRsZVRpbGluZ1R5cGUoZm4sIGNvbG9yLCByZXNvdXJjZXMsIHBhdHRlcm4sIHBhdHRlcm5EaWN0LCBvcGVyYXRvckxpc3QsIHRhc2ssIGxvY2FsVGlsaW5nUGF0dGVybkNhY2hlKSB7CiAgICBjb25zdCB0aWxpbmdPcExpc3QgPSBuZXcgT3BlcmF0b3JMaXN0KCk7CiAgICBjb25zdCBwYXR0ZXJuUmVzb3VyY2VzID0gRGljdC5tZXJnZSh7CiAgICAgIHhyZWY6IHRoaXMueHJlZiwKICAgICAgZGljdEFycmF5OiBbcGF0dGVybkRpY3QuZ2V0KCJSZXNvdXJjZXMiKSwgcmVzb3VyY2VzXQogICAgfSk7CiAgICByZXR1cm4gdGhpcy5nZXRPcGVyYXRvckxpc3QoewogICAgICBzdHJlYW06IHBhdHRlcm4sCiAgICAgIHRhc2ssCiAgICAgIHJlc291cmNlczogcGF0dGVyblJlc291cmNlcywKICAgICAgb3BlcmF0b3JMaXN0OiB0aWxpbmdPcExpc3QKICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICBjb25zdCBvcGVyYXRvckxpc3RJUiA9IHRpbGluZ09wTGlzdC5nZXRJUigpOwogICAgICBjb25zdCB0aWxpbmdQYXR0ZXJuSVIgPSBnZXRUaWxpbmdQYXR0ZXJuSVIob3BlcmF0b3JMaXN0SVIsIHBhdHRlcm5EaWN0LCBjb2xvcik7CiAgICAgIG9wZXJhdG9yTGlzdC5hZGREZXBlbmRlbmNpZXModGlsaW5nT3BMaXN0LmRlcGVuZGVuY2llcyk7CiAgICAgIG9wZXJhdG9yTGlzdC5hZGRPcChmbiwgdGlsaW5nUGF0dGVybklSKTsKICAgICAgaWYgKHBhdHRlcm5EaWN0Lm9iaklkKSB7CiAgICAgICAgbG9jYWxUaWxpbmdQYXR0ZXJuQ2FjaGUuc2V0KG51bGwsIHBhdHRlcm5EaWN0Lm9iaklkLCB7CiAgICAgICAgICBvcGVyYXRvckxpc3RJUiwKICAgICAgICAgIGRpY3Q6IHBhdHRlcm5EaWN0CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0pLmNhdGNoKHJlYXNvbiA9PiB7CiAgICAgIGlmIChyZWFzb24gaW5zdGFuY2VvZiBBYm9ydEV4Y2VwdGlvbikgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBpZiAodGhpcy5vcHRpb25zLmlnbm9yZUVycm9ycykgewogICAgICAgIHdhcm4oYGhhbmRsZVRpbGluZ1R5cGUgLSBpZ25vcmluZyBwYXR0ZXJuOiAiJHtyZWFzb259Ii5gKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgdGhyb3cgcmVhc29uOwogICAgfSk7CiAgfQogIGFzeW5jIGhhbmRsZVNldEZvbnQocmVzb3VyY2VzLCBmb250QXJncywgZm9udFJlZiwgb3BlcmF0b3JMaXN0LCB0YXNrLCBzdGF0ZSwgZmFsbGJhY2tGb250RGljdCA9IG51bGwsIGNzc0ZvbnRJbmZvID0gbnVsbCkgewogICAgY29uc3QgZm9udE5hbWUgPSBmb250QXJncz8uWzBdIGluc3RhbmNlb2YgTmFtZSA/IGZvbnRBcmdzWzBdLm5hbWUgOiBudWxsOwogICAgY29uc3QgdHJhbnNsYXRlZCA9IGF3YWl0IHRoaXMubG9hZEZvbnQoZm9udE5hbWUsIGZvbnRSZWYsIHJlc291cmNlcywgdGFzaywgZmFsbGJhY2tGb250RGljdCwgY3NzRm9udEluZm8pOwogICAgaWYgKHRyYW5zbGF0ZWQuZm9udC5pc1R5cGUzRm9udCkgewogICAgICBvcGVyYXRvckxpc3QuYWRkRGVwZW5kZW5jaWVzKHRyYW5zbGF0ZWQudHlwZTNEZXBlbmRlbmNpZXMpOwogICAgfQogICAgc3RhdGUuZm9udCA9IHRyYW5zbGF0ZWQuZm9udDsKICAgIHRyYW5zbGF0ZWQuc2VuZCh0aGlzLmhhbmRsZXIpOwogICAgcmV0dXJuIHRyYW5zbGF0ZWQubG9hZGVkTmFtZTsKICB9CiAgaGFuZGxlVGV4dChjaGFycywgc3RhdGUpIHsKICAgIGNvbnN0IGZvbnQgPSBzdGF0ZS5mb250OwogICAgY29uc3QgZ2x5cGhzID0gZm9udC5jaGFyc1RvR2x5cGhzKGNoYXJzKTsKICAgIGlmIChmb250LmRhdGEpIHsKICAgICAgY29uc3QgaXNBZGRUb1BhdGhTZXQgPSAhIShzdGF0ZS50ZXh0UmVuZGVyaW5nTW9kZSAmIFRleHRSZW5kZXJpbmdNb2RlLkFERF9UT19QQVRIX0ZMQUcpOwogICAgICBpZiAoaXNBZGRUb1BhdGhTZXQgfHwgc3RhdGUuZmlsbENvbG9yU3BhY2UubmFtZSA9PT0gIlBhdHRlcm4iIHx8IGZvbnQuZGlzYWJsZUZvbnRGYWNlKSB7CiAgICAgICAgUGFydGlhbEV2YWx1YXRvci5idWlsZEZvbnRQYXRocyhmb250LCBnbHlwaHMsIHRoaXMuaGFuZGxlciwgdGhpcy5vcHRpb25zKTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIGdseXBoczsKICB9CiAgZW5zdXJlU3RhdGVGb250KHN0YXRlKSB7CiAgICBpZiAoc3RhdGUuZm9udCkgewogICAgICByZXR1cm47CiAgICB9CiAgICBjb25zdCByZWFzb24gPSBuZXcgRm9ybWF0RXJyb3IoIk1pc3Npbmcgc2V0Rm9udCAoVGYpIG9wZXJhdG9yIGJlZm9yZSB0ZXh0IHJlbmRlcmluZyBvcGVyYXRvci4iKTsKICAgIGlmICh0aGlzLm9wdGlvbnMuaWdub3JlRXJyb3JzKSB7CiAgICAgIHdhcm4oYGVuc3VyZVN0YXRlRm9udDogIiR7cmVhc29ufSIuYCk7CiAgICAgIHJldHVybjsKICAgIH0KICAgIHRocm93IHJlYXNvbjsKICB9CiAgYXN5bmMgc2V0R1N0YXRlKHsKICAgIHJlc291cmNlcywKICAgIGdTdGF0ZSwKICAgIG9wZXJhdG9yTGlzdCwKICAgIGNhY2hlS2V5LAogICAgdGFzaywKICAgIHN0YXRlTWFuYWdlciwKICAgIGxvY2FsR1N0YXRlQ2FjaGUsCiAgICBsb2NhbENvbG9yU3BhY2VDYWNoZSwKICAgIHNlZW5SZWZzCiAgfSkgewogICAgY29uc3QgZ1N0YXRlUmVmID0gZ1N0YXRlLm9iaklkOwogICAgbGV0IGlzU2ltcGxlR1N0YXRlID0gdHJ1ZTsKICAgIGNvbnN0IGdTdGF0ZU9iaiA9IFtdOwogICAgbGV0IHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTsKICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGdTdGF0ZSkgewogICAgICBzd2l0Y2ggKGtleSkgewogICAgICAgIGNhc2UgIlR5cGUiOgogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAiTFciOgogICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gIm51bWJlciIpIHsKICAgICAgICAgICAgd2FybihgSW52YWxpZCBMVyAobGluZSB3aWR0aCk6ICR7dmFsdWV9YCk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgICAgZ1N0YXRlT2JqLnB1c2goW2tleSwgTWF0aC5hYnModmFsdWUpXSk7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJMQyI6CiAgICAgICAgY2FzZSAiTEoiOgogICAgICAgIGNhc2UgIk1MIjoKICAgICAgICBjYXNlICJEIjoKICAgICAgICBjYXNlICJSSSI6CiAgICAgICAgY2FzZSAiRkwiOgogICAgICAgIGNhc2UgIkNBIjoKICAgICAgICBjYXNlICJjYSI6CiAgICAgICAgICBnU3RhdGVPYmoucHVzaChba2V5LCB2YWx1ZV0pOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAiRm9udCI6CiAgICAgICAgICBpc1NpbXBsZUdTdGF0ZSA9IGZhbHNlOwogICAgICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbigoKSA9PiB0aGlzLmhhbmRsZVNldEZvbnQocmVzb3VyY2VzLCBudWxsLCB2YWx1ZVswXSwgb3BlcmF0b3JMaXN0LCB0YXNrLCBzdGF0ZU1hbmFnZXIuc3RhdGUpLnRoZW4oZnVuY3Rpb24gKGxvYWRlZE5hbWUpIHsKICAgICAgICAgICAgb3BlcmF0b3JMaXN0LmFkZERlcGVuZGVuY3kobG9hZGVkTmFtZSk7CiAgICAgICAgICAgIGdTdGF0ZU9iai5wdXNoKFtrZXksIFtsb2FkZWROYW1lLCB2YWx1ZVsxXV1dKTsKICAgICAgICAgIH0pKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgIkJNIjoKICAgICAgICAgIGdTdGF0ZU9iai5wdXNoKFtrZXksIG5vcm1hbGl6ZUJsZW5kTW9kZSh2YWx1ZSldKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgIlNNYXNrIjoKICAgICAgICAgIGlmIChpc05hbWUodmFsdWUsICJOb25lIikpIHsKICAgICAgICAgICAgZ1N0YXRlT2JqLnB1c2goW2tleSwgZmFsc2VdKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBEaWN0KSB7CiAgICAgICAgICAgIGlzU2ltcGxlR1N0YXRlID0gZmFsc2U7CiAgICAgICAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oKCkgPT4gdGhpcy5oYW5kbGVTTWFzayh2YWx1ZSwgcmVzb3VyY2VzLCBvcGVyYXRvckxpc3QsIHRhc2ssIHN0YXRlTWFuYWdlciwgbG9jYWxDb2xvclNwYWNlQ2FjaGUsIHNlZW5SZWZzKSk7CiAgICAgICAgICAgIGdTdGF0ZU9iai5wdXNoKFtrZXksIHRydWVdKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHdhcm4oIlVuc3VwcG9ydGVkIFNNYXNrIHR5cGUiKTsKICAgICAgICAgIH0KICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgIlRSIjoKICAgICAgICAgIGNvbnN0IHRyYW5zZmVyTWFwcyA9IHRoaXMuaGFuZGxlVHJhbnNmZXJGdW5jdGlvbih2YWx1ZSk7CiAgICAgICAgICBnU3RhdGVPYmoucHVzaChba2V5LCB0cmFuc2Zlck1hcHNdKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgIk9QIjoKICAgICAgICBjYXNlICJvcCI6CiAgICAgICAgY2FzZSAiT1BNIjoKICAgICAgICBjYXNlICJCRyI6CiAgICAgICAgY2FzZSAiQkcyIjoKICAgICAgICBjYXNlICJVQ1IiOgogICAgICAgIGNhc2UgIlVDUjIiOgogICAgICAgIGNhc2UgIlRSMiI6CiAgICAgICAgY2FzZSAiSFQiOgogICAgICAgIGNhc2UgIlNNIjoKICAgICAgICBjYXNlICJTQSI6CiAgICAgICAgY2FzZSAiQUlTIjoKICAgICAgICBjYXNlICJUSyI6CiAgICAgICAgICBpbmZvKCJncmFwaGljIHN0YXRlIG9wZXJhdG9yICIgKyBrZXkpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIGluZm8oIlVua25vd24gZ3JhcGhpYyBzdGF0ZSBvcGVyYXRvciAiICsga2V5KTsKICAgICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CiAgICBhd2FpdCBwcm9taXNlOwogICAgaWYgKGdTdGF0ZU9iai5sZW5ndGggPiAwKSB7CiAgICAgIG9wZXJhdG9yTGlzdC5hZGRPcChPUFMuc2V0R1N0YXRlLCBbZ1N0YXRlT2JqXSk7CiAgICB9CiAgICBpZiAoaXNTaW1wbGVHU3RhdGUpIHsKICAgICAgbG9jYWxHU3RhdGVDYWNoZS5zZXQoY2FjaGVLZXksIGdTdGF0ZVJlZiwgZ1N0YXRlT2JqKTsKICAgIH0KICB9CiAgbG9hZEZvbnQoZm9udE5hbWUsIGZvbnQsIHJlc291cmNlcywgdGFzaywgZmFsbGJhY2tGb250RGljdCA9IG51bGwsIGNzc0ZvbnRJbmZvID0gbnVsbCkgewogICAgY29uc3QgZXJyb3JGb250ID0gYXN5bmMgKCkgPT4gbmV3IFRyYW5zbGF0ZWRGb250KHsKICAgICAgbG9hZGVkTmFtZTogImdfZm9udF9lcnJvciIsCiAgICAgIGZvbnQ6IG5ldyBFcnJvckZvbnQoYEZvbnQgIiR7Zm9udE5hbWV9IiBpcyBub3QgYXZhaWxhYmxlLmApLAogICAgICBkaWN0OiBmb250CiAgICB9KTsKICAgIGxldCBmb250UmVmOwogICAgaWYgKGZvbnQpIHsKICAgICAgaWYgKGZvbnQgaW5zdGFuY2VvZiBSZWYpIHsKICAgICAgICBmb250UmVmID0gZm9udDsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgY29uc3QgZm9udFJlcyA9IHJlc291cmNlcy5nZXQoIkZvbnQiKTsKICAgICAgaWYgKGZvbnRSZXMpIHsKICAgICAgICBmb250UmVmID0gZm9udFJlcy5nZXRSYXcoZm9udE5hbWUpOwogICAgICB9CiAgICB9CiAgICBpZiAoZm9udFJlZikgewogICAgICBpZiAodGhpcy50eXBlM0ZvbnRSZWZzPy5oYXMoZm9udFJlZikpIHsKICAgICAgICByZXR1cm4gZXJyb3JGb250KCk7CiAgICAgIH0KICAgICAgaWYgKHRoaXMuZm9udENhY2hlLmhhcyhmb250UmVmKSkgewogICAgICAgIHJldHVybiB0aGlzLmZvbnRDYWNoZS5nZXQoZm9udFJlZik7CiAgICAgIH0KICAgICAgdHJ5IHsKICAgICAgICBmb250ID0gdGhpcy54cmVmLmZldGNoSWZSZWYoZm9udFJlZik7CiAgICAgIH0gY2F0Y2ggKGV4KSB7CiAgICAgICAgd2FybihgbG9hZEZvbnQgLSBsb29rdXAgZmFpbGVkOiAiJHtleH0iLmApOwogICAgICB9CiAgICB9CiAgICBpZiAoIShmb250IGluc3RhbmNlb2YgRGljdCkpIHsKICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuaWdub3JlRXJyb3JzICYmICF0aGlzLnBhcnNpbmdUeXBlM0ZvbnQpIHsKICAgICAgICB3YXJuKGBGb250ICIke2ZvbnROYW1lfSIgaXMgbm90IGF2YWlsYWJsZS5gKTsKICAgICAgICByZXR1cm4gZXJyb3JGb250KCk7CiAgICAgIH0KICAgICAgd2FybihgRm9udCAiJHtmb250TmFtZX0iIGlzIG5vdCBhdmFpbGFibGUgLS0gYXR0ZW1wdGluZyB0byBmYWxsYmFjayB0byBhIGRlZmF1bHQgZm9udC5gKTsKICAgICAgZm9udCA9IGZhbGxiYWNrRm9udERpY3QgfHwgUGFydGlhbEV2YWx1YXRvci5mYWxsYmFja0ZvbnREaWN0OwogICAgfQogICAgaWYgKGZvbnQuY2FjaGVLZXkgJiYgdGhpcy5mb250Q2FjaGUuaGFzKGZvbnQuY2FjaGVLZXkpKSB7CiAgICAgIHJldHVybiB0aGlzLmZvbnRDYWNoZS5nZXQoZm9udC5jYWNoZUtleSk7CiAgICB9CiAgICBjb25zdCB7CiAgICAgIHByb21pc2UsCiAgICAgIHJlc29sdmUKICAgIH0gPSBQcm9taXNlLndpdGhSZXNvbHZlcnMoKTsKICAgIGxldCBwcmVFdmFsdWF0ZWRGb250OwogICAgdHJ5IHsKICAgICAgcHJlRXZhbHVhdGVkRm9udCA9IHRoaXMucHJlRXZhbHVhdGVGb250KGZvbnQpOwogICAgICBwcmVFdmFsdWF0ZWRGb250LmNzc0ZvbnRJbmZvID0gY3NzRm9udEluZm87CiAgICB9IGNhdGNoIChyZWFzb24pIHsKICAgICAgd2FybihgbG9hZEZvbnQgLSBwcmVFdmFsdWF0ZUZvbnQgZmFpbGVkOiAiJHtyZWFzb259Ii5gKTsKICAgICAgcmV0dXJuIGVycm9yRm9udCgpOwogICAgfQogICAgY29uc3QgewogICAgICBkZXNjcmlwdG9yLAogICAgICBoYXNoCiAgICB9ID0gcHJlRXZhbHVhdGVkRm9udDsKICAgIGNvbnN0IGZvbnRSZWZJc1JlZiA9IGZvbnRSZWYgaW5zdGFuY2VvZiBSZWY7CiAgICBsZXQgZm9udElEOwogICAgaWYgKGhhc2ggJiYgZGVzY3JpcHRvciBpbnN0YW5jZW9mIERpY3QpIHsKICAgICAgY29uc3QgZm9udEFsaWFzZXMgPSBkZXNjcmlwdG9yLmZvbnRBbGlhc2VzIHx8PSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgICBpZiAoZm9udEFsaWFzZXNbaGFzaF0pIHsKICAgICAgICBjb25zdCBhbGlhc0ZvbnRSZWYgPSBmb250QWxpYXNlc1toYXNoXS5hbGlhc1JlZjsKICAgICAgICBpZiAoZm9udFJlZklzUmVmICYmIGFsaWFzRm9udFJlZiAmJiB0aGlzLmZvbnRDYWNoZS5oYXMoYWxpYXNGb250UmVmKSkgewogICAgICAgICAgdGhpcy5mb250Q2FjaGUucHV0QWxpYXMoZm9udFJlZiwgYWxpYXNGb250UmVmKTsKICAgICAgICAgIHJldHVybiB0aGlzLmZvbnRDYWNoZS5nZXQoZm9udFJlZik7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIGZvbnRBbGlhc2VzW2hhc2hdID0gewogICAgICAgICAgZm9udElEOiB0aGlzLmlkRmFjdG9yeS5jcmVhdGVGb250SWQoKQogICAgICAgIH07CiAgICAgIH0KICAgICAgaWYgKGZvbnRSZWZJc1JlZikgewogICAgICAgIGZvbnRBbGlhc2VzW2hhc2hdLmFsaWFzUmVmID0gZm9udFJlZjsKICAgICAgfQogICAgICBmb250SUQgPSBmb250QWxpYXNlc1toYXNoXS5mb250SUQ7CiAgICB9IGVsc2UgewogICAgICBmb250SUQgPSB0aGlzLmlkRmFjdG9yeS5jcmVhdGVGb250SWQoKTsKICAgIH0KICAgIGFzc2VydChmb250SUQ/LnN0YXJ0c1dpdGgoImYiKSwgJ1RoZSAiZm9udElEIiBtdXN0IGJlIChjb3JyZWN0bHkpIGRlZmluZWQuJyk7CiAgICBpZiAoZm9udFJlZklzUmVmKSB7CiAgICAgIHRoaXMuZm9udENhY2hlLnB1dChmb250UmVmLCBwcm9taXNlKTsKICAgIH0gZWxzZSB7CiAgICAgIGZvbnQuY2FjaGVLZXkgPSBgY2FjaGVLZXlfJHtmb250SUR9YDsKICAgICAgdGhpcy5mb250Q2FjaGUucHV0KGZvbnQuY2FjaGVLZXksIHByb21pc2UpOwogICAgfQogICAgZm9udC5sb2FkZWROYW1lID0gYCR7dGhpcy5pZEZhY3RvcnkuZ2V0RG9jSWQoKX1fJHtmb250SUR9YDsKICAgIHRoaXMudHJhbnNsYXRlRm9udChwcmVFdmFsdWF0ZWRGb250KS50aGVuKGFzeW5jIHRyYW5zbGF0ZWRGb250ID0+IHsKICAgICAgY29uc3QgdHJhbnNsYXRlZCA9IG5ldyBUcmFuc2xhdGVkRm9udCh7CiAgICAgICAgbG9hZGVkTmFtZTogZm9udC5sb2FkZWROYW1lLAogICAgICAgIGZvbnQ6IHRyYW5zbGF0ZWRGb250LAogICAgICAgIGRpY3Q6IGZvbnQKICAgICAgfSk7CiAgICAgIGlmICh0cmFuc2xhdGVkRm9udC5pc1R5cGUzRm9udCkgewogICAgICAgIHRyeSB7CiAgICAgICAgICBhd2FpdCB0cmFuc2xhdGVkLmxvYWRUeXBlM0RhdGEodGhpcywgcmVzb3VyY2VzLCB0YXNrKTsKICAgICAgICB9IGNhdGNoIChyZWFzb24pIHsKICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVHlwZTMgZm9udCBsb2FkIGVycm9yOiAke3JlYXNvbn1gKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmVzb2x2ZSh0cmFuc2xhdGVkKTsKICAgIH0pLmNhdGNoKHJlYXNvbiA9PiB7CiAgICAgIHdhcm4oYGxvYWRGb250IC0gdHJhbnNsYXRlRm9udCBmYWlsZWQ6ICIke3JlYXNvbn0iLmApOwogICAgICByZXNvbHZlKG5ldyBUcmFuc2xhdGVkRm9udCh7CiAgICAgICAgbG9hZGVkTmFtZTogZm9udC5sb2FkZWROYW1lLAogICAgICAgIGZvbnQ6IG5ldyBFcnJvckZvbnQocmVhc29uPy5tZXNzYWdlKSwKICAgICAgICBkaWN0OiBmb250CiAgICAgIH0pKTsKICAgIH0pOwogICAgcmV0dXJuIHByb21pc2U7CiAgfQogIGJ1aWxkUGF0aChmbiwgYXJncywgc3RhdGUpIHsKICAgIGNvbnN0IHsKICAgICAgcGF0aE1pbk1heDogbWluTWF4LAogICAgICBwYXRoQnVmZmVyCiAgICB9ID0gc3RhdGU7CiAgICBzd2l0Y2ggKGZuIHwgMCkgewogICAgICBjYXNlIE9QUy5yZWN0YW5nbGU6CiAgICAgICAgewogICAgICAgICAgY29uc3QgeCA9IHN0YXRlLmN1cnJlbnRQb2ludFggPSBhcmdzWzBdOwogICAgICAgICAgY29uc3QgeSA9IHN0YXRlLmN1cnJlbnRQb2ludFkgPSBhcmdzWzFdOwogICAgICAgICAgY29uc3Qgd2lkdGggPSBhcmdzWzJdOwogICAgICAgICAgY29uc3QgaGVpZ2h0ID0gYXJnc1szXTsKICAgICAgICAgIGNvbnN0IHh3ID0geCArIHdpZHRoOwogICAgICAgICAgY29uc3QgeWggPSB5ICsgaGVpZ2h0OwogICAgICAgICAgaWYgKHdpZHRoID09PSAwIHx8IGhlaWdodCA9PT0gMCkgewogICAgICAgICAgICBwYXRoQnVmZmVyLnB1c2goRHJhd09QUy5tb3ZlVG8sIHgsIHksIERyYXdPUFMubGluZVRvLCB4dywgeWgsIERyYXdPUFMuY2xvc2VQYXRoKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHBhdGhCdWZmZXIucHVzaChEcmF3T1BTLm1vdmVUbywgeCwgeSwgRHJhd09QUy5saW5lVG8sIHh3LCB5LCBEcmF3T1BTLmxpbmVUbywgeHcsIHloLCBEcmF3T1BTLmxpbmVUbywgeCwgeWgsIERyYXdPUFMuY2xvc2VQYXRoKTsKICAgICAgICAgIH0KICAgICAgICAgIFV0aWwucmVjdEJvdW5kaW5nQm94KHgsIHksIHh3LCB5aCwgbWluTWF4KTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgY2FzZSBPUFMubW92ZVRvOgogICAgICAgIHsKICAgICAgICAgIGNvbnN0IHggPSBzdGF0ZS5jdXJyZW50UG9pbnRYID0gYXJnc1swXTsKICAgICAgICAgIGNvbnN0IHkgPSBzdGF0ZS5jdXJyZW50UG9pbnRZID0gYXJnc1sxXTsKICAgICAgICAgIHBhdGhCdWZmZXIucHVzaChEcmF3T1BTLm1vdmVUbywgeCwgeSk7CiAgICAgICAgICBVdGlsLnBvaW50Qm91bmRpbmdCb3goeCwgeSwgbWluTWF4KTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgY2FzZSBPUFMubGluZVRvOgogICAgICAgIHsKICAgICAgICAgIGNvbnN0IHggPSBzdGF0ZS5jdXJyZW50UG9pbnRYID0gYXJnc1swXTsKICAgICAgICAgIGNvbnN0IHkgPSBzdGF0ZS5jdXJyZW50UG9pbnRZID0gYXJnc1sxXTsKICAgICAgICAgIHBhdGhCdWZmZXIucHVzaChEcmF3T1BTLmxpbmVUbywgeCwgeSk7CiAgICAgICAgICBVdGlsLnBvaW50Qm91bmRpbmdCb3goeCwgeSwgbWluTWF4KTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgY2FzZSBPUFMuY3VydmVUbzoKICAgICAgICB7CiAgICAgICAgICBjb25zdCBzdGFydFggPSBzdGF0ZS5jdXJyZW50UG9pbnRYOwogICAgICAgICAgY29uc3Qgc3RhcnRZID0gc3RhdGUuY3VycmVudFBvaW50WTsKICAgICAgICAgIGNvbnN0IFt4MSwgeTEsIHgyLCB5MiwgeCwgeV0gPSBhcmdzOwogICAgICAgICAgc3RhdGUuY3VycmVudFBvaW50WCA9IHg7CiAgICAgICAgICBzdGF0ZS5jdXJyZW50UG9pbnRZID0geTsKICAgICAgICAgIHBhdGhCdWZmZXIucHVzaChEcmF3T1BTLmN1cnZlVG8sIHgxLCB5MSwgeDIsIHkyLCB4LCB5KTsKICAgICAgICAgIFV0aWwuYmV6aWVyQm91bmRpbmdCb3goc3RhcnRYLCBzdGFydFksIHgxLCB5MSwgeDIsIHkyLCB4LCB5LCBtaW5NYXgpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICBjYXNlIE9QUy5jdXJ2ZVRvMjoKICAgICAgICB7CiAgICAgICAgICBjb25zdCBzdGFydFggPSBzdGF0ZS5jdXJyZW50UG9pbnRYOwogICAgICAgICAgY29uc3Qgc3RhcnRZID0gc3RhdGUuY3VycmVudFBvaW50WTsKICAgICAgICAgIGNvbnN0IFt4MSwgeTEsIHgsIHldID0gYXJnczsKICAgICAgICAgIHN0YXRlLmN1cnJlbnRQb2ludFggPSB4OwogICAgICAgICAgc3RhdGUuY3VycmVudFBvaW50WSA9IHk7CiAgICAgICAgICBwYXRoQnVmZmVyLnB1c2goRHJhd09QUy5jdXJ2ZVRvLCBzdGFydFgsIHN0YXJ0WSwgeDEsIHkxLCB4LCB5KTsKICAgICAgICAgIFV0aWwuYmV6aWVyQm91bmRpbmdCb3goc3RhcnRYLCBzdGFydFksIHN0YXJ0WCwgc3RhcnRZLCB4MSwgeTEsIHgsIHksIG1pbk1heCk7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIGNhc2UgT1BTLmN1cnZlVG8zOgogICAgICAgIHsKICAgICAgICAgIGNvbnN0IHN0YXJ0WCA9IHN0YXRlLmN1cnJlbnRQb2ludFg7CiAgICAgICAgICBjb25zdCBzdGFydFkgPSBzdGF0ZS5jdXJyZW50UG9pbnRZOwogICAgICAgICAgY29uc3QgW3gxLCB5MSwgeCwgeV0gPSBhcmdzOwogICAgICAgICAgc3RhdGUuY3VycmVudFBvaW50WCA9IHg7CiAgICAgICAgICBzdGF0ZS5jdXJyZW50UG9pbnRZID0geTsKICAgICAgICAgIHBhdGhCdWZmZXIucHVzaChEcmF3T1BTLmN1cnZlVG8sIHgxLCB5MSwgeCwgeSwgeCwgeSk7CiAgICAgICAgICBVdGlsLmJlemllckJvdW5kaW5nQm94KHN0YXJ0WCwgc3RhcnRZLCB4MSwgeTEsIHgsIHksIHgsIHksIG1pbk1heCk7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIGNhc2UgT1BTLmNsb3NlUGF0aDoKICAgICAgICBwYXRoQnVmZmVyLnB1c2goRHJhd09QUy5jbG9zZVBhdGgpOwogICAgICAgIGJyZWFrOwogICAgfQogIH0KICBfZ2V0Q29sb3JTcGFjZShjcywgcmVzb3VyY2VzLCBsb2NhbENvbG9yU3BhY2VDYWNoZSkgewogICAgcmV0dXJuIENvbG9yU3BhY2VVdGlscy5wYXJzZSh7CiAgICAgIGNzLAogICAgICB4cmVmOiB0aGlzLnhyZWYsCiAgICAgIHJlc291cmNlcywKICAgICAgcGRmRnVuY3Rpb25GYWN0b3J5OiB0aGlzLl9wZGZGdW5jdGlvbkZhY3RvcnksCiAgICAgIGdsb2JhbENvbG9yU3BhY2VDYWNoZTogdGhpcy5nbG9iYWxDb2xvclNwYWNlQ2FjaGUsCiAgICAgIGxvY2FsQ29sb3JTcGFjZUNhY2hlLAogICAgICBhc3luY0lmTm90Q2FjaGVkOiB0cnVlCiAgICB9KTsKICB9CiAgYXN5bmMgX2hhbmRsZUNvbG9yU3BhY2UoY3NQcm9taXNlKSB7CiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgY3NQcm9taXNlOwogICAgfSBjYXRjaCAoZXgpIHsKICAgICAgaWYgKGV4IGluc3RhbmNlb2YgQWJvcnRFeGNlcHRpb24pIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgICBpZiAodGhpcy5vcHRpb25zLmlnbm9yZUVycm9ycykgewogICAgICAgIHdhcm4oYF9oYW5kbGVDb2xvclNwYWNlIC0gaWdub3JpbmcgQ29sb3JTcGFjZTogIiR7ZXh9Ii5gKTsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgICB0aHJvdyBleDsKICAgIH0KICB9CiAgcGFyc2VTaGFkaW5nKHsKICAgIHNoYWRpbmcsCiAgICByZXNvdXJjZXMsCiAgICBsb2NhbENvbG9yU3BhY2VDYWNoZSwKICAgIGxvY2FsU2hhZGluZ1BhdHRlcm5DYWNoZQogIH0pIHsKICAgIGxldCBpZCA9IGxvY2FsU2hhZGluZ1BhdHRlcm5DYWNoZS5nZXQoc2hhZGluZyk7CiAgICBpZiAoaWQpIHsKICAgICAgcmV0dXJuIGlkOwogICAgfQogICAgbGV0IHBhdHRlcm5JUjsKICAgIHRyeSB7CiAgICAgIGNvbnN0IHNoYWRpbmdGaWxsID0gUGF0dGVybi5wYXJzZVNoYWRpbmcoc2hhZGluZywgdGhpcy54cmVmLCByZXNvdXJjZXMsIHRoaXMuX3BkZkZ1bmN0aW9uRmFjdG9yeSwgdGhpcy5nbG9iYWxDb2xvclNwYWNlQ2FjaGUsIGxvY2FsQ29sb3JTcGFjZUNhY2hlKTsKICAgICAgcGF0dGVybklSID0gc2hhZGluZ0ZpbGwuZ2V0SVIoKTsKICAgIH0gY2F0Y2ggKHJlYXNvbikgewogICAgICBpZiAocmVhc29uIGluc3RhbmNlb2YgQWJvcnRFeGNlcHRpb24pIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgICBpZiAodGhpcy5vcHRpb25zLmlnbm9yZUVycm9ycykgewogICAgICAgIHdhcm4oYHBhcnNlU2hhZGluZyAtIGlnbm9yaW5nIHNoYWRpbmc6ICIke3JlYXNvbn0iLmApOwogICAgICAgIGxvY2FsU2hhZGluZ1BhdHRlcm5DYWNoZS5zZXQoc2hhZGluZywgbnVsbCk7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgICAgdGhyb3cgcmVhc29uOwogICAgfQogICAgaWQgPSBgcGF0dGVybl8ke3RoaXMuaWRGYWN0b3J5LmNyZWF0ZU9iaklkKCl9YDsKICAgIGlmICh0aGlzLnBhcnNpbmdUeXBlM0ZvbnQpIHsKICAgICAgaWQgPSBgJHt0aGlzLmlkRmFjdG9yeS5nZXREb2NJZCgpfV90eXBlM18ke2lkfWA7CiAgICB9CiAgICBsb2NhbFNoYWRpbmdQYXR0ZXJuQ2FjaGUuc2V0KHNoYWRpbmcsIGlkKTsKICAgIGlmICh0aGlzLnBhcnNpbmdUeXBlM0ZvbnQpIHsKICAgICAgdGhpcy5oYW5kbGVyLnNlbmQoImNvbW1vbm9iaiIsIFtpZCwgIlBhdHRlcm4iLCBwYXR0ZXJuSVJdKTsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMuaGFuZGxlci5zZW5kKCJvYmoiLCBbaWQsIHRoaXMucGFnZUluZGV4LCAiUGF0dGVybiIsIHBhdHRlcm5JUl0pOwogICAgfQogICAgcmV0dXJuIGlkOwogIH0KICBoYW5kbGVDb2xvck4ob3BlcmF0b3JMaXN0LCBmbiwgYXJncywgY3MsIHBhdHRlcm5zLCByZXNvdXJjZXMsIHRhc2ssIGxvY2FsQ29sb3JTcGFjZUNhY2hlLCBsb2NhbFRpbGluZ1BhdHRlcm5DYWNoZSwgbG9jYWxTaGFkaW5nUGF0dGVybkNhY2hlKSB7CiAgICBjb25zdCBwYXR0ZXJuTmFtZSA9IGFyZ3MucG9wKCk7CiAgICBpZiAocGF0dGVybk5hbWUgaW5zdGFuY2VvZiBOYW1lKSB7CiAgICAgIGNvbnN0IHJhd1BhdHRlcm4gPSBwYXR0ZXJucy5nZXRSYXcocGF0dGVybk5hbWUubmFtZSk7CiAgICAgIGNvbnN0IGxvY2FsVGlsaW5nUGF0dGVybiA9IHJhd1BhdHRlcm4gaW5zdGFuY2VvZiBSZWYgJiYgbG9jYWxUaWxpbmdQYXR0ZXJuQ2FjaGUuZ2V0QnlSZWYocmF3UGF0dGVybik7CiAgICAgIGlmIChsb2NhbFRpbGluZ1BhdHRlcm4pIHsKICAgICAgICB0cnkgewogICAgICAgICAgY29uc3QgY29sb3IgPSBjcy5iYXNlID8gY3MuYmFzZS5nZXRSZ2JIZXgoYXJncywgMCkgOiBudWxsOwogICAgICAgICAgY29uc3QgdGlsaW5nUGF0dGVybklSID0gZ2V0VGlsaW5nUGF0dGVybklSKGxvY2FsVGlsaW5nUGF0dGVybi5vcGVyYXRvckxpc3RJUiwgbG9jYWxUaWxpbmdQYXR0ZXJuLmRpY3QsIGNvbG9yKTsKICAgICAgICAgIG9wZXJhdG9yTGlzdC5hZGRPcChmbiwgdGlsaW5nUGF0dGVybklSKTsKICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgICAgICAgfSBjYXRjaCB7fQogICAgICB9CiAgICAgIGNvbnN0IHBhdHRlcm4gPSB0aGlzLnhyZWYuZmV0Y2hJZlJlZihyYXdQYXR0ZXJuKTsKICAgICAgaWYgKHBhdHRlcm4pIHsKICAgICAgICBjb25zdCBkaWN0ID0gcGF0dGVybiBpbnN0YW5jZW9mIEJhc2VTdHJlYW0gPyBwYXR0ZXJuLmRpY3QgOiBwYXR0ZXJuOwogICAgICAgIGNvbnN0IHR5cGVOdW0gPSBkaWN0LmdldCgiUGF0dGVyblR5cGUiKTsKICAgICAgICBpZiAodHlwZU51bSA9PT0gUGF0dGVyblR5cGUuVElMSU5HKSB7CiAgICAgICAgICBjb25zdCBjb2xvciA9IGNzLmJhc2UgPyBjcy5iYXNlLmdldFJnYkhleChhcmdzLCAwKSA6IG51bGw7CiAgICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGVUaWxpbmdUeXBlKGZuLCBjb2xvciwgcmVzb3VyY2VzLCBwYXR0ZXJuLCBkaWN0LCBvcGVyYXRvckxpc3QsIHRhc2ssIGxvY2FsVGlsaW5nUGF0dGVybkNhY2hlKTsKICAgICAgICB9IGVsc2UgaWYgKHR5cGVOdW0gPT09IFBhdHRlcm5UeXBlLlNIQURJTkcpIHsKICAgICAgICAgIGNvbnN0IHNoYWRpbmcgPSBkaWN0LmdldCgiU2hhZGluZyIpOwogICAgICAgICAgY29uc3Qgb2JqSWQgPSB0aGlzLnBhcnNlU2hhZGluZyh7CiAgICAgICAgICAgIHNoYWRpbmcsCiAgICAgICAgICAgIHJlc291cmNlcywKICAgICAgICAgICAgbG9jYWxDb2xvclNwYWNlQ2FjaGUsCiAgICAgICAgICAgIGxvY2FsU2hhZGluZ1BhdHRlcm5DYWNoZQogICAgICAgICAgfSk7CiAgICAgICAgICBpZiAob2JqSWQpIHsKICAgICAgICAgICAgY29uc3QgbWF0cml4ID0gbG9va3VwTWF0cml4KGRpY3QuZ2V0QXJyYXkoIk1hdHJpeCIpLCBudWxsKTsKICAgICAgICAgICAgb3BlcmF0b3JMaXN0LmFkZE9wKGZuLCBbIlNoYWRpbmciLCBvYmpJZCwgbWF0cml4XSk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgICAgIH0KICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoYFVua25vd24gUGF0dGVyblR5cGU6ICR7dHlwZU51bX1gKTsKICAgICAgfQogICAgfQogICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKGBVbmtub3duIFBhdHRlcm5OYW1lOiAke3BhdHRlcm5OYW1lfWApOwogIH0KICBfcGFyc2VWaXNpYmlsaXR5RXhwcmVzc2lvbihhcnJheSwgbmVzdGluZ0NvdW50ZXIsIGN1cnJlbnRSZXN1bHQpIHsKICAgIGNvbnN0IE1BWF9ORVNUSU5HID0gMTA7CiAgICBpZiAoKytuZXN0aW5nQ291bnRlciA+IE1BWF9ORVNUSU5HKSB7CiAgICAgIHdhcm4oIlZpc2liaWxpdHkgZXhwcmVzc2lvbiBpcyB0b28gZGVlcGx5IG5lc3RlZCIpOwogICAgICByZXR1cm47CiAgICB9CiAgICBjb25zdCBsZW5ndGggPSBhcnJheS5sZW5ndGg7CiAgICBjb25zdCBvcGVyYXRvciA9IHRoaXMueHJlZi5mZXRjaElmUmVmKGFycmF5WzBdKTsKICAgIGlmIChsZW5ndGggPCAyIHx8ICEob3BlcmF0b3IgaW5zdGFuY2VvZiBOYW1lKSkgewogICAgICB3YXJuKCJJbnZhbGlkIHZpc2liaWxpdHkgZXhwcmVzc2lvbiIpOwogICAgICByZXR1cm47CiAgICB9CiAgICBzd2l0Y2ggKG9wZXJhdG9yLm5hbWUpIHsKICAgICAgY2FzZSAiQW5kIjoKICAgICAgY2FzZSAiT3IiOgogICAgICBjYXNlICJOb3QiOgogICAgICAgIGN1cnJlbnRSZXN1bHQucHVzaChvcGVyYXRvci5uYW1lKTsKICAgICAgICBicmVhazsKICAgICAgZGVmYXVsdDoKICAgICAgICB3YXJuKGBJbnZhbGlkIG9wZXJhdG9yICR7b3BlcmF0b3IubmFtZX0gaW4gdmlzaWJpbGl0eSBleHByZXNzaW9uYCk7CiAgICAgICAgcmV0dXJuOwogICAgfQogICAgZm9yIChsZXQgaSA9IDE7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICBjb25zdCByYXcgPSBhcnJheVtpXTsKICAgICAgY29uc3Qgb2JqZWN0ID0gdGhpcy54cmVmLmZldGNoSWZSZWYocmF3KTsKICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2JqZWN0KSkgewogICAgICAgIGNvbnN0IG5lc3RlZFJlc3VsdCA9IFtdOwogICAgICAgIGN1cnJlbnRSZXN1bHQucHVzaChuZXN0ZWRSZXN1bHQpOwogICAgICAgIHRoaXMuX3BhcnNlVmlzaWJpbGl0eUV4cHJlc3Npb24ob2JqZWN0LCBuZXN0aW5nQ291bnRlciwgbmVzdGVkUmVzdWx0KTsKICAgICAgfSBlbHNlIGlmIChyYXcgaW5zdGFuY2VvZiBSZWYpIHsKICAgICAgICBjdXJyZW50UmVzdWx0LnB1c2gocmF3LnRvU3RyaW5nKCkpOwogICAgICB9CiAgICB9CiAgfQogIGFzeW5jIHBhcnNlTWFya2VkQ29udGVudFByb3BzKGNvbnRlbnRQcm9wZXJ0aWVzLCByZXNvdXJjZXMpIHsKICAgIGxldCBvcHRpb25hbENvbnRlbnQ7CiAgICBpZiAoY29udGVudFByb3BlcnRpZXMgaW5zdGFuY2VvZiBOYW1lKSB7CiAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSByZXNvdXJjZXMuZ2V0KCJQcm9wZXJ0aWVzIik7CiAgICAgIG9wdGlvbmFsQ29udGVudCA9IHByb3BlcnRpZXMuZ2V0KGNvbnRlbnRQcm9wZXJ0aWVzLm5hbWUpOwogICAgfSBlbHNlIGlmIChjb250ZW50UHJvcGVydGllcyBpbnN0YW5jZW9mIERpY3QpIHsKICAgICAgb3B0aW9uYWxDb250ZW50ID0gY29udGVudFByb3BlcnRpZXM7CiAgICB9IGVsc2UgewogICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoIk9wdGlvbmFsIGNvbnRlbnQgcHJvcGVydGllcyBtYWxmb3JtZWQuIik7CiAgICB9CiAgICBjb25zdCBvcHRpb25hbENvbnRlbnRUeXBlID0gb3B0aW9uYWxDb250ZW50LmdldCgiVHlwZSIpPy5uYW1lOwogICAgaWYgKG9wdGlvbmFsQ29udGVudFR5cGUgPT09ICJPQ0ciKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgdHlwZTogb3B0aW9uYWxDb250ZW50VHlwZSwKICAgICAgICBpZDogb3B0aW9uYWxDb250ZW50Lm9iaklkCiAgICAgIH07CiAgICB9IGVsc2UgaWYgKG9wdGlvbmFsQ29udGVudFR5cGUgPT09ICJPQ01EIikgewogICAgICBjb25zdCBleHByZXNzaW9uID0gb3B0aW9uYWxDb250ZW50LmdldCgiVkUiKTsKICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZXhwcmVzc2lvbikpIHsKICAgICAgICBjb25zdCByZXN1bHQgPSBbXTsKICAgICAgICB0aGlzLl9wYXJzZVZpc2liaWxpdHlFeHByZXNzaW9uKGV4cHJlc3Npb24sIDAsIHJlc3VsdCk7CiAgICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPiAwKSB7CiAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICB0eXBlOiAiT0NNRCIsCiAgICAgICAgICAgIGV4cHJlc3Npb246IHJlc3VsdAogICAgICAgICAgfTsKICAgICAgICB9CiAgICAgIH0KICAgICAgY29uc3Qgb3B0aW9uYWxDb250ZW50R3JvdXBzID0gb3B0aW9uYWxDb250ZW50LmdldCgiT0NHcyIpOwogICAgICBpZiAoQXJyYXkuaXNBcnJheShvcHRpb25hbENvbnRlbnRHcm91cHMpIHx8IG9wdGlvbmFsQ29udGVudEdyb3VwcyBpbnN0YW5jZW9mIERpY3QpIHsKICAgICAgICBjb25zdCBncm91cElkcyA9IFtdOwogICAgICAgIGlmIChBcnJheS5pc0FycmF5KG9wdGlvbmFsQ29udGVudEdyb3VwcykpIHsKICAgICAgICAgIGZvciAoY29uc3Qgb2NnIG9mIG9wdGlvbmFsQ29udGVudEdyb3VwcykgewogICAgICAgICAgICBncm91cElkcy5wdXNoKG9jZy50b1N0cmluZygpKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgZ3JvdXBJZHMucHVzaChvcHRpb25hbENvbnRlbnRHcm91cHMub2JqSWQpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gewogICAgICAgICAgdHlwZTogb3B0aW9uYWxDb250ZW50VHlwZSwKICAgICAgICAgIGlkczogZ3JvdXBJZHMsCiAgICAgICAgICBwb2xpY3k6IG9wdGlvbmFsQ29udGVudC5nZXQoIlAiKSBpbnN0YW5jZW9mIE5hbWUgPyBvcHRpb25hbENvbnRlbnQuZ2V0KCJQIikubmFtZSA6IG51bGwsCiAgICAgICAgICBleHByZXNzaW9uOiBudWxsCiAgICAgICAgfTsKICAgICAgfSBlbHNlIGlmIChvcHRpb25hbENvbnRlbnRHcm91cHMgaW5zdGFuY2VvZiBSZWYpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgdHlwZTogb3B0aW9uYWxDb250ZW50VHlwZSwKICAgICAgICAgIGlkOiBvcHRpb25hbENvbnRlbnRHcm91cHMudG9TdHJpbmcoKQogICAgICAgIH07CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBudWxsOwogIH0KICBnZXRPcGVyYXRvckxpc3QoewogICAgc3RyZWFtLAogICAgdGFzaywKICAgIHJlc291cmNlcywKICAgIG9wZXJhdG9yTGlzdCwKICAgIGluaXRpYWxTdGF0ZSA9IG51bGwsCiAgICBmYWxsYmFja0ZvbnREaWN0ID0gbnVsbCwKICAgIHByZXZSZWZzID0gbnVsbAogIH0pIHsKICAgIGNvbnN0IG9iaklkID0gc3RyZWFtLmRpY3Q/Lm9iaklkOwogICAgY29uc3Qgc2VlblJlZnMgPSBuZXcgUmVmU2V0KHByZXZSZWZzKTsKICAgIGlmIChvYmpJZCkgewogICAgICBpZiAocHJldlJlZnM/LmhhcyhvYmpJZCkpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGdldE9wZXJhdG9yTGlzdCAtIGlnbm9yaW5nIGNpcmN1bGFyIHJlZmVyZW5jZTogJHtvYmpJZH1gKTsKICAgICAgfQogICAgICBzZWVuUmVmcy5wdXQob2JqSWQpOwogICAgfQogICAgcmVzb3VyY2VzIHx8PSBEaWN0LmVtcHR5OwogICAgaW5pdGlhbFN0YXRlIHx8PSBuZXcgRXZhbFN0YXRlKCk7CiAgICBpZiAoIW9wZXJhdG9yTGlzdCkgewogICAgICB0aHJvdyBuZXcgRXJyb3IoJ2dldE9wZXJhdG9yTGlzdDogbWlzc2luZyAib3BlcmF0b3JMaXN0IiBwYXJhbWV0ZXInKTsKICAgIH0KICAgIGNvbnN0IHNlbGYgPSB0aGlzOwogICAgY29uc3QgeHJlZiA9IHRoaXMueHJlZjsKICAgIGNvbnN0IGxvY2FsSW1hZ2VDYWNoZSA9IG5ldyBMb2NhbEltYWdlQ2FjaGUoKTsKICAgIGNvbnN0IGxvY2FsQ29sb3JTcGFjZUNhY2hlID0gbmV3IExvY2FsQ29sb3JTcGFjZUNhY2hlKCk7CiAgICBjb25zdCBsb2NhbEdTdGF0ZUNhY2hlID0gbmV3IExvY2FsR1N0YXRlQ2FjaGUoKTsKICAgIGNvbnN0IGxvY2FsVGlsaW5nUGF0dGVybkNhY2hlID0gbmV3IExvY2FsVGlsaW5nUGF0dGVybkNhY2hlKCk7CiAgICBjb25zdCBsb2NhbFNoYWRpbmdQYXR0ZXJuQ2FjaGUgPSBuZXcgTWFwKCk7CiAgICBjb25zdCB4b2JqcyA9IHJlc291cmNlcy5nZXQoIlhPYmplY3QiKSB8fCBEaWN0LmVtcHR5OwogICAgY29uc3QgcGF0dGVybnMgPSByZXNvdXJjZXMuZ2V0KCJQYXR0ZXJuIikgfHwgRGljdC5lbXB0eTsKICAgIGNvbnN0IHN0YXRlTWFuYWdlciA9IG5ldyBTdGF0ZU1hbmFnZXIoaW5pdGlhbFN0YXRlKTsKICAgIGNvbnN0IHByZXByb2Nlc3NvciA9IG5ldyBFdmFsdWF0b3JQcmVwcm9jZXNzb3Ioc3RyZWFtLCB4cmVmLCBzdGF0ZU1hbmFnZXIpOwogICAgY29uc3QgdGltZVNsb3RNYW5hZ2VyID0gbmV3IFRpbWVTbG90TWFuYWdlcigpOwogICAgZnVuY3Rpb24gY2xvc2VQZW5kaW5nUmVzdG9yZU9QUyhhcmd1bWVudCkgewogICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBwcmVwcm9jZXNzb3Iuc2F2ZWRTdGF0ZXNEZXB0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgICBvcGVyYXRvckxpc3QuYWRkT3AoT1BTLnJlc3RvcmUsIFtdKTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VCb2R5KHJlc29sdmUsIHJlamVjdCkgewogICAgICBjb25zdCBuZXh0ID0gZnVuY3Rpb24gKHByb21pc2UpIHsKICAgICAgICBQcm9taXNlLmFsbChbcHJvbWlzZSwgb3BlcmF0b3JMaXN0LnJlYWR5XSkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICB0cnkgewogICAgICAgICAgICBwcm9taXNlQm9keShyZXNvbHZlLCByZWplY3QpOwogICAgICAgICAgfSBjYXRjaCAoZXgpIHsKICAgICAgICAgICAgcmVqZWN0KGV4KTsKICAgICAgICAgIH0KICAgICAgICB9LCByZWplY3QpOwogICAgICB9OwogICAgICB0YXNrLmVuc3VyZU5vdFRlcm1pbmF0ZWQoKTsKICAgICAgdGltZVNsb3RNYW5hZ2VyLnJlc2V0KCk7CiAgICAgIGNvbnN0IG9wZXJhdGlvbiA9IHt9OwogICAgICBsZXQgc3RvcCwgaSwgaWksIGNzLCBuYW1lLCBpc1ZhbGlkTmFtZTsKICAgICAgd2hpbGUgKCEoc3RvcCA9IHRpbWVTbG90TWFuYWdlci5jaGVjaygpKSkgewogICAgICAgIG9wZXJhdGlvbi5hcmdzID0gbnVsbDsKICAgICAgICBpZiAoIXByZXByb2Nlc3Nvci5yZWFkKG9wZXJhdGlvbikpIHsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgICBsZXQgYXJncyA9IG9wZXJhdGlvbi5hcmdzOwogICAgICAgIGxldCBmbiA9IG9wZXJhdGlvbi5mbjsKICAgICAgICBzd2l0Y2ggKGZuIHwgMCkgewogICAgICAgICAgY2FzZSBPUFMucGFpbnRYT2JqZWN0OgogICAgICAgICAgICBpc1ZhbGlkTmFtZSA9IGFyZ3NbMF0gaW5zdGFuY2VvZiBOYW1lOwogICAgICAgICAgICBuYW1lID0gYXJnc1swXS5uYW1lOwogICAgICAgICAgICBpZiAoaXNWYWxpZE5hbWUpIHsKICAgICAgICAgICAgICBjb25zdCBsb2NhbEltYWdlID0gbG9jYWxJbWFnZUNhY2hlLmdldEJ5TmFtZShuYW1lKTsKICAgICAgICAgICAgICBpZiAobG9jYWxJbWFnZSkgewogICAgICAgICAgICAgICAgYWRkQ2FjaGVkSW1hZ2VPcHMob3BlcmF0b3JMaXN0LCBsb2NhbEltYWdlKTsKICAgICAgICAgICAgICAgIGFyZ3MgPSBudWxsOwogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIG5leHQobmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmVYT2JqZWN0LCByZWplY3RYT2JqZWN0KSB7CiAgICAgICAgICAgICAgaWYgKCFpc1ZhbGlkTmFtZSkgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCJYT2JqZWN0IG11c3QgYmUgcmVmZXJyZWQgdG8gYnkgbmFtZS4iKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgbGV0IHhvYmogPSB4b2Jqcy5nZXRSYXcobmFtZSk7CiAgICAgICAgICAgICAgaWYgKHhvYmogaW5zdGFuY2VvZiBSZWYpIHsKICAgICAgICAgICAgICAgIGNvbnN0IGNhY2hlZEltYWdlID0gbG9jYWxJbWFnZUNhY2hlLmdldEJ5UmVmKHhvYmopIHx8IHNlbGYuX3JlZ2lvbmFsSW1hZ2VDYWNoZS5nZXRCeVJlZih4b2JqKSB8fCBzZWxmLmdsb2JhbEltYWdlQ2FjaGUuZ2V0RGF0YSh4b2JqLCBzZWxmLnBhZ2VJbmRleCk7CiAgICAgICAgICAgICAgICBpZiAoY2FjaGVkSW1hZ2UpIHsKICAgICAgICAgICAgICAgICAgYWRkQ2FjaGVkSW1hZ2VPcHMob3BlcmF0b3JMaXN0LCBjYWNoZWRJbWFnZSk7CiAgICAgICAgICAgICAgICAgIHJlc29sdmVYT2JqZWN0KCk7CiAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHhvYmogPSB4cmVmLmZldGNoKHhvYmopOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAoISh4b2JqIGluc3RhbmNlb2YgQmFzZVN0cmVhbSkpIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigiWE9iamVjdCBzaG91bGQgYmUgYSBzdHJlYW0iKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgY29uc3QgdHlwZSA9IHhvYmouZGljdC5nZXQoIlN1YnR5cGUiKTsKICAgICAgICAgICAgICBpZiAoISh0eXBlIGluc3RhbmNlb2YgTmFtZSkpIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigiWE9iamVjdCBzaG91bGQgaGF2ZSBhIE5hbWUgc3VidHlwZSIpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAodHlwZS5uYW1lID09PSAiRm9ybSIpIHsKICAgICAgICAgICAgICAgIHN0YXRlTWFuYWdlci5zYXZlKCk7CiAgICAgICAgICAgICAgICBzZWxmLmJ1aWxkRm9ybVhPYmplY3QocmVzb3VyY2VzLCB4b2JqLCBudWxsLCBvcGVyYXRvckxpc3QsIHRhc2ssIHN0YXRlTWFuYWdlci5zdGF0ZS5jbG9uZSh7CiAgICAgICAgICAgICAgICAgIG5ld1BhdGg6IHRydWUKICAgICAgICAgICAgICAgIH0pLCBsb2NhbENvbG9yU3BhY2VDYWNoZSwgc2VlblJlZnMpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICBzdGF0ZU1hbmFnZXIucmVzdG9yZSgpOwogICAgICAgICAgICAgICAgICByZXNvbHZlWE9iamVjdCgpOwogICAgICAgICAgICAgICAgfSwgcmVqZWN0WE9iamVjdCk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlLm5hbWUgPT09ICJJbWFnZSIpIHsKICAgICAgICAgICAgICAgIHNlbGYuYnVpbGRQYWludEltYWdlWE9iamVjdCh7CiAgICAgICAgICAgICAgICAgIHJlc291cmNlcywKICAgICAgICAgICAgICAgICAgaW1hZ2U6IHhvYmosCiAgICAgICAgICAgICAgICAgIG9wZXJhdG9yTGlzdCwKICAgICAgICAgICAgICAgICAgY2FjaGVLZXk6IG5hbWUsCiAgICAgICAgICAgICAgICAgIGxvY2FsSW1hZ2VDYWNoZSwKICAgICAgICAgICAgICAgICAgbG9jYWxDb2xvclNwYWNlQ2FjaGUKICAgICAgICAgICAgICAgIH0pLnRoZW4ocmVzb2x2ZVhPYmplY3QsIHJlamVjdFhPYmplY3QpOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZS5uYW1lID09PSAiUFMiKSB7CiAgICAgICAgICAgICAgICBpbmZvKCJJZ25vcmVkIFhPYmplY3Qgc3VidHlwZSBQUyIpOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoYFVuaGFuZGxlZCBYT2JqZWN0IHN1YnR5cGUgJHt0eXBlLm5hbWV9YCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJlc29sdmVYT2JqZWN0KCk7CiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgICAgICAgICBpZiAocmVhc29uIGluc3RhbmNlb2YgQWJvcnRFeGNlcHRpb24pIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKHNlbGYub3B0aW9ucy5pZ25vcmVFcnJvcnMpIHsKICAgICAgICAgICAgICAgIHdhcm4oYGdldE9wZXJhdG9yTGlzdCAtIGlnbm9yaW5nIFhPYmplY3Q6ICIke3JlYXNvbn0iLmApOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB0aHJvdyByZWFzb247CiAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgY2FzZSBPUFMuc2V0Rm9udDoKICAgICAgICAgICAgY29uc3QgZm9udFNpemUgPSBhcmdzWzFdOwogICAgICAgICAgICBuZXh0KHNlbGYuaGFuZGxlU2V0Rm9udChyZXNvdXJjZXMsIGFyZ3MsIG51bGwsIG9wZXJhdG9yTGlzdCwgdGFzaywgc3RhdGVNYW5hZ2VyLnN0YXRlLCBmYWxsYmFja0ZvbnREaWN0KS50aGVuKGZ1bmN0aW9uIChsb2FkZWROYW1lKSB7CiAgICAgICAgICAgICAgb3BlcmF0b3JMaXN0LmFkZERlcGVuZGVuY3kobG9hZGVkTmFtZSk7CiAgICAgICAgICAgICAgb3BlcmF0b3JMaXN0LmFkZE9wKE9QUy5zZXRGb250LCBbbG9hZGVkTmFtZSwgZm9udFNpemVdKTsKICAgICAgICAgICAgfSkpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICBjYXNlIE9QUy5lbmRJbmxpbmVJbWFnZToKICAgICAgICAgICAgY29uc3QgY2FjaGVLZXkgPSBhcmdzWzBdLmNhY2hlS2V5OwogICAgICAgICAgICBpZiAoY2FjaGVLZXkpIHsKICAgICAgICAgICAgICBjb25zdCBsb2NhbEltYWdlID0gbG9jYWxJbWFnZUNhY2hlLmdldEJ5TmFtZShjYWNoZUtleSk7CiAgICAgICAgICAgICAgaWYgKGxvY2FsSW1hZ2UpIHsKICAgICAgICAgICAgICAgIGFkZENhY2hlZEltYWdlT3BzKG9wZXJhdG9yTGlzdCwgbG9jYWxJbWFnZSk7CiAgICAgICAgICAgICAgICBhcmdzID0gbnVsbDsKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBuZXh0KHNlbGYuYnVpbGRQYWludEltYWdlWE9iamVjdCh7CiAgICAgICAgICAgICAgcmVzb3VyY2VzLAogICAgICAgICAgICAgIGltYWdlOiBhcmdzWzBdLAogICAgICAgICAgICAgIGlzSW5saW5lOiB0cnVlLAogICAgICAgICAgICAgIG9wZXJhdG9yTGlzdCwKICAgICAgICAgICAgICBjYWNoZUtleSwKICAgICAgICAgICAgICBsb2NhbEltYWdlQ2FjaGUsCiAgICAgICAgICAgICAgbG9jYWxDb2xvclNwYWNlQ2FjaGUKICAgICAgICAgICAgfSkpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICBjYXNlIE9QUy5zaG93VGV4dDoKICAgICAgICAgICAgaWYgKCFzdGF0ZU1hbmFnZXIuc3RhdGUuZm9udCkgewogICAgICAgICAgICAgIHNlbGYuZW5zdXJlU3RhdGVGb250KHN0YXRlTWFuYWdlci5zdGF0ZSk7CiAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYXJnc1swXSA9IHNlbGYuaGFuZGxlVGV4dChhcmdzWzBdLCBzdGF0ZU1hbmFnZXIuc3RhdGUpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgT1BTLnNob3dTcGFjZWRUZXh0OgogICAgICAgICAgICBpZiAoIXN0YXRlTWFuYWdlci5zdGF0ZS5mb250KSB7CiAgICAgICAgICAgICAgc2VsZi5lbnN1cmVTdGF0ZUZvbnQoc3RhdGVNYW5hZ2VyLnN0YXRlKTsKICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjb25zdCBjb21iaW5lZEdseXBocyA9IFtdLAogICAgICAgICAgICAgIHN0YXRlID0gc3RhdGVNYW5hZ2VyLnN0YXRlOwogICAgICAgICAgICBmb3IgKGNvbnN0IGFyckl0ZW0gb2YgYXJnc1swXSkgewogICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJySXRlbSA9PT0gInN0cmluZyIpIHsKICAgICAgICAgICAgICAgIGNvbWJpbmVkR2x5cGhzLnB1c2goLi4uc2VsZi5oYW5kbGVUZXh0KGFyckl0ZW0sIHN0YXRlKSk7CiAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYXJySXRlbSA9PT0gIm51bWJlciIpIHsKICAgICAgICAgICAgICAgIGNvbWJpbmVkR2x5cGhzLnB1c2goYXJySXRlbSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGFyZ3NbMF0gPSBjb21iaW5lZEdseXBoczsKICAgICAgICAgICAgZm4gPSBPUFMuc2hvd1RleHQ7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSBPUFMubmV4dExpbmVTaG93VGV4dDoKICAgICAgICAgICAgaWYgKCFzdGF0ZU1hbmFnZXIuc3RhdGUuZm9udCkgewogICAgICAgICAgICAgIHNlbGYuZW5zdXJlU3RhdGVGb250KHN0YXRlTWFuYWdlci5zdGF0ZSk7CiAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgb3BlcmF0b3JMaXN0LmFkZE9wKE9QUy5uZXh0TGluZSk7CiAgICAgICAgICAgIGFyZ3NbMF0gPSBzZWxmLmhhbmRsZVRleHQoYXJnc1swXSwgc3RhdGVNYW5hZ2VyLnN0YXRlKTsKICAgICAgICAgICAgZm4gPSBPUFMuc2hvd1RleHQ7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSBPUFMubmV4dExpbmVTZXRTcGFjaW5nU2hvd1RleHQ6CiAgICAgICAgICAgIGlmICghc3RhdGVNYW5hZ2VyLnN0YXRlLmZvbnQpIHsKICAgICAgICAgICAgICBzZWxmLmVuc3VyZVN0YXRlRm9udChzdGF0ZU1hbmFnZXIuc3RhdGUpOwogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG9wZXJhdG9yTGlzdC5hZGRPcChPUFMubmV4dExpbmUpOwogICAgICAgICAgICBvcGVyYXRvckxpc3QuYWRkT3AoT1BTLnNldFdvcmRTcGFjaW5nLCBbYXJncy5zaGlmdCgpXSk7CiAgICAgICAgICAgIG9wZXJhdG9yTGlzdC5hZGRPcChPUFMuc2V0Q2hhclNwYWNpbmcsIFthcmdzLnNoaWZ0KCldKTsKICAgICAgICAgICAgYXJnc1swXSA9IHNlbGYuaGFuZGxlVGV4dChhcmdzWzBdLCBzdGF0ZU1hbmFnZXIuc3RhdGUpOwogICAgICAgICAgICBmbiA9IE9QUy5zaG93VGV4dDsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlIE9QUy5zZXRUZXh0UmVuZGVyaW5nTW9kZToKICAgICAgICAgICAgc3RhdGVNYW5hZ2VyLnN0YXRlLnRleHRSZW5kZXJpbmdNb2RlID0gYXJnc1swXTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlIE9QUy5zZXRGaWxsQ29sb3JTcGFjZToKICAgICAgICAgICAgewogICAgICAgICAgICAgIGNvbnN0IGZpbGxDUyA9IHNlbGYuX2dldENvbG9yU3BhY2UoYXJnc1swXSwgcmVzb3VyY2VzLCBsb2NhbENvbG9yU3BhY2VDYWNoZSk7CiAgICAgICAgICAgICAgaWYgKGZpbGxDUyBpbnN0YW5jZW9mIENvbG9yU3BhY2UpIHsKICAgICAgICAgICAgICAgIHN0YXRlTWFuYWdlci5zdGF0ZS5maWxsQ29sb3JTcGFjZSA9IGZpbGxDUzsKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBuZXh0KHNlbGYuX2hhbmRsZUNvbG9yU3BhY2UoZmlsbENTKS50aGVuKGNvbG9yU3BhY2UgPT4gewogICAgICAgICAgICAgICAgc3RhdGVNYW5hZ2VyLnN0YXRlLmZpbGxDb2xvclNwYWNlID0gY29sb3JTcGFjZSB8fCBDb2xvclNwYWNlVXRpbHMuZ3JheTsKICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICBjYXNlIE9QUy5zZXRTdHJva2VDb2xvclNwYWNlOgogICAgICAgICAgICB7CiAgICAgICAgICAgICAgY29uc3Qgc3Ryb2tlQ1MgPSBzZWxmLl9nZXRDb2xvclNwYWNlKGFyZ3NbMF0sIHJlc291cmNlcywgbG9jYWxDb2xvclNwYWNlQ2FjaGUpOwogICAgICAgICAgICAgIGlmIChzdHJva2VDUyBpbnN0YW5jZW9mIENvbG9yU3BhY2UpIHsKICAgICAgICAgICAgICAgIHN0YXRlTWFuYWdlci5zdGF0ZS5zdHJva2VDb2xvclNwYWNlID0gc3Ryb2tlQ1M7CiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgbmV4dChzZWxmLl9oYW5kbGVDb2xvclNwYWNlKHN0cm9rZUNTKS50aGVuKGNvbG9yU3BhY2UgPT4gewogICAgICAgICAgICAgICAgc3RhdGVNYW5hZ2VyLnN0YXRlLnN0cm9rZUNvbG9yU3BhY2UgPSBjb2xvclNwYWNlIHx8IENvbG9yU3BhY2VVdGlscy5ncmF5OwogICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgIGNhc2UgT1BTLnNldEZpbGxDb2xvcjoKICAgICAgICAgICAgY3MgPSBzdGF0ZU1hbmFnZXIuc3RhdGUuZmlsbENvbG9yU3BhY2U7CiAgICAgICAgICAgIGFyZ3MgPSBbY3MuZ2V0UmdiSGV4KGFyZ3MsIDApXTsKICAgICAgICAgICAgZm4gPSBPUFMuc2V0RmlsbFJHQkNvbG9yOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgT1BTLnNldFN0cm9rZUNvbG9yOgogICAgICAgICAgICBjcyA9IHN0YXRlTWFuYWdlci5zdGF0ZS5zdHJva2VDb2xvclNwYWNlOwogICAgICAgICAgICBhcmdzID0gW2NzLmdldFJnYkhleChhcmdzLCAwKV07CiAgICAgICAgICAgIGZuID0gT1BTLnNldFN0cm9rZVJHQkNvbG9yOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgT1BTLnNldEZpbGxHcmF5OgogICAgICAgICAgICBzdGF0ZU1hbmFnZXIuc3RhdGUuZmlsbENvbG9yU3BhY2UgPSBDb2xvclNwYWNlVXRpbHMuZ3JheTsKICAgICAgICAgICAgYXJncyA9IFtDb2xvclNwYWNlVXRpbHMuZ3JheS5nZXRSZ2JIZXgoYXJncywgMCldOwogICAgICAgICAgICBmbiA9IE9QUy5zZXRGaWxsUkdCQ29sb3I7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSBPUFMuc2V0U3Ryb2tlR3JheToKICAgICAgICAgICAgc3RhdGVNYW5hZ2VyLnN0YXRlLnN0cm9rZUNvbG9yU3BhY2UgPSBDb2xvclNwYWNlVXRpbHMuZ3JheTsKICAgICAgICAgICAgYXJncyA9IFtDb2xvclNwYWNlVXRpbHMuZ3JheS5nZXRSZ2JIZXgoYXJncywgMCldOwogICAgICAgICAgICBmbiA9IE9QUy5zZXRTdHJva2VSR0JDb2xvcjsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlIE9QUy5zZXRGaWxsQ01ZS0NvbG9yOgogICAgICAgICAgICBzdGF0ZU1hbmFnZXIuc3RhdGUuZmlsbENvbG9yU3BhY2UgPSBDb2xvclNwYWNlVXRpbHMuY215azsKICAgICAgICAgICAgYXJncyA9IFtDb2xvclNwYWNlVXRpbHMuY215ay5nZXRSZ2JIZXgoYXJncywgMCldOwogICAgICAgICAgICBmbiA9IE9QUy5zZXRGaWxsUkdCQ29sb3I7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSBPUFMuc2V0U3Ryb2tlQ01ZS0NvbG9yOgogICAgICAgICAgICBzdGF0ZU1hbmFnZXIuc3RhdGUuc3Ryb2tlQ29sb3JTcGFjZSA9IENvbG9yU3BhY2VVdGlscy5jbXlrOwogICAgICAgICAgICBhcmdzID0gW0NvbG9yU3BhY2VVdGlscy5jbXlrLmdldFJnYkhleChhcmdzLCAwKV07CiAgICAgICAgICAgIGZuID0gT1BTLnNldFN0cm9rZVJHQkNvbG9yOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgT1BTLnNldEZpbGxSR0JDb2xvcjoKICAgICAgICAgICAgc3RhdGVNYW5hZ2VyLnN0YXRlLmZpbGxDb2xvclNwYWNlID0gQ29sb3JTcGFjZVV0aWxzLnJnYjsKICAgICAgICAgICAgYXJncyA9IFtDb2xvclNwYWNlVXRpbHMucmdiLmdldFJnYkhleChhcmdzLCAwKV07CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSBPUFMuc2V0U3Ryb2tlUkdCQ29sb3I6CiAgICAgICAgICAgIHN0YXRlTWFuYWdlci5zdGF0ZS5zdHJva2VDb2xvclNwYWNlID0gQ29sb3JTcGFjZVV0aWxzLnJnYjsKICAgICAgICAgICAgYXJncyA9IFtDb2xvclNwYWNlVXRpbHMucmdiLmdldFJnYkhleChhcmdzLCAwKV07CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSBPUFMuc2V0RmlsbENvbG9yTjoKICAgICAgICAgICAgY3MgPSBzdGF0ZU1hbmFnZXIuc3RhdGUucGF0dGVybkZpbGxDb2xvclNwYWNlOwogICAgICAgICAgICBpZiAoIWNzKSB7CiAgICAgICAgICAgICAgaWYgKGlzTnVtYmVyQXJyYXkoYXJncywgbnVsbCkpIHsKICAgICAgICAgICAgICAgIGFyZ3MgPSBbQ29sb3JTcGFjZVV0aWxzLmdyYXkuZ2V0UmdiSGV4KGFyZ3MsIDApXTsKICAgICAgICAgICAgICAgIGZuID0gT1BTLnNldEZpbGxSR0JDb2xvcjsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBhcmdzID0gW107CiAgICAgICAgICAgICAgZm4gPSBPUFMuc2V0RmlsbFRyYW5zcGFyZW50OwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChjcy5uYW1lID09PSAiUGF0dGVybiIpIHsKICAgICAgICAgICAgICBuZXh0KHNlbGYuaGFuZGxlQ29sb3JOKG9wZXJhdG9yTGlzdCwgT1BTLnNldEZpbGxDb2xvck4sIGFyZ3MsIGNzLCBwYXR0ZXJucywgcmVzb3VyY2VzLCB0YXNrLCBsb2NhbENvbG9yU3BhY2VDYWNoZSwgbG9jYWxUaWxpbmdQYXR0ZXJuQ2FjaGUsIGxvY2FsU2hhZGluZ1BhdHRlcm5DYWNoZSkpOwogICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICBhcmdzID0gW2NzLmdldFJnYkhleChhcmdzLCAwKV07CiAgICAgICAgICAgIGZuID0gT1BTLnNldEZpbGxSR0JDb2xvcjsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlIE9QUy5zZXRTdHJva2VDb2xvck46CiAgICAgICAgICAgIGNzID0gc3RhdGVNYW5hZ2VyLnN0YXRlLnBhdHRlcm5TdHJva2VDb2xvclNwYWNlOwogICAgICAgICAgICBpZiAoIWNzKSB7CiAgICAgICAgICAgICAgaWYgKGlzTnVtYmVyQXJyYXkoYXJncywgbnVsbCkpIHsKICAgICAgICAgICAgICAgIGFyZ3MgPSBbQ29sb3JTcGFjZVV0aWxzLmdyYXkuZ2V0UmdiSGV4KGFyZ3MsIDApXTsKICAgICAgICAgICAgICAgIGZuID0gT1BTLnNldFN0cm9rZVJHQkNvbG9yOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGFyZ3MgPSBbXTsKICAgICAgICAgICAgICBmbiA9IE9QUy5zZXRTdHJva2VUcmFuc3BhcmVudDsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoY3MubmFtZSA9PT0gIlBhdHRlcm4iKSB7CiAgICAgICAgICAgICAgbmV4dChzZWxmLmhhbmRsZUNvbG9yTihvcGVyYXRvckxpc3QsIE9QUy5zZXRTdHJva2VDb2xvck4sIGFyZ3MsIGNzLCBwYXR0ZXJucywgcmVzb3VyY2VzLCB0YXNrLCBsb2NhbENvbG9yU3BhY2VDYWNoZSwgbG9jYWxUaWxpbmdQYXR0ZXJuQ2FjaGUsIGxvY2FsU2hhZGluZ1BhdHRlcm5DYWNoZSkpOwogICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICBhcmdzID0gW2NzLmdldFJnYkhleChhcmdzLCAwKV07CiAgICAgICAgICAgIGZuID0gT1BTLnNldFN0cm9rZVJHQkNvbG9yOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgT1BTLnNoYWRpbmdGaWxsOgogICAgICAgICAgICBsZXQgc2hhZGluZzsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICBjb25zdCBzaGFkaW5nUmVzID0gcmVzb3VyY2VzLmdldCgiU2hhZGluZyIpOwogICAgICAgICAgICAgIGlmICghc2hhZGluZ1JlcykgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCJObyBzaGFkaW5nIHJlc291cmNlIGZvdW5kIik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHNoYWRpbmcgPSBzaGFkaW5nUmVzLmdldChhcmdzWzBdLm5hbWUpOwogICAgICAgICAgICAgIGlmICghc2hhZGluZykgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCJObyBzaGFkaW5nIG9iamVjdCBmb3VuZCIpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBjYXRjaCAocmVhc29uKSB7CiAgICAgICAgICAgICAgaWYgKHJlYXNvbiBpbnN0YW5jZW9mIEFib3J0RXhjZXB0aW9uKSB7CiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKHNlbGYub3B0aW9ucy5pZ25vcmVFcnJvcnMpIHsKICAgICAgICAgICAgICAgIHdhcm4oYGdldE9wZXJhdG9yTGlzdCAtIGlnbm9yaW5nIFNoYWRpbmc6ICIke3JlYXNvbn0iLmApOwogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHRocm93IHJlYXNvbjsKICAgICAgICAgICAgfQogICAgICAgICAgICBjb25zdCBwYXR0ZXJuSWQgPSBzZWxmLnBhcnNlU2hhZGluZyh7CiAgICAgICAgICAgICAgc2hhZGluZywKICAgICAgICAgICAgICByZXNvdXJjZXMsCiAgICAgICAgICAgICAgbG9jYWxDb2xvclNwYWNlQ2FjaGUsCiAgICAgICAgICAgICAgbG9jYWxTaGFkaW5nUGF0dGVybkNhY2hlCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBpZiAoIXBhdHRlcm5JZCkgewogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGFyZ3MgPSBbcGF0dGVybklkXTsKICAgICAgICAgICAgZm4gPSBPUFMuc2hhZGluZ0ZpbGw7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSBPUFMuc2V0R1N0YXRlOgogICAgICAgICAgICBpc1ZhbGlkTmFtZSA9IGFyZ3NbMF0gaW5zdGFuY2VvZiBOYW1lOwogICAgICAgICAgICBuYW1lID0gYXJnc1swXS5uYW1lOwogICAgICAgICAgICBpZiAoaXNWYWxpZE5hbWUpIHsKICAgICAgICAgICAgICBjb25zdCBsb2NhbEdTdGF0ZU9iaiA9IGxvY2FsR1N0YXRlQ2FjaGUuZ2V0QnlOYW1lKG5hbWUpOwogICAgICAgICAgICAgIGlmIChsb2NhbEdTdGF0ZU9iaikgewogICAgICAgICAgICAgICAgaWYgKGxvY2FsR1N0YXRlT2JqLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgICAgb3BlcmF0b3JMaXN0LmFkZE9wKE9QUy5zZXRHU3RhdGUsIFtsb2NhbEdTdGF0ZU9ial0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgYXJncyA9IG51bGw7CiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgbmV4dChuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZUdTdGF0ZSwgcmVqZWN0R1N0YXRlKSB7CiAgICAgICAgICAgICAgaWYgKCFpc1ZhbGlkTmFtZSkgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCJHU3RhdGUgbXVzdCBiZSByZWZlcnJlZCB0byBieSBuYW1lLiIpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBjb25zdCBleHRHU3RhdGUgPSByZXNvdXJjZXMuZ2V0KCJFeHRHU3RhdGUiKTsKICAgICAgICAgICAgICBpZiAoIShleHRHU3RhdGUgaW5zdGFuY2VvZiBEaWN0KSkgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCJFeHRHU3RhdGUgc2hvdWxkIGJlIGEgZGljdGlvbmFyeS4iKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgY29uc3QgZ1N0YXRlID0gZXh0R1N0YXRlLmdldChuYW1lKTsKICAgICAgICAgICAgICBpZiAoIShnU3RhdGUgaW5zdGFuY2VvZiBEaWN0KSkgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCJHU3RhdGUgc2hvdWxkIGJlIGEgZGljdGlvbmFyeS4iKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgc2VsZi5zZXRHU3RhdGUoewogICAgICAgICAgICAgICAgcmVzb3VyY2VzLAogICAgICAgICAgICAgICAgZ1N0YXRlLAogICAgICAgICAgICAgICAgb3BlcmF0b3JMaXN0LAogICAgICAgICAgICAgICAgY2FjaGVLZXk6IG5hbWUsCiAgICAgICAgICAgICAgICB0YXNrLAogICAgICAgICAgICAgICAgc3RhdGVNYW5hZ2VyLAogICAgICAgICAgICAgICAgbG9jYWxHU3RhdGVDYWNoZSwKICAgICAgICAgICAgICAgIGxvY2FsQ29sb3JTcGFjZUNhY2hlLAogICAgICAgICAgICAgICAgc2VlblJlZnMKICAgICAgICAgICAgICB9KS50aGVuKHJlc29sdmVHU3RhdGUsIHJlamVjdEdTdGF0ZSk7CiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgICAgICAgICBpZiAocmVhc29uIGluc3RhbmNlb2YgQWJvcnRFeGNlcHRpb24pIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKHNlbGYub3B0aW9ucy5pZ25vcmVFcnJvcnMpIHsKICAgICAgICAgICAgICAgIHdhcm4oYGdldE9wZXJhdG9yTGlzdCAtIGlnbm9yaW5nIEV4dEdTdGF0ZTogIiR7cmVhc29ufSIuYCk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHRocm93IHJlYXNvbjsKICAgICAgICAgICAgfSkpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICBjYXNlIE9QUy5zZXRMaW5lV2lkdGg6CiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBjb25zdCBbdGhpY2tuZXNzXSA9IGFyZ3M7CiAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlja25lc3MgIT09ICJudW1iZXIiKSB7CiAgICAgICAgICAgICAgICB3YXJuKGBJbnZhbGlkIHNldExpbmVXaWR0aDogJHt0aGlja25lc3N9YCk7CiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgYXJnc1swXSA9IE1hdGguYWJzKHRoaWNrbmVzcyk7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgIGNhc2UgT1BTLnNldERhc2g6CiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBjb25zdCBkYXNoUGhhc2UgPSBhcmdzWzFdOwogICAgICAgICAgICAgIGlmICh0eXBlb2YgZGFzaFBoYXNlICE9PSAibnVtYmVyIikgewogICAgICAgICAgICAgICAgd2FybihgSW52YWxpZCBzZXREYXNoOiAke2Rhc2hQaGFzZX1gKTsKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBjb25zdCBkYXNoQXJyYXkgPSBhcmdzWzBdOwogICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShkYXNoQXJyYXkpKSB7CiAgICAgICAgICAgICAgICB3YXJuKGBJbnZhbGlkIHNldERhc2g6ICR7ZGFzaEFycmF5fWApOwogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmIChkYXNoQXJyYXkuc29tZSh4ID0+IHR5cGVvZiB4ICE9PSAibnVtYmVyIikpIHsKICAgICAgICAgICAgICAgIGFyZ3NbMF0gPSBkYXNoQXJyYXkuZmlsdGVyKHggPT4gdHlwZW9mIHggPT09ICJudW1iZXIiKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgIGNhc2UgT1BTLm1vdmVUbzoKICAgICAgICAgIGNhc2UgT1BTLmxpbmVUbzoKICAgICAgICAgIGNhc2UgT1BTLmN1cnZlVG86CiAgICAgICAgICBjYXNlIE9QUy5jdXJ2ZVRvMjoKICAgICAgICAgIGNhc2UgT1BTLmN1cnZlVG8zOgogICAgICAgICAgY2FzZSBPUFMuY2xvc2VQYXRoOgogICAgICAgICAgY2FzZSBPUFMucmVjdGFuZ2xlOgogICAgICAgICAgICBzZWxmLmJ1aWxkUGF0aChmbiwgYXJncywgc3RhdGVNYW5hZ2VyLnN0YXRlKTsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICBjYXNlIE9QUy5zdHJva2U6CiAgICAgICAgICBjYXNlIE9QUy5jbG9zZVN0cm9rZToKICAgICAgICAgIGNhc2UgT1BTLmZpbGw6CiAgICAgICAgICBjYXNlIE9QUy5lb0ZpbGw6CiAgICAgICAgICBjYXNlIE9QUy5maWxsU3Ryb2tlOgogICAgICAgICAgY2FzZSBPUFMuZW9GaWxsU3Ryb2tlOgogICAgICAgICAgY2FzZSBPUFMuY2xvc2VGaWxsU3Ryb2tlOgogICAgICAgICAgY2FzZSBPUFMuY2xvc2VFT0ZpbGxTdHJva2U6CiAgICAgICAgICBjYXNlIE9QUy5lbmRQYXRoOgogICAgICAgICAgICB7CiAgICAgICAgICAgICAgY29uc3QgewogICAgICAgICAgICAgICAgc3RhdGU6IHsKICAgICAgICAgICAgICAgICAgcGF0aEJ1ZmZlciwKICAgICAgICAgICAgICAgICAgcGF0aE1pbk1heAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0gPSBzdGF0ZU1hbmFnZXI7CiAgICAgICAgICAgICAgaWYgKGZuID09PSBPUFMuY2xvc2VTdHJva2UgfHwgZm4gPT09IE9QUy5jbG9zZUZpbGxTdHJva2UgfHwgZm4gPT09IE9QUy5jbG9zZUVPRmlsbFN0cm9rZSkgewogICAgICAgICAgICAgICAgcGF0aEJ1ZmZlci5wdXNoKERyYXdPUFMuY2xvc2VQYXRoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKHBhdGhCdWZmZXIubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgICAgICBvcGVyYXRvckxpc3QuYWRkT3AoT1BTLmNvbnN0cnVjdFBhdGgsIFtmbiwgW251bGxdLCBudWxsXSk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIG9wZXJhdG9yTGlzdC5hZGRPcChPUFMuY29uc3RydWN0UGF0aCwgW2ZuLCBbbmV3IEZsb2F0MzJBcnJheShwYXRoQnVmZmVyKV0sIHBhdGhNaW5NYXguc2xpY2UoKV0pOwogICAgICAgICAgICAgICAgcGF0aEJ1ZmZlci5sZW5ndGggPSAwOwogICAgICAgICAgICAgICAgcGF0aE1pbk1heC5zZXQoW0luZmluaXR5LCBJbmZpbml0eSwgLUluZmluaXR5LCAtSW5maW5pdHldLCAwKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICAgIGNhc2UgT1BTLnNldFRleHRNYXRyaXg6CiAgICAgICAgICAgIG9wZXJhdG9yTGlzdC5hZGRPcChmbiwgW25ldyBGbG9hdDMyQXJyYXkoYXJncyldKTsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICBjYXNlIE9QUy5tYXJrUG9pbnQ6CiAgICAgICAgICBjYXNlIE9QUy5tYXJrUG9pbnRQcm9wczoKICAgICAgICAgIGNhc2UgT1BTLmJlZ2luQ29tcGF0OgogICAgICAgICAgY2FzZSBPUFMuZW5kQ29tcGF0OgogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIGNhc2UgT1BTLmJlZ2luTWFya2VkQ29udGVudFByb3BzOgogICAgICAgICAgICBpZiAoIShhcmdzWzBdIGluc3RhbmNlb2YgTmFtZSkpIHsKICAgICAgICAgICAgICB3YXJuKGBFeHBlY3RlZCBuYW1lIGZvciBiZWdpbk1hcmtlZENvbnRlbnRQcm9wcyBhcmcwPSR7YXJnc1swXX1gKTsKICAgICAgICAgICAgICBvcGVyYXRvckxpc3QuYWRkT3AoT1BTLmJlZ2luTWFya2VkQ29udGVudFByb3BzLCBbIk9DIiwgbnVsbF0pOwogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChhcmdzWzBdLm5hbWUgPT09ICJPQyIpIHsKICAgICAgICAgICAgICBuZXh0KHNlbGYucGFyc2VNYXJrZWRDb250ZW50UHJvcHMoYXJnc1sxXSwgcmVzb3VyY2VzKS50aGVuKGRhdGEgPT4gewogICAgICAgICAgICAgICAgb3BlcmF0b3JMaXN0LmFkZE9wKE9QUy5iZWdpbk1hcmtlZENvbnRlbnRQcm9wcywgWyJPQyIsIGRhdGFdKTsKICAgICAgICAgICAgICB9KS5jYXRjaChyZWFzb24gPT4gewogICAgICAgICAgICAgICAgaWYgKHJlYXNvbiBpbnN0YW5jZW9mIEFib3J0RXhjZXB0aW9uKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChzZWxmLm9wdGlvbnMuaWdub3JlRXJyb3JzKSB7CiAgICAgICAgICAgICAgICAgIHdhcm4oYGdldE9wZXJhdG9yTGlzdCAtIGlnbm9yaW5nIGJlZ2luTWFya2VkQ29udGVudFByb3BzOiAiJHtyZWFzb259Ii5gKTsKICAgICAgICAgICAgICAgICAgb3BlcmF0b3JMaXN0LmFkZE9wKE9QUy5iZWdpbk1hcmtlZENvbnRlbnRQcm9wcywgWyJPQyIsIG51bGxdKTsKICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdGhyb3cgcmVhc29uOwogICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYXJncyA9IFthcmdzWzBdLm5hbWUsIGFyZ3NbMV0gaW5zdGFuY2VvZiBEaWN0ID8gYXJnc1sxXS5nZXQoIk1DSUQiKSA6IG51bGxdOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgT1BTLmJlZ2luTWFya2VkQ29udGVudDoKICAgICAgICAgIGNhc2UgT1BTLmVuZE1hcmtlZENvbnRlbnQ6CiAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICBpZiAoYXJncyAhPT0gbnVsbCkgewogICAgICAgICAgICAgIGZvciAoaSA9IDAsIGlpID0gYXJncy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgICAgICAgICAgICBpZiAoYXJnc1tpXSBpbnN0YW5jZW9mIERpY3QpIHsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmIChpIDwgaWkpIHsKICAgICAgICAgICAgICAgIHdhcm4oImdldE9wZXJhdG9yTGlzdCAtIGlnbm9yaW5nIG9wZXJhdG9yOiAiICsgZm4pOwogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIG9wZXJhdG9yTGlzdC5hZGRPcChmbiwgYXJncyk7CiAgICAgIH0KICAgICAgaWYgKHN0b3ApIHsKICAgICAgICBuZXh0KGRlZmVycmVkKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgY2xvc2VQZW5kaW5nUmVzdG9yZU9QUygpOwogICAgICByZXNvbHZlKCk7CiAgICB9KS5jYXRjaChyZWFzb24gPT4gewogICAgICBpZiAocmVhc29uIGluc3RhbmNlb2YgQWJvcnRFeGNlcHRpb24pIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgaWYgKHRoaXMub3B0aW9ucy5pZ25vcmVFcnJvcnMpIHsKICAgICAgICB3YXJuKGBnZXRPcGVyYXRvckxpc3QgLSBpZ25vcmluZyBlcnJvcnMgZHVyaW5nICIke3Rhc2submFtZX0iIGAgKyBgdGFzazogIiR7cmVhc29ufSIuYCk7CiAgICAgICAgY2xvc2VQZW5kaW5nUmVzdG9yZU9QUygpOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICB0aHJvdyByZWFzb247CiAgICB9KTsKICB9CiAgZ2V0VGV4dENvbnRlbnQoewogICAgc3RyZWFtLAogICAgdGFzaywKICAgIHJlc291cmNlcywKICAgIHN0YXRlTWFuYWdlciA9IG51bGwsCiAgICBpbmNsdWRlTWFya2VkQ29udGVudCA9IGZhbHNlLAogICAgc2luaywKICAgIHNlZW5TdHlsZXMgPSBuZXcgU2V0KCksCiAgICB2aWV3Qm94LAogICAgbGFuZyA9IG51bGwsCiAgICBtYXJrZWRDb250ZW50RGF0YSA9IG51bGwsCiAgICBkaXNhYmxlTm9ybWFsaXphdGlvbiA9IGZhbHNlLAogICAga2VlcFdoaXRlU3BhY2UgPSBmYWxzZSwKICAgIHByZXZSZWZzID0gbnVsbCwKICAgIGludGVyc2VjdG9yID0gbnVsbAogIH0pIHsKICAgIGNvbnN0IG9iaklkID0gc3RyZWFtLmRpY3Q/Lm9iaklkOwogICAgY29uc3Qgc2VlblJlZnMgPSBuZXcgUmVmU2V0KHByZXZSZWZzKTsKICAgIGlmIChvYmpJZCkgewogICAgICBpZiAocHJldlJlZnM/LmhhcyhvYmpJZCkpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGdldFRleHRDb250ZW50IC0gaWdub3JpbmcgY2lyY3VsYXIgcmVmZXJlbmNlOiAke29iaklkfWApOwogICAgICB9CiAgICAgIHNlZW5SZWZzLnB1dChvYmpJZCk7CiAgICB9CiAgICByZXNvdXJjZXMgfHw9IERpY3QuZW1wdHk7CiAgICBzdGF0ZU1hbmFnZXIgfHw9IG5ldyBTdGF0ZU1hbmFnZXIobmV3IFRleHRTdGF0ZSgpKTsKICAgIGlmIChpbmNsdWRlTWFya2VkQ29udGVudCkgewogICAgICBtYXJrZWRDb250ZW50RGF0YSB8fD0gewogICAgICAgIGxldmVsOiAwCiAgICAgIH07CiAgICB9CiAgICBjb25zdCB0ZXh0Q29udGVudCA9IHsKICAgICAgaXRlbXM6IFtdLAogICAgICBzdHlsZXM6IE9iamVjdC5jcmVhdGUobnVsbCksCiAgICAgIGxhbmcKICAgIH07CiAgICBjb25zdCB0ZXh0Q29udGVudEl0ZW0gPSB7CiAgICAgIGluaXRpYWxpemVkOiBmYWxzZSwKICAgICAgc3RyOiBbXSwKICAgICAgdG90YWxXaWR0aDogMCwKICAgICAgdG90YWxIZWlnaHQ6IDAsCiAgICAgIHdpZHRoOiAwLAogICAgICBoZWlnaHQ6IDAsCiAgICAgIHZlcnRpY2FsOiBmYWxzZSwKICAgICAgcHJldlRyYW5zZm9ybTogbnVsbCwKICAgICAgdGV4dEFkdmFuY2VTY2FsZTogMCwKICAgICAgc3BhY2VJbkZsb3dNaW46IDAsCiAgICAgIHNwYWNlSW5GbG93TWF4OiAwLAogICAgICB0cmFja2luZ1NwYWNlTWluOiBJbmZpbml0eSwKICAgICAgbmVnYXRpdmVTcGFjZU1heDogLUluZmluaXR5LAogICAgICBub3RBU3BhY2U6IC1JbmZpbml0eSwKICAgICAgdHJhbnNmb3JtOiBudWxsLAogICAgICBmb250TmFtZTogbnVsbCwKICAgICAgaGFzRU9MOiBmYWxzZQogICAgfTsKICAgIGNvbnN0IHR3b0xhc3RDaGFycyA9IFsiICIsICIgIl07CiAgICBsZXQgdHdvTGFzdENoYXJzUG9zID0gMDsKICAgIGZ1bmN0aW9uIHNhdmVMYXN0Q2hhcihjaGFyKSB7CiAgICAgIGNvbnN0IG5leHRQb3MgPSAodHdvTGFzdENoYXJzUG9zICsgMSkgJSAyOwogICAgICBjb25zdCByZXQgPSB0d29MYXN0Q2hhcnNbdHdvTGFzdENoYXJzUG9zXSAhPT0gIiAiICYmIHR3b0xhc3RDaGFyc1tuZXh0UG9zXSA9PT0gIiAiOwogICAgICB0d29MYXN0Q2hhcnNbdHdvTGFzdENoYXJzUG9zXSA9IGNoYXI7CiAgICAgIHR3b0xhc3RDaGFyc1BvcyA9IG5leHRQb3M7CiAgICAgIHJldHVybiAha2VlcFdoaXRlU3BhY2UgJiYgcmV0OwogICAgfQogICAgZnVuY3Rpb24gc2hvdWxkQWRkV2hpdGVwc2FjZSgpIHsKICAgICAgcmV0dXJuICFrZWVwV2hpdGVTcGFjZSAmJiB0d29MYXN0Q2hhcnNbdHdvTGFzdENoYXJzUG9zXSAhPT0gIiAiICYmIHR3b0xhc3RDaGFyc1sodHdvTGFzdENoYXJzUG9zICsgMSkgJSAyXSA9PT0gIiAiOwogICAgfQogICAgZnVuY3Rpb24gcmVzZXRMYXN0Q2hhcnMoKSB7CiAgICAgIHR3b0xhc3RDaGFyc1swXSA9IHR3b0xhc3RDaGFyc1sxXSA9ICIgIjsKICAgICAgdHdvTGFzdENoYXJzUG9zID0gMDsKICAgIH0KICAgIGNvbnN0IFRSQUNLSU5HX1NQQUNFX0ZBQ1RPUiA9IDAuMTAyOwogICAgY29uc3QgTk9UX0FfU1BBQ0VfRkFDVE9SID0gMC4wMzsKICAgIGNvbnN0IE5FR0FUSVZFX1NQQUNFX0ZBQ1RPUiA9IC0wLjI7CiAgICBjb25zdCBTUEFDRV9JTl9GTE9XX01JTl9GQUNUT1IgPSAwLjEwMjsKICAgIGNvbnN0IFNQQUNFX0lOX0ZMT1dfTUFYX0ZBQ1RPUiA9IDAuNjsKICAgIGNvbnN0IFZFUlRJQ0FMX1NISUZUX1JBVElPID0gMC4yNTsKICAgIGNvbnN0IHNlbGYgPSB0aGlzOwogICAgY29uc3QgeHJlZiA9IHRoaXMueHJlZjsKICAgIGNvbnN0IHNob3dTcGFjZWRUZXh0QnVmZmVyID0gW107CiAgICBsZXQgeG9ianMgPSBudWxsOwogICAgY29uc3QgZW1wdHlYT2JqZWN0Q2FjaGUgPSBuZXcgTG9jYWxJbWFnZUNhY2hlKCk7CiAgICBjb25zdCBlbXB0eUdTdGF0ZUNhY2hlID0gbmV3IExvY2FsR1N0YXRlQ2FjaGUoKTsKICAgIGNvbnN0IHByZXByb2Nlc3NvciA9IG5ldyBFdmFsdWF0b3JQcmVwcm9jZXNzb3Ioc3RyZWFtLCB4cmVmLCBzdGF0ZU1hbmFnZXIpOwogICAgbGV0IHRleHRTdGF0ZTsKICAgIGZ1bmN0aW9uIHB1c2hXaGl0ZXNwYWNlKHsKICAgICAgd2lkdGggPSAwLAogICAgICBoZWlnaHQgPSAwLAogICAgICB0cmFuc2Zvcm0gPSB0ZXh0Q29udGVudEl0ZW0ucHJldlRyYW5zZm9ybSwKICAgICAgZm9udE5hbWUgPSB0ZXh0Q29udGVudEl0ZW0uZm9udE5hbWUKICAgIH0pIHsKICAgICAgaW50ZXJzZWN0b3I/LmFkZEV4dHJhQ2hhcigiICIpOwogICAgICB0ZXh0Q29udGVudC5pdGVtcy5wdXNoKHsKICAgICAgICBzdHI6ICIgIiwKICAgICAgICBkaXI6ICJsdHIiLAogICAgICAgIHdpZHRoLAogICAgICAgIGhlaWdodCwKICAgICAgICB0cmFuc2Zvcm0sCiAgICAgICAgZm9udE5hbWUsCiAgICAgICAgaGFzRU9MOiBmYWxzZQogICAgICB9KTsKICAgIH0KICAgIGZ1bmN0aW9uIGdldEN1cnJlbnRUZXh0VHJhbnNmb3JtKCkgewogICAgICBjb25zdCBmb250ID0gdGV4dFN0YXRlLmZvbnQ7CiAgICAgIGNvbnN0IHRzbSA9IFt0ZXh0U3RhdGUuZm9udFNpemUgKiB0ZXh0U3RhdGUudGV4dEhTY2FsZSwgMCwgMCwgdGV4dFN0YXRlLmZvbnRTaXplLCAwLCB0ZXh0U3RhdGUudGV4dFJpc2VdOwogICAgICBpZiAoZm9udC5pc1R5cGUzRm9udCAmJiAodGV4dFN0YXRlLmZvbnRTaXplIDw9IDEgfHwgZm9udC5pc0NoYXJCQm94KSAmJiAhaXNBcnJheUVxdWFsKHRleHRTdGF0ZS5mb250TWF0cml4LCBGT05UX0lERU5USVRZX01BVFJJWCkpIHsKICAgICAgICBjb25zdCBnbHlwaEhlaWdodCA9IGZvbnQuYmJveFszXSAtIGZvbnQuYmJveFsxXTsKICAgICAgICBpZiAoZ2x5cGhIZWlnaHQgPiAwKSB7CiAgICAgICAgICB0c21bM10gKj0gZ2x5cGhIZWlnaHQgKiB0ZXh0U3RhdGUuZm9udE1hdHJpeFszXTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIFV0aWwudHJhbnNmb3JtKHRleHRTdGF0ZS5jdG0sIFV0aWwudHJhbnNmb3JtKHRleHRTdGF0ZS50ZXh0TWF0cml4LCB0c20pKTsKICAgIH0KICAgIGZ1bmN0aW9uIGVuc3VyZVRleHRDb250ZW50SXRlbSgpIHsKICAgICAgaWYgKHRleHRDb250ZW50SXRlbS5pbml0aWFsaXplZCkgewogICAgICAgIHJldHVybiB0ZXh0Q29udGVudEl0ZW07CiAgICAgIH0KICAgICAgY29uc3QgewogICAgICAgIGZvbnQsCiAgICAgICAgbG9hZGVkTmFtZQogICAgICB9ID0gdGV4dFN0YXRlOwogICAgICBpZiAoIXNlZW5TdHlsZXMuaGFzKGxvYWRlZE5hbWUpKSB7CiAgICAgICAgc2VlblN0eWxlcy5hZGQobG9hZGVkTmFtZSk7CiAgICAgICAgdGV4dENvbnRlbnQuc3R5bGVzW2xvYWRlZE5hbWVdID0gewogICAgICAgICAgZm9udEZhbWlseTogZm9udC5mYWxsYmFja05hbWUsCiAgICAgICAgICBhc2NlbnQ6IGZvbnQuYXNjZW50LAogICAgICAgICAgZGVzY2VudDogZm9udC5kZXNjZW50LAogICAgICAgICAgdmVydGljYWw6IGZvbnQudmVydGljYWwKICAgICAgICB9OwogICAgICAgIGlmIChzZWxmLm9wdGlvbnMuZm9udEV4dHJhUHJvcGVydGllcyAmJiBmb250LnN5c3RlbUZvbnRJbmZvKSB7CiAgICAgICAgICBjb25zdCBzdHlsZSA9IHRleHRDb250ZW50LnN0eWxlc1tsb2FkZWROYW1lXTsKICAgICAgICAgIHN0eWxlLmZvbnRTdWJzdGl0dXRpb24gPSBmb250LnN5c3RlbUZvbnRJbmZvLmNzczsKICAgICAgICAgIHN0eWxlLmZvbnRTdWJzdGl0dXRpb25Mb2FkZWROYW1lID0gZm9udC5zeXN0ZW1Gb250SW5mby5sb2FkZWROYW1lOwogICAgICAgIH0KICAgICAgfQogICAgICB0ZXh0Q29udGVudEl0ZW0uZm9udE5hbWUgPSBsb2FkZWROYW1lOwogICAgICBjb25zdCB0cm0gPSB0ZXh0Q29udGVudEl0ZW0udHJhbnNmb3JtID0gZ2V0Q3VycmVudFRleHRUcmFuc2Zvcm0oKTsKICAgICAgaWYgKCFmb250LnZlcnRpY2FsKSB7CiAgICAgICAgdGV4dENvbnRlbnRJdGVtLndpZHRoID0gdGV4dENvbnRlbnRJdGVtLnRvdGFsV2lkdGggPSAwOwogICAgICAgIHRleHRDb250ZW50SXRlbS5oZWlnaHQgPSB0ZXh0Q29udGVudEl0ZW0udG90YWxIZWlnaHQgPSBNYXRoLmh5cG90KHRybVsyXSwgdHJtWzNdKTsKICAgICAgICB0ZXh0Q29udGVudEl0ZW0udmVydGljYWwgPSBmYWxzZTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0ZXh0Q29udGVudEl0ZW0ud2lkdGggPSB0ZXh0Q29udGVudEl0ZW0udG90YWxXaWR0aCA9IE1hdGguaHlwb3QodHJtWzBdLCB0cm1bMV0pOwogICAgICAgIHRleHRDb250ZW50SXRlbS5oZWlnaHQgPSB0ZXh0Q29udGVudEl0ZW0udG90YWxIZWlnaHQgPSAwOwogICAgICAgIHRleHRDb250ZW50SXRlbS52ZXJ0aWNhbCA9IHRydWU7CiAgICAgIH0KICAgICAgY29uc3Qgc2NhbGVMaW5lWCA9IE1hdGguaHlwb3QodGV4dFN0YXRlLnRleHRMaW5lTWF0cml4WzBdLCB0ZXh0U3RhdGUudGV4dExpbmVNYXRyaXhbMV0pOwogICAgICBjb25zdCBzY2FsZUN0bVggPSBNYXRoLmh5cG90KHRleHRTdGF0ZS5jdG1bMF0sIHRleHRTdGF0ZS5jdG1bMV0pOwogICAgICB0ZXh0Q29udGVudEl0ZW0udGV4dEFkdmFuY2VTY2FsZSA9IHNjYWxlQ3RtWCAqIHNjYWxlTGluZVg7CiAgICAgIGNvbnN0IHsKICAgICAgICBmb250U2l6ZQogICAgICB9ID0gdGV4dFN0YXRlOwogICAgICB0ZXh0Q29udGVudEl0ZW0udHJhY2tpbmdTcGFjZU1pbiA9IGZvbnRTaXplICogVFJBQ0tJTkdfU1BBQ0VfRkFDVE9SOwogICAgICB0ZXh0Q29udGVudEl0ZW0ubm90QVNwYWNlID0gZm9udFNpemUgKiBOT1RfQV9TUEFDRV9GQUNUT1I7CiAgICAgIHRleHRDb250ZW50SXRlbS5uZWdhdGl2ZVNwYWNlTWF4ID0gZm9udFNpemUgKiBORUdBVElWRV9TUEFDRV9GQUNUT1I7CiAgICAgIHRleHRDb250ZW50SXRlbS5zcGFjZUluRmxvd01pbiA9IGZvbnRTaXplICogU1BBQ0VfSU5fRkxPV19NSU5fRkFDVE9SOwogICAgICB0ZXh0Q29udGVudEl0ZW0uc3BhY2VJbkZsb3dNYXggPSBmb250U2l6ZSAqIFNQQUNFX0lOX0ZMT1dfTUFYX0ZBQ1RPUjsKICAgICAgdGV4dENvbnRlbnRJdGVtLmhhc0VPTCA9IGZhbHNlOwogICAgICB0ZXh0Q29udGVudEl0ZW0uaW5pdGlhbGl6ZWQgPSB0cnVlOwogICAgICByZXR1cm4gdGV4dENvbnRlbnRJdGVtOwogICAgfQogICAgZnVuY3Rpb24gdXBkYXRlQWR2YW5jZVNjYWxlKCkgewogICAgICBpZiAoIXRleHRDb250ZW50SXRlbS5pbml0aWFsaXplZCkgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBjb25zdCBzY2FsZUxpbmVYID0gTWF0aC5oeXBvdCh0ZXh0U3RhdGUudGV4dExpbmVNYXRyaXhbMF0sIHRleHRTdGF0ZS50ZXh0TGluZU1hdHJpeFsxXSk7CiAgICAgIGNvbnN0IHNjYWxlQ3RtWCA9IE1hdGguaHlwb3QodGV4dFN0YXRlLmN0bVswXSwgdGV4dFN0YXRlLmN0bVsxXSk7CiAgICAgIGNvbnN0IHNjYWxlRmFjdG9yID0gc2NhbGVDdG1YICogc2NhbGVMaW5lWDsKICAgICAgaWYgKHNjYWxlRmFjdG9yID09PSB0ZXh0Q29udGVudEl0ZW0udGV4dEFkdmFuY2VTY2FsZSkgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBpZiAoIXRleHRDb250ZW50SXRlbS52ZXJ0aWNhbCkgewogICAgICAgIHRleHRDb250ZW50SXRlbS50b3RhbFdpZHRoICs9IHRleHRDb250ZW50SXRlbS53aWR0aCAqIHRleHRDb250ZW50SXRlbS50ZXh0QWR2YW5jZVNjYWxlOwogICAgICAgIHRleHRDb250ZW50SXRlbS53aWR0aCA9IDA7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGV4dENvbnRlbnRJdGVtLnRvdGFsSGVpZ2h0ICs9IHRleHRDb250ZW50SXRlbS5oZWlnaHQgKiB0ZXh0Q29udGVudEl0ZW0udGV4dEFkdmFuY2VTY2FsZTsKICAgICAgICB0ZXh0Q29udGVudEl0ZW0uaGVpZ2h0ID0gMDsKICAgICAgfQogICAgICB0ZXh0Q29udGVudEl0ZW0udGV4dEFkdmFuY2VTY2FsZSA9IHNjYWxlRmFjdG9yOwogICAgfQogICAgZnVuY3Rpb24gcnVuQmlkaVRyYW5zZm9ybSh0ZXh0Q2h1bmspIHsKICAgICAgbGV0IHRleHQgPSB0ZXh0Q2h1bmsuc3RyLmpvaW4oIiIpOwogICAgICBpZiAoIWRpc2FibGVOb3JtYWxpemF0aW9uKSB7CiAgICAgICAgdGV4dCA9IG5vcm1hbGl6ZVVuaWNvZGUodGV4dCk7CiAgICAgIH0KICAgICAgY29uc3QgYmlkaVJlc3VsdCA9IGJpZGkodGV4dCwgLTEsIHRleHRDaHVuay52ZXJ0aWNhbCk7CiAgICAgIHJldHVybiB7CiAgICAgICAgc3RyOiBiaWRpUmVzdWx0LnN0ciwKICAgICAgICBkaXI6IGJpZGlSZXN1bHQuZGlyLAogICAgICAgIHdpZHRoOiBNYXRoLmFicyh0ZXh0Q2h1bmsudG90YWxXaWR0aCksCiAgICAgICAgaGVpZ2h0OiBNYXRoLmFicyh0ZXh0Q2h1bmsudG90YWxIZWlnaHQpLAogICAgICAgIHRyYW5zZm9ybTogdGV4dENodW5rLnRyYW5zZm9ybSwKICAgICAgICBmb250TmFtZTogdGV4dENodW5rLmZvbnROYW1lLAogICAgICAgIGhhc0VPTDogdGV4dENodW5rLmhhc0VPTAogICAgICB9OwogICAgfQogICAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlU2V0Rm9udChmb250TmFtZSwgZm9udFJlZikgewogICAgICBjb25zdCB0cmFuc2xhdGVkID0gYXdhaXQgc2VsZi5sb2FkRm9udChmb250TmFtZSwgZm9udFJlZiwgcmVzb3VyY2VzLCB0YXNrKTsKICAgICAgdGV4dFN0YXRlLmxvYWRlZE5hbWUgPSB0cmFuc2xhdGVkLmxvYWRlZE5hbWU7CiAgICAgIHRleHRTdGF0ZS5mb250ID0gdHJhbnNsYXRlZC5mb250OwogICAgICB0ZXh0U3RhdGUuZm9udE1hdHJpeCA9IHRyYW5zbGF0ZWQuZm9udC5mb250TWF0cml4IHx8IEZPTlRfSURFTlRJVFlfTUFUUklYOwogICAgfQogICAgZnVuY3Rpb24gYXBwbHlJbnZlcnNlUm90YXRpb24oeCwgeSwgbWF0cml4KSB7CiAgICAgIGNvbnN0IHNjYWxlID0gTWF0aC5oeXBvdChtYXRyaXhbMF0sIG1hdHJpeFsxXSk7CiAgICAgIHJldHVybiBbKG1hdHJpeFswXSAqIHggKyBtYXRyaXhbMV0gKiB5KSAvIHNjYWxlLCAobWF0cml4WzJdICogeCArIG1hdHJpeFszXSAqIHkpIC8gc2NhbGVdOwogICAgfQogICAgZnVuY3Rpb24gY29tcGFyZVdpdGhMYXN0UG9zaXRpb24oZ2x5cGhXaWR0aCkgewogICAgICBjb25zdCBjdXJyZW50VHJhbnNmb3JtID0gZ2V0Q3VycmVudFRleHRUcmFuc2Zvcm0oKTsKICAgICAgbGV0IHBvc1ggPSBjdXJyZW50VHJhbnNmb3JtWzRdOwogICAgICBsZXQgcG9zWSA9IGN1cnJlbnRUcmFuc2Zvcm1bNV07CiAgICAgIGlmICh0ZXh0U3RhdGUuZm9udD8udmVydGljYWwpIHsKICAgICAgICBpZiAocG9zWCA8IHZpZXdCb3hbMF0gfHwgcG9zWCA+IHZpZXdCb3hbMl0gfHwgcG9zWSArIGdseXBoV2lkdGggPCB2aWV3Qm94WzFdIHx8IHBvc1kgPiB2aWV3Qm94WzNdKSB7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKHBvc1ggKyBnbHlwaFdpZHRoIDwgdmlld0JveFswXSB8fCBwb3NYID4gdmlld0JveFsyXSB8fCBwb3NZIDwgdmlld0JveFsxXSB8fCBwb3NZID4gdmlld0JveFszXSkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgICBpZiAoIXRleHRTdGF0ZS5mb250IHx8ICF0ZXh0Q29udGVudEl0ZW0ucHJldlRyYW5zZm9ybSkgewogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICAgIGxldCBsYXN0UG9zWCA9IHRleHRDb250ZW50SXRlbS5wcmV2VHJhbnNmb3JtWzRdOwogICAgICBsZXQgbGFzdFBvc1kgPSB0ZXh0Q29udGVudEl0ZW0ucHJldlRyYW5zZm9ybVs1XTsKICAgICAgaWYgKGxhc3RQb3NYID09PSBwb3NYICYmIGxhc3RQb3NZID09PSBwb3NZKSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgICAgbGV0IHJvdGF0ZSA9IC0xOwogICAgICBpZiAoY3VycmVudFRyYW5zZm9ybVswXSAmJiBjdXJyZW50VHJhbnNmb3JtWzFdID09PSAwICYmIGN1cnJlbnRUcmFuc2Zvcm1bMl0gPT09IDApIHsKICAgICAgICByb3RhdGUgPSBjdXJyZW50VHJhbnNmb3JtWzBdID4gMCA/IDAgOiAxODA7CiAgICAgIH0gZWxzZSBpZiAoY3VycmVudFRyYW5zZm9ybVsxXSAmJiBjdXJyZW50VHJhbnNmb3JtWzBdID09PSAwICYmIGN1cnJlbnRUcmFuc2Zvcm1bM10gPT09IDApIHsKICAgICAgICByb3RhdGUgPSBjdXJyZW50VHJhbnNmb3JtWzFdID4gMCA/IDkwIDogMjcwOwogICAgICB9CiAgICAgIHN3aXRjaCAocm90YXRlKSB7CiAgICAgICAgY2FzZSAwOgogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSA5MDoKICAgICAgICAgIFtwb3NYLCBwb3NZXSA9IFtwb3NZLCBwb3NYXTsKICAgICAgICAgIFtsYXN0UG9zWCwgbGFzdFBvc1ldID0gW2xhc3RQb3NZLCBsYXN0UG9zWF07CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIDE4MDoKICAgICAgICAgIFtwb3NYLCBwb3NZLCBsYXN0UG9zWCwgbGFzdFBvc1ldID0gWy1wb3NYLCAtcG9zWSwgLWxhc3RQb3NYLCAtbGFzdFBvc1ldOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAyNzA6CiAgICAgICAgICBbcG9zWCwgcG9zWV0gPSBbLXBvc1ksIC1wb3NYXTsKICAgICAgICAgIFtsYXN0UG9zWCwgbGFzdFBvc1ldID0gWy1sYXN0UG9zWSwgLWxhc3RQb3NYXTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICBbcG9zWCwgcG9zWV0gPSBhcHBseUludmVyc2VSb3RhdGlvbihwb3NYLCBwb3NZLCBjdXJyZW50VHJhbnNmb3JtKTsKICAgICAgICAgIFtsYXN0UG9zWCwgbGFzdFBvc1ldID0gYXBwbHlJbnZlcnNlUm90YXRpb24obGFzdFBvc1gsIGxhc3RQb3NZLCB0ZXh0Q29udGVudEl0ZW0ucHJldlRyYW5zZm9ybSk7CiAgICAgIH0KICAgICAgaWYgKHRleHRTdGF0ZS5mb250LnZlcnRpY2FsKSB7CiAgICAgICAgY29uc3QgYWR2YW5jZVkgPSAobGFzdFBvc1kgLSBwb3NZKSAvIHRleHRDb250ZW50SXRlbS50ZXh0QWR2YW5jZVNjYWxlOwogICAgICAgIGNvbnN0IGFkdmFuY2VYID0gcG9zWCAtIGxhc3RQb3NYOwogICAgICAgIGNvbnN0IHRleHRPcmllbnRhdGlvbiA9IE1hdGguc2lnbih0ZXh0Q29udGVudEl0ZW0uaGVpZ2h0KTsKICAgICAgICBpZiAoYWR2YW5jZVkgPCB0ZXh0T3JpZW50YXRpb24gKiB0ZXh0Q29udGVudEl0ZW0ubmVnYXRpdmVTcGFjZU1heCkgewogICAgICAgICAgaWYgKE1hdGguYWJzKGFkdmFuY2VYKSA+IDAuNSAqIHRleHRDb250ZW50SXRlbS53aWR0aCkgewogICAgICAgICAgICBhcHBlbmRFT0woKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICB9CiAgICAgICAgICByZXNldExhc3RDaGFycygpOwogICAgICAgICAgZmx1c2hUZXh0Q29udGVudEl0ZW0oKTsKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICBpZiAoTWF0aC5hYnMoYWR2YW5jZVgpID4gdGV4dENvbnRlbnRJdGVtLndpZHRoKSB7CiAgICAgICAgICBhcHBlbmRFT0woKTsKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICBpZiAoYWR2YW5jZVkgPD0gdGV4dE9yaWVudGF0aW9uICogdGV4dENvbnRlbnRJdGVtLm5vdEFTcGFjZSkgewogICAgICAgICAgcmVzZXRMYXN0Q2hhcnMoKTsKICAgICAgICB9CiAgICAgICAgaWYgKGFkdmFuY2VZIDw9IHRleHRPcmllbnRhdGlvbiAqIHRleHRDb250ZW50SXRlbS50cmFja2luZ1NwYWNlTWluKSB7CiAgICAgICAgICBpZiAoc2hvdWxkQWRkV2hpdGVwc2FjZSgpKSB7CiAgICAgICAgICAgIHJlc2V0TGFzdENoYXJzKCk7CiAgICAgICAgICAgIGZsdXNoVGV4dENvbnRlbnRJdGVtKCk7CiAgICAgICAgICAgIHB1c2hXaGl0ZXNwYWNlKHsKICAgICAgICAgICAgICBoZWlnaHQ6IE1hdGguYWJzKGFkdmFuY2VZKQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRleHRDb250ZW50SXRlbS5oZWlnaHQgKz0gYWR2YW5jZVk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmICghYWRkRmFrZVNwYWNlcyhhZHZhbmNlWSwgdGV4dENvbnRlbnRJdGVtLnByZXZUcmFuc2Zvcm0sIHRleHRPcmllbnRhdGlvbikpIHsKICAgICAgICAgIGlmICh0ZXh0Q29udGVudEl0ZW0uc3RyLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICByZXNldExhc3RDaGFycygpOwogICAgICAgICAgICBwdXNoV2hpdGVzcGFjZSh7CiAgICAgICAgICAgICAgaGVpZ2h0OiBNYXRoLmFicyhhZHZhbmNlWSkKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0ZXh0Q29udGVudEl0ZW0uaGVpZ2h0ICs9IGFkdmFuY2VZOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoTWF0aC5hYnMoYWR2YW5jZVgpID4gdGV4dENvbnRlbnRJdGVtLndpZHRoICogVkVSVElDQUxfU0hJRlRfUkFUSU8pIHsKICAgICAgICAgIGZsdXNoVGV4dENvbnRlbnRJdGVtKCk7CiAgICAgICAgfQogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICAgIGNvbnN0IGFkdmFuY2VYID0gKHBvc1ggLSBsYXN0UG9zWCkgLyB0ZXh0Q29udGVudEl0ZW0udGV4dEFkdmFuY2VTY2FsZTsKICAgICAgY29uc3QgYWR2YW5jZVkgPSBwb3NZIC0gbGFzdFBvc1k7CiAgICAgIGNvbnN0IHRleHRPcmllbnRhdGlvbiA9IE1hdGguc2lnbih0ZXh0Q29udGVudEl0ZW0ud2lkdGgpOwogICAgICBpZiAoYWR2YW5jZVggPCB0ZXh0T3JpZW50YXRpb24gKiB0ZXh0Q29udGVudEl0ZW0ubmVnYXRpdmVTcGFjZU1heCkgewogICAgICAgIGlmIChNYXRoLmFicyhhZHZhbmNlWSkgPiAwLjUgKiB0ZXh0Q29udGVudEl0ZW0uaGVpZ2h0KSB7CiAgICAgICAgICBhcHBlbmRFT0woKTsKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICByZXNldExhc3RDaGFycygpOwogICAgICAgIGZsdXNoVGV4dENvbnRlbnRJdGVtKCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgICAgaWYgKE1hdGguYWJzKGFkdmFuY2VZKSA+IHRleHRDb250ZW50SXRlbS5oZWlnaHQpIHsKICAgICAgICBhcHBlbmRFT0woKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgICBpZiAoYWR2YW5jZVggPD0gdGV4dE9yaWVudGF0aW9uICogdGV4dENvbnRlbnRJdGVtLm5vdEFTcGFjZSkgewogICAgICAgIHJlc2V0TGFzdENoYXJzKCk7CiAgICAgIH0KICAgICAgaWYgKGFkdmFuY2VYIDw9IHRleHRPcmllbnRhdGlvbiAqIHRleHRDb250ZW50SXRlbS50cmFja2luZ1NwYWNlTWluKSB7CiAgICAgICAgaWYgKHNob3VsZEFkZFdoaXRlcHNhY2UoKSkgewogICAgICAgICAgcmVzZXRMYXN0Q2hhcnMoKTsKICAgICAgICAgIGZsdXNoVGV4dENvbnRlbnRJdGVtKCk7CiAgICAgICAgICBwdXNoV2hpdGVzcGFjZSh7CiAgICAgICAgICAgIHdpZHRoOiBNYXRoLmFicyhhZHZhbmNlWCkKICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0ZXh0Q29udGVudEl0ZW0ud2lkdGggKz0gYWR2YW5jZVg7CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKCFhZGRGYWtlU3BhY2VzKGFkdmFuY2VYLCB0ZXh0Q29udGVudEl0ZW0ucHJldlRyYW5zZm9ybSwgdGV4dE9yaWVudGF0aW9uKSkgewogICAgICAgIGlmICh0ZXh0Q29udGVudEl0ZW0uc3RyLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgcmVzZXRMYXN0Q2hhcnMoKTsKICAgICAgICAgIHB1c2hXaGl0ZXNwYWNlKHsKICAgICAgICAgICAgd2lkdGg6IE1hdGguYWJzKGFkdmFuY2VYKQogICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRleHRDb250ZW50SXRlbS53aWR0aCArPSBhZHZhbmNlWDsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKE1hdGguYWJzKGFkdmFuY2VZKSA+IHRleHRDb250ZW50SXRlbS5oZWlnaHQgKiBWRVJUSUNBTF9TSElGVF9SQVRJTykgewogICAgICAgIGZsdXNoVGV4dENvbnRlbnRJdGVtKCk7CiAgICAgIH0KICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICBmdW5jdGlvbiBidWlsZFRleHRDb250ZW50SXRlbSh7CiAgICAgIGNoYXJzLAogICAgICBleHRyYVNwYWNpbmcKICAgIH0pIHsKICAgICAgY29uc3QgZm9udCA9IHRleHRTdGF0ZS5mb250OwogICAgICBpZiAoIWNoYXJzKSB7CiAgICAgICAgY29uc3QgY2hhclNwYWNpbmcgPSB0ZXh0U3RhdGUuY2hhclNwYWNpbmcgKyBleHRyYVNwYWNpbmc7CiAgICAgICAgaWYgKGNoYXJTcGFjaW5nKSB7CiAgICAgICAgICBpZiAoIWZvbnQudmVydGljYWwpIHsKICAgICAgICAgICAgdGV4dFN0YXRlLnRyYW5zbGF0ZVRleHRNYXRyaXgoY2hhclNwYWNpbmcgKiB0ZXh0U3RhdGUudGV4dEhTY2FsZSwgMCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0ZXh0U3RhdGUudHJhbnNsYXRlVGV4dE1hdHJpeCgwLCAtY2hhclNwYWNpbmcpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoa2VlcFdoaXRlU3BhY2UpIHsKICAgICAgICAgIGNvbXBhcmVXaXRoTGFzdFBvc2l0aW9uKDApOwogICAgICAgIH0KICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgY29uc3QgZ2x5cGhzID0gZm9udC5jaGFyc1RvR2x5cGhzKGNoYXJzKTsKICAgICAgY29uc3Qgc2NhbGUgPSB0ZXh0U3RhdGUuZm9udE1hdHJpeFswXSAqIHRleHRTdGF0ZS5mb250U2l6ZTsKICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gZ2x5cGhzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgICBjb25zdCBnbHlwaCA9IGdseXBoc1tpXTsKICAgICAgICBjb25zdCB7CiAgICAgICAgICBjYXRlZ29yeQogICAgICAgIH0gPSBnbHlwaDsKICAgICAgICBpZiAoY2F0ZWdvcnkuaXNJbnZpc2libGVGb3JtYXRNYXJrKSB7CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CiAgICAgICAgbGV0IGNoYXJTcGFjaW5nID0gdGV4dFN0YXRlLmNoYXJTcGFjaW5nICsgKGkgKyAxID09PSBpaSA/IGV4dHJhU3BhY2luZyA6IDApOwogICAgICAgIGxldCBnbHlwaFdpZHRoID0gZ2x5cGgud2lkdGg7CiAgICAgICAgaWYgKGZvbnQudmVydGljYWwpIHsKICAgICAgICAgIGdseXBoV2lkdGggPSBnbHlwaC52bWV0cmljID8gZ2x5cGgudm1ldHJpY1swXSA6IC1nbHlwaFdpZHRoOwogICAgICAgIH0KICAgICAgICBsZXQgc2NhbGVkRGltID0gZ2x5cGhXaWR0aCAqIHNjYWxlOwogICAgICAgIGlmICgha2VlcFdoaXRlU3BhY2UgJiYgY2F0ZWdvcnkuaXNXaGl0ZXNwYWNlKSB7CiAgICAgICAgICBpZiAoIWZvbnQudmVydGljYWwpIHsKICAgICAgICAgICAgY2hhclNwYWNpbmcgKz0gc2NhbGVkRGltICsgdGV4dFN0YXRlLndvcmRTcGFjaW5nOwogICAgICAgICAgICB0ZXh0U3RhdGUudHJhbnNsYXRlVGV4dE1hdHJpeChjaGFyU3BhY2luZyAqIHRleHRTdGF0ZS50ZXh0SFNjYWxlLCAwKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNoYXJTcGFjaW5nICs9IC1zY2FsZWREaW0gKyB0ZXh0U3RhdGUud29yZFNwYWNpbmc7CiAgICAgICAgICAgIHRleHRTdGF0ZS50cmFuc2xhdGVUZXh0TWF0cml4KDAsIC1jaGFyU3BhY2luZyk7CiAgICAgICAgICB9CiAgICAgICAgICBzYXZlTGFzdENoYXIoIiAiKTsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgICBpZiAoIWNhdGVnb3J5LmlzWmVyb1dpZHRoRGlhY3JpdGljICYmICFjb21wYXJlV2l0aExhc3RQb3NpdGlvbihzY2FsZWREaW0pKSB7CiAgICAgICAgICBpZiAoIWZvbnQudmVydGljYWwpIHsKICAgICAgICAgICAgdGV4dFN0YXRlLnRyYW5zbGF0ZVRleHRNYXRyaXgoc2NhbGVkRGltICogdGV4dFN0YXRlLnRleHRIU2NhbGUsIDApOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGV4dFN0YXRlLnRyYW5zbGF0ZVRleHRNYXRyaXgoMCwgc2NhbGVkRGltKTsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgICBjb25zdCB0ZXh0Q2h1bmsgPSBlbnN1cmVUZXh0Q29udGVudEl0ZW0oKTsKICAgICAgICBpZiAoY2F0ZWdvcnkuaXNaZXJvV2lkdGhEaWFjcml0aWMpIHsKICAgICAgICAgIHNjYWxlZERpbSA9IDA7CiAgICAgICAgfQogICAgICAgIGlmICghZm9udC52ZXJ0aWNhbCkgewogICAgICAgICAgc2NhbGVkRGltICo9IHRleHRTdGF0ZS50ZXh0SFNjYWxlOwogICAgICAgICAgaW50ZXJzZWN0b3I/LmFkZEdseXBoKGdldEN1cnJlbnRUZXh0VHJhbnNmb3JtKCksIHNjYWxlZERpbSwgMCwgZ2x5cGgudW5pY29kZSk7CiAgICAgICAgICB0ZXh0U3RhdGUudHJhbnNsYXRlVGV4dE1hdHJpeChzY2FsZWREaW0sIDApOwogICAgICAgICAgdGV4dENodW5rLndpZHRoICs9IHNjYWxlZERpbTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgaW50ZXJzZWN0b3I/LmFkZEdseXBoKGdldEN1cnJlbnRUZXh0VHJhbnNmb3JtKCksIDAsIHNjYWxlZERpbSwgZ2x5cGgudW5pY29kZSk7CiAgICAgICAgICB0ZXh0U3RhdGUudHJhbnNsYXRlVGV4dE1hdHJpeCgwLCBzY2FsZWREaW0pOwogICAgICAgICAgc2NhbGVkRGltID0gTWF0aC5hYnMoc2NhbGVkRGltKTsKICAgICAgICAgIHRleHRDaHVuay5oZWlnaHQgKz0gc2NhbGVkRGltOwogICAgICAgIH0KICAgICAgICBpZiAoc2NhbGVkRGltKSB7CiAgICAgICAgICB0ZXh0Q2h1bmsucHJldlRyYW5zZm9ybSA9IGdldEN1cnJlbnRUZXh0VHJhbnNmb3JtKCk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGdseXBoVW5pY29kZSA9IGdseXBoLnVuaWNvZGU7CiAgICAgICAgaWYgKHNhdmVMYXN0Q2hhcihnbHlwaFVuaWNvZGUpKSB7CiAgICAgICAgICB0ZXh0Q2h1bmsuc3RyLnB1c2goIiAiKTsKICAgICAgICAgIGludGVyc2VjdG9yPy5hZGRFeHRyYUNoYXIoIiAiKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFpbnRlcnNlY3RvcikgewogICAgICAgICAgdGV4dENodW5rLnN0ci5wdXNoKGdseXBoVW5pY29kZSk7CiAgICAgICAgfQogICAgICAgIGlmIChjaGFyU3BhY2luZykgewogICAgICAgICAgaWYgKCFmb250LnZlcnRpY2FsKSB7CiAgICAgICAgICAgIHRleHRTdGF0ZS50cmFuc2xhdGVUZXh0TWF0cml4KGNoYXJTcGFjaW5nICogdGV4dFN0YXRlLnRleHRIU2NhbGUsIDApOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGV4dFN0YXRlLnRyYW5zbGF0ZVRleHRNYXRyaXgoMCwgLWNoYXJTcGFjaW5nKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIGZ1bmN0aW9uIGFwcGVuZEVPTCgpIHsKICAgICAgaW50ZXJzZWN0b3I/LmFkZEV4dHJhQ2hhcigiXG4iKTsKICAgICAgcmVzZXRMYXN0Q2hhcnMoKTsKICAgICAgaWYgKHRleHRDb250ZW50SXRlbS5pbml0aWFsaXplZCkgewogICAgICAgIHRleHRDb250ZW50SXRlbS5oYXNFT0wgPSB0cnVlOwogICAgICAgIGZsdXNoVGV4dENvbnRlbnRJdGVtKCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGV4dENvbnRlbnQuaXRlbXMucHVzaCh7CiAgICAgICAgICBzdHI6ICIiLAogICAgICAgICAgZGlyOiAibHRyIiwKICAgICAgICAgIHdpZHRoOiAwLAogICAgICAgICAgaGVpZ2h0OiAwLAogICAgICAgICAgdHJhbnNmb3JtOiBnZXRDdXJyZW50VGV4dFRyYW5zZm9ybSgpLAogICAgICAgICAgZm9udE5hbWU6IHRleHRTdGF0ZS5sb2FkZWROYW1lLAogICAgICAgICAgaGFzRU9MOiB0cnVlCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KICAgIGZ1bmN0aW9uIGFkZEZha2VTcGFjZXMod2lkdGgsIHRyYW5zZiwgdGV4dE9yaWVudGF0aW9uKSB7CiAgICAgIGlmICh0ZXh0T3JpZW50YXRpb24gKiB0ZXh0Q29udGVudEl0ZW0uc3BhY2VJbkZsb3dNaW4gPD0gd2lkdGggJiYgd2lkdGggPD0gdGV4dE9yaWVudGF0aW9uICogdGV4dENvbnRlbnRJdGVtLnNwYWNlSW5GbG93TWF4KSB7CiAgICAgICAgaWYgKHRleHRDb250ZW50SXRlbS5pbml0aWFsaXplZCkgewogICAgICAgICAgcmVzZXRMYXN0Q2hhcnMoKTsKICAgICAgICAgIHRleHRDb250ZW50SXRlbS5zdHIucHVzaCgiICIpOwogICAgICAgICAgaW50ZXJzZWN0b3I/LmFkZEV4dHJhQ2hhcigiICIpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgY29uc3QgZm9udE5hbWUgPSB0ZXh0Q29udGVudEl0ZW0uZm9udE5hbWU7CiAgICAgIGxldCBoZWlnaHQgPSAwOwogICAgICBpZiAodGV4dENvbnRlbnRJdGVtLnZlcnRpY2FsKSB7CiAgICAgICAgaGVpZ2h0ID0gd2lkdGg7CiAgICAgICAgd2lkdGggPSAwOwogICAgICB9CiAgICAgIGZsdXNoVGV4dENvbnRlbnRJdGVtKCk7CiAgICAgIHJlc2V0TGFzdENoYXJzKCk7CiAgICAgIHB1c2hXaGl0ZXNwYWNlKHsKICAgICAgICB3aWR0aDogTWF0aC5hYnMod2lkdGgpLAogICAgICAgIGhlaWdodDogTWF0aC5hYnMoaGVpZ2h0KSwKICAgICAgICB0cmFuc2Zvcm06IHRyYW5zZiB8fCBnZXRDdXJyZW50VGV4dFRyYW5zZm9ybSgpLAogICAgICAgIGZvbnROYW1lCiAgICAgIH0pOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIGZ1bmN0aW9uIGZsdXNoVGV4dENvbnRlbnRJdGVtKCkgewogICAgICBpZiAoIXRleHRDb250ZW50SXRlbS5pbml0aWFsaXplZCB8fCAhdGV4dENvbnRlbnRJdGVtLnN0cikgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBpZiAoIXRleHRDb250ZW50SXRlbS52ZXJ0aWNhbCkgewogICAgICAgIHRleHRDb250ZW50SXRlbS50b3RhbFdpZHRoICs9IHRleHRDb250ZW50SXRlbS53aWR0aCAqIHRleHRDb250ZW50SXRlbS50ZXh0QWR2YW5jZVNjYWxlOwogICAgICB9IGVsc2UgewogICAgICAgIHRleHRDb250ZW50SXRlbS50b3RhbEhlaWdodCArPSB0ZXh0Q29udGVudEl0ZW0uaGVpZ2h0ICogdGV4dENvbnRlbnRJdGVtLnRleHRBZHZhbmNlU2NhbGU7CiAgICAgIH0KICAgICAgdGV4dENvbnRlbnQuaXRlbXMucHVzaChydW5CaWRpVHJhbnNmb3JtKHRleHRDb250ZW50SXRlbSkpOwogICAgICB0ZXh0Q29udGVudEl0ZW0uaW5pdGlhbGl6ZWQgPSBmYWxzZTsKICAgICAgdGV4dENvbnRlbnRJdGVtLnN0ci5sZW5ndGggPSAwOwogICAgfQogICAgZnVuY3Rpb24gZW5xdWV1ZUNodW5rKGJhdGNoID0gZmFsc2UpIHsKICAgICAgY29uc3QgbGVuZ3RoID0gdGV4dENvbnRlbnQuaXRlbXMubGVuZ3RoOwogICAgICBpZiAobGVuZ3RoID09PSAwKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIGlmIChiYXRjaCAmJiBsZW5ndGggPCBURVhUX0NIVU5LX0JBVENIX1NJWkUpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgc2luaz8uZW5xdWV1ZSh0ZXh0Q29udGVudCwgbGVuZ3RoKTsKICAgICAgdGV4dENvbnRlbnQuaXRlbXMgPSBbXTsKICAgICAgdGV4dENvbnRlbnQuc3R5bGVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgIH0KICAgIGNvbnN0IHRpbWVTbG90TWFuYWdlciA9IG5ldyBUaW1lU2xvdE1hbmFnZXIoKTsKICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlQm9keShyZXNvbHZlLCByZWplY3QpIHsKICAgICAgY29uc3QgbmV4dCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7CiAgICAgICAgZW5xdWV1ZUNodW5rKHRydWUpOwogICAgICAgIFByb21pc2UuYWxsKFtwcm9taXNlLCBzaW5rPy5yZWFkeV0pLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgcHJvbWlzZUJvZHkocmVzb2x2ZSwgcmVqZWN0KTsKICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7CiAgICAgICAgICAgIHJlamVjdChleCk7CiAgICAgICAgICB9CiAgICAgICAgfSwgcmVqZWN0KTsKICAgICAgfTsKICAgICAgdGFzay5lbnN1cmVOb3RUZXJtaW5hdGVkKCk7CiAgICAgIHRpbWVTbG90TWFuYWdlci5yZXNldCgpOwogICAgICBjb25zdCBvcGVyYXRpb24gPSB7fTsKICAgICAgbGV0IHN0b3AsCiAgICAgICAgbmFtZSwKICAgICAgICBpc1ZhbGlkTmFtZSwKICAgICAgICBhcmdzID0gW107CiAgICAgIHdoaWxlICghKHN0b3AgPSB0aW1lU2xvdE1hbmFnZXIuY2hlY2soKSkpIHsKICAgICAgICBhcmdzLmxlbmd0aCA9IDA7CiAgICAgICAgb3BlcmF0aW9uLmFyZ3MgPSBhcmdzOwogICAgICAgIGlmICghcHJlcHJvY2Vzc29yLnJlYWQob3BlcmF0aW9uKSkgewogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHByZXZpb3VzU3RhdGUgPSB0ZXh0U3RhdGU7CiAgICAgICAgdGV4dFN0YXRlID0gc3RhdGVNYW5hZ2VyLnN0YXRlOwogICAgICAgIGNvbnN0IGZuID0gb3BlcmF0aW9uLmZuOwogICAgICAgIGFyZ3MgPSBvcGVyYXRpb24uYXJnczsKICAgICAgICBzd2l0Y2ggKGZuIHwgMCkgewogICAgICAgICAgY2FzZSBPUFMuc2V0Rm9udDoKICAgICAgICAgICAgY29uc3QgZm9udE5hbWVBcmcgPSBhcmdzWzBdLm5hbWUsCiAgICAgICAgICAgICAgZm9udFNpemVBcmcgPSBhcmdzWzFdOwogICAgICAgICAgICBpZiAodGV4dFN0YXRlLmZvbnQgJiYgZm9udE5hbWVBcmcgPT09IHRleHRTdGF0ZS5mb250TmFtZSAmJiBmb250U2l6ZUFyZyA9PT0gdGV4dFN0YXRlLmZvbnRTaXplKSB7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZmx1c2hUZXh0Q29udGVudEl0ZW0oKTsKICAgICAgICAgICAgdGV4dFN0YXRlLmZvbnROYW1lID0gZm9udE5hbWVBcmc7CiAgICAgICAgICAgIHRleHRTdGF0ZS5mb250U2l6ZSA9IGZvbnRTaXplQXJnOwogICAgICAgICAgICBuZXh0KGhhbmRsZVNldEZvbnQoZm9udE5hbWVBcmcsIG51bGwpKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgY2FzZSBPUFMuc2V0VGV4dFJpc2U6CiAgICAgICAgICAgIHRleHRTdGF0ZS50ZXh0UmlzZSA9IGFyZ3NbMF07CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSBPUFMuc2V0SFNjYWxlOgogICAgICAgICAgICB0ZXh0U3RhdGUudGV4dEhTY2FsZSA9IGFyZ3NbMF0gLyAxMDA7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSBPUFMuc2V0TGVhZGluZzoKICAgICAgICAgICAgdGV4dFN0YXRlLmxlYWRpbmcgPSBhcmdzWzBdOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgT1BTLm1vdmVUZXh0OgogICAgICAgICAgICB0ZXh0U3RhdGUudHJhbnNsYXRlVGV4dExpbmVNYXRyaXgoYXJnc1swXSwgYXJnc1sxXSk7CiAgICAgICAgICAgIHRleHRTdGF0ZS50ZXh0TWF0cml4ID0gdGV4dFN0YXRlLnRleHRMaW5lTWF0cml4LnNsaWNlKCk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSBPUFMuc2V0TGVhZGluZ01vdmVUZXh0OgogICAgICAgICAgICB0ZXh0U3RhdGUubGVhZGluZyA9IC1hcmdzWzFdOwogICAgICAgICAgICB0ZXh0U3RhdGUudHJhbnNsYXRlVGV4dExpbmVNYXRyaXgoYXJnc1swXSwgYXJnc1sxXSk7CiAgICAgICAgICAgIHRleHRTdGF0ZS50ZXh0TWF0cml4ID0gdGV4dFN0YXRlLnRleHRMaW5lTWF0cml4LnNsaWNlKCk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSBPUFMubmV4dExpbmU6CiAgICAgICAgICAgIHRleHRTdGF0ZS5jYXJyaWFnZVJldHVybigpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgT1BTLnNldFRleHRNYXRyaXg6CiAgICAgICAgICAgIHRleHRTdGF0ZS5zZXRUZXh0TWF0cml4KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0sIGFyZ3NbNV0pOwogICAgICAgICAgICB0ZXh0U3RhdGUuc2V0VGV4dExpbmVNYXRyaXgoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSwgYXJnc1s1XSk7CiAgICAgICAgICAgIHVwZGF0ZUFkdmFuY2VTY2FsZSgpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgT1BTLnNldENoYXJTcGFjaW5nOgogICAgICAgICAgICB0ZXh0U3RhdGUuY2hhclNwYWNpbmcgPSBhcmdzWzBdOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgT1BTLnNldFdvcmRTcGFjaW5nOgogICAgICAgICAgICB0ZXh0U3RhdGUud29yZFNwYWNpbmcgPSBhcmdzWzBdOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgT1BTLmJlZ2luVGV4dDoKICAgICAgICAgICAgdGV4dFN0YXRlLnRleHRNYXRyaXggPSBJREVOVElUWV9NQVRSSVguc2xpY2UoKTsKICAgICAgICAgICAgdGV4dFN0YXRlLnRleHRMaW5lTWF0cml4ID0gSURFTlRJVFlfTUFUUklYLnNsaWNlKCk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSBPUFMuc2hvd1NwYWNlZFRleHQ6CiAgICAgICAgICAgIGlmICghc3RhdGVNYW5hZ2VyLnN0YXRlLmZvbnQpIHsKICAgICAgICAgICAgICBzZWxmLmVuc3VyZVN0YXRlRm9udChzdGF0ZU1hbmFnZXIuc3RhdGUpOwogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IHNwYWNlRmFjdG9yID0gKHRleHRTdGF0ZS5mb250LnZlcnRpY2FsID8gMSA6IC0xKSAqIHRleHRTdGF0ZS5mb250U2l6ZSAvIDEwMDA7CiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnRzID0gYXJnc1swXTsKICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gZWxlbWVudHMubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBlbGVtZW50c1tpXTsKICAgICAgICAgICAgICBpZiAodHlwZW9mIGl0ZW0gPT09ICJzdHJpbmciKSB7CiAgICAgICAgICAgICAgICBzaG93U3BhY2VkVGV4dEJ1ZmZlci5wdXNoKGl0ZW0pOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGl0ZW0gPT09ICJudW1iZXIiICYmIGl0ZW0gIT09IDApIHsKICAgICAgICAgICAgICAgIGNvbnN0IHN0ciA9IHNob3dTcGFjZWRUZXh0QnVmZmVyLmpvaW4oIiIpOwogICAgICAgICAgICAgICAgc2hvd1NwYWNlZFRleHRCdWZmZXIubGVuZ3RoID0gMDsKICAgICAgICAgICAgICAgIGJ1aWxkVGV4dENvbnRlbnRJdGVtKHsKICAgICAgICAgICAgICAgICAgY2hhcnM6IHN0ciwKICAgICAgICAgICAgICAgICAgZXh0cmFTcGFjaW5nOiBpdGVtICogc3BhY2VGYWN0b3IKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoc2hvd1NwYWNlZFRleHRCdWZmZXIubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgIGNvbnN0IHN0ciA9IHNob3dTcGFjZWRUZXh0QnVmZmVyLmpvaW4oIiIpOwogICAgICAgICAgICAgIHNob3dTcGFjZWRUZXh0QnVmZmVyLmxlbmd0aCA9IDA7CiAgICAgICAgICAgICAgYnVpbGRUZXh0Q29udGVudEl0ZW0oewogICAgICAgICAgICAgICAgY2hhcnM6IHN0ciwKICAgICAgICAgICAgICAgIGV4dHJhU3BhY2luZzogMAogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSBPUFMuc2hvd1RleHQ6CiAgICAgICAgICAgIGlmICghc3RhdGVNYW5hZ2VyLnN0YXRlLmZvbnQpIHsKICAgICAgICAgICAgICBzZWxmLmVuc3VyZVN0YXRlRm9udChzdGF0ZU1hbmFnZXIuc3RhdGUpOwogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGJ1aWxkVGV4dENvbnRlbnRJdGVtKHsKICAgICAgICAgICAgICBjaGFyczogYXJnc1swXSwKICAgICAgICAgICAgICBleHRyYVNwYWNpbmc6IDAKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSBPUFMubmV4dExpbmVTaG93VGV4dDoKICAgICAgICAgICAgaWYgKCFzdGF0ZU1hbmFnZXIuc3RhdGUuZm9udCkgewogICAgICAgICAgICAgIHNlbGYuZW5zdXJlU3RhdGVGb250KHN0YXRlTWFuYWdlci5zdGF0ZSk7CiAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGV4dFN0YXRlLmNhcnJpYWdlUmV0dXJuKCk7CiAgICAgICAgICAgIGJ1aWxkVGV4dENvbnRlbnRJdGVtKHsKICAgICAgICAgICAgICBjaGFyczogYXJnc1swXSwKICAgICAgICAgICAgICBleHRyYVNwYWNpbmc6IDAKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSBPUFMubmV4dExpbmVTZXRTcGFjaW5nU2hvd1RleHQ6CiAgICAgICAgICAgIGlmICghc3RhdGVNYW5hZ2VyLnN0YXRlLmZvbnQpIHsKICAgICAgICAgICAgICBzZWxmLmVuc3VyZVN0YXRlRm9udChzdGF0ZU1hbmFnZXIuc3RhdGUpOwogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRleHRTdGF0ZS53b3JkU3BhY2luZyA9IGFyZ3NbMF07CiAgICAgICAgICAgIHRleHRTdGF0ZS5jaGFyU3BhY2luZyA9IGFyZ3NbMV07CiAgICAgICAgICAgIHRleHRTdGF0ZS5jYXJyaWFnZVJldHVybigpOwogICAgICAgICAgICBidWlsZFRleHRDb250ZW50SXRlbSh7CiAgICAgICAgICAgICAgY2hhcnM6IGFyZ3NbMl0sCiAgICAgICAgICAgICAgZXh0cmFTcGFjaW5nOiAwCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgT1BTLnBhaW50WE9iamVjdDoKICAgICAgICAgICAgZmx1c2hUZXh0Q29udGVudEl0ZW0oKTsKICAgICAgICAgICAgeG9ianMgPz89IHJlc291cmNlcy5nZXQoIlhPYmplY3QiKSB8fCBEaWN0LmVtcHR5OwogICAgICAgICAgICBpc1ZhbGlkTmFtZSA9IGFyZ3NbMF0gaW5zdGFuY2VvZiBOYW1lOwogICAgICAgICAgICBuYW1lID0gYXJnc1swXS5uYW1lOwogICAgICAgICAgICBpZiAoaXNWYWxpZE5hbWUgJiYgZW1wdHlYT2JqZWN0Q2FjaGUuZ2V0QnlOYW1lKG5hbWUpKSB7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgbmV4dChuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZVhPYmplY3QsIHJlamVjdFhPYmplY3QpIHsKICAgICAgICAgICAgICBpZiAoIWlzVmFsaWROYW1lKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoIlhPYmplY3QgbXVzdCBiZSByZWZlcnJlZCB0byBieSBuYW1lLiIpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBsZXQgeG9iaiA9IHhvYmpzLmdldFJhdyhuYW1lKTsKICAgICAgICAgICAgICBpZiAoeG9iaiBpbnN0YW5jZW9mIFJlZikgewogICAgICAgICAgICAgICAgaWYgKGVtcHR5WE9iamVjdENhY2hlLmdldEJ5UmVmKHhvYmopKSB7CiAgICAgICAgICAgICAgICAgIHJlc29sdmVYT2JqZWN0KCk7CiAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNvbnN0IGdsb2JhbEltYWdlID0gc2VsZi5nbG9iYWxJbWFnZUNhY2hlLmdldERhdGEoeG9iaiwgc2VsZi5wYWdlSW5kZXgpOwogICAgICAgICAgICAgICAgaWYgKGdsb2JhbEltYWdlKSB7CiAgICAgICAgICAgICAgICAgIHJlc29sdmVYT2JqZWN0KCk7CiAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHhvYmogPSB4cmVmLmZldGNoKHhvYmopOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAoISh4b2JqIGluc3RhbmNlb2YgQmFzZVN0cmVhbSkpIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigiWE9iamVjdCBzaG91bGQgYmUgYSBzdHJlYW0iKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgY29uc3QgewogICAgICAgICAgICAgICAgZGljdAogICAgICAgICAgICAgIH0gPSB4b2JqOwogICAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBkaWN0LmdldCgiU3VidHlwZSIpOwogICAgICAgICAgICAgIGlmICghKHR5cGUgaW5zdGFuY2VvZiBOYW1lKSkgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCJYT2JqZWN0IHNob3VsZCBoYXZlIGEgTmFtZSBzdWJ0eXBlIik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmICh0eXBlLm5hbWUgIT09ICJGb3JtIikgewogICAgICAgICAgICAgICAgZW1wdHlYT2JqZWN0Q2FjaGUuc2V0KG5hbWUsIGRpY3Qub2JqSWQsIHRydWUpOwogICAgICAgICAgICAgICAgcmVzb2x2ZVhPYmplY3QoKTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgY29uc3QgY3VycmVudFN0YXRlID0gc3RhdGVNYW5hZ2VyLnN0YXRlLmNsb25lKCk7CiAgICAgICAgICAgICAgY29uc3QgeE9ialN0YXRlTWFuYWdlciA9IG5ldyBTdGF0ZU1hbmFnZXIoY3VycmVudFN0YXRlKTsKICAgICAgICAgICAgICBjb25zdCBtYXRyaXggPSBsb29rdXBNYXRyaXgoZGljdC5nZXRBcnJheSgiTWF0cml4IiksIG51bGwpOwogICAgICAgICAgICAgIGlmIChtYXRyaXgpIHsKICAgICAgICAgICAgICAgIHhPYmpTdGF0ZU1hbmFnZXIudHJhbnNmb3JtKG1hdHJpeCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGNvbnN0IGxvY2FsUmVzb3VyY2VzID0gZGljdC5nZXQoIlJlc291cmNlcyIpOwogICAgICAgICAgICAgIGVucXVldWVDaHVuaygpOwogICAgICAgICAgICAgIGNvbnN0IHNpbmtXcmFwcGVyID0gewogICAgICAgICAgICAgICAgZW5xdWV1ZUludm9rZWQ6IGZhbHNlLAogICAgICAgICAgICAgICAgZW5xdWV1ZShjaHVuaywgc2l6ZSkgewogICAgICAgICAgICAgICAgICB0aGlzLmVucXVldWVJbnZva2VkID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgc2luay5lbnF1ZXVlKGNodW5rLCBzaXplKTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBnZXQgZGVzaXJlZFNpemUoKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBzaW5rLmRlc2lyZWRTaXplID8/IDA7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZ2V0IHJlYWR5KCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gc2luay5yZWFkeTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIHNlbGYuZ2V0VGV4dENvbnRlbnQoewogICAgICAgICAgICAgICAgc3RyZWFtOiB4b2JqLAogICAgICAgICAgICAgICAgdGFzaywKICAgICAgICAgICAgICAgIHJlc291cmNlczogbG9jYWxSZXNvdXJjZXMgaW5zdGFuY2VvZiBEaWN0ID8gbG9jYWxSZXNvdXJjZXMgOiByZXNvdXJjZXMsCiAgICAgICAgICAgICAgICBzdGF0ZU1hbmFnZXI6IHhPYmpTdGF0ZU1hbmFnZXIsCiAgICAgICAgICAgICAgICBpbmNsdWRlTWFya2VkQ29udGVudCwKICAgICAgICAgICAgICAgIHNpbms6IHNpbmsgJiYgc2lua1dyYXBwZXIsCiAgICAgICAgICAgICAgICBzZWVuU3R5bGVzLAogICAgICAgICAgICAgICAgdmlld0JveCwKICAgICAgICAgICAgICAgIGxhbmcsCiAgICAgICAgICAgICAgICBtYXJrZWRDb250ZW50RGF0YSwKICAgICAgICAgICAgICAgIGRpc2FibGVOb3JtYWxpemF0aW9uLAogICAgICAgICAgICAgICAga2VlcFdoaXRlU3BhY2UsCiAgICAgICAgICAgICAgICBwcmV2UmVmczogc2VlblJlZnMKICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIGlmICghc2lua1dyYXBwZXIuZW5xdWV1ZUludm9rZWQpIHsKICAgICAgICAgICAgICAgICAgZW1wdHlYT2JqZWN0Q2FjaGUuc2V0KG5hbWUsIGRpY3Qub2JqSWQsIHRydWUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmVzb2x2ZVhPYmplY3QoKTsKICAgICAgICAgICAgICB9LCByZWplY3RYT2JqZWN0KTsKICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKHJlYXNvbikgewogICAgICAgICAgICAgIGlmIChyZWFzb24gaW5zdGFuY2VvZiBBYm9ydEV4Y2VwdGlvbikgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAoc2VsZi5vcHRpb25zLmlnbm9yZUVycm9ycykgewogICAgICAgICAgICAgICAgd2FybihgZ2V0VGV4dENvbnRlbnQgLSBpZ25vcmluZyBYT2JqZWN0OiAiJHtyZWFzb259Ii5gKTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdGhyb3cgcmVhc29uOwogICAgICAgICAgICB9KSk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIGNhc2UgT1BTLnNldEdTdGF0ZToKICAgICAgICAgICAgaXNWYWxpZE5hbWUgPSBhcmdzWzBdIGluc3RhbmNlb2YgTmFtZTsKICAgICAgICAgICAgbmFtZSA9IGFyZ3NbMF0ubmFtZTsKICAgICAgICAgICAgaWYgKGlzVmFsaWROYW1lICYmIGVtcHR5R1N0YXRlQ2FjaGUuZ2V0QnlOYW1lKG5hbWUpKSB7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgbmV4dChuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZUdTdGF0ZSwgcmVqZWN0R1N0YXRlKSB7CiAgICAgICAgICAgICAgaWYgKCFpc1ZhbGlkTmFtZSkgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCJHU3RhdGUgbXVzdCBiZSByZWZlcnJlZCB0byBieSBuYW1lLiIpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBjb25zdCBleHRHU3RhdGUgPSByZXNvdXJjZXMuZ2V0KCJFeHRHU3RhdGUiKTsKICAgICAgICAgICAgICBpZiAoIShleHRHU3RhdGUgaW5zdGFuY2VvZiBEaWN0KSkgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCJFeHRHU3RhdGUgc2hvdWxkIGJlIGEgZGljdGlvbmFyeS4iKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgY29uc3QgZ1N0YXRlID0gZXh0R1N0YXRlLmdldChuYW1lKTsKICAgICAgICAgICAgICBpZiAoIShnU3RhdGUgaW5zdGFuY2VvZiBEaWN0KSkgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCJHU3RhdGUgc2hvdWxkIGJlIGEgZGljdGlvbmFyeS4iKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgY29uc3QgZ1N0YXRlRm9udCA9IGdTdGF0ZS5nZXQoIkZvbnQiKTsKICAgICAgICAgICAgICBpZiAoIWdTdGF0ZUZvbnQpIHsKICAgICAgICAgICAgICAgIGVtcHR5R1N0YXRlQ2FjaGUuc2V0KG5hbWUsIGdTdGF0ZS5vYmpJZCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICByZXNvbHZlR1N0YXRlKCk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGZsdXNoVGV4dENvbnRlbnRJdGVtKCk7CiAgICAgICAgICAgICAgdGV4dFN0YXRlLmZvbnROYW1lID0gbnVsbDsKICAgICAgICAgICAgICB0ZXh0U3RhdGUuZm9udFNpemUgPSBnU3RhdGVGb250WzFdOwogICAgICAgICAgICAgIGhhbmRsZVNldEZvbnQobnVsbCwgZ1N0YXRlRm9udFswXSkudGhlbihyZXNvbHZlR1N0YXRlLCByZWplY3RHU3RhdGUpOwogICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAocmVhc29uKSB7CiAgICAgICAgICAgICAgaWYgKHJlYXNvbiBpbnN0YW5jZW9mIEFib3J0RXhjZXB0aW9uKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmIChzZWxmLm9wdGlvbnMuaWdub3JlRXJyb3JzKSB7CiAgICAgICAgICAgICAgICB3YXJuKGBnZXRUZXh0Q29udGVudCAtIGlnbm9yaW5nIEV4dEdTdGF0ZTogIiR7cmVhc29ufSIuYCk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHRocm93IHJlYXNvbjsKICAgICAgICAgICAgfSkpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICBjYXNlIE9QUy5iZWdpbk1hcmtlZENvbnRlbnQ6CiAgICAgICAgICAgIGZsdXNoVGV4dENvbnRlbnRJdGVtKCk7CiAgICAgICAgICAgIGlmIChpbmNsdWRlTWFya2VkQ29udGVudCkgewogICAgICAgICAgICAgIG1hcmtlZENvbnRlbnREYXRhLmxldmVsKys7CiAgICAgICAgICAgICAgdGV4dENvbnRlbnQuaXRlbXMucHVzaCh7CiAgICAgICAgICAgICAgICB0eXBlOiAiYmVnaW5NYXJrZWRDb250ZW50IiwKICAgICAgICAgICAgICAgIHRhZzogYXJnc1swXSBpbnN0YW5jZW9mIE5hbWUgPyBhcmdzWzBdLm5hbWUgOiBudWxsCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlIE9QUy5iZWdpbk1hcmtlZENvbnRlbnRQcm9wczoKICAgICAgICAgICAgZmx1c2hUZXh0Q29udGVudEl0ZW0oKTsKICAgICAgICAgICAgaWYgKGluY2x1ZGVNYXJrZWRDb250ZW50KSB7CiAgICAgICAgICAgICAgbWFya2VkQ29udGVudERhdGEubGV2ZWwrKzsKICAgICAgICAgICAgICBsZXQgbWNpZCA9IG51bGw7CiAgICAgICAgICAgICAgaWYgKGFyZ3NbMV0gaW5zdGFuY2VvZiBEaWN0KSB7CiAgICAgICAgICAgICAgICBtY2lkID0gYXJnc1sxXS5nZXQoIk1DSUQiKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdGV4dENvbnRlbnQuaXRlbXMucHVzaCh7CiAgICAgICAgICAgICAgICB0eXBlOiAiYmVnaW5NYXJrZWRDb250ZW50UHJvcHMiLAogICAgICAgICAgICAgICAgaWQ6IE51bWJlci5pc0ludGVnZXIobWNpZCkgPyBgJHtzZWxmLmlkRmFjdG9yeS5nZXRQYWdlT2JqSWQoKX1fbWMke21jaWR9YCA6IG51bGwsCiAgICAgICAgICAgICAgICB0YWc6IGFyZ3NbMF0gaW5zdGFuY2VvZiBOYW1lID8gYXJnc1swXS5uYW1lIDogbnVsbAogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSBPUFMuZW5kTWFya2VkQ29udGVudDoKICAgICAgICAgICAgZmx1c2hUZXh0Q29udGVudEl0ZW0oKTsKICAgICAgICAgICAgaWYgKGluY2x1ZGVNYXJrZWRDb250ZW50KSB7CiAgICAgICAgICAgICAgaWYgKG1hcmtlZENvbnRlbnREYXRhLmxldmVsID09PSAwKSB7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgbWFya2VkQ29udGVudERhdGEubGV2ZWwtLTsKICAgICAgICAgICAgICB0ZXh0Q29udGVudC5pdGVtcy5wdXNoKHsKICAgICAgICAgICAgICAgIHR5cGU6ICJlbmRNYXJrZWRDb250ZW50IgogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSBPUFMucmVzdG9yZToKICAgICAgICAgICAgaWYgKHByZXZpb3VzU3RhdGUgJiYgKHByZXZpb3VzU3RhdGUuZm9udCAhPT0gdGV4dFN0YXRlLmZvbnQgfHwgcHJldmlvdXNTdGF0ZS5mb250U2l6ZSAhPT0gdGV4dFN0YXRlLmZvbnRTaXplIHx8IHByZXZpb3VzU3RhdGUuZm9udE5hbWUgIT09IHRleHRTdGF0ZS5mb250TmFtZSkpIHsKICAgICAgICAgICAgICBmbHVzaFRleHRDb250ZW50SXRlbSgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgICBpZiAodGV4dENvbnRlbnQuaXRlbXMubGVuZ3RoID49IChzaW5rPy5kZXNpcmVkU2l6ZSA/PyAxKSkgewogICAgICAgICAgc3RvcCA9IHRydWU7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKHN0b3ApIHsKICAgICAgICBuZXh0KGRlZmVycmVkKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgZmx1c2hUZXh0Q29udGVudEl0ZW0oKTsKICAgICAgZW5xdWV1ZUNodW5rKCk7CiAgICAgIHJlc29sdmUoKTsKICAgIH0pLmNhdGNoKHJlYXNvbiA9PiB7CiAgICAgIGlmIChyZWFzb24gaW5zdGFuY2VvZiBBYm9ydEV4Y2VwdGlvbikgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBpZiAodGhpcy5vcHRpb25zLmlnbm9yZUVycm9ycykgewogICAgICAgIHdhcm4oYGdldFRleHRDb250ZW50IC0gaWdub3JpbmcgZXJyb3JzIGR1cmluZyAiJHt0YXNrLm5hbWV9IiBgICsgYHRhc2s6ICIke3JlYXNvbn0iLmApOwogICAgICAgIGZsdXNoVGV4dENvbnRlbnRJdGVtKCk7CiAgICAgICAgZW5xdWV1ZUNodW5rKCk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIHRocm93IHJlYXNvbjsKICAgIH0pOwogIH0KICBhc3luYyBleHRyYWN0RGF0YVN0cnVjdHVyZXMoZGljdCwgcHJvcGVydGllcykgewogICAgY29uc3QgeHJlZiA9IHRoaXMueHJlZjsKICAgIGxldCBjaWRUb0dpZEJ5dGVzOwogICAgY29uc3QgdG9Vbmljb2RlUHJvbWlzZSA9IHRoaXMucmVhZFRvVW5pY29kZShwcm9wZXJ0aWVzLnRvVW5pY29kZSk7CiAgICBpZiAocHJvcGVydGllcy5jb21wb3NpdGUpIHsKICAgICAgY29uc3QgY2lkU3lzdGVtSW5mbyA9IGRpY3QuZ2V0KCJDSURTeXN0ZW1JbmZvIik7CiAgICAgIGlmIChjaWRTeXN0ZW1JbmZvIGluc3RhbmNlb2YgRGljdCkgewogICAgICAgIHByb3BlcnRpZXMuY2lkU3lzdGVtSW5mbyA9IHsKICAgICAgICAgIHJlZ2lzdHJ5OiBzdHJpbmdUb1BERlN0cmluZyhjaWRTeXN0ZW1JbmZvLmdldCgiUmVnaXN0cnkiKSksCiAgICAgICAgICBvcmRlcmluZzogc3RyaW5nVG9QREZTdHJpbmcoY2lkU3lzdGVtSW5mby5nZXQoIk9yZGVyaW5nIikpLAogICAgICAgICAgc3VwcGxlbWVudDogY2lkU3lzdGVtSW5mby5nZXQoIlN1cHBsZW1lbnQiKQogICAgICAgIH07CiAgICAgIH0KICAgICAgdHJ5IHsKICAgICAgICBjb25zdCBjaWRUb0dpZE1hcCA9IGRpY3QuZ2V0KCJDSURUb0dJRE1hcCIpOwogICAgICAgIGlmIChjaWRUb0dpZE1hcCBpbnN0YW5jZW9mIEJhc2VTdHJlYW0pIHsKICAgICAgICAgIGNpZFRvR2lkQnl0ZXMgPSBjaWRUb0dpZE1hcC5nZXRCeXRlcygpOwogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXgpIHsKICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5pZ25vcmVFcnJvcnMpIHsKICAgICAgICAgIHRocm93IGV4OwogICAgICAgIH0KICAgICAgICB3YXJuKGBleHRyYWN0RGF0YVN0cnVjdHVyZXMgLSBpZ25vcmluZyBDSURUb0dJRE1hcCBkYXRhOiAiJHtleH0iLmApOwogICAgICB9CiAgICB9CiAgICBjb25zdCBkaWZmZXJlbmNlcyA9IFtdOwogICAgbGV0IGJhc2VFbmNvZGluZ05hbWUgPSBudWxsOwogICAgbGV0IGVuY29kaW5nOwogICAgaWYgKGRpY3QuaGFzKCJFbmNvZGluZyIpKSB7CiAgICAgIGVuY29kaW5nID0gZGljdC5nZXQoIkVuY29kaW5nIik7CiAgICAgIGlmIChlbmNvZGluZyBpbnN0YW5jZW9mIERpY3QpIHsKICAgICAgICBiYXNlRW5jb2RpbmdOYW1lID0gZW5jb2RpbmcuZ2V0KCJCYXNlRW5jb2RpbmciKTsKICAgICAgICBiYXNlRW5jb2RpbmdOYW1lID0gYmFzZUVuY29kaW5nTmFtZSBpbnN0YW5jZW9mIE5hbWUgPyBiYXNlRW5jb2RpbmdOYW1lLm5hbWUgOiBudWxsOwogICAgICAgIGlmIChlbmNvZGluZy5oYXMoIkRpZmZlcmVuY2VzIikpIHsKICAgICAgICAgIGNvbnN0IGRpZmZFbmNvZGluZyA9IGVuY29kaW5nLmdldCgiRGlmZmVyZW5jZXMiKTsKICAgICAgICAgIGxldCBpbmRleCA9IDA7CiAgICAgICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGRpZmZFbmNvZGluZykgewogICAgICAgICAgICBjb25zdCBkYXRhID0geHJlZi5mZXRjaElmUmVmKGVudHJ5KTsKICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhID09PSAibnVtYmVyIikgewogICAgICAgICAgICAgIGluZGV4ID0gZGF0YTsKICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhIGluc3RhbmNlb2YgTmFtZSkgewogICAgICAgICAgICAgIGRpZmZlcmVuY2VzW2luZGV4KytdID0gZGF0YS5uYW1lOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcihgSW52YWxpZCBlbnRyeSBpbiAnRGlmZmVyZW5jZXMnIGFycmF5OiAke2RhdGF9YCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAoZW5jb2RpbmcgaW5zdGFuY2VvZiBOYW1lKSB7CiAgICAgICAgYmFzZUVuY29kaW5nTmFtZSA9IGVuY29kaW5nLm5hbWU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY29uc3QgbXNnID0gIkVuY29kaW5nIGlzIG5vdCBhIE5hbWUgbm9yIGEgRGljdCI7CiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuaWdub3JlRXJyb3JzKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IobXNnKTsKICAgICAgICB9CiAgICAgICAgd2Fybihtc2cpOwogICAgICB9CiAgICAgIGlmIChiYXNlRW5jb2RpbmdOYW1lICE9PSAiTWFjUm9tYW5FbmNvZGluZyIgJiYgYmFzZUVuY29kaW5nTmFtZSAhPT0gIk1hY0V4cGVydEVuY29kaW5nIiAmJiBiYXNlRW5jb2RpbmdOYW1lICE9PSAiV2luQW5zaUVuY29kaW5nIikgewogICAgICAgIGJhc2VFbmNvZGluZ05hbWUgPSBudWxsOwogICAgICB9CiAgICB9CiAgICBjb25zdCBub25FbWJlZGRlZEZvbnQgPSAhcHJvcGVydGllcy5maWxlIHx8IHByb3BlcnRpZXMuaXNJbnRlcm5hbEZvbnQsCiAgICAgIGlzU3ltYm9sc0ZvbnROYW1lID0gZ2V0U3ltYm9sc0ZvbnRzKClbcHJvcGVydGllcy5uYW1lXTsKICAgIGlmIChiYXNlRW5jb2RpbmdOYW1lICYmIG5vbkVtYmVkZGVkRm9udCAmJiBpc1N5bWJvbHNGb250TmFtZSkgewogICAgICBiYXNlRW5jb2RpbmdOYW1lID0gbnVsbDsKICAgIH0KICAgIGlmIChiYXNlRW5jb2RpbmdOYW1lKSB7CiAgICAgIHByb3BlcnRpZXMuZGVmYXVsdEVuY29kaW5nID0gZ2V0RW5jb2RpbmcoYmFzZUVuY29kaW5nTmFtZSk7CiAgICB9IGVsc2UgewogICAgICBjb25zdCBpc1N5bWJvbGljRm9udCA9ICEhKHByb3BlcnRpZXMuZmxhZ3MgJiBGb250RmxhZ3MuU3ltYm9saWMpOwogICAgICBjb25zdCBpc05vbnN5bWJvbGljRm9udCA9ICEhKHByb3BlcnRpZXMuZmxhZ3MgJiBGb250RmxhZ3MuTm9uc3ltYm9saWMpOwogICAgICBlbmNvZGluZyA9IFN0YW5kYXJkRW5jb2Rpbmc7CiAgICAgIGlmIChwcm9wZXJ0aWVzLnR5cGUgPT09ICJUcnVlVHlwZSIgJiYgIWlzTm9uc3ltYm9saWNGb250KSB7CiAgICAgICAgZW5jb2RpbmcgPSBXaW5BbnNpRW5jb2Rpbmc7CiAgICAgIH0KICAgICAgaWYgKGlzU3ltYm9saWNGb250IHx8IGlzU3ltYm9sc0ZvbnROYW1lKSB7CiAgICAgICAgZW5jb2RpbmcgPSBNYWNSb21hbkVuY29kaW5nOwogICAgICAgIGlmIChub25FbWJlZGRlZEZvbnQpIHsKICAgICAgICAgIGlmICgvU3ltYm9sL2kudGVzdChwcm9wZXJ0aWVzLm5hbWUpKSB7CiAgICAgICAgICAgIGVuY29kaW5nID0gU3ltYm9sU2V0RW5jb2Rpbmc7CiAgICAgICAgICB9IGVsc2UgaWYgKC9EaW5nYmF0cy9pLnRlc3QocHJvcGVydGllcy5uYW1lKSkgewogICAgICAgICAgICBlbmNvZGluZyA9IFphcGZEaW5nYmF0c0VuY29kaW5nOwogICAgICAgICAgfSBlbHNlIGlmICgvV2luZ2RpbmdzL2kudGVzdChwcm9wZXJ0aWVzLm5hbWUpKSB7CiAgICAgICAgICAgIGVuY29kaW5nID0gV2luQW5zaUVuY29kaW5nOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICBwcm9wZXJ0aWVzLmRlZmF1bHRFbmNvZGluZyA9IGVuY29kaW5nOwogICAgfQogICAgcHJvcGVydGllcy5kaWZmZXJlbmNlcyA9IGRpZmZlcmVuY2VzOwogICAgcHJvcGVydGllcy5iYXNlRW5jb2RpbmdOYW1lID0gYmFzZUVuY29kaW5nTmFtZTsKICAgIHByb3BlcnRpZXMuaGFzRW5jb2RpbmcgPSAhIWJhc2VFbmNvZGluZ05hbWUgfHwgZGlmZmVyZW5jZXMubGVuZ3RoID4gMDsKICAgIHByb3BlcnRpZXMuZGljdCA9IGRpY3Q7CiAgICBwcm9wZXJ0aWVzLnRvVW5pY29kZSA9IGF3YWl0IHRvVW5pY29kZVByb21pc2U7CiAgICBjb25zdCBidWlsdFRvVW5pY29kZSA9IGF3YWl0IHRoaXMuYnVpbGRUb1VuaWNvZGUocHJvcGVydGllcyk7CiAgICBwcm9wZXJ0aWVzLnRvVW5pY29kZSA9IGJ1aWx0VG9Vbmljb2RlOwogICAgaWYgKGNpZFRvR2lkQnl0ZXMpIHsKICAgICAgcHJvcGVydGllcy5jaWRUb0dpZE1hcCA9IHRoaXMucmVhZENpZFRvR2lkTWFwKGNpZFRvR2lkQnl0ZXMsIGJ1aWx0VG9Vbmljb2RlKTsKICAgIH0KICAgIHJldHVybiBwcm9wZXJ0aWVzOwogIH0KICBfc2ltcGxlRm9udFRvVW5pY29kZShwcm9wZXJ0aWVzLCBmb3JjZUdseXBocyA9IGZhbHNlKSB7CiAgICBhc3NlcnQoIXByb3BlcnRpZXMuY29tcG9zaXRlLCAiTXVzdCBiZSBhIHNpbXBsZSBmb250LiIpOwogICAgY29uc3QgdG9Vbmljb2RlID0gW107CiAgICBjb25zdCBlbmNvZGluZyA9IHByb3BlcnRpZXMuZGVmYXVsdEVuY29kaW5nLnNsaWNlKCk7CiAgICBjb25zdCBiYXNlRW5jb2RpbmdOYW1lID0gcHJvcGVydGllcy5iYXNlRW5jb2RpbmdOYW1lOwogICAgY29uc3QgZGlmZmVyZW5jZXMgPSBwcm9wZXJ0aWVzLmRpZmZlcmVuY2VzOwogICAgZm9yIChjb25zdCBjaGFyY29kZSBpbiBkaWZmZXJlbmNlcykgewogICAgICBjb25zdCBnbHlwaE5hbWUgPSBkaWZmZXJlbmNlc1tjaGFyY29kZV07CiAgICAgIGlmIChnbHlwaE5hbWUgPT09ICIubm90ZGVmIikgewogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGVuY29kaW5nW2NoYXJjb2RlXSA9IGdseXBoTmFtZTsKICAgIH0KICAgIGNvbnN0IGdseXBoc1VuaWNvZGVNYXAgPSBnZXRHbHlwaHNVbmljb2RlKCk7CiAgICBmb3IgKGNvbnN0IGNoYXJjb2RlIGluIGVuY29kaW5nKSB7CiAgICAgIGxldCBnbHlwaE5hbWUgPSBlbmNvZGluZ1tjaGFyY29kZV07CiAgICAgIGlmIChnbHlwaE5hbWUgPT09ICIiKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgbGV0IHVuaWNvZGUgPSBnbHlwaHNVbmljb2RlTWFwW2dseXBoTmFtZV07CiAgICAgIGlmICh1bmljb2RlICE9PSB1bmRlZmluZWQpIHsKICAgICAgICB0b1VuaWNvZGVbY2hhcmNvZGVdID0gU3RyaW5nLmZyb21DaGFyQ29kZSh1bmljb2RlKTsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBsZXQgY29kZSA9IDA7CiAgICAgIHN3aXRjaCAoZ2x5cGhOYW1lWzBdKSB7CiAgICAgICAgY2FzZSAiRyI6CiAgICAgICAgICBpZiAoZ2x5cGhOYW1lLmxlbmd0aCA9PT0gMykgewogICAgICAgICAgICBjb2RlID0gcGFyc2VJbnQoZ2x5cGhOYW1lLnN1YnN0cmluZygxKSwgMTYpOwogICAgICAgICAgfQogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAiZyI6CiAgICAgICAgICBpZiAoZ2x5cGhOYW1lLmxlbmd0aCA9PT0gNSkgewogICAgICAgICAgICBjb2RlID0gcGFyc2VJbnQoZ2x5cGhOYW1lLnN1YnN0cmluZygxKSwgMTYpOwogICAgICAgICAgfQogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAiQyI6CiAgICAgICAgY2FzZSAiYyI6CiAgICAgICAgICBpZiAoZ2x5cGhOYW1lLmxlbmd0aCA+PSAzICYmIGdseXBoTmFtZS5sZW5ndGggPD0gNCkgewogICAgICAgICAgICBjb25zdCBjb2RlU3RyID0gZ2x5cGhOYW1lLnN1YnN0cmluZygxKTsKICAgICAgICAgICAgaWYgKGZvcmNlR2x5cGhzKSB7CiAgICAgICAgICAgICAgY29kZSA9IHBhcnNlSW50KGNvZGVTdHIsIDE2KTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICBjb2RlID0gK2NvZGVTdHI7CiAgICAgICAgICAgIGlmIChOdW1iZXIuaXNOYU4oY29kZSkgJiYgTnVtYmVyLmlzSW50ZWdlcihwYXJzZUludChjb2RlU3RyLCAxNikpKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NpbXBsZUZvbnRUb1VuaWNvZGUocHJvcGVydGllcywgdHJ1ZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgInUiOgogICAgICAgICAgdW5pY29kZSA9IGdldFVuaWNvZGVGb3JHbHlwaChnbHlwaE5hbWUsIGdseXBoc1VuaWNvZGVNYXApOwogICAgICAgICAgaWYgKHVuaWNvZGUgIT09IC0xKSB7CiAgICAgICAgICAgIGNvZGUgPSB1bmljb2RlOwogICAgICAgICAgfQogICAgICAgICAgYnJlYWs7CiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHN3aXRjaCAoZ2x5cGhOYW1lKSB7CiAgICAgICAgICAgIGNhc2UgImZfaCI6CiAgICAgICAgICAgIGNhc2UgImZfdCI6CiAgICAgICAgICAgIGNhc2UgIlRfaCI6CiAgICAgICAgICAgICAgdG9Vbmljb2RlW2NoYXJjb2RlXSA9IGdseXBoTmFtZS5yZXBsYWNlQWxsKCJfIiwgIiIpOwogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgICAgaWYgKGNvZGUgPiAwICYmIGNvZGUgPD0gMHgxMGZmZmYgJiYgTnVtYmVyLmlzSW50ZWdlcihjb2RlKSkgewogICAgICAgIGlmIChiYXNlRW5jb2RpbmdOYW1lICYmIGNvZGUgPT09ICtjaGFyY29kZSkgewogICAgICAgICAgY29uc3QgYmFzZUVuY29kaW5nID0gZ2V0RW5jb2RpbmcoYmFzZUVuY29kaW5nTmFtZSk7CiAgICAgICAgICBpZiAoYmFzZUVuY29kaW5nICYmIChnbHlwaE5hbWUgPSBiYXNlRW5jb2RpbmdbY2hhcmNvZGVdKSkgewogICAgICAgICAgICB0b1VuaWNvZGVbY2hhcmNvZGVdID0gU3RyaW5nLmZyb21DaGFyQ29kZShnbHlwaHNVbmljb2RlTWFwW2dseXBoTmFtZV0pOwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgdG9Vbmljb2RlW2NoYXJjb2RlXSA9IFN0cmluZy5mcm9tQ29kZVBvaW50KGNvZGUpOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gdG9Vbmljb2RlOwogIH0KICBhc3luYyBidWlsZFRvVW5pY29kZShwcm9wZXJ0aWVzKSB7CiAgICBwcm9wZXJ0aWVzLmhhc0luY2x1ZGVkVG9Vbmljb2RlTWFwID0gcHJvcGVydGllcy50b1VuaWNvZGU/Lmxlbmd0aCA+IDA7CiAgICBpZiAocHJvcGVydGllcy5oYXNJbmNsdWRlZFRvVW5pY29kZU1hcCkgewogICAgICBpZiAoIXByb3BlcnRpZXMuY29tcG9zaXRlICYmIHByb3BlcnRpZXMuaGFzRW5jb2RpbmcpIHsKICAgICAgICBwcm9wZXJ0aWVzLmZhbGxiYWNrVG9Vbmljb2RlID0gdGhpcy5fc2ltcGxlRm9udFRvVW5pY29kZShwcm9wZXJ0aWVzKTsKICAgICAgfQogICAgICByZXR1cm4gcHJvcGVydGllcy50b1VuaWNvZGU7CiAgICB9CiAgICBpZiAoIXByb3BlcnRpZXMuY29tcG9zaXRlKSB7CiAgICAgIHJldHVybiBuZXcgVG9Vbmljb2RlTWFwKHRoaXMuX3NpbXBsZUZvbnRUb1VuaWNvZGUocHJvcGVydGllcykpOwogICAgfQogICAgaWYgKHByb3BlcnRpZXMuY29tcG9zaXRlICYmIChwcm9wZXJ0aWVzLmNNYXAuYnVpbHRJbkNNYXAgJiYgIShwcm9wZXJ0aWVzLmNNYXAgaW5zdGFuY2VvZiBJZGVudGl0eUNNYXApIHx8IHByb3BlcnRpZXMuY2lkU3lzdGVtSW5mbz8ucmVnaXN0cnkgPT09ICJBZG9iZSIgJiYgKHByb3BlcnRpZXMuY2lkU3lzdGVtSW5mby5vcmRlcmluZyA9PT0gIkdCMSIgfHwgcHJvcGVydGllcy5jaWRTeXN0ZW1JbmZvLm9yZGVyaW5nID09PSAiQ05TMSIgfHwgcHJvcGVydGllcy5jaWRTeXN0ZW1JbmZvLm9yZGVyaW5nID09PSAiSmFwYW4xIiB8fCBwcm9wZXJ0aWVzLmNpZFN5c3RlbUluZm8ub3JkZXJpbmcgPT09ICJLb3JlYTEiKSkpIHsKICAgICAgY29uc3QgewogICAgICAgIHJlZ2lzdHJ5LAogICAgICAgIG9yZGVyaW5nCiAgICAgIH0gPSBwcm9wZXJ0aWVzLmNpZFN5c3RlbUluZm87CiAgICAgIGNvbnN0IHVjczJDTWFwTmFtZSA9IE5hbWUuZ2V0KGAke3JlZ2lzdHJ5fS0ke29yZGVyaW5nfS1VQ1MyYCk7CiAgICAgIGNvbnN0IHVjczJDTWFwID0gYXdhaXQgQ01hcEZhY3RvcnkuY3JlYXRlKHsKICAgICAgICBlbmNvZGluZzogdWNzMkNNYXBOYW1lLAogICAgICAgIGZldGNoQnVpbHRJbkNNYXA6IHRoaXMuX2ZldGNoQnVpbHRJbkNNYXBCb3VuZCwKICAgICAgICB1c2VDTWFwOiBudWxsCiAgICAgIH0pOwogICAgICBjb25zdCB0b1VuaWNvZGUgPSBbXSwKICAgICAgICBidWYgPSBbXTsKICAgICAgcHJvcGVydGllcy5jTWFwLmZvckVhY2goZnVuY3Rpb24gKGNoYXJjb2RlLCBjaWQpIHsKICAgICAgICBpZiAoY2lkID4gMHhmZmZmKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoIk1heCBzaXplIG9mIENJRCBpcyA2NSw1MzUiKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgdWNzMiA9IHVjczJDTWFwLmxvb2t1cChjaWQpOwogICAgICAgIGlmICh1Y3MyKSB7CiAgICAgICAgICBidWYubGVuZ3RoID0gMDsKICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IHVjczIubGVuZ3RoOyBpIDwgaWk7IGkgKz0gMikgewogICAgICAgICAgICBidWYucHVzaCgodWNzMi5jaGFyQ29kZUF0KGkpIDw8IDgpICsgdWNzMi5jaGFyQ29kZUF0KGkgKyAxKSk7CiAgICAgICAgICB9CiAgICAgICAgICB0b1VuaWNvZGVbY2hhcmNvZGVdID0gU3RyaW5nLmZyb21DaGFyQ29kZSguLi5idWYpOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHJldHVybiBuZXcgVG9Vbmljb2RlTWFwKHRvVW5pY29kZSk7CiAgICB9CiAgICByZXR1cm4gbmV3IElkZW50aXR5VG9Vbmljb2RlTWFwKHByb3BlcnRpZXMuZmlyc3RDaGFyLCBwcm9wZXJ0aWVzLmxhc3RDaGFyKTsKICB9CiAgYXN5bmMgcmVhZFRvVW5pY29kZShjbWFwT2JqKSB7CiAgICBpZiAoIWNtYXBPYmopIHsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICBpZiAoY21hcE9iaiBpbnN0YW5jZW9mIE5hbWUpIHsKICAgICAgY29uc3QgY21hcCA9IGF3YWl0IENNYXBGYWN0b3J5LmNyZWF0ZSh7CiAgICAgICAgZW5jb2Rpbmc6IGNtYXBPYmosCiAgICAgICAgZmV0Y2hCdWlsdEluQ01hcDogdGhpcy5fZmV0Y2hCdWlsdEluQ01hcEJvdW5kLAogICAgICAgIHVzZUNNYXA6IG51bGwKICAgICAgfSk7CiAgICAgIGlmIChjbWFwIGluc3RhbmNlb2YgSWRlbnRpdHlDTWFwKSB7CiAgICAgICAgcmV0dXJuIG5ldyBJZGVudGl0eVRvVW5pY29kZU1hcCgwLCAweGZmZmYpOwogICAgICB9CiAgICAgIHJldHVybiBuZXcgVG9Vbmljb2RlTWFwKGNtYXAuZ2V0TWFwKCkpOwogICAgfQogICAgaWYgKGNtYXBPYmogaW5zdGFuY2VvZiBCYXNlU3RyZWFtKSB7CiAgICAgIHRyeSB7CiAgICAgICAgY29uc3QgY21hcCA9IGF3YWl0IENNYXBGYWN0b3J5LmNyZWF0ZSh7CiAgICAgICAgICBlbmNvZGluZzogY21hcE9iaiwKICAgICAgICAgIGZldGNoQnVpbHRJbkNNYXA6IHRoaXMuX2ZldGNoQnVpbHRJbkNNYXBCb3VuZCwKICAgICAgICAgIHVzZUNNYXA6IG51bGwKICAgICAgICB9KTsKICAgICAgICBpZiAoY21hcCBpbnN0YW5jZW9mIElkZW50aXR5Q01hcCkgewogICAgICAgICAgcmV0dXJuIG5ldyBJZGVudGl0eVRvVW5pY29kZU1hcCgwLCAweGZmZmYpOwogICAgICAgIH0KICAgICAgICBjb25zdCBtYXAgPSBuZXcgQXJyYXkoY21hcC5sZW5ndGgpOwogICAgICAgIGNtYXAuZm9yRWFjaChmdW5jdGlvbiAoY2hhckNvZGUsIHRva2VuKSB7CiAgICAgICAgICBpZiAodHlwZW9mIHRva2VuID09PSAibnVtYmVyIikgewogICAgICAgICAgICBtYXBbY2hhckNvZGVdID0gU3RyaW5nLmZyb21Db2RlUG9pbnQodG9rZW4pOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodG9rZW4ubGVuZ3RoICUgMiAhPT0gMCkgewogICAgICAgICAgICB0b2tlbiA9ICJcdTAwMDAiICsgdG9rZW47CiAgICAgICAgICB9CiAgICAgICAgICBjb25zdCBzdHIgPSBbXTsKICAgICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgdG9rZW4ubGVuZ3RoOyBrICs9IDIpIHsKICAgICAgICAgICAgY29uc3QgdzEgPSB0b2tlbi5jaGFyQ29kZUF0KGspIDw8IDggfCB0b2tlbi5jaGFyQ29kZUF0KGsgKyAxKTsKICAgICAgICAgICAgaWYgKCh3MSAmIDB4ZjgwMCkgIT09IDB4ZDgwMCkgewogICAgICAgICAgICAgIHN0ci5wdXNoKHcxKTsKICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBrICs9IDI7CiAgICAgICAgICAgIGNvbnN0IHcyID0gdG9rZW4uY2hhckNvZGVBdChrKSA8PCA4IHwgdG9rZW4uY2hhckNvZGVBdChrICsgMSk7CiAgICAgICAgICAgIHN0ci5wdXNoKCgodzEgJiAweDNmZikgPDwgMTApICsgKHcyICYgMHgzZmYpICsgMHgxMDAwMCk7CiAgICAgICAgICB9CiAgICAgICAgICBtYXBbY2hhckNvZGVdID0gU3RyaW5nLmZyb21Db2RlUG9pbnQoLi4uc3RyKTsKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gbmV3IFRvVW5pY29kZU1hcChtYXApOwogICAgICB9IGNhdGNoIChyZWFzb24pIHsKICAgICAgICBpZiAocmVhc29uIGluc3RhbmNlb2YgQWJvcnRFeGNlcHRpb24pIHsKICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0KICAgICAgICBpZiAodGhpcy5vcHRpb25zLmlnbm9yZUVycm9ycykgewogICAgICAgICAgd2FybihgcmVhZFRvVW5pY29kZSAtIGlnbm9yaW5nIFRvVW5pY29kZSBkYXRhOiAiJHtyZWFzb259Ii5gKTsKICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0KICAgICAgICB0aHJvdyByZWFzb247CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBudWxsOwogIH0KICByZWFkQ2lkVG9HaWRNYXAoZ2x5cGhzRGF0YSwgdG9Vbmljb2RlKSB7CiAgICBjb25zdCByZXN1bHQgPSBbXTsKICAgIGZvciAobGV0IGogPSAwLCBqaiA9IGdseXBoc0RhdGEubGVuZ3RoOyBqIDwgamo7IGorKykgewogICAgICBjb25zdCBnbHlwaElEID0gZ2x5cGhzRGF0YVtqKytdIDw8IDggfCBnbHlwaHNEYXRhW2pdOwogICAgICBjb25zdCBjb2RlID0gaiA+PiAxOwogICAgICBpZiAoZ2x5cGhJRCA9PT0gMCAmJiAhdG9Vbmljb2RlLmhhcyhjb2RlKSkgewogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIHJlc3VsdFtjb2RlXSA9IGdseXBoSUQ7CiAgICB9CiAgICByZXR1cm4gcmVzdWx0OwogIH0KICBleHRyYWN0V2lkdGhzKGRpY3QsIGRlc2NyaXB0b3IsIHByb3BlcnRpZXMpIHsKICAgIGNvbnN0IHhyZWYgPSB0aGlzLnhyZWY7CiAgICBsZXQgZ2x5cGhzV2lkdGhzID0gW107CiAgICBsZXQgZGVmYXVsdFdpZHRoID0gMDsKICAgIGNvbnN0IGdseXBoc1ZNZXRyaWNzID0gW107CiAgICBsZXQgZGVmYXVsdFZNZXRyaWNzOwogICAgaWYgKHByb3BlcnRpZXMuY29tcG9zaXRlKSB7CiAgICAgIGNvbnN0IGR3ID0gZGljdC5nZXQoIkRXIik7CiAgICAgIGRlZmF1bHRXaWR0aCA9IHR5cGVvZiBkdyA9PT0gIm51bWJlciIgPyBNYXRoLmNlaWwoZHcpIDogMTAwMDsKICAgICAgY29uc3Qgd2lkdGhzID0gZGljdC5nZXQoIlciKTsKICAgICAgaWYgKEFycmF5LmlzQXJyYXkod2lkdGhzKSkgewogICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IHdpZHRocy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgICAgICBsZXQgc3RhcnQgPSB4cmVmLmZldGNoSWZSZWYod2lkdGhzW2krK10pOwogICAgICAgICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKHN0YXJ0KSkgewogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IGNvZGUgPSB4cmVmLmZldGNoSWZSZWYod2lkdGhzW2ldKTsKICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGNvZGUpKSB7CiAgICAgICAgICAgIGZvciAoY29uc3QgYyBvZiBjb2RlKSB7CiAgICAgICAgICAgICAgY29uc3Qgd2lkdGggPSB4cmVmLmZldGNoSWZSZWYoYyk7CiAgICAgICAgICAgICAgaWYgKHR5cGVvZiB3aWR0aCA9PT0gIm51bWJlciIpIHsKICAgICAgICAgICAgICAgIGdseXBoc1dpZHRoc1tzdGFydF0gPSB3aWR0aDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgc3RhcnQrKzsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIGlmIChOdW1iZXIuaXNJbnRlZ2VyKGNvZGUpKSB7CiAgICAgICAgICAgIGNvbnN0IHdpZHRoID0geHJlZi5mZXRjaElmUmVmKHdpZHRoc1srK2ldKTsKICAgICAgICAgICAgaWYgKHR5cGVvZiB3aWR0aCAhPT0gIm51bWJlciIpIHsKICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmb3IgKGxldCBqID0gc3RhcnQ7IGogPD0gY29kZTsgaisrKSB7CiAgICAgICAgICAgICAgZ2x5cGhzV2lkdGhzW2pdID0gd2lkdGg7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICBpZiAocHJvcGVydGllcy52ZXJ0aWNhbCkgewogICAgICAgIGNvbnN0IGR3MiA9IGRpY3QuZ2V0QXJyYXkoIkRXMiIpOwogICAgICAgIGxldCB2bWV0cmljcyA9IGlzTnVtYmVyQXJyYXkoZHcyLCAyKSA/IGR3MiA6IFs4ODAsIC0xMDAwXTsKICAgICAgICBkZWZhdWx0Vk1ldHJpY3MgPSBbdm1ldHJpY3NbMV0sIGRlZmF1bHRXaWR0aCAqIDAuNSwgdm1ldHJpY3NbMF1dOwogICAgICAgIHZtZXRyaWNzID0gZGljdC5nZXQoIlcyIik7CiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodm1ldHJpY3MpKSB7CiAgICAgICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSB2bWV0cmljcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgICAgICAgIGxldCBzdGFydCA9IHhyZWYuZmV0Y2hJZlJlZih2bWV0cmljc1tpKytdKTsKICAgICAgICAgICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKHN0YXJ0KSkgewogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IGNvZGUgPSB4cmVmLmZldGNoSWZSZWYodm1ldHJpY3NbaV0pOwogICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjb2RlKSkgewogICAgICAgICAgICAgIGZvciAobGV0IGogPSAwLCBqaiA9IGNvZGUubGVuZ3RoOyBqIDwgamo7IGorKykgewogICAgICAgICAgICAgICAgY29uc3Qgdm1ldHJpYyA9IFt4cmVmLmZldGNoSWZSZWYoY29kZVtqKytdKSwgeHJlZi5mZXRjaElmUmVmKGNvZGVbaisrXSksIHhyZWYuZmV0Y2hJZlJlZihjb2RlW2pdKV07CiAgICAgICAgICAgICAgICBpZiAoaXNOdW1iZXJBcnJheSh2bWV0cmljLCBudWxsKSkgewogICAgICAgICAgICAgICAgICBnbHlwaHNWTWV0cmljc1tzdGFydF0gPSB2bWV0cmljOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgc3RhcnQrKzsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSBpZiAoTnVtYmVyLmlzSW50ZWdlcihjb2RlKSkgewogICAgICAgICAgICAgIGNvbnN0IHZtZXRyaWMgPSBbeHJlZi5mZXRjaElmUmVmKHZtZXRyaWNzWysraV0pLCB4cmVmLmZldGNoSWZSZWYodm1ldHJpY3NbKytpXSksIHhyZWYuZmV0Y2hJZlJlZih2bWV0cmljc1srK2ldKV07CiAgICAgICAgICAgICAgaWYgKCFpc051bWJlckFycmF5KHZtZXRyaWMsIG51bGwpKSB7CiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IHN0YXJ0OyBqIDw9IGNvZGU7IGorKykgewogICAgICAgICAgICAgICAgZ2x5cGhzVk1ldHJpY3Nbal0gPSB2bWV0cmljOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgY29uc3Qgd2lkdGhzID0gZGljdC5nZXQoIldpZHRocyIpOwogICAgICBpZiAoQXJyYXkuaXNBcnJheSh3aWR0aHMpKSB7CiAgICAgICAgbGV0IGogPSBwcm9wZXJ0aWVzLmZpcnN0Q2hhcjsKICAgICAgICBmb3IgKGNvbnN0IHcgb2Ygd2lkdGhzKSB7CiAgICAgICAgICBjb25zdCB3aWR0aCA9IHhyZWYuZmV0Y2hJZlJlZih3KTsKICAgICAgICAgIGlmICh0eXBlb2Ygd2lkdGggPT09ICJudW1iZXIiKSB7CiAgICAgICAgICAgIGdseXBoc1dpZHRoc1tqXSA9IHdpZHRoOwogICAgICAgICAgfQogICAgICAgICAgaisrOwogICAgICAgIH0KICAgICAgICBjb25zdCBtaXNzaW5nV2lkdGggPSBkZXNjcmlwdG9yLmdldCgiTWlzc2luZ1dpZHRoIik7CiAgICAgICAgZGVmYXVsdFdpZHRoID0gdHlwZW9mIG1pc3NpbmdXaWR0aCA9PT0gIm51bWJlciIgPyBtaXNzaW5nV2lkdGggOiAwOwogICAgICB9IGVsc2UgewogICAgICAgIGNvbnN0IGJhc2VGb250TmFtZSA9IGRpY3QuZ2V0KCJCYXNlRm9udCIpOwogICAgICAgIGlmIChiYXNlRm9udE5hbWUgaW5zdGFuY2VvZiBOYW1lKSB7CiAgICAgICAgICBjb25zdCBtZXRyaWNzID0gdGhpcy5nZXRCYXNlRm9udE1ldHJpY3MoYmFzZUZvbnROYW1lLm5hbWUpOwogICAgICAgICAgZ2x5cGhzV2lkdGhzID0gdGhpcy5idWlsZENoYXJDb2RlVG9XaWR0aChtZXRyaWNzLndpZHRocywgcHJvcGVydGllcyk7CiAgICAgICAgICBkZWZhdWx0V2lkdGggPSBtZXRyaWNzLmRlZmF1bHRXaWR0aDsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIGxldCBpc01vbm9zcGFjZSA9IHRydWU7CiAgICBsZXQgZmlyc3RXaWR0aCA9IGRlZmF1bHRXaWR0aDsKICAgIGZvciAoY29uc3QgZ2x5cGggaW4gZ2x5cGhzV2lkdGhzKSB7CiAgICAgIGNvbnN0IGdseXBoV2lkdGggPSBnbHlwaHNXaWR0aHNbZ2x5cGhdOwogICAgICBpZiAoIWdseXBoV2lkdGgpIHsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBpZiAoIWZpcnN0V2lkdGgpIHsKICAgICAgICBmaXJzdFdpZHRoID0gZ2x5cGhXaWR0aDsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBpZiAoZmlyc3RXaWR0aCAhPT0gZ2x5cGhXaWR0aCkgewogICAgICAgIGlzTW9ub3NwYWNlID0gZmFsc2U7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KICAgIGlmIChpc01vbm9zcGFjZSkgewogICAgICBwcm9wZXJ0aWVzLmZsYWdzIHw9IEZvbnRGbGFncy5GaXhlZFBpdGNoOwogICAgfSBlbHNlIHsKICAgICAgcHJvcGVydGllcy5mbGFncyAmPSB+Rm9udEZsYWdzLkZpeGVkUGl0Y2g7CiAgICB9CiAgICBwcm9wZXJ0aWVzLmRlZmF1bHRXaWR0aCA9IGRlZmF1bHRXaWR0aDsKICAgIHByb3BlcnRpZXMud2lkdGhzID0gZ2x5cGhzV2lkdGhzOwogICAgcHJvcGVydGllcy5kZWZhdWx0Vk1ldHJpY3MgPSBkZWZhdWx0Vk1ldHJpY3M7CiAgICBwcm9wZXJ0aWVzLnZtZXRyaWNzID0gZ2x5cGhzVk1ldHJpY3M7CiAgfQogIGlzU2VyaWZGb250KGJhc2VGb250TmFtZSkgewogICAgY29uc3QgZm9udE5hbWVXb1N0eWxlID0gYmFzZUZvbnROYW1lLnNwbGl0KCItIiwgMSlbMF07CiAgICByZXR1cm4gZm9udE5hbWVXb1N0eWxlIGluIGdldFNlcmlmRm9udHMoKSB8fCAvc2VyaWYvZ2kudGVzdChmb250TmFtZVdvU3R5bGUpOwogIH0KICBnZXRCYXNlRm9udE1ldHJpY3MobmFtZSkgewogICAgbGV0IGRlZmF1bHRXaWR0aCA9IDA7CiAgICBsZXQgd2lkdGhzID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgIGxldCBtb25vc3BhY2UgPSBmYWxzZTsKICAgIGNvbnN0IHN0ZEZvbnRNYXAgPSBnZXRTdGRGb250TWFwKCk7CiAgICBsZXQgbG9va3VwTmFtZSA9IHN0ZEZvbnRNYXBbbmFtZV0gfHwgbmFtZTsKICAgIGNvbnN0IE1ldHJpY3MgPSBnZXRNZXRyaWNzKCk7CiAgICBpZiAoIShsb29rdXBOYW1lIGluIE1ldHJpY3MpKSB7CiAgICAgIGxvb2t1cE5hbWUgPSB0aGlzLmlzU2VyaWZGb250KG5hbWUpID8gIlRpbWVzLVJvbWFuIiA6ICJIZWx2ZXRpY2EiOwogICAgfQogICAgY29uc3QgZ2x5cGhXaWR0aHMgPSBNZXRyaWNzW2xvb2t1cE5hbWVdOwogICAgaWYgKHR5cGVvZiBnbHlwaFdpZHRocyA9PT0gIm51bWJlciIpIHsKICAgICAgZGVmYXVsdFdpZHRoID0gZ2x5cGhXaWR0aHM7CiAgICAgIG1vbm9zcGFjZSA9IHRydWU7CiAgICB9IGVsc2UgewogICAgICB3aWR0aHMgPSBnbHlwaFdpZHRocygpOwogICAgfQogICAgcmV0dXJuIHsKICAgICAgZGVmYXVsdFdpZHRoLAogICAgICBtb25vc3BhY2UsCiAgICAgIHdpZHRocwogICAgfTsKICB9CiAgYnVpbGRDaGFyQ29kZVRvV2lkdGgod2lkdGhzQnlHbHlwaE5hbWUsIHByb3BlcnRpZXMpIHsKICAgIGNvbnN0IHdpZHRocyA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgICBjb25zdCBkaWZmZXJlbmNlcyA9IHByb3BlcnRpZXMuZGlmZmVyZW5jZXM7CiAgICBjb25zdCBlbmNvZGluZyA9IHByb3BlcnRpZXMuZGVmYXVsdEVuY29kaW5nOwogICAgZm9yIChsZXQgY2hhckNvZGUgPSAwOyBjaGFyQ29kZSA8IDI1NjsgY2hhckNvZGUrKykgewogICAgICBpZiAoY2hhckNvZGUgaW4gZGlmZmVyZW5jZXMgJiYgd2lkdGhzQnlHbHlwaE5hbWVbZGlmZmVyZW5jZXNbY2hhckNvZGVdXSkgewogICAgICAgIHdpZHRoc1tjaGFyQ29kZV0gPSB3aWR0aHNCeUdseXBoTmFtZVtkaWZmZXJlbmNlc1tjaGFyQ29kZV1dOwogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGlmIChjaGFyQ29kZSBpbiBlbmNvZGluZyAmJiB3aWR0aHNCeUdseXBoTmFtZVtlbmNvZGluZ1tjaGFyQ29kZV1dKSB7CiAgICAgICAgd2lkdGhzW2NoYXJDb2RlXSA9IHdpZHRoc0J5R2x5cGhOYW1lW2VuY29kaW5nW2NoYXJDb2RlXV07CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiB3aWR0aHM7CiAgfQogIHByZUV2YWx1YXRlRm9udChkaWN0KSB7CiAgICBjb25zdCBiYXNlRGljdCA9IGRpY3Q7CiAgICBsZXQgdHlwZSA9IGRpY3QuZ2V0KCJTdWJ0eXBlIik7CiAgICBpZiAoISh0eXBlIGluc3RhbmNlb2YgTmFtZSkpIHsKICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCJpbnZhbGlkIGZvbnQgU3VidHlwZSIpOwogICAgfQogICAgbGV0IGNvbXBvc2l0ZSA9IGZhbHNlOwogICAgbGV0IGhhc2g7CiAgICBpZiAodHlwZS5uYW1lID09PSAiVHlwZTAiKSB7CiAgICAgIGNvbnN0IGRmID0gZGljdC5nZXQoIkRlc2NlbmRhbnRGb250cyIpOwogICAgICBpZiAoIWRmKSB7CiAgICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCJEZXNjZW5kYW50IGZvbnRzIGFyZSBub3Qgc3BlY2lmaWVkIik7CiAgICAgIH0KICAgICAgZGljdCA9IEFycmF5LmlzQXJyYXkoZGYpID8gdGhpcy54cmVmLmZldGNoSWZSZWYoZGZbMF0pIDogZGY7CiAgICAgIGlmICghKGRpY3QgaW5zdGFuY2VvZiBEaWN0KSkgewogICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigiRGVzY2VuZGFudCBmb250IGlzIG5vdCBhIGRpY3Rpb25hcnkuIik7CiAgICAgIH0KICAgICAgdHlwZSA9IGRpY3QuZ2V0KCJTdWJ0eXBlIik7CiAgICAgIGlmICghKHR5cGUgaW5zdGFuY2VvZiBOYW1lKSkgewogICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigiaW52YWxpZCBmb250IFN1YnR5cGUiKTsKICAgICAgfQogICAgICBjb21wb3NpdGUgPSB0cnVlOwogICAgfQogICAgbGV0IGZpcnN0Q2hhciA9IGRpY3QuZ2V0KCJGaXJzdENoYXIiKTsKICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihmaXJzdENoYXIpKSB7CiAgICAgIGZpcnN0Q2hhciA9IDA7CiAgICB9CiAgICBsZXQgbGFzdENoYXIgPSBkaWN0LmdldCgiTGFzdENoYXIiKTsKICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihsYXN0Q2hhcikpIHsKICAgICAgbGFzdENoYXIgPSBjb21wb3NpdGUgPyAweGZmZmYgOiAweGZmOwogICAgfQogICAgY29uc3QgZGVzY3JpcHRvciA9IGRpY3QuZ2V0KCJGb250RGVzY3JpcHRvciIpOwogICAgY29uc3QgdG9Vbmljb2RlID0gZGljdC5nZXQoIlRvVW5pY29kZSIpIHx8IGJhc2VEaWN0LmdldCgiVG9Vbmljb2RlIik7CiAgICBpZiAoZGVzY3JpcHRvcikgewogICAgICBoYXNoID0gbmV3IE11cm11ckhhc2gzXzY0KCk7CiAgICAgIGNvbnN0IGVuY29kaW5nID0gYmFzZURpY3QuZ2V0UmF3KCJFbmNvZGluZyIpOwogICAgICBpZiAoZW5jb2RpbmcgaW5zdGFuY2VvZiBOYW1lKSB7CiAgICAgICAgaGFzaC51cGRhdGUoZW5jb2RpbmcubmFtZSk7CiAgICAgIH0gZWxzZSBpZiAoZW5jb2RpbmcgaW5zdGFuY2VvZiBSZWYpIHsKICAgICAgICBoYXNoLnVwZGF0ZShlbmNvZGluZy50b1N0cmluZygpKTsKICAgICAgfSBlbHNlIGlmIChlbmNvZGluZyBpbnN0YW5jZW9mIERpY3QpIHsKICAgICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGVuY29kaW5nLmdldFJhd1ZhbHVlcygpKSB7CiAgICAgICAgICBpZiAoZW50cnkgaW5zdGFuY2VvZiBOYW1lKSB7CiAgICAgICAgICAgIGhhc2gudXBkYXRlKGVudHJ5Lm5hbWUpOwogICAgICAgICAgfSBlbHNlIGlmIChlbnRyeSBpbnN0YW5jZW9mIFJlZikgewogICAgICAgICAgICBoYXNoLnVwZGF0ZShlbnRyeS50b1N0cmluZygpKTsKICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShlbnRyeSkpIHsKICAgICAgICAgICAgY29uc3QgZGlmZkxlbmd0aCA9IGVudHJ5Lmxlbmd0aCwKICAgICAgICAgICAgICBkaWZmQnVmID0gbmV3IEFycmF5KGRpZmZMZW5ndGgpOwogICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGRpZmZMZW5ndGg7IGorKykgewogICAgICAgICAgICAgIGNvbnN0IGRpZmZFbnRyeSA9IGVudHJ5W2pdOwogICAgICAgICAgICAgIGlmIChkaWZmRW50cnkgaW5zdGFuY2VvZiBOYW1lKSB7CiAgICAgICAgICAgICAgICBkaWZmQnVmW2pdID0gZGlmZkVudHJ5Lm5hbWU7CiAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZGlmZkVudHJ5ID09PSAibnVtYmVyIiB8fCBkaWZmRW50cnkgaW5zdGFuY2VvZiBSZWYpIHsKICAgICAgICAgICAgICAgIGRpZmZCdWZbal0gPSBkaWZmRW50cnkudG9TdHJpbmcoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaGFzaC51cGRhdGUoZGlmZkJ1Zi5qb2luKCkpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICBoYXNoLnVwZGF0ZShgJHtmaXJzdENoYXJ9LSR7bGFzdENoYXJ9YCk7CiAgICAgIGlmICh0b1VuaWNvZGUgaW5zdGFuY2VvZiBCYXNlU3RyZWFtKSB7CiAgICAgICAgY29uc3Qgc3RyZWFtID0gdG9Vbmljb2RlLnN0ciB8fCB0b1VuaWNvZGU7CiAgICAgICAgY29uc3QgdWludDhhcnJheSA9IHN0cmVhbS5idWZmZXIgPyBuZXcgVWludDhBcnJheShzdHJlYW0uYnVmZmVyLmJ1ZmZlciwgMCwgc3RyZWFtLmJ1ZmZlckxlbmd0aCkgOiBuZXcgVWludDhBcnJheShzdHJlYW0uYnl0ZXMuYnVmZmVyLCBzdHJlYW0uc3RhcnQsIHN0cmVhbS5lbmQgLSBzdHJlYW0uc3RhcnQpOwogICAgICAgIGhhc2gudXBkYXRlKHVpbnQ4YXJyYXkpOwogICAgICB9IGVsc2UgaWYgKHRvVW5pY29kZSBpbnN0YW5jZW9mIE5hbWUpIHsKICAgICAgICBoYXNoLnVwZGF0ZSh0b1VuaWNvZGUubmFtZSk7CiAgICAgIH0KICAgICAgY29uc3Qgd2lkdGhzID0gZGljdC5nZXQoIldpZHRocyIpIHx8IGJhc2VEaWN0LmdldCgiV2lkdGhzIik7CiAgICAgIGlmIChBcnJheS5pc0FycmF5KHdpZHRocykpIHsKICAgICAgICBjb25zdCB3aWR0aHNCdWYgPSBbXTsKICAgICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIHdpZHRocykgewogICAgICAgICAgaWYgKHR5cGVvZiBlbnRyeSA9PT0gIm51bWJlciIgfHwgZW50cnkgaW5zdGFuY2VvZiBSZWYpIHsKICAgICAgICAgICAgd2lkdGhzQnVmLnB1c2goZW50cnkudG9TdHJpbmcoKSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGhhc2gudXBkYXRlKHdpZHRoc0J1Zi5qb2luKCkpOwogICAgICB9CiAgICAgIGlmIChjb21wb3NpdGUpIHsKICAgICAgICBoYXNoLnVwZGF0ZSgiY29tcG9zaXRlRm9udCIpOwogICAgICAgIGNvbnN0IGNvbXBvc2l0ZVdpZHRocyA9IGRpY3QuZ2V0KCJXIikgfHwgYmFzZURpY3QuZ2V0KCJXIik7CiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY29tcG9zaXRlV2lkdGhzKSkgewogICAgICAgICAgY29uc3Qgd2lkdGhzQnVmID0gW107CiAgICAgICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGNvbXBvc2l0ZVdpZHRocykgewogICAgICAgICAgICBpZiAodHlwZW9mIGVudHJ5ID09PSAibnVtYmVyIiB8fCBlbnRyeSBpbnN0YW5jZW9mIFJlZikgewogICAgICAgICAgICAgIHdpZHRoc0J1Zi5wdXNoKGVudHJ5LnRvU3RyaW5nKCkpOwogICAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZW50cnkpKSB7CiAgICAgICAgICAgICAgY29uc3Qgc3ViV2lkdGhzQnVmID0gW107CiAgICAgICAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGVudHJ5KSB7CiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGVsZW1lbnQgPT09ICJudW1iZXIiIHx8IGVsZW1lbnQgaW5zdGFuY2VvZiBSZWYpIHsKICAgICAgICAgICAgICAgICAgc3ViV2lkdGhzQnVmLnB1c2goZWxlbWVudC50b1N0cmluZygpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgd2lkdGhzQnVmLnB1c2goYFske3N1YldpZHRoc0J1Zi5qb2luKCl9XWApOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBoYXNoLnVwZGF0ZSh3aWR0aHNCdWYuam9pbigpKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgY2lkVG9HaWRNYXAgPSBkaWN0LmdldFJhdygiQ0lEVG9HSURNYXAiKSB8fCBiYXNlRGljdC5nZXRSYXcoIkNJRFRvR0lETWFwIik7CiAgICAgICAgaWYgKGNpZFRvR2lkTWFwIGluc3RhbmNlb2YgTmFtZSkgewogICAgICAgICAgaGFzaC51cGRhdGUoY2lkVG9HaWRNYXAubmFtZSk7CiAgICAgICAgfSBlbHNlIGlmIChjaWRUb0dpZE1hcCBpbnN0YW5jZW9mIFJlZikgewogICAgICAgICAgaGFzaC51cGRhdGUoY2lkVG9HaWRNYXAudG9TdHJpbmcoKSk7CiAgICAgICAgfSBlbHNlIGlmIChjaWRUb0dpZE1hcCBpbnN0YW5jZW9mIEJhc2VTdHJlYW0pIHsKICAgICAgICAgIGhhc2gudXBkYXRlKGNpZFRvR2lkTWFwLnBlZWtCeXRlcygpKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIHJldHVybiB7CiAgICAgIGRlc2NyaXB0b3IsCiAgICAgIGRpY3QsCiAgICAgIGJhc2VEaWN0LAogICAgICBjb21wb3NpdGUsCiAgICAgIHR5cGU6IHR5cGUubmFtZSwKICAgICAgZmlyc3RDaGFyLAogICAgICBsYXN0Q2hhciwKICAgICAgdG9Vbmljb2RlLAogICAgICBoYXNoOiBoYXNoID8gaGFzaC5oZXhkaWdlc3QoKSA6ICIiCiAgICB9OwogIH0KICBhc3luYyB0cmFuc2xhdGVGb250KHsKICAgIGRlc2NyaXB0b3IsCiAgICBkaWN0LAogICAgYmFzZURpY3QsCiAgICBjb21wb3NpdGUsCiAgICB0eXBlLAogICAgZmlyc3RDaGFyLAogICAgbGFzdENoYXIsCiAgICB0b1VuaWNvZGUsCiAgICBjc3NGb250SW5mbwogIH0pIHsKICAgIGNvbnN0IGlzVHlwZTNGb250ID0gdHlwZSA9PT0gIlR5cGUzIjsKICAgIGlmICghZGVzY3JpcHRvcikgewogICAgICBpZiAoaXNUeXBlM0ZvbnQpIHsKICAgICAgICBkZXNjcmlwdG9yID0gRGljdC5lbXB0eTsKICAgICAgfSBlbHNlIHsKICAgICAgICBsZXQgYmFzZUZvbnROYW1lID0gZGljdC5nZXQoIkJhc2VGb250Iik7CiAgICAgICAgaWYgKCEoYmFzZUZvbnROYW1lIGluc3RhbmNlb2YgTmFtZSkpIHsKICAgICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigiQmFzZSBmb250IGlzIG5vdCBzcGVjaWZpZWQiKTsKICAgICAgICB9CiAgICAgICAgYmFzZUZvbnROYW1lID0gYmFzZUZvbnROYW1lLm5hbWUucmVwbGFjZUFsbCgvWyxfXS9nLCAiLSIpOwogICAgICAgIGNvbnN0IG1ldHJpY3MgPSB0aGlzLmdldEJhc2VGb250TWV0cmljcyhiYXNlRm9udE5hbWUpOwogICAgICAgIGNvbnN0IGZvbnROYW1lV29TdHlsZSA9IGJhc2VGb250TmFtZS5zcGxpdCgiLSIsIDEpWzBdOwogICAgICAgIGNvbnN0IGZsYWdzID0gKHRoaXMuaXNTZXJpZkZvbnQoZm9udE5hbWVXb1N0eWxlKSA/IEZvbnRGbGFncy5TZXJpZiA6IDApIHwgKG1ldHJpY3MubW9ub3NwYWNlID8gRm9udEZsYWdzLkZpeGVkUGl0Y2ggOiAwKSB8IChnZXRTeW1ib2xzRm9udHMoKVtmb250TmFtZVdvU3R5bGVdID8gRm9udEZsYWdzLlN5bWJvbGljIDogRm9udEZsYWdzLk5vbnN5bWJvbGljKTsKICAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0gewogICAgICAgICAgdHlwZSwKICAgICAgICAgIG5hbWU6IGJhc2VGb250TmFtZSwKICAgICAgICAgIGxvYWRlZE5hbWU6IGJhc2VEaWN0LmxvYWRlZE5hbWUsCiAgICAgICAgICBzeXN0ZW1Gb250SW5mbzogbnVsbCwKICAgICAgICAgIHdpZHRoczogbWV0cmljcy53aWR0aHMsCiAgICAgICAgICBkZWZhdWx0V2lkdGg6IG1ldHJpY3MuZGVmYXVsdFdpZHRoLAogICAgICAgICAgaXNTaW11bGF0ZWRGbGFnczogdHJ1ZSwKICAgICAgICAgIGZsYWdzLAogICAgICAgICAgZmlyc3RDaGFyLAogICAgICAgICAgbGFzdENoYXIsCiAgICAgICAgICB0b1VuaWNvZGUsCiAgICAgICAgICB4SGVpZ2h0OiAwLAogICAgICAgICAgY2FwSGVpZ2h0OiAwLAogICAgICAgICAgaXRhbGljQW5nbGU6IDAsCiAgICAgICAgICBpc1R5cGUzRm9udAogICAgICAgIH07CiAgICAgICAgY29uc3Qgd2lkdGhzID0gZGljdC5nZXQoIldpZHRocyIpOwogICAgICAgIGNvbnN0IHN0YW5kYXJkRm9udE5hbWUgPSBnZXRTdGFuZGFyZEZvbnROYW1lKGJhc2VGb250TmFtZSk7CiAgICAgICAgbGV0IGZpbGUgPSBudWxsOwogICAgICAgIGlmIChzdGFuZGFyZEZvbnROYW1lKSB7CiAgICAgICAgICBmaWxlID0gYXdhaXQgdGhpcy5mZXRjaFN0YW5kYXJkRm9udERhdGEoc3RhbmRhcmRGb250TmFtZSk7CiAgICAgICAgICBwcm9wZXJ0aWVzLmlzSW50ZXJuYWxGb250ID0gISFmaWxlOwogICAgICAgIH0KICAgICAgICBpZiAoIXByb3BlcnRpZXMuaXNJbnRlcm5hbEZvbnQgJiYgdGhpcy5vcHRpb25zLnVzZVN5c3RlbUZvbnRzKSB7CiAgICAgICAgICBwcm9wZXJ0aWVzLnN5c3RlbUZvbnRJbmZvID0gZ2V0Rm9udFN1YnN0aXR1dGlvbih0aGlzLnN5c3RlbUZvbnRDYWNoZSwgdGhpcy5pZEZhY3RvcnksIHRoaXMub3B0aW9ucy5zdGFuZGFyZEZvbnREYXRhVXJsLCBiYXNlRm9udE5hbWUsIHN0YW5kYXJkRm9udE5hbWUsIHR5cGUpOwogICAgICAgIH0KICAgICAgICBjb25zdCBuZXdQcm9wZXJ0aWVzID0gYXdhaXQgdGhpcy5leHRyYWN0RGF0YVN0cnVjdHVyZXMoZGljdCwgcHJvcGVydGllcyk7CiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkod2lkdGhzKSkgewogICAgICAgICAgY29uc3QgZ2x5cGhXaWR0aHMgPSBbXTsKICAgICAgICAgIGxldCBqID0gZmlyc3RDaGFyOwogICAgICAgICAgZm9yIChjb25zdCB3IG9mIHdpZHRocykgewogICAgICAgICAgICBjb25zdCB3aWR0aCA9IHRoaXMueHJlZi5mZXRjaElmUmVmKHcpOwogICAgICAgICAgICBpZiAodHlwZW9mIHdpZHRoID09PSAibnVtYmVyIikgewogICAgICAgICAgICAgIGdseXBoV2lkdGhzW2pdID0gd2lkdGg7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaisrOwogICAgICAgICAgfQogICAgICAgICAgbmV3UHJvcGVydGllcy53aWR0aHMgPSBnbHlwaFdpZHRoczsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgbmV3UHJvcGVydGllcy53aWR0aHMgPSB0aGlzLmJ1aWxkQ2hhckNvZGVUb1dpZHRoKG1ldHJpY3Mud2lkdGhzLCBuZXdQcm9wZXJ0aWVzKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG5ldyBGb250KGJhc2VGb250TmFtZSwgZmlsZSwgbmV3UHJvcGVydGllcywgdGhpcy5vcHRpb25zKTsKICAgICAgfQogICAgfQogICAgbGV0IGZvbnROYW1lID0gZGVzY3JpcHRvci5nZXQoIkZvbnROYW1lIik7CiAgICBsZXQgYmFzZUZvbnQgPSBkaWN0LmdldCgiQmFzZUZvbnQiKTsKICAgIGlmICh0eXBlb2YgZm9udE5hbWUgPT09ICJzdHJpbmciKSB7CiAgICAgIGZvbnROYW1lID0gTmFtZS5nZXQoZm9udE5hbWUpOwogICAgfQogICAgaWYgKHR5cGVvZiBiYXNlRm9udCA9PT0gInN0cmluZyIpIHsKICAgICAgYmFzZUZvbnQgPSBOYW1lLmdldChiYXNlRm9udCk7CiAgICB9CiAgICBjb25zdCBmb250TmFtZVN0ciA9IGZvbnROYW1lPy5uYW1lOwogICAgY29uc3QgYmFzZUZvbnRTdHIgPSBiYXNlRm9udD8ubmFtZTsKICAgIGlmIChpc1R5cGUzRm9udCkgewogICAgICBpZiAoIWZvbnROYW1lU3RyKSB7CiAgICAgICAgZm9udE5hbWUgPSBOYW1lLmdldCh0eXBlKTsKICAgICAgfQogICAgfSBlbHNlIGlmIChmb250TmFtZVN0ciAhPT0gYmFzZUZvbnRTdHIpIHsKICAgICAgaW5mbyhgVGhlIEZvbnREZXNjcmlwdG9yJ3MgRm9udE5hbWUgaXMgIiR7Zm9udE5hbWVTdHJ9IiBidXQgYCArIGBzaG91bGQgYmUgdGhlIHNhbWUgYXMgdGhlIEZvbnQncyBCYXNlRm9udCAiJHtiYXNlRm9udFN0cn0iLmApOwogICAgICBpZiAoZm9udE5hbWVTdHIgJiYgYmFzZUZvbnRTdHIgJiYgKGJhc2VGb250U3RyLnN0YXJ0c1dpdGgoZm9udE5hbWVTdHIpIHx8ICFpc0tub3duRm9udE5hbWUoZm9udE5hbWVTdHIpICYmIGlzS25vd25Gb250TmFtZShiYXNlRm9udFN0cikpKSB7CiAgICAgICAgZm9udE5hbWUgPSBudWxsOwogICAgICB9CiAgICAgIGZvbnROYW1lIHx8PSBiYXNlRm9udDsKICAgIH0KICAgIGlmICghKGZvbnROYW1lIGluc3RhbmNlb2YgTmFtZSkpIHsKICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCJpbnZhbGlkIGZvbnQgbmFtZSIpOwogICAgfQogICAgbGV0IGZvbnRGaWxlLCBzdWJ0eXBlLCBsZW5ndGgxLCBsZW5ndGgyLCBsZW5ndGgzOwogICAgdHJ5IHsKICAgICAgZm9udEZpbGUgPSBkZXNjcmlwdG9yLmdldCgiRm9udEZpbGUiLCAiRm9udEZpbGUyIiwgIkZvbnRGaWxlMyIpOwogICAgICBpZiAoZm9udEZpbGUpIHsKICAgICAgICBpZiAoIShmb250RmlsZSBpbnN0YW5jZW9mIEJhc2VTdHJlYW0pKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoIkZvbnRGaWxlIHNob3VsZCBiZSBhIHN0cmVhbSIpOwogICAgICAgIH0gZWxzZSBpZiAoZm9udEZpbGUuaXNFbXB0eSkgewogICAgICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCJGb250RmlsZSBpcyBlbXB0eSIpOwogICAgICAgIH0KICAgICAgfQogICAgfSBjYXRjaCAoZXgpIHsKICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuaWdub3JlRXJyb3JzKSB7CiAgICAgICAgdGhyb3cgZXg7CiAgICAgIH0KICAgICAgd2FybihgdHJhbnNsYXRlRm9udCAtIGZldGNoaW5nICIke2ZvbnROYW1lLm5hbWV9IiBmb250IGZpbGU6ICIke2V4fSIuYCk7CiAgICAgIGZvbnRGaWxlID0gbnVsbDsKICAgIH0KICAgIGxldCBpc0ludGVybmFsRm9udCA9IGZhbHNlOwogICAgbGV0IGdseXBoU2NhbGVGYWN0b3JzID0gbnVsbDsKICAgIGxldCBzeXN0ZW1Gb250SW5mbyA9IG51bGw7CiAgICBpZiAoZm9udEZpbGUpIHsKICAgICAgaWYgKGZvbnRGaWxlLmRpY3QpIHsKICAgICAgICBjb25zdCBzdWJ0eXBlRW50cnkgPSBmb250RmlsZS5kaWN0LmdldCgiU3VidHlwZSIpOwogICAgICAgIGlmIChzdWJ0eXBlRW50cnkgaW5zdGFuY2VvZiBOYW1lKSB7CiAgICAgICAgICBzdWJ0eXBlID0gc3VidHlwZUVudHJ5Lm5hbWU7CiAgICAgICAgfQogICAgICAgIGxlbmd0aDEgPSBmb250RmlsZS5kaWN0LmdldCgiTGVuZ3RoMSIpOwogICAgICAgIGxlbmd0aDIgPSBmb250RmlsZS5kaWN0LmdldCgiTGVuZ3RoMiIpOwogICAgICAgIGxlbmd0aDMgPSBmb250RmlsZS5kaWN0LmdldCgiTGVuZ3RoMyIpOwogICAgICB9CiAgICB9IGVsc2UgaWYgKGNzc0ZvbnRJbmZvKSB7CiAgICAgIGNvbnN0IHN0YW5kYXJkRm9udE5hbWUgPSBnZXRYZmFGb250TmFtZShmb250TmFtZS5uYW1lKTsKICAgICAgaWYgKHN0YW5kYXJkRm9udE5hbWUpIHsKICAgICAgICBjc3NGb250SW5mby5mb250RmFtaWx5ID0gYCR7Y3NzRm9udEluZm8uZm9udEZhbWlseX0tUGRmSlMtWEZBYDsKICAgICAgICBjc3NGb250SW5mby5tZXRyaWNzID0gc3RhbmRhcmRGb250TmFtZS5tZXRyaWNzIHx8IG51bGw7CiAgICAgICAgZ2x5cGhTY2FsZUZhY3RvcnMgPSBzdGFuZGFyZEZvbnROYW1lLmZhY3RvcnMgfHwgbnVsbDsKICAgICAgICBmb250RmlsZSA9IGF3YWl0IHRoaXMuZmV0Y2hTdGFuZGFyZEZvbnREYXRhKHN0YW5kYXJkRm9udE5hbWUubmFtZSk7CiAgICAgICAgaXNJbnRlcm5hbEZvbnQgPSAhIWZvbnRGaWxlOwogICAgICAgIGJhc2VEaWN0ID0gZGljdCA9IGdldFhmYUZvbnREaWN0KGZvbnROYW1lLm5hbWUpOwogICAgICAgIGNvbXBvc2l0ZSA9IHRydWU7CiAgICAgIH0KICAgIH0gZWxzZSBpZiAoIWlzVHlwZTNGb250KSB7CiAgICAgIGNvbnN0IHN0YW5kYXJkRm9udE5hbWUgPSBnZXRTdGFuZGFyZEZvbnROYW1lKGZvbnROYW1lLm5hbWUpOwogICAgICBpZiAoc3RhbmRhcmRGb250TmFtZSkgewogICAgICAgIGZvbnRGaWxlID0gYXdhaXQgdGhpcy5mZXRjaFN0YW5kYXJkRm9udERhdGEoc3RhbmRhcmRGb250TmFtZSk7CiAgICAgICAgaXNJbnRlcm5hbEZvbnQgPSAhIWZvbnRGaWxlOwogICAgICB9CiAgICAgIGlmICghaXNJbnRlcm5hbEZvbnQgJiYgdGhpcy5vcHRpb25zLnVzZVN5c3RlbUZvbnRzKSB7CiAgICAgICAgc3lzdGVtRm9udEluZm8gPSBnZXRGb250U3Vic3RpdHV0aW9uKHRoaXMuc3lzdGVtRm9udENhY2hlLCB0aGlzLmlkRmFjdG9yeSwgdGhpcy5vcHRpb25zLnN0YW5kYXJkRm9udERhdGFVcmwsIGZvbnROYW1lLm5hbWUsIHN0YW5kYXJkRm9udE5hbWUsIHR5cGUpOwogICAgICB9CiAgICB9CiAgICBjb25zdCBmb250TWF0cml4ID0gbG9va3VwTWF0cml4KGRpY3QuZ2V0QXJyYXkoIkZvbnRNYXRyaXgiKSwgRk9OVF9JREVOVElUWV9NQVRSSVgpOwogICAgY29uc3QgYmJveCA9IGxvb2t1cE5vcm1hbFJlY3QoZGVzY3JpcHRvci5nZXRBcnJheSgiRm9udEJCb3giKSB8fCBkaWN0LmdldEFycmF5KCJGb250QkJveCIpLCBpc1R5cGUzRm9udCA/IFswLCAwLCAwLCAwXSA6IHVuZGVmaW5lZCk7CiAgICBsZXQgYXNjZW50ID0gZGVzY3JpcHRvci5nZXQoIkFzY2VudCIpOwogICAgaWYgKHR5cGVvZiBhc2NlbnQgIT09ICJudW1iZXIiKSB7CiAgICAgIGFzY2VudCA9IHVuZGVmaW5lZDsKICAgIH0KICAgIGxldCBkZXNjZW50ID0gZGVzY3JpcHRvci5nZXQoIkRlc2NlbnQiKTsKICAgIGlmICh0eXBlb2YgZGVzY2VudCAhPT0gIm51bWJlciIpIHsKICAgICAgZGVzY2VudCA9IHVuZGVmaW5lZDsKICAgIH0KICAgIGxldCB4SGVpZ2h0ID0gZGVzY3JpcHRvci5nZXQoIlhIZWlnaHQiKTsKICAgIGlmICh0eXBlb2YgeEhlaWdodCAhPT0gIm51bWJlciIpIHsKICAgICAgeEhlaWdodCA9IDA7CiAgICB9CiAgICBsZXQgY2FwSGVpZ2h0ID0gZGVzY3JpcHRvci5nZXQoIkNhcEhlaWdodCIpOwogICAgaWYgKHR5cGVvZiBjYXBIZWlnaHQgIT09ICJudW1iZXIiKSB7CiAgICAgIGNhcEhlaWdodCA9IDA7CiAgICB9CiAgICBsZXQgZmxhZ3MgPSBkZXNjcmlwdG9yLmdldCgiRmxhZ3MiKTsKICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihmbGFncykpIHsKICAgICAgZmxhZ3MgPSAwOwogICAgfQogICAgbGV0IGl0YWxpY0FuZ2xlID0gZGVzY3JpcHRvci5nZXQoIkl0YWxpY0FuZ2xlIik7CiAgICBpZiAodHlwZW9mIGl0YWxpY0FuZ2xlICE9PSAibnVtYmVyIikgewogICAgICBpdGFsaWNBbmdsZSA9IDA7CiAgICB9CiAgICBjb25zdCBwcm9wZXJ0aWVzID0gewogICAgICB0eXBlLAogICAgICBuYW1lOiBmb250TmFtZS5uYW1lLAogICAgICBzdWJ0eXBlLAogICAgICBmaWxlOiBmb250RmlsZSwKICAgICAgbGVuZ3RoMSwKICAgICAgbGVuZ3RoMiwKICAgICAgbGVuZ3RoMywKICAgICAgaXNJbnRlcm5hbEZvbnQsCiAgICAgIGxvYWRlZE5hbWU6IGJhc2VEaWN0LmxvYWRlZE5hbWUsCiAgICAgIGNvbXBvc2l0ZSwKICAgICAgZml4ZWRQaXRjaDogZmFsc2UsCiAgICAgIGZvbnRNYXRyaXgsCiAgICAgIGZpcnN0Q2hhciwKICAgICAgbGFzdENoYXIsCiAgICAgIHRvVW5pY29kZSwKICAgICAgYmJveCwKICAgICAgYXNjZW50LAogICAgICBkZXNjZW50LAogICAgICB4SGVpZ2h0LAogICAgICBjYXBIZWlnaHQsCiAgICAgIGZsYWdzLAogICAgICBpdGFsaWNBbmdsZSwKICAgICAgaXNUeXBlM0ZvbnQsCiAgICAgIGNzc0ZvbnRJbmZvLAogICAgICBzY2FsZUZhY3RvcnM6IGdseXBoU2NhbGVGYWN0b3JzLAogICAgICBzeXN0ZW1Gb250SW5mbwogICAgfTsKICAgIGlmIChjb21wb3NpdGUpIHsKICAgICAgY29uc3QgY2lkRW5jb2RpbmcgPSBiYXNlRGljdC5nZXQoIkVuY29kaW5nIik7CiAgICAgIGlmIChjaWRFbmNvZGluZyBpbnN0YW5jZW9mIE5hbWUpIHsKICAgICAgICBwcm9wZXJ0aWVzLmNpZEVuY29kaW5nID0gY2lkRW5jb2RpbmcubmFtZTsKICAgICAgfQogICAgICBjb25zdCBjTWFwID0gYXdhaXQgQ01hcEZhY3RvcnkuY3JlYXRlKHsKICAgICAgICBlbmNvZGluZzogY2lkRW5jb2RpbmcsCiAgICAgICAgZmV0Y2hCdWlsdEluQ01hcDogdGhpcy5fZmV0Y2hCdWlsdEluQ01hcEJvdW5kLAogICAgICAgIHVzZUNNYXA6IG51bGwKICAgICAgfSk7CiAgICAgIHByb3BlcnRpZXMuY01hcCA9IGNNYXA7CiAgICAgIHByb3BlcnRpZXMudmVydGljYWwgPSBwcm9wZXJ0aWVzLmNNYXAudmVydGljYWw7CiAgICB9CiAgICBjb25zdCBuZXdQcm9wZXJ0aWVzID0gYXdhaXQgdGhpcy5leHRyYWN0RGF0YVN0cnVjdHVyZXMoZGljdCwgcHJvcGVydGllcyk7CiAgICB0aGlzLmV4dHJhY3RXaWR0aHMoZGljdCwgZGVzY3JpcHRvciwgbmV3UHJvcGVydGllcyk7CiAgICByZXR1cm4gbmV3IEZvbnQoZm9udE5hbWUubmFtZSwgZm9udEZpbGUsIG5ld1Byb3BlcnRpZXMsIHRoaXMub3B0aW9ucyk7CiAgfQogIHN0YXRpYyBidWlsZEZvbnRQYXRocyhmb250LCBnbHlwaHMsIGhhbmRsZXIsIGV2YWx1YXRvck9wdGlvbnMpIHsKICAgIGZ1bmN0aW9uIGJ1aWxkUGF0aChmb250Q2hhcikgewogICAgICBjb25zdCBnbHlwaE5hbWUgPSBgJHtmb250LmxvYWRlZE5hbWV9X3BhdGhfJHtmb250Q2hhcn1gOwogICAgICB0cnkgewogICAgICAgIGlmIChmb250LnJlbmRlcmVyLmhhc0J1aWx0UGF0aChmb250Q2hhcikpIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgaGFuZGxlci5zZW5kKCJjb21tb25vYmoiLCBbZ2x5cGhOYW1lLCAiRm9udFBhdGgiLCBmb250LnJlbmRlcmVyLmdldFBhdGhKcyhmb250Q2hhcildKTsKICAgICAgfSBjYXRjaCAocmVhc29uKSB7CiAgICAgICAgaWYgKGV2YWx1YXRvck9wdGlvbnMuaWdub3JlRXJyb3JzKSB7CiAgICAgICAgICB3YXJuKGBidWlsZEZvbnRQYXRocyAtIGlnbm9yaW5nICR7Z2x5cGhOYW1lfSBnbHlwaDogIiR7cmVhc29ufSIuYCk7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIHRocm93IHJlYXNvbjsKICAgICAgfQogICAgfQogICAgZm9yIChjb25zdCBnbHlwaCBvZiBnbHlwaHMpIHsKICAgICAgYnVpbGRQYXRoKGdseXBoLmZvbnRDaGFyKTsKICAgICAgY29uc3QgYWNjZW50ID0gZ2x5cGguYWNjZW50OwogICAgICBpZiAoYWNjZW50Py5mb250Q2hhcikgewogICAgICAgIGJ1aWxkUGF0aChhY2NlbnQuZm9udENoYXIpOwogICAgICB9CiAgICB9CiAgfQogIHN0YXRpYyBnZXQgZmFsbGJhY2tGb250RGljdCgpIHsKICAgIGNvbnN0IGRpY3QgPSBuZXcgRGljdCgpOwogICAgZGljdC5zZXQoIkJhc2VGb250IiwgTmFtZS5nZXQoIkhlbHZldGljYSIpKTsKICAgIGRpY3Quc2V0KCJUeXBlIiwgTmFtZS5nZXQoIkZhbGxiYWNrVHlwZSIpKTsKICAgIGRpY3Quc2V0KCJTdWJ0eXBlIiwgTmFtZS5nZXQoIkZhbGxiYWNrVHlwZSIpKTsKICAgIGRpY3Quc2V0KCJFbmNvZGluZyIsIE5hbWUuZ2V0KCJXaW5BbnNpRW5jb2RpbmciKSk7CiAgICByZXR1cm4gc2hhZG93KHRoaXMsICJmYWxsYmFja0ZvbnREaWN0IiwgZGljdCk7CiAgfQp9CmNsYXNzIFRyYW5zbGF0ZWRGb250IHsKICAjc2VudCA9IGZhbHNlOwogICN0eXBlM0xvYWRlZCA9IG51bGw7CiAgY29uc3RydWN0b3IoewogICAgbG9hZGVkTmFtZSwKICAgIGZvbnQsCiAgICBkaWN0CiAgfSkgewogICAgdGhpcy5sb2FkZWROYW1lID0gbG9hZGVkTmFtZTsKICAgIHRoaXMuZm9udCA9IGZvbnQ7CiAgICB0aGlzLmRpY3QgPSBkaWN0OwogICAgdGhpcy50eXBlM0RlcGVuZGVuY2llcyA9IGZvbnQuaXNUeXBlM0ZvbnQgPyBuZXcgU2V0KCkgOiBudWxsOwogIH0KICBzZW5kKGhhbmRsZXIpIHsKICAgIGlmICh0aGlzLiNzZW50KSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIHRoaXMuI3NlbnQgPSB0cnVlOwogICAgaGFuZGxlci5zZW5kKCJjb21tb25vYmoiLCBbdGhpcy5sb2FkZWROYW1lLCAiRm9udCIsIHRoaXMuZm9udC5leHBvcnREYXRhKCldKTsKICB9CiAgZmFsbGJhY2soaGFuZGxlciwgZXZhbHVhdG9yT3B0aW9ucykgewogICAgaWYgKCF0aGlzLmZvbnQuZGF0YSkgewogICAgICByZXR1cm47CiAgICB9CiAgICB0aGlzLmZvbnQuZGlzYWJsZUZvbnRGYWNlID0gdHJ1ZTsKICAgIFBhcnRpYWxFdmFsdWF0b3IuYnVpbGRGb250UGF0aHModGhpcy5mb250LCB0aGlzLmZvbnQuZ2x5cGhDYWNoZVZhbHVlcywgaGFuZGxlciwgZXZhbHVhdG9yT3B0aW9ucyk7CiAgfQogIGxvYWRUeXBlM0RhdGEoZXZhbHVhdG9yLCByZXNvdXJjZXMsIHRhc2spIHsKICAgIGlmICh0aGlzLiN0eXBlM0xvYWRlZCkgewogICAgICByZXR1cm4gdGhpcy4jdHlwZTNMb2FkZWQ7CiAgICB9CiAgICBjb25zdCB7CiAgICAgIGZvbnQsCiAgICAgIHR5cGUzRGVwZW5kZW5jaWVzCiAgICB9ID0gdGhpczsKICAgIGFzc2VydChmb250LmlzVHlwZTNGb250LCAiTXVzdCBiZSBhIFR5cGUzIGZvbnQuIik7CiAgICBjb25zdCB0eXBlM0V2YWx1YXRvciA9IGV2YWx1YXRvci5jbG9uZSh7CiAgICAgIGlnbm9yZUVycm9yczogZmFsc2UKICAgIH0pOwogICAgY29uc3QgdHlwZTNGb250UmVmcyA9IG5ldyBSZWZTZXQoZXZhbHVhdG9yLnR5cGUzRm9udFJlZnMpOwogICAgaWYgKHRoaXMuZGljdC5vYmpJZCAmJiAhdHlwZTNGb250UmVmcy5oYXModGhpcy5kaWN0Lm9iaklkKSkgewogICAgICB0eXBlM0ZvbnRSZWZzLnB1dCh0aGlzLmRpY3Qub2JqSWQpOwogICAgfQogICAgdHlwZTNFdmFsdWF0b3IudHlwZTNGb250UmVmcyA9IHR5cGUzRm9udFJlZnM7CiAgICBsZXQgbG9hZENoYXJQcm9jc1Byb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTsKICAgIGNvbnN0IGNoYXJQcm9jcyA9IHRoaXMuZGljdC5nZXQoIkNoYXJQcm9jcyIpOwogICAgY29uc3QgZm9udFJlc291cmNlcyA9IHRoaXMuZGljdC5nZXQoIlJlc291cmNlcyIpIHx8IHJlc291cmNlczsKICAgIGNvbnN0IGNoYXJQcm9jT3BlcmF0b3JMaXN0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgIGNvbnN0IFt4MCwgeTAsIHgxLCB5MV0gPSBmb250LmJib3gsCiAgICAgIHdpZHRoID0geDEgLSB4MCwKICAgICAgaGVpZ2h0ID0geTEgLSB5MDsKICAgIGNvbnN0IGZvbnRCQm94U2l6ZSA9IE1hdGguaHlwb3Qod2lkdGgsIGhlaWdodCk7CiAgICBmb3IgKGNvbnN0IGtleSBvZiBjaGFyUHJvY3MuZ2V0S2V5cygpKSB7CiAgICAgIGxvYWRDaGFyUHJvY3NQcm9taXNlID0gbG9hZENoYXJQcm9jc1Byb21pc2UudGhlbigoKSA9PiB7CiAgICAgICAgY29uc3QgZ2x5cGhTdHJlYW0gPSBjaGFyUHJvY3MuZ2V0KGtleSk7CiAgICAgICAgY29uc3Qgb3BlcmF0b3JMaXN0ID0gbmV3IE9wZXJhdG9yTGlzdCgpOwogICAgICAgIHJldHVybiB0eXBlM0V2YWx1YXRvci5nZXRPcGVyYXRvckxpc3QoewogICAgICAgICAgc3RyZWFtOiBnbHlwaFN0cmVhbSwKICAgICAgICAgIHRhc2ssCiAgICAgICAgICByZXNvdXJjZXM6IGZvbnRSZXNvdXJjZXMsCiAgICAgICAgICBvcGVyYXRvckxpc3QKICAgICAgICB9KS50aGVuKCgpID0+IHsKICAgICAgICAgIHN3aXRjaCAob3BlcmF0b3JMaXN0LmZuQXJyYXlbMF0pIHsKICAgICAgICAgICAgY2FzZSBPUFMuc2V0Q2hhcldpZHRoQW5kQm91bmRzOgogICAgICAgICAgICAgIHRoaXMuI3JlbW92ZVR5cGUzQ29sb3JPcGVyYXRvcnMob3BlcmF0b3JMaXN0LCBmb250QkJveFNpemUpOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIE9QUy5zZXRDaGFyV2lkdGg6CiAgICAgICAgICAgICAgaWYgKCFmb250QkJveFNpemUpIHsKICAgICAgICAgICAgICAgIHRoaXMuI2d1ZXNzVHlwZTNGb250QkJveChvcGVyYXRvckxpc3QpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICAgIGNoYXJQcm9jT3BlcmF0b3JMaXN0W2tleV0gPSBvcGVyYXRvckxpc3QuZ2V0SVIoKTsKICAgICAgICAgIGZvciAoY29uc3QgZGVwZW5kZW5jeSBvZiBvcGVyYXRvckxpc3QuZGVwZW5kZW5jaWVzKSB7CiAgICAgICAgICAgIHR5cGUzRGVwZW5kZW5jaWVzLmFkZChkZXBlbmRlbmN5KTsKICAgICAgICAgIH0KICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAocmVhc29uKSB7CiAgICAgICAgICB3YXJuKGBUeXBlMyBmb250IHJlc291cmNlICIke2tleX0iIGlzIG5vdCBhdmFpbGFibGUuYCk7CiAgICAgICAgICBjb25zdCBkdW1teU9wZXJhdG9yTGlzdCA9IG5ldyBPcGVyYXRvckxpc3QoKTsKICAgICAgICAgIGNoYXJQcm9jT3BlcmF0b3JMaXN0W2tleV0gPSBkdW1teU9wZXJhdG9yTGlzdC5nZXRJUigpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICAgIHRoaXMuI3R5cGUzTG9hZGVkID0gbG9hZENoYXJQcm9jc1Byb21pc2UudGhlbigoKSA9PiB7CiAgICAgIGZvbnQuY2hhclByb2NPcGVyYXRvckxpc3QgPSBjaGFyUHJvY09wZXJhdG9yTGlzdDsKICAgICAgaWYgKHRoaXMuX2Jib3gpIHsKICAgICAgICBmb250LmlzQ2hhckJCb3ggPSB0cnVlOwogICAgICAgIGZvbnQuYmJveCA9IHRoaXMuX2Jib3g7CiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIHRoaXMuI3R5cGUzTG9hZGVkOwogIH0KICAjcmVtb3ZlVHlwZTNDb2xvck9wZXJhdG9ycyhvcGVyYXRvckxpc3QsIGZvbnRCQm94U2l6ZSA9IE5hTikgewogICAgY29uc3QgY2hhckJCb3ggPSBVdGlsLm5vcm1hbGl6ZVJlY3Qob3BlcmF0b3JMaXN0LmFyZ3NBcnJheVswXS5zbGljZSgyKSksCiAgICAgIHdpZHRoID0gY2hhckJCb3hbMl0gLSBjaGFyQkJveFswXSwKICAgICAgaGVpZ2h0ID0gY2hhckJCb3hbM10gLSBjaGFyQkJveFsxXTsKICAgIGNvbnN0IGNoYXJCQm94U2l6ZSA9IE1hdGguaHlwb3Qod2lkdGgsIGhlaWdodCk7CiAgICBpZiAod2lkdGggPT09IDAgfHwgaGVpZ2h0ID09PSAwKSB7CiAgICAgIG9wZXJhdG9yTGlzdC5mbkFycmF5LnNwbGljZSgwLCAxKTsKICAgICAgb3BlcmF0b3JMaXN0LmFyZ3NBcnJheS5zcGxpY2UoMCwgMSk7CiAgICB9IGVsc2UgaWYgKGZvbnRCQm94U2l6ZSA9PT0gMCB8fCBNYXRoLnJvdW5kKGNoYXJCQm94U2l6ZSAvIGZvbnRCQm94U2l6ZSkgPj0gMTApIHsKICAgICAgdGhpcy5fYmJveCA/Pz0gW0luZmluaXR5LCBJbmZpbml0eSwgLUluZmluaXR5LCAtSW5maW5pdHldOwogICAgICBVdGlsLnJlY3RCb3VuZGluZ0JveCguLi5jaGFyQkJveCwgdGhpcy5fYmJveCk7CiAgICB9CiAgICBsZXQgaSA9IDAsCiAgICAgIGlpID0gb3BlcmF0b3JMaXN0Lmxlbmd0aDsKICAgIHdoaWxlIChpIDwgaWkpIHsKICAgICAgc3dpdGNoIChvcGVyYXRvckxpc3QuZm5BcnJheVtpXSkgewogICAgICAgIGNhc2UgT1BTLnNldENoYXJXaWR0aEFuZEJvdW5kczoKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgT1BTLnNldFN0cm9rZUNvbG9yU3BhY2U6CiAgICAgICAgY2FzZSBPUFMuc2V0RmlsbENvbG9yU3BhY2U6CiAgICAgICAgY2FzZSBPUFMuc2V0U3Ryb2tlQ29sb3I6CiAgICAgICAgY2FzZSBPUFMuc2V0U3Ryb2tlQ29sb3JOOgogICAgICAgIGNhc2UgT1BTLnNldEZpbGxDb2xvcjoKICAgICAgICBjYXNlIE9QUy5zZXRGaWxsQ29sb3JOOgogICAgICAgIGNhc2UgT1BTLnNldFN0cm9rZUdyYXk6CiAgICAgICAgY2FzZSBPUFMuc2V0RmlsbEdyYXk6CiAgICAgICAgY2FzZSBPUFMuc2V0U3Ryb2tlUkdCQ29sb3I6CiAgICAgICAgY2FzZSBPUFMuc2V0RmlsbFJHQkNvbG9yOgogICAgICAgIGNhc2UgT1BTLnNldFN0cm9rZUNNWUtDb2xvcjoKICAgICAgICBjYXNlIE9QUy5zZXRGaWxsQ01ZS0NvbG9yOgogICAgICAgIGNhc2UgT1BTLnNoYWRpbmdGaWxsOgogICAgICAgIGNhc2UgT1BTLnNldFJlbmRlcmluZ0ludGVudDoKICAgICAgICAgIG9wZXJhdG9yTGlzdC5mbkFycmF5LnNwbGljZShpLCAxKTsKICAgICAgICAgIG9wZXJhdG9yTGlzdC5hcmdzQXJyYXkuc3BsaWNlKGksIDEpOwogICAgICAgICAgaWktLTsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIGNhc2UgT1BTLnNldEdTdGF0ZToKICAgICAgICAgIGNvbnN0IFtnU3RhdGVPYmpdID0gb3BlcmF0b3JMaXN0LmFyZ3NBcnJheVtpXTsKICAgICAgICAgIGxldCBqID0gMCwKICAgICAgICAgICAgamogPSBnU3RhdGVPYmoubGVuZ3RoOwogICAgICAgICAgd2hpbGUgKGogPCBqaikgewogICAgICAgICAgICBjb25zdCBbZ1N0YXRlS2V5XSA9IGdTdGF0ZU9ialtqXTsKICAgICAgICAgICAgc3dpdGNoIChnU3RhdGVLZXkpIHsKICAgICAgICAgICAgICBjYXNlICJUUiI6CiAgICAgICAgICAgICAgY2FzZSAiVFIyIjoKICAgICAgICAgICAgICBjYXNlICJIVCI6CiAgICAgICAgICAgICAgY2FzZSAiQkciOgogICAgICAgICAgICAgIGNhc2UgIkJHMiI6CiAgICAgICAgICAgICAgY2FzZSAiVUNSIjoKICAgICAgICAgICAgICBjYXNlICJVQ1IyIjoKICAgICAgICAgICAgICAgIGdTdGF0ZU9iai5zcGxpY2UoaiwgMSk7CiAgICAgICAgICAgICAgICBqai0tOwogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaisrOwogICAgICAgICAgfQogICAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgICAgaSsrOwogICAgfQogIH0KICAjZ3Vlc3NUeXBlM0ZvbnRCQm94KG9wZXJhdG9yTGlzdCkgewogICAgbGV0IGkgPSAxOwogICAgY29uc3QgaWkgPSBvcGVyYXRvckxpc3QubGVuZ3RoOwogICAgd2hpbGUgKGkgPCBpaSkgewogICAgICBzd2l0Y2ggKG9wZXJhdG9yTGlzdC5mbkFycmF5W2ldKSB7CiAgICAgICAgY2FzZSBPUFMuY29uc3RydWN0UGF0aDoKICAgICAgICAgIGNvbnN0IG1pbk1heCA9IG9wZXJhdG9yTGlzdC5hcmdzQXJyYXlbaV1bMl07CiAgICAgICAgICB0aGlzLl9iYm94ID8/PSBbSW5maW5pdHksIEluZmluaXR5LCAtSW5maW5pdHksIC1JbmZpbml0eV07CiAgICAgICAgICBVdGlsLnJlY3RCb3VuZGluZ0JveCguLi5taW5NYXgsIHRoaXMuX2Jib3gpOwogICAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgICAgaSsrOwogICAgfQogIH0KfQpjbGFzcyBTdGF0ZU1hbmFnZXIgewogIGNvbnN0cnVjdG9yKGluaXRpYWxTdGF0ZSA9IG5ldyBFdmFsU3RhdGUoKSkgewogICAgdGhpcy5zdGF0ZSA9IGluaXRpYWxTdGF0ZTsKICAgIHRoaXMuc3RhdGVTdGFjayA9IFtdOwogIH0KICBzYXZlKCkgewogICAgY29uc3Qgb2xkID0gdGhpcy5zdGF0ZTsKICAgIHRoaXMuc3RhdGVTdGFjay5wdXNoKHRoaXMuc3RhdGUpOwogICAgdGhpcy5zdGF0ZSA9IG9sZC5jbG9uZSgpOwogIH0KICByZXN0b3JlKCkgewogICAgY29uc3QgcHJldiA9IHRoaXMuc3RhdGVTdGFjay5wb3AoKTsKICAgIGlmIChwcmV2KSB7CiAgICAgIHRoaXMuc3RhdGUgPSBwcmV2OwogICAgfQogIH0KICB0cmFuc2Zvcm0oYXJncykgewogICAgdGhpcy5zdGF0ZS5jdG0gPSBVdGlsLnRyYW5zZm9ybSh0aGlzLnN0YXRlLmN0bSwgYXJncyk7CiAgfQp9CmNsYXNzIFRleHRTdGF0ZSB7CiAgY29uc3RydWN0b3IoKSB7CiAgICB0aGlzLmN0bSA9IG5ldyBGbG9hdDMyQXJyYXkoSURFTlRJVFlfTUFUUklYKTsKICAgIHRoaXMuZm9udE5hbWUgPSBudWxsOwogICAgdGhpcy5mb250U2l6ZSA9IDA7CiAgICB0aGlzLmxvYWRlZE5hbWUgPSBudWxsOwogICAgdGhpcy5mb250ID0gbnVsbDsKICAgIHRoaXMuZm9udE1hdHJpeCA9IEZPTlRfSURFTlRJVFlfTUFUUklYOwogICAgdGhpcy50ZXh0TWF0cml4ID0gSURFTlRJVFlfTUFUUklYLnNsaWNlKCk7CiAgICB0aGlzLnRleHRMaW5lTWF0cml4ID0gSURFTlRJVFlfTUFUUklYLnNsaWNlKCk7CiAgICB0aGlzLmNoYXJTcGFjaW5nID0gMDsKICAgIHRoaXMud29yZFNwYWNpbmcgPSAwOwogICAgdGhpcy5sZWFkaW5nID0gMDsKICAgIHRoaXMudGV4dEhTY2FsZSA9IDE7CiAgICB0aGlzLnRleHRSaXNlID0gMDsKICB9CiAgc2V0VGV4dE1hdHJpeChhLCBiLCBjLCBkLCBlLCBmKSB7CiAgICBjb25zdCBtID0gdGhpcy50ZXh0TWF0cml4OwogICAgbVswXSA9IGE7CiAgICBtWzFdID0gYjsKICAgIG1bMl0gPSBjOwogICAgbVszXSA9IGQ7CiAgICBtWzRdID0gZTsKICAgIG1bNV0gPSBmOwogIH0KICBzZXRUZXh0TGluZU1hdHJpeChhLCBiLCBjLCBkLCBlLCBmKSB7CiAgICBjb25zdCBtID0gdGhpcy50ZXh0TGluZU1hdHJpeDsKICAgIG1bMF0gPSBhOwogICAgbVsxXSA9IGI7CiAgICBtWzJdID0gYzsKICAgIG1bM10gPSBkOwogICAgbVs0XSA9IGU7CiAgICBtWzVdID0gZjsKICB9CiAgdHJhbnNsYXRlVGV4dE1hdHJpeCh4LCB5KSB7CiAgICBjb25zdCBtID0gdGhpcy50ZXh0TWF0cml4OwogICAgbVs0XSA9IG1bMF0gKiB4ICsgbVsyXSAqIHkgKyBtWzRdOwogICAgbVs1XSA9IG1bMV0gKiB4ICsgbVszXSAqIHkgKyBtWzVdOwogIH0KICB0cmFuc2xhdGVUZXh0TGluZU1hdHJpeCh4LCB5KSB7CiAgICBjb25zdCBtID0gdGhpcy50ZXh0TGluZU1hdHJpeDsKICAgIG1bNF0gPSBtWzBdICogeCArIG1bMl0gKiB5ICsgbVs0XTsKICAgIG1bNV0gPSBtWzFdICogeCArIG1bM10gKiB5ICsgbVs1XTsKICB9CiAgY2FycmlhZ2VSZXR1cm4oKSB7CiAgICB0aGlzLnRyYW5zbGF0ZVRleHRMaW5lTWF0cml4KDAsIC10aGlzLmxlYWRpbmcpOwogICAgdGhpcy50ZXh0TWF0cml4ID0gdGhpcy50ZXh0TGluZU1hdHJpeC5zbGljZSgpOwogIH0KICBjbG9uZSgpIHsKICAgIGNvbnN0IGNsb25lID0gT2JqZWN0LmNyZWF0ZSh0aGlzKTsKICAgIGNsb25lLnRleHRNYXRyaXggPSB0aGlzLnRleHRNYXRyaXguc2xpY2UoKTsKICAgIGNsb25lLnRleHRMaW5lTWF0cml4ID0gdGhpcy50ZXh0TGluZU1hdHJpeC5zbGljZSgpOwogICAgY2xvbmUuZm9udE1hdHJpeCA9IHRoaXMuZm9udE1hdHJpeC5zbGljZSgpOwogICAgcmV0dXJuIGNsb25lOwogIH0KfQpjbGFzcyBFdmFsU3RhdGUgewogIGNvbnN0cnVjdG9yKCkgewogICAgdGhpcy5jdG0gPSBuZXcgRmxvYXQzMkFycmF5KElERU5USVRZX01BVFJJWCk7CiAgICB0aGlzLmZvbnQgPSBudWxsOwogICAgdGhpcy50ZXh0UmVuZGVyaW5nTW9kZSA9IFRleHRSZW5kZXJpbmdNb2RlLkZJTEw7CiAgICB0aGlzLl9maWxsQ29sb3JTcGFjZSA9IHRoaXMuX3N0cm9rZUNvbG9yU3BhY2UgPSBDb2xvclNwYWNlVXRpbHMuZ3JheTsKICAgIHRoaXMucGF0dGVybkZpbGxDb2xvclNwYWNlID0gbnVsbDsKICAgIHRoaXMucGF0dGVyblN0cm9rZUNvbG9yU3BhY2UgPSBudWxsOwogICAgdGhpcy5jdXJyZW50UG9pbnRYID0gdGhpcy5jdXJyZW50UG9pbnRZID0gMDsKICAgIHRoaXMucGF0aE1pbk1heCA9IG5ldyBGbG9hdDMyQXJyYXkoW0luZmluaXR5LCBJbmZpbml0eSwgLUluZmluaXR5LCAtSW5maW5pdHldKTsKICAgIHRoaXMucGF0aEJ1ZmZlciA9IFtdOwogIH0KICBnZXQgZmlsbENvbG9yU3BhY2UoKSB7CiAgICByZXR1cm4gdGhpcy5fZmlsbENvbG9yU3BhY2U7CiAgfQogIHNldCBmaWxsQ29sb3JTcGFjZShjb2xvclNwYWNlKSB7CiAgICB0aGlzLl9maWxsQ29sb3JTcGFjZSA9IHRoaXMucGF0dGVybkZpbGxDb2xvclNwYWNlID0gY29sb3JTcGFjZTsKICB9CiAgZ2V0IHN0cm9rZUNvbG9yU3BhY2UoKSB7CiAgICByZXR1cm4gdGhpcy5fc3Ryb2tlQ29sb3JTcGFjZTsKICB9CiAgc2V0IHN0cm9rZUNvbG9yU3BhY2UoY29sb3JTcGFjZSkgewogICAgdGhpcy5fc3Ryb2tlQ29sb3JTcGFjZSA9IHRoaXMucGF0dGVyblN0cm9rZUNvbG9yU3BhY2UgPSBjb2xvclNwYWNlOwogIH0KICBjbG9uZSh7CiAgICBuZXdQYXRoID0gZmFsc2UKICB9ID0ge30pIHsKICAgIGNvbnN0IGNsb25lID0gT2JqZWN0LmNyZWF0ZSh0aGlzKTsKICAgIGlmIChuZXdQYXRoKSB7CiAgICAgIGNsb25lLnBhdGhCdWZmZXIgPSBbXTsKICAgICAgY2xvbmUucGF0aE1pbk1heCA9IG5ldyBGbG9hdDMyQXJyYXkoW0luZmluaXR5LCBJbmZpbml0eSwgLUluZmluaXR5LCAtSW5maW5pdHldKTsKICAgIH0KICAgIHJldHVybiBjbG9uZTsKICB9Cn0KY2xhc3MgRXZhbHVhdG9yUHJlcHJvY2Vzc29yIHsKICBzdGF0aWMgZ2V0IG9wTWFwKCkgewogICAgcmV0dXJuIHNoYWRvdyh0aGlzLCAib3BNYXAiLCBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUobnVsbCksIHsKICAgICAgdzogewogICAgICAgIGlkOiBPUFMuc2V0TGluZVdpZHRoLAogICAgICAgIG51bUFyZ3M6IDEsCiAgICAgICAgdmFyaWFibGVBcmdzOiBmYWxzZQogICAgICB9LAogICAgICBKOiB7CiAgICAgICAgaWQ6IE9QUy5zZXRMaW5lQ2FwLAogICAgICAgIG51bUFyZ3M6IDEsCiAgICAgICAgdmFyaWFibGVBcmdzOiBmYWxzZQogICAgICB9LAogICAgICBqOiB7CiAgICAgICAgaWQ6IE9QUy5zZXRMaW5lSm9pbiwKICAgICAgICBudW1BcmdzOiAxLAogICAgICAgIHZhcmlhYmxlQXJnczogZmFsc2UKICAgICAgfSwKICAgICAgTTogewogICAgICAgIGlkOiBPUFMuc2V0TWl0ZXJMaW1pdCwKICAgICAgICBudW1BcmdzOiAxLAogICAgICAgIHZhcmlhYmxlQXJnczogZmFsc2UKICAgICAgfSwKICAgICAgZDogewogICAgICAgIGlkOiBPUFMuc2V0RGFzaCwKICAgICAgICBudW1BcmdzOiAyLAogICAgICAgIHZhcmlhYmxlQXJnczogZmFsc2UKICAgICAgfSwKICAgICAgcmk6IHsKICAgICAgICBpZDogT1BTLnNldFJlbmRlcmluZ0ludGVudCwKICAgICAgICBudW1BcmdzOiAxLAogICAgICAgIHZhcmlhYmxlQXJnczogZmFsc2UKICAgICAgfSwKICAgICAgaTogewogICAgICAgIGlkOiBPUFMuc2V0RmxhdG5lc3MsCiAgICAgICAgbnVtQXJnczogMSwKICAgICAgICB2YXJpYWJsZUFyZ3M6IGZhbHNlCiAgICAgIH0sCiAgICAgIGdzOiB7CiAgICAgICAgaWQ6IE9QUy5zZXRHU3RhdGUsCiAgICAgICAgbnVtQXJnczogMSwKICAgICAgICB2YXJpYWJsZUFyZ3M6IGZhbHNlCiAgICAgIH0sCiAgICAgIHE6IHsKICAgICAgICBpZDogT1BTLnNhdmUsCiAgICAgICAgbnVtQXJnczogMCwKICAgICAgICB2YXJpYWJsZUFyZ3M6IGZhbHNlCiAgICAgIH0sCiAgICAgIFE6IHsKICAgICAgICBpZDogT1BTLnJlc3RvcmUsCiAgICAgICAgbnVtQXJnczogMCwKICAgICAgICB2YXJpYWJsZUFyZ3M6IGZhbHNlCiAgICAgIH0sCiAgICAgIGNtOiB7CiAgICAgICAgaWQ6IE9QUy50cmFuc2Zvcm0sCiAgICAgICAgbnVtQXJnczogNiwKICAgICAgICB2YXJpYWJsZUFyZ3M6IGZhbHNlCiAgICAgIH0sCiAgICAgIG06IHsKICAgICAgICBpZDogT1BTLm1vdmVUbywKICAgICAgICBudW1BcmdzOiAyLAogICAgICAgIHZhcmlhYmxlQXJnczogZmFsc2UKICAgICAgfSwKICAgICAgbDogewogICAgICAgIGlkOiBPUFMubGluZVRvLAogICAgICAgIG51bUFyZ3M6IDIsCiAgICAgICAgdmFyaWFibGVBcmdzOiBmYWxzZQogICAgICB9LAogICAgICBjOiB7CiAgICAgICAgaWQ6IE9QUy5jdXJ2ZVRvLAogICAgICAgIG51bUFyZ3M6IDYsCiAgICAgICAgdmFyaWFibGVBcmdzOiBmYWxzZQogICAgICB9LAogICAgICB2OiB7CiAgICAgICAgaWQ6IE9QUy5jdXJ2ZVRvMiwKICAgICAgICBudW1BcmdzOiA0LAogICAgICAgIHZhcmlhYmxlQXJnczogZmFsc2UKICAgICAgfSwKICAgICAgeTogewogICAgICAgIGlkOiBPUFMuY3VydmVUbzMsCiAgICAgICAgbnVtQXJnczogNCwKICAgICAgICB2YXJpYWJsZUFyZ3M6IGZhbHNlCiAgICAgIH0sCiAgICAgIGg6IHsKICAgICAgICBpZDogT1BTLmNsb3NlUGF0aCwKICAgICAgICBudW1BcmdzOiAwLAogICAgICAgIHZhcmlhYmxlQXJnczogZmFsc2UKICAgICAgfSwKICAgICAgcmU6IHsKICAgICAgICBpZDogT1BTLnJlY3RhbmdsZSwKICAgICAgICBudW1BcmdzOiA0LAogICAgICAgIHZhcmlhYmxlQXJnczogZmFsc2UKICAgICAgfSwKICAgICAgUzogewogICAgICAgIGlkOiBPUFMuc3Ryb2tlLAogICAgICAgIG51bUFyZ3M6IDAsCiAgICAgICAgdmFyaWFibGVBcmdzOiBmYWxzZQogICAgICB9LAogICAgICBzOiB7CiAgICAgICAgaWQ6IE9QUy5jbG9zZVN0cm9rZSwKICAgICAgICBudW1BcmdzOiAwLAogICAgICAgIHZhcmlhYmxlQXJnczogZmFsc2UKICAgICAgfSwKICAgICAgZjogewogICAgICAgIGlkOiBPUFMuZmlsbCwKICAgICAgICBudW1BcmdzOiAwLAogICAgICAgIHZhcmlhYmxlQXJnczogZmFsc2UKICAgICAgfSwKICAgICAgRjogewogICAgICAgIGlkOiBPUFMuZmlsbCwKICAgICAgICBudW1BcmdzOiAwLAogICAgICAgIHZhcmlhYmxlQXJnczogZmFsc2UKICAgICAgfSwKICAgICAgImYqIjogewogICAgICAgIGlkOiBPUFMuZW9GaWxsLAogICAgICAgIG51bUFyZ3M6IDAsCiAgICAgICAgdmFyaWFibGVBcmdzOiBmYWxzZQogICAgICB9LAogICAgICBCOiB7CiAgICAgICAgaWQ6IE9QUy5maWxsU3Ryb2tlLAogICAgICAgIG51bUFyZ3M6IDAsCiAgICAgICAgdmFyaWFibGVBcmdzOiBmYWxzZQogICAgICB9LAogICAgICAiQioiOiB7CiAgICAgICAgaWQ6IE9QUy5lb0ZpbGxTdHJva2UsCiAgICAgICAgbnVtQXJnczogMCwKICAgICAgICB2YXJpYWJsZUFyZ3M6IGZhbHNlCiAgICAgIH0sCiAgICAgIGI6IHsKICAgICAgICBpZDogT1BTLmNsb3NlRmlsbFN0cm9rZSwKICAgICAgICBudW1BcmdzOiAwLAogICAgICAgIHZhcmlhYmxlQXJnczogZmFsc2UKICAgICAgfSwKICAgICAgImIqIjogewogICAgICAgIGlkOiBPUFMuY2xvc2VFT0ZpbGxTdHJva2UsCiAgICAgICAgbnVtQXJnczogMCwKICAgICAgICB2YXJpYWJsZUFyZ3M6IGZhbHNlCiAgICAgIH0sCiAgICAgIG46IHsKICAgICAgICBpZDogT1BTLmVuZFBhdGgsCiAgICAgICAgbnVtQXJnczogMCwKICAgICAgICB2YXJpYWJsZUFyZ3M6IGZhbHNlCiAgICAgIH0sCiAgICAgIFc6IHsKICAgICAgICBpZDogT1BTLmNsaXAsCiAgICAgICAgbnVtQXJnczogMCwKICAgICAgICB2YXJpYWJsZUFyZ3M6IGZhbHNlCiAgICAgIH0sCiAgICAgICJXKiI6IHsKICAgICAgICBpZDogT1BTLmVvQ2xpcCwKICAgICAgICBudW1BcmdzOiAwLAogICAgICAgIHZhcmlhYmxlQXJnczogZmFsc2UKICAgICAgfSwKICAgICAgQlQ6IHsKICAgICAgICBpZDogT1BTLmJlZ2luVGV4dCwKICAgICAgICBudW1BcmdzOiAwLAogICAgICAgIHZhcmlhYmxlQXJnczogZmFsc2UKICAgICAgfSwKICAgICAgRVQ6IHsKICAgICAgICBpZDogT1BTLmVuZFRleHQsCiAgICAgICAgbnVtQXJnczogMCwKICAgICAgICB2YXJpYWJsZUFyZ3M6IGZhbHNlCiAgICAgIH0sCiAgICAgIFRjOiB7CiAgICAgICAgaWQ6IE9QUy5zZXRDaGFyU3BhY2luZywKICAgICAgICBudW1BcmdzOiAxLAogICAgICAgIHZhcmlhYmxlQXJnczogZmFsc2UKICAgICAgfSwKICAgICAgVHc6IHsKICAgICAgICBpZDogT1BTLnNldFdvcmRTcGFjaW5nLAogICAgICAgIG51bUFyZ3M6IDEsCiAgICAgICAgdmFyaWFibGVBcmdzOiBmYWxzZQogICAgICB9LAogICAgICBUejogewogICAgICAgIGlkOiBPUFMuc2V0SFNjYWxlLAogICAgICAgIG51bUFyZ3M6IDEsCiAgICAgICAgdmFyaWFibGVBcmdzOiBmYWxzZQogICAgICB9LAogICAgICBUTDogewogICAgICAgIGlkOiBPUFMuc2V0TGVhZGluZywKICAgICAgICBudW1BcmdzOiAxLAogICAgICAgIHZhcmlhYmxlQXJnczogZmFsc2UKICAgICAgfSwKICAgICAgVGY6IHsKICAgICAgICBpZDogT1BTLnNldEZvbnQsCiAgICAgICAgbnVtQXJnczogMiwKICAgICAgICB2YXJpYWJsZUFyZ3M6IGZhbHNlCiAgICAgIH0sCiAgICAgIFRyOiB7CiAgICAgICAgaWQ6IE9QUy5zZXRUZXh0UmVuZGVyaW5nTW9kZSwKICAgICAgICBudW1BcmdzOiAxLAogICAgICAgIHZhcmlhYmxlQXJnczogZmFsc2UKICAgICAgfSwKICAgICAgVHM6IHsKICAgICAgICBpZDogT1BTLnNldFRleHRSaXNlLAogICAgICAgIG51bUFyZ3M6IDEsCiAgICAgICAgdmFyaWFibGVBcmdzOiBmYWxzZQogICAgICB9LAogICAgICBUZDogewogICAgICAgIGlkOiBPUFMubW92ZVRleHQsCiAgICAgICAgbnVtQXJnczogMiwKICAgICAgICB2YXJpYWJsZUFyZ3M6IGZhbHNlCiAgICAgIH0sCiAgICAgIFREOiB7CiAgICAgICAgaWQ6IE9QUy5zZXRMZWFkaW5nTW92ZVRleHQsCiAgICAgICAgbnVtQXJnczogMiwKICAgICAgICB2YXJpYWJsZUFyZ3M6IGZhbHNlCiAgICAgIH0sCiAgICAgIFRtOiB7CiAgICAgICAgaWQ6IE9QUy5zZXRUZXh0TWF0cml4LAogICAgICAgIG51bUFyZ3M6IDYsCiAgICAgICAgdmFyaWFibGVBcmdzOiBmYWxzZQogICAgICB9LAogICAgICAiVCoiOiB7CiAgICAgICAgaWQ6IE9QUy5uZXh0TGluZSwKICAgICAgICBudW1BcmdzOiAwLAogICAgICAgIHZhcmlhYmxlQXJnczogZmFsc2UKICAgICAgfSwKICAgICAgVGo6IHsKICAgICAgICBpZDogT1BTLnNob3dUZXh0LAogICAgICAgIG51bUFyZ3M6IDEsCiAgICAgICAgdmFyaWFibGVBcmdzOiBmYWxzZQogICAgICB9LAogICAgICBUSjogewogICAgICAgIGlkOiBPUFMuc2hvd1NwYWNlZFRleHQsCiAgICAgICAgbnVtQXJnczogMSwKICAgICAgICB2YXJpYWJsZUFyZ3M6IGZhbHNlCiAgICAgIH0sCiAgICAgICInIjogewogICAgICAgIGlkOiBPUFMubmV4dExpbmVTaG93VGV4dCwKICAgICAgICBudW1BcmdzOiAxLAogICAgICAgIHZhcmlhYmxlQXJnczogZmFsc2UKICAgICAgfSwKICAgICAgJyInOiB7CiAgICAgICAgaWQ6IE9QUy5uZXh0TGluZVNldFNwYWNpbmdTaG93VGV4dCwKICAgICAgICBudW1BcmdzOiAzLAogICAgICAgIHZhcmlhYmxlQXJnczogZmFsc2UKICAgICAgfSwKICAgICAgZDA6IHsKICAgICAgICBpZDogT1BTLnNldENoYXJXaWR0aCwKICAgICAgICBudW1BcmdzOiAyLAogICAgICAgIHZhcmlhYmxlQXJnczogZmFsc2UKICAgICAgfSwKICAgICAgZDE6IHsKICAgICAgICBpZDogT1BTLnNldENoYXJXaWR0aEFuZEJvdW5kcywKICAgICAgICBudW1BcmdzOiA2LAogICAgICAgIHZhcmlhYmxlQXJnczogZmFsc2UKICAgICAgfSwKICAgICAgQ1M6IHsKICAgICAgICBpZDogT1BTLnNldFN0cm9rZUNvbG9yU3BhY2UsCiAgICAgICAgbnVtQXJnczogMSwKICAgICAgICB2YXJpYWJsZUFyZ3M6IGZhbHNlCiAgICAgIH0sCiAgICAgIGNzOiB7CiAgICAgICAgaWQ6IE9QUy5zZXRGaWxsQ29sb3JTcGFjZSwKICAgICAgICBudW1BcmdzOiAxLAogICAgICAgIHZhcmlhYmxlQXJnczogZmFsc2UKICAgICAgfSwKICAgICAgU0M6IHsKICAgICAgICBpZDogT1BTLnNldFN0cm9rZUNvbG9yLAogICAgICAgIG51bUFyZ3M6IDQsCiAgICAgICAgdmFyaWFibGVBcmdzOiB0cnVlCiAgICAgIH0sCiAgICAgIFNDTjogewogICAgICAgIGlkOiBPUFMuc2V0U3Ryb2tlQ29sb3JOLAogICAgICAgIG51bUFyZ3M6IDMzLAogICAgICAgIHZhcmlhYmxlQXJnczogdHJ1ZQogICAgICB9LAogICAgICBzYzogewogICAgICAgIGlkOiBPUFMuc2V0RmlsbENvbG9yLAogICAgICAgIG51bUFyZ3M6IDQsCiAgICAgICAgdmFyaWFibGVBcmdzOiB0cnVlCiAgICAgIH0sCiAgICAgIHNjbjogewogICAgICAgIGlkOiBPUFMuc2V0RmlsbENvbG9yTiwKICAgICAgICBudW1BcmdzOiAzMywKICAgICAgICB2YXJpYWJsZUFyZ3M6IHRydWUKICAgICAgfSwKICAgICAgRzogewogICAgICAgIGlkOiBPUFMuc2V0U3Ryb2tlR3JheSwKICAgICAgICBudW1BcmdzOiAxLAogICAgICAgIHZhcmlhYmxlQXJnczogZmFsc2UKICAgICAgfSwKICAgICAgZzogewogICAgICAgIGlkOiBPUFMuc2V0RmlsbEdyYXksCiAgICAgICAgbnVtQXJnczogMSwKICAgICAgICB2YXJpYWJsZUFyZ3M6IGZhbHNlCiAgICAgIH0sCiAgICAgIFJHOiB7CiAgICAgICAgaWQ6IE9QUy5zZXRTdHJva2VSR0JDb2xvciwKICAgICAgICBudW1BcmdzOiAzLAogICAgICAgIHZhcmlhYmxlQXJnczogZmFsc2UKICAgICAgfSwKICAgICAgcmc6IHsKICAgICAgICBpZDogT1BTLnNldEZpbGxSR0JDb2xvciwKICAgICAgICBudW1BcmdzOiAzLAogICAgICAgIHZhcmlhYmxlQXJnczogZmFsc2UKICAgICAgfSwKICAgICAgSzogewogICAgICAgIGlkOiBPUFMuc2V0U3Ryb2tlQ01ZS0NvbG9yLAogICAgICAgIG51bUFyZ3M6IDQsCiAgICAgICAgdmFyaWFibGVBcmdzOiBmYWxzZQogICAgICB9LAogICAgICBrOiB7CiAgICAgICAgaWQ6IE9QUy5zZXRGaWxsQ01ZS0NvbG9yLAogICAgICAgIG51bUFyZ3M6IDQsCiAgICAgICAgdmFyaWFibGVBcmdzOiBmYWxzZQogICAgICB9LAogICAgICBzaDogewogICAgICAgIGlkOiBPUFMuc2hhZGluZ0ZpbGwsCiAgICAgICAgbnVtQXJnczogMSwKICAgICAgICB2YXJpYWJsZUFyZ3M6IGZhbHNlCiAgICAgIH0sCiAgICAgIEJJOiB7CiAgICAgICAgaWQ6IE9QUy5iZWdpbklubGluZUltYWdlLAogICAgICAgIG51bUFyZ3M6IDAsCiAgICAgICAgdmFyaWFibGVBcmdzOiBmYWxzZQogICAgICB9LAogICAgICBJRDogewogICAgICAgIGlkOiBPUFMuYmVnaW5JbWFnZURhdGEsCiAgICAgICAgbnVtQXJnczogMCwKICAgICAgICB2YXJpYWJsZUFyZ3M6IGZhbHNlCiAgICAgIH0sCiAgICAgIEVJOiB7CiAgICAgICAgaWQ6IE9QUy5lbmRJbmxpbmVJbWFnZSwKICAgICAgICBudW1BcmdzOiAxLAogICAgICAgIHZhcmlhYmxlQXJnczogZmFsc2UKICAgICAgfSwKICAgICAgRG86IHsKICAgICAgICBpZDogT1BTLnBhaW50WE9iamVjdCwKICAgICAgICBudW1BcmdzOiAxLAogICAgICAgIHZhcmlhYmxlQXJnczogZmFsc2UKICAgICAgfSwKICAgICAgTVA6IHsKICAgICAgICBpZDogT1BTLm1hcmtQb2ludCwKICAgICAgICBudW1BcmdzOiAxLAogICAgICAgIHZhcmlhYmxlQXJnczogZmFsc2UKICAgICAgfSwKICAgICAgRFA6IHsKICAgICAgICBpZDogT1BTLm1hcmtQb2ludFByb3BzLAogICAgICAgIG51bUFyZ3M6IDIsCiAgICAgICAgdmFyaWFibGVBcmdzOiBmYWxzZQogICAgICB9LAogICAgICBCTUM6IHsKICAgICAgICBpZDogT1BTLmJlZ2luTWFya2VkQ29udGVudCwKICAgICAgICBudW1BcmdzOiAxLAogICAgICAgIHZhcmlhYmxlQXJnczogZmFsc2UKICAgICAgfSwKICAgICAgQkRDOiB7CiAgICAgICAgaWQ6IE9QUy5iZWdpbk1hcmtlZENvbnRlbnRQcm9wcywKICAgICAgICBudW1BcmdzOiAyLAogICAgICAgIHZhcmlhYmxlQXJnczogZmFsc2UKICAgICAgfSwKICAgICAgRU1DOiB7CiAgICAgICAgaWQ6IE9QUy5lbmRNYXJrZWRDb250ZW50LAogICAgICAgIG51bUFyZ3M6IDAsCiAgICAgICAgdmFyaWFibGVBcmdzOiBmYWxzZQogICAgICB9LAogICAgICBCWDogewogICAgICAgIGlkOiBPUFMuYmVnaW5Db21wYXQsCiAgICAgICAgbnVtQXJnczogMCwKICAgICAgICB2YXJpYWJsZUFyZ3M6IGZhbHNlCiAgICAgIH0sCiAgICAgIEVYOiB7CiAgICAgICAgaWQ6IE9QUy5lbmRDb21wYXQsCiAgICAgICAgbnVtQXJnczogMCwKICAgICAgICB2YXJpYWJsZUFyZ3M6IGZhbHNlCiAgICAgIH0sCiAgICAgIEJNOiBudWxsLAogICAgICBCRDogbnVsbCwKICAgICAgdHJ1ZTogbnVsbCwKICAgICAgZmE6IG51bGwsCiAgICAgIGZhbDogbnVsbCwKICAgICAgZmFsczogbnVsbCwKICAgICAgZmFsc2U6IG51bGwsCiAgICAgIG51OiBudWxsLAogICAgICBudWw6IG51bGwsCiAgICAgIG51bGw6IG51bGwKICAgIH0pKTsKICB9CiAgc3RhdGljIE1BWF9JTlZBTElEX1BBVEhfT1BTID0gMTA7CiAgY29uc3RydWN0b3Ioc3RyZWFtLCB4cmVmLCBzdGF0ZU1hbmFnZXIgPSBuZXcgU3RhdGVNYW5hZ2VyKCkpIHsKICAgIHRoaXMucGFyc2VyID0gbmV3IFBhcnNlcih7CiAgICAgIGxleGVyOiBuZXcgTGV4ZXIoc3RyZWFtLCBFdmFsdWF0b3JQcmVwcm9jZXNzb3Iub3BNYXApLAogICAgICB4cmVmCiAgICB9KTsKICAgIHRoaXMuc3RhdGVNYW5hZ2VyID0gc3RhdGVNYW5hZ2VyOwogICAgdGhpcy5ub25Qcm9jZXNzZWRBcmdzID0gW107CiAgICB0aGlzLl9pc1BhdGhPcCA9IGZhbHNlOwogICAgdGhpcy5fbnVtSW52YWxpZFBhdGhPUFMgPSAwOwogIH0KICBnZXQgc2F2ZWRTdGF0ZXNEZXB0aCgpIHsKICAgIHJldHVybiB0aGlzLnN0YXRlTWFuYWdlci5zdGF0ZVN0YWNrLmxlbmd0aDsKICB9CiAgcmVhZChvcGVyYXRpb24pIHsKICAgIGxldCBhcmdzID0gb3BlcmF0aW9uLmFyZ3M7CiAgICB3aGlsZSAodHJ1ZSkgewogICAgICBjb25zdCBvYmogPSB0aGlzLnBhcnNlci5nZXRPYmooKTsKICAgICAgaWYgKG9iaiBpbnN0YW5jZW9mIENtZCkgewogICAgICAgIGNvbnN0IGNtZCA9IG9iai5jbWQ7CiAgICAgICAgY29uc3Qgb3BTcGVjID0gRXZhbHVhdG9yUHJlcHJvY2Vzc29yLm9wTWFwW2NtZF07CiAgICAgICAgaWYgKCFvcFNwZWMpIHsKICAgICAgICAgIHdhcm4oYFVua25vd24gY29tbWFuZCAiJHtjbWR9Ii5gKTsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgICBjb25zdCBmbiA9IG9wU3BlYy5pZDsKICAgICAgICBjb25zdCBudW1BcmdzID0gb3BTcGVjLm51bUFyZ3M7CiAgICAgICAgbGV0IGFyZ3NMZW5ndGggPSBhcmdzICE9PSBudWxsID8gYXJncy5sZW5ndGggOiAwOwogICAgICAgIGlmICghdGhpcy5faXNQYXRoT3ApIHsKICAgICAgICAgIHRoaXMuX251bUludmFsaWRQYXRoT1BTID0gMDsKICAgICAgICB9CiAgICAgICAgdGhpcy5faXNQYXRoT3AgPSBmbiA+PSBPUFMubW92ZVRvICYmIGZuIDw9IE9QUy5lbmRQYXRoOwogICAgICAgIGlmICghb3BTcGVjLnZhcmlhYmxlQXJncykgewogICAgICAgICAgaWYgKGFyZ3NMZW5ndGggIT09IG51bUFyZ3MpIHsKICAgICAgICAgICAgY29uc3Qgbm9uUHJvY2Vzc2VkQXJncyA9IHRoaXMubm9uUHJvY2Vzc2VkQXJnczsKICAgICAgICAgICAgd2hpbGUgKGFyZ3NMZW5ndGggPiBudW1BcmdzKSB7CiAgICAgICAgICAgICAgbm9uUHJvY2Vzc2VkQXJncy5wdXNoKGFyZ3Muc2hpZnQoKSk7CiAgICAgICAgICAgICAgYXJnc0xlbmd0aC0tOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHdoaWxlIChhcmdzTGVuZ3RoIDwgbnVtQXJncyAmJiBub25Qcm9jZXNzZWRBcmdzLmxlbmd0aCAhPT0gMCkgewogICAgICAgICAgICAgIGlmIChhcmdzID09PSBudWxsKSB7CiAgICAgICAgICAgICAgICBhcmdzID0gW107CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGFyZ3MudW5zaGlmdChub25Qcm9jZXNzZWRBcmdzLnBvcCgpKTsKICAgICAgICAgICAgICBhcmdzTGVuZ3RoKys7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmIChhcmdzTGVuZ3RoIDwgbnVtQXJncykgewogICAgICAgICAgICBjb25zdCBwYXJ0aWFsTXNnID0gYGNvbW1hbmQgJHtjbWR9OiBleHBlY3RlZCAke251bUFyZ3N9IGFyZ3MsIGAgKyBgYnV0IHJlY2VpdmVkICR7YXJnc0xlbmd0aH0gYXJncy5gOwogICAgICAgICAgICBpZiAodGhpcy5faXNQYXRoT3AgJiYgKyt0aGlzLl9udW1JbnZhbGlkUGF0aE9QUyA+IEV2YWx1YXRvclByZXByb2Nlc3Nvci5NQVhfSU5WQUxJRF9QQVRIX09QUykgewogICAgICAgICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcihgSW52YWxpZCAke3BhcnRpYWxNc2d9YCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgd2FybihgU2tpcHBpbmcgJHtwYXJ0aWFsTXNnfWApOwogICAgICAgICAgICBpZiAoYXJncyAhPT0gbnVsbCkgewogICAgICAgICAgICAgIGFyZ3MubGVuZ3RoID0gMDsKICAgICAgICAgICAgfQogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKGFyZ3NMZW5ndGggPiBudW1BcmdzKSB7CiAgICAgICAgICBpbmZvKGBDb21tYW5kICR7Y21kfTogZXhwZWN0ZWQgWzAsICR7bnVtQXJnc31dIGFyZ3MsIGAgKyBgYnV0IHJlY2VpdmVkICR7YXJnc0xlbmd0aH0gYXJncy5gKTsKICAgICAgICB9CiAgICAgICAgdGhpcy5wcmVwcm9jZXNzQ29tbWFuZChmbiwgYXJncyk7CiAgICAgICAgb3BlcmF0aW9uLmZuID0gZm47CiAgICAgICAgb3BlcmF0aW9uLmFyZ3MgPSBhcmdzOwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICAgIGlmIChvYmogPT09IEVPRikgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgICBpZiAob2JqICE9PSBudWxsKSB7CiAgICAgICAgaWYgKGFyZ3MgPT09IG51bGwpIHsKICAgICAgICAgIGFyZ3MgPSBbXTsKICAgICAgICB9CiAgICAgICAgYXJncy5wdXNoKG9iaik7CiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID4gMzMpIHsKICAgICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigiVG9vIG1hbnkgYXJndW1lbnRzIik7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQogIHByZXByb2Nlc3NDb21tYW5kKGZuLCBhcmdzKSB7CiAgICBzd2l0Y2ggKGZuIHwgMCkgewogICAgICBjYXNlIE9QUy5zYXZlOgogICAgICAgIHRoaXMuc3RhdGVNYW5hZ2VyLnNhdmUoKTsKICAgICAgICBicmVhazsKICAgICAgY2FzZSBPUFMucmVzdG9yZToKICAgICAgICB0aGlzLnN0YXRlTWFuYWdlci5yZXN0b3JlKCk7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgT1BTLnRyYW5zZm9ybToKICAgICAgICB0aGlzLnN0YXRlTWFuYWdlci50cmFuc2Zvcm0oYXJncyk7CiAgICAgICAgYnJlYWs7CiAgICB9CiAgfQp9Cgo7Ly8gLi9zcmMvY29yZS9kZWZhdWx0X2FwcGVhcmFuY2UuanMKCgoKCgoKCgoKCgoKCmNsYXNzIERlZmF1bHRBcHBlYXJhbmNlRXZhbHVhdG9yIGV4dGVuZHMgRXZhbHVhdG9yUHJlcHJvY2Vzc29yIHsKICBjb25zdHJ1Y3RvcihzdHIpIHsKICAgIHN1cGVyKG5ldyBTdHJpbmdTdHJlYW0oc3RyKSk7CiAgfQogIHBhcnNlKCkgewogICAgY29uc3Qgb3BlcmF0aW9uID0gewogICAgICBmbjogMCwKICAgICAgYXJnczogW10KICAgIH07CiAgICBjb25zdCByZXN1bHQgPSB7CiAgICAgIGZvbnRTaXplOiAwLAogICAgICBmb250TmFtZTogIiIsCiAgICAgIGZvbnRDb2xvcjogbmV3IFVpbnQ4Q2xhbXBlZEFycmF5KDMpCiAgICB9OwogICAgdHJ5IHsKICAgICAgd2hpbGUgKHRydWUpIHsKICAgICAgICBvcGVyYXRpb24uYXJncy5sZW5ndGggPSAwOwogICAgICAgIGlmICghdGhpcy5yZWFkKG9wZXJhdGlvbikpIHsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgICBpZiAodGhpcy5zYXZlZFN0YXRlc0RlcHRoICE9PSAwKSB7CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CiAgICAgICAgY29uc3QgewogICAgICAgICAgZm4sCiAgICAgICAgICBhcmdzCiAgICAgICAgfSA9IG9wZXJhdGlvbjsKICAgICAgICBzd2l0Y2ggKGZuIHwgMCkgewogICAgICAgICAgY2FzZSBPUFMuc2V0Rm9udDoKICAgICAgICAgICAgY29uc3QgW2ZvbnROYW1lLCBmb250U2l6ZV0gPSBhcmdzOwogICAgICAgICAgICBpZiAoZm9udE5hbWUgaW5zdGFuY2VvZiBOYW1lKSB7CiAgICAgICAgICAgICAgcmVzdWx0LmZvbnROYW1lID0gZm9udE5hbWUubmFtZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodHlwZW9mIGZvbnRTaXplID09PSAibnVtYmVyIiAmJiBmb250U2l6ZSA+IDApIHsKICAgICAgICAgICAgICByZXN1bHQuZm9udFNpemUgPSBmb250U2l6ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgT1BTLnNldEZpbGxSR0JDb2xvcjoKICAgICAgICAgICAgQ29sb3JTcGFjZVV0aWxzLnJnYi5nZXRSZ2JJdGVtKGFyZ3MsIDAsIHJlc3VsdC5mb250Q29sb3IsIDApOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgT1BTLnNldEZpbGxHcmF5OgogICAgICAgICAgICBDb2xvclNwYWNlVXRpbHMuZ3JheS5nZXRSZ2JJdGVtKGFyZ3MsIDAsIHJlc3VsdC5mb250Q29sb3IsIDApOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgT1BTLnNldEZpbGxDTVlLQ29sb3I6CiAgICAgICAgICAgIENvbG9yU3BhY2VVdGlscy5jbXlrLmdldFJnYkl0ZW0oYXJncywgMCwgcmVzdWx0LmZvbnRDb2xvciwgMCk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgfQogICAgfSBjYXRjaCAocmVhc29uKSB7CiAgICAgIHdhcm4oYHBhcnNlRGVmYXVsdEFwcGVhcmFuY2UgLSBpZ25vcmluZyBlcnJvcnM6ICIke3JlYXNvbn0iLmApOwogICAgfQogICAgcmV0dXJuIHJlc3VsdDsKICB9Cn0KZnVuY3Rpb24gcGFyc2VEZWZhdWx0QXBwZWFyYW5jZShzdHIpIHsKICByZXR1cm4gbmV3IERlZmF1bHRBcHBlYXJhbmNlRXZhbHVhdG9yKHN0cikucGFyc2UoKTsKfQpjbGFzcyBBcHBlYXJhbmNlU3RyZWFtRXZhbHVhdG9yIGV4dGVuZHMgRXZhbHVhdG9yUHJlcHJvY2Vzc29yIHsKICBjb25zdHJ1Y3RvcihzdHJlYW0sIGV2YWx1YXRvck9wdGlvbnMsIHhyZWYsIGdsb2JhbENvbG9yU3BhY2VDYWNoZSkgewogICAgc3VwZXIoc3RyZWFtKTsKICAgIHRoaXMuc3RyZWFtID0gc3RyZWFtOwogICAgdGhpcy5ldmFsdWF0b3JPcHRpb25zID0gZXZhbHVhdG9yT3B0aW9uczsKICAgIHRoaXMueHJlZiA9IHhyZWY7CiAgICB0aGlzLmdsb2JhbENvbG9yU3BhY2VDYWNoZSA9IGdsb2JhbENvbG9yU3BhY2VDYWNoZTsKICAgIHRoaXMucmVzb3VyY2VzID0gc3RyZWFtLmRpY3Q/LmdldCgiUmVzb3VyY2VzIik7CiAgfQogIHBhcnNlKCkgewogICAgY29uc3Qgb3BlcmF0aW9uID0gewogICAgICBmbjogMCwKICAgICAgYXJnczogW10KICAgIH07CiAgICBsZXQgcmVzdWx0ID0gewogICAgICBzY2FsZUZhY3RvcjogMSwKICAgICAgZm9udFNpemU6IDAsCiAgICAgIGZvbnROYW1lOiAiIiwKICAgICAgZm9udENvbG9yOiBuZXcgVWludDhDbGFtcGVkQXJyYXkoMyksCiAgICAgIGZpbGxDb2xvclNwYWNlOiBDb2xvclNwYWNlVXRpbHMuZ3JheQogICAgfTsKICAgIGxldCBicmVha0xvb3AgPSBmYWxzZTsKICAgIGNvbnN0IHN0YWNrID0gW107CiAgICB0cnkgewogICAgICB3aGlsZSAodHJ1ZSkgewogICAgICAgIG9wZXJhdGlvbi5hcmdzLmxlbmd0aCA9IDA7CiAgICAgICAgaWYgKGJyZWFrTG9vcCB8fCAhdGhpcy5yZWFkKG9wZXJhdGlvbikpIHsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgICBjb25zdCB7CiAgICAgICAgICBmbiwKICAgICAgICAgIGFyZ3MKICAgICAgICB9ID0gb3BlcmF0aW9uOwogICAgICAgIHN3aXRjaCAoZm4gfCAwKSB7CiAgICAgICAgICBjYXNlIE9QUy5zYXZlOgogICAgICAgICAgICBzdGFjay5wdXNoKHsKICAgICAgICAgICAgICBzY2FsZUZhY3RvcjogcmVzdWx0LnNjYWxlRmFjdG9yLAogICAgICAgICAgICAgIGZvbnRTaXplOiByZXN1bHQuZm9udFNpemUsCiAgICAgICAgICAgICAgZm9udE5hbWU6IHJlc3VsdC5mb250TmFtZSwKICAgICAgICAgICAgICBmb250Q29sb3I6IHJlc3VsdC5mb250Q29sb3Iuc2xpY2UoKSwKICAgICAgICAgICAgICBmaWxsQ29sb3JTcGFjZTogcmVzdWx0LmZpbGxDb2xvclNwYWNlCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgT1BTLnJlc3RvcmU6CiAgICAgICAgICAgIHJlc3VsdCA9IHN0YWNrLnBvcCgpIHx8IHJlc3VsdDsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlIE9QUy5zZXRUZXh0TWF0cml4OgogICAgICAgICAgICByZXN1bHQuc2NhbGVGYWN0b3IgKj0gTWF0aC5oeXBvdChhcmdzWzBdLCBhcmdzWzFdKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlIE9QUy5zZXRGb250OgogICAgICAgICAgICBjb25zdCBbZm9udE5hbWUsIGZvbnRTaXplXSA9IGFyZ3M7CiAgICAgICAgICAgIGlmIChmb250TmFtZSBpbnN0YW5jZW9mIE5hbWUpIHsKICAgICAgICAgICAgICByZXN1bHQuZm9udE5hbWUgPSBmb250TmFtZS5uYW1lOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh0eXBlb2YgZm9udFNpemUgPT09ICJudW1iZXIiICYmIGZvbnRTaXplID4gMCkgewogICAgICAgICAgICAgIHJlc3VsdC5mb250U2l6ZSA9IGZvbnRTaXplICogcmVzdWx0LnNjYWxlRmFjdG9yOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSBPUFMuc2V0RmlsbENvbG9yU3BhY2U6CiAgICAgICAgICAgIHJlc3VsdC5maWxsQ29sb3JTcGFjZSA9IENvbG9yU3BhY2VVdGlscy5wYXJzZSh7CiAgICAgICAgICAgICAgY3M6IGFyZ3NbMF0sCiAgICAgICAgICAgICAgeHJlZjogdGhpcy54cmVmLAogICAgICAgICAgICAgIHJlc291cmNlczogdGhpcy5yZXNvdXJjZXMsCiAgICAgICAgICAgICAgcGRmRnVuY3Rpb25GYWN0b3J5OiB0aGlzLl9wZGZGdW5jdGlvbkZhY3RvcnksCiAgICAgICAgICAgICAgZ2xvYmFsQ29sb3JTcGFjZUNhY2hlOiB0aGlzLmdsb2JhbENvbG9yU3BhY2VDYWNoZSwKICAgICAgICAgICAgICBsb2NhbENvbG9yU3BhY2VDYWNoZTogdGhpcy5fbG9jYWxDb2xvclNwYWNlQ2FjaGUKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSBPUFMuc2V0RmlsbENvbG9yOgogICAgICAgICAgICBjb25zdCBjcyA9IHJlc3VsdC5maWxsQ29sb3JTcGFjZTsKICAgICAgICAgICAgY3MuZ2V0UmdiSXRlbShhcmdzLCAwLCByZXN1bHQuZm9udENvbG9yLCAwKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlIE9QUy5zZXRGaWxsUkdCQ29sb3I6CiAgICAgICAgICAgIENvbG9yU3BhY2VVdGlscy5yZ2IuZ2V0UmdiSXRlbShhcmdzLCAwLCByZXN1bHQuZm9udENvbG9yLCAwKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlIE9QUy5zZXRGaWxsR3JheToKICAgICAgICAgICAgQ29sb3JTcGFjZVV0aWxzLmdyYXkuZ2V0UmdiSXRlbShhcmdzLCAwLCByZXN1bHQuZm9udENvbG9yLCAwKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlIE9QUy5zZXRGaWxsQ01ZS0NvbG9yOgogICAgICAgICAgICBDb2xvclNwYWNlVXRpbHMuY215ay5nZXRSZ2JJdGVtKGFyZ3MsIDAsIHJlc3VsdC5mb250Q29sb3IsIDApOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgT1BTLnNob3dUZXh0OgogICAgICAgICAgY2FzZSBPUFMuc2hvd1NwYWNlZFRleHQ6CiAgICAgICAgICBjYXNlIE9QUy5uZXh0TGluZVNob3dUZXh0OgogICAgICAgICAgY2FzZSBPUFMubmV4dExpbmVTZXRTcGFjaW5nU2hvd1RleHQ6CiAgICAgICAgICAgIGJyZWFrTG9vcCA9IHRydWU7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgfQogICAgfSBjYXRjaCAocmVhc29uKSB7CiAgICAgIHdhcm4oYHBhcnNlQXBwZWFyYW5jZVN0cmVhbSAtIGlnbm9yaW5nIGVycm9yczogIiR7cmVhc29ufSIuYCk7CiAgICB9CiAgICB0aGlzLnN0cmVhbS5yZXNldCgpOwogICAgZGVsZXRlIHJlc3VsdC5zY2FsZUZhY3RvcjsKICAgIGRlbGV0ZSByZXN1bHQuZmlsbENvbG9yU3BhY2U7CiAgICByZXR1cm4gcmVzdWx0OwogIH0KICBnZXQgX2xvY2FsQ29sb3JTcGFjZUNhY2hlKCkgewogICAgcmV0dXJuIHNoYWRvdyh0aGlzLCAiX2xvY2FsQ29sb3JTcGFjZUNhY2hlIiwgbmV3IExvY2FsQ29sb3JTcGFjZUNhY2hlKCkpOwogIH0KICBnZXQgX3BkZkZ1bmN0aW9uRmFjdG9yeSgpIHsKICAgIGNvbnN0IHBkZkZ1bmN0aW9uRmFjdG9yeSA9IG5ldyBQREZGdW5jdGlvbkZhY3RvcnkoewogICAgICB4cmVmOiB0aGlzLnhyZWYsCiAgICAgIGlzRXZhbFN1cHBvcnRlZDogdGhpcy5ldmFsdWF0b3JPcHRpb25zLmlzRXZhbFN1cHBvcnRlZAogICAgfSk7CiAgICByZXR1cm4gc2hhZG93KHRoaXMsICJfcGRmRnVuY3Rpb25GYWN0b3J5IiwgcGRmRnVuY3Rpb25GYWN0b3J5KTsKICB9Cn0KZnVuY3Rpb24gcGFyc2VBcHBlYXJhbmNlU3RyZWFtKHN0cmVhbSwgZXZhbHVhdG9yT3B0aW9ucywgeHJlZiwgZ2xvYmFsQ29sb3JTcGFjZUNhY2hlKSB7CiAgcmV0dXJuIG5ldyBBcHBlYXJhbmNlU3RyZWFtRXZhbHVhdG9yKHN0cmVhbSwgZXZhbHVhdG9yT3B0aW9ucywgeHJlZiwgZ2xvYmFsQ29sb3JTcGFjZUNhY2hlKS5wYXJzZSgpOwp9CmZ1bmN0aW9uIGdldFBkZkNvbG9yKGNvbG9yLCBpc0ZpbGwpIHsKICBpZiAoY29sb3JbMF0gPT09IGNvbG9yWzFdICYmIGNvbG9yWzFdID09PSBjb2xvclsyXSkgewogICAgY29uc3QgZ3JheSA9IGNvbG9yWzBdIC8gMjU1OwogICAgcmV0dXJuIGAke251bWJlclRvU3RyaW5nKGdyYXkpfSAke2lzRmlsbCA/ICJnIiA6ICJHIn1gOwogIH0KICByZXR1cm4gQXJyYXkuZnJvbShjb2xvciwgYyA9PiBudW1iZXJUb1N0cmluZyhjIC8gMjU1KSkuam9pbigiICIpICsgYCAke2lzRmlsbCA/ICJyZyIgOiAiUkcifWA7Cn0KZnVuY3Rpb24gY3JlYXRlRGVmYXVsdEFwcGVhcmFuY2UoewogIGZvbnRTaXplLAogIGZvbnROYW1lLAogIGZvbnRDb2xvcgp9KSB7CiAgcmV0dXJuIGAvJHtlc2NhcGVQREZOYW1lKGZvbnROYW1lKX0gJHtmb250U2l6ZX0gVGYgJHtnZXRQZGZDb2xvcihmb250Q29sb3IsIHRydWUpfWA7Cn0KY2xhc3MgRmFrZVVuaWNvZGVGb250IHsKICBjb25zdHJ1Y3Rvcih4cmVmLCBmb250RmFtaWx5KSB7CiAgICB0aGlzLnhyZWYgPSB4cmVmOwogICAgdGhpcy53aWR0aHMgPSBudWxsOwogICAgdGhpcy5maXJzdENoYXIgPSBJbmZpbml0eTsKICAgIHRoaXMubGFzdENoYXIgPSAtSW5maW5pdHk7CiAgICB0aGlzLmZvbnRGYW1pbHkgPSBmb250RmFtaWx5OwogICAgY29uc3QgY2FudmFzID0gbmV3IE9mZnNjcmVlbkNhbnZhcygxLCAxKTsKICAgIHRoaXMuY3R4TWVhc3VyZSA9IGNhbnZhcy5nZXRDb250ZXh0KCIyZCIsIHsKICAgICAgd2lsbFJlYWRGcmVxdWVudGx5OiB0cnVlCiAgICB9KTsKICAgIGlmICghRmFrZVVuaWNvZGVGb250Ll9mb250TmFtZUlkKSB7CiAgICAgIEZha2VVbmljb2RlRm9udC5fZm9udE5hbWVJZCA9IDE7CiAgICB9CiAgICB0aGlzLmZvbnROYW1lID0gTmFtZS5nZXQoYEludmFsaWRQREZqc0ZvbnRfJHtmb250RmFtaWx5fV8ke0Zha2VVbmljb2RlRm9udC5fZm9udE5hbWVJZCsrfWApOwogIH0KICBnZXQgZm9udERlc2NyaXB0b3JSZWYoKSB7CiAgICBpZiAoIUZha2VVbmljb2RlRm9udC5fZm9udERlc2NyaXB0b3JSZWYpIHsKICAgICAgY29uc3QgZm9udERlc2NyaXB0b3IgPSBuZXcgRGljdCh0aGlzLnhyZWYpOwogICAgICBmb250RGVzY3JpcHRvci5zZXRJZk5hbWUoIlR5cGUiLCAiRm9udERlc2NyaXB0b3IiKTsKICAgICAgZm9udERlc2NyaXB0b3Iuc2V0KCJGb250TmFtZSIsIHRoaXMuZm9udE5hbWUpOwogICAgICBmb250RGVzY3JpcHRvci5zZXQoIkZvbnRGYW1pbHkiLCAiTXlyaWFkUHJvIFJlZ3VsYXIiKTsKICAgICAgZm9udERlc2NyaXB0b3Iuc2V0KCJGb250QkJveCIsIFswLCAwLCAwLCAwXSk7CiAgICAgIGZvbnREZXNjcmlwdG9yLnNldElmTmFtZSgiRm9udFN0cmV0Y2giLCAiTm9ybWFsIik7CiAgICAgIGZvbnREZXNjcmlwdG9yLnNldCgiRm9udFdlaWdodCIsIDQwMCk7CiAgICAgIGZvbnREZXNjcmlwdG9yLnNldCgiSXRhbGljQW5nbGUiLCAwKTsKICAgICAgRmFrZVVuaWNvZGVGb250Ll9mb250RGVzY3JpcHRvclJlZiA9IHRoaXMueHJlZi5nZXROZXdQZXJzaXN0ZW50UmVmKGZvbnREZXNjcmlwdG9yKTsKICAgIH0KICAgIHJldHVybiBGYWtlVW5pY29kZUZvbnQuX2ZvbnREZXNjcmlwdG9yUmVmOwogIH0KICBnZXQgZGVzY2VuZGFudEZvbnRSZWYoKSB7CiAgICBjb25zdCBkZXNjZW5kYW50Rm9udCA9IG5ldyBEaWN0KHRoaXMueHJlZik7CiAgICBkZXNjZW5kYW50Rm9udC5zZXQoIkJhc2VGb250IiwgdGhpcy5mb250TmFtZSk7CiAgICBkZXNjZW5kYW50Rm9udC5zZXRJZk5hbWUoIlR5cGUiLCAiRm9udCIpOwogICAgZGVzY2VuZGFudEZvbnQuc2V0SWZOYW1lKCJTdWJ0eXBlIiwgIkNJREZvbnRUeXBlMCIpOwogICAgZGVzY2VuZGFudEZvbnQuc2V0SWZOYW1lKCJDSURUb0dJRE1hcCIsICJJZGVudGl0eSIpOwogICAgZGVzY2VuZGFudEZvbnQuc2V0KCJGaXJzdENoYXIiLCB0aGlzLmZpcnN0Q2hhcik7CiAgICBkZXNjZW5kYW50Rm9udC5zZXQoIkxhc3RDaGFyIiwgdGhpcy5sYXN0Q2hhcik7CiAgICBkZXNjZW5kYW50Rm9udC5zZXQoIkZvbnREZXNjcmlwdG9yIiwgdGhpcy5mb250RGVzY3JpcHRvclJlZik7CiAgICBkZXNjZW5kYW50Rm9udC5zZXQoIkRXIiwgMTAwMCk7CiAgICBjb25zdCB3aWR0aHMgPSBbXTsKICAgIGNvbnN0IGNoYXJzID0gWy4uLnRoaXMud2lkdGhzLmVudHJpZXMoKV0uc29ydCgpOwogICAgbGV0IGN1cnJlbnRDaGFyID0gbnVsbDsKICAgIGxldCBjdXJyZW50V2lkdGhzID0gbnVsbDsKICAgIGZvciAoY29uc3QgW2NoYXIsIHdpZHRoXSBvZiBjaGFycykgewogICAgICBpZiAoIWN1cnJlbnRDaGFyKSB7CiAgICAgICAgY3VycmVudENoYXIgPSBjaGFyOwogICAgICAgIGN1cnJlbnRXaWR0aHMgPSBbd2lkdGhdOwogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGlmIChjaGFyID09PSBjdXJyZW50Q2hhciArIGN1cnJlbnRXaWR0aHMubGVuZ3RoKSB7CiAgICAgICAgY3VycmVudFdpZHRocy5wdXNoKHdpZHRoKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB3aWR0aHMucHVzaChjdXJyZW50Q2hhciwgY3VycmVudFdpZHRocyk7CiAgICAgICAgY3VycmVudENoYXIgPSBjaGFyOwogICAgICAgIGN1cnJlbnRXaWR0aHMgPSBbd2lkdGhdOwogICAgICB9CiAgICB9CiAgICBpZiAoY3VycmVudENoYXIpIHsKICAgICAgd2lkdGhzLnB1c2goY3VycmVudENoYXIsIGN1cnJlbnRXaWR0aHMpOwogICAgfQogICAgZGVzY2VuZGFudEZvbnQuc2V0KCJXIiwgd2lkdGhzKTsKICAgIGNvbnN0IGNpZFN5c3RlbUluZm8gPSBuZXcgRGljdCh0aGlzLnhyZWYpOwogICAgY2lkU3lzdGVtSW5mby5zZXQoIk9yZGVyaW5nIiwgIklkZW50aXR5Iik7CiAgICBjaWRTeXN0ZW1JbmZvLnNldCgiUmVnaXN0cnkiLCAiQWRvYmUiKTsKICAgIGNpZFN5c3RlbUluZm8uc2V0KCJTdXBwbGVtZW50IiwgMCk7CiAgICBkZXNjZW5kYW50Rm9udC5zZXQoIkNJRFN5c3RlbUluZm8iLCBjaWRTeXN0ZW1JbmZvKTsKICAgIHJldHVybiB0aGlzLnhyZWYuZ2V0TmV3UGVyc2lzdGVudFJlZihkZXNjZW5kYW50Rm9udCk7CiAgfQogIGdldCBiYXNlRm9udFJlZigpIHsKICAgIGNvbnN0IGJhc2VGb250ID0gbmV3IERpY3QodGhpcy54cmVmKTsKICAgIGJhc2VGb250LnNldCgiQmFzZUZvbnQiLCB0aGlzLmZvbnROYW1lKTsKICAgIGJhc2VGb250LnNldElmTmFtZSgiVHlwZSIsICJGb250Iik7CiAgICBiYXNlRm9udC5zZXRJZk5hbWUoIlN1YnR5cGUiLCAiVHlwZTAiKTsKICAgIGJhc2VGb250LnNldElmTmFtZSgiRW5jb2RpbmciLCAiSWRlbnRpdHktSCIpOwogICAgYmFzZUZvbnQuc2V0KCJEZXNjZW5kYW50Rm9udHMiLCBbdGhpcy5kZXNjZW5kYW50Rm9udFJlZl0pOwogICAgYmFzZUZvbnQuc2V0SWZOYW1lKCJUb1VuaWNvZGUiLCAiSWRlbnRpdHktSCIpOwogICAgcmV0dXJuIHRoaXMueHJlZi5nZXROZXdQZXJzaXN0ZW50UmVmKGJhc2VGb250KTsKICB9CiAgZ2V0IHJlc291cmNlcygpIHsKICAgIGNvbnN0IHJlc291cmNlcyA9IG5ldyBEaWN0KHRoaXMueHJlZik7CiAgICBjb25zdCBmb250ID0gbmV3IERpY3QodGhpcy54cmVmKTsKICAgIGZvbnQuc2V0KHRoaXMuZm9udE5hbWUubmFtZSwgdGhpcy5iYXNlRm9udFJlZik7CiAgICByZXNvdXJjZXMuc2V0KCJGb250IiwgZm9udCk7CiAgICByZXR1cm4gcmVzb3VyY2VzOwogIH0KICBfY3JlYXRlQ29udGV4dCgpIHsKICAgIHRoaXMud2lkdGhzID0gbmV3IE1hcCgpOwogICAgdGhpcy5jdHhNZWFzdXJlLmZvbnQgPSBgMTAwMHB4ICR7dGhpcy5mb250RmFtaWx5fWA7CiAgICByZXR1cm4gdGhpcy5jdHhNZWFzdXJlOwogIH0KICBjcmVhdGVGb250UmVzb3VyY2VzKHRleHQpIHsKICAgIGNvbnN0IGN0eCA9IHRoaXMuX2NyZWF0ZUNvbnRleHQoKTsKICAgIGZvciAoY29uc3QgbGluZSBvZiB0ZXh0LnNwbGl0KC9cclxuP3xcbi8pKSB7CiAgICAgIGZvciAoY29uc3QgY2hhciBvZiBsaW5lLnNwbGl0KCIiKSkgewogICAgICAgIGNvbnN0IGNvZGUgPSBjaGFyLmNoYXJDb2RlQXQoMCk7CiAgICAgICAgaWYgKHRoaXMud2lkdGhzLmhhcyhjb2RlKSkgewogICAgICAgICAgY29udGludWU7CiAgICAgICAgfQogICAgICAgIGNvbnN0IG1ldHJpY3MgPSBjdHgubWVhc3VyZVRleHQoY2hhcik7CiAgICAgICAgY29uc3Qgd2lkdGggPSBNYXRoLmNlaWwobWV0cmljcy53aWR0aCk7CiAgICAgICAgdGhpcy53aWR0aHMuc2V0KGNvZGUsIHdpZHRoKTsKICAgICAgICB0aGlzLmZpcnN0Q2hhciA9IE1hdGgubWluKGNvZGUsIHRoaXMuZmlyc3RDaGFyKTsKICAgICAgICB0aGlzLmxhc3RDaGFyID0gTWF0aC5tYXgoY29kZSwgdGhpcy5sYXN0Q2hhcik7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiB0aGlzLnJlc291cmNlczsKICB9CiAgc3RhdGljIGdldEZpcnN0UG9zaXRpb25JbmZvKHJlY3QsIHJvdGF0aW9uLCBmb250U2l6ZSkgewogICAgY29uc3QgW3gxLCB5MSwgeDIsIHkyXSA9IHJlY3Q7CiAgICBsZXQgdyA9IHgyIC0geDE7CiAgICBsZXQgaCA9IHkyIC0geTE7CiAgICBpZiAocm90YXRpb24gJSAxODAgIT09IDApIHsKICAgICAgW3csIGhdID0gW2gsIHddOwogICAgfQogICAgY29uc3QgbGluZUhlaWdodCA9IExJTkVfRkFDVE9SICogZm9udFNpemU7CiAgICBjb25zdCBsaW5lRGVzY2VudCA9IExJTkVfREVTQ0VOVF9GQUNUT1IgKiBmb250U2l6ZTsKICAgIHJldHVybiB7CiAgICAgIGNvb3JkczogWzAsIGggKyBsaW5lRGVzY2VudCAtIGxpbmVIZWlnaHRdLAogICAgICBiYm94OiBbMCwgMCwgdywgaF0sCiAgICAgIG1hdHJpeDogcm90YXRpb24gIT09IDAgPyBnZXRSb3RhdGlvbk1hdHJpeChyb3RhdGlvbiwgaCwgbGluZUhlaWdodCkgOiB1bmRlZmluZWQKICAgIH07CiAgfQogIGNyZWF0ZUFwcGVhcmFuY2UodGV4dCwgcmVjdCwgcm90YXRpb24sIGZvbnRTaXplLCBiZ0NvbG9yLCBzdHJva2VBbHBoYSkgewogICAgY29uc3QgY3R4ID0gdGhpcy5fY3JlYXRlQ29udGV4dCgpOwogICAgY29uc3QgbGluZXMgPSBbXTsKICAgIGxldCBtYXhXaWR0aCA9IC1JbmZpbml0eTsKICAgIGZvciAoY29uc3QgbGluZSBvZiB0ZXh0LnNwbGl0KC9cclxuP3xcbi8pKSB7CiAgICAgIGxpbmVzLnB1c2gobGluZSk7CiAgICAgIGNvbnN0IGxpbmVXaWR0aCA9IGN0eC5tZWFzdXJlVGV4dChsaW5lKS53aWR0aDsKICAgICAgbWF4V2lkdGggPSBNYXRoLm1heChtYXhXaWR0aCwgbGluZVdpZHRoKTsKICAgICAgZm9yIChjb25zdCBjb2RlIG9mIGNvZGVQb2ludEl0ZXIobGluZSkpIHsKICAgICAgICBjb25zdCBjaGFyID0gU3RyaW5nLmZyb21Db2RlUG9pbnQoY29kZSk7CiAgICAgICAgbGV0IHdpZHRoID0gdGhpcy53aWR0aHMuZ2V0KGNvZGUpOwogICAgICAgIGlmICh3aWR0aCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICBjb25zdCBtZXRyaWNzID0gY3R4Lm1lYXN1cmVUZXh0KGNoYXIpOwogICAgICAgICAgd2lkdGggPSBNYXRoLmNlaWwobWV0cmljcy53aWR0aCk7CiAgICAgICAgICB0aGlzLndpZHRocy5zZXQoY29kZSwgd2lkdGgpOwogICAgICAgICAgdGhpcy5maXJzdENoYXIgPSBNYXRoLm1pbihjb2RlLCB0aGlzLmZpcnN0Q2hhcik7CiAgICAgICAgICB0aGlzLmxhc3RDaGFyID0gTWF0aC5tYXgoY29kZSwgdGhpcy5sYXN0Q2hhcik7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBtYXhXaWR0aCAqPSBmb250U2l6ZSAvIDEwMDA7CiAgICBjb25zdCBbeDEsIHkxLCB4MiwgeTJdID0gcmVjdDsKICAgIGxldCB3ID0geDIgLSB4MTsKICAgIGxldCBoID0geTIgLSB5MTsKICAgIGlmIChyb3RhdGlvbiAlIDE4MCAhPT0gMCkgewogICAgICBbdywgaF0gPSBbaCwgd107CiAgICB9CiAgICBsZXQgaHNjYWxlID0gMTsKICAgIGlmIChtYXhXaWR0aCA+IHcpIHsKICAgICAgaHNjYWxlID0gdyAvIG1heFdpZHRoOwogICAgfQogICAgbGV0IHZzY2FsZSA9IDE7CiAgICBjb25zdCBsaW5lSGVpZ2h0ID0gTElORV9GQUNUT1IgKiBmb250U2l6ZTsKICAgIGNvbnN0IGxpbmVEZXNjZW50ID0gTElORV9ERVNDRU5UX0ZBQ1RPUiAqIGZvbnRTaXplOwogICAgY29uc3QgbWF4SGVpZ2h0ID0gbGluZUhlaWdodCAqIGxpbmVzLmxlbmd0aDsKICAgIGlmIChtYXhIZWlnaHQgPiBoKSB7CiAgICAgIHZzY2FsZSA9IGggLyBtYXhIZWlnaHQ7CiAgICB9CiAgICBjb25zdCBmc2NhbGUgPSBNYXRoLm1pbihoc2NhbGUsIHZzY2FsZSk7CiAgICBjb25zdCBuZXdGb250U2l6ZSA9IGZvbnRTaXplICogZnNjYWxlOwogICAgY29uc3QgYnVmZmVyID0gWyJxIiwgYDAgMCAke251bWJlclRvU3RyaW5nKHcpfSAke251bWJlclRvU3RyaW5nKGgpfSByZSBXIG5gLCBgQlRgLCBgMSAwIDAgMSAwICR7bnVtYmVyVG9TdHJpbmcoaCArIGxpbmVEZXNjZW50KX0gVG0gMCBUYyAke2dldFBkZkNvbG9yKGJnQ29sb3IsIHRydWUpfWAsIGAvJHt0aGlzLmZvbnROYW1lLm5hbWV9ICR7bnVtYmVyVG9TdHJpbmcobmV3Rm9udFNpemUpfSBUZmBdOwogICAgY29uc3QgewogICAgICByZXNvdXJjZXMKICAgIH0gPSB0aGlzOwogICAgc3Ryb2tlQWxwaGEgPSB0eXBlb2Ygc3Ryb2tlQWxwaGEgPT09ICJudW1iZXIiICYmIHN0cm9rZUFscGhhID49IDAgJiYgc3Ryb2tlQWxwaGEgPD0gMSA/IHN0cm9rZUFscGhhIDogMTsKICAgIGlmIChzdHJva2VBbHBoYSAhPT0gMSkgewogICAgICBidWZmZXIucHVzaCgiL1IwIGdzIik7CiAgICAgIGNvbnN0IGV4dEdTdGF0ZSA9IG5ldyBEaWN0KHRoaXMueHJlZik7CiAgICAgIGNvbnN0IHIwID0gbmV3IERpY3QodGhpcy54cmVmKTsKICAgICAgcjAuc2V0KCJjYSIsIHN0cm9rZUFscGhhKTsKICAgICAgcjAuc2V0KCJDQSIsIHN0cm9rZUFscGhhKTsKICAgICAgcjAuc2V0SWZOYW1lKCJUeXBlIiwgIkV4dEdTdGF0ZSIpOwogICAgICBleHRHU3RhdGUuc2V0KCJSMCIsIHIwKTsKICAgICAgcmVzb3VyY2VzLnNldCgiRXh0R1N0YXRlIiwgZXh0R1N0YXRlKTsKICAgIH0KICAgIGNvbnN0IHZTaGlmdCA9IG51bWJlclRvU3RyaW5nKGxpbmVIZWlnaHQpOwogICAgZm9yIChjb25zdCBsaW5lIG9mIGxpbmVzKSB7CiAgICAgIGJ1ZmZlci5wdXNoKGAwIC0ke3ZTaGlmdH0gVGQgPCR7c3RyaW5nVG9VVEYxNkhleFN0cmluZyhsaW5lKX0+IFRqYCk7CiAgICB9CiAgICBidWZmZXIucHVzaCgiRVQiLCAiUSIpOwogICAgY29uc3QgYXBwZWFyYW5jZSA9IGJ1ZmZlci5qb2luKCJcbiIpOwogICAgY29uc3QgYXBwZWFyYW5jZVN0cmVhbURpY3QgPSBuZXcgRGljdCh0aGlzLnhyZWYpOwogICAgYXBwZWFyYW5jZVN0cmVhbURpY3Quc2V0SWZOYW1lKCJTdWJ0eXBlIiwgIkZvcm0iKTsKICAgIGFwcGVhcmFuY2VTdHJlYW1EaWN0LnNldElmTmFtZSgiVHlwZSIsICJYT2JqZWN0Iik7CiAgICBhcHBlYXJhbmNlU3RyZWFtRGljdC5zZXQoIkJCb3giLCBbMCwgMCwgdywgaF0pOwogICAgYXBwZWFyYW5jZVN0cmVhbURpY3Quc2V0KCJMZW5ndGgiLCBhcHBlYXJhbmNlLmxlbmd0aCk7CiAgICBhcHBlYXJhbmNlU3RyZWFtRGljdC5zZXQoIlJlc291cmNlcyIsIHJlc291cmNlcyk7CiAgICBpZiAocm90YXRpb24pIHsKICAgICAgY29uc3QgbWF0cml4ID0gZ2V0Um90YXRpb25NYXRyaXgocm90YXRpb24sIHcsIGgpOwogICAgICBhcHBlYXJhbmNlU3RyZWFtRGljdC5zZXQoIk1hdHJpeCIsIG1hdHJpeCk7CiAgICB9CiAgICBjb25zdCBhcCA9IG5ldyBTdHJpbmdTdHJlYW0oYXBwZWFyYW5jZSk7CiAgICBhcC5kaWN0ID0gYXBwZWFyYW5jZVN0cmVhbURpY3Q7CiAgICByZXR1cm4gYXA7CiAgfQp9Cgo7Ly8gLi9zcmMvc2hhcmVkL3NjcmlwdGluZ191dGlscy5qcwoKCmZ1bmN0aW9uIG1ha2VDb2xvckNvbXAobikgewogIHJldHVybiBNYXRoLmZsb29yKE1hdGgubWF4KDAsIE1hdGgubWluKDEsIG4pKSAqIDI1NSkudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsICIwIik7Cn0KZnVuY3Rpb24gc2NhbGVBbmRDbGFtcCh4KSB7CiAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgMjU1ICogeCkpOwp9CmNsYXNzIENvbG9yQ29udmVydGVycyB7CiAgc3RhdGljIENNWUtfRyhbYywgeSwgbSwga10pIHsKICAgIHJldHVybiBbIkciLCAxIC0gTWF0aC5taW4oMSwgMC4zICogYyArIDAuNTkgKiBtICsgMC4xMSAqIHkgKyBrKV07CiAgfQogIHN0YXRpYyBHX0NNWUsoW2ddKSB7CiAgICByZXR1cm4gWyJDTVlLIiwgMCwgMCwgMCwgMSAtIGddOwogIH0KICBzdGF0aWMgR19SR0IoW2ddKSB7CiAgICByZXR1cm4gWyJSR0IiLCBnLCBnLCBnXTsKICB9CiAgc3RhdGljIEdfcmdiKFtnXSkgewogICAgZyA9IHNjYWxlQW5kQ2xhbXAoZyk7CiAgICByZXR1cm4gW2csIGcsIGddOwogIH0KICBzdGF0aWMgR19IVE1MKFtnXSkgewogICAgY29uc3QgRyA9IG1ha2VDb2xvckNvbXAoZyk7CiAgICByZXR1cm4gYCMke0d9JHtHfSR7R31gOwogIH0KICBzdGF0aWMgUkdCX0coW3IsIGcsIGJdKSB7CiAgICByZXR1cm4gWyJHIiwgMC4zICogciArIDAuNTkgKiBnICsgMC4xMSAqIGJdOwogIH0KICBzdGF0aWMgUkdCX3JnYihjb2xvcikgewogICAgcmV0dXJuIGNvbG9yLm1hcChzY2FsZUFuZENsYW1wKTsKICB9CiAgc3RhdGljIFJHQl9IVE1MKGNvbG9yKSB7CiAgICByZXR1cm4gYCMke2NvbG9yLm1hcChtYWtlQ29sb3JDb21wKS5qb2luKCIiKX1gOwogIH0KICBzdGF0aWMgVF9IVE1MKCkgewogICAgcmV0dXJuICIjMDAwMDAwMDAiOwogIH0KICBzdGF0aWMgVF9yZ2IoKSB7CiAgICByZXR1cm4gW251bGxdOwogIH0KICBzdGF0aWMgQ01ZS19SR0IoW2MsIHksIG0sIGtdKSB7CiAgICByZXR1cm4gWyJSR0IiLCAxIC0gTWF0aC5taW4oMSwgYyArIGspLCAxIC0gTWF0aC5taW4oMSwgbSArIGspLCAxIC0gTWF0aC5taW4oMSwgeSArIGspXTsKICB9CiAgc3RhdGljIENNWUtfcmdiKFtjLCB5LCBtLCBrXSkgewogICAgcmV0dXJuIFtzY2FsZUFuZENsYW1wKDEgLSBNYXRoLm1pbigxLCBjICsgaykpLCBzY2FsZUFuZENsYW1wKDEgLSBNYXRoLm1pbigxLCBtICsgaykpLCBzY2FsZUFuZENsYW1wKDEgLSBNYXRoLm1pbigxLCB5ICsgaykpXTsKICB9CiAgc3RhdGljIENNWUtfSFRNTChjb21wb25lbnRzKSB7CiAgICBjb25zdCByZ2IgPSB0aGlzLkNNWUtfUkdCKGNvbXBvbmVudHMpLnNsaWNlKDEpOwogICAgcmV0dXJuIHRoaXMuUkdCX0hUTUwocmdiKTsKICB9CiAgc3RhdGljIFJHQl9DTVlLKFtyLCBnLCBiXSkgewogICAgY29uc3QgYyA9IDEgLSByOwogICAgY29uc3QgbSA9IDEgLSBnOwogICAgY29uc3QgeSA9IDEgLSBiOwogICAgY29uc3QgayA9IE1hdGgubWluKGMsIG0sIHkpOwogICAgcmV0dXJuIFsiQ01ZSyIsIGMsIG0sIHksIGtdOwogIH0KfQpjb25zdCBEYXRlRm9ybWF0cyA9IFsibS9kIiwgIm0vZC95eSIsICJtbS9kZC95eSIsICJtbS95eSIsICJkLW1tbSIsICJkLW1tbS15eSIsICJkZC1tbW0teXkiLCAieXktbW0tZGQiLCAibW1tLXl5IiwgIm1tbW0teXkiLCAibW1tIGQsIHl5eXkiLCAibW1tbSBkLCB5eXl5IiwgIm0vZC95eSBoOk1NIHR0IiwgIm0vZC95eSBISDpNTSJdOwpjb25zdCBUaW1lRm9ybWF0cyA9IFsiSEg6TU0iLCAiaDpNTSB0dCIsICJISDpNTTpzcyIsICJoOk1NOnNzIHR0Il07Cgo7Ly8gLi9zcmMvY29yZS9uYW1lX251bWJlcl90cmVlLmpzCgoKCmNsYXNzIE5hbWVPck51bWJlclRyZWUgewogIGNvbnN0cnVjdG9yKHJvb3QsIHhyZWYsIHR5cGUpIHsKICAgIHRoaXMucm9vdCA9IHJvb3Q7CiAgICB0aGlzLnhyZWYgPSB4cmVmOwogICAgdGhpcy5fdHlwZSA9IHR5cGU7CiAgfQogIGdldEFsbCgpIHsKICAgIGNvbnN0IG1hcCA9IG5ldyBNYXAoKTsKICAgIGlmICghdGhpcy5yb290KSB7CiAgICAgIHJldHVybiBtYXA7CiAgICB9CiAgICBjb25zdCB4cmVmID0gdGhpcy54cmVmOwogICAgY29uc3QgcHJvY2Vzc2VkID0gbmV3IFJlZlNldCgpOwogICAgcHJvY2Vzc2VkLnB1dCh0aGlzLnJvb3QpOwogICAgY29uc3QgcXVldWUgPSBbdGhpcy5yb290XTsKICAgIHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7CiAgICAgIGNvbnN0IG9iaiA9IHhyZWYuZmV0Y2hJZlJlZihxdWV1ZS5zaGlmdCgpKTsKICAgICAgaWYgKCEob2JqIGluc3RhbmNlb2YgRGljdCkpIHsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBpZiAob2JqLmhhcygiS2lkcyIpKSB7CiAgICAgICAgY29uc3Qga2lkcyA9IG9iai5nZXQoIktpZHMiKTsKICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoa2lkcykpIHsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgICBmb3IgKGNvbnN0IGtpZCBvZiBraWRzKSB7CiAgICAgICAgICBpZiAocHJvY2Vzc2VkLmhhcyhraWQpKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcihgRHVwbGljYXRlIGVudHJ5IGluICIke3RoaXMuX3R5cGV9IiB0cmVlLmApOwogICAgICAgICAgfQogICAgICAgICAgcXVldWUucHVzaChraWQpOwogICAgICAgICAgcHJvY2Vzc2VkLnB1dChraWQpOwogICAgICAgIH0KICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBjb25zdCBlbnRyaWVzID0gb2JqLmdldCh0aGlzLl90eXBlKTsKICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGVudHJpZXMpKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gZW50cmllcy5sZW5ndGg7IGkgPCBpaTsgaSArPSAyKSB7CiAgICAgICAgbWFwLnNldCh4cmVmLmZldGNoSWZSZWYoZW50cmllc1tpXSksIHhyZWYuZmV0Y2hJZlJlZihlbnRyaWVzW2kgKyAxXSkpOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gbWFwOwogIH0KICBnZXRSYXcoa2V5KSB7CiAgICBpZiAoIXRoaXMucm9vdCkgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIGNvbnN0IHhyZWYgPSB0aGlzLnhyZWY7CiAgICBsZXQga2lkc09yRW50cmllcyA9IHhyZWYuZmV0Y2hJZlJlZih0aGlzLnJvb3QpOwogICAgbGV0IGxvb3BDb3VudCA9IDA7CiAgICBjb25zdCBNQVhfTEVWRUxTID0gMTA7CiAgICB3aGlsZSAoa2lkc09yRW50cmllcy5oYXMoIktpZHMiKSkgewogICAgICBpZiAoKytsb29wQ291bnQgPiBNQVhfTEVWRUxTKSB7CiAgICAgICAgd2FybihgU2VhcmNoIGRlcHRoIGxpbWl0IHJlYWNoZWQgZm9yICIke3RoaXMuX3R5cGV9IiB0cmVlLmApOwogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CiAgICAgIGNvbnN0IGtpZHMgPSBraWRzT3JFbnRyaWVzLmdldCgiS2lkcyIpOwogICAgICBpZiAoIUFycmF5LmlzQXJyYXkoa2lkcykpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgICBsZXQgbCA9IDAsCiAgICAgICAgciA9IGtpZHMubGVuZ3RoIC0gMTsKICAgICAgd2hpbGUgKGwgPD0gcikgewogICAgICAgIGNvbnN0IG0gPSBsICsgciA+PiAxOwogICAgICAgIGNvbnN0IGtpZCA9IHhyZWYuZmV0Y2hJZlJlZihraWRzW21dKTsKICAgICAgICBjb25zdCBsaW1pdHMgPSBraWQuZ2V0KCJMaW1pdHMiKTsKICAgICAgICBpZiAoa2V5IDwgeHJlZi5mZXRjaElmUmVmKGxpbWl0c1swXSkpIHsKICAgICAgICAgIHIgPSBtIC0gMTsKICAgICAgICB9IGVsc2UgaWYgKGtleSA+IHhyZWYuZmV0Y2hJZlJlZihsaW1pdHNbMV0pKSB7CiAgICAgICAgICBsID0gbSArIDE7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGtpZHNPckVudHJpZXMgPSBraWQ7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKGwgPiByKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgIH0KICAgIGNvbnN0IGVudHJpZXMgPSBraWRzT3JFbnRyaWVzLmdldCh0aGlzLl90eXBlKTsKICAgIGlmIChBcnJheS5pc0FycmF5KGVudHJpZXMpKSB7CiAgICAgIGxldCBsID0gMCwKICAgICAgICByID0gZW50cmllcy5sZW5ndGggLSAyOwogICAgICB3aGlsZSAobCA8PSByKSB7CiAgICAgICAgY29uc3QgdG1wID0gbCArIHIgPj4gMSwKICAgICAgICAgIG0gPSB0bXAgKyAodG1wICYgMSk7CiAgICAgICAgY29uc3QgY3VycmVudEtleSA9IHhyZWYuZmV0Y2hJZlJlZihlbnRyaWVzW21dKTsKICAgICAgICBpZiAoa2V5IDwgY3VycmVudEtleSkgewogICAgICAgICAgciA9IG0gLSAyOwogICAgICAgIH0gZWxzZSBpZiAoa2V5ID4gY3VycmVudEtleSkgewogICAgICAgICAgbCA9IG0gKyAyOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gZW50cmllc1ttICsgMV07CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICByZXR1cm4gbnVsbDsKICB9CiAgZ2V0KGtleSkgewogICAgcmV0dXJuIHRoaXMueHJlZi5mZXRjaElmUmVmKHRoaXMuZ2V0UmF3KGtleSkpOwogIH0KfQpjbGFzcyBOYW1lVHJlZSBleHRlbmRzIE5hbWVPck51bWJlclRyZWUgewogIGNvbnN0cnVjdG9yKHJvb3QsIHhyZWYpIHsKICAgIHN1cGVyKHJvb3QsIHhyZWYsICJOYW1lcyIpOwogIH0KfQpjbGFzcyBOdW1iZXJUcmVlIGV4dGVuZHMgTmFtZU9yTnVtYmVyVHJlZSB7CiAgY29uc3RydWN0b3Iocm9vdCwgeHJlZikgewogICAgc3VwZXIocm9vdCwgeHJlZiwgIk51bXMiKTsKICB9Cn0KCjsvLyAuL3NyYy9jb3JlL2NsZWFudXBfaGVscGVyLmpzCgoKCgpmdW5jdGlvbiBjbGVhckdsb2JhbENhY2hlcygpIHsKICBjbGVhclBhdHRlcm5DYWNoZXMoKTsKICBjbGVhclByaW1pdGl2ZUNhY2hlcygpOwogIGNsZWFyVW5pY29kZUNhY2hlcygpOwogIEpweEltYWdlLmNsZWFudXAoKTsKfQoKOy8vIC4vc3JjL2NvcmUvZmlsZV9zcGVjLmpzCgoKCmZ1bmN0aW9uIHBpY2tQbGF0Zm9ybUl0ZW0oZGljdCkgewogIGlmICghKGRpY3QgaW5zdGFuY2VvZiBEaWN0KSkgewogICAgcmV0dXJuIG51bGw7CiAgfQogIGlmIChkaWN0LmhhcygiVUYiKSkgewogICAgcmV0dXJuIGRpY3QuZ2V0KCJVRiIpOwogIH0gZWxzZSBpZiAoZGljdC5oYXMoIkYiKSkgewogICAgcmV0dXJuIGRpY3QuZ2V0KCJGIik7CiAgfSBlbHNlIGlmIChkaWN0LmhhcygiVW5peCIpKSB7CiAgICByZXR1cm4gZGljdC5nZXQoIlVuaXgiKTsKICB9IGVsc2UgaWYgKGRpY3QuaGFzKCJNYWMiKSkgewogICAgcmV0dXJuIGRpY3QuZ2V0KCJNYWMiKTsKICB9IGVsc2UgaWYgKGRpY3QuaGFzKCJET1MiKSkgewogICAgcmV0dXJuIGRpY3QuZ2V0KCJET1MiKTsKICB9CiAgcmV0dXJuIG51bGw7Cn0KZnVuY3Rpb24gc3RyaXBQYXRoKHN0cikgewogIHJldHVybiBzdHIuc3Vic3RyaW5nKHN0ci5sYXN0SW5kZXhPZigiLyIpICsgMSk7Cn0KY2xhc3MgRmlsZVNwZWMgewogICNjb250ZW50QXZhaWxhYmxlID0gZmFsc2U7CiAgY29uc3RydWN0b3Iocm9vdCwgeHJlZiwgc2tpcENvbnRlbnQgPSBmYWxzZSkgewogICAgaWYgKCEocm9vdCBpbnN0YW5jZW9mIERpY3QpKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIHRoaXMueHJlZiA9IHhyZWY7CiAgICB0aGlzLnJvb3QgPSByb290OwogICAgaWYgKHJvb3QuaGFzKCJGUyIpKSB7CiAgICAgIHRoaXMuZnMgPSByb290LmdldCgiRlMiKTsKICAgIH0KICAgIGlmIChyb290LmhhcygiUkYiKSkgewogICAgICB3YXJuKCJSZWxhdGVkIGZpbGUgc3BlY2lmaWNhdGlvbnMgYXJlIG5vdCBzdXBwb3J0ZWQiKTsKICAgIH0KICAgIGlmICghc2tpcENvbnRlbnQpIHsKICAgICAgaWYgKHJvb3QuaGFzKCJFRiIpKSB7CiAgICAgICAgdGhpcy4jY29udGVudEF2YWlsYWJsZSA9IHRydWU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgd2FybigiTm9uLWVtYmVkZGVkIGZpbGUgc3BlY2lmaWNhdGlvbnMgYXJlIG5vdCBzdXBwb3J0ZWQiKTsKICAgICAgfQogICAgfQogIH0KICBnZXQgZmlsZW5hbWUoKSB7CiAgICBsZXQgZmlsZW5hbWUgPSAiIjsKICAgIGNvbnN0IGl0ZW0gPSBwaWNrUGxhdGZvcm1JdGVtKHRoaXMucm9vdCk7CiAgICBpZiAoaXRlbSAmJiB0eXBlb2YgaXRlbSA9PT0gInN0cmluZyIpIHsKICAgICAgZmlsZW5hbWUgPSBzdHJpbmdUb1BERlN0cmluZyhpdGVtLCB0cnVlKS5yZXBsYWNlQWxsKCJcXFxcIiwgIlxcIikucmVwbGFjZUFsbCgiXFwvIiwgIi8iKS5yZXBsYWNlQWxsKCJcXCIsICIvIik7CiAgICB9CiAgICByZXR1cm4gc2hhZG93KHRoaXMsICJmaWxlbmFtZSIsIGZpbGVuYW1lIHx8ICJ1bm5hbWVkIik7CiAgfQogIGdldCBjb250ZW50KCkgewogICAgaWYgKCF0aGlzLiNjb250ZW50QXZhaWxhYmxlKSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgdGhpcy5fY29udGVudFJlZiB8fD0gcGlja1BsYXRmb3JtSXRlbSh0aGlzLnJvb3Q/LmdldCgiRUYiKSk7CiAgICBsZXQgY29udGVudCA9IG51bGw7CiAgICBpZiAodGhpcy5fY29udGVudFJlZikgewogICAgICBjb25zdCBmaWxlT2JqID0gdGhpcy54cmVmLmZldGNoSWZSZWYodGhpcy5fY29udGVudFJlZik7CiAgICAgIGlmIChmaWxlT2JqIGluc3RhbmNlb2YgQmFzZVN0cmVhbSkgewogICAgICAgIGNvbnRlbnQgPSBmaWxlT2JqLmdldEJ5dGVzKCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgd2FybigiRW1iZWRkZWQgZmlsZSBzcGVjaWZpY2F0aW9uIHBvaW50cyB0byBub24tZXhpc3RpbmcvaW52YWxpZCBjb250ZW50Iik7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHdhcm4oIkVtYmVkZGVkIGZpbGUgc3BlY2lmaWNhdGlvbiBkb2VzIG5vdCBoYXZlIGFueSBjb250ZW50Iik7CiAgICB9CiAgICByZXR1cm4gY29udGVudDsKICB9CiAgZ2V0IGRlc2NyaXB0aW9uKCkgewogICAgbGV0IGRlc2NyaXB0aW9uID0gIiI7CiAgICBjb25zdCBkZXNjID0gdGhpcy5yb290Py5nZXQoIkRlc2MiKTsKICAgIGlmIChkZXNjICYmIHR5cGVvZiBkZXNjID09PSAic3RyaW5nIikgewogICAgICBkZXNjcmlwdGlvbiA9IHN0cmluZ1RvUERGU3RyaW5nKGRlc2MpOwogICAgfQogICAgcmV0dXJuIHNoYWRvdyh0aGlzLCAiZGVzY3JpcHRpb24iLCBkZXNjcmlwdGlvbik7CiAgfQogIGdldCBzZXJpYWxpemFibGUoKSB7CiAgICByZXR1cm4gewogICAgICByYXdGaWxlbmFtZTogdGhpcy5maWxlbmFtZSwKICAgICAgZmlsZW5hbWU6IHN0cmlwUGF0aCh0aGlzLmZpbGVuYW1lKSwKICAgICAgY29udGVudDogdGhpcy5jb250ZW50LAogICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbgogICAgfTsKICB9Cn0KCjsvLyAuL3NyYy9jb3JlL3htbF9wYXJzZXIuanMKCgoKCmNvbnN0IFhNTFBhcnNlckVycm9yQ29kZSA9IHsKICBOb0Vycm9yOiAwLAogIEVuZE9mRG9jdW1lbnQ6IC0xLAogIFVudGVybWluYXRlZENkYXQ6IC0yLAogIFVudGVybWluYXRlZFhtbERlY2xhcmF0aW9uOiAtMywKICBVbnRlcm1pbmF0ZWREb2N0eXBlRGVjbGFyYXRpb246IC00LAogIFVudGVybWluYXRlZENvbW1lbnQ6IC01LAogIE1hbGZvcm1lZEVsZW1lbnQ6IC02LAogIE91dE9mTWVtb3J5OiAtNywKICBVbnRlcm1pbmF0ZWRBdHRyaWJ1dGVWYWx1ZTogLTgsCiAgVW50ZXJtaW5hdGVkRWxlbWVudDogLTksCiAgRWxlbWVudE5ldmVyQmVndW46IC0xMAp9OwpmdW5jdGlvbiBpc1doaXRlc3BhY2UocywgaW5kZXgpIHsKICBjb25zdCBjaCA9IHNbaW5kZXhdOwogIHJldHVybiBjaCA9PT0gIiAiIHx8IGNoID09PSAiXG4iIHx8IGNoID09PSAiXHIiIHx8IGNoID09PSAiXHQiOwp9CmZ1bmN0aW9uIGlzV2hpdGVzcGFjZVN0cmluZyhzKSB7CiAgZm9yIChsZXQgaSA9IDAsIGlpID0gcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICBpZiAoIWlzV2hpdGVzcGFjZShzLCBpKSkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfQogIHJldHVybiB0cnVlOwp9CmNsYXNzIFhNTFBhcnNlckJhc2UgewogIF9yZXNvbHZlRW50aXRpZXMocykgewogICAgcmV0dXJuIHMucmVwbGFjZUFsbCgvJihbXjtdKyk7L2csIChhbGwsIGVudGl0eSkgPT4gewogICAgICBpZiAoZW50aXR5LnN1YnN0cmluZygwLCAyKSA9PT0gIiN4IikgewogICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNvZGVQb2ludChwYXJzZUludChlbnRpdHkuc3Vic3RyaW5nKDIpLCAxNikpOwogICAgICB9IGVsc2UgaWYgKGVudGl0eS5zdWJzdHJpbmcoMCwgMSkgPT09ICIjIikgewogICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNvZGVQb2ludChwYXJzZUludChlbnRpdHkuc3Vic3RyaW5nKDEpLCAxMCkpOwogICAgICB9CiAgICAgIHN3aXRjaCAoZW50aXR5KSB7CiAgICAgICAgY2FzZSAibHQiOgogICAgICAgICAgcmV0dXJuICI8IjsKICAgICAgICBjYXNlICJndCI6CiAgICAgICAgICByZXR1cm4gIj4iOwogICAgICAgIGNhc2UgImFtcCI6CiAgICAgICAgICByZXR1cm4gIiYiOwogICAgICAgIGNhc2UgInF1b3QiOgogICAgICAgICAgcmV0dXJuICciJzsKICAgICAgICBjYXNlICJhcG9zIjoKICAgICAgICAgIHJldHVybiAiJyI7CiAgICAgIH0KICAgICAgcmV0dXJuIHRoaXMub25SZXNvbHZlRW50aXR5KGVudGl0eSk7CiAgICB9KTsKICB9CiAgX3BhcnNlQ29udGVudChzLCBzdGFydCkgewogICAgY29uc3QgYXR0cmlidXRlcyA9IFtdOwogICAgbGV0IHBvcyA9IHN0YXJ0OwogICAgZnVuY3Rpb24gc2tpcFdzKCkgewogICAgICB3aGlsZSAocG9zIDwgcy5sZW5ndGggJiYgaXNXaGl0ZXNwYWNlKHMsIHBvcykpIHsKICAgICAgICArK3BvczsKICAgICAgfQogICAgfQogICAgd2hpbGUgKHBvcyA8IHMubGVuZ3RoICYmICFpc1doaXRlc3BhY2UocywgcG9zKSAmJiBzW3Bvc10gIT09ICI+IiAmJiBzW3Bvc10gIT09ICIvIikgewogICAgICArK3BvczsKICAgIH0KICAgIGNvbnN0IG5hbWUgPSBzLnN1YnN0cmluZyhzdGFydCwgcG9zKTsKICAgIHNraXBXcygpOwogICAgd2hpbGUgKHBvcyA8IHMubGVuZ3RoICYmIHNbcG9zXSAhPT0gIj4iICYmIHNbcG9zXSAhPT0gIi8iICYmIHNbcG9zXSAhPT0gIj8iKSB7CiAgICAgIHNraXBXcygpOwogICAgICBsZXQgYXR0ck5hbWUgPSAiIiwKICAgICAgICBhdHRyVmFsdWUgPSAiIjsKICAgICAgd2hpbGUgKHBvcyA8IHMubGVuZ3RoICYmICFpc1doaXRlc3BhY2UocywgcG9zKSAmJiBzW3Bvc10gIT09ICI9IikgewogICAgICAgIGF0dHJOYW1lICs9IHNbcG9zXTsKICAgICAgICArK3BvczsKICAgICAgfQogICAgICBza2lwV3MoKTsKICAgICAgaWYgKHNbcG9zXSAhPT0gIj0iKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgICAgKytwb3M7CiAgICAgIHNraXBXcygpOwogICAgICBjb25zdCBhdHRyRW5kQ2hhciA9IHNbcG9zXTsKICAgICAgaWYgKGF0dHJFbmRDaGFyICE9PSAnIicgJiYgYXR0ckVuZENoYXIgIT09ICInIikgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CiAgICAgIGNvbnN0IGF0dHJFbmRJbmRleCA9IHMuaW5kZXhPZihhdHRyRW5kQ2hhciwgKytwb3MpOwogICAgICBpZiAoYXR0ckVuZEluZGV4IDwgMCkgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CiAgICAgIGF0dHJWYWx1ZSA9IHMuc3Vic3RyaW5nKHBvcywgYXR0ckVuZEluZGV4KTsKICAgICAgYXR0cmlidXRlcy5wdXNoKHsKICAgICAgICBuYW1lOiBhdHRyTmFtZSwKICAgICAgICB2YWx1ZTogdGhpcy5fcmVzb2x2ZUVudGl0aWVzKGF0dHJWYWx1ZSkKICAgICAgfSk7CiAgICAgIHBvcyA9IGF0dHJFbmRJbmRleCArIDE7CiAgICAgIHNraXBXcygpOwogICAgfQogICAgcmV0dXJuIHsKICAgICAgbmFtZSwKICAgICAgYXR0cmlidXRlcywKICAgICAgcGFyc2VkOiBwb3MgLSBzdGFydAogICAgfTsKICB9CiAgX3BhcnNlUHJvY2Vzc2luZ0luc3RydWN0aW9uKHMsIHN0YXJ0KSB7CiAgICBsZXQgcG9zID0gc3RhcnQ7CiAgICBmdW5jdGlvbiBza2lwV3MoKSB7CiAgICAgIHdoaWxlIChwb3MgPCBzLmxlbmd0aCAmJiBpc1doaXRlc3BhY2UocywgcG9zKSkgewogICAgICAgICsrcG9zOwogICAgICB9CiAgICB9CiAgICB3aGlsZSAocG9zIDwgcy5sZW5ndGggJiYgIWlzV2hpdGVzcGFjZShzLCBwb3MpICYmIHNbcG9zXSAhPT0gIj4iICYmIHNbcG9zXSAhPT0gIj8iICYmIHNbcG9zXSAhPT0gIi8iKSB7CiAgICAgICsrcG9zOwogICAgfQogICAgY29uc3QgbmFtZSA9IHMuc3Vic3RyaW5nKHN0YXJ0LCBwb3MpOwogICAgc2tpcFdzKCk7CiAgICBjb25zdCBhdHRyU3RhcnQgPSBwb3M7CiAgICB3aGlsZSAocG9zIDwgcy5sZW5ndGggJiYgKHNbcG9zXSAhPT0gIj8iIHx8IHNbcG9zICsgMV0gIT09ICI+IikpIHsKICAgICAgKytwb3M7CiAgICB9CiAgICBjb25zdCB2YWx1ZSA9IHMuc3Vic3RyaW5nKGF0dHJTdGFydCwgcG9zKTsKICAgIHJldHVybiB7CiAgICAgIG5hbWUsCiAgICAgIHZhbHVlLAogICAgICBwYXJzZWQ6IHBvcyAtIHN0YXJ0CiAgICB9OwogIH0KICBwYXJzZVhtbChzKSB7CiAgICBsZXQgaSA9IDA7CiAgICB3aGlsZSAoaSA8IHMubGVuZ3RoKSB7CiAgICAgIGNvbnN0IGNoID0gc1tpXTsKICAgICAgbGV0IGogPSBpOwogICAgICBpZiAoY2ggPT09ICI8IikgewogICAgICAgICsrajsKICAgICAgICBjb25zdCBjaDIgPSBzW2pdOwogICAgICAgIGxldCBxOwogICAgICAgIHN3aXRjaCAoY2gyKSB7CiAgICAgICAgICBjYXNlICIvIjoKICAgICAgICAgICAgKytqOwogICAgICAgICAgICBxID0gcy5pbmRleE9mKCI+Iiwgaik7CiAgICAgICAgICAgIGlmIChxIDwgMCkgewogICAgICAgICAgICAgIHRoaXMub25FcnJvcihYTUxQYXJzZXJFcnJvckNvZGUuVW50ZXJtaW5hdGVkRWxlbWVudCk7CiAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMub25FbmRFbGVtZW50KHMuc3Vic3RyaW5nKGosIHEpKTsKICAgICAgICAgICAgaiA9IHEgKyAxOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgIj8iOgogICAgICAgICAgICArK2o7CiAgICAgICAgICAgIGNvbnN0IHBpID0gdGhpcy5fcGFyc2VQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24ocywgaik7CiAgICAgICAgICAgIGlmIChzLnN1YnN0cmluZyhqICsgcGkucGFyc2VkLCBqICsgcGkucGFyc2VkICsgMikgIT09ICI/PiIpIHsKICAgICAgICAgICAgICB0aGlzLm9uRXJyb3IoWE1MUGFyc2VyRXJyb3JDb2RlLlVudGVybWluYXRlZFhtbERlY2xhcmF0aW9uKTsKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy5vblBpKHBpLm5hbWUsIHBpLnZhbHVlKTsKICAgICAgICAgICAgaiArPSBwaS5wYXJzZWQgKyAyOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgIiEiOgogICAgICAgICAgICBpZiAocy5zdWJzdHJpbmcoaiArIDEsIGogKyAzKSA9PT0gIi0tIikgewogICAgICAgICAgICAgIHEgPSBzLmluZGV4T2YoIi0tPiIsIGogKyAzKTsKICAgICAgICAgICAgICBpZiAocSA8IDApIHsKICAgICAgICAgICAgICAgIHRoaXMub25FcnJvcihYTUxQYXJzZXJFcnJvckNvZGUuVW50ZXJtaW5hdGVkQ29tbWVudCk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHRoaXMub25Db21tZW50KHMuc3Vic3RyaW5nKGogKyAzLCBxKSk7CiAgICAgICAgICAgICAgaiA9IHEgKyAzOwogICAgICAgICAgICB9IGVsc2UgaWYgKHMuc3Vic3RyaW5nKGogKyAxLCBqICsgOCkgPT09ICJbQ0RBVEFbIikgewogICAgICAgICAgICAgIHEgPSBzLmluZGV4T2YoIl1dPiIsIGogKyA4KTsKICAgICAgICAgICAgICBpZiAocSA8IDApIHsKICAgICAgICAgICAgICAgIHRoaXMub25FcnJvcihYTUxQYXJzZXJFcnJvckNvZGUuVW50ZXJtaW5hdGVkQ2RhdCk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHRoaXMub25DZGF0YShzLnN1YnN0cmluZyhqICsgOCwgcSkpOwogICAgICAgICAgICAgIGogPSBxICsgMzsKICAgICAgICAgICAgfSBlbHNlIGlmIChzLnN1YnN0cmluZyhqICsgMSwgaiArIDgpID09PSAiRE9DVFlQRSIpIHsKICAgICAgICAgICAgICBjb25zdCBxMiA9IHMuaW5kZXhPZigiWyIsIGogKyA4KTsKICAgICAgICAgICAgICBsZXQgY29tcGxleERvY3R5cGUgPSBmYWxzZTsKICAgICAgICAgICAgICBxID0gcy5pbmRleE9mKCI+IiwgaiArIDgpOwogICAgICAgICAgICAgIGlmIChxIDwgMCkgewogICAgICAgICAgICAgICAgdGhpcy5vbkVycm9yKFhNTFBhcnNlckVycm9yQ29kZS5VbnRlcm1pbmF0ZWREb2N0eXBlRGVjbGFyYXRpb24pOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAocTIgPiAwICYmIHEgPiBxMikgewogICAgICAgICAgICAgICAgcSA9IHMuaW5kZXhPZigiXT4iLCBqICsgOCk7CiAgICAgICAgICAgICAgICBpZiAocSA8IDApIHsKICAgICAgICAgICAgICAgICAgdGhpcy5vbkVycm9yKFhNTFBhcnNlckVycm9yQ29kZS5VbnRlcm1pbmF0ZWREb2N0eXBlRGVjbGFyYXRpb24pOwogICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjb21wbGV4RG9jdHlwZSA9IHRydWU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGNvbnN0IGRvY3R5cGVDb250ZW50ID0gcy5zdWJzdHJpbmcoaiArIDgsIHEgKyAoY29tcGxleERvY3R5cGUgPyAxIDogMCkpOwogICAgICAgICAgICAgIHRoaXMub25Eb2N0eXBlKGRvY3R5cGVDb250ZW50KTsKICAgICAgICAgICAgICBqID0gcSArIChjb21wbGV4RG9jdHlwZSA/IDIgOiAxKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB0aGlzLm9uRXJyb3IoWE1MUGFyc2VyRXJyb3JDb2RlLk1hbGZvcm1lZEVsZW1lbnQpOwogICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSB0aGlzLl9wYXJzZUNvbnRlbnQocywgaik7CiAgICAgICAgICAgIGlmIChjb250ZW50ID09PSBudWxsKSB7CiAgICAgICAgICAgICAgdGhpcy5vbkVycm9yKFhNTFBhcnNlckVycm9yQ29kZS5NYWxmb3JtZWRFbGVtZW50KTsKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgbGV0IGlzQ2xvc2VkID0gZmFsc2U7CiAgICAgICAgICAgIGlmIChzLnN1YnN0cmluZyhqICsgY29udGVudC5wYXJzZWQsIGogKyBjb250ZW50LnBhcnNlZCArIDIpID09PSAiLz4iKSB7CiAgICAgICAgICAgICAgaXNDbG9zZWQgPSB0cnVlOwogICAgICAgICAgICB9IGVsc2UgaWYgKHMuc3Vic3RyaW5nKGogKyBjb250ZW50LnBhcnNlZCwgaiArIGNvbnRlbnQucGFyc2VkICsgMSkgIT09ICI+IikgewogICAgICAgICAgICAgIHRoaXMub25FcnJvcihYTUxQYXJzZXJFcnJvckNvZGUuVW50ZXJtaW5hdGVkRWxlbWVudCk7CiAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMub25CZWdpbkVsZW1lbnQoY29udGVudC5uYW1lLCBjb250ZW50LmF0dHJpYnV0ZXMsIGlzQ2xvc2VkKTsKICAgICAgICAgICAgaiArPSBjb250ZW50LnBhcnNlZCArIChpc0Nsb3NlZCA/IDIgOiAxKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHdoaWxlIChqIDwgcy5sZW5ndGggJiYgc1tqXSAhPT0gIjwiKSB7CiAgICAgICAgICBqKys7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHRleHQgPSBzLnN1YnN0cmluZyhpLCBqKTsKICAgICAgICB0aGlzLm9uVGV4dCh0aGlzLl9yZXNvbHZlRW50aXRpZXModGV4dCkpOwogICAgICB9CiAgICAgIGkgPSBqOwogICAgfQogIH0KICBvblJlc29sdmVFbnRpdHkobmFtZSkgewogICAgcmV0dXJuIGAmJHtuYW1lfTtgOwogIH0KICBvblBpKG5hbWUsIHZhbHVlKSB7fQogIG9uQ29tbWVudCh0ZXh0KSB7fQogIG9uQ2RhdGEodGV4dCkge30KICBvbkRvY3R5cGUoZG9jdHlwZUNvbnRlbnQpIHt9CiAgb25UZXh0KHRleHQpIHt9CiAgb25CZWdpbkVsZW1lbnQobmFtZSwgYXR0cmlidXRlcywgaXNFbXB0eSkge30KICBvbkVuZEVsZW1lbnQobmFtZSkge30KICBvbkVycm9yKGNvZGUpIHt9Cn0KY2xhc3MgU2ltcGxlRE9NTm9kZSB7CiAgY29uc3RydWN0b3Iobm9kZU5hbWUsIG5vZGVWYWx1ZSkgewogICAgdGhpcy5ub2RlTmFtZSA9IG5vZGVOYW1lOwogICAgdGhpcy5ub2RlVmFsdWUgPSBub2RlVmFsdWU7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgInBhcmVudE5vZGUiLCB7CiAgICAgIHZhbHVlOiBudWxsLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfQogIGdldCBmaXJzdENoaWxkKCkgewogICAgcmV0dXJuIHRoaXMuY2hpbGROb2Rlcz8uWzBdOwogIH0KICBnZXQgbmV4dFNpYmxpbmcoKSB7CiAgICBjb25zdCBjaGlsZE5vZGVzID0gdGhpcy5wYXJlbnROb2RlLmNoaWxkTm9kZXM7CiAgICBpZiAoIWNoaWxkTm9kZXMpIHsKICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICAgIH0KICAgIGNvbnN0IGluZGV4ID0gY2hpbGROb2Rlcy5pbmRleE9mKHRoaXMpOwogICAgaWYgKGluZGV4ID09PSAtMSkgewogICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgfQogICAgcmV0dXJuIGNoaWxkTm9kZXNbaW5kZXggKyAxXTsKICB9CiAgZ2V0IHRleHRDb250ZW50KCkgewogICAgaWYgKCF0aGlzLmNoaWxkTm9kZXMpIHsKICAgICAgcmV0dXJuIHRoaXMubm9kZVZhbHVlIHx8ICIiOwogICAgfQogICAgcmV0dXJuIHRoaXMuY2hpbGROb2Rlcy5tYXAoY2hpbGQgPT4gY2hpbGQudGV4dENvbnRlbnQpLmpvaW4oIiIpOwogIH0KICBnZXQgY2hpbGRyZW4oKSB7CiAgICByZXR1cm4gdGhpcy5jaGlsZE5vZGVzIHx8IFtdOwogIH0KICBoYXNDaGlsZE5vZGVzKCkgewogICAgcmV0dXJuIHRoaXMuY2hpbGROb2Rlcz8ubGVuZ3RoID4gMDsKICB9CiAgc2VhcmNoTm9kZShwYXRocywgcG9zKSB7CiAgICBpZiAocG9zID49IHBhdGhzLmxlbmd0aCkgewogICAgICByZXR1cm4gdGhpczsKICAgIH0KICAgIGNvbnN0IGNvbXBvbmVudCA9IHBhdGhzW3Bvc107CiAgICBpZiAoY29tcG9uZW50Lm5hbWUuc3RhcnRzV2l0aCgiIyIpICYmIHBvcyA8IHBhdGhzLmxlbmd0aCAtIDEpIHsKICAgICAgcmV0dXJuIHRoaXMuc2VhcmNoTm9kZShwYXRocywgcG9zICsgMSk7CiAgICB9CiAgICBjb25zdCBzdGFjayA9IFtdOwogICAgbGV0IG5vZGUgPSB0aGlzOwogICAgd2hpbGUgKHRydWUpIHsKICAgICAgaWYgKGNvbXBvbmVudC5uYW1lID09PSBub2RlLm5vZGVOYW1lKSB7CiAgICAgICAgaWYgKGNvbXBvbmVudC5wb3MgPT09IDApIHsKICAgICAgICAgIGNvbnN0IHJlcyA9IG5vZGUuc2VhcmNoTm9kZShwYXRocywgcG9zICsgMSk7CiAgICAgICAgICBpZiAocmVzICE9PSBudWxsKSB7CiAgICAgICAgICAgIHJldHVybiByZXM7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmIChzdGFjay5sZW5ndGggPT09IDApIHsKICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjb25zdCBbcGFyZW50XSA9IHN0YWNrLnBvcCgpOwogICAgICAgICAgbGV0IHNpYmxpbmdQb3MgPSAwOwogICAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBwYXJlbnQuY2hpbGROb2RlcykgewogICAgICAgICAgICBpZiAoY29tcG9uZW50Lm5hbWUgPT09IGNoaWxkLm5vZGVOYW1lKSB7CiAgICAgICAgICAgICAgaWYgKHNpYmxpbmdQb3MgPT09IGNvbXBvbmVudC5wb3MpIHsKICAgICAgICAgICAgICAgIHJldHVybiBjaGlsZC5zZWFyY2hOb2RlKHBhdGhzLCBwb3MgKyAxKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgc2libGluZ1BvcysrOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gbm9kZS5zZWFyY2hOb2RlKHBhdGhzLCBwb3MgKyAxKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKG5vZGUuY2hpbGROb2Rlcz8ubGVuZ3RoID4gMCkgewogICAgICAgIHN0YWNrLnB1c2goW25vZGUsIDBdKTsKICAgICAgICBub2RlID0gbm9kZS5jaGlsZE5vZGVzWzBdOwogICAgICB9IGVsc2UgaWYgKHN0YWNrLmxlbmd0aCA9PT0gMCkgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9IGVsc2UgewogICAgICAgIHdoaWxlIChzdGFjay5sZW5ndGggIT09IDApIHsKICAgICAgICAgIGNvbnN0IFtwYXJlbnQsIGN1cnJlbnRQb3NdID0gc3RhY2sucG9wKCk7CiAgICAgICAgICBjb25zdCBuZXdQb3MgPSBjdXJyZW50UG9zICsgMTsKICAgICAgICAgIGlmIChuZXdQb3MgPCBwYXJlbnQuY2hpbGROb2Rlcy5sZW5ndGgpIHsKICAgICAgICAgICAgc3RhY2sucHVzaChbcGFyZW50LCBuZXdQb3NdKTsKICAgICAgICAgICAgbm9kZSA9IHBhcmVudC5jaGlsZE5vZGVzW25ld1Bvc107CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoc3RhY2subGVuZ3RoID09PSAwKSB7CiAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9CiAgZHVtcChidWZmZXIpIHsKICAgIGlmICh0aGlzLm5vZGVOYW1lID09PSAiI3RleHQiKSB7CiAgICAgIGJ1ZmZlci5wdXNoKGVuY29kZVRvWG1sU3RyaW5nKHRoaXMubm9kZVZhbHVlKSk7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGJ1ZmZlci5wdXNoKGA8JHt0aGlzLm5vZGVOYW1lfWApOwogICAgaWYgKHRoaXMuYXR0cmlidXRlcykgewogICAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZSBvZiB0aGlzLmF0dHJpYnV0ZXMpIHsKICAgICAgICBidWZmZXIucHVzaChgICR7YXR0cmlidXRlLm5hbWV9PSIke2VuY29kZVRvWG1sU3RyaW5nKGF0dHJpYnV0ZS52YWx1ZSl9ImApOwogICAgICB9CiAgICB9CiAgICBpZiAodGhpcy5oYXNDaGlsZE5vZGVzKCkpIHsKICAgICAgYnVmZmVyLnB1c2goIj4iKTsKICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiB0aGlzLmNoaWxkTm9kZXMpIHsKICAgICAgICBjaGlsZC5kdW1wKGJ1ZmZlcik7CiAgICAgIH0KICAgICAgYnVmZmVyLnB1c2goYDwvJHt0aGlzLm5vZGVOYW1lfT5gKTsKICAgIH0gZWxzZSBpZiAodGhpcy5ub2RlVmFsdWUpIHsKICAgICAgYnVmZmVyLnB1c2goYD4ke2VuY29kZVRvWG1sU3RyaW5nKHRoaXMubm9kZVZhbHVlKX08LyR7dGhpcy5ub2RlTmFtZX0+YCk7CiAgICB9IGVsc2UgewogICAgICBidWZmZXIucHVzaCgiLz4iKTsKICAgIH0KICB9Cn0KY2xhc3MgU2ltcGxlWE1MUGFyc2VyIGV4dGVuZHMgWE1MUGFyc2VyQmFzZSB7CiAgY29uc3RydWN0b3IoewogICAgaGFzQXR0cmlidXRlcyA9IGZhbHNlLAogICAgbG93ZXJDYXNlTmFtZSA9IGZhbHNlCiAgfSkgewogICAgc3VwZXIoKTsKICAgIHRoaXMuX2N1cnJlbnRGcmFnbWVudCA9IG51bGw7CiAgICB0aGlzLl9zdGFjayA9IG51bGw7CiAgICB0aGlzLl9lcnJvckNvZGUgPSBYTUxQYXJzZXJFcnJvckNvZGUuTm9FcnJvcjsKICAgIHRoaXMuX2hhc0F0dHJpYnV0ZXMgPSBoYXNBdHRyaWJ1dGVzOwogICAgdGhpcy5fbG93ZXJDYXNlTmFtZSA9IGxvd2VyQ2FzZU5hbWU7CiAgfQogIHBhcnNlRnJvbVN0cmluZyhkYXRhKSB7CiAgICB0aGlzLl9jdXJyZW50RnJhZ21lbnQgPSBbXTsKICAgIHRoaXMuX3N0YWNrID0gW107CiAgICB0aGlzLl9lcnJvckNvZGUgPSBYTUxQYXJzZXJFcnJvckNvZGUuTm9FcnJvcjsKICAgIHRoaXMucGFyc2VYbWwoZGF0YSk7CiAgICBpZiAodGhpcy5fZXJyb3JDb2RlICE9PSBYTUxQYXJzZXJFcnJvckNvZGUuTm9FcnJvcikgewogICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgfQogICAgY29uc3QgW2RvY3VtZW50RWxlbWVudF0gPSB0aGlzLl9jdXJyZW50RnJhZ21lbnQ7CiAgICBpZiAoIWRvY3VtZW50RWxlbWVudCkgewogICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgfQogICAgcmV0dXJuIHsKICAgICAgZG9jdW1lbnRFbGVtZW50CiAgICB9OwogIH0KICBvblRleHQodGV4dCkgewogICAgaWYgKGlzV2hpdGVzcGFjZVN0cmluZyh0ZXh0KSkgewogICAgICByZXR1cm47CiAgICB9CiAgICBjb25zdCBub2RlID0gbmV3IFNpbXBsZURPTU5vZGUoIiN0ZXh0IiwgdGV4dCk7CiAgICB0aGlzLl9jdXJyZW50RnJhZ21lbnQucHVzaChub2RlKTsKICB9CiAgb25DZGF0YSh0ZXh0KSB7CiAgICBjb25zdCBub2RlID0gbmV3IFNpbXBsZURPTU5vZGUoIiN0ZXh0IiwgdGV4dCk7CiAgICB0aGlzLl9jdXJyZW50RnJhZ21lbnQucHVzaChub2RlKTsKICB9CiAgb25CZWdpbkVsZW1lbnQobmFtZSwgYXR0cmlidXRlcywgaXNFbXB0eSkgewogICAgaWYgKHRoaXMuX2xvd2VyQ2FzZU5hbWUpIHsKICAgICAgbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTsKICAgIH0KICAgIGNvbnN0IG5vZGUgPSBuZXcgU2ltcGxlRE9NTm9kZShuYW1lKTsKICAgIG5vZGUuY2hpbGROb2RlcyA9IFtdOwogICAgaWYgKHRoaXMuX2hhc0F0dHJpYnV0ZXMpIHsKICAgICAgbm9kZS5hdHRyaWJ1dGVzID0gYXR0cmlidXRlczsKICAgIH0KICAgIHRoaXMuX2N1cnJlbnRGcmFnbWVudC5wdXNoKG5vZGUpOwogICAgaWYgKGlzRW1wdHkpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgdGhpcy5fc3RhY2sucHVzaCh0aGlzLl9jdXJyZW50RnJhZ21lbnQpOwogICAgdGhpcy5fY3VycmVudEZyYWdtZW50ID0gbm9kZS5jaGlsZE5vZGVzOwogIH0KICBvbkVuZEVsZW1lbnQobmFtZSkgewogICAgdGhpcy5fY3VycmVudEZyYWdtZW50ID0gdGhpcy5fc3RhY2sucG9wKCkgfHwgW107CiAgICBjb25zdCBsYXN0RWxlbWVudCA9IHRoaXMuX2N1cnJlbnRGcmFnbWVudC5hdCgtMSk7CiAgICBpZiAoIWxhc3RFbGVtZW50KSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgZm9yIChjb25zdCBjaGlsZE5vZGUgb2YgbGFzdEVsZW1lbnQuY2hpbGROb2RlcykgewogICAgICBjaGlsZE5vZGUucGFyZW50Tm9kZSA9IGxhc3RFbGVtZW50OwogICAgfQogICAgcmV0dXJuIGxhc3RFbGVtZW50OwogIH0KICBvbkVycm9yKGNvZGUpIHsKICAgIHRoaXMuX2Vycm9yQ29kZSA9IGNvZGU7CiAgfQp9Cgo7Ly8gLi9zcmMvY29yZS9tZXRhZGF0YV9wYXJzZXIuanMKCgoKCgpjbGFzcyBNZXRhZGF0YVBhcnNlciB7CiAgY29uc3RydWN0b3IoZGF0YSkgewogICAgZGF0YSA9IHRoaXMuX3JlcGFpcihkYXRhKTsKICAgIGNvbnN0IHBhcnNlciA9IG5ldyBTaW1wbGVYTUxQYXJzZXIoewogICAgICBsb3dlckNhc2VOYW1lOiB0cnVlCiAgICB9KTsKICAgIGNvbnN0IHhtbERvY3VtZW50ID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhkYXRhKTsKICAgIHRoaXMuX21ldGFkYXRhTWFwID0gbmV3IE1hcCgpOwogICAgdGhpcy5fZGF0YSA9IGRhdGE7CiAgICBpZiAoeG1sRG9jdW1lbnQpIHsKICAgICAgdGhpcy5fcGFyc2UoeG1sRG9jdW1lbnQpOwogICAgfQogIH0KICBfcmVwYWlyKGRhdGEpIHsKICAgIHJldHVybiBkYXRhLnJlcGxhY2UoL15bXjxdKy8sICIiKS5yZXBsYWNlQWxsKC8+XFwzNzZcXDM3NyhbXjxdKykvZywgZnVuY3Rpb24gKGFsbCwgY29kZXMpIHsKICAgICAgY29uc3QgYnl0ZXMgPSBjb2Rlcy5yZXBsYWNlQWxsKC9cXChbMC0zXSkoWzAtN10pKFswLTddKS9nLCBmdW5jdGlvbiAoY29kZSwgZDEsIGQyLCBkMykgewogICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGQxICogNjQgKyBkMiAqIDggKyBkMyAqIDEpOwogICAgICB9KS5yZXBsYWNlQWxsKC8mKGFtcHxhcG9zfGd0fGx0fHF1b3QpOy9nLCBmdW5jdGlvbiAoc3RyLCBuYW1lKSB7CiAgICAgICAgc3dpdGNoIChuYW1lKSB7CiAgICAgICAgICBjYXNlICJhbXAiOgogICAgICAgICAgICByZXR1cm4gIiYiOwogICAgICAgICAgY2FzZSAiYXBvcyI6CiAgICAgICAgICAgIHJldHVybiAiJyI7CiAgICAgICAgICBjYXNlICJndCI6CiAgICAgICAgICAgIHJldHVybiAiPiI7CiAgICAgICAgICBjYXNlICJsdCI6CiAgICAgICAgICAgIHJldHVybiAiPCI7CiAgICAgICAgICBjYXNlICJxdW90IjoKICAgICAgICAgICAgcmV0dXJuICciJzsKICAgICAgICB9CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBfcmVwYWlyOiAke25hbWV9IGlzbid0IGRlZmluZWQuYCk7CiAgICAgIH0pOwogICAgICBjb25zdCBjaGFyQnVmID0gWyI+Il07CiAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGJ5dGVzLmxlbmd0aDsgaSA8IGlpOyBpICs9IDIpIHsKICAgICAgICBjb25zdCBjb2RlID0gYnl0ZXMuY2hhckNvZGVBdChpKSAqIDI1NiArIGJ5dGVzLmNoYXJDb2RlQXQoaSArIDEpOwogICAgICAgIGlmIChjb2RlID49IDMyICYmIGNvZGUgPCAxMjcgJiYgY29kZSAhPT0gNjAgJiYgY29kZSAhPT0gNjIgJiYgY29kZSAhPT0gMzgpIHsKICAgICAgICAgIGNoYXJCdWYucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY2hhckJ1Zi5wdXNoKCImI3giICsgKDB4MTAwMDAgKyBjb2RlKS50b1N0cmluZygxNikuc3Vic3RyaW5nKDEpICsgIjsiKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIGNoYXJCdWYuam9pbigiIik7CiAgICB9KTsKICB9CiAgX2dldFNlcXVlbmNlKGVudHJ5KSB7CiAgICBjb25zdCBuYW1lID0gZW50cnkubm9kZU5hbWU7CiAgICBpZiAobmFtZSAhPT0gInJkZjpiYWciICYmIG5hbWUgIT09ICJyZGY6c2VxIiAmJiBuYW1lICE9PSAicmRmOmFsdCIpIHsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICByZXR1cm4gZW50cnkuY2hpbGROb2Rlcy5maWx0ZXIobm9kZSA9PiBub2RlLm5vZGVOYW1lID09PSAicmRmOmxpIik7CiAgfQogIF9wYXJzZUFycmF5KGVudHJ5KSB7CiAgICBpZiAoIWVudHJ5Lmhhc0NoaWxkTm9kZXMoKSkgewogICAgICByZXR1cm47CiAgICB9CiAgICBjb25zdCBbc2VxTm9kZV0gPSBlbnRyeS5jaGlsZE5vZGVzOwogICAgY29uc3Qgc2VxdWVuY2UgPSB0aGlzLl9nZXRTZXF1ZW5jZShzZXFOb2RlKSB8fCBbXTsKICAgIHRoaXMuX21ldGFkYXRhTWFwLnNldChlbnRyeS5ub2RlTmFtZSwgc2VxdWVuY2UubWFwKG5vZGUgPT4gbm9kZS50ZXh0Q29udGVudC50cmltKCkpKTsKICB9CiAgX3BhcnNlKHhtbERvY3VtZW50KSB7CiAgICBsZXQgcmRmID0geG1sRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50OwogICAgaWYgKHJkZi5ub2RlTmFtZSAhPT0gInJkZjpyZGYiKSB7CiAgICAgIHJkZiA9IHJkZi5maXJzdENoaWxkOwogICAgICB3aGlsZSAocmRmICYmIHJkZi5ub2RlTmFtZSAhPT0gInJkZjpyZGYiKSB7CiAgICAgICAgcmRmID0gcmRmLm5leHRTaWJsaW5nOwogICAgICB9CiAgICB9CiAgICBpZiAoIXJkZiB8fCByZGYubm9kZU5hbWUgIT09ICJyZGY6cmRmIiB8fCAhcmRmLmhhc0NoaWxkTm9kZXMoKSkgewogICAgICByZXR1cm47CiAgICB9CiAgICBmb3IgKGNvbnN0IGRlc2Mgb2YgcmRmLmNoaWxkTm9kZXMpIHsKICAgICAgaWYgKGRlc2Mubm9kZU5hbWUgIT09ICJyZGY6ZGVzY3JpcHRpb24iKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiBkZXNjLmNoaWxkTm9kZXMpIHsKICAgICAgICBjb25zdCBuYW1lID0gZW50cnkubm9kZU5hbWU7CiAgICAgICAgc3dpdGNoIChuYW1lKSB7CiAgICAgICAgICBjYXNlICIjdGV4dCI6CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgY2FzZSAiZGM6Y3JlYXRvciI6CiAgICAgICAgICBjYXNlICJkYzpzdWJqZWN0IjoKICAgICAgICAgICAgdGhpcy5fcGFyc2VBcnJheShlbnRyeSk7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgICB0aGlzLl9tZXRhZGF0YU1hcC5zZXQobmFtZSwgZW50cnkudGV4dENvbnRlbnQudHJpbSgpKTsKICAgICAgfQogICAgfQogIH0KICBnZXQgc2VyaWFsaXphYmxlKCkgewogICAgcmV0dXJuIHsKICAgICAgcGFyc2VkRGF0YTogdGhpcy5fbWV0YWRhdGFNYXAsCiAgICAgIHJhd0RhdGE6IHRoaXMuX2RhdGEKICAgIH07CiAgfQp9Cgo7Ly8gLi9zcmMvY29yZS9zdHJ1Y3RfdHJlZS5qcwoKCgoKCmNvbnN0IE1BWF9ERVBUSCA9IDQwOwpjb25zdCBTdHJ1Y3RFbGVtZW50VHlwZSA9IHsKICBQQUdFX0NPTlRFTlQ6IDEsCiAgU1RSRUFNX0NPTlRFTlQ6IDIsCiAgT0JKRUNUOiAzLAogIEFOTk9UQVRJT046IDQsCiAgRUxFTUVOVDogNQp9OwpjbGFzcyBTdHJ1Y3RUcmVlUm9vdCB7CiAgY29uc3RydWN0b3IoeHJlZiwgcm9vdERpY3QsIHJvb3RSZWYpIHsKICAgIHRoaXMueHJlZiA9IHhyZWY7CiAgICB0aGlzLmRpY3QgPSByb290RGljdDsKICAgIHRoaXMucmVmID0gcm9vdFJlZiBpbnN0YW5jZW9mIFJlZiA/IHJvb3RSZWYgOiBudWxsOwogICAgdGhpcy5yb2xlTWFwID0gbmV3IE1hcCgpOwogICAgdGhpcy5zdHJ1Y3RQYXJlbnRJZHMgPSBudWxsOwogIH0KICBpbml0KCkgewogICAgdGhpcy5yZWFkUm9sZU1hcCgpOwogIH0KICAjYWRkSWRUb1BhZ2UocGFnZVJlZiwgaWQsIHR5cGUpIHsKICAgIGlmICghKHBhZ2VSZWYgaW5zdGFuY2VvZiBSZWYpIHx8IGlkIDwgMCkgewogICAgICByZXR1cm47CiAgICB9CiAgICB0aGlzLnN0cnVjdFBhcmVudElkcyB8fD0gbmV3IFJlZlNldENhY2hlKCk7CiAgICBsZXQgaWRzID0gdGhpcy5zdHJ1Y3RQYXJlbnRJZHMuZ2V0KHBhZ2VSZWYpOwogICAgaWYgKCFpZHMpIHsKICAgICAgaWRzID0gW107CiAgICAgIHRoaXMuc3RydWN0UGFyZW50SWRzLnB1dChwYWdlUmVmLCBpZHMpOwogICAgfQogICAgaWRzLnB1c2goW2lkLCB0eXBlXSk7CiAgfQogIGFkZEFubm90YXRpb25JZFRvUGFnZShwYWdlUmVmLCBpZCkgewogICAgdGhpcy4jYWRkSWRUb1BhZ2UocGFnZVJlZiwgaWQsIFN0cnVjdEVsZW1lbnRUeXBlLkFOTk9UQVRJT04pOwogIH0KICByZWFkUm9sZU1hcCgpIHsKICAgIGNvbnN0IHJvbGVNYXBEaWN0ID0gdGhpcy5kaWN0LmdldCgiUm9sZU1hcCIpOwogICAgaWYgKCEocm9sZU1hcERpY3QgaW5zdGFuY2VvZiBEaWN0KSkgewogICAgICByZXR1cm47CiAgICB9CiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiByb2xlTWFwRGljdCkgewogICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBOYW1lKSB7CiAgICAgICAgdGhpcy5yb2xlTWFwLnNldChrZXksIHZhbHVlLm5hbWUpOwogICAgICB9CiAgICB9CiAgfQogIHN0YXRpYyBhc3luYyBjYW5DcmVhdGVTdHJ1Y3R1cmVUcmVlKHsKICAgIGNhdGFsb2dSZWYsCiAgICBwZGZNYW5hZ2VyLAogICAgbmV3QW5ub3RhdGlvbnNCeVBhZ2UKICB9KSB7CiAgICBpZiAoIShjYXRhbG9nUmVmIGluc3RhbmNlb2YgUmVmKSkgewogICAgICB3YXJuKCJDYW5ub3Qgc2F2ZSB0aGUgc3RydWN0IHRyZWU6IG5vIGNhdGFsb2cgcmVmZXJlbmNlLiIpOwogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgICBsZXQgbmV4dEtleSA9IDA7CiAgICBsZXQgaGFzTm90aGluZ1RvVXBkYXRlID0gdHJ1ZTsKICAgIGZvciAoY29uc3QgW3BhZ2VJbmRleCwgZWxlbWVudHNdIG9mIG5ld0Fubm90YXRpb25zQnlQYWdlKSB7CiAgICAgIGNvbnN0IHsKICAgICAgICByZWY6IHBhZ2VSZWYKICAgICAgfSA9IGF3YWl0IHBkZk1hbmFnZXIuZ2V0UGFnZShwYWdlSW5kZXgpOwogICAgICBpZiAoIShwYWdlUmVmIGluc3RhbmNlb2YgUmVmKSkgewogICAgICAgIHdhcm4oYENhbm5vdCBzYXZlIHRoZSBzdHJ1Y3QgdHJlZTogcGFnZSAke3BhZ2VJbmRleH0gaGFzIG5vIHJlZi5gKTsKICAgICAgICBoYXNOb3RoaW5nVG9VcGRhdGUgPSB0cnVlOwogICAgICAgIGJyZWFrOwogICAgICB9CiAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBlbGVtZW50cykgewogICAgICAgIGlmIChlbGVtZW50LmFjY2Vzc2liaWxpdHlEYXRhPy50eXBlKSB7CiAgICAgICAgICBlbGVtZW50LnBhcmVudFRyZWVJZCA9IG5leHRLZXkrKzsKICAgICAgICAgIGhhc05vdGhpbmdUb1VwZGF0ZSA9IGZhbHNlOwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgaWYgKGhhc05vdGhpbmdUb1VwZGF0ZSkgewogICAgICBmb3IgKGNvbnN0IGVsZW1lbnRzIG9mIG5ld0Fubm90YXRpb25zQnlQYWdlLnZhbHVlcygpKSB7CiAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGVsZW1lbnRzKSB7CiAgICAgICAgICBkZWxldGUgZWxlbWVudC5wYXJlbnRUcmVlSWQ7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICAgIHJldHVybiB0cnVlOwogIH0KICBzdGF0aWMgYXN5bmMgY3JlYXRlU3RydWN0dXJlVHJlZSh7CiAgICBuZXdBbm5vdGF0aW9uc0J5UGFnZSwKICAgIHhyZWYsCiAgICBjYXRhbG9nUmVmLAogICAgcGRmTWFuYWdlciwKICAgIGNoYW5nZXMKICB9KSB7CiAgICBjb25zdCByb290ID0gYXdhaXQgcGRmTWFuYWdlci5lbnN1cmVDYXRhbG9nKCJjbG9uZURpY3QiKTsKICAgIGNvbnN0IGNhY2hlID0gbmV3IFJlZlNldENhY2hlKCk7CiAgICBjYWNoZS5wdXQoY2F0YWxvZ1JlZiwgcm9vdCk7CiAgICBjb25zdCBzdHJ1Y3RUcmVlUm9vdFJlZiA9IHhyZWYuZ2V0TmV3VGVtcG9yYXJ5UmVmKCk7CiAgICByb290LnNldCgiU3RydWN0VHJlZVJvb3QiLCBzdHJ1Y3RUcmVlUm9vdFJlZik7CiAgICBjb25zdCBzdHJ1Y3RUcmVlUm9vdCA9IG5ldyBEaWN0KHhyZWYpOwogICAgc3RydWN0VHJlZVJvb3Quc2V0KCJUeXBlIiwgTmFtZS5nZXQoIlN0cnVjdFRyZWVSb290IikpOwogICAgY29uc3QgcGFyZW50VHJlZVJlZiA9IHhyZWYuZ2V0TmV3VGVtcG9yYXJ5UmVmKCk7CiAgICBzdHJ1Y3RUcmVlUm9vdC5zZXQoIlBhcmVudFRyZWUiLCBwYXJlbnRUcmVlUmVmKTsKICAgIGNvbnN0IGtpZHMgPSBbXTsKICAgIHN0cnVjdFRyZWVSb290LnNldCgiSyIsIGtpZHMpOwogICAgY2FjaGUucHV0KHN0cnVjdFRyZWVSb290UmVmLCBzdHJ1Y3RUcmVlUm9vdCk7CiAgICBjb25zdCBwYXJlbnRUcmVlID0gbmV3IERpY3QoeHJlZik7CiAgICBjb25zdCBudW1zID0gW107CiAgICBwYXJlbnRUcmVlLnNldCgiTnVtcyIsIG51bXMpOwogICAgY29uc3QgbmV4dEtleSA9IGF3YWl0IHRoaXMuI3dyaXRlS2lkcyh7CiAgICAgIG5ld0Fubm90YXRpb25zQnlQYWdlLAogICAgICBzdHJ1Y3RUcmVlUm9vdFJlZiwKICAgICAgc3RydWN0VHJlZVJvb3Q6IG51bGwsCiAgICAgIGtpZHMsCiAgICAgIG51bXMsCiAgICAgIHhyZWYsCiAgICAgIHBkZk1hbmFnZXIsCiAgICAgIGNoYW5nZXMsCiAgICAgIGNhY2hlCiAgICB9KTsKICAgIHN0cnVjdFRyZWVSb290LnNldCgiUGFyZW50VHJlZU5leHRLZXkiLCBuZXh0S2V5KTsKICAgIGNhY2hlLnB1dChwYXJlbnRUcmVlUmVmLCBwYXJlbnRUcmVlKTsKICAgIGZvciAoY29uc3QgW3JlZiwgb2JqXSBvZiBjYWNoZS5pdGVtcygpKSB7CiAgICAgIGNoYW5nZXMucHV0KHJlZiwgewogICAgICAgIGRhdGE6IG9iagogICAgICB9KTsKICAgIH0KICB9CiAgYXN5bmMgY2FuVXBkYXRlU3RydWN0VHJlZSh7CiAgICBwZGZNYW5hZ2VyLAogICAgbmV3QW5ub3RhdGlvbnNCeVBhZ2UKICB9KSB7CiAgICBpZiAoIXRoaXMucmVmKSB7CiAgICAgIHdhcm4oIkNhbm5vdCB1cGRhdGUgdGhlIHN0cnVjdCB0cmVlOiBubyByb290IHJlZmVyZW5jZS4iKTsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgbGV0IG5leHRLZXkgPSB0aGlzLmRpY3QuZ2V0KCJQYXJlbnRUcmVlTmV4dEtleSIpOwogICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKG5leHRLZXkpIHx8IG5leHRLZXkgPCAwKSB7CiAgICAgIHdhcm4oIkNhbm5vdCB1cGRhdGUgdGhlIHN0cnVjdCB0cmVlOiBpbnZhbGlkIG5leHQga2V5LiIpOwogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgICBjb25zdCBwYXJlbnRUcmVlID0gdGhpcy5kaWN0LmdldCgiUGFyZW50VHJlZSIpOwogICAgaWYgKCEocGFyZW50VHJlZSBpbnN0YW5jZW9mIERpY3QpKSB7CiAgICAgIHdhcm4oIkNhbm5vdCB1cGRhdGUgdGhlIHN0cnVjdCB0cmVlOiBQYXJlbnRUcmVlIGlzbid0IGEgZGljdC4iKTsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgY29uc3QgbnVtcyA9IHBhcmVudFRyZWUuZ2V0KCJOdW1zIik7CiAgICBpZiAoIUFycmF5LmlzQXJyYXkobnVtcykpIHsKICAgICAgd2FybigiQ2Fubm90IHVwZGF0ZSB0aGUgc3RydWN0IHRyZWU6IG51bXMgaXNuJ3QgYW4gYXJyYXkuIik7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICAgIGNvbnN0IG51bWJlclRyZWUgPSBuZXcgTnVtYmVyVHJlZShwYXJlbnRUcmVlLCB0aGlzLnhyZWYpOwogICAgZm9yIChjb25zdCBwYWdlSW5kZXggb2YgbmV3QW5ub3RhdGlvbnNCeVBhZ2Uua2V5cygpKSB7CiAgICAgIGNvbnN0IHsKICAgICAgICBwYWdlRGljdAogICAgICB9ID0gYXdhaXQgcGRmTWFuYWdlci5nZXRQYWdlKHBhZ2VJbmRleCk7CiAgICAgIGlmICghcGFnZURpY3QuaGFzKCJTdHJ1Y3RQYXJlbnRzIikpIHsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBjb25zdCBpZCA9IHBhZ2VEaWN0LmdldCgiU3RydWN0UGFyZW50cyIpOwogICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIoaWQpIHx8ICFBcnJheS5pc0FycmF5KG51bWJlclRyZWUuZ2V0KGlkKSkpIHsKICAgICAgICB3YXJuKGBDYW5ub3Qgc2F2ZSB0aGUgc3RydWN0IHRyZWU6IHBhZ2UgJHtwYWdlSW5kZXh9IGhhcyBhIHdyb25nIGlkLmApOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgfQogICAgbGV0IGhhc05vdGhpbmdUb1VwZGF0ZSA9IHRydWU7CiAgICBmb3IgKGNvbnN0IFtwYWdlSW5kZXgsIGVsZW1lbnRzXSBvZiBuZXdBbm5vdGF0aW9uc0J5UGFnZSkgewogICAgICBjb25zdCB7CiAgICAgICAgcGFnZURpY3QKICAgICAgfSA9IGF3YWl0IHBkZk1hbmFnZXIuZ2V0UGFnZShwYWdlSW5kZXgpOwogICAgICBTdHJ1Y3RUcmVlUm9vdC4jY29sbGVjdFBhcmVudHMoewogICAgICAgIGVsZW1lbnRzLAogICAgICAgIHhyZWY6IHRoaXMueHJlZiwKICAgICAgICBwYWdlRGljdCwKICAgICAgICBudW1iZXJUcmVlCiAgICAgIH0pOwogICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgZWxlbWVudHMpIHsKICAgICAgICBpZiAoZWxlbWVudC5hY2Nlc3NpYmlsaXR5RGF0YT8udHlwZSkgewogICAgICAgICAgaWYgKCEoZWxlbWVudC5hY2Nlc3NpYmlsaXR5RGF0YS5zdHJ1Y3RQYXJlbnQgPj0gMCkpIHsKICAgICAgICAgICAgZWxlbWVudC5wYXJlbnRUcmVlSWQgPSBuZXh0S2V5Kys7CiAgICAgICAgICB9CiAgICAgICAgICBoYXNOb3RoaW5nVG9VcGRhdGUgPSBmYWxzZTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIGlmIChoYXNOb3RoaW5nVG9VcGRhdGUpIHsKICAgICAgZm9yIChjb25zdCBlbGVtZW50cyBvZiBuZXdBbm5vdGF0aW9uc0J5UGFnZS52YWx1ZXMoKSkgewogICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBlbGVtZW50cykgewogICAgICAgICAgZGVsZXRlIGVsZW1lbnQucGFyZW50VHJlZUlkOwogICAgICAgICAgZGVsZXRlIGVsZW1lbnQuc3RydWN0VHJlZVBhcmVudDsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgcmV0dXJuIHRydWU7CiAgfQogIGFzeW5jIHVwZGF0ZVN0cnVjdHVyZVRyZWUoewogICAgbmV3QW5ub3RhdGlvbnNCeVBhZ2UsCiAgICBwZGZNYW5hZ2VyLAogICAgY2hhbmdlcwogIH0pIHsKICAgIGNvbnN0IHsKICAgICAgcmVmOiBzdHJ1Y3RUcmVlUm9vdFJlZiwKICAgICAgeHJlZgogICAgfSA9IHRoaXM7CiAgICBjb25zdCBzdHJ1Y3RUcmVlUm9vdCA9IHRoaXMuZGljdC5jbG9uZSgpOwogICAgY29uc3QgY2FjaGUgPSBuZXcgUmVmU2V0Q2FjaGUoKTsKICAgIGNhY2hlLnB1dChzdHJ1Y3RUcmVlUm9vdFJlZiwgc3RydWN0VHJlZVJvb3QpOwogICAgbGV0IHBhcmVudFRyZWVSZWYgPSBzdHJ1Y3RUcmVlUm9vdC5nZXRSYXcoIlBhcmVudFRyZWUiKTsKICAgIGxldCBwYXJlbnRUcmVlOwogICAgaWYgKHBhcmVudFRyZWVSZWYgaW5zdGFuY2VvZiBSZWYpIHsKICAgICAgcGFyZW50VHJlZSA9IHhyZWYuZmV0Y2gocGFyZW50VHJlZVJlZik7CiAgICB9IGVsc2UgewogICAgICBwYXJlbnRUcmVlID0gcGFyZW50VHJlZVJlZjsKICAgICAgcGFyZW50VHJlZVJlZiA9IHhyZWYuZ2V0TmV3VGVtcG9yYXJ5UmVmKCk7CiAgICAgIHN0cnVjdFRyZWVSb290LnNldCgiUGFyZW50VHJlZSIsIHBhcmVudFRyZWVSZWYpOwogICAgfQogICAgcGFyZW50VHJlZSA9IHBhcmVudFRyZWUuY2xvbmUoKTsKICAgIGNhY2hlLnB1dChwYXJlbnRUcmVlUmVmLCBwYXJlbnRUcmVlKTsKICAgIGxldCBudW1zID0gcGFyZW50VHJlZS5nZXRSYXcoIk51bXMiKTsKICAgIGxldCBudW1zUmVmID0gbnVsbDsKICAgIGlmIChudW1zIGluc3RhbmNlb2YgUmVmKSB7CiAgICAgIG51bXNSZWYgPSBudW1zOwogICAgICBudW1zID0geHJlZi5mZXRjaChudW1zUmVmKTsKICAgIH0KICAgIG51bXMgPSBudW1zLnNsaWNlKCk7CiAgICBpZiAoIW51bXNSZWYpIHsKICAgICAgcGFyZW50VHJlZS5zZXQoIk51bXMiLCBudW1zKTsKICAgIH0KICAgIGNvbnN0IG5ld05leHRLZXkgPSBhd2FpdCBTdHJ1Y3RUcmVlUm9vdC4jd3JpdGVLaWRzKHsKICAgICAgbmV3QW5ub3RhdGlvbnNCeVBhZ2UsCiAgICAgIHN0cnVjdFRyZWVSb290UmVmLAogICAgICBzdHJ1Y3RUcmVlUm9vdDogdGhpcywKICAgICAga2lkczogbnVsbCwKICAgICAgbnVtcywKICAgICAgeHJlZiwKICAgICAgcGRmTWFuYWdlciwKICAgICAgY2hhbmdlcywKICAgICAgY2FjaGUKICAgIH0pOwogICAgaWYgKG5ld05leHRLZXkgPT09IC0xKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIHN0cnVjdFRyZWVSb290LnNldCgiUGFyZW50VHJlZU5leHRLZXkiLCBuZXdOZXh0S2V5KTsKICAgIGlmIChudW1zUmVmKSB7CiAgICAgIGNhY2hlLnB1dChudW1zUmVmLCBudW1zKTsKICAgIH0KICAgIGZvciAoY29uc3QgW3JlZiwgb2JqXSBvZiBjYWNoZS5pdGVtcygpKSB7CiAgICAgIGNoYW5nZXMucHV0KHJlZiwgewogICAgICAgIGRhdGE6IG9iagogICAgICB9KTsKICAgIH0KICB9CiAgc3RhdGljIGFzeW5jICN3cml0ZUtpZHMoewogICAgbmV3QW5ub3RhdGlvbnNCeVBhZ2UsCiAgICBzdHJ1Y3RUcmVlUm9vdFJlZiwKICAgIHN0cnVjdFRyZWVSb290LAogICAga2lkcywKICAgIG51bXMsCiAgICB4cmVmLAogICAgcGRmTWFuYWdlciwKICAgIGNoYW5nZXMsCiAgICBjYWNoZQogIH0pIHsKICAgIGNvbnN0IG9ianIgPSBOYW1lLmdldCgiT0JKUiIpOwogICAgbGV0IG5leHRLZXkgPSAtMTsKICAgIGxldCBzdHJ1Y3RUcmVlUGFnZU9ianM7CiAgICBmb3IgKGNvbnN0IFtwYWdlSW5kZXgsIGVsZW1lbnRzXSBvZiBuZXdBbm5vdGF0aW9uc0J5UGFnZSkgewogICAgICBjb25zdCBwYWdlID0gYXdhaXQgcGRmTWFuYWdlci5nZXRQYWdlKHBhZ2VJbmRleCk7CiAgICAgIGNvbnN0IHsKICAgICAgICByZWY6IHBhZ2VSZWYKICAgICAgfSA9IHBhZ2U7CiAgICAgIGNvbnN0IGlzUGFnZVJlZiA9IHBhZ2VSZWYgaW5zdGFuY2VvZiBSZWY7CiAgICAgIGZvciAoY29uc3QgewogICAgICAgIGFjY2Vzc2liaWxpdHlEYXRhLAogICAgICAgIHJlZiwKICAgICAgICBwYXJlbnRUcmVlSWQsCiAgICAgICAgc3RydWN0VHJlZVBhcmVudAogICAgICB9IG9mIGVsZW1lbnRzKSB7CiAgICAgICAgaWYgKCFhY2Nlc3NpYmlsaXR5RGF0YT8udHlwZSkgewogICAgICAgICAgY29udGludWU7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHsKICAgICAgICAgIHN0cnVjdFBhcmVudAogICAgICAgIH0gPSBhY2Nlc3NpYmlsaXR5RGF0YTsKICAgICAgICBpZiAoc3RydWN0VHJlZVJvb3QgJiYgTnVtYmVyLmlzSW50ZWdlcihzdHJ1Y3RQYXJlbnQpICYmIHN0cnVjdFBhcmVudCA+PSAwKSB7CiAgICAgICAgICBsZXQgb2JqcyA9IChzdHJ1Y3RUcmVlUGFnZU9ianMgfHw9IG5ldyBNYXAoKSkuZ2V0KHBhZ2VJbmRleCk7CiAgICAgICAgICBpZiAob2JqcyA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIGNvbnN0IHN0cnVjdFRyZWVQYWdlID0gbmV3IFN0cnVjdFRyZWVQYWdlKHN0cnVjdFRyZWVSb290LCBwYWdlLnBhZ2VEaWN0KTsKICAgICAgICAgICAgb2JqcyA9IHN0cnVjdFRyZWVQYWdlLmNvbGxlY3RPYmplY3RzKHBhZ2VSZWYpOwogICAgICAgICAgICBzdHJ1Y3RUcmVlUGFnZU9ianMuc2V0KHBhZ2VJbmRleCwgb2Jqcyk7CiAgICAgICAgICB9CiAgICAgICAgICBjb25zdCBvYmpSZWYgPSBvYmpzPy5nZXQoc3RydWN0UGFyZW50KTsKICAgICAgICAgIGlmIChvYmpSZWYpIHsKICAgICAgICAgICAgY29uc3QgdGFnRGljdCA9IHhyZWYuZmV0Y2gob2JqUmVmKS5jbG9uZSgpOwogICAgICAgICAgICBTdHJ1Y3RUcmVlUm9vdC4jd3JpdGVQcm9wZXJ0aWVzKHRhZ0RpY3QsIGFjY2Vzc2liaWxpdHlEYXRhKTsKICAgICAgICAgICAgY2hhbmdlcy5wdXQob2JqUmVmLCB7CiAgICAgICAgICAgICAgZGF0YTogdGFnRGljdAogICAgICAgICAgICB9KTsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIG5leHRLZXkgPSBNYXRoLm1heChuZXh0S2V5LCBwYXJlbnRUcmVlSWQpOwogICAgICAgIGNvbnN0IHRhZ1JlZiA9IHhyZWYuZ2V0TmV3VGVtcG9yYXJ5UmVmKCk7CiAgICAgICAgY29uc3QgdGFnRGljdCA9IG5ldyBEaWN0KHhyZWYpOwogICAgICAgIFN0cnVjdFRyZWVSb290LiN3cml0ZVByb3BlcnRpZXModGFnRGljdCwgYWNjZXNzaWJpbGl0eURhdGEpOwogICAgICAgIGF3YWl0IHRoaXMuI3VwZGF0ZVBhcmVudFRhZyh7CiAgICAgICAgICBzdHJ1Y3RUcmVlUGFyZW50LAogICAgICAgICAgdGFnRGljdCwKICAgICAgICAgIG5ld1RhZ1JlZjogdGFnUmVmLAogICAgICAgICAgc3RydWN0VHJlZVJvb3RSZWYsCiAgICAgICAgICBmYWxsYmFja0tpZHM6IGtpZHMsCiAgICAgICAgICB4cmVmLAogICAgICAgICAgY2FjaGUKICAgICAgICB9KTsKICAgICAgICBjb25zdCBvYmpEaWN0ID0gbmV3IERpY3QoeHJlZik7CiAgICAgICAgdGFnRGljdC5zZXQoIksiLCBvYmpEaWN0KTsKICAgICAgICBvYmpEaWN0LnNldCgiVHlwZSIsIG9ianIpOwogICAgICAgIGlmIChpc1BhZ2VSZWYpIHsKICAgICAgICAgIG9iakRpY3Quc2V0KCJQZyIsIHBhZ2VSZWYpOwogICAgICAgIH0KICAgICAgICBvYmpEaWN0LnNldCgiT2JqIiwgcmVmKTsKICAgICAgICBjYWNoZS5wdXQodGFnUmVmLCB0YWdEaWN0KTsKICAgICAgICBudW1zLnB1c2gocGFyZW50VHJlZUlkLCB0YWdSZWYpOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gbmV4dEtleSArIDE7CiAgfQogIHN0YXRpYyAjd3JpdGVQcm9wZXJ0aWVzKHRhZ0RpY3QsIHsKICAgIHR5cGUsCiAgICB0aXRsZSwKICAgIGxhbmcsCiAgICBhbHQsCiAgICBleHBhbmRlZCwKICAgIGFjdHVhbFRleHQKICB9KSB7CiAgICB0YWdEaWN0LnNldCgiUyIsIE5hbWUuZ2V0KHR5cGUpKTsKICAgIGlmICh0aXRsZSkgewogICAgICB0YWdEaWN0LnNldCgiVCIsIHN0cmluZ1RvQXNjaWlPclVURjE2QkUodGl0bGUpKTsKICAgIH0KICAgIGlmIChsYW5nKSB7CiAgICAgIHRhZ0RpY3Quc2V0KCJMYW5nIiwgc3RyaW5nVG9Bc2NpaU9yVVRGMTZCRShsYW5nKSk7CiAgICB9CiAgICBpZiAoYWx0KSB7CiAgICAgIHRhZ0RpY3Quc2V0KCJBbHQiLCBzdHJpbmdUb0FzY2lpT3JVVEYxNkJFKGFsdCkpOwogICAgfQogICAgaWYgKGV4cGFuZGVkKSB7CiAgICAgIHRhZ0RpY3Quc2V0KCJFIiwgc3RyaW5nVG9Bc2NpaU9yVVRGMTZCRShleHBhbmRlZCkpOwogICAgfQogICAgaWYgKGFjdHVhbFRleHQpIHsKICAgICAgdGFnRGljdC5zZXQoIkFjdHVhbFRleHQiLCBzdHJpbmdUb0FzY2lpT3JVVEYxNkJFKGFjdHVhbFRleHQpKTsKICAgIH0KICB9CiAgc3RhdGljICNjb2xsZWN0UGFyZW50cyh7CiAgICBlbGVtZW50cywKICAgIHhyZWYsCiAgICBwYWdlRGljdCwKICAgIG51bWJlclRyZWUKICB9KSB7CiAgICBjb25zdCBpZFRvRWxlbWVudHMgPSBuZXcgTWFwKCk7CiAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgZWxlbWVudHMpIHsKICAgICAgaWYgKGVsZW1lbnQuc3RydWN0VHJlZVBhcmVudElkKSB7CiAgICAgICAgY29uc3QgaWQgPSBwYXJzZUludChlbGVtZW50LnN0cnVjdFRyZWVQYXJlbnRJZC5zcGxpdCgiX21jIilbMV0sIDEwKTsKICAgICAgICBsZXQgZWxlbXMgPSBpZFRvRWxlbWVudHMuZ2V0KGlkKTsKICAgICAgICBpZiAoIWVsZW1zKSB7CiAgICAgICAgICBlbGVtcyA9IFtdOwogICAgICAgICAgaWRUb0VsZW1lbnRzLnNldChpZCwgZWxlbXMpOwogICAgICAgIH0KICAgICAgICBlbGVtcy5wdXNoKGVsZW1lbnQpOwogICAgICB9CiAgICB9CiAgICBjb25zdCBpZCA9IHBhZ2VEaWN0LmdldCgiU3RydWN0UGFyZW50cyIpOwogICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKGlkKSkgewogICAgICByZXR1cm47CiAgICB9CiAgICBjb25zdCBwYXJlbnRBcnJheSA9IG51bWJlclRyZWUuZ2V0KGlkKTsKICAgIGNvbnN0IHVwZGF0ZUVsZW1lbnQgPSAoa2lkLCBwYWdlS2lkLCBraWRSZWYpID0+IHsKICAgICAgY29uc3QgZWxlbXMgPSBpZFRvRWxlbWVudHMuZ2V0KGtpZCk7CiAgICAgIGlmIChlbGVtcykgewogICAgICAgIGNvbnN0IHBhcmVudFJlZiA9IHBhZ2VLaWQuZ2V0UmF3KCJQIik7CiAgICAgICAgY29uc3QgcGFyZW50RGljdCA9IHhyZWYuZmV0Y2hJZlJlZihwYXJlbnRSZWYpOwogICAgICAgIGlmIChwYXJlbnRSZWYgaW5zdGFuY2VvZiBSZWYgJiYgcGFyZW50RGljdCBpbnN0YW5jZW9mIERpY3QpIHsKICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHsKICAgICAgICAgICAgcmVmOiBraWRSZWYsCiAgICAgICAgICAgIGRpY3Q6IHBhZ2VLaWQKICAgICAgICAgIH07CiAgICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgZWxlbXMpIHsKICAgICAgICAgICAgZWxlbWVudC5zdHJ1Y3RUcmVlUGFyZW50ID0gcGFyYW1zOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgICByZXR1cm4gZmFsc2U7CiAgICB9OwogICAgZm9yIChjb25zdCBraWRSZWYgb2YgcGFyZW50QXJyYXkpIHsKICAgICAgaWYgKCEoa2lkUmVmIGluc3RhbmNlb2YgUmVmKSkgewogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGNvbnN0IHBhZ2VLaWQgPSB4cmVmLmZldGNoKGtpZFJlZik7CiAgICAgIGNvbnN0IGsgPSBwYWdlS2lkLmdldCgiSyIpOwogICAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcihrKSkgewogICAgICAgIHVwZGF0ZUVsZW1lbnQoaywgcGFnZUtpZCwga2lkUmVmKTsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBpZiAoIUFycmF5LmlzQXJyYXkoaykpIHsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBmb3IgKGxldCBraWQgb2YgaykgewogICAgICAgIGtpZCA9IHhyZWYuZmV0Y2hJZlJlZihraWQpOwogICAgICAgIGlmIChOdW1iZXIuaXNJbnRlZ2VyKGtpZCkgJiYgdXBkYXRlRWxlbWVudChraWQsIHBhZ2VLaWQsIGtpZFJlZikpIHsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgICBpZiAoIShraWQgaW5zdGFuY2VvZiBEaWN0KSkgewogICAgICAgICAgY29udGludWU7CiAgICAgICAgfQogICAgICAgIGlmICghaXNOYW1lKGtpZC5nZXQoIlR5cGUiKSwgIk1DUiIpKSB7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgICAgY29uc3QgbWNpZCA9IGtpZC5nZXQoIk1DSUQiKTsKICAgICAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcihtY2lkKSAmJiB1cGRhdGVFbGVtZW50KG1jaWQsIHBhZ2VLaWQsIGtpZFJlZikpIHsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KICBzdGF0aWMgYXN5bmMgI3VwZGF0ZVBhcmVudFRhZyh7CiAgICBzdHJ1Y3RUcmVlUGFyZW50LAogICAgdGFnRGljdCwKICAgIG5ld1RhZ1JlZiwKICAgIHN0cnVjdFRyZWVSb290UmVmLAogICAgZmFsbGJhY2tLaWRzLAogICAgeHJlZiwKICAgIGNhY2hlCiAgfSkgewogICAgbGV0IHJlZiA9IG51bGw7CiAgICBsZXQgcGFyZW50UmVmOwogICAgaWYgKHN0cnVjdFRyZWVQYXJlbnQpIHsKICAgICAgKHsKICAgICAgICByZWYKICAgICAgfSA9IHN0cnVjdFRyZWVQYXJlbnQpOwogICAgICBwYXJlbnRSZWYgPSBzdHJ1Y3RUcmVlUGFyZW50LmRpY3QuZ2V0UmF3KCJQIikgfHwgc3RydWN0VHJlZVJvb3RSZWY7CiAgICB9IGVsc2UgewogICAgICBwYXJlbnRSZWYgPSBzdHJ1Y3RUcmVlUm9vdFJlZjsKICAgIH0KICAgIHRhZ0RpY3Quc2V0KCJQIiwgcGFyZW50UmVmKTsKICAgIGNvbnN0IHBhcmVudERpY3QgPSB4cmVmLmZldGNoSWZSZWYocGFyZW50UmVmKTsKICAgIGlmICghcGFyZW50RGljdCkgewogICAgICBmYWxsYmFja0tpZHMucHVzaChuZXdUYWdSZWYpOwogICAgICByZXR1cm47CiAgICB9CiAgICBsZXQgY2FjaGVkUGFyZW50RGljdCA9IGNhY2hlLmdldChwYXJlbnRSZWYpOwogICAgaWYgKCFjYWNoZWRQYXJlbnREaWN0KSB7CiAgICAgIGNhY2hlZFBhcmVudERpY3QgPSBwYXJlbnREaWN0LmNsb25lKCk7CiAgICAgIGNhY2hlLnB1dChwYXJlbnRSZWYsIGNhY2hlZFBhcmVudERpY3QpOwogICAgfQogICAgY29uc3QgcGFyZW50S2lkc1JhdyA9IGNhY2hlZFBhcmVudERpY3QuZ2V0UmF3KCJLIik7CiAgICBsZXQgY2FjaGVkUGFyZW50S2lkcyA9IHBhcmVudEtpZHNSYXcgaW5zdGFuY2VvZiBSZWYgPyBjYWNoZS5nZXQocGFyZW50S2lkc1JhdykgOiBudWxsOwogICAgaWYgKCFjYWNoZWRQYXJlbnRLaWRzKSB7CiAgICAgIGNhY2hlZFBhcmVudEtpZHMgPSB4cmVmLmZldGNoSWZSZWYocGFyZW50S2lkc1Jhdyk7CiAgICAgIGNhY2hlZFBhcmVudEtpZHMgPSBBcnJheS5pc0FycmF5KGNhY2hlZFBhcmVudEtpZHMpID8gY2FjaGVkUGFyZW50S2lkcy5zbGljZSgpIDogW3BhcmVudEtpZHNSYXddOwogICAgICBjb25zdCBwYXJlbnRLaWRzUmVmID0geHJlZi5nZXROZXdUZW1wb3JhcnlSZWYoKTsKICAgICAgY2FjaGVkUGFyZW50RGljdC5zZXQoIksiLCBwYXJlbnRLaWRzUmVmKTsKICAgICAgY2FjaGUucHV0KHBhcmVudEtpZHNSZWYsIGNhY2hlZFBhcmVudEtpZHMpOwogICAgfQogICAgY29uc3QgaW5kZXggPSBjYWNoZWRQYXJlbnRLaWRzLmluZGV4T2YocmVmKTsKICAgIGNhY2hlZFBhcmVudEtpZHMuc3BsaWNlKGluZGV4ID49IDAgPyBpbmRleCArIDEgOiBjYWNoZWRQYXJlbnRLaWRzLmxlbmd0aCwgMCwgbmV3VGFnUmVmKTsKICB9Cn0KY2xhc3MgU3RydWN0RWxlbWVudE5vZGUgewogIGNvbnN0cnVjdG9yKHRyZWUsIGRpY3QpIHsKICAgIHRoaXMudHJlZSA9IHRyZWU7CiAgICB0aGlzLnhyZWYgPSB0cmVlLnhyZWY7CiAgICB0aGlzLmRpY3QgPSBkaWN0OwogICAgdGhpcy5raWRzID0gW107CiAgICB0aGlzLnBhcnNlS2lkcygpOwogIH0KICBnZXQgcm9sZSgpIHsKICAgIGNvbnN0IG5hbWVPYmogPSB0aGlzLmRpY3QuZ2V0KCJTIik7CiAgICBjb25zdCBuYW1lID0gbmFtZU9iaiBpbnN0YW5jZW9mIE5hbWUgPyBuYW1lT2JqLm5hbWUgOiAiIjsKICAgIGNvbnN0IHsKICAgICAgcm9vdAogICAgfSA9IHRoaXMudHJlZTsKICAgIHJldHVybiByb290LnJvbGVNYXAuZ2V0KG5hbWUpID8/IG5hbWU7CiAgfQogIHBhcnNlS2lkcygpIHsKICAgIGxldCBwYWdlT2JqSWQgPSBudWxsOwogICAgY29uc3Qgb2JqUmVmID0gdGhpcy5kaWN0LmdldFJhdygiUGciKTsKICAgIGlmIChvYmpSZWYgaW5zdGFuY2VvZiBSZWYpIHsKICAgICAgcGFnZU9iaklkID0gb2JqUmVmLnRvU3RyaW5nKCk7CiAgICB9CiAgICBjb25zdCBraWRzID0gdGhpcy5kaWN0LmdldCgiSyIpOwogICAgaWYgKEFycmF5LmlzQXJyYXkoa2lkcykpIHsKICAgICAgZm9yIChjb25zdCBraWQgb2Yga2lkcykgewogICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLnBhcnNlS2lkKHBhZ2VPYmpJZCwgdGhpcy54cmVmLmZldGNoSWZSZWYoa2lkKSk7CiAgICAgICAgaWYgKGVsZW1lbnQpIHsKICAgICAgICAgIHRoaXMua2lkcy5wdXNoKGVsZW1lbnQpOwogICAgICAgIH0KICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMucGFyc2VLaWQocGFnZU9iaklkLCBraWRzKTsKICAgICAgaWYgKGVsZW1lbnQpIHsKICAgICAgICB0aGlzLmtpZHMucHVzaChlbGVtZW50KTsKICAgICAgfQogICAgfQogIH0KICBwYXJzZUtpZChwYWdlT2JqSWQsIGtpZCkgewogICAgaWYgKE51bWJlci5pc0ludGVnZXIoa2lkKSkgewogICAgICBpZiAodGhpcy50cmVlLnBhZ2VEaWN0Lm9iaklkICE9PSBwYWdlT2JqSWQpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgICByZXR1cm4gbmV3IFN0cnVjdEVsZW1lbnQoewogICAgICAgIHR5cGU6IFN0cnVjdEVsZW1lbnRUeXBlLlBBR0VfQ09OVEVOVCwKICAgICAgICBtY2lkOiBraWQsCiAgICAgICAgcGFnZU9iaklkCiAgICAgIH0pOwogICAgfQogICAgaWYgKCEoa2lkIGluc3RhbmNlb2YgRGljdCkpIHsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICBjb25zdCBwYWdlUmVmID0ga2lkLmdldFJhdygiUGciKTsKICAgIGlmIChwYWdlUmVmIGluc3RhbmNlb2YgUmVmKSB7CiAgICAgIHBhZ2VPYmpJZCA9IHBhZ2VSZWYudG9TdHJpbmcoKTsKICAgIH0KICAgIGNvbnN0IHR5cGUgPSBraWQuZ2V0KCJUeXBlIikgaW5zdGFuY2VvZiBOYW1lID8ga2lkLmdldCgiVHlwZSIpLm5hbWUgOiBudWxsOwogICAgaWYgKHR5cGUgPT09ICJNQ1IiKSB7CiAgICAgIGlmICh0aGlzLnRyZWUucGFnZURpY3Qub2JqSWQgIT09IHBhZ2VPYmpJZCkgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CiAgICAgIGNvbnN0IGtpZFJlZiA9IGtpZC5nZXRSYXcoIlN0bSIpOwogICAgICByZXR1cm4gbmV3IFN0cnVjdEVsZW1lbnQoewogICAgICAgIHR5cGU6IFN0cnVjdEVsZW1lbnRUeXBlLlNUUkVBTV9DT05URU5ULAogICAgICAgIHJlZk9iaklkOiBraWRSZWYgaW5zdGFuY2VvZiBSZWYgPyBraWRSZWYudG9TdHJpbmcoKSA6IG51bGwsCiAgICAgICAgcGFnZU9iaklkLAogICAgICAgIG1jaWQ6IGtpZC5nZXQoIk1DSUQiKQogICAgICB9KTsKICAgIH0KICAgIGlmICh0eXBlID09PSAiT0JKUiIpIHsKICAgICAgaWYgKHRoaXMudHJlZS5wYWdlRGljdC5vYmpJZCAhPT0gcGFnZU9iaklkKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgICAgY29uc3Qga2lkUmVmID0ga2lkLmdldFJhdygiT2JqIik7CiAgICAgIHJldHVybiBuZXcgU3RydWN0RWxlbWVudCh7CiAgICAgICAgdHlwZTogU3RydWN0RWxlbWVudFR5cGUuT0JKRUNULAogICAgICAgIHJlZk9iaklkOiBraWRSZWYgaW5zdGFuY2VvZiBSZWYgPyBraWRSZWYudG9TdHJpbmcoKSA6IG51bGwsCiAgICAgICAgcGFnZU9iaklkCiAgICAgIH0pOwogICAgfQogICAgcmV0dXJuIG5ldyBTdHJ1Y3RFbGVtZW50KHsKICAgICAgdHlwZTogU3RydWN0RWxlbWVudFR5cGUuRUxFTUVOVCwKICAgICAgZGljdDoga2lkCiAgICB9KTsKICB9Cn0KY2xhc3MgU3RydWN0RWxlbWVudCB7CiAgY29uc3RydWN0b3IoewogICAgdHlwZSwKICAgIGRpY3QgPSBudWxsLAogICAgbWNpZCA9IG51bGwsCiAgICBwYWdlT2JqSWQgPSBudWxsLAogICAgcmVmT2JqSWQgPSBudWxsCiAgfSkgewogICAgdGhpcy50eXBlID0gdHlwZTsKICAgIHRoaXMuZGljdCA9IGRpY3Q7CiAgICB0aGlzLm1jaWQgPSBtY2lkOwogICAgdGhpcy5wYWdlT2JqSWQgPSBwYWdlT2JqSWQ7CiAgICB0aGlzLnJlZk9iaklkID0gcmVmT2JqSWQ7CiAgICB0aGlzLnBhcmVudE5vZGUgPSBudWxsOwogIH0KfQpjbGFzcyBTdHJ1Y3RUcmVlUGFnZSB7CiAgY29uc3RydWN0b3Ioc3RydWN0VHJlZVJvb3QsIHBhZ2VEaWN0KSB7CiAgICB0aGlzLnJvb3QgPSBzdHJ1Y3RUcmVlUm9vdDsKICAgIHRoaXMueHJlZiA9IHN0cnVjdFRyZWVSb290Py54cmVmID8/IG51bGw7CiAgICB0aGlzLnJvb3REaWN0ID0gc3RydWN0VHJlZVJvb3Q/LmRpY3QgPz8gbnVsbDsKICAgIHRoaXMucGFnZURpY3QgPSBwYWdlRGljdDsKICAgIHRoaXMubm9kZXMgPSBbXTsKICB9CiAgY29sbGVjdE9iamVjdHMocGFnZVJlZikgewogICAgaWYgKCF0aGlzLnJvb3QgfHwgIXRoaXMucm9vdERpY3QgfHwgIShwYWdlUmVmIGluc3RhbmNlb2YgUmVmKSkgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIGNvbnN0IHBhcmVudFRyZWUgPSB0aGlzLnJvb3REaWN0LmdldCgiUGFyZW50VHJlZSIpOwogICAgaWYgKCFwYXJlbnRUcmVlKSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgY29uc3QgaWRzID0gdGhpcy5yb290LnN0cnVjdFBhcmVudElkcz8uZ2V0KHBhZ2VSZWYpOwogICAgaWYgKCFpZHMpIHsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICBjb25zdCBtYXAgPSBuZXcgTWFwKCk7CiAgICBjb25zdCBudW1iZXJUcmVlID0gbmV3IE51bWJlclRyZWUocGFyZW50VHJlZSwgdGhpcy54cmVmKTsKICAgIGZvciAoY29uc3QgW2VsZW1JZF0gb2YgaWRzKSB7CiAgICAgIGNvbnN0IG9iaiA9IG51bWJlclRyZWUuZ2V0UmF3KGVsZW1JZCk7CiAgICAgIGlmIChvYmogaW5zdGFuY2VvZiBSZWYpIHsKICAgICAgICBtYXAuc2V0KGVsZW1JZCwgb2JqKTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIG1hcDsKICB9CiAgcGFyc2UocGFnZVJlZikgewogICAgaWYgKCF0aGlzLnJvb3QgfHwgIXRoaXMucm9vdERpY3QgfHwgIShwYWdlUmVmIGluc3RhbmNlb2YgUmVmKSkgewogICAgICByZXR1cm47CiAgICB9CiAgICBjb25zdCBwYXJlbnRUcmVlID0gdGhpcy5yb290RGljdC5nZXQoIlBhcmVudFRyZWUiKTsKICAgIGlmICghcGFyZW50VHJlZSkgewogICAgICByZXR1cm47CiAgICB9CiAgICBjb25zdCBpZCA9IHRoaXMucGFnZURpY3QuZ2V0KCJTdHJ1Y3RQYXJlbnRzIik7CiAgICBjb25zdCBpZHMgPSB0aGlzLnJvb3Quc3RydWN0UGFyZW50SWRzPy5nZXQocGFnZVJlZik7CiAgICBpZiAoIU51bWJlci5pc0ludGVnZXIoaWQpICYmICFpZHMpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgY29uc3QgbWFwID0gbmV3IE1hcCgpOwogICAgY29uc3QgbnVtYmVyVHJlZSA9IG5ldyBOdW1iZXJUcmVlKHBhcmVudFRyZWUsIHRoaXMueHJlZik7CiAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcihpZCkpIHsKICAgICAgY29uc3QgcGFyZW50QXJyYXkgPSBudW1iZXJUcmVlLmdldChpZCk7CiAgICAgIGlmIChBcnJheS5pc0FycmF5KHBhcmVudEFycmF5KSkgewogICAgICAgIGZvciAoY29uc3QgcmVmIG9mIHBhcmVudEFycmF5KSB7CiAgICAgICAgICBpZiAocmVmIGluc3RhbmNlb2YgUmVmKSB7CiAgICAgICAgICAgIHRoaXMuYWRkTm9kZSh0aGlzLnhyZWYuZmV0Y2gocmVmKSwgbWFwKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIGlmICghaWRzKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGZvciAoY29uc3QgW2VsZW1JZCwgdHlwZV0gb2YgaWRzKSB7CiAgICAgIGNvbnN0IG9iaiA9IG51bWJlclRyZWUuZ2V0KGVsZW1JZCk7CiAgICAgIGlmIChvYmopIHsKICAgICAgICBjb25zdCBlbGVtID0gdGhpcy5hZGROb2RlKHRoaXMueHJlZi5mZXRjaElmUmVmKG9iaiksIG1hcCk7CiAgICAgICAgaWYgKGVsZW0/LmtpZHM/Lmxlbmd0aCA9PT0gMSAmJiBlbGVtLmtpZHNbMF0udHlwZSA9PT0gU3RydWN0RWxlbWVudFR5cGUuT0JKRUNUKSB7CiAgICAgICAgICBlbGVtLmtpZHNbMF0udHlwZSA9IHR5cGU7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQogIGFkZE5vZGUoZGljdCwgbWFwLCBsZXZlbCA9IDApIHsKICAgIGlmIChsZXZlbCA+IE1BWF9ERVBUSCkgewogICAgICB3YXJuKCJTdHJ1Y3RUcmVlIE1BWF9ERVBUSCByZWFjaGVkLiIpOwogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIGlmICghKGRpY3QgaW5zdGFuY2VvZiBEaWN0KSkgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIGlmIChtYXAuaGFzKGRpY3QpKSB7CiAgICAgIHJldHVybiBtYXAuZ2V0KGRpY3QpOwogICAgfQogICAgY29uc3QgZWxlbWVudCA9IG5ldyBTdHJ1Y3RFbGVtZW50Tm9kZSh0aGlzLCBkaWN0KTsKICAgIG1hcC5zZXQoZGljdCwgZWxlbWVudCk7CiAgICBjb25zdCBwYXJlbnQgPSBkaWN0LmdldCgiUCIpOwogICAgaWYgKCEocGFyZW50IGluc3RhbmNlb2YgRGljdCkgfHwgaXNOYW1lKHBhcmVudC5nZXQoIlR5cGUiKSwgIlN0cnVjdFRyZWVSb290IikpIHsKICAgICAgaWYgKCF0aGlzLmFkZFRvcExldmVsTm9kZShkaWN0LCBlbGVtZW50KSkgewogICAgICAgIG1hcC5kZWxldGUoZGljdCk7CiAgICAgIH0KICAgICAgcmV0dXJuIGVsZW1lbnQ7CiAgICB9CiAgICBjb25zdCBwYXJlbnROb2RlID0gdGhpcy5hZGROb2RlKHBhcmVudCwgbWFwLCBsZXZlbCArIDEpOwogICAgaWYgKCFwYXJlbnROb2RlKSB7CiAgICAgIHJldHVybiBlbGVtZW50OwogICAgfQogICAgbGV0IHNhdmUgPSBmYWxzZTsKICAgIGZvciAoY29uc3Qga2lkIG9mIHBhcmVudE5vZGUua2lkcykgewogICAgICBpZiAoa2lkLnR5cGUgPT09IFN0cnVjdEVsZW1lbnRUeXBlLkVMRU1FTlQgJiYga2lkLmRpY3QgPT09IGRpY3QpIHsKICAgICAgICBraWQucGFyZW50Tm9kZSA9IGVsZW1lbnQ7CiAgICAgICAgc2F2ZSA9IHRydWU7CiAgICAgIH0KICAgIH0KICAgIGlmICghc2F2ZSkgewogICAgICBtYXAuZGVsZXRlKGRpY3QpOwogICAgfQogICAgcmV0dXJuIGVsZW1lbnQ7CiAgfQogIGFkZFRvcExldmVsTm9kZShkaWN0LCBlbGVtZW50KSB7CiAgICBjb25zdCBvYmogPSB0aGlzLnJvb3REaWN0LmdldCgiSyIpOwogICAgaWYgKCFvYmopIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgaWYgKG9iaiBpbnN0YW5jZW9mIERpY3QpIHsKICAgICAgaWYgKG9iai5vYmpJZCAhPT0gZGljdC5vYmpJZCkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgICB0aGlzLm5vZGVzWzBdID0gZWxlbWVudDsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICBpZiAoIUFycmF5LmlzQXJyYXkob2JqKSkgewogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIGxldCBzYXZlID0gZmFsc2U7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkrKykgewogICAgICBjb25zdCBraWRSZWYgPSBvYmpbaV07CiAgICAgIGlmIChraWRSZWY/LnRvU3RyaW5nKCkgPT09IGRpY3Qub2JqSWQpIHsKICAgICAgICB0aGlzLm5vZGVzW2ldID0gZWxlbWVudDsKICAgICAgICBzYXZlID0gdHJ1ZTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIHNhdmU7CiAgfQogIGdldCBzZXJpYWxpemFibGUoKSB7CiAgICBmdW5jdGlvbiBub2RlVG9TZXJpYWxpemFibGUobm9kZSwgcGFyZW50LCBsZXZlbCA9IDApIHsKICAgICAgaWYgKGxldmVsID4gTUFYX0RFUFRIKSB7CiAgICAgICAgd2FybigiU3RydWN0VHJlZSB0b28gZGVlcCB0byBiZSBmdWxseSBzZXJpYWxpemVkLiIpOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBjb25zdCBvYmogPSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgICBvYmoucm9sZSA9IG5vZGUucm9sZTsKICAgICAgb2JqLmNoaWxkcmVuID0gW107CiAgICAgIHBhcmVudC5jaGlsZHJlbi5wdXNoKG9iaik7CiAgICAgIGxldCBhbHQgPSBub2RlLmRpY3QuZ2V0KCJBbHQiKTsKICAgICAgaWYgKHR5cGVvZiBhbHQgIT09ICJzdHJpbmciKSB7CiAgICAgICAgYWx0ID0gbm9kZS5kaWN0LmdldCgiQWN0dWFsVGV4dCIpOwogICAgICB9CiAgICAgIGlmICh0eXBlb2YgYWx0ID09PSAic3RyaW5nIikgewogICAgICAgIG9iai5hbHQgPSBzdHJpbmdUb1BERlN0cmluZyhhbHQpOwogICAgICB9CiAgICAgIGNvbnN0IGEgPSBub2RlLmRpY3QuZ2V0KCJBIik7CiAgICAgIGlmIChhIGluc3RhbmNlb2YgRGljdCkgewogICAgICAgIGNvbnN0IGJib3ggPSBsb29rdXBOb3JtYWxSZWN0KGEuZ2V0QXJyYXkoIkJCb3giKSwgbnVsbCk7CiAgICAgICAgaWYgKGJib3gpIHsKICAgICAgICAgIG9iai5iYm94ID0gYmJveDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY29uc3Qgd2lkdGggPSBhLmdldCgiV2lkdGgiKTsKICAgICAgICAgIGNvbnN0IGhlaWdodCA9IGEuZ2V0KCJIZWlnaHQiKTsKICAgICAgICAgIGlmICh0eXBlb2Ygd2lkdGggPT09ICJudW1iZXIiICYmIHdpZHRoID4gMCAmJiB0eXBlb2YgaGVpZ2h0ID09PSAibnVtYmVyIiAmJiBoZWlnaHQgPiAwKSB7CiAgICAgICAgICAgIG9iai5iYm94ID0gWzAsIDAsIHdpZHRoLCBoZWlnaHRdOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICBjb25zdCBsYW5nID0gbm9kZS5kaWN0LmdldCgiTGFuZyIpOwogICAgICBpZiAodHlwZW9mIGxhbmcgPT09ICJzdHJpbmciKSB7CiAgICAgICAgb2JqLmxhbmcgPSBzdHJpbmdUb1BERlN0cmluZyhsYW5nKTsKICAgICAgfQogICAgICBmb3IgKGNvbnN0IGtpZCBvZiBub2RlLmtpZHMpIHsKICAgICAgICBjb25zdCBraWRFbGVtZW50ID0ga2lkLnR5cGUgPT09IFN0cnVjdEVsZW1lbnRUeXBlLkVMRU1FTlQgPyBraWQucGFyZW50Tm9kZSA6IG51bGw7CiAgICAgICAgaWYgKGtpZEVsZW1lbnQpIHsKICAgICAgICAgIG5vZGVUb1NlcmlhbGl6YWJsZShraWRFbGVtZW50LCBvYmosIGxldmVsICsgMSk7CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9IGVsc2UgaWYgKGtpZC50eXBlID09PSBTdHJ1Y3RFbGVtZW50VHlwZS5QQUdFX0NPTlRFTlQgfHwga2lkLnR5cGUgPT09IFN0cnVjdEVsZW1lbnRUeXBlLlNUUkVBTV9DT05URU5UKSB7CiAgICAgICAgICBvYmouY2hpbGRyZW4ucHVzaCh7CiAgICAgICAgICAgIHR5cGU6ICJjb250ZW50IiwKICAgICAgICAgICAgaWQ6IGBwJHtraWQucGFnZU9iaklkfV9tYyR7a2lkLm1jaWR9YAogICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIGlmIChraWQudHlwZSA9PT0gU3RydWN0RWxlbWVudFR5cGUuT0JKRUNUKSB7CiAgICAgICAgICBvYmouY2hpbGRyZW4ucHVzaCh7CiAgICAgICAgICAgIHR5cGU6ICJvYmplY3QiLAogICAgICAgICAgICBpZDoga2lkLnJlZk9iaklkCiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgaWYgKGtpZC50eXBlID09PSBTdHJ1Y3RFbGVtZW50VHlwZS5BTk5PVEFUSU9OKSB7CiAgICAgICAgICBvYmouY2hpbGRyZW4ucHVzaCh7CiAgICAgICAgICAgIHR5cGU6ICJhbm5vdGF0aW9uIiwKICAgICAgICAgICAgaWQ6IGAke0Fubm90YXRpb25QcmVmaXh9JHtraWQucmVmT2JqSWR9YAogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBjb25zdCByb290ID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgIHJvb3QuY2hpbGRyZW4gPSBbXTsKICAgIHJvb3Qucm9sZSA9ICJSb290IjsKICAgIGZvciAoY29uc3QgY2hpbGQgb2YgdGhpcy5ub2RlcykgewogICAgICBpZiAoIWNoaWxkKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgbm9kZVRvU2VyaWFsaXphYmxlKGNoaWxkLCByb290KTsKICAgIH0KICAgIHJldHVybiByb290OwogIH0KfQoKOy8vIC4vc3JjL2NvcmUvY2F0YWxvZy5qcwoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCmNvbnN0IGlzUmVmID0gdiA9PiB2IGluc3RhbmNlb2YgUmVmOwpjb25zdCBpc1ZhbGlkRXhwbGljaXREZXN0ID0gX2lzVmFsaWRFeHBsaWNpdERlc3QuYmluZChudWxsLCBpc1JlZiwgaXNOYW1lKTsKZnVuY3Rpb24gZmV0Y2hEZXN0KGRlc3QpIHsKICBpZiAoZGVzdCBpbnN0YW5jZW9mIERpY3QpIHsKICAgIGRlc3QgPSBkZXN0LmdldCgiRCIpOwogIH0KICByZXR1cm4gaXNWYWxpZEV4cGxpY2l0RGVzdChkZXN0KSA/IGRlc3QgOiBudWxsOwp9CmZ1bmN0aW9uIGZldGNoUmVtb3RlRGVzdChhY3Rpb24pIHsKICBsZXQgZGVzdCA9IGFjdGlvbi5nZXQoIkQiKTsKICBpZiAoZGVzdCkgewogICAgaWYgKGRlc3QgaW5zdGFuY2VvZiBOYW1lKSB7CiAgICAgIGRlc3QgPSBkZXN0Lm5hbWU7CiAgICB9CiAgICBpZiAodHlwZW9mIGRlc3QgPT09ICJzdHJpbmciKSB7CiAgICAgIHJldHVybiBzdHJpbmdUb1BERlN0cmluZyhkZXN0LCB0cnVlKTsKICAgIH0gZWxzZSBpZiAoaXNWYWxpZEV4cGxpY2l0RGVzdChkZXN0KSkgewogICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGVzdCk7CiAgICB9CiAgfQogIHJldHVybiBudWxsOwp9CmNsYXNzIENhdGFsb2cgewogICNhY3R1YWxOdW1QYWdlcyA9IG51bGw7CiAgI2NhdERpY3QgPSBudWxsOwogIGJ1aWx0SW5DTWFwQ2FjaGUgPSBuZXcgTWFwKCk7CiAgZm9udENhY2hlID0gbmV3IFJlZlNldENhY2hlKCk7CiAgZ2xvYmFsQ29sb3JTcGFjZUNhY2hlID0gbmV3IEdsb2JhbENvbG9yU3BhY2VDYWNoZSgpOwogIGdsb2JhbEltYWdlQ2FjaGUgPSBuZXcgR2xvYmFsSW1hZ2VDYWNoZSgpOwogIG5vbkJsZW5kTW9kZXNTZXQgPSBuZXcgUmVmU2V0KCk7CiAgcGFnZURpY3RDYWNoZSA9IG5ldyBSZWZTZXRDYWNoZSgpOwogIHBhZ2VJbmRleENhY2hlID0gbmV3IFJlZlNldENhY2hlKCk7CiAgcGFnZUtpZHNDb3VudENhY2hlID0gbmV3IFJlZlNldENhY2hlKCk7CiAgc3RhbmRhcmRGb250RGF0YUNhY2hlID0gbmV3IE1hcCgpOwogIHN5c3RlbUZvbnRDYWNoZSA9IG5ldyBNYXAoKTsKICBjb25zdHJ1Y3RvcihwZGZNYW5hZ2VyLCB4cmVmKSB7CiAgICB0aGlzLnBkZk1hbmFnZXIgPSBwZGZNYW5hZ2VyOwogICAgdGhpcy54cmVmID0geHJlZjsKICAgIHRoaXMuI2NhdERpY3QgPSB4cmVmLmdldENhdGFsb2dPYmooKTsKICAgIGlmICghKHRoaXMuI2NhdERpY3QgaW5zdGFuY2VvZiBEaWN0KSkgewogICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoIkNhdGFsb2cgb2JqZWN0IGlzIG5vdCBhIGRpY3Rpb25hcnkuIik7CiAgICB9CiAgICB0aGlzLnRvcGxldmVsUGFnZXNEaWN0OwogIH0KICBjbG9uZURpY3QoKSB7CiAgICByZXR1cm4gdGhpcy4jY2F0RGljdC5jbG9uZSgpOwogIH0KICBnZXQgdmVyc2lvbigpIHsKICAgIGNvbnN0IHZlcnNpb24gPSB0aGlzLiNjYXREaWN0LmdldCgiVmVyc2lvbiIpOwogICAgaWYgKHZlcnNpb24gaW5zdGFuY2VvZiBOYW1lKSB7CiAgICAgIGlmIChQREZfVkVSU0lPTl9SRUdFWFAudGVzdCh2ZXJzaW9uLm5hbWUpKSB7CiAgICAgICAgcmV0dXJuIHNoYWRvdyh0aGlzLCAidmVyc2lvbiIsIHZlcnNpb24ubmFtZSk7CiAgICAgIH0KICAgICAgd2FybihgSW52YWxpZCBQREYgY2F0YWxvZyB2ZXJzaW9uOiAke3ZlcnNpb24ubmFtZX1gKTsKICAgIH0KICAgIHJldHVybiBzaGFkb3codGhpcywgInZlcnNpb24iLCBudWxsKTsKICB9CiAgZ2V0IGxhbmcoKSB7CiAgICBjb25zdCBsYW5nID0gdGhpcy4jY2F0RGljdC5nZXQoIkxhbmciKTsKICAgIHJldHVybiBzaGFkb3codGhpcywgImxhbmciLCBsYW5nICYmIHR5cGVvZiBsYW5nID09PSAic3RyaW5nIiA/IHN0cmluZ1RvUERGU3RyaW5nKGxhbmcpIDogbnVsbCk7CiAgfQogIGdldCBuZWVkc1JlbmRlcmluZygpIHsKICAgIGNvbnN0IG5lZWRzUmVuZGVyaW5nID0gdGhpcy4jY2F0RGljdC5nZXQoIk5lZWRzUmVuZGVyaW5nIik7CiAgICByZXR1cm4gc2hhZG93KHRoaXMsICJuZWVkc1JlbmRlcmluZyIsIHR5cGVvZiBuZWVkc1JlbmRlcmluZyA9PT0gImJvb2xlYW4iID8gbmVlZHNSZW5kZXJpbmcgOiBmYWxzZSk7CiAgfQogIGdldCBjb2xsZWN0aW9uKCkgewogICAgbGV0IGNvbGxlY3Rpb24gPSBudWxsOwogICAgdHJ5IHsKICAgICAgY29uc3Qgb2JqID0gdGhpcy4jY2F0RGljdC5nZXQoIkNvbGxlY3Rpb24iKTsKICAgICAgaWYgKG9iaiBpbnN0YW5jZW9mIERpY3QgJiYgb2JqLnNpemUgPiAwKSB7CiAgICAgICAgY29sbGVjdGlvbiA9IG9iajsKICAgICAgfQogICAgfSBjYXRjaCAoZXgpIHsKICAgICAgaWYgKGV4IGluc3RhbmNlb2YgTWlzc2luZ0RhdGFFeGNlcHRpb24pIHsKICAgICAgICB0aHJvdyBleDsKICAgICAgfQogICAgICBpbmZvKCJDYW5ub3QgZmV0Y2ggQ29sbGVjdGlvbiBlbnRyeTsgYXNzdW1pbmcgbm8gY29sbGVjdGlvbiBpcyBwcmVzZW50LiIpOwogICAgfQogICAgcmV0dXJuIHNoYWRvdyh0aGlzLCAiY29sbGVjdGlvbiIsIGNvbGxlY3Rpb24pOwogIH0KICBnZXQgYWNyb0Zvcm0oKSB7CiAgICBsZXQgYWNyb0Zvcm0gPSBudWxsOwogICAgdHJ5IHsKICAgICAgY29uc3Qgb2JqID0gdGhpcy4jY2F0RGljdC5nZXQoIkFjcm9Gb3JtIik7CiAgICAgIGlmIChvYmogaW5zdGFuY2VvZiBEaWN0ICYmIG9iai5zaXplID4gMCkgewogICAgICAgIGFjcm9Gb3JtID0gb2JqOwogICAgICB9CiAgICB9IGNhdGNoIChleCkgewogICAgICBpZiAoZXggaW5zdGFuY2VvZiBNaXNzaW5nRGF0YUV4Y2VwdGlvbikgewogICAgICAgIHRocm93IGV4OwogICAgICB9CiAgICAgIGluZm8oIkNhbm5vdCBmZXRjaCBBY3JvRm9ybSBlbnRyeTsgYXNzdW1pbmcgbm8gZm9ybXMgYXJlIHByZXNlbnQuIik7CiAgICB9CiAgICByZXR1cm4gc2hhZG93KHRoaXMsICJhY3JvRm9ybSIsIGFjcm9Gb3JtKTsKICB9CiAgZ2V0IGFjcm9Gb3JtUmVmKCkgewogICAgY29uc3QgdmFsdWUgPSB0aGlzLiNjYXREaWN0LmdldFJhdygiQWNyb0Zvcm0iKTsKICAgIHJldHVybiBzaGFkb3codGhpcywgImFjcm9Gb3JtUmVmIiwgdmFsdWUgaW5zdGFuY2VvZiBSZWYgPyB2YWx1ZSA6IG51bGwpOwogIH0KICBnZXQgbWV0YWRhdGEoKSB7CiAgICBjb25zdCBzdHJlYW1SZWYgPSB0aGlzLiNjYXREaWN0LmdldFJhdygiTWV0YWRhdGEiKTsKICAgIGlmICghKHN0cmVhbVJlZiBpbnN0YW5jZW9mIFJlZikpIHsKICAgICAgcmV0dXJuIHNoYWRvdyh0aGlzLCAibWV0YWRhdGEiLCBudWxsKTsKICAgIH0KICAgIGxldCBtZXRhZGF0YSA9IG51bGw7CiAgICB0cnkgewogICAgICBjb25zdCBzdHJlYW0gPSB0aGlzLnhyZWYuZmV0Y2goc3RyZWFtUmVmLCAhdGhpcy54cmVmLmVuY3J5cHQ/LmVuY3J5cHRNZXRhZGF0YSk7CiAgICAgIGlmIChzdHJlYW0gaW5zdGFuY2VvZiBCYXNlU3RyZWFtICYmIHN0cmVhbS5kaWN0IGluc3RhbmNlb2YgRGljdCkgewogICAgICAgIGNvbnN0IHR5cGUgPSBzdHJlYW0uZGljdC5nZXQoIlR5cGUiKTsKICAgICAgICBjb25zdCBzdWJ0eXBlID0gc3RyZWFtLmRpY3QuZ2V0KCJTdWJ0eXBlIik7CiAgICAgICAgaWYgKGlzTmFtZSh0eXBlLCAiTWV0YWRhdGEiKSAmJiBpc05hbWUoc3VidHlwZSwgIlhNTCIpKSB7CiAgICAgICAgICBjb25zdCBkYXRhID0gc3RyaW5nVG9VVEY4U3RyaW5nKHN0cmVhbS5nZXRTdHJpbmcoKSk7CiAgICAgICAgICBpZiAoZGF0YSkgewogICAgICAgICAgICBtZXRhZGF0YSA9IG5ldyBNZXRhZGF0YVBhcnNlcihkYXRhKS5zZXJpYWxpemFibGU7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9IGNhdGNoIChleCkgewogICAgICBpZiAoZXggaW5zdGFuY2VvZiBNaXNzaW5nRGF0YUV4Y2VwdGlvbikgewogICAgICAgIHRocm93IGV4OwogICAgICB9CiAgICAgIGluZm8oYFNraXBwaW5nIGludmFsaWQgTWV0YWRhdGE6ICIke2V4fSIuYCk7CiAgICB9CiAgICByZXR1cm4gc2hhZG93KHRoaXMsICJtZXRhZGF0YSIsIG1ldGFkYXRhKTsKICB9CiAgZ2V0IG1hcmtJbmZvKCkgewogICAgbGV0IG1hcmtJbmZvID0gbnVsbDsKICAgIHRyeSB7CiAgICAgIG1hcmtJbmZvID0gdGhpcy4jcmVhZE1hcmtJbmZvKCk7CiAgICB9IGNhdGNoIChleCkgewogICAgICBpZiAoZXggaW5zdGFuY2VvZiBNaXNzaW5nRGF0YUV4Y2VwdGlvbikgewogICAgICAgIHRocm93IGV4OwogICAgICB9CiAgICAgIHdhcm4oIlVuYWJsZSB0byByZWFkIG1hcmsgaW5mby4iKTsKICAgIH0KICAgIHJldHVybiBzaGFkb3codGhpcywgIm1hcmtJbmZvIiwgbWFya0luZm8pOwogIH0KICAjcmVhZE1hcmtJbmZvKCkgewogICAgY29uc3Qgb2JqID0gdGhpcy4jY2F0RGljdC5nZXQoIk1hcmtJbmZvIik7CiAgICBpZiAoIShvYmogaW5zdGFuY2VvZiBEaWN0KSkgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIGNvbnN0IG1hcmtJbmZvID0gewogICAgICBNYXJrZWQ6IGZhbHNlLAogICAgICBVc2VyUHJvcGVydGllczogZmFsc2UsCiAgICAgIFN1c3BlY3RzOiBmYWxzZQogICAgfTsKICAgIGZvciAoY29uc3Qga2V5IGluIG1hcmtJbmZvKSB7CiAgICAgIGNvbnN0IHZhbHVlID0gb2JqLmdldChrZXkpOwogICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAiYm9vbGVhbiIpIHsKICAgICAgICBtYXJrSW5mb1trZXldID0gdmFsdWU7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBtYXJrSW5mbzsKICB9CiAgZ2V0IHN0cnVjdFRyZWVSb290KCkgewogICAgbGV0IHN0cnVjdFRyZWUgPSBudWxsOwogICAgdHJ5IHsKICAgICAgc3RydWN0VHJlZSA9IHRoaXMuI3JlYWRTdHJ1Y3RUcmVlUm9vdCgpOwogICAgfSBjYXRjaCAoZXgpIHsKICAgICAgaWYgKGV4IGluc3RhbmNlb2YgTWlzc2luZ0RhdGFFeGNlcHRpb24pIHsKICAgICAgICB0aHJvdyBleDsKICAgICAgfQogICAgICB3YXJuKCJVbmFibGUgcmVhZCB0byBzdHJ1Y3RUcmVlUm9vdCBpbmZvLiIpOwogICAgfQogICAgcmV0dXJuIHNoYWRvdyh0aGlzLCAic3RydWN0VHJlZVJvb3QiLCBzdHJ1Y3RUcmVlKTsKICB9CiAgI3JlYWRTdHJ1Y3RUcmVlUm9vdCgpIHsKICAgIGNvbnN0IHJhd09iaiA9IHRoaXMuI2NhdERpY3QuZ2V0UmF3KCJTdHJ1Y3RUcmVlUm9vdCIpOwogICAgY29uc3Qgb2JqID0gdGhpcy54cmVmLmZldGNoSWZSZWYocmF3T2JqKTsKICAgIGlmICghKG9iaiBpbnN0YW5jZW9mIERpY3QpKSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgY29uc3Qgcm9vdCA9IG5ldyBTdHJ1Y3RUcmVlUm9vdCh0aGlzLnhyZWYsIG9iaiwgcmF3T2JqKTsKICAgIHJvb3QuaW5pdCgpOwogICAgcmV0dXJuIHJvb3Q7CiAgfQogIGdldCB0b3BsZXZlbFBhZ2VzRGljdCgpIHsKICAgIGNvbnN0IHBhZ2VzT2JqID0gdGhpcy4jY2F0RGljdC5nZXQoIlBhZ2VzIik7CiAgICBpZiAoIShwYWdlc09iaiBpbnN0YW5jZW9mIERpY3QpKSB7CiAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigiSW52YWxpZCB0b3AtbGV2ZWwgcGFnZXMgZGljdGlvbmFyeS4iKTsKICAgIH0KICAgIHJldHVybiBzaGFkb3codGhpcywgInRvcGxldmVsUGFnZXNEaWN0IiwgcGFnZXNPYmopOwogIH0KICBnZXQgZG9jdW1lbnRPdXRsaW5lKCkgewogICAgbGV0IG9iaiA9IG51bGw7CiAgICB0cnkgewogICAgICBvYmogPSB0aGlzLiNyZWFkRG9jdW1lbnRPdXRsaW5lKCk7CiAgICB9IGNhdGNoIChleCkgewogICAgICBpZiAoZXggaW5zdGFuY2VvZiBNaXNzaW5nRGF0YUV4Y2VwdGlvbikgewogICAgICAgIHRocm93IGV4OwogICAgICB9CiAgICAgIHdhcm4oIlVuYWJsZSB0byByZWFkIGRvY3VtZW50IG91dGxpbmUuIik7CiAgICB9CiAgICByZXR1cm4gc2hhZG93KHRoaXMsICJkb2N1bWVudE91dGxpbmUiLCBvYmopOwogIH0KICAjcmVhZERvY3VtZW50T3V0bGluZSgpIHsKICAgIGxldCBvYmogPSB0aGlzLiNjYXREaWN0LmdldCgiT3V0bGluZXMiKTsKICAgIGlmICghKG9iaiBpbnN0YW5jZW9mIERpY3QpKSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgb2JqID0gb2JqLmdldFJhdygiRmlyc3QiKTsKICAgIGlmICghKG9iaiBpbnN0YW5jZW9mIFJlZikpIHsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICBjb25zdCByb290ID0gewogICAgICBpdGVtczogW10KICAgIH07CiAgICBjb25zdCBxdWV1ZSA9IFt7CiAgICAgIG9iaiwKICAgICAgcGFyZW50OiByb290CiAgICB9XTsKICAgIGNvbnN0IHByb2Nlc3NlZCA9IG5ldyBSZWZTZXQoKTsKICAgIHByb2Nlc3NlZC5wdXQob2JqKTsKICAgIGNvbnN0IHhyZWYgPSB0aGlzLnhyZWYsCiAgICAgIGJsYWNrQ29sb3IgPSBuZXcgVWludDhDbGFtcGVkQXJyYXkoMyk7CiAgICB3aGlsZSAocXVldWUubGVuZ3RoID4gMCkgewogICAgICBjb25zdCBpID0gcXVldWUuc2hpZnQoKTsKICAgICAgY29uc3Qgb3V0bGluZURpY3QgPSB4cmVmLmZldGNoSWZSZWYoaS5vYmopOwogICAgICBpZiAob3V0bGluZURpY3QgPT09IG51bGwpIHsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBpZiAoIW91dGxpbmVEaWN0LmhhcygiVGl0bGUiKSkgewogICAgICAgIHdhcm4oIkludmFsaWQgb3V0bGluZSBpdGVtIGVuY291bnRlcmVkLiIpOwogICAgICB9CiAgICAgIGNvbnN0IGRhdGEgPSB7CiAgICAgICAgdXJsOiBudWxsLAogICAgICAgIGRlc3Q6IG51bGwsCiAgICAgICAgYWN0aW9uOiBudWxsCiAgICAgIH07CiAgICAgIENhdGFsb2cucGFyc2VEZXN0RGljdGlvbmFyeSh7CiAgICAgICAgZGVzdERpY3Q6IG91dGxpbmVEaWN0LAogICAgICAgIHJlc3VsdE9iajogZGF0YSwKICAgICAgICBkb2NCYXNlVXJsOiB0aGlzLmJhc2VVcmwsCiAgICAgICAgZG9jQXR0YWNobWVudHM6IHRoaXMuYXR0YWNobWVudHMKICAgICAgfSk7CiAgICAgIGNvbnN0IHRpdGxlID0gb3V0bGluZURpY3QuZ2V0KCJUaXRsZSIpOwogICAgICBjb25zdCBmbGFncyA9IG91dGxpbmVEaWN0LmdldCgiRiIpIHx8IDA7CiAgICAgIGNvbnN0IGNvbG9yID0gb3V0bGluZURpY3QuZ2V0QXJyYXkoIkMiKTsKICAgICAgY29uc3QgY291bnQgPSBvdXRsaW5lRGljdC5nZXQoIkNvdW50Iik7CiAgICAgIGxldCByZ2JDb2xvciA9IGJsYWNrQ29sb3I7CiAgICAgIGlmIChpc051bWJlckFycmF5KGNvbG9yLCAzKSAmJiAoY29sb3JbMF0gIT09IDAgfHwgY29sb3JbMV0gIT09IDAgfHwgY29sb3JbMl0gIT09IDApKSB7CiAgICAgICAgcmdiQ29sb3IgPSBDb2xvclNwYWNlVXRpbHMucmdiLmdldFJnYihjb2xvciwgMCk7CiAgICAgIH0KICAgICAgY29uc3Qgb3V0bGluZUl0ZW0gPSB7CiAgICAgICAgYWN0aW9uOiBkYXRhLmFjdGlvbiwKICAgICAgICBhdHRhY2htZW50OiBkYXRhLmF0dGFjaG1lbnQsCiAgICAgICAgZGVzdDogZGF0YS5kZXN0LAogICAgICAgIHVybDogZGF0YS51cmwsCiAgICAgICAgdW5zYWZlVXJsOiBkYXRhLnVuc2FmZVVybCwKICAgICAgICBuZXdXaW5kb3c6IGRhdGEubmV3V2luZG93LAogICAgICAgIHNldE9DR1N0YXRlOiBkYXRhLnNldE9DR1N0YXRlLAogICAgICAgIHRpdGxlOiB0eXBlb2YgdGl0bGUgPT09ICJzdHJpbmciID8gc3RyaW5nVG9QREZTdHJpbmcodGl0bGUpIDogIiIsCiAgICAgICAgY29sb3I6IHJnYkNvbG9yLAogICAgICAgIGNvdW50OiBOdW1iZXIuaXNJbnRlZ2VyKGNvdW50KSA/IGNvdW50IDogdW5kZWZpbmVkLAogICAgICAgIGJvbGQ6ICEhKGZsYWdzICYgMiksCiAgICAgICAgaXRhbGljOiAhIShmbGFncyAmIDEpLAogICAgICAgIGl0ZW1zOiBbXQogICAgICB9OwogICAgICBpLnBhcmVudC5pdGVtcy5wdXNoKG91dGxpbmVJdGVtKTsKICAgICAgb2JqID0gb3V0bGluZURpY3QuZ2V0UmF3KCJGaXJzdCIpOwogICAgICBpZiAob2JqIGluc3RhbmNlb2YgUmVmICYmICFwcm9jZXNzZWQuaGFzKG9iaikpIHsKICAgICAgICBxdWV1ZS5wdXNoKHsKICAgICAgICAgIG9iaiwKICAgICAgICAgIHBhcmVudDogb3V0bGluZUl0ZW0KICAgICAgICB9KTsKICAgICAgICBwcm9jZXNzZWQucHV0KG9iaik7CiAgICAgIH0KICAgICAgb2JqID0gb3V0bGluZURpY3QuZ2V0UmF3KCJOZXh0Iik7CiAgICAgIGlmIChvYmogaW5zdGFuY2VvZiBSZWYgJiYgIXByb2Nlc3NlZC5oYXMob2JqKSkgewogICAgICAgIHF1ZXVlLnB1c2goewogICAgICAgICAgb2JqLAogICAgICAgICAgcGFyZW50OiBpLnBhcmVudAogICAgICAgIH0pOwogICAgICAgIHByb2Nlc3NlZC5wdXQob2JqKTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIHJvb3QuaXRlbXMubGVuZ3RoID4gMCA/IHJvb3QuaXRlbXMgOiBudWxsOwogIH0KICBnZXQgcGVybWlzc2lvbnMoKSB7CiAgICBsZXQgcGVybWlzc2lvbnMgPSBudWxsOwogICAgdHJ5IHsKICAgICAgcGVybWlzc2lvbnMgPSB0aGlzLiNyZWFkUGVybWlzc2lvbnMoKTsKICAgIH0gY2F0Y2ggKGV4KSB7CiAgICAgIGlmIChleCBpbnN0YW5jZW9mIE1pc3NpbmdEYXRhRXhjZXB0aW9uKSB7CiAgICAgICAgdGhyb3cgZXg7CiAgICAgIH0KICAgICAgd2FybigiVW5hYmxlIHRvIHJlYWQgcGVybWlzc2lvbnMuIik7CiAgICB9CiAgICByZXR1cm4gc2hhZG93KHRoaXMsICJwZXJtaXNzaW9ucyIsIHBlcm1pc3Npb25zKTsKICB9CiAgI3JlYWRQZXJtaXNzaW9ucygpIHsKICAgIGNvbnN0IGVuY3J5cHQgPSB0aGlzLnhyZWYudHJhaWxlci5nZXQoIkVuY3J5cHQiKTsKICAgIGlmICghKGVuY3J5cHQgaW5zdGFuY2VvZiBEaWN0KSkgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIGxldCBmbGFncyA9IGVuY3J5cHQuZ2V0KCJQIik7CiAgICBpZiAodHlwZW9mIGZsYWdzICE9PSAibnVtYmVyIikgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIGZsYWdzICs9IDIgKiogMzI7CiAgICBjb25zdCBwZXJtaXNzaW9ucyA9IFtdOwogICAgZm9yIChjb25zdCBrZXkgaW4gUGVybWlzc2lvbkZsYWcpIHsKICAgICAgY29uc3QgdmFsdWUgPSBQZXJtaXNzaW9uRmxhZ1trZXldOwogICAgICBpZiAoZmxhZ3MgJiB2YWx1ZSkgewogICAgICAgIHBlcm1pc3Npb25zLnB1c2godmFsdWUpOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gcGVybWlzc2lvbnM7CiAgfQogIGdldCBvcHRpb25hbENvbnRlbnRDb25maWcoKSB7CiAgICBsZXQgY29uZmlnID0gbnVsbDsKICAgIHRyeSB7CiAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSB0aGlzLiNjYXREaWN0LmdldCgiT0NQcm9wZXJ0aWVzIik7CiAgICAgIGlmICghcHJvcGVydGllcykgewogICAgICAgIHJldHVybiBzaGFkb3codGhpcywgIm9wdGlvbmFsQ29udGVudENvbmZpZyIsIG51bGwpOwogICAgICB9CiAgICAgIGNvbnN0IGRlZmF1bHRDb25maWcgPSBwcm9wZXJ0aWVzLmdldCgiRCIpOwogICAgICBpZiAoIWRlZmF1bHRDb25maWcpIHsKICAgICAgICByZXR1cm4gc2hhZG93KHRoaXMsICJvcHRpb25hbENvbnRlbnRDb25maWciLCBudWxsKTsKICAgICAgfQogICAgICBjb25zdCBncm91cHNEYXRhID0gcHJvcGVydGllcy5nZXQoIk9DR3MiKTsKICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGdyb3Vwc0RhdGEpKSB7CiAgICAgICAgcmV0dXJuIHNoYWRvdyh0aGlzLCAib3B0aW9uYWxDb250ZW50Q29uZmlnIiwgbnVsbCk7CiAgICAgIH0KICAgICAgY29uc3QgZ3JvdXBSZWZDYWNoZSA9IG5ldyBSZWZTZXRDYWNoZSgpOwogICAgICBmb3IgKGNvbnN0IGdyb3VwUmVmIG9mIGdyb3Vwc0RhdGEpIHsKICAgICAgICBpZiAoIShncm91cFJlZiBpbnN0YW5jZW9mIFJlZikgfHwgZ3JvdXBSZWZDYWNoZS5oYXMoZ3JvdXBSZWYpKSB7CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CiAgICAgICAgZ3JvdXBSZWZDYWNoZS5wdXQoZ3JvdXBSZWYsIHRoaXMuI3JlYWRPcHRpb25hbENvbnRlbnRHcm91cChncm91cFJlZikpOwogICAgICB9CiAgICAgIGNvbmZpZyA9IHRoaXMuI3JlYWRPcHRpb25hbENvbnRlbnRDb25maWcoZGVmYXVsdENvbmZpZywgZ3JvdXBSZWZDYWNoZSk7CiAgICB9IGNhdGNoIChleCkgewogICAgICBpZiAoZXggaW5zdGFuY2VvZiBNaXNzaW5nRGF0YUV4Y2VwdGlvbikgewogICAgICAgIHRocm93IGV4OwogICAgICB9CiAgICAgIHdhcm4oYFVuYWJsZSB0byByZWFkIG9wdGlvbmFsIGNvbnRlbnQgY29uZmlnOiAke2V4fWApOwogICAgfQogICAgcmV0dXJuIHNoYWRvdyh0aGlzLCAib3B0aW9uYWxDb250ZW50Q29uZmlnIiwgY29uZmlnKTsKICB9CiAgI3JlYWRPcHRpb25hbENvbnRlbnRHcm91cChncm91cFJlZikgewogICAgY29uc3QgZ3JvdXAgPSB0aGlzLnhyZWYuZmV0Y2goZ3JvdXBSZWYpOwogICAgY29uc3Qgb2JqID0gewogICAgICBpZDogZ3JvdXBSZWYudG9TdHJpbmcoKSwKICAgICAgbmFtZTogbnVsbCwKICAgICAgaW50ZW50OiBudWxsLAogICAgICB1c2FnZTogewogICAgICAgIHByaW50OiBudWxsLAogICAgICAgIHZpZXc6IG51bGwKICAgICAgfSwKICAgICAgcmJHcm91cHM6IFtdCiAgICB9OwogICAgY29uc3QgbmFtZSA9IGdyb3VwLmdldCgiTmFtZSIpOwogICAgaWYgKHR5cGVvZiBuYW1lID09PSAic3RyaW5nIikgewogICAgICBvYmoubmFtZSA9IHN0cmluZ1RvUERGU3RyaW5nKG5hbWUpOwogICAgfQogICAgbGV0IGludGVudCA9IGdyb3VwLmdldEFycmF5KCJJbnRlbnQiKTsKICAgIGlmICghQXJyYXkuaXNBcnJheShpbnRlbnQpKSB7CiAgICAgIGludGVudCA9IFtpbnRlbnRdOwogICAgfQogICAgaWYgKGludGVudC5ldmVyeShpID0+IGkgaW5zdGFuY2VvZiBOYW1lKSkgewogICAgICBvYmouaW50ZW50ID0gaW50ZW50Lm1hcChpID0+IGkubmFtZSk7CiAgICB9CiAgICBjb25zdCB1c2FnZSA9IGdyb3VwLmdldCgiVXNhZ2UiKTsKICAgIGlmICghKHVzYWdlIGluc3RhbmNlb2YgRGljdCkpIHsKICAgICAgcmV0dXJuIG9iajsKICAgIH0KICAgIGNvbnN0IHVzYWdlT2JqID0gb2JqLnVzYWdlOwogICAgY29uc3QgcHJpbnQgPSB1c2FnZS5nZXQoIlByaW50Iik7CiAgICBpZiAocHJpbnQgaW5zdGFuY2VvZiBEaWN0KSB7CiAgICAgIGNvbnN0IHByaW50U3RhdGUgPSBwcmludC5nZXQoIlByaW50U3RhdGUiKTsKICAgICAgaWYgKHByaW50U3RhdGUgaW5zdGFuY2VvZiBOYW1lKSB7CiAgICAgICAgc3dpdGNoIChwcmludFN0YXRlLm5hbWUpIHsKICAgICAgICAgIGNhc2UgIk9OIjoKICAgICAgICAgIGNhc2UgIk9GRiI6CiAgICAgICAgICAgIHVzYWdlT2JqLnByaW50ID0gewogICAgICAgICAgICAgIHByaW50U3RhdGU6IHByaW50U3RhdGUubmFtZQogICAgICAgICAgICB9OwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgY29uc3QgdmlldyA9IHVzYWdlLmdldCgiVmlldyIpOwogICAgaWYgKHZpZXcgaW5zdGFuY2VvZiBEaWN0KSB7CiAgICAgIGNvbnN0IHZpZXdTdGF0ZSA9IHZpZXcuZ2V0KCJWaWV3U3RhdGUiKTsKICAgICAgaWYgKHZpZXdTdGF0ZSBpbnN0YW5jZW9mIE5hbWUpIHsKICAgICAgICBzd2l0Y2ggKHZpZXdTdGF0ZS5uYW1lKSB7CiAgICAgICAgICBjYXNlICJPTiI6CiAgICAgICAgICBjYXNlICJPRkYiOgogICAgICAgICAgICB1c2FnZU9iai52aWV3ID0gewogICAgICAgICAgICAgIHZpZXdTdGF0ZTogdmlld1N0YXRlLm5hbWUKICAgICAgICAgICAgfTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBvYmo7CiAgfQogICNyZWFkT3B0aW9uYWxDb250ZW50Q29uZmlnKGNvbmZpZywgZ3JvdXBSZWZDYWNoZSkgewogICAgZnVuY3Rpb24gcGFyc2VPbk9mZihyZWZzKSB7CiAgICAgIGNvbnN0IG9uUGFyc2VkID0gW107CiAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlZnMpKSB7CiAgICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiByZWZzKSB7CiAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBSZWYgJiYgZ3JvdXBSZWZDYWNoZS5oYXModmFsdWUpKSB7CiAgICAgICAgICAgIG9uUGFyc2VkLnB1c2godmFsdWUudG9TdHJpbmcoKSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBvblBhcnNlZDsKICAgIH0KICAgIGZ1bmN0aW9uIHBhcnNlT3JkZXIocmVmcywgbmVzdGVkTGV2ZWxzID0gMCkgewogICAgICBpZiAoIUFycmF5LmlzQXJyYXkocmVmcykpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgICBjb25zdCBvcmRlciA9IFtdOwogICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHJlZnMpIHsKICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBSZWYgJiYgZ3JvdXBSZWZDYWNoZS5oYXModmFsdWUpKSB7CiAgICAgICAgICBwYXJzZWRPcmRlclJlZnMucHV0KHZhbHVlKTsKICAgICAgICAgIG9yZGVyLnB1c2godmFsdWUudG9TdHJpbmcoKSk7CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CiAgICAgICAgY29uc3QgbmVzdGVkT3JkZXIgPSBwYXJzZU5lc3RlZE9yZGVyKHZhbHVlLCBuZXN0ZWRMZXZlbHMpOwogICAgICAgIGlmIChuZXN0ZWRPcmRlcikgewogICAgICAgICAgb3JkZXIucHVzaChuZXN0ZWRPcmRlcik7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmIChuZXN0ZWRMZXZlbHMgPiAwKSB7CiAgICAgICAgcmV0dXJuIG9yZGVyOwogICAgICB9CiAgICAgIGNvbnN0IGhpZGRlbkdyb3VwcyA9IFtdOwogICAgICBmb3IgKGNvbnN0IFtncm91cFJlZl0gb2YgZ3JvdXBSZWZDYWNoZS5pdGVtcygpKSB7CiAgICAgICAgaWYgKHBhcnNlZE9yZGVyUmVmcy5oYXMoZ3JvdXBSZWYpKSB7CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CiAgICAgICAgaGlkZGVuR3JvdXBzLnB1c2goZ3JvdXBSZWYudG9TdHJpbmcoKSk7CiAgICAgIH0KICAgICAgaWYgKGhpZGRlbkdyb3Vwcy5sZW5ndGgpIHsKICAgICAgICBvcmRlci5wdXNoKHsKICAgICAgICAgIG5hbWU6IG51bGwsCiAgICAgICAgICBvcmRlcjogaGlkZGVuR3JvdXBzCiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgcmV0dXJuIG9yZGVyOwogICAgfQogICAgZnVuY3Rpb24gcGFyc2VOZXN0ZWRPcmRlcihyZWYsIG5lc3RlZExldmVscykgewogICAgICBpZiAoKytuZXN0ZWRMZXZlbHMgPiBNQVhfTkVTVEVEX0xFVkVMUykgewogICAgICAgIHdhcm4oInBhcnNlTmVzdGVkT3JkZXIgLSByZWFjaGVkIE1BWF9ORVNURURfTEVWRUxTLiIpOwogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CiAgICAgIGNvbnN0IHZhbHVlID0geHJlZi5mZXRjaElmUmVmKHJlZik7CiAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgICBjb25zdCBuZXN0ZWROYW1lID0geHJlZi5mZXRjaElmUmVmKHZhbHVlWzBdKTsKICAgICAgaWYgKHR5cGVvZiBuZXN0ZWROYW1lICE9PSAic3RyaW5nIikgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CiAgICAgIGNvbnN0IG5lc3RlZE9yZGVyID0gcGFyc2VPcmRlcih2YWx1ZS5zbGljZSgxKSwgbmVzdGVkTGV2ZWxzKTsKICAgICAgaWYgKCFuZXN0ZWRPcmRlcj8ubGVuZ3RoKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgICAgcmV0dXJuIHsKICAgICAgICBuYW1lOiBzdHJpbmdUb1BERlN0cmluZyhuZXN0ZWROYW1lKSwKICAgICAgICBvcmRlcjogbmVzdGVkT3JkZXIKICAgICAgfTsKICAgIH0KICAgIGZ1bmN0aW9uIHBhcnNlUkJHcm91cHMocmJHcm91cHMpIHsKICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJiR3JvdXBzKSkgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHJiR3JvdXBzKSB7CiAgICAgICAgY29uc3QgcmJHcm91cCA9IHhyZWYuZmV0Y2hJZlJlZih2YWx1ZSk7CiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJiR3JvdXApIHx8ICFyYkdyb3VwLmxlbmd0aCkgewogICAgICAgICAgY29udGludWU7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHBhcnNlZFJiR3JvdXAgPSBuZXcgU2V0KCk7CiAgICAgICAgZm9yIChjb25zdCByZWYgb2YgcmJHcm91cCkgewogICAgICAgICAgaWYgKHJlZiBpbnN0YW5jZW9mIFJlZiAmJiBncm91cFJlZkNhY2hlLmhhcyhyZWYpICYmICFwYXJzZWRSYkdyb3VwLmhhcyhyZWYudG9TdHJpbmcoKSkpIHsKICAgICAgICAgICAgcGFyc2VkUmJHcm91cC5hZGQocmVmLnRvU3RyaW5nKCkpOwogICAgICAgICAgICBncm91cFJlZkNhY2hlLmdldChyZWYpLnJiR3JvdXBzLnB1c2gocGFyc2VkUmJHcm91cCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBjb25zdCB4cmVmID0gdGhpcy54cmVmLAogICAgICBwYXJzZWRPcmRlclJlZnMgPSBuZXcgUmVmU2V0KCksCiAgICAgIE1BWF9ORVNURURfTEVWRUxTID0gMTA7CiAgICBwYXJzZVJCR3JvdXBzKGNvbmZpZy5nZXQoIlJCR3JvdXBzIikpOwogICAgcmV0dXJuIHsKICAgICAgbmFtZTogdHlwZW9mIGNvbmZpZy5nZXQoIk5hbWUiKSA9PT0gInN0cmluZyIgPyBzdHJpbmdUb1BERlN0cmluZyhjb25maWcuZ2V0KCJOYW1lIikpIDogbnVsbCwKICAgICAgY3JlYXRvcjogdHlwZW9mIGNvbmZpZy5nZXQoIkNyZWF0b3IiKSA9PT0gInN0cmluZyIgPyBzdHJpbmdUb1BERlN0cmluZyhjb25maWcuZ2V0KCJDcmVhdG9yIikpIDogbnVsbCwKICAgICAgYmFzZVN0YXRlOiBjb25maWcuZ2V0KCJCYXNlU3RhdGUiKSBpbnN0YW5jZW9mIE5hbWUgPyBjb25maWcuZ2V0KCJCYXNlU3RhdGUiKS5uYW1lIDogbnVsbCwKICAgICAgb246IHBhcnNlT25PZmYoY29uZmlnLmdldCgiT04iKSksCiAgICAgIG9mZjogcGFyc2VPbk9mZihjb25maWcuZ2V0KCJPRkYiKSksCiAgICAgIG9yZGVyOiBwYXJzZU9yZGVyKGNvbmZpZy5nZXQoIk9yZGVyIikpLAogICAgICBncm91cHM6IFsuLi5ncm91cFJlZkNhY2hlXQogICAgfTsKICB9CiAgc2V0QWN0dWFsTnVtUGFnZXMobnVtID0gbnVsbCkgewogICAgdGhpcy4jYWN0dWFsTnVtUGFnZXMgPSBudW07CiAgfQogIGdldCBoYXNBY3R1YWxOdW1QYWdlcygpIHsKICAgIHJldHVybiB0aGlzLiNhY3R1YWxOdW1QYWdlcyAhPT0gbnVsbDsKICB9CiAgZ2V0IF9wYWdlc0NvdW50KCkgewogICAgY29uc3Qgb2JqID0gdGhpcy50b3BsZXZlbFBhZ2VzRGljdC5nZXQoIkNvdW50Iik7CiAgICBpZiAoIU51bWJlci5pc0ludGVnZXIob2JqKSkgewogICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoIlBhZ2UgY291bnQgaW4gdG9wLWxldmVsIHBhZ2VzIGRpY3Rpb25hcnkgaXMgbm90IGFuIGludGVnZXIuIik7CiAgICB9CiAgICByZXR1cm4gc2hhZG93KHRoaXMsICJfcGFnZXNDb3VudCIsIG9iaik7CiAgfQogIGdldCBudW1QYWdlcygpIHsKICAgIHJldHVybiB0aGlzLiNhY3R1YWxOdW1QYWdlcyA/PyB0aGlzLl9wYWdlc0NvdW50OwogIH0KICBnZXQgZGVzdGluYXRpb25zKCkgewogICAgY29uc3QgcmF3RGVzdHMgPSB0aGlzLiNyZWFkRGVzdHMoKSwKICAgICAgZGVzdHMgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgZm9yIChjb25zdCBvYmogb2YgcmF3RGVzdHMpIHsKICAgICAgaWYgKG9iaiBpbnN0YW5jZW9mIE5hbWVUcmVlKSB7CiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2Ygb2JqLmdldEFsbCgpKSB7CiAgICAgICAgICBjb25zdCBkZXN0ID0gZmV0Y2hEZXN0KHZhbHVlKTsKICAgICAgICAgIGlmIChkZXN0KSB7CiAgICAgICAgICAgIGRlc3RzW3N0cmluZ1RvUERGU3RyaW5nKGtleSwgdHJ1ZSldID0gZGVzdDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAob2JqIGluc3RhbmNlb2YgRGljdCkgewogICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIG9iaikgewogICAgICAgICAgY29uc3QgZGVzdCA9IGZldGNoRGVzdCh2YWx1ZSk7CiAgICAgICAgICBpZiAoZGVzdCkgewogICAgICAgICAgICBkZXN0c1tzdHJpbmdUb1BERlN0cmluZyhrZXksIHRydWUpXSB8fD0gZGVzdDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBzaGFkb3codGhpcywgImRlc3RpbmF0aW9ucyIsIGRlc3RzKTsKICB9CiAgZ2V0RGVzdGluYXRpb24oaWQpIHsKICAgIGlmICh0aGlzLmhhc093blByb3BlcnR5KCJkZXN0aW5hdGlvbnMiKSkgewogICAgICByZXR1cm4gdGhpcy5kZXN0aW5hdGlvbnNbaWRdID8/IG51bGw7CiAgICB9CiAgICBjb25zdCByYXdEZXN0cyA9IHRoaXMuI3JlYWREZXN0cygpOwogICAgZm9yIChjb25zdCBvYmogb2YgcmF3RGVzdHMpIHsKICAgICAgaWYgKG9iaiBpbnN0YW5jZW9mIE5hbWVUcmVlIHx8IG9iaiBpbnN0YW5jZW9mIERpY3QpIHsKICAgICAgICBjb25zdCBkZXN0ID0gZmV0Y2hEZXN0KG9iai5nZXQoaWQpKTsKICAgICAgICBpZiAoZGVzdCkgewogICAgICAgICAgcmV0dXJuIGRlc3Q7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBpZiAocmF3RGVzdHMubGVuZ3RoKSB7CiAgICAgIGNvbnN0IGRlc3QgPSB0aGlzLmRlc3RpbmF0aW9uc1tpZF07CiAgICAgIGlmIChkZXN0KSB7CiAgICAgICAgcmV0dXJuIGRlc3Q7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBudWxsOwogIH0KICAjcmVhZERlc3RzKCkgewogICAgY29uc3Qgb2JqID0gdGhpcy4jY2F0RGljdC5nZXQoIk5hbWVzIik7CiAgICBjb25zdCByYXdEZXN0cyA9IFtdOwogICAgaWYgKG9iaj8uaGFzKCJEZXN0cyIpKSB7CiAgICAgIHJhd0Rlc3RzLnB1c2gobmV3IE5hbWVUcmVlKG9iai5nZXRSYXcoIkRlc3RzIiksIHRoaXMueHJlZikpOwogICAgfQogICAgaWYgKHRoaXMuI2NhdERpY3QuaGFzKCJEZXN0cyIpKSB7CiAgICAgIHJhd0Rlc3RzLnB1c2godGhpcy4jY2F0RGljdC5nZXQoIkRlc3RzIikpOwogICAgfQogICAgcmV0dXJuIHJhd0Rlc3RzOwogIH0KICBnZXQgcGFnZUxhYmVscygpIHsKICAgIGxldCBvYmogPSBudWxsOwogICAgdHJ5IHsKICAgICAgb2JqID0gdGhpcy4jcmVhZFBhZ2VMYWJlbHMoKTsKICAgIH0gY2F0Y2ggKGV4KSB7CiAgICAgIGlmIChleCBpbnN0YW5jZW9mIE1pc3NpbmdEYXRhRXhjZXB0aW9uKSB7CiAgICAgICAgdGhyb3cgZXg7CiAgICAgIH0KICAgICAgd2FybigiVW5hYmxlIHRvIHJlYWQgcGFnZSBsYWJlbHMuIik7CiAgICB9CiAgICByZXR1cm4gc2hhZG93KHRoaXMsICJwYWdlTGFiZWxzIiwgb2JqKTsKICB9CiAgI3JlYWRQYWdlTGFiZWxzKCkgewogICAgY29uc3Qgb2JqID0gdGhpcy4jY2F0RGljdC5nZXRSYXcoIlBhZ2VMYWJlbHMiKTsKICAgIGlmICghb2JqKSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgY29uc3QgcGFnZUxhYmVscyA9IG5ldyBBcnJheSh0aGlzLm51bVBhZ2VzKTsKICAgIGxldCBzdHlsZSA9IG51bGwsCiAgICAgIHByZWZpeCA9ICIiOwogICAgY29uc3QgbnVtYmVyVHJlZSA9IG5ldyBOdW1iZXJUcmVlKG9iaiwgdGhpcy54cmVmKTsKICAgIGNvbnN0IG51bXMgPSBudW1iZXJUcmVlLmdldEFsbCgpOwogICAgbGV0IGN1cnJlbnRMYWJlbCA9ICIiLAogICAgICBjdXJyZW50SW5kZXggPSAxOwogICAgZm9yIChsZXQgaSA9IDAsIGlpID0gdGhpcy5udW1QYWdlczsgaSA8IGlpOyBpKyspIHsKICAgICAgY29uc3QgbGFiZWxEaWN0ID0gbnVtcy5nZXQoaSk7CiAgICAgIGlmIChsYWJlbERpY3QgIT09IHVuZGVmaW5lZCkgewogICAgICAgIGlmICghKGxhYmVsRGljdCBpbnN0YW5jZW9mIERpY3QpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoIlBhZ2VMYWJlbCBpcyBub3QgYSBkaWN0aW9uYXJ5LiIpOwogICAgICAgIH0KICAgICAgICBpZiAobGFiZWxEaWN0LmhhcygiVHlwZSIpICYmICFpc05hbWUobGFiZWxEaWN0LmdldCgiVHlwZSIpLCAiUGFnZUxhYmVsIikpIHsKICAgICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigiSW52YWxpZCB0eXBlIGluIFBhZ2VMYWJlbCBkaWN0aW9uYXJ5LiIpOwogICAgICAgIH0KICAgICAgICBpZiAobGFiZWxEaWN0LmhhcygiUyIpKSB7CiAgICAgICAgICBjb25zdCBzID0gbGFiZWxEaWN0LmdldCgiUyIpOwogICAgICAgICAgaWYgKCEocyBpbnN0YW5jZW9mIE5hbWUpKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigiSW52YWxpZCBzdHlsZSBpbiBQYWdlTGFiZWwgZGljdGlvbmFyeS4iKTsKICAgICAgICAgIH0KICAgICAgICAgIHN0eWxlID0gcy5uYW1lOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzdHlsZSA9IG51bGw7CiAgICAgICAgfQogICAgICAgIGlmIChsYWJlbERpY3QuaGFzKCJQIikpIHsKICAgICAgICAgIGNvbnN0IHAgPSBsYWJlbERpY3QuZ2V0KCJQIik7CiAgICAgICAgICBpZiAodHlwZW9mIHAgIT09ICJzdHJpbmciKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigiSW52YWxpZCBwcmVmaXggaW4gUGFnZUxhYmVsIGRpY3Rpb25hcnkuIik7CiAgICAgICAgICB9CiAgICAgICAgICBwcmVmaXggPSBzdHJpbmdUb1BERlN0cmluZyhwKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcHJlZml4ID0gIiI7CiAgICAgICAgfQogICAgICAgIGlmIChsYWJlbERpY3QuaGFzKCJTdCIpKSB7CiAgICAgICAgICBjb25zdCBzdCA9IGxhYmVsRGljdC5nZXQoIlN0Iik7CiAgICAgICAgICBpZiAoIShOdW1iZXIuaXNJbnRlZ2VyKHN0KSAmJiBzdCA+PSAxKSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoIkludmFsaWQgc3RhcnQgaW4gUGFnZUxhYmVsIGRpY3Rpb25hcnkuIik7CiAgICAgICAgICB9CiAgICAgICAgICBjdXJyZW50SW5kZXggPSBzdDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY3VycmVudEluZGV4ID0gMTsKICAgICAgICB9CiAgICAgIH0KICAgICAgc3dpdGNoIChzdHlsZSkgewogICAgICAgIGNhc2UgIkQiOgogICAgICAgICAgY3VycmVudExhYmVsID0gY3VycmVudEluZGV4OwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAiUiI6CiAgICAgICAgY2FzZSAiciI6CiAgICAgICAgICBjdXJyZW50TGFiZWwgPSB0b1JvbWFuTnVtZXJhbHMoY3VycmVudEluZGV4LCBzdHlsZSA9PT0gInIiKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgIkEiOgogICAgICAgIGNhc2UgImEiOgogICAgICAgICAgY29uc3QgTElNSVQgPSAyNjsKICAgICAgICAgIGNvbnN0IEFfVVBQRVJfQ0FTRSA9IDB4NDEsCiAgICAgICAgICAgIEFfTE9XRVJfQ0FTRSA9IDB4NjE7CiAgICAgICAgICBjb25zdCBiYXNlQ2hhckNvZGUgPSBzdHlsZSA9PT0gImEiID8gQV9MT1dFUl9DQVNFIDogQV9VUFBFUl9DQVNFOwogICAgICAgICAgY29uc3QgbGV0dGVySW5kZXggPSBjdXJyZW50SW5kZXggLSAxOwogICAgICAgICAgY29uc3QgY2hhcmFjdGVyID0gU3RyaW5nLmZyb21DaGFyQ29kZShiYXNlQ2hhckNvZGUgKyBsZXR0ZXJJbmRleCAlIExJTUlUKTsKICAgICAgICAgIGN1cnJlbnRMYWJlbCA9IGNoYXJhY3Rlci5yZXBlYXQoTWF0aC5mbG9vcihsZXR0ZXJJbmRleCAvIExJTUlUKSArIDEpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIGlmIChzdHlsZSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoYEludmFsaWQgc3R5bGUgIiR7c3R5bGV9IiBpbiBQYWdlTGFiZWwgZGljdGlvbmFyeS5gKTsKICAgICAgICAgIH0KICAgICAgICAgIGN1cnJlbnRMYWJlbCA9ICIiOwogICAgICB9CiAgICAgIHBhZ2VMYWJlbHNbaV0gPSBwcmVmaXggKyBjdXJyZW50TGFiZWw7CiAgICAgIGN1cnJlbnRJbmRleCsrOwogICAgfQogICAgcmV0dXJuIHBhZ2VMYWJlbHM7CiAgfQogIGdldCBwYWdlTGF5b3V0KCkgewogICAgY29uc3Qgb2JqID0gdGhpcy4jY2F0RGljdC5nZXQoIlBhZ2VMYXlvdXQiKTsKICAgIGxldCBwYWdlTGF5b3V0ID0gIiI7CiAgICBpZiAob2JqIGluc3RhbmNlb2YgTmFtZSkgewogICAgICBzd2l0Y2ggKG9iai5uYW1lKSB7CiAgICAgICAgY2FzZSAiU2luZ2xlUGFnZSI6CiAgICAgICAgY2FzZSAiT25lQ29sdW1uIjoKICAgICAgICBjYXNlICJUd29Db2x1bW5MZWZ0IjoKICAgICAgICBjYXNlICJUd29Db2x1bW5SaWdodCI6CiAgICAgICAgY2FzZSAiVHdvUGFnZUxlZnQiOgogICAgICAgIGNhc2UgIlR3b1BhZ2VSaWdodCI6CiAgICAgICAgICBwYWdlTGF5b3V0ID0gb2JqLm5hbWU7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBzaGFkb3codGhpcywgInBhZ2VMYXlvdXQiLCBwYWdlTGF5b3V0KTsKICB9CiAgZ2V0IHBhZ2VNb2RlKCkgewogICAgY29uc3Qgb2JqID0gdGhpcy4jY2F0RGljdC5nZXQoIlBhZ2VNb2RlIik7CiAgICBsZXQgcGFnZU1vZGUgPSAiVXNlTm9uZSI7CiAgICBpZiAob2JqIGluc3RhbmNlb2YgTmFtZSkgewogICAgICBzd2l0Y2ggKG9iai5uYW1lKSB7CiAgICAgICAgY2FzZSAiVXNlTm9uZSI6CiAgICAgICAgY2FzZSAiVXNlT3V0bGluZXMiOgogICAgICAgIGNhc2UgIlVzZVRodW1icyI6CiAgICAgICAgY2FzZSAiRnVsbFNjcmVlbiI6CiAgICAgICAgY2FzZSAiVXNlT0MiOgogICAgICAgIGNhc2UgIlVzZUF0dGFjaG1lbnRzIjoKICAgICAgICAgIHBhZ2VNb2RlID0gb2JqLm5hbWU7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBzaGFkb3codGhpcywgInBhZ2VNb2RlIiwgcGFnZU1vZGUpOwogIH0KICBnZXQgdmlld2VyUHJlZmVyZW5jZXMoKSB7CiAgICBjb25zdCBvYmogPSB0aGlzLiNjYXREaWN0LmdldCgiVmlld2VyUHJlZmVyZW5jZXMiKTsKICAgIGlmICghKG9iaiBpbnN0YW5jZW9mIERpY3QpKSB7CiAgICAgIHJldHVybiBzaGFkb3codGhpcywgInZpZXdlclByZWZlcmVuY2VzIiwgbnVsbCk7CiAgICB9CiAgICBsZXQgcHJlZnMgPSBudWxsOwogICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2Ygb2JqKSB7CiAgICAgIGxldCBwcmVmVmFsdWU7CiAgICAgIHN3aXRjaCAoa2V5KSB7CiAgICAgICAgY2FzZSAiSGlkZVRvb2xiYXIiOgogICAgICAgIGNhc2UgIkhpZGVNZW51YmFyIjoKICAgICAgICBjYXNlICJIaWRlV2luZG93VUkiOgogICAgICAgIGNhc2UgIkZpdFdpbmRvdyI6CiAgICAgICAgY2FzZSAiQ2VudGVyV2luZG93IjoKICAgICAgICBjYXNlICJEaXNwbGF5RG9jVGl0bGUiOgogICAgICAgIGNhc2UgIlBpY2tUcmF5QnlQREZTaXplIjoKICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICJib29sZWFuIikgewogICAgICAgICAgICBwcmVmVmFsdWUgPSB2YWx1ZTsKICAgICAgICAgIH0KICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgIk5vbkZ1bGxTY3JlZW5QYWdlTW9kZSI6CiAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBOYW1lKSB7CiAgICAgICAgICAgIHN3aXRjaCAodmFsdWUubmFtZSkgewogICAgICAgICAgICAgIGNhc2UgIlVzZU5vbmUiOgogICAgICAgICAgICAgIGNhc2UgIlVzZU91dGxpbmVzIjoKICAgICAgICAgICAgICBjYXNlICJVc2VUaHVtYnMiOgogICAgICAgICAgICAgIGNhc2UgIlVzZU9DIjoKICAgICAgICAgICAgICAgIHByZWZWYWx1ZSA9IHZhbHVlLm5hbWU7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgcHJlZlZhbHVlID0gIlVzZU5vbmUiOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJEaXJlY3Rpb24iOgogICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTmFtZSkgewogICAgICAgICAgICBzd2l0Y2ggKHZhbHVlLm5hbWUpIHsKICAgICAgICAgICAgICBjYXNlICJMMlIiOgogICAgICAgICAgICAgIGNhc2UgIlIyTCI6CiAgICAgICAgICAgICAgICBwcmVmVmFsdWUgPSB2YWx1ZS5uYW1lOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgIHByZWZWYWx1ZSA9ICJMMlIiOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJWaWV3QXJlYSI6CiAgICAgICAgY2FzZSAiVmlld0NsaXAiOgogICAgICAgIGNhc2UgIlByaW50QXJlYSI6CiAgICAgICAgY2FzZSAiUHJpbnRDbGlwIjoKICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE5hbWUpIHsKICAgICAgICAgICAgc3dpdGNoICh2YWx1ZS5uYW1lKSB7CiAgICAgICAgICAgICAgY2FzZSAiTWVkaWFCb3giOgogICAgICAgICAgICAgIGNhc2UgIkNyb3BCb3giOgogICAgICAgICAgICAgIGNhc2UgIkJsZWVkQm94IjoKICAgICAgICAgICAgICBjYXNlICJUcmltQm94IjoKICAgICAgICAgICAgICBjYXNlICJBcnRCb3giOgogICAgICAgICAgICAgICAgcHJlZlZhbHVlID0gdmFsdWUubmFtZTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICBwcmVmVmFsdWUgPSAiQ3JvcEJveCI7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgIlByaW50U2NhbGluZyI6CiAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBOYW1lKSB7CiAgICAgICAgICAgIHN3aXRjaCAodmFsdWUubmFtZSkgewogICAgICAgICAgICAgIGNhc2UgIk5vbmUiOgogICAgICAgICAgICAgIGNhc2UgIkFwcERlZmF1bHQiOgogICAgICAgICAgICAgICAgcHJlZlZhbHVlID0gdmFsdWUubmFtZTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICBwcmVmVmFsdWUgPSAiQXBwRGVmYXVsdCI7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgIkR1cGxleCI6CiAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBOYW1lKSB7CiAgICAgICAgICAgIHN3aXRjaCAodmFsdWUubmFtZSkgewogICAgICAgICAgICAgIGNhc2UgIlNpbXBsZXgiOgogICAgICAgICAgICAgIGNhc2UgIkR1cGxleEZsaXBTaG9ydEVkZ2UiOgogICAgICAgICAgICAgIGNhc2UgIkR1cGxleEZsaXBMb25nRWRnZSI6CiAgICAgICAgICAgICAgICBwcmVmVmFsdWUgPSB2YWx1ZS5uYW1lOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgIHByZWZWYWx1ZSA9ICJOb25lIjsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAiUHJpbnRQYWdlUmFuZ2UiOgogICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCAlIDIgPT09IDApIHsKICAgICAgICAgICAgY29uc3QgaXNWYWxpZCA9IHZhbHVlLmV2ZXJ5KChwYWdlLCBpLCBhcnIpID0+IE51bWJlci5pc0ludGVnZXIocGFnZSkgJiYgcGFnZSA+IDAgJiYgKGkgPT09IDAgfHwgcGFnZSA+PSBhcnJbaSAtIDFdKSAmJiBwYWdlIDw9IHRoaXMubnVtUGFnZXMpOwogICAgICAgICAgICBpZiAoaXNWYWxpZCkgewogICAgICAgICAgICAgIHByZWZWYWx1ZSA9IHZhbHVlOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJOdW1Db3BpZXMiOgogICAgICAgICAgaWYgKE51bWJlci5pc0ludGVnZXIodmFsdWUpICYmIHZhbHVlID4gMCkgewogICAgICAgICAgICBwcmVmVmFsdWUgPSB2YWx1ZTsKICAgICAgICAgIH0KICAgICAgICAgIGJyZWFrOwogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICB3YXJuKGBJZ25vcmluZyBub24tc3RhbmRhcmQga2V5IGluIFZpZXdlclByZWZlcmVuY2VzOiAke2tleX0uYCk7CiAgICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBpZiAocHJlZlZhbHVlID09PSB1bmRlZmluZWQpIHsKICAgICAgICB3YXJuKGBCYWQgdmFsdWUsIGZvciBrZXkgIiR7a2V5fSIsIGluIFZpZXdlclByZWZlcmVuY2VzOiAke3ZhbHVlfS5gKTsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBwcmVmcyA/Pz0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgICAgcHJlZnNba2V5XSA9IHByZWZWYWx1ZTsKICAgIH0KICAgIHJldHVybiBzaGFkb3codGhpcywgInZpZXdlclByZWZlcmVuY2VzIiwgcHJlZnMpOwogIH0KICBnZXQgb3BlbkFjdGlvbigpIHsKICAgIGNvbnN0IG9iaiA9IHRoaXMuI2NhdERpY3QuZ2V0KCJPcGVuQWN0aW9uIik7CiAgICBjb25zdCBvcGVuQWN0aW9uID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgIGlmIChvYmogaW5zdGFuY2VvZiBEaWN0KSB7CiAgICAgIGNvbnN0IGRlc3REaWN0ID0gbmV3IERpY3QodGhpcy54cmVmKTsKICAgICAgZGVzdERpY3Quc2V0KCJBIiwgb2JqKTsKICAgICAgY29uc3QgcmVzdWx0T2JqID0gewogICAgICAgIHVybDogbnVsbCwKICAgICAgICBkZXN0OiBudWxsLAogICAgICAgIGFjdGlvbjogbnVsbAogICAgICB9OwogICAgICBDYXRhbG9nLnBhcnNlRGVzdERpY3Rpb25hcnkoewogICAgICAgIGRlc3REaWN0LAogICAgICAgIHJlc3VsdE9iagogICAgICB9KTsKICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0T2JqLmRlc3QpKSB7CiAgICAgICAgb3BlbkFjdGlvbi5kZXN0ID0gcmVzdWx0T2JqLmRlc3Q7CiAgICAgIH0gZWxzZSBpZiAocmVzdWx0T2JqLmFjdGlvbikgewogICAgICAgIG9wZW5BY3Rpb24uYWN0aW9uID0gcmVzdWx0T2JqLmFjdGlvbjsKICAgICAgfQogICAgfSBlbHNlIGlmIChpc1ZhbGlkRXhwbGljaXREZXN0KG9iaikpIHsKICAgICAgb3BlbkFjdGlvbi5kZXN0ID0gb2JqOwogICAgfQogICAgcmV0dXJuIHNoYWRvdyh0aGlzLCAib3BlbkFjdGlvbiIsIG9iamVjdFNpemUob3BlbkFjdGlvbikgPiAwID8gb3BlbkFjdGlvbiA6IG51bGwpOwogIH0KICBnZXQgYXR0YWNobWVudHMoKSB7CiAgICBjb25zdCBvYmogPSB0aGlzLiNjYXREaWN0LmdldCgiTmFtZXMiKTsKICAgIGxldCBhdHRhY2htZW50cyA9IG51bGw7CiAgICBpZiAob2JqIGluc3RhbmNlb2YgRGljdCAmJiBvYmouaGFzKCJFbWJlZGRlZEZpbGVzIikpIHsKICAgICAgY29uc3QgbmFtZVRyZWUgPSBuZXcgTmFtZVRyZWUob2JqLmdldFJhdygiRW1iZWRkZWRGaWxlcyIpLCB0aGlzLnhyZWYpOwogICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBuYW1lVHJlZS5nZXRBbGwoKSkgewogICAgICAgIGNvbnN0IGZzID0gbmV3IEZpbGVTcGVjKHZhbHVlLCB0aGlzLnhyZWYpOwogICAgICAgIGF0dGFjaG1lbnRzID8/PSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgICAgIGF0dGFjaG1lbnRzW3N0cmluZ1RvUERGU3RyaW5nKGtleSwgdHJ1ZSldID0gZnMuc2VyaWFsaXphYmxlOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gc2hhZG93KHRoaXMsICJhdHRhY2htZW50cyIsIGF0dGFjaG1lbnRzKTsKICB9CiAgZ2V0IHhmYUltYWdlcygpIHsKICAgIGNvbnN0IG9iaiA9IHRoaXMuI2NhdERpY3QuZ2V0KCJOYW1lcyIpOwogICAgbGV0IHhmYUltYWdlcyA9IG51bGw7CiAgICBpZiAob2JqIGluc3RhbmNlb2YgRGljdCAmJiBvYmouaGFzKCJYRkFJbWFnZXMiKSkgewogICAgICBjb25zdCBuYW1lVHJlZSA9IG5ldyBOYW1lVHJlZShvYmouZ2V0UmF3KCJYRkFJbWFnZXMiKSwgdGhpcy54cmVmKTsKICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgbmFtZVRyZWUuZ2V0QWxsKCkpIHsKICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBCYXNlU3RyZWFtKSB7CiAgICAgICAgICB4ZmFJbWFnZXMgPz89IG5ldyBNYXAoKTsKICAgICAgICAgIHhmYUltYWdlcy5zZXQoc3RyaW5nVG9QREZTdHJpbmcoa2V5LCB0cnVlKSwgdmFsdWUuZ2V0Qnl0ZXMoKSk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICByZXR1cm4gc2hhZG93KHRoaXMsICJ4ZmFJbWFnZXMiLCB4ZmFJbWFnZXMpOwogIH0KICAjY29sbGVjdEphdmFTY3JpcHQoKSB7CiAgICBjb25zdCBvYmogPSB0aGlzLiNjYXREaWN0LmdldCgiTmFtZXMiKTsKICAgIGxldCBqYXZhU2NyaXB0ID0gbnVsbDsKICAgIGZ1bmN0aW9uIGFwcGVuZElmSmF2YVNjcmlwdERpY3QobmFtZSwganNEaWN0KSB7CiAgICAgIGlmICghKGpzRGljdCBpbnN0YW5jZW9mIERpY3QpKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIGlmICghaXNOYW1lKGpzRGljdC5nZXQoIlMiKSwgIkphdmFTY3JpcHQiKSkgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBsZXQganMgPSBqc0RpY3QuZ2V0KCJKUyIpOwogICAgICBpZiAoanMgaW5zdGFuY2VvZiBCYXNlU3RyZWFtKSB7CiAgICAgICAganMgPSBqcy5nZXRTdHJpbmcoKTsKICAgICAgfSBlbHNlIGlmICh0eXBlb2YganMgIT09ICJzdHJpbmciKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIGpzID0gc3RyaW5nVG9QREZTdHJpbmcoanMsIHRydWUpLnJlcGxhY2VBbGwoIlx4MDAiLCAiIik7CiAgICAgIGlmIChqcykgewogICAgICAgIChqYXZhU2NyaXB0IHx8PSBuZXcgTWFwKCkpLnNldChuYW1lLCBqcyk7CiAgICAgIH0KICAgIH0KICAgIGlmIChvYmogaW5zdGFuY2VvZiBEaWN0ICYmIG9iai5oYXMoIkphdmFTY3JpcHQiKSkgewogICAgICBjb25zdCBuYW1lVHJlZSA9IG5ldyBOYW1lVHJlZShvYmouZ2V0UmF3KCJKYXZhU2NyaXB0IiksIHRoaXMueHJlZik7CiAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIG5hbWVUcmVlLmdldEFsbCgpKSB7CiAgICAgICAgYXBwZW5kSWZKYXZhU2NyaXB0RGljdChzdHJpbmdUb1BERlN0cmluZyhrZXksIHRydWUpLCB2YWx1ZSk7CiAgICAgIH0KICAgIH0KICAgIGNvbnN0IG9wZW5BY3Rpb24gPSB0aGlzLiNjYXREaWN0LmdldCgiT3BlbkFjdGlvbiIpOwogICAgaWYgKG9wZW5BY3Rpb24pIHsKICAgICAgYXBwZW5kSWZKYXZhU2NyaXB0RGljdCgiT3BlbkFjdGlvbiIsIG9wZW5BY3Rpb24pOwogICAgfQogICAgcmV0dXJuIGphdmFTY3JpcHQ7CiAgfQogIGdldCBqc0FjdGlvbnMoKSB7CiAgICBjb25zdCBqYXZhU2NyaXB0ID0gdGhpcy4jY29sbGVjdEphdmFTY3JpcHQoKTsKICAgIGxldCBhY3Rpb25zID0gY29sbGVjdEFjdGlvbnModGhpcy54cmVmLCB0aGlzLiNjYXREaWN0LCBEb2N1bWVudEFjdGlvbkV2ZW50VHlwZSk7CiAgICBpZiAoamF2YVNjcmlwdCkgewogICAgICBhY3Rpb25zIHx8PSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbF0gb2YgamF2YVNjcmlwdCkgewogICAgICAgIGlmIChrZXkgaW4gYWN0aW9ucykgewogICAgICAgICAgYWN0aW9uc1trZXldLnB1c2godmFsKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgYWN0aW9uc1trZXldID0gW3ZhbF07CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICByZXR1cm4gc2hhZG93KHRoaXMsICJqc0FjdGlvbnMiLCBhY3Rpb25zKTsKICB9CiAgYXN5bmMgY2xlYW51cChtYW51YWxseVRyaWdnZXJlZCA9IGZhbHNlKSB7CiAgICBjbGVhckdsb2JhbENhY2hlcygpOwogICAgdGhpcy5nbG9iYWxDb2xvclNwYWNlQ2FjaGUuY2xlYXIoKTsKICAgIHRoaXMuZ2xvYmFsSW1hZ2VDYWNoZS5jbGVhcihtYW51YWxseVRyaWdnZXJlZCk7CiAgICB0aGlzLnBhZ2VLaWRzQ291bnRDYWNoZS5jbGVhcigpOwogICAgdGhpcy5wYWdlSW5kZXhDYWNoZS5jbGVhcigpOwogICAgdGhpcy5wYWdlRGljdENhY2hlLmNsZWFyKCk7CiAgICB0aGlzLm5vbkJsZW5kTW9kZXNTZXQuY2xlYXIoKTsKICAgIGZvciAoY29uc3QgewogICAgICBkaWN0CiAgICB9IG9mIGF3YWl0IFByb21pc2UuYWxsKHRoaXMuZm9udENhY2hlKSkgewogICAgICBkZWxldGUgZGljdC5jYWNoZUtleTsKICAgIH0KICAgIHRoaXMuZm9udENhY2hlLmNsZWFyKCk7CiAgICB0aGlzLmJ1aWx0SW5DTWFwQ2FjaGUuY2xlYXIoKTsKICAgIHRoaXMuc3RhbmRhcmRGb250RGF0YUNhY2hlLmNsZWFyKCk7CiAgICB0aGlzLnN5c3RlbUZvbnRDYWNoZS5jbGVhcigpOwogIH0KICBhc3luYyBnZXRQYWdlRGljdChwYWdlSW5kZXgpIHsKICAgIGNvbnN0IG5vZGVzVG9WaXNpdCA9IFt0aGlzLnRvcGxldmVsUGFnZXNEaWN0XTsKICAgIGNvbnN0IHZpc2l0ZWROb2RlcyA9IG5ldyBSZWZTZXQoKTsKICAgIGNvbnN0IHBhZ2VzUmVmID0gdGhpcy4jY2F0RGljdC5nZXRSYXcoIlBhZ2VzIik7CiAgICBpZiAocGFnZXNSZWYgaW5zdGFuY2VvZiBSZWYpIHsKICAgICAgdmlzaXRlZE5vZGVzLnB1dChwYWdlc1JlZik7CiAgICB9CiAgICBjb25zdCB4cmVmID0gdGhpcy54cmVmLAogICAgICBwYWdlS2lkc0NvdW50Q2FjaGUgPSB0aGlzLnBhZ2VLaWRzQ291bnRDYWNoZSwKICAgICAgcGFnZUluZGV4Q2FjaGUgPSB0aGlzLnBhZ2VJbmRleENhY2hlLAogICAgICBwYWdlRGljdENhY2hlID0gdGhpcy5wYWdlRGljdENhY2hlOwogICAgbGV0IGN1cnJlbnRQYWdlSW5kZXggPSAwOwogICAgd2hpbGUgKG5vZGVzVG9WaXNpdC5sZW5ndGgpIHsKICAgICAgY29uc3QgY3VycmVudE5vZGUgPSBub2Rlc1RvVmlzaXQucG9wKCk7CiAgICAgIGlmIChjdXJyZW50Tm9kZSBpbnN0YW5jZW9mIFJlZikgewogICAgICAgIGNvbnN0IGNvdW50ID0gcGFnZUtpZHNDb3VudENhY2hlLmdldChjdXJyZW50Tm9kZSk7CiAgICAgICAgaWYgKGNvdW50ID49IDAgJiYgY3VycmVudFBhZ2VJbmRleCArIGNvdW50IDw9IHBhZ2VJbmRleCkgewogICAgICAgICAgY3VycmVudFBhZ2VJbmRleCArPSBjb3VudDsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgICBpZiAodmlzaXRlZE5vZGVzLmhhcyhjdXJyZW50Tm9kZSkpIHsKICAgICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigiUGFnZXMgdHJlZSBjb250YWlucyBjaXJjdWxhciByZWZlcmVuY2UuIik7CiAgICAgICAgfQogICAgICAgIHZpc2l0ZWROb2Rlcy5wdXQoY3VycmVudE5vZGUpOwogICAgICAgIGNvbnN0IG9iaiA9IGF3YWl0IChwYWdlRGljdENhY2hlLmdldChjdXJyZW50Tm9kZSkgfHwgeHJlZi5mZXRjaEFzeW5jKGN1cnJlbnROb2RlKSk7CiAgICAgICAgaWYgKG9iaiBpbnN0YW5jZW9mIERpY3QpIHsKICAgICAgICAgIGxldCB0eXBlID0gb2JqLmdldFJhdygiVHlwZSIpOwogICAgICAgICAgaWYgKHR5cGUgaW5zdGFuY2VvZiBSZWYpIHsKICAgICAgICAgICAgdHlwZSA9IGF3YWl0IHhyZWYuZmV0Y2hBc3luYyh0eXBlKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChpc05hbWUodHlwZSwgIlBhZ2UiKSB8fCAhb2JqLmhhcygiS2lkcyIpKSB7CiAgICAgICAgICAgIGlmICghcGFnZUtpZHNDb3VudENhY2hlLmhhcyhjdXJyZW50Tm9kZSkpIHsKICAgICAgICAgICAgICBwYWdlS2lkc0NvdW50Q2FjaGUucHV0KGN1cnJlbnROb2RlLCAxKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIXBhZ2VJbmRleENhY2hlLmhhcyhjdXJyZW50Tm9kZSkpIHsKICAgICAgICAgICAgICBwYWdlSW5kZXhDYWNoZS5wdXQoY3VycmVudE5vZGUsIGN1cnJlbnRQYWdlSW5kZXgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChjdXJyZW50UGFnZUluZGV4ID09PSBwYWdlSW5kZXgpIHsKICAgICAgICAgICAgICByZXR1cm4gW29iaiwgY3VycmVudE5vZGVdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGN1cnJlbnRQYWdlSW5kZXgrKzsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIG5vZGVzVG9WaXNpdC5wdXNoKG9iaik7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgaWYgKCEoY3VycmVudE5vZGUgaW5zdGFuY2VvZiBEaWN0KSkgewogICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigiUGFnZSBkaWN0aW9uYXJ5IGtpZCByZWZlcmVuY2UgcG9pbnRzIHRvIHdyb25nIHR5cGUgb2Ygb2JqZWN0LiIpOwogICAgICB9CiAgICAgIGNvbnN0IHsKICAgICAgICBvYmpJZAogICAgICB9ID0gY3VycmVudE5vZGU7CiAgICAgIGxldCBjb3VudCA9IGN1cnJlbnROb2RlLmdldFJhdygiQ291bnQiKTsKICAgICAgaWYgKGNvdW50IGluc3RhbmNlb2YgUmVmKSB7CiAgICAgICAgY291bnQgPSBhd2FpdCB4cmVmLmZldGNoQXN5bmMoY291bnQpOwogICAgICB9CiAgICAgIGlmIChOdW1iZXIuaXNJbnRlZ2VyKGNvdW50KSAmJiBjb3VudCA+PSAwKSB7CiAgICAgICAgaWYgKG9iaklkICYmICFwYWdlS2lkc0NvdW50Q2FjaGUuaGFzKG9iaklkKSkgewogICAgICAgICAgcGFnZUtpZHNDb3VudENhY2hlLnB1dChvYmpJZCwgY291bnQpOwogICAgICAgIH0KICAgICAgICBpZiAoY3VycmVudFBhZ2VJbmRleCArIGNvdW50IDw9IHBhZ2VJbmRleCkgewogICAgICAgICAgY3VycmVudFBhZ2VJbmRleCArPSBjb3VudDsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgfQogICAgICBsZXQga2lkcyA9IGN1cnJlbnROb2RlLmdldFJhdygiS2lkcyIpOwogICAgICBpZiAoa2lkcyBpbnN0YW5jZW9mIFJlZikgewogICAgICAgIGtpZHMgPSBhd2FpdCB4cmVmLmZldGNoQXN5bmMoa2lkcyk7CiAgICAgIH0KICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGtpZHMpKSB7CiAgICAgICAgbGV0IHR5cGUgPSBjdXJyZW50Tm9kZS5nZXRSYXcoIlR5cGUiKTsKICAgICAgICBpZiAodHlwZSBpbnN0YW5jZW9mIFJlZikgewogICAgICAgICAgdHlwZSA9IGF3YWl0IHhyZWYuZmV0Y2hBc3luYyh0eXBlKTsKICAgICAgICB9CiAgICAgICAgaWYgKGlzTmFtZSh0eXBlLCAiUGFnZSIpIHx8ICFjdXJyZW50Tm9kZS5oYXMoIktpZHMiKSkgewogICAgICAgICAgaWYgKGN1cnJlbnRQYWdlSW5kZXggPT09IHBhZ2VJbmRleCkgewogICAgICAgICAgICByZXR1cm4gW2N1cnJlbnROb2RlLCBudWxsXTsKICAgICAgICAgIH0KICAgICAgICAgIGN1cnJlbnRQYWdlSW5kZXgrKzsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoIlBhZ2UgZGljdGlvbmFyeSBraWRzIG9iamVjdCBpcyBub3QgYW4gYXJyYXkuIik7CiAgICAgIH0KICAgICAgZm9yIChsZXQgbGFzdCA9IGtpZHMubGVuZ3RoIC0gMTsgbGFzdCA+PSAwOyBsYXN0LS0pIHsKICAgICAgICBjb25zdCBsYXN0S2lkID0ga2lkc1tsYXN0XTsKICAgICAgICBub2Rlc1RvVmlzaXQucHVzaChsYXN0S2lkKTsKICAgICAgICBpZiAoY3VycmVudE5vZGUgPT09IHRoaXMudG9wbGV2ZWxQYWdlc0RpY3QgJiYgbGFzdEtpZCBpbnN0YW5jZW9mIFJlZiAmJiAhcGFnZURpY3RDYWNoZS5oYXMobGFzdEtpZCkpIHsKICAgICAgICAgIHBhZ2VEaWN0Q2FjaGUucHV0KGxhc3RLaWQsIHhyZWYuZmV0Y2hBc3luYyhsYXN0S2lkKSk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICB0aHJvdyBuZXcgRXJyb3IoYFBhZ2UgaW5kZXggJHtwYWdlSW5kZXh9IG5vdCBmb3VuZC5gKTsKICB9CiAgYXN5bmMgZ2V0QWxsUGFnZURpY3RzKHJlY292ZXJ5TW9kZSA9IGZhbHNlKSB7CiAgICBjb25zdCB7CiAgICAgIGlnbm9yZUVycm9ycwogICAgfSA9IHRoaXMucGRmTWFuYWdlci5ldmFsdWF0b3JPcHRpb25zOwogICAgY29uc3QgcXVldWUgPSBbewogICAgICBjdXJyZW50Tm9kZTogdGhpcy50b3BsZXZlbFBhZ2VzRGljdCwKICAgICAgcG9zSW5LaWRzOiAwCiAgICB9XTsKICAgIGNvbnN0IHZpc2l0ZWROb2RlcyA9IG5ldyBSZWZTZXQoKTsKICAgIGNvbnN0IHBhZ2VzUmVmID0gdGhpcy4jY2F0RGljdC5nZXRSYXcoIlBhZ2VzIik7CiAgICBpZiAocGFnZXNSZWYgaW5zdGFuY2VvZiBSZWYpIHsKICAgICAgdmlzaXRlZE5vZGVzLnB1dChwYWdlc1JlZik7CiAgICB9CiAgICBjb25zdCBtYXAgPSBuZXcgTWFwKCksCiAgICAgIHhyZWYgPSB0aGlzLnhyZWYsCiAgICAgIHBhZ2VJbmRleENhY2hlID0gdGhpcy5wYWdlSW5kZXhDYWNoZTsKICAgIGxldCBwYWdlSW5kZXggPSAwOwogICAgZnVuY3Rpb24gYWRkUGFnZURpY3QocGFnZURpY3QsIHBhZ2VSZWYpIHsKICAgICAgaWYgKHBhZ2VSZWYgJiYgIXBhZ2VJbmRleENhY2hlLmhhcyhwYWdlUmVmKSkgewogICAgICAgIHBhZ2VJbmRleENhY2hlLnB1dChwYWdlUmVmLCBwYWdlSW5kZXgpOwogICAgICB9CiAgICAgIG1hcC5zZXQocGFnZUluZGV4KyssIFtwYWdlRGljdCwgcGFnZVJlZl0pOwogICAgfQogICAgZnVuY3Rpb24gYWRkUGFnZUVycm9yKGVycm9yKSB7CiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIFhSZWZFbnRyeUV4Y2VwdGlvbiAmJiAhcmVjb3ZlcnlNb2RlKSB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0KICAgICAgaWYgKHJlY292ZXJ5TW9kZSAmJiBpZ25vcmVFcnJvcnMgJiYgcGFnZUluZGV4ID09PSAwKSB7CiAgICAgICAgd2FybihgZ2V0QWxsUGFnZURpY3RzIC0gU2tpcHBpbmcgaW52YWxpZCBmaXJzdCBwYWdlOiAiJHtlcnJvcn0iLmApOwogICAgICAgIGVycm9yID0gRGljdC5lbXB0eTsKICAgICAgfQogICAgICBtYXAuc2V0KHBhZ2VJbmRleCsrLCBbZXJyb3IsIG51bGxdKTsKICAgIH0KICAgIHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7CiAgICAgIGNvbnN0IHF1ZXVlSXRlbSA9IHF1ZXVlLmF0KC0xKTsKICAgICAgY29uc3QgewogICAgICAgIGN1cnJlbnROb2RlLAogICAgICAgIHBvc0luS2lkcwogICAgICB9ID0gcXVldWVJdGVtOwogICAgICBsZXQga2lkcyA9IGN1cnJlbnROb2RlLmdldFJhdygiS2lkcyIpOwogICAgICBpZiAoa2lkcyBpbnN0YW5jZW9mIFJlZikgewogICAgICAgIHRyeSB7CiAgICAgICAgICBraWRzID0gYXdhaXQgeHJlZi5mZXRjaEFzeW5jKGtpZHMpOwogICAgICAgIH0gY2F0Y2ggKGV4KSB7CiAgICAgICAgICBhZGRQYWdlRXJyb3IoZXgpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmICghQXJyYXkuaXNBcnJheShraWRzKSkgewogICAgICAgIGFkZFBhZ2VFcnJvcihuZXcgRm9ybWF0RXJyb3IoIlBhZ2UgZGljdGlvbmFyeSBraWRzIG9iamVjdCBpcyBub3QgYW4gYXJyYXkuIikpOwogICAgICAgIGJyZWFrOwogICAgICB9CiAgICAgIGlmIChwb3NJbktpZHMgPj0ga2lkcy5sZW5ndGgpIHsKICAgICAgICBxdWV1ZS5wb3AoKTsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBjb25zdCBraWRPYmogPSBraWRzW3Bvc0luS2lkc107CiAgICAgIGxldCBvYmo7CiAgICAgIGlmIChraWRPYmogaW5zdGFuY2VvZiBSZWYpIHsKICAgICAgICBpZiAodmlzaXRlZE5vZGVzLmhhcyhraWRPYmopKSB7CiAgICAgICAgICBhZGRQYWdlRXJyb3IobmV3IEZvcm1hdEVycm9yKCJQYWdlcyB0cmVlIGNvbnRhaW5zIGNpcmN1bGFyIHJlZmVyZW5jZS4iKSk7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgICAgdmlzaXRlZE5vZGVzLnB1dChraWRPYmopOwogICAgICAgIHRyeSB7CiAgICAgICAgICBvYmogPSBhd2FpdCB4cmVmLmZldGNoQXN5bmMoa2lkT2JqKTsKICAgICAgICB9IGNhdGNoIChleCkgewogICAgICAgICAgYWRkUGFnZUVycm9yKGV4KTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBvYmogPSBraWRPYmo7CiAgICAgIH0KICAgICAgaWYgKCEob2JqIGluc3RhbmNlb2YgRGljdCkpIHsKICAgICAgICBhZGRQYWdlRXJyb3IobmV3IEZvcm1hdEVycm9yKCJQYWdlIGRpY3Rpb25hcnkga2lkIHJlZmVyZW5jZSBwb2ludHMgdG8gd3JvbmcgdHlwZSBvZiBvYmplY3QuIikpOwogICAgICAgIGJyZWFrOwogICAgICB9CiAgICAgIGxldCB0eXBlID0gb2JqLmdldFJhdygiVHlwZSIpOwogICAgICBpZiAodHlwZSBpbnN0YW5jZW9mIFJlZikgewogICAgICAgIHRyeSB7CiAgICAgICAgICB0eXBlID0gYXdhaXQgeHJlZi5mZXRjaEFzeW5jKHR5cGUpOwogICAgICAgIH0gY2F0Y2ggKGV4KSB7CiAgICAgICAgICBhZGRQYWdlRXJyb3IoZXgpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmIChpc05hbWUodHlwZSwgIlBhZ2UiKSB8fCAhb2JqLmhhcygiS2lkcyIpKSB7CiAgICAgICAgYWRkUGFnZURpY3Qob2JqLCBraWRPYmogaW5zdGFuY2VvZiBSZWYgPyBraWRPYmogOiBudWxsKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBxdWV1ZS5wdXNoKHsKICAgICAgICAgIGN1cnJlbnROb2RlOiBvYmosCiAgICAgICAgICBwb3NJbktpZHM6IDAKICAgICAgICB9KTsKICAgICAgfQogICAgICBxdWV1ZUl0ZW0ucG9zSW5LaWRzKys7CiAgICB9CiAgICByZXR1cm4gbWFwOwogIH0KICBnZXRQYWdlSW5kZXgocGFnZVJlZikgewogICAgY29uc3QgY2FjaGVkUGFnZUluZGV4ID0gdGhpcy5wYWdlSW5kZXhDYWNoZS5nZXQocGFnZVJlZik7CiAgICBpZiAoY2FjaGVkUGFnZUluZGV4ICE9PSB1bmRlZmluZWQpIHsKICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShjYWNoZWRQYWdlSW5kZXgpOwogICAgfQogICAgY29uc3QgeHJlZiA9IHRoaXMueHJlZjsKICAgIGZ1bmN0aW9uIHBhZ2VzQmVmb3JlUmVmKGtpZFJlZikgewogICAgICBsZXQgdG90YWwgPSAwLAogICAgICAgIHBhcmVudFJlZjsKICAgICAgcmV0dXJuIHhyZWYuZmV0Y2hBc3luYyhraWRSZWYpLnRoZW4oZnVuY3Rpb24gKG5vZGUpIHsKICAgICAgICBpZiAoaXNSZWZzRXF1YWwoa2lkUmVmLCBwYWdlUmVmKSAmJiAhaXNEaWN0KG5vZGUsICJQYWdlIikgJiYgIShub2RlIGluc3RhbmNlb2YgRGljdCAmJiAhbm9kZS5oYXMoIlR5cGUiKSAmJiBub2RlLmhhcygiQ29udGVudHMiKSkpIHsKICAgICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigiVGhlIHJlZmVyZW5jZSBkb2VzIG5vdCBwb2ludCB0byBhIC9QYWdlIGRpY3Rpb25hcnkuIik7CiAgICAgICAgfQogICAgICAgIGlmICghbm9kZSkgewogICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQogICAgICAgIGlmICghKG5vZGUgaW5zdGFuY2VvZiBEaWN0KSkgewogICAgICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCJOb2RlIG11c3QgYmUgYSBkaWN0aW9uYXJ5LiIpOwogICAgICAgIH0KICAgICAgICBwYXJlbnRSZWYgPSBub2RlLmdldFJhdygiUGFyZW50Iik7CiAgICAgICAgcmV0dXJuIG5vZGUuZ2V0QXN5bmMoIlBhcmVudCIpOwogICAgICB9KS50aGVuKGZ1bmN0aW9uIChwYXJlbnQpIHsKICAgICAgICBpZiAoIXBhcmVudCkgewogICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQogICAgICAgIGlmICghKHBhcmVudCBpbnN0YW5jZW9mIERpY3QpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoIlBhcmVudCBtdXN0IGJlIGEgZGljdGlvbmFyeS4iKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHBhcmVudC5nZXRBc3luYygiS2lkcyIpOwogICAgICB9KS50aGVuKGZ1bmN0aW9uIChraWRzKSB7CiAgICAgICAgaWYgKCFraWRzKSB7CiAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CiAgICAgICAgY29uc3Qga2lkUHJvbWlzZXMgPSBbXTsKICAgICAgICBsZXQgZm91bmQgPSBmYWxzZTsKICAgICAgICBmb3IgKGNvbnN0IGtpZCBvZiBraWRzKSB7CiAgICAgICAgICBpZiAoIShraWQgaW5zdGFuY2VvZiBSZWYpKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigiS2lkIG11c3QgYmUgYSByZWZlcmVuY2UuIik7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoaXNSZWZzRXF1YWwoa2lkLCBraWRSZWYpKSB7CiAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgICBraWRQcm9taXNlcy5wdXNoKHhyZWYuZmV0Y2hBc3luYyhraWQpLnRoZW4oZnVuY3Rpb24gKG9iaikgewogICAgICAgICAgICBpZiAoIShvYmogaW5zdGFuY2VvZiBEaWN0KSkgewogICAgICAgICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigiS2lkIG5vZGUgbXVzdCBiZSBhIGRpY3Rpb25hcnkuIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKG9iai5oYXMoIkNvdW50IikpIHsKICAgICAgICAgICAgICB0b3RhbCArPSBvYmouZ2V0KCJDb3VudCIpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHRvdGFsKys7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFmb3VuZCkgewogICAgICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCJLaWQgcmVmZXJlbmNlIG5vdCBmb3VuZCBpbiBwYXJlbnQncyBraWRzLiIpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoa2lkUHJvbWlzZXMpLnRoZW4oKCkgPT4gW3RvdGFsLCBwYXJlbnRSZWZdKTsKICAgICAgfSk7CiAgICB9CiAgICBsZXQgdG90YWwgPSAwOwogICAgY29uc3QgbmV4dCA9IHJlZiA9PiBwYWdlc0JlZm9yZVJlZihyZWYpLnRoZW4oYXJncyA9PiB7CiAgICAgIGlmICghYXJncykgewogICAgICAgIHRoaXMucGFnZUluZGV4Q2FjaGUucHV0KHBhZ2VSZWYsIHRvdGFsKTsKICAgICAgICByZXR1cm4gdG90YWw7CiAgICAgIH0KICAgICAgY29uc3QgW2NvdW50LCBwYXJlbnRSZWZdID0gYXJnczsKICAgICAgdG90YWwgKz0gY291bnQ7CiAgICAgIHJldHVybiBuZXh0KHBhcmVudFJlZik7CiAgICB9KTsKICAgIHJldHVybiBuZXh0KHBhZ2VSZWYpOwogIH0KICBnZXQgYmFzZVVybCgpIHsKICAgIGNvbnN0IHVyaSA9IHRoaXMuI2NhdERpY3QuZ2V0KCJVUkkiKTsKICAgIGlmICh1cmkgaW5zdGFuY2VvZiBEaWN0KSB7CiAgICAgIGNvbnN0IGJhc2UgPSB1cmkuZ2V0KCJCYXNlIik7CiAgICAgIGlmICh0eXBlb2YgYmFzZSA9PT0gInN0cmluZyIpIHsKICAgICAgICBjb25zdCBhYnNvbHV0ZVVybCA9IGNyZWF0ZVZhbGlkQWJzb2x1dGVVcmwoYmFzZSwgbnVsbCwgewogICAgICAgICAgdHJ5Q29udmVydEVuY29kaW5nOiB0cnVlCiAgICAgICAgfSk7CiAgICAgICAgaWYgKGFic29sdXRlVXJsKSB7CiAgICAgICAgICByZXR1cm4gc2hhZG93KHRoaXMsICJiYXNlVXJsIiwgYWJzb2x1dGVVcmwuaHJlZik7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICByZXR1cm4gc2hhZG93KHRoaXMsICJiYXNlVXJsIiwgdGhpcy5wZGZNYW5hZ2VyLmRvY0Jhc2VVcmwpOwogIH0KICBzdGF0aWMgcGFyc2VEZXN0RGljdGlvbmFyeSh7CiAgICBkZXN0RGljdCwKICAgIHJlc3VsdE9iaiwKICAgIGRvY0Jhc2VVcmwgPSBudWxsLAogICAgZG9jQXR0YWNobWVudHMgPSBudWxsCiAgfSkgewogICAgaWYgKCEoZGVzdERpY3QgaW5zdGFuY2VvZiBEaWN0KSkgewogICAgICB3YXJuKCJwYXJzZURlc3REaWN0aW9uYXJ5OiBgZGVzdERpY3RgIG11c3QgYmUgYSBkaWN0aW9uYXJ5LiIpOwogICAgICByZXR1cm47CiAgICB9CiAgICBsZXQgYWN0aW9uID0gZGVzdERpY3QuZ2V0KCJBIiksCiAgICAgIHVybCwKICAgICAgZGVzdDsKICAgIGlmICghKGFjdGlvbiBpbnN0YW5jZW9mIERpY3QpKSB7CiAgICAgIGlmIChkZXN0RGljdC5oYXMoIkRlc3QiKSkgewogICAgICAgIGFjdGlvbiA9IGRlc3REaWN0LmdldCgiRGVzdCIpOwogICAgICB9IGVsc2UgewogICAgICAgIGFjdGlvbiA9IGRlc3REaWN0LmdldCgiQUEiKTsKICAgICAgICBpZiAoYWN0aW9uIGluc3RhbmNlb2YgRGljdCkgewogICAgICAgICAgaWYgKGFjdGlvbi5oYXMoIkQiKSkgewogICAgICAgICAgICBhY3Rpb24gPSBhY3Rpb24uZ2V0KCJEIik7CiAgICAgICAgICB9IGVsc2UgaWYgKGFjdGlvbi5oYXMoIlUiKSkgewogICAgICAgICAgICBhY3Rpb24gPSBhY3Rpb24uZ2V0KCJVIik7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBpZiAoYWN0aW9uIGluc3RhbmNlb2YgRGljdCkgewogICAgICBjb25zdCBhY3Rpb25UeXBlID0gYWN0aW9uLmdldCgiUyIpOwogICAgICBpZiAoIShhY3Rpb25UeXBlIGluc3RhbmNlb2YgTmFtZSkpIHsKICAgICAgICB3YXJuKCJwYXJzZURlc3REaWN0aW9uYXJ5OiBJbnZhbGlkIHR5cGUgaW4gQWN0aW9uIGRpY3Rpb25hcnkuIik7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIGNvbnN0IGFjdGlvbk5hbWUgPSBhY3Rpb25UeXBlLm5hbWU7CiAgICAgIHN3aXRjaCAoYWN0aW9uTmFtZSkgewogICAgICAgIGNhc2UgIlJlc2V0Rm9ybSI6CiAgICAgICAgICBjb25zdCBmbGFncyA9IGFjdGlvbi5nZXQoIkZsYWdzIik7CiAgICAgICAgICBjb25zdCBpbmNsdWRlID0gKCh0eXBlb2YgZmxhZ3MgPT09ICJudW1iZXIiID8gZmxhZ3MgOiAwKSAmIDEpID09PSAwOwogICAgICAgICAgY29uc3QgZmllbGRzID0gW107CiAgICAgICAgICBjb25zdCByZWZzID0gW107CiAgICAgICAgICBmb3IgKGNvbnN0IG9iaiBvZiBhY3Rpb24uZ2V0KCJGaWVsZHMiKSB8fCBbXSkgewogICAgICAgICAgICBpZiAob2JqIGluc3RhbmNlb2YgUmVmKSB7CiAgICAgICAgICAgICAgcmVmcy5wdXNoKG9iai50b1N0cmluZygpKTsKICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqID09PSAic3RyaW5nIikgewogICAgICAgICAgICAgIGZpZWxkcy5wdXNoKHN0cmluZ1RvUERGU3RyaW5nKG9iaikpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICByZXN1bHRPYmoucmVzZXRGb3JtID0gewogICAgICAgICAgICBmaWVsZHMsCiAgICAgICAgICAgIHJlZnMsCiAgICAgICAgICAgIGluY2x1ZGUKICAgICAgICAgIH07CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJVUkkiOgogICAgICAgICAgdXJsID0gYWN0aW9uLmdldCgiVVJJIik7CiAgICAgICAgICBpZiAodXJsIGluc3RhbmNlb2YgTmFtZSkgewogICAgICAgICAgICB1cmwgPSAiLyIgKyB1cmwubmFtZTsKICAgICAgICAgIH0KICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgIkdvVG8iOgogICAgICAgICAgZGVzdCA9IGFjdGlvbi5nZXQoIkQiKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgIkxhdW5jaCI6CiAgICAgICAgY2FzZSAiR29Ub1IiOgogICAgICAgICAgY29uc3QgdXJsRGljdCA9IGFjdGlvbi5nZXQoIkYiKTsKICAgICAgICAgIGlmICh1cmxEaWN0IGluc3RhbmNlb2YgRGljdCkgewogICAgICAgICAgICBjb25zdCBmcyA9IG5ldyBGaWxlU3BlYyh1cmxEaWN0LCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgY29uc3QgewogICAgICAgICAgICAgIHJhd0ZpbGVuYW1lCiAgICAgICAgICAgIH0gPSBmcy5zZXJpYWxpemFibGU7CiAgICAgICAgICAgIHVybCA9IHJhd0ZpbGVuYW1lOwogICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdXJsRGljdCA9PT0gInN0cmluZyIpIHsKICAgICAgICAgICAgdXJsID0gdXJsRGljdDsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IHJlbW90ZURlc3QgPSBmZXRjaFJlbW90ZURlc3QoYWN0aW9uKTsKICAgICAgICAgIGlmIChyZW1vdGVEZXN0ICYmIHR5cGVvZiB1cmwgPT09ICJzdHJpbmciKSB7CiAgICAgICAgICAgIHVybCA9IHVybC5zcGxpdCgiIyIsIDEpWzBdICsgIiMiICsgcmVtb3RlRGVzdDsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IG5ld1dpbmRvdyA9IGFjdGlvbi5nZXQoIk5ld1dpbmRvdyIpOwogICAgICAgICAgaWYgKHR5cGVvZiBuZXdXaW5kb3cgPT09ICJib29sZWFuIikgewogICAgICAgICAgICByZXN1bHRPYmoubmV3V2luZG93ID0gbmV3V2luZG93OwogICAgICAgICAgfQogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAiR29Ub0UiOgogICAgICAgICAgY29uc3QgdGFyZ2V0ID0gYWN0aW9uLmdldCgiVCIpOwogICAgICAgICAgbGV0IGF0dGFjaG1lbnQ7CiAgICAgICAgICBpZiAoZG9jQXR0YWNobWVudHMgJiYgdGFyZ2V0IGluc3RhbmNlb2YgRGljdCkgewogICAgICAgICAgICBjb25zdCByZWxhdGlvbnNoaXAgPSB0YXJnZXQuZ2V0KCJSIik7CiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSB0YXJnZXQuZ2V0KCJOIik7CiAgICAgICAgICAgIGlmIChpc05hbWUocmVsYXRpb25zaGlwLCAiQyIpICYmIHR5cGVvZiBuYW1lID09PSAic3RyaW5nIikgewogICAgICAgICAgICAgIGF0dGFjaG1lbnQgPSBkb2NBdHRhY2htZW50c1tzdHJpbmdUb1BERlN0cmluZyhuYW1lLCB0cnVlKV07CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmIChhdHRhY2htZW50KSB7CiAgICAgICAgICAgIHJlc3VsdE9iai5hdHRhY2htZW50ID0gYXR0YWNobWVudDsKICAgICAgICAgICAgY29uc3QgYXR0YWNobWVudERlc3QgPSBmZXRjaFJlbW90ZURlc3QoYWN0aW9uKTsKICAgICAgICAgICAgaWYgKGF0dGFjaG1lbnREZXN0KSB7CiAgICAgICAgICAgICAgcmVzdWx0T2JqLmF0dGFjaG1lbnREZXN0ID0gYXR0YWNobWVudERlc3Q7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHdhcm4oYHBhcnNlRGVzdERpY3Rpb25hcnkgLSB1bmltcGxlbWVudGVkICJHb1RvRSIgYWN0aW9uLmApOwogICAgICAgICAgfQogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAiTmFtZWQiOgogICAgICAgICAgY29uc3QgbmFtZWRBY3Rpb24gPSBhY3Rpb24uZ2V0KCJOIik7CiAgICAgICAgICBpZiAobmFtZWRBY3Rpb24gaW5zdGFuY2VvZiBOYW1lKSB7CiAgICAgICAgICAgIHJlc3VsdE9iai5hY3Rpb24gPSBuYW1lZEFjdGlvbi5uYW1lOwogICAgICAgICAgfQogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAiU2V0T0NHU3RhdGUiOgogICAgICAgICAgY29uc3Qgc3RhdGUgPSBhY3Rpb24uZ2V0KCJTdGF0ZSIpOwogICAgICAgICAgY29uc3QgcHJlc2VydmVSQiA9IGFjdGlvbi5nZXQoIlByZXNlcnZlUkIiKTsKICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShzdGF0ZSkgfHwgc3RhdGUubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgICAgY29uc3Qgc3RhdGVBcnIgPSBbXTsKICAgICAgICAgIGZvciAoY29uc3QgZWxlbSBvZiBzdGF0ZSkgewogICAgICAgICAgICBpZiAoZWxlbSBpbnN0YW5jZW9mIE5hbWUpIHsKICAgICAgICAgICAgICBzd2l0Y2ggKGVsZW0ubmFtZSkgewogICAgICAgICAgICAgICAgY2FzZSAiT04iOgogICAgICAgICAgICAgICAgY2FzZSAiT0ZGIjoKICAgICAgICAgICAgICAgIGNhc2UgIlRvZ2dsZSI6CiAgICAgICAgICAgICAgICAgIHN0YXRlQXJyLnB1c2goZWxlbS5uYW1lKTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgaWYgKGVsZW0gaW5zdGFuY2VvZiBSZWYpIHsKICAgICAgICAgICAgICBzdGF0ZUFyci5wdXNoKGVsZW0udG9TdHJpbmcoKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmIChzdGF0ZUFyci5sZW5ndGggIT09IHN0YXRlLmxlbmd0aCkgewogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICAgIHJlc3VsdE9iai5zZXRPQ0dTdGF0ZSA9IHsKICAgICAgICAgICAgc3RhdGU6IHN0YXRlQXJyLAogICAgICAgICAgICBwcmVzZXJ2ZVJCOiB0eXBlb2YgcHJlc2VydmVSQiA9PT0gImJvb2xlYW4iID8gcHJlc2VydmVSQiA6IHRydWUKICAgICAgICAgIH07CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJKYXZhU2NyaXB0IjoKICAgICAgICAgIGNvbnN0IGpzQWN0aW9uID0gYWN0aW9uLmdldCgiSlMiKTsKICAgICAgICAgIGxldCBqczsKICAgICAgICAgIGlmIChqc0FjdGlvbiBpbnN0YW5jZW9mIEJhc2VTdHJlYW0pIHsKICAgICAgICAgICAganMgPSBqc0FjdGlvbi5nZXRTdHJpbmcoKTsKICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGpzQWN0aW9uID09PSAic3RyaW5nIikgewogICAgICAgICAgICBqcyA9IGpzQWN0aW9uOwogICAgICAgICAgfQogICAgICAgICAgY29uc3QganNVUkwgPSBqcyAmJiByZWNvdmVySnNVUkwoc3RyaW5nVG9QREZTdHJpbmcoanMsIHRydWUpKTsKICAgICAgICAgIGlmIChqc1VSTCkgewogICAgICAgICAgICB1cmwgPSBqc1VSTC51cmw7CiAgICAgICAgICAgIHJlc3VsdE9iai5uZXdXaW5kb3cgPSBqc1VSTC5uZXdXaW5kb3c7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICBpZiAoYWN0aW9uTmFtZSA9PT0gIkphdmFTY3JpcHQiIHx8IGFjdGlvbk5hbWUgPT09ICJTdWJtaXRGb3JtIikgewogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICAgIHdhcm4oYHBhcnNlRGVzdERpY3Rpb25hcnkgLSB1bnN1cHBvcnRlZCBhY3Rpb246ICIke2FjdGlvbk5hbWV9Ii5gKTsKICAgICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9IGVsc2UgaWYgKGRlc3REaWN0LmhhcygiRGVzdCIpKSB7CiAgICAgIGRlc3QgPSBkZXN0RGljdC5nZXQoIkRlc3QiKTsKICAgIH0KICAgIGlmICh0eXBlb2YgdXJsID09PSAic3RyaW5nIikgewogICAgICBjb25zdCBhYnNvbHV0ZVVybCA9IGNyZWF0ZVZhbGlkQWJzb2x1dGVVcmwodXJsLCBkb2NCYXNlVXJsLCB7CiAgICAgICAgYWRkRGVmYXVsdFByb3RvY29sOiB0cnVlLAogICAgICAgIHRyeUNvbnZlcnRFbmNvZGluZzogdHJ1ZQogICAgICB9KTsKICAgICAgaWYgKGFic29sdXRlVXJsKSB7CiAgICAgICAgcmVzdWx0T2JqLnVybCA9IGFic29sdXRlVXJsLmhyZWY7CiAgICAgIH0KICAgICAgcmVzdWx0T2JqLnVuc2FmZVVybCA9IHVybDsKICAgIH0KICAgIGlmIChkZXN0KSB7CiAgICAgIGlmIChkZXN0IGluc3RhbmNlb2YgTmFtZSkgewogICAgICAgIGRlc3QgPSBkZXN0Lm5hbWU7CiAgICAgIH0KICAgICAgaWYgKHR5cGVvZiBkZXN0ID09PSAic3RyaW5nIikgewogICAgICAgIHJlc3VsdE9iai5kZXN0ID0gc3RyaW5nVG9QREZTdHJpbmcoZGVzdCwgdHJ1ZSk7CiAgICAgIH0gZWxzZSBpZiAoaXNWYWxpZEV4cGxpY2l0RGVzdChkZXN0KSkgewogICAgICAgIHJlc3VsdE9iai5kZXN0ID0gZGVzdDsKICAgICAgfQogICAgfQogIH0KfQoKOy8vIC4vc3JjL2NvcmUvb2JqZWN0X2xvYWRlci5qcwoKCgoKCmZ1bmN0aW9uIG1heUhhdmVDaGlsZHJlbih2YWx1ZSkgewogIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFJlZiB8fCB2YWx1ZSBpbnN0YW5jZW9mIERpY3QgfHwgdmFsdWUgaW5zdGFuY2VvZiBCYXNlU3RyZWFtIHx8IEFycmF5LmlzQXJyYXkodmFsdWUpOwp9CmZ1bmN0aW9uIGFkZENoaWxkcmVuKG5vZGUsIG5vZGVzVG9WaXNpdCkgewogIGlmIChub2RlIGluc3RhbmNlb2YgRGljdCkgewogICAgbm9kZSA9IG5vZGUuZ2V0UmF3VmFsdWVzKCk7CiAgfSBlbHNlIGlmIChub2RlIGluc3RhbmNlb2YgQmFzZVN0cmVhbSkgewogICAgbm9kZSA9IG5vZGUuZGljdC5nZXRSYXdWYWx1ZXMoKTsKICB9IGVsc2UgaWYgKCFBcnJheS5pc0FycmF5KG5vZGUpKSB7CiAgICByZXR1cm47CiAgfQogIGZvciAoY29uc3QgcmF3VmFsdWUgb2Ygbm9kZSkgewogICAgaWYgKG1heUhhdmVDaGlsZHJlbihyYXdWYWx1ZSkpIHsKICAgICAgbm9kZXNUb1Zpc2l0LnB1c2gocmF3VmFsdWUpOwogICAgfQogIH0KfQpjbGFzcyBPYmplY3RMb2FkZXIgewogIHJlZlNldCA9IG5ldyBSZWZTZXQoKTsKICBjb25zdHJ1Y3RvcihkaWN0LCBrZXlzLCB4cmVmKSB7CiAgICB0aGlzLmRpY3QgPSBkaWN0OwogICAgdGhpcy5rZXlzID0ga2V5czsKICAgIHRoaXMueHJlZiA9IHhyZWY7CiAgfQogIGFzeW5jIGxvYWQoKSB7CiAgICBjb25zdCB7CiAgICAgIGtleXMsCiAgICAgIGRpY3QKICAgIH0gPSB0aGlzOwogICAgY29uc3Qgbm9kZXNUb1Zpc2l0ID0gW107CiAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7CiAgICAgIGNvbnN0IHJhd1ZhbHVlID0gZGljdC5nZXRSYXcoa2V5KTsKICAgICAgaWYgKHJhd1ZhbHVlICE9PSB1bmRlZmluZWQpIHsKICAgICAgICBub2Rlc1RvVmlzaXQucHVzaChyYXdWYWx1ZSk7CiAgICAgIH0KICAgIH0KICAgIGF3YWl0IHRoaXMuI3dhbGsobm9kZXNUb1Zpc2l0KTsKICAgIHRoaXMucmVmU2V0ID0gbnVsbDsKICB9CiAgYXN5bmMgI3dhbGsobm9kZXNUb1Zpc2l0KSB7CiAgICBjb25zdCBub2Rlc1RvUmV2aXNpdCA9IFtdOwogICAgY29uc3QgcGVuZGluZ1JlcXVlc3RzID0gW107CiAgICB3aGlsZSAobm9kZXNUb1Zpc2l0Lmxlbmd0aCkgewogICAgICBsZXQgY3VycmVudE5vZGUgPSBub2Rlc1RvVmlzaXQucG9wKCk7CiAgICAgIGlmIChjdXJyZW50Tm9kZSBpbnN0YW5jZW9mIFJlZikgewogICAgICAgIGlmICh0aGlzLnJlZlNldC5oYXMoY3VycmVudE5vZGUpKSB7CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CiAgICAgICAgdHJ5IHsKICAgICAgICAgIHRoaXMucmVmU2V0LnB1dChjdXJyZW50Tm9kZSk7CiAgICAgICAgICBjdXJyZW50Tm9kZSA9IHRoaXMueHJlZi5mZXRjaChjdXJyZW50Tm9kZSk7CiAgICAgICAgfSBjYXRjaCAoZXgpIHsKICAgICAgICAgIGlmICghKGV4IGluc3RhbmNlb2YgTWlzc2luZ0RhdGFFeGNlcHRpb24pKSB7CiAgICAgICAgICAgIHdhcm4oYE9iamVjdExvYWRlci4jd2FsayAtIHJlcXVlc3RpbmcgYWxsIGRhdGE6ICIke2V4fSIuYCk7CiAgICAgICAgICAgIGF3YWl0IHRoaXMueHJlZi5zdHJlYW0ubWFuYWdlci5yZXF1ZXN0QWxsQ2h1bmtzKCk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KICAgICAgICAgIG5vZGVzVG9SZXZpc2l0LnB1c2goY3VycmVudE5vZGUpOwogICAgICAgICAgcGVuZGluZ1JlcXVlc3RzLnB1c2goewogICAgICAgICAgICBiZWdpbjogZXguYmVnaW4sCiAgICAgICAgICAgIGVuZDogZXguZW5kCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKGN1cnJlbnROb2RlIGluc3RhbmNlb2YgQmFzZVN0cmVhbSkgewogICAgICAgIGNvbnN0IGJhc2VTdHJlYW1zID0gY3VycmVudE5vZGUuZ2V0QmFzZVN0cmVhbXMoKTsKICAgICAgICBpZiAoYmFzZVN0cmVhbXMpIHsKICAgICAgICAgIGxldCBmb3VuZE1pc3NpbmdEYXRhID0gZmFsc2U7CiAgICAgICAgICBmb3IgKGNvbnN0IHN0cmVhbSBvZiBiYXNlU3RyZWFtcykgewogICAgICAgICAgICBpZiAoc3RyZWFtLmlzRGF0YUxvYWRlZCkgewogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvdW5kTWlzc2luZ0RhdGEgPSB0cnVlOwogICAgICAgICAgICBwZW5kaW5nUmVxdWVzdHMucHVzaCh7CiAgICAgICAgICAgICAgYmVnaW46IHN0cmVhbS5zdGFydCwKICAgICAgICAgICAgICBlbmQ6IHN0cmVhbS5lbmQKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoZm91bmRNaXNzaW5nRGF0YSkgewogICAgICAgICAgICBub2Rlc1RvUmV2aXNpdC5wdXNoKGN1cnJlbnROb2RlKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgYWRkQ2hpbGRyZW4oY3VycmVudE5vZGUsIG5vZGVzVG9WaXNpdCk7CiAgICB9CiAgICBpZiAocGVuZGluZ1JlcXVlc3RzLmxlbmd0aCkgewogICAgICBhd2FpdCB0aGlzLnhyZWYuc3RyZWFtLm1hbmFnZXIucmVxdWVzdFJhbmdlcyhwZW5kaW5nUmVxdWVzdHMpOwogICAgICBmb3IgKGNvbnN0IG5vZGUgb2Ygbm9kZXNUb1JldmlzaXQpIHsKICAgICAgICBpZiAobm9kZSBpbnN0YW5jZW9mIFJlZikgewogICAgICAgICAgdGhpcy5yZWZTZXQucmVtb3ZlKG5vZGUpOwogICAgICAgIH0KICAgICAgfQogICAgICBhd2FpdCB0aGlzLiN3YWxrKG5vZGVzVG9SZXZpc2l0KTsKICAgIH0KICB9CiAgc3RhdGljIGFzeW5jIGxvYWQob2JqLCBrZXlzLCB4cmVmKSB7CiAgICBpZiAoeHJlZi5zdHJlYW0uaXNEYXRhTG9hZGVkKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGNvbnN0IG9iakxvYWRlciA9IG5ldyBPYmplY3RMb2FkZXIob2JqLCBrZXlzLCB4cmVmKTsKICAgIGF3YWl0IG9iakxvYWRlci5sb2FkKCk7CiAgfQp9Cgo7Ly8gLi9zcmMvY29yZS94ZmEvc3ltYm9sX3V0aWxzLmpzCmNvbnN0ICRhY2NlcHRXaGl0ZXNwYWNlID0gU3ltYm9sKCk7CmNvbnN0ICRhZGRIVE1MID0gU3ltYm9sKCk7CmNvbnN0ICRhcHBlbmRDaGlsZCA9IFN5bWJvbCgpOwpjb25zdCAkY2hpbGRyZW5Ub0hUTUwgPSBTeW1ib2woKTsKY29uc3QgJGNsZWFuID0gU3ltYm9sKCk7CmNvbnN0ICRjbGVhblBhZ2UgPSBTeW1ib2woKTsKY29uc3QgJGNsZWFudXAgPSBTeW1ib2woKTsKY29uc3QgJGNsb25lID0gU3ltYm9sKCk7CmNvbnN0ICRjb25zdW1lZCA9IFN5bWJvbCgpOwpjb25zdCAkY29udGVudCA9IFN5bWJvbCgiY29udGVudCIpOwpjb25zdCAkZGF0YSA9IFN5bWJvbCgiZGF0YSIpOwpjb25zdCAkZHVtcCA9IFN5bWJvbCgpOwpjb25zdCAkZXh0cmEgPSBTeW1ib2woImV4dHJhIik7CmNvbnN0ICRmaW5hbGl6ZSA9IFN5bWJvbCgpOwpjb25zdCAkZmx1c2hIVE1MID0gU3ltYm9sKCk7CmNvbnN0ICRnZXRBdHRyaWJ1dGVJdCA9IFN5bWJvbCgpOwpjb25zdCAkZ2V0QXR0cmlidXRlcyA9IFN5bWJvbCgpOwpjb25zdCAkZ2V0QXZhaWxhYmxlU3BhY2UgPSBTeW1ib2woKTsKY29uc3QgJGdldENoaWxkcmVuQnlDbGFzcyA9IFN5bWJvbCgpOwpjb25zdCAkZ2V0Q2hpbGRyZW5CeU5hbWUgPSBTeW1ib2woKTsKY29uc3QgJGdldENoaWxkcmVuQnlOYW1lSXQgPSBTeW1ib2woKTsKY29uc3QgJGdldERhdGFWYWx1ZSA9IFN5bWJvbCgpOwpjb25zdCAkZ2V0RXh0cmEgPSBTeW1ib2woKTsKY29uc3QgJGdldFJlYWxDaGlsZHJlbkJ5TmFtZUl0ID0gU3ltYm9sKCk7CmNvbnN0ICRnZXRDaGlsZHJlbiA9IFN5bWJvbCgpOwpjb25zdCAkZ2V0Q29udGFpbmVkQ2hpbGRyZW4gPSBTeW1ib2woKTsKY29uc3QgJGdldE5leHRQYWdlID0gU3ltYm9sKCk7CmNvbnN0ICRnZXRTdWJmb3JtUGFyZW50ID0gU3ltYm9sKCk7CmNvbnN0ICRnZXRQYXJlbnQgPSBTeW1ib2woKTsKY29uc3QgJGdldFRlbXBsYXRlUm9vdCA9IFN5bWJvbCgpOwpjb25zdCAkZ2xvYmFsRGF0YSA9IFN5bWJvbCgpOwpjb25zdCAkaGFzU2V0dGFibGVWYWx1ZSA9IFN5bWJvbCgpOwpjb25zdCAkaWRzID0gU3ltYm9sKCk7CmNvbnN0ICRpbmRleE9mID0gU3ltYm9sKCk7CmNvbnN0ICRpbnNlcnRBdCA9IFN5bWJvbCgpOwpjb25zdCAkaXNDREFUQVhtbCA9IFN5bWJvbCgpOwpjb25zdCAkaXNCaW5kYWJsZSA9IFN5bWJvbCgpOwpjb25zdCAkaXNEYXRhVmFsdWUgPSBTeW1ib2woKTsKY29uc3QgJGlzRGVzY2VuZGVudCA9IFN5bWJvbCgpOwpjb25zdCAkaXNOc0Fnbm9zdGljID0gU3ltYm9sKCk7CmNvbnN0ICRpc1NwbGl0dGFibGUgPSBTeW1ib2woKTsKY29uc3QgJGlzVGhlcmVNb3JlV2lkdGggPSBTeW1ib2woKTsKY29uc3QgJGlzVHJhbnNwYXJlbnQgPSBTeW1ib2woKTsKY29uc3QgJGlzVXNhYmxlID0gU3ltYm9sKCk7CmNvbnN0ICRsYXN0QXR0cmlidXRlID0gU3ltYm9sKCk7CmNvbnN0ICRuYW1lc3BhY2VJZCA9IFN5bWJvbCgibmFtZXNwYWNlSWQiKTsKY29uc3QgJG5vZGVOYW1lID0gU3ltYm9sKCJub2RlTmFtZSIpOwpjb25zdCAkbnNBdHRyaWJ1dGVzID0gU3ltYm9sKCk7CmNvbnN0ICRvbkNoaWxkID0gU3ltYm9sKCk7CmNvbnN0ICRvbkNoaWxkQ2hlY2sgPSBTeW1ib2woKTsKY29uc3QgJG9uVGV4dCA9IFN5bWJvbCgpOwpjb25zdCAkcHVzaEdseXBocyA9IFN5bWJvbCgpOwpjb25zdCAkcG9wUGFyYSA9IFN5bWJvbCgpOwpjb25zdCAkcHVzaFBhcmEgPSBTeW1ib2woKTsKY29uc3QgJHJlbW92ZUNoaWxkID0gU3ltYm9sKCk7CmNvbnN0ICRyb290ID0gU3ltYm9sKCJyb290Iik7CmNvbnN0ICRyZXNvbHZlUHJvdG90eXBlcyA9IFN5bWJvbCgpOwpjb25zdCAkc2VhcmNoTm9kZSA9IFN5bWJvbCgpOwpjb25zdCAkc2V0SWQgPSBTeW1ib2woKTsKY29uc3QgJHNldFNldEF0dHJpYnV0ZXMgPSBTeW1ib2woKTsKY29uc3QgJHNldFZhbHVlID0gU3ltYm9sKCk7CmNvbnN0ICR0YWJJbmRleCA9IFN5bWJvbCgpOwpjb25zdCAkdGV4dCA9IFN5bWJvbCgpOwpjb25zdCAkdG9QYWdlcyA9IFN5bWJvbCgpOwpjb25zdCAkdG9IVE1MID0gU3ltYm9sKCk7CmNvbnN0ICR0b1N0cmluZyA9IFN5bWJvbCgpOwpjb25zdCAkdG9TdHlsZSA9IFN5bWJvbCgpOwpjb25zdCAkdWlkID0gU3ltYm9sKCJ1aWQiKTsKCi8vIEVYVEVSTkFMIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLml0ZXJhdG9yLmZsYXQtbWFwLmpzCnZhciBlc19pdGVyYXRvcl9mbGF0X21hcCA9IF9fd2VicGFja19yZXF1aXJlX18oNTMxKTsKOy8vIC4vc3JjL2NvcmUveGZhL25hbWVzcGFjZXMuanMKY29uc3QgJGJ1aWxkWEZBT2JqZWN0ID0gU3ltYm9sKCk7CmNvbnN0IE5hbWVzcGFjZUlkcyA9IHsKICBjb25maWc6IHsKICAgIGlkOiAwLAogICAgY2hlY2s6IG5zID0+IG5zLnN0YXJ0c1dpdGgoImh0dHA6Ly93d3cueGZhLm9yZy9zY2hlbWEveGNpLyIpCiAgfSwKICBjb25uZWN0aW9uU2V0OiB7CiAgICBpZDogMSwKICAgIGNoZWNrOiBucyA9PiBucy5zdGFydHNXaXRoKCJodHRwOi8vd3d3LnhmYS5vcmcvc2NoZW1hL3hmYS1jb25uZWN0aW9uLXNldC8iKQogIH0sCiAgZGF0YXNldHM6IHsKICAgIGlkOiAyLAogICAgY2hlY2s6IG5zID0+IG5zLnN0YXJ0c1dpdGgoImh0dHA6Ly93d3cueGZhLm9yZy9zY2hlbWEveGZhLWRhdGEvIikKICB9LAogIGZvcm06IHsKICAgIGlkOiAzLAogICAgY2hlY2s6IG5zID0+IG5zLnN0YXJ0c1dpdGgoImh0dHA6Ly93d3cueGZhLm9yZy9zY2hlbWEveGZhLWZvcm0vIikKICB9LAogIGxvY2FsZVNldDogewogICAgaWQ6IDQsCiAgICBjaGVjazogbnMgPT4gbnMuc3RhcnRzV2l0aCgiaHR0cDovL3d3dy54ZmEub3JnL3NjaGVtYS94ZmEtbG9jYWxlLXNldC8iKQogIH0sCiAgcGRmOiB7CiAgICBpZDogNSwKICAgIGNoZWNrOiBucyA9PiBucyA9PT0gImh0dHA6Ly9ucy5hZG9iZS5jb20veGRwL3BkZi8iCiAgfSwKICBzaWduYXR1cmU6IHsKICAgIGlkOiA2LAogICAgY2hlY2s6IG5zID0+IG5zID09PSAiaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyIKICB9LAogIHNvdXJjZVNldDogewogICAgaWQ6IDcsCiAgICBjaGVjazogbnMgPT4gbnMuc3RhcnRzV2l0aCgiaHR0cDovL3d3dy54ZmEub3JnL3NjaGVtYS94ZmEtc291cmNlLXNldC8iKQogIH0sCiAgc3R5bGVzaGVldDogewogICAgaWQ6IDgsCiAgICBjaGVjazogbnMgPT4gbnMgPT09ICJodHRwOi8vd3d3LnczLm9yZy8xOTk5L1hTTC9UcmFuc2Zvcm0iCiAgfSwKICB0ZW1wbGF0ZTogewogICAgaWQ6IDksCiAgICBjaGVjazogbnMgPT4gbnMuc3RhcnRzV2l0aCgiaHR0cDovL3d3dy54ZmEub3JnL3NjaGVtYS94ZmEtdGVtcGxhdGUvIikKICB9LAogIHhkYzogewogICAgaWQ6IDEwLAogICAgY2hlY2s6IG5zID0+IG5zLnN0YXJ0c1dpdGgoImh0dHA6Ly93d3cueGZhLm9yZy9zY2hlbWEveGRjLyIpCiAgfSwKICB4ZHA6IHsKICAgIGlkOiAxMSwKICAgIGNoZWNrOiBucyA9PiBucyA9PT0gImh0dHA6Ly9ucy5hZG9iZS5jb20veGRwLyIKICB9LAogIHhmZGY6IHsKICAgIGlkOiAxMiwKICAgIGNoZWNrOiBucyA9PiBucyA9PT0gImh0dHA6Ly9ucy5hZG9iZS5jb20veGZkZi8iCiAgfSwKICB4aHRtbDogewogICAgaWQ6IDEzLAogICAgY2hlY2s6IG5zID0+IG5zID09PSAiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCIKICB9LAogIHhtcG1ldGE6IHsKICAgIGlkOiAxNCwKICAgIGNoZWNrOiBucyA9PiBucyA9PT0gImh0dHA6Ly9ucy5hZG9iZS5jb20veG1wbWV0YS8iCiAgfQp9OwoKOy8vIC4vc3JjL2NvcmUveGZhL3V0aWxzLmpzCgoKCgoKY29uc3QgZGltQ29udmVydGVycyA9IHsKICBwdDogeCA9PiB4LAogIGNtOiB4ID0+IHggLyAyLjU0ICogNzIsCiAgbW06IHggPT4geCAvICgxMCAqIDIuNTQpICogNzIsCiAgaW46IHggPT4geCAqIDcyLAogIHB4OiB4ID0+IHgKfTsKY29uc3QgbWVhc3VyZW1lbnRQYXR0ZXJuID0gLyhbKy1dP1xkK1wuP1xkKikoLiopLzsKZnVuY3Rpb24gc3RyaXBRdW90ZXMoc3RyKSB7CiAgaWYgKHN0ci5zdGFydHNXaXRoKCInIikgfHwgc3RyLnN0YXJ0c1dpdGgoJyInKSkgewogICAgcmV0dXJuIHN0ci5zbGljZSgxLCAtMSk7CiAgfQogIHJldHVybiBzdHI7Cn0KZnVuY3Rpb24gZ2V0SW50ZWdlcih7CiAgZGF0YSwKICBkZWZhdWx0VmFsdWUsCiAgdmFsaWRhdGUKfSkgewogIGlmICghZGF0YSkgewogICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTsKICB9CiAgZGF0YSA9IGRhdGEudHJpbSgpOwogIGNvbnN0IG4gPSBwYXJzZUludChkYXRhLCAxMCk7CiAgaWYgKCFpc05hTihuKSAmJiB2YWxpZGF0ZShuKSkgewogICAgcmV0dXJuIG47CiAgfQogIHJldHVybiBkZWZhdWx0VmFsdWU7Cn0KZnVuY3Rpb24gZ2V0RmxvYXQoewogIGRhdGEsCiAgZGVmYXVsdFZhbHVlLAogIHZhbGlkYXRlCn0pIHsKICBpZiAoIWRhdGEpIHsKICAgIHJldHVybiBkZWZhdWx0VmFsdWU7CiAgfQogIGRhdGEgPSBkYXRhLnRyaW0oKTsKICBjb25zdCBuID0gcGFyc2VGbG9hdChkYXRhKTsKICBpZiAoIWlzTmFOKG4pICYmIHZhbGlkYXRlKG4pKSB7CiAgICByZXR1cm4gbjsKICB9CiAgcmV0dXJuIGRlZmF1bHRWYWx1ZTsKfQpmdW5jdGlvbiBnZXRLZXl3b3JkKHsKICBkYXRhLAogIGRlZmF1bHRWYWx1ZSwKICB2YWxpZGF0ZQp9KSB7CiAgaWYgKCFkYXRhKSB7CiAgICByZXR1cm4gZGVmYXVsdFZhbHVlOwogIH0KICBkYXRhID0gZGF0YS50cmltKCk7CiAgaWYgKHZhbGlkYXRlKGRhdGEpKSB7CiAgICByZXR1cm4gZGF0YTsKICB9CiAgcmV0dXJuIGRlZmF1bHRWYWx1ZTsKfQpmdW5jdGlvbiBnZXRTdHJpbmdPcHRpb24oZGF0YSwgb3B0aW9ucykgewogIHJldHVybiBnZXRLZXl3b3JkKHsKICAgIGRhdGEsCiAgICBkZWZhdWx0VmFsdWU6IG9wdGlvbnNbMF0sCiAgICB2YWxpZGF0ZTogayA9PiBvcHRpb25zLmluY2x1ZGVzKGspCiAgfSk7Cn0KZnVuY3Rpb24gZ2V0TWVhc3VyZW1lbnQoc3RyLCBkZWYgPSAiMCIpIHsKICBkZWYgfHw9ICIwIjsKICBpZiAoIXN0cikgewogICAgcmV0dXJuIGdldE1lYXN1cmVtZW50KGRlZik7CiAgfQogIGNvbnN0IG1hdGNoID0gc3RyLnRyaW0oKS5tYXRjaChtZWFzdXJlbWVudFBhdHRlcm4pOwogIGlmICghbWF0Y2gpIHsKICAgIHJldHVybiBnZXRNZWFzdXJlbWVudChkZWYpOwogIH0KICBjb25zdCBbLCB2YWx1ZVN0ciwgdW5pdF0gPSBtYXRjaDsKICBjb25zdCB2YWx1ZSA9IHBhcnNlRmxvYXQodmFsdWVTdHIpOwogIGlmIChpc05hTih2YWx1ZSkpIHsKICAgIHJldHVybiBnZXRNZWFzdXJlbWVudChkZWYpOwogIH0KICBpZiAodmFsdWUgPT09IDApIHsKICAgIHJldHVybiAwOwogIH0KICBjb25zdCBjb252ID0gZGltQ29udmVydGVyc1t1bml0XTsKICBpZiAoY29udikgewogICAgcmV0dXJuIGNvbnYodmFsdWUpOwogIH0KICByZXR1cm4gdmFsdWU7Cn0KZnVuY3Rpb24gZ2V0UmF0aW8oZGF0YSkgewogIGlmICghZGF0YSkgewogICAgcmV0dXJuIHsKICAgICAgbnVtOiAxLAogICAgICBkZW46IDEKICAgIH07CiAgfQogIGNvbnN0IHJhdGlvID0gZGF0YS5zcGxpdCgiOiIsIDIpLm1hcCh4ID0+IHBhcnNlRmxvYXQoeC50cmltKCkpKS5maWx0ZXIoeCA9PiAhaXNOYU4oeCkpOwogIGlmIChyYXRpby5sZW5ndGggPT09IDEpIHsKICAgIHJhdGlvLnB1c2goMSk7CiAgfQogIGlmIChyYXRpby5sZW5ndGggPT09IDApIHsKICAgIHJldHVybiB7CiAgICAgIG51bTogMSwKICAgICAgZGVuOiAxCiAgICB9OwogIH0KICBjb25zdCBbbnVtLCBkZW5dID0gcmF0aW87CiAgcmV0dXJuIHsKICAgIG51bSwKICAgIGRlbgogIH07Cn0KZnVuY3Rpb24gZ2V0UmVsZXZhbnQoZGF0YSkgewogIGlmICghZGF0YSkgewogICAgcmV0dXJuIFtdOwogIH0KICByZXR1cm4gZGF0YS50cmltKCkuc3BsaXQoL1xzKy8pLm1hcChlID0+ICh7CiAgICBleGNsdWRlZDogZVswXSA9PT0gIi0iLAogICAgdmlld25hbWU6IGUuc3Vic3RyaW5nKDEpCiAgfSkpOwp9CmZ1bmN0aW9uIGdldENvbG9yKGRhdGEsIGRlZiA9IFswLCAwLCAwXSkgewogIGxldCBbciwgZywgYl0gPSBkZWY7CiAgaWYgKCFkYXRhKSB7CiAgICByZXR1cm4gewogICAgICByLAogICAgICBnLAogICAgICBiCiAgICB9OwogIH0KICBjb25zdCBjb2xvciA9IGRhdGEuc3BsaXQoIiwiLCAzKS5tYXAoYyA9PiBNYXRoQ2xhbXAocGFyc2VJbnQoYy50cmltKCksIDEwKSwgMCwgMjU1KSkubWFwKGMgPT4gaXNOYU4oYykgPyAwIDogYyk7CiAgaWYgKGNvbG9yLmxlbmd0aCA8IDMpIHsKICAgIHJldHVybiB7CiAgICAgIHIsCiAgICAgIGcsCiAgICAgIGIKICAgIH07CiAgfQogIFtyLCBnLCBiXSA9IGNvbG9yOwogIHJldHVybiB7CiAgICByLAogICAgZywKICAgIGIKICB9Owp9CmZ1bmN0aW9uIGdldEJCb3goZGF0YSkgewogIGNvbnN0IGRlZiA9IC0xOwogIGlmICghZGF0YSkgewogICAgcmV0dXJuIHsKICAgICAgeDogZGVmLAogICAgICB5OiBkZWYsCiAgICAgIHdpZHRoOiBkZWYsCiAgICAgIGhlaWdodDogZGVmCiAgICB9OwogIH0KICBjb25zdCBiYm94ID0gZGF0YS5zcGxpdCgiLCIsIDQpLm1hcChtID0+IGdldE1lYXN1cmVtZW50KG0udHJpbSgpLCAiLTEiKSk7CiAgaWYgKGJib3gubGVuZ3RoIDwgNCB8fCBiYm94WzJdIDwgMCB8fCBiYm94WzNdIDwgMCkgewogICAgcmV0dXJuIHsKICAgICAgeDogZGVmLAogICAgICB5OiBkZWYsCiAgICAgIHdpZHRoOiBkZWYsCiAgICAgIGhlaWdodDogZGVmCiAgICB9OwogIH0KICBjb25zdCBbeCwgeSwgd2lkdGgsIGhlaWdodF0gPSBiYm94OwogIHJldHVybiB7CiAgICB4LAogICAgeSwKICAgIHdpZHRoLAogICAgaGVpZ2h0CiAgfTsKfQpjbGFzcyBIVE1MUmVzdWx0IHsKICBzdGF0aWMgZ2V0IEZBSUxVUkUoKSB7CiAgICByZXR1cm4gc2hhZG93KHRoaXMsICJGQUlMVVJFIiwgbmV3IEhUTUxSZXN1bHQoZmFsc2UsIG51bGwsIG51bGwsIG51bGwpKTsKICB9CiAgc3RhdGljIGdldCBFTVBUWSgpIHsKICAgIHJldHVybiBzaGFkb3codGhpcywgIkVNUFRZIiwgbmV3IEhUTUxSZXN1bHQodHJ1ZSwgbnVsbCwgbnVsbCwgbnVsbCkpOwogIH0KICBjb25zdHJ1Y3RvcihzdWNjZXNzLCBodG1sLCBiYm94LCBicmVha05vZGUpIHsKICAgIHRoaXMuc3VjY2VzcyA9IHN1Y2Nlc3M7CiAgICB0aGlzLmh0bWwgPSBodG1sOwogICAgdGhpcy5iYm94ID0gYmJveDsKICAgIHRoaXMuYnJlYWtOb2RlID0gYnJlYWtOb2RlOwogIH0KICBpc0JyZWFrKCkgewogICAgcmV0dXJuICEhdGhpcy5icmVha05vZGU7CiAgfQogIHN0YXRpYyBicmVha05vZGUobm9kZSkgewogICAgcmV0dXJuIG5ldyBIVE1MUmVzdWx0KGZhbHNlLCBudWxsLCBudWxsLCBub2RlKTsKICB9CiAgc3RhdGljIHN1Y2Nlc3MoaHRtbCwgYmJveCA9IG51bGwpIHsKICAgIHJldHVybiBuZXcgSFRNTFJlc3VsdCh0cnVlLCBodG1sLCBiYm94LCBudWxsKTsKICB9Cn0KCjsvLyAuL3NyYy9jb3JlL3hmYS9mb250cy5qcwoKCgoKCgoKCgoKCgoKY2xhc3MgRm9udEZpbmRlciB7CiAgY29uc3RydWN0b3IocGRmRm9udHMpIHsKICAgIHRoaXMuZm9udHMgPSBuZXcgTWFwKCk7CiAgICB0aGlzLmNhY2hlID0gbmV3IE1hcCgpOwogICAgdGhpcy53YXJuZWQgPSBuZXcgU2V0KCk7CiAgICB0aGlzLmRlZmF1bHRGb250ID0gbnVsbDsKICAgIHRoaXMuYWRkKHBkZkZvbnRzKTsKICB9CiAgYWRkKHBkZkZvbnRzLCByZWFsbHlNaXNzaW5nRm9udHMgPSBudWxsKSB7CiAgICBmb3IgKGNvbnN0IHBkZkZvbnQgb2YgcGRmRm9udHMpIHsKICAgICAgdGhpcy5hZGRQZGZGb250KHBkZkZvbnQpOwogICAgfQogICAgZm9yIChjb25zdCBwZGZGb250IG9mIHRoaXMuZm9udHMudmFsdWVzKCkpIHsKICAgICAgaWYgKCFwZGZGb250LnJlZ3VsYXIpIHsKICAgICAgICBwZGZGb250LnJlZ3VsYXIgPSBwZGZGb250Lml0YWxpYyB8fCBwZGZGb250LmJvbGQgfHwgcGRmRm9udC5ib2xkaXRhbGljOwogICAgICB9CiAgICB9CiAgICBpZiAoIXJlYWxseU1pc3NpbmdGb250cyB8fCByZWFsbHlNaXNzaW5nRm9udHMuc2l6ZSA9PT0gMCkgewogICAgICByZXR1cm47CiAgICB9CiAgICBjb25zdCBteXJpYWQgPSB0aGlzLmZvbnRzLmdldCgiUGRmSlMtRmFsbGJhY2stUGRmSlMtWEZBIik7CiAgICBmb3IgKGNvbnN0IG1pc3Npbmcgb2YgcmVhbGx5TWlzc2luZ0ZvbnRzKSB7CiAgICAgIHRoaXMuZm9udHMuc2V0KG1pc3NpbmcsIG15cmlhZCk7CiAgICB9CiAgfQogIGFkZFBkZkZvbnQocGRmRm9udCkgewogICAgY29uc3QgY3NzRm9udEluZm8gPSBwZGZGb250LmNzc0ZvbnRJbmZvOwogICAgY29uc3QgbmFtZSA9IGNzc0ZvbnRJbmZvLmZvbnRGYW1pbHk7CiAgICBsZXQgZm9udCA9IHRoaXMuZm9udHMuZ2V0KG5hbWUpOwogICAgaWYgKCFmb250KSB7CiAgICAgIGZvbnQgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgICB0aGlzLmZvbnRzLnNldChuYW1lLCBmb250KTsKICAgICAgaWYgKCF0aGlzLmRlZmF1bHRGb250KSB7CiAgICAgICAgdGhpcy5kZWZhdWx0Rm9udCA9IGZvbnQ7CiAgICAgIH0KICAgIH0KICAgIGxldCBwcm9wZXJ0eSA9ICIiOwogICAgY29uc3QgZm9udFdlaWdodCA9IHBhcnNlRmxvYXQoY3NzRm9udEluZm8uZm9udFdlaWdodCk7CiAgICBpZiAocGFyc2VGbG9hdChjc3NGb250SW5mby5pdGFsaWNBbmdsZSkgIT09IDApIHsKICAgICAgcHJvcGVydHkgPSBmb250V2VpZ2h0ID49IDcwMCA/ICJib2xkaXRhbGljIiA6ICJpdGFsaWMiOwogICAgfSBlbHNlIGlmIChmb250V2VpZ2h0ID49IDcwMCkgewogICAgICBwcm9wZXJ0eSA9ICJib2xkIjsKICAgIH0KICAgIGlmICghcHJvcGVydHkpIHsKICAgICAgaWYgKHBkZkZvbnQubmFtZS5pbmNsdWRlcygiQm9sZCIpIHx8IHBkZkZvbnQucHNOYW1lPy5pbmNsdWRlcygiQm9sZCIpKSB7CiAgICAgICAgcHJvcGVydHkgPSAiYm9sZCI7CiAgICAgIH0KICAgICAgaWYgKHBkZkZvbnQubmFtZS5pbmNsdWRlcygiSXRhbGljIikgfHwgcGRmRm9udC5uYW1lLmVuZHNXaXRoKCJJdCIpIHx8IHBkZkZvbnQucHNOYW1lPy5pbmNsdWRlcygiSXRhbGljIikgfHwgcGRmRm9udC5wc05hbWU/LmVuZHNXaXRoKCJJdCIpKSB7CiAgICAgICAgcHJvcGVydHkgKz0gIml0YWxpYyI7CiAgICAgIH0KICAgIH0KICAgIGlmICghcHJvcGVydHkpIHsKICAgICAgcHJvcGVydHkgPSAicmVndWxhciI7CiAgICB9CiAgICBmb250W3Byb3BlcnR5XSA9IHBkZkZvbnQ7CiAgfQogIGdldERlZmF1bHQoKSB7CiAgICByZXR1cm4gdGhpcy5kZWZhdWx0Rm9udDsKICB9CiAgZmluZChmb250TmFtZSwgbXVzdFdhcm4gPSB0cnVlKSB7CiAgICBsZXQgZm9udCA9IHRoaXMuZm9udHMuZ2V0KGZvbnROYW1lKSB8fCB0aGlzLmNhY2hlLmdldChmb250TmFtZSk7CiAgICBpZiAoZm9udCkgewogICAgICByZXR1cm4gZm9udDsKICAgIH0KICAgIGNvbnN0IHBhdHRlcm4gPSAvLHwtfF98IHxib2xkaXRhbGljfGJvbGR8aXRhbGljfHJlZ3VsYXJ8aXQvZ2k7CiAgICBsZXQgbmFtZSA9IGZvbnROYW1lLnJlcGxhY2VBbGwocGF0dGVybiwgIiIpOwogICAgZm9udCA9IHRoaXMuZm9udHMuZ2V0KG5hbWUpOwogICAgaWYgKGZvbnQpIHsKICAgICAgdGhpcy5jYWNoZS5zZXQoZm9udE5hbWUsIGZvbnQpOwogICAgICByZXR1cm4gZm9udDsKICAgIH0KICAgIG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7CiAgICBjb25zdCBtYXliZSA9IFtdOwogICAgZm9yIChjb25zdCBbZmFtaWx5LCBwZGZGb250XSBvZiB0aGlzLmZvbnRzLmVudHJpZXMoKSkgewogICAgICBpZiAoZmFtaWx5LnJlcGxhY2VBbGwocGF0dGVybiwgIiIpLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aChuYW1lKSkgewogICAgICAgIG1heWJlLnB1c2gocGRmRm9udCk7CiAgICAgIH0KICAgIH0KICAgIGlmIChtYXliZS5sZW5ndGggPT09IDApIHsKICAgICAgZm9yIChjb25zdCBbLCBwZGZGb250XSBvZiB0aGlzLmZvbnRzLmVudHJpZXMoKSkgewogICAgICAgIGlmIChwZGZGb250LnJlZ3VsYXIubmFtZT8ucmVwbGFjZUFsbChwYXR0ZXJuLCAiIikudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKG5hbWUpKSB7CiAgICAgICAgICBtYXliZS5wdXNoKHBkZkZvbnQpOwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgaWYgKG1heWJlLmxlbmd0aCA9PT0gMCkgewogICAgICBuYW1lID0gbmFtZS5yZXBsYWNlQWxsKC9wc210fG10L2dpLCAiIik7CiAgICAgIGZvciAoY29uc3QgW2ZhbWlseSwgcGRmRm9udF0gb2YgdGhpcy5mb250cy5lbnRyaWVzKCkpIHsKICAgICAgICBpZiAoZmFtaWx5LnJlcGxhY2VBbGwocGF0dGVybiwgIiIpLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aChuYW1lKSkgewogICAgICAgICAgbWF5YmUucHVzaChwZGZGb250KTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIGlmIChtYXliZS5sZW5ndGggPT09IDApIHsKICAgICAgZm9yIChjb25zdCBwZGZGb250IG9mIHRoaXMuZm9udHMudmFsdWVzKCkpIHsKICAgICAgICBpZiAocGRmRm9udC5yZWd1bGFyLm5hbWU/LnJlcGxhY2VBbGwocGF0dGVybiwgIiIpLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aChuYW1lKSkgewogICAgICAgICAgbWF5YmUucHVzaChwZGZGb250KTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIGlmIChtYXliZS5sZW5ndGggPj0gMSkgewogICAgICBpZiAobWF5YmUubGVuZ3RoICE9PSAxICYmIG11c3RXYXJuKSB7CiAgICAgICAgd2FybihgWEZBIC0gVG9vIG1hbnkgY2hvaWNlcyB0byBndWVzcyB0aGUgY29ycmVjdCBmb250OiAke2ZvbnROYW1lfWApOwogICAgICB9CiAgICAgIHRoaXMuY2FjaGUuc2V0KGZvbnROYW1lLCBtYXliZVswXSk7CiAgICAgIHJldHVybiBtYXliZVswXTsKICAgIH0KICAgIGlmIChtdXN0V2FybiAmJiAhdGhpcy53YXJuZWQuaGFzKGZvbnROYW1lKSkgewogICAgICB0aGlzLndhcm5lZC5hZGQoZm9udE5hbWUpOwogICAgICB3YXJuKGBYRkEgLSBDYW5ub3QgZmluZCB0aGUgZm9udDogJHtmb250TmFtZX1gKTsKICAgIH0KICAgIHJldHVybiBudWxsOwogIH0KfQpmdW5jdGlvbiBzZWxlY3RGb250KHhmYUZvbnQsIHR5cGVmYWNlKSB7CiAgaWYgKHhmYUZvbnQucG9zdHVyZSA9PT0gIml0YWxpYyIpIHsKICAgIGlmICh4ZmFGb250LndlaWdodCA9PT0gImJvbGQiKSB7CiAgICAgIHJldHVybiB0eXBlZmFjZS5ib2xkaXRhbGljOwogICAgfQogICAgcmV0dXJuIHR5cGVmYWNlLml0YWxpYzsKICB9IGVsc2UgaWYgKHhmYUZvbnQud2VpZ2h0ID09PSAiYm9sZCIpIHsKICAgIHJldHVybiB0eXBlZmFjZS5ib2xkOwogIH0KICByZXR1cm4gdHlwZWZhY2UucmVndWxhcjsKfQpmdW5jdGlvbiBmb250c19nZXRNZXRyaWNzKHhmYUZvbnQsIHJlYWwgPSBmYWxzZSkgewogIGxldCBwZGZGb250ID0gbnVsbDsKICBpZiAoeGZhRm9udCkgewogICAgY29uc3QgbmFtZSA9IHN0cmlwUXVvdGVzKHhmYUZvbnQudHlwZWZhY2UpOwogICAgY29uc3QgdHlwZWZhY2UgPSB4ZmFGb250WyRnbG9iYWxEYXRhXS5mb250RmluZGVyLmZpbmQobmFtZSk7CiAgICBwZGZGb250ID0gc2VsZWN0Rm9udCh4ZmFGb250LCB0eXBlZmFjZSk7CiAgfQogIGlmICghcGRmRm9udCkgewogICAgcmV0dXJuIHsKICAgICAgbGluZUhlaWdodDogMTIsCiAgICAgIGxpbmVHYXA6IDIsCiAgICAgIGxpbmVOb0dhcDogMTAKICAgIH07CiAgfQogIGNvbnN0IHNpemUgPSB4ZmFGb250LnNpemUgfHwgMTA7CiAgY29uc3QgbGluZUhlaWdodCA9IHBkZkZvbnQubGluZUhlaWdodCA/IE1hdGgubWF4KHJlYWwgPyAwIDogMS4yLCBwZGZGb250LmxpbmVIZWlnaHQpIDogMS4yOwogIGNvbnN0IGxpbmVHYXAgPSBwZGZGb250LmxpbmVHYXAgPT09IHVuZGVmaW5lZCA/IDAuMiA6IHBkZkZvbnQubGluZUdhcDsKICByZXR1cm4gewogICAgbGluZUhlaWdodDogbGluZUhlaWdodCAqIHNpemUsCiAgICBsaW5lR2FwOiBsaW5lR2FwICogc2l6ZSwKICAgIGxpbmVOb0dhcDogTWF0aC5tYXgoMSwgbGluZUhlaWdodCAtIGxpbmVHYXApICogc2l6ZQogIH07Cn0KCjsvLyAuL3NyYy9jb3JlL3hmYS90ZXh0LmpzCgoKCgpjb25zdCBXSURUSF9GQUNUT1IgPSAxLjAyOwpjbGFzcyBGb250SW5mbyB7CiAgY29uc3RydWN0b3IoeGZhRm9udCwgbWFyZ2luLCBsaW5lSGVpZ2h0LCBmb250RmluZGVyKSB7CiAgICB0aGlzLmxpbmVIZWlnaHQgPSBsaW5lSGVpZ2h0OwogICAgdGhpcy5wYXJhTWFyZ2luID0gbWFyZ2luIHx8IHsKICAgICAgdG9wOiAwLAogICAgICBib3R0b206IDAsCiAgICAgIGxlZnQ6IDAsCiAgICAgIHJpZ2h0OiAwCiAgICB9OwogICAgaWYgKCF4ZmFGb250KSB7CiAgICAgIFt0aGlzLnBkZkZvbnQsIHRoaXMueGZhRm9udF0gPSB0aGlzLmRlZmF1bHRGb250KGZvbnRGaW5kZXIpOwogICAgICByZXR1cm47CiAgICB9CiAgICB0aGlzLnhmYUZvbnQgPSB7CiAgICAgIHR5cGVmYWNlOiB4ZmFGb250LnR5cGVmYWNlLAogICAgICBwb3N0dXJlOiB4ZmFGb250LnBvc3R1cmUsCiAgICAgIHdlaWdodDogeGZhRm9udC53ZWlnaHQsCiAgICAgIHNpemU6IHhmYUZvbnQuc2l6ZSwKICAgICAgbGV0dGVyU3BhY2luZzogeGZhRm9udC5sZXR0ZXJTcGFjaW5nCiAgICB9OwogICAgY29uc3QgdHlwZWZhY2UgPSBmb250RmluZGVyLmZpbmQoeGZhRm9udC50eXBlZmFjZSk7CiAgICBpZiAoIXR5cGVmYWNlKSB7CiAgICAgIFt0aGlzLnBkZkZvbnQsIHRoaXMueGZhRm9udF0gPSB0aGlzLmRlZmF1bHRGb250KGZvbnRGaW5kZXIpOwogICAgICByZXR1cm47CiAgICB9CiAgICB0aGlzLnBkZkZvbnQgPSBzZWxlY3RGb250KHhmYUZvbnQsIHR5cGVmYWNlKTsKICAgIGlmICghdGhpcy5wZGZGb250KSB7CiAgICAgIFt0aGlzLnBkZkZvbnQsIHRoaXMueGZhRm9udF0gPSB0aGlzLmRlZmF1bHRGb250KGZvbnRGaW5kZXIpOwogICAgfQogIH0KICBkZWZhdWx0Rm9udChmb250RmluZGVyKSB7CiAgICBjb25zdCBmb250ID0gZm9udEZpbmRlci5maW5kKCJIZWx2ZXRpY2EiLCBmYWxzZSkgfHwgZm9udEZpbmRlci5maW5kKCJNeXJpYWQgUHJvIiwgZmFsc2UpIHx8IGZvbnRGaW5kZXIuZmluZCgiQXJpYWwiLCBmYWxzZSkgfHwgZm9udEZpbmRlci5nZXREZWZhdWx0KCk7CiAgICBpZiAoZm9udD8ucmVndWxhcikgewogICAgICBjb25zdCBwZGZGb250ID0gZm9udC5yZWd1bGFyOwogICAgICBjb25zdCBpbmZvID0gcGRmRm9udC5jc3NGb250SW5mbzsKICAgICAgY29uc3QgeGZhRm9udCA9IHsKICAgICAgICB0eXBlZmFjZTogaW5mby5mb250RmFtaWx5LAogICAgICAgIHBvc3R1cmU6ICJub3JtYWwiLAogICAgICAgIHdlaWdodDogIm5vcm1hbCIsCiAgICAgICAgc2l6ZTogMTAsCiAgICAgICAgbGV0dGVyU3BhY2luZzogMAogICAgICB9OwogICAgICByZXR1cm4gW3BkZkZvbnQsIHhmYUZvbnRdOwogICAgfQogICAgY29uc3QgeGZhRm9udCA9IHsKICAgICAgdHlwZWZhY2U6ICJDb3VyaWVyIiwKICAgICAgcG9zdHVyZTogIm5vcm1hbCIsCiAgICAgIHdlaWdodDogIm5vcm1hbCIsCiAgICAgIHNpemU6IDEwLAogICAgICBsZXR0ZXJTcGFjaW5nOiAwCiAgICB9OwogICAgcmV0dXJuIFtudWxsLCB4ZmFGb250XTsKICB9Cn0KY2xhc3MgRm9udFNlbGVjdG9yIHsKICBjb25zdHJ1Y3RvcihkZWZhdWx0WGZhRm9udCwgZGVmYXVsdFBhcmFNYXJnaW4sIGRlZmF1bHRMaW5lSGVpZ2h0LCBmb250RmluZGVyKSB7CiAgICB0aGlzLmZvbnRGaW5kZXIgPSBmb250RmluZGVyOwogICAgdGhpcy5zdGFjayA9IFtuZXcgRm9udEluZm8oZGVmYXVsdFhmYUZvbnQsIGRlZmF1bHRQYXJhTWFyZ2luLCBkZWZhdWx0TGluZUhlaWdodCwgZm9udEZpbmRlcildOwogIH0KICBwdXNoRGF0YSh4ZmFGb250LCBtYXJnaW4sIGxpbmVIZWlnaHQpIHsKICAgIGNvbnN0IGxhc3RGb250ID0gdGhpcy5zdGFjay5hdCgtMSk7CiAgICBmb3IgKGNvbnN0IG5hbWUgb2YgWyJ0eXBlZmFjZSIsICJwb3N0dXJlIiwgIndlaWdodCIsICJzaXplIiwgImxldHRlclNwYWNpbmciXSkgewogICAgICBpZiAoIXhmYUZvbnRbbmFtZV0pIHsKICAgICAgICB4ZmFGb250W25hbWVdID0gbGFzdEZvbnQueGZhRm9udFtuYW1lXTsKICAgICAgfQogICAgfQogICAgZm9yIChjb25zdCBuYW1lIG9mIFsidG9wIiwgImJvdHRvbSIsICJsZWZ0IiwgInJpZ2h0Il0pIHsKICAgICAgaWYgKGlzTmFOKG1hcmdpbltuYW1lXSkpIHsKICAgICAgICBtYXJnaW5bbmFtZV0gPSBsYXN0Rm9udC5wYXJhTWFyZ2luW25hbWVdOwogICAgICB9CiAgICB9CiAgICBjb25zdCBmb250SW5mbyA9IG5ldyBGb250SW5mbyh4ZmFGb250LCBtYXJnaW4sIGxpbmVIZWlnaHQgfHwgbGFzdEZvbnQubGluZUhlaWdodCwgdGhpcy5mb250RmluZGVyKTsKICAgIGlmICghZm9udEluZm8ucGRmRm9udCkgewogICAgICBmb250SW5mby5wZGZGb250ID0gbGFzdEZvbnQucGRmRm9udDsKICAgIH0KICAgIHRoaXMuc3RhY2sucHVzaChmb250SW5mbyk7CiAgfQogIHBvcEZvbnQoKSB7CiAgICB0aGlzLnN0YWNrLnBvcCgpOwogIH0KICB0b3BGb250KCkgewogICAgcmV0dXJuIHRoaXMuc3RhY2suYXQoLTEpOwogIH0KfQpjbGFzcyBUZXh0TWVhc3VyZSB7CiAgY29uc3RydWN0b3IoZGVmYXVsdFhmYUZvbnQsIGRlZmF1bHRQYXJhTWFyZ2luLCBkZWZhdWx0TGluZUhlaWdodCwgZm9udHMpIHsKICAgIHRoaXMuZ2x5cGhzID0gW107CiAgICB0aGlzLmZvbnRTZWxlY3RvciA9IG5ldyBGb250U2VsZWN0b3IoZGVmYXVsdFhmYUZvbnQsIGRlZmF1bHRQYXJhTWFyZ2luLCBkZWZhdWx0TGluZUhlaWdodCwgZm9udHMpOwogICAgdGhpcy5leHRyYUhlaWdodCA9IDA7CiAgfQogIHB1c2hEYXRhKHhmYUZvbnQsIG1hcmdpbiwgbGluZUhlaWdodCkgewogICAgdGhpcy5mb250U2VsZWN0b3IucHVzaERhdGEoeGZhRm9udCwgbWFyZ2luLCBsaW5lSGVpZ2h0KTsKICB9CiAgcG9wRm9udCh4ZmFGb250KSB7CiAgICByZXR1cm4gdGhpcy5mb250U2VsZWN0b3IucG9wRm9udCgpOwogIH0KICBhZGRQYXJhKCkgewogICAgY29uc3QgbGFzdEZvbnQgPSB0aGlzLmZvbnRTZWxlY3Rvci50b3BGb250KCk7CiAgICB0aGlzLmV4dHJhSGVpZ2h0ICs9IGxhc3RGb250LnBhcmFNYXJnaW4udG9wICsgbGFzdEZvbnQucGFyYU1hcmdpbi5ib3R0b207CiAgfQogIGFkZFN0cmluZyhzdHIpIHsKICAgIGlmICghc3RyKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGNvbnN0IGxhc3RGb250ID0gdGhpcy5mb250U2VsZWN0b3IudG9wRm9udCgpOwogICAgY29uc3QgZm9udFNpemUgPSBsYXN0Rm9udC54ZmFGb250LnNpemU7CiAgICBpZiAobGFzdEZvbnQucGRmRm9udCkgewogICAgICBjb25zdCBsZXR0ZXJTcGFjaW5nID0gbGFzdEZvbnQueGZhRm9udC5sZXR0ZXJTcGFjaW5nOwogICAgICBjb25zdCBwZGZGb250ID0gbGFzdEZvbnQucGRmRm9udDsKICAgICAgY29uc3QgZm9udExpbmVIZWlnaHQgPSBwZGZGb250LmxpbmVIZWlnaHQgfHwgMS4yOwogICAgICBjb25zdCBsaW5lSGVpZ2h0ID0gbGFzdEZvbnQubGluZUhlaWdodCB8fCBNYXRoLm1heCgxLjIsIGZvbnRMaW5lSGVpZ2h0KSAqIGZvbnRTaXplOwogICAgICBjb25zdCBsaW5lR2FwID0gcGRmRm9udC5saW5lR2FwID09PSB1bmRlZmluZWQgPyAwLjIgOiBwZGZGb250LmxpbmVHYXA7CiAgICAgIGNvbnN0IG5vR2FwID0gZm9udExpbmVIZWlnaHQgLSBsaW5lR2FwOwogICAgICBjb25zdCBmaXJzdExpbmVIZWlnaHQgPSBNYXRoLm1heCgxLCBub0dhcCkgKiBmb250U2l6ZTsKICAgICAgY29uc3Qgc2NhbGUgPSBmb250U2l6ZSAvIDEwMDA7CiAgICAgIGNvbnN0IGZhbGxiYWNrV2lkdGggPSBwZGZGb250LmRlZmF1bHRXaWR0aCB8fCBwZGZGb250LmNoYXJzVG9HbHlwaHMoIiAiKVswXS53aWR0aDsKICAgICAgZm9yIChjb25zdCBsaW5lIG9mIHN0ci5zcGxpdCgvW1x1MjAyOVxuXS8pKSB7CiAgICAgICAgY29uc3QgZW5jb2RlZExpbmUgPSBwZGZGb250LmVuY29kZVN0cmluZyhsaW5lKS5qb2luKCIiKTsKICAgICAgICBjb25zdCBnbHlwaHMgPSBwZGZGb250LmNoYXJzVG9HbHlwaHMoZW5jb2RlZExpbmUpOwogICAgICAgIGZvciAoY29uc3QgZ2x5cGggb2YgZ2x5cGhzKSB7CiAgICAgICAgICBjb25zdCB3aWR0aCA9IGdseXBoLndpZHRoIHx8IGZhbGxiYWNrV2lkdGg7CiAgICAgICAgICB0aGlzLmdseXBocy5wdXNoKFt3aWR0aCAqIHNjYWxlICsgbGV0dGVyU3BhY2luZywgbGluZUhlaWdodCwgZmlyc3RMaW5lSGVpZ2h0LCBnbHlwaC51bmljb2RlLCBmYWxzZV0pOwogICAgICAgIH0KICAgICAgICB0aGlzLmdseXBocy5wdXNoKFswLCAwLCAwLCAiXG4iLCB0cnVlXSk7CiAgICAgIH0KICAgICAgdGhpcy5nbHlwaHMucG9wKCk7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGZvciAoY29uc3QgbGluZSBvZiBzdHIuc3BsaXQoL1tcdTIwMjlcbl0vKSkgewogICAgICBmb3IgKGNvbnN0IGNoYXIgb2YgbGluZS5zcGxpdCgiIikpIHsKICAgICAgICB0aGlzLmdseXBocy5wdXNoKFtmb250U2l6ZSwgMS4yICogZm9udFNpemUsIGZvbnRTaXplLCBjaGFyLCBmYWxzZV0pOwogICAgICB9CiAgICAgIHRoaXMuZ2x5cGhzLnB1c2goWzAsIDAsIDAsICJcbiIsIHRydWVdKTsKICAgIH0KICAgIHRoaXMuZ2x5cGhzLnBvcCgpOwogIH0KICBjb21wdXRlKG1heFdpZHRoKSB7CiAgICBsZXQgbGFzdFNwYWNlUG9zID0gLTEsCiAgICAgIGxhc3RTcGFjZVdpZHRoID0gMCwKICAgICAgd2lkdGggPSAwLAogICAgICBoZWlnaHQgPSAwLAogICAgICBjdXJyZW50TGluZVdpZHRoID0gMCwKICAgICAgY3VycmVudExpbmVIZWlnaHQgPSAwOwogICAgbGV0IGlzQnJva2VuID0gZmFsc2U7CiAgICBsZXQgaXNGaXJzdExpbmUgPSB0cnVlOwogICAgZm9yIChsZXQgaSA9IDAsIGlpID0gdGhpcy5nbHlwaHMubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgICBjb25zdCBbZ2x5cGhXaWR0aCwgbGluZUhlaWdodCwgZmlyc3RMaW5lSGVpZ2h0LCBjaGFyLCBpc0VPTF0gPSB0aGlzLmdseXBoc1tpXTsKICAgICAgY29uc3QgaXNTcGFjZSA9IGNoYXIgPT09ICIgIjsKICAgICAgY29uc3QgZ2x5cGhIZWlnaHQgPSBpc0ZpcnN0TGluZSA/IGZpcnN0TGluZUhlaWdodCA6IGxpbmVIZWlnaHQ7CiAgICAgIGlmIChpc0VPTCkgewogICAgICAgIHdpZHRoID0gTWF0aC5tYXgod2lkdGgsIGN1cnJlbnRMaW5lV2lkdGgpOwogICAgICAgIGN1cnJlbnRMaW5lV2lkdGggPSAwOwogICAgICAgIGhlaWdodCArPSBjdXJyZW50TGluZUhlaWdodDsKICAgICAgICBjdXJyZW50TGluZUhlaWdodCA9IGdseXBoSGVpZ2h0OwogICAgICAgIGxhc3RTcGFjZVBvcyA9IC0xOwogICAgICAgIGxhc3RTcGFjZVdpZHRoID0gMDsKICAgICAgICBpc0ZpcnN0TGluZSA9IGZhbHNlOwogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGlmIChpc1NwYWNlKSB7CiAgICAgICAgaWYgKGN1cnJlbnRMaW5lV2lkdGggKyBnbHlwaFdpZHRoID4gbWF4V2lkdGgpIHsKICAgICAgICAgIHdpZHRoID0gTWF0aC5tYXgod2lkdGgsIGN1cnJlbnRMaW5lV2lkdGgpOwogICAgICAgICAgY3VycmVudExpbmVXaWR0aCA9IDA7CiAgICAgICAgICBoZWlnaHQgKz0gY3VycmVudExpbmVIZWlnaHQ7CiAgICAgICAgICBjdXJyZW50TGluZUhlaWdodCA9IGdseXBoSGVpZ2h0OwogICAgICAgICAgbGFzdFNwYWNlUG9zID0gLTE7CiAgICAgICAgICBsYXN0U3BhY2VXaWR0aCA9IDA7CiAgICAgICAgICBpc0Jyb2tlbiA9IHRydWU7CiAgICAgICAgICBpc0ZpcnN0TGluZSA9IGZhbHNlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjdXJyZW50TGluZUhlaWdodCA9IE1hdGgubWF4KGdseXBoSGVpZ2h0LCBjdXJyZW50TGluZUhlaWdodCk7CiAgICAgICAgICBsYXN0U3BhY2VXaWR0aCA9IGN1cnJlbnRMaW5lV2lkdGg7CiAgICAgICAgICBjdXJyZW50TGluZVdpZHRoICs9IGdseXBoV2lkdGg7CiAgICAgICAgICBsYXN0U3BhY2VQb3MgPSBpOwogICAgICAgIH0KICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBpZiAoY3VycmVudExpbmVXaWR0aCArIGdseXBoV2lkdGggPiBtYXhXaWR0aCkgewogICAgICAgIGhlaWdodCArPSBjdXJyZW50TGluZUhlaWdodDsKICAgICAgICBjdXJyZW50TGluZUhlaWdodCA9IGdseXBoSGVpZ2h0OwogICAgICAgIGlmIChsYXN0U3BhY2VQb3MgIT09IC0xKSB7CiAgICAgICAgICBpID0gbGFzdFNwYWNlUG9zOwogICAgICAgICAgd2lkdGggPSBNYXRoLm1heCh3aWR0aCwgbGFzdFNwYWNlV2lkdGgpOwogICAgICAgICAgY3VycmVudExpbmVXaWR0aCA9IDA7CiAgICAgICAgICBsYXN0U3BhY2VQb3MgPSAtMTsKICAgICAgICAgIGxhc3RTcGFjZVdpZHRoID0gMDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgd2lkdGggPSBNYXRoLm1heCh3aWR0aCwgY3VycmVudExpbmVXaWR0aCk7CiAgICAgICAgICBjdXJyZW50TGluZVdpZHRoID0gZ2x5cGhXaWR0aDsKICAgICAgICB9CiAgICAgICAgaXNCcm9rZW4gPSB0cnVlOwogICAgICAgIGlzRmlyc3RMaW5lID0gZmFsc2U7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgY3VycmVudExpbmVXaWR0aCArPSBnbHlwaFdpZHRoOwogICAgICBjdXJyZW50TGluZUhlaWdodCA9IE1hdGgubWF4KGdseXBoSGVpZ2h0LCBjdXJyZW50TGluZUhlaWdodCk7CiAgICB9CiAgICB3aWR0aCA9IE1hdGgubWF4KHdpZHRoLCBjdXJyZW50TGluZVdpZHRoKTsKICAgIGhlaWdodCArPSBjdXJyZW50TGluZUhlaWdodCArIHRoaXMuZXh0cmFIZWlnaHQ7CiAgICByZXR1cm4gewogICAgICB3aWR0aDogV0lEVEhfRkFDVE9SICogd2lkdGgsCiAgICAgIGhlaWdodCwKICAgICAgaXNCcm9rZW4KICAgIH07CiAgfQp9Cgo7Ly8gLi9zcmMvY29yZS94ZmEvc29tLmpzCgoKCgoKCmNvbnN0IG5hbWVQYXR0ZXJuID0gL15bXi5bXSsvOwpjb25zdCBpbmRleFBhdHRlcm4gPSAvXlteXF1dKy87CmNvbnN0IG9wZXJhdG9ycyA9IHsKICBkb3Q6IDAsCiAgZG90RG90OiAxLAogIGRvdEhhc2g6IDIsCiAgZG90QnJhY2tldDogMywKICBkb3RQYXJlbjogNAp9Owpjb25zdCBzaG9ydGN1dHMgPSBuZXcgTWFwKFtbIiRkYXRhIiwgKHJvb3QsIGN1cnJlbnQpID0+IHJvb3QuZGF0YXNldHMgPyByb290LmRhdGFzZXRzLmRhdGEgOiByb290XSwgWyIkcmVjb3JkIiwgKHJvb3QsIGN1cnJlbnQpID0+IChyb290LmRhdGFzZXRzID8gcm9vdC5kYXRhc2V0cy5kYXRhIDogcm9vdClbJGdldENoaWxkcmVuXSgpWzBdXSwgWyIkdGVtcGxhdGUiLCAocm9vdCwgY3VycmVudCkgPT4gcm9vdC50ZW1wbGF0ZV0sIFsiJGNvbm5lY3Rpb25TZXQiLCAocm9vdCwgY3VycmVudCkgPT4gcm9vdC5jb25uZWN0aW9uU2V0XSwgWyIkZm9ybSIsIChyb290LCBjdXJyZW50KSA9PiByb290LmZvcm1dLCBbIiRsYXlvdXQiLCAocm9vdCwgY3VycmVudCkgPT4gcm9vdC5sYXlvdXRdLCBbIiRob3N0IiwgKHJvb3QsIGN1cnJlbnQpID0+IHJvb3QuaG9zdF0sIFsiJGRhdGFXaW5kb3ciLCAocm9vdCwgY3VycmVudCkgPT4gcm9vdC5kYXRhV2luZG93XSwgWyIkZXZlbnQiLCAocm9vdCwgY3VycmVudCkgPT4gcm9vdC5ldmVudF0sIFsiISIsIChyb290LCBjdXJyZW50KSA9PiByb290LmRhdGFzZXRzXSwgWyIkeGZhIiwgKHJvb3QsIGN1cnJlbnQpID0+IHJvb3RdLCBbInhmYSIsIChyb290LCBjdXJyZW50KSA9PiByb290XSwgWyIkIiwgKHJvb3QsIGN1cnJlbnQpID0+IGN1cnJlbnRdXSk7CmNvbnN0IHNvbUNhY2hlID0gbmV3IFdlYWtNYXAoKTsKZnVuY3Rpb24gcGFyc2VJbmRleChpbmRleCkgewogIGluZGV4ID0gaW5kZXgudHJpbSgpOwogIGlmIChpbmRleCA9PT0gIioiKSB7CiAgICByZXR1cm4gSW5maW5pdHk7CiAgfQogIHJldHVybiBwYXJzZUludChpbmRleCwgMTApIHx8IDA7Cn0KZnVuY3Rpb24gcGFyc2VFeHByZXNzaW9uKGV4cHIsIGRvdERvdEFsbG93ZWQsIG5vRXhwciA9IHRydWUpIHsKICBsZXQgbWF0Y2ggPSBleHByLm1hdGNoKG5hbWVQYXR0ZXJuKTsKICBpZiAoIW1hdGNoKSB7CiAgICByZXR1cm4gbnVsbDsKICB9CiAgbGV0IFtuYW1lXSA9IG1hdGNoOwogIGNvbnN0IHBhcnNlZCA9IFt7CiAgICBuYW1lLAogICAgY2FjaGVOYW1lOiAiLiIgKyBuYW1lLAogICAgaW5kZXg6IDAsCiAgICBqczogbnVsbCwKICAgIGZvcm1DYWxjOiBudWxsLAogICAgb3BlcmF0b3I6IG9wZXJhdG9ycy5kb3QKICB9XTsKICBsZXQgcG9zID0gbmFtZS5sZW5ndGg7CiAgd2hpbGUgKHBvcyA8IGV4cHIubGVuZ3RoKSB7CiAgICBjb25zdCBzcG9zID0gcG9zOwogICAgY29uc3QgY2hhciA9IGV4cHIuY2hhckF0KHBvcysrKTsKICAgIGlmIChjaGFyID09PSAiWyIpIHsKICAgICAgbWF0Y2ggPSBleHByLnNsaWNlKHBvcykubWF0Y2goaW5kZXhQYXR0ZXJuKTsKICAgICAgaWYgKCFtYXRjaCkgewogICAgICAgIHdhcm4oIlhGQSAtIEludmFsaWQgaW5kZXggaW4gU09NIGV4cHJlc3Npb24iKTsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgICBwYXJzZWQuYXQoLTEpLmluZGV4ID0gcGFyc2VJbmRleChtYXRjaFswXSk7CiAgICAgIHBvcyArPSBtYXRjaFswXS5sZW5ndGggKyAxOwogICAgICBjb250aW51ZTsKICAgIH0KICAgIGxldCBvcGVyYXRvcjsKICAgIHN3aXRjaCAoZXhwci5jaGFyQXQocG9zKSkgewogICAgICBjYXNlICIuIjoKICAgICAgICBpZiAoIWRvdERvdEFsbG93ZWQpIHsKICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0KICAgICAgICBwb3MrKzsKICAgICAgICBvcGVyYXRvciA9IG9wZXJhdG9ycy5kb3REb3Q7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgIiMiOgogICAgICAgIHBvcysrOwogICAgICAgIG9wZXJhdG9yID0gb3BlcmF0b3JzLmRvdEhhc2g7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgIlsiOgogICAgICAgIGlmIChub0V4cHIpIHsKICAgICAgICAgIHdhcm4oIlhGQSAtIFNPTSBleHByZXNzaW9uIGNvbnRhaW5zIGEgRm9ybUNhbGMgc3ViZXhwcmVzc2lvbiB3aGljaCBpcyBub3Qgc3VwcG9ydGVkIGZvciBub3cuIik7CiAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CiAgICAgICAgb3BlcmF0b3IgPSBvcGVyYXRvcnMuZG90QnJhY2tldDsKICAgICAgICBicmVhazsKICAgICAgY2FzZSAiKCI6CiAgICAgICAgaWYgKG5vRXhwcikgewogICAgICAgICAgd2FybigiWEZBIC0gU09NIGV4cHJlc3Npb24gY29udGFpbnMgYSBKYXZhU2NyaXB0IHN1YmV4cHJlc3Npb24gd2hpY2ggaXMgbm90IHN1cHBvcnRlZCBmb3Igbm93LiIpOwogICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQogICAgICAgIG9wZXJhdG9yID0gb3BlcmF0b3JzLmRvdFBhcmVuOwogICAgICAgIGJyZWFrOwogICAgICBkZWZhdWx0OgogICAgICAgIG9wZXJhdG9yID0gb3BlcmF0b3JzLmRvdDsKICAgICAgICBicmVhazsKICAgIH0KICAgIG1hdGNoID0gZXhwci5zbGljZShwb3MpLm1hdGNoKG5hbWVQYXR0ZXJuKTsKICAgIGlmICghbWF0Y2gpIHsKICAgICAgYnJlYWs7CiAgICB9CiAgICBbbmFtZV0gPSBtYXRjaDsKICAgIHBvcyArPSBuYW1lLmxlbmd0aDsKICAgIHBhcnNlZC5wdXNoKHsKICAgICAgbmFtZSwKICAgICAgY2FjaGVOYW1lOiBleHByLnNsaWNlKHNwb3MsIHBvcyksCiAgICAgIG9wZXJhdG9yLAogICAgICBpbmRleDogMCwKICAgICAganM6IG51bGwsCiAgICAgIGZvcm1DYWxjOiBudWxsCiAgICB9KTsKICB9CiAgcmV0dXJuIHBhcnNlZDsKfQpmdW5jdGlvbiBzZWFyY2hOb2RlKHJvb3QsIGNvbnRhaW5lciwgZXhwciwgZG90RG90QWxsb3dlZCA9IHRydWUsIHVzZUNhY2hlID0gdHJ1ZSkgewogIGNvbnN0IHBhcnNlZCA9IHBhcnNlRXhwcmVzc2lvbihleHByLCBkb3REb3RBbGxvd2VkKTsKICBpZiAoIXBhcnNlZCkgewogICAgcmV0dXJuIG51bGw7CiAgfQogIGNvbnN0IGZuID0gc2hvcnRjdXRzLmdldChwYXJzZWRbMF0ubmFtZSk7CiAgbGV0IGkgPSAwOwogIGxldCBpc1F1YWxpZmllZDsKICBpZiAoZm4pIHsKICAgIGlzUXVhbGlmaWVkID0gdHJ1ZTsKICAgIHJvb3QgPSBbZm4ocm9vdCwgY29udGFpbmVyKV07CiAgICBpID0gMTsKICB9IGVsc2UgewogICAgaXNRdWFsaWZpZWQgPSBjb250YWluZXIgPT09IG51bGw7CiAgICByb290ID0gW2NvbnRhaW5lciB8fCByb290XTsKICB9CiAgZm9yIChsZXQgaWkgPSBwYXJzZWQubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgY29uc3QgewogICAgICBuYW1lLAogICAgICBjYWNoZU5hbWUsCiAgICAgIG9wZXJhdG9yLAogICAgICBpbmRleAogICAgfSA9IHBhcnNlZFtpXTsKICAgIGNvbnN0IG5vZGVzID0gW107CiAgICBmb3IgKGNvbnN0IG5vZGUgb2Ygcm9vdCkgewogICAgICBpZiAoIW5vZGUuaXNYRkFPYmplY3QpIHsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBsZXQgY2hpbGRyZW4sIGNhY2hlZDsKICAgICAgaWYgKHVzZUNhY2hlKSB7CiAgICAgICAgY2FjaGVkID0gc29tQ2FjaGUuZ2V0KG5vZGUpOwogICAgICAgIGlmICghY2FjaGVkKSB7CiAgICAgICAgICBjYWNoZWQgPSBuZXcgTWFwKCk7CiAgICAgICAgICBzb21DYWNoZS5zZXQobm9kZSwgY2FjaGVkKTsKICAgICAgICB9CiAgICAgICAgY2hpbGRyZW4gPSBjYWNoZWQuZ2V0KGNhY2hlTmFtZSk7CiAgICAgIH0KICAgICAgaWYgKCFjaGlsZHJlbikgewogICAgICAgIHN3aXRjaCAob3BlcmF0b3IpIHsKICAgICAgICAgIGNhc2Ugb3BlcmF0b3JzLmRvdDoKICAgICAgICAgICAgY2hpbGRyZW4gPSBub2RlWyRnZXRDaGlsZHJlbkJ5TmFtZV0obmFtZSwgZmFsc2UpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2Ugb3BlcmF0b3JzLmRvdERvdDoKICAgICAgICAgICAgY2hpbGRyZW4gPSBub2RlWyRnZXRDaGlsZHJlbkJ5TmFtZV0obmFtZSwgdHJ1ZSk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSBvcGVyYXRvcnMuZG90SGFzaDoKICAgICAgICAgICAgY2hpbGRyZW4gPSBub2RlWyRnZXRDaGlsZHJlbkJ5Q2xhc3NdKG5hbWUpOwogICAgICAgICAgICBjaGlsZHJlbiA9IGNoaWxkcmVuLmlzWEZBT2JqZWN0QXJyYXkgPyBjaGlsZHJlbi5jaGlsZHJlbiA6IFtjaGlsZHJlbl07CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICAgIGlmICh1c2VDYWNoZSkgewogICAgICAgICAgY2FjaGVkLnNldChjYWNoZU5hbWUsIGNoaWxkcmVuKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA+IDApIHsKICAgICAgICBub2Rlcy5wdXNoKGNoaWxkcmVuKTsKICAgICAgfQogICAgfQogICAgaWYgKG5vZGVzLmxlbmd0aCA9PT0gMCAmJiAhaXNRdWFsaWZpZWQgJiYgaSA9PT0gMCkgewogICAgICBjb25zdCBwYXJlbnQgPSBjb250YWluZXJbJGdldFBhcmVudF0oKTsKICAgICAgY29udGFpbmVyID0gcGFyZW50OwogICAgICBpZiAoIWNvbnRhaW5lcikgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CiAgICAgIGkgPSAtMTsKICAgICAgcm9vdCA9IFtjb250YWluZXJdOwogICAgICBjb250aW51ZTsKICAgIH0KICAgIHJvb3QgPSBpc0Zpbml0ZShpbmRleCkgPyBub2Rlcy5maWx0ZXIobm9kZSA9PiBpbmRleCA8IG5vZGUubGVuZ3RoKS5tYXAobm9kZSA9PiBub2RlW2luZGV4XSkgOiBub2Rlcy5mbGF0KCk7CiAgfQogIGlmIChyb290Lmxlbmd0aCA9PT0gMCkgewogICAgcmV0dXJuIG51bGw7CiAgfQogIHJldHVybiByb290Owp9CmZ1bmN0aW9uIGNyZWF0ZURhdGFOb2RlKHJvb3QsIGNvbnRhaW5lciwgZXhwcikgewogIGNvbnN0IHBhcnNlZCA9IHBhcnNlRXhwcmVzc2lvbihleHByKTsKICBpZiAoIXBhcnNlZCkgewogICAgcmV0dXJuIG51bGw7CiAgfQogIGlmIChwYXJzZWQuc29tZSh4ID0+IHgub3BlcmF0b3IgPT09IG9wZXJhdG9ycy5kb3REb3QpKSB7CiAgICByZXR1cm4gbnVsbDsKICB9CiAgY29uc3QgZm4gPSBzaG9ydGN1dHMuZ2V0KHBhcnNlZFswXS5uYW1lKTsKICBsZXQgaSA9IDA7CiAgaWYgKGZuKSB7CiAgICByb290ID0gZm4ocm9vdCwgY29udGFpbmVyKTsKICAgIGkgPSAxOwogIH0gZWxzZSB7CiAgICByb290ID0gY29udGFpbmVyIHx8IHJvb3Q7CiAgfQogIGZvciAobGV0IGlpID0gcGFyc2VkLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgIGNvbnN0IHsKICAgICAgbmFtZSwKICAgICAgb3BlcmF0b3IsCiAgICAgIGluZGV4CiAgICB9ID0gcGFyc2VkW2ldOwogICAgaWYgKCFpc0Zpbml0ZShpbmRleCkpIHsKICAgICAgcGFyc2VkW2ldLmluZGV4ID0gMDsKICAgICAgcmV0dXJuIHJvb3QuY3JlYXRlTm9kZXMocGFyc2VkLnNsaWNlKGkpKTsKICAgIH0KICAgIGxldCBjaGlsZHJlbjsKICAgIHN3aXRjaCAob3BlcmF0b3IpIHsKICAgICAgY2FzZSBvcGVyYXRvcnMuZG90OgogICAgICAgIGNoaWxkcmVuID0gcm9vdFskZ2V0Q2hpbGRyZW5CeU5hbWVdKG5hbWUsIGZhbHNlKTsKICAgICAgICBicmVhazsKICAgICAgY2FzZSBvcGVyYXRvcnMuZG90RG90OgogICAgICAgIGNoaWxkcmVuID0gcm9vdFskZ2V0Q2hpbGRyZW5CeU5hbWVdKG5hbWUsIHRydWUpOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlIG9wZXJhdG9ycy5kb3RIYXNoOgogICAgICAgIGNoaWxkcmVuID0gcm9vdFskZ2V0Q2hpbGRyZW5CeUNsYXNzXShuYW1lKTsKICAgICAgICBjaGlsZHJlbiA9IGNoaWxkcmVuLmlzWEZBT2JqZWN0QXJyYXkgPyBjaGlsZHJlbi5jaGlsZHJlbiA6IFtjaGlsZHJlbl07CiAgICAgICAgYnJlYWs7CiAgICAgIGRlZmF1bHQ6CiAgICAgICAgYnJlYWs7CiAgICB9CiAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7CiAgICAgIHJldHVybiByb290LmNyZWF0ZU5vZGVzKHBhcnNlZC5zbGljZShpKSk7CiAgICB9CiAgICBpZiAoaW5kZXggPCBjaGlsZHJlbi5sZW5ndGgpIHsKICAgICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbltpbmRleF07CiAgICAgIGlmICghY2hpbGQuaXNYRkFPYmplY3QpIHsKICAgICAgICB3YXJuKGBYRkEgLSBDYW5ub3QgY3JlYXRlIGEgbm9kZS5gKTsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgICByb290ID0gY2hpbGQ7CiAgICB9IGVsc2UgewogICAgICBwYXJzZWRbaV0uaW5kZXggPSBpbmRleCAtIGNoaWxkcmVuLmxlbmd0aDsKICAgICAgcmV0dXJuIHJvb3QuY3JlYXRlTm9kZXMocGFyc2VkLnNsaWNlKGkpKTsKICAgIH0KICB9CiAgcmV0dXJuIG51bGw7Cn0KCjsvLyAuL3NyYy9jb3JlL3hmYS94ZmFfb2JqZWN0LmpzCgoKCgoKCgoKCgoKCgoKCgoKY29uc3QgX2FwcGx5UHJvdG90eXBlID0gU3ltYm9sKCk7CmNvbnN0IF9hdHRyaWJ1dGVzID0gU3ltYm9sKCk7CmNvbnN0IF9hdHRyaWJ1dGVOYW1lcyA9IFN5bWJvbCgpOwpjb25zdCBfY2hpbGRyZW4gPSBTeW1ib2woIl9jaGlsZHJlbiIpOwpjb25zdCBfY2xvbmVBdHRyaWJ1dGUgPSBTeW1ib2woKTsKY29uc3QgX2RhdGFWYWx1ZSA9IFN5bWJvbCgpOwpjb25zdCBfZGVmYXVsdFZhbHVlID0gU3ltYm9sKCk7CmNvbnN0IF9maWx0ZXJlZENoaWxkcmVuR2VuZXJhdG9yID0gU3ltYm9sKCk7CmNvbnN0IF9nZXRQcm90b3R5cGUgPSBTeW1ib2woKTsKY29uc3QgX2dldFVuc2V0QXR0cmlidXRlcyA9IFN5bWJvbCgpOwpjb25zdCBfaGFzQ2hpbGRyZW4gPSBTeW1ib2woKTsKY29uc3QgX21heCA9IFN5bWJvbCgpOwpjb25zdCBfb3B0aW9ucyA9IFN5bWJvbCgpOwpjb25zdCBfcGFyZW50ID0gU3ltYm9sKCJwYXJlbnQiKTsKY29uc3QgX3Jlc29sdmVQcm90b3R5cGVzSGVscGVyID0gU3ltYm9sKCk7CmNvbnN0IF9zZXRBdHRyaWJ1dGVzID0gU3ltYm9sKCk7CmNvbnN0IF92YWxpZGF0b3IgPSBTeW1ib2woKTsKbGV0IHVpZCA9IDA7CmNvbnN0IE5TX0RBVEFTRVRTID0gTmFtZXNwYWNlSWRzLmRhdGFzZXRzLmlkOwpjbGFzcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKG5zSWQsIG5hbWUsIGhhc0NoaWxkcmVuID0gZmFsc2UpIHsKICAgIHRoaXNbJG5hbWVzcGFjZUlkXSA9IG5zSWQ7CiAgICB0aGlzWyRub2RlTmFtZV0gPSBuYW1lOwogICAgdGhpc1tfaGFzQ2hpbGRyZW5dID0gaGFzQ2hpbGRyZW47CiAgICB0aGlzW19wYXJlbnRdID0gbnVsbDsKICAgIHRoaXNbX2NoaWxkcmVuXSA9IFtdOwogICAgdGhpc1skdWlkXSA9IGAke25hbWV9JHt1aWQrK31gOwogICAgdGhpc1skZ2xvYmFsRGF0YV0gPSBudWxsOwogIH0KICBnZXQgaXNYRkFPYmplY3QoKSB7CiAgICByZXR1cm4gdHJ1ZTsKICB9CiAgZ2V0IGlzWEZBT2JqZWN0QXJyYXkoKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQogIGNyZWF0ZU5vZGVzKHBhdGgpIHsKICAgIGxldCByb290ID0gdGhpcywKICAgICAgbm9kZSA9IG51bGw7CiAgICBmb3IgKGNvbnN0IHsKICAgICAgbmFtZSwKICAgICAgaW5kZXgKICAgIH0gb2YgcGF0aCkgewogICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBpc0Zpbml0ZShpbmRleCkgPyBpbmRleCA6IDA7IGkgPD0gaWk7IGkrKykgewogICAgICAgIGNvbnN0IG5zSWQgPSByb290WyRuYW1lc3BhY2VJZF0gPT09IE5TX0RBVEFTRVRTID8gLTEgOiByb290WyRuYW1lc3BhY2VJZF07CiAgICAgICAgbm9kZSA9IG5ldyBYbWxPYmplY3QobnNJZCwgbmFtZSk7CiAgICAgICAgcm9vdFskYXBwZW5kQ2hpbGRdKG5vZGUpOwogICAgICB9CiAgICAgIHJvb3QgPSBub2RlOwogICAgfQogICAgcmV0dXJuIG5vZGU7CiAgfQogIFskb25DaGlsZF0oY2hpbGQpIHsKICAgIGlmICghdGhpc1tfaGFzQ2hpbGRyZW5dIHx8ICF0aGlzWyRvbkNoaWxkQ2hlY2tdKGNoaWxkKSkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgICBjb25zdCBuYW1lID0gY2hpbGRbJG5vZGVOYW1lXTsKICAgIGNvbnN0IG5vZGUgPSB0aGlzW25hbWVdOwogICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBYRkFPYmplY3RBcnJheSkgewogICAgICBpZiAobm9kZS5wdXNoKGNoaWxkKSkgewogICAgICAgIHRoaXNbJGFwcGVuZENoaWxkXShjaGlsZCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGlmIChub2RlICE9PSBudWxsKSB7CiAgICAgICAgdGhpc1skcmVtb3ZlQ2hpbGRdKG5vZGUpOwogICAgICB9CiAgICAgIHRoaXNbbmFtZV0gPSBjaGlsZDsKICAgICAgdGhpc1skYXBwZW5kQ2hpbGRdKGNoaWxkKTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICBsZXQgaWQgPSAiIjsKICAgIGlmICh0aGlzLmlkKSB7CiAgICAgIGlkID0gYCAoaWQ6ICR7dGhpcy5pZH0pYDsKICAgIH0gZWxzZSBpZiAodGhpcy5uYW1lKSB7CiAgICAgIGlkID0gYCAobmFtZTogJHt0aGlzLm5hbWV9ICR7dGhpcy5oLnZhbHVlfSlgOwogICAgfQogICAgd2FybihgWEZBIC0gbm9kZSAiJHt0aGlzWyRub2RlTmFtZV19IiR7aWR9IGhhcyBhbHJlYWR5IGVub3VnaCAiJHtuYW1lfSIhYCk7CiAgICByZXR1cm4gZmFsc2U7CiAgfQogIFskb25DaGlsZENoZWNrXShjaGlsZCkgewogICAgcmV0dXJuIHRoaXMuaGFzT3duUHJvcGVydHkoY2hpbGRbJG5vZGVOYW1lXSkgJiYgY2hpbGRbJG5hbWVzcGFjZUlkXSA9PT0gdGhpc1skbmFtZXNwYWNlSWRdOwogIH0KICBbJGlzTnNBZ25vc3RpY10oKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQogIFskYWNjZXB0V2hpdGVzcGFjZV0oKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQogIFskaXNDREFUQVhtbF0oKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQogIFskaXNCaW5kYWJsZV0oKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQogIFskcG9wUGFyYV0oKSB7CiAgICBpZiAodGhpcy5wYXJhKSB7CiAgICAgIHRoaXNbJGdldFRlbXBsYXRlUm9vdF0oKVskZXh0cmFdLnBhcmFTdGFjay5wb3AoKTsKICAgIH0KICB9CiAgWyRwdXNoUGFyYV0oKSB7CiAgICB0aGlzWyRnZXRUZW1wbGF0ZVJvb3RdKClbJGV4dHJhXS5wYXJhU3RhY2sucHVzaCh0aGlzLnBhcmEpOwogIH0KICBbJHNldElkXShpZHMpIHsKICAgIGlmICh0aGlzLmlkICYmIHRoaXNbJG5hbWVzcGFjZUlkXSA9PT0gTmFtZXNwYWNlSWRzLnRlbXBsYXRlLmlkKSB7CiAgICAgIGlkcy5zZXQodGhpcy5pZCwgdGhpcyk7CiAgICB9CiAgfQogIFskZ2V0VGVtcGxhdGVSb290XSgpIHsKICAgIHJldHVybiB0aGlzWyRnbG9iYWxEYXRhXS50ZW1wbGF0ZTsKICB9CiAgWyRpc1NwbGl0dGFibGVdKCkgewogICAgcmV0dXJuIGZhbHNlOwogIH0KICBbJGlzVGhlcmVNb3JlV2lkdGhdKCkgewogICAgcmV0dXJuIGZhbHNlOwogIH0KICBbJGFwcGVuZENoaWxkXShjaGlsZCkgewogICAgY2hpbGRbX3BhcmVudF0gPSB0aGlzOwogICAgdGhpc1tfY2hpbGRyZW5dLnB1c2goY2hpbGQpOwogICAgaWYgKCFjaGlsZFskZ2xvYmFsRGF0YV0gJiYgdGhpc1skZ2xvYmFsRGF0YV0pIHsKICAgICAgY2hpbGRbJGdsb2JhbERhdGFdID0gdGhpc1skZ2xvYmFsRGF0YV07CiAgICB9CiAgfQogIFskcmVtb3ZlQ2hpbGRdKGNoaWxkKSB7CiAgICBjb25zdCBpID0gdGhpc1tfY2hpbGRyZW5dLmluZGV4T2YoY2hpbGQpOwogICAgdGhpc1tfY2hpbGRyZW5dLnNwbGljZShpLCAxKTsKICB9CiAgWyRoYXNTZXR0YWJsZVZhbHVlXSgpIHsKICAgIHJldHVybiB0aGlzLmhhc093blByb3BlcnR5KCJ2YWx1ZSIpOwogIH0KICBbJHNldFZhbHVlXShfKSB7fQogIFskb25UZXh0XShfKSB7fQogIFskZmluYWxpemVdKCkge30KICBbJGNsZWFuXShidWlsZGVyKSB7CiAgICBkZWxldGUgdGhpc1tfaGFzQ2hpbGRyZW5dOwogICAgaWYgKHRoaXNbJGNsZWFudXBdKSB7CiAgICAgIGJ1aWxkZXIuY2xlYW4odGhpc1skY2xlYW51cF0pOwogICAgICBkZWxldGUgdGhpc1skY2xlYW51cF07CiAgICB9CiAgfQogIFskaW5kZXhPZl0oY2hpbGQpIHsKICAgIHJldHVybiB0aGlzW19jaGlsZHJlbl0uaW5kZXhPZihjaGlsZCk7CiAgfQogIFskaW5zZXJ0QXRdKGksIGNoaWxkKSB7CiAgICBjaGlsZFtfcGFyZW50XSA9IHRoaXM7CiAgICB0aGlzW19jaGlsZHJlbl0uc3BsaWNlKGksIDAsIGNoaWxkKTsKICAgIGlmICghY2hpbGRbJGdsb2JhbERhdGFdICYmIHRoaXNbJGdsb2JhbERhdGFdKSB7CiAgICAgIGNoaWxkWyRnbG9iYWxEYXRhXSA9IHRoaXNbJGdsb2JhbERhdGFdOwogICAgfQogIH0KICBbJGlzVHJhbnNwYXJlbnRdKCkgewogICAgcmV0dXJuICF0aGlzLm5hbWU7CiAgfQogIFskbGFzdEF0dHJpYnV0ZV0oKSB7CiAgICByZXR1cm4gIiI7CiAgfQogIFskdGV4dF0oKSB7CiAgICBpZiAodGhpc1tfY2hpbGRyZW5dLmxlbmd0aCA9PT0gMCkgewogICAgICByZXR1cm4gdGhpc1skY29udGVudF07CiAgICB9CiAgICByZXR1cm4gdGhpc1tfY2hpbGRyZW5dLm1hcChjID0+IGNbJHRleHRdKCkpLmpvaW4oIiIpOwogIH0KICBnZXQgW19hdHRyaWJ1dGVOYW1lc10oKSB7CiAgICBjb25zdCBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKTsKICAgIGlmICghcHJvdG8uX2F0dHJpYnV0ZXMpIHsKICAgICAgY29uc3QgYXR0cmlidXRlcyA9IHByb3RvLl9hdHRyaWJ1dGVzID0gbmV3IFNldCgpOwogICAgICBmb3IgKGNvbnN0IG5hbWUgb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykpIHsKICAgICAgICBpZiAodGhpc1tuYW1lXSA9PT0gbnVsbCB8fCB0aGlzW25hbWVdIGluc3RhbmNlb2YgWEZBT2JqZWN0IHx8IHRoaXNbbmFtZV0gaW5zdGFuY2VvZiBYRkFPYmplY3RBcnJheSkgewogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICAgIGF0dHJpYnV0ZXMuYWRkKG5hbWUpOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gc2hhZG93KHRoaXMsIF9hdHRyaWJ1dGVOYW1lcywgcHJvdG8uX2F0dHJpYnV0ZXMpOwogIH0KICBbJGlzRGVzY2VuZGVudF0ocGFyZW50KSB7CiAgICBsZXQgbm9kZSA9IHRoaXM7CiAgICB3aGlsZSAobm9kZSkgewogICAgICBpZiAobm9kZSA9PT0gcGFyZW50KSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgICAgbm9kZSA9IG5vZGVbJGdldFBhcmVudF0oKTsKICAgIH0KICAgIHJldHVybiBmYWxzZTsKICB9CiAgWyRnZXRQYXJlbnRdKCkgewogICAgcmV0dXJuIHRoaXNbX3BhcmVudF07CiAgfQogIFskZ2V0U3ViZm9ybVBhcmVudF0oKSB7CiAgICByZXR1cm4gdGhpc1skZ2V0UGFyZW50XSgpOwogIH0KICBbJGdldENoaWxkcmVuXShuYW1lID0gbnVsbCkgewogICAgaWYgKCFuYW1lKSB7CiAgICAgIHJldHVybiB0aGlzW19jaGlsZHJlbl07CiAgICB9CiAgICByZXR1cm4gdGhpc1tuYW1lXTsKICB9CiAgWyRkdW1wXSgpIHsKICAgIGNvbnN0IGR1bXBlZCA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgICBpZiAodGhpc1skY29udGVudF0pIHsKICAgICAgZHVtcGVkLiRjb250ZW50ID0gdGhpc1skY29udGVudF07CiAgICB9CiAgICBmb3IgKGNvbnN0IG5hbWUgb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykpIHsKICAgICAgY29uc3QgdmFsdWUgPSB0aGlzW25hbWVdOwogICAgICBpZiAodmFsdWUgPT09IG51bGwpIHsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBYRkFPYmplY3QpIHsKICAgICAgICBkdW1wZWRbbmFtZV0gPSB2YWx1ZVskZHVtcF0oKTsKICAgICAgfSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFhGQU9iamVjdEFycmF5KSB7CiAgICAgICAgaWYgKCF2YWx1ZS5pc0VtcHR5KCkpIHsKICAgICAgICAgIGR1bXBlZFtuYW1lXSA9IHZhbHVlLmR1bXAoKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZHVtcGVkW25hbWVdID0gdmFsdWU7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBkdW1wZWQ7CiAgfQogIFskdG9TdHlsZV0oKSB7CiAgICByZXR1cm4gbnVsbDsKICB9CiAgWyR0b0hUTUxdKCkgewogICAgcmV0dXJuIEhUTUxSZXN1bHQuRU1QVFk7CiAgfQogICpbJGdldENvbnRhaW5lZENoaWxkcmVuXSgpIHsKICAgIGZvciAoY29uc3Qgbm9kZSBvZiB0aGlzWyRnZXRDaGlsZHJlbl0oKSkgewogICAgICB5aWVsZCBub2RlOwogICAgfQogIH0KICAqW19maWx0ZXJlZENoaWxkcmVuR2VuZXJhdG9yXShmaWx0ZXIsIGluY2x1ZGUpIHsKICAgIGZvciAoY29uc3Qgbm9kZSBvZiB0aGlzWyRnZXRDb250YWluZWRDaGlsZHJlbl0oKSkgewogICAgICBpZiAoIWZpbHRlciB8fCBpbmNsdWRlID09PSBmaWx0ZXIuaGFzKG5vZGVbJG5vZGVOYW1lXSkpIHsKICAgICAgICBjb25zdCBhdmFpbGFibGVTcGFjZSA9IHRoaXNbJGdldEF2YWlsYWJsZVNwYWNlXSgpOwogICAgICAgIGNvbnN0IHJlcyA9IG5vZGVbJHRvSFRNTF0oYXZhaWxhYmxlU3BhY2UpOwogICAgICAgIGlmICghcmVzLnN1Y2Nlc3MpIHsKICAgICAgICAgIHRoaXNbJGV4dHJhXS5mYWlsaW5nTm9kZSA9IG5vZGU7CiAgICAgICAgfQogICAgICAgIHlpZWxkIHJlczsKICAgICAgfQogICAgfQogIH0KICBbJGZsdXNoSFRNTF0oKSB7CiAgICByZXR1cm4gbnVsbDsKICB9CiAgWyRhZGRIVE1MXShodG1sLCBiYm94KSB7CiAgICB0aGlzWyRleHRyYV0uY2hpbGRyZW4ucHVzaChodG1sKTsKICB9CiAgWyRnZXRBdmFpbGFibGVTcGFjZV0oKSB7fQogIFskY2hpbGRyZW5Ub0hUTUxdKHsKICAgIGZpbHRlciA9IG51bGwsCiAgICBpbmNsdWRlID0gdHJ1ZQogIH0pIHsKICAgIGlmICghdGhpc1skZXh0cmFdLmdlbmVyYXRvcikgewogICAgICB0aGlzWyRleHRyYV0uZ2VuZXJhdG9yID0gdGhpc1tfZmlsdGVyZWRDaGlsZHJlbkdlbmVyYXRvcl0oZmlsdGVyLCBpbmNsdWRlKTsKICAgIH0gZWxzZSB7CiAgICAgIGNvbnN0IGF2YWlsYWJsZVNwYWNlID0gdGhpc1skZ2V0QXZhaWxhYmxlU3BhY2VdKCk7CiAgICAgIGNvbnN0IHJlcyA9IHRoaXNbJGV4dHJhXS5mYWlsaW5nTm9kZVskdG9IVE1MXShhdmFpbGFibGVTcGFjZSk7CiAgICAgIGlmICghcmVzLnN1Y2Nlc3MpIHsKICAgICAgICByZXR1cm4gcmVzOwogICAgICB9CiAgICAgIGlmIChyZXMuaHRtbCkgewogICAgICAgIHRoaXNbJGFkZEhUTUxdKHJlcy5odG1sLCByZXMuYmJveCk7CiAgICAgIH0KICAgICAgZGVsZXRlIHRoaXNbJGV4dHJhXS5mYWlsaW5nTm9kZTsKICAgIH0KICAgIHdoaWxlICh0cnVlKSB7CiAgICAgIGNvbnN0IGdlbiA9IHRoaXNbJGV4dHJhXS5nZW5lcmF0b3IubmV4dCgpOwogICAgICBpZiAoZ2VuLmRvbmUpIHsKICAgICAgICBicmVhazsKICAgICAgfQogICAgICBjb25zdCByZXMgPSBnZW4udmFsdWU7CiAgICAgIGlmICghcmVzLnN1Y2Nlc3MpIHsKICAgICAgICByZXR1cm4gcmVzOwogICAgICB9CiAgICAgIGlmIChyZXMuaHRtbCkgewogICAgICAgIHRoaXNbJGFkZEhUTUxdKHJlcy5odG1sLCByZXMuYmJveCk7CiAgICAgIH0KICAgIH0KICAgIHRoaXNbJGV4dHJhXS5nZW5lcmF0b3IgPSBudWxsOwogICAgcmV0dXJuIEhUTUxSZXN1bHQuRU1QVFk7CiAgfQogIFskc2V0U2V0QXR0cmlidXRlc10oYXR0cmlidXRlcykgewogICAgdGhpc1tfc2V0QXR0cmlidXRlc10gPSBuZXcgU2V0KE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpKTsKICB9CiAgW19nZXRVbnNldEF0dHJpYnV0ZXNdKHByb3RvQXR0cmlidXRlcykgewogICAgY29uc3QgYWxsQXR0ciA9IHRoaXNbX2F0dHJpYnV0ZU5hbWVzXTsKICAgIGNvbnN0IHNldEF0dHIgPSB0aGlzW19zZXRBdHRyaWJ1dGVzXTsKICAgIHJldHVybiBbLi4ucHJvdG9BdHRyaWJ1dGVzXS5maWx0ZXIoeCA9PiBhbGxBdHRyLmhhcyh4KSAmJiAhc2V0QXR0ci5oYXMoeCkpOwogIH0KICBbJHJlc29sdmVQcm90b3R5cGVzXShpZHMsIGFuY2VzdG9ycyA9IG5ldyBTZXQoKSkgewogICAgZm9yIChjb25zdCBjaGlsZCBvZiB0aGlzW19jaGlsZHJlbl0pIHsKICAgICAgY2hpbGRbX3Jlc29sdmVQcm90b3R5cGVzSGVscGVyXShpZHMsIGFuY2VzdG9ycyk7CiAgICB9CiAgfQogIFtfcmVzb2x2ZVByb3RvdHlwZXNIZWxwZXJdKGlkcywgYW5jZXN0b3JzKSB7CiAgICBjb25zdCBwcm90byA9IHRoaXNbX2dldFByb3RvdHlwZV0oaWRzLCBhbmNlc3RvcnMpOwogICAgaWYgKHByb3RvKSB7CiAgICAgIHRoaXNbX2FwcGx5UHJvdG90eXBlXShwcm90bywgaWRzLCBhbmNlc3RvcnMpOwogICAgfSBlbHNlIHsKICAgICAgdGhpc1skcmVzb2x2ZVByb3RvdHlwZXNdKGlkcywgYW5jZXN0b3JzKTsKICAgIH0KICB9CiAgW19nZXRQcm90b3R5cGVdKGlkcywgYW5jZXN0b3JzKSB7CiAgICBjb25zdCB7CiAgICAgIHVzZSwKICAgICAgdXNlaHJlZgogICAgfSA9IHRoaXM7CiAgICBpZiAoIXVzZSAmJiAhdXNlaHJlZikgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIGxldCBwcm90byA9IG51bGw7CiAgICBsZXQgc29tRXhwcmVzc2lvbiA9IG51bGw7CiAgICBsZXQgaWQgPSBudWxsOwogICAgbGV0IHJlZiA9IHVzZTsKICAgIGlmICh1c2VocmVmKSB7CiAgICAgIHJlZiA9IHVzZWhyZWY7CiAgICAgIGlmICh1c2VocmVmLnN0YXJ0c1dpdGgoIiNzb20oIikgJiYgdXNlaHJlZi5lbmRzV2l0aCgiKSIpKSB7CiAgICAgICAgc29tRXhwcmVzc2lvbiA9IHVzZWhyZWYuc2xpY2UoIiNzb20oIi5sZW5ndGgsIC0xKTsKICAgICAgfSBlbHNlIGlmICh1c2VocmVmLnN0YXJ0c1dpdGgoIi4jc29tKCIpICYmIHVzZWhyZWYuZW5kc1dpdGgoIikiKSkgewogICAgICAgIHNvbUV4cHJlc3Npb24gPSB1c2VocmVmLnNsaWNlKCIuI3NvbSgiLmxlbmd0aCwgLTEpOwogICAgICB9IGVsc2UgaWYgKHVzZWhyZWYuc3RhcnRzV2l0aCgiIyIpKSB7CiAgICAgICAgaWQgPSB1c2VocmVmLnNsaWNlKDEpOwogICAgICB9IGVsc2UgaWYgKHVzZWhyZWYuc3RhcnRzV2l0aCgiLiMiKSkgewogICAgICAgIGlkID0gdXNlaHJlZi5zbGljZSgyKTsKICAgICAgfQogICAgfSBlbHNlIGlmICh1c2Uuc3RhcnRzV2l0aCgiIyIpKSB7CiAgICAgIGlkID0gdXNlLnNsaWNlKDEpOwogICAgfSBlbHNlIHsKICAgICAgc29tRXhwcmVzc2lvbiA9IHVzZTsKICAgIH0KICAgIHRoaXMudXNlID0gdGhpcy51c2VocmVmID0gIiI7CiAgICBpZiAoaWQpIHsKICAgICAgcHJvdG8gPSBpZHMuZ2V0KGlkKTsKICAgIH0gZWxzZSB7CiAgICAgIHByb3RvID0gc2VhcmNoTm9kZShpZHMuZ2V0KCRyb290KSwgdGhpcywgc29tRXhwcmVzc2lvbiwgdHJ1ZSwgZmFsc2UpOwogICAgICBpZiAocHJvdG8pIHsKICAgICAgICBwcm90byA9IHByb3RvWzBdOwogICAgICB9CiAgICB9CiAgICBpZiAoIXByb3RvKSB7CiAgICAgIHdhcm4oYFhGQSAtIEludmFsaWQgcHJvdG90eXBlIHJlZmVyZW5jZTogJHtyZWZ9LmApOwogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIGlmIChwcm90b1skbm9kZU5hbWVdICE9PSB0aGlzWyRub2RlTmFtZV0pIHsKICAgICAgd2FybihgWEZBIC0gSW5jb21wYXRpYmxlIHByb3RvdHlwZTogJHtwcm90b1skbm9kZU5hbWVdfSAhPT0gJHt0aGlzWyRub2RlTmFtZV19LmApOwogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIGlmIChhbmNlc3RvcnMuaGFzKHByb3RvKSkgewogICAgICB3YXJuKGBYRkEgLSBDeWNsZSBkZXRlY3RlZCBpbiBwcm90b3R5cGVzIHVzZS5gKTsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICBhbmNlc3RvcnMuYWRkKHByb3RvKTsKICAgIGNvbnN0IHByb3RvUHJvdG8gPSBwcm90b1tfZ2V0UHJvdG90eXBlXShpZHMsIGFuY2VzdG9ycyk7CiAgICBpZiAocHJvdG9Qcm90bykgewogICAgICBwcm90b1tfYXBwbHlQcm90b3R5cGVdKHByb3RvUHJvdG8sIGlkcywgYW5jZXN0b3JzKTsKICAgIH0KICAgIHByb3RvWyRyZXNvbHZlUHJvdG90eXBlc10oaWRzLCBhbmNlc3RvcnMpOwogICAgYW5jZXN0b3JzLmRlbGV0ZShwcm90byk7CiAgICByZXR1cm4gcHJvdG87CiAgfQogIFtfYXBwbHlQcm90b3R5cGVdKHByb3RvLCBpZHMsIGFuY2VzdG9ycykgewogICAgaWYgKGFuY2VzdG9ycy5oYXMocHJvdG8pKSB7CiAgICAgIHdhcm4oYFhGQSAtIEN5Y2xlIGRldGVjdGVkIGluIHByb3RvdHlwZXMgdXNlLmApOwogICAgICByZXR1cm47CiAgICB9CiAgICBpZiAoIXRoaXNbJGNvbnRlbnRdICYmIHByb3RvWyRjb250ZW50XSkgewogICAgICB0aGlzWyRjb250ZW50XSA9IHByb3RvWyRjb250ZW50XTsKICAgIH0KICAgIGNvbnN0IG5ld0FuY2VzdG9ycyA9IG5ldyBTZXQoYW5jZXN0b3JzKTsKICAgIG5ld0FuY2VzdG9ycy5hZGQocHJvdG8pOwogICAgZm9yIChjb25zdCB1bnNldEF0dHJOYW1lIG9mIHRoaXNbX2dldFVuc2V0QXR0cmlidXRlc10ocHJvdG9bX3NldEF0dHJpYnV0ZXNdKSkgewogICAgICB0aGlzW3Vuc2V0QXR0ck5hbWVdID0gcHJvdG9bdW5zZXRBdHRyTmFtZV07CiAgICAgIGlmICh0aGlzW19zZXRBdHRyaWJ1dGVzXSkgewogICAgICAgIHRoaXNbX3NldEF0dHJpYnV0ZXNdLmFkZCh1bnNldEF0dHJOYW1lKTsKICAgICAgfQogICAgfQogICAgZm9yIChjb25zdCBuYW1lIG9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpKSB7CiAgICAgIGlmICh0aGlzW19hdHRyaWJ1dGVOYW1lc10uaGFzKG5hbWUpKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgY29uc3QgdmFsdWUgPSB0aGlzW25hbWVdOwogICAgICBjb25zdCBwcm90b1ZhbHVlID0gcHJvdG9bbmFtZV07CiAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFhGQU9iamVjdEFycmF5KSB7CiAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiB2YWx1ZVtfY2hpbGRyZW5dKSB7CiAgICAgICAgICBjaGlsZFtfcmVzb2x2ZVByb3RvdHlwZXNIZWxwZXJdKGlkcywgYW5jZXN0b3JzKTsKICAgICAgICB9CiAgICAgICAgZm9yIChsZXQgaSA9IHZhbHVlW19jaGlsZHJlbl0ubGVuZ3RoLCBpaSA9IHByb3RvVmFsdWVbX2NoaWxkcmVuXS5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgICAgICBjb25zdCBjaGlsZCA9IHByb3RvW19jaGlsZHJlbl1baV1bJGNsb25lXSgpOwogICAgICAgICAgaWYgKHZhbHVlLnB1c2goY2hpbGQpKSB7CiAgICAgICAgICAgIGNoaWxkW19wYXJlbnRdID0gdGhpczsKICAgICAgICAgICAgdGhpc1tfY2hpbGRyZW5dLnB1c2goY2hpbGQpOwogICAgICAgICAgICBjaGlsZFtfcmVzb2x2ZVByb3RvdHlwZXNIZWxwZXJdKGlkcywgYW5jZXN0b3JzKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBpZiAodmFsdWUgIT09IG51bGwpIHsKICAgICAgICB2YWx1ZVskcmVzb2x2ZVByb3RvdHlwZXNdKGlkcywgYW5jZXN0b3JzKTsKICAgICAgICBpZiAocHJvdG9WYWx1ZSkgewogICAgICAgICAgdmFsdWVbX2FwcGx5UHJvdG90eXBlXShwcm90b1ZhbHVlLCBpZHMsIGFuY2VzdG9ycyk7CiAgICAgICAgfQogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGlmIChwcm90b1ZhbHVlICE9PSBudWxsKSB7CiAgICAgICAgY29uc3QgY2hpbGQgPSBwcm90b1ZhbHVlWyRjbG9uZV0oKTsKICAgICAgICBjaGlsZFtfcGFyZW50XSA9IHRoaXM7CiAgICAgICAgdGhpc1tuYW1lXSA9IGNoaWxkOwogICAgICAgIHRoaXNbX2NoaWxkcmVuXS5wdXNoKGNoaWxkKTsKICAgICAgICBjaGlsZFtfcmVzb2x2ZVByb3RvdHlwZXNIZWxwZXJdKGlkcywgYW5jZXN0b3JzKTsKICAgICAgfQogICAgfQogIH0KICBzdGF0aWMgW19jbG9uZUF0dHJpYnV0ZV0ob2JqKSB7CiAgICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7CiAgICAgIHJldHVybiBvYmoubWFwKHggPT4gWEZBT2JqZWN0W19jbG9uZUF0dHJpYnV0ZV0oeCkpOwogICAgfQogICAgaWYgKHR5cGVvZiBvYmogPT09ICJvYmplY3QiICYmIG9iaiAhPT0gbnVsbCkgewogICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgb2JqKTsKICAgIH0KICAgIHJldHVybiBvYmo7CiAgfQogIFskY2xvbmVdKCkgewogICAgY29uc3QgY2xvbmUgPSBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKSk7CiAgICBmb3IgKGNvbnN0ICRzeW1ib2wgb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh0aGlzKSkgewogICAgICB0cnkgewogICAgICAgIGNsb25lWyRzeW1ib2xdID0gdGhpc1skc3ltYm9sXTsKICAgICAgfSBjYXRjaCB7CiAgICAgICAgc2hhZG93KGNsb25lLCAkc3ltYm9sLCB0aGlzWyRzeW1ib2xdKTsKICAgICAgfQogICAgfQogICAgY2xvbmVbJHVpZF0gPSBgJHtjbG9uZVskbm9kZU5hbWVdfSR7dWlkKyt9YDsKICAgIGNsb25lW19jaGlsZHJlbl0gPSBbXTsKICAgIGZvciAoY29uc3QgbmFtZSBvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzKSkgewogICAgICBpZiAodGhpc1tfYXR0cmlidXRlTmFtZXNdLmhhcyhuYW1lKSkgewogICAgICAgIGNsb25lW25hbWVdID0gWEZBT2JqZWN0W19jbG9uZUF0dHJpYnV0ZV0odGhpc1tuYW1lXSk7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgY29uc3QgdmFsdWUgPSB0aGlzW25hbWVdOwogICAgICBjbG9uZVtuYW1lXSA9IHZhbHVlIGluc3RhbmNlb2YgWEZBT2JqZWN0QXJyYXkgPyBuZXcgWEZBT2JqZWN0QXJyYXkodmFsdWVbX21heF0pIDogbnVsbDsKICAgIH0KICAgIGZvciAoY29uc3QgY2hpbGQgb2YgdGhpc1tfY2hpbGRyZW5dKSB7CiAgICAgIGNvbnN0IG5hbWUgPSBjaGlsZFskbm9kZU5hbWVdOwogICAgICBjb25zdCBjbG9uZWRDaGlsZCA9IGNoaWxkWyRjbG9uZV0oKTsKICAgICAgY2xvbmVbX2NoaWxkcmVuXS5wdXNoKGNsb25lZENoaWxkKTsKICAgICAgY2xvbmVkQ2hpbGRbX3BhcmVudF0gPSBjbG9uZTsKICAgICAgaWYgKGNsb25lW25hbWVdID09PSBudWxsKSB7CiAgICAgICAgY2xvbmVbbmFtZV0gPSBjbG9uZWRDaGlsZDsKICAgICAgfSBlbHNlIHsKICAgICAgICBjbG9uZVtuYW1lXVtfY2hpbGRyZW5dLnB1c2goY2xvbmVkQ2hpbGQpOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gY2xvbmU7CiAgfQogIFskZ2V0Q2hpbGRyZW5dKG5hbWUgPSBudWxsKSB7CiAgICBpZiAoIW5hbWUpIHsKICAgICAgcmV0dXJuIHRoaXNbX2NoaWxkcmVuXTsKICAgIH0KICAgIHJldHVybiB0aGlzW19jaGlsZHJlbl0uZmlsdGVyKGMgPT4gY1skbm9kZU5hbWVdID09PSBuYW1lKTsKICB9CiAgWyRnZXRDaGlsZHJlbkJ5Q2xhc3NdKG5hbWUpIHsKICAgIHJldHVybiB0aGlzW25hbWVdOwogIH0KICBbJGdldENoaWxkcmVuQnlOYW1lXShuYW1lLCBhbGxUcmFuc3BhcmVudCwgZmlyc3QgPSB0cnVlKSB7CiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzWyRnZXRDaGlsZHJlbkJ5TmFtZUl0XShuYW1lLCBhbGxUcmFuc3BhcmVudCwgZmlyc3QpKTsKICB9CiAgKlskZ2V0Q2hpbGRyZW5CeU5hbWVJdF0obmFtZSwgYWxsVHJhbnNwYXJlbnQsIGZpcnN0ID0gdHJ1ZSkgewogICAgaWYgKG5hbWUgPT09ICJwYXJlbnQiKSB7CiAgICAgIHlpZWxkIHRoaXNbX3BhcmVudF07CiAgICAgIHJldHVybjsKICAgIH0KICAgIGZvciAoY29uc3QgY2hpbGQgb2YgdGhpc1tfY2hpbGRyZW5dKSB7CiAgICAgIGlmIChjaGlsZFskbm9kZU5hbWVdID09PSBuYW1lKSB7CiAgICAgICAgeWllbGQgY2hpbGQ7CiAgICAgIH0KICAgICAgaWYgKGNoaWxkLm5hbWUgPT09IG5hbWUpIHsKICAgICAgICB5aWVsZCBjaGlsZDsKICAgICAgfQogICAgICBpZiAoYWxsVHJhbnNwYXJlbnQgfHwgY2hpbGRbJGlzVHJhbnNwYXJlbnRdKCkpIHsKICAgICAgICB5aWVsZCogY2hpbGRbJGdldENoaWxkcmVuQnlOYW1lSXRdKG5hbWUsIGFsbFRyYW5zcGFyZW50LCBmYWxzZSk7CiAgICAgIH0KICAgIH0KICAgIGlmIChmaXJzdCAmJiB0aGlzW19hdHRyaWJ1dGVOYW1lc10uaGFzKG5hbWUpKSB7CiAgICAgIHlpZWxkIG5ldyBYRkFBdHRyaWJ1dGUodGhpcywgbmFtZSwgdGhpc1tuYW1lXSk7CiAgICB9CiAgfQp9CmNsYXNzIFhGQU9iamVjdEFycmF5IHsKICBjb25zdHJ1Y3RvcihtYXggPSBJbmZpbml0eSkgewogICAgdGhpc1tfbWF4XSA9IG1heDsKICAgIHRoaXNbX2NoaWxkcmVuXSA9IFtdOwogIH0KICBnZXQgaXNYRkFPYmplY3QoKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQogIGdldCBpc1hGQU9iamVjdEFycmF5KCkgewogICAgcmV0dXJuIHRydWU7CiAgfQogIHB1c2goY2hpbGQpIHsKICAgIGNvbnN0IGxlbiA9IHRoaXNbX2NoaWxkcmVuXS5sZW5ndGg7CiAgICBpZiAobGVuIDw9IHRoaXNbX21heF0pIHsKICAgICAgdGhpc1tfY2hpbGRyZW5dLnB1c2goY2hpbGQpOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIHdhcm4oYFhGQSAtIG5vZGUgIiR7Y2hpbGRbJG5vZGVOYW1lXX0iIGFjY2VwdHMgbm8gbW9yZSB0aGFuICR7dGhpc1tfbWF4XX0gY2hpbGRyZW5gKTsKICAgIHJldHVybiBmYWxzZTsKICB9CiAgaXNFbXB0eSgpIHsKICAgIHJldHVybiB0aGlzW19jaGlsZHJlbl0ubGVuZ3RoID09PSAwOwogIH0KICBkdW1wKCkgewogICAgcmV0dXJuIHRoaXNbX2NoaWxkcmVuXS5sZW5ndGggPT09IDEgPyB0aGlzW19jaGlsZHJlbl1bMF1bJGR1bXBdKCkgOiB0aGlzW19jaGlsZHJlbl0ubWFwKHggPT4geFskZHVtcF0oKSk7CiAgfQogIFskY2xvbmVdKCkgewogICAgY29uc3QgY2xvbmUgPSBuZXcgWEZBT2JqZWN0QXJyYXkodGhpc1tfbWF4XSk7CiAgICBjbG9uZVtfY2hpbGRyZW5dID0gdGhpc1tfY2hpbGRyZW5dLm1hcChjID0+IGNbJGNsb25lXSgpKTsKICAgIHJldHVybiBjbG9uZTsKICB9CiAgZ2V0IGNoaWxkcmVuKCkgewogICAgcmV0dXJuIHRoaXNbX2NoaWxkcmVuXTsKICB9CiAgY2xlYXIoKSB7CiAgICB0aGlzW19jaGlsZHJlbl0ubGVuZ3RoID0gMDsKICB9Cn0KY2xhc3MgWEZBQXR0cmlidXRlIHsKICBjb25zdHJ1Y3Rvcihub2RlLCBuYW1lLCB2YWx1ZSkgewogICAgdGhpc1tfcGFyZW50XSA9IG5vZGU7CiAgICB0aGlzWyRub2RlTmFtZV0gPSBuYW1lOwogICAgdGhpc1skY29udGVudF0gPSB2YWx1ZTsKICAgIHRoaXNbJGNvbnN1bWVkXSA9IGZhbHNlOwogICAgdGhpc1skdWlkXSA9IGBhdHRyaWJ1dGUke3VpZCsrfWA7CiAgfQogIFskZ2V0UGFyZW50XSgpIHsKICAgIHJldHVybiB0aGlzW19wYXJlbnRdOwogIH0KICBbJGlzRGF0YVZhbHVlXSgpIHsKICAgIHJldHVybiB0cnVlOwogIH0KICBbJGdldERhdGFWYWx1ZV0oKSB7CiAgICByZXR1cm4gdGhpc1skY29udGVudF0udHJpbSgpOwogIH0KICBbJHNldFZhbHVlXSh2YWx1ZSkgewogICAgdmFsdWUgPSB2YWx1ZS52YWx1ZSB8fCAiIjsKICAgIHRoaXNbJGNvbnRlbnRdID0gdmFsdWUudG9TdHJpbmcoKTsKICB9CiAgWyR0ZXh0XSgpIHsKICAgIHJldHVybiB0aGlzWyRjb250ZW50XTsKICB9CiAgWyRpc0Rlc2NlbmRlbnRdKHBhcmVudCkgewogICAgcmV0dXJuIHRoaXNbX3BhcmVudF0gPT09IHBhcmVudCB8fCB0aGlzW19wYXJlbnRdWyRpc0Rlc2NlbmRlbnRdKHBhcmVudCk7CiAgfQp9CmNsYXNzIFhtbE9iamVjdCBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IobnNJZCwgbmFtZSwgYXR0cmlidXRlcyA9IHt9KSB7CiAgICBzdXBlcihuc0lkLCBuYW1lKTsKICAgIHRoaXNbJGNvbnRlbnRdID0gIiI7CiAgICB0aGlzW19kYXRhVmFsdWVdID0gbnVsbDsKICAgIGlmIChuYW1lICE9PSAiI3RleHQiKSB7CiAgICAgIGNvbnN0IG1hcCA9IG5ldyBNYXAoKTsKICAgICAgdGhpc1tfYXR0cmlidXRlc10gPSBtYXA7CiAgICAgIGZvciAoY29uc3QgW2F0dHJOYW1lLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoYXR0cmlidXRlcykpIHsKICAgICAgICBtYXAuc2V0KGF0dHJOYW1lLCBuZXcgWEZBQXR0cmlidXRlKHRoaXMsIGF0dHJOYW1lLCB2YWx1ZSkpOwogICAgICB9CiAgICAgIGlmIChhdHRyaWJ1dGVzLmhhc093blByb3BlcnR5KCRuc0F0dHJpYnV0ZXMpKSB7CiAgICAgICAgY29uc3QgZGF0YU5vZGUgPSBhdHRyaWJ1dGVzWyRuc0F0dHJpYnV0ZXNdLnhmYS5kYXRhTm9kZTsKICAgICAgICBpZiAoZGF0YU5vZGUgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgaWYgKGRhdGFOb2RlID09PSAiZGF0YUdyb3VwIikgewogICAgICAgICAgICB0aGlzW19kYXRhVmFsdWVdID0gZmFsc2U7CiAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFOb2RlID09PSAiZGF0YVZhbHVlIikgewogICAgICAgICAgICB0aGlzW19kYXRhVmFsdWVdID0gdHJ1ZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIHRoaXNbJGNvbnN1bWVkXSA9IGZhbHNlOwogIH0KICBbJHRvU3RyaW5nXShidWYpIHsKICAgIGNvbnN0IHRhZ05hbWUgPSB0aGlzWyRub2RlTmFtZV07CiAgICBpZiAodGFnTmFtZSA9PT0gIiN0ZXh0IikgewogICAgICBidWYucHVzaChlbmNvZGVUb1htbFN0cmluZyh0aGlzWyRjb250ZW50XSkpOwogICAgICByZXR1cm47CiAgICB9CiAgICBjb25zdCB1dGY4VGFnTmFtZSA9IHV0ZjhTdHJpbmdUb1N0cmluZyh0YWdOYW1lKTsKICAgIGNvbnN0IHByZWZpeCA9IHRoaXNbJG5hbWVzcGFjZUlkXSA9PT0gTlNfREFUQVNFVFMgPyAieGZhOiIgOiAiIjsKICAgIGJ1Zi5wdXNoKGA8JHtwcmVmaXh9JHt1dGY4VGFnTmFtZX1gKTsKICAgIGZvciAoY29uc3QgW25hbWUsIHZhbHVlXSBvZiB0aGlzW19hdHRyaWJ1dGVzXS5lbnRyaWVzKCkpIHsKICAgICAgY29uc3QgdXRmOE5hbWUgPSB1dGY4U3RyaW5nVG9TdHJpbmcobmFtZSk7CiAgICAgIGJ1Zi5wdXNoKGAgJHt1dGY4TmFtZX09IiR7ZW5jb2RlVG9YbWxTdHJpbmcodmFsdWVbJGNvbnRlbnRdKX0iYCk7CiAgICB9CiAgICBpZiAodGhpc1tfZGF0YVZhbHVlXSAhPT0gbnVsbCkgewogICAgICBpZiAodGhpc1tfZGF0YVZhbHVlXSkgewogICAgICAgIGJ1Zi5wdXNoKGAgeGZhOmRhdGFOb2RlPSJkYXRhVmFsdWUiYCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgYnVmLnB1c2goYCB4ZmE6ZGF0YU5vZGU9ImRhdGFHcm91cCJgKTsKICAgICAgfQogICAgfQogICAgaWYgKCF0aGlzWyRjb250ZW50XSAmJiB0aGlzW19jaGlsZHJlbl0ubGVuZ3RoID09PSAwKSB7CiAgICAgIGJ1Zi5wdXNoKCIvPiIpOwogICAgICByZXR1cm47CiAgICB9CiAgICBidWYucHVzaCgiPiIpOwogICAgaWYgKHRoaXNbJGNvbnRlbnRdKSB7CiAgICAgIGlmICh0eXBlb2YgdGhpc1skY29udGVudF0gPT09ICJzdHJpbmciKSB7CiAgICAgICAgYnVmLnB1c2goZW5jb2RlVG9YbWxTdHJpbmcodGhpc1skY29udGVudF0pKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzWyRjb250ZW50XVskdG9TdHJpbmddKGJ1Zik7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgdGhpc1tfY2hpbGRyZW5dKSB7CiAgICAgICAgY2hpbGRbJHRvU3RyaW5nXShidWYpOwogICAgICB9CiAgICB9CiAgICBidWYucHVzaChgPC8ke3ByZWZpeH0ke3V0ZjhUYWdOYW1lfT5gKTsKICB9CiAgWyRvbkNoaWxkXShjaGlsZCkgewogICAgaWYgKHRoaXNbJGNvbnRlbnRdKSB7CiAgICAgIGNvbnN0IG5vZGUgPSBuZXcgWG1sT2JqZWN0KHRoaXNbJG5hbWVzcGFjZUlkXSwgIiN0ZXh0Iik7CiAgICAgIHRoaXNbJGFwcGVuZENoaWxkXShub2RlKTsKICAgICAgbm9kZVskY29udGVudF0gPSB0aGlzWyRjb250ZW50XTsKICAgICAgdGhpc1skY29udGVudF0gPSAiIjsKICAgIH0KICAgIHRoaXNbJGFwcGVuZENoaWxkXShjaGlsZCk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CiAgWyRvblRleHRdKHN0cikgewogICAgdGhpc1skY29udGVudF0gKz0gc3RyOwogIH0KICBbJGZpbmFsaXplXSgpIHsKICAgIGlmICh0aGlzWyRjb250ZW50XSAmJiB0aGlzW19jaGlsZHJlbl0ubGVuZ3RoID4gMCkgewogICAgICBjb25zdCBub2RlID0gbmV3IFhtbE9iamVjdCh0aGlzWyRuYW1lc3BhY2VJZF0sICIjdGV4dCIpOwogICAgICB0aGlzWyRhcHBlbmRDaGlsZF0obm9kZSk7CiAgICAgIG5vZGVbJGNvbnRlbnRdID0gdGhpc1skY29udGVudF07CiAgICAgIGRlbGV0ZSB0aGlzWyRjb250ZW50XTsKICAgIH0KICB9CiAgWyR0b0hUTUxdKCkgewogICAgaWYgKHRoaXNbJG5vZGVOYW1lXSA9PT0gIiN0ZXh0IikgewogICAgICByZXR1cm4gSFRNTFJlc3VsdC5zdWNjZXNzKHsKICAgICAgICBuYW1lOiAiI3RleHQiLAogICAgICAgIHZhbHVlOiB0aGlzWyRjb250ZW50XQogICAgICB9KTsKICAgIH0KICAgIHJldHVybiBIVE1MUmVzdWx0LkVNUFRZOwogIH0KICBbJGdldENoaWxkcmVuXShuYW1lID0gbnVsbCkgewogICAgaWYgKCFuYW1lKSB7CiAgICAgIHJldHVybiB0aGlzW19jaGlsZHJlbl07CiAgICB9CiAgICByZXR1cm4gdGhpc1tfY2hpbGRyZW5dLmZpbHRlcihjID0+IGNbJG5vZGVOYW1lXSA9PT0gbmFtZSk7CiAgfQogIFskZ2V0QXR0cmlidXRlc10oKSB7CiAgICByZXR1cm4gdGhpc1tfYXR0cmlidXRlc107CiAgfQogIFskZ2V0Q2hpbGRyZW5CeUNsYXNzXShuYW1lKSB7CiAgICBjb25zdCB2YWx1ZSA9IHRoaXNbX2F0dHJpYnV0ZXNdLmdldChuYW1lKTsKICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgIHJldHVybiB2YWx1ZTsKICAgIH0KICAgIHJldHVybiB0aGlzWyRnZXRDaGlsZHJlbl0obmFtZSk7CiAgfQogICpbJGdldENoaWxkcmVuQnlOYW1lSXRdKG5hbWUsIGFsbFRyYW5zcGFyZW50KSB7CiAgICBjb25zdCB2YWx1ZSA9IHRoaXNbX2F0dHJpYnV0ZXNdLmdldChuYW1lKTsKICAgIGlmICh2YWx1ZSkgewogICAgICB5aWVsZCB2YWx1ZTsKICAgIH0KICAgIGZvciAoY29uc3QgY2hpbGQgb2YgdGhpc1tfY2hpbGRyZW5dKSB7CiAgICAgIGlmIChjaGlsZFskbm9kZU5hbWVdID09PSBuYW1lKSB7CiAgICAgICAgeWllbGQgY2hpbGQ7CiAgICAgIH0KICAgICAgaWYgKGFsbFRyYW5zcGFyZW50KSB7CiAgICAgICAgeWllbGQqIGNoaWxkWyRnZXRDaGlsZHJlbkJ5TmFtZUl0XShuYW1lLCBhbGxUcmFuc3BhcmVudCk7CiAgICAgIH0KICAgIH0KICB9CiAgKlskZ2V0QXR0cmlidXRlSXRdKG5hbWUsIHNraXBDb25zdW1lZCkgewogICAgY29uc3QgdmFsdWUgPSB0aGlzW19hdHRyaWJ1dGVzXS5nZXQobmFtZSk7CiAgICBpZiAodmFsdWUgJiYgKCFza2lwQ29uc3VtZWQgfHwgIXZhbHVlWyRjb25zdW1lZF0pKSB7CiAgICAgIHlpZWxkIHZhbHVlOwogICAgfQogICAgZm9yIChjb25zdCBjaGlsZCBvZiB0aGlzW19jaGlsZHJlbl0pIHsKICAgICAgeWllbGQqIGNoaWxkWyRnZXRBdHRyaWJ1dGVJdF0obmFtZSwgc2tpcENvbnN1bWVkKTsKICAgIH0KICB9CiAgKlskZ2V0UmVhbENoaWxkcmVuQnlOYW1lSXRdKG5hbWUsIGFsbFRyYW5zcGFyZW50LCBza2lwQ29uc3VtZWQpIHsKICAgIGZvciAoY29uc3QgY2hpbGQgb2YgdGhpc1tfY2hpbGRyZW5dKSB7CiAgICAgIGlmIChjaGlsZFskbm9kZU5hbWVdID09PSBuYW1lICYmICghc2tpcENvbnN1bWVkIHx8ICFjaGlsZFskY29uc3VtZWRdKSkgewogICAgICAgIHlpZWxkIGNoaWxkOwogICAgICB9CiAgICAgIGlmIChhbGxUcmFuc3BhcmVudCkgewogICAgICAgIHlpZWxkKiBjaGlsZFskZ2V0UmVhbENoaWxkcmVuQnlOYW1lSXRdKG5hbWUsIGFsbFRyYW5zcGFyZW50LCBza2lwQ29uc3VtZWQpOwogICAgICB9CiAgICB9CiAgfQogIFskaXNEYXRhVmFsdWVdKCkgewogICAgaWYgKHRoaXNbX2RhdGFWYWx1ZV0gPT09IG51bGwpIHsKICAgICAgcmV0dXJuIHRoaXNbX2NoaWxkcmVuXS5sZW5ndGggPT09IDAgfHwgdGhpc1tfY2hpbGRyZW5dWzBdWyRuYW1lc3BhY2VJZF0gPT09IE5hbWVzcGFjZUlkcy54aHRtbC5pZDsKICAgIH0KICAgIHJldHVybiB0aGlzW19kYXRhVmFsdWVdOwogIH0KICBbJGdldERhdGFWYWx1ZV0oKSB7CiAgICBpZiAodGhpc1tfZGF0YVZhbHVlXSA9PT0gbnVsbCkgewogICAgICBpZiAodGhpc1tfY2hpbGRyZW5dLmxlbmd0aCA9PT0gMCkgewogICAgICAgIHJldHVybiB0aGlzWyRjb250ZW50XS50cmltKCk7CiAgICAgIH0KICAgICAgaWYgKHRoaXNbX2NoaWxkcmVuXVswXVskbmFtZXNwYWNlSWRdID09PSBOYW1lc3BhY2VJZHMueGh0bWwuaWQpIHsKICAgICAgICByZXR1cm4gdGhpc1tfY2hpbGRyZW5dWzBdWyR0ZXh0XSgpLnRyaW0oKTsKICAgICAgfQogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIHJldHVybiB0aGlzWyRjb250ZW50XS50cmltKCk7CiAgfQogIFskc2V0VmFsdWVdKHZhbHVlKSB7CiAgICB2YWx1ZSA9IHZhbHVlLnZhbHVlIHx8ICIiOwogICAgdGhpc1skY29udGVudF0gPSB2YWx1ZS50b1N0cmluZygpOwogIH0KICBbJGR1bXBdKGhhc05TID0gZmFsc2UpIHsKICAgIGNvbnN0IGR1bXBlZCA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgICBpZiAoaGFzTlMpIHsKICAgICAgZHVtcGVkLiRucyA9IHRoaXNbJG5hbWVzcGFjZUlkXTsKICAgIH0KICAgIGlmICh0aGlzWyRjb250ZW50XSkgewogICAgICBkdW1wZWQuJGNvbnRlbnQgPSB0aGlzWyRjb250ZW50XTsKICAgIH0KICAgIGR1bXBlZC4kbmFtZSA9IHRoaXNbJG5vZGVOYW1lXTsKICAgIGR1bXBlZC5jaGlsZHJlbiA9IFtdOwogICAgZm9yIChjb25zdCBjaGlsZCBvZiB0aGlzW19jaGlsZHJlbl0pIHsKICAgICAgZHVtcGVkLmNoaWxkcmVuLnB1c2goY2hpbGRbJGR1bXBdKGhhc05TKSk7CiAgICB9CiAgICBkdW1wZWQuYXR0cmlidXRlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgICBmb3IgKGNvbnN0IFtuYW1lLCB2YWx1ZV0gb2YgdGhpc1tfYXR0cmlidXRlc10pIHsKICAgICAgZHVtcGVkLmF0dHJpYnV0ZXNbbmFtZV0gPSB2YWx1ZVskY29udGVudF07CiAgICB9CiAgICByZXR1cm4gZHVtcGVkOwogIH0KfQpjbGFzcyBDb250ZW50T2JqZWN0IGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3Rvcihuc0lkLCBuYW1lKSB7CiAgICBzdXBlcihuc0lkLCBuYW1lKTsKICAgIHRoaXNbJGNvbnRlbnRdID0gIiI7CiAgfQogIFskb25UZXh0XSh0ZXh0KSB7CiAgICB0aGlzWyRjb250ZW50XSArPSB0ZXh0OwogIH0KICBbJGZpbmFsaXplXSgpIHt9Cn0KY2xhc3MgT3B0aW9uT2JqZWN0IGV4dGVuZHMgQ29udGVudE9iamVjdCB7CiAgY29uc3RydWN0b3IobnNJZCwgbmFtZSwgb3B0aW9ucykgewogICAgc3VwZXIobnNJZCwgbmFtZSk7CiAgICB0aGlzW19vcHRpb25zXSA9IG9wdGlvbnM7CiAgfQogIFskZmluYWxpemVdKCkgewogICAgdGhpc1skY29udGVudF0gPSBnZXRLZXl3b3JkKHsKICAgICAgZGF0YTogdGhpc1skY29udGVudF0sCiAgICAgIGRlZmF1bHRWYWx1ZTogdGhpc1tfb3B0aW9uc11bMF0sCiAgICAgIHZhbGlkYXRlOiBrID0+IHRoaXNbX29wdGlvbnNdLmluY2x1ZGVzKGspCiAgICB9KTsKICB9CiAgWyRjbGVhbl0oYnVpbGRlcikgewogICAgc3VwZXJbJGNsZWFuXShidWlsZGVyKTsKICAgIGRlbGV0ZSB0aGlzW19vcHRpb25zXTsKICB9Cn0KY2xhc3MgU3RyaW5nT2JqZWN0IGV4dGVuZHMgQ29udGVudE9iamVjdCB7CiAgWyRmaW5hbGl6ZV0oKSB7CiAgICB0aGlzWyRjb250ZW50XSA9IHRoaXNbJGNvbnRlbnRdLnRyaW0oKTsKICB9Cn0KY2xhc3MgSW50ZWdlck9iamVjdCBleHRlbmRzIENvbnRlbnRPYmplY3QgewogIGNvbnN0cnVjdG9yKG5zSWQsIG5hbWUsIGRlZmF1bHRWYWx1ZSwgdmFsaWRhdG9yKSB7CiAgICBzdXBlcihuc0lkLCBuYW1lKTsKICAgIHRoaXNbX2RlZmF1bHRWYWx1ZV0gPSBkZWZhdWx0VmFsdWU7CiAgICB0aGlzW192YWxpZGF0b3JdID0gdmFsaWRhdG9yOwogIH0KICBbJGZpbmFsaXplXSgpIHsKICAgIHRoaXNbJGNvbnRlbnRdID0gZ2V0SW50ZWdlcih7CiAgICAgIGRhdGE6IHRoaXNbJGNvbnRlbnRdLAogICAgICBkZWZhdWx0VmFsdWU6IHRoaXNbX2RlZmF1bHRWYWx1ZV0sCiAgICAgIHZhbGlkYXRlOiB0aGlzW192YWxpZGF0b3JdCiAgICB9KTsKICB9CiAgWyRjbGVhbl0oYnVpbGRlcikgewogICAgc3VwZXJbJGNsZWFuXShidWlsZGVyKTsKICAgIGRlbGV0ZSB0aGlzW19kZWZhdWx0VmFsdWVdOwogICAgZGVsZXRlIHRoaXNbX3ZhbGlkYXRvcl07CiAgfQp9CmNsYXNzIE9wdGlvbjAxIGV4dGVuZHMgSW50ZWdlck9iamVjdCB7CiAgY29uc3RydWN0b3IobnNJZCwgbmFtZSkgewogICAgc3VwZXIobnNJZCwgbmFtZSwgMCwgbiA9PiBuID09PSAxKTsKICB9Cn0KY2xhc3MgT3B0aW9uMTAgZXh0ZW5kcyBJbnRlZ2VyT2JqZWN0IHsKICBjb25zdHJ1Y3Rvcihuc0lkLCBuYW1lKSB7CiAgICBzdXBlcihuc0lkLCBuYW1lLCAxLCBuID0+IG4gPT09IDApOwogIH0KfQoKOy8vIC4vc3JjL2NvcmUveGZhL2h0bWxfdXRpbHMuanMKCgoKCgoKCgoKCmZ1bmN0aW9uIG1lYXN1cmVUb1N0cmluZyhtKSB7CiAgaWYgKHR5cGVvZiBtID09PSAic3RyaW5nIikgewogICAgcmV0dXJuICIwcHgiOwogIH0KICByZXR1cm4gTnVtYmVyLmlzSW50ZWdlcihtKSA/IGAke219cHhgIDogYCR7bS50b0ZpeGVkKDIpfXB4YDsKfQpjb25zdCBjb252ZXJ0ZXJzID0gewogIGFuY2hvclR5cGUobm9kZSwgc3R5bGUpIHsKICAgIGNvbnN0IHBhcmVudCA9IG5vZGVbJGdldFN1YmZvcm1QYXJlbnRdKCk7CiAgICBpZiAoIXBhcmVudCB8fCBwYXJlbnQubGF5b3V0ICYmIHBhcmVudC5sYXlvdXQgIT09ICJwb3NpdGlvbiIpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgaWYgKCEoInRyYW5zZm9ybSIgaW4gc3R5bGUpKSB7CiAgICAgIHN0eWxlLnRyYW5zZm9ybSA9ICIiOwogICAgfQogICAgc3dpdGNoIChub2RlLmFuY2hvclR5cGUpIHsKICAgICAgY2FzZSAiYm90dG9tQ2VudGVyIjoKICAgICAgICBzdHlsZS50cmFuc2Zvcm0gKz0gInRyYW5zbGF0ZSgtNTAlLCAtMTAwJSkiOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlICJib3R0b21MZWZ0IjoKICAgICAgICBzdHlsZS50cmFuc2Zvcm0gKz0gInRyYW5zbGF0ZSgwLC0xMDAlKSI7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgImJvdHRvbVJpZ2h0IjoKICAgICAgICBzdHlsZS50cmFuc2Zvcm0gKz0gInRyYW5zbGF0ZSgtMTAwJSwtMTAwJSkiOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlICJtaWRkbGVDZW50ZXIiOgogICAgICAgIHN0eWxlLnRyYW5zZm9ybSArPSAidHJhbnNsYXRlKC01MCUsLTUwJSkiOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlICJtaWRkbGVMZWZ0IjoKICAgICAgICBzdHlsZS50cmFuc2Zvcm0gKz0gInRyYW5zbGF0ZSgwLC01MCUpIjsKICAgICAgICBicmVhazsKICAgICAgY2FzZSAibWlkZGxlUmlnaHQiOgogICAgICAgIHN0eWxlLnRyYW5zZm9ybSArPSAidHJhbnNsYXRlKC0xMDAlLC01MCUpIjsKICAgICAgICBicmVhazsKICAgICAgY2FzZSAidG9wQ2VudGVyIjoKICAgICAgICBzdHlsZS50cmFuc2Zvcm0gKz0gInRyYW5zbGF0ZSgtNTAlLDApIjsKICAgICAgICBicmVhazsKICAgICAgY2FzZSAidG9wUmlnaHQiOgogICAgICAgIHN0eWxlLnRyYW5zZm9ybSArPSAidHJhbnNsYXRlKC0xMDAlLDApIjsKICAgICAgICBicmVhazsKICAgIH0KICB9LAogIGRpbWVuc2lvbnMobm9kZSwgc3R5bGUpIHsKICAgIGNvbnN0IHBhcmVudCA9IG5vZGVbJGdldFN1YmZvcm1QYXJlbnRdKCk7CiAgICBsZXQgd2lkdGggPSBub2RlLnc7CiAgICBjb25zdCBoZWlnaHQgPSBub2RlLmg7CiAgICBpZiAocGFyZW50LmxheW91dD8uaW5jbHVkZXMoInJvdyIpKSB7CiAgICAgIGNvbnN0IGV4dHJhID0gcGFyZW50WyRleHRyYV07CiAgICAgIGNvbnN0IGNvbFNwYW4gPSBub2RlLmNvbFNwYW47CiAgICAgIGxldCB3OwogICAgICBpZiAoY29sU3BhbiA9PT0gLTEpIHsKICAgICAgICB3ID0gTWF0aC5zdW1QcmVjaXNlKGV4dHJhLmNvbHVtbldpZHRocy5zbGljZShleHRyYS5jdXJyZW50Q29sdW1uKSk7CiAgICAgICAgZXh0cmEuY3VycmVudENvbHVtbiA9IDA7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdyA9IE1hdGguc3VtUHJlY2lzZShleHRyYS5jb2x1bW5XaWR0aHMuc2xpY2UoZXh0cmEuY3VycmVudENvbHVtbiwgZXh0cmEuY3VycmVudENvbHVtbiArIGNvbFNwYW4pKTsKICAgICAgICBleHRyYS5jdXJyZW50Q29sdW1uID0gKGV4dHJhLmN1cnJlbnRDb2x1bW4gKyBub2RlLmNvbFNwYW4pICUgZXh0cmEuY29sdW1uV2lkdGhzLmxlbmd0aDsKICAgICAgfQogICAgICBpZiAoIWlzTmFOKHcpKSB7CiAgICAgICAgd2lkdGggPSBub2RlLncgPSB3OwogICAgICB9CiAgICB9CiAgICBzdHlsZS53aWR0aCA9IHdpZHRoICE9PSAiIiA/IG1lYXN1cmVUb1N0cmluZyh3aWR0aCkgOiAiYXV0byI7CiAgICBzdHlsZS5oZWlnaHQgPSBoZWlnaHQgIT09ICIiID8gbWVhc3VyZVRvU3RyaW5nKGhlaWdodCkgOiAiYXV0byI7CiAgfSwKICBwb3NpdGlvbihub2RlLCBzdHlsZSkgewogICAgY29uc3QgcGFyZW50ID0gbm9kZVskZ2V0U3ViZm9ybVBhcmVudF0oKTsKICAgIGlmIChwYXJlbnQ/LmxheW91dCAmJiBwYXJlbnQubGF5b3V0ICE9PSAicG9zaXRpb24iKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIHN0eWxlLnBvc2l0aW9uID0gImFic29sdXRlIjsKICAgIHN0eWxlLmxlZnQgPSBtZWFzdXJlVG9TdHJpbmcobm9kZS54KTsKICAgIHN0eWxlLnRvcCA9IG1lYXN1cmVUb1N0cmluZyhub2RlLnkpOwogIH0sCiAgcm90YXRlKG5vZGUsIHN0eWxlKSB7CiAgICBpZiAobm9kZS5yb3RhdGUpIHsKICAgICAgaWYgKCEoInRyYW5zZm9ybSIgaW4gc3R5bGUpKSB7CiAgICAgICAgc3R5bGUudHJhbnNmb3JtID0gIiI7CiAgICAgIH0KICAgICAgc3R5bGUudHJhbnNmb3JtICs9IGByb3RhdGUoLSR7bm9kZS5yb3RhdGV9ZGVnKWA7CiAgICAgIHN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9ICJ0b3AgbGVmdCI7CiAgICB9CiAgfSwKICBwcmVzZW5jZShub2RlLCBzdHlsZSkgewogICAgc3dpdGNoIChub2RlLnByZXNlbmNlKSB7CiAgICAgIGNhc2UgImludmlzaWJsZSI6CiAgICAgICAgc3R5bGUudmlzaWJpbGl0eSA9ICJoaWRkZW4iOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlICJoaWRkZW4iOgogICAgICBjYXNlICJpbmFjdGl2ZSI6CiAgICAgICAgc3R5bGUuZGlzcGxheSA9ICJub25lIjsKICAgICAgICBicmVhazsKICAgIH0KICB9LAogIGhBbGlnbihub2RlLCBzdHlsZSkgewogICAgaWYgKG5vZGVbJG5vZGVOYW1lXSA9PT0gInBhcmEiKSB7CiAgICAgIHN3aXRjaCAobm9kZS5oQWxpZ24pIHsKICAgICAgICBjYXNlICJqdXN0aWZ5QWxsIjoKICAgICAgICAgIHN0eWxlLnRleHRBbGlnbiA9ICJqdXN0aWZ5LWFsbCI7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJyYWRpeCI6CiAgICAgICAgICBzdHlsZS50ZXh0QWxpZ24gPSAibGVmdCI7CiAgICAgICAgICBicmVhazsKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgc3R5bGUudGV4dEFsaWduID0gbm9kZS5oQWxpZ247CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHN3aXRjaCAobm9kZS5oQWxpZ24pIHsKICAgICAgICBjYXNlICJsZWZ0IjoKICAgICAgICAgIHN0eWxlLmFsaWduU2VsZiA9ICJzdGFydCI7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJjZW50ZXIiOgogICAgICAgICAgc3R5bGUuYWxpZ25TZWxmID0gImNlbnRlciI7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJyaWdodCI6CiAgICAgICAgICBzdHlsZS5hbGlnblNlbGYgPSAiZW5kIjsKICAgICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CiAgfSwKICBtYXJnaW4obm9kZSwgc3R5bGUpIHsKICAgIGlmIChub2RlLm1hcmdpbikgewogICAgICBzdHlsZS5tYXJnaW4gPSBub2RlLm1hcmdpblskdG9TdHlsZV0oKS5tYXJnaW47CiAgICB9CiAgfQp9OwpmdW5jdGlvbiBzZXRNaW5NYXhEaW1lbnNpb25zKG5vZGUsIHN0eWxlKSB7CiAgY29uc3QgcGFyZW50ID0gbm9kZVskZ2V0U3ViZm9ybVBhcmVudF0oKTsKICBpZiAocGFyZW50LmxheW91dCA9PT0gInBvc2l0aW9uIikgewogICAgaWYgKG5vZGUubWluVyA+IDApIHsKICAgICAgc3R5bGUubWluV2lkdGggPSBtZWFzdXJlVG9TdHJpbmcobm9kZS5taW5XKTsKICAgIH0KICAgIGlmIChub2RlLm1heFcgPiAwKSB7CiAgICAgIHN0eWxlLm1heFdpZHRoID0gbWVhc3VyZVRvU3RyaW5nKG5vZGUubWF4Vyk7CiAgICB9CiAgICBpZiAobm9kZS5taW5IID4gMCkgewogICAgICBzdHlsZS5taW5IZWlnaHQgPSBtZWFzdXJlVG9TdHJpbmcobm9kZS5taW5IKTsKICAgIH0KICAgIGlmIChub2RlLm1heEggPiAwKSB7CiAgICAgIHN0eWxlLm1heEhlaWdodCA9IG1lYXN1cmVUb1N0cmluZyhub2RlLm1heEgpOwogICAgfQogIH0KfQpmdW5jdGlvbiBsYXlvdXRUZXh0KHRleHQsIHhmYUZvbnQsIG1hcmdpbiwgbGluZUhlaWdodCwgZm9udEZpbmRlciwgd2lkdGgpIHsKICBjb25zdCBtZWFzdXJlID0gbmV3IFRleHRNZWFzdXJlKHhmYUZvbnQsIG1hcmdpbiwgbGluZUhlaWdodCwgZm9udEZpbmRlcik7CiAgaWYgKHR5cGVvZiB0ZXh0ID09PSAic3RyaW5nIikgewogICAgbWVhc3VyZS5hZGRTdHJpbmcodGV4dCk7CiAgfSBlbHNlIHsKICAgIHRleHRbJHB1c2hHbHlwaHNdKG1lYXN1cmUpOwogIH0KICByZXR1cm4gbWVhc3VyZS5jb21wdXRlKHdpZHRoKTsKfQpmdW5jdGlvbiBsYXlvdXROb2RlKG5vZGUsIGF2YWlsYWJsZVNwYWNlKSB7CiAgbGV0IGhlaWdodCA9IG51bGw7CiAgbGV0IHdpZHRoID0gbnVsbDsKICBsZXQgaXNCcm9rZW4gPSBmYWxzZTsKICBpZiAoKCFub2RlLncgfHwgIW5vZGUuaCkgJiYgbm9kZS52YWx1ZSkgewogICAgbGV0IG1hcmdpbkggPSAwOwogICAgbGV0IG1hcmdpblYgPSAwOwogICAgaWYgKG5vZGUubWFyZ2luKSB7CiAgICAgIG1hcmdpbkggPSBub2RlLm1hcmdpbi5sZWZ0SW5zZXQgKyBub2RlLm1hcmdpbi5yaWdodEluc2V0OwogICAgICBtYXJnaW5WID0gbm9kZS5tYXJnaW4udG9wSW5zZXQgKyBub2RlLm1hcmdpbi5ib3R0b21JbnNldDsKICAgIH0KICAgIGxldCBsaW5lSGVpZ2h0ID0gbnVsbDsKICAgIGxldCBtYXJnaW4gPSBudWxsOwogICAgaWYgKG5vZGUucGFyYSkgewogICAgICBtYXJnaW4gPSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgICBsaW5lSGVpZ2h0ID0gbm9kZS5wYXJhLmxpbmVIZWlnaHQgPT09ICIiID8gbnVsbCA6IG5vZGUucGFyYS5saW5lSGVpZ2h0OwogICAgICBtYXJnaW4udG9wID0gbm9kZS5wYXJhLnNwYWNlQWJvdmUgPT09ICIiID8gMCA6IG5vZGUucGFyYS5zcGFjZUFib3ZlOwogICAgICBtYXJnaW4uYm90dG9tID0gbm9kZS5wYXJhLnNwYWNlQmVsb3cgPT09ICIiID8gMCA6IG5vZGUucGFyYS5zcGFjZUJlbG93OwogICAgICBtYXJnaW4ubGVmdCA9IG5vZGUucGFyYS5tYXJnaW5MZWZ0ID09PSAiIiA/IDAgOiBub2RlLnBhcmEubWFyZ2luTGVmdDsKICAgICAgbWFyZ2luLnJpZ2h0ID0gbm9kZS5wYXJhLm1hcmdpblJpZ2h0ID09PSAiIiA/IDAgOiBub2RlLnBhcmEubWFyZ2luUmlnaHQ7CiAgICB9CiAgICBsZXQgZm9udCA9IG5vZGUuZm9udDsKICAgIGlmICghZm9udCkgewogICAgICBjb25zdCByb290ID0gbm9kZVskZ2V0VGVtcGxhdGVSb290XSgpOwogICAgICBsZXQgcGFyZW50ID0gbm9kZVskZ2V0UGFyZW50XSgpOwogICAgICB3aGlsZSAocGFyZW50ICYmIHBhcmVudCAhPT0gcm9vdCkgewogICAgICAgIGlmIChwYXJlbnQuZm9udCkgewogICAgICAgICAgZm9udCA9IHBhcmVudC5mb250OwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICAgIHBhcmVudCA9IHBhcmVudFskZ2V0UGFyZW50XSgpOwogICAgICB9CiAgICB9CiAgICBjb25zdCBtYXhXaWR0aCA9IChub2RlLncgfHwgYXZhaWxhYmxlU3BhY2Uud2lkdGgpIC0gbWFyZ2luSDsKICAgIGNvbnN0IGZvbnRGaW5kZXIgPSBub2RlWyRnbG9iYWxEYXRhXS5mb250RmluZGVyOwogICAgaWYgKG5vZGUudmFsdWUuZXhEYXRhICYmIG5vZGUudmFsdWUuZXhEYXRhWyRjb250ZW50XSAmJiBub2RlLnZhbHVlLmV4RGF0YS5jb250ZW50VHlwZSA9PT0gInRleHQvaHRtbCIpIHsKICAgICAgY29uc3QgcmVzID0gbGF5b3V0VGV4dChub2RlLnZhbHVlLmV4RGF0YVskY29udGVudF0sIGZvbnQsIG1hcmdpbiwgbGluZUhlaWdodCwgZm9udEZpbmRlciwgbWF4V2lkdGgpOwogICAgICB3aWR0aCA9IHJlcy53aWR0aDsKICAgICAgaGVpZ2h0ID0gcmVzLmhlaWdodDsKICAgICAgaXNCcm9rZW4gPSByZXMuaXNCcm9rZW47CiAgICB9IGVsc2UgewogICAgICBjb25zdCB0ZXh0ID0gbm9kZS52YWx1ZVskdGV4dF0oKTsKICAgICAgaWYgKHRleHQpIHsKICAgICAgICBjb25zdCByZXMgPSBsYXlvdXRUZXh0KHRleHQsIGZvbnQsIG1hcmdpbiwgbGluZUhlaWdodCwgZm9udEZpbmRlciwgbWF4V2lkdGgpOwogICAgICAgIHdpZHRoID0gcmVzLndpZHRoOwogICAgICAgIGhlaWdodCA9IHJlcy5oZWlnaHQ7CiAgICAgICAgaXNCcm9rZW4gPSByZXMuaXNCcm9rZW47CiAgICAgIH0KICAgIH0KICAgIGlmICh3aWR0aCAhPT0gbnVsbCAmJiAhbm9kZS53KSB7CiAgICAgIHdpZHRoICs9IG1hcmdpbkg7CiAgICB9CiAgICBpZiAoaGVpZ2h0ICE9PSBudWxsICYmICFub2RlLmgpIHsKICAgICAgaGVpZ2h0ICs9IG1hcmdpblY7CiAgICB9CiAgfQogIHJldHVybiB7CiAgICB3OiB3aWR0aCwKICAgIGg6IGhlaWdodCwKICAgIGlzQnJva2VuCiAgfTsKfQpmdW5jdGlvbiBjb21wdXRlQmJveChub2RlLCBodG1sLCBhdmFpbGFibGVTcGFjZSkgewogIGxldCBiYm94OwogIGlmIChub2RlLncgIT09ICIiICYmIG5vZGUuaCAhPT0gIiIpIHsKICAgIGJib3ggPSBbbm9kZS54LCBub2RlLnksIG5vZGUudywgbm9kZS5oXTsKICB9IGVsc2UgewogICAgaWYgKCFhdmFpbGFibGVTcGFjZSkgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIGxldCB3aWR0aCA9IG5vZGUudzsKICAgIGlmICh3aWR0aCA9PT0gIiIpIHsKICAgICAgaWYgKG5vZGUubWF4VyA9PT0gMCkgewogICAgICAgIGNvbnN0IHBhcmVudCA9IG5vZGVbJGdldFN1YmZvcm1QYXJlbnRdKCk7CiAgICAgICAgd2lkdGggPSBwYXJlbnQubGF5b3V0ID09PSAicG9zaXRpb24iICYmIHBhcmVudC53ICE9PSAiIiA/IDAgOiBub2RlLm1pblc7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgd2lkdGggPSBNYXRoLm1pbihub2RlLm1heFcsIGF2YWlsYWJsZVNwYWNlLndpZHRoKTsKICAgICAgfQogICAgICBodG1sLmF0dHJpYnV0ZXMuc3R5bGUud2lkdGggPSBtZWFzdXJlVG9TdHJpbmcod2lkdGgpOwogICAgfQogICAgbGV0IGhlaWdodCA9IG5vZGUuaDsKICAgIGlmIChoZWlnaHQgPT09ICIiKSB7CiAgICAgIGlmIChub2RlLm1heEggPT09IDApIHsKICAgICAgICBjb25zdCBwYXJlbnQgPSBub2RlWyRnZXRTdWJmb3JtUGFyZW50XSgpOwogICAgICAgIGhlaWdodCA9IHBhcmVudC5sYXlvdXQgPT09ICJwb3NpdGlvbiIgJiYgcGFyZW50LmggIT09ICIiID8gMCA6IG5vZGUubWluSDsKICAgICAgfSBlbHNlIHsKICAgICAgICBoZWlnaHQgPSBNYXRoLm1pbihub2RlLm1heEgsIGF2YWlsYWJsZVNwYWNlLmhlaWdodCk7CiAgICAgIH0KICAgICAgaHRtbC5hdHRyaWJ1dGVzLnN0eWxlLmhlaWdodCA9IG1lYXN1cmVUb1N0cmluZyhoZWlnaHQpOwogICAgfQogICAgYmJveCA9IFtub2RlLngsIG5vZGUueSwgd2lkdGgsIGhlaWdodF07CiAgfQogIHJldHVybiBiYm94Owp9CmZ1bmN0aW9uIGZpeERpbWVuc2lvbnMobm9kZSkgewogIGNvbnN0IHBhcmVudCA9IG5vZGVbJGdldFN1YmZvcm1QYXJlbnRdKCk7CiAgaWYgKHBhcmVudC5sYXlvdXQ/LmluY2x1ZGVzKCJyb3ciKSkgewogICAgY29uc3QgZXh0cmEgPSBwYXJlbnRbJGV4dHJhXTsKICAgIGNvbnN0IGNvbFNwYW4gPSBub2RlLmNvbFNwYW47CiAgICBsZXQgd2lkdGg7CiAgICBpZiAoY29sU3BhbiA9PT0gLTEpIHsKICAgICAgd2lkdGggPSBNYXRoLnN1bVByZWNpc2UoZXh0cmEuY29sdW1uV2lkdGhzLnNsaWNlKGV4dHJhLmN1cnJlbnRDb2x1bW4pKTsKICAgIH0gZWxzZSB7CiAgICAgIHdpZHRoID0gTWF0aC5zdW1QcmVjaXNlKGV4dHJhLmNvbHVtbldpZHRocy5zbGljZShleHRyYS5jdXJyZW50Q29sdW1uLCBleHRyYS5jdXJyZW50Q29sdW1uICsgY29sU3BhbikpOwogICAgfQogICAgaWYgKCFpc05hTih3aWR0aCkpIHsKICAgICAgbm9kZS53ID0gd2lkdGg7CiAgICB9CiAgfQogIGlmIChwYXJlbnQubGF5b3V0ICYmIHBhcmVudC5sYXlvdXQgIT09ICJwb3NpdGlvbiIpIHsKICAgIG5vZGUueCA9IG5vZGUueSA9IDA7CiAgfQogIGlmIChub2RlLmxheW91dCA9PT0gInRhYmxlIikgewogICAgaWYgKG5vZGUudyA9PT0gIiIgJiYgQXJyYXkuaXNBcnJheShub2RlLmNvbHVtbldpZHRocykpIHsKICAgICAgbm9kZS53ID0gTWF0aC5zdW1QcmVjaXNlKG5vZGUuY29sdW1uV2lkdGhzKTsKICAgIH0KICB9Cn0KZnVuY3Rpb24gbGF5b3V0Q2xhc3Mobm9kZSkgewogIHN3aXRjaCAobm9kZS5sYXlvdXQpIHsKICAgIGNhc2UgInBvc2l0aW9uIjoKICAgICAgcmV0dXJuICJ4ZmFQb3NpdGlvbiI7CiAgICBjYXNlICJsci10YiI6CiAgICAgIHJldHVybiAieGZhTHJUYiI7CiAgICBjYXNlICJybC1yb3ciOgogICAgICByZXR1cm4gInhmYVJsUm93IjsKICAgIGNhc2UgInJsLXRiIjoKICAgICAgcmV0dXJuICJ4ZmFSbFRiIjsKICAgIGNhc2UgInJvdyI6CiAgICAgIHJldHVybiAieGZhUm93IjsKICAgIGNhc2UgInRhYmxlIjoKICAgICAgcmV0dXJuICJ4ZmFUYWJsZSI7CiAgICBjYXNlICJ0YiI6CiAgICAgIHJldHVybiAieGZhVGIiOwogICAgZGVmYXVsdDoKICAgICAgcmV0dXJuICJ4ZmFQb3NpdGlvbiI7CiAgfQp9CmZ1bmN0aW9uIHRvU3R5bGUobm9kZSwgLi4ubmFtZXMpIHsKICBjb25zdCBzdHlsZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgZm9yIChjb25zdCBuYW1lIG9mIG5hbWVzKSB7CiAgICBjb25zdCB2YWx1ZSA9IG5vZGVbbmFtZV07CiAgICBpZiAodmFsdWUgPT09IG51bGwpIHsKICAgICAgY29udGludWU7CiAgICB9CiAgICBpZiAoY29udmVydGVycy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkgewogICAgICBjb252ZXJ0ZXJzW25hbWVdKG5vZGUsIHN0eWxlKTsKICAgICAgY29udGludWU7CiAgICB9CiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBYRkFPYmplY3QpIHsKICAgICAgY29uc3QgbmV3U3R5bGUgPSB2YWx1ZVskdG9TdHlsZV0oKTsKICAgICAgaWYgKG5ld1N0eWxlKSB7CiAgICAgICAgT2JqZWN0LmFzc2lnbihzdHlsZSwgbmV3U3R5bGUpOwogICAgICB9IGVsc2UgewogICAgICAgIHdhcm4oYChERUJVRykgLSBYRkEgLSBzdHlsZSBmb3IgJHtuYW1lfSBub3QgaW1wbGVtZW50ZWQgeWV0YCk7CiAgICAgIH0KICAgIH0KICB9CiAgcmV0dXJuIHN0eWxlOwp9CmZ1bmN0aW9uIGNyZWF0ZVdyYXBwZXIobm9kZSwgaHRtbCkgewogIGNvbnN0IHsKICAgIGF0dHJpYnV0ZXMKICB9ID0gaHRtbDsKICBjb25zdCB7CiAgICBzdHlsZQogIH0gPSBhdHRyaWJ1dGVzOwogIGNvbnN0IHdyYXBwZXIgPSB7CiAgICBuYW1lOiAiZGl2IiwKICAgIGF0dHJpYnV0ZXM6IHsKICAgICAgY2xhc3M6IFsieGZhV3JhcHBlciJdLAogICAgICBzdHlsZTogT2JqZWN0LmNyZWF0ZShudWxsKQogICAgfSwKICAgIGNoaWxkcmVuOiBbXQogIH07CiAgYXR0cmlidXRlcy5jbGFzcy5wdXNoKCJ4ZmFXcmFwcGVkIik7CiAgaWYgKG5vZGUuYm9yZGVyKSB7CiAgICBjb25zdCB7CiAgICAgIHdpZHRocywKICAgICAgaW5zZXRzCiAgICB9ID0gbm9kZS5ib3JkZXJbJGV4dHJhXTsKICAgIGxldCB3aWR0aCwgaGVpZ2h0OwogICAgbGV0IHRvcCA9IGluc2V0c1swXTsKICAgIGxldCBsZWZ0ID0gaW5zZXRzWzNdOwogICAgY29uc3QgaW5zZXRzSCA9IGluc2V0c1swXSArIGluc2V0c1syXTsKICAgIGNvbnN0IGluc2V0c1cgPSBpbnNldHNbMV0gKyBpbnNldHNbM107CiAgICBzd2l0Y2ggKG5vZGUuYm9yZGVyLmhhbmQpIHsKICAgICAgY2FzZSAiZXZlbiI6CiAgICAgICAgdG9wIC09IHdpZHRoc1swXSAvIDI7CiAgICAgICAgbGVmdCAtPSB3aWR0aHNbM10gLyAyOwogICAgICAgIHdpZHRoID0gYGNhbGMoMTAwJSArICR7KHdpZHRoc1sxXSArIHdpZHRoc1szXSkgLyAyIC0gaW5zZXRzV31weClgOwogICAgICAgIGhlaWdodCA9IGBjYWxjKDEwMCUgKyAkeyh3aWR0aHNbMF0gKyB3aWR0aHNbMl0pIC8gMiAtIGluc2V0c0h9cHgpYDsKICAgICAgICBicmVhazsKICAgICAgY2FzZSAibGVmdCI6CiAgICAgICAgdG9wIC09IHdpZHRoc1swXTsKICAgICAgICBsZWZ0IC09IHdpZHRoc1szXTsKICAgICAgICB3aWR0aCA9IGBjYWxjKDEwMCUgKyAke3dpZHRoc1sxXSArIHdpZHRoc1szXSAtIGluc2V0c1d9cHgpYDsKICAgICAgICBoZWlnaHQgPSBgY2FsYygxMDAlICsgJHt3aWR0aHNbMF0gKyB3aWR0aHNbMl0gLSBpbnNldHNIfXB4KWA7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgInJpZ2h0IjoKICAgICAgICB3aWR0aCA9IGluc2V0c1cgPyBgY2FsYygxMDAlIC0gJHtpbnNldHNXfXB4KWAgOiAiMTAwJSI7CiAgICAgICAgaGVpZ2h0ID0gaW5zZXRzSCA/IGBjYWxjKDEwMCUgLSAke2luc2V0c0h9cHgpYCA6ICIxMDAlIjsKICAgICAgICBicmVhazsKICAgIH0KICAgIGNvbnN0IGNsYXNzTmFtZXMgPSBbInhmYUJvcmRlciJdOwogICAgaWYgKGlzUHJpbnRPbmx5KG5vZGUuYm9yZGVyKSkgewogICAgICBjbGFzc05hbWVzLnB1c2goInhmYVByaW50T25seSIpOwogICAgfQogICAgY29uc3QgYm9yZGVyID0gewogICAgICBuYW1lOiAiZGl2IiwKICAgICAgYXR0cmlidXRlczogewogICAgICAgIGNsYXNzOiBjbGFzc05hbWVzLAogICAgICAgIHN0eWxlOiB7CiAgICAgICAgICB0b3A6IGAke3RvcH1weGAsCiAgICAgICAgICBsZWZ0OiBgJHtsZWZ0fXB4YCwKICAgICAgICAgIHdpZHRoLAogICAgICAgICAgaGVpZ2h0CiAgICAgICAgfQogICAgICB9LAogICAgICBjaGlsZHJlbjogW10KICAgIH07CiAgICBmb3IgKGNvbnN0IGtleSBvZiBbImJvcmRlciIsICJib3JkZXJXaWR0aCIsICJib3JkZXJDb2xvciIsICJib3JkZXJSYWRpdXMiLCAiYm9yZGVyU3R5bGUiXSkgewogICAgICBpZiAoc3R5bGVba2V5XSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgYm9yZGVyLmF0dHJpYnV0ZXMuc3R5bGVba2V5XSA9IHN0eWxlW2tleV07CiAgICAgICAgZGVsZXRlIHN0eWxlW2tleV07CiAgICAgIH0KICAgIH0KICAgIHdyYXBwZXIuY2hpbGRyZW4ucHVzaChib3JkZXIsIGh0bWwpOwogIH0gZWxzZSB7CiAgICB3cmFwcGVyLmNoaWxkcmVuLnB1c2goaHRtbCk7CiAgfQogIGZvciAoY29uc3Qga2V5IG9mIFsiYmFja2dyb3VuZCIsICJiYWNrZ3JvdW5kQ2xpcCIsICJ0b3AiLCAibGVmdCIsICJ3aWR0aCIsICJoZWlnaHQiLCAibWluV2lkdGgiLCAibWluSGVpZ2h0IiwgIm1heFdpZHRoIiwgIm1heEhlaWdodCIsICJ0cmFuc2Zvcm0iLCAidHJhbnNmb3JtT3JpZ2luIiwgInZpc2liaWxpdHkiXSkgewogICAgaWYgKHN0eWxlW2tleV0gIT09IHVuZGVmaW5lZCkgewogICAgICB3cmFwcGVyLmF0dHJpYnV0ZXMuc3R5bGVba2V5XSA9IHN0eWxlW2tleV07CiAgICAgIGRlbGV0ZSBzdHlsZVtrZXldOwogICAgfQogIH0KICB3cmFwcGVyLmF0dHJpYnV0ZXMuc3R5bGUucG9zaXRpb24gPSBzdHlsZS5wb3NpdGlvbiA9PT0gImFic29sdXRlIiA/ICJhYnNvbHV0ZSIgOiAicmVsYXRpdmUiOwogIGRlbGV0ZSBzdHlsZS5wb3NpdGlvbjsKICBpZiAoc3R5bGUuYWxpZ25TZWxmKSB7CiAgICB3cmFwcGVyLmF0dHJpYnV0ZXMuc3R5bGUuYWxpZ25TZWxmID0gc3R5bGUuYWxpZ25TZWxmOwogICAgZGVsZXRlIHN0eWxlLmFsaWduU2VsZjsKICB9CiAgcmV0dXJuIHdyYXBwZXI7Cn0KZnVuY3Rpb24gZml4VGV4dEluZGVudChzdHlsZXMpIHsKICBjb25zdCBpbmRlbnQgPSBnZXRNZWFzdXJlbWVudChzdHlsZXMudGV4dEluZGVudCwgIjBweCIpOwogIGlmIChpbmRlbnQgPj0gMCkgewogICAgcmV0dXJuOwogIH0KICBjb25zdCBhbGlnbiA9IHN0eWxlcy50ZXh0QWxpZ24gPT09ICJyaWdodCIgPyAicmlnaHQiIDogImxlZnQiOwogIGNvbnN0IG5hbWUgPSAicGFkZGluZyIgKyAoYWxpZ24gPT09ICJsZWZ0IiA/ICJMZWZ0IiA6ICJSaWdodCIpOwogIGNvbnN0IHBhZGRpbmcgPSBnZXRNZWFzdXJlbWVudChzdHlsZXNbbmFtZV0sICIwcHgiKTsKICBzdHlsZXNbbmFtZV0gPSBgJHtwYWRkaW5nIC0gaW5kZW50fXB4YDsKfQpmdW5jdGlvbiBzZXRBY2Nlc3Mobm9kZSwgY2xhc3NOYW1lcykgewogIHN3aXRjaCAobm9kZS5hY2Nlc3MpIHsKICAgIGNhc2UgIm5vbkludGVyYWN0aXZlIjoKICAgICAgY2xhc3NOYW1lcy5wdXNoKCJ4ZmFOb25JbnRlcmFjdGl2ZSIpOwogICAgICBicmVhazsKICAgIGNhc2UgInJlYWRPbmx5IjoKICAgICAgY2xhc3NOYW1lcy5wdXNoKCJ4ZmFSZWFkT25seSIpOwogICAgICBicmVhazsKICAgIGNhc2UgInByb3RlY3RlZCI6CiAgICAgIGNsYXNzTmFtZXMucHVzaCgieGZhRGlzYWJsZWQiKTsKICAgICAgYnJlYWs7CiAgfQp9CmZ1bmN0aW9uIGlzUHJpbnRPbmx5KG5vZGUpIHsKICByZXR1cm4gbm9kZS5yZWxldmFudC5sZW5ndGggPiAwICYmICFub2RlLnJlbGV2YW50WzBdLmV4Y2x1ZGVkICYmIG5vZGUucmVsZXZhbnRbMF0udmlld25hbWUgPT09ICJwcmludCI7Cn0KZnVuY3Rpb24gZ2V0Q3VycmVudFBhcmEobm9kZSkgewogIGNvbnN0IHN0YWNrID0gbm9kZVskZ2V0VGVtcGxhdGVSb290XSgpWyRleHRyYV0ucGFyYVN0YWNrOwogIHJldHVybiBzdGFjay5sZW5ndGggPyBzdGFjay5hdCgtMSkgOiBudWxsOwp9CmZ1bmN0aW9uIHNldFBhcmEobm9kZSwgbm9kZVN0eWxlLCB2YWx1ZSkgewogIGlmICh2YWx1ZS5hdHRyaWJ1dGVzLmNsYXNzPy5pbmNsdWRlcygieGZhUmljaCIpKSB7CiAgICBpZiAobm9kZVN0eWxlKSB7CiAgICAgIGlmIChub2RlLmggPT09ICIiKSB7CiAgICAgICAgbm9kZVN0eWxlLmhlaWdodCA9ICJhdXRvIjsKICAgICAgfQogICAgICBpZiAobm9kZS53ID09PSAiIikgewogICAgICAgIG5vZGVTdHlsZS53aWR0aCA9ICJhdXRvIjsKICAgICAgfQogICAgfQogICAgY29uc3QgcGFyYSA9IGdldEN1cnJlbnRQYXJhKG5vZGUpOwogICAgaWYgKHBhcmEpIHsKICAgICAgY29uc3QgdmFsdWVTdHlsZSA9IHZhbHVlLmF0dHJpYnV0ZXMuc3R5bGU7CiAgICAgIHZhbHVlU3R5bGUuZGlzcGxheSA9ICJmbGV4IjsKICAgICAgdmFsdWVTdHlsZS5mbGV4RGlyZWN0aW9uID0gImNvbHVtbiI7CiAgICAgIHN3aXRjaCAocGFyYS52QWxpZ24pIHsKICAgICAgICBjYXNlICJ0b3AiOgogICAgICAgICAgdmFsdWVTdHlsZS5qdXN0aWZ5Q29udGVudCA9ICJzdGFydCI7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJib3R0b20iOgogICAgICAgICAgdmFsdWVTdHlsZS5qdXN0aWZ5Q29udGVudCA9ICJlbmQiOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAibWlkZGxlIjoKICAgICAgICAgIHZhbHVlU3R5bGUuanVzdGlmeUNvbnRlbnQgPSAiY2VudGVyIjsKICAgICAgICAgIGJyZWFrOwogICAgICB9CiAgICAgIGNvbnN0IHBhcmFTdHlsZSA9IHBhcmFbJHRvU3R5bGVdKCk7CiAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhwYXJhU3R5bGUpKSB7CiAgICAgICAgaWYgKCEoa2V5IGluIHZhbHVlU3R5bGUpKSB7CiAgICAgICAgICB2YWx1ZVN0eWxlW2tleV0gPSB2YWw7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQp9CmZ1bmN0aW9uIHNldEZvbnRGYW1pbHkoeGZhRm9udCwgbm9kZSwgZm9udEZpbmRlciwgc3R5bGUpIHsKICBpZiAoIWZvbnRGaW5kZXIpIHsKICAgIGRlbGV0ZSBzdHlsZS5mb250RmFtaWx5OwogICAgcmV0dXJuOwogIH0KICBjb25zdCBuYW1lID0gc3RyaXBRdW90ZXMoeGZhRm9udC50eXBlZmFjZSk7CiAgc3R5bGUuZm9udEZhbWlseSA9IGAiJHtuYW1lfSJgOwogIGNvbnN0IHR5cGVmYWNlID0gZm9udEZpbmRlci5maW5kKG5hbWUpOwogIGlmICh0eXBlZmFjZSkgewogICAgY29uc3QgewogICAgICBmb250RmFtaWx5CiAgICB9ID0gdHlwZWZhY2UucmVndWxhci5jc3NGb250SW5mbzsKICAgIGlmIChmb250RmFtaWx5ICE9PSBuYW1lKSB7CiAgICAgIHN0eWxlLmZvbnRGYW1pbHkgPSBgIiR7Zm9udEZhbWlseX0iYDsKICAgIH0KICAgIGNvbnN0IHBhcmEgPSBnZXRDdXJyZW50UGFyYShub2RlKTsKICAgIGlmIChwYXJhICYmIHBhcmEubGluZUhlaWdodCAhPT0gIiIpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgaWYgKHN0eWxlLmxpbmVIZWlnaHQpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgY29uc3QgcGRmRm9udCA9IHNlbGVjdEZvbnQoeGZhRm9udCwgdHlwZWZhY2UpOwogICAgaWYgKHBkZkZvbnQpIHsKICAgICAgc3R5bGUubGluZUhlaWdodCA9IE1hdGgubWF4KDEuMiwgcGRmRm9udC5saW5lSGVpZ2h0KTsKICAgIH0KICB9Cn0KZnVuY3Rpb24gZml4VVJMKHN0cikgewogIGNvbnN0IGFic29sdXRlVXJsID0gY3JlYXRlVmFsaWRBYnNvbHV0ZVVybChzdHIsIG51bGwsIHsKICAgIGFkZERlZmF1bHRQcm90b2NvbDogdHJ1ZSwKICAgIHRyeUNvbnZlcnRFbmNvZGluZzogdHJ1ZQogIH0pOwogIHJldHVybiBhYnNvbHV0ZVVybCA/IGFic29sdXRlVXJsLmhyZWYgOiBudWxsOwp9Cgo7Ly8gLi9zcmMvY29yZS94ZmEvbGF5b3V0LmpzCgoKCgoKZnVuY3Rpb24gY3JlYXRlTGluZShub2RlLCBjaGlsZHJlbikgewogIHJldHVybiB7CiAgICBuYW1lOiAiZGl2IiwKICAgIGF0dHJpYnV0ZXM6IHsKICAgICAgY2xhc3M6IFtub2RlLmxheW91dCA9PT0gImxyLXRiIiA/ICJ4ZmFMciIgOiAieGZhUmwiXQogICAgfSwKICAgIGNoaWxkcmVuCiAgfTsKfQpmdW5jdGlvbiBmbHVzaEhUTUwobm9kZSkgewogIGlmICghbm9kZVskZXh0cmFdKSB7CiAgICByZXR1cm4gbnVsbDsKICB9CiAgY29uc3QgYXR0cmlidXRlcyA9IG5vZGVbJGV4dHJhXS5hdHRyaWJ1dGVzOwogIGNvbnN0IGh0bWwgPSB7CiAgICBuYW1lOiAiZGl2IiwKICAgIGF0dHJpYnV0ZXMsCiAgICBjaGlsZHJlbjogbm9kZVskZXh0cmFdLmNoaWxkcmVuCiAgfTsKICBpZiAobm9kZVskZXh0cmFdLmZhaWxpbmdOb2RlKSB7CiAgICBjb25zdCBodG1sRnJvbUZhaWxpbmcgPSBub2RlWyRleHRyYV0uZmFpbGluZ05vZGVbJGZsdXNoSFRNTF0oKTsKICAgIGlmIChodG1sRnJvbUZhaWxpbmcpIHsKICAgICAgaWYgKG5vZGUubGF5b3V0LmVuZHNXaXRoKCItdGIiKSkgewogICAgICAgIGh0bWwuY2hpbGRyZW4ucHVzaChjcmVhdGVMaW5lKG5vZGUsIFtodG1sRnJvbUZhaWxpbmddKSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaHRtbC5jaGlsZHJlbi5wdXNoKGh0bWxGcm9tRmFpbGluZyk7CiAgICAgIH0KICAgIH0KICB9CiAgaWYgKGh0bWwuY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7CiAgICByZXR1cm4gbnVsbDsKICB9CiAgcmV0dXJuIGh0bWw7Cn0KZnVuY3Rpb24gYWRkSFRNTChub2RlLCBodG1sLCBiYm94KSB7CiAgY29uc3QgZXh0cmEgPSBub2RlWyRleHRyYV07CiAgY29uc3QgYXZhaWxhYmxlU3BhY2UgPSBleHRyYS5hdmFpbGFibGVTcGFjZTsKICBjb25zdCBbeCwgeSwgdywgaF0gPSBiYm94OwogIHN3aXRjaCAobm9kZS5sYXlvdXQpIHsKICAgIGNhc2UgInBvc2l0aW9uIjoKICAgICAgewogICAgICAgIGV4dHJhLndpZHRoID0gTWF0aC5tYXgoZXh0cmEud2lkdGgsIHggKyB3KTsKICAgICAgICBleHRyYS5oZWlnaHQgPSBNYXRoLm1heChleHRyYS5oZWlnaHQsIHkgKyBoKTsKICAgICAgICBleHRyYS5jaGlsZHJlbi5wdXNoKGh0bWwpOwogICAgICAgIGJyZWFrOwogICAgICB9CiAgICBjYXNlICJsci10YiI6CiAgICBjYXNlICJybC10YiI6CiAgICAgIGlmICghZXh0cmEubGluZSB8fCBleHRyYS5hdHRlbXB0ID09PSAxKSB7CiAgICAgICAgZXh0cmEubGluZSA9IGNyZWF0ZUxpbmUobm9kZSwgW10pOwogICAgICAgIGV4dHJhLmNoaWxkcmVuLnB1c2goZXh0cmEubGluZSk7CiAgICAgICAgZXh0cmEubnVtYmVySW5MaW5lID0gMDsKICAgICAgfQogICAgICBleHRyYS5udW1iZXJJbkxpbmUgKz0gMTsKICAgICAgZXh0cmEubGluZS5jaGlsZHJlbi5wdXNoKGh0bWwpOwogICAgICBpZiAoZXh0cmEuYXR0ZW1wdCA9PT0gMCkgewogICAgICAgIGV4dHJhLmN1cnJlbnRXaWR0aCArPSB3OwogICAgICAgIGV4dHJhLmhlaWdodCA9IE1hdGgubWF4KGV4dHJhLmhlaWdodCwgZXh0cmEucHJldkhlaWdodCArIGgpOwogICAgICB9IGVsc2UgewogICAgICAgIGV4dHJhLmN1cnJlbnRXaWR0aCA9IHc7CiAgICAgICAgZXh0cmEucHJldkhlaWdodCA9IGV4dHJhLmhlaWdodDsKICAgICAgICBleHRyYS5oZWlnaHQgKz0gaDsKICAgICAgICBleHRyYS5hdHRlbXB0ID0gMDsKICAgICAgfQogICAgICBleHRyYS53aWR0aCA9IE1hdGgubWF4KGV4dHJhLndpZHRoLCBleHRyYS5jdXJyZW50V2lkdGgpOwogICAgICBicmVhazsKICAgIGNhc2UgInJsLXJvdyI6CiAgICBjYXNlICJyb3ciOgogICAgICB7CiAgICAgICAgZXh0cmEuY2hpbGRyZW4ucHVzaChodG1sKTsKICAgICAgICBleHRyYS53aWR0aCArPSB3OwogICAgICAgIGV4dHJhLmhlaWdodCA9IE1hdGgubWF4KGV4dHJhLmhlaWdodCwgaCk7CiAgICAgICAgY29uc3QgaGVpZ2h0ID0gbWVhc3VyZVRvU3RyaW5nKGV4dHJhLmhlaWdodCk7CiAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBleHRyYS5jaGlsZHJlbikgewogICAgICAgICAgY2hpbGQuYXR0cmlidXRlcy5zdHlsZS5oZWlnaHQgPSBoZWlnaHQ7CiAgICAgICAgfQogICAgICAgIGJyZWFrOwogICAgICB9CiAgICBjYXNlICJ0YWJsZSI6CiAgICAgIHsKICAgICAgICBleHRyYS53aWR0aCA9IE1hdGhDbGFtcCh3LCBleHRyYS53aWR0aCwgYXZhaWxhYmxlU3BhY2Uud2lkdGgpOwogICAgICAgIGV4dHJhLmhlaWdodCArPSBoOwogICAgICAgIGV4dHJhLmNoaWxkcmVuLnB1c2goaHRtbCk7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIGNhc2UgInRiIjoKICAgICAgewogICAgICAgIGV4dHJhLndpZHRoID0gTWF0aENsYW1wKHcsIGV4dHJhLndpZHRoLCBhdmFpbGFibGVTcGFjZS53aWR0aCk7CiAgICAgICAgZXh0cmEuaGVpZ2h0ICs9IGg7CiAgICAgICAgZXh0cmEuY2hpbGRyZW4ucHVzaChodG1sKTsKICAgICAgICBicmVhazsKICAgICAgfQogIH0KfQpmdW5jdGlvbiBnZXRBdmFpbGFibGVTcGFjZShub2RlKSB7CiAgY29uc3QgYXZhaWxhYmxlU3BhY2UgPSBub2RlWyRleHRyYV0uYXZhaWxhYmxlU3BhY2U7CiAgY29uc3QgbWFyZ2luViA9IG5vZGUubWFyZ2luID8gbm9kZS5tYXJnaW4udG9wSW5zZXQgKyBub2RlLm1hcmdpbi5ib3R0b21JbnNldCA6IDA7CiAgY29uc3QgbWFyZ2luSCA9IG5vZGUubWFyZ2luID8gbm9kZS5tYXJnaW4ubGVmdEluc2V0ICsgbm9kZS5tYXJnaW4ucmlnaHRJbnNldCA6IDA7CiAgc3dpdGNoIChub2RlLmxheW91dCkgewogICAgY2FzZSAibHItdGIiOgogICAgY2FzZSAicmwtdGIiOgogICAgICBpZiAobm9kZVskZXh0cmFdLmF0dGVtcHQgPT09IDApIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgd2lkdGg6IGF2YWlsYWJsZVNwYWNlLndpZHRoIC0gbWFyZ2luSCAtIG5vZGVbJGV4dHJhXS5jdXJyZW50V2lkdGgsCiAgICAgICAgICBoZWlnaHQ6IGF2YWlsYWJsZVNwYWNlLmhlaWdodCAtIG1hcmdpblYgLSBub2RlWyRleHRyYV0ucHJldkhlaWdodAogICAgICAgIH07CiAgICAgIH0KICAgICAgcmV0dXJuIHsKICAgICAgICB3aWR0aDogYXZhaWxhYmxlU3BhY2Uud2lkdGggLSBtYXJnaW5ILAogICAgICAgIGhlaWdodDogYXZhaWxhYmxlU3BhY2UuaGVpZ2h0IC0gbWFyZ2luViAtIG5vZGVbJGV4dHJhXS5oZWlnaHQKICAgICAgfTsKICAgIGNhc2UgInJsLXJvdyI6CiAgICBjYXNlICJyb3ciOgogICAgICBjb25zdCB3aWR0aCA9IE1hdGguc3VtUHJlY2lzZShub2RlWyRleHRyYV0uY29sdW1uV2lkdGhzLnNsaWNlKG5vZGVbJGV4dHJhXS5jdXJyZW50Q29sdW1uKSk7CiAgICAgIHJldHVybiB7CiAgICAgICAgd2lkdGgsCiAgICAgICAgaGVpZ2h0OiBhdmFpbGFibGVTcGFjZS5oZWlnaHQgLSBtYXJnaW5ICiAgICAgIH07CiAgICBjYXNlICJ0YWJsZSI6CiAgICBjYXNlICJ0YiI6CiAgICAgIHJldHVybiB7CiAgICAgICAgd2lkdGg6IGF2YWlsYWJsZVNwYWNlLndpZHRoIC0gbWFyZ2luSCwKICAgICAgICBoZWlnaHQ6IGF2YWlsYWJsZVNwYWNlLmhlaWdodCAtIG1hcmdpblYgLSBub2RlWyRleHRyYV0uaGVpZ2h0CiAgICAgIH07CiAgICBjYXNlICJwb3NpdGlvbiI6CiAgICBkZWZhdWx0OgogICAgICByZXR1cm4gYXZhaWxhYmxlU3BhY2U7CiAgfQp9CmZ1bmN0aW9uIGdldFRyYW5zZm9ybWVkQkJveChub2RlKSB7CiAgbGV0IHcgPSBub2RlLncgPT09ICIiID8gTmFOIDogbm9kZS53OwogIGxldCBoID0gbm9kZS5oID09PSAiIiA/IE5hTiA6IG5vZGUuaDsKICBsZXQgW2NlbnRlclgsIGNlbnRlclldID0gWzAsIDBdOwogIHN3aXRjaCAobm9kZS5hbmNob3JUeXBlIHx8ICIiKSB7CiAgICBjYXNlICJib3R0b21DZW50ZXIiOgogICAgICBbY2VudGVyWCwgY2VudGVyWV0gPSBbdyAvIDIsIGhdOwogICAgICBicmVhazsKICAgIGNhc2UgImJvdHRvbUxlZnQiOgogICAgICBbY2VudGVyWCwgY2VudGVyWV0gPSBbMCwgaF07CiAgICAgIGJyZWFrOwogICAgY2FzZSAiYm90dG9tUmlnaHQiOgogICAgICBbY2VudGVyWCwgY2VudGVyWV0gPSBbdywgaF07CiAgICAgIGJyZWFrOwogICAgY2FzZSAibWlkZGxlQ2VudGVyIjoKICAgICAgW2NlbnRlclgsIGNlbnRlclldID0gW3cgLyAyLCBoIC8gMl07CiAgICAgIGJyZWFrOwogICAgY2FzZSAibWlkZGxlTGVmdCI6CiAgICAgIFtjZW50ZXJYLCBjZW50ZXJZXSA9IFswLCBoIC8gMl07CiAgICAgIGJyZWFrOwogICAgY2FzZSAibWlkZGxlUmlnaHQiOgogICAgICBbY2VudGVyWCwgY2VudGVyWV0gPSBbdywgaCAvIDJdOwogICAgICBicmVhazsKICAgIGNhc2UgInRvcENlbnRlciI6CiAgICAgIFtjZW50ZXJYLCBjZW50ZXJZXSA9IFt3IC8gMiwgMF07CiAgICAgIGJyZWFrOwogICAgY2FzZSAidG9wUmlnaHQiOgogICAgICBbY2VudGVyWCwgY2VudGVyWV0gPSBbdywgMF07CiAgICAgIGJyZWFrOwogIH0KICBsZXQgeCwgeTsKICBzd2l0Y2ggKG5vZGUucm90YXRlIHx8IDApIHsKICAgIGNhc2UgMDoKICAgICAgW3gsIHldID0gWy1jZW50ZXJYLCAtY2VudGVyWV07CiAgICAgIGJyZWFrOwogICAgY2FzZSA5MDoKICAgICAgW3gsIHldID0gWy1jZW50ZXJZLCBjZW50ZXJYXTsKICAgICAgW3csIGhdID0gW2gsIC13XTsKICAgICAgYnJlYWs7CiAgICBjYXNlIDE4MDoKICAgICAgW3gsIHldID0gW2NlbnRlclgsIGNlbnRlclldOwogICAgICBbdywgaF0gPSBbLXcsIC1oXTsKICAgICAgYnJlYWs7CiAgICBjYXNlIDI3MDoKICAgICAgW3gsIHldID0gW2NlbnRlclksIC1jZW50ZXJYXTsKICAgICAgW3csIGhdID0gWy1oLCB3XTsKICAgICAgYnJlYWs7CiAgfQogIHJldHVybiBbbm9kZS54ICsgeCArIE1hdGgubWluKDAsIHcpLCBub2RlLnkgKyB5ICsgTWF0aC5taW4oMCwgaCksIE1hdGguYWJzKHcpLCBNYXRoLmFicyhoKV07Cn0KZnVuY3Rpb24gY2hlY2tEaW1lbnNpb25zKG5vZGUsIHNwYWNlKSB7CiAgaWYgKG5vZGVbJGdldFRlbXBsYXRlUm9vdF0oKVskZXh0cmFdLmZpcnN0VW5zcGxpdHRhYmxlID09PSBudWxsKSB7CiAgICByZXR1cm4gdHJ1ZTsKICB9CiAgaWYgKG5vZGUudyA9PT0gMCB8fCBub2RlLmggPT09IDApIHsKICAgIHJldHVybiB0cnVlOwogIH0KICBjb25zdCBFUlJPUiA9IDI7CiAgY29uc3QgcGFyZW50ID0gbm9kZVskZ2V0U3ViZm9ybVBhcmVudF0oKTsKICBjb25zdCBhdHRlbXB0ID0gcGFyZW50WyRleHRyYV0/LmF0dGVtcHQgfHwgMDsKICBjb25zdCBbLCB5LCB3LCBoXSA9IGdldFRyYW5zZm9ybWVkQkJveChub2RlKTsKICBzd2l0Y2ggKHBhcmVudC5sYXlvdXQpIHsKICAgIGNhc2UgImxyLXRiIjoKICAgIGNhc2UgInJsLXRiIjoKICAgICAgaWYgKGF0dGVtcHQgPT09IDApIHsKICAgICAgICBpZiAoIW5vZGVbJGdldFRlbXBsYXRlUm9vdF0oKVskZXh0cmFdLm5vTGF5b3V0RmFpbHVyZSkgewogICAgICAgICAgaWYgKG5vZGUuaCAhPT0gIiIgJiYgTWF0aC5yb3VuZChoIC0gc3BhY2UuaGVpZ2h0KSA+IEVSUk9SKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChub2RlLncgIT09ICIiKSB7CiAgICAgICAgICAgIGlmIChNYXRoLnJvdW5kKHcgLSBzcGFjZS53aWR0aCkgPD0gRVJST1IpIHsKICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAocGFyZW50WyRleHRyYV0ubnVtYmVySW5MaW5lID09PSAwKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHNwYWNlLmhlaWdodCA+IEVSUk9SOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBzcGFjZS53aWR0aCA+IEVSUk9SOwogICAgICAgIH0KICAgICAgICBpZiAobm9kZS53ICE9PSAiIikgewogICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodyAtIHNwYWNlLndpZHRoKSA8PSBFUlJPUjsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHNwYWNlLndpZHRoID4gRVJST1I7CiAgICAgIH0KICAgICAgaWYgKG5vZGVbJGdldFRlbXBsYXRlUm9vdF0oKVskZXh0cmFdLm5vTGF5b3V0RmFpbHVyZSkgewogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICAgIGlmIChub2RlLmggIT09ICIiICYmIE1hdGgucm91bmQoaCAtIHNwYWNlLmhlaWdodCkgPiBFUlJPUikgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgICBpZiAobm9kZS53ID09PSAiIiB8fCBNYXRoLnJvdW5kKHcgLSBzcGFjZS53aWR0aCkgPD0gRVJST1IpIHsKICAgICAgICByZXR1cm4gc3BhY2UuaGVpZ2h0ID4gRVJST1I7CiAgICAgIH0KICAgICAgaWYgKHBhcmVudFskaXNUaGVyZU1vcmVXaWR0aF0oKSkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgICByZXR1cm4gc3BhY2UuaGVpZ2h0ID4gRVJST1I7CiAgICBjYXNlICJ0YWJsZSI6CiAgICBjYXNlICJ0YiI6CiAgICAgIGlmIChub2RlWyRnZXRUZW1wbGF0ZVJvb3RdKClbJGV4dHJhXS5ub0xheW91dEZhaWx1cmUpIHsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgICBpZiAobm9kZS5oICE9PSAiIiAmJiAhbm9kZVskaXNTcGxpdHRhYmxlXSgpKSB7CiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoaCAtIHNwYWNlLmhlaWdodCkgPD0gRVJST1I7CiAgICAgIH0KICAgICAgaWYgKG5vZGUudyA9PT0gIiIgfHwgTWF0aC5yb3VuZCh3IC0gc3BhY2Uud2lkdGgpIDw9IEVSUk9SKSB7CiAgICAgICAgcmV0dXJuIHNwYWNlLmhlaWdodCA+IEVSUk9SOwogICAgICB9CiAgICAgIGlmIChwYXJlbnRbJGlzVGhlcmVNb3JlV2lkdGhdKCkpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgcmV0dXJuIHNwYWNlLmhlaWdodCA+IEVSUk9SOwogICAgY2FzZSAicG9zaXRpb24iOgogICAgICBpZiAobm9kZVskZ2V0VGVtcGxhdGVSb290XSgpWyRleHRyYV0ubm9MYXlvdXRGYWlsdXJlKSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgICAgaWYgKG5vZGUuaCA9PT0gIiIgfHwgTWF0aC5yb3VuZChoICsgeSAtIHNwYWNlLmhlaWdodCkgPD0gRVJST1IpIHsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgICBjb25zdCBhcmVhID0gbm9kZVskZ2V0VGVtcGxhdGVSb290XSgpWyRleHRyYV0uY3VycmVudENvbnRlbnRBcmVhOwogICAgICByZXR1cm4gaCArIHkgPiBhcmVhLmg7CiAgICBjYXNlICJybC1yb3ciOgogICAgY2FzZSAicm93IjoKICAgICAgaWYgKG5vZGVbJGdldFRlbXBsYXRlUm9vdF0oKVskZXh0cmFdLm5vTGF5b3V0RmFpbHVyZSkgewogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICAgIGlmIChub2RlLmggIT09ICIiKSB7CiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoaCAtIHNwYWNlLmhlaWdodCkgPD0gRVJST1I7CiAgICAgIH0KICAgICAgcmV0dXJuIHRydWU7CiAgICBkZWZhdWx0OgogICAgICByZXR1cm4gdHJ1ZTsKICB9Cn0KCjsvLyAuL3NyYy9jb3JlL3hmYS90ZW1wbGF0ZS5qcwoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCmNvbnN0IFRFTVBMQVRFX05TX0lEID0gTmFtZXNwYWNlSWRzLnRlbXBsYXRlLmlkOwpjb25zdCBTVkdfTlMgPSAiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciOwpjb25zdCBNQVhfQVRURU1QVFNfRk9SX0xSVEJfTEFZT1VUID0gMjsKY29uc3QgTUFYX0VNUFRZX1BBR0VTID0gMzsKY29uc3QgREVGQVVMVF9UQUJfSU5ERVggPSA1MDAwOwpjb25zdCBIRUFESU5HX1BBVFRFUk4gPSAvXkgoXGQrKSQvOwpjb25zdCBNSU1FUyA9IG5ldyBTZXQoWyJpbWFnZS9naWYiLCAiaW1hZ2UvanBlZyIsICJpbWFnZS9qcGciLCAiaW1hZ2UvcGpwZWciLCAiaW1hZ2UvcG5nIiwgImltYWdlL2FwbmciLCAiaW1hZ2UveC1wbmciLCAiaW1hZ2UvYm1wIiwgImltYWdlL3gtbXMtYm1wIiwgImltYWdlL3RpZmYiLCAiaW1hZ2UvdGlmIiwgImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSJdKTsKY29uc3QgSU1BR0VTX0hFQURFUlMgPSBbW1sweDQyLCAweDRkXSwgImltYWdlL2JtcCJdLCBbWzB4ZmYsIDB4ZDgsIDB4ZmZdLCAiaW1hZ2UvanBlZyJdLCBbWzB4NDksIDB4NDksIDB4MmEsIDB4MDBdLCAiaW1hZ2UvdGlmZiJdLCBbWzB4NGQsIDB4NGQsIDB4MDAsIDB4MmFdLCAiaW1hZ2UvdGlmZiJdLCBbWzB4NDcsIDB4NDksIDB4NDYsIDB4MzgsIDB4MzksIDB4NjFdLCAiaW1hZ2UvZ2lmIl0sIFtbMHg4OSwgMHg1MCwgMHg0ZSwgMHg0NywgMHgwZCwgMHgwYSwgMHgxYSwgMHgwYV0sICJpbWFnZS9wbmciXV07CmZ1bmN0aW9uIGdldEJvcmRlckRpbXMobm9kZSkgewogIGlmICghbm9kZSB8fCAhbm9kZS5ib3JkZXIpIHsKICAgIHJldHVybiB7CiAgICAgIHc6IDAsCiAgICAgIGg6IDAKICAgIH07CiAgfQogIGNvbnN0IGJvcmRlckV4dHJhID0gbm9kZS5ib3JkZXJbJGdldEV4dHJhXSgpOwogIGlmICghYm9yZGVyRXh0cmEpIHsKICAgIHJldHVybiB7CiAgICAgIHc6IDAsCiAgICAgIGg6IDAKICAgIH07CiAgfQogIHJldHVybiB7CiAgICB3OiBib3JkZXJFeHRyYS53aWR0aHNbMF0gKyBib3JkZXJFeHRyYS53aWR0aHNbMl0gKyBib3JkZXJFeHRyYS5pbnNldHNbMF0gKyBib3JkZXJFeHRyYS5pbnNldHNbMl0sCiAgICBoOiBib3JkZXJFeHRyYS53aWR0aHNbMV0gKyBib3JkZXJFeHRyYS53aWR0aHNbM10gKyBib3JkZXJFeHRyYS5pbnNldHNbMV0gKyBib3JkZXJFeHRyYS5pbnNldHNbM10KICB9Owp9CmZ1bmN0aW9uIGhhc01hcmdpbihub2RlKSB7CiAgcmV0dXJuIG5vZGUubWFyZ2luICYmIChub2RlLm1hcmdpbi50b3BJbnNldCB8fCBub2RlLm1hcmdpbi5yaWdodEluc2V0IHx8IG5vZGUubWFyZ2luLmJvdHRvbUluc2V0IHx8IG5vZGUubWFyZ2luLmxlZnRJbnNldCk7Cn0KZnVuY3Rpb24gX3NldFZhbHVlKHRlbXBsYXRlTm9kZSwgdmFsdWUpIHsKICBpZiAoIXRlbXBsYXRlTm9kZS52YWx1ZSkgewogICAgY29uc3Qgbm9kZVZhbHVlID0gbmV3IFZhbHVlKHt9KTsKICAgIHRlbXBsYXRlTm9kZVskYXBwZW5kQ2hpbGRdKG5vZGVWYWx1ZSk7CiAgICB0ZW1wbGF0ZU5vZGUudmFsdWUgPSBub2RlVmFsdWU7CiAgfQogIHRlbXBsYXRlTm9kZS52YWx1ZVskc2V0VmFsdWVdKHZhbHVlKTsKfQpmdW5jdGlvbiogZ2V0Q29udGFpbmVkQ2hpbGRyZW4obm9kZSkgewogIGZvciAoY29uc3QgY2hpbGQgb2Ygbm9kZVskZ2V0Q2hpbGRyZW5dKCkpIHsKICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIFN1YmZvcm1TZXQpIHsKICAgICAgeWllbGQqIGNoaWxkWyRnZXRDb250YWluZWRDaGlsZHJlbl0oKTsKICAgICAgY29udGludWU7CiAgICB9CiAgICB5aWVsZCBjaGlsZDsKICB9Cn0KZnVuY3Rpb24gaXNSZXF1aXJlZChub2RlKSB7CiAgcmV0dXJuIG5vZGUudmFsaWRhdGU/Lm51bGxUZXN0ID09PSAiZXJyb3IiOwp9CmZ1bmN0aW9uIHNldFRhYkluZGV4KG5vZGUpIHsKICB3aGlsZSAobm9kZSkgewogICAgaWYgKCFub2RlLnRyYXZlcnNhbCkgewogICAgICBub2RlWyR0YWJJbmRleF0gPSBub2RlWyRnZXRQYXJlbnRdKClbJHRhYkluZGV4XTsKICAgICAgcmV0dXJuOwogICAgfQogICAgaWYgKG5vZGVbJHRhYkluZGV4XSkgewogICAgICByZXR1cm47CiAgICB9CiAgICBsZXQgbmV4dCA9IG51bGw7CiAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIG5vZGUudHJhdmVyc2FsWyRnZXRDaGlsZHJlbl0oKSkgewogICAgICBpZiAoY2hpbGQub3BlcmF0aW9uID09PSAibmV4dCIpIHsKICAgICAgICBuZXh0ID0gY2hpbGQ7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KICAgIGlmICghbmV4dCB8fCAhbmV4dC5yZWYpIHsKICAgICAgbm9kZVskdGFiSW5kZXhdID0gbm9kZVskZ2V0UGFyZW50XSgpWyR0YWJJbmRleF07CiAgICAgIHJldHVybjsKICAgIH0KICAgIGNvbnN0IHJvb3QgPSBub2RlWyRnZXRUZW1wbGF0ZVJvb3RdKCk7CiAgICBub2RlWyR0YWJJbmRleF0gPSArK3Jvb3RbJHRhYkluZGV4XTsKICAgIGNvbnN0IHJlZiA9IHJvb3RbJHNlYXJjaE5vZGVdKG5leHQucmVmLCBub2RlKTsKICAgIGlmICghcmVmKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIG5vZGUgPSByZWZbMF07CiAgfQp9CmZ1bmN0aW9uIGFwcGx5QXNzaXN0KG9iaiwgYXR0cmlidXRlcykgewogIGNvbnN0IGFzc2lzdCA9IG9iai5hc3Npc3Q7CiAgaWYgKGFzc2lzdCkgewogICAgY29uc3QgYXNzaXN0VGl0bGUgPSBhc3Npc3RbJHRvSFRNTF0oKTsKICAgIGlmIChhc3Npc3RUaXRsZSkgewogICAgICBhdHRyaWJ1dGVzLnRpdGxlID0gYXNzaXN0VGl0bGU7CiAgICB9CiAgICBjb25zdCByb2xlID0gYXNzaXN0LnJvbGU7CiAgICBjb25zdCBtYXRjaCA9IHJvbGUubWF0Y2goSEVBRElOR19QQVRURVJOKTsKICAgIGlmIChtYXRjaCkgewogICAgICBjb25zdCBhcmlhUm9sZSA9ICJoZWFkaW5nIjsKICAgICAgY29uc3QgYXJpYUxldmVsID0gbWF0Y2hbMV07CiAgICAgIGF0dHJpYnV0ZXMucm9sZSA9IGFyaWFSb2xlOwogICAgICBhdHRyaWJ1dGVzWyJhcmlhLWxldmVsIl0gPSBhcmlhTGV2ZWw7CiAgICB9CiAgfQogIGlmIChvYmoubGF5b3V0ID09PSAidGFibGUiKSB7CiAgICBhdHRyaWJ1dGVzLnJvbGUgPSAidGFibGUiOwogIH0gZWxzZSBpZiAob2JqLmxheW91dCA9PT0gInJvdyIpIHsKICAgIGF0dHJpYnV0ZXMucm9sZSA9ICJyb3ciOwogIH0gZWxzZSB7CiAgICBjb25zdCBwYXJlbnQgPSBvYmpbJGdldFBhcmVudF0oKTsKICAgIGlmIChwYXJlbnQubGF5b3V0ID09PSAicm93IikgewogICAgICBhdHRyaWJ1dGVzLnJvbGUgPSBwYXJlbnQuYXNzaXN0Py5yb2xlID09PSAiVEgiID8gImNvbHVtbmhlYWRlciIgOiAiY2VsbCI7CiAgICB9CiAgfQp9CmZ1bmN0aW9uIGFyaWFMYWJlbChvYmopIHsKICBpZiAoIW9iai5hc3Npc3QpIHsKICAgIHJldHVybiBudWxsOwogIH0KICBjb25zdCBhc3Npc3QgPSBvYmouYXNzaXN0OwogIGlmIChhc3Npc3Quc3BlYWsgJiYgYXNzaXN0LnNwZWFrWyRjb250ZW50XSAhPT0gIiIpIHsKICAgIHJldHVybiBhc3Npc3Quc3BlYWtbJGNvbnRlbnRdOwogIH0KICBpZiAoYXNzaXN0LnRvb2xUaXApIHsKICAgIHJldHVybiBhc3Npc3QudG9vbFRpcFskY29udGVudF07CiAgfQogIHJldHVybiBudWxsOwp9CmZ1bmN0aW9uIHZhbHVlVG9IdG1sKHZhbHVlKSB7CiAgcmV0dXJuIEhUTUxSZXN1bHQuc3VjY2Vzcyh7CiAgICBuYW1lOiAiZGl2IiwKICAgIGF0dHJpYnV0ZXM6IHsKICAgICAgY2xhc3M6IFsieGZhUmljaCJdLAogICAgICBzdHlsZTogT2JqZWN0LmNyZWF0ZShudWxsKQogICAgfSwKICAgIGNoaWxkcmVuOiBbewogICAgICBuYW1lOiAic3BhbiIsCiAgICAgIGF0dHJpYnV0ZXM6IHsKICAgICAgICBzdHlsZTogT2JqZWN0LmNyZWF0ZShudWxsKQogICAgICB9LAogICAgICB2YWx1ZQogICAgfV0KICB9KTsKfQpmdW5jdGlvbiBzZXRGaXJzdFVuc3BsaXR0YWJsZShub2RlKSB7CiAgY29uc3Qgcm9vdCA9IG5vZGVbJGdldFRlbXBsYXRlUm9vdF0oKTsKICBpZiAocm9vdFskZXh0cmFdLmZpcnN0VW5zcGxpdHRhYmxlID09PSBudWxsKSB7CiAgICByb290WyRleHRyYV0uZmlyc3RVbnNwbGl0dGFibGUgPSBub2RlOwogICAgcm9vdFskZXh0cmFdLm5vTGF5b3V0RmFpbHVyZSA9IHRydWU7CiAgfQp9CmZ1bmN0aW9uIHVuc2V0Rmlyc3RVbnNwbGl0dGFibGUobm9kZSkgewogIGNvbnN0IHJvb3QgPSBub2RlWyRnZXRUZW1wbGF0ZVJvb3RdKCk7CiAgaWYgKHJvb3RbJGV4dHJhXS5maXJzdFVuc3BsaXR0YWJsZSA9PT0gbm9kZSkgewogICAgcm9vdFskZXh0cmFdLm5vTGF5b3V0RmFpbHVyZSA9IGZhbHNlOwogIH0KfQpmdW5jdGlvbiBoYW5kbGVCcmVhayhub2RlKSB7CiAgaWYgKG5vZGVbJGV4dHJhXSkgewogICAgcmV0dXJuIGZhbHNlOwogIH0KICBub2RlWyRleHRyYV0gPSBPYmplY3QuY3JlYXRlKG51bGwpOwogIGlmIChub2RlLnRhcmdldFR5cGUgPT09ICJhdXRvIikgewogICAgcmV0dXJuIGZhbHNlOwogIH0KICBjb25zdCByb290ID0gbm9kZVskZ2V0VGVtcGxhdGVSb290XSgpOwogIGxldCB0YXJnZXQgPSBudWxsOwogIGlmIChub2RlLnRhcmdldCkgewogICAgdGFyZ2V0ID0gcm9vdFskc2VhcmNoTm9kZV0obm9kZS50YXJnZXQsIG5vZGVbJGdldFBhcmVudF0oKSk7CiAgICBpZiAoIXRhcmdldCkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgICB0YXJnZXQgPSB0YXJnZXRbMF07CiAgfQogIGNvbnN0IHsKICAgIGN1cnJlbnRQYWdlQXJlYSwKICAgIGN1cnJlbnRDb250ZW50QXJlYQogIH0gPSByb290WyRleHRyYV07CiAgaWYgKG5vZGUudGFyZ2V0VHlwZSA9PT0gInBhZ2VBcmVhIikgewogICAgaWYgKCEodGFyZ2V0IGluc3RhbmNlb2YgUGFnZUFyZWEpKSB7CiAgICAgIHRhcmdldCA9IG51bGw7CiAgICB9CiAgICBpZiAobm9kZS5zdGFydE5ldykgewogICAgICBub2RlWyRleHRyYV0udGFyZ2V0ID0gdGFyZ2V0IHx8IGN1cnJlbnRQYWdlQXJlYTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9IGVsc2UgaWYgKHRhcmdldCAmJiB0YXJnZXQgIT09IGN1cnJlbnRQYWdlQXJlYSkgewogICAgICBub2RlWyRleHRyYV0udGFyZ2V0ID0gdGFyZ2V0OwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIHJldHVybiBmYWxzZTsKICB9CiAgaWYgKCEodGFyZ2V0IGluc3RhbmNlb2YgQ29udGVudEFyZWEpKSB7CiAgICB0YXJnZXQgPSBudWxsOwogIH0KICBjb25zdCBwYWdlQXJlYSA9IHRhcmdldCAmJiB0YXJnZXRbJGdldFBhcmVudF0oKTsKICBsZXQgaW5kZXg7CiAgbGV0IG5leHRQYWdlQXJlYSA9IHBhZ2VBcmVhOwogIGlmIChub2RlLnN0YXJ0TmV3KSB7CiAgICBpZiAodGFyZ2V0KSB7CiAgICAgIGNvbnN0IGNvbnRlbnRBcmVhcyA9IHBhZ2VBcmVhLmNvbnRlbnRBcmVhLmNoaWxkcmVuOwogICAgICBjb25zdCBpbmRleEZvckN1cnJlbnQgPSBjb250ZW50QXJlYXMuaW5kZXhPZihjdXJyZW50Q29udGVudEFyZWEpOwogICAgICBjb25zdCBpbmRleEZvclRhcmdldCA9IGNvbnRlbnRBcmVhcy5pbmRleE9mKHRhcmdldCk7CiAgICAgIGlmIChpbmRleEZvckN1cnJlbnQgIT09IC0xICYmIGluZGV4Rm9yQ3VycmVudCA8IGluZGV4Rm9yVGFyZ2V0KSB7CiAgICAgICAgbmV4dFBhZ2VBcmVhID0gbnVsbDsKICAgICAgfQogICAgICBpbmRleCA9IGluZGV4Rm9yVGFyZ2V0IC0gMTsKICAgIH0gZWxzZSB7CiAgICAgIGluZGV4ID0gY3VycmVudFBhZ2VBcmVhLmNvbnRlbnRBcmVhLmNoaWxkcmVuLmluZGV4T2YoY3VycmVudENvbnRlbnRBcmVhKTsKICAgIH0KICB9IGVsc2UgaWYgKHRhcmdldCAmJiB0YXJnZXQgIT09IGN1cnJlbnRDb250ZW50QXJlYSkgewogICAgY29uc3QgY29udGVudEFyZWFzID0gcGFnZUFyZWEuY29udGVudEFyZWEuY2hpbGRyZW47CiAgICBpbmRleCA9IGNvbnRlbnRBcmVhcy5pbmRleE9mKHRhcmdldCkgLSAxOwogICAgbmV4dFBhZ2VBcmVhID0gcGFnZUFyZWEgPT09IGN1cnJlbnRQYWdlQXJlYSA/IG51bGwgOiBwYWdlQXJlYTsKICB9IGVsc2UgewogICAgcmV0dXJuIGZhbHNlOwogIH0KICBub2RlWyRleHRyYV0udGFyZ2V0ID0gbmV4dFBhZ2VBcmVhOwogIG5vZGVbJGV4dHJhXS5pbmRleCA9IGluZGV4OwogIHJldHVybiB0cnVlOwp9CmZ1bmN0aW9uIGhhbmRsZU92ZXJmbG93KG5vZGUsIGV4dHJhTm9kZSwgc3BhY2UpIHsKICBjb25zdCByb290ID0gbm9kZVskZ2V0VGVtcGxhdGVSb290XSgpOwogIGNvbnN0IHNhdmVkID0gcm9vdFskZXh0cmFdLm5vTGF5b3V0RmFpbHVyZTsKICBjb25zdCBzYXZlZE1ldGhvZCA9IGV4dHJhTm9kZVskZ2V0U3ViZm9ybVBhcmVudF07CiAgZXh0cmFOb2RlWyRnZXRTdWJmb3JtUGFyZW50XSA9ICgpID0+IG5vZGU7CiAgcm9vdFskZXh0cmFdLm5vTGF5b3V0RmFpbHVyZSA9IHRydWU7CiAgY29uc3QgcmVzID0gZXh0cmFOb2RlWyR0b0hUTUxdKHNwYWNlKTsKICBub2RlWyRhZGRIVE1MXShyZXMuaHRtbCwgcmVzLmJib3gpOwogIHJvb3RbJGV4dHJhXS5ub0xheW91dEZhaWx1cmUgPSBzYXZlZDsKICBleHRyYU5vZGVbJGdldFN1YmZvcm1QYXJlbnRdID0gc2F2ZWRNZXRob2Q7Cn0KY2xhc3MgQXBwZWFyYW5jZUZpbHRlciBleHRlbmRzIFN0cmluZ09iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJhcHBlYXJhbmNlRmlsdGVyIik7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMudHlwZSA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLnR5cGUsIFsib3B0aW9uYWwiLCAicmVxdWlyZWQiXSk7CiAgICB0aGlzLnVzZSA9IGF0dHJpYnV0ZXMudXNlIHx8ICIiOwogICAgdGhpcy51c2VocmVmID0gYXR0cmlidXRlcy51c2VocmVmIHx8ICIiOwogIH0KfQpjbGFzcyBBcmMgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKFRFTVBMQVRFX05TX0lELCAiYXJjIiwgdHJ1ZSk7CiAgICB0aGlzLmNpcmN1bGFyID0gZ2V0SW50ZWdlcih7CiAgICAgIGRhdGE6IGF0dHJpYnV0ZXMuY2lyY3VsYXIsCiAgICAgIGRlZmF1bHRWYWx1ZTogMCwKICAgICAgdmFsaWRhdGU6IHggPT4geCA9PT0gMQogICAgfSk7CiAgICB0aGlzLmhhbmQgPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy5oYW5kLCBbImV2ZW4iLCAibGVmdCIsICJyaWdodCJdKTsKICAgIHRoaXMuaWQgPSBhdHRyaWJ1dGVzLmlkIHx8ICIiOwogICAgdGhpcy5zdGFydEFuZ2xlID0gZ2V0RmxvYXQoewogICAgICBkYXRhOiBhdHRyaWJ1dGVzLnN0YXJ0QW5nbGUsCiAgICAgIGRlZmF1bHRWYWx1ZTogMCwKICAgICAgdmFsaWRhdGU6IHggPT4gdHJ1ZQogICAgfSk7CiAgICB0aGlzLnN3ZWVwQW5nbGUgPSBnZXRGbG9hdCh7CiAgICAgIGRhdGE6IGF0dHJpYnV0ZXMuc3dlZXBBbmdsZSwKICAgICAgZGVmYXVsdFZhbHVlOiAzNjAsCiAgICAgIHZhbGlkYXRlOiB4ID0+IHRydWUKICAgIH0pOwogICAgdGhpcy51c2UgPSBhdHRyaWJ1dGVzLnVzZSB8fCAiIjsKICAgIHRoaXMudXNlaHJlZiA9IGF0dHJpYnV0ZXMudXNlaHJlZiB8fCAiIjsKICAgIHRoaXMuZWRnZSA9IG51bGw7CiAgICB0aGlzLmZpbGwgPSBudWxsOwogIH0KICBbJHRvSFRNTF0oKSB7CiAgICBjb25zdCBlZGdlID0gdGhpcy5lZGdlIHx8IG5ldyBFZGdlKHt9KTsKICAgIGNvbnN0IGVkZ2VTdHlsZSA9IGVkZ2VbJHRvU3R5bGVdKCk7CiAgICBjb25zdCBzdHlsZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgICBpZiAodGhpcy5maWxsPy5wcmVzZW5jZSA9PT0gInZpc2libGUiKSB7CiAgICAgIE9iamVjdC5hc3NpZ24oc3R5bGUsIHRoaXMuZmlsbFskdG9TdHlsZV0oKSk7CiAgICB9IGVsc2UgewogICAgICBzdHlsZS5maWxsID0gInRyYW5zcGFyZW50IjsKICAgIH0KICAgIHN0eWxlLnN0cm9rZVdpZHRoID0gbWVhc3VyZVRvU3RyaW5nKGVkZ2UucHJlc2VuY2UgPT09ICJ2aXNpYmxlIiA/IGVkZ2UudGhpY2tuZXNzIDogMCk7CiAgICBzdHlsZS5zdHJva2UgPSBlZGdlU3R5bGUuY29sb3I7CiAgICBsZXQgYXJjOwogICAgY29uc3QgYXR0cmlidXRlcyA9IHsKICAgICAgeG1sbnM6IFNWR19OUywKICAgICAgc3R5bGU6IHsKICAgICAgICB3aWR0aDogIjEwMCUiLAogICAgICAgIGhlaWdodDogIjEwMCUiLAogICAgICAgIG92ZXJmbG93OiAidmlzaWJsZSIKICAgICAgfQogICAgfTsKICAgIGlmICh0aGlzLnN3ZWVwQW5nbGUgPT09IDM2MCkgewogICAgICBhcmMgPSB7CiAgICAgICAgbmFtZTogImVsbGlwc2UiLAogICAgICAgIGF0dHJpYnV0ZXM6IHsKICAgICAgICAgIHhtbG5zOiBTVkdfTlMsCiAgICAgICAgICBjeDogIjUwJSIsCiAgICAgICAgICBjeTogIjUwJSIsCiAgICAgICAgICByeDogIjUwJSIsCiAgICAgICAgICByeTogIjUwJSIsCiAgICAgICAgICBzdHlsZQogICAgICAgIH0KICAgICAgfTsKICAgIH0gZWxzZSB7CiAgICAgIGNvbnN0IHN0YXJ0QW5nbGUgPSB0aGlzLnN0YXJ0QW5nbGUgKiBNYXRoLlBJIC8gMTgwOwogICAgICBjb25zdCBzd2VlcEFuZ2xlID0gdGhpcy5zd2VlcEFuZ2xlICogTWF0aC5QSSAvIDE4MDsKICAgICAgY29uc3QgbGFyZ2VBcmMgPSB0aGlzLnN3ZWVwQW5nbGUgPiAxODAgPyAxIDogMDsKICAgICAgY29uc3QgW3gxLCB5MSwgeDIsIHkyXSA9IFs1MCAqICgxICsgTWF0aC5jb3Moc3RhcnRBbmdsZSkpLCA1MCAqICgxIC0gTWF0aC5zaW4oc3RhcnRBbmdsZSkpLCA1MCAqICgxICsgTWF0aC5jb3Moc3RhcnRBbmdsZSArIHN3ZWVwQW5nbGUpKSwgNTAgKiAoMSAtIE1hdGguc2luKHN0YXJ0QW5nbGUgKyBzd2VlcEFuZ2xlKSldOwogICAgICBhcmMgPSB7CiAgICAgICAgbmFtZTogInBhdGgiLAogICAgICAgIGF0dHJpYnV0ZXM6IHsKICAgICAgICAgIHhtbG5zOiBTVkdfTlMsCiAgICAgICAgICBkOiBgTSAke3gxfSAke3kxfSBBIDUwIDUwIDAgJHtsYXJnZUFyY30gMCAke3gyfSAke3kyfWAsCiAgICAgICAgICB2ZWN0b3JFZmZlY3Q6ICJub24tc2NhbGluZy1zdHJva2UiLAogICAgICAgICAgc3R5bGUKICAgICAgICB9CiAgICAgIH07CiAgICAgIE9iamVjdC5hc3NpZ24oYXR0cmlidXRlcywgewogICAgICAgIHZpZXdCb3g6ICIwIDAgMTAwIDEwMCIsCiAgICAgICAgcHJlc2VydmVBc3BlY3RSYXRpbzogIm5vbmUiCiAgICAgIH0pOwogICAgfQogICAgY29uc3Qgc3ZnID0gewogICAgICBuYW1lOiAic3ZnIiwKICAgICAgY2hpbGRyZW46IFthcmNdLAogICAgICBhdHRyaWJ1dGVzCiAgICB9OwogICAgY29uc3QgcGFyZW50ID0gdGhpc1skZ2V0UGFyZW50XSgpWyRnZXRQYXJlbnRdKCk7CiAgICBpZiAoaGFzTWFyZ2luKHBhcmVudCkpIHsKICAgICAgcmV0dXJuIEhUTUxSZXN1bHQuc3VjY2Vzcyh7CiAgICAgICAgbmFtZTogImRpdiIsCiAgICAgICAgYXR0cmlidXRlczogewogICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgZGlzcGxheTogImlubGluZSIsCiAgICAgICAgICAgIHdpZHRoOiAiMTAwJSIsCiAgICAgICAgICAgIGhlaWdodDogIjEwMCUiCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBjaGlsZHJlbjogW3N2Z10KICAgICAgfSk7CiAgICB9CiAgICBzdmcuYXR0cmlidXRlcy5zdHlsZS5wb3NpdGlvbiA9ICJhYnNvbHV0ZSI7CiAgICByZXR1cm4gSFRNTFJlc3VsdC5zdWNjZXNzKHN2Zyk7CiAgfQp9CmNsYXNzIEFyZWEgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKFRFTVBMQVRFX05TX0lELCAiYXJlYSIsIHRydWUpOwogICAgdGhpcy5jb2xTcGFuID0gZ2V0SW50ZWdlcih7CiAgICAgIGRhdGE6IGF0dHJpYnV0ZXMuY29sU3BhbiwKICAgICAgZGVmYXVsdFZhbHVlOiAxLAogICAgICB2YWxpZGF0ZTogbiA9PiBuID49IDEgfHwgbiA9PT0gLTEKICAgIH0pOwogICAgdGhpcy5pZCA9IGF0dHJpYnV0ZXMuaWQgfHwgIiI7CiAgICB0aGlzLm5hbWUgPSBhdHRyaWJ1dGVzLm5hbWUgfHwgIiI7CiAgICB0aGlzLnJlbGV2YW50ID0gZ2V0UmVsZXZhbnQoYXR0cmlidXRlcy5yZWxldmFudCk7CiAgICB0aGlzLnVzZSA9IGF0dHJpYnV0ZXMudXNlIHx8ICIiOwogICAgdGhpcy51c2VocmVmID0gYXR0cmlidXRlcy51c2VocmVmIHx8ICIiOwogICAgdGhpcy54ID0gZ2V0TWVhc3VyZW1lbnQoYXR0cmlidXRlcy54LCAiMHB0Iik7CiAgICB0aGlzLnkgPSBnZXRNZWFzdXJlbWVudChhdHRyaWJ1dGVzLnksICIwcHQiKTsKICAgIHRoaXMuZGVzYyA9IG51bGw7CiAgICB0aGlzLmV4dHJhcyA9IG51bGw7CiAgICB0aGlzLmFyZWEgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuZHJhdyA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5leE9iamVjdCA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5leGNsR3JvdXAgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuZmllbGQgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuc3ViZm9ybSA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5zdWJmb3JtU2V0ID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgfQogICpbJGdldENvbnRhaW5lZENoaWxkcmVuXSgpIHsKICAgIHlpZWxkKiBnZXRDb250YWluZWRDaGlsZHJlbih0aGlzKTsKICB9CiAgWyRpc1RyYW5zcGFyZW50XSgpIHsKICAgIHJldHVybiB0cnVlOwogIH0KICBbJGlzQmluZGFibGVdKCkgewogICAgcmV0dXJuIHRydWU7CiAgfQogIFskYWRkSFRNTF0oaHRtbCwgYmJveCkgewogICAgY29uc3QgW3gsIHksIHcsIGhdID0gYmJveDsKICAgIHRoaXNbJGV4dHJhXS53aWR0aCA9IE1hdGgubWF4KHRoaXNbJGV4dHJhXS53aWR0aCwgeCArIHcpOwogICAgdGhpc1skZXh0cmFdLmhlaWdodCA9IE1hdGgubWF4KHRoaXNbJGV4dHJhXS5oZWlnaHQsIHkgKyBoKTsKICAgIHRoaXNbJGV4dHJhXS5jaGlsZHJlbi5wdXNoKGh0bWwpOwogIH0KICBbJGdldEF2YWlsYWJsZVNwYWNlXSgpIHsKICAgIHJldHVybiB0aGlzWyRleHRyYV0uYXZhaWxhYmxlU3BhY2U7CiAgfQogIFskdG9IVE1MXShhdmFpbGFibGVTcGFjZSkgewogICAgY29uc3Qgc3R5bGUgPSB0b1N0eWxlKHRoaXMsICJwb3NpdGlvbiIpOwogICAgY29uc3QgYXR0cmlidXRlcyA9IHsKICAgICAgc3R5bGUsCiAgICAgIGlkOiB0aGlzWyR1aWRdLAogICAgICBjbGFzczogWyJ4ZmFBcmVhIl0KICAgIH07CiAgICBpZiAoaXNQcmludE9ubHkodGhpcykpIHsKICAgICAgYXR0cmlidXRlcy5jbGFzcy5wdXNoKCJ4ZmFQcmludE9ubHkiKTsKICAgIH0KICAgIGlmICh0aGlzLm5hbWUpIHsKICAgICAgYXR0cmlidXRlcy54ZmFOYW1lID0gdGhpcy5uYW1lOwogICAgfQogICAgY29uc3QgY2hpbGRyZW4gPSBbXTsKICAgIHRoaXNbJGV4dHJhXSA9IHsKICAgICAgY2hpbGRyZW4sCiAgICAgIHdpZHRoOiAwLAogICAgICBoZWlnaHQ6IDAsCiAgICAgIGF2YWlsYWJsZVNwYWNlCiAgICB9OwogICAgY29uc3QgcmVzdWx0ID0gdGhpc1skY2hpbGRyZW5Ub0hUTUxdKHsKICAgICAgZmlsdGVyOiBuZXcgU2V0KFsiYXJlYSIsICJkcmF3IiwgImZpZWxkIiwgImV4Y2xHcm91cCIsICJzdWJmb3JtIiwgInN1YmZvcm1TZXQiXSksCiAgICAgIGluY2x1ZGU6IHRydWUKICAgIH0pOwogICAgaWYgKCFyZXN1bHQuc3VjY2VzcykgewogICAgICBpZiAocmVzdWx0LmlzQnJlYWsoKSkgewogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH0KICAgICAgZGVsZXRlIHRoaXNbJGV4dHJhXTsKICAgICAgcmV0dXJuIEhUTUxSZXN1bHQuRkFJTFVSRTsKICAgIH0KICAgIHN0eWxlLndpZHRoID0gbWVhc3VyZVRvU3RyaW5nKHRoaXNbJGV4dHJhXS53aWR0aCk7CiAgICBzdHlsZS5oZWlnaHQgPSBtZWFzdXJlVG9TdHJpbmcodGhpc1skZXh0cmFdLmhlaWdodCk7CiAgICBjb25zdCBodG1sID0gewogICAgICBuYW1lOiAiZGl2IiwKICAgICAgYXR0cmlidXRlcywKICAgICAgY2hpbGRyZW4KICAgIH07CiAgICBjb25zdCBiYm94ID0gW3RoaXMueCwgdGhpcy55LCB0aGlzWyRleHRyYV0ud2lkdGgsIHRoaXNbJGV4dHJhXS5oZWlnaHRdOwogICAgZGVsZXRlIHRoaXNbJGV4dHJhXTsKICAgIHJldHVybiBIVE1MUmVzdWx0LnN1Y2Nlc3MoaHRtbCwgYmJveCk7CiAgfQp9CmNsYXNzIEFzc2lzdCBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJhc3Npc3QiLCB0cnVlKTsKICAgIHRoaXMuaWQgPSBhdHRyaWJ1dGVzLmlkIHx8ICIiOwogICAgdGhpcy5yb2xlID0gYXR0cmlidXRlcy5yb2xlIHx8ICIiOwogICAgdGhpcy51c2UgPSBhdHRyaWJ1dGVzLnVzZSB8fCAiIjsKICAgIHRoaXMudXNlaHJlZiA9IGF0dHJpYnV0ZXMudXNlaHJlZiB8fCAiIjsKICAgIHRoaXMuc3BlYWsgPSBudWxsOwogICAgdGhpcy50b29sVGlwID0gbnVsbDsKICB9CiAgWyR0b0hUTUxdKCkgewogICAgcmV0dXJuIHRoaXMudG9vbFRpcD8uWyRjb250ZW50XSB8fCBudWxsOwogIH0KfQpjbGFzcyBCYXJjb2RlIGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihURU1QTEFURV9OU19JRCwgImJhcmNvZGUiLCB0cnVlKTsKICAgIHRoaXMuY2hhckVuY29kaW5nID0gZ2V0S2V5d29yZCh7CiAgICAgIGRhdGE6IGF0dHJpYnV0ZXMuY2hhckVuY29kaW5nID8gYXR0cmlidXRlcy5jaGFyRW5jb2RpbmcudG9Mb3dlckNhc2UoKSA6ICIiLAogICAgICBkZWZhdWx0VmFsdWU6ICIiLAogICAgICB2YWxpZGF0ZTogayA9PiBbInV0Zi04IiwgImJpZy1maXZlIiwgImZvbnRzcGVjaWZpYyIsICJnYmsiLCAiZ2ItMTgwMzAiLCAiZ2ItMjMxMiIsICJrc2MtNTYwMSIsICJub25lIiwgInNoaWZ0LWppcyIsICJ1Y3MtMiIsICJ1dGYtMTYiXS5pbmNsdWRlcyhrKSB8fCBrLm1hdGNoKC9pc28tODg1OS1cZHsyfS8pCiAgICB9KTsKICAgIHRoaXMuY2hlY2tzdW0gPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy5jaGVja3N1bSwgWyJub25lIiwgIjFtb2QxMCIsICIxbW9kMTBfMW1vZDExIiwgIjJtb2QxMCIsICJhdXRvIl0pOwogICAgdGhpcy5kYXRhQ29sdW1uQ291bnQgPSBnZXRJbnRlZ2VyKHsKICAgICAgZGF0YTogYXR0cmlidXRlcy5kYXRhQ29sdW1uQ291bnQsCiAgICAgIGRlZmF1bHRWYWx1ZTogLTEsCiAgICAgIHZhbGlkYXRlOiB4ID0+IHggPj0gMAogICAgfSk7CiAgICB0aGlzLmRhdGFMZW5ndGggPSBnZXRJbnRlZ2VyKHsKICAgICAgZGF0YTogYXR0cmlidXRlcy5kYXRhTGVuZ3RoLAogICAgICBkZWZhdWx0VmFsdWU6IC0xLAogICAgICB2YWxpZGF0ZTogeCA9PiB4ID49IDAKICAgIH0pOwogICAgdGhpcy5kYXRhUHJlcCA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLmRhdGFQcmVwLCBbIm5vbmUiLCAiZmxhdGVDb21wcmVzcyJdKTsKICAgIHRoaXMuZGF0YVJvd0NvdW50ID0gZ2V0SW50ZWdlcih7CiAgICAgIGRhdGE6IGF0dHJpYnV0ZXMuZGF0YVJvd0NvdW50LAogICAgICBkZWZhdWx0VmFsdWU6IC0xLAogICAgICB2YWxpZGF0ZTogeCA9PiB4ID49IDAKICAgIH0pOwogICAgdGhpcy5lbmRDaGFyID0gYXR0cmlidXRlcy5lbmRDaGFyIHx8ICIiOwogICAgdGhpcy5lcnJvckNvcnJlY3Rpb25MZXZlbCA9IGdldEludGVnZXIoewogICAgICBkYXRhOiBhdHRyaWJ1dGVzLmVycm9yQ29ycmVjdGlvbkxldmVsLAogICAgICBkZWZhdWx0VmFsdWU6IC0xLAogICAgICB2YWxpZGF0ZTogeCA9PiB4ID49IDAgJiYgeCA8PSA4CiAgICB9KTsKICAgIHRoaXMuaWQgPSBhdHRyaWJ1dGVzLmlkIHx8ICIiOwogICAgdGhpcy5tb2R1bGVIZWlnaHQgPSBnZXRNZWFzdXJlbWVudChhdHRyaWJ1dGVzLm1vZHVsZUhlaWdodCwgIjVtbSIpOwogICAgdGhpcy5tb2R1bGVXaWR0aCA9IGdldE1lYXN1cmVtZW50KGF0dHJpYnV0ZXMubW9kdWxlV2lkdGgsICIwLjI1bW0iKTsKICAgIHRoaXMucHJpbnRDaGVja0RpZ2l0ID0gZ2V0SW50ZWdlcih7CiAgICAgIGRhdGE6IGF0dHJpYnV0ZXMucHJpbnRDaGVja0RpZ2l0LAogICAgICBkZWZhdWx0VmFsdWU6IDAsCiAgICAgIHZhbGlkYXRlOiB4ID0+IHggPT09IDEKICAgIH0pOwogICAgdGhpcy5yb3dDb2x1bW5SYXRpbyA9IGdldFJhdGlvKGF0dHJpYnV0ZXMucm93Q29sdW1uUmF0aW8pOwogICAgdGhpcy5zdGFydENoYXIgPSBhdHRyaWJ1dGVzLnN0YXJ0Q2hhciB8fCAiIjsKICAgIHRoaXMudGV4dExvY2F0aW9uID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMudGV4dExvY2F0aW9uLCBbImJlbG93IiwgImFib3ZlIiwgImFib3ZlRW1iZWRkZWQiLCAiYmVsb3dFbWJlZGRlZCIsICJub25lIl0pOwogICAgdGhpcy50cnVuY2F0ZSA9IGdldEludGVnZXIoewogICAgICBkYXRhOiBhdHRyaWJ1dGVzLnRydW5jYXRlLAogICAgICBkZWZhdWx0VmFsdWU6IDAsCiAgICAgIHZhbGlkYXRlOiB4ID0+IHggPT09IDEKICAgIH0pOwogICAgdGhpcy50eXBlID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMudHlwZSA/IGF0dHJpYnV0ZXMudHlwZS50b0xvd2VyQ2FzZSgpIDogIiIsIFsiYXp0ZWMiLCAiY29kYWJhciIsICJjb2RlMm9mNWluZHVzdHJpYWwiLCAiY29kZTJvZjVpbnRlcmxlYXZlZCIsICJjb2RlMm9mNW1hdHJpeCIsICJjb2RlMm9mNXN0YW5kYXJkIiwgImNvZGUzb2Y5IiwgImNvZGUzb2Y5ZXh0ZW5kZWQiLCAiY29kZTExIiwgImNvZGU0OSIsICJjb2RlOTMiLCAiY29kZTEyOCIsICJjb2RlMTI4YSIsICJjb2RlMTI4YiIsICJjb2RlMTI4YyIsICJjb2RlMTI4c3NjYyIsICJkYXRhbWF0cml4IiwgImVhbjgiLCAiZWFuOGFkZDIiLCAiZWFuOGFkZDUiLCAiZWFuMTMiLCAiZWFuMTNhZGQyIiwgImVhbjEzYWRkNSIsICJlYW4xM3B3Y2QiLCAiZmltIiwgImxvZ21hcnMiLCAibWF4aWNvZGUiLCAibXNpIiwgInBkZjQxNyIsICJwZGY0MTdtYWNybyIsICJwbGVzc2V5IiwgInBvc3RhdXNjdXN0MiIsICJwb3N0YXVzY3VzdDMiLCAicG9zdGF1c3JlcGx5cGFpZCIsICJwb3N0YXVzc3RhbmRhcmQiLCAicG9zdHVrcm00c2NjIiwgInBvc3R1c2RwYmMiLCAicG9zdHVzaW1iIiwgInBvc3R1c3N0YW5kYXJkIiwgInBvc3R1czV6aXAiLCAicXJjb2RlIiwgInJmaWQiLCAicnNzMTQiLCAicnNzMTRleHBhbmRlZCIsICJyc3MxNGxpbWl0ZWQiLCAicnNzMTRzdGFja2VkIiwgInJzczE0c3RhY2tlZG9tbmkiLCAicnNzMTR0cnVuY2F0ZWQiLCAidGVsZXBlbiIsICJ1Y2MxMjgiLCAidWNjMTI4cmFuZG9tIiwgInVjYzEyOHNzY2MiLCAidXBjYSIsICJ1cGNhYWRkMiIsICJ1cGNhYWRkNSIsICJ1cGNhcHdjZCIsICJ1cGNlIiwgInVwY2VhZGQyIiwgInVwY2VhZGQ1IiwgInVwY2VhbjIiLCAidXBjZWFuNSIsICJ1cHNtYXhpY29kZSJdKTsKICAgIHRoaXMudXBzTW9kZSA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLnVwc01vZGUsIFsidXNDYXJyaWVyIiwgImludGVybmF0aW9uYWxDYXJyaWVyIiwgInNlY3VyZVN5bWJvbCIsICJzdGFuZGFyZFN5bWJvbCJdKTsKICAgIHRoaXMudXNlID0gYXR0cmlidXRlcy51c2UgfHwgIiI7CiAgICB0aGlzLnVzZWhyZWYgPSBhdHRyaWJ1dGVzLnVzZWhyZWYgfHwgIiI7CiAgICB0aGlzLndpZGVOYXJyb3dSYXRpbyA9IGdldFJhdGlvKGF0dHJpYnV0ZXMud2lkZU5hcnJvd1JhdGlvKTsKICAgIHRoaXMuZW5jcnlwdCA9IG51bGw7CiAgICB0aGlzLmV4dHJhcyA9IG51bGw7CiAgfQp9CmNsYXNzIEJpbmQgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKFRFTVBMQVRFX05TX0lELCAiYmluZCIsIHRydWUpOwogICAgdGhpcy5tYXRjaCA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLm1hdGNoLCBbIm9uY2UiLCAiZGF0YVJlZiIsICJnbG9iYWwiLCAibm9uZSJdKTsKICAgIHRoaXMucmVmID0gYXR0cmlidXRlcy5yZWYgfHwgIiI7CiAgICB0aGlzLnBpY3R1cmUgPSBudWxsOwogIH0KfQpjbGFzcyBCaW5kSXRlbXMgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKFRFTVBMQVRFX05TX0lELCAiYmluZEl0ZW1zIik7CiAgICB0aGlzLmNvbm5lY3Rpb24gPSBhdHRyaWJ1dGVzLmNvbm5lY3Rpb24gfHwgIiI7CiAgICB0aGlzLmxhYmVsUmVmID0gYXR0cmlidXRlcy5sYWJlbFJlZiB8fCAiIjsKICAgIHRoaXMucmVmID0gYXR0cmlidXRlcy5yZWYgfHwgIiI7CiAgICB0aGlzLnZhbHVlUmVmID0gYXR0cmlidXRlcy52YWx1ZVJlZiB8fCAiIjsKICB9Cn0KY2xhc3MgQm9va2VuZCBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJib29rZW5kIik7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMubGVhZGVyID0gYXR0cmlidXRlcy5sZWFkZXIgfHwgIiI7CiAgICB0aGlzLnRyYWlsZXIgPSBhdHRyaWJ1dGVzLnRyYWlsZXIgfHwgIiI7CiAgICB0aGlzLnVzZSA9IGF0dHJpYnV0ZXMudXNlIHx8ICIiOwogICAgdGhpcy51c2VocmVmID0gYXR0cmlidXRlcy51c2VocmVmIHx8ICIiOwogIH0KfQpjbGFzcyBCb29sZWFuRWxlbWVudCBleHRlbmRzIE9wdGlvbjAxIHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihURU1QTEFURV9OU19JRCwgImJvb2xlYW4iKTsKICAgIHRoaXMuaWQgPSBhdHRyaWJ1dGVzLmlkIHx8ICIiOwogICAgdGhpcy5uYW1lID0gYXR0cmlidXRlcy5uYW1lIHx8ICIiOwogICAgdGhpcy51c2UgPSBhdHRyaWJ1dGVzLnVzZSB8fCAiIjsKICAgIHRoaXMudXNlaHJlZiA9IGF0dHJpYnV0ZXMudXNlaHJlZiB8fCAiIjsKICB9CiAgWyR0b0hUTUxdKGF2YWlsYWJsZVNwYWNlKSB7CiAgICByZXR1cm4gdmFsdWVUb0h0bWwodGhpc1skY29udGVudF0gPT09IDEgPyAiMSIgOiAiMCIpOwogIH0KfQpjbGFzcyBCb3JkZXIgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKFRFTVBMQVRFX05TX0lELCAiYm9yZGVyIiwgdHJ1ZSk7CiAgICB0aGlzLmJyZWFrID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMuYnJlYWssIFsiY2xvc2UiLCAib3BlbiJdKTsKICAgIHRoaXMuaGFuZCA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLmhhbmQsIFsiZXZlbiIsICJsZWZ0IiwgInJpZ2h0Il0pOwogICAgdGhpcy5pZCA9IGF0dHJpYnV0ZXMuaWQgfHwgIiI7CiAgICB0aGlzLnByZXNlbmNlID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMucHJlc2VuY2UsIFsidmlzaWJsZSIsICJoaWRkZW4iLCAiaW5hY3RpdmUiLCAiaW52aXNpYmxlIl0pOwogICAgdGhpcy5yZWxldmFudCA9IGdldFJlbGV2YW50KGF0dHJpYnV0ZXMucmVsZXZhbnQpOwogICAgdGhpcy51c2UgPSBhdHRyaWJ1dGVzLnVzZSB8fCAiIjsKICAgIHRoaXMudXNlaHJlZiA9IGF0dHJpYnV0ZXMudXNlaHJlZiB8fCAiIjsKICAgIHRoaXMuY29ybmVyID0gbmV3IFhGQU9iamVjdEFycmF5KDQpOwogICAgdGhpcy5lZGdlID0gbmV3IFhGQU9iamVjdEFycmF5KDQpOwogICAgdGhpcy5leHRyYXMgPSBudWxsOwogICAgdGhpcy5maWxsID0gbnVsbDsKICAgIHRoaXMubWFyZ2luID0gbnVsbDsKICB9CiAgWyRnZXRFeHRyYV0oKSB7CiAgICBpZiAoIXRoaXNbJGV4dHJhXSkgewogICAgICBjb25zdCBlZGdlcyA9IHRoaXMuZWRnZS5jaGlsZHJlbi5zbGljZSgpOwogICAgICBpZiAoZWRnZXMubGVuZ3RoIDwgNCkgewogICAgICAgIGNvbnN0IGRlZmF1bHRFZGdlID0gZWRnZXMuYXQoLTEpIHx8IG5ldyBFZGdlKHt9KTsKICAgICAgICBmb3IgKGxldCBpID0gZWRnZXMubGVuZ3RoOyBpIDwgNDsgaSsrKSB7CiAgICAgICAgICBlZGdlcy5wdXNoKGRlZmF1bHRFZGdlKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgY29uc3Qgd2lkdGhzID0gZWRnZXMubWFwKGVkZ2UgPT4gZWRnZS50aGlja25lc3MpOwogICAgICBjb25zdCBpbnNldHMgPSBbMCwgMCwgMCwgMF07CiAgICAgIGlmICh0aGlzLm1hcmdpbikgewogICAgICAgIGluc2V0c1swXSA9IHRoaXMubWFyZ2luLnRvcEluc2V0OwogICAgICAgIGluc2V0c1sxXSA9IHRoaXMubWFyZ2luLnJpZ2h0SW5zZXQ7CiAgICAgICAgaW5zZXRzWzJdID0gdGhpcy5tYXJnaW4uYm90dG9tSW5zZXQ7CiAgICAgICAgaW5zZXRzWzNdID0gdGhpcy5tYXJnaW4ubGVmdEluc2V0OwogICAgICB9CiAgICAgIHRoaXNbJGV4dHJhXSA9IHsKICAgICAgICB3aWR0aHMsCiAgICAgICAgaW5zZXRzLAogICAgICAgIGVkZ2VzCiAgICAgIH07CiAgICB9CiAgICByZXR1cm4gdGhpc1skZXh0cmFdOwogIH0KICBbJHRvU3R5bGVdKCkgewogICAgY29uc3QgewogICAgICBlZGdlcwogICAgfSA9IHRoaXNbJGdldEV4dHJhXSgpOwogICAgY29uc3QgZWRnZVN0eWxlcyA9IGVkZ2VzLm1hcChub2RlID0+IHsKICAgICAgY29uc3Qgc3R5bGUgPSBub2RlWyR0b1N0eWxlXSgpOwogICAgICBzdHlsZS5jb2xvciB8fD0gIiMwMDAwMDAiOwogICAgICByZXR1cm4gc3R5bGU7CiAgICB9KTsKICAgIGNvbnN0IHN0eWxlID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgIGlmICh0aGlzLm1hcmdpbikgewogICAgICBPYmplY3QuYXNzaWduKHN0eWxlLCB0aGlzLm1hcmdpblskdG9TdHlsZV0oKSk7CiAgICB9CiAgICBpZiAodGhpcy5maWxsPy5wcmVzZW5jZSA9PT0gInZpc2libGUiKSB7CiAgICAgIE9iamVjdC5hc3NpZ24oc3R5bGUsIHRoaXMuZmlsbFskdG9TdHlsZV0oKSk7CiAgICB9CiAgICBpZiAodGhpcy5jb3JuZXIuY2hpbGRyZW4uc29tZShub2RlID0+IG5vZGUucmFkaXVzICE9PSAwKSkgewogICAgICBjb25zdCBjb3JuZXJTdHlsZXMgPSB0aGlzLmNvcm5lci5jaGlsZHJlbi5tYXAobm9kZSA9PiBub2RlWyR0b1N0eWxlXSgpKTsKICAgICAgaWYgKGNvcm5lclN0eWxlcy5sZW5ndGggPT09IDIgfHwgY29ybmVyU3R5bGVzLmxlbmd0aCA9PT0gMykgewogICAgICAgIGNvbnN0IGxhc3QgPSBjb3JuZXJTdHlsZXMuYXQoLTEpOwogICAgICAgIGZvciAobGV0IGkgPSBjb3JuZXJTdHlsZXMubGVuZ3RoOyBpIDwgNDsgaSsrKSB7CiAgICAgICAgICBjb3JuZXJTdHlsZXMucHVzaChsYXN0KTsKICAgICAgICB9CiAgICAgIH0KICAgICAgc3R5bGUuYm9yZGVyUmFkaXVzID0gY29ybmVyU3R5bGVzLm1hcChzID0+IHMucmFkaXVzKS5qb2luKCIgIik7CiAgICB9CiAgICBzd2l0Y2ggKHRoaXMucHJlc2VuY2UpIHsKICAgICAgY2FzZSAiaW52aXNpYmxlIjoKICAgICAgY2FzZSAiaGlkZGVuIjoKICAgICAgICBzdHlsZS5ib3JkZXJTdHlsZSA9ICIiOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlICJpbmFjdGl2ZSI6CiAgICAgICAgc3R5bGUuYm9yZGVyU3R5bGUgPSAibm9uZSI7CiAgICAgICAgYnJlYWs7CiAgICAgIGRlZmF1bHQ6CiAgICAgICAgc3R5bGUuYm9yZGVyU3R5bGUgPSBlZGdlU3R5bGVzLm1hcChzID0+IHMuc3R5bGUpLmpvaW4oIiAiKTsKICAgICAgICBicmVhazsKICAgIH0KICAgIHN0eWxlLmJvcmRlcldpZHRoID0gZWRnZVN0eWxlcy5tYXAocyA9PiBzLndpZHRoKS5qb2luKCIgIik7CiAgICBzdHlsZS5ib3JkZXJDb2xvciA9IGVkZ2VTdHlsZXMubWFwKHMgPT4gcy5jb2xvcikuam9pbigiICIpOwogICAgcmV0dXJuIHN0eWxlOwogIH0KfQpjbGFzcyBCcmVhayBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJicmVhayIsIHRydWUpOwogICAgdGhpcy5hZnRlciA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLmFmdGVyLCBbImF1dG8iLCAiY29udGVudEFyZWEiLCAicGFnZUFyZWEiLCAicGFnZUV2ZW4iLCAicGFnZU9kZCJdKTsKICAgIHRoaXMuYWZ0ZXJUYXJnZXQgPSBhdHRyaWJ1dGVzLmFmdGVyVGFyZ2V0IHx8ICIiOwogICAgdGhpcy5iZWZvcmUgPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy5iZWZvcmUsIFsiYXV0byIsICJjb250ZW50QXJlYSIsICJwYWdlQXJlYSIsICJwYWdlRXZlbiIsICJwYWdlT2RkIl0pOwogICAgdGhpcy5iZWZvcmVUYXJnZXQgPSBhdHRyaWJ1dGVzLmJlZm9yZVRhcmdldCB8fCAiIjsKICAgIHRoaXMuYm9va2VuZExlYWRlciA9IGF0dHJpYnV0ZXMuYm9va2VuZExlYWRlciB8fCAiIjsKICAgIHRoaXMuYm9va2VuZFRyYWlsZXIgPSBhdHRyaWJ1dGVzLmJvb2tlbmRUcmFpbGVyIHx8ICIiOwogICAgdGhpcy5pZCA9IGF0dHJpYnV0ZXMuaWQgfHwgIiI7CiAgICB0aGlzLm92ZXJmbG93TGVhZGVyID0gYXR0cmlidXRlcy5vdmVyZmxvd0xlYWRlciB8fCAiIjsKICAgIHRoaXMub3ZlcmZsb3dUYXJnZXQgPSBhdHRyaWJ1dGVzLm92ZXJmbG93VGFyZ2V0IHx8ICIiOwogICAgdGhpcy5vdmVyZmxvd1RyYWlsZXIgPSBhdHRyaWJ1dGVzLm92ZXJmbG93VHJhaWxlciB8fCAiIjsKICAgIHRoaXMuc3RhcnROZXcgPSBnZXRJbnRlZ2VyKHsKICAgICAgZGF0YTogYXR0cmlidXRlcy5zdGFydE5ldywKICAgICAgZGVmYXVsdFZhbHVlOiAwLAogICAgICB2YWxpZGF0ZTogeCA9PiB4ID09PSAxCiAgICB9KTsKICAgIHRoaXMudXNlID0gYXR0cmlidXRlcy51c2UgfHwgIiI7CiAgICB0aGlzLnVzZWhyZWYgPSBhdHRyaWJ1dGVzLnVzZWhyZWYgfHwgIiI7CiAgICB0aGlzLmV4dHJhcyA9IG51bGw7CiAgfQp9CmNsYXNzIEJyZWFrQWZ0ZXIgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKFRFTVBMQVRFX05TX0lELCAiYnJlYWtBZnRlciIsIHRydWUpOwogICAgdGhpcy5pZCA9IGF0dHJpYnV0ZXMuaWQgfHwgIiI7CiAgICB0aGlzLmxlYWRlciA9IGF0dHJpYnV0ZXMubGVhZGVyIHx8ICIiOwogICAgdGhpcy5zdGFydE5ldyA9IGdldEludGVnZXIoewogICAgICBkYXRhOiBhdHRyaWJ1dGVzLnN0YXJ0TmV3LAogICAgICBkZWZhdWx0VmFsdWU6IDAsCiAgICAgIHZhbGlkYXRlOiB4ID0+IHggPT09IDEKICAgIH0pOwogICAgdGhpcy50YXJnZXQgPSBhdHRyaWJ1dGVzLnRhcmdldCB8fCAiIjsKICAgIHRoaXMudGFyZ2V0VHlwZSA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLnRhcmdldFR5cGUsIFsiYXV0byIsICJjb250ZW50QXJlYSIsICJwYWdlQXJlYSJdKTsKICAgIHRoaXMudHJhaWxlciA9IGF0dHJpYnV0ZXMudHJhaWxlciB8fCAiIjsKICAgIHRoaXMudXNlID0gYXR0cmlidXRlcy51c2UgfHwgIiI7CiAgICB0aGlzLnVzZWhyZWYgPSBhdHRyaWJ1dGVzLnVzZWhyZWYgfHwgIiI7CiAgICB0aGlzLnNjcmlwdCA9IG51bGw7CiAgfQp9CmNsYXNzIEJyZWFrQmVmb3JlIGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihURU1QTEFURV9OU19JRCwgImJyZWFrQmVmb3JlIiwgdHJ1ZSk7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMubGVhZGVyID0gYXR0cmlidXRlcy5sZWFkZXIgfHwgIiI7CiAgICB0aGlzLnN0YXJ0TmV3ID0gZ2V0SW50ZWdlcih7CiAgICAgIGRhdGE6IGF0dHJpYnV0ZXMuc3RhcnROZXcsCiAgICAgIGRlZmF1bHRWYWx1ZTogMCwKICAgICAgdmFsaWRhdGU6IHggPT4geCA9PT0gMQogICAgfSk7CiAgICB0aGlzLnRhcmdldCA9IGF0dHJpYnV0ZXMudGFyZ2V0IHx8ICIiOwogICAgdGhpcy50YXJnZXRUeXBlID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMudGFyZ2V0VHlwZSwgWyJhdXRvIiwgImNvbnRlbnRBcmVhIiwgInBhZ2VBcmVhIl0pOwogICAgdGhpcy50cmFpbGVyID0gYXR0cmlidXRlcy50cmFpbGVyIHx8ICIiOwogICAgdGhpcy51c2UgPSBhdHRyaWJ1dGVzLnVzZSB8fCAiIjsKICAgIHRoaXMudXNlaHJlZiA9IGF0dHJpYnV0ZXMudXNlaHJlZiB8fCAiIjsKICAgIHRoaXMuc2NyaXB0ID0gbnVsbDsKICB9CiAgWyR0b0hUTUxdKGF2YWlsYWJsZVNwYWNlKSB7CiAgICB0aGlzWyRleHRyYV0gPSB7fTsKICAgIHJldHVybiBIVE1MUmVzdWx0LkZBSUxVUkU7CiAgfQp9CmNsYXNzIEJ1dHRvbiBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJidXR0b24iLCB0cnVlKTsKICAgIHRoaXMuaGlnaGxpZ2h0ID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMuaGlnaGxpZ2h0LCBbImludmVydGVkIiwgIm5vbmUiLCAib3V0bGluZSIsICJwdXNoIl0pOwogICAgdGhpcy5pZCA9IGF0dHJpYnV0ZXMuaWQgfHwgIiI7CiAgICB0aGlzLnVzZSA9IGF0dHJpYnV0ZXMudXNlIHx8ICIiOwogICAgdGhpcy51c2VocmVmID0gYXR0cmlidXRlcy51c2VocmVmIHx8ICIiOwogICAgdGhpcy5leHRyYXMgPSBudWxsOwogIH0KICBbJHRvSFRNTF0oYXZhaWxhYmxlU3BhY2UpIHsKICAgIGNvbnN0IHBhcmVudCA9IHRoaXNbJGdldFBhcmVudF0oKTsKICAgIGNvbnN0IGdyYW5kcGEgPSBwYXJlbnRbJGdldFBhcmVudF0oKTsKICAgIGNvbnN0IGh0bWxCdXR0b24gPSB7CiAgICAgIG5hbWU6ICJidXR0b24iLAogICAgICBhdHRyaWJ1dGVzOiB7CiAgICAgICAgaWQ6IHRoaXNbJHVpZF0sCiAgICAgICAgY2xhc3M6IFsieGZhQnV0dG9uIl0sCiAgICAgICAgc3R5bGU6IHt9CiAgICAgIH0sCiAgICAgIGNoaWxkcmVuOiBbXQogICAgfTsKICAgIGZvciAoY29uc3QgZXZlbnQgb2YgZ3JhbmRwYS5ldmVudC5jaGlsZHJlbikgewogICAgICBpZiAoZXZlbnQuYWN0aXZpdHkgIT09ICJjbGljayIgfHwgIWV2ZW50LnNjcmlwdCkgewogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGNvbnN0IGpzVVJMID0gcmVjb3ZlckpzVVJMKGV2ZW50LnNjcmlwdFskY29udGVudF0pOwogICAgICBpZiAoIWpzVVJMKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgY29uc3QgaHJlZiA9IGZpeFVSTChqc1VSTC51cmwpOwogICAgICBpZiAoIWhyZWYpIHsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBodG1sQnV0dG9uLmNoaWxkcmVuLnB1c2goewogICAgICAgIG5hbWU6ICJhIiwKICAgICAgICBhdHRyaWJ1dGVzOiB7CiAgICAgICAgICBpZDogImxpbmsiICsgdGhpc1skdWlkXSwKICAgICAgICAgIGhyZWYsCiAgICAgICAgICBuZXdXaW5kb3c6IGpzVVJMLm5ld1dpbmRvdywKICAgICAgICAgIGNsYXNzOiBbInhmYUxpbmsiXSwKICAgICAgICAgIHN0eWxlOiB7fQogICAgICAgIH0sCiAgICAgICAgY2hpbGRyZW46IFtdCiAgICAgIH0pOwogICAgfQogICAgcmV0dXJuIEhUTUxSZXN1bHQuc3VjY2VzcyhodG1sQnV0dG9uKTsKICB9Cn0KY2xhc3MgQ2FsY3VsYXRlIGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihURU1QTEFURV9OU19JRCwgImNhbGN1bGF0ZSIsIHRydWUpOwogICAgdGhpcy5pZCA9IGF0dHJpYnV0ZXMuaWQgfHwgIiI7CiAgICB0aGlzLm92ZXJyaWRlID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMub3ZlcnJpZGUsIFsiZGlzYWJsZWQiLCAiZXJyb3IiLCAiaWdub3JlIiwgIndhcm5pbmciXSk7CiAgICB0aGlzLnVzZSA9IGF0dHJpYnV0ZXMudXNlIHx8ICIiOwogICAgdGhpcy51c2VocmVmID0gYXR0cmlidXRlcy51c2VocmVmIHx8ICIiOwogICAgdGhpcy5leHRyYXMgPSBudWxsOwogICAgdGhpcy5tZXNzYWdlID0gbnVsbDsKICAgIHRoaXMuc2NyaXB0ID0gbnVsbDsKICB9Cn0KY2xhc3MgQ2FwdGlvbiBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJjYXB0aW9uIiwgdHJ1ZSk7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMucGxhY2VtZW50ID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMucGxhY2VtZW50LCBbImxlZnQiLCAiYm90dG9tIiwgImlubGluZSIsICJyaWdodCIsICJ0b3AiXSk7CiAgICB0aGlzLnByZXNlbmNlID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMucHJlc2VuY2UsIFsidmlzaWJsZSIsICJoaWRkZW4iLCAiaW5hY3RpdmUiLCAiaW52aXNpYmxlIl0pOwogICAgdGhpcy5yZXNlcnZlID0gTWF0aC5jZWlsKGdldE1lYXN1cmVtZW50KGF0dHJpYnV0ZXMucmVzZXJ2ZSkpOwogICAgdGhpcy51c2UgPSBhdHRyaWJ1dGVzLnVzZSB8fCAiIjsKICAgIHRoaXMudXNlaHJlZiA9IGF0dHJpYnV0ZXMudXNlaHJlZiB8fCAiIjsKICAgIHRoaXMuZXh0cmFzID0gbnVsbDsKICAgIHRoaXMuZm9udCA9IG51bGw7CiAgICB0aGlzLm1hcmdpbiA9IG51bGw7CiAgICB0aGlzLnBhcmEgPSBudWxsOwogICAgdGhpcy52YWx1ZSA9IG51bGw7CiAgfQogIFskc2V0VmFsdWVdKHZhbHVlKSB7CiAgICBfc2V0VmFsdWUodGhpcywgdmFsdWUpOwogIH0KICBbJGdldEV4dHJhXShhdmFpbGFibGVTcGFjZSkgewogICAgaWYgKCF0aGlzWyRleHRyYV0pIHsKICAgICAgbGV0IHsKICAgICAgICB3aWR0aCwKICAgICAgICBoZWlnaHQKICAgICAgfSA9IGF2YWlsYWJsZVNwYWNlOwogICAgICBzd2l0Y2ggKHRoaXMucGxhY2VtZW50KSB7CiAgICAgICAgY2FzZSAibGVmdCI6CiAgICAgICAgY2FzZSAicmlnaHQiOgogICAgICAgIGNhc2UgImlubGluZSI6CiAgICAgICAgICB3aWR0aCA9IHRoaXMucmVzZXJ2ZSA8PSAwID8gd2lkdGggOiB0aGlzLnJlc2VydmU7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJ0b3AiOgogICAgICAgIGNhc2UgImJvdHRvbSI6CiAgICAgICAgICBoZWlnaHQgPSB0aGlzLnJlc2VydmUgPD0gMCA/IGhlaWdodCA6IHRoaXMucmVzZXJ2ZTsKICAgICAgICAgIGJyZWFrOwogICAgICB9CiAgICAgIHRoaXNbJGV4dHJhXSA9IGxheW91dE5vZGUodGhpcywgewogICAgICAgIHdpZHRoLAogICAgICAgIGhlaWdodAogICAgICB9KTsKICAgIH0KICAgIHJldHVybiB0aGlzWyRleHRyYV07CiAgfQogIFskdG9IVE1MXShhdmFpbGFibGVTcGFjZSkgewogICAgaWYgKCF0aGlzLnZhbHVlKSB7CiAgICAgIHJldHVybiBIVE1MUmVzdWx0LkVNUFRZOwogICAgfQogICAgdGhpc1skcHVzaFBhcmFdKCk7CiAgICBjb25zdCB2YWx1ZSA9IHRoaXMudmFsdWVbJHRvSFRNTF0oYXZhaWxhYmxlU3BhY2UpLmh0bWw7CiAgICBpZiAoIXZhbHVlKSB7CiAgICAgIHRoaXNbJHBvcFBhcmFdKCk7CiAgICAgIHJldHVybiBIVE1MUmVzdWx0LkVNUFRZOwogICAgfQogICAgY29uc3Qgc2F2ZWRSZXNlcnZlID0gdGhpcy5yZXNlcnZlOwogICAgaWYgKHRoaXMucmVzZXJ2ZSA8PSAwKSB7CiAgICAgIGNvbnN0IHsKICAgICAgICB3LAogICAgICAgIGgKICAgICAgfSA9IHRoaXNbJGdldEV4dHJhXShhdmFpbGFibGVTcGFjZSk7CiAgICAgIHN3aXRjaCAodGhpcy5wbGFjZW1lbnQpIHsKICAgICAgICBjYXNlICJsZWZ0IjoKICAgICAgICBjYXNlICJyaWdodCI6CiAgICAgICAgY2FzZSAiaW5saW5lIjoKICAgICAgICAgIHRoaXMucmVzZXJ2ZSA9IHc7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJ0b3AiOgogICAgICAgIGNhc2UgImJvdHRvbSI6CiAgICAgICAgICB0aGlzLnJlc2VydmUgPSBoOwogICAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KICAgIGNvbnN0IGNoaWxkcmVuID0gW107CiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAic3RyaW5nIikgewogICAgICBjaGlsZHJlbi5wdXNoKHsKICAgICAgICBuYW1lOiAiI3RleHQiLAogICAgICAgIHZhbHVlCiAgICAgIH0pOwogICAgfSBlbHNlIHsKICAgICAgY2hpbGRyZW4ucHVzaCh2YWx1ZSk7CiAgICB9CiAgICBjb25zdCBzdHlsZSA9IHRvU3R5bGUodGhpcywgImZvbnQiLCAibWFyZ2luIiwgInZpc2liaWxpdHkiKTsKICAgIHN3aXRjaCAodGhpcy5wbGFjZW1lbnQpIHsKICAgICAgY2FzZSAibGVmdCI6CiAgICAgIGNhc2UgInJpZ2h0IjoKICAgICAgICBpZiAodGhpcy5yZXNlcnZlID4gMCkgewogICAgICAgICAgc3R5bGUud2lkdGggPSBtZWFzdXJlVG9TdHJpbmcodGhpcy5yZXNlcnZlKTsKICAgICAgICB9CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgInRvcCI6CiAgICAgIGNhc2UgImJvdHRvbSI6CiAgICAgICAgaWYgKHRoaXMucmVzZXJ2ZSA+IDApIHsKICAgICAgICAgIHN0eWxlLmhlaWdodCA9IG1lYXN1cmVUb1N0cmluZyh0aGlzLnJlc2VydmUpOwogICAgICAgIH0KICAgICAgICBicmVhazsKICAgIH0KICAgIHNldFBhcmEodGhpcywgbnVsbCwgdmFsdWUpOwogICAgdGhpc1skcG9wUGFyYV0oKTsKICAgIHRoaXMucmVzZXJ2ZSA9IHNhdmVkUmVzZXJ2ZTsKICAgIHJldHVybiBIVE1MUmVzdWx0LnN1Y2Nlc3MoewogICAgICBuYW1lOiAiZGl2IiwKICAgICAgYXR0cmlidXRlczogewogICAgICAgIHN0eWxlLAogICAgICAgIGNsYXNzOiBbInhmYUNhcHRpb24iXQogICAgICB9LAogICAgICBjaGlsZHJlbgogICAgfSk7CiAgfQp9CmNsYXNzIENlcnRpZmljYXRlIGV4dGVuZHMgU3RyaW5nT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihURU1QTEFURV9OU19JRCwgImNlcnRpZmljYXRlIik7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMubmFtZSA9IGF0dHJpYnV0ZXMubmFtZSB8fCAiIjsKICAgIHRoaXMudXNlID0gYXR0cmlidXRlcy51c2UgfHwgIiI7CiAgICB0aGlzLnVzZWhyZWYgPSBhdHRyaWJ1dGVzLnVzZWhyZWYgfHwgIiI7CiAgfQp9CmNsYXNzIENlcnRpZmljYXRlcyBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJjZXJ0aWZpY2F0ZXMiLCB0cnVlKTsKICAgIHRoaXMuY3JlZGVudGlhbFNlcnZlclBvbGljeSA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLmNyZWRlbnRpYWxTZXJ2ZXJQb2xpY3ksIFsib3B0aW9uYWwiLCAicmVxdWlyZWQiXSk7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMudXJsID0gYXR0cmlidXRlcy51cmwgfHwgIiI7CiAgICB0aGlzLnVybFBvbGljeSA9IGF0dHJpYnV0ZXMudXJsUG9saWN5IHx8ICIiOwogICAgdGhpcy51c2UgPSBhdHRyaWJ1dGVzLnVzZSB8fCAiIjsKICAgIHRoaXMudXNlaHJlZiA9IGF0dHJpYnV0ZXMudXNlaHJlZiB8fCAiIjsKICAgIHRoaXMuZW5jcnlwdGlvbiA9IG51bGw7CiAgICB0aGlzLmlzc3VlcnMgPSBudWxsOwogICAgdGhpcy5rZXlVc2FnZSA9IG51bGw7CiAgICB0aGlzLm9pZHMgPSBudWxsOwogICAgdGhpcy5zaWduaW5nID0gbnVsbDsKICAgIHRoaXMuc3ViamVjdEROcyA9IG51bGw7CiAgfQp9CmNsYXNzIENoZWNrQnV0dG9uIGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihURU1QTEFURV9OU19JRCwgImNoZWNrQnV0dG9uIiwgdHJ1ZSk7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMubWFyayA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLm1hcmssIFsiZGVmYXVsdCIsICJjaGVjayIsICJjaXJjbGUiLCAiY3Jvc3MiLCAiZGlhbW9uZCIsICJzcXVhcmUiLCAic3RhciJdKTsKICAgIHRoaXMuc2hhcGUgPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy5zaGFwZSwgWyJzcXVhcmUiLCAicm91bmQiXSk7CiAgICB0aGlzLnNpemUgPSBnZXRNZWFzdXJlbWVudChhdHRyaWJ1dGVzLnNpemUsICIxMHB0Iik7CiAgICB0aGlzLnVzZSA9IGF0dHJpYnV0ZXMudXNlIHx8ICIiOwogICAgdGhpcy51c2VocmVmID0gYXR0cmlidXRlcy51c2VocmVmIHx8ICIiOwogICAgdGhpcy5ib3JkZXIgPSBudWxsOwogICAgdGhpcy5leHRyYXMgPSBudWxsOwogICAgdGhpcy5tYXJnaW4gPSBudWxsOwogIH0KICBbJHRvSFRNTF0oYXZhaWxhYmxlU3BhY2UpIHsKICAgIGNvbnN0IHN0eWxlID0gdG9TdHlsZSh0aGlzLCAibWFyZ2luIik7CiAgICBjb25zdCBzaXplID0gbWVhc3VyZVRvU3RyaW5nKHRoaXMuc2l6ZSk7CiAgICBzdHlsZS53aWR0aCA9IHN0eWxlLmhlaWdodCA9IHNpemU7CiAgICBsZXQgdHlwZTsKICAgIGxldCBjbGFzc05hbWU7CiAgICBsZXQgZ3JvdXBJZDsKICAgIGNvbnN0IGZpZWxkID0gdGhpc1skZ2V0UGFyZW50XSgpWyRnZXRQYXJlbnRdKCk7CiAgICBjb25zdCBpdGVtcyA9IGZpZWxkLml0ZW1zLmNoaWxkcmVuLmxlbmd0aCAmJiBmaWVsZC5pdGVtcy5jaGlsZHJlblswXVskdG9IVE1MXSgpLmh0bWwgfHwgW107CiAgICBjb25zdCBleHBvcnRlZFZhbHVlID0gewogICAgICBvbjogKGl0ZW1zWzBdICE9PSB1bmRlZmluZWQgPyBpdGVtc1swXSA6ICJvbiIpLnRvU3RyaW5nKCksCiAgICAgIG9mZjogKGl0ZW1zWzFdICE9PSB1bmRlZmluZWQgPyBpdGVtc1sxXSA6ICJvZmYiKS50b1N0cmluZygpCiAgICB9OwogICAgY29uc3QgdmFsdWUgPSBmaWVsZC52YWx1ZT8uWyR0ZXh0XSgpIHx8ICJvZmYiOwogICAgY29uc3QgY2hlY2tlZCA9IHZhbHVlID09PSBleHBvcnRlZFZhbHVlLm9uIHx8IHVuZGVmaW5lZDsKICAgIGNvbnN0IGNvbnRhaW5lciA9IGZpZWxkWyRnZXRTdWJmb3JtUGFyZW50XSgpOwogICAgY29uc3QgZmllbGRJZCA9IGZpZWxkWyR1aWRdOwogICAgbGV0IGRhdGFJZDsKICAgIGlmIChjb250YWluZXIgaW5zdGFuY2VvZiBFeGNsR3JvdXApIHsKICAgICAgZ3JvdXBJZCA9IGNvbnRhaW5lclskdWlkXTsKICAgICAgdHlwZSA9ICJyYWRpbyI7CiAgICAgIGNsYXNzTmFtZSA9ICJ4ZmFSYWRpbyI7CiAgICAgIGRhdGFJZCA9IGNvbnRhaW5lclskZGF0YV0/LlskdWlkXSB8fCBjb250YWluZXJbJHVpZF07CiAgICB9IGVsc2UgewogICAgICB0eXBlID0gImNoZWNrYm94IjsKICAgICAgY2xhc3NOYW1lID0gInhmYUNoZWNrYm94IjsKICAgICAgZGF0YUlkID0gZmllbGRbJGRhdGFdPy5bJHVpZF0gfHwgZmllbGRbJHVpZF07CiAgICB9CiAgICBjb25zdCBpbnB1dCA9IHsKICAgICAgbmFtZTogImlucHV0IiwKICAgICAgYXR0cmlidXRlczogewogICAgICAgIGNsYXNzOiBbY2xhc3NOYW1lXSwKICAgICAgICBzdHlsZSwKICAgICAgICBmaWVsZElkLAogICAgICAgIGRhdGFJZCwKICAgICAgICB0eXBlLAogICAgICAgIGNoZWNrZWQsCiAgICAgICAgeGZhT246IGV4cG9ydGVkVmFsdWUub24sCiAgICAgICAgeGZhT2ZmOiBleHBvcnRlZFZhbHVlLm9mZiwKICAgICAgICAiYXJpYS1sYWJlbCI6IGFyaWFMYWJlbChmaWVsZCksCiAgICAgICAgImFyaWEtcmVxdWlyZWQiOiBmYWxzZQogICAgICB9CiAgICB9OwogICAgaWYgKGdyb3VwSWQpIHsKICAgICAgaW5wdXQuYXR0cmlidXRlcy5uYW1lID0gZ3JvdXBJZDsKICAgIH0KICAgIGlmIChpc1JlcXVpcmVkKGZpZWxkKSkgewogICAgICBpbnB1dC5hdHRyaWJ1dGVzWyJhcmlhLXJlcXVpcmVkIl0gPSB0cnVlOwogICAgICBpbnB1dC5hdHRyaWJ1dGVzLnJlcXVpcmVkID0gdHJ1ZTsKICAgIH0KICAgIHJldHVybiBIVE1MUmVzdWx0LnN1Y2Nlc3MoewogICAgICBuYW1lOiAibGFiZWwiLAogICAgICBhdHRyaWJ1dGVzOiB7CiAgICAgICAgY2xhc3M6IFsieGZhTGFiZWwiXQogICAgICB9LAogICAgICBjaGlsZHJlbjogW2lucHV0XQogICAgfSk7CiAgfQp9CmNsYXNzIENob2ljZUxpc3QgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKFRFTVBMQVRFX05TX0lELCAiY2hvaWNlTGlzdCIsIHRydWUpOwogICAgdGhpcy5jb21taXRPbiA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLmNvbW1pdE9uLCBbInNlbGVjdCIsICJleGl0Il0pOwogICAgdGhpcy5pZCA9IGF0dHJpYnV0ZXMuaWQgfHwgIiI7CiAgICB0aGlzLm9wZW4gPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy5vcGVuLCBbInVzZXJDb250cm9sIiwgImFsd2F5cyIsICJtdWx0aVNlbGVjdCIsICJvbkVudHJ5Il0pOwogICAgdGhpcy50ZXh0RW50cnkgPSBnZXRJbnRlZ2VyKHsKICAgICAgZGF0YTogYXR0cmlidXRlcy50ZXh0RW50cnksCiAgICAgIGRlZmF1bHRWYWx1ZTogMCwKICAgICAgdmFsaWRhdGU6IHggPT4geCA9PT0gMQogICAgfSk7CiAgICB0aGlzLnVzZSA9IGF0dHJpYnV0ZXMudXNlIHx8ICIiOwogICAgdGhpcy51c2VocmVmID0gYXR0cmlidXRlcy51c2VocmVmIHx8ICIiOwogICAgdGhpcy5ib3JkZXIgPSBudWxsOwogICAgdGhpcy5leHRyYXMgPSBudWxsOwogICAgdGhpcy5tYXJnaW4gPSBudWxsOwogIH0KICBbJHRvSFRNTF0oYXZhaWxhYmxlU3BhY2UpIHsKICAgIGNvbnN0IHN0eWxlID0gdG9TdHlsZSh0aGlzLCAiYm9yZGVyIiwgIm1hcmdpbiIpOwogICAgY29uc3QgdWkgPSB0aGlzWyRnZXRQYXJlbnRdKCk7CiAgICBjb25zdCBmaWVsZCA9IHVpWyRnZXRQYXJlbnRdKCk7CiAgICBjb25zdCBmb250U2l6ZSA9IGZpZWxkLmZvbnQ/LnNpemUgfHwgMTA7CiAgICBjb25zdCBvcHRpb25TdHlsZSA9IHsKICAgICAgZm9udFNpemU6IGBjYWxjKCR7Zm9udFNpemV9cHggKiB2YXIoLS10b3RhbC1zY2FsZS1mYWN0b3IpKWAKICAgIH07CiAgICBjb25zdCBjaGlsZHJlbiA9IFtdOwogICAgaWYgKGZpZWxkLml0ZW1zLmNoaWxkcmVuLmxlbmd0aCA+IDApIHsKICAgICAgY29uc3QgaXRlbXMgPSBmaWVsZC5pdGVtczsKICAgICAgbGV0IGRpc3BsYXllZEluZGV4ID0gMDsKICAgICAgbGV0IHNhdmVJbmRleCA9IDA7CiAgICAgIGlmIChpdGVtcy5jaGlsZHJlbi5sZW5ndGggPT09IDIpIHsKICAgICAgICBkaXNwbGF5ZWRJbmRleCA9IGl0ZW1zLmNoaWxkcmVuWzBdLnNhdmU7CiAgICAgICAgc2F2ZUluZGV4ID0gMSAtIGRpc3BsYXllZEluZGV4OwogICAgICB9CiAgICAgIGNvbnN0IGRpc3BsYXllZCA9IGl0ZW1zLmNoaWxkcmVuW2Rpc3BsYXllZEluZGV4XVskdG9IVE1MXSgpLmh0bWw7CiAgICAgIGNvbnN0IHZhbHVlcyA9IGl0ZW1zLmNoaWxkcmVuW3NhdmVJbmRleF1bJHRvSFRNTF0oKS5odG1sOwogICAgICBsZXQgc2VsZWN0ZWQgPSBmYWxzZTsKICAgICAgY29uc3QgdmFsdWUgPSBmaWVsZC52YWx1ZT8uWyR0ZXh0XSgpIHx8ICIiOwogICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBkaXNwbGF5ZWQubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgICAgIGNvbnN0IG9wdGlvbiA9IHsKICAgICAgICAgIG5hbWU6ICJvcHRpb24iLAogICAgICAgICAgYXR0cmlidXRlczogewogICAgICAgICAgICB2YWx1ZTogdmFsdWVzW2ldIHx8IGRpc3BsYXllZFtpXSwKICAgICAgICAgICAgc3R5bGU6IG9wdGlvblN0eWxlCiAgICAgICAgICB9LAogICAgICAgICAgdmFsdWU6IGRpc3BsYXllZFtpXQogICAgICAgIH07CiAgICAgICAgaWYgKHZhbHVlc1tpXSA9PT0gdmFsdWUpIHsKICAgICAgICAgIG9wdGlvbi5hdHRyaWJ1dGVzLnNlbGVjdGVkID0gc2VsZWN0ZWQgPSB0cnVlOwogICAgICAgIH0KICAgICAgICBjaGlsZHJlbi5wdXNoKG9wdGlvbik7CiAgICAgIH0KICAgICAgaWYgKCFzZWxlY3RlZCkgewogICAgICAgIGNoaWxkcmVuLnNwbGljZSgwLCAwLCB7CiAgICAgICAgICBuYW1lOiAib3B0aW9uIiwKICAgICAgICAgIGF0dHJpYnV0ZXM6IHsKICAgICAgICAgICAgaGlkZGVuOiB0cnVlLAogICAgICAgICAgICBzZWxlY3RlZDogdHJ1ZQogICAgICAgICAgfSwKICAgICAgICAgIHZhbHVlOiAiICIKICAgICAgICB9KTsKICAgICAgfQogICAgfQogICAgY29uc3Qgc2VsZWN0QXR0cmlidXRlcyA9IHsKICAgICAgY2xhc3M6IFsieGZhU2VsZWN0Il0sCiAgICAgIGZpZWxkSWQ6IGZpZWxkWyR1aWRdLAogICAgICBkYXRhSWQ6IGZpZWxkWyRkYXRhXT8uWyR1aWRdIHx8IGZpZWxkWyR1aWRdLAogICAgICBzdHlsZSwKICAgICAgImFyaWEtbGFiZWwiOiBhcmlhTGFiZWwoZmllbGQpLAogICAgICAiYXJpYS1yZXF1aXJlZCI6IGZhbHNlCiAgICB9OwogICAgaWYgKGlzUmVxdWlyZWQoZmllbGQpKSB7CiAgICAgIHNlbGVjdEF0dHJpYnV0ZXNbImFyaWEtcmVxdWlyZWQiXSA9IHRydWU7CiAgICAgIHNlbGVjdEF0dHJpYnV0ZXMucmVxdWlyZWQgPSB0cnVlOwogICAgfQogICAgaWYgKHRoaXMub3BlbiA9PT0gIm11bHRpU2VsZWN0IikgewogICAgICBzZWxlY3RBdHRyaWJ1dGVzLm11bHRpcGxlID0gdHJ1ZTsKICAgIH0KICAgIHJldHVybiBIVE1MUmVzdWx0LnN1Y2Nlc3MoewogICAgICBuYW1lOiAibGFiZWwiLAogICAgICBhdHRyaWJ1dGVzOiB7CiAgICAgICAgY2xhc3M6IFsieGZhTGFiZWwiXQogICAgICB9LAogICAgICBjaGlsZHJlbjogW3sKICAgICAgICBuYW1lOiAic2VsZWN0IiwKICAgICAgICBjaGlsZHJlbiwKICAgICAgICBhdHRyaWJ1dGVzOiBzZWxlY3RBdHRyaWJ1dGVzCiAgICAgIH1dCiAgICB9KTsKICB9Cn0KY2xhc3MgQ29sb3IgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKFRFTVBMQVRFX05TX0lELCAiY29sb3IiLCB0cnVlKTsKICAgIHRoaXMuY1NwYWNlID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMuY1NwYWNlLCBbIlNSR0IiXSk7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMudXNlID0gYXR0cmlidXRlcy51c2UgfHwgIiI7CiAgICB0aGlzLnVzZWhyZWYgPSBhdHRyaWJ1dGVzLnVzZWhyZWYgfHwgIiI7CiAgICB0aGlzLnZhbHVlID0gYXR0cmlidXRlcy52YWx1ZSA/IGdldENvbG9yKGF0dHJpYnV0ZXMudmFsdWUpIDogIiI7CiAgICB0aGlzLmV4dHJhcyA9IG51bGw7CiAgfQogIFskaGFzU2V0dGFibGVWYWx1ZV0oKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQogIFskdG9TdHlsZV0oKSB7CiAgICByZXR1cm4gdGhpcy52YWx1ZSA/IFV0aWwubWFrZUhleENvbG9yKHRoaXMudmFsdWUuciwgdGhpcy52YWx1ZS5nLCB0aGlzLnZhbHVlLmIpIDogbnVsbDsKICB9Cn0KY2xhc3MgQ29tYiBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJjb21iIik7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMubnVtYmVyT2ZDZWxscyA9IGdldEludGVnZXIoewogICAgICBkYXRhOiBhdHRyaWJ1dGVzLm51bWJlck9mQ2VsbHMsCiAgICAgIGRlZmF1bHRWYWx1ZTogMCwKICAgICAgdmFsaWRhdGU6IHggPT4geCA+PSAwCiAgICB9KTsKICAgIHRoaXMudXNlID0gYXR0cmlidXRlcy51c2UgfHwgIiI7CiAgICB0aGlzLnVzZWhyZWYgPSBhdHRyaWJ1dGVzLnVzZWhyZWYgfHwgIiI7CiAgfQp9CmNsYXNzIENvbm5lY3QgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKFRFTVBMQVRFX05TX0lELCAiY29ubmVjdCIsIHRydWUpOwogICAgdGhpcy5jb25uZWN0aW9uID0gYXR0cmlidXRlcy5jb25uZWN0aW9uIHx8ICIiOwogICAgdGhpcy5pZCA9IGF0dHJpYnV0ZXMuaWQgfHwgIiI7CiAgICB0aGlzLnJlZiA9IGF0dHJpYnV0ZXMucmVmIHx8ICIiOwogICAgdGhpcy51c2FnZSA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLnVzYWdlLCBbImV4cG9ydEFuZEltcG9ydCIsICJleHBvcnRPbmx5IiwgImltcG9ydE9ubHkiXSk7CiAgICB0aGlzLnVzZSA9IGF0dHJpYnV0ZXMudXNlIHx8ICIiOwogICAgdGhpcy51c2VocmVmID0gYXR0cmlidXRlcy51c2VocmVmIHx8ICIiOwogICAgdGhpcy5waWN0dXJlID0gbnVsbDsKICB9Cn0KY2xhc3MgQ29udGVudEFyZWEgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKFRFTVBMQVRFX05TX0lELCAiY29udGVudEFyZWEiLCB0cnVlKTsKICAgIHRoaXMuaCA9IGdldE1lYXN1cmVtZW50KGF0dHJpYnV0ZXMuaCk7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMubmFtZSA9IGF0dHJpYnV0ZXMubmFtZSB8fCAiIjsKICAgIHRoaXMucmVsZXZhbnQgPSBnZXRSZWxldmFudChhdHRyaWJ1dGVzLnJlbGV2YW50KTsKICAgIHRoaXMudXNlID0gYXR0cmlidXRlcy51c2UgfHwgIiI7CiAgICB0aGlzLnVzZWhyZWYgPSBhdHRyaWJ1dGVzLnVzZWhyZWYgfHwgIiI7CiAgICB0aGlzLncgPSBnZXRNZWFzdXJlbWVudChhdHRyaWJ1dGVzLncpOwogICAgdGhpcy54ID0gZ2V0TWVhc3VyZW1lbnQoYXR0cmlidXRlcy54LCAiMHB0Iik7CiAgICB0aGlzLnkgPSBnZXRNZWFzdXJlbWVudChhdHRyaWJ1dGVzLnksICIwcHQiKTsKICAgIHRoaXMuZGVzYyA9IG51bGw7CiAgICB0aGlzLmV4dHJhcyA9IG51bGw7CiAgfQogIFskdG9IVE1MXShhdmFpbGFibGVTcGFjZSkgewogICAgY29uc3QgbGVmdCA9IG1lYXN1cmVUb1N0cmluZyh0aGlzLngpOwogICAgY29uc3QgdG9wID0gbWVhc3VyZVRvU3RyaW5nKHRoaXMueSk7CiAgICBjb25zdCBzdHlsZSA9IHsKICAgICAgbGVmdCwKICAgICAgdG9wLAogICAgICB3aWR0aDogbWVhc3VyZVRvU3RyaW5nKHRoaXMudyksCiAgICAgIGhlaWdodDogbWVhc3VyZVRvU3RyaW5nKHRoaXMuaCkKICAgIH07CiAgICBjb25zdCBjbGFzc05hbWVzID0gWyJ4ZmFDb250ZW50YXJlYSJdOwogICAgaWYgKGlzUHJpbnRPbmx5KHRoaXMpKSB7CiAgICAgIGNsYXNzTmFtZXMucHVzaCgieGZhUHJpbnRPbmx5Iik7CiAgICB9CiAgICByZXR1cm4gSFRNTFJlc3VsdC5zdWNjZXNzKHsKICAgICAgbmFtZTogImRpdiIsCiAgICAgIGNoaWxkcmVuOiBbXSwKICAgICAgYXR0cmlidXRlczogewogICAgICAgIHN0eWxlLAogICAgICAgIGNsYXNzOiBjbGFzc05hbWVzLAogICAgICAgIGlkOiB0aGlzWyR1aWRdCiAgICAgIH0KICAgIH0pOwogIH0KfQpjbGFzcyBDb3JuZXIgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKFRFTVBMQVRFX05TX0lELCAiY29ybmVyIiwgdHJ1ZSk7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMuaW52ZXJ0ZWQgPSBnZXRJbnRlZ2VyKHsKICAgICAgZGF0YTogYXR0cmlidXRlcy5pbnZlcnRlZCwKICAgICAgZGVmYXVsdFZhbHVlOiAwLAogICAgICB2YWxpZGF0ZTogeCA9PiB4ID09PSAxCiAgICB9KTsKICAgIHRoaXMuam9pbiA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLmpvaW4sIFsic3F1YXJlIiwgInJvdW5kIl0pOwogICAgdGhpcy5wcmVzZW5jZSA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLnByZXNlbmNlLCBbInZpc2libGUiLCAiaGlkZGVuIiwgImluYWN0aXZlIiwgImludmlzaWJsZSJdKTsKICAgIHRoaXMucmFkaXVzID0gZ2V0TWVhc3VyZW1lbnQoYXR0cmlidXRlcy5yYWRpdXMpOwogICAgdGhpcy5zdHJva2UgPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy5zdHJva2UsIFsic29saWQiLCAiZGFzaERvdCIsICJkYXNoRG90RG90IiwgImRhc2hlZCIsICJkb3R0ZWQiLCAiZW1ib3NzZWQiLCAiZXRjaGVkIiwgImxvd2VyZWQiLCAicmFpc2VkIl0pOwogICAgdGhpcy50aGlja25lc3MgPSBnZXRNZWFzdXJlbWVudChhdHRyaWJ1dGVzLnRoaWNrbmVzcywgIjAuNXB0Iik7CiAgICB0aGlzLnVzZSA9IGF0dHJpYnV0ZXMudXNlIHx8ICIiOwogICAgdGhpcy51c2VocmVmID0gYXR0cmlidXRlcy51c2VocmVmIHx8ICIiOwogICAgdGhpcy5jb2xvciA9IG51bGw7CiAgICB0aGlzLmV4dHJhcyA9IG51bGw7CiAgfQogIFskdG9TdHlsZV0oKSB7CiAgICBjb25zdCBzdHlsZSA9IHRvU3R5bGUodGhpcywgInZpc2liaWxpdHkiKTsKICAgIHN0eWxlLnJhZGl1cyA9IG1lYXN1cmVUb1N0cmluZyh0aGlzLmpvaW4gPT09ICJzcXVhcmUiID8gMCA6IHRoaXMucmFkaXVzKTsKICAgIHJldHVybiBzdHlsZTsKICB9Cn0KY2xhc3MgRGF0ZUVsZW1lbnQgZXh0ZW5kcyBDb250ZW50T2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihURU1QTEFURV9OU19JRCwgImRhdGUiKTsKICAgIHRoaXMuaWQgPSBhdHRyaWJ1dGVzLmlkIHx8ICIiOwogICAgdGhpcy5uYW1lID0gYXR0cmlidXRlcy5uYW1lIHx8ICIiOwogICAgdGhpcy51c2UgPSBhdHRyaWJ1dGVzLnVzZSB8fCAiIjsKICAgIHRoaXMudXNlaHJlZiA9IGF0dHJpYnV0ZXMudXNlaHJlZiB8fCAiIjsKICB9CiAgWyRmaW5hbGl6ZV0oKSB7CiAgICBjb25zdCBkYXRlID0gdGhpc1skY29udGVudF0udHJpbSgpOwogICAgdGhpc1skY29udGVudF0gPSBkYXRlID8gbmV3IERhdGUoZGF0ZSkgOiBudWxsOwogIH0KICBbJHRvSFRNTF0oYXZhaWxhYmxlU3BhY2UpIHsKICAgIHJldHVybiB2YWx1ZVRvSHRtbCh0aGlzWyRjb250ZW50XSA/IHRoaXNbJGNvbnRlbnRdLnRvU3RyaW5nKCkgOiAiIik7CiAgfQp9CmNsYXNzIERhdGVUaW1lIGV4dGVuZHMgQ29udGVudE9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJkYXRlVGltZSIpOwogICAgdGhpcy5pZCA9IGF0dHJpYnV0ZXMuaWQgfHwgIiI7CiAgICB0aGlzLm5hbWUgPSBhdHRyaWJ1dGVzLm5hbWUgfHwgIiI7CiAgICB0aGlzLnVzZSA9IGF0dHJpYnV0ZXMudXNlIHx8ICIiOwogICAgdGhpcy51c2VocmVmID0gYXR0cmlidXRlcy51c2VocmVmIHx8ICIiOwogIH0KICBbJGZpbmFsaXplXSgpIHsKICAgIGNvbnN0IGRhdGUgPSB0aGlzWyRjb250ZW50XS50cmltKCk7CiAgICB0aGlzWyRjb250ZW50XSA9IGRhdGUgPyBuZXcgRGF0ZShkYXRlKSA6IG51bGw7CiAgfQogIFskdG9IVE1MXShhdmFpbGFibGVTcGFjZSkgewogICAgcmV0dXJuIHZhbHVlVG9IdG1sKHRoaXNbJGNvbnRlbnRdID8gdGhpc1skY29udGVudF0udG9TdHJpbmcoKSA6ICIiKTsKICB9Cn0KY2xhc3MgRGF0ZVRpbWVFZGl0IGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihURU1QTEFURV9OU19JRCwgImRhdGVUaW1lRWRpdCIsIHRydWUpOwogICAgdGhpcy5oU2Nyb2xsUG9saWN5ID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMuaFNjcm9sbFBvbGljeSwgWyJhdXRvIiwgIm9mZiIsICJvbiJdKTsKICAgIHRoaXMuaWQgPSBhdHRyaWJ1dGVzLmlkIHx8ICIiOwogICAgdGhpcy5waWNrZXIgPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy5waWNrZXIsIFsiaG9zdCIsICJub25lIl0pOwogICAgdGhpcy51c2UgPSBhdHRyaWJ1dGVzLnVzZSB8fCAiIjsKICAgIHRoaXMudXNlaHJlZiA9IGF0dHJpYnV0ZXMudXNlaHJlZiB8fCAiIjsKICAgIHRoaXMuYm9yZGVyID0gbnVsbDsKICAgIHRoaXMuY29tYiA9IG51bGw7CiAgICB0aGlzLmV4dHJhcyA9IG51bGw7CiAgICB0aGlzLm1hcmdpbiA9IG51bGw7CiAgfQogIFskdG9IVE1MXShhdmFpbGFibGVTcGFjZSkgewogICAgY29uc3Qgc3R5bGUgPSB0b1N0eWxlKHRoaXMsICJib3JkZXIiLCAiZm9udCIsICJtYXJnaW4iKTsKICAgIGNvbnN0IGZpZWxkID0gdGhpc1skZ2V0UGFyZW50XSgpWyRnZXRQYXJlbnRdKCk7CiAgICBjb25zdCBodG1sID0gewogICAgICBuYW1lOiAiaW5wdXQiLAogICAgICBhdHRyaWJ1dGVzOiB7CiAgICAgICAgdHlwZTogInRleHQiLAogICAgICAgIGZpZWxkSWQ6IGZpZWxkWyR1aWRdLAogICAgICAgIGRhdGFJZDogZmllbGRbJGRhdGFdPy5bJHVpZF0gfHwgZmllbGRbJHVpZF0sCiAgICAgICAgY2xhc3M6IFsieGZhVGV4dGZpZWxkIl0sCiAgICAgICAgc3R5bGUsCiAgICAgICAgImFyaWEtbGFiZWwiOiBhcmlhTGFiZWwoZmllbGQpLAogICAgICAgICJhcmlhLXJlcXVpcmVkIjogZmFsc2UKICAgICAgfQogICAgfTsKICAgIGlmIChpc1JlcXVpcmVkKGZpZWxkKSkgewogICAgICBodG1sLmF0dHJpYnV0ZXNbImFyaWEtcmVxdWlyZWQiXSA9IHRydWU7CiAgICAgIGh0bWwuYXR0cmlidXRlcy5yZXF1aXJlZCA9IHRydWU7CiAgICB9CiAgICByZXR1cm4gSFRNTFJlc3VsdC5zdWNjZXNzKHsKICAgICAgbmFtZTogImxhYmVsIiwKICAgICAgYXR0cmlidXRlczogewogICAgICAgIGNsYXNzOiBbInhmYUxhYmVsIl0KICAgICAgfSwKICAgICAgY2hpbGRyZW46IFtodG1sXQogICAgfSk7CiAgfQp9CmNsYXNzIERlY2ltYWwgZXh0ZW5kcyBDb250ZW50T2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihURU1QTEFURV9OU19JRCwgImRlY2ltYWwiKTsKICAgIHRoaXMuZnJhY0RpZ2l0cyA9IGdldEludGVnZXIoewogICAgICBkYXRhOiBhdHRyaWJ1dGVzLmZyYWNEaWdpdHMsCiAgICAgIGRlZmF1bHRWYWx1ZTogMiwKICAgICAgdmFsaWRhdGU6IHggPT4gdHJ1ZQogICAgfSk7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMubGVhZERpZ2l0cyA9IGdldEludGVnZXIoewogICAgICBkYXRhOiBhdHRyaWJ1dGVzLmxlYWREaWdpdHMsCiAgICAgIGRlZmF1bHRWYWx1ZTogLTEsCiAgICAgIHZhbGlkYXRlOiB4ID0+IHRydWUKICAgIH0pOwogICAgdGhpcy5uYW1lID0gYXR0cmlidXRlcy5uYW1lIHx8ICIiOwogICAgdGhpcy51c2UgPSBhdHRyaWJ1dGVzLnVzZSB8fCAiIjsKICAgIHRoaXMudXNlaHJlZiA9IGF0dHJpYnV0ZXMudXNlaHJlZiB8fCAiIjsKICB9CiAgWyRmaW5hbGl6ZV0oKSB7CiAgICBjb25zdCBudW1iZXIgPSBwYXJzZUZsb2F0KHRoaXNbJGNvbnRlbnRdLnRyaW0oKSk7CiAgICB0aGlzWyRjb250ZW50XSA9IGlzTmFOKG51bWJlcikgPyBudWxsIDogbnVtYmVyOwogIH0KICBbJHRvSFRNTF0oYXZhaWxhYmxlU3BhY2UpIHsKICAgIHJldHVybiB2YWx1ZVRvSHRtbCh0aGlzWyRjb250ZW50XSAhPT0gbnVsbCA/IHRoaXNbJGNvbnRlbnRdLnRvU3RyaW5nKCkgOiAiIik7CiAgfQp9CmNsYXNzIERlZmF1bHRVaSBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJkZWZhdWx0VWkiLCB0cnVlKTsKICAgIHRoaXMuaWQgPSBhdHRyaWJ1dGVzLmlkIHx8ICIiOwogICAgdGhpcy51c2UgPSBhdHRyaWJ1dGVzLnVzZSB8fCAiIjsKICAgIHRoaXMudXNlaHJlZiA9IGF0dHJpYnV0ZXMudXNlaHJlZiB8fCAiIjsKICAgIHRoaXMuZXh0cmFzID0gbnVsbDsKICB9Cn0KY2xhc3MgRGVzYyBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJkZXNjIiwgdHJ1ZSk7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMudXNlID0gYXR0cmlidXRlcy51c2UgfHwgIiI7CiAgICB0aGlzLnVzZWhyZWYgPSBhdHRyaWJ1dGVzLnVzZWhyZWYgfHwgIiI7CiAgICB0aGlzLmJvb2xlYW4gPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuZGF0ZSA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5kYXRlVGltZSA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5kZWNpbWFsID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmV4RGF0YSA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5mbG9hdCA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5pbWFnZSA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5pbnRlZ2VyID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLnRleHQgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMudGltZSA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogIH0KfQpjbGFzcyBEaWdlc3RNZXRob2QgZXh0ZW5kcyBPcHRpb25PYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKFRFTVBMQVRFX05TX0lELCAiZGlnZXN0TWV0aG9kIiwgWyIiLCAiU0hBMSIsICJTSEEyNTYiLCAiU0hBNTEyIiwgIlJJUEVNRDE2MCJdKTsKICAgIHRoaXMuaWQgPSBhdHRyaWJ1dGVzLmlkIHx8ICIiOwogICAgdGhpcy51c2UgPSBhdHRyaWJ1dGVzLnVzZSB8fCAiIjsKICAgIHRoaXMudXNlaHJlZiA9IGF0dHJpYnV0ZXMudXNlaHJlZiB8fCAiIjsKICB9Cn0KY2xhc3MgRGlnZXN0TWV0aG9kcyBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJkaWdlc3RNZXRob2RzIiwgdHJ1ZSk7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMudHlwZSA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLnR5cGUsIFsib3B0aW9uYWwiLCAicmVxdWlyZWQiXSk7CiAgICB0aGlzLnVzZSA9IGF0dHJpYnV0ZXMudXNlIHx8ICIiOwogICAgdGhpcy51c2VocmVmID0gYXR0cmlidXRlcy51c2VocmVmIHx8ICIiOwogICAgdGhpcy5kaWdlc3RNZXRob2QgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICB9Cn0KY2xhc3MgRHJhdyBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJkcmF3IiwgdHJ1ZSk7CiAgICB0aGlzLmFuY2hvclR5cGUgPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy5hbmNob3JUeXBlLCBbInRvcExlZnQiLCAiYm90dG9tQ2VudGVyIiwgImJvdHRvbUxlZnQiLCAiYm90dG9tUmlnaHQiLCAibWlkZGxlQ2VudGVyIiwgIm1pZGRsZUxlZnQiLCAibWlkZGxlUmlnaHQiLCAidG9wQ2VudGVyIiwgInRvcFJpZ2h0Il0pOwogICAgdGhpcy5jb2xTcGFuID0gZ2V0SW50ZWdlcih7CiAgICAgIGRhdGE6IGF0dHJpYnV0ZXMuY29sU3BhbiwKICAgICAgZGVmYXVsdFZhbHVlOiAxLAogICAgICB2YWxpZGF0ZTogbiA9PiBuID49IDEgfHwgbiA9PT0gLTEKICAgIH0pOwogICAgdGhpcy5oID0gYXR0cmlidXRlcy5oID8gZ2V0TWVhc3VyZW1lbnQoYXR0cmlidXRlcy5oKSA6ICIiOwogICAgdGhpcy5oQWxpZ24gPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy5oQWxpZ24sIFsibGVmdCIsICJjZW50ZXIiLCAianVzdGlmeSIsICJqdXN0aWZ5QWxsIiwgInJhZGl4IiwgInJpZ2h0Il0pOwogICAgdGhpcy5pZCA9IGF0dHJpYnV0ZXMuaWQgfHwgIiI7CiAgICB0aGlzLmxvY2FsZSA9IGF0dHJpYnV0ZXMubG9jYWxlIHx8ICIiOwogICAgdGhpcy5tYXhIID0gZ2V0TWVhc3VyZW1lbnQoYXR0cmlidXRlcy5tYXhILCAiMHB0Iik7CiAgICB0aGlzLm1heFcgPSBnZXRNZWFzdXJlbWVudChhdHRyaWJ1dGVzLm1heFcsICIwcHQiKTsKICAgIHRoaXMubWluSCA9IGdldE1lYXN1cmVtZW50KGF0dHJpYnV0ZXMubWluSCwgIjBwdCIpOwogICAgdGhpcy5taW5XID0gZ2V0TWVhc3VyZW1lbnQoYXR0cmlidXRlcy5taW5XLCAiMHB0Iik7CiAgICB0aGlzLm5hbWUgPSBhdHRyaWJ1dGVzLm5hbWUgfHwgIiI7CiAgICB0aGlzLnByZXNlbmNlID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMucHJlc2VuY2UsIFsidmlzaWJsZSIsICJoaWRkZW4iLCAiaW5hY3RpdmUiLCAiaW52aXNpYmxlIl0pOwogICAgdGhpcy5yZWxldmFudCA9IGdldFJlbGV2YW50KGF0dHJpYnV0ZXMucmVsZXZhbnQpOwogICAgdGhpcy5yb3RhdGUgPSBnZXRJbnRlZ2VyKHsKICAgICAgZGF0YTogYXR0cmlidXRlcy5yb3RhdGUsCiAgICAgIGRlZmF1bHRWYWx1ZTogMCwKICAgICAgdmFsaWRhdGU6IHggPT4geCAlIDkwID09PSAwCiAgICB9KTsKICAgIHRoaXMudXNlID0gYXR0cmlidXRlcy51c2UgfHwgIiI7CiAgICB0aGlzLnVzZWhyZWYgPSBhdHRyaWJ1dGVzLnVzZWhyZWYgfHwgIiI7CiAgICB0aGlzLncgPSBhdHRyaWJ1dGVzLncgPyBnZXRNZWFzdXJlbWVudChhdHRyaWJ1dGVzLncpIDogIiI7CiAgICB0aGlzLnggPSBnZXRNZWFzdXJlbWVudChhdHRyaWJ1dGVzLngsICIwcHQiKTsKICAgIHRoaXMueSA9IGdldE1lYXN1cmVtZW50KGF0dHJpYnV0ZXMueSwgIjBwdCIpOwogICAgdGhpcy5hc3Npc3QgPSBudWxsOwogICAgdGhpcy5ib3JkZXIgPSBudWxsOwogICAgdGhpcy5jYXB0aW9uID0gbnVsbDsKICAgIHRoaXMuZGVzYyA9IG51bGw7CiAgICB0aGlzLmV4dHJhcyA9IG51bGw7CiAgICB0aGlzLmZvbnQgPSBudWxsOwogICAgdGhpcy5rZWVwID0gbnVsbDsKICAgIHRoaXMubWFyZ2luID0gbnVsbDsKICAgIHRoaXMucGFyYSA9IG51bGw7CiAgICB0aGlzLnRyYXZlcnNhbCA9IG51bGw7CiAgICB0aGlzLnVpID0gbnVsbDsKICAgIHRoaXMudmFsdWUgPSBudWxsOwogICAgdGhpcy5zZXRQcm9wZXJ0eSA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogIH0KICBbJHNldFZhbHVlXSh2YWx1ZSkgewogICAgX3NldFZhbHVlKHRoaXMsIHZhbHVlKTsKICB9CiAgWyR0b0hUTUxdKGF2YWlsYWJsZVNwYWNlKSB7CiAgICBzZXRUYWJJbmRleCh0aGlzKTsKICAgIGlmICh0aGlzLnByZXNlbmNlID09PSAiaGlkZGVuIiB8fCB0aGlzLnByZXNlbmNlID09PSAiaW5hY3RpdmUiKSB7CiAgICAgIHJldHVybiBIVE1MUmVzdWx0LkVNUFRZOwogICAgfQogICAgZml4RGltZW5zaW9ucyh0aGlzKTsKICAgIHRoaXNbJHB1c2hQYXJhXSgpOwogICAgY29uc3Qgc2F2ZWRXID0gdGhpcy53OwogICAgY29uc3Qgc2F2ZWRIID0gdGhpcy5oOwogICAgY29uc3QgewogICAgICB3LAogICAgICBoLAogICAgICBpc0Jyb2tlbgogICAgfSA9IGxheW91dE5vZGUodGhpcywgYXZhaWxhYmxlU3BhY2UpOwogICAgaWYgKHcgJiYgdGhpcy53ID09PSAiIikgewogICAgICBpZiAoaXNCcm9rZW4gJiYgdGhpc1skZ2V0U3ViZm9ybVBhcmVudF0oKVskaXNUaGVyZU1vcmVXaWR0aF0oKSkgewogICAgICAgIHRoaXNbJHBvcFBhcmFdKCk7CiAgICAgICAgcmV0dXJuIEhUTUxSZXN1bHQuRkFJTFVSRTsKICAgICAgfQogICAgICB0aGlzLncgPSB3OwogICAgfQogICAgaWYgKGggJiYgdGhpcy5oID09PSAiIikgewogICAgICB0aGlzLmggPSBoOwogICAgfQogICAgc2V0Rmlyc3RVbnNwbGl0dGFibGUodGhpcyk7CiAgICBpZiAoIWNoZWNrRGltZW5zaW9ucyh0aGlzLCBhdmFpbGFibGVTcGFjZSkpIHsKICAgICAgdGhpcy53ID0gc2F2ZWRXOwogICAgICB0aGlzLmggPSBzYXZlZEg7CiAgICAgIHRoaXNbJHBvcFBhcmFdKCk7CiAgICAgIHJldHVybiBIVE1MUmVzdWx0LkZBSUxVUkU7CiAgICB9CiAgICB1bnNldEZpcnN0VW5zcGxpdHRhYmxlKHRoaXMpOwogICAgY29uc3Qgc3R5bGUgPSB0b1N0eWxlKHRoaXMsICJmb250IiwgImhBbGlnbiIsICJkaW1lbnNpb25zIiwgInBvc2l0aW9uIiwgInByZXNlbmNlIiwgInJvdGF0ZSIsICJhbmNob3JUeXBlIiwgImJvcmRlciIsICJtYXJnaW4iKTsKICAgIHNldE1pbk1heERpbWVuc2lvbnModGhpcywgc3R5bGUpOwogICAgaWYgKHN0eWxlLm1hcmdpbikgewogICAgICBzdHlsZS5wYWRkaW5nID0gc3R5bGUubWFyZ2luOwogICAgICBkZWxldGUgc3R5bGUubWFyZ2luOwogICAgfQogICAgY29uc3QgY2xhc3NOYW1lcyA9IFsieGZhRHJhdyJdOwogICAgaWYgKHRoaXMuZm9udCkgewogICAgICBjbGFzc05hbWVzLnB1c2goInhmYUZvbnQiKTsKICAgIH0KICAgIGlmIChpc1ByaW50T25seSh0aGlzKSkgewogICAgICBjbGFzc05hbWVzLnB1c2goInhmYVByaW50T25seSIpOwogICAgfQogICAgY29uc3QgYXR0cmlidXRlcyA9IHsKICAgICAgc3R5bGUsCiAgICAgIGlkOiB0aGlzWyR1aWRdLAogICAgICBjbGFzczogY2xhc3NOYW1lcwogICAgfTsKICAgIGlmICh0aGlzLm5hbWUpIHsKICAgICAgYXR0cmlidXRlcy54ZmFOYW1lID0gdGhpcy5uYW1lOwogICAgfQogICAgY29uc3QgaHRtbCA9IHsKICAgICAgbmFtZTogImRpdiIsCiAgICAgIGF0dHJpYnV0ZXMsCiAgICAgIGNoaWxkcmVuOiBbXQogICAgfTsKICAgIGFwcGx5QXNzaXN0KHRoaXMsIGF0dHJpYnV0ZXMpOwogICAgY29uc3QgYmJveCA9IGNvbXB1dGVCYm94KHRoaXMsIGh0bWwsIGF2YWlsYWJsZVNwYWNlKTsKICAgIGNvbnN0IHZhbHVlID0gdGhpcy52YWx1ZSA/IHRoaXMudmFsdWVbJHRvSFRNTF0oYXZhaWxhYmxlU3BhY2UpLmh0bWwgOiBudWxsOwogICAgaWYgKHZhbHVlID09PSBudWxsKSB7CiAgICAgIHRoaXMudyA9IHNhdmVkVzsKICAgICAgdGhpcy5oID0gc2F2ZWRIOwogICAgICB0aGlzWyRwb3BQYXJhXSgpOwogICAgICByZXR1cm4gSFRNTFJlc3VsdC5zdWNjZXNzKGNyZWF0ZVdyYXBwZXIodGhpcywgaHRtbCksIGJib3gpOwogICAgfQogICAgaHRtbC5jaGlsZHJlbi5wdXNoKHZhbHVlKTsKICAgIHNldFBhcmEodGhpcywgc3R5bGUsIHZhbHVlKTsKICAgIHRoaXMudyA9IHNhdmVkVzsKICAgIHRoaXMuaCA9IHNhdmVkSDsKICAgIHRoaXNbJHBvcFBhcmFdKCk7CiAgICByZXR1cm4gSFRNTFJlc3VsdC5zdWNjZXNzKGNyZWF0ZVdyYXBwZXIodGhpcywgaHRtbCksIGJib3gpOwogIH0KfQpjbGFzcyBFZGdlIGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihURU1QTEFURV9OU19JRCwgImVkZ2UiLCB0cnVlKTsKICAgIHRoaXMuY2FwID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMuY2FwLCBbInNxdWFyZSIsICJidXR0IiwgInJvdW5kIl0pOwogICAgdGhpcy5pZCA9IGF0dHJpYnV0ZXMuaWQgfHwgIiI7CiAgICB0aGlzLnByZXNlbmNlID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMucHJlc2VuY2UsIFsidmlzaWJsZSIsICJoaWRkZW4iLCAiaW5hY3RpdmUiLCAiaW52aXNpYmxlIl0pOwogICAgdGhpcy5zdHJva2UgPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy5zdHJva2UsIFsic29saWQiLCAiZGFzaERvdCIsICJkYXNoRG90RG90IiwgImRhc2hlZCIsICJkb3R0ZWQiLCAiZW1ib3NzZWQiLCAiZXRjaGVkIiwgImxvd2VyZWQiLCAicmFpc2VkIl0pOwogICAgdGhpcy50aGlja25lc3MgPSBnZXRNZWFzdXJlbWVudChhdHRyaWJ1dGVzLnRoaWNrbmVzcywgIjAuNXB0Iik7CiAgICB0aGlzLnVzZSA9IGF0dHJpYnV0ZXMudXNlIHx8ICIiOwogICAgdGhpcy51c2VocmVmID0gYXR0cmlidXRlcy51c2VocmVmIHx8ICIiOwogICAgdGhpcy5jb2xvciA9IG51bGw7CiAgICB0aGlzLmV4dHJhcyA9IG51bGw7CiAgfQogIFskdG9TdHlsZV0oKSB7CiAgICBjb25zdCBzdHlsZSA9IHRvU3R5bGUodGhpcywgInZpc2liaWxpdHkiKTsKICAgIE9iamVjdC5hc3NpZ24oc3R5bGUsIHsKICAgICAgbGluZWNhcDogdGhpcy5jYXAsCiAgICAgIHdpZHRoOiBtZWFzdXJlVG9TdHJpbmcodGhpcy50aGlja25lc3MpLAogICAgICBjb2xvcjogdGhpcy5jb2xvciA/IHRoaXMuY29sb3JbJHRvU3R5bGVdKCkgOiAiIzAwMDAwMCIsCiAgICAgIHN0eWxlOiAiIgogICAgfSk7CiAgICBpZiAodGhpcy5wcmVzZW5jZSAhPT0gInZpc2libGUiKSB7CiAgICAgIHN0eWxlLnN0eWxlID0gIm5vbmUiOwogICAgfSBlbHNlIHsKICAgICAgc3dpdGNoICh0aGlzLnN0cm9rZSkgewogICAgICAgIGNhc2UgInNvbGlkIjoKICAgICAgICAgIHN0eWxlLnN0eWxlID0gInNvbGlkIjsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgImRhc2hEb3QiOgogICAgICAgICAgc3R5bGUuc3R5bGUgPSAiZGFzaGVkIjsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgImRhc2hEb3REb3QiOgogICAgICAgICAgc3R5bGUuc3R5bGUgPSAiZGFzaGVkIjsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgImRhc2hlZCI6CiAgICAgICAgICBzdHlsZS5zdHlsZSA9ICJkYXNoZWQiOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAiZG90dGVkIjoKICAgICAgICAgIHN0eWxlLnN0eWxlID0gImRvdHRlZCI7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJlbWJvc3NlZCI6CiAgICAgICAgICBzdHlsZS5zdHlsZSA9ICJyaWRnZSI7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJldGNoZWQiOgogICAgICAgICAgc3R5bGUuc3R5bGUgPSAiZ3Jvb3ZlIjsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgImxvd2VyZWQiOgogICAgICAgICAgc3R5bGUuc3R5bGUgPSAiaW5zZXQiOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAicmFpc2VkIjoKICAgICAgICAgIHN0eWxlLnN0eWxlID0gIm91dHNldCI7CiAgICAgICAgICBicmVhazsKICAgICAgfQogICAgfQogICAgcmV0dXJuIHN0eWxlOwogIH0KfQpjbGFzcyBFbmNvZGluZyBleHRlbmRzIE9wdGlvbk9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJlbmNvZGluZyIsIFsiYWRiZS54NTA5LnJzYV9zaGExIiwgImFkYmUucGtjczcuZGV0YWNoZWQiLCAiYWRiZS5wa2NzNy5zaGExIl0pOwogICAgdGhpcy5pZCA9IGF0dHJpYnV0ZXMuaWQgfHwgIiI7CiAgICB0aGlzLnVzZSA9IGF0dHJpYnV0ZXMudXNlIHx8ICIiOwogICAgdGhpcy51c2VocmVmID0gYXR0cmlidXRlcy51c2VocmVmIHx8ICIiOwogIH0KfQpjbGFzcyBFbmNvZGluZ3MgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKFRFTVBMQVRFX05TX0lELCAiZW5jb2RpbmdzIiwgdHJ1ZSk7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMudHlwZSA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLnR5cGUsIFsib3B0aW9uYWwiLCAicmVxdWlyZWQiXSk7CiAgICB0aGlzLnVzZSA9IGF0dHJpYnV0ZXMudXNlIHx8ICIiOwogICAgdGhpcy51c2VocmVmID0gYXR0cmlidXRlcy51c2VocmVmIHx8ICIiOwogICAgdGhpcy5lbmNvZGluZyA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogIH0KfQpjbGFzcyBFbmNyeXB0IGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihURU1QTEFURV9OU19JRCwgImVuY3J5cHQiLCB0cnVlKTsKICAgIHRoaXMuaWQgPSBhdHRyaWJ1dGVzLmlkIHx8ICIiOwogICAgdGhpcy51c2UgPSBhdHRyaWJ1dGVzLnVzZSB8fCAiIjsKICAgIHRoaXMudXNlaHJlZiA9IGF0dHJpYnV0ZXMudXNlaHJlZiB8fCAiIjsKICAgIHRoaXMuY2VydGlmaWNhdGUgPSBudWxsOwogIH0KfQpjbGFzcyBFbmNyeXB0RGF0YSBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJlbmNyeXB0RGF0YSIsIHRydWUpOwogICAgdGhpcy5pZCA9IGF0dHJpYnV0ZXMuaWQgfHwgIiI7CiAgICB0aGlzLm9wZXJhdGlvbiA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLm9wZXJhdGlvbiwgWyJlbmNyeXB0IiwgImRlY3J5cHQiXSk7CiAgICB0aGlzLnRhcmdldCA9IGF0dHJpYnV0ZXMudGFyZ2V0IHx8ICIiOwogICAgdGhpcy51c2UgPSBhdHRyaWJ1dGVzLnVzZSB8fCAiIjsKICAgIHRoaXMudXNlaHJlZiA9IGF0dHJpYnV0ZXMudXNlaHJlZiB8fCAiIjsKICAgIHRoaXMuZmlsdGVyID0gbnVsbDsKICAgIHRoaXMubWFuaWZlc3QgPSBudWxsOwogIH0KfQpjbGFzcyBFbmNyeXB0aW9uIGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihURU1QTEFURV9OU19JRCwgImVuY3J5cHRpb24iLCB0cnVlKTsKICAgIHRoaXMuaWQgPSBhdHRyaWJ1dGVzLmlkIHx8ICIiOwogICAgdGhpcy50eXBlID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMudHlwZSwgWyJvcHRpb25hbCIsICJyZXF1aXJlZCJdKTsKICAgIHRoaXMudXNlID0gYXR0cmlidXRlcy51c2UgfHwgIiI7CiAgICB0aGlzLnVzZWhyZWYgPSBhdHRyaWJ1dGVzLnVzZWhyZWYgfHwgIiI7CiAgICB0aGlzLmNlcnRpZmljYXRlID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgfQp9CmNsYXNzIEVuY3J5cHRpb25NZXRob2QgZXh0ZW5kcyBPcHRpb25PYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKFRFTVBMQVRFX05TX0lELCAiZW5jcnlwdGlvbk1ldGhvZCIsIFsiIiwgIkFFUzI1Ni1DQkMiLCAiVFJJUExFREVTLUNCQyIsICJBRVMxMjgtQ0JDIiwgIkFFUzE5Mi1DQkMiXSk7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMudXNlID0gYXR0cmlidXRlcy51c2UgfHwgIiI7CiAgICB0aGlzLnVzZWhyZWYgPSBhdHRyaWJ1dGVzLnVzZWhyZWYgfHwgIiI7CiAgfQp9CmNsYXNzIEVuY3J5cHRpb25NZXRob2RzIGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihURU1QTEFURV9OU19JRCwgImVuY3J5cHRpb25NZXRob2RzIiwgdHJ1ZSk7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMudHlwZSA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLnR5cGUsIFsib3B0aW9uYWwiLCAicmVxdWlyZWQiXSk7CiAgICB0aGlzLnVzZSA9IGF0dHJpYnV0ZXMudXNlIHx8ICIiOwogICAgdGhpcy51c2VocmVmID0gYXR0cmlidXRlcy51c2VocmVmIHx8ICIiOwogICAgdGhpcy5lbmNyeXB0aW9uTWV0aG9kID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgfQp9CmNsYXNzIEV2ZW50IGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihURU1QTEFURV9OU19JRCwgImV2ZW50IiwgdHJ1ZSk7CiAgICB0aGlzLmFjdGl2aXR5ID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMuYWN0aXZpdHksIFsiY2xpY2siLCAiY2hhbmdlIiwgImRvY0Nsb3NlIiwgImRvY1JlYWR5IiwgImVudGVyIiwgImV4aXQiLCAiZnVsbCIsICJpbmRleENoYW5nZSIsICJpbml0aWFsaXplIiwgIm1vdXNlRG93biIsICJtb3VzZUVudGVyIiwgIm1vdXNlRXhpdCIsICJtb3VzZVVwIiwgInBvc3RFeGVjdXRlIiwgInBvc3RPcGVuIiwgInBvc3RQcmludCIsICJwb3N0U2F2ZSIsICJwb3N0U2lnbiIsICJwb3N0U3VibWl0IiwgInByZUV4ZWN1dGUiLCAicHJlT3BlbiIsICJwcmVQcmludCIsICJwcmVTYXZlIiwgInByZVNpZ24iLCAicHJlU3VibWl0IiwgInJlYWR5IiwgInZhbGlkYXRpb25TdGF0ZSJdKTsKICAgIHRoaXMuaWQgPSBhdHRyaWJ1dGVzLmlkIHx8ICIiOwogICAgdGhpcy5saXN0ZW4gPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy5saXN0ZW4sIFsicmVmT25seSIsICJyZWZBbmREZXNjZW5kZW50cyJdKTsKICAgIHRoaXMubmFtZSA9IGF0dHJpYnV0ZXMubmFtZSB8fCAiIjsKICAgIHRoaXMucmVmID0gYXR0cmlidXRlcy5yZWYgfHwgIiI7CiAgICB0aGlzLnVzZSA9IGF0dHJpYnV0ZXMudXNlIHx8ICIiOwogICAgdGhpcy51c2VocmVmID0gYXR0cmlidXRlcy51c2VocmVmIHx8ICIiOwogICAgdGhpcy5leHRyYXMgPSBudWxsOwogICAgdGhpcy5lbmNyeXB0RGF0YSA9IG51bGw7CiAgICB0aGlzLmV4ZWN1dGUgPSBudWxsOwogICAgdGhpcy5zY3JpcHQgPSBudWxsOwogICAgdGhpcy5zaWduRGF0YSA9IG51bGw7CiAgICB0aGlzLnN1Ym1pdCA9IG51bGw7CiAgfQp9CmNsYXNzIEV4RGF0YSBleHRlbmRzIENvbnRlbnRPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKFRFTVBMQVRFX05TX0lELCAiZXhEYXRhIik7CiAgICB0aGlzLmNvbnRlbnRUeXBlID0gYXR0cmlidXRlcy5jb250ZW50VHlwZSB8fCAiIjsKICAgIHRoaXMuaHJlZiA9IGF0dHJpYnV0ZXMuaHJlZiB8fCAiIjsKICAgIHRoaXMuaWQgPSBhdHRyaWJ1dGVzLmlkIHx8ICIiOwogICAgdGhpcy5tYXhMZW5ndGggPSBnZXRJbnRlZ2VyKHsKICAgICAgZGF0YTogYXR0cmlidXRlcy5tYXhMZW5ndGgsCiAgICAgIGRlZmF1bHRWYWx1ZTogLTEsCiAgICAgIHZhbGlkYXRlOiB4ID0+IHggPj0gLTEKICAgIH0pOwogICAgdGhpcy5uYW1lID0gYXR0cmlidXRlcy5uYW1lIHx8ICIiOwogICAgdGhpcy5yaWQgPSBhdHRyaWJ1dGVzLnJpZCB8fCAiIjsKICAgIHRoaXMudHJhbnNmZXJFbmNvZGluZyA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLnRyYW5zZmVyRW5jb2RpbmcsIFsibm9uZSIsICJiYXNlNjQiLCAicGFja2FnZSJdKTsKICAgIHRoaXMudXNlID0gYXR0cmlidXRlcy51c2UgfHwgIiI7CiAgICB0aGlzLnVzZWhyZWYgPSBhdHRyaWJ1dGVzLnVzZWhyZWYgfHwgIiI7CiAgfQogIFskaXNDREFUQVhtbF0oKSB7CiAgICByZXR1cm4gdGhpcy5jb250ZW50VHlwZSA9PT0gInRleHQvaHRtbCI7CiAgfQogIFskb25DaGlsZF0oY2hpbGQpIHsKICAgIGlmICh0aGlzLmNvbnRlbnRUeXBlID09PSAidGV4dC9odG1sIiAmJiBjaGlsZFskbmFtZXNwYWNlSWRdID09PSBOYW1lc3BhY2VJZHMueGh0bWwuaWQpIHsKICAgICAgdGhpc1skY29udGVudF0gPSBjaGlsZDsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICBpZiAodGhpcy5jb250ZW50VHlwZSA9PT0gInRleHQveG1sIikgewogICAgICB0aGlzWyRjb250ZW50XSA9IGNoaWxkOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIHJldHVybiBmYWxzZTsKICB9CiAgWyR0b0hUTUxdKGF2YWlsYWJsZVNwYWNlKSB7CiAgICBpZiAodGhpcy5jb250ZW50VHlwZSAhPT0gInRleHQvaHRtbCIgfHwgIXRoaXNbJGNvbnRlbnRdKSB7CiAgICAgIHJldHVybiBIVE1MUmVzdWx0LkVNUFRZOwogICAgfQogICAgcmV0dXJuIHRoaXNbJGNvbnRlbnRdWyR0b0hUTUxdKGF2YWlsYWJsZVNwYWNlKTsKICB9Cn0KY2xhc3MgRXhPYmplY3QgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKFRFTVBMQVRFX05TX0lELCAiZXhPYmplY3QiLCB0cnVlKTsKICAgIHRoaXMuYXJjaGl2ZSA9IGF0dHJpYnV0ZXMuYXJjaGl2ZSB8fCAiIjsKICAgIHRoaXMuY2xhc3NJZCA9IGF0dHJpYnV0ZXMuY2xhc3NJZCB8fCAiIjsKICAgIHRoaXMuY29kZUJhc2UgPSBhdHRyaWJ1dGVzLmNvZGVCYXNlIHx8ICIiOwogICAgdGhpcy5jb2RlVHlwZSA9IGF0dHJpYnV0ZXMuY29kZVR5cGUgfHwgIiI7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMubmFtZSA9IGF0dHJpYnV0ZXMubmFtZSB8fCAiIjsKICAgIHRoaXMudXNlID0gYXR0cmlidXRlcy51c2UgfHwgIiI7CiAgICB0aGlzLnVzZWhyZWYgPSBhdHRyaWJ1dGVzLnVzZWhyZWYgfHwgIiI7CiAgICB0aGlzLmV4dHJhcyA9IG51bGw7CiAgICB0aGlzLmJvb2xlYW4gPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuZGF0ZSA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5kYXRlVGltZSA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5kZWNpbWFsID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmV4RGF0YSA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5leE9iamVjdCA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5mbG9hdCA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5pbWFnZSA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5pbnRlZ2VyID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLnRleHQgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMudGltZSA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogIH0KfQpjbGFzcyBFeGNsR3JvdXAgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKFRFTVBMQVRFX05TX0lELCAiZXhjbEdyb3VwIiwgdHJ1ZSk7CiAgICB0aGlzLmFjY2VzcyA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLmFjY2VzcywgWyJvcGVuIiwgIm5vbkludGVyYWN0aXZlIiwgInByb3RlY3RlZCIsICJyZWFkT25seSJdKTsKICAgIHRoaXMuYWNjZXNzS2V5ID0gYXR0cmlidXRlcy5hY2Nlc3NLZXkgfHwgIiI7CiAgICB0aGlzLmFuY2hvclR5cGUgPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy5hbmNob3JUeXBlLCBbInRvcExlZnQiLCAiYm90dG9tQ2VudGVyIiwgImJvdHRvbUxlZnQiLCAiYm90dG9tUmlnaHQiLCAibWlkZGxlQ2VudGVyIiwgIm1pZGRsZUxlZnQiLCAibWlkZGxlUmlnaHQiLCAidG9wQ2VudGVyIiwgInRvcFJpZ2h0Il0pOwogICAgdGhpcy5jb2xTcGFuID0gZ2V0SW50ZWdlcih7CiAgICAgIGRhdGE6IGF0dHJpYnV0ZXMuY29sU3BhbiwKICAgICAgZGVmYXVsdFZhbHVlOiAxLAogICAgICB2YWxpZGF0ZTogbiA9PiBuID49IDEgfHwgbiA9PT0gLTEKICAgIH0pOwogICAgdGhpcy5oID0gYXR0cmlidXRlcy5oID8gZ2V0TWVhc3VyZW1lbnQoYXR0cmlidXRlcy5oKSA6ICIiOwogICAgdGhpcy5oQWxpZ24gPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy5oQWxpZ24sIFsibGVmdCIsICJjZW50ZXIiLCAianVzdGlmeSIsICJqdXN0aWZ5QWxsIiwgInJhZGl4IiwgInJpZ2h0Il0pOwogICAgdGhpcy5pZCA9IGF0dHJpYnV0ZXMuaWQgfHwgIiI7CiAgICB0aGlzLmxheW91dCA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLmxheW91dCwgWyJwb3NpdGlvbiIsICJsci10YiIsICJybC1yb3ciLCAicmwtdGIiLCAicm93IiwgInRhYmxlIiwgInRiIl0pOwogICAgdGhpcy5tYXhIID0gZ2V0TWVhc3VyZW1lbnQoYXR0cmlidXRlcy5tYXhILCAiMHB0Iik7CiAgICB0aGlzLm1heFcgPSBnZXRNZWFzdXJlbWVudChhdHRyaWJ1dGVzLm1heFcsICIwcHQiKTsKICAgIHRoaXMubWluSCA9IGdldE1lYXN1cmVtZW50KGF0dHJpYnV0ZXMubWluSCwgIjBwdCIpOwogICAgdGhpcy5taW5XID0gZ2V0TWVhc3VyZW1lbnQoYXR0cmlidXRlcy5taW5XLCAiMHB0Iik7CiAgICB0aGlzLm5hbWUgPSBhdHRyaWJ1dGVzLm5hbWUgfHwgIiI7CiAgICB0aGlzLnByZXNlbmNlID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMucHJlc2VuY2UsIFsidmlzaWJsZSIsICJoaWRkZW4iLCAiaW5hY3RpdmUiLCAiaW52aXNpYmxlIl0pOwogICAgdGhpcy5yZWxldmFudCA9IGdldFJlbGV2YW50KGF0dHJpYnV0ZXMucmVsZXZhbnQpOwogICAgdGhpcy51c2UgPSBhdHRyaWJ1dGVzLnVzZSB8fCAiIjsKICAgIHRoaXMudXNlaHJlZiA9IGF0dHJpYnV0ZXMudXNlaHJlZiB8fCAiIjsKICAgIHRoaXMudyA9IGF0dHJpYnV0ZXMudyA/IGdldE1lYXN1cmVtZW50KGF0dHJpYnV0ZXMudykgOiAiIjsKICAgIHRoaXMueCA9IGdldE1lYXN1cmVtZW50KGF0dHJpYnV0ZXMueCwgIjBwdCIpOwogICAgdGhpcy55ID0gZ2V0TWVhc3VyZW1lbnQoYXR0cmlidXRlcy55LCAiMHB0Iik7CiAgICB0aGlzLmFzc2lzdCA9IG51bGw7CiAgICB0aGlzLmJpbmQgPSBudWxsOwogICAgdGhpcy5ib3JkZXIgPSBudWxsOwogICAgdGhpcy5jYWxjdWxhdGUgPSBudWxsOwogICAgdGhpcy5jYXB0aW9uID0gbnVsbDsKICAgIHRoaXMuZGVzYyA9IG51bGw7CiAgICB0aGlzLmV4dHJhcyA9IG51bGw7CiAgICB0aGlzLm1hcmdpbiA9IG51bGw7CiAgICB0aGlzLnBhcmEgPSBudWxsOwogICAgdGhpcy50cmF2ZXJzYWwgPSBudWxsOwogICAgdGhpcy52YWxpZGF0ZSA9IG51bGw7CiAgICB0aGlzLmNvbm5lY3QgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuZXZlbnQgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuZmllbGQgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuc2V0UHJvcGVydHkgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICB9CiAgWyRpc0JpbmRhYmxlXSgpIHsKICAgIHJldHVybiB0cnVlOwogIH0KICBbJGhhc1NldHRhYmxlVmFsdWVdKCkgewogICAgcmV0dXJuIHRydWU7CiAgfQogIFskc2V0VmFsdWVdKHZhbHVlKSB7CiAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIHRoaXMuZmllbGQuY2hpbGRyZW4pIHsKICAgICAgaWYgKCFmaWVsZC52YWx1ZSkgewogICAgICAgIGNvbnN0IG5vZGVWYWx1ZSA9IG5ldyBWYWx1ZSh7fSk7CiAgICAgICAgZmllbGRbJGFwcGVuZENoaWxkXShub2RlVmFsdWUpOwogICAgICAgIGZpZWxkLnZhbHVlID0gbm9kZVZhbHVlOwogICAgICB9CiAgICAgIGZpZWxkLnZhbHVlWyRzZXRWYWx1ZV0odmFsdWUpOwogICAgfQogIH0KICBbJGlzVGhlcmVNb3JlV2lkdGhdKCkgewogICAgcmV0dXJuIHRoaXMubGF5b3V0LmVuZHNXaXRoKCItdGIiKSAmJiB0aGlzWyRleHRyYV0uYXR0ZW1wdCA9PT0gMCAmJiB0aGlzWyRleHRyYV0ubnVtYmVySW5MaW5lID4gMCB8fCB0aGlzWyRnZXRQYXJlbnRdKClbJGlzVGhlcmVNb3JlV2lkdGhdKCk7CiAgfQogIFskaXNTcGxpdHRhYmxlXSgpIHsKICAgIGNvbnN0IHBhcmVudCA9IHRoaXNbJGdldFN1YmZvcm1QYXJlbnRdKCk7CiAgICBpZiAoIXBhcmVudFskaXNTcGxpdHRhYmxlXSgpKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICAgIGlmICh0aGlzWyRleHRyYV0uX2lzU3BsaXR0YWJsZSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgIHJldHVybiB0aGlzWyRleHRyYV0uX2lzU3BsaXR0YWJsZTsKICAgIH0KICAgIGlmICh0aGlzLmxheW91dCA9PT0gInBvc2l0aW9uIiB8fCB0aGlzLmxheW91dC5pbmNsdWRlcygicm93IikpIHsKICAgICAgdGhpc1skZXh0cmFdLl9pc1NwbGl0dGFibGUgPSBmYWxzZTsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgaWYgKHBhcmVudC5sYXlvdXQ/LmVuZHNXaXRoKCItdGIiKSAmJiBwYXJlbnRbJGV4dHJhXS5udW1iZXJJbkxpbmUgIT09IDApIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgdGhpc1skZXh0cmFdLl9pc1NwbGl0dGFibGUgPSB0cnVlOwogICAgcmV0dXJuIHRydWU7CiAgfQogIFskZmx1c2hIVE1MXSgpIHsKICAgIHJldHVybiBmbHVzaEhUTUwodGhpcyk7CiAgfQogIFskYWRkSFRNTF0oaHRtbCwgYmJveCkgewogICAgYWRkSFRNTCh0aGlzLCBodG1sLCBiYm94KTsKICB9CiAgWyRnZXRBdmFpbGFibGVTcGFjZV0oKSB7CiAgICByZXR1cm4gZ2V0QXZhaWxhYmxlU3BhY2UodGhpcyk7CiAgfQogIFskdG9IVE1MXShhdmFpbGFibGVTcGFjZSkgewogICAgc2V0VGFiSW5kZXgodGhpcyk7CiAgICBpZiAodGhpcy5wcmVzZW5jZSA9PT0gImhpZGRlbiIgfHwgdGhpcy5wcmVzZW5jZSA9PT0gImluYWN0aXZlIiB8fCB0aGlzLmggPT09IDAgfHwgdGhpcy53ID09PSAwKSB7CiAgICAgIHJldHVybiBIVE1MUmVzdWx0LkVNUFRZOwogICAgfQogICAgZml4RGltZW5zaW9ucyh0aGlzKTsKICAgIGNvbnN0IGNoaWxkcmVuID0gW107CiAgICBjb25zdCBhdHRyaWJ1dGVzID0gewogICAgICBpZDogdGhpc1skdWlkXSwKICAgICAgY2xhc3M6IFtdCiAgICB9OwogICAgc2V0QWNjZXNzKHRoaXMsIGF0dHJpYnV0ZXMuY2xhc3MpOwogICAgdGhpc1skZXh0cmFdIHx8PSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgT2JqZWN0LmFzc2lnbih0aGlzWyRleHRyYV0sIHsKICAgICAgY2hpbGRyZW4sCiAgICAgIGF0dHJpYnV0ZXMsCiAgICAgIGF0dGVtcHQ6IDAsCiAgICAgIGxpbmU6IG51bGwsCiAgICAgIG51bWJlckluTGluZTogMCwKICAgICAgYXZhaWxhYmxlU3BhY2U6IHsKICAgICAgICB3aWR0aDogTWF0aC5taW4odGhpcy53IHx8IEluZmluaXR5LCBhdmFpbGFibGVTcGFjZS53aWR0aCksCiAgICAgICAgaGVpZ2h0OiBNYXRoLm1pbih0aGlzLmggfHwgSW5maW5pdHksIGF2YWlsYWJsZVNwYWNlLmhlaWdodCkKICAgICAgfSwKICAgICAgd2lkdGg6IDAsCiAgICAgIGhlaWdodDogMCwKICAgICAgcHJldkhlaWdodDogMCwKICAgICAgY3VycmVudFdpZHRoOiAwCiAgICB9KTsKICAgIGNvbnN0IGlzU3BsaXR0YWJsZSA9IHRoaXNbJGlzU3BsaXR0YWJsZV0oKTsKICAgIGlmICghaXNTcGxpdHRhYmxlKSB7CiAgICAgIHNldEZpcnN0VW5zcGxpdHRhYmxlKHRoaXMpOwogICAgfQogICAgaWYgKCFjaGVja0RpbWVuc2lvbnModGhpcywgYXZhaWxhYmxlU3BhY2UpKSB7CiAgICAgIHJldHVybiBIVE1MUmVzdWx0LkZBSUxVUkU7CiAgICB9CiAgICBjb25zdCBmaWx0ZXIgPSBuZXcgU2V0KFsiZmllbGQiXSk7CiAgICBpZiAodGhpcy5sYXlvdXQuaW5jbHVkZXMoInJvdyIpKSB7CiAgICAgIGNvbnN0IGNvbHVtbldpZHRocyA9IHRoaXNbJGdldFN1YmZvcm1QYXJlbnRdKCkuY29sdW1uV2lkdGhzOwogICAgICBpZiAoQXJyYXkuaXNBcnJheShjb2x1bW5XaWR0aHMpICYmIGNvbHVtbldpZHRocy5sZW5ndGggPiAwKSB7CiAgICAgICAgdGhpc1skZXh0cmFdLmNvbHVtbldpZHRocyA9IGNvbHVtbldpZHRoczsKICAgICAgICB0aGlzWyRleHRyYV0uY3VycmVudENvbHVtbiA9IDA7CiAgICAgIH0KICAgIH0KICAgIGNvbnN0IHN0eWxlID0gdG9TdHlsZSh0aGlzLCAiYW5jaG9yVHlwZSIsICJkaW1lbnNpb25zIiwgInBvc2l0aW9uIiwgInByZXNlbmNlIiwgImJvcmRlciIsICJtYXJnaW4iLCAiaEFsaWduIik7CiAgICBjb25zdCBjbGFzc05hbWVzID0gWyJ4ZmFFeGNsZ3JvdXAiXTsKICAgIGNvbnN0IGNsID0gbGF5b3V0Q2xhc3ModGhpcyk7CiAgICBpZiAoY2wpIHsKICAgICAgY2xhc3NOYW1lcy5wdXNoKGNsKTsKICAgIH0KICAgIGlmIChpc1ByaW50T25seSh0aGlzKSkgewogICAgICBjbGFzc05hbWVzLnB1c2goInhmYVByaW50T25seSIpOwogICAgfQogICAgYXR0cmlidXRlcy5zdHlsZSA9IHN0eWxlOwogICAgYXR0cmlidXRlcy5jbGFzcyA9IGNsYXNzTmFtZXM7CiAgICBpZiAodGhpcy5uYW1lKSB7CiAgICAgIGF0dHJpYnV0ZXMueGZhTmFtZSA9IHRoaXMubmFtZTsKICAgIH0KICAgIHRoaXNbJHB1c2hQYXJhXSgpOwogICAgY29uc3QgaXNMclRiID0gdGhpcy5sYXlvdXQgPT09ICJsci10YiIgfHwgdGhpcy5sYXlvdXQgPT09ICJybC10YiI7CiAgICBjb25zdCBtYXhSdW4gPSBpc0xyVGIgPyBNQVhfQVRURU1QVFNfRk9SX0xSVEJfTEFZT1VUIDogMTsKICAgIGZvciAoOyB0aGlzWyRleHRyYV0uYXR0ZW1wdCA8IG1heFJ1bjsgdGhpc1skZXh0cmFdLmF0dGVtcHQrKykgewogICAgICBpZiAoaXNMclRiICYmIHRoaXNbJGV4dHJhXS5hdHRlbXB0ID09PSBNQVhfQVRURU1QVFNfRk9SX0xSVEJfTEFZT1VUIC0gMSkgewogICAgICAgIHRoaXNbJGV4dHJhXS5udW1iZXJJbkxpbmUgPSAwOwogICAgICB9CiAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXNbJGNoaWxkcmVuVG9IVE1MXSh7CiAgICAgICAgZmlsdGVyLAogICAgICAgIGluY2x1ZGU6IHRydWUKICAgICAgfSk7CiAgICAgIGlmIChyZXN1bHQuc3VjY2VzcykgewogICAgICAgIGJyZWFrOwogICAgICB9CiAgICAgIGlmIChyZXN1bHQuaXNCcmVhaygpKSB7CiAgICAgICAgdGhpc1skcG9wUGFyYV0oKTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9CiAgICAgIGlmIChpc0xyVGIgJiYgdGhpc1skZXh0cmFdLmF0dGVtcHQgPT09IDAgJiYgdGhpc1skZXh0cmFdLm51bWJlckluTGluZSA9PT0gMCAmJiAhdGhpc1skZ2V0VGVtcGxhdGVSb290XSgpWyRleHRyYV0ubm9MYXlvdXRGYWlsdXJlKSB7CiAgICAgICAgdGhpc1skZXh0cmFdLmF0dGVtcHQgPSBtYXhSdW47CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KICAgIHRoaXNbJHBvcFBhcmFdKCk7CiAgICBpZiAoIWlzU3BsaXR0YWJsZSkgewogICAgICB1bnNldEZpcnN0VW5zcGxpdHRhYmxlKHRoaXMpOwogICAgfQogICAgaWYgKHRoaXNbJGV4dHJhXS5hdHRlbXB0ID09PSBtYXhSdW4pIHsKICAgICAgaWYgKCFpc1NwbGl0dGFibGUpIHsKICAgICAgICBkZWxldGUgdGhpc1skZXh0cmFdOwogICAgICB9CiAgICAgIHJldHVybiBIVE1MUmVzdWx0LkZBSUxVUkU7CiAgICB9CiAgICBsZXQgbWFyZ2luSCA9IDA7CiAgICBsZXQgbWFyZ2luViA9IDA7CiAgICBpZiAodGhpcy5tYXJnaW4pIHsKICAgICAgbWFyZ2luSCA9IHRoaXMubWFyZ2luLmxlZnRJbnNldCArIHRoaXMubWFyZ2luLnJpZ2h0SW5zZXQ7CiAgICAgIG1hcmdpblYgPSB0aGlzLm1hcmdpbi50b3BJbnNldCArIHRoaXMubWFyZ2luLmJvdHRvbUluc2V0OwogICAgfQogICAgY29uc3Qgd2lkdGggPSBNYXRoLm1heCh0aGlzWyRleHRyYV0ud2lkdGggKyBtYXJnaW5ILCB0aGlzLncgfHwgMCk7CiAgICBjb25zdCBoZWlnaHQgPSBNYXRoLm1heCh0aGlzWyRleHRyYV0uaGVpZ2h0ICsgbWFyZ2luViwgdGhpcy5oIHx8IDApOwogICAgY29uc3QgYmJveCA9IFt0aGlzLngsIHRoaXMueSwgd2lkdGgsIGhlaWdodF07CiAgICBpZiAodGhpcy53ID09PSAiIikgewogICAgICBzdHlsZS53aWR0aCA9IG1lYXN1cmVUb1N0cmluZyh3aWR0aCk7CiAgICB9CiAgICBpZiAodGhpcy5oID09PSAiIikgewogICAgICBzdHlsZS5oZWlnaHQgPSBtZWFzdXJlVG9TdHJpbmcoaGVpZ2h0KTsKICAgIH0KICAgIGNvbnN0IGh0bWwgPSB7CiAgICAgIG5hbWU6ICJkaXYiLAogICAgICBhdHRyaWJ1dGVzLAogICAgICBjaGlsZHJlbgogICAgfTsKICAgIGFwcGx5QXNzaXN0KHRoaXMsIGF0dHJpYnV0ZXMpOwogICAgZGVsZXRlIHRoaXNbJGV4dHJhXTsKICAgIHJldHVybiBIVE1MUmVzdWx0LnN1Y2Nlc3MoY3JlYXRlV3JhcHBlcih0aGlzLCBodG1sKSwgYmJveCk7CiAgfQp9CmNsYXNzIEV4ZWN1dGUgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKFRFTVBMQVRFX05TX0lELCAiZXhlY3V0ZSIpOwogICAgdGhpcy5jb25uZWN0aW9uID0gYXR0cmlidXRlcy5jb25uZWN0aW9uIHx8ICIiOwogICAgdGhpcy5leGVjdXRlVHlwZSA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLmV4ZWN1dGVUeXBlLCBbImltcG9ydCIsICJyZW1lcmdlIl0pOwogICAgdGhpcy5pZCA9IGF0dHJpYnV0ZXMuaWQgfHwgIiI7CiAgICB0aGlzLnJ1bkF0ID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMucnVuQXQsIFsiY2xpZW50IiwgImJvdGgiLCAic2VydmVyIl0pOwogICAgdGhpcy51c2UgPSBhdHRyaWJ1dGVzLnVzZSB8fCAiIjsKICAgIHRoaXMudXNlaHJlZiA9IGF0dHJpYnV0ZXMudXNlaHJlZiB8fCAiIjsKICB9Cn0KY2xhc3MgRXh0cmFzIGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihURU1QTEFURV9OU19JRCwgImV4dHJhcyIsIHRydWUpOwogICAgdGhpcy5pZCA9IGF0dHJpYnV0ZXMuaWQgfHwgIiI7CiAgICB0aGlzLm5hbWUgPSBhdHRyaWJ1dGVzLm5hbWUgfHwgIiI7CiAgICB0aGlzLnVzZSA9IGF0dHJpYnV0ZXMudXNlIHx8ICIiOwogICAgdGhpcy51c2VocmVmID0gYXR0cmlidXRlcy51c2VocmVmIHx8ICIiOwogICAgdGhpcy5ib29sZWFuID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmRhdGUgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuZGF0ZVRpbWUgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuZGVjaW1hbCA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5leERhdGEgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuZXh0cmFzID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmZsb2F0ID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmltYWdlID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmludGVnZXIgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMudGV4dCA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy50aW1lID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgfQp9CmNsYXNzIEZpZWxkIGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihURU1QTEFURV9OU19JRCwgImZpZWxkIiwgdHJ1ZSk7CiAgICB0aGlzLmFjY2VzcyA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLmFjY2VzcywgWyJvcGVuIiwgIm5vbkludGVyYWN0aXZlIiwgInByb3RlY3RlZCIsICJyZWFkT25seSJdKTsKICAgIHRoaXMuYWNjZXNzS2V5ID0gYXR0cmlidXRlcy5hY2Nlc3NLZXkgfHwgIiI7CiAgICB0aGlzLmFuY2hvclR5cGUgPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy5hbmNob3JUeXBlLCBbInRvcExlZnQiLCAiYm90dG9tQ2VudGVyIiwgImJvdHRvbUxlZnQiLCAiYm90dG9tUmlnaHQiLCAibWlkZGxlQ2VudGVyIiwgIm1pZGRsZUxlZnQiLCAibWlkZGxlUmlnaHQiLCAidG9wQ2VudGVyIiwgInRvcFJpZ2h0Il0pOwogICAgdGhpcy5jb2xTcGFuID0gZ2V0SW50ZWdlcih7CiAgICAgIGRhdGE6IGF0dHJpYnV0ZXMuY29sU3BhbiwKICAgICAgZGVmYXVsdFZhbHVlOiAxLAogICAgICB2YWxpZGF0ZTogbiA9PiBuID49IDEgfHwgbiA9PT0gLTEKICAgIH0pOwogICAgdGhpcy5oID0gYXR0cmlidXRlcy5oID8gZ2V0TWVhc3VyZW1lbnQoYXR0cmlidXRlcy5oKSA6ICIiOwogICAgdGhpcy5oQWxpZ24gPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy5oQWxpZ24sIFsibGVmdCIsICJjZW50ZXIiLCAianVzdGlmeSIsICJqdXN0aWZ5QWxsIiwgInJhZGl4IiwgInJpZ2h0Il0pOwogICAgdGhpcy5pZCA9IGF0dHJpYnV0ZXMuaWQgfHwgIiI7CiAgICB0aGlzLmxvY2FsZSA9IGF0dHJpYnV0ZXMubG9jYWxlIHx8ICIiOwogICAgdGhpcy5tYXhIID0gZ2V0TWVhc3VyZW1lbnQoYXR0cmlidXRlcy5tYXhILCAiMHB0Iik7CiAgICB0aGlzLm1heFcgPSBnZXRNZWFzdXJlbWVudChhdHRyaWJ1dGVzLm1heFcsICIwcHQiKTsKICAgIHRoaXMubWluSCA9IGdldE1lYXN1cmVtZW50KGF0dHJpYnV0ZXMubWluSCwgIjBwdCIpOwogICAgdGhpcy5taW5XID0gZ2V0TWVhc3VyZW1lbnQoYXR0cmlidXRlcy5taW5XLCAiMHB0Iik7CiAgICB0aGlzLm5hbWUgPSBhdHRyaWJ1dGVzLm5hbWUgfHwgIiI7CiAgICB0aGlzLnByZXNlbmNlID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMucHJlc2VuY2UsIFsidmlzaWJsZSIsICJoaWRkZW4iLCAiaW5hY3RpdmUiLCAiaW52aXNpYmxlIl0pOwogICAgdGhpcy5yZWxldmFudCA9IGdldFJlbGV2YW50KGF0dHJpYnV0ZXMucmVsZXZhbnQpOwogICAgdGhpcy5yb3RhdGUgPSBnZXRJbnRlZ2VyKHsKICAgICAgZGF0YTogYXR0cmlidXRlcy5yb3RhdGUsCiAgICAgIGRlZmF1bHRWYWx1ZTogMCwKICAgICAgdmFsaWRhdGU6IHggPT4geCAlIDkwID09PSAwCiAgICB9KTsKICAgIHRoaXMudXNlID0gYXR0cmlidXRlcy51c2UgfHwgIiI7CiAgICB0aGlzLnVzZWhyZWYgPSBhdHRyaWJ1dGVzLnVzZWhyZWYgfHwgIiI7CiAgICB0aGlzLncgPSBhdHRyaWJ1dGVzLncgPyBnZXRNZWFzdXJlbWVudChhdHRyaWJ1dGVzLncpIDogIiI7CiAgICB0aGlzLnggPSBnZXRNZWFzdXJlbWVudChhdHRyaWJ1dGVzLngsICIwcHQiKTsKICAgIHRoaXMueSA9IGdldE1lYXN1cmVtZW50KGF0dHJpYnV0ZXMueSwgIjBwdCIpOwogICAgdGhpcy5hc3Npc3QgPSBudWxsOwogICAgdGhpcy5iaW5kID0gbnVsbDsKICAgIHRoaXMuYm9yZGVyID0gbnVsbDsKICAgIHRoaXMuY2FsY3VsYXRlID0gbnVsbDsKICAgIHRoaXMuY2FwdGlvbiA9IG51bGw7CiAgICB0aGlzLmRlc2MgPSBudWxsOwogICAgdGhpcy5leHRyYXMgPSBudWxsOwogICAgdGhpcy5mb250ID0gbnVsbDsKICAgIHRoaXMuZm9ybWF0ID0gbnVsbDsKICAgIHRoaXMuaXRlbXMgPSBuZXcgWEZBT2JqZWN0QXJyYXkoMik7CiAgICB0aGlzLmtlZXAgPSBudWxsOwogICAgdGhpcy5tYXJnaW4gPSBudWxsOwogICAgdGhpcy5wYXJhID0gbnVsbDsKICAgIHRoaXMudHJhdmVyc2FsID0gbnVsbDsKICAgIHRoaXMudWkgPSBudWxsOwogICAgdGhpcy52YWxpZGF0ZSA9IG51bGw7CiAgICB0aGlzLnZhbHVlID0gbnVsbDsKICAgIHRoaXMuYmluZEl0ZW1zID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmNvbm5lY3QgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuZXZlbnQgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuc2V0UHJvcGVydHkgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICB9CiAgWyRpc0JpbmRhYmxlXSgpIHsKICAgIHJldHVybiB0cnVlOwogIH0KICBbJHNldFZhbHVlXSh2YWx1ZSkgewogICAgX3NldFZhbHVlKHRoaXMsIHZhbHVlKTsKICB9CiAgWyR0b0hUTUxdKGF2YWlsYWJsZVNwYWNlKSB7CiAgICBzZXRUYWJJbmRleCh0aGlzKTsKICAgIGlmICghdGhpcy51aSkgewogICAgICB0aGlzLnVpID0gbmV3IFVpKHt9KTsKICAgICAgdGhpcy51aVskZ2xvYmFsRGF0YV0gPSB0aGlzWyRnbG9iYWxEYXRhXTsKICAgICAgdGhpc1skYXBwZW5kQ2hpbGRdKHRoaXMudWkpOwogICAgICBsZXQgbm9kZTsKICAgICAgc3dpdGNoICh0aGlzLml0ZW1zLmNoaWxkcmVuLmxlbmd0aCkgewogICAgICAgIGNhc2UgMDoKICAgICAgICAgIG5vZGUgPSBuZXcgVGV4dEVkaXQoe30pOwogICAgICAgICAgdGhpcy51aS50ZXh0RWRpdCA9IG5vZGU7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIDE6CiAgICAgICAgICBub2RlID0gbmV3IENoZWNrQnV0dG9uKHt9KTsKICAgICAgICAgIHRoaXMudWkuY2hlY2tCdXR0b24gPSBub2RlOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAyOgogICAgICAgICAgbm9kZSA9IG5ldyBDaG9pY2VMaXN0KHt9KTsKICAgICAgICAgIHRoaXMudWkuY2hvaWNlTGlzdCA9IG5vZGU7CiAgICAgICAgICBicmVhazsKICAgICAgfQogICAgICB0aGlzLnVpWyRhcHBlbmRDaGlsZF0obm9kZSk7CiAgICB9CiAgICBpZiAoIXRoaXMudWkgfHwgdGhpcy5wcmVzZW5jZSA9PT0gImhpZGRlbiIgfHwgdGhpcy5wcmVzZW5jZSA9PT0gImluYWN0aXZlIiB8fCB0aGlzLmggPT09IDAgfHwgdGhpcy53ID09PSAwKSB7CiAgICAgIHJldHVybiBIVE1MUmVzdWx0LkVNUFRZOwogICAgfQogICAgaWYgKHRoaXMuY2FwdGlvbikgewogICAgICBkZWxldGUgdGhpcy5jYXB0aW9uWyRleHRyYV07CiAgICB9CiAgICB0aGlzWyRwdXNoUGFyYV0oKTsKICAgIGNvbnN0IGNhcHRpb24gPSB0aGlzLmNhcHRpb24gPyB0aGlzLmNhcHRpb25bJHRvSFRNTF0oYXZhaWxhYmxlU3BhY2UpLmh0bWwgOiBudWxsOwogICAgY29uc3Qgc2F2ZWRXID0gdGhpcy53OwogICAgY29uc3Qgc2F2ZWRIID0gdGhpcy5oOwogICAgbGV0IG1hcmdpbkggPSAwOwogICAgbGV0IG1hcmdpblYgPSAwOwogICAgaWYgKHRoaXMubWFyZ2luKSB7CiAgICAgIG1hcmdpbkggPSB0aGlzLm1hcmdpbi5sZWZ0SW5zZXQgKyB0aGlzLm1hcmdpbi5yaWdodEluc2V0OwogICAgICBtYXJnaW5WID0gdGhpcy5tYXJnaW4udG9wSW5zZXQgKyB0aGlzLm1hcmdpbi5ib3R0b21JbnNldDsKICAgIH0KICAgIGxldCBib3JkZXJEaW1zID0gbnVsbDsKICAgIGlmICh0aGlzLncgPT09ICIiIHx8IHRoaXMuaCA9PT0gIiIpIHsKICAgICAgbGV0IHdpZHRoID0gbnVsbDsKICAgICAgbGV0IGhlaWdodCA9IG51bGw7CiAgICAgIGxldCB1aVcgPSAwOwogICAgICBsZXQgdWlIID0gMDsKICAgICAgaWYgKHRoaXMudWkuY2hlY2tCdXR0b24pIHsKICAgICAgICB1aVcgPSB1aUggPSB0aGlzLnVpLmNoZWNrQnV0dG9uLnNpemU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY29uc3QgewogICAgICAgICAgdywKICAgICAgICAgIGgKICAgICAgICB9ID0gbGF5b3V0Tm9kZSh0aGlzLCBhdmFpbGFibGVTcGFjZSk7CiAgICAgICAgaWYgKHcgIT09IG51bGwpIHsKICAgICAgICAgIHVpVyA9IHc7CiAgICAgICAgICB1aUggPSBoOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB1aUggPSBmb250c19nZXRNZXRyaWNzKHRoaXMuZm9udCwgdHJ1ZSkubGluZU5vR2FwOwogICAgICAgIH0KICAgICAgfQogICAgICBib3JkZXJEaW1zID0gZ2V0Qm9yZGVyRGltcyh0aGlzLnVpWyRnZXRFeHRyYV0oKSk7CiAgICAgIHVpVyArPSBib3JkZXJEaW1zLnc7CiAgICAgIHVpSCArPSBib3JkZXJEaW1zLmg7CiAgICAgIGlmICh0aGlzLmNhcHRpb24pIHsKICAgICAgICBjb25zdCB7CiAgICAgICAgICB3LAogICAgICAgICAgaCwKICAgICAgICAgIGlzQnJva2VuCiAgICAgICAgfSA9IHRoaXMuY2FwdGlvblskZ2V0RXh0cmFdKGF2YWlsYWJsZVNwYWNlKTsKICAgICAgICBpZiAoaXNCcm9rZW4gJiYgdGhpc1skZ2V0U3ViZm9ybVBhcmVudF0oKVskaXNUaGVyZU1vcmVXaWR0aF0oKSkgewogICAgICAgICAgdGhpc1skcG9wUGFyYV0oKTsKICAgICAgICAgIHJldHVybiBIVE1MUmVzdWx0LkZBSUxVUkU7CiAgICAgICAgfQogICAgICAgIHdpZHRoID0gdzsKICAgICAgICBoZWlnaHQgPSBoOwogICAgICAgIHN3aXRjaCAodGhpcy5jYXB0aW9uLnBsYWNlbWVudCkgewogICAgICAgICAgY2FzZSAibGVmdCI6CiAgICAgICAgICBjYXNlICJyaWdodCI6CiAgICAgICAgICBjYXNlICJpbmxpbmUiOgogICAgICAgICAgICB3aWR0aCArPSB1aVc7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSAidG9wIjoKICAgICAgICAgIGNhc2UgImJvdHRvbSI6CiAgICAgICAgICAgIGhlaWdodCArPSB1aUg7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICB3aWR0aCA9IHVpVzsKICAgICAgICBoZWlnaHQgPSB1aUg7CiAgICAgIH0KICAgICAgaWYgKHdpZHRoICYmIHRoaXMudyA9PT0gIiIpIHsKICAgICAgICB3aWR0aCArPSBtYXJnaW5IOwogICAgICAgIHRoaXMudyA9IE1hdGgubWluKHRoaXMubWF4VyA8PSAwID8gSW5maW5pdHkgOiB0aGlzLm1heFcsIHRoaXMubWluVyArIDEgPCB3aWR0aCA/IHdpZHRoIDogdGhpcy5taW5XKTsKICAgICAgfQogICAgICBpZiAoaGVpZ2h0ICYmIHRoaXMuaCA9PT0gIiIpIHsKICAgICAgICBoZWlnaHQgKz0gbWFyZ2luVjsKICAgICAgICB0aGlzLmggPSBNYXRoLm1pbih0aGlzLm1heEggPD0gMCA/IEluZmluaXR5IDogdGhpcy5tYXhILCB0aGlzLm1pbkggKyAxIDwgaGVpZ2h0ID8gaGVpZ2h0IDogdGhpcy5taW5IKTsKICAgICAgfQogICAgfQogICAgdGhpc1skcG9wUGFyYV0oKTsKICAgIGZpeERpbWVuc2lvbnModGhpcyk7CiAgICBzZXRGaXJzdFVuc3BsaXR0YWJsZSh0aGlzKTsKICAgIGlmICghY2hlY2tEaW1lbnNpb25zKHRoaXMsIGF2YWlsYWJsZVNwYWNlKSkgewogICAgICB0aGlzLncgPSBzYXZlZFc7CiAgICAgIHRoaXMuaCA9IHNhdmVkSDsKICAgICAgdGhpc1skcG9wUGFyYV0oKTsKICAgICAgcmV0dXJuIEhUTUxSZXN1bHQuRkFJTFVSRTsKICAgIH0KICAgIHVuc2V0Rmlyc3RVbnNwbGl0dGFibGUodGhpcyk7CiAgICBjb25zdCBzdHlsZSA9IHRvU3R5bGUodGhpcywgImZvbnQiLCAiZGltZW5zaW9ucyIsICJwb3NpdGlvbiIsICJyb3RhdGUiLCAiYW5jaG9yVHlwZSIsICJwcmVzZW5jZSIsICJtYXJnaW4iLCAiaEFsaWduIik7CiAgICBzZXRNaW5NYXhEaW1lbnNpb25zKHRoaXMsIHN0eWxlKTsKICAgIGNvbnN0IGNsYXNzTmFtZXMgPSBbInhmYUZpZWxkIl07CiAgICBpZiAodGhpcy5mb250KSB7CiAgICAgIGNsYXNzTmFtZXMucHVzaCgieGZhRm9udCIpOwogICAgfQogICAgaWYgKGlzUHJpbnRPbmx5KHRoaXMpKSB7CiAgICAgIGNsYXNzTmFtZXMucHVzaCgieGZhUHJpbnRPbmx5Iik7CiAgICB9CiAgICBjb25zdCBhdHRyaWJ1dGVzID0gewogICAgICBzdHlsZSwKICAgICAgaWQ6IHRoaXNbJHVpZF0sCiAgICAgIGNsYXNzOiBjbGFzc05hbWVzCiAgICB9OwogICAgaWYgKHN0eWxlLm1hcmdpbikgewogICAgICBzdHlsZS5wYWRkaW5nID0gc3R5bGUubWFyZ2luOwogICAgICBkZWxldGUgc3R5bGUubWFyZ2luOwogICAgfQogICAgc2V0QWNjZXNzKHRoaXMsIGNsYXNzTmFtZXMpOwogICAgaWYgKHRoaXMubmFtZSkgewogICAgICBhdHRyaWJ1dGVzLnhmYU5hbWUgPSB0aGlzLm5hbWU7CiAgICB9CiAgICBjb25zdCBjaGlsZHJlbiA9IFtdOwogICAgY29uc3QgaHRtbCA9IHsKICAgICAgbmFtZTogImRpdiIsCiAgICAgIGF0dHJpYnV0ZXMsCiAgICAgIGNoaWxkcmVuCiAgICB9OwogICAgYXBwbHlBc3Npc3QodGhpcywgYXR0cmlidXRlcyk7CiAgICBjb25zdCBib3JkZXJTdHlsZSA9IHRoaXMuYm9yZGVyID8gdGhpcy5ib3JkZXJbJHRvU3R5bGVdKCkgOiBudWxsOwogICAgY29uc3QgYmJveCA9IGNvbXB1dGVCYm94KHRoaXMsIGh0bWwsIGF2YWlsYWJsZVNwYWNlKTsKICAgIGNvbnN0IHVpID0gdGhpcy51aVskdG9IVE1MXSgpLmh0bWw7CiAgICBpZiAoIXVpKSB7CiAgICAgIE9iamVjdC5hc3NpZ24oc3R5bGUsIGJvcmRlclN0eWxlKTsKICAgICAgcmV0dXJuIEhUTUxSZXN1bHQuc3VjY2VzcyhjcmVhdGVXcmFwcGVyKHRoaXMsIGh0bWwpLCBiYm94KTsKICAgIH0KICAgIGlmICh0aGlzWyR0YWJJbmRleF0pIHsKICAgICAgaWYgKHVpLmNoaWxkcmVuPy5bMF0pIHsKICAgICAgICB1aS5jaGlsZHJlblswXS5hdHRyaWJ1dGVzLnRhYmluZGV4ID0gdGhpc1skdGFiSW5kZXhdOwogICAgICB9IGVsc2UgewogICAgICAgIHVpLmF0dHJpYnV0ZXMudGFiaW5kZXggPSB0aGlzWyR0YWJJbmRleF07CiAgICAgIH0KICAgIH0KICAgIHVpLmF0dHJpYnV0ZXMuc3R5bGUgfHw9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgICBsZXQgYUVsZW1lbnQgPSBudWxsOwogICAgaWYgKHRoaXMudWkuYnV0dG9uKSB7CiAgICAgIGlmICh1aS5jaGlsZHJlbi5sZW5ndGggPT09IDEpIHsKICAgICAgICBbYUVsZW1lbnRdID0gdWkuY2hpbGRyZW4uc3BsaWNlKDAsIDEpOwogICAgICB9CiAgICAgIE9iamVjdC5hc3NpZ24odWkuYXR0cmlidXRlcy5zdHlsZSwgYm9yZGVyU3R5bGUpOwogICAgfSBlbHNlIHsKICAgICAgT2JqZWN0LmFzc2lnbihzdHlsZSwgYm9yZGVyU3R5bGUpOwogICAgfQogICAgY2hpbGRyZW4ucHVzaCh1aSk7CiAgICBpZiAodGhpcy52YWx1ZSkgewogICAgICBpZiAodGhpcy51aS5pbWFnZUVkaXQpIHsKICAgICAgICB1aS5jaGlsZHJlbi5wdXNoKHRoaXMudmFsdWVbJHRvSFRNTF0oKS5odG1sKTsKICAgICAgfSBlbHNlIGlmICghdGhpcy51aS5idXR0b24pIHsKICAgICAgICBsZXQgdmFsdWUgPSAiIjsKICAgICAgICBpZiAodGhpcy52YWx1ZS5leERhdGEpIHsKICAgICAgICAgIHZhbHVlID0gdGhpcy52YWx1ZS5leERhdGFbJHRleHRdKCk7CiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnZhbHVlLnRleHQpIHsKICAgICAgICAgIHZhbHVlID0gdGhpcy52YWx1ZS50ZXh0WyRnZXRFeHRyYV0oKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY29uc3QgaHRtbFZhbHVlID0gdGhpcy52YWx1ZVskdG9IVE1MXSgpLmh0bWw7CiAgICAgICAgICBpZiAoaHRtbFZhbHVlICE9PSBudWxsKSB7CiAgICAgICAgICAgIHZhbHVlID0gaHRtbFZhbHVlLmNoaWxkcmVuWzBdLnZhbHVlOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAodGhpcy51aS50ZXh0RWRpdCAmJiB0aGlzLnZhbHVlLnRleHQ/Lm1heENoYXJzKSB7CiAgICAgICAgICB1aS5jaGlsZHJlblswXS5hdHRyaWJ1dGVzLm1heExlbmd0aCA9IHRoaXMudmFsdWUudGV4dC5tYXhDaGFyczsKICAgICAgICB9CiAgICAgICAgaWYgKHZhbHVlKSB7CiAgICAgICAgICBpZiAodGhpcy51aS5udW1lcmljRWRpdCkgewogICAgICAgICAgICB2YWx1ZSA9IHBhcnNlRmxvYXQodmFsdWUpOwogICAgICAgICAgICB2YWx1ZSA9IGlzTmFOKHZhbHVlKSA/ICIiIDogdmFsdWUudG9TdHJpbmcoKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh1aS5jaGlsZHJlblswXS5uYW1lID09PSAidGV4dGFyZWEiKSB7CiAgICAgICAgICAgIHVpLmNoaWxkcmVuWzBdLmF0dHJpYnV0ZXMudGV4dENvbnRlbnQgPSB2YWx1ZTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHVpLmNoaWxkcmVuWzBdLmF0dHJpYnV0ZXMudmFsdWUgPSB2YWx1ZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIGlmICghdGhpcy51aS5pbWFnZUVkaXQgJiYgdWkuY2hpbGRyZW4/LlswXSAmJiB0aGlzLmgpIHsKICAgICAgYm9yZGVyRGltcyA9IGJvcmRlckRpbXMgfHwgZ2V0Qm9yZGVyRGltcyh0aGlzLnVpWyRnZXRFeHRyYV0oKSk7CiAgICAgIGxldCBjYXB0aW9uSGVpZ2h0ID0gMDsKICAgICAgaWYgKHRoaXMuY2FwdGlvbiAmJiBbInRvcCIsICJib3R0b20iXS5pbmNsdWRlcyh0aGlzLmNhcHRpb24ucGxhY2VtZW50KSkgewogICAgICAgIGNhcHRpb25IZWlnaHQgPSB0aGlzLmNhcHRpb24ucmVzZXJ2ZTsKICAgICAgICBpZiAoY2FwdGlvbkhlaWdodCA8PSAwKSB7CiAgICAgICAgICBjYXB0aW9uSGVpZ2h0ID0gdGhpcy5jYXB0aW9uWyRnZXRFeHRyYV0oYXZhaWxhYmxlU3BhY2UpLmg7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGlucHV0SGVpZ2h0ID0gdGhpcy5oIC0gY2FwdGlvbkhlaWdodCAtIG1hcmdpblYgLSBib3JkZXJEaW1zLmg7CiAgICAgICAgdWkuY2hpbGRyZW5bMF0uYXR0cmlidXRlcy5zdHlsZS5oZWlnaHQgPSBtZWFzdXJlVG9TdHJpbmcoaW5wdXRIZWlnaHQpOwogICAgICB9IGVsc2UgewogICAgICAgIHVpLmNoaWxkcmVuWzBdLmF0dHJpYnV0ZXMuc3R5bGUuaGVpZ2h0ID0gIjEwMCUiOwogICAgICB9CiAgICB9CiAgICBpZiAoYUVsZW1lbnQpIHsKICAgICAgdWkuY2hpbGRyZW4ucHVzaChhRWxlbWVudCk7CiAgICB9CiAgICBpZiAoIWNhcHRpb24pIHsKICAgICAgaWYgKHVpLmF0dHJpYnV0ZXMuY2xhc3MpIHsKICAgICAgICB1aS5hdHRyaWJ1dGVzLmNsYXNzLnB1c2goInhmYUxlZnQiKTsKICAgICAgfQogICAgICB0aGlzLncgPSBzYXZlZFc7CiAgICAgIHRoaXMuaCA9IHNhdmVkSDsKICAgICAgcmV0dXJuIEhUTUxSZXN1bHQuc3VjY2VzcyhjcmVhdGVXcmFwcGVyKHRoaXMsIGh0bWwpLCBiYm94KTsKICAgIH0KICAgIGlmICh0aGlzLnVpLmJ1dHRvbikgewogICAgICBpZiAoc3R5bGUucGFkZGluZykgewogICAgICAgIGRlbGV0ZSBzdHlsZS5wYWRkaW5nOwogICAgICB9CiAgICAgIGlmIChjYXB0aW9uLm5hbWUgPT09ICJkaXYiKSB7CiAgICAgICAgY2FwdGlvbi5uYW1lID0gInNwYW4iOwogICAgICB9CiAgICAgIHVpLmNoaWxkcmVuLnB1c2goY2FwdGlvbik7CiAgICAgIHJldHVybiBIVE1MUmVzdWx0LnN1Y2Nlc3MoaHRtbCwgYmJveCk7CiAgICB9IGVsc2UgaWYgKHRoaXMudWkuY2hlY2tCdXR0b24pIHsKICAgICAgY2FwdGlvbi5hdHRyaWJ1dGVzLmNsYXNzWzBdID0gInhmYUNhcHRpb25Gb3JDaGVja0J1dHRvbiI7CiAgICB9CiAgICB1aS5hdHRyaWJ1dGVzLmNsYXNzIHx8PSBbXTsKICAgIHVpLmNoaWxkcmVuLnNwbGljZSgwLCAwLCBjYXB0aW9uKTsKICAgIHN3aXRjaCAodGhpcy5jYXB0aW9uLnBsYWNlbWVudCkgewogICAgICBjYXNlICJsZWZ0IjoKICAgICAgICB1aS5hdHRyaWJ1dGVzLmNsYXNzLnB1c2goInhmYUxlZnQiKTsKICAgICAgICBicmVhazsKICAgICAgY2FzZSAicmlnaHQiOgogICAgICAgIHVpLmF0dHJpYnV0ZXMuY2xhc3MucHVzaCgieGZhUmlnaHQiKTsKICAgICAgICBicmVhazsKICAgICAgY2FzZSAidG9wIjoKICAgICAgICB1aS5hdHRyaWJ1dGVzLmNsYXNzLnB1c2goInhmYVRvcCIpOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlICJib3R0b20iOgogICAgICAgIHVpLmF0dHJpYnV0ZXMuY2xhc3MucHVzaCgieGZhQm90dG9tIik7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgImlubGluZSI6CiAgICAgICAgdWkuYXR0cmlidXRlcy5jbGFzcy5wdXNoKCJ4ZmFMZWZ0Iik7CiAgICAgICAgYnJlYWs7CiAgICB9CiAgICB0aGlzLncgPSBzYXZlZFc7CiAgICB0aGlzLmggPSBzYXZlZEg7CiAgICByZXR1cm4gSFRNTFJlc3VsdC5zdWNjZXNzKGNyZWF0ZVdyYXBwZXIodGhpcywgaHRtbCksIGJib3gpOwogIH0KfQpjbGFzcyBGaWxsIGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihURU1QTEFURV9OU19JRCwgImZpbGwiLCB0cnVlKTsKICAgIHRoaXMuaWQgPSBhdHRyaWJ1dGVzLmlkIHx8ICIiOwogICAgdGhpcy5wcmVzZW5jZSA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLnByZXNlbmNlLCBbInZpc2libGUiLCAiaGlkZGVuIiwgImluYWN0aXZlIiwgImludmlzaWJsZSJdKTsKICAgIHRoaXMudXNlID0gYXR0cmlidXRlcy51c2UgfHwgIiI7CiAgICB0aGlzLnVzZWhyZWYgPSBhdHRyaWJ1dGVzLnVzZWhyZWYgfHwgIiI7CiAgICB0aGlzLmNvbG9yID0gbnVsbDsKICAgIHRoaXMuZXh0cmFzID0gbnVsbDsKICAgIHRoaXMubGluZWFyID0gbnVsbDsKICAgIHRoaXMucGF0dGVybiA9IG51bGw7CiAgICB0aGlzLnJhZGlhbCA9IG51bGw7CiAgICB0aGlzLnNvbGlkID0gbnVsbDsKICAgIHRoaXMuc3RpcHBsZSA9IG51bGw7CiAgfQogIFskdG9TdHlsZV0oKSB7CiAgICBjb25zdCBwYXJlbnQgPSB0aGlzWyRnZXRQYXJlbnRdKCk7CiAgICBjb25zdCBncmFuZHBhID0gcGFyZW50WyRnZXRQYXJlbnRdKCk7CiAgICBjb25zdCBnZ3JhbmRwYSA9IGdyYW5kcGFbJGdldFBhcmVudF0oKTsKICAgIGNvbnN0IHN0eWxlID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgIGxldCBwcm9wTmFtZSA9ICJjb2xvciI7CiAgICBsZXQgYWx0UHJvcE5hbWUgPSBwcm9wTmFtZTsKICAgIGlmIChwYXJlbnQgaW5zdGFuY2VvZiBCb3JkZXIpIHsKICAgICAgcHJvcE5hbWUgPSAiYmFja2dyb3VuZC1jb2xvciI7CiAgICAgIGFsdFByb3BOYW1lID0gImJhY2tncm91bmQiOwogICAgICBpZiAoZ2dyYW5kcGEgaW5zdGFuY2VvZiBVaSkgewogICAgICAgIHN0eWxlLmJhY2tncm91bmRDb2xvciA9ICJ3aGl0ZSI7CiAgICAgIH0KICAgIH0KICAgIGlmIChwYXJlbnQgaW5zdGFuY2VvZiBSZWN0YW5nbGUgfHwgcGFyZW50IGluc3RhbmNlb2YgQXJjKSB7CiAgICAgIHByb3BOYW1lID0gYWx0UHJvcE5hbWUgPSAiZmlsbCI7CiAgICAgIHN0eWxlLmZpbGwgPSAid2hpdGUiOwogICAgfQogICAgZm9yIChjb25zdCBuYW1lIG9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpKSB7CiAgICAgIGlmIChuYW1lID09PSAiZXh0cmFzIiB8fCBuYW1lID09PSAiY29sb3IiKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgY29uc3Qgb2JqID0gdGhpc1tuYW1lXTsKICAgICAgaWYgKCEob2JqIGluc3RhbmNlb2YgWEZBT2JqZWN0KSkgewogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGNvbnN0IGNvbG9yID0gb2JqWyR0b1N0eWxlXSh0aGlzLmNvbG9yKTsKICAgICAgaWYgKGNvbG9yKSB7CiAgICAgICAgc3R5bGVbY29sb3Iuc3RhcnRzV2l0aCgiIyIpID8gcHJvcE5hbWUgOiBhbHRQcm9wTmFtZV0gPSBjb2xvcjsKICAgICAgfQogICAgICByZXR1cm4gc3R5bGU7CiAgICB9CiAgICBpZiAodGhpcy5jb2xvcj8udmFsdWUpIHsKICAgICAgY29uc3QgY29sb3IgPSB0aGlzLmNvbG9yWyR0b1N0eWxlXSgpOwogICAgICBzdHlsZVtjb2xvci5zdGFydHNXaXRoKCIjIikgPyBwcm9wTmFtZSA6IGFsdFByb3BOYW1lXSA9IGNvbG9yOwogICAgfQogICAgcmV0dXJuIHN0eWxlOwogIH0KfQpjbGFzcyBGaWx0ZXIgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKFRFTVBMQVRFX05TX0lELCAiZmlsdGVyIiwgdHJ1ZSk7CiAgICB0aGlzLmFkZFJldm9jYXRpb25JbmZvID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMuYWRkUmV2b2NhdGlvbkluZm8sIFsiIiwgInJlcXVpcmVkIiwgIm9wdGlvbmFsIiwgIm5vbmUiXSk7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMubmFtZSA9IGF0dHJpYnV0ZXMubmFtZSB8fCAiIjsKICAgIHRoaXMudXNlID0gYXR0cmlidXRlcy51c2UgfHwgIiI7CiAgICB0aGlzLnVzZWhyZWYgPSBhdHRyaWJ1dGVzLnVzZWhyZWYgfHwgIiI7CiAgICB0aGlzLnZlcnNpb24gPSBnZXRJbnRlZ2VyKHsKICAgICAgZGF0YTogdGhpcy52ZXJzaW9uLAogICAgICBkZWZhdWx0VmFsdWU6IDUsCiAgICAgIHZhbGlkYXRlOiB4ID0+IHggPj0gMSAmJiB4IDw9IDUKICAgIH0pOwogICAgdGhpcy5hcHBlYXJhbmNlRmlsdGVyID0gbnVsbDsKICAgIHRoaXMuY2VydGlmaWNhdGVzID0gbnVsbDsKICAgIHRoaXMuZGlnZXN0TWV0aG9kcyA9IG51bGw7CiAgICB0aGlzLmVuY29kaW5ncyA9IG51bGw7CiAgICB0aGlzLmVuY3J5cHRpb25NZXRob2RzID0gbnVsbDsKICAgIHRoaXMuaGFuZGxlciA9IG51bGw7CiAgICB0aGlzLmxvY2tEb2N1bWVudCA9IG51bGw7CiAgICB0aGlzLm1kcCA9IG51bGw7CiAgICB0aGlzLnJlYXNvbnMgPSBudWxsOwogICAgdGhpcy50aW1lU3RhbXAgPSBudWxsOwogIH0KfQpjbGFzcyBGbG9hdCBleHRlbmRzIENvbnRlbnRPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKFRFTVBMQVRFX05TX0lELCAiZmxvYXQiKTsKICAgIHRoaXMuaWQgPSBhdHRyaWJ1dGVzLmlkIHx8ICIiOwogICAgdGhpcy5uYW1lID0gYXR0cmlidXRlcy5uYW1lIHx8ICIiOwogICAgdGhpcy51c2UgPSBhdHRyaWJ1dGVzLnVzZSB8fCAiIjsKICAgIHRoaXMudXNlaHJlZiA9IGF0dHJpYnV0ZXMudXNlaHJlZiB8fCAiIjsKICB9CiAgWyRmaW5hbGl6ZV0oKSB7CiAgICBjb25zdCBudW1iZXIgPSBwYXJzZUZsb2F0KHRoaXNbJGNvbnRlbnRdLnRyaW0oKSk7CiAgICB0aGlzWyRjb250ZW50XSA9IGlzTmFOKG51bWJlcikgPyBudWxsIDogbnVtYmVyOwogIH0KICBbJHRvSFRNTF0oYXZhaWxhYmxlU3BhY2UpIHsKICAgIHJldHVybiB2YWx1ZVRvSHRtbCh0aGlzWyRjb250ZW50XSAhPT0gbnVsbCA/IHRoaXNbJGNvbnRlbnRdLnRvU3RyaW5nKCkgOiAiIik7CiAgfQp9CmNsYXNzIHRlbXBsYXRlX0ZvbnQgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKFRFTVBMQVRFX05TX0lELCAiZm9udCIsIHRydWUpOwogICAgdGhpcy5iYXNlbGluZVNoaWZ0ID0gZ2V0TWVhc3VyZW1lbnQoYXR0cmlidXRlcy5iYXNlbGluZVNoaWZ0KTsKICAgIHRoaXMuZm9udEhvcml6b250YWxTY2FsZSA9IGdldEZsb2F0KHsKICAgICAgZGF0YTogYXR0cmlidXRlcy5mb250SG9yaXpvbnRhbFNjYWxlLAogICAgICBkZWZhdWx0VmFsdWU6IDEwMCwKICAgICAgdmFsaWRhdGU6IHggPT4geCA+PSAwCiAgICB9KTsKICAgIHRoaXMuZm9udFZlcnRpY2FsU2NhbGUgPSBnZXRGbG9hdCh7CiAgICAgIGRhdGE6IGF0dHJpYnV0ZXMuZm9udFZlcnRpY2FsU2NhbGUsCiAgICAgIGRlZmF1bHRWYWx1ZTogMTAwLAogICAgICB2YWxpZGF0ZTogeCA9PiB4ID49IDAKICAgIH0pOwogICAgdGhpcy5pZCA9IGF0dHJpYnV0ZXMuaWQgfHwgIiI7CiAgICB0aGlzLmtlcm5pbmdNb2RlID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMua2VybmluZ01vZGUsIFsibm9uZSIsICJwYWlyIl0pOwogICAgdGhpcy5sZXR0ZXJTcGFjaW5nID0gZ2V0TWVhc3VyZW1lbnQoYXR0cmlidXRlcy5sZXR0ZXJTcGFjaW5nLCAiMCIpOwogICAgdGhpcy5saW5lVGhyb3VnaCA9IGdldEludGVnZXIoewogICAgICBkYXRhOiBhdHRyaWJ1dGVzLmxpbmVUaHJvdWdoLAogICAgICBkZWZhdWx0VmFsdWU6IDAsCiAgICAgIHZhbGlkYXRlOiB4ID0+IHggPT09IDEgfHwgeCA9PT0gMgogICAgfSk7CiAgICB0aGlzLmxpbmVUaHJvdWdoUGVyaW9kID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMubGluZVRocm91Z2hQZXJpb2QsIFsiYWxsIiwgIndvcmQiXSk7CiAgICB0aGlzLm92ZXJsaW5lID0gZ2V0SW50ZWdlcih7CiAgICAgIGRhdGE6IGF0dHJpYnV0ZXMub3ZlcmxpbmUsCiAgICAgIGRlZmF1bHRWYWx1ZTogMCwKICAgICAgdmFsaWRhdGU6IHggPT4geCA9PT0gMSB8fCB4ID09PSAyCiAgICB9KTsKICAgIHRoaXMub3ZlcmxpbmVQZXJpb2QgPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy5vdmVybGluZVBlcmlvZCwgWyJhbGwiLCAid29yZCJdKTsKICAgIHRoaXMucG9zdHVyZSA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLnBvc3R1cmUsIFsibm9ybWFsIiwgIml0YWxpYyJdKTsKICAgIHRoaXMuc2l6ZSA9IGdldE1lYXN1cmVtZW50KGF0dHJpYnV0ZXMuc2l6ZSwgIjEwcHQiKTsKICAgIHRoaXMudHlwZWZhY2UgPSBhdHRyaWJ1dGVzLnR5cGVmYWNlIHx8ICJDb3VyaWVyIjsKICAgIHRoaXMudW5kZXJsaW5lID0gZ2V0SW50ZWdlcih7CiAgICAgIGRhdGE6IGF0dHJpYnV0ZXMudW5kZXJsaW5lLAogICAgICBkZWZhdWx0VmFsdWU6IDAsCiAgICAgIHZhbGlkYXRlOiB4ID0+IHggPT09IDEgfHwgeCA9PT0gMgogICAgfSk7CiAgICB0aGlzLnVuZGVybGluZVBlcmlvZCA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLnVuZGVybGluZVBlcmlvZCwgWyJhbGwiLCAid29yZCJdKTsKICAgIHRoaXMudXNlID0gYXR0cmlidXRlcy51c2UgfHwgIiI7CiAgICB0aGlzLnVzZWhyZWYgPSBhdHRyaWJ1dGVzLnVzZWhyZWYgfHwgIiI7CiAgICB0aGlzLndlaWdodCA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLndlaWdodCwgWyJub3JtYWwiLCAiYm9sZCJdKTsKICAgIHRoaXMuZXh0cmFzID0gbnVsbDsKICAgIHRoaXMuZmlsbCA9IG51bGw7CiAgfQogIFskY2xlYW5dKGJ1aWxkZXIpIHsKICAgIHN1cGVyWyRjbGVhbl0oYnVpbGRlcik7CiAgICB0aGlzWyRnbG9iYWxEYXRhXS51c2VkVHlwZWZhY2VzLmFkZCh0aGlzLnR5cGVmYWNlKTsKICB9CiAgWyR0b1N0eWxlXSgpIHsKICAgIGNvbnN0IHN0eWxlID0gdG9TdHlsZSh0aGlzLCAiZmlsbCIpOwogICAgY29uc3QgY29sb3IgPSBzdHlsZS5jb2xvcjsKICAgIGlmIChjb2xvcikgewogICAgICBpZiAoY29sb3IgPT09ICIjMDAwMDAwIikgewogICAgICAgIGRlbGV0ZSBzdHlsZS5jb2xvcjsKICAgICAgfSBlbHNlIGlmICghY29sb3Iuc3RhcnRzV2l0aCgiIyIpKSB7CiAgICAgICAgc3R5bGUuYmFja2dyb3VuZCA9IGNvbG9yOwogICAgICAgIHN0eWxlLmJhY2tncm91bmRDbGlwID0gInRleHQiOwogICAgICAgIHN0eWxlLmNvbG9yID0gInRyYW5zcGFyZW50IjsKICAgICAgfQogICAgfQogICAgaWYgKHRoaXMuYmFzZWxpbmVTaGlmdCkgewogICAgICBzdHlsZS52ZXJ0aWNhbEFsaWduID0gbWVhc3VyZVRvU3RyaW5nKHRoaXMuYmFzZWxpbmVTaGlmdCk7CiAgICB9CiAgICBzdHlsZS5mb250S2VybmluZyA9IHRoaXMua2VybmluZ01vZGUgPT09ICJub25lIiA/ICJub25lIiA6ICJub3JtYWwiOwogICAgc3R5bGUubGV0dGVyU3BhY2luZyA9IG1lYXN1cmVUb1N0cmluZyh0aGlzLmxldHRlclNwYWNpbmcpOwogICAgaWYgKHRoaXMubGluZVRocm91Z2ggIT09IDApIHsKICAgICAgc3R5bGUudGV4dERlY29yYXRpb24gPSAibGluZS10aHJvdWdoIjsKICAgICAgaWYgKHRoaXMubGluZVRocm91Z2ggPT09IDIpIHsKICAgICAgICBzdHlsZS50ZXh0RGVjb3JhdGlvblN0eWxlID0gImRvdWJsZSI7CiAgICAgIH0KICAgIH0KICAgIGlmICh0aGlzLm92ZXJsaW5lICE9PSAwKSB7CiAgICAgIHN0eWxlLnRleHREZWNvcmF0aW9uID0gIm92ZXJsaW5lIjsKICAgICAgaWYgKHRoaXMub3ZlcmxpbmUgPT09IDIpIHsKICAgICAgICBzdHlsZS50ZXh0RGVjb3JhdGlvblN0eWxlID0gImRvdWJsZSI7CiAgICAgIH0KICAgIH0KICAgIHN0eWxlLmZvbnRTdHlsZSA9IHRoaXMucG9zdHVyZTsKICAgIHN0eWxlLmZvbnRTaXplID0gbWVhc3VyZVRvU3RyaW5nKDAuOTkgKiB0aGlzLnNpemUpOwogICAgc2V0Rm9udEZhbWlseSh0aGlzLCB0aGlzLCB0aGlzWyRnbG9iYWxEYXRhXS5mb250RmluZGVyLCBzdHlsZSk7CiAgICBpZiAodGhpcy51bmRlcmxpbmUgIT09IDApIHsKICAgICAgc3R5bGUudGV4dERlY29yYXRpb24gPSAidW5kZXJsaW5lIjsKICAgICAgaWYgKHRoaXMudW5kZXJsaW5lID09PSAyKSB7CiAgICAgICAgc3R5bGUudGV4dERlY29yYXRpb25TdHlsZSA9ICJkb3VibGUiOwogICAgICB9CiAgICB9CiAgICBzdHlsZS5mb250V2VpZ2h0ID0gdGhpcy53ZWlnaHQ7CiAgICByZXR1cm4gc3R5bGU7CiAgfQp9CmNsYXNzIEZvcm1hdCBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJmb3JtYXQiLCB0cnVlKTsKICAgIHRoaXMuaWQgPSBhdHRyaWJ1dGVzLmlkIHx8ICIiOwogICAgdGhpcy51c2UgPSBhdHRyaWJ1dGVzLnVzZSB8fCAiIjsKICAgIHRoaXMudXNlaHJlZiA9IGF0dHJpYnV0ZXMudXNlaHJlZiB8fCAiIjsKICAgIHRoaXMuZXh0cmFzID0gbnVsbDsKICAgIHRoaXMucGljdHVyZSA9IG51bGw7CiAgfQp9CmNsYXNzIEhhbmRsZXIgZXh0ZW5kcyBTdHJpbmdPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKFRFTVBMQVRFX05TX0lELCAiaGFuZGxlciIpOwogICAgdGhpcy5pZCA9IGF0dHJpYnV0ZXMuaWQgfHwgIiI7CiAgICB0aGlzLnR5cGUgPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy50eXBlLCBbIm9wdGlvbmFsIiwgInJlcXVpcmVkIl0pOwogICAgdGhpcy51c2UgPSBhdHRyaWJ1dGVzLnVzZSB8fCAiIjsKICAgIHRoaXMudXNlaHJlZiA9IGF0dHJpYnV0ZXMudXNlaHJlZiB8fCAiIjsKICB9Cn0KY2xhc3MgSHlwaGVuYXRpb24gZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKFRFTVBMQVRFX05TX0lELCAiaHlwaGVuYXRpb24iKTsKICAgIHRoaXMuZXhjbHVkZUFsbENhcHMgPSBnZXRJbnRlZ2VyKHsKICAgICAgZGF0YTogYXR0cmlidXRlcy5leGNsdWRlQWxsQ2FwcywKICAgICAgZGVmYXVsdFZhbHVlOiAwLAogICAgICB2YWxpZGF0ZTogeCA9PiB4ID09PSAxCiAgICB9KTsKICAgIHRoaXMuZXhjbHVkZUluaXRpYWxDYXAgPSBnZXRJbnRlZ2VyKHsKICAgICAgZGF0YTogYXR0cmlidXRlcy5leGNsdWRlSW5pdGlhbENhcCwKICAgICAgZGVmYXVsdFZhbHVlOiAwLAogICAgICB2YWxpZGF0ZTogeCA9PiB4ID09PSAxCiAgICB9KTsKICAgIHRoaXMuaHlwaGVuYXRlID0gZ2V0SW50ZWdlcih7CiAgICAgIGRhdGE6IGF0dHJpYnV0ZXMuaHlwaGVuYXRlLAogICAgICBkZWZhdWx0VmFsdWU6IDAsCiAgICAgIHZhbGlkYXRlOiB4ID0+IHggPT09IDEKICAgIH0pOwogICAgdGhpcy5pZCA9IGF0dHJpYnV0ZXMuaWQgfHwgIiI7CiAgICB0aGlzLnB1c2hDaGFyYWN0ZXJDb3VudCA9IGdldEludGVnZXIoewogICAgICBkYXRhOiBhdHRyaWJ1dGVzLnB1c2hDaGFyYWN0ZXJDb3VudCwKICAgICAgZGVmYXVsdFZhbHVlOiAzLAogICAgICB2YWxpZGF0ZTogeCA9PiB4ID49IDAKICAgIH0pOwogICAgdGhpcy5yZW1haW5DaGFyYWN0ZXJDb3VudCA9IGdldEludGVnZXIoewogICAgICBkYXRhOiBhdHRyaWJ1dGVzLnJlbWFpbkNoYXJhY3RlckNvdW50LAogICAgICBkZWZhdWx0VmFsdWU6IDMsCiAgICAgIHZhbGlkYXRlOiB4ID0+IHggPj0gMAogICAgfSk7CiAgICB0aGlzLnVzZSA9IGF0dHJpYnV0ZXMudXNlIHx8ICIiOwogICAgdGhpcy51c2VocmVmID0gYXR0cmlidXRlcy51c2VocmVmIHx8ICIiOwogICAgdGhpcy53b3JkQ2hhcmFjdGVyQ291bnQgPSBnZXRJbnRlZ2VyKHsKICAgICAgZGF0YTogYXR0cmlidXRlcy53b3JkQ2hhcmFjdGVyQ291bnQsCiAgICAgIGRlZmF1bHRWYWx1ZTogNywKICAgICAgdmFsaWRhdGU6IHggPT4geCA+PSAwCiAgICB9KTsKICB9Cn0KY2xhc3MgSW1hZ2UgZXh0ZW5kcyBTdHJpbmdPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKFRFTVBMQVRFX05TX0lELCAiaW1hZ2UiKTsKICAgIHRoaXMuYXNwZWN0ID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMuYXNwZWN0LCBbImZpdCIsICJhY3R1YWwiLCAiaGVpZ2h0IiwgIm5vbmUiLCAid2lkdGgiXSk7CiAgICB0aGlzLmNvbnRlbnRUeXBlID0gYXR0cmlidXRlcy5jb250ZW50VHlwZSB8fCAiIjsKICAgIHRoaXMuaHJlZiA9IGF0dHJpYnV0ZXMuaHJlZiB8fCAiIjsKICAgIHRoaXMuaWQgPSBhdHRyaWJ1dGVzLmlkIHx8ICIiOwogICAgdGhpcy5uYW1lID0gYXR0cmlidXRlcy5uYW1lIHx8ICIiOwogICAgdGhpcy50cmFuc2ZlckVuY29kaW5nID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMudHJhbnNmZXJFbmNvZGluZywgWyJiYXNlNjQiLCAibm9uZSIsICJwYWNrYWdlIl0pOwogICAgdGhpcy51c2UgPSBhdHRyaWJ1dGVzLnVzZSB8fCAiIjsKICAgIHRoaXMudXNlaHJlZiA9IGF0dHJpYnV0ZXMudXNlaHJlZiB8fCAiIjsKICB9CiAgWyR0b0hUTUxdKCkgewogICAgaWYgKHRoaXMuY29udGVudFR5cGUgJiYgIU1JTUVTLmhhcyh0aGlzLmNvbnRlbnRUeXBlLnRvTG93ZXJDYXNlKCkpKSB7CiAgICAgIHJldHVybiBIVE1MUmVzdWx0LkVNUFRZOwogICAgfQogICAgbGV0IGJ1ZmZlciA9IHRoaXNbJGdsb2JhbERhdGFdLmltYWdlcz8uZ2V0KHRoaXMuaHJlZik7CiAgICBpZiAoIWJ1ZmZlciAmJiAodGhpcy5ocmVmIHx8ICF0aGlzWyRjb250ZW50XSkpIHsKICAgICAgcmV0dXJuIEhUTUxSZXN1bHQuRU1QVFk7CiAgICB9CiAgICBpZiAoIWJ1ZmZlciAmJiB0aGlzLnRyYW5zZmVyRW5jb2RpbmcgPT09ICJiYXNlNjQiKSB7CiAgICAgIGJ1ZmZlciA9IGZyb21CYXNlNjRVdGlsKHRoaXNbJGNvbnRlbnRdKTsKICAgIH0KICAgIGlmICghYnVmZmVyKSB7CiAgICAgIHJldHVybiBIVE1MUmVzdWx0LkVNUFRZOwogICAgfQogICAgaWYgKCF0aGlzLmNvbnRlbnRUeXBlKSB7CiAgICAgIGZvciAoY29uc3QgW2hlYWRlciwgdHlwZV0gb2YgSU1BR0VTX0hFQURFUlMpIHsKICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCA+IGhlYWRlci5sZW5ndGggJiYgaGVhZGVyLmV2ZXJ5KCh4LCBpKSA9PiB4ID09PSBidWZmZXJbaV0pKSB7CiAgICAgICAgICB0aGlzLmNvbnRlbnRUeXBlID0gdHlwZTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgfQogICAgICBpZiAoIXRoaXMuY29udGVudFR5cGUpIHsKICAgICAgICByZXR1cm4gSFRNTFJlc3VsdC5FTVBUWTsKICAgICAgfQogICAgfQogICAgY29uc3QgYmxvYiA9IG5ldyBCbG9iKFtidWZmZXJdLCB7CiAgICAgIHR5cGU6IHRoaXMuY29udGVudFR5cGUKICAgIH0pOwogICAgbGV0IHN0eWxlOwogICAgc3dpdGNoICh0aGlzLmFzcGVjdCkgewogICAgICBjYXNlICJmaXQiOgogICAgICBjYXNlICJhY3R1YWwiOgogICAgICAgIGJyZWFrOwogICAgICBjYXNlICJoZWlnaHQiOgogICAgICAgIHN0eWxlID0gewogICAgICAgICAgaGVpZ2h0OiAiMTAwJSIsCiAgICAgICAgICBvYmplY3RGaXQ6ICJmaWxsIgogICAgICAgIH07CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgIm5vbmUiOgogICAgICAgIHN0eWxlID0gewogICAgICAgICAgd2lkdGg6ICIxMDAlIiwKICAgICAgICAgIGhlaWdodDogIjEwMCUiLAogICAgICAgICAgb2JqZWN0Rml0OiAiZmlsbCIKICAgICAgICB9OwogICAgICAgIGJyZWFrOwogICAgICBjYXNlICJ3aWR0aCI6CiAgICAgICAgc3R5bGUgPSB7CiAgICAgICAgICB3aWR0aDogIjEwMCUiLAogICAgICAgICAgb2JqZWN0Rml0OiAiZmlsbCIKICAgICAgICB9OwogICAgICAgIGJyZWFrOwogICAgfQogICAgY29uc3QgcGFyZW50ID0gdGhpc1skZ2V0UGFyZW50XSgpOwogICAgcmV0dXJuIEhUTUxSZXN1bHQuc3VjY2Vzcyh7CiAgICAgIG5hbWU6ICJpbWciLAogICAgICBhdHRyaWJ1dGVzOiB7CiAgICAgICAgY2xhc3M6IFsieGZhSW1hZ2UiXSwKICAgICAgICBzdHlsZSwKICAgICAgICBzcmM6IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYiksCiAgICAgICAgYWx0OiBwYXJlbnQgPyBhcmlhTGFiZWwocGFyZW50WyRnZXRQYXJlbnRdKCkpIDogbnVsbAogICAgICB9CiAgICB9KTsKICB9Cn0KY2xhc3MgSW1hZ2VFZGl0IGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihURU1QTEFURV9OU19JRCwgImltYWdlRWRpdCIsIHRydWUpOwogICAgdGhpcy5kYXRhID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMuZGF0YSwgWyJsaW5rIiwgImVtYmVkIl0pOwogICAgdGhpcy5pZCA9IGF0dHJpYnV0ZXMuaWQgfHwgIiI7CiAgICB0aGlzLnVzZSA9IGF0dHJpYnV0ZXMudXNlIHx8ICIiOwogICAgdGhpcy51c2VocmVmID0gYXR0cmlidXRlcy51c2VocmVmIHx8ICIiOwogICAgdGhpcy5ib3JkZXIgPSBudWxsOwogICAgdGhpcy5leHRyYXMgPSBudWxsOwogICAgdGhpcy5tYXJnaW4gPSBudWxsOwogIH0KICBbJHRvSFRNTF0oYXZhaWxhYmxlU3BhY2UpIHsKICAgIGlmICh0aGlzLmRhdGEgPT09ICJlbWJlZCIpIHsKICAgICAgcmV0dXJuIEhUTUxSZXN1bHQuc3VjY2Vzcyh7CiAgICAgICAgbmFtZTogImRpdiIsCiAgICAgICAgY2hpbGRyZW46IFtdLAogICAgICAgIGF0dHJpYnV0ZXM6IHt9CiAgICAgIH0pOwogICAgfQogICAgcmV0dXJuIEhUTUxSZXN1bHQuRU1QVFk7CiAgfQp9CmNsYXNzIEludGVnZXIgZXh0ZW5kcyBDb250ZW50T2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihURU1QTEFURV9OU19JRCwgImludGVnZXIiKTsKICAgIHRoaXMuaWQgPSBhdHRyaWJ1dGVzLmlkIHx8ICIiOwogICAgdGhpcy5uYW1lID0gYXR0cmlidXRlcy5uYW1lIHx8ICIiOwogICAgdGhpcy51c2UgPSBhdHRyaWJ1dGVzLnVzZSB8fCAiIjsKICAgIHRoaXMudXNlaHJlZiA9IGF0dHJpYnV0ZXMudXNlaHJlZiB8fCAiIjsKICB9CiAgWyRmaW5hbGl6ZV0oKSB7CiAgICBjb25zdCBudW1iZXIgPSBwYXJzZUludCh0aGlzWyRjb250ZW50XS50cmltKCksIDEwKTsKICAgIHRoaXNbJGNvbnRlbnRdID0gaXNOYU4obnVtYmVyKSA/IG51bGwgOiBudW1iZXI7CiAgfQogIFskdG9IVE1MXShhdmFpbGFibGVTcGFjZSkgewogICAgcmV0dXJuIHZhbHVlVG9IdG1sKHRoaXNbJGNvbnRlbnRdICE9PSBudWxsID8gdGhpc1skY29udGVudF0udG9TdHJpbmcoKSA6ICIiKTsKICB9Cn0KY2xhc3MgSXNzdWVycyBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJpc3N1ZXJzIiwgdHJ1ZSk7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMudHlwZSA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLnR5cGUsIFsib3B0aW9uYWwiLCAicmVxdWlyZWQiXSk7CiAgICB0aGlzLnVzZSA9IGF0dHJpYnV0ZXMudXNlIHx8ICIiOwogICAgdGhpcy51c2VocmVmID0gYXR0cmlidXRlcy51c2VocmVmIHx8ICIiOwogICAgdGhpcy5jZXJ0aWZpY2F0ZSA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogIH0KfQpjbGFzcyBJdGVtcyBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJpdGVtcyIsIHRydWUpOwogICAgdGhpcy5pZCA9IGF0dHJpYnV0ZXMuaWQgfHwgIiI7CiAgICB0aGlzLm5hbWUgPSBhdHRyaWJ1dGVzLm5hbWUgfHwgIiI7CiAgICB0aGlzLnByZXNlbmNlID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMucHJlc2VuY2UsIFsidmlzaWJsZSIsICJoaWRkZW4iLCAiaW5hY3RpdmUiLCAiaW52aXNpYmxlIl0pOwogICAgdGhpcy5yZWYgPSBhdHRyaWJ1dGVzLnJlZiB8fCAiIjsKICAgIHRoaXMuc2F2ZSA9IGdldEludGVnZXIoewogICAgICBkYXRhOiBhdHRyaWJ1dGVzLnNhdmUsCiAgICAgIGRlZmF1bHRWYWx1ZTogMCwKICAgICAgdmFsaWRhdGU6IHggPT4geCA9PT0gMQogICAgfSk7CiAgICB0aGlzLnVzZSA9IGF0dHJpYnV0ZXMudXNlIHx8ICIiOwogICAgdGhpcy51c2VocmVmID0gYXR0cmlidXRlcy51c2VocmVmIHx8ICIiOwogICAgdGhpcy5ib29sZWFuID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmRhdGUgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuZGF0ZVRpbWUgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuZGVjaW1hbCA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5leERhdGEgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuZmxvYXQgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuaW1hZ2UgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuaW50ZWdlciA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy50ZXh0ID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLnRpbWUgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICB9CiAgWyR0b0hUTUxdKCkgewogICAgY29uc3Qgb3V0cHV0ID0gW107CiAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHRoaXNbJGdldENoaWxkcmVuXSgpKSB7CiAgICAgIG91dHB1dC5wdXNoKGNoaWxkWyR0ZXh0XSgpKTsKICAgIH0KICAgIHJldHVybiBIVE1MUmVzdWx0LnN1Y2Nlc3Mob3V0cHV0KTsKICB9Cn0KY2xhc3MgS2VlcCBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJrZWVwIiwgdHJ1ZSk7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIGNvbnN0IG9wdGlvbnMgPSBbIm5vbmUiLCAiY29udGVudEFyZWEiLCAicGFnZUFyZWEiXTsKICAgIHRoaXMuaW50YWN0ID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMuaW50YWN0LCBvcHRpb25zKTsKICAgIHRoaXMubmV4dCA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLm5leHQsIG9wdGlvbnMpOwogICAgdGhpcy5wcmV2aW91cyA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLnByZXZpb3VzLCBvcHRpb25zKTsKICAgIHRoaXMudXNlID0gYXR0cmlidXRlcy51c2UgfHwgIiI7CiAgICB0aGlzLnVzZWhyZWYgPSBhdHRyaWJ1dGVzLnVzZWhyZWYgfHwgIiI7CiAgICB0aGlzLmV4dHJhcyA9IG51bGw7CiAgfQp9CmNsYXNzIEtleVVzYWdlIGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihURU1QTEFURV9OU19JRCwgImtleVVzYWdlIik7CiAgICBjb25zdCBvcHRpb25zID0gWyIiLCAieWVzIiwgIm5vIl07CiAgICB0aGlzLmNybFNpZ24gPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy5jcmxTaWduLCBvcHRpb25zKTsKICAgIHRoaXMuZGF0YUVuY2lwaGVybWVudCA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLmRhdGFFbmNpcGhlcm1lbnQsIG9wdGlvbnMpOwogICAgdGhpcy5kZWNpcGhlck9ubHkgPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy5kZWNpcGhlck9ubHksIG9wdGlvbnMpOwogICAgdGhpcy5kaWdpdGFsU2lnbmF0dXJlID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMuZGlnaXRhbFNpZ25hdHVyZSwgb3B0aW9ucyk7CiAgICB0aGlzLmVuY2lwaGVyT25seSA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLmVuY2lwaGVyT25seSwgb3B0aW9ucyk7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMua2V5QWdyZWVtZW50ID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMua2V5QWdyZWVtZW50LCBvcHRpb25zKTsKICAgIHRoaXMua2V5Q2VydFNpZ24gPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy5rZXlDZXJ0U2lnbiwgb3B0aW9ucyk7CiAgICB0aGlzLmtleUVuY2lwaGVybWVudCA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLmtleUVuY2lwaGVybWVudCwgb3B0aW9ucyk7CiAgICB0aGlzLm5vblJlcHVkaWF0aW9uID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMubm9uUmVwdWRpYXRpb24sIG9wdGlvbnMpOwogICAgdGhpcy50eXBlID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMudHlwZSwgWyJvcHRpb25hbCIsICJyZXF1aXJlZCJdKTsKICAgIHRoaXMudXNlID0gYXR0cmlidXRlcy51c2UgfHwgIiI7CiAgICB0aGlzLnVzZWhyZWYgPSBhdHRyaWJ1dGVzLnVzZWhyZWYgfHwgIiI7CiAgfQp9CmNsYXNzIExpbmUgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKFRFTVBMQVRFX05TX0lELCAibGluZSIsIHRydWUpOwogICAgdGhpcy5oYW5kID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMuaGFuZCwgWyJldmVuIiwgImxlZnQiLCAicmlnaHQiXSk7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMuc2xvcGUgPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy5zbG9wZSwgWyJcXCIsICIvIl0pOwogICAgdGhpcy51c2UgPSBhdHRyaWJ1dGVzLnVzZSB8fCAiIjsKICAgIHRoaXMudXNlaHJlZiA9IGF0dHJpYnV0ZXMudXNlaHJlZiB8fCAiIjsKICAgIHRoaXMuZWRnZSA9IG51bGw7CiAgfQogIFskdG9IVE1MXSgpIHsKICAgIGNvbnN0IHBhcmVudCA9IHRoaXNbJGdldFBhcmVudF0oKVskZ2V0UGFyZW50XSgpOwogICAgY29uc3QgZWRnZSA9IHRoaXMuZWRnZSB8fCBuZXcgRWRnZSh7fSk7CiAgICBjb25zdCBlZGdlU3R5bGUgPSBlZGdlWyR0b1N0eWxlXSgpOwogICAgY29uc3Qgc3R5bGUgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgY29uc3QgdGhpY2tuZXNzID0gZWRnZS5wcmVzZW5jZSA9PT0gInZpc2libGUiID8gZWRnZS50aGlja25lc3MgOiAwOwogICAgc3R5bGUuc3Ryb2tlV2lkdGggPSBtZWFzdXJlVG9TdHJpbmcodGhpY2tuZXNzKTsKICAgIHN0eWxlLnN0cm9rZSA9IGVkZ2VTdHlsZS5jb2xvcjsKICAgIGxldCB4MSwgeTEsIHgyLCB5MjsKICAgIGxldCB3aWR0aCA9ICIxMDAlIjsKICAgIGxldCBoZWlnaHQgPSAiMTAwJSI7CiAgICBpZiAocGFyZW50LncgPD0gdGhpY2tuZXNzKSB7CiAgICAgIFt4MSwgeTEsIHgyLCB5Ml0gPSBbIjUwJSIsIDAsICI1MCUiLCAiMTAwJSJdOwogICAgICB3aWR0aCA9IHN0eWxlLnN0cm9rZVdpZHRoOwogICAgfSBlbHNlIGlmIChwYXJlbnQuaCA8PSB0aGlja25lc3MpIHsKICAgICAgW3gxLCB5MSwgeDIsIHkyXSA9IFswLCAiNTAlIiwgIjEwMCUiLCAiNTAlIl07CiAgICAgIGhlaWdodCA9IHN0eWxlLnN0cm9rZVdpZHRoOwogICAgfSBlbHNlIGlmICh0aGlzLnNsb3BlID09PSAiXFwiKSB7CiAgICAgIFt4MSwgeTEsIHgyLCB5Ml0gPSBbMCwgMCwgIjEwMCUiLCAiMTAwJSJdOwogICAgfSBlbHNlIHsKICAgICAgW3gxLCB5MSwgeDIsIHkyXSA9IFswLCAiMTAwJSIsICIxMDAlIiwgMF07CiAgICB9CiAgICBjb25zdCBsaW5lID0gewogICAgICBuYW1lOiAibGluZSIsCiAgICAgIGF0dHJpYnV0ZXM6IHsKICAgICAgICB4bWxuczogU1ZHX05TLAogICAgICAgIHgxLAogICAgICAgIHkxLAogICAgICAgIHgyLAogICAgICAgIHkyLAogICAgICAgIHN0eWxlCiAgICAgIH0KICAgIH07CiAgICBjb25zdCBzdmcgPSB7CiAgICAgIG5hbWU6ICJzdmciLAogICAgICBjaGlsZHJlbjogW2xpbmVdLAogICAgICBhdHRyaWJ1dGVzOiB7CiAgICAgICAgeG1sbnM6IFNWR19OUywKICAgICAgICB3aWR0aCwKICAgICAgICBoZWlnaHQsCiAgICAgICAgc3R5bGU6IHsKICAgICAgICAgIG92ZXJmbG93OiAidmlzaWJsZSIKICAgICAgICB9CiAgICAgIH0KICAgIH07CiAgICBpZiAoaGFzTWFyZ2luKHBhcmVudCkpIHsKICAgICAgcmV0dXJuIEhUTUxSZXN1bHQuc3VjY2Vzcyh7CiAgICAgICAgbmFtZTogImRpdiIsCiAgICAgICAgYXR0cmlidXRlczogewogICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgZGlzcGxheTogImlubGluZSIsCiAgICAgICAgICAgIHdpZHRoOiAiMTAwJSIsCiAgICAgICAgICAgIGhlaWdodDogIjEwMCUiCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBjaGlsZHJlbjogW3N2Z10KICAgICAgfSk7CiAgICB9CiAgICBzdmcuYXR0cmlidXRlcy5zdHlsZS5wb3NpdGlvbiA9ICJhYnNvbHV0ZSI7CiAgICByZXR1cm4gSFRNTFJlc3VsdC5zdWNjZXNzKHN2Zyk7CiAgfQp9CmNsYXNzIExpbmVhciBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJsaW5lYXIiLCB0cnVlKTsKICAgIHRoaXMuaWQgPSBhdHRyaWJ1dGVzLmlkIHx8ICIiOwogICAgdGhpcy50eXBlID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMudHlwZSwgWyJ0b1JpZ2h0IiwgInRvQm90dG9tIiwgInRvTGVmdCIsICJ0b1RvcCJdKTsKICAgIHRoaXMudXNlID0gYXR0cmlidXRlcy51c2UgfHwgIiI7CiAgICB0aGlzLnVzZWhyZWYgPSBhdHRyaWJ1dGVzLnVzZWhyZWYgfHwgIiI7CiAgICB0aGlzLmNvbG9yID0gbnVsbDsKICAgIHRoaXMuZXh0cmFzID0gbnVsbDsKICB9CiAgWyR0b1N0eWxlXShzdGFydENvbG9yKSB7CiAgICBzdGFydENvbG9yID0gc3RhcnRDb2xvciA/IHN0YXJ0Q29sb3JbJHRvU3R5bGVdKCkgOiAiI0ZGRkZGRiI7CiAgICBjb25zdCB0cmFuc2YgPSB0aGlzLnR5cGUucmVwbGFjZSgvKFtSQkxUXSkvLCAiICQxIikudG9Mb3dlckNhc2UoKTsKICAgIGNvbnN0IGVuZENvbG9yID0gdGhpcy5jb2xvciA/IHRoaXMuY29sb3JbJHRvU3R5bGVdKCkgOiAiIzAwMDAwMCI7CiAgICByZXR1cm4gYGxpbmVhci1ncmFkaWVudCgke3RyYW5zZn0sICR7c3RhcnRDb2xvcn0sICR7ZW5kQ29sb3J9KWA7CiAgfQp9CmNsYXNzIExvY2tEb2N1bWVudCBleHRlbmRzIENvbnRlbnRPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKFRFTVBMQVRFX05TX0lELCAibG9ja0RvY3VtZW50Iik7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMudHlwZSA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLnR5cGUsIFsib3B0aW9uYWwiLCAicmVxdWlyZWQiXSk7CiAgICB0aGlzLnVzZSA9IGF0dHJpYnV0ZXMudXNlIHx8ICIiOwogICAgdGhpcy51c2VocmVmID0gYXR0cmlidXRlcy51c2VocmVmIHx8ICIiOwogIH0KICBbJGZpbmFsaXplXSgpIHsKICAgIHRoaXNbJGNvbnRlbnRdID0gZ2V0U3RyaW5nT3B0aW9uKHRoaXNbJGNvbnRlbnRdLCBbImF1dG8iLCAiMCIsICIxIl0pOwogIH0KfQpjbGFzcyBNYW5pZmVzdCBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJtYW5pZmVzdCIsIHRydWUpOwogICAgdGhpcy5hY3Rpb24gPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy5hY3Rpb24sIFsiaW5jbHVkZSIsICJhbGwiLCAiZXhjbHVkZSJdKTsKICAgIHRoaXMuaWQgPSBhdHRyaWJ1dGVzLmlkIHx8ICIiOwogICAgdGhpcy5uYW1lID0gYXR0cmlidXRlcy5uYW1lIHx8ICIiOwogICAgdGhpcy51c2UgPSBhdHRyaWJ1dGVzLnVzZSB8fCAiIjsKICAgIHRoaXMudXNlaHJlZiA9IGF0dHJpYnV0ZXMudXNlaHJlZiB8fCAiIjsKICAgIHRoaXMuZXh0cmFzID0gbnVsbDsKICAgIHRoaXMucmVmID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgfQp9CmNsYXNzIE1hcmdpbiBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJtYXJnaW4iLCB0cnVlKTsKICAgIHRoaXMuYm90dG9tSW5zZXQgPSBnZXRNZWFzdXJlbWVudChhdHRyaWJ1dGVzLmJvdHRvbUluc2V0LCAiMCIpOwogICAgdGhpcy5pZCA9IGF0dHJpYnV0ZXMuaWQgfHwgIiI7CiAgICB0aGlzLmxlZnRJbnNldCA9IGdldE1lYXN1cmVtZW50KGF0dHJpYnV0ZXMubGVmdEluc2V0LCAiMCIpOwogICAgdGhpcy5yaWdodEluc2V0ID0gZ2V0TWVhc3VyZW1lbnQoYXR0cmlidXRlcy5yaWdodEluc2V0LCAiMCIpOwogICAgdGhpcy50b3BJbnNldCA9IGdldE1lYXN1cmVtZW50KGF0dHJpYnV0ZXMudG9wSW5zZXQsICIwIik7CiAgICB0aGlzLnVzZSA9IGF0dHJpYnV0ZXMudXNlIHx8ICIiOwogICAgdGhpcy51c2VocmVmID0gYXR0cmlidXRlcy51c2VocmVmIHx8ICIiOwogICAgdGhpcy5leHRyYXMgPSBudWxsOwogIH0KICBbJHRvU3R5bGVdKCkgewogICAgcmV0dXJuIHsKICAgICAgbWFyZ2luOiBtZWFzdXJlVG9TdHJpbmcodGhpcy50b3BJbnNldCkgKyAiICIgKyBtZWFzdXJlVG9TdHJpbmcodGhpcy5yaWdodEluc2V0KSArICIgIiArIG1lYXN1cmVUb1N0cmluZyh0aGlzLmJvdHRvbUluc2V0KSArICIgIiArIG1lYXN1cmVUb1N0cmluZyh0aGlzLmxlZnRJbnNldCkKICAgIH07CiAgfQp9CmNsYXNzIE1kcCBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJtZHAiKTsKICAgIHRoaXMuaWQgPSBhdHRyaWJ1dGVzLmlkIHx8ICIiOwogICAgdGhpcy5wZXJtaXNzaW9ucyA9IGdldEludGVnZXIoewogICAgICBkYXRhOiBhdHRyaWJ1dGVzLnBlcm1pc3Npb25zLAogICAgICBkZWZhdWx0VmFsdWU6IDIsCiAgICAgIHZhbGlkYXRlOiB4ID0+IHggPT09IDEgfHwgeCA9PT0gMwogICAgfSk7CiAgICB0aGlzLnNpZ25hdHVyZVR5cGUgPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy5zaWduYXR1cmVUeXBlLCBbImZpbGxlciIsICJhdXRob3IiXSk7CiAgICB0aGlzLnVzZSA9IGF0dHJpYnV0ZXMudXNlIHx8ICIiOwogICAgdGhpcy51c2VocmVmID0gYXR0cmlidXRlcy51c2VocmVmIHx8ICIiOwogIH0KfQpjbGFzcyBNZWRpdW0gZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKFRFTVBMQVRFX05TX0lELCAibWVkaXVtIik7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMuaW1hZ2luZ0JCb3ggPSBnZXRCQm94KGF0dHJpYnV0ZXMuaW1hZ2luZ0JCb3gpOwogICAgdGhpcy5sb25nID0gZ2V0TWVhc3VyZW1lbnQoYXR0cmlidXRlcy5sb25nKTsKICAgIHRoaXMub3JpZW50YXRpb24gPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy5vcmllbnRhdGlvbiwgWyJwb3J0cmFpdCIsICJsYW5kc2NhcGUiXSk7CiAgICB0aGlzLnNob3J0ID0gZ2V0TWVhc3VyZW1lbnQoYXR0cmlidXRlcy5zaG9ydCk7CiAgICB0aGlzLnN0b2NrID0gYXR0cmlidXRlcy5zdG9jayB8fCAiIjsKICAgIHRoaXMudHJheUluID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMudHJheUluLCBbImF1dG8iLCAiZGVsZWdhdGUiLCAicGFnZUZyb250Il0pOwogICAgdGhpcy50cmF5T3V0ID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMudHJheU91dCwgWyJhdXRvIiwgImRlbGVnYXRlIl0pOwogICAgdGhpcy51c2UgPSBhdHRyaWJ1dGVzLnVzZSB8fCAiIjsKICAgIHRoaXMudXNlaHJlZiA9IGF0dHJpYnV0ZXMudXNlaHJlZiB8fCAiIjsKICB9Cn0KY2xhc3MgTWVzc2FnZSBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJtZXNzYWdlIiwgdHJ1ZSk7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMudXNlID0gYXR0cmlidXRlcy51c2UgfHwgIiI7CiAgICB0aGlzLnVzZWhyZWYgPSBhdHRyaWJ1dGVzLnVzZWhyZWYgfHwgIiI7CiAgICB0aGlzLnRleHQgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICB9Cn0KY2xhc3MgTnVtZXJpY0VkaXQgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKFRFTVBMQVRFX05TX0lELCAibnVtZXJpY0VkaXQiLCB0cnVlKTsKICAgIHRoaXMuaFNjcm9sbFBvbGljeSA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLmhTY3JvbGxQb2xpY3ksIFsiYXV0byIsICJvZmYiLCAib24iXSk7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMudXNlID0gYXR0cmlidXRlcy51c2UgfHwgIiI7CiAgICB0aGlzLnVzZWhyZWYgPSBhdHRyaWJ1dGVzLnVzZWhyZWYgfHwgIiI7CiAgICB0aGlzLmJvcmRlciA9IG51bGw7CiAgICB0aGlzLmNvbWIgPSBudWxsOwogICAgdGhpcy5leHRyYXMgPSBudWxsOwogICAgdGhpcy5tYXJnaW4gPSBudWxsOwogIH0KICBbJHRvSFRNTF0oYXZhaWxhYmxlU3BhY2UpIHsKICAgIGNvbnN0IHN0eWxlID0gdG9TdHlsZSh0aGlzLCAiYm9yZGVyIiwgImZvbnQiLCAibWFyZ2luIik7CiAgICBjb25zdCBmaWVsZCA9IHRoaXNbJGdldFBhcmVudF0oKVskZ2V0UGFyZW50XSgpOwogICAgY29uc3QgaHRtbCA9IHsKICAgICAgbmFtZTogImlucHV0IiwKICAgICAgYXR0cmlidXRlczogewogICAgICAgIHR5cGU6ICJ0ZXh0IiwKICAgICAgICBmaWVsZElkOiBmaWVsZFskdWlkXSwKICAgICAgICBkYXRhSWQ6IGZpZWxkWyRkYXRhXT8uWyR1aWRdIHx8IGZpZWxkWyR1aWRdLAogICAgICAgIGNsYXNzOiBbInhmYVRleHRmaWVsZCJdLAogICAgICAgIHN0eWxlLAogICAgICAgICJhcmlhLWxhYmVsIjogYXJpYUxhYmVsKGZpZWxkKSwKICAgICAgICAiYXJpYS1yZXF1aXJlZCI6IGZhbHNlCiAgICAgIH0KICAgIH07CiAgICBpZiAoaXNSZXF1aXJlZChmaWVsZCkpIHsKICAgICAgaHRtbC5hdHRyaWJ1dGVzWyJhcmlhLXJlcXVpcmVkIl0gPSB0cnVlOwogICAgICBodG1sLmF0dHJpYnV0ZXMucmVxdWlyZWQgPSB0cnVlOwogICAgfQogICAgcmV0dXJuIEhUTUxSZXN1bHQuc3VjY2Vzcyh7CiAgICAgIG5hbWU6ICJsYWJlbCIsCiAgICAgIGF0dHJpYnV0ZXM6IHsKICAgICAgICBjbGFzczogWyJ4ZmFMYWJlbCJdCiAgICAgIH0sCiAgICAgIGNoaWxkcmVuOiBbaHRtbF0KICAgIH0pOwogIH0KfQpjbGFzcyBPY2N1ciBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJvY2N1ciIsIHRydWUpOwogICAgdGhpcy5pZCA9IGF0dHJpYnV0ZXMuaWQgfHwgIiI7CiAgICB0aGlzLmluaXRpYWwgPSBhdHRyaWJ1dGVzLmluaXRpYWwgIT09ICIiID8gZ2V0SW50ZWdlcih7CiAgICAgIGRhdGE6IGF0dHJpYnV0ZXMuaW5pdGlhbCwKICAgICAgZGVmYXVsdFZhbHVlOiAiIiwKICAgICAgdmFsaWRhdGU6IHggPT4gdHJ1ZQogICAgfSkgOiAiIjsKICAgIHRoaXMubWF4ID0gYXR0cmlidXRlcy5tYXggIT09ICIiID8gZ2V0SW50ZWdlcih7CiAgICAgIGRhdGE6IGF0dHJpYnV0ZXMubWF4LAogICAgICBkZWZhdWx0VmFsdWU6IDEsCiAgICAgIHZhbGlkYXRlOiB4ID0+IHRydWUKICAgIH0pIDogIiI7CiAgICB0aGlzLm1pbiA9IGF0dHJpYnV0ZXMubWluICE9PSAiIiA/IGdldEludGVnZXIoewogICAgICBkYXRhOiBhdHRyaWJ1dGVzLm1pbiwKICAgICAgZGVmYXVsdFZhbHVlOiAxLAogICAgICB2YWxpZGF0ZTogeCA9PiB0cnVlCiAgICB9KSA6ICIiOwogICAgdGhpcy51c2UgPSBhdHRyaWJ1dGVzLnVzZSB8fCAiIjsKICAgIHRoaXMudXNlaHJlZiA9IGF0dHJpYnV0ZXMudXNlaHJlZiB8fCAiIjsKICAgIHRoaXMuZXh0cmFzID0gbnVsbDsKICB9CiAgWyRjbGVhbl0oKSB7CiAgICBjb25zdCBwYXJlbnQgPSB0aGlzWyRnZXRQYXJlbnRdKCk7CiAgICBjb25zdCBvcmlnaW5hbE1pbiA9IHRoaXMubWluOwogICAgaWYgKHRoaXMubWluID09PSAiIikgewogICAgICB0aGlzLm1pbiA9IHBhcmVudCBpbnN0YW5jZW9mIFBhZ2VBcmVhIHx8IHBhcmVudCBpbnN0YW5jZW9mIFBhZ2VTZXQgPyAwIDogMTsKICAgIH0KICAgIGlmICh0aGlzLm1heCA9PT0gIiIpIHsKICAgICAgaWYgKG9yaWdpbmFsTWluID09PSAiIikgewogICAgICAgIHRoaXMubWF4ID0gcGFyZW50IGluc3RhbmNlb2YgUGFnZUFyZWEgfHwgcGFyZW50IGluc3RhbmNlb2YgUGFnZVNldCA/IC0xIDogMTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLm1heCA9IHRoaXMubWluOwogICAgICB9CiAgICB9CiAgICBpZiAodGhpcy5tYXggIT09IC0xICYmIHRoaXMubWF4IDwgdGhpcy5taW4pIHsKICAgICAgdGhpcy5tYXggPSB0aGlzLm1pbjsKICAgIH0KICAgIGlmICh0aGlzLmluaXRpYWwgPT09ICIiKSB7CiAgICAgIHRoaXMuaW5pdGlhbCA9IHBhcmVudCBpbnN0YW5jZW9mIFRlbXBsYXRlID8gMSA6IHRoaXMubWluOwogICAgfQogIH0KfQpjbGFzcyBPaWQgZXh0ZW5kcyBTdHJpbmdPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKFRFTVBMQVRFX05TX0lELCAib2lkIik7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMubmFtZSA9IGF0dHJpYnV0ZXMubmFtZSB8fCAiIjsKICAgIHRoaXMudXNlID0gYXR0cmlidXRlcy51c2UgfHwgIiI7CiAgICB0aGlzLnVzZWhyZWYgPSBhdHRyaWJ1dGVzLnVzZWhyZWYgfHwgIiI7CiAgfQp9CmNsYXNzIE9pZHMgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKFRFTVBMQVRFX05TX0lELCAib2lkcyIsIHRydWUpOwogICAgdGhpcy5pZCA9IGF0dHJpYnV0ZXMuaWQgfHwgIiI7CiAgICB0aGlzLnR5cGUgPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy50eXBlLCBbIm9wdGlvbmFsIiwgInJlcXVpcmVkIl0pOwogICAgdGhpcy51c2UgPSBhdHRyaWJ1dGVzLnVzZSB8fCAiIjsKICAgIHRoaXMudXNlaHJlZiA9IGF0dHJpYnV0ZXMudXNlaHJlZiB8fCAiIjsKICAgIHRoaXMub2lkID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgfQp9CmNsYXNzIE92ZXJmbG93IGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihURU1QTEFURV9OU19JRCwgIm92ZXJmbG93Iik7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMubGVhZGVyID0gYXR0cmlidXRlcy5sZWFkZXIgfHwgIiI7CiAgICB0aGlzLnRhcmdldCA9IGF0dHJpYnV0ZXMudGFyZ2V0IHx8ICIiOwogICAgdGhpcy50cmFpbGVyID0gYXR0cmlidXRlcy50cmFpbGVyIHx8ICIiOwogICAgdGhpcy51c2UgPSBhdHRyaWJ1dGVzLnVzZSB8fCAiIjsKICAgIHRoaXMudXNlaHJlZiA9IGF0dHJpYnV0ZXMudXNlaHJlZiB8fCAiIjsKICB9CiAgWyRnZXRFeHRyYV0oKSB7CiAgICBpZiAoIXRoaXNbJGV4dHJhXSkgewogICAgICBjb25zdCBwYXJlbnQgPSB0aGlzWyRnZXRQYXJlbnRdKCk7CiAgICAgIGNvbnN0IHJvb3QgPSB0aGlzWyRnZXRUZW1wbGF0ZVJvb3RdKCk7CiAgICAgIGNvbnN0IHRhcmdldCA9IHJvb3RbJHNlYXJjaE5vZGVdKHRoaXMudGFyZ2V0LCBwYXJlbnQpOwogICAgICBjb25zdCBsZWFkZXIgPSByb290WyRzZWFyY2hOb2RlXSh0aGlzLmxlYWRlciwgcGFyZW50KTsKICAgICAgY29uc3QgdHJhaWxlciA9IHJvb3RbJHNlYXJjaE5vZGVdKHRoaXMudHJhaWxlciwgcGFyZW50KTsKICAgICAgdGhpc1skZXh0cmFdID0gewogICAgICAgIHRhcmdldDogdGFyZ2V0Py5bMF0gfHwgbnVsbCwKICAgICAgICBsZWFkZXI6IGxlYWRlcj8uWzBdIHx8IG51bGwsCiAgICAgICAgdHJhaWxlcjogdHJhaWxlcj8uWzBdIHx8IG51bGwsCiAgICAgICAgYWRkTGVhZGVyOiBmYWxzZSwKICAgICAgICBhZGRUcmFpbGVyOiBmYWxzZQogICAgICB9OwogICAgfQogICAgcmV0dXJuIHRoaXNbJGV4dHJhXTsKICB9Cn0KY2xhc3MgUGFnZUFyZWEgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKFRFTVBMQVRFX05TX0lELCAicGFnZUFyZWEiLCB0cnVlKTsKICAgIHRoaXMuYmxhbmtPck5vdEJsYW5rID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMuYmxhbmtPck5vdEJsYW5rLCBbImFueSIsICJibGFuayIsICJub3RCbGFuayJdKTsKICAgIHRoaXMuaWQgPSBhdHRyaWJ1dGVzLmlkIHx8ICIiOwogICAgdGhpcy5pbml0aWFsTnVtYmVyID0gZ2V0SW50ZWdlcih7CiAgICAgIGRhdGE6IGF0dHJpYnV0ZXMuaW5pdGlhbE51bWJlciwKICAgICAgZGVmYXVsdFZhbHVlOiAxLAogICAgICB2YWxpZGF0ZTogeCA9PiB0cnVlCiAgICB9KTsKICAgIHRoaXMubmFtZSA9IGF0dHJpYnV0ZXMubmFtZSB8fCAiIjsKICAgIHRoaXMubnVtYmVyZWQgPSBnZXRJbnRlZ2VyKHsKICAgICAgZGF0YTogYXR0cmlidXRlcy5udW1iZXJlZCwKICAgICAgZGVmYXVsdFZhbHVlOiAxLAogICAgICB2YWxpZGF0ZTogeCA9PiB0cnVlCiAgICB9KTsKICAgIHRoaXMub2RkT3JFdmVuID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMub2RkT3JFdmVuLCBbImFueSIsICJldmVuIiwgIm9kZCJdKTsKICAgIHRoaXMucGFnZVBvc2l0aW9uID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMucGFnZVBvc2l0aW9uLCBbImFueSIsICJmaXJzdCIsICJsYXN0IiwgIm9ubHkiLCAicmVzdCJdKTsKICAgIHRoaXMucmVsZXZhbnQgPSBnZXRSZWxldmFudChhdHRyaWJ1dGVzLnJlbGV2YW50KTsKICAgIHRoaXMudXNlID0gYXR0cmlidXRlcy51c2UgfHwgIiI7CiAgICB0aGlzLnVzZWhyZWYgPSBhdHRyaWJ1dGVzLnVzZWhyZWYgfHwgIiI7CiAgICB0aGlzLmRlc2MgPSBudWxsOwogICAgdGhpcy5leHRyYXMgPSBudWxsOwogICAgdGhpcy5tZWRpdW0gPSBudWxsOwogICAgdGhpcy5vY2N1ciA9IG51bGw7CiAgICB0aGlzLmFyZWEgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuY29udGVudEFyZWEgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuZHJhdyA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5leGNsR3JvdXAgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuZmllbGQgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuc3ViZm9ybSA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogIH0KICBbJGlzVXNhYmxlXSgpIHsKICAgIGlmICghdGhpc1skZXh0cmFdKSB7CiAgICAgIHRoaXNbJGV4dHJhXSA9IHsKICAgICAgICBudW1iZXJPZlVzZTogMAogICAgICB9OwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIHJldHVybiAhdGhpcy5vY2N1ciB8fCB0aGlzLm9jY3VyLm1heCA9PT0gLTEgfHwgdGhpc1skZXh0cmFdLm51bWJlck9mVXNlIDwgdGhpcy5vY2N1ci5tYXg7CiAgfQogIFskY2xlYW5QYWdlXSgpIHsKICAgIGRlbGV0ZSB0aGlzWyRleHRyYV07CiAgfQogIFskZ2V0TmV4dFBhZ2VdKCkgewogICAgdGhpc1skZXh0cmFdIHx8PSB7CiAgICAgIG51bWJlck9mVXNlOiAwCiAgICB9OwogICAgY29uc3QgcGFyZW50ID0gdGhpc1skZ2V0UGFyZW50XSgpOwogICAgaWYgKHBhcmVudC5yZWxhdGlvbiA9PT0gIm9yZGVyZWRPY2N1cnJlbmNlIikgewogICAgICBpZiAodGhpc1skaXNVc2FibGVdKCkpIHsKICAgICAgICB0aGlzWyRleHRyYV0ubnVtYmVyT2ZVc2UgKz0gMTsKICAgICAgICByZXR1cm4gdGhpczsKICAgICAgfQogICAgfQogICAgcmV0dXJuIHBhcmVudFskZ2V0TmV4dFBhZ2VdKCk7CiAgfQogIFskZ2V0QXZhaWxhYmxlU3BhY2VdKCkgewogICAgcmV0dXJuIHRoaXNbJGV4dHJhXS5zcGFjZSB8fCB7CiAgICAgIHdpZHRoOiAwLAogICAgICBoZWlnaHQ6IDAKICAgIH07CiAgfQogIFskdG9IVE1MXSgpIHsKICAgIHRoaXNbJGV4dHJhXSB8fD0gewogICAgICBudW1iZXJPZlVzZTogMQogICAgfTsKICAgIGNvbnN0IGNoaWxkcmVuID0gW107CiAgICB0aGlzWyRleHRyYV0uY2hpbGRyZW4gPSBjaGlsZHJlbjsKICAgIGNvbnN0IHN0eWxlID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgIGlmICh0aGlzLm1lZGl1bSAmJiB0aGlzLm1lZGl1bS5zaG9ydCAmJiB0aGlzLm1lZGl1bS5sb25nKSB7CiAgICAgIHN0eWxlLndpZHRoID0gbWVhc3VyZVRvU3RyaW5nKHRoaXMubWVkaXVtLnNob3J0KTsKICAgICAgc3R5bGUuaGVpZ2h0ID0gbWVhc3VyZVRvU3RyaW5nKHRoaXMubWVkaXVtLmxvbmcpOwogICAgICB0aGlzWyRleHRyYV0uc3BhY2UgPSB7CiAgICAgICAgd2lkdGg6IHRoaXMubWVkaXVtLnNob3J0LAogICAgICAgIGhlaWdodDogdGhpcy5tZWRpdW0ubG9uZwogICAgICB9OwogICAgICBpZiAodGhpcy5tZWRpdW0ub3JpZW50YXRpb24gPT09ICJsYW5kc2NhcGUiKSB7CiAgICAgICAgY29uc3QgeCA9IHN0eWxlLndpZHRoOwogICAgICAgIHN0eWxlLndpZHRoID0gc3R5bGUuaGVpZ2h0OwogICAgICAgIHN0eWxlLmhlaWdodCA9IHg7CiAgICAgICAgdGhpc1skZXh0cmFdLnNwYWNlID0gewogICAgICAgICAgd2lkdGg6IHRoaXMubWVkaXVtLmxvbmcsCiAgICAgICAgICBoZWlnaHQ6IHRoaXMubWVkaXVtLnNob3J0CiAgICAgICAgfTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgd2FybigiWEZBIC0gTm8gbWVkaXVtIHNwZWNpZmllZCBpbiBwYWdlQXJlYTogcGxlYXNlIGZpbGUgYSBidWcuIik7CiAgICB9CiAgICB0aGlzWyRjaGlsZHJlblRvSFRNTF0oewogICAgICBmaWx0ZXI6IG5ldyBTZXQoWyJhcmVhIiwgImRyYXciLCAiZmllbGQiLCAic3ViZm9ybSJdKSwKICAgICAgaW5jbHVkZTogdHJ1ZQogICAgfSk7CiAgICB0aGlzWyRjaGlsZHJlblRvSFRNTF0oewogICAgICBmaWx0ZXI6IG5ldyBTZXQoWyJjb250ZW50QXJlYSJdKSwKICAgICAgaW5jbHVkZTogdHJ1ZQogICAgfSk7CiAgICByZXR1cm4gSFRNTFJlc3VsdC5zdWNjZXNzKHsKICAgICAgbmFtZTogImRpdiIsCiAgICAgIGNoaWxkcmVuLAogICAgICBhdHRyaWJ1dGVzOiB7CiAgICAgICAgY2xhc3M6IFsieGZhUGFnZSJdLAogICAgICAgIGlkOiB0aGlzWyR1aWRdLAogICAgICAgIHN0eWxlLAogICAgICAgIHhmYU5hbWU6IHRoaXMubmFtZQogICAgICB9CiAgICB9KTsKICB9Cn0KY2xhc3MgUGFnZVNldCBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJwYWdlU2V0IiwgdHJ1ZSk7CiAgICB0aGlzLmR1cGxleEltcG9zaXRpb24gPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy5kdXBsZXhJbXBvc2l0aW9uLCBbImxvbmdFZGdlIiwgInNob3J0RWRnZSJdKTsKICAgIHRoaXMuaWQgPSBhdHRyaWJ1dGVzLmlkIHx8ICIiOwogICAgdGhpcy5uYW1lID0gYXR0cmlidXRlcy5uYW1lIHx8ICIiOwogICAgdGhpcy5yZWxhdGlvbiA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLnJlbGF0aW9uLCBbIm9yZGVyZWRPY2N1cnJlbmNlIiwgImR1cGxleFBhZ2luYXRlZCIsICJzaW1wbGV4UGFnaW5hdGVkIl0pOwogICAgdGhpcy5yZWxldmFudCA9IGdldFJlbGV2YW50KGF0dHJpYnV0ZXMucmVsZXZhbnQpOwogICAgdGhpcy51c2UgPSBhdHRyaWJ1dGVzLnVzZSB8fCAiIjsKICAgIHRoaXMudXNlaHJlZiA9IGF0dHJpYnV0ZXMudXNlaHJlZiB8fCAiIjsKICAgIHRoaXMuZXh0cmFzID0gbnVsbDsKICAgIHRoaXMub2NjdXIgPSBudWxsOwogICAgdGhpcy5wYWdlQXJlYSA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5wYWdlU2V0ID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgfQogIFskY2xlYW5QYWdlXSgpIHsKICAgIGZvciAoY29uc3QgcGFnZSBvZiB0aGlzLnBhZ2VBcmVhLmNoaWxkcmVuKSB7CiAgICAgIHBhZ2VbJGNsZWFuUGFnZV0oKTsKICAgIH0KICAgIGZvciAoY29uc3QgcGFnZSBvZiB0aGlzLnBhZ2VTZXQuY2hpbGRyZW4pIHsKICAgICAgcGFnZVskY2xlYW5QYWdlXSgpOwogICAgfQogIH0KICBbJGlzVXNhYmxlXSgpIHsKICAgIHJldHVybiAhdGhpcy5vY2N1ciB8fCB0aGlzLm9jY3VyLm1heCA9PT0gLTEgfHwgdGhpc1skZXh0cmFdLm51bWJlck9mVXNlIDwgdGhpcy5vY2N1ci5tYXg7CiAgfQogIFskZ2V0TmV4dFBhZ2VdKCkgewogICAgdGhpc1skZXh0cmFdIHx8PSB7CiAgICAgIG51bWJlck9mVXNlOiAxLAogICAgICBwYWdlSW5kZXg6IC0xLAogICAgICBwYWdlU2V0SW5kZXg6IC0xCiAgICB9OwogICAgaWYgKHRoaXMucmVsYXRpb24gPT09ICJvcmRlcmVkT2NjdXJyZW5jZSIpIHsKICAgICAgaWYgKHRoaXNbJGV4dHJhXS5wYWdlSW5kZXggKyAxIDwgdGhpcy5wYWdlQXJlYS5jaGlsZHJlbi5sZW5ndGgpIHsKICAgICAgICB0aGlzWyRleHRyYV0ucGFnZUluZGV4ICs9IDE7CiAgICAgICAgY29uc3QgcGFnZUFyZWEgPSB0aGlzLnBhZ2VBcmVhLmNoaWxkcmVuW3RoaXNbJGV4dHJhXS5wYWdlSW5kZXhdOwogICAgICAgIHJldHVybiBwYWdlQXJlYVskZ2V0TmV4dFBhZ2VdKCk7CiAgICAgIH0KICAgICAgaWYgKHRoaXNbJGV4dHJhXS5wYWdlU2V0SW5kZXggKyAxIDwgdGhpcy5wYWdlU2V0LmNoaWxkcmVuLmxlbmd0aCkgewogICAgICAgIHRoaXNbJGV4dHJhXS5wYWdlU2V0SW5kZXggKz0gMTsKICAgICAgICByZXR1cm4gdGhpcy5wYWdlU2V0LmNoaWxkcmVuW3RoaXNbJGV4dHJhXS5wYWdlU2V0SW5kZXhdWyRnZXROZXh0UGFnZV0oKTsKICAgICAgfQogICAgICBpZiAodGhpc1skaXNVc2FibGVdKCkpIHsKICAgICAgICB0aGlzWyRleHRyYV0ubnVtYmVyT2ZVc2UgKz0gMTsKICAgICAgICB0aGlzWyRleHRyYV0ucGFnZUluZGV4ID0gLTE7CiAgICAgICAgdGhpc1skZXh0cmFdLnBhZ2VTZXRJbmRleCA9IC0xOwogICAgICAgIHJldHVybiB0aGlzWyRnZXROZXh0UGFnZV0oKTsKICAgICAgfQogICAgICBjb25zdCBwYXJlbnQgPSB0aGlzWyRnZXRQYXJlbnRdKCk7CiAgICAgIGlmIChwYXJlbnQgaW5zdGFuY2VvZiBQYWdlU2V0KSB7CiAgICAgICAgcmV0dXJuIHBhcmVudFskZ2V0TmV4dFBhZ2VdKCk7CiAgICAgIH0KICAgICAgdGhpc1skY2xlYW5QYWdlXSgpOwogICAgICByZXR1cm4gdGhpc1skZ2V0TmV4dFBhZ2VdKCk7CiAgICB9CiAgICBjb25zdCBwYWdlTnVtYmVyID0gdGhpc1skZ2V0VGVtcGxhdGVSb290XSgpWyRleHRyYV0ucGFnZU51bWJlcjsKICAgIGNvbnN0IHBhcml0eSA9IHBhZ2VOdW1iZXIgJSAyID09PSAwID8gImV2ZW4iIDogIm9kZCI7CiAgICBjb25zdCBwb3NpdGlvbiA9IHBhZ2VOdW1iZXIgPT09IDAgPyAiZmlyc3QiIDogInJlc3QiOwogICAgbGV0IHBhZ2UgPSB0aGlzLnBhZ2VBcmVhLmNoaWxkcmVuLmZpbmQocCA9PiBwLm9kZE9yRXZlbiA9PT0gcGFyaXR5ICYmIHAucGFnZVBvc2l0aW9uID09PSBwb3NpdGlvbik7CiAgICBpZiAocGFnZSkgewogICAgICByZXR1cm4gcGFnZTsKICAgIH0KICAgIHBhZ2UgPSB0aGlzLnBhZ2VBcmVhLmNoaWxkcmVuLmZpbmQocCA9PiBwLm9kZE9yRXZlbiA9PT0gImFueSIgJiYgcC5wYWdlUG9zaXRpb24gPT09IHBvc2l0aW9uKTsKICAgIGlmIChwYWdlKSB7CiAgICAgIHJldHVybiBwYWdlOwogICAgfQogICAgcGFnZSA9IHRoaXMucGFnZUFyZWEuY2hpbGRyZW4uZmluZChwID0+IHAub2RkT3JFdmVuID09PSAiYW55IiAmJiBwLnBhZ2VQb3NpdGlvbiA9PT0gImFueSIpOwogICAgaWYgKHBhZ2UpIHsKICAgICAgcmV0dXJuIHBhZ2U7CiAgICB9CiAgICByZXR1cm4gdGhpcy5wYWdlQXJlYS5jaGlsZHJlblswXTsKICB9Cn0KY2xhc3MgUGFyYSBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJwYXJhIiwgdHJ1ZSk7CiAgICB0aGlzLmhBbGlnbiA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLmhBbGlnbiwgWyJsZWZ0IiwgImNlbnRlciIsICJqdXN0aWZ5IiwgImp1c3RpZnlBbGwiLCAicmFkaXgiLCAicmlnaHQiXSk7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMubGluZUhlaWdodCA9IGF0dHJpYnV0ZXMubGluZUhlaWdodCA/IGdldE1lYXN1cmVtZW50KGF0dHJpYnV0ZXMubGluZUhlaWdodCwgIjBwdCIpIDogIiI7CiAgICB0aGlzLm1hcmdpbkxlZnQgPSBhdHRyaWJ1dGVzLm1hcmdpbkxlZnQgPyBnZXRNZWFzdXJlbWVudChhdHRyaWJ1dGVzLm1hcmdpbkxlZnQsICIwcHQiKSA6ICIiOwogICAgdGhpcy5tYXJnaW5SaWdodCA9IGF0dHJpYnV0ZXMubWFyZ2luUmlnaHQgPyBnZXRNZWFzdXJlbWVudChhdHRyaWJ1dGVzLm1hcmdpblJpZ2h0LCAiMHB0IikgOiAiIjsKICAgIHRoaXMub3JwaGFucyA9IGdldEludGVnZXIoewogICAgICBkYXRhOiBhdHRyaWJ1dGVzLm9ycGhhbnMsCiAgICAgIGRlZmF1bHRWYWx1ZTogMCwKICAgICAgdmFsaWRhdGU6IHggPT4geCA+PSAwCiAgICB9KTsKICAgIHRoaXMucHJlc2VydmUgPSBhdHRyaWJ1dGVzLnByZXNlcnZlIHx8ICIiOwogICAgdGhpcy5yYWRpeE9mZnNldCA9IGF0dHJpYnV0ZXMucmFkaXhPZmZzZXQgPyBnZXRNZWFzdXJlbWVudChhdHRyaWJ1dGVzLnJhZGl4T2Zmc2V0LCAiMHB0IikgOiAiIjsKICAgIHRoaXMuc3BhY2VBYm92ZSA9IGF0dHJpYnV0ZXMuc3BhY2VBYm92ZSA/IGdldE1lYXN1cmVtZW50KGF0dHJpYnV0ZXMuc3BhY2VBYm92ZSwgIjBwdCIpIDogIiI7CiAgICB0aGlzLnNwYWNlQmVsb3cgPSBhdHRyaWJ1dGVzLnNwYWNlQmVsb3cgPyBnZXRNZWFzdXJlbWVudChhdHRyaWJ1dGVzLnNwYWNlQmVsb3csICIwcHQiKSA6ICIiOwogICAgdGhpcy50YWJEZWZhdWx0ID0gYXR0cmlidXRlcy50YWJEZWZhdWx0ID8gZ2V0TWVhc3VyZW1lbnQodGhpcy50YWJEZWZhdWx0KSA6ICIiOwogICAgdGhpcy50YWJTdG9wcyA9IChhdHRyaWJ1dGVzLnRhYlN0b3BzIHx8ICIiKS50cmltKCkuc3BsaXQoL1xzKy8pLm1hcCgoeCwgaSkgPT4gaSAlIDIgPT09IDEgPyBnZXRNZWFzdXJlbWVudCh4KSA6IHgpOwogICAgdGhpcy50ZXh0SW5kZW50ID0gYXR0cmlidXRlcy50ZXh0SW5kZW50ID8gZ2V0TWVhc3VyZW1lbnQoYXR0cmlidXRlcy50ZXh0SW5kZW50LCAiMHB0IikgOiAiIjsKICAgIHRoaXMudXNlID0gYXR0cmlidXRlcy51c2UgfHwgIiI7CiAgICB0aGlzLnVzZWhyZWYgPSBhdHRyaWJ1dGVzLnVzZWhyZWYgfHwgIiI7CiAgICB0aGlzLnZBbGlnbiA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLnZBbGlnbiwgWyJ0b3AiLCAiYm90dG9tIiwgIm1pZGRsZSJdKTsKICAgIHRoaXMud2lkb3dzID0gZ2V0SW50ZWdlcih7CiAgICAgIGRhdGE6IGF0dHJpYnV0ZXMud2lkb3dzLAogICAgICBkZWZhdWx0VmFsdWU6IDAsCiAgICAgIHZhbGlkYXRlOiB4ID0+IHggPj0gMAogICAgfSk7CiAgICB0aGlzLmh5cGhlbmF0aW9uID0gbnVsbDsKICB9CiAgWyR0b1N0eWxlXSgpIHsKICAgIGNvbnN0IHN0eWxlID0gdG9TdHlsZSh0aGlzLCAiaEFsaWduIik7CiAgICBpZiAodGhpcy5tYXJnaW5MZWZ0ICE9PSAiIikgewogICAgICBzdHlsZS5wYWRkaW5nTGVmdCA9IG1lYXN1cmVUb1N0cmluZyh0aGlzLm1hcmdpbkxlZnQpOwogICAgfQogICAgaWYgKHRoaXMubWFyZ2luUmlnaHQgIT09ICIiKSB7CiAgICAgIHN0eWxlLnBhZGRpbmdSaWdodCA9IG1lYXN1cmVUb1N0cmluZyh0aGlzLm1hcmdpblJpZ2h0KTsKICAgIH0KICAgIGlmICh0aGlzLnNwYWNlQWJvdmUgIT09ICIiKSB7CiAgICAgIHN0eWxlLnBhZGRpbmdUb3AgPSBtZWFzdXJlVG9TdHJpbmcodGhpcy5zcGFjZUFib3ZlKTsKICAgIH0KICAgIGlmICh0aGlzLnNwYWNlQmVsb3cgIT09ICIiKSB7CiAgICAgIHN0eWxlLnBhZGRpbmdCb3R0b20gPSBtZWFzdXJlVG9TdHJpbmcodGhpcy5zcGFjZUJlbG93KTsKICAgIH0KICAgIGlmICh0aGlzLnRleHRJbmRlbnQgIT09ICIiKSB7CiAgICAgIHN0eWxlLnRleHRJbmRlbnQgPSBtZWFzdXJlVG9TdHJpbmcodGhpcy50ZXh0SW5kZW50KTsKICAgICAgZml4VGV4dEluZGVudChzdHlsZSk7CiAgICB9CiAgICBpZiAodGhpcy5saW5lSGVpZ2h0ID4gMCkgewogICAgICBzdHlsZS5saW5lSGVpZ2h0ID0gbWVhc3VyZVRvU3RyaW5nKHRoaXMubGluZUhlaWdodCk7CiAgICB9CiAgICBpZiAodGhpcy50YWJEZWZhdWx0ICE9PSAiIikgewogICAgICBzdHlsZS50YWJTaXplID0gbWVhc3VyZVRvU3RyaW5nKHRoaXMudGFiRGVmYXVsdCk7CiAgICB9CiAgICBpZiAodGhpcy50YWJTdG9wcy5sZW5ndGggPiAwKSB7fQogICAgaWYgKHRoaXMuaHlwaGVuYXRhdGlvbikgewogICAgICBPYmplY3QuYXNzaWduKHN0eWxlLCB0aGlzLmh5cGhlbmF0YXRpb25bJHRvU3R5bGVdKCkpOwogICAgfQogICAgcmV0dXJuIHN0eWxlOwogIH0KfQpjbGFzcyBQYXNzd29yZEVkaXQgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKFRFTVBMQVRFX05TX0lELCAicGFzc3dvcmRFZGl0IiwgdHJ1ZSk7CiAgICB0aGlzLmhTY3JvbGxQb2xpY3kgPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy5oU2Nyb2xsUG9saWN5LCBbImF1dG8iLCAib2ZmIiwgIm9uIl0pOwogICAgdGhpcy5pZCA9IGF0dHJpYnV0ZXMuaWQgfHwgIiI7CiAgICB0aGlzLnBhc3N3b3JkQ2hhciA9IGF0dHJpYnV0ZXMucGFzc3dvcmRDaGFyIHx8ICIqIjsKICAgIHRoaXMudXNlID0gYXR0cmlidXRlcy51c2UgfHwgIiI7CiAgICB0aGlzLnVzZWhyZWYgPSBhdHRyaWJ1dGVzLnVzZWhyZWYgfHwgIiI7CiAgICB0aGlzLmJvcmRlciA9IG51bGw7CiAgICB0aGlzLmV4dHJhcyA9IG51bGw7CiAgICB0aGlzLm1hcmdpbiA9IG51bGw7CiAgfQp9CmNsYXNzIHRlbXBsYXRlX1BhdHRlcm4gZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKFRFTVBMQVRFX05TX0lELCAicGF0dGVybiIsIHRydWUpOwogICAgdGhpcy5pZCA9IGF0dHJpYnV0ZXMuaWQgfHwgIiI7CiAgICB0aGlzLnR5cGUgPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy50eXBlLCBbImNyb3NzSGF0Y2giLCAiY3Jvc3NEaWFnb25hbCIsICJkaWFnb25hbExlZnQiLCAiZGlhZ29uYWxSaWdodCIsICJob3Jpem9udGFsIiwgInZlcnRpY2FsIl0pOwogICAgdGhpcy51c2UgPSBhdHRyaWJ1dGVzLnVzZSB8fCAiIjsKICAgIHRoaXMudXNlaHJlZiA9IGF0dHJpYnV0ZXMudXNlaHJlZiB8fCAiIjsKICAgIHRoaXMuY29sb3IgPSBudWxsOwogICAgdGhpcy5leHRyYXMgPSBudWxsOwogIH0KICBbJHRvU3R5bGVdKHN0YXJ0Q29sb3IpIHsKICAgIHN0YXJ0Q29sb3IgPSBzdGFydENvbG9yID8gc3RhcnRDb2xvclskdG9TdHlsZV0oKSA6ICIjRkZGRkZGIjsKICAgIGNvbnN0IGVuZENvbG9yID0gdGhpcy5jb2xvciA/IHRoaXMuY29sb3JbJHRvU3R5bGVdKCkgOiAiIzAwMDAwMCI7CiAgICBjb25zdCB3aWR0aCA9IDU7CiAgICBjb25zdCBjbWQgPSAicmVwZWF0aW5nLWxpbmVhci1ncmFkaWVudCI7CiAgICBjb25zdCBjb2xvcnMgPSBgJHtzdGFydENvbG9yfSwke3N0YXJ0Q29sb3J9ICR7d2lkdGh9cHgsJHtlbmRDb2xvcn0gJHt3aWR0aH1weCwke2VuZENvbG9yfSAkezIgKiB3aWR0aH1weGA7CiAgICBzd2l0Y2ggKHRoaXMudHlwZSkgewogICAgICBjYXNlICJjcm9zc0hhdGNoIjoKICAgICAgICByZXR1cm4gYCR7Y21kfSh0byB0b3AsJHtjb2xvcnN9KSAke2NtZH0odG8gcmlnaHQsJHtjb2xvcnN9KWA7CiAgICAgIGNhc2UgImNyb3NzRGlhZ29uYWwiOgogICAgICAgIHJldHVybiBgJHtjbWR9KDQ1ZGVnLCR7Y29sb3JzfSkgJHtjbWR9KC00NWRlZywke2NvbG9yc30pYDsKICAgICAgY2FzZSAiZGlhZ29uYWxMZWZ0IjoKICAgICAgICByZXR1cm4gYCR7Y21kfSg0NWRlZywke2NvbG9yc30pYDsKICAgICAgY2FzZSAiZGlhZ29uYWxSaWdodCI6CiAgICAgICAgcmV0dXJuIGAke2NtZH0oLTQ1ZGVnLCR7Y29sb3JzfSlgOwogICAgICBjYXNlICJob3Jpem9udGFsIjoKICAgICAgICByZXR1cm4gYCR7Y21kfSh0byB0b3AsJHtjb2xvcnN9KWA7CiAgICAgIGNhc2UgInZlcnRpY2FsIjoKICAgICAgICByZXR1cm4gYCR7Y21kfSh0byByaWdodCwke2NvbG9yc30pYDsKICAgIH0KICAgIHJldHVybiAiIjsKICB9Cn0KY2xhc3MgUGljdHVyZSBleHRlbmRzIFN0cmluZ09iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJwaWN0dXJlIik7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMudXNlID0gYXR0cmlidXRlcy51c2UgfHwgIiI7CiAgICB0aGlzLnVzZWhyZWYgPSBhdHRyaWJ1dGVzLnVzZWhyZWYgfHwgIiI7CiAgfQp9CmNsYXNzIFByb3RvIGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihURU1QTEFURV9OU19JRCwgInByb3RvIiwgdHJ1ZSk7CiAgICB0aGlzLmFwcGVhcmFuY2VGaWx0ZXIgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuYXJjID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmFyZWEgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuYXNzaXN0ID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmJhcmNvZGUgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuYmluZEl0ZW1zID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmJvb2tlbmQgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuYm9vbGVhbiA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5ib3JkZXIgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuYnJlYWsgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuYnJlYWtBZnRlciA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5icmVha0JlZm9yZSA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5idXR0b24gPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuY2FsY3VsYXRlID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmNhcHRpb24gPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuY2VydGlmaWNhdGUgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuY2VydGlmaWNhdGVzID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmNoZWNrQnV0dG9uID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmNob2ljZUxpc3QgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuY29sb3IgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuY29tYiA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5jb25uZWN0ID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmNvbnRlbnRBcmVhID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmNvcm5lciA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5kYXRlID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmRhdGVUaW1lID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmRhdGVUaW1lRWRpdCA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5kZWNpbWFsID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmRlZmF1bHRVaSA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5kZXNjID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmRpZ2VzdE1ldGhvZCA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5kaWdlc3RNZXRob2RzID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmRyYXcgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuZWRnZSA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5lbmNvZGluZyA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5lbmNvZGluZ3MgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuZW5jcnlwdCA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5lbmNyeXB0RGF0YSA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5lbmNyeXB0aW9uID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmVuY3J5cHRpb25NZXRob2QgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuZW5jcnlwdGlvbk1ldGhvZHMgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuZXZlbnQgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuZXhEYXRhID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmV4T2JqZWN0ID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmV4Y2xHcm91cCA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5leGVjdXRlID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmV4dHJhcyA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5maWVsZCA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5maWxsID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmZpbHRlciA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5mbG9hdCA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5mb250ID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmZvcm1hdCA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5oYW5kbGVyID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmh5cGhlbmF0aW9uID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmltYWdlID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmltYWdlRWRpdCA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5pbnRlZ2VyID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmlzc3VlcnMgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuaXRlbXMgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMua2VlcCA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5rZXlVc2FnZSA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5saW5lID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmxpbmVhciA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5sb2NrRG9jdW1lbnQgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMubWFuaWZlc3QgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMubWFyZ2luID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLm1kcCA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5tZWRpdW0gPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMubWVzc2FnZSA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5udW1lcmljRWRpdCA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5vY2N1ciA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5vaWQgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMub2lkcyA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5vdmVyZmxvdyA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5wYWdlQXJlYSA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5wYWdlU2V0ID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLnBhcmEgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMucGFzc3dvcmRFZGl0ID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLnBhdHRlcm4gPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMucGljdHVyZSA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5yYWRpYWwgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMucmVhc29uID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLnJlYXNvbnMgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMucmVjdGFuZ2xlID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLnJlZiA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5zY3JpcHQgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuc2V0UHJvcGVydHkgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuc2lnbkRhdGEgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuc2lnbmF0dXJlID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLnNpZ25pbmcgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuc29saWQgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuc3BlYWsgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuc3RpcHBsZSA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5zdWJmb3JtID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLnN1YmZvcm1TZXQgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuc3ViamVjdEROID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLnN1YmplY3RETnMgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuc3VibWl0ID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLnRleHQgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMudGV4dEVkaXQgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMudGltZSA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy50aW1lU3RhbXAgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMudG9vbFRpcCA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy50cmF2ZXJzYWwgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMudHJhdmVyc2UgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMudWkgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMudmFsaWRhdGUgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMudmFsdWUgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMudmFyaWFibGVzID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgfQp9CmNsYXNzIFJhZGlhbCBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJyYWRpYWwiLCB0cnVlKTsKICAgIHRoaXMuaWQgPSBhdHRyaWJ1dGVzLmlkIHx8ICIiOwogICAgdGhpcy50eXBlID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMudHlwZSwgWyJ0b0VkZ2UiLCAidG9DZW50ZXIiXSk7CiAgICB0aGlzLnVzZSA9IGF0dHJpYnV0ZXMudXNlIHx8ICIiOwogICAgdGhpcy51c2VocmVmID0gYXR0cmlidXRlcy51c2VocmVmIHx8ICIiOwogICAgdGhpcy5jb2xvciA9IG51bGw7CiAgICB0aGlzLmV4dHJhcyA9IG51bGw7CiAgfQogIFskdG9TdHlsZV0oc3RhcnRDb2xvcikgewogICAgc3RhcnRDb2xvciA9IHN0YXJ0Q29sb3IgPyBzdGFydENvbG9yWyR0b1N0eWxlXSgpIDogIiNGRkZGRkYiOwogICAgY29uc3QgZW5kQ29sb3IgPSB0aGlzLmNvbG9yID8gdGhpcy5jb2xvclskdG9TdHlsZV0oKSA6ICIjMDAwMDAwIjsKICAgIGNvbnN0IGNvbG9ycyA9IHRoaXMudHlwZSA9PT0gInRvRWRnZSIgPyBgJHtzdGFydENvbG9yfSwke2VuZENvbG9yfWAgOiBgJHtlbmRDb2xvcn0sJHtzdGFydENvbG9yfWA7CiAgICByZXR1cm4gYHJhZGlhbC1ncmFkaWVudChjaXJjbGUgYXQgY2VudGVyLCAke2NvbG9yc30pYDsKICB9Cn0KY2xhc3MgUmVhc29uIGV4dGVuZHMgU3RyaW5nT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihURU1QTEFURV9OU19JRCwgInJlYXNvbiIpOwogICAgdGhpcy5pZCA9IGF0dHJpYnV0ZXMuaWQgfHwgIiI7CiAgICB0aGlzLm5hbWUgPSBhdHRyaWJ1dGVzLm5hbWUgfHwgIiI7CiAgICB0aGlzLnVzZSA9IGF0dHJpYnV0ZXMudXNlIHx8ICIiOwogICAgdGhpcy51c2VocmVmID0gYXR0cmlidXRlcy51c2VocmVmIHx8ICIiOwogIH0KfQpjbGFzcyBSZWFzb25zIGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihURU1QTEFURV9OU19JRCwgInJlYXNvbnMiLCB0cnVlKTsKICAgIHRoaXMuaWQgPSBhdHRyaWJ1dGVzLmlkIHx8ICIiOwogICAgdGhpcy50eXBlID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMudHlwZSwgWyJvcHRpb25hbCIsICJyZXF1aXJlZCJdKTsKICAgIHRoaXMudXNlID0gYXR0cmlidXRlcy51c2UgfHwgIiI7CiAgICB0aGlzLnVzZWhyZWYgPSBhdHRyaWJ1dGVzLnVzZWhyZWYgfHwgIiI7CiAgICB0aGlzLnJlYXNvbiA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogIH0KfQpjbGFzcyBSZWN0YW5nbGUgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKFRFTVBMQVRFX05TX0lELCAicmVjdGFuZ2xlIiwgdHJ1ZSk7CiAgICB0aGlzLmhhbmQgPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy5oYW5kLCBbImV2ZW4iLCAibGVmdCIsICJyaWdodCJdKTsKICAgIHRoaXMuaWQgPSBhdHRyaWJ1dGVzLmlkIHx8ICIiOwogICAgdGhpcy51c2UgPSBhdHRyaWJ1dGVzLnVzZSB8fCAiIjsKICAgIHRoaXMudXNlaHJlZiA9IGF0dHJpYnV0ZXMudXNlaHJlZiB8fCAiIjsKICAgIHRoaXMuY29ybmVyID0gbmV3IFhGQU9iamVjdEFycmF5KDQpOwogICAgdGhpcy5lZGdlID0gbmV3IFhGQU9iamVjdEFycmF5KDQpOwogICAgdGhpcy5maWxsID0gbnVsbDsKICB9CiAgWyR0b0hUTUxdKCkgewogICAgY29uc3QgZWRnZSA9IHRoaXMuZWRnZS5jaGlsZHJlbi5sZW5ndGggPyB0aGlzLmVkZ2UuY2hpbGRyZW5bMF0gOiBuZXcgRWRnZSh7fSk7CiAgICBjb25zdCBlZGdlU3R5bGUgPSBlZGdlWyR0b1N0eWxlXSgpOwogICAgY29uc3Qgc3R5bGUgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgaWYgKHRoaXMuZmlsbD8ucHJlc2VuY2UgPT09ICJ2aXNpYmxlIikgewogICAgICBPYmplY3QuYXNzaWduKHN0eWxlLCB0aGlzLmZpbGxbJHRvU3R5bGVdKCkpOwogICAgfSBlbHNlIHsKICAgICAgc3R5bGUuZmlsbCA9ICJ0cmFuc3BhcmVudCI7CiAgICB9CiAgICBzdHlsZS5zdHJva2VXaWR0aCA9IG1lYXN1cmVUb1N0cmluZyhlZGdlLnByZXNlbmNlID09PSAidmlzaWJsZSIgPyBlZGdlLnRoaWNrbmVzcyA6IDApOwogICAgc3R5bGUuc3Ryb2tlID0gZWRnZVN0eWxlLmNvbG9yOwogICAgY29uc3QgY29ybmVyID0gdGhpcy5jb3JuZXIuY2hpbGRyZW4ubGVuZ3RoID8gdGhpcy5jb3JuZXIuY2hpbGRyZW5bMF0gOiBuZXcgQ29ybmVyKHt9KTsKICAgIGNvbnN0IGNvcm5lclN0eWxlID0gY29ybmVyWyR0b1N0eWxlXSgpOwogICAgY29uc3QgcmVjdCA9IHsKICAgICAgbmFtZTogInJlY3QiLAogICAgICBhdHRyaWJ1dGVzOiB7CiAgICAgICAgeG1sbnM6IFNWR19OUywKICAgICAgICB3aWR0aDogIjEwMCUiLAogICAgICAgIGhlaWdodDogIjEwMCUiLAogICAgICAgIHg6IDAsCiAgICAgICAgeTogMCwKICAgICAgICByeDogY29ybmVyU3R5bGUucmFkaXVzLAogICAgICAgIHJ5OiBjb3JuZXJTdHlsZS5yYWRpdXMsCiAgICAgICAgc3R5bGUKICAgICAgfQogICAgfTsKICAgIGNvbnN0IHN2ZyA9IHsKICAgICAgbmFtZTogInN2ZyIsCiAgICAgIGNoaWxkcmVuOiBbcmVjdF0sCiAgICAgIGF0dHJpYnV0ZXM6IHsKICAgICAgICB4bWxuczogU1ZHX05TLAogICAgICAgIHN0eWxlOiB7CiAgICAgICAgICBvdmVyZmxvdzogInZpc2libGUiCiAgICAgICAgfSwKICAgICAgICB3aWR0aDogIjEwMCUiLAogICAgICAgIGhlaWdodDogIjEwMCUiCiAgICAgIH0KICAgIH07CiAgICBjb25zdCBwYXJlbnQgPSB0aGlzWyRnZXRQYXJlbnRdKClbJGdldFBhcmVudF0oKTsKICAgIGlmIChoYXNNYXJnaW4ocGFyZW50KSkgewogICAgICByZXR1cm4gSFRNTFJlc3VsdC5zdWNjZXNzKHsKICAgICAgICBuYW1lOiAiZGl2IiwKICAgICAgICBhdHRyaWJ1dGVzOiB7CiAgICAgICAgICBzdHlsZTogewogICAgICAgICAgICBkaXNwbGF5OiAiaW5saW5lIiwKICAgICAgICAgICAgd2lkdGg6ICIxMDAlIiwKICAgICAgICAgICAgaGVpZ2h0OiAiMTAwJSIKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGNoaWxkcmVuOiBbc3ZnXQogICAgICB9KTsKICAgIH0KICAgIHN2Zy5hdHRyaWJ1dGVzLnN0eWxlLnBvc2l0aW9uID0gImFic29sdXRlIjsKICAgIHJldHVybiBIVE1MUmVzdWx0LnN1Y2Nlc3Moc3ZnKTsKICB9Cn0KY2xhc3MgUmVmRWxlbWVudCBleHRlbmRzIFN0cmluZ09iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJyZWYiKTsKICAgIHRoaXMuaWQgPSBhdHRyaWJ1dGVzLmlkIHx8ICIiOwogICAgdGhpcy51c2UgPSBhdHRyaWJ1dGVzLnVzZSB8fCAiIjsKICAgIHRoaXMudXNlaHJlZiA9IGF0dHJpYnV0ZXMudXNlaHJlZiB8fCAiIjsKICB9Cn0KY2xhc3MgU2NyaXB0IGV4dGVuZHMgU3RyaW5nT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihURU1QTEFURV9OU19JRCwgInNjcmlwdCIpOwogICAgdGhpcy5iaW5kaW5nID0gYXR0cmlidXRlcy5iaW5kaW5nIHx8ICIiOwogICAgdGhpcy5jb250ZW50VHlwZSA9IGF0dHJpYnV0ZXMuY29udGVudFR5cGUgfHwgIiI7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMubmFtZSA9IGF0dHJpYnV0ZXMubmFtZSB8fCAiIjsKICAgIHRoaXMucnVuQXQgPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy5ydW5BdCwgWyJjbGllbnQiLCAiYm90aCIsICJzZXJ2ZXIiXSk7CiAgICB0aGlzLnVzZSA9IGF0dHJpYnV0ZXMudXNlIHx8ICIiOwogICAgdGhpcy51c2VocmVmID0gYXR0cmlidXRlcy51c2VocmVmIHx8ICIiOwogIH0KfQpjbGFzcyBTZXRQcm9wZXJ0eSBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJzZXRQcm9wZXJ0eSIpOwogICAgdGhpcy5jb25uZWN0aW9uID0gYXR0cmlidXRlcy5jb25uZWN0aW9uIHx8ICIiOwogICAgdGhpcy5yZWYgPSBhdHRyaWJ1dGVzLnJlZiB8fCAiIjsKICAgIHRoaXMudGFyZ2V0ID0gYXR0cmlidXRlcy50YXJnZXQgfHwgIiI7CiAgfQp9CmNsYXNzIFNpZ25EYXRhIGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihURU1QTEFURV9OU19JRCwgInNpZ25EYXRhIiwgdHJ1ZSk7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMub3BlcmF0aW9uID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMub3BlcmF0aW9uLCBbInNpZ24iLCAiY2xlYXIiLCAidmVyaWZ5Il0pOwogICAgdGhpcy5yZWYgPSBhdHRyaWJ1dGVzLnJlZiB8fCAiIjsKICAgIHRoaXMudGFyZ2V0ID0gYXR0cmlidXRlcy50YXJnZXQgfHwgIiI7CiAgICB0aGlzLnVzZSA9IGF0dHJpYnV0ZXMudXNlIHx8ICIiOwogICAgdGhpcy51c2VocmVmID0gYXR0cmlidXRlcy51c2VocmVmIHx8ICIiOwogICAgdGhpcy5maWx0ZXIgPSBudWxsOwogICAgdGhpcy5tYW5pZmVzdCA9IG51bGw7CiAgfQp9CmNsYXNzIFNpZ25hdHVyZSBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJzaWduYXR1cmUiLCB0cnVlKTsKICAgIHRoaXMuaWQgPSBhdHRyaWJ1dGVzLmlkIHx8ICIiOwogICAgdGhpcy50eXBlID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMudHlwZSwgWyJQREYxLjMiLCAiUERGMS42Il0pOwogICAgdGhpcy51c2UgPSBhdHRyaWJ1dGVzLnVzZSB8fCAiIjsKICAgIHRoaXMudXNlaHJlZiA9IGF0dHJpYnV0ZXMudXNlaHJlZiB8fCAiIjsKICAgIHRoaXMuYm9yZGVyID0gbnVsbDsKICAgIHRoaXMuZXh0cmFzID0gbnVsbDsKICAgIHRoaXMuZmlsdGVyID0gbnVsbDsKICAgIHRoaXMubWFuaWZlc3QgPSBudWxsOwogICAgdGhpcy5tYXJnaW4gPSBudWxsOwogIH0KfQpjbGFzcyBTaWduaW5nIGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihURU1QTEFURV9OU19JRCwgInNpZ25pbmciLCB0cnVlKTsKICAgIHRoaXMuaWQgPSBhdHRyaWJ1dGVzLmlkIHx8ICIiOwogICAgdGhpcy50eXBlID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMudHlwZSwgWyJvcHRpb25hbCIsICJyZXF1aXJlZCJdKTsKICAgIHRoaXMudXNlID0gYXR0cmlidXRlcy51c2UgfHwgIiI7CiAgICB0aGlzLnVzZWhyZWYgPSBhdHRyaWJ1dGVzLnVzZWhyZWYgfHwgIiI7CiAgICB0aGlzLmNlcnRpZmljYXRlID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgfQp9CmNsYXNzIFNvbGlkIGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihURU1QTEFURV9OU19JRCwgInNvbGlkIiwgdHJ1ZSk7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMudXNlID0gYXR0cmlidXRlcy51c2UgfHwgIiI7CiAgICB0aGlzLnVzZWhyZWYgPSBhdHRyaWJ1dGVzLnVzZWhyZWYgfHwgIiI7CiAgICB0aGlzLmV4dHJhcyA9IG51bGw7CiAgfQogIFskdG9TdHlsZV0oc3RhcnRDb2xvcikgewogICAgcmV0dXJuIHN0YXJ0Q29sb3IgPyBzdGFydENvbG9yWyR0b1N0eWxlXSgpIDogIiNGRkZGRkYiOwogIH0KfQpjbGFzcyBTcGVhayBleHRlbmRzIFN0cmluZ09iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJzcGVhayIpOwogICAgdGhpcy5kaXNhYmxlID0gZ2V0SW50ZWdlcih7CiAgICAgIGRhdGE6IGF0dHJpYnV0ZXMuZGlzYWJsZSwKICAgICAgZGVmYXVsdFZhbHVlOiAwLAogICAgICB2YWxpZGF0ZTogeCA9PiB4ID09PSAxCiAgICB9KTsKICAgIHRoaXMuaWQgPSBhdHRyaWJ1dGVzLmlkIHx8ICIiOwogICAgdGhpcy5wcmlvcml0eSA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLnByaW9yaXR5LCBbImN1c3RvbSIsICJjYXB0aW9uIiwgIm5hbWUiLCAidG9vbFRpcCJdKTsKICAgIHRoaXMucmlkID0gYXR0cmlidXRlcy5yaWQgfHwgIiI7CiAgICB0aGlzLnVzZSA9IGF0dHJpYnV0ZXMudXNlIHx8ICIiOwogICAgdGhpcy51c2VocmVmID0gYXR0cmlidXRlcy51c2VocmVmIHx8ICIiOwogIH0KfQpjbGFzcyBTdGlwcGxlIGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihURU1QTEFURV9OU19JRCwgInN0aXBwbGUiLCB0cnVlKTsKICAgIHRoaXMuaWQgPSBhdHRyaWJ1dGVzLmlkIHx8ICIiOwogICAgdGhpcy5yYXRlID0gZ2V0SW50ZWdlcih7CiAgICAgIGRhdGE6IGF0dHJpYnV0ZXMucmF0ZSwKICAgICAgZGVmYXVsdFZhbHVlOiA1MCwKICAgICAgdmFsaWRhdGU6IHggPT4geCA+PSAwICYmIHggPD0gMTAwCiAgICB9KTsKICAgIHRoaXMudXNlID0gYXR0cmlidXRlcy51c2UgfHwgIiI7CiAgICB0aGlzLnVzZWhyZWYgPSBhdHRyaWJ1dGVzLnVzZWhyZWYgfHwgIiI7CiAgICB0aGlzLmNvbG9yID0gbnVsbDsKICAgIHRoaXMuZXh0cmFzID0gbnVsbDsKICB9CiAgWyR0b1N0eWxlXShiZ0NvbG9yKSB7CiAgICBjb25zdCBhbHBoYSA9IHRoaXMucmF0ZSAvIDEwMDsKICAgIHJldHVybiBVdGlsLm1ha2VIZXhDb2xvcihNYXRoLnJvdW5kKGJnQ29sb3IudmFsdWUuciAqICgxIC0gYWxwaGEpICsgdGhpcy52YWx1ZS5yICogYWxwaGEpLCBNYXRoLnJvdW5kKGJnQ29sb3IudmFsdWUuZyAqICgxIC0gYWxwaGEpICsgdGhpcy52YWx1ZS5nICogYWxwaGEpLCBNYXRoLnJvdW5kKGJnQ29sb3IudmFsdWUuYiAqICgxIC0gYWxwaGEpICsgdGhpcy52YWx1ZS5iICogYWxwaGEpKTsKICB9Cn0KY2xhc3MgU3ViZm9ybSBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJzdWJmb3JtIiwgdHJ1ZSk7CiAgICB0aGlzLmFjY2VzcyA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLmFjY2VzcywgWyJvcGVuIiwgIm5vbkludGVyYWN0aXZlIiwgInByb3RlY3RlZCIsICJyZWFkT25seSJdKTsKICAgIHRoaXMuYWxsb3dNYWNybyA9IGdldEludGVnZXIoewogICAgICBkYXRhOiBhdHRyaWJ1dGVzLmFsbG93TWFjcm8sCiAgICAgIGRlZmF1bHRWYWx1ZTogMCwKICAgICAgdmFsaWRhdGU6IHggPT4geCA9PT0gMQogICAgfSk7CiAgICB0aGlzLmFuY2hvclR5cGUgPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy5hbmNob3JUeXBlLCBbInRvcExlZnQiLCAiYm90dG9tQ2VudGVyIiwgImJvdHRvbUxlZnQiLCAiYm90dG9tUmlnaHQiLCAibWlkZGxlQ2VudGVyIiwgIm1pZGRsZUxlZnQiLCAibWlkZGxlUmlnaHQiLCAidG9wQ2VudGVyIiwgInRvcFJpZ2h0Il0pOwogICAgdGhpcy5jb2xTcGFuID0gZ2V0SW50ZWdlcih7CiAgICAgIGRhdGE6IGF0dHJpYnV0ZXMuY29sU3BhbiwKICAgICAgZGVmYXVsdFZhbHVlOiAxLAogICAgICB2YWxpZGF0ZTogbiA9PiBuID49IDEgfHwgbiA9PT0gLTEKICAgIH0pOwogICAgdGhpcy5jb2x1bW5XaWR0aHMgPSAoYXR0cmlidXRlcy5jb2x1bW5XaWR0aHMgfHwgIiIpLnRyaW0oKS5zcGxpdCgvXHMrLykubWFwKHggPT4geCA9PT0gIi0xIiA/IC0xIDogZ2V0TWVhc3VyZW1lbnQoeCkpOwogICAgdGhpcy5oID0gYXR0cmlidXRlcy5oID8gZ2V0TWVhc3VyZW1lbnQoYXR0cmlidXRlcy5oKSA6ICIiOwogICAgdGhpcy5oQWxpZ24gPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy5oQWxpZ24sIFsibGVmdCIsICJjZW50ZXIiLCAianVzdGlmeSIsICJqdXN0aWZ5QWxsIiwgInJhZGl4IiwgInJpZ2h0Il0pOwogICAgdGhpcy5pZCA9IGF0dHJpYnV0ZXMuaWQgfHwgIiI7CiAgICB0aGlzLmxheW91dCA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLmxheW91dCwgWyJwb3NpdGlvbiIsICJsci10YiIsICJybC1yb3ciLCAicmwtdGIiLCAicm93IiwgInRhYmxlIiwgInRiIl0pOwogICAgdGhpcy5sb2NhbGUgPSBhdHRyaWJ1dGVzLmxvY2FsZSB8fCAiIjsKICAgIHRoaXMubWF4SCA9IGdldE1lYXN1cmVtZW50KGF0dHJpYnV0ZXMubWF4SCwgIjBwdCIpOwogICAgdGhpcy5tYXhXID0gZ2V0TWVhc3VyZW1lbnQoYXR0cmlidXRlcy5tYXhXLCAiMHB0Iik7CiAgICB0aGlzLm1lcmdlTW9kZSA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLm1lcmdlTW9kZSwgWyJjb25zdW1lRGF0YSIsICJtYXRjaFRlbXBsYXRlIl0pOwogICAgdGhpcy5taW5IID0gZ2V0TWVhc3VyZW1lbnQoYXR0cmlidXRlcy5taW5ILCAiMHB0Iik7CiAgICB0aGlzLm1pblcgPSBnZXRNZWFzdXJlbWVudChhdHRyaWJ1dGVzLm1pblcsICIwcHQiKTsKICAgIHRoaXMubmFtZSA9IGF0dHJpYnV0ZXMubmFtZSB8fCAiIjsKICAgIHRoaXMucHJlc2VuY2UgPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy5wcmVzZW5jZSwgWyJ2aXNpYmxlIiwgImhpZGRlbiIsICJpbmFjdGl2ZSIsICJpbnZpc2libGUiXSk7CiAgICB0aGlzLnJlbGV2YW50ID0gZ2V0UmVsZXZhbnQoYXR0cmlidXRlcy5yZWxldmFudCk7CiAgICB0aGlzLnJlc3RvcmVTdGF0ZSA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLnJlc3RvcmVTdGF0ZSwgWyJtYW51YWwiLCAiYXV0byJdKTsKICAgIHRoaXMuc2NvcGUgPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy5zY29wZSwgWyJuYW1lIiwgIm5vbmUiXSk7CiAgICB0aGlzLnVzZSA9IGF0dHJpYnV0ZXMudXNlIHx8ICIiOwogICAgdGhpcy51c2VocmVmID0gYXR0cmlidXRlcy51c2VocmVmIHx8ICIiOwogICAgdGhpcy53ID0gYXR0cmlidXRlcy53ID8gZ2V0TWVhc3VyZW1lbnQoYXR0cmlidXRlcy53KSA6ICIiOwogICAgdGhpcy54ID0gZ2V0TWVhc3VyZW1lbnQoYXR0cmlidXRlcy54LCAiMHB0Iik7CiAgICB0aGlzLnkgPSBnZXRNZWFzdXJlbWVudChhdHRyaWJ1dGVzLnksICIwcHQiKTsKICAgIHRoaXMuYXNzaXN0ID0gbnVsbDsKICAgIHRoaXMuYmluZCA9IG51bGw7CiAgICB0aGlzLmJvb2tlbmQgPSBudWxsOwogICAgdGhpcy5ib3JkZXIgPSBudWxsOwogICAgdGhpcy5icmVhayA9IG51bGw7CiAgICB0aGlzLmNhbGN1bGF0ZSA9IG51bGw7CiAgICB0aGlzLmRlc2MgPSBudWxsOwogICAgdGhpcy5leHRyYXMgPSBudWxsOwogICAgdGhpcy5rZWVwID0gbnVsbDsKICAgIHRoaXMubWFyZ2luID0gbnVsbDsKICAgIHRoaXMub2NjdXIgPSBudWxsOwogICAgdGhpcy5vdmVyZmxvdyA9IG51bGw7CiAgICB0aGlzLnBhZ2VTZXQgPSBudWxsOwogICAgdGhpcy5wYXJhID0gbnVsbDsKICAgIHRoaXMudHJhdmVyc2FsID0gbnVsbDsKICAgIHRoaXMudmFsaWRhdGUgPSBudWxsOwogICAgdGhpcy52YXJpYWJsZXMgPSBudWxsOwogICAgdGhpcy5hcmVhID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmJyZWFrQWZ0ZXIgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuYnJlYWtCZWZvcmUgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuY29ubmVjdCA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5kcmF3ID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmV2ZW50ID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmV4T2JqZWN0ID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmV4Y2xHcm91cCA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5maWVsZCA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5wcm90byA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5zZXRQcm9wZXJ0eSA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5zdWJmb3JtID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLnN1YmZvcm1TZXQgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICB9CiAgWyRnZXRTdWJmb3JtUGFyZW50XSgpIHsKICAgIGNvbnN0IHBhcmVudCA9IHRoaXNbJGdldFBhcmVudF0oKTsKICAgIGlmIChwYXJlbnQgaW5zdGFuY2VvZiBTdWJmb3JtU2V0KSB7CiAgICAgIHJldHVybiBwYXJlbnRbJGdldFN1YmZvcm1QYXJlbnRdKCk7CiAgICB9CiAgICByZXR1cm4gcGFyZW50OwogIH0KICBbJGlzQmluZGFibGVdKCkgewogICAgcmV0dXJuIHRydWU7CiAgfQogIFskaXNUaGVyZU1vcmVXaWR0aF0oKSB7CiAgICByZXR1cm4gdGhpcy5sYXlvdXQuZW5kc1dpdGgoIi10YiIpICYmIHRoaXNbJGV4dHJhXS5hdHRlbXB0ID09PSAwICYmIHRoaXNbJGV4dHJhXS5udW1iZXJJbkxpbmUgPiAwIHx8IHRoaXNbJGdldFBhcmVudF0oKVskaXNUaGVyZU1vcmVXaWR0aF0oKTsKICB9CiAgKlskZ2V0Q29udGFpbmVkQ2hpbGRyZW5dKCkgewogICAgeWllbGQqIGdldENvbnRhaW5lZENoaWxkcmVuKHRoaXMpOwogIH0KICBbJGZsdXNoSFRNTF0oKSB7CiAgICByZXR1cm4gZmx1c2hIVE1MKHRoaXMpOwogIH0KICBbJGFkZEhUTUxdKGh0bWwsIGJib3gpIHsKICAgIGFkZEhUTUwodGhpcywgaHRtbCwgYmJveCk7CiAgfQogIFskZ2V0QXZhaWxhYmxlU3BhY2VdKCkgewogICAgcmV0dXJuIGdldEF2YWlsYWJsZVNwYWNlKHRoaXMpOwogIH0KICBbJGlzU3BsaXR0YWJsZV0oKSB7CiAgICBjb25zdCBwYXJlbnQgPSB0aGlzWyRnZXRTdWJmb3JtUGFyZW50XSgpOwogICAgaWYgKCFwYXJlbnRbJGlzU3BsaXR0YWJsZV0oKSkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgICBpZiAodGhpc1skZXh0cmFdLl9pc1NwbGl0dGFibGUgIT09IHVuZGVmaW5lZCkgewogICAgICByZXR1cm4gdGhpc1skZXh0cmFdLl9pc1NwbGl0dGFibGU7CiAgICB9CiAgICBpZiAodGhpcy5sYXlvdXQgPT09ICJwb3NpdGlvbiIgfHwgdGhpcy5sYXlvdXQuaW5jbHVkZXMoInJvdyIpKSB7CiAgICAgIHRoaXNbJGV4dHJhXS5faXNTcGxpdHRhYmxlID0gZmFsc2U7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICAgIGlmICh0aGlzLmtlZXAgJiYgdGhpcy5rZWVwLmludGFjdCAhPT0gIm5vbmUiKSB7CiAgICAgIHRoaXNbJGV4dHJhXS5faXNTcGxpdHRhYmxlID0gZmFsc2U7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICAgIGlmIChwYXJlbnQubGF5b3V0Py5lbmRzV2l0aCgiLXRiIikgJiYgcGFyZW50WyRleHRyYV0ubnVtYmVySW5MaW5lICE9PSAwKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICAgIHRoaXNbJGV4dHJhXS5faXNTcGxpdHRhYmxlID0gdHJ1ZTsKICAgIHJldHVybiB0cnVlOwogIH0KICBbJHRvSFRNTF0oYXZhaWxhYmxlU3BhY2UpIHsKICAgIHNldFRhYkluZGV4KHRoaXMpOwogICAgaWYgKHRoaXMuYnJlYWspIHsKICAgICAgaWYgKHRoaXMuYnJlYWsuYWZ0ZXIgIT09ICJhdXRvIiB8fCB0aGlzLmJyZWFrLmFmdGVyVGFyZ2V0ICE9PSAiIikgewogICAgICAgIGNvbnN0IG5vZGUgPSBuZXcgQnJlYWtBZnRlcih7CiAgICAgICAgICB0YXJnZXRUeXBlOiB0aGlzLmJyZWFrLmFmdGVyLAogICAgICAgICAgdGFyZ2V0OiB0aGlzLmJyZWFrLmFmdGVyVGFyZ2V0LAogICAgICAgICAgc3RhcnROZXc6IHRoaXMuYnJlYWsuc3RhcnROZXcudG9TdHJpbmcoKQogICAgICAgIH0pOwogICAgICAgIG5vZGVbJGdsb2JhbERhdGFdID0gdGhpc1skZ2xvYmFsRGF0YV07CiAgICAgICAgdGhpc1skYXBwZW5kQ2hpbGRdKG5vZGUpOwogICAgICAgIHRoaXMuYnJlYWtBZnRlci5wdXNoKG5vZGUpOwogICAgICB9CiAgICAgIGlmICh0aGlzLmJyZWFrLmJlZm9yZSAhPT0gImF1dG8iIHx8IHRoaXMuYnJlYWsuYmVmb3JlVGFyZ2V0ICE9PSAiIikgewogICAgICAgIGNvbnN0IG5vZGUgPSBuZXcgQnJlYWtCZWZvcmUoewogICAgICAgICAgdGFyZ2V0VHlwZTogdGhpcy5icmVhay5iZWZvcmUsCiAgICAgICAgICB0YXJnZXQ6IHRoaXMuYnJlYWsuYmVmb3JlVGFyZ2V0LAogICAgICAgICAgc3RhcnROZXc6IHRoaXMuYnJlYWsuc3RhcnROZXcudG9TdHJpbmcoKQogICAgICAgIH0pOwogICAgICAgIG5vZGVbJGdsb2JhbERhdGFdID0gdGhpc1skZ2xvYmFsRGF0YV07CiAgICAgICAgdGhpc1skYXBwZW5kQ2hpbGRdKG5vZGUpOwogICAgICAgIHRoaXMuYnJlYWtCZWZvcmUucHVzaChub2RlKTsKICAgICAgfQogICAgICBpZiAodGhpcy5icmVhay5vdmVyZmxvd1RhcmdldCAhPT0gIiIpIHsKICAgICAgICBjb25zdCBub2RlID0gbmV3IE92ZXJmbG93KHsKICAgICAgICAgIHRhcmdldDogdGhpcy5icmVhay5vdmVyZmxvd1RhcmdldCwKICAgICAgICAgIGxlYWRlcjogdGhpcy5icmVhay5vdmVyZmxvd0xlYWRlciwKICAgICAgICAgIHRyYWlsZXI6IHRoaXMuYnJlYWsub3ZlcmZsb3dUcmFpbGVyCiAgICAgICAgfSk7CiAgICAgICAgbm9kZVskZ2xvYmFsRGF0YV0gPSB0aGlzWyRnbG9iYWxEYXRhXTsKICAgICAgICB0aGlzWyRhcHBlbmRDaGlsZF0obm9kZSk7CiAgICAgICAgdGhpcy5vdmVyZmxvdy5wdXNoKG5vZGUpOwogICAgICB9CiAgICAgIHRoaXNbJHJlbW92ZUNoaWxkXSh0aGlzLmJyZWFrKTsKICAgICAgdGhpcy5icmVhayA9IG51bGw7CiAgICB9CiAgICBpZiAodGhpcy5wcmVzZW5jZSA9PT0gImhpZGRlbiIgfHwgdGhpcy5wcmVzZW5jZSA9PT0gImluYWN0aXZlIikgewogICAgICByZXR1cm4gSFRNTFJlc3VsdC5FTVBUWTsKICAgIH0KICAgIGlmICh0aGlzLmJyZWFrQmVmb3JlLmNoaWxkcmVuLmxlbmd0aCA+IDEgfHwgdGhpcy5icmVha0FmdGVyLmNoaWxkcmVuLmxlbmd0aCA+IDEpIHsKICAgICAgd2FybigiWEZBIC0gU2V2ZXJhbCBicmVha0JlZm9yZSBvciBicmVha0FmdGVyIGluIHN1YmZvcm1zOiBwbGVhc2UgZmlsZSBhIGJ1Zy4iKTsKICAgIH0KICAgIGlmICh0aGlzLmJyZWFrQmVmb3JlLmNoaWxkcmVuLmxlbmd0aCA+PSAxKSB7CiAgICAgIGNvbnN0IGJyZWFrQmVmb3JlID0gdGhpcy5icmVha0JlZm9yZS5jaGlsZHJlblswXTsKICAgICAgaWYgKGhhbmRsZUJyZWFrKGJyZWFrQmVmb3JlKSkgewogICAgICAgIHJldHVybiBIVE1MUmVzdWx0LmJyZWFrTm9kZShicmVha0JlZm9yZSk7CiAgICAgIH0KICAgIH0KICAgIGlmICh0aGlzWyRleHRyYV0/LmFmdGVyQnJlYWtBZnRlcikgewogICAgICByZXR1cm4gSFRNTFJlc3VsdC5FTVBUWTsKICAgIH0KICAgIGZpeERpbWVuc2lvbnModGhpcyk7CiAgICBjb25zdCBjaGlsZHJlbiA9IFtdOwogICAgY29uc3QgYXR0cmlidXRlcyA9IHsKICAgICAgaWQ6IHRoaXNbJHVpZF0sCiAgICAgIGNsYXNzOiBbXQogICAgfTsKICAgIHNldEFjY2Vzcyh0aGlzLCBhdHRyaWJ1dGVzLmNsYXNzKTsKICAgIHRoaXNbJGV4dHJhXSB8fD0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgIE9iamVjdC5hc3NpZ24odGhpc1skZXh0cmFdLCB7CiAgICAgIGNoaWxkcmVuLAogICAgICBsaW5lOiBudWxsLAogICAgICBhdHRyaWJ1dGVzLAogICAgICBhdHRlbXB0OiAwLAogICAgICBudW1iZXJJbkxpbmU6IDAsCiAgICAgIGF2YWlsYWJsZVNwYWNlOiB7CiAgICAgICAgd2lkdGg6IE1hdGgubWluKHRoaXMudyB8fCBJbmZpbml0eSwgYXZhaWxhYmxlU3BhY2Uud2lkdGgpLAogICAgICAgIGhlaWdodDogTWF0aC5taW4odGhpcy5oIHx8IEluZmluaXR5LCBhdmFpbGFibGVTcGFjZS5oZWlnaHQpCiAgICAgIH0sCiAgICAgIHdpZHRoOiAwLAogICAgICBoZWlnaHQ6IDAsCiAgICAgIHByZXZIZWlnaHQ6IDAsCiAgICAgIGN1cnJlbnRXaWR0aDogMAogICAgfSk7CiAgICBjb25zdCByb290ID0gdGhpc1skZ2V0VGVtcGxhdGVSb290XSgpOwogICAgY29uc3Qgc2F2ZWROb0xheW91dEZhaWx1cmUgPSByb290WyRleHRyYV0ubm9MYXlvdXRGYWlsdXJlOwogICAgY29uc3QgaXNTcGxpdHRhYmxlID0gdGhpc1skaXNTcGxpdHRhYmxlXSgpOwogICAgaWYgKCFpc1NwbGl0dGFibGUpIHsKICAgICAgc2V0Rmlyc3RVbnNwbGl0dGFibGUodGhpcyk7CiAgICB9CiAgICBpZiAoIWNoZWNrRGltZW5zaW9ucyh0aGlzLCBhdmFpbGFibGVTcGFjZSkpIHsKICAgICAgcmV0dXJuIEhUTUxSZXN1bHQuRkFJTFVSRTsKICAgIH0KICAgIGNvbnN0IGZpbHRlciA9IG5ldyBTZXQoWyJhcmVhIiwgImRyYXciLCAiZXhjbEdyb3VwIiwgImZpZWxkIiwgInN1YmZvcm0iLCAic3ViZm9ybVNldCJdKTsKICAgIGlmICh0aGlzLmxheW91dC5pbmNsdWRlcygicm93IikpIHsKICAgICAgY29uc3QgY29sdW1uV2lkdGhzID0gdGhpc1skZ2V0U3ViZm9ybVBhcmVudF0oKS5jb2x1bW5XaWR0aHM7CiAgICAgIGlmIChBcnJheS5pc0FycmF5KGNvbHVtbldpZHRocykgJiYgY29sdW1uV2lkdGhzLmxlbmd0aCA+IDApIHsKICAgICAgICB0aGlzWyRleHRyYV0uY29sdW1uV2lkdGhzID0gY29sdW1uV2lkdGhzOwogICAgICAgIHRoaXNbJGV4dHJhXS5jdXJyZW50Q29sdW1uID0gMDsKICAgICAgfQogICAgfQogICAgY29uc3Qgc3R5bGUgPSB0b1N0eWxlKHRoaXMsICJhbmNob3JUeXBlIiwgImRpbWVuc2lvbnMiLCAicG9zaXRpb24iLCAicHJlc2VuY2UiLCAiYm9yZGVyIiwgIm1hcmdpbiIsICJoQWxpZ24iKTsKICAgIGNvbnN0IGNsYXNzTmFtZXMgPSBbInhmYVN1YmZvcm0iXTsKICAgIGNvbnN0IGNsID0gbGF5b3V0Q2xhc3ModGhpcyk7CiAgICBpZiAoY2wpIHsKICAgICAgY2xhc3NOYW1lcy5wdXNoKGNsKTsKICAgIH0KICAgIGF0dHJpYnV0ZXMuc3R5bGUgPSBzdHlsZTsKICAgIGF0dHJpYnV0ZXMuY2xhc3MgPSBjbGFzc05hbWVzOwogICAgaWYgKHRoaXMubmFtZSkgewogICAgICBhdHRyaWJ1dGVzLnhmYU5hbWUgPSB0aGlzLm5hbWU7CiAgICB9CiAgICBpZiAodGhpcy5vdmVyZmxvdykgewogICAgICBjb25zdCBvdmVyZmxvd0V4dHJhID0gdGhpcy5vdmVyZmxvd1skZ2V0RXh0cmFdKCk7CiAgICAgIGlmIChvdmVyZmxvd0V4dHJhLmFkZExlYWRlcikgewogICAgICAgIG92ZXJmbG93RXh0cmEuYWRkTGVhZGVyID0gZmFsc2U7CiAgICAgICAgaGFuZGxlT3ZlcmZsb3codGhpcywgb3ZlcmZsb3dFeHRyYS5sZWFkZXIsIGF2YWlsYWJsZVNwYWNlKTsKICAgICAgfQogICAgfQogICAgdGhpc1skcHVzaFBhcmFdKCk7CiAgICBjb25zdCBpc0xyVGIgPSB0aGlzLmxheW91dCA9PT0gImxyLXRiIiB8fCB0aGlzLmxheW91dCA9PT0gInJsLXRiIjsKICAgIGNvbnN0IG1heFJ1biA9IGlzTHJUYiA/IE1BWF9BVFRFTVBUU19GT1JfTFJUQl9MQVlPVVQgOiAxOwogICAgZm9yICg7IHRoaXNbJGV4dHJhXS5hdHRlbXB0IDwgbWF4UnVuOyB0aGlzWyRleHRyYV0uYXR0ZW1wdCsrKSB7CiAgICAgIGlmIChpc0xyVGIgJiYgdGhpc1skZXh0cmFdLmF0dGVtcHQgPT09IE1BWF9BVFRFTVBUU19GT1JfTFJUQl9MQVlPVVQgLSAxKSB7CiAgICAgICAgdGhpc1skZXh0cmFdLm51bWJlckluTGluZSA9IDA7CiAgICAgIH0KICAgICAgY29uc3QgcmVzdWx0ID0gdGhpc1skY2hpbGRyZW5Ub0hUTUxdKHsKICAgICAgICBmaWx0ZXIsCiAgICAgICAgaW5jbHVkZTogdHJ1ZQogICAgICB9KTsKICAgICAgaWYgKHJlc3VsdC5zdWNjZXNzKSB7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgICAgaWYgKHJlc3VsdC5pc0JyZWFrKCkpIHsKICAgICAgICB0aGlzWyRwb3BQYXJhXSgpOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH0KICAgICAgaWYgKGlzTHJUYiAmJiB0aGlzWyRleHRyYV0uYXR0ZW1wdCA9PT0gMCAmJiB0aGlzWyRleHRyYV0ubnVtYmVySW5MaW5lID09PSAwICYmICFyb290WyRleHRyYV0ubm9MYXlvdXRGYWlsdXJlKSB7CiAgICAgICAgdGhpc1skZXh0cmFdLmF0dGVtcHQgPSBtYXhSdW47CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KICAgIHRoaXNbJHBvcFBhcmFdKCk7CiAgICBpZiAoIWlzU3BsaXR0YWJsZSkgewogICAgICB1bnNldEZpcnN0VW5zcGxpdHRhYmxlKHRoaXMpOwogICAgfQogICAgcm9vdFskZXh0cmFdLm5vTGF5b3V0RmFpbHVyZSA9IHNhdmVkTm9MYXlvdXRGYWlsdXJlOwogICAgaWYgKHRoaXNbJGV4dHJhXS5hdHRlbXB0ID09PSBtYXhSdW4pIHsKICAgICAgaWYgKHRoaXMub3ZlcmZsb3cpIHsKICAgICAgICB0aGlzWyRnZXRUZW1wbGF0ZVJvb3RdKClbJGV4dHJhXS5vdmVyZmxvd05vZGUgPSB0aGlzLm92ZXJmbG93OwogICAgICB9CiAgICAgIGlmICghaXNTcGxpdHRhYmxlKSB7CiAgICAgICAgZGVsZXRlIHRoaXNbJGV4dHJhXTsKICAgICAgfQogICAgICByZXR1cm4gSFRNTFJlc3VsdC5GQUlMVVJFOwogICAgfQogICAgaWYgKHRoaXMub3ZlcmZsb3cpIHsKICAgICAgY29uc3Qgb3ZlcmZsb3dFeHRyYSA9IHRoaXMub3ZlcmZsb3dbJGdldEV4dHJhXSgpOwogICAgICBpZiAob3ZlcmZsb3dFeHRyYS5hZGRUcmFpbGVyKSB7CiAgICAgICAgb3ZlcmZsb3dFeHRyYS5hZGRUcmFpbGVyID0gZmFsc2U7CiAgICAgICAgaGFuZGxlT3ZlcmZsb3codGhpcywgb3ZlcmZsb3dFeHRyYS50cmFpbGVyLCBhdmFpbGFibGVTcGFjZSk7CiAgICAgIH0KICAgIH0KICAgIGxldCBtYXJnaW5IID0gMDsKICAgIGxldCBtYXJnaW5WID0gMDsKICAgIGlmICh0aGlzLm1hcmdpbikgewogICAgICBtYXJnaW5IID0gdGhpcy5tYXJnaW4ubGVmdEluc2V0ICsgdGhpcy5tYXJnaW4ucmlnaHRJbnNldDsKICAgICAgbWFyZ2luViA9IHRoaXMubWFyZ2luLnRvcEluc2V0ICsgdGhpcy5tYXJnaW4uYm90dG9tSW5zZXQ7CiAgICB9CiAgICBjb25zdCB3aWR0aCA9IE1hdGgubWF4KHRoaXNbJGV4dHJhXS53aWR0aCArIG1hcmdpbkgsIHRoaXMudyB8fCAwKTsKICAgIGNvbnN0IGhlaWdodCA9IE1hdGgubWF4KHRoaXNbJGV4dHJhXS5oZWlnaHQgKyBtYXJnaW5WLCB0aGlzLmggfHwgMCk7CiAgICBjb25zdCBiYm94ID0gW3RoaXMueCwgdGhpcy55LCB3aWR0aCwgaGVpZ2h0XTsKICAgIGlmICh0aGlzLncgPT09ICIiKSB7CiAgICAgIHN0eWxlLndpZHRoID0gbWVhc3VyZVRvU3RyaW5nKHdpZHRoKTsKICAgIH0KICAgIGlmICh0aGlzLmggPT09ICIiKSB7CiAgICAgIHN0eWxlLmhlaWdodCA9IG1lYXN1cmVUb1N0cmluZyhoZWlnaHQpOwogICAgfQogICAgaWYgKChzdHlsZS53aWR0aCA9PT0gIjBweCIgfHwgc3R5bGUuaGVpZ2h0ID09PSAiMHB4IikgJiYgY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7CiAgICAgIHJldHVybiBIVE1MUmVzdWx0LkVNUFRZOwogICAgfQogICAgY29uc3QgaHRtbCA9IHsKICAgICAgbmFtZTogImRpdiIsCiAgICAgIGF0dHJpYnV0ZXMsCiAgICAgIGNoaWxkcmVuCiAgICB9OwogICAgYXBwbHlBc3Npc3QodGhpcywgYXR0cmlidXRlcyk7CiAgICBjb25zdCByZXN1bHQgPSBIVE1MUmVzdWx0LnN1Y2Nlc3MoY3JlYXRlV3JhcHBlcih0aGlzLCBodG1sKSwgYmJveCk7CiAgICBpZiAodGhpcy5icmVha0FmdGVyLmNoaWxkcmVuLmxlbmd0aCA+PSAxKSB7CiAgICAgIGNvbnN0IGJyZWFrQWZ0ZXIgPSB0aGlzLmJyZWFrQWZ0ZXIuY2hpbGRyZW5bMF07CiAgICAgIGlmIChoYW5kbGVCcmVhayhicmVha0FmdGVyKSkgewogICAgICAgIHRoaXNbJGV4dHJhXS5hZnRlckJyZWFrQWZ0ZXIgPSByZXN1bHQ7CiAgICAgICAgcmV0dXJuIEhUTUxSZXN1bHQuYnJlYWtOb2RlKGJyZWFrQWZ0ZXIpOwogICAgICB9CiAgICB9CiAgICBkZWxldGUgdGhpc1skZXh0cmFdOwogICAgcmV0dXJuIHJlc3VsdDsKICB9Cn0KY2xhc3MgU3ViZm9ybVNldCBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJzdWJmb3JtU2V0IiwgdHJ1ZSk7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMubmFtZSA9IGF0dHJpYnV0ZXMubmFtZSB8fCAiIjsKICAgIHRoaXMucmVsYXRpb24gPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy5yZWxhdGlvbiwgWyJvcmRlcmVkIiwgImNob2ljZSIsICJ1bm9yZGVyZWQiXSk7CiAgICB0aGlzLnJlbGV2YW50ID0gZ2V0UmVsZXZhbnQoYXR0cmlidXRlcy5yZWxldmFudCk7CiAgICB0aGlzLnVzZSA9IGF0dHJpYnV0ZXMudXNlIHx8ICIiOwogICAgdGhpcy51c2VocmVmID0gYXR0cmlidXRlcy51c2VocmVmIHx8ICIiOwogICAgdGhpcy5ib29rZW5kID0gbnVsbDsKICAgIHRoaXMuYnJlYWsgPSBudWxsOwogICAgdGhpcy5kZXNjID0gbnVsbDsKICAgIHRoaXMuZXh0cmFzID0gbnVsbDsKICAgIHRoaXMub2NjdXIgPSBudWxsOwogICAgdGhpcy5vdmVyZmxvdyA9IG51bGw7CiAgICB0aGlzLmJyZWFrQWZ0ZXIgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuYnJlYWtCZWZvcmUgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuc3ViZm9ybSA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5zdWJmb3JtU2V0ID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgfQogICpbJGdldENvbnRhaW5lZENoaWxkcmVuXSgpIHsKICAgIHlpZWxkKiBnZXRDb250YWluZWRDaGlsZHJlbih0aGlzKTsKICB9CiAgWyRnZXRTdWJmb3JtUGFyZW50XSgpIHsKICAgIGxldCBwYXJlbnQgPSB0aGlzWyRnZXRQYXJlbnRdKCk7CiAgICB3aGlsZSAoIShwYXJlbnQgaW5zdGFuY2VvZiBTdWJmb3JtKSkgewogICAgICBwYXJlbnQgPSBwYXJlbnRbJGdldFBhcmVudF0oKTsKICAgIH0KICAgIHJldHVybiBwYXJlbnQ7CiAgfQogIFskaXNCaW5kYWJsZV0oKSB7CiAgICByZXR1cm4gdHJ1ZTsKICB9Cn0KY2xhc3MgU3ViamVjdEROIGV4dGVuZHMgQ29udGVudE9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJzdWJqZWN0RE4iKTsKICAgIHRoaXMuZGVsaW1pdGVyID0gYXR0cmlidXRlcy5kZWxpbWl0ZXIgfHwgIiwiOwogICAgdGhpcy5pZCA9IGF0dHJpYnV0ZXMuaWQgfHwgIiI7CiAgICB0aGlzLm5hbWUgPSBhdHRyaWJ1dGVzLm5hbWUgfHwgIiI7CiAgICB0aGlzLnVzZSA9IGF0dHJpYnV0ZXMudXNlIHx8ICIiOwogICAgdGhpcy51c2VocmVmID0gYXR0cmlidXRlcy51c2VocmVmIHx8ICIiOwogIH0KICBbJGZpbmFsaXplXSgpIHsKICAgIHRoaXNbJGNvbnRlbnRdID0gbmV3IE1hcCh0aGlzWyRjb250ZW50XS5zcGxpdCh0aGlzLmRlbGltaXRlcikubWFwKGt2ID0+IHsKICAgICAga3YgPSBrdi5zcGxpdCgiPSIsIDIpOwogICAgICBrdlswXSA9IGt2WzBdLnRyaW0oKTsKICAgICAgcmV0dXJuIGt2OwogICAgfSkpOwogIH0KfQpjbGFzcyBTdWJqZWN0RE5zIGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihURU1QTEFURV9OU19JRCwgInN1YmplY3RETnMiLCB0cnVlKTsKICAgIHRoaXMuaWQgPSBhdHRyaWJ1dGVzLmlkIHx8ICIiOwogICAgdGhpcy50eXBlID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMudHlwZSwgWyJvcHRpb25hbCIsICJyZXF1aXJlZCJdKTsKICAgIHRoaXMudXNlID0gYXR0cmlidXRlcy51c2UgfHwgIiI7CiAgICB0aGlzLnVzZWhyZWYgPSBhdHRyaWJ1dGVzLnVzZWhyZWYgfHwgIiI7CiAgICB0aGlzLnN1YmplY3RETiA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogIH0KfQpjbGFzcyBTdWJtaXQgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKFRFTVBMQVRFX05TX0lELCAic3VibWl0IiwgdHJ1ZSk7CiAgICB0aGlzLmVtYmVkUERGID0gZ2V0SW50ZWdlcih7CiAgICAgIGRhdGE6IGF0dHJpYnV0ZXMuZW1iZWRQREYsCiAgICAgIGRlZmF1bHRWYWx1ZTogMCwKICAgICAgdmFsaWRhdGU6IHggPT4geCA9PT0gMQogICAgfSk7CiAgICB0aGlzLmZvcm1hdCA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLmZvcm1hdCwgWyJ4ZHAiLCAiZm9ybWRhdGEiLCAicGRmIiwgInVybGVuY29kZWQiLCAieGZkIiwgInhtbCJdKTsKICAgIHRoaXMuaWQgPSBhdHRyaWJ1dGVzLmlkIHx8ICIiOwogICAgdGhpcy50YXJnZXQgPSBhdHRyaWJ1dGVzLnRhcmdldCB8fCAiIjsKICAgIHRoaXMudGV4dEVuY29kaW5nID0gZ2V0S2V5d29yZCh7CiAgICAgIGRhdGE6IGF0dHJpYnV0ZXMudGV4dEVuY29kaW5nID8gYXR0cmlidXRlcy50ZXh0RW5jb2RpbmcudG9Mb3dlckNhc2UoKSA6ICIiLAogICAgICBkZWZhdWx0VmFsdWU6ICIiLAogICAgICB2YWxpZGF0ZTogayA9PiBbInV0Zi04IiwgImJpZy1maXZlIiwgImZvbnRzcGVjaWZpYyIsICJnYmsiLCAiZ2ItMTgwMzAiLCAiZ2ItMjMxMiIsICJrc2MtNTYwMSIsICJub25lIiwgInNoaWZ0LWppcyIsICJ1Y3MtMiIsICJ1dGYtMTYiXS5pbmNsdWRlcyhrKSB8fCBrLm1hdGNoKC9pc28tODg1OS1cZHsyfS8pCiAgICB9KTsKICAgIHRoaXMudXNlID0gYXR0cmlidXRlcy51c2UgfHwgIiI7CiAgICB0aGlzLnVzZWhyZWYgPSBhdHRyaWJ1dGVzLnVzZWhyZWYgfHwgIiI7CiAgICB0aGlzLnhkcENvbnRlbnQgPSBhdHRyaWJ1dGVzLnhkcENvbnRlbnQgfHwgIiI7CiAgICB0aGlzLmVuY3J5cHQgPSBudWxsOwogICAgdGhpcy5lbmNyeXB0RGF0YSA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5zaWduRGF0YSA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogIH0KfQpjbGFzcyBUZW1wbGF0ZSBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJ0ZW1wbGF0ZSIsIHRydWUpOwogICAgdGhpcy5iYXNlUHJvZmlsZSA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLmJhc2VQcm9maWxlLCBbImZ1bGwiLCAiaW50ZXJhY3RpdmVGb3JtcyJdKTsKICAgIHRoaXMuZXh0cmFzID0gbnVsbDsKICAgIHRoaXMuc3ViZm9ybSA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogIH0KICBbJGZpbmFsaXplXSgpIHsKICAgIGlmICh0aGlzLnN1YmZvcm0uY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7CiAgICAgIHdhcm4oIlhGQSAtIE5vIHN1YmZvcm1zIGluIHRlbXBsYXRlIG5vZGUuIik7CiAgICB9CiAgICBpZiAodGhpcy5zdWJmb3JtLmNoaWxkcmVuLmxlbmd0aCA+PSAyKSB7CiAgICAgIHdhcm4oIlhGQSAtIFNldmVyYWwgc3ViZm9ybXMgaW4gdGVtcGxhdGUgbm9kZTogcGxlYXNlIGZpbGUgYSBidWcuIik7CiAgICB9CiAgICB0aGlzWyR0YWJJbmRleF0gPSBERUZBVUxUX1RBQl9JTkRFWDsKICB9CiAgWyRpc1NwbGl0dGFibGVdKCkgewogICAgcmV0dXJuIHRydWU7CiAgfQogIFskc2VhcmNoTm9kZV0oZXhwciwgY29udGFpbmVyKSB7CiAgICBpZiAoZXhwci5zdGFydHNXaXRoKCIjIikpIHsKICAgICAgcmV0dXJuIFt0aGlzWyRpZHNdLmdldChleHByLnNsaWNlKDEpKV07CiAgICB9CiAgICByZXR1cm4gc2VhcmNoTm9kZSh0aGlzLCBjb250YWluZXIsIGV4cHIsIHRydWUsIHRydWUpOwogIH0KICAqWyR0b1BhZ2VzXSgpIHsKICAgIGlmICghdGhpcy5zdWJmb3JtLmNoaWxkcmVuLmxlbmd0aCkgewogICAgICByZXR1cm4gSFRNTFJlc3VsdC5zdWNjZXNzKHsKICAgICAgICBuYW1lOiAiZGl2IiwKICAgICAgICBjaGlsZHJlbjogW10KICAgICAgfSk7CiAgICB9CiAgICB0aGlzWyRleHRyYV0gPSB7CiAgICAgIG92ZXJmbG93Tm9kZTogbnVsbCwKICAgICAgZmlyc3RVbnNwbGl0dGFibGU6IG51bGwsCiAgICAgIGN1cnJlbnRDb250ZW50QXJlYTogbnVsbCwKICAgICAgY3VycmVudFBhZ2VBcmVhOiBudWxsLAogICAgICBub0xheW91dEZhaWx1cmU6IGZhbHNlLAogICAgICBwYWdlTnVtYmVyOiAxLAogICAgICBwYWdlUG9zaXRpb246ICJmaXJzdCIsCiAgICAgIG9kZE9yRXZlbjogIm9kZCIsCiAgICAgIGJsYW5rT3JOb3RCbGFuazogIm5vbkJsYW5rIiwKICAgICAgcGFyYVN0YWNrOiBbXQogICAgfTsKICAgIGNvbnN0IHJvb3QgPSB0aGlzLnN1YmZvcm0uY2hpbGRyZW5bMF07CiAgICByb290LnBhZ2VTZXRbJGNsZWFuUGFnZV0oKTsKICAgIGNvbnN0IHBhZ2VBcmVhcyA9IHJvb3QucGFnZVNldC5wYWdlQXJlYS5jaGlsZHJlbjsKICAgIGNvbnN0IG1haW5IdG1sID0gewogICAgICBuYW1lOiAiZGl2IiwKICAgICAgY2hpbGRyZW46IFtdCiAgICB9OwogICAgbGV0IHBhZ2VBcmVhID0gbnVsbDsKICAgIGxldCBicmVha0JlZm9yZSA9IG51bGw7CiAgICBsZXQgYnJlYWtCZWZvcmVUYXJnZXQgPSBudWxsOwogICAgaWYgKHJvb3QuYnJlYWtCZWZvcmUuY2hpbGRyZW4ubGVuZ3RoID49IDEpIHsKICAgICAgYnJlYWtCZWZvcmUgPSByb290LmJyZWFrQmVmb3JlLmNoaWxkcmVuWzBdOwogICAgICBicmVha0JlZm9yZVRhcmdldCA9IGJyZWFrQmVmb3JlLnRhcmdldDsKICAgIH0gZWxzZSBpZiAocm9vdC5zdWJmb3JtLmNoaWxkcmVuLmxlbmd0aCA+PSAxICYmIHJvb3Quc3ViZm9ybS5jaGlsZHJlblswXS5icmVha0JlZm9yZS5jaGlsZHJlbi5sZW5ndGggPj0gMSkgewogICAgICBicmVha0JlZm9yZSA9IHJvb3Quc3ViZm9ybS5jaGlsZHJlblswXS5icmVha0JlZm9yZS5jaGlsZHJlblswXTsKICAgICAgYnJlYWtCZWZvcmVUYXJnZXQgPSBicmVha0JlZm9yZS50YXJnZXQ7CiAgICB9IGVsc2UgaWYgKHJvb3QuYnJlYWs/LmJlZm9yZVRhcmdldCkgewogICAgICBicmVha0JlZm9yZSA9IHJvb3QuYnJlYWs7CiAgICAgIGJyZWFrQmVmb3JlVGFyZ2V0ID0gYnJlYWtCZWZvcmUuYmVmb3JlVGFyZ2V0OwogICAgfSBlbHNlIGlmIChyb290LnN1YmZvcm0uY2hpbGRyZW4ubGVuZ3RoID49IDEgJiYgcm9vdC5zdWJmb3JtLmNoaWxkcmVuWzBdLmJyZWFrPy5iZWZvcmVUYXJnZXQpIHsKICAgICAgYnJlYWtCZWZvcmUgPSByb290LnN1YmZvcm0uY2hpbGRyZW5bMF0uYnJlYWs7CiAgICAgIGJyZWFrQmVmb3JlVGFyZ2V0ID0gYnJlYWtCZWZvcmUuYmVmb3JlVGFyZ2V0OwogICAgfQogICAgaWYgKGJyZWFrQmVmb3JlKSB7CiAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXNbJHNlYXJjaE5vZGVdKGJyZWFrQmVmb3JlVGFyZ2V0LCBicmVha0JlZm9yZVskZ2V0UGFyZW50XSgpKTsKICAgICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIFBhZ2VBcmVhKSB7CiAgICAgICAgcGFnZUFyZWEgPSB0YXJnZXQ7CiAgICAgICAgYnJlYWtCZWZvcmVbJGV4dHJhXSA9IHt9OwogICAgICB9CiAgICB9CiAgICBwYWdlQXJlYSB8fD0gcGFnZUFyZWFzWzBdOwogICAgcGFnZUFyZWFbJGV4dHJhXSA9IHsKICAgICAgbnVtYmVyT2ZVc2U6IDEKICAgIH07CiAgICBjb25zdCBwYWdlQXJlYVBhcmVudCA9IHBhZ2VBcmVhWyRnZXRQYXJlbnRdKCk7CiAgICBwYWdlQXJlYVBhcmVudFskZXh0cmFdID0gewogICAgICBudW1iZXJPZlVzZTogMSwKICAgICAgcGFnZUluZGV4OiBwYWdlQXJlYVBhcmVudC5wYWdlQXJlYS5jaGlsZHJlbi5pbmRleE9mKHBhZ2VBcmVhKSwKICAgICAgcGFnZVNldEluZGV4OiAwCiAgICB9OwogICAgbGV0IHRhcmdldFBhZ2VBcmVhOwogICAgbGV0IGxlYWRlciA9IG51bGw7CiAgICBsZXQgdHJhaWxlciA9IG51bGw7CiAgICBsZXQgaGFzU29tZXRoaW5nID0gdHJ1ZTsKICAgIGxldCBoYXNTb21ldGhpbmdDb3VudGVyID0gMDsKICAgIGxldCBzdGFydEluZGV4ID0gMDsKICAgIHdoaWxlICh0cnVlKSB7CiAgICAgIGlmICghaGFzU29tZXRoaW5nKSB7CiAgICAgICAgbWFpbkh0bWwuY2hpbGRyZW4ucG9wKCk7CiAgICAgICAgaWYgKCsraGFzU29tZXRoaW5nQ291bnRlciA9PT0gTUFYX0VNUFRZX1BBR0VTKSB7CiAgICAgICAgICB3YXJuKCJYRkEgLSBTb21ldGhpbmcgZ29lcyB3cm9uZzogcGxlYXNlIGZpbGUgYSBidWcuIik7CiAgICAgICAgICByZXR1cm4gbWFpbkh0bWw7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIGhhc1NvbWV0aGluZ0NvdW50ZXIgPSAwOwogICAgICB9CiAgICAgIHRhcmdldFBhZ2VBcmVhID0gbnVsbDsKICAgICAgdGhpc1skZXh0cmFdLmN1cnJlbnRQYWdlQXJlYSA9IHBhZ2VBcmVhOwogICAgICBjb25zdCBwYWdlID0gcGFnZUFyZWFbJHRvSFRNTF0oKS5odG1sOwogICAgICBtYWluSHRtbC5jaGlsZHJlbi5wdXNoKHBhZ2UpOwogICAgICBpZiAobGVhZGVyKSB7CiAgICAgICAgdGhpc1skZXh0cmFdLm5vTGF5b3V0RmFpbHVyZSA9IHRydWU7CiAgICAgICAgcGFnZS5jaGlsZHJlbi5wdXNoKGxlYWRlclskdG9IVE1MXShwYWdlQXJlYVskZXh0cmFdLnNwYWNlKS5odG1sKTsKICAgICAgICBsZWFkZXIgPSBudWxsOwogICAgICB9CiAgICAgIGlmICh0cmFpbGVyKSB7CiAgICAgICAgdGhpc1skZXh0cmFdLm5vTGF5b3V0RmFpbHVyZSA9IHRydWU7CiAgICAgICAgcGFnZS5jaGlsZHJlbi5wdXNoKHRyYWlsZXJbJHRvSFRNTF0ocGFnZUFyZWFbJGV4dHJhXS5zcGFjZSkuaHRtbCk7CiAgICAgICAgdHJhaWxlciA9IG51bGw7CiAgICAgIH0KICAgICAgY29uc3QgY29udGVudEFyZWFzID0gcGFnZUFyZWEuY29udGVudEFyZWEuY2hpbGRyZW47CiAgICAgIGNvbnN0IGh0bWxDb250ZW50QXJlYXMgPSBwYWdlLmNoaWxkcmVuLmZpbHRlcihub2RlID0+IG5vZGUuYXR0cmlidXRlcy5jbGFzcy5pbmNsdWRlcygieGZhQ29udGVudGFyZWEiKSk7CiAgICAgIGhhc1NvbWV0aGluZyA9IGZhbHNlOwogICAgICB0aGlzWyRleHRyYV0uZmlyc3RVbnNwbGl0dGFibGUgPSBudWxsOwogICAgICB0aGlzWyRleHRyYV0ubm9MYXlvdXRGYWlsdXJlID0gZmFsc2U7CiAgICAgIGNvbnN0IGZsdXNoID0gaW5kZXggPT4gewogICAgICAgIGNvbnN0IGh0bWwgPSByb290WyRmbHVzaEhUTUxdKCk7CiAgICAgICAgaWYgKGh0bWwpIHsKICAgICAgICAgIGhhc1NvbWV0aGluZyB8fD0gaHRtbC5jaGlsZHJlbj8ubGVuZ3RoID4gMDsKICAgICAgICAgIGh0bWxDb250ZW50QXJlYXNbaW5kZXhdLmNoaWxkcmVuLnB1c2goaHRtbCk7CiAgICAgICAgfQogICAgICB9OwogICAgICBmb3IgKGxldCBpID0gc3RhcnRJbmRleCwgaWkgPSBjb250ZW50QXJlYXMubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgICAgIGNvbnN0IGNvbnRlbnRBcmVhID0gdGhpc1skZXh0cmFdLmN1cnJlbnRDb250ZW50QXJlYSA9IGNvbnRlbnRBcmVhc1tpXTsKICAgICAgICBjb25zdCBzcGFjZSA9IHsKICAgICAgICAgIHdpZHRoOiBjb250ZW50QXJlYS53LAogICAgICAgICAgaGVpZ2h0OiBjb250ZW50QXJlYS5oCiAgICAgICAgfTsKICAgICAgICBzdGFydEluZGV4ID0gMDsKICAgICAgICBpZiAobGVhZGVyKSB7CiAgICAgICAgICBodG1sQ29udGVudEFyZWFzW2ldLmNoaWxkcmVuLnB1c2gobGVhZGVyWyR0b0hUTUxdKHNwYWNlKS5odG1sKTsKICAgICAgICAgIGxlYWRlciA9IG51bGw7CiAgICAgICAgfQogICAgICAgIGlmICh0cmFpbGVyKSB7CiAgICAgICAgICBodG1sQ29udGVudEFyZWFzW2ldLmNoaWxkcmVuLnB1c2godHJhaWxlclskdG9IVE1MXShzcGFjZSkuaHRtbCk7CiAgICAgICAgICB0cmFpbGVyID0gbnVsbDsKICAgICAgICB9CiAgICAgICAgY29uc3QgaHRtbCA9IHJvb3RbJHRvSFRNTF0oc3BhY2UpOwogICAgICAgIGlmIChodG1sLnN1Y2Nlc3MpIHsKICAgICAgICAgIGlmIChodG1sLmh0bWwpIHsKICAgICAgICAgICAgaGFzU29tZXRoaW5nIHx8PSBodG1sLmh0bWwuY2hpbGRyZW4/Lmxlbmd0aCA+IDA7CiAgICAgICAgICAgIGh0bWxDb250ZW50QXJlYXNbaV0uY2hpbGRyZW4ucHVzaChodG1sLmh0bWwpOwogICAgICAgICAgfSBlbHNlIGlmICghaGFzU29tZXRoaW5nICYmIG1haW5IdG1sLmNoaWxkcmVuLmxlbmd0aCA+IDEpIHsKICAgICAgICAgICAgbWFpbkh0bWwuY2hpbGRyZW4ucG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gbWFpbkh0bWw7CiAgICAgICAgfQogICAgICAgIGlmIChodG1sLmlzQnJlYWsoKSkgewogICAgICAgICAgY29uc3Qgbm9kZSA9IGh0bWwuYnJlYWtOb2RlOwogICAgICAgICAgZmx1c2goaSk7CiAgICAgICAgICBpZiAobm9kZS50YXJnZXRUeXBlID09PSAiYXV0byIpIHsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAobm9kZS5sZWFkZXIpIHsKICAgICAgICAgICAgbGVhZGVyID0gdGhpc1skc2VhcmNoTm9kZV0obm9kZS5sZWFkZXIsIG5vZGVbJGdldFBhcmVudF0oKSk7CiAgICAgICAgICAgIGxlYWRlciA9IGxlYWRlciA/IGxlYWRlclswXSA6IG51bGw7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAobm9kZS50cmFpbGVyKSB7CiAgICAgICAgICAgIHRyYWlsZXIgPSB0aGlzWyRzZWFyY2hOb2RlXShub2RlLnRyYWlsZXIsIG5vZGVbJGdldFBhcmVudF0oKSk7CiAgICAgICAgICAgIHRyYWlsZXIgPSB0cmFpbGVyID8gdHJhaWxlclswXSA6IG51bGw7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAobm9kZS50YXJnZXRUeXBlID09PSAicGFnZUFyZWEiKSB7CiAgICAgICAgICAgIHRhcmdldFBhZ2VBcmVhID0gbm9kZVskZXh0cmFdLnRhcmdldDsKICAgICAgICAgICAgaSA9IEluZmluaXR5OwogICAgICAgICAgfSBlbHNlIGlmICghbm9kZVskZXh0cmFdLnRhcmdldCkgewogICAgICAgICAgICBpID0gbm9kZVskZXh0cmFdLmluZGV4OwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGFyZ2V0UGFnZUFyZWEgPSBub2RlWyRleHRyYV0udGFyZ2V0OwogICAgICAgICAgICBzdGFydEluZGV4ID0gbm9kZVskZXh0cmFdLmluZGV4ICsgMTsKICAgICAgICAgICAgaSA9IEluZmluaXR5OwogICAgICAgICAgfQogICAgICAgICAgY29udGludWU7CiAgICAgICAgfQogICAgICAgIGlmICh0aGlzWyRleHRyYV0ub3ZlcmZsb3dOb2RlKSB7CiAgICAgICAgICBjb25zdCBub2RlID0gdGhpc1skZXh0cmFdLm92ZXJmbG93Tm9kZTsKICAgICAgICAgIHRoaXNbJGV4dHJhXS5vdmVyZmxvd05vZGUgPSBudWxsOwogICAgICAgICAgY29uc3Qgb3ZlcmZsb3dFeHRyYSA9IG5vZGVbJGdldEV4dHJhXSgpOwogICAgICAgICAgY29uc3QgdGFyZ2V0ID0gb3ZlcmZsb3dFeHRyYS50YXJnZXQ7CiAgICAgICAgICBvdmVyZmxvd0V4dHJhLmFkZExlYWRlciA9IG92ZXJmbG93RXh0cmEubGVhZGVyICE9PSBudWxsOwogICAgICAgICAgb3ZlcmZsb3dFeHRyYS5hZGRUcmFpbGVyID0gb3ZlcmZsb3dFeHRyYS50cmFpbGVyICE9PSBudWxsOwogICAgICAgICAgZmx1c2goaSk7CiAgICAgICAgICBjb25zdCBjdXJyZW50SW5kZXggPSBpOwogICAgICAgICAgaSA9IEluZmluaXR5OwogICAgICAgICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIFBhZ2VBcmVhKSB7CiAgICAgICAgICAgIHRhcmdldFBhZ2VBcmVhID0gdGFyZ2V0OwogICAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBDb250ZW50QXJlYSkgewogICAgICAgICAgICBjb25zdCBpbmRleCA9IGNvbnRlbnRBcmVhcy5pbmRleE9mKHRhcmdldCk7CiAgICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHsKICAgICAgICAgICAgICBpZiAoaW5kZXggPiBjdXJyZW50SW5kZXgpIHsKICAgICAgICAgICAgICAgIGkgPSBpbmRleCAtIDE7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHN0YXJ0SW5kZXggPSBpbmRleDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgdGFyZ2V0UGFnZUFyZWEgPSB0YXJnZXRbJGdldFBhcmVudF0oKTsKICAgICAgICAgICAgICBzdGFydEluZGV4ID0gdGFyZ2V0UGFnZUFyZWEuY29udGVudEFyZWEuY2hpbGRyZW4uaW5kZXhPZih0YXJnZXQpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CiAgICAgICAgZmx1c2goaSk7CiAgICAgIH0KICAgICAgdGhpc1skZXh0cmFdLnBhZ2VOdW1iZXIgKz0gMTsKICAgICAgaWYgKHRhcmdldFBhZ2VBcmVhKSB7CiAgICAgICAgaWYgKHRhcmdldFBhZ2VBcmVhWyRpc1VzYWJsZV0oKSkgewogICAgICAgICAgdGFyZ2V0UGFnZUFyZWFbJGV4dHJhXS5udW1iZXJPZlVzZSArPSAxOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0YXJnZXRQYWdlQXJlYSA9IG51bGw7CiAgICAgICAgfQogICAgICB9CiAgICAgIHBhZ2VBcmVhID0gdGFyZ2V0UGFnZUFyZWEgfHwgcGFnZUFyZWFbJGdldE5leHRQYWdlXSgpOwogICAgICB5aWVsZCBudWxsOwogICAgfQogIH0KfQpjbGFzcyBUZXh0IGV4dGVuZHMgQ29udGVudE9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJ0ZXh0Iik7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMubWF4Q2hhcnMgPSBnZXRJbnRlZ2VyKHsKICAgICAgZGF0YTogYXR0cmlidXRlcy5tYXhDaGFycywKICAgICAgZGVmYXVsdFZhbHVlOiAwLAogICAgICB2YWxpZGF0ZTogeCA9PiB4ID49IDAKICAgIH0pOwogICAgdGhpcy5uYW1lID0gYXR0cmlidXRlcy5uYW1lIHx8ICIiOwogICAgdGhpcy5yaWQgPSBhdHRyaWJ1dGVzLnJpZCB8fCAiIjsKICAgIHRoaXMudXNlID0gYXR0cmlidXRlcy51c2UgfHwgIiI7CiAgICB0aGlzLnVzZWhyZWYgPSBhdHRyaWJ1dGVzLnVzZWhyZWYgfHwgIiI7CiAgfQogIFskYWNjZXB0V2hpdGVzcGFjZV0oKSB7CiAgICByZXR1cm4gdHJ1ZTsKICB9CiAgWyRvbkNoaWxkXShjaGlsZCkgewogICAgaWYgKGNoaWxkWyRuYW1lc3BhY2VJZF0gPT09IE5hbWVzcGFjZUlkcy54aHRtbC5pZCkgewogICAgICB0aGlzWyRjb250ZW50XSA9IGNoaWxkOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIHdhcm4oYFhGQSAtIEludmFsaWQgY29udGVudCBpbiBUZXh0OiAke2NoaWxkWyRub2RlTmFtZV19LmApOwogICAgcmV0dXJuIGZhbHNlOwogIH0KICBbJG9uVGV4dF0oc3RyKSB7CiAgICBpZiAodGhpc1skY29udGVudF0gaW5zdGFuY2VvZiBYRkFPYmplY3QpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgc3VwZXJbJG9uVGV4dF0oc3RyKTsKICB9CiAgWyRmaW5hbGl6ZV0oKSB7CiAgICBpZiAodHlwZW9mIHRoaXNbJGNvbnRlbnRdID09PSAic3RyaW5nIikgewogICAgICB0aGlzWyRjb250ZW50XSA9IHRoaXNbJGNvbnRlbnRdLnJlcGxhY2VBbGwoIlxyXG4iLCAiXG4iKTsKICAgIH0KICB9CiAgWyRnZXRFeHRyYV0oKSB7CiAgICBpZiAodHlwZW9mIHRoaXNbJGNvbnRlbnRdID09PSAic3RyaW5nIikgewogICAgICByZXR1cm4gdGhpc1skY29udGVudF0uc3BsaXQoL1tcdTIwMjlcdTIwMjhcbl0vKS5maWx0ZXIobGluZSA9PiAhIWxpbmUpLmpvaW4oIlxuIik7CiAgICB9CiAgICByZXR1cm4gdGhpc1skY29udGVudF1bJHRleHRdKCk7CiAgfQogIFskdG9IVE1MXShhdmFpbGFibGVTcGFjZSkgewogICAgaWYgKHR5cGVvZiB0aGlzWyRjb250ZW50XSA9PT0gInN0cmluZyIpIHsKICAgICAgY29uc3QgaHRtbCA9IHZhbHVlVG9IdG1sKHRoaXNbJGNvbnRlbnRdKS5odG1sOwogICAgICBpZiAodGhpc1skY29udGVudF0uaW5jbHVkZXMoIlx1MjAyOSIpKSB7CiAgICAgICAgaHRtbC5uYW1lID0gImRpdiI7CiAgICAgICAgaHRtbC5jaGlsZHJlbiA9IFtdOwogICAgICAgIHRoaXNbJGNvbnRlbnRdLnNwbGl0KCJcdTIwMjkiKS5tYXAocGFyYSA9PiBwYXJhLnNwbGl0KC9bXHUyMDI4XG5dLykuZmxhdE1hcChsaW5lID0+IFt7CiAgICAgICAgICBuYW1lOiAic3BhbiIsCiAgICAgICAgICB2YWx1ZTogbGluZQogICAgICAgIH0sIHsKICAgICAgICAgIG5hbWU6ICJiciIKICAgICAgICB9XSkpLmZvckVhY2gobGluZXMgPT4gewogICAgICAgICAgaHRtbC5jaGlsZHJlbi5wdXNoKHsKICAgICAgICAgICAgbmFtZTogInAiLAogICAgICAgICAgICBjaGlsZHJlbjogbGluZXMKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9IGVsc2UgaWYgKC9bXHUyMDI4XG5dLy50ZXN0KHRoaXNbJGNvbnRlbnRdKSkgewogICAgICAgIGh0bWwubmFtZSA9ICJkaXYiOwogICAgICAgIGh0bWwuY2hpbGRyZW4gPSBbXTsKICAgICAgICB0aGlzWyRjb250ZW50XS5zcGxpdCgvW1x1MjAyOFxuXS8pLmZvckVhY2gobGluZSA9PiB7CiAgICAgICAgICBodG1sLmNoaWxkcmVuLnB1c2goewogICAgICAgICAgICBuYW1lOiAic3BhbiIsCiAgICAgICAgICAgIHZhbHVlOiBsaW5lCiAgICAgICAgICB9LCB7CiAgICAgICAgICAgIG5hbWU6ICJiciIKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9CiAgICAgIHJldHVybiBIVE1MUmVzdWx0LnN1Y2Nlc3MoaHRtbCk7CiAgICB9CiAgICByZXR1cm4gdGhpc1skY29udGVudF1bJHRvSFRNTF0oYXZhaWxhYmxlU3BhY2UpOwogIH0KfQpjbGFzcyBUZXh0RWRpdCBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJ0ZXh0RWRpdCIsIHRydWUpOwogICAgdGhpcy5hbGxvd1JpY2hUZXh0ID0gZ2V0SW50ZWdlcih7CiAgICAgIGRhdGE6IGF0dHJpYnV0ZXMuYWxsb3dSaWNoVGV4dCwKICAgICAgZGVmYXVsdFZhbHVlOiAwLAogICAgICB2YWxpZGF0ZTogeCA9PiB4ID09PSAxCiAgICB9KTsKICAgIHRoaXMuaFNjcm9sbFBvbGljeSA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLmhTY3JvbGxQb2xpY3ksIFsiYXV0byIsICJvZmYiLCAib24iXSk7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMubXVsdGlMaW5lID0gZ2V0SW50ZWdlcih7CiAgICAgIGRhdGE6IGF0dHJpYnV0ZXMubXVsdGlMaW5lLAogICAgICBkZWZhdWx0VmFsdWU6ICIiLAogICAgICB2YWxpZGF0ZTogeCA9PiB4ID09PSAwIHx8IHggPT09IDEKICAgIH0pOwogICAgdGhpcy51c2UgPSBhdHRyaWJ1dGVzLnVzZSB8fCAiIjsKICAgIHRoaXMudXNlaHJlZiA9IGF0dHJpYnV0ZXMudXNlaHJlZiB8fCAiIjsKICAgIHRoaXMudlNjcm9sbFBvbGljeSA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLnZTY3JvbGxQb2xpY3ksIFsiYXV0byIsICJvZmYiLCAib24iXSk7CiAgICB0aGlzLmJvcmRlciA9IG51bGw7CiAgICB0aGlzLmNvbWIgPSBudWxsOwogICAgdGhpcy5leHRyYXMgPSBudWxsOwogICAgdGhpcy5tYXJnaW4gPSBudWxsOwogIH0KICBbJHRvSFRNTF0oYXZhaWxhYmxlU3BhY2UpIHsKICAgIGNvbnN0IHN0eWxlID0gdG9TdHlsZSh0aGlzLCAiYm9yZGVyIiwgImZvbnQiLCAibWFyZ2luIik7CiAgICBsZXQgaHRtbDsKICAgIGNvbnN0IGZpZWxkID0gdGhpc1skZ2V0UGFyZW50XSgpWyRnZXRQYXJlbnRdKCk7CiAgICBpZiAodGhpcy5tdWx0aUxpbmUgPT09ICIiKSB7CiAgICAgIHRoaXMubXVsdGlMaW5lID0gZmllbGQgaW5zdGFuY2VvZiBEcmF3ID8gMSA6IDA7CiAgICB9CiAgICBpZiAodGhpcy5tdWx0aUxpbmUgPT09IDEpIHsKICAgICAgaHRtbCA9IHsKICAgICAgICBuYW1lOiAidGV4dGFyZWEiLAogICAgICAgIGF0dHJpYnV0ZXM6IHsKICAgICAgICAgIGRhdGFJZDogZmllbGRbJGRhdGFdPy5bJHVpZF0gfHwgZmllbGRbJHVpZF0sCiAgICAgICAgICBmaWVsZElkOiBmaWVsZFskdWlkXSwKICAgICAgICAgIGNsYXNzOiBbInhmYVRleHRmaWVsZCJdLAogICAgICAgICAgc3R5bGUsCiAgICAgICAgICAiYXJpYS1sYWJlbCI6IGFyaWFMYWJlbChmaWVsZCksCiAgICAgICAgICAiYXJpYS1yZXF1aXJlZCI6IGZhbHNlCiAgICAgICAgfQogICAgICB9OwogICAgfSBlbHNlIHsKICAgICAgaHRtbCA9IHsKICAgICAgICBuYW1lOiAiaW5wdXQiLAogICAgICAgIGF0dHJpYnV0ZXM6IHsKICAgICAgICAgIHR5cGU6ICJ0ZXh0IiwKICAgICAgICAgIGRhdGFJZDogZmllbGRbJGRhdGFdPy5bJHVpZF0gfHwgZmllbGRbJHVpZF0sCiAgICAgICAgICBmaWVsZElkOiBmaWVsZFskdWlkXSwKICAgICAgICAgIGNsYXNzOiBbInhmYVRleHRmaWVsZCJdLAogICAgICAgICAgc3R5bGUsCiAgICAgICAgICAiYXJpYS1sYWJlbCI6IGFyaWFMYWJlbChmaWVsZCksCiAgICAgICAgICAiYXJpYS1yZXF1aXJlZCI6IGZhbHNlCiAgICAgICAgfQogICAgICB9OwogICAgfQogICAgaWYgKGlzUmVxdWlyZWQoZmllbGQpKSB7CiAgICAgIGh0bWwuYXR0cmlidXRlc1siYXJpYS1yZXF1aXJlZCJdID0gdHJ1ZTsKICAgICAgaHRtbC5hdHRyaWJ1dGVzLnJlcXVpcmVkID0gdHJ1ZTsKICAgIH0KICAgIHJldHVybiBIVE1MUmVzdWx0LnN1Y2Nlc3MoewogICAgICBuYW1lOiAibGFiZWwiLAogICAgICBhdHRyaWJ1dGVzOiB7CiAgICAgICAgY2xhc3M6IFsieGZhTGFiZWwiXQogICAgICB9LAogICAgICBjaGlsZHJlbjogW2h0bWxdCiAgICB9KTsKICB9Cn0KY2xhc3MgVGltZSBleHRlbmRzIFN0cmluZ09iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJ0aW1lIik7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMubmFtZSA9IGF0dHJpYnV0ZXMubmFtZSB8fCAiIjsKICAgIHRoaXMudXNlID0gYXR0cmlidXRlcy51c2UgfHwgIiI7CiAgICB0aGlzLnVzZWhyZWYgPSBhdHRyaWJ1dGVzLnVzZWhyZWYgfHwgIiI7CiAgfQogIFskZmluYWxpemVdKCkgewogICAgY29uc3QgZGF0ZSA9IHRoaXNbJGNvbnRlbnRdLnRyaW0oKTsKICAgIHRoaXNbJGNvbnRlbnRdID0gZGF0ZSA/IG5ldyBEYXRlKGRhdGUpIDogbnVsbDsKICB9CiAgWyR0b0hUTUxdKGF2YWlsYWJsZVNwYWNlKSB7CiAgICByZXR1cm4gdmFsdWVUb0h0bWwodGhpc1skY29udGVudF0gPyB0aGlzWyRjb250ZW50XS50b1N0cmluZygpIDogIiIpOwogIH0KfQpjbGFzcyBUaW1lU3RhbXAgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKFRFTVBMQVRFX05TX0lELCAidGltZVN0YW1wIik7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMuc2VydmVyID0gYXR0cmlidXRlcy5zZXJ2ZXIgfHwgIiI7CiAgICB0aGlzLnR5cGUgPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy50eXBlLCBbIm9wdGlvbmFsIiwgInJlcXVpcmVkIl0pOwogICAgdGhpcy51c2UgPSBhdHRyaWJ1dGVzLnVzZSB8fCAiIjsKICAgIHRoaXMudXNlaHJlZiA9IGF0dHJpYnV0ZXMudXNlaHJlZiB8fCAiIjsKICB9Cn0KY2xhc3MgVG9vbFRpcCBleHRlbmRzIFN0cmluZ09iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJ0b29sVGlwIik7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMucmlkID0gYXR0cmlidXRlcy5yaWQgfHwgIiI7CiAgICB0aGlzLnVzZSA9IGF0dHJpYnV0ZXMudXNlIHx8ICIiOwogICAgdGhpcy51c2VocmVmID0gYXR0cmlidXRlcy51c2VocmVmIHx8ICIiOwogIH0KfQpjbGFzcyBUcmF2ZXJzYWwgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKFRFTVBMQVRFX05TX0lELCAidHJhdmVyc2FsIiwgdHJ1ZSk7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMudXNlID0gYXR0cmlidXRlcy51c2UgfHwgIiI7CiAgICB0aGlzLnVzZWhyZWYgPSBhdHRyaWJ1dGVzLnVzZWhyZWYgfHwgIiI7CiAgICB0aGlzLmV4dHJhcyA9IG51bGw7CiAgICB0aGlzLnRyYXZlcnNlID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgfQp9CmNsYXNzIFRyYXZlcnNlIGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihURU1QTEFURV9OU19JRCwgInRyYXZlcnNlIiwgdHJ1ZSk7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMub3BlcmF0aW9uID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMub3BlcmF0aW9uLCBbIm5leHQiLCAiYmFjayIsICJkb3duIiwgImZpcnN0IiwgImxlZnQiLCAicmlnaHQiLCAidXAiXSk7CiAgICB0aGlzLnJlZiA9IGF0dHJpYnV0ZXMucmVmIHx8ICIiOwogICAgdGhpcy51c2UgPSBhdHRyaWJ1dGVzLnVzZSB8fCAiIjsKICAgIHRoaXMudXNlaHJlZiA9IGF0dHJpYnV0ZXMudXNlaHJlZiB8fCAiIjsKICAgIHRoaXMuZXh0cmFzID0gbnVsbDsKICAgIHRoaXMuc2NyaXB0ID0gbnVsbDsKICB9CiAgZ2V0IG5hbWUoKSB7CiAgICByZXR1cm4gdGhpcy5vcGVyYXRpb247CiAgfQogIFskaXNUcmFuc3BhcmVudF0oKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQp9CmNsYXNzIFVpIGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihURU1QTEFURV9OU19JRCwgInVpIiwgdHJ1ZSk7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMudXNlID0gYXR0cmlidXRlcy51c2UgfHwgIiI7CiAgICB0aGlzLnVzZWhyZWYgPSBhdHRyaWJ1dGVzLnVzZWhyZWYgfHwgIiI7CiAgICB0aGlzLmV4dHJhcyA9IG51bGw7CiAgICB0aGlzLnBpY3R1cmUgPSBudWxsOwogICAgdGhpcy5iYXJjb2RlID0gbnVsbDsKICAgIHRoaXMuYnV0dG9uID0gbnVsbDsKICAgIHRoaXMuY2hlY2tCdXR0b24gPSBudWxsOwogICAgdGhpcy5jaG9pY2VMaXN0ID0gbnVsbDsKICAgIHRoaXMuZGF0ZVRpbWVFZGl0ID0gbnVsbDsKICAgIHRoaXMuZGVmYXVsdFVpID0gbnVsbDsKICAgIHRoaXMuaW1hZ2VFZGl0ID0gbnVsbDsKICAgIHRoaXMubnVtZXJpY0VkaXQgPSBudWxsOwogICAgdGhpcy5wYXNzd29yZEVkaXQgPSBudWxsOwogICAgdGhpcy5zaWduYXR1cmUgPSBudWxsOwogICAgdGhpcy50ZXh0RWRpdCA9IG51bGw7CiAgfQogIFskZ2V0RXh0cmFdKCkgewogICAgaWYgKHRoaXNbJGV4dHJhXSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzKSkgewogICAgICAgIGlmIChuYW1lID09PSAiZXh0cmFzIiB8fCBuYW1lID09PSAicGljdHVyZSIpIHsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgICBjb25zdCBvYmogPSB0aGlzW25hbWVdOwogICAgICAgIGlmICghKG9iaiBpbnN0YW5jZW9mIFhGQU9iamVjdCkpIHsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgICB0aGlzWyRleHRyYV0gPSBvYmo7CiAgICAgICAgcmV0dXJuIG9iajsKICAgICAgfQogICAgICB0aGlzWyRleHRyYV0gPSBudWxsOwogICAgfQogICAgcmV0dXJuIHRoaXNbJGV4dHJhXTsKICB9CiAgWyR0b0hUTUxdKGF2YWlsYWJsZVNwYWNlKSB7CiAgICBjb25zdCBvYmogPSB0aGlzWyRnZXRFeHRyYV0oKTsKICAgIGlmIChvYmopIHsKICAgICAgcmV0dXJuIG9ialskdG9IVE1MXShhdmFpbGFibGVTcGFjZSk7CiAgICB9CiAgICByZXR1cm4gSFRNTFJlc3VsdC5FTVBUWTsKICB9Cn0KY2xhc3MgVmFsaWRhdGUgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKFRFTVBMQVRFX05TX0lELCAidmFsaWRhdGUiLCB0cnVlKTsKICAgIHRoaXMuZm9ybWF0VGVzdCA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLmZvcm1hdFRlc3QsIFsid2FybmluZyIsICJkaXNhYmxlZCIsICJlcnJvciJdKTsKICAgIHRoaXMuaWQgPSBhdHRyaWJ1dGVzLmlkIHx8ICIiOwogICAgdGhpcy5udWxsVGVzdCA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLm51bGxUZXN0LCBbImRpc2FibGVkIiwgImVycm9yIiwgIndhcm5pbmciXSk7CiAgICB0aGlzLnNjcmlwdFRlc3QgPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy5zY3JpcHRUZXN0LCBbImVycm9yIiwgImRpc2FibGVkIiwgIndhcm5pbmciXSk7CiAgICB0aGlzLnVzZSA9IGF0dHJpYnV0ZXMudXNlIHx8ICIiOwogICAgdGhpcy51c2VocmVmID0gYXR0cmlidXRlcy51c2VocmVmIHx8ICIiOwogICAgdGhpcy5leHRyYXMgPSBudWxsOwogICAgdGhpcy5tZXNzYWdlID0gbnVsbDsKICAgIHRoaXMucGljdHVyZSA9IG51bGw7CiAgICB0aGlzLnNjcmlwdCA9IG51bGw7CiAgfQp9CmNsYXNzIFZhbHVlIGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihURU1QTEFURV9OU19JRCwgInZhbHVlIiwgdHJ1ZSk7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMub3ZlcnJpZGUgPSBnZXRJbnRlZ2VyKHsKICAgICAgZGF0YTogYXR0cmlidXRlcy5vdmVycmlkZSwKICAgICAgZGVmYXVsdFZhbHVlOiAwLAogICAgICB2YWxpZGF0ZTogeCA9PiB4ID09PSAxCiAgICB9KTsKICAgIHRoaXMucmVsZXZhbnQgPSBnZXRSZWxldmFudChhdHRyaWJ1dGVzLnJlbGV2YW50KTsKICAgIHRoaXMudXNlID0gYXR0cmlidXRlcy51c2UgfHwgIiI7CiAgICB0aGlzLnVzZWhyZWYgPSBhdHRyaWJ1dGVzLnVzZWhyZWYgfHwgIiI7CiAgICB0aGlzLmFyYyA9IG51bGw7CiAgICB0aGlzLmJvb2xlYW4gPSBudWxsOwogICAgdGhpcy5kYXRlID0gbnVsbDsKICAgIHRoaXMuZGF0ZVRpbWUgPSBudWxsOwogICAgdGhpcy5kZWNpbWFsID0gbnVsbDsKICAgIHRoaXMuZXhEYXRhID0gbnVsbDsKICAgIHRoaXMuZmxvYXQgPSBudWxsOwogICAgdGhpcy5pbWFnZSA9IG51bGw7CiAgICB0aGlzLmludGVnZXIgPSBudWxsOwogICAgdGhpcy5saW5lID0gbnVsbDsKICAgIHRoaXMucmVjdGFuZ2xlID0gbnVsbDsKICAgIHRoaXMudGV4dCA9IG51bGw7CiAgICB0aGlzLnRpbWUgPSBudWxsOwogIH0KICBbJHNldFZhbHVlXSh2YWx1ZSkgewogICAgY29uc3QgcGFyZW50ID0gdGhpc1skZ2V0UGFyZW50XSgpOwogICAgaWYgKHBhcmVudCBpbnN0YW5jZW9mIEZpZWxkKSB7CiAgICAgIGlmIChwYXJlbnQudWk/LmltYWdlRWRpdCkgewogICAgICAgIGlmICghdGhpcy5pbWFnZSkgewogICAgICAgICAgdGhpcy5pbWFnZSA9IG5ldyBJbWFnZSh7fSk7CiAgICAgICAgICB0aGlzWyRhcHBlbmRDaGlsZF0odGhpcy5pbWFnZSk7CiAgICAgICAgfQogICAgICAgIHRoaXMuaW1hZ2VbJGNvbnRlbnRdID0gdmFsdWVbJGNvbnRlbnRdOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgfQogICAgY29uc3QgdmFsdWVOYW1lID0gdmFsdWVbJG5vZGVOYW1lXTsKICAgIGlmICh0aGlzW3ZhbHVlTmFtZV0gIT09IG51bGwpIHsKICAgICAgdGhpc1t2YWx1ZU5hbWVdWyRjb250ZW50XSA9IHZhbHVlWyRjb250ZW50XTsKICAgICAgcmV0dXJuOwogICAgfQogICAgZm9yIChjb25zdCBuYW1lIG9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpKSB7CiAgICAgIGNvbnN0IG9iaiA9IHRoaXNbbmFtZV07CiAgICAgIGlmIChvYmogaW5zdGFuY2VvZiBYRkFPYmplY3QpIHsKICAgICAgICB0aGlzW25hbWVdID0gbnVsbDsKICAgICAgICB0aGlzWyRyZW1vdmVDaGlsZF0ob2JqKTsKICAgICAgfQogICAgfQogICAgdGhpc1t2YWx1ZVskbm9kZU5hbWVdXSA9IHZhbHVlOwogICAgdGhpc1skYXBwZW5kQ2hpbGRdKHZhbHVlKTsKICB9CiAgWyR0ZXh0XSgpIHsKICAgIGlmICh0aGlzLmV4RGF0YSkgewogICAgICBpZiAodHlwZW9mIHRoaXMuZXhEYXRhWyRjb250ZW50XSA9PT0gInN0cmluZyIpIHsKICAgICAgICByZXR1cm4gdGhpcy5leERhdGFbJGNvbnRlbnRdLnRyaW0oKTsKICAgICAgfQogICAgICByZXR1cm4gdGhpcy5leERhdGFbJGNvbnRlbnRdWyR0ZXh0XSgpLnRyaW0oKTsKICAgIH0KICAgIGZvciAoY29uc3QgbmFtZSBvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzKSkgewogICAgICBpZiAobmFtZSA9PT0gImltYWdlIikgewogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGNvbnN0IG9iaiA9IHRoaXNbbmFtZV07CiAgICAgIGlmIChvYmogaW5zdGFuY2VvZiBYRkFPYmplY3QpIHsKICAgICAgICByZXR1cm4gKG9ialskY29udGVudF0gfHwgIiIpLnRvU3RyaW5nKCkudHJpbSgpOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gbnVsbDsKICB9CiAgWyR0b0hUTUxdKGF2YWlsYWJsZVNwYWNlKSB7CiAgICBmb3IgKGNvbnN0IG5hbWUgb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykpIHsKICAgICAgY29uc3Qgb2JqID0gdGhpc1tuYW1lXTsKICAgICAgaWYgKCEob2JqIGluc3RhbmNlb2YgWEZBT2JqZWN0KSkgewogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIHJldHVybiBvYmpbJHRvSFRNTF0oYXZhaWxhYmxlU3BhY2UpOwogICAgfQogICAgcmV0dXJuIEhUTUxSZXN1bHQuRU1QVFk7CiAgfQp9CmNsYXNzIFZhcmlhYmxlcyBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoVEVNUExBVEVfTlNfSUQsICJ2YXJpYWJsZXMiLCB0cnVlKTsKICAgIHRoaXMuaWQgPSBhdHRyaWJ1dGVzLmlkIHx8ICIiOwogICAgdGhpcy51c2UgPSBhdHRyaWJ1dGVzLnVzZSB8fCAiIjsKICAgIHRoaXMudXNlaHJlZiA9IGF0dHJpYnV0ZXMudXNlaHJlZiB8fCAiIjsKICAgIHRoaXMuYm9vbGVhbiA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5kYXRlID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmRhdGVUaW1lID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmRlY2ltYWwgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuZXhEYXRhID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmZsb2F0ID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmltYWdlID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmludGVnZXIgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMubWFuaWZlc3QgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuc2NyaXB0ID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLnRleHQgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMudGltZSA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogIH0KICBbJGlzVHJhbnNwYXJlbnRdKCkgewogICAgcmV0dXJuIHRydWU7CiAgfQp9CmNsYXNzIFRlbXBsYXRlTmFtZXNwYWNlIHsKICBzdGF0aWMgWyRidWlsZFhGQU9iamVjdF0obmFtZSwgYXR0cmlidXRlcykgewogICAgaWYgKFRlbXBsYXRlTmFtZXNwYWNlLmhhc093blByb3BlcnR5KG5hbWUpKSB7CiAgICAgIGNvbnN0IG5vZGUgPSBUZW1wbGF0ZU5hbWVzcGFjZVtuYW1lXShhdHRyaWJ1dGVzKTsKICAgICAgbm9kZVskc2V0U2V0QXR0cmlidXRlc10oYXR0cmlidXRlcyk7CiAgICAgIHJldHVybiBub2RlOwogICAgfQogICAgcmV0dXJuIHVuZGVmaW5lZDsKICB9CiAgc3RhdGljIGFwcGVhcmFuY2VGaWx0ZXIoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgQXBwZWFyYW5jZUZpbHRlcihhdHRycyk7CiAgfQogIHN0YXRpYyBhcmMoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgQXJjKGF0dHJzKTsKICB9CiAgc3RhdGljIGFyZWEoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgQXJlYShhdHRycyk7CiAgfQogIHN0YXRpYyBhc3Npc3QoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgQXNzaXN0KGF0dHJzKTsKICB9CiAgc3RhdGljIGJhcmNvZGUoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgQmFyY29kZShhdHRycyk7CiAgfQogIHN0YXRpYyBiaW5kKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IEJpbmQoYXR0cnMpOwogIH0KICBzdGF0aWMgYmluZEl0ZW1zKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IEJpbmRJdGVtcyhhdHRycyk7CiAgfQogIHN0YXRpYyBib29rZW5kKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IEJvb2tlbmQoYXR0cnMpOwogIH0KICBzdGF0aWMgYm9vbGVhbihhdHRycykgewogICAgcmV0dXJuIG5ldyBCb29sZWFuRWxlbWVudChhdHRycyk7CiAgfQogIHN0YXRpYyBib3JkZXIoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgQm9yZGVyKGF0dHJzKTsKICB9CiAgc3RhdGljIGJyZWFrKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IEJyZWFrKGF0dHJzKTsKICB9CiAgc3RhdGljIGJyZWFrQWZ0ZXIoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgQnJlYWtBZnRlcihhdHRycyk7CiAgfQogIHN0YXRpYyBicmVha0JlZm9yZShhdHRycykgewogICAgcmV0dXJuIG5ldyBCcmVha0JlZm9yZShhdHRycyk7CiAgfQogIHN0YXRpYyBidXR0b24oYXR0cnMpIHsKICAgIHJldHVybiBuZXcgQnV0dG9uKGF0dHJzKTsKICB9CiAgc3RhdGljIGNhbGN1bGF0ZShhdHRycykgewogICAgcmV0dXJuIG5ldyBDYWxjdWxhdGUoYXR0cnMpOwogIH0KICBzdGF0aWMgY2FwdGlvbihhdHRycykgewogICAgcmV0dXJuIG5ldyBDYXB0aW9uKGF0dHJzKTsKICB9CiAgc3RhdGljIGNlcnRpZmljYXRlKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IENlcnRpZmljYXRlKGF0dHJzKTsKICB9CiAgc3RhdGljIGNlcnRpZmljYXRlcyhhdHRycykgewogICAgcmV0dXJuIG5ldyBDZXJ0aWZpY2F0ZXMoYXR0cnMpOwogIH0KICBzdGF0aWMgY2hlY2tCdXR0b24oYXR0cnMpIHsKICAgIHJldHVybiBuZXcgQ2hlY2tCdXR0b24oYXR0cnMpOwogIH0KICBzdGF0aWMgY2hvaWNlTGlzdChhdHRycykgewogICAgcmV0dXJuIG5ldyBDaG9pY2VMaXN0KGF0dHJzKTsKICB9CiAgc3RhdGljIGNvbG9yKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IENvbG9yKGF0dHJzKTsKICB9CiAgc3RhdGljIGNvbWIoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgQ29tYihhdHRycyk7CiAgfQogIHN0YXRpYyBjb25uZWN0KGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IENvbm5lY3QoYXR0cnMpOwogIH0KICBzdGF0aWMgY29udGVudEFyZWEoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgQ29udGVudEFyZWEoYXR0cnMpOwogIH0KICBzdGF0aWMgY29ybmVyKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IENvcm5lcihhdHRycyk7CiAgfQogIHN0YXRpYyBkYXRlKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IERhdGVFbGVtZW50KGF0dHJzKTsKICB9CiAgc3RhdGljIGRhdGVUaW1lKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IERhdGVUaW1lKGF0dHJzKTsKICB9CiAgc3RhdGljIGRhdGVUaW1lRWRpdChhdHRycykgewogICAgcmV0dXJuIG5ldyBEYXRlVGltZUVkaXQoYXR0cnMpOwogIH0KICBzdGF0aWMgZGVjaW1hbChhdHRycykgewogICAgcmV0dXJuIG5ldyBEZWNpbWFsKGF0dHJzKTsKICB9CiAgc3RhdGljIGRlZmF1bHRVaShhdHRycykgewogICAgcmV0dXJuIG5ldyBEZWZhdWx0VWkoYXR0cnMpOwogIH0KICBzdGF0aWMgZGVzYyhhdHRycykgewogICAgcmV0dXJuIG5ldyBEZXNjKGF0dHJzKTsKICB9CiAgc3RhdGljIGRpZ2VzdE1ldGhvZChhdHRycykgewogICAgcmV0dXJuIG5ldyBEaWdlc3RNZXRob2QoYXR0cnMpOwogIH0KICBzdGF0aWMgZGlnZXN0TWV0aG9kcyhhdHRycykgewogICAgcmV0dXJuIG5ldyBEaWdlc3RNZXRob2RzKGF0dHJzKTsKICB9CiAgc3RhdGljIGRyYXcoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgRHJhdyhhdHRycyk7CiAgfQogIHN0YXRpYyBlZGdlKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IEVkZ2UoYXR0cnMpOwogIH0KICBzdGF0aWMgZW5jb2RpbmcoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgRW5jb2RpbmcoYXR0cnMpOwogIH0KICBzdGF0aWMgZW5jb2RpbmdzKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IEVuY29kaW5ncyhhdHRycyk7CiAgfQogIHN0YXRpYyBlbmNyeXB0KGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IEVuY3J5cHQoYXR0cnMpOwogIH0KICBzdGF0aWMgZW5jcnlwdERhdGEoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgRW5jcnlwdERhdGEoYXR0cnMpOwogIH0KICBzdGF0aWMgZW5jcnlwdGlvbihhdHRycykgewogICAgcmV0dXJuIG5ldyBFbmNyeXB0aW9uKGF0dHJzKTsKICB9CiAgc3RhdGljIGVuY3J5cHRpb25NZXRob2QoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgRW5jcnlwdGlvbk1ldGhvZChhdHRycyk7CiAgfQogIHN0YXRpYyBlbmNyeXB0aW9uTWV0aG9kcyhhdHRycykgewogICAgcmV0dXJuIG5ldyBFbmNyeXB0aW9uTWV0aG9kcyhhdHRycyk7CiAgfQogIHN0YXRpYyBldmVudChhdHRycykgewogICAgcmV0dXJuIG5ldyBFdmVudChhdHRycyk7CiAgfQogIHN0YXRpYyBleERhdGEoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgRXhEYXRhKGF0dHJzKTsKICB9CiAgc3RhdGljIGV4T2JqZWN0KGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IEV4T2JqZWN0KGF0dHJzKTsKICB9CiAgc3RhdGljIGV4Y2xHcm91cChhdHRycykgewogICAgcmV0dXJuIG5ldyBFeGNsR3JvdXAoYXR0cnMpOwogIH0KICBzdGF0aWMgZXhlY3V0ZShhdHRycykgewogICAgcmV0dXJuIG5ldyBFeGVjdXRlKGF0dHJzKTsKICB9CiAgc3RhdGljIGV4dHJhcyhhdHRycykgewogICAgcmV0dXJuIG5ldyBFeHRyYXMoYXR0cnMpOwogIH0KICBzdGF0aWMgZmllbGQoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgRmllbGQoYXR0cnMpOwogIH0KICBzdGF0aWMgZmlsbChhdHRycykgewogICAgcmV0dXJuIG5ldyBGaWxsKGF0dHJzKTsKICB9CiAgc3RhdGljIGZpbHRlcihhdHRycykgewogICAgcmV0dXJuIG5ldyBGaWx0ZXIoYXR0cnMpOwogIH0KICBzdGF0aWMgZmxvYXQoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgRmxvYXQoYXR0cnMpOwogIH0KICBzdGF0aWMgZm9udChhdHRycykgewogICAgcmV0dXJuIG5ldyB0ZW1wbGF0ZV9Gb250KGF0dHJzKTsKICB9CiAgc3RhdGljIGZvcm1hdChhdHRycykgewogICAgcmV0dXJuIG5ldyBGb3JtYXQoYXR0cnMpOwogIH0KICBzdGF0aWMgaGFuZGxlcihhdHRycykgewogICAgcmV0dXJuIG5ldyBIYW5kbGVyKGF0dHJzKTsKICB9CiAgc3RhdGljIGh5cGhlbmF0aW9uKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IEh5cGhlbmF0aW9uKGF0dHJzKTsKICB9CiAgc3RhdGljIGltYWdlKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IEltYWdlKGF0dHJzKTsKICB9CiAgc3RhdGljIGltYWdlRWRpdChhdHRycykgewogICAgcmV0dXJuIG5ldyBJbWFnZUVkaXQoYXR0cnMpOwogIH0KICBzdGF0aWMgaW50ZWdlcihhdHRycykgewogICAgcmV0dXJuIG5ldyBJbnRlZ2VyKGF0dHJzKTsKICB9CiAgc3RhdGljIGlzc3VlcnMoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgSXNzdWVycyhhdHRycyk7CiAgfQogIHN0YXRpYyBpdGVtcyhhdHRycykgewogICAgcmV0dXJuIG5ldyBJdGVtcyhhdHRycyk7CiAgfQogIHN0YXRpYyBrZWVwKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IEtlZXAoYXR0cnMpOwogIH0KICBzdGF0aWMga2V5VXNhZ2UoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgS2V5VXNhZ2UoYXR0cnMpOwogIH0KICBzdGF0aWMgbGluZShhdHRycykgewogICAgcmV0dXJuIG5ldyBMaW5lKGF0dHJzKTsKICB9CiAgc3RhdGljIGxpbmVhcihhdHRycykgewogICAgcmV0dXJuIG5ldyBMaW5lYXIoYXR0cnMpOwogIH0KICBzdGF0aWMgbG9ja0RvY3VtZW50KGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IExvY2tEb2N1bWVudChhdHRycyk7CiAgfQogIHN0YXRpYyBtYW5pZmVzdChhdHRycykgewogICAgcmV0dXJuIG5ldyBNYW5pZmVzdChhdHRycyk7CiAgfQogIHN0YXRpYyBtYXJnaW4oYXR0cnMpIHsKICAgIHJldHVybiBuZXcgTWFyZ2luKGF0dHJzKTsKICB9CiAgc3RhdGljIG1kcChhdHRycykgewogICAgcmV0dXJuIG5ldyBNZHAoYXR0cnMpOwogIH0KICBzdGF0aWMgbWVkaXVtKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IE1lZGl1bShhdHRycyk7CiAgfQogIHN0YXRpYyBtZXNzYWdlKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IE1lc3NhZ2UoYXR0cnMpOwogIH0KICBzdGF0aWMgbnVtZXJpY0VkaXQoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgTnVtZXJpY0VkaXQoYXR0cnMpOwogIH0KICBzdGF0aWMgb2NjdXIoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgT2NjdXIoYXR0cnMpOwogIH0KICBzdGF0aWMgb2lkKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IE9pZChhdHRycyk7CiAgfQogIHN0YXRpYyBvaWRzKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IE9pZHMoYXR0cnMpOwogIH0KICBzdGF0aWMgb3ZlcmZsb3coYXR0cnMpIHsKICAgIHJldHVybiBuZXcgT3ZlcmZsb3coYXR0cnMpOwogIH0KICBzdGF0aWMgcGFnZUFyZWEoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgUGFnZUFyZWEoYXR0cnMpOwogIH0KICBzdGF0aWMgcGFnZVNldChhdHRycykgewogICAgcmV0dXJuIG5ldyBQYWdlU2V0KGF0dHJzKTsKICB9CiAgc3RhdGljIHBhcmEoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgUGFyYShhdHRycyk7CiAgfQogIHN0YXRpYyBwYXNzd29yZEVkaXQoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgUGFzc3dvcmRFZGl0KGF0dHJzKTsKICB9CiAgc3RhdGljIHBhdHRlcm4oYXR0cnMpIHsKICAgIHJldHVybiBuZXcgdGVtcGxhdGVfUGF0dGVybihhdHRycyk7CiAgfQogIHN0YXRpYyBwaWN0dXJlKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IFBpY3R1cmUoYXR0cnMpOwogIH0KICBzdGF0aWMgcHJvdG8oYXR0cnMpIHsKICAgIHJldHVybiBuZXcgUHJvdG8oYXR0cnMpOwogIH0KICBzdGF0aWMgcmFkaWFsKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IFJhZGlhbChhdHRycyk7CiAgfQogIHN0YXRpYyByZWFzb24oYXR0cnMpIHsKICAgIHJldHVybiBuZXcgUmVhc29uKGF0dHJzKTsKICB9CiAgc3RhdGljIHJlYXNvbnMoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgUmVhc29ucyhhdHRycyk7CiAgfQogIHN0YXRpYyByZWN0YW5nbGUoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgUmVjdGFuZ2xlKGF0dHJzKTsKICB9CiAgc3RhdGljIHJlZihhdHRycykgewogICAgcmV0dXJuIG5ldyBSZWZFbGVtZW50KGF0dHJzKTsKICB9CiAgc3RhdGljIHNjcmlwdChhdHRycykgewogICAgcmV0dXJuIG5ldyBTY3JpcHQoYXR0cnMpOwogIH0KICBzdGF0aWMgc2V0UHJvcGVydHkoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgU2V0UHJvcGVydHkoYXR0cnMpOwogIH0KICBzdGF0aWMgc2lnbkRhdGEoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgU2lnbkRhdGEoYXR0cnMpOwogIH0KICBzdGF0aWMgc2lnbmF0dXJlKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IFNpZ25hdHVyZShhdHRycyk7CiAgfQogIHN0YXRpYyBzaWduaW5nKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IFNpZ25pbmcoYXR0cnMpOwogIH0KICBzdGF0aWMgc29saWQoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgU29saWQoYXR0cnMpOwogIH0KICBzdGF0aWMgc3BlYWsoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgU3BlYWsoYXR0cnMpOwogIH0KICBzdGF0aWMgc3RpcHBsZShhdHRycykgewogICAgcmV0dXJuIG5ldyBTdGlwcGxlKGF0dHJzKTsKICB9CiAgc3RhdGljIHN1YmZvcm0oYXR0cnMpIHsKICAgIHJldHVybiBuZXcgU3ViZm9ybShhdHRycyk7CiAgfQogIHN0YXRpYyBzdWJmb3JtU2V0KGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IFN1YmZvcm1TZXQoYXR0cnMpOwogIH0KICBzdGF0aWMgc3ViamVjdEROKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IFN1YmplY3RETihhdHRycyk7CiAgfQogIHN0YXRpYyBzdWJqZWN0RE5zKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IFN1YmplY3RETnMoYXR0cnMpOwogIH0KICBzdGF0aWMgc3VibWl0KGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IFN1Ym1pdChhdHRycyk7CiAgfQogIHN0YXRpYyB0ZW1wbGF0ZShhdHRycykgewogICAgcmV0dXJuIG5ldyBUZW1wbGF0ZShhdHRycyk7CiAgfQogIHN0YXRpYyB0ZXh0KGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IFRleHQoYXR0cnMpOwogIH0KICBzdGF0aWMgdGV4dEVkaXQoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgVGV4dEVkaXQoYXR0cnMpOwogIH0KICBzdGF0aWMgdGltZShhdHRycykgewogICAgcmV0dXJuIG5ldyBUaW1lKGF0dHJzKTsKICB9CiAgc3RhdGljIHRpbWVTdGFtcChhdHRycykgewogICAgcmV0dXJuIG5ldyBUaW1lU3RhbXAoYXR0cnMpOwogIH0KICBzdGF0aWMgdG9vbFRpcChhdHRycykgewogICAgcmV0dXJuIG5ldyBUb29sVGlwKGF0dHJzKTsKICB9CiAgc3RhdGljIHRyYXZlcnNhbChhdHRycykgewogICAgcmV0dXJuIG5ldyBUcmF2ZXJzYWwoYXR0cnMpOwogIH0KICBzdGF0aWMgdHJhdmVyc2UoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgVHJhdmVyc2UoYXR0cnMpOwogIH0KICBzdGF0aWMgdWkoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgVWkoYXR0cnMpOwogIH0KICBzdGF0aWMgdmFsaWRhdGUoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgVmFsaWRhdGUoYXR0cnMpOwogIH0KICBzdGF0aWMgdmFsdWUoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgVmFsdWUoYXR0cnMpOwogIH0KICBzdGF0aWMgdmFyaWFibGVzKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IFZhcmlhYmxlcyhhdHRycyk7CiAgfQp9Cgo7Ly8gLi9zcmMvY29yZS94ZmEvYmluZC5qcwoKCgoKCgoKCgoKCmNvbnN0IGJpbmRfTlNfREFUQVNFVFMgPSBOYW1lc3BhY2VJZHMuZGF0YXNldHMuaWQ7CmZ1bmN0aW9uIGNyZWF0ZVRleHQoY29udGVudCkgewogIGNvbnN0IG5vZGUgPSBuZXcgVGV4dCh7fSk7CiAgbm9kZVskY29udGVudF0gPSBjb250ZW50OwogIHJldHVybiBub2RlOwp9CmNsYXNzIEJpbmRlciB7CiAgY29uc3RydWN0b3Iocm9vdCkgewogICAgdGhpcy5yb290ID0gcm9vdDsKICAgIHRoaXMuZGF0YXNldHMgPSByb290LmRhdGFzZXRzOwogICAgdGhpcy5kYXRhID0gcm9vdC5kYXRhc2V0cz8uZGF0YSB8fCBuZXcgWG1sT2JqZWN0KE5hbWVzcGFjZUlkcy5kYXRhc2V0cy5pZCwgImRhdGEiKTsKICAgIHRoaXMuZW1wdHlNZXJnZSA9IHRoaXMuZGF0YVskZ2V0Q2hpbGRyZW5dKCkubGVuZ3RoID09PSAwOwogICAgdGhpcy5yb290LmZvcm0gPSB0aGlzLmZvcm0gPSByb290LnRlbXBsYXRlWyRjbG9uZV0oKTsKICB9CiAgX2lzQ29uc3VtZURhdGEoKSB7CiAgICByZXR1cm4gIXRoaXMuZW1wdHlNZXJnZSAmJiB0aGlzLl9tZXJnZU1vZGU7CiAgfQogIF9pc01hdGNoVGVtcGxhdGUoKSB7CiAgICByZXR1cm4gIXRoaXMuX2lzQ29uc3VtZURhdGEoKTsKICB9CiAgYmluZCgpIHsKICAgIHRoaXMuX2JpbmRFbGVtZW50KHRoaXMuZm9ybSwgdGhpcy5kYXRhKTsKICAgIHJldHVybiB0aGlzLmZvcm07CiAgfQogIGdldERhdGEoKSB7CiAgICByZXR1cm4gdGhpcy5kYXRhOwogIH0KICBfYmluZFZhbHVlKGZvcm1Ob2RlLCBkYXRhLCBwaWN0dXJlKSB7CiAgICBmb3JtTm9kZVskZGF0YV0gPSBkYXRhOwogICAgaWYgKGZvcm1Ob2RlWyRoYXNTZXR0YWJsZVZhbHVlXSgpKSB7CiAgICAgIGlmIChkYXRhWyRpc0RhdGFWYWx1ZV0oKSkgewogICAgICAgIGNvbnN0IHZhbHVlID0gZGF0YVskZ2V0RGF0YVZhbHVlXSgpOwogICAgICAgIGZvcm1Ob2RlWyRzZXRWYWx1ZV0oY3JlYXRlVGV4dCh2YWx1ZSkpOwogICAgICB9IGVsc2UgaWYgKGZvcm1Ob2RlIGluc3RhbmNlb2YgRmllbGQgJiYgZm9ybU5vZGUudWk/LmNob2ljZUxpc3Q/Lm9wZW4gPT09ICJtdWx0aVNlbGVjdCIpIHsKICAgICAgICBjb25zdCB2YWx1ZSA9IGRhdGFbJGdldENoaWxkcmVuXSgpLm1hcChjaGlsZCA9PiBjaGlsZFskY29udGVudF0udHJpbSgpKS5qb2luKCJcbiIpOwogICAgICAgIGZvcm1Ob2RlWyRzZXRWYWx1ZV0oY3JlYXRlVGV4dCh2YWx1ZSkpOwogICAgICB9IGVsc2UgaWYgKHRoaXMuX2lzQ29uc3VtZURhdGEoKSkgewogICAgICAgIHdhcm4oYFhGQSAtIE5vZGVzIGhhdmVuJ3QgdGhlIHNhbWUgdHlwZS5gKTsKICAgICAgfQogICAgfSBlbHNlIGlmICghZGF0YVskaXNEYXRhVmFsdWVdKCkgfHwgdGhpcy5faXNNYXRjaFRlbXBsYXRlKCkpIHsKICAgICAgdGhpcy5fYmluZEVsZW1lbnQoZm9ybU5vZGUsIGRhdGEpOwogICAgfSBlbHNlIHsKICAgICAgd2FybihgWEZBIC0gTm9kZXMgaGF2ZW4ndCB0aGUgc2FtZSB0eXBlLmApOwogICAgfQogIH0KICBfZmluZERhdGFCeU5hbWVUb0NvbnN1bWUobmFtZSwgaXNWYWx1ZSwgZGF0YU5vZGUsIGdsb2JhbCkgewogICAgaWYgKCFuYW1lKSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgbGV0IGdlbmVyYXRvciwgbWF0Y2g7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkrKykgewogICAgICBnZW5lcmF0b3IgPSBkYXRhTm9kZVskZ2V0UmVhbENoaWxkcmVuQnlOYW1lSXRdKG5hbWUsIGZhbHNlLCB0cnVlKTsKICAgICAgd2hpbGUgKHRydWUpIHsKICAgICAgICBtYXRjaCA9IGdlbmVyYXRvci5uZXh0KCkudmFsdWU7CiAgICAgICAgaWYgKCFtYXRjaCkgewogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICAgIGlmIChpc1ZhbHVlID09PSBtYXRjaFskaXNEYXRhVmFsdWVdKCkpIHsKICAgICAgICAgIHJldHVybiBtYXRjaDsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKGRhdGFOb2RlWyRuYW1lc3BhY2VJZF0gPT09IE5hbWVzcGFjZUlkcy5kYXRhc2V0cy5pZCAmJiBkYXRhTm9kZVskbm9kZU5hbWVdID09PSAiZGF0YSIpIHsKICAgICAgICBicmVhazsKICAgICAgfQogICAgICBkYXRhTm9kZSA9IGRhdGFOb2RlWyRnZXRQYXJlbnRdKCk7CiAgICB9CiAgICBpZiAoIWdsb2JhbCkgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIGdlbmVyYXRvciA9IHRoaXMuZGF0YVskZ2V0UmVhbENoaWxkcmVuQnlOYW1lSXRdKG5hbWUsIHRydWUsIGZhbHNlKTsKICAgIG1hdGNoID0gZ2VuZXJhdG9yLm5leHQoKS52YWx1ZTsKICAgIGlmIChtYXRjaCkgewogICAgICByZXR1cm4gbWF0Y2g7CiAgICB9CiAgICBnZW5lcmF0b3IgPSB0aGlzLmRhdGFbJGdldEF0dHJpYnV0ZUl0XShuYW1lLCB0cnVlKTsKICAgIG1hdGNoID0gZ2VuZXJhdG9yLm5leHQoKS52YWx1ZTsKICAgIGlmIChtYXRjaD8uWyRpc0RhdGFWYWx1ZV0oKSkgewogICAgICByZXR1cm4gbWF0Y2g7CiAgICB9CiAgICByZXR1cm4gbnVsbDsKICB9CiAgX3NldFByb3BlcnRpZXMoZm9ybU5vZGUsIGRhdGFOb2RlKSB7CiAgICBpZiAoIWZvcm1Ob2RlLmhhc093blByb3BlcnR5KCJzZXRQcm9wZXJ0eSIpKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGZvciAoY29uc3QgewogICAgICByZWYsCiAgICAgIHRhcmdldCwKICAgICAgY29ubmVjdGlvbgogICAgfSBvZiBmb3JtTm9kZS5zZXRQcm9wZXJ0eS5jaGlsZHJlbikgewogICAgICBpZiAoY29ubmVjdGlvbikgewogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGlmICghcmVmKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgY29uc3Qgbm9kZXMgPSBzZWFyY2hOb2RlKHRoaXMucm9vdCwgZGF0YU5vZGUsIHJlZiwgZmFsc2UsIGZhbHNlKTsKICAgICAgaWYgKCFub2RlcykgewogICAgICAgIHdhcm4oYFhGQSAtIEludmFsaWQgcmVmZXJlbmNlOiAke3JlZn0uYCk7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgY29uc3QgW25vZGVdID0gbm9kZXM7CiAgICAgIGlmICghbm9kZVskaXNEZXNjZW5kZW50XSh0aGlzLmRhdGEpKSB7CiAgICAgICAgd2FybihgWEZBIC0gSW52YWxpZCBub2RlOiBtdXN0IGJlIGEgZGF0YSBub2RlLmApOwogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGNvbnN0IHRhcmdldE5vZGVzID0gc2VhcmNoTm9kZSh0aGlzLnJvb3QsIGZvcm1Ob2RlLCB0YXJnZXQsIGZhbHNlLCBmYWxzZSk7CiAgICAgIGlmICghdGFyZ2V0Tm9kZXMpIHsKICAgICAgICB3YXJuKGBYRkEgLSBJbnZhbGlkIHRhcmdldDogJHt0YXJnZXR9LmApOwogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGNvbnN0IFt0YXJnZXROb2RlXSA9IHRhcmdldE5vZGVzOwogICAgICBpZiAoIXRhcmdldE5vZGVbJGlzRGVzY2VuZGVudF0oZm9ybU5vZGUpKSB7CiAgICAgICAgd2FybihgWEZBIC0gSW52YWxpZCB0YXJnZXQ6IG11c3QgYmUgYSBwcm9wZXJ0eSBvciBzdWJwcm9wZXJ0eS5gKTsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBjb25zdCB0YXJnZXRQYXJlbnQgPSB0YXJnZXROb2RlWyRnZXRQYXJlbnRdKCk7CiAgICAgIGlmICh0YXJnZXROb2RlIGluc3RhbmNlb2YgU2V0UHJvcGVydHkgfHwgdGFyZ2V0UGFyZW50IGluc3RhbmNlb2YgU2V0UHJvcGVydHkpIHsKICAgICAgICB3YXJuKGBYRkEgLSBJbnZhbGlkIHRhcmdldDogY2Fubm90IGJlIGEgc2V0UHJvcGVydHkgb3Igb25lIG9mIGl0cyBwcm9wZXJ0aWVzLmApOwogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGlmICh0YXJnZXROb2RlIGluc3RhbmNlb2YgQmluZEl0ZW1zIHx8IHRhcmdldFBhcmVudCBpbnN0YW5jZW9mIEJpbmRJdGVtcykgewogICAgICAgIHdhcm4oYFhGQSAtIEludmFsaWQgdGFyZ2V0OiBjYW5ub3QgYmUgYSBiaW5kSXRlbXMgb3Igb25lIG9mIGl0cyBwcm9wZXJ0aWVzLmApOwogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGNvbnN0IGNvbnRlbnQgPSBub2RlWyR0ZXh0XSgpOwogICAgICBjb25zdCBuYW1lID0gdGFyZ2V0Tm9kZVskbm9kZU5hbWVdOwogICAgICBpZiAodGFyZ2V0Tm9kZSBpbnN0YW5jZW9mIFhGQUF0dHJpYnV0ZSkgewogICAgICAgIGNvbnN0IGF0dHJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgICAgICBhdHRyc1tuYW1lXSA9IGNvbnRlbnQ7CiAgICAgICAgY29uc3Qgb2JqID0gUmVmbGVjdC5jb25zdHJ1Y3QoT2JqZWN0LmdldFByb3RvdHlwZU9mKHRhcmdldFBhcmVudCkuY29uc3RydWN0b3IsIFthdHRyc10pOwogICAgICAgIHRhcmdldFBhcmVudFtuYW1lXSA9IG9ialtuYW1lXTsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBpZiAoIXRhcmdldE5vZGUuaGFzT3duUHJvcGVydHkoJGNvbnRlbnQpKSB7CiAgICAgICAgd2FybihgWEZBIC0gSW52YWxpZCBub2RlIHRvIHVzZSBpbiBzZXRQcm9wZXJ0eWApOwogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIHRhcmdldE5vZGVbJGRhdGFdID0gbm9kZTsKICAgICAgdGFyZ2V0Tm9kZVskY29udGVudF0gPSBjb250ZW50OwogICAgICB0YXJnZXROb2RlWyRmaW5hbGl6ZV0oKTsKICAgIH0KICB9CiAgX2JpbmRJdGVtcyhmb3JtTm9kZSwgZGF0YU5vZGUpIHsKICAgIGlmICghZm9ybU5vZGUuaGFzT3duUHJvcGVydHkoIml0ZW1zIikgfHwgIWZvcm1Ob2RlLmhhc093blByb3BlcnR5KCJiaW5kSXRlbXMiKSB8fCBmb3JtTm9kZS5iaW5kSXRlbXMuaXNFbXB0eSgpKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGZvciAoY29uc3QgaXRlbSBvZiBmb3JtTm9kZS5pdGVtcy5jaGlsZHJlbikgewogICAgICBmb3JtTm9kZVskcmVtb3ZlQ2hpbGRdKGl0ZW0pOwogICAgfQogICAgZm9ybU5vZGUuaXRlbXMuY2xlYXIoKTsKICAgIGNvbnN0IGxhYmVscyA9IG5ldyBJdGVtcyh7fSk7CiAgICBjb25zdCB2YWx1ZXMgPSBuZXcgSXRlbXMoe30pOwogICAgZm9ybU5vZGVbJGFwcGVuZENoaWxkXShsYWJlbHMpOwogICAgZm9ybU5vZGUuaXRlbXMucHVzaChsYWJlbHMpOwogICAgZm9ybU5vZGVbJGFwcGVuZENoaWxkXSh2YWx1ZXMpOwogICAgZm9ybU5vZGUuaXRlbXMucHVzaCh2YWx1ZXMpOwogICAgZm9yIChjb25zdCB7CiAgICAgIHJlZiwKICAgICAgbGFiZWxSZWYsCiAgICAgIHZhbHVlUmVmLAogICAgICBjb25uZWN0aW9uCiAgICB9IG9mIGZvcm1Ob2RlLmJpbmRJdGVtcy5jaGlsZHJlbikgewogICAgICBpZiAoY29ubmVjdGlvbikgewogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGlmICghcmVmKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgY29uc3Qgbm9kZXMgPSBzZWFyY2hOb2RlKHRoaXMucm9vdCwgZGF0YU5vZGUsIHJlZiwgZmFsc2UsIGZhbHNlKTsKICAgICAgaWYgKCFub2RlcykgewogICAgICAgIHdhcm4oYFhGQSAtIEludmFsaWQgcmVmZXJlbmNlOiAke3JlZn0uYCk7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgZm9yIChjb25zdCBub2RlIG9mIG5vZGVzKSB7CiAgICAgICAgaWYgKCFub2RlWyRpc0Rlc2NlbmRlbnRdKHRoaXMuZGF0YXNldHMpKSB7CiAgICAgICAgICB3YXJuKGBYRkEgLSBJbnZhbGlkIHJlZiAoJHtyZWZ9KTogbXVzdCBiZSBhIGRhdGFzZXRzIGNoaWxkLmApOwogICAgICAgICAgY29udGludWU7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGxhYmVsTm9kZXMgPSBzZWFyY2hOb2RlKHRoaXMucm9vdCwgbm9kZSwgbGFiZWxSZWYsIHRydWUsIGZhbHNlKTsKICAgICAgICBpZiAoIWxhYmVsTm9kZXMpIHsKICAgICAgICAgIHdhcm4oYFhGQSAtIEludmFsaWQgbGFiZWw6ICR7bGFiZWxSZWZ9LmApOwogICAgICAgICAgY29udGludWU7CiAgICAgICAgfQogICAgICAgIGNvbnN0IFtsYWJlbE5vZGVdID0gbGFiZWxOb2RlczsKICAgICAgICBpZiAoIWxhYmVsTm9kZVskaXNEZXNjZW5kZW50XSh0aGlzLmRhdGFzZXRzKSkgewogICAgICAgICAgd2FybihgWEZBIC0gSW52YWxpZCBsYWJlbDogbXVzdCBiZSBhIGRhdGFzZXRzIGNoaWxkLmApOwogICAgICAgICAgY29udGludWU7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHZhbHVlTm9kZXMgPSBzZWFyY2hOb2RlKHRoaXMucm9vdCwgbm9kZSwgdmFsdWVSZWYsIHRydWUsIGZhbHNlKTsKICAgICAgICBpZiAoIXZhbHVlTm9kZXMpIHsKICAgICAgICAgIHdhcm4oYFhGQSAtIEludmFsaWQgdmFsdWU6ICR7dmFsdWVSZWZ9LmApOwogICAgICAgICAgY29udGludWU7CiAgICAgICAgfQogICAgICAgIGNvbnN0IFt2YWx1ZU5vZGVdID0gdmFsdWVOb2RlczsKICAgICAgICBpZiAoIXZhbHVlTm9kZVskaXNEZXNjZW5kZW50XSh0aGlzLmRhdGFzZXRzKSkgewogICAgICAgICAgd2FybihgWEZBIC0gSW52YWxpZCB2YWx1ZTogbXVzdCBiZSBhIGRhdGFzZXRzIGNoaWxkLmApOwogICAgICAgICAgY29udGludWU7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGxhYmVsID0gY3JlYXRlVGV4dChsYWJlbE5vZGVbJHRleHRdKCkpOwogICAgICAgIGNvbnN0IHZhbHVlID0gY3JlYXRlVGV4dCh2YWx1ZU5vZGVbJHRleHRdKCkpOwogICAgICAgIGxhYmVsc1skYXBwZW5kQ2hpbGRdKGxhYmVsKTsKICAgICAgICBsYWJlbHMudGV4dC5wdXNoKGxhYmVsKTsKICAgICAgICB2YWx1ZXNbJGFwcGVuZENoaWxkXSh2YWx1ZSk7CiAgICAgICAgdmFsdWVzLnRleHQucHVzaCh2YWx1ZSk7CiAgICAgIH0KICAgIH0KICB9CiAgX2JpbmRPY2N1cnJlbmNlcyhmb3JtTm9kZSwgbWF0Y2hlcywgcGljdHVyZSkgewogICAgbGV0IGJhc2VDbG9uZTsKICAgIGlmIChtYXRjaGVzLmxlbmd0aCA+IDEpIHsKICAgICAgYmFzZUNsb25lID0gZm9ybU5vZGVbJGNsb25lXSgpOwogICAgICBiYXNlQ2xvbmVbJHJlbW92ZUNoaWxkXShiYXNlQ2xvbmUub2NjdXIpOwogICAgICBiYXNlQ2xvbmUub2NjdXIgPSBudWxsOwogICAgfQogICAgdGhpcy5fYmluZFZhbHVlKGZvcm1Ob2RlLCBtYXRjaGVzWzBdLCBwaWN0dXJlKTsKICAgIHRoaXMuX3NldFByb3BlcnRpZXMoZm9ybU5vZGUsIG1hdGNoZXNbMF0pOwogICAgdGhpcy5fYmluZEl0ZW1zKGZvcm1Ob2RlLCBtYXRjaGVzWzBdKTsKICAgIGlmIChtYXRjaGVzLmxlbmd0aCA9PT0gMSkgewogICAgICByZXR1cm47CiAgICB9CiAgICBjb25zdCBwYXJlbnQgPSBmb3JtTm9kZVskZ2V0UGFyZW50XSgpOwogICAgY29uc3QgbmFtZSA9IGZvcm1Ob2RlWyRub2RlTmFtZV07CiAgICBjb25zdCBwb3MgPSBwYXJlbnRbJGluZGV4T2ZdKGZvcm1Ob2RlKTsKICAgIGZvciAobGV0IGkgPSAxLCBpaSA9IG1hdGNoZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgICBjb25zdCBtYXRjaCA9IG1hdGNoZXNbaV07CiAgICAgIGNvbnN0IGNsb25lID0gYmFzZUNsb25lWyRjbG9uZV0oKTsKICAgICAgcGFyZW50W25hbWVdLnB1c2goY2xvbmUpOwogICAgICBwYXJlbnRbJGluc2VydEF0XShwb3MgKyBpLCBjbG9uZSk7CiAgICAgIHRoaXMuX2JpbmRWYWx1ZShjbG9uZSwgbWF0Y2gsIHBpY3R1cmUpOwogICAgICB0aGlzLl9zZXRQcm9wZXJ0aWVzKGNsb25lLCBtYXRjaCk7CiAgICAgIHRoaXMuX2JpbmRJdGVtcyhjbG9uZSwgbWF0Y2gpOwogICAgfQogIH0KICBfY3JlYXRlT2NjdXJyZW5jZXMoZm9ybU5vZGUpIHsKICAgIGlmICghdGhpcy5lbXB0eU1lcmdlKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGNvbnN0IHsKICAgICAgb2NjdXIKICAgIH0gPSBmb3JtTm9kZTsKICAgIGlmICghb2NjdXIgfHwgb2NjdXIuaW5pdGlhbCA8PSAxKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGNvbnN0IHBhcmVudCA9IGZvcm1Ob2RlWyRnZXRQYXJlbnRdKCk7CiAgICBjb25zdCBuYW1lID0gZm9ybU5vZGVbJG5vZGVOYW1lXTsKICAgIGlmICghKHBhcmVudFtuYW1lXSBpbnN0YW5jZW9mIFhGQU9iamVjdEFycmF5KSkgewogICAgICByZXR1cm47CiAgICB9CiAgICBsZXQgY3VycmVudE51bWJlcjsKICAgIGlmIChmb3JtTm9kZS5uYW1lKSB7CiAgICAgIGN1cnJlbnROdW1iZXIgPSBwYXJlbnRbbmFtZV0uY2hpbGRyZW4uZmlsdGVyKGUgPT4gZS5uYW1lID09PSBmb3JtTm9kZS5uYW1lKS5sZW5ndGg7CiAgICB9IGVsc2UgewogICAgICBjdXJyZW50TnVtYmVyID0gcGFyZW50W25hbWVdLmNoaWxkcmVuLmxlbmd0aDsKICAgIH0KICAgIGNvbnN0IHBvcyA9IHBhcmVudFskaW5kZXhPZl0oZm9ybU5vZGUpICsgMTsKICAgIGNvbnN0IGlpID0gb2NjdXIuaW5pdGlhbCAtIGN1cnJlbnROdW1iZXI7CiAgICBpZiAoaWkpIHsKICAgICAgY29uc3Qgbm9kZUNsb25lID0gZm9ybU5vZGVbJGNsb25lXSgpOwogICAgICBub2RlQ2xvbmVbJHJlbW92ZUNoaWxkXShub2RlQ2xvbmUub2NjdXIpOwogICAgICBub2RlQ2xvbmUub2NjdXIgPSBudWxsOwogICAgICBwYXJlbnRbbmFtZV0ucHVzaChub2RlQ2xvbmUpOwogICAgICBwYXJlbnRbJGluc2VydEF0XShwb3MsIG5vZGVDbG9uZSk7CiAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgaWk7IGkrKykgewogICAgICAgIGNvbnN0IGNsb25lID0gbm9kZUNsb25lWyRjbG9uZV0oKTsKICAgICAgICBwYXJlbnRbbmFtZV0ucHVzaChjbG9uZSk7CiAgICAgICAgcGFyZW50WyRpbnNlcnRBdF0ocG9zICsgaSwgY2xvbmUpOwogICAgICB9CiAgICB9CiAgfQogIF9nZXRPY2N1ckluZm8oZm9ybU5vZGUpIHsKICAgIGNvbnN0IHsKICAgICAgbmFtZSwKICAgICAgb2NjdXIKICAgIH0gPSBmb3JtTm9kZTsKICAgIGlmICghb2NjdXIgfHwgIW5hbWUpIHsKICAgICAgcmV0dXJuIFsxLCAxXTsKICAgIH0KICAgIGNvbnN0IG1heCA9IG9jY3VyLm1heCA9PT0gLTEgPyBJbmZpbml0eSA6IG9jY3VyLm1heDsKICAgIHJldHVybiBbb2NjdXIubWluLCBtYXhdOwogIH0KICBfc2V0QW5kQmluZChmb3JtTm9kZSwgZGF0YU5vZGUpIHsKICAgIHRoaXMuX3NldFByb3BlcnRpZXMoZm9ybU5vZGUsIGRhdGFOb2RlKTsKICAgIHRoaXMuX2JpbmRJdGVtcyhmb3JtTm9kZSwgZGF0YU5vZGUpOwogICAgdGhpcy5fYmluZEVsZW1lbnQoZm9ybU5vZGUsIGRhdGFOb2RlKTsKICB9CiAgX2JpbmRFbGVtZW50KGZvcm1Ob2RlLCBkYXRhTm9kZSkgewogICAgY29uc3QgdXNlbGVzc05vZGVzID0gW107CiAgICB0aGlzLl9jcmVhdGVPY2N1cnJlbmNlcyhmb3JtTm9kZSk7CiAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGZvcm1Ob2RlWyRnZXRDaGlsZHJlbl0oKSkgewogICAgICBpZiAoY2hpbGRbJGRhdGFdKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgaWYgKHRoaXMuX21lcmdlTW9kZSA9PT0gdW5kZWZpbmVkICYmIGNoaWxkWyRub2RlTmFtZV0gPT09ICJzdWJmb3JtIikgewogICAgICAgIHRoaXMuX21lcmdlTW9kZSA9IGNoaWxkLm1lcmdlTW9kZSA9PT0gImNvbnN1bWVEYXRhIjsKICAgICAgICBjb25zdCBkYXRhQ2hpbGRyZW4gPSBkYXRhTm9kZVskZ2V0Q2hpbGRyZW5dKCk7CiAgICAgICAgaWYgKGRhdGFDaGlsZHJlbi5sZW5ndGggPiAwKSB7CiAgICAgICAgICB0aGlzLl9iaW5kT2NjdXJyZW5jZXMoY2hpbGQsIFtkYXRhQ2hpbGRyZW5bMF1dLCBudWxsKTsKICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZW1wdHlNZXJnZSkgewogICAgICAgICAgY29uc3QgbnNJZCA9IGRhdGFOb2RlWyRuYW1lc3BhY2VJZF0gPT09IGJpbmRfTlNfREFUQVNFVFMgPyAtMSA6IGRhdGFOb2RlWyRuYW1lc3BhY2VJZF07CiAgICAgICAgICBjb25zdCBkYXRhQ2hpbGQgPSBjaGlsZFskZGF0YV0gPSBuZXcgWG1sT2JqZWN0KG5zSWQsIGNoaWxkLm5hbWUgfHwgInJvb3QiKTsKICAgICAgICAgIGRhdGFOb2RlWyRhcHBlbmRDaGlsZF0oZGF0YUNoaWxkKTsKICAgICAgICAgIHRoaXMuX2JpbmRFbGVtZW50KGNoaWxkLCBkYXRhQ2hpbGQpOwogICAgICAgIH0KICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBpZiAoIWNoaWxkWyRpc0JpbmRhYmxlXSgpKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgbGV0IGdsb2JhbCA9IGZhbHNlOwogICAgICBsZXQgcGljdHVyZSA9IG51bGw7CiAgICAgIGxldCByZWYgPSBudWxsOwogICAgICBsZXQgbWF0Y2ggPSBudWxsOwogICAgICBpZiAoY2hpbGQuYmluZCkgewogICAgICAgIHN3aXRjaCAoY2hpbGQuYmluZC5tYXRjaCkgewogICAgICAgICAgY2FzZSAibm9uZSI6CiAgICAgICAgICAgIHRoaXMuX3NldEFuZEJpbmQoY2hpbGQsIGRhdGFOb2RlKTsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICBjYXNlICJnbG9iYWwiOgogICAgICAgICAgICBnbG9iYWwgPSB0cnVlOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgImRhdGFSZWYiOgogICAgICAgICAgICBpZiAoIWNoaWxkLmJpbmQucmVmKSB7CiAgICAgICAgICAgICAgd2FybihgWEZBIC0gcmVmIGlzIGVtcHR5IGluIG5vZGUgJHtjaGlsZFskbm9kZU5hbWVdfS5gKTsKICAgICAgICAgICAgICB0aGlzLl9zZXRBbmRCaW5kKGNoaWxkLCBkYXRhTm9kZSk7CiAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmVmID0gY2hpbGQuYmluZC5yZWY7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICAgIGlmIChjaGlsZC5iaW5kLnBpY3R1cmUpIHsKICAgICAgICAgIHBpY3R1cmUgPSBjaGlsZC5iaW5kLnBpY3R1cmVbJGNvbnRlbnRdOwogICAgICAgIH0KICAgICAgfQogICAgICBjb25zdCBbbWluLCBtYXhdID0gdGhpcy5fZ2V0T2NjdXJJbmZvKGNoaWxkKTsKICAgICAgaWYgKHJlZikgewogICAgICAgIG1hdGNoID0gc2VhcmNoTm9kZSh0aGlzLnJvb3QsIGRhdGFOb2RlLCByZWYsIHRydWUsIGZhbHNlKTsKICAgICAgICBpZiAobWF0Y2ggPT09IG51bGwpIHsKICAgICAgICAgIG1hdGNoID0gY3JlYXRlRGF0YU5vZGUodGhpcy5kYXRhLCBkYXRhTm9kZSwgcmVmKTsKICAgICAgICAgIGlmICghbWF0Y2gpIHsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodGhpcy5faXNDb25zdW1lRGF0YSgpKSB7CiAgICAgICAgICAgIG1hdGNoWyRjb25zdW1lZF0gPSB0cnVlOwogICAgICAgICAgfQogICAgICAgICAgdGhpcy5fc2V0QW5kQmluZChjaGlsZCwgbWF0Y2gpOwogICAgICAgICAgY29udGludWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGlmICh0aGlzLl9pc0NvbnN1bWVEYXRhKCkpIHsKICAgICAgICAgICAgbWF0Y2ggPSBtYXRjaC5maWx0ZXIobm9kZSA9PiAhbm9kZVskY29uc3VtZWRdKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChtYXRjaC5sZW5ndGggPiBtYXgpIHsKICAgICAgICAgICAgbWF0Y2ggPSBtYXRjaC5zbGljZSgwLCBtYXgpOwogICAgICAgICAgfSBlbHNlIGlmIChtYXRjaC5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgbWF0Y2ggPSBudWxsOwogICAgICAgICAgfQogICAgICAgICAgaWYgKG1hdGNoICYmIHRoaXMuX2lzQ29uc3VtZURhdGEoKSkgewogICAgICAgICAgICBtYXRjaC5mb3JFYWNoKG5vZGUgPT4gewogICAgICAgICAgICAgIG5vZGVbJGNvbnN1bWVkXSA9IHRydWU7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAoIWNoaWxkLm5hbWUpIHsKICAgICAgICAgIHRoaXMuX3NldEFuZEJpbmQoY2hpbGQsIGRhdGFOb2RlKTsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgICBpZiAodGhpcy5faXNDb25zdW1lRGF0YSgpKSB7CiAgICAgICAgICBjb25zdCBtYXRjaGVzID0gW107CiAgICAgICAgICB3aGlsZSAobWF0Y2hlcy5sZW5ndGggPCBtYXgpIHsKICAgICAgICAgICAgY29uc3QgZm91bmQgPSB0aGlzLl9maW5kRGF0YUJ5TmFtZVRvQ29uc3VtZShjaGlsZC5uYW1lLCBjaGlsZFskaGFzU2V0dGFibGVWYWx1ZV0oKSwgZGF0YU5vZGUsIGdsb2JhbCk7CiAgICAgICAgICAgIGlmICghZm91bmQpIHsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICBmb3VuZFskY29uc3VtZWRdID0gdHJ1ZTsKICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKGZvdW5kKTsKICAgICAgICAgIH0KICAgICAgICAgIG1hdGNoID0gbWF0Y2hlcy5sZW5ndGggPiAwID8gbWF0Y2hlcyA6IG51bGw7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIG1hdGNoID0gZGF0YU5vZGVbJGdldFJlYWxDaGlsZHJlbkJ5TmFtZUl0XShjaGlsZC5uYW1lLCBmYWxzZSwgdGhpcy5lbXB0eU1lcmdlKS5uZXh0KCkudmFsdWU7CiAgICAgICAgICBpZiAoIW1hdGNoKSB7CiAgICAgICAgICAgIGlmIChtaW4gPT09IDApIHsKICAgICAgICAgICAgICB1c2VsZXNzTm9kZXMucHVzaChjaGlsZCk7CiAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgbnNJZCA9IGRhdGFOb2RlWyRuYW1lc3BhY2VJZF0gPT09IGJpbmRfTlNfREFUQVNFVFMgPyAtMSA6IGRhdGFOb2RlWyRuYW1lc3BhY2VJZF07CiAgICAgICAgICAgIG1hdGNoID0gY2hpbGRbJGRhdGFdID0gbmV3IFhtbE9iamVjdChuc0lkLCBjaGlsZC5uYW1lKTsKICAgICAgICAgICAgaWYgKHRoaXMuZW1wdHlNZXJnZSkgewogICAgICAgICAgICAgIG1hdGNoWyRjb25zdW1lZF0gPSB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGRhdGFOb2RlWyRhcHBlbmRDaGlsZF0obWF0Y2gpOwogICAgICAgICAgICB0aGlzLl9zZXRBbmRCaW5kKGNoaWxkLCBtYXRjaCk7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHRoaXMuZW1wdHlNZXJnZSkgewogICAgICAgICAgICBtYXRjaFskY29uc3VtZWRdID0gdHJ1ZTsKICAgICAgICAgIH0KICAgICAgICAgIG1hdGNoID0gW21hdGNoXTsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKG1hdGNoKSB7CiAgICAgICAgdGhpcy5fYmluZE9jY3VycmVuY2VzKGNoaWxkLCBtYXRjaCwgcGljdHVyZSk7CiAgICAgIH0gZWxzZSBpZiAobWluID4gMCkgewogICAgICAgIHRoaXMuX3NldEFuZEJpbmQoY2hpbGQsIGRhdGFOb2RlKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB1c2VsZXNzTm9kZXMucHVzaChjaGlsZCk7CiAgICAgIH0KICAgIH0KICAgIHVzZWxlc3NOb2Rlcy5mb3JFYWNoKG5vZGUgPT4gbm9kZVskZ2V0UGFyZW50XSgpWyRyZW1vdmVDaGlsZF0obm9kZSkpOwogIH0KfQoKOy8vIC4vc3JjL2NvcmUveGZhL2RhdGEuanMKCgpjbGFzcyBEYXRhSGFuZGxlciB7CiAgY29uc3RydWN0b3Iocm9vdCwgZGF0YSkgewogICAgdGhpcy5kYXRhID0gZGF0YTsKICAgIHRoaXMuZGF0YXNldCA9IHJvb3QuZGF0YXNldHMgfHwgbnVsbDsKICB9CiAgc2VyaWFsaXplKHN0b3JhZ2UpIHsKICAgIGNvbnN0IHN0YWNrID0gW1stMSwgdGhpcy5kYXRhWyRnZXRDaGlsZHJlbl0oKV1dOwogICAgd2hpbGUgKHN0YWNrLmxlbmd0aCA+IDApIHsKICAgICAgY29uc3QgbGFzdCA9IHN0YWNrLmF0KC0xKTsKICAgICAgY29uc3QgW2ksIGNoaWxkcmVuXSA9IGxhc3Q7CiAgICAgIGlmIChpICsgMSA9PT0gY2hpbGRyZW4ubGVuZ3RoKSB7CiAgICAgICAgc3RhY2sucG9wKCk7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlblsrK2xhc3RbMF1dOwogICAgICBjb25zdCBzdG9yYWdlRW50cnkgPSBzdG9yYWdlLmdldChjaGlsZFskdWlkXSk7CiAgICAgIGlmIChzdG9yYWdlRW50cnkpIHsKICAgICAgICBjaGlsZFskc2V0VmFsdWVdKHN0b3JhZ2VFbnRyeSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IGNoaWxkWyRnZXRBdHRyaWJ1dGVzXSgpOwogICAgICAgIGZvciAoY29uc3QgdmFsdWUgb2YgYXR0cmlidXRlcy52YWx1ZXMoKSkgewogICAgICAgICAgY29uc3QgZW50cnkgPSBzdG9yYWdlLmdldCh2YWx1ZVskdWlkXSk7CiAgICAgICAgICBpZiAoZW50cnkpIHsKICAgICAgICAgICAgdmFsdWVbJHNldFZhbHVlXShlbnRyeSk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICBjb25zdCBub2RlcyA9IGNoaWxkWyRnZXRDaGlsZHJlbl0oKTsKICAgICAgaWYgKG5vZGVzLmxlbmd0aCA+IDApIHsKICAgICAgICBzdGFjay5wdXNoKFstMSwgbm9kZXNdKTsKICAgICAgfQogICAgfQogICAgY29uc3QgYnVmID0gW2A8eGZhOmRhdGFzZXRzIHhtbG5zOnhmYT0iaHR0cDovL3d3dy54ZmEub3JnL3NjaGVtYS94ZmEtZGF0YS8xLjAvIj5gXTsKICAgIGlmICh0aGlzLmRhdGFzZXQpIHsKICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiB0aGlzLmRhdGFzZXRbJGdldENoaWxkcmVuXSgpKSB7CiAgICAgICAgaWYgKGNoaWxkWyRub2RlTmFtZV0gIT09ICJkYXRhIikgewogICAgICAgICAgY2hpbGRbJHRvU3RyaW5nXShidWYpOwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgdGhpcy5kYXRhWyR0b1N0cmluZ10oYnVmKTsKICAgIGJ1Zi5wdXNoKCI8L3hmYTpkYXRhc2V0cz4iKTsKICAgIHJldHVybiBidWYuam9pbigiIik7CiAgfQp9Cgo7Ly8gLi9zcmMvY29yZS94ZmEvY29uZmlnLmpzCgoKCgoKCgoKCgoKY29uc3QgQ09ORklHX05TX0lEID0gTmFtZXNwYWNlSWRzLmNvbmZpZy5pZDsKY2xhc3MgQWNyb2JhdCBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAiYWNyb2JhdCIsIHRydWUpOwogICAgdGhpcy5hY3JvYmF0NyA9IG51bGw7CiAgICB0aGlzLmF1dG9TYXZlID0gbnVsbDsKICAgIHRoaXMuY29tbW9uID0gbnVsbDsKICAgIHRoaXMudmFsaWRhdGUgPSBudWxsOwogICAgdGhpcy52YWxpZGF0ZUFwcHJvdmFsU2lnbmF0dXJlcyA9IG51bGw7CiAgICB0aGlzLnN1Ym1pdFVybCA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogIH0KfQpjbGFzcyBBY3JvYmF0NyBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAiYWNyb2JhdDciLCB0cnVlKTsKICAgIHRoaXMuZHluYW1pY1JlbmRlciA9IG51bGw7CiAgfQp9CmNsYXNzIEFEQkVfSlNDb25zb2xlIGV4dGVuZHMgT3B0aW9uT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJBREJFX0pTQ29uc29sZSIsIFsiZGVsZWdhdGUiLCAiRW5hYmxlIiwgIkRpc2FibGUiXSk7CiAgfQp9CmNsYXNzIEFEQkVfSlNEZWJ1Z2dlciBleHRlbmRzIE9wdGlvbk9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAiQURCRV9KU0RlYnVnZ2VyIiwgWyJkZWxlZ2F0ZSIsICJFbmFibGUiLCAiRGlzYWJsZSJdKTsKICB9Cn0KY2xhc3MgQWRkU2lsZW50UHJpbnQgZXh0ZW5kcyBPcHRpb24wMSB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAiYWRkU2lsZW50UHJpbnQiKTsKICB9Cn0KY2xhc3MgQWRkVmlld2VyUHJlZmVyZW5jZXMgZXh0ZW5kcyBPcHRpb24wMSB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAiYWRkVmlld2VyUHJlZmVyZW5jZXMiKTsKICB9Cn0KY2xhc3MgQWRqdXN0RGF0YSBleHRlbmRzIE9wdGlvbjEwIHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJhZGp1c3REYXRhIik7CiAgfQp9CmNsYXNzIEFkb2JlRXh0ZW5zaW9uTGV2ZWwgZXh0ZW5kcyBJbnRlZ2VyT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJhZG9iZUV4dGVuc2lvbkxldmVsIiwgMCwgbiA9PiBuID49IDEgJiYgbiA8PSA4KTsKICB9Cn0KY2xhc3MgQWdlbnQgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTkZJR19OU19JRCwgImFnZW50IiwgdHJ1ZSk7CiAgICB0aGlzLm5hbWUgPSBhdHRyaWJ1dGVzLm5hbWUgPyBhdHRyaWJ1dGVzLm5hbWUudHJpbSgpIDogIiI7CiAgICB0aGlzLmNvbW1vbiA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogIH0KfQpjbGFzcyBBbHdheXNFbWJlZCBleHRlbmRzIENvbnRlbnRPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTkZJR19OU19JRCwgImFsd2F5c0VtYmVkIik7CiAgfQp9CmNsYXNzIEFtZCBleHRlbmRzIFN0cmluZ09iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAiYW1kIik7CiAgfQp9CmNsYXNzIGNvbmZpZ19BcmVhIGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJhcmVhIik7CiAgICB0aGlzLmxldmVsID0gZ2V0SW50ZWdlcih7CiAgICAgIGRhdGE6IGF0dHJpYnV0ZXMubGV2ZWwsCiAgICAgIGRlZmF1bHRWYWx1ZTogMCwKICAgICAgdmFsaWRhdGU6IG4gPT4gbiA+PSAxICYmIG4gPD0gMwogICAgfSk7CiAgICB0aGlzLm5hbWUgPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy5uYW1lLCBbIiIsICJiYXJjb2RlIiwgImNvcmVpbml0IiwgImRldmljZURyaXZlciIsICJmb250IiwgImdlbmVyYWwiLCAibGF5b3V0IiwgIm1lcmdlIiwgInNjcmlwdCIsICJzaWduYXR1cmUiLCAic291cmNlU2V0IiwgInRlbXBsYXRlQ2FjaGUiXSk7CiAgfQp9CmNsYXNzIEF0dHJpYnV0ZXMgZXh0ZW5kcyBPcHRpb25PYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTkZJR19OU19JRCwgImF0dHJpYnV0ZXMiLCBbInByZXNlcnZlIiwgImRlbGVnYXRlIiwgImlnbm9yZSJdKTsKICB9Cn0KY2xhc3MgQXV0b1NhdmUgZXh0ZW5kcyBPcHRpb25PYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTkZJR19OU19JRCwgImF1dG9TYXZlIiwgWyJkaXNhYmxlZCIsICJlbmFibGVkIl0pOwogIH0KfQpjbGFzcyBCYXNlIGV4dGVuZHMgU3RyaW5nT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJiYXNlIik7CiAgfQp9CmNsYXNzIEJhdGNoT3V0cHV0IGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJiYXRjaE91dHB1dCIpOwogICAgdGhpcy5mb3JtYXQgPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy5mb3JtYXQsIFsibm9uZSIsICJjb25jYXQiLCAiemlwIiwgInppcENvbXByZXNzIl0pOwogIH0KfQpjbGFzcyBCZWhhdmlvck92ZXJyaWRlIGV4dGVuZHMgQ29udGVudE9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAiYmVoYXZpb3JPdmVycmlkZSIpOwogIH0KICBbJGZpbmFsaXplXSgpIHsKICAgIHRoaXNbJGNvbnRlbnRdID0gbmV3IE1hcCh0aGlzWyRjb250ZW50XS50cmltKCkuc3BsaXQoL1xzKy8pLmZpbHRlcih4ID0+IHguaW5jbHVkZXMoIjoiKSkubWFwKHggPT4geC5zcGxpdCgiOiIsIDIpKSk7CiAgfQp9CmNsYXNzIENhY2hlIGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJjYWNoZSIsIHRydWUpOwogICAgdGhpcy50ZW1wbGF0ZUNhY2hlID0gbnVsbDsKICB9Cn0KY2xhc3MgQ2hhbmdlIGV4dGVuZHMgT3B0aW9uMDEgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTkZJR19OU19JRCwgImNoYW5nZSIpOwogIH0KfQpjbGFzcyBDb21tb24gZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTkZJR19OU19JRCwgImNvbW1vbiIsIHRydWUpOwogICAgdGhpcy5kYXRhID0gbnVsbDsKICAgIHRoaXMubG9jYWxlID0gbnVsbDsKICAgIHRoaXMubG9jYWxlU2V0ID0gbnVsbDsKICAgIHRoaXMubWVzc2FnaW5nID0gbnVsbDsKICAgIHRoaXMuc3VwcHJlc3NCYW5uZXIgPSBudWxsOwogICAgdGhpcy50ZW1wbGF0ZSA9IG51bGw7CiAgICB0aGlzLnZhbGlkYXRpb25NZXNzYWdpbmcgPSBudWxsOwogICAgdGhpcy52ZXJzaW9uQ29udHJvbCA9IG51bGw7CiAgICB0aGlzLmxvZyA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogIH0KfQpjbGFzcyBDb21wcmVzcyBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAiY29tcHJlc3MiKTsKICAgIHRoaXMuc2NvcGUgPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy5zY29wZSwgWyJpbWFnZU9ubHkiLCAiZG9jdW1lbnQiXSk7CiAgfQp9CmNsYXNzIENvbXByZXNzTG9naWNhbFN0cnVjdHVyZSBleHRlbmRzIE9wdGlvbjAxIHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJjb21wcmVzc0xvZ2ljYWxTdHJ1Y3R1cmUiKTsKICB9Cn0KY2xhc3MgQ29tcHJlc3NPYmplY3RTdHJlYW0gZXh0ZW5kcyBPcHRpb24xMCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAiY29tcHJlc3NPYmplY3RTdHJlYW0iKTsKICB9Cn0KY2xhc3MgQ29tcHJlc3Npb24gZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTkZJR19OU19JRCwgImNvbXByZXNzaW9uIiwgdHJ1ZSk7CiAgICB0aGlzLmNvbXByZXNzTG9naWNhbFN0cnVjdHVyZSA9IG51bGw7CiAgICB0aGlzLmNvbXByZXNzT2JqZWN0U3RyZWFtID0gbnVsbDsKICAgIHRoaXMubGV2ZWwgPSBudWxsOwogICAgdGhpcy50eXBlID0gbnVsbDsKICB9Cn0KY2xhc3MgQ29uZmlnIGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJjb25maWciLCB0cnVlKTsKICAgIHRoaXMuYWNyb2JhdCA9IG51bGw7CiAgICB0aGlzLnByZXNlbnQgPSBudWxsOwogICAgdGhpcy50cmFjZSA9IG51bGw7CiAgICB0aGlzLmFnZW50ID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgfQp9CmNsYXNzIENvbmZvcm1hbmNlIGV4dGVuZHMgT3B0aW9uT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJjb25mb3JtYW5jZSIsIFsiQSIsICJCIl0pOwogIH0KfQpjbGFzcyBDb250ZW50Q29weSBleHRlbmRzIE9wdGlvbjAxIHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJjb250ZW50Q29weSIpOwogIH0KfQpjbGFzcyBDb3BpZXMgZXh0ZW5kcyBJbnRlZ2VyT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJjb3BpZXMiLCAxLCBuID0+IG4gPj0gMSk7CiAgfQp9CmNsYXNzIENyZWF0b3IgZXh0ZW5kcyBTdHJpbmdPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTkZJR19OU19JRCwgImNyZWF0b3IiKTsKICB9Cn0KY2xhc3MgQ3VycmVudFBhZ2UgZXh0ZW5kcyBJbnRlZ2VyT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJjdXJyZW50UGFnZSIsIDAsIG4gPT4gbiA+PSAwKTsKICB9Cn0KY2xhc3MgRGF0YSBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAiZGF0YSIsIHRydWUpOwogICAgdGhpcy5hZGp1c3REYXRhID0gbnVsbDsKICAgIHRoaXMuYXR0cmlidXRlcyA9IG51bGw7CiAgICB0aGlzLmluY3JlbWVudGFsTG9hZCA9IG51bGw7CiAgICB0aGlzLm91dHB1dFhTTCA9IG51bGw7CiAgICB0aGlzLnJhbmdlID0gbnVsbDsKICAgIHRoaXMucmVjb3JkID0gbnVsbDsKICAgIHRoaXMuc3RhcnROb2RlID0gbnVsbDsKICAgIHRoaXMudXJpID0gbnVsbDsKICAgIHRoaXMud2luZG93ID0gbnVsbDsKICAgIHRoaXMueHNsID0gbnVsbDsKICAgIHRoaXMuZXhjbHVkZU5TID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLnRyYW5zZm9ybSA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogIH0KfQpjbGFzcyBEZWJ1ZyBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAiZGVidWciLCB0cnVlKTsKICAgIHRoaXMudXJpID0gbnVsbDsKICB9Cn0KY2xhc3MgRGVmYXVsdFR5cGVmYWNlIGV4dGVuZHMgQ29udGVudE9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAiZGVmYXVsdFR5cGVmYWNlIik7CiAgICB0aGlzLndyaXRpbmdTY3JpcHQgPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy53cml0aW5nU2NyaXB0LCBbIioiLCAiQXJhYmljIiwgIkN5cmlsbGljIiwgIkVhc3RFdXJvcGVhblJvbWFuIiwgIkdyZWVrIiwgIkhlYnJldyIsICJKYXBhbmVzZSIsICJLb3JlYW4iLCAiUm9tYW4iLCAiU2ltcGxpZmllZENoaW5lc2UiLCAiVGhhaSIsICJUcmFkaXRpb25hbENoaW5lc2UiLCAiVmlldG5hbWVzZSJdKTsKICB9Cn0KY2xhc3MgRGVzdGluYXRpb24gZXh0ZW5kcyBPcHRpb25PYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTkZJR19OU19JRCwgImRlc3RpbmF0aW9uIiwgWyJwZGYiLCAicGNsIiwgInBzIiwgIndlYkNsaWVudCIsICJ6cGwiXSk7CiAgfQp9CmNsYXNzIERvY3VtZW50QXNzZW1ibHkgZXh0ZW5kcyBPcHRpb24wMSB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAiZG9jdW1lbnRBc3NlbWJseSIpOwogIH0KfQpjbGFzcyBEcml2ZXIgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTkZJR19OU19JRCwgImRyaXZlciIsIHRydWUpOwogICAgdGhpcy5uYW1lID0gYXR0cmlidXRlcy5uYW1lID8gYXR0cmlidXRlcy5uYW1lLnRyaW0oKSA6ICIiOwogICAgdGhpcy5mb250SW5mbyA9IG51bGw7CiAgICB0aGlzLnhkYyA9IG51bGw7CiAgfQp9CmNsYXNzIER1cGxleE9wdGlvbiBleHRlbmRzIE9wdGlvbk9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAiZHVwbGV4T3B0aW9uIiwgWyJzaW1wbGV4IiwgImR1cGxleEZsaXBMb25nRWRnZSIsICJkdXBsZXhGbGlwU2hvcnRFZGdlIl0pOwogIH0KfQpjbGFzcyBEeW5hbWljUmVuZGVyIGV4dGVuZHMgT3B0aW9uT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJkeW5hbWljUmVuZGVyIiwgWyJmb3JiaWRkZW4iLCAicmVxdWlyZWQiXSk7CiAgfQp9CmNsYXNzIEVtYmVkIGV4dGVuZHMgT3B0aW9uMDEgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTkZJR19OU19JRCwgImVtYmVkIik7CiAgfQp9CmNsYXNzIGNvbmZpZ19FbmNyeXB0IGV4dGVuZHMgT3B0aW9uMDEgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTkZJR19OU19JRCwgImVuY3J5cHQiKTsKICB9Cn0KY2xhc3MgY29uZmlnX0VuY3J5cHRpb24gZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTkZJR19OU19JRCwgImVuY3J5cHRpb24iLCB0cnVlKTsKICAgIHRoaXMuZW5jcnlwdCA9IG51bGw7CiAgICB0aGlzLmVuY3J5cHRpb25MZXZlbCA9IG51bGw7CiAgICB0aGlzLnBlcm1pc3Npb25zID0gbnVsbDsKICB9Cn0KY2xhc3MgRW5jcnlwdGlvbkxldmVsIGV4dGVuZHMgT3B0aW9uT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJlbmNyeXB0aW9uTGV2ZWwiLCBbIjQwYml0IiwgIjEyOGJpdCJdKTsKICB9Cn0KY2xhc3MgRW5mb3JjZSBleHRlbmRzIFN0cmluZ09iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAiZW5mb3JjZSIpOwogIH0KfQpjbGFzcyBFcXVhdGUgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTkZJR19OU19JRCwgImVxdWF0ZSIpOwogICAgdGhpcy5mb3JjZSA9IGdldEludGVnZXIoewogICAgICBkYXRhOiBhdHRyaWJ1dGVzLmZvcmNlLAogICAgICBkZWZhdWx0VmFsdWU6IDEsCiAgICAgIHZhbGlkYXRlOiBuID0+IG4gPT09IDAKICAgIH0pOwogICAgdGhpcy5mcm9tID0gYXR0cmlidXRlcy5mcm9tIHx8ICIiOwogICAgdGhpcy50byA9IGF0dHJpYnV0ZXMudG8gfHwgIiI7CiAgfQp9CmNsYXNzIEVxdWF0ZVJhbmdlIGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJlcXVhdGVSYW5nZSIpOwogICAgdGhpcy5mcm9tID0gYXR0cmlidXRlcy5mcm9tIHx8ICIiOwogICAgdGhpcy50byA9IGF0dHJpYnV0ZXMudG8gfHwgIiI7CiAgICB0aGlzLl91bmljb2RlUmFuZ2UgPSBhdHRyaWJ1dGVzLnVuaWNvZGVSYW5nZSB8fCAiIjsKICB9CiAgZ2V0IHVuaWNvZGVSYW5nZSgpIHsKICAgIGNvbnN0IHJhbmdlcyA9IFtdOwogICAgY29uc3QgdW5pY29kZVJlZ2V4ID0gL1VcKyhbMC05YS1mQS1GXSspLzsKICAgIGNvbnN0IHVuaWNvZGVSYW5nZSA9IHRoaXMuX3VuaWNvZGVSYW5nZTsKICAgIGZvciAobGV0IHJhbmdlIG9mIHVuaWNvZGVSYW5nZS5zcGxpdCgiLCIpLm1hcCh4ID0+IHgudHJpbSgpKS5maWx0ZXIoeCA9PiAhIXgpKSB7CiAgICAgIHJhbmdlID0gcmFuZ2Uuc3BsaXQoIi0iLCAyKS5tYXAoeCA9PiB7CiAgICAgICAgY29uc3QgZm91bmQgPSB4Lm1hdGNoKHVuaWNvZGVSZWdleCk7CiAgICAgICAgaWYgKCFmb3VuZCkgewogICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfQogICAgICAgIHJldHVybiBwYXJzZUludChmb3VuZFsxXSwgMTYpOwogICAgICB9KTsKICAgICAgaWYgKHJhbmdlLmxlbmd0aCA9PT0gMSkgewogICAgICAgIHJhbmdlLnB1c2gocmFuZ2VbMF0pOwogICAgICB9CiAgICAgIHJhbmdlcy5wdXNoKHJhbmdlKTsKICAgIH0KICAgIHJldHVybiBzaGFkb3codGhpcywgInVuaWNvZGVSYW5nZSIsIHJhbmdlcyk7CiAgfQp9CmNsYXNzIEV4Y2x1ZGUgZXh0ZW5kcyBDb250ZW50T2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJleGNsdWRlIik7CiAgfQogIFskZmluYWxpemVdKCkgewogICAgdGhpc1skY29udGVudF0gPSB0aGlzWyRjb250ZW50XS50cmltKCkuc3BsaXQoL1xzKy8pLmZpbHRlcih4ID0+IHggJiYgWyJjYWxjdWxhdGUiLCAiY2xvc2UiLCAiZW50ZXIiLCAiZXhpdCIsICJpbml0aWFsaXplIiwgInJlYWR5IiwgInZhbGlkYXRlIl0uaW5jbHVkZXMoeCkpOwogIH0KfQpjbGFzcyBFeGNsdWRlTlMgZXh0ZW5kcyBTdHJpbmdPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTkZJR19OU19JRCwgImV4Y2x1ZGVOUyIpOwogIH0KfQpjbGFzcyBGbGlwTGFiZWwgZXh0ZW5kcyBPcHRpb25PYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTkZJR19OU19JRCwgImZsaXBMYWJlbCIsIFsidXNlUHJpbnRlclNldHRpbmciLCAib24iLCAib2ZmIl0pOwogIH0KfQpjbGFzcyBjb25maWdfRm9udEluZm8gZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTkZJR19OU19JRCwgImZvbnRJbmZvIiwgdHJ1ZSk7CiAgICB0aGlzLmVtYmVkID0gbnVsbDsKICAgIHRoaXMubWFwID0gbnVsbDsKICAgIHRoaXMuc3Vic2V0QmVsb3cgPSBudWxsOwogICAgdGhpcy5hbHdheXNFbWJlZCA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5kZWZhdWx0VHlwZWZhY2UgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMubmV2ZXJFbWJlZCA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogIH0KfQpjbGFzcyBGb3JtRmllbGRGaWxsaW5nIGV4dGVuZHMgT3B0aW9uMDEgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTkZJR19OU19JRCwgImZvcm1GaWVsZEZpbGxpbmciKTsKICB9Cn0KY2xhc3MgR3JvdXBQYXJlbnQgZXh0ZW5kcyBTdHJpbmdPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTkZJR19OU19JRCwgImdyb3VwUGFyZW50Iik7CiAgfQp9CmNsYXNzIElmRW1wdHkgZXh0ZW5kcyBPcHRpb25PYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTkZJR19OU19JRCwgImlmRW1wdHkiLCBbImRhdGFWYWx1ZSIsICJkYXRhR3JvdXAiLCAiaWdub3JlIiwgInJlbW92ZSJdKTsKICB9Cn0KY2xhc3MgSW5jbHVkZVhEUENvbnRlbnQgZXh0ZW5kcyBTdHJpbmdPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTkZJR19OU19JRCwgImluY2x1ZGVYRFBDb250ZW50Iik7CiAgfQp9CmNsYXNzIEluY3JlbWVudGFsTG9hZCBleHRlbmRzIE9wdGlvbk9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAiaW5jcmVtZW50YWxMb2FkIiwgWyJub25lIiwgImZvcndhcmRPbmx5Il0pOwogIH0KfQpjbGFzcyBJbmNyZW1lbnRhbE1lcmdlIGV4dGVuZHMgT3B0aW9uMDEgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTkZJR19OU19JRCwgImluY3JlbWVudGFsTWVyZ2UiKTsKICB9Cn0KY2xhc3MgSW50ZXJhY3RpdmUgZXh0ZW5kcyBPcHRpb24wMSB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAiaW50ZXJhY3RpdmUiKTsKICB9Cn0KY2xhc3MgSm9nIGV4dGVuZHMgT3B0aW9uT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJqb2ciLCBbInVzZVByaW50ZXJTZXR0aW5nIiwgIm5vbmUiLCAicGFnZVNldCJdKTsKICB9Cn0KY2xhc3MgTGFiZWxQcmludGVyIGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJsYWJlbFByaW50ZXIiLCB0cnVlKTsKICAgIHRoaXMubmFtZSA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLm5hbWUsIFsienBsIiwgImRwbCIsICJpcGwiLCAidGNwbCJdKTsKICAgIHRoaXMuYmF0Y2hPdXRwdXQgPSBudWxsOwogICAgdGhpcy5mbGlwTGFiZWwgPSBudWxsOwogICAgdGhpcy5mb250SW5mbyA9IG51bGw7CiAgICB0aGlzLnhkYyA9IG51bGw7CiAgfQp9CmNsYXNzIExheW91dCBleHRlbmRzIE9wdGlvbk9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAibGF5b3V0IiwgWyJwYWdpbmF0ZSIsICJwYW5lbCJdKTsKICB9Cn0KY2xhc3MgTGV2ZWwgZXh0ZW5kcyBJbnRlZ2VyT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJsZXZlbCIsIDAsIG4gPT4gbiA+IDApOwogIH0KfQpjbGFzcyBMaW5lYXJpemVkIGV4dGVuZHMgT3B0aW9uMDEgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTkZJR19OU19JRCwgImxpbmVhcml6ZWQiKTsKICB9Cn0KY2xhc3MgTG9jYWxlIGV4dGVuZHMgU3RyaW5nT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJsb2NhbGUiKTsKICB9Cn0KY2xhc3MgTG9jYWxlU2V0IGV4dGVuZHMgU3RyaW5nT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJsb2NhbGVTZXQiKTsKICB9Cn0KY2xhc3MgTG9nIGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJsb2ciLCB0cnVlKTsKICAgIHRoaXMubW9kZSA9IG51bGw7CiAgICB0aGlzLnRocmVzaG9sZCA9IG51bGw7CiAgICB0aGlzLnRvID0gbnVsbDsKICAgIHRoaXMudXJpID0gbnVsbDsKICB9Cn0KY2xhc3MgTWFwRWxlbWVudCBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAibWFwIiwgdHJ1ZSk7CiAgICB0aGlzLmVxdWF0ZSA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5lcXVhdGVSYW5nZSA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogIH0KfQpjbGFzcyBNZWRpdW1JbmZvIGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJtZWRpdW1JbmZvIiwgdHJ1ZSk7CiAgICB0aGlzLm1hcCA9IG51bGw7CiAgfQp9CmNsYXNzIGNvbmZpZ19NZXNzYWdlIGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJtZXNzYWdlIiwgdHJ1ZSk7CiAgICB0aGlzLm1zZ0lkID0gbnVsbDsKICAgIHRoaXMuc2V2ZXJpdHkgPSBudWxsOwogIH0KfQpjbGFzcyBNZXNzYWdpbmcgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTkZJR19OU19JRCwgIm1lc3NhZ2luZyIsIHRydWUpOwogICAgdGhpcy5tZXNzYWdlID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgfQp9CmNsYXNzIE1vZGUgZXh0ZW5kcyBPcHRpb25PYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTkZJR19OU19JRCwgIm1vZGUiLCBbImFwcGVuZCIsICJvdmVyd3JpdGUiXSk7CiAgfQp9CmNsYXNzIE1vZGlmeUFubm90cyBleHRlbmRzIE9wdGlvbjAxIHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJtb2RpZnlBbm5vdHMiKTsKICB9Cn0KY2xhc3MgTXNnSWQgZXh0ZW5kcyBJbnRlZ2VyT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJtc2dJZCIsIDEsIG4gPT4gbiA+PSAxKTsKICB9Cn0KY2xhc3MgTmFtZUF0dHIgZXh0ZW5kcyBTdHJpbmdPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTkZJR19OU19JRCwgIm5hbWVBdHRyIik7CiAgfQp9CmNsYXNzIE5ldmVyRW1iZWQgZXh0ZW5kcyBDb250ZW50T2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJuZXZlckVtYmVkIik7CiAgfQp9CmNsYXNzIE51bWJlck9mQ29waWVzIGV4dGVuZHMgSW50ZWdlck9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAibnVtYmVyT2ZDb3BpZXMiLCBudWxsLCBuID0+IG4gPj0gMiAmJiBuIDw9IDUpOwogIH0KfQpjbGFzcyBPcGVuQWN0aW9uIGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJvcGVuQWN0aW9uIiwgdHJ1ZSk7CiAgICB0aGlzLmRlc3RpbmF0aW9uID0gbnVsbDsKICB9Cn0KY2xhc3MgT3V0cHV0IGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJvdXRwdXQiLCB0cnVlKTsKICAgIHRoaXMudG8gPSBudWxsOwogICAgdGhpcy50eXBlID0gbnVsbDsKICAgIHRoaXMudXJpID0gbnVsbDsKICB9Cn0KY2xhc3MgT3V0cHV0QmluIGV4dGVuZHMgU3RyaW5nT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJvdXRwdXRCaW4iKTsKICB9Cn0KY2xhc3MgT3V0cHV0WFNMIGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJvdXRwdXRYU0wiLCB0cnVlKTsKICAgIHRoaXMudXJpID0gbnVsbDsKICB9Cn0KY2xhc3MgT3ZlcnByaW50IGV4dGVuZHMgT3B0aW9uT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJvdmVycHJpbnQiLCBbIm5vbmUiLCAiYm90aCIsICJkcmF3IiwgImZpZWxkIl0pOwogIH0KfQpjbGFzcyBQYWNrZXRzIGV4dGVuZHMgU3RyaW5nT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJwYWNrZXRzIik7CiAgfQogIFskZmluYWxpemVdKCkgewogICAgaWYgKHRoaXNbJGNvbnRlbnRdID09PSAiKiIpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgdGhpc1skY29udGVudF0gPSB0aGlzWyRjb250ZW50XS50cmltKCkuc3BsaXQoL1xzKy8pLmZpbHRlcih4ID0+IFsiY29uZmlnIiwgImRhdGFzZXRzIiwgInRlbXBsYXRlIiwgInhmZGYiLCAieHNsdCJdLmluY2x1ZGVzKHgpKTsKICB9Cn0KY2xhc3MgUGFnZU9mZnNldCBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAicGFnZU9mZnNldCIpOwogICAgdGhpcy54ID0gZ2V0SW50ZWdlcih7CiAgICAgIGRhdGE6IGF0dHJpYnV0ZXMueCwKICAgICAgZGVmYXVsdFZhbHVlOiAidXNlWERDU2V0dGluZyIsCiAgICAgIHZhbGlkYXRlOiBuID0+IHRydWUKICAgIH0pOwogICAgdGhpcy55ID0gZ2V0SW50ZWdlcih7CiAgICAgIGRhdGE6IGF0dHJpYnV0ZXMueSwKICAgICAgZGVmYXVsdFZhbHVlOiAidXNlWERDU2V0dGluZyIsCiAgICAgIHZhbGlkYXRlOiBuID0+IHRydWUKICAgIH0pOwogIH0KfQpjbGFzcyBQYWdlUmFuZ2UgZXh0ZW5kcyBTdHJpbmdPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTkZJR19OU19JRCwgInBhZ2VSYW5nZSIpOwogIH0KICBbJGZpbmFsaXplXSgpIHsKICAgIGNvbnN0IG51bWJlcnMgPSB0aGlzWyRjb250ZW50XS50cmltKCkuc3BsaXQoL1xzKy8pLm1hcCh4ID0+IHBhcnNlSW50KHgsIDEwKSk7CiAgICBjb25zdCByYW5nZXMgPSBbXTsKICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IG51bWJlcnMubGVuZ3RoOyBpIDwgaWk7IGkgKz0gMikgewogICAgICByYW5nZXMucHVzaChudW1iZXJzLnNsaWNlKGksIGkgKyAyKSk7CiAgICB9CiAgICB0aGlzWyRjb250ZW50XSA9IHJhbmdlczsKICB9Cn0KY2xhc3MgUGFnaW5hdGlvbiBleHRlbmRzIE9wdGlvbk9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAicGFnaW5hdGlvbiIsIFsic2ltcGxleCIsICJkdXBsZXhTaG9ydEVkZ2UiLCAiZHVwbGV4TG9uZ0VkZ2UiXSk7CiAgfQp9CmNsYXNzIFBhZ2luYXRpb25PdmVycmlkZSBleHRlbmRzIE9wdGlvbk9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAicGFnaW5hdGlvbk92ZXJyaWRlIiwgWyJub25lIiwgImZvcmNlRHVwbGV4IiwgImZvcmNlRHVwbGV4TG9uZ0VkZ2UiLCAiZm9yY2VEdXBsZXhTaG9ydEVkZ2UiLCAiZm9yY2VTaW1wbGV4Il0pOwogIH0KfQpjbGFzcyBQYXJ0IGV4dGVuZHMgSW50ZWdlck9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAicGFydCIsIDEsIG4gPT4gZmFsc2UpOwogIH0KfQpjbGFzcyBQY2wgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTkZJR19OU19JRCwgInBjbCIsIHRydWUpOwogICAgdGhpcy5uYW1lID0gYXR0cmlidXRlcy5uYW1lIHx8ICIiOwogICAgdGhpcy5iYXRjaE91dHB1dCA9IG51bGw7CiAgICB0aGlzLmZvbnRJbmZvID0gbnVsbDsKICAgIHRoaXMuam9nID0gbnVsbDsKICAgIHRoaXMubWVkaXVtSW5mbyA9IG51bGw7CiAgICB0aGlzLm91dHB1dEJpbiA9IG51bGw7CiAgICB0aGlzLnBhZ2VPZmZzZXQgPSBudWxsOwogICAgdGhpcy5zdGFwbGUgPSBudWxsOwogICAgdGhpcy54ZGMgPSBudWxsOwogIH0KfQpjbGFzcyBQZGYgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTkZJR19OU19JRCwgInBkZiIsIHRydWUpOwogICAgdGhpcy5uYW1lID0gYXR0cmlidXRlcy5uYW1lIHx8ICIiOwogICAgdGhpcy5hZG9iZUV4dGVuc2lvbkxldmVsID0gbnVsbDsKICAgIHRoaXMuYmF0Y2hPdXRwdXQgPSBudWxsOwogICAgdGhpcy5jb21wcmVzc2lvbiA9IG51bGw7CiAgICB0aGlzLmNyZWF0b3IgPSBudWxsOwogICAgdGhpcy5lbmNyeXB0aW9uID0gbnVsbDsKICAgIHRoaXMuZm9udEluZm8gPSBudWxsOwogICAgdGhpcy5pbnRlcmFjdGl2ZSA9IG51bGw7CiAgICB0aGlzLmxpbmVhcml6ZWQgPSBudWxsOwogICAgdGhpcy5vcGVuQWN0aW9uID0gbnVsbDsKICAgIHRoaXMucGRmYSA9IG51bGw7CiAgICB0aGlzLnByb2R1Y2VyID0gbnVsbDsKICAgIHRoaXMucmVuZGVyUG9saWN5ID0gbnVsbDsKICAgIHRoaXMuc2NyaXB0TW9kZWwgPSBudWxsOwogICAgdGhpcy5zaWxlbnRQcmludCA9IG51bGw7CiAgICB0aGlzLnN1Ym1pdEZvcm1hdCA9IG51bGw7CiAgICB0aGlzLnRhZ2dlZCA9IG51bGw7CiAgICB0aGlzLnZlcnNpb24gPSBudWxsOwogICAgdGhpcy52aWV3ZXJQcmVmZXJlbmNlcyA9IG51bGw7CiAgICB0aGlzLnhkYyA9IG51bGw7CiAgfQp9CmNsYXNzIFBkZmEgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTkZJR19OU19JRCwgInBkZmEiLCB0cnVlKTsKICAgIHRoaXMuYW1kID0gbnVsbDsKICAgIHRoaXMuY29uZm9ybWFuY2UgPSBudWxsOwogICAgdGhpcy5pbmNsdWRlWERQQ29udGVudCA9IG51bGw7CiAgICB0aGlzLnBhcnQgPSBudWxsOwogIH0KfQpjbGFzcyBQZXJtaXNzaW9ucyBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAicGVybWlzc2lvbnMiLCB0cnVlKTsKICAgIHRoaXMuYWNjZXNzaWJsZUNvbnRlbnQgPSBudWxsOwogICAgdGhpcy5jaGFuZ2UgPSBudWxsOwogICAgdGhpcy5jb250ZW50Q29weSA9IG51bGw7CiAgICB0aGlzLmRvY3VtZW50QXNzZW1ibHkgPSBudWxsOwogICAgdGhpcy5mb3JtRmllbGRGaWxsaW5nID0gbnVsbDsKICAgIHRoaXMubW9kaWZ5QW5ub3RzID0gbnVsbDsKICAgIHRoaXMucGxhaW50ZXh0TWV0YWRhdGEgPSBudWxsOwogICAgdGhpcy5wcmludCA9IG51bGw7CiAgICB0aGlzLnByaW50SGlnaFF1YWxpdHkgPSBudWxsOwogIH0KfQpjbGFzcyBQaWNrVHJheUJ5UERGU2l6ZSBleHRlbmRzIE9wdGlvbjAxIHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJwaWNrVHJheUJ5UERGU2l6ZSIpOwogIH0KfQpjbGFzcyBjb25maWdfUGljdHVyZSBleHRlbmRzIFN0cmluZ09iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAicGljdHVyZSIpOwogIH0KfQpjbGFzcyBQbGFpbnRleHRNZXRhZGF0YSBleHRlbmRzIE9wdGlvbjAxIHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJwbGFpbnRleHRNZXRhZGF0YSIpOwogIH0KfQpjbGFzcyBQcmVzZW5jZSBleHRlbmRzIE9wdGlvbk9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAicHJlc2VuY2UiLCBbInByZXNlcnZlIiwgImRpc3NvbHZlIiwgImRpc3NvbHZlU3RydWN0dXJlIiwgImlnbm9yZSIsICJyZW1vdmUiXSk7CiAgfQp9CmNsYXNzIFByZXNlbnQgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTkZJR19OU19JRCwgInByZXNlbnQiLCB0cnVlKTsKICAgIHRoaXMuYmVoYXZpb3JPdmVycmlkZSA9IG51bGw7CiAgICB0aGlzLmNhY2hlID0gbnVsbDsKICAgIHRoaXMuY29tbW9uID0gbnVsbDsKICAgIHRoaXMuY29waWVzID0gbnVsbDsKICAgIHRoaXMuZGVzdGluYXRpb24gPSBudWxsOwogICAgdGhpcy5pbmNyZW1lbnRhbE1lcmdlID0gbnVsbDsKICAgIHRoaXMubGF5b3V0ID0gbnVsbDsKICAgIHRoaXMub3V0cHV0ID0gbnVsbDsKICAgIHRoaXMub3ZlcnByaW50ID0gbnVsbDsKICAgIHRoaXMucGFnaW5hdGlvbiA9IG51bGw7CiAgICB0aGlzLnBhZ2luYXRpb25PdmVycmlkZSA9IG51bGw7CiAgICB0aGlzLnNjcmlwdCA9IG51bGw7CiAgICB0aGlzLnZhbGlkYXRlID0gbnVsbDsKICAgIHRoaXMueGRwID0gbnVsbDsKICAgIHRoaXMuZHJpdmVyID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLmxhYmVsUHJpbnRlciA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy5wY2wgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMucGRmID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLnBzID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgICB0aGlzLnN1Ym1pdFVybCA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy53ZWJDbGllbnQgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMuenBsID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgfQp9CmNsYXNzIFByaW50IGV4dGVuZHMgT3B0aW9uMDEgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTkZJR19OU19JRCwgInByaW50Iik7CiAgfQp9CmNsYXNzIFByaW50SGlnaFF1YWxpdHkgZXh0ZW5kcyBPcHRpb24wMSB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAicHJpbnRIaWdoUXVhbGl0eSIpOwogIH0KfQpjbGFzcyBQcmludFNjYWxpbmcgZXh0ZW5kcyBPcHRpb25PYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTkZJR19OU19JRCwgInByaW50U2NhbGluZyIsIFsiYXBwZGVmYXVsdCIsICJub1NjYWxpbmciXSk7CiAgfQp9CmNsYXNzIFByaW50ZXJOYW1lIGV4dGVuZHMgU3RyaW5nT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJwcmludGVyTmFtZSIpOwogIH0KfQpjbGFzcyBQcm9kdWNlciBleHRlbmRzIFN0cmluZ09iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAicHJvZHVjZXIiKTsKICB9Cn0KY2xhc3MgUHMgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTkZJR19OU19JRCwgInBzIiwgdHJ1ZSk7CiAgICB0aGlzLm5hbWUgPSBhdHRyaWJ1dGVzLm5hbWUgfHwgIiI7CiAgICB0aGlzLmJhdGNoT3V0cHV0ID0gbnVsbDsKICAgIHRoaXMuZm9udEluZm8gPSBudWxsOwogICAgdGhpcy5qb2cgPSBudWxsOwogICAgdGhpcy5tZWRpdW1JbmZvID0gbnVsbDsKICAgIHRoaXMub3V0cHV0QmluID0gbnVsbDsKICAgIHRoaXMuc3RhcGxlID0gbnVsbDsKICAgIHRoaXMueGRjID0gbnVsbDsKICB9Cn0KY2xhc3MgUmFuZ2UgZXh0ZW5kcyBDb250ZW50T2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJyYW5nZSIpOwogIH0KICBbJGZpbmFsaXplXSgpIHsKICAgIHRoaXNbJGNvbnRlbnRdID0gdGhpc1skY29udGVudF0uc3BsaXQoIiwiLCAyKS5tYXAocmFuZ2UgPT4gcmFuZ2Uuc3BsaXQoIi0iKS5tYXAoeCA9PiBwYXJzZUludCh4LnRyaW0oKSwgMTApKSkuZmlsdGVyKHJhbmdlID0+IHJhbmdlLmV2ZXJ5KHggPT4gIWlzTmFOKHgpKSkubWFwKHJhbmdlID0+IHsKICAgICAgaWYgKHJhbmdlLmxlbmd0aCA9PT0gMSkgewogICAgICAgIHJhbmdlLnB1c2gocmFuZ2VbMF0pOwogICAgICB9CiAgICAgIHJldHVybiByYW5nZTsKICAgIH0pOwogIH0KfQpjbGFzcyBSZWNvcmQgZXh0ZW5kcyBDb250ZW50T2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJyZWNvcmQiKTsKICB9CiAgWyRmaW5hbGl6ZV0oKSB7CiAgICB0aGlzWyRjb250ZW50XSA9IHRoaXNbJGNvbnRlbnRdLnRyaW0oKTsKICAgIGNvbnN0IG4gPSBwYXJzZUludCh0aGlzWyRjb250ZW50XSwgMTApOwogICAgaWYgKCFpc05hTihuKSAmJiBuID49IDApIHsKICAgICAgdGhpc1skY29udGVudF0gPSBuOwogICAgfQogIH0KfQpjbGFzcyBSZWxldmFudCBleHRlbmRzIENvbnRlbnRPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTkZJR19OU19JRCwgInJlbGV2YW50Iik7CiAgfQogIFskZmluYWxpemVdKCkgewogICAgdGhpc1skY29udGVudF0gPSB0aGlzWyRjb250ZW50XS50cmltKCkuc3BsaXQoL1xzKy8pOwogIH0KfQpjbGFzcyBSZW5hbWUgZXh0ZW5kcyBDb250ZW50T2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJyZW5hbWUiKTsKICB9CiAgWyRmaW5hbGl6ZV0oKSB7CiAgICB0aGlzWyRjb250ZW50XSA9IHRoaXNbJGNvbnRlbnRdLnRyaW0oKTsKICAgIGlmICh0aGlzWyRjb250ZW50XS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoInhtbCIpIHx8IG5ldyBSZWdFeHAoIltcXHB7TH1fXVtcXHB7TH1cXGQuX1xccHtNfS1dKiIsICJ1IikudGVzdCh0aGlzWyRjb250ZW50XSkpIHsKICAgICAgd2FybigiWEZBIC0gUmVuYW1lOiBpbnZhbGlkIFhGQSBuYW1lIik7CiAgICB9CiAgfQp9CmNsYXNzIFJlbmRlclBvbGljeSBleHRlbmRzIE9wdGlvbk9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAicmVuZGVyUG9saWN5IiwgWyJzZXJ2ZXIiLCAiY2xpZW50Il0pOwogIH0KfQpjbGFzcyBSdW5TY3JpcHRzIGV4dGVuZHMgT3B0aW9uT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJydW5TY3JpcHRzIiwgWyJib3RoIiwgImNsaWVudCIsICJub25lIiwgInNlcnZlciJdKTsKICB9Cn0KY2xhc3MgY29uZmlnX1NjcmlwdCBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAic2NyaXB0IiwgdHJ1ZSk7CiAgICB0aGlzLmN1cnJlbnRQYWdlID0gbnVsbDsKICAgIHRoaXMuZXhjbHVkZSA9IG51bGw7CiAgICB0aGlzLnJ1blNjcmlwdHMgPSBudWxsOwogIH0KfQpjbGFzcyBTY3JpcHRNb2RlbCBleHRlbmRzIE9wdGlvbk9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAic2NyaXB0TW9kZWwiLCBbIlhGQSIsICJub25lIl0pOwogIH0KfQpjbGFzcyBTZXZlcml0eSBleHRlbmRzIE9wdGlvbk9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAic2V2ZXJpdHkiLCBbImlnbm9yZSIsICJlcnJvciIsICJpbmZvcm1hdGlvbiIsICJ0cmFjZSIsICJ3YXJuaW5nIl0pOwogIH0KfQpjbGFzcyBTaWxlbnRQcmludCBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAic2lsZW50UHJpbnQiLCB0cnVlKTsKICAgIHRoaXMuYWRkU2lsZW50UHJpbnQgPSBudWxsOwogICAgdGhpcy5wcmludGVyTmFtZSA9IG51bGw7CiAgfQp9CmNsYXNzIFN0YXBsZSBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAic3RhcGxlIik7CiAgICB0aGlzLm1vZGUgPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy5tb2RlLCBbInVzZVByaW50ZXJTZXR0aW5nIiwgIm9uIiwgIm9mZiJdKTsKICB9Cn0KY2xhc3MgU3RhcnROb2RlIGV4dGVuZHMgU3RyaW5nT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJzdGFydE5vZGUiKTsKICB9Cn0KY2xhc3MgU3RhcnRQYWdlIGV4dGVuZHMgSW50ZWdlck9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAic3RhcnRQYWdlIiwgMCwgbiA9PiB0cnVlKTsKICB9Cn0KY2xhc3MgU3VibWl0Rm9ybWF0IGV4dGVuZHMgT3B0aW9uT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJzdWJtaXRGb3JtYXQiLCBbImh0bWwiLCAiZGVsZWdhdGUiLCAiZmRmIiwgInhtbCIsICJwZGYiXSk7CiAgfQp9CmNsYXNzIFN1Ym1pdFVybCBleHRlbmRzIFN0cmluZ09iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAic3VibWl0VXJsIik7CiAgfQp9CmNsYXNzIFN1YnNldEJlbG93IGV4dGVuZHMgSW50ZWdlck9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAic3Vic2V0QmVsb3ciLCAxMDAsIG4gPT4gbiA+PSAwICYmIG4gPD0gMTAwKTsKICB9Cn0KY2xhc3MgU3VwcHJlc3NCYW5uZXIgZXh0ZW5kcyBPcHRpb24wMSB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAic3VwcHJlc3NCYW5uZXIiKTsKICB9Cn0KY2xhc3MgVGFnZ2VkIGV4dGVuZHMgT3B0aW9uMDEgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTkZJR19OU19JRCwgInRhZ2dlZCIpOwogIH0KfQpjbGFzcyBjb25maWdfVGVtcGxhdGUgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTkZJR19OU19JRCwgInRlbXBsYXRlIiwgdHJ1ZSk7CiAgICB0aGlzLmJhc2UgPSBudWxsOwogICAgdGhpcy5yZWxldmFudCA9IG51bGw7CiAgICB0aGlzLnN0YXJ0UGFnZSA9IG51bGw7CiAgICB0aGlzLnVyaSA9IG51bGw7CiAgICB0aGlzLnhzbCA9IG51bGw7CiAgfQp9CmNsYXNzIFRocmVzaG9sZCBleHRlbmRzIE9wdGlvbk9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAidGhyZXNob2xkIiwgWyJ0cmFjZSIsICJlcnJvciIsICJpbmZvcm1hdGlvbiIsICJ3YXJuaW5nIl0pOwogIH0KfQpjbGFzcyBUbyBleHRlbmRzIE9wdGlvbk9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAidG8iLCBbIm51bGwiLCAibWVtb3J5IiwgInN0ZGVyciIsICJzdGRvdXQiLCAic3lzdGVtIiwgInVyaSJdKTsKICB9Cn0KY2xhc3MgVGVtcGxhdGVDYWNoZSBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAidGVtcGxhdGVDYWNoZSIpOwogICAgdGhpcy5tYXhFbnRyaWVzID0gZ2V0SW50ZWdlcih7CiAgICAgIGRhdGE6IGF0dHJpYnV0ZXMubWF4RW50cmllcywKICAgICAgZGVmYXVsdFZhbHVlOiA1LAogICAgICB2YWxpZGF0ZTogbiA9PiBuID49IDAKICAgIH0pOwogIH0KfQpjbGFzcyBUcmFjZSBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAidHJhY2UiLCB0cnVlKTsKICAgIHRoaXMuYXJlYSA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogIH0KfQpjbGFzcyBUcmFuc2Zvcm0gZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTkZJR19OU19JRCwgInRyYW5zZm9ybSIsIHRydWUpOwogICAgdGhpcy5ncm91cFBhcmVudCA9IG51bGw7CiAgICB0aGlzLmlmRW1wdHkgPSBudWxsOwogICAgdGhpcy5uYW1lQXR0ciA9IG51bGw7CiAgICB0aGlzLnBpY3R1cmUgPSBudWxsOwogICAgdGhpcy5wcmVzZW5jZSA9IG51bGw7CiAgICB0aGlzLnJlbmFtZSA9IG51bGw7CiAgICB0aGlzLndoaXRlc3BhY2UgPSBudWxsOwogIH0KfQpjbGFzcyBUeXBlIGV4dGVuZHMgT3B0aW9uT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJ0eXBlIiwgWyJub25lIiwgImFzY2lpODUiLCAiYXNjaWlIZXgiLCAiY2NpdHRmYXgiLCAiZmxhdGUiLCAibHp3IiwgInJ1bkxlbmd0aCIsICJuYXRpdmUiLCAieGRwIiwgIm1lcmdlZFhEUCJdKTsKICB9Cn0KY2xhc3MgVXJpIGV4dGVuZHMgU3RyaW5nT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJ1cmkiKTsKICB9Cn0KY2xhc3MgY29uZmlnX1ZhbGlkYXRlIGV4dGVuZHMgT3B0aW9uT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJ2YWxpZGF0ZSIsIFsicHJlU3VibWl0IiwgInByZVByaW50IiwgInByZUV4ZWN1dGUiLCAicHJlU2F2ZSJdKTsKICB9Cn0KY2xhc3MgVmFsaWRhdGVBcHByb3ZhbFNpZ25hdHVyZXMgZXh0ZW5kcyBDb250ZW50T2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJ2YWxpZGF0ZUFwcHJvdmFsU2lnbmF0dXJlcyIpOwogIH0KICBbJGZpbmFsaXplXSgpIHsKICAgIHRoaXNbJGNvbnRlbnRdID0gdGhpc1skY29udGVudF0udHJpbSgpLnNwbGl0KC9ccysvKS5maWx0ZXIoeCA9PiBbImRvY1JlYWR5IiwgInBvc3RTaWduIl0uaW5jbHVkZXMoeCkpOwogIH0KfQpjbGFzcyBWYWxpZGF0aW9uTWVzc2FnaW5nIGV4dGVuZHMgT3B0aW9uT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJ2YWxpZGF0aW9uTWVzc2FnaW5nIiwgWyJhbGxNZXNzYWdlc0luZGl2aWR1YWxseSIsICJhbGxNZXNzYWdlc1RvZ2V0aGVyIiwgImZpcnN0TWVzc2FnZU9ubHkiLCAibm9NZXNzYWdlcyJdKTsKICB9Cn0KY2xhc3MgVmVyc2lvbiBleHRlbmRzIE9wdGlvbk9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAidmVyc2lvbiIsIFsiMS43IiwgIjEuNiIsICIxLjUiLCAiMS40IiwgIjEuMyIsICIxLjIiXSk7CiAgfQp9CmNsYXNzIFZlcnNpb25Db250cm9sIGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJWZXJzaW9uQ29udHJvbCIpOwogICAgdGhpcy5vdXRwdXRCZWxvdyA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLm91dHB1dEJlbG93LCBbIndhcm4iLCAiZXJyb3IiLCAidXBkYXRlIl0pOwogICAgdGhpcy5zb3VyY2VBYm92ZSA9IGdldFN0cmluZ09wdGlvbihhdHRyaWJ1dGVzLnNvdXJjZUFib3ZlLCBbIndhcm4iLCAiZXJyb3IiXSk7CiAgICB0aGlzLnNvdXJjZUJlbG93ID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMuc291cmNlQmVsb3csIFsidXBkYXRlIiwgIm1haW50YWluIl0pOwogIH0KfQpjbGFzcyBWaWV3ZXJQcmVmZXJlbmNlcyBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAidmlld2VyUHJlZmVyZW5jZXMiLCB0cnVlKTsKICAgIHRoaXMuQURCRV9KU0NvbnNvbGUgPSBudWxsOwogICAgdGhpcy5BREJFX0pTRGVidWdnZXIgPSBudWxsOwogICAgdGhpcy5hZGRWaWV3ZXJQcmVmZXJlbmNlcyA9IG51bGw7CiAgICB0aGlzLmR1cGxleE9wdGlvbiA9IG51bGw7CiAgICB0aGlzLmVuZm9yY2UgPSBudWxsOwogICAgdGhpcy5udW1iZXJPZkNvcGllcyA9IG51bGw7CiAgICB0aGlzLnBhZ2VSYW5nZSA9IG51bGw7CiAgICB0aGlzLnBpY2tUcmF5QnlQREZTaXplID0gbnVsbDsKICAgIHRoaXMucHJpbnRTY2FsaW5nID0gbnVsbDsKICB9Cn0KY2xhc3MgV2ViQ2xpZW50IGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJ3ZWJDbGllbnQiLCB0cnVlKTsKICAgIHRoaXMubmFtZSA9IGF0dHJpYnV0ZXMubmFtZSA/IGF0dHJpYnV0ZXMubmFtZS50cmltKCkgOiAiIjsKICAgIHRoaXMuZm9udEluZm8gPSBudWxsOwogICAgdGhpcy54ZGMgPSBudWxsOwogIH0KfQpjbGFzcyBXaGl0ZXNwYWNlIGV4dGVuZHMgT3B0aW9uT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05GSUdfTlNfSUQsICJ3aGl0ZXNwYWNlIiwgWyJwcmVzZXJ2ZSIsICJsdHJpbSIsICJub3JtYWxpemUiLCAicnRyaW0iLCAidHJpbSJdKTsKICB9Cn0KY2xhc3MgV2luZG93IGV4dGVuZHMgQ29udGVudE9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAid2luZG93Iik7CiAgfQogIFskZmluYWxpemVdKCkgewogICAgY29uc3QgcGFpciA9IHRoaXNbJGNvbnRlbnRdLnNwbGl0KCIsIiwgMikubWFwKHggPT4gcGFyc2VJbnQoeC50cmltKCksIDEwKSk7CiAgICBpZiAocGFpci5zb21lKHggPT4gaXNOYU4oeCkpKSB7CiAgICAgIHRoaXNbJGNvbnRlbnRdID0gWzAsIDBdOwogICAgICByZXR1cm47CiAgICB9CiAgICBpZiAocGFpci5sZW5ndGggPT09IDEpIHsKICAgICAgcGFpci5wdXNoKHBhaXJbMF0pOwogICAgfQogICAgdGhpc1skY29udGVudF0gPSBwYWlyOwogIH0KfQpjbGFzcyBYZGMgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTkZJR19OU19JRCwgInhkYyIsIHRydWUpOwogICAgdGhpcy51cmkgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMueHNsID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgfQp9CmNsYXNzIFhkcCBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAieGRwIiwgdHJ1ZSk7CiAgICB0aGlzLnBhY2tldHMgPSBudWxsOwogIH0KfQpjbGFzcyBYc2wgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTkZJR19OU19JRCwgInhzbCIsIHRydWUpOwogICAgdGhpcy5kZWJ1ZyA9IG51bGw7CiAgICB0aGlzLnVyaSA9IG51bGw7CiAgfQp9CmNsYXNzIFpwbCBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09ORklHX05TX0lELCAienBsIiwgdHJ1ZSk7CiAgICB0aGlzLm5hbWUgPSBhdHRyaWJ1dGVzLm5hbWUgPyBhdHRyaWJ1dGVzLm5hbWUudHJpbSgpIDogIiI7CiAgICB0aGlzLmJhdGNoT3V0cHV0ID0gbnVsbDsKICAgIHRoaXMuZmxpcExhYmVsID0gbnVsbDsKICAgIHRoaXMuZm9udEluZm8gPSBudWxsOwogICAgdGhpcy54ZGMgPSBudWxsOwogIH0KfQpjbGFzcyBDb25maWdOYW1lc3BhY2UgewogIHN0YXRpYyBbJGJ1aWxkWEZBT2JqZWN0XShuYW1lLCBhdHRyaWJ1dGVzKSB7CiAgICBpZiAoQ29uZmlnTmFtZXNwYWNlLmhhc093blByb3BlcnR5KG5hbWUpKSB7CiAgICAgIHJldHVybiBDb25maWdOYW1lc3BhY2VbbmFtZV0oYXR0cmlidXRlcyk7CiAgICB9CiAgICByZXR1cm4gdW5kZWZpbmVkOwogIH0KICBzdGF0aWMgYWNyb2JhdChhdHRycykgewogICAgcmV0dXJuIG5ldyBBY3JvYmF0KGF0dHJzKTsKICB9CiAgc3RhdGljIGFjcm9iYXQ3KGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IEFjcm9iYXQ3KGF0dHJzKTsKICB9CiAgc3RhdGljIEFEQkVfSlNDb25zb2xlKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IEFEQkVfSlNDb25zb2xlKGF0dHJzKTsKICB9CiAgc3RhdGljIEFEQkVfSlNEZWJ1Z2dlcihhdHRycykgewogICAgcmV0dXJuIG5ldyBBREJFX0pTRGVidWdnZXIoYXR0cnMpOwogIH0KICBzdGF0aWMgYWRkU2lsZW50UHJpbnQoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgQWRkU2lsZW50UHJpbnQoYXR0cnMpOwogIH0KICBzdGF0aWMgYWRkVmlld2VyUHJlZmVyZW5jZXMoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgQWRkVmlld2VyUHJlZmVyZW5jZXMoYXR0cnMpOwogIH0KICBzdGF0aWMgYWRqdXN0RGF0YShhdHRycykgewogICAgcmV0dXJuIG5ldyBBZGp1c3REYXRhKGF0dHJzKTsKICB9CiAgc3RhdGljIGFkb2JlRXh0ZW5zaW9uTGV2ZWwoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgQWRvYmVFeHRlbnNpb25MZXZlbChhdHRycyk7CiAgfQogIHN0YXRpYyBhZ2VudChhdHRycykgewogICAgcmV0dXJuIG5ldyBBZ2VudChhdHRycyk7CiAgfQogIHN0YXRpYyBhbHdheXNFbWJlZChhdHRycykgewogICAgcmV0dXJuIG5ldyBBbHdheXNFbWJlZChhdHRycyk7CiAgfQogIHN0YXRpYyBhbWQoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgQW1kKGF0dHJzKTsKICB9CiAgc3RhdGljIGFyZWEoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgY29uZmlnX0FyZWEoYXR0cnMpOwogIH0KICBzdGF0aWMgYXR0cmlidXRlcyhhdHRycykgewogICAgcmV0dXJuIG5ldyBBdHRyaWJ1dGVzKGF0dHJzKTsKICB9CiAgc3RhdGljIGF1dG9TYXZlKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IEF1dG9TYXZlKGF0dHJzKTsKICB9CiAgc3RhdGljIGJhc2UoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgQmFzZShhdHRycyk7CiAgfQogIHN0YXRpYyBiYXRjaE91dHB1dChhdHRycykgewogICAgcmV0dXJuIG5ldyBCYXRjaE91dHB1dChhdHRycyk7CiAgfQogIHN0YXRpYyBiZWhhdmlvck92ZXJyaWRlKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IEJlaGF2aW9yT3ZlcnJpZGUoYXR0cnMpOwogIH0KICBzdGF0aWMgY2FjaGUoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgQ2FjaGUoYXR0cnMpOwogIH0KICBzdGF0aWMgY2hhbmdlKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IENoYW5nZShhdHRycyk7CiAgfQogIHN0YXRpYyBjb21tb24oYXR0cnMpIHsKICAgIHJldHVybiBuZXcgQ29tbW9uKGF0dHJzKTsKICB9CiAgc3RhdGljIGNvbXByZXNzKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IENvbXByZXNzKGF0dHJzKTsKICB9CiAgc3RhdGljIGNvbXByZXNzTG9naWNhbFN0cnVjdHVyZShhdHRycykgewogICAgcmV0dXJuIG5ldyBDb21wcmVzc0xvZ2ljYWxTdHJ1Y3R1cmUoYXR0cnMpOwogIH0KICBzdGF0aWMgY29tcHJlc3NPYmplY3RTdHJlYW0oYXR0cnMpIHsKICAgIHJldHVybiBuZXcgQ29tcHJlc3NPYmplY3RTdHJlYW0oYXR0cnMpOwogIH0KICBzdGF0aWMgY29tcHJlc3Npb24oYXR0cnMpIHsKICAgIHJldHVybiBuZXcgQ29tcHJlc3Npb24oYXR0cnMpOwogIH0KICBzdGF0aWMgY29uZmlnKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IENvbmZpZyhhdHRycyk7CiAgfQogIHN0YXRpYyBjb25mb3JtYW5jZShhdHRycykgewogICAgcmV0dXJuIG5ldyBDb25mb3JtYW5jZShhdHRycyk7CiAgfQogIHN0YXRpYyBjb250ZW50Q29weShhdHRycykgewogICAgcmV0dXJuIG5ldyBDb250ZW50Q29weShhdHRycyk7CiAgfQogIHN0YXRpYyBjb3BpZXMoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgQ29waWVzKGF0dHJzKTsKICB9CiAgc3RhdGljIGNyZWF0b3IoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgQ3JlYXRvcihhdHRycyk7CiAgfQogIHN0YXRpYyBjdXJyZW50UGFnZShhdHRycykgewogICAgcmV0dXJuIG5ldyBDdXJyZW50UGFnZShhdHRycyk7CiAgfQogIHN0YXRpYyBkYXRhKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IERhdGEoYXR0cnMpOwogIH0KICBzdGF0aWMgZGVidWcoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgRGVidWcoYXR0cnMpOwogIH0KICBzdGF0aWMgZGVmYXVsdFR5cGVmYWNlKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IERlZmF1bHRUeXBlZmFjZShhdHRycyk7CiAgfQogIHN0YXRpYyBkZXN0aW5hdGlvbihhdHRycykgewogICAgcmV0dXJuIG5ldyBEZXN0aW5hdGlvbihhdHRycyk7CiAgfQogIHN0YXRpYyBkb2N1bWVudEFzc2VtYmx5KGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IERvY3VtZW50QXNzZW1ibHkoYXR0cnMpOwogIH0KICBzdGF0aWMgZHJpdmVyKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IERyaXZlcihhdHRycyk7CiAgfQogIHN0YXRpYyBkdXBsZXhPcHRpb24oYXR0cnMpIHsKICAgIHJldHVybiBuZXcgRHVwbGV4T3B0aW9uKGF0dHJzKTsKICB9CiAgc3RhdGljIGR5bmFtaWNSZW5kZXIoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgRHluYW1pY1JlbmRlcihhdHRycyk7CiAgfQogIHN0YXRpYyBlbWJlZChhdHRycykgewogICAgcmV0dXJuIG5ldyBFbWJlZChhdHRycyk7CiAgfQogIHN0YXRpYyBlbmNyeXB0KGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IGNvbmZpZ19FbmNyeXB0KGF0dHJzKTsKICB9CiAgc3RhdGljIGVuY3J5cHRpb24oYXR0cnMpIHsKICAgIHJldHVybiBuZXcgY29uZmlnX0VuY3J5cHRpb24oYXR0cnMpOwogIH0KICBzdGF0aWMgZW5jcnlwdGlvbkxldmVsKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IEVuY3J5cHRpb25MZXZlbChhdHRycyk7CiAgfQogIHN0YXRpYyBlbmZvcmNlKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IEVuZm9yY2UoYXR0cnMpOwogIH0KICBzdGF0aWMgZXF1YXRlKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IEVxdWF0ZShhdHRycyk7CiAgfQogIHN0YXRpYyBlcXVhdGVSYW5nZShhdHRycykgewogICAgcmV0dXJuIG5ldyBFcXVhdGVSYW5nZShhdHRycyk7CiAgfQogIHN0YXRpYyBleGNsdWRlKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IEV4Y2x1ZGUoYXR0cnMpOwogIH0KICBzdGF0aWMgZXhjbHVkZU5TKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IEV4Y2x1ZGVOUyhhdHRycyk7CiAgfQogIHN0YXRpYyBmbGlwTGFiZWwoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgRmxpcExhYmVsKGF0dHJzKTsKICB9CiAgc3RhdGljIGZvbnRJbmZvKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IGNvbmZpZ19Gb250SW5mbyhhdHRycyk7CiAgfQogIHN0YXRpYyBmb3JtRmllbGRGaWxsaW5nKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IEZvcm1GaWVsZEZpbGxpbmcoYXR0cnMpOwogIH0KICBzdGF0aWMgZ3JvdXBQYXJlbnQoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgR3JvdXBQYXJlbnQoYXR0cnMpOwogIH0KICBzdGF0aWMgaWZFbXB0eShhdHRycykgewogICAgcmV0dXJuIG5ldyBJZkVtcHR5KGF0dHJzKTsKICB9CiAgc3RhdGljIGluY2x1ZGVYRFBDb250ZW50KGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IEluY2x1ZGVYRFBDb250ZW50KGF0dHJzKTsKICB9CiAgc3RhdGljIGluY3JlbWVudGFsTG9hZChhdHRycykgewogICAgcmV0dXJuIG5ldyBJbmNyZW1lbnRhbExvYWQoYXR0cnMpOwogIH0KICBzdGF0aWMgaW5jcmVtZW50YWxNZXJnZShhdHRycykgewogICAgcmV0dXJuIG5ldyBJbmNyZW1lbnRhbE1lcmdlKGF0dHJzKTsKICB9CiAgc3RhdGljIGludGVyYWN0aXZlKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IEludGVyYWN0aXZlKGF0dHJzKTsKICB9CiAgc3RhdGljIGpvZyhhdHRycykgewogICAgcmV0dXJuIG5ldyBKb2coYXR0cnMpOwogIH0KICBzdGF0aWMgbGFiZWxQcmludGVyKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IExhYmVsUHJpbnRlcihhdHRycyk7CiAgfQogIHN0YXRpYyBsYXlvdXQoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgTGF5b3V0KGF0dHJzKTsKICB9CiAgc3RhdGljIGxldmVsKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IExldmVsKGF0dHJzKTsKICB9CiAgc3RhdGljIGxpbmVhcml6ZWQoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgTGluZWFyaXplZChhdHRycyk7CiAgfQogIHN0YXRpYyBsb2NhbGUoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgTG9jYWxlKGF0dHJzKTsKICB9CiAgc3RhdGljIGxvY2FsZVNldChhdHRycykgewogICAgcmV0dXJuIG5ldyBMb2NhbGVTZXQoYXR0cnMpOwogIH0KICBzdGF0aWMgbG9nKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IExvZyhhdHRycyk7CiAgfQogIHN0YXRpYyBtYXAoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgTWFwRWxlbWVudChhdHRycyk7CiAgfQogIHN0YXRpYyBtZWRpdW1JbmZvKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IE1lZGl1bUluZm8oYXR0cnMpOwogIH0KICBzdGF0aWMgbWVzc2FnZShhdHRycykgewogICAgcmV0dXJuIG5ldyBjb25maWdfTWVzc2FnZShhdHRycyk7CiAgfQogIHN0YXRpYyBtZXNzYWdpbmcoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgTWVzc2FnaW5nKGF0dHJzKTsKICB9CiAgc3RhdGljIG1vZGUoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgTW9kZShhdHRycyk7CiAgfQogIHN0YXRpYyBtb2RpZnlBbm5vdHMoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgTW9kaWZ5QW5ub3RzKGF0dHJzKTsKICB9CiAgc3RhdGljIG1zZ0lkKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IE1zZ0lkKGF0dHJzKTsKICB9CiAgc3RhdGljIG5hbWVBdHRyKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IE5hbWVBdHRyKGF0dHJzKTsKICB9CiAgc3RhdGljIG5ldmVyRW1iZWQoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgTmV2ZXJFbWJlZChhdHRycyk7CiAgfQogIHN0YXRpYyBudW1iZXJPZkNvcGllcyhhdHRycykgewogICAgcmV0dXJuIG5ldyBOdW1iZXJPZkNvcGllcyhhdHRycyk7CiAgfQogIHN0YXRpYyBvcGVuQWN0aW9uKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IE9wZW5BY3Rpb24oYXR0cnMpOwogIH0KICBzdGF0aWMgb3V0cHV0KGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IE91dHB1dChhdHRycyk7CiAgfQogIHN0YXRpYyBvdXRwdXRCaW4oYXR0cnMpIHsKICAgIHJldHVybiBuZXcgT3V0cHV0QmluKGF0dHJzKTsKICB9CiAgc3RhdGljIG91dHB1dFhTTChhdHRycykgewogICAgcmV0dXJuIG5ldyBPdXRwdXRYU0woYXR0cnMpOwogIH0KICBzdGF0aWMgb3ZlcnByaW50KGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IE92ZXJwcmludChhdHRycyk7CiAgfQogIHN0YXRpYyBwYWNrZXRzKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IFBhY2tldHMoYXR0cnMpOwogIH0KICBzdGF0aWMgcGFnZU9mZnNldChhdHRycykgewogICAgcmV0dXJuIG5ldyBQYWdlT2Zmc2V0KGF0dHJzKTsKICB9CiAgc3RhdGljIHBhZ2VSYW5nZShhdHRycykgewogICAgcmV0dXJuIG5ldyBQYWdlUmFuZ2UoYXR0cnMpOwogIH0KICBzdGF0aWMgcGFnaW5hdGlvbihhdHRycykgewogICAgcmV0dXJuIG5ldyBQYWdpbmF0aW9uKGF0dHJzKTsKICB9CiAgc3RhdGljIHBhZ2luYXRpb25PdmVycmlkZShhdHRycykgewogICAgcmV0dXJuIG5ldyBQYWdpbmF0aW9uT3ZlcnJpZGUoYXR0cnMpOwogIH0KICBzdGF0aWMgcGFydChhdHRycykgewogICAgcmV0dXJuIG5ldyBQYXJ0KGF0dHJzKTsKICB9CiAgc3RhdGljIHBjbChhdHRycykgewogICAgcmV0dXJuIG5ldyBQY2woYXR0cnMpOwogIH0KICBzdGF0aWMgcGRmKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IFBkZihhdHRycyk7CiAgfQogIHN0YXRpYyBwZGZhKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IFBkZmEoYXR0cnMpOwogIH0KICBzdGF0aWMgcGVybWlzc2lvbnMoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgUGVybWlzc2lvbnMoYXR0cnMpOwogIH0KICBzdGF0aWMgcGlja1RyYXlCeVBERlNpemUoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgUGlja1RyYXlCeVBERlNpemUoYXR0cnMpOwogIH0KICBzdGF0aWMgcGljdHVyZShhdHRycykgewogICAgcmV0dXJuIG5ldyBjb25maWdfUGljdHVyZShhdHRycyk7CiAgfQogIHN0YXRpYyBwbGFpbnRleHRNZXRhZGF0YShhdHRycykgewogICAgcmV0dXJuIG5ldyBQbGFpbnRleHRNZXRhZGF0YShhdHRycyk7CiAgfQogIHN0YXRpYyBwcmVzZW5jZShhdHRycykgewogICAgcmV0dXJuIG5ldyBQcmVzZW5jZShhdHRycyk7CiAgfQogIHN0YXRpYyBwcmVzZW50KGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IFByZXNlbnQoYXR0cnMpOwogIH0KICBzdGF0aWMgcHJpbnQoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgUHJpbnQoYXR0cnMpOwogIH0KICBzdGF0aWMgcHJpbnRIaWdoUXVhbGl0eShhdHRycykgewogICAgcmV0dXJuIG5ldyBQcmludEhpZ2hRdWFsaXR5KGF0dHJzKTsKICB9CiAgc3RhdGljIHByaW50U2NhbGluZyhhdHRycykgewogICAgcmV0dXJuIG5ldyBQcmludFNjYWxpbmcoYXR0cnMpOwogIH0KICBzdGF0aWMgcHJpbnRlck5hbWUoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgUHJpbnRlck5hbWUoYXR0cnMpOwogIH0KICBzdGF0aWMgcHJvZHVjZXIoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgUHJvZHVjZXIoYXR0cnMpOwogIH0KICBzdGF0aWMgcHMoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgUHMoYXR0cnMpOwogIH0KICBzdGF0aWMgcmFuZ2UoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgUmFuZ2UoYXR0cnMpOwogIH0KICBzdGF0aWMgcmVjb3JkKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IFJlY29yZChhdHRycyk7CiAgfQogIHN0YXRpYyByZWxldmFudChhdHRycykgewogICAgcmV0dXJuIG5ldyBSZWxldmFudChhdHRycyk7CiAgfQogIHN0YXRpYyByZW5hbWUoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgUmVuYW1lKGF0dHJzKTsKICB9CiAgc3RhdGljIHJlbmRlclBvbGljeShhdHRycykgewogICAgcmV0dXJuIG5ldyBSZW5kZXJQb2xpY3koYXR0cnMpOwogIH0KICBzdGF0aWMgcnVuU2NyaXB0cyhhdHRycykgewogICAgcmV0dXJuIG5ldyBSdW5TY3JpcHRzKGF0dHJzKTsKICB9CiAgc3RhdGljIHNjcmlwdChhdHRycykgewogICAgcmV0dXJuIG5ldyBjb25maWdfU2NyaXB0KGF0dHJzKTsKICB9CiAgc3RhdGljIHNjcmlwdE1vZGVsKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IFNjcmlwdE1vZGVsKGF0dHJzKTsKICB9CiAgc3RhdGljIHNldmVyaXR5KGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IFNldmVyaXR5KGF0dHJzKTsKICB9CiAgc3RhdGljIHNpbGVudFByaW50KGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IFNpbGVudFByaW50KGF0dHJzKTsKICB9CiAgc3RhdGljIHN0YXBsZShhdHRycykgewogICAgcmV0dXJuIG5ldyBTdGFwbGUoYXR0cnMpOwogIH0KICBzdGF0aWMgc3RhcnROb2RlKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IFN0YXJ0Tm9kZShhdHRycyk7CiAgfQogIHN0YXRpYyBzdGFydFBhZ2UoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgU3RhcnRQYWdlKGF0dHJzKTsKICB9CiAgc3RhdGljIHN1Ym1pdEZvcm1hdChhdHRycykgewogICAgcmV0dXJuIG5ldyBTdWJtaXRGb3JtYXQoYXR0cnMpOwogIH0KICBzdGF0aWMgc3VibWl0VXJsKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IFN1Ym1pdFVybChhdHRycyk7CiAgfQogIHN0YXRpYyBzdWJzZXRCZWxvdyhhdHRycykgewogICAgcmV0dXJuIG5ldyBTdWJzZXRCZWxvdyhhdHRycyk7CiAgfQogIHN0YXRpYyBzdXBwcmVzc0Jhbm5lcihhdHRycykgewogICAgcmV0dXJuIG5ldyBTdXBwcmVzc0Jhbm5lcihhdHRycyk7CiAgfQogIHN0YXRpYyB0YWdnZWQoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgVGFnZ2VkKGF0dHJzKTsKICB9CiAgc3RhdGljIHRlbXBsYXRlKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IGNvbmZpZ19UZW1wbGF0ZShhdHRycyk7CiAgfQogIHN0YXRpYyB0ZW1wbGF0ZUNhY2hlKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IFRlbXBsYXRlQ2FjaGUoYXR0cnMpOwogIH0KICBzdGF0aWMgdGhyZXNob2xkKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IFRocmVzaG9sZChhdHRycyk7CiAgfQogIHN0YXRpYyB0byhhdHRycykgewogICAgcmV0dXJuIG5ldyBUbyhhdHRycyk7CiAgfQogIHN0YXRpYyB0cmFjZShhdHRycykgewogICAgcmV0dXJuIG5ldyBUcmFjZShhdHRycyk7CiAgfQogIHN0YXRpYyB0cmFuc2Zvcm0oYXR0cnMpIHsKICAgIHJldHVybiBuZXcgVHJhbnNmb3JtKGF0dHJzKTsKICB9CiAgc3RhdGljIHR5cGUoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgVHlwZShhdHRycyk7CiAgfQogIHN0YXRpYyB1cmkoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgVXJpKGF0dHJzKTsKICB9CiAgc3RhdGljIHZhbGlkYXRlKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IGNvbmZpZ19WYWxpZGF0ZShhdHRycyk7CiAgfQogIHN0YXRpYyB2YWxpZGF0ZUFwcHJvdmFsU2lnbmF0dXJlcyhhdHRycykgewogICAgcmV0dXJuIG5ldyBWYWxpZGF0ZUFwcHJvdmFsU2lnbmF0dXJlcyhhdHRycyk7CiAgfQogIHN0YXRpYyB2YWxpZGF0aW9uTWVzc2FnaW5nKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IFZhbGlkYXRpb25NZXNzYWdpbmcoYXR0cnMpOwogIH0KICBzdGF0aWMgdmVyc2lvbihhdHRycykgewogICAgcmV0dXJuIG5ldyBWZXJzaW9uKGF0dHJzKTsKICB9CiAgc3RhdGljIHZlcnNpb25Db250cm9sKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IFZlcnNpb25Db250cm9sKGF0dHJzKTsKICB9CiAgc3RhdGljIHZpZXdlclByZWZlcmVuY2VzKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IFZpZXdlclByZWZlcmVuY2VzKGF0dHJzKTsKICB9CiAgc3RhdGljIHdlYkNsaWVudChhdHRycykgewogICAgcmV0dXJuIG5ldyBXZWJDbGllbnQoYXR0cnMpOwogIH0KICBzdGF0aWMgd2hpdGVzcGFjZShhdHRycykgewogICAgcmV0dXJuIG5ldyBXaGl0ZXNwYWNlKGF0dHJzKTsKICB9CiAgc3RhdGljIHdpbmRvdyhhdHRycykgewogICAgcmV0dXJuIG5ldyBXaW5kb3coYXR0cnMpOwogIH0KICBzdGF0aWMgeGRjKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IFhkYyhhdHRycyk7CiAgfQogIHN0YXRpYyB4ZHAoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgWGRwKGF0dHJzKTsKICB9CiAgc3RhdGljIHhzbChhdHRycykgewogICAgcmV0dXJuIG5ldyBYc2woYXR0cnMpOwogIH0KICBzdGF0aWMgenBsKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IFpwbChhdHRycyk7CiAgfQp9Cgo7Ly8gLi9zcmMvY29yZS94ZmEvY29ubmVjdGlvbl9zZXQuanMKCgpjb25zdCBDT05ORUNUSU9OX1NFVF9OU19JRCA9IE5hbWVzcGFjZUlkcy5jb25uZWN0aW9uU2V0LmlkOwpjbGFzcyBDb25uZWN0aW9uU2V0IGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05ORUNUSU9OX1NFVF9OU19JRCwgImNvbm5lY3Rpb25TZXQiLCB0cnVlKTsKICAgIHRoaXMud3NkbENvbm5lY3Rpb24gPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICAgIHRoaXMueG1sQ29ubmVjdGlvbiA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy54c2RDb25uZWN0aW9uID0gbmV3IFhGQU9iamVjdEFycmF5KCk7CiAgfQp9CmNsYXNzIEVmZmVjdGl2ZUlucHV0UG9saWN5IGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05ORUNUSU9OX1NFVF9OU19JRCwgImVmZmVjdGl2ZUlucHV0UG9saWN5Iik7CiAgICB0aGlzLmlkID0gYXR0cmlidXRlcy5pZCB8fCAiIjsKICAgIHRoaXMubmFtZSA9IGF0dHJpYnV0ZXMubmFtZSB8fCAiIjsKICAgIHRoaXMudXNlID0gYXR0cmlidXRlcy51c2UgfHwgIiI7CiAgICB0aGlzLnVzZWhyZWYgPSBhdHRyaWJ1dGVzLnVzZWhyZWYgfHwgIiI7CiAgfQp9CmNsYXNzIEVmZmVjdGl2ZU91dHB1dFBvbGljeSBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09OTkVDVElPTl9TRVRfTlNfSUQsICJlZmZlY3RpdmVPdXRwdXRQb2xpY3kiKTsKICAgIHRoaXMuaWQgPSBhdHRyaWJ1dGVzLmlkIHx8ICIiOwogICAgdGhpcy5uYW1lID0gYXR0cmlidXRlcy5uYW1lIHx8ICIiOwogICAgdGhpcy51c2UgPSBhdHRyaWJ1dGVzLnVzZSB8fCAiIjsKICAgIHRoaXMudXNlaHJlZiA9IGF0dHJpYnV0ZXMudXNlaHJlZiB8fCAiIjsKICB9Cn0KY2xhc3MgT3BlcmF0aW9uIGV4dGVuZHMgU3RyaW5nT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05ORUNUSU9OX1NFVF9OU19JRCwgIm9wZXJhdGlvbiIpOwogICAgdGhpcy5pZCA9IGF0dHJpYnV0ZXMuaWQgfHwgIiI7CiAgICB0aGlzLmlucHV0ID0gYXR0cmlidXRlcy5pbnB1dCB8fCAiIjsKICAgIHRoaXMubmFtZSA9IGF0dHJpYnV0ZXMubmFtZSB8fCAiIjsKICAgIHRoaXMub3V0cHV0ID0gYXR0cmlidXRlcy5vdXRwdXQgfHwgIiI7CiAgICB0aGlzLnVzZSA9IGF0dHJpYnV0ZXMudXNlIHx8ICIiOwogICAgdGhpcy51c2VocmVmID0gYXR0cmlidXRlcy51c2VocmVmIHx8ICIiOwogIH0KfQpjbGFzcyBSb290RWxlbWVudCBleHRlbmRzIFN0cmluZ09iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09OTkVDVElPTl9TRVRfTlNfSUQsICJyb290RWxlbWVudCIpOwogICAgdGhpcy5pZCA9IGF0dHJpYnV0ZXMuaWQgfHwgIiI7CiAgICB0aGlzLm5hbWUgPSBhdHRyaWJ1dGVzLm5hbWUgfHwgIiI7CiAgICB0aGlzLnVzZSA9IGF0dHJpYnV0ZXMudXNlIHx8ICIiOwogICAgdGhpcy51c2VocmVmID0gYXR0cmlidXRlcy51c2VocmVmIHx8ICIiOwogIH0KfQpjbGFzcyBTb2FwQWN0aW9uIGV4dGVuZHMgU3RyaW5nT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05ORUNUSU9OX1NFVF9OU19JRCwgInNvYXBBY3Rpb24iKTsKICAgIHRoaXMuaWQgPSBhdHRyaWJ1dGVzLmlkIHx8ICIiOwogICAgdGhpcy5uYW1lID0gYXR0cmlidXRlcy5uYW1lIHx8ICIiOwogICAgdGhpcy51c2UgPSBhdHRyaWJ1dGVzLnVzZSB8fCAiIjsKICAgIHRoaXMudXNlaHJlZiA9IGF0dHJpYnV0ZXMudXNlaHJlZiB8fCAiIjsKICB9Cn0KY2xhc3MgU29hcEFkZHJlc3MgZXh0ZW5kcyBTdHJpbmdPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTk5FQ1RJT05fU0VUX05TX0lELCAic29hcEFkZHJlc3MiKTsKICAgIHRoaXMuaWQgPSBhdHRyaWJ1dGVzLmlkIHx8ICIiOwogICAgdGhpcy5uYW1lID0gYXR0cmlidXRlcy5uYW1lIHx8ICIiOwogICAgdGhpcy51c2UgPSBhdHRyaWJ1dGVzLnVzZSB8fCAiIjsKICAgIHRoaXMudXNlaHJlZiA9IGF0dHJpYnV0ZXMudXNlaHJlZiB8fCAiIjsKICB9Cn0KY2xhc3MgY29ubmVjdGlvbl9zZXRfVXJpIGV4dGVuZHMgU3RyaW5nT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihDT05ORUNUSU9OX1NFVF9OU19JRCwgInVyaSIpOwogICAgdGhpcy5pZCA9IGF0dHJpYnV0ZXMuaWQgfHwgIiI7CiAgICB0aGlzLm5hbWUgPSBhdHRyaWJ1dGVzLm5hbWUgfHwgIiI7CiAgICB0aGlzLnVzZSA9IGF0dHJpYnV0ZXMudXNlIHx8ICIiOwogICAgdGhpcy51c2VocmVmID0gYXR0cmlidXRlcy51c2VocmVmIHx8ICIiOwogIH0KfQpjbGFzcyBXc2RsQWRkcmVzcyBleHRlbmRzIFN0cmluZ09iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09OTkVDVElPTl9TRVRfTlNfSUQsICJ3c2RsQWRkcmVzcyIpOwogICAgdGhpcy5pZCA9IGF0dHJpYnV0ZXMuaWQgfHwgIiI7CiAgICB0aGlzLm5hbWUgPSBhdHRyaWJ1dGVzLm5hbWUgfHwgIiI7CiAgICB0aGlzLnVzZSA9IGF0dHJpYnV0ZXMudXNlIHx8ICIiOwogICAgdGhpcy51c2VocmVmID0gYXR0cmlidXRlcy51c2VocmVmIHx8ICIiOwogIH0KfQpjbGFzcyBXc2RsQ29ubmVjdGlvbiBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09OTkVDVElPTl9TRVRfTlNfSUQsICJ3c2RsQ29ubmVjdGlvbiIsIHRydWUpOwogICAgdGhpcy5kYXRhRGVzY3JpcHRpb24gPSBhdHRyaWJ1dGVzLmRhdGFEZXNjcmlwdGlvbiB8fCAiIjsKICAgIHRoaXMubmFtZSA9IGF0dHJpYnV0ZXMubmFtZSB8fCAiIjsKICAgIHRoaXMuZWZmZWN0aXZlSW5wdXRQb2xpY3kgPSBudWxsOwogICAgdGhpcy5lZmZlY3RpdmVPdXRwdXRQb2xpY3kgPSBudWxsOwogICAgdGhpcy5vcGVyYXRpb24gPSBudWxsOwogICAgdGhpcy5zb2FwQWN0aW9uID0gbnVsbDsKICAgIHRoaXMuc29hcEFkZHJlc3MgPSBudWxsOwogICAgdGhpcy53c2RsQWRkcmVzcyA9IG51bGw7CiAgfQp9CmNsYXNzIFhtbENvbm5lY3Rpb24gZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKENPTk5FQ1RJT05fU0VUX05TX0lELCAieG1sQ29ubmVjdGlvbiIsIHRydWUpOwogICAgdGhpcy5kYXRhRGVzY3JpcHRpb24gPSBhdHRyaWJ1dGVzLmRhdGFEZXNjcmlwdGlvbiB8fCAiIjsKICAgIHRoaXMubmFtZSA9IGF0dHJpYnV0ZXMubmFtZSB8fCAiIjsKICAgIHRoaXMudXJpID0gbnVsbDsKICB9Cn0KY2xhc3MgWHNkQ29ubmVjdGlvbiBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoQ09OTkVDVElPTl9TRVRfTlNfSUQsICJ4c2RDb25uZWN0aW9uIiwgdHJ1ZSk7CiAgICB0aGlzLmRhdGFEZXNjcmlwdGlvbiA9IGF0dHJpYnV0ZXMuZGF0YURlc2NyaXB0aW9uIHx8ICIiOwogICAgdGhpcy5uYW1lID0gYXR0cmlidXRlcy5uYW1lIHx8ICIiOwogICAgdGhpcy5yb290RWxlbWVudCA9IG51bGw7CiAgICB0aGlzLnVyaSA9IG51bGw7CiAgfQp9CmNsYXNzIENvbm5lY3Rpb25TZXROYW1lc3BhY2UgewogIHN0YXRpYyBbJGJ1aWxkWEZBT2JqZWN0XShuYW1lLCBhdHRyaWJ1dGVzKSB7CiAgICBpZiAoQ29ubmVjdGlvblNldE5hbWVzcGFjZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkgewogICAgICByZXR1cm4gQ29ubmVjdGlvblNldE5hbWVzcGFjZVtuYW1lXShhdHRyaWJ1dGVzKTsKICAgIH0KICAgIHJldHVybiB1bmRlZmluZWQ7CiAgfQogIHN0YXRpYyBjb25uZWN0aW9uU2V0KGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IENvbm5lY3Rpb25TZXQoYXR0cnMpOwogIH0KICBzdGF0aWMgZWZmZWN0aXZlSW5wdXRQb2xpY3koYXR0cnMpIHsKICAgIHJldHVybiBuZXcgRWZmZWN0aXZlSW5wdXRQb2xpY3koYXR0cnMpOwogIH0KICBzdGF0aWMgZWZmZWN0aXZlT3V0cHV0UG9saWN5KGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IEVmZmVjdGl2ZU91dHB1dFBvbGljeShhdHRycyk7CiAgfQogIHN0YXRpYyBvcGVyYXRpb24oYXR0cnMpIHsKICAgIHJldHVybiBuZXcgT3BlcmF0aW9uKGF0dHJzKTsKICB9CiAgc3RhdGljIHJvb3RFbGVtZW50KGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IFJvb3RFbGVtZW50KGF0dHJzKTsKICB9CiAgc3RhdGljIHNvYXBBY3Rpb24oYXR0cnMpIHsKICAgIHJldHVybiBuZXcgU29hcEFjdGlvbihhdHRycyk7CiAgfQogIHN0YXRpYyBzb2FwQWRkcmVzcyhhdHRycykgewogICAgcmV0dXJuIG5ldyBTb2FwQWRkcmVzcyhhdHRycyk7CiAgfQogIHN0YXRpYyB1cmkoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgY29ubmVjdGlvbl9zZXRfVXJpKGF0dHJzKTsKICB9CiAgc3RhdGljIHdzZGxBZGRyZXNzKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IFdzZGxBZGRyZXNzKGF0dHJzKTsKICB9CiAgc3RhdGljIHdzZGxDb25uZWN0aW9uKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IFdzZGxDb25uZWN0aW9uKGF0dHJzKTsKICB9CiAgc3RhdGljIHhtbENvbm5lY3Rpb24oYXR0cnMpIHsKICAgIHJldHVybiBuZXcgWG1sQ29ubmVjdGlvbihhdHRycyk7CiAgfQogIHN0YXRpYyB4c2RDb25uZWN0aW9uKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IFhzZENvbm5lY3Rpb24oYXR0cnMpOwogIH0KfQoKOy8vIC4vc3JjL2NvcmUveGZhL2RhdGFzZXRzLmpzCgoKCmNvbnN0IERBVEFTRVRTX05TX0lEID0gTmFtZXNwYWNlSWRzLmRhdGFzZXRzLmlkOwpjbGFzcyBkYXRhc2V0c19EYXRhIGV4dGVuZHMgWG1sT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihEQVRBU0VUU19OU19JRCwgImRhdGEiLCBhdHRyaWJ1dGVzKTsKICB9CiAgWyRpc05zQWdub3N0aWNdKCkgewogICAgcmV0dXJuIHRydWU7CiAgfQp9CmNsYXNzIERhdGFzZXRzIGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihEQVRBU0VUU19OU19JRCwgImRhdGFzZXRzIiwgdHJ1ZSk7CiAgICB0aGlzLmRhdGEgPSBudWxsOwogICAgdGhpcy5TaWduYXR1cmUgPSBudWxsOwogIH0KICBbJG9uQ2hpbGRdKGNoaWxkKSB7CiAgICBjb25zdCBuYW1lID0gY2hpbGRbJG5vZGVOYW1lXTsKICAgIGlmIChuYW1lID09PSAiZGF0YSIgJiYgY2hpbGRbJG5hbWVzcGFjZUlkXSA9PT0gREFUQVNFVFNfTlNfSUQgfHwgbmFtZSA9PT0gIlNpZ25hdHVyZSIgJiYgY2hpbGRbJG5hbWVzcGFjZUlkXSA9PT0gTmFtZXNwYWNlSWRzLnNpZ25hdHVyZS5pZCkgewogICAgICB0aGlzW25hbWVdID0gY2hpbGQ7CiAgICB9CiAgICB0aGlzWyRhcHBlbmRDaGlsZF0oY2hpbGQpOwogIH0KfQpjbGFzcyBEYXRhc2V0c05hbWVzcGFjZSB7CiAgc3RhdGljIFskYnVpbGRYRkFPYmplY3RdKG5hbWUsIGF0dHJpYnV0ZXMpIHsKICAgIGlmIChEYXRhc2V0c05hbWVzcGFjZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkgewogICAgICByZXR1cm4gRGF0YXNldHNOYW1lc3BhY2VbbmFtZV0oYXR0cmlidXRlcyk7CiAgICB9CiAgICByZXR1cm4gdW5kZWZpbmVkOwogIH0KICBzdGF0aWMgZGF0YXNldHMoYXR0cmlidXRlcykgewogICAgcmV0dXJuIG5ldyBEYXRhc2V0cyhhdHRyaWJ1dGVzKTsKICB9CiAgc3RhdGljIGRhdGEoYXR0cmlidXRlcykgewogICAgcmV0dXJuIG5ldyBkYXRhc2V0c19EYXRhKGF0dHJpYnV0ZXMpOwogIH0KfQoKOy8vIC4vc3JjL2NvcmUveGZhL2xvY2FsZV9zZXQuanMKCgoKY29uc3QgTE9DQUxFX1NFVF9OU19JRCA9IE5hbWVzcGFjZUlkcy5sb2NhbGVTZXQuaWQ7CmNsYXNzIENhbGVuZGFyU3ltYm9scyBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoTE9DQUxFX1NFVF9OU19JRCwgImNhbGVuZGFyU3ltYm9scyIsIHRydWUpOwogICAgdGhpcy5uYW1lID0gImdyZWdvcmlhbiI7CiAgICB0aGlzLmRheU5hbWVzID0gbmV3IFhGQU9iamVjdEFycmF5KDIpOwogICAgdGhpcy5lcmFOYW1lcyA9IG51bGw7CiAgICB0aGlzLm1lcmlkaWVtTmFtZXMgPSBudWxsOwogICAgdGhpcy5tb250aE5hbWVzID0gbmV3IFhGQU9iamVjdEFycmF5KDIpOwogIH0KfQpjbGFzcyBDdXJyZW5jeVN5bWJvbCBleHRlbmRzIFN0cmluZ09iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoTE9DQUxFX1NFVF9OU19JRCwgImN1cnJlbmN5U3ltYm9sIik7CiAgICB0aGlzLm5hbWUgPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy5uYW1lLCBbInN5bWJvbCIsICJpc29uYW1lIiwgImRlY2ltYWwiXSk7CiAgfQp9CmNsYXNzIEN1cnJlbmN5U3ltYm9scyBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoTE9DQUxFX1NFVF9OU19JRCwgImN1cnJlbmN5U3ltYm9scyIsIHRydWUpOwogICAgdGhpcy5jdXJyZW5jeVN5bWJvbCA9IG5ldyBYRkFPYmplY3RBcnJheSgzKTsKICB9Cn0KY2xhc3MgRGF0ZVBhdHRlcm4gZXh0ZW5kcyBTdHJpbmdPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKExPQ0FMRV9TRVRfTlNfSUQsICJkYXRlUGF0dGVybiIpOwogICAgdGhpcy5uYW1lID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMubmFtZSwgWyJmdWxsIiwgImxvbmciLCAibWVkIiwgInNob3J0Il0pOwogIH0KfQpjbGFzcyBEYXRlUGF0dGVybnMgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKExPQ0FMRV9TRVRfTlNfSUQsICJkYXRlUGF0dGVybnMiLCB0cnVlKTsKICAgIHRoaXMuZGF0ZVBhdHRlcm4gPSBuZXcgWEZBT2JqZWN0QXJyYXkoNCk7CiAgfQp9CmNsYXNzIERhdGVUaW1lU3ltYm9scyBleHRlbmRzIENvbnRlbnRPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKExPQ0FMRV9TRVRfTlNfSUQsICJkYXRlVGltZVN5bWJvbHMiKTsKICB9Cn0KY2xhc3MgRGF5IGV4dGVuZHMgU3RyaW5nT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihMT0NBTEVfU0VUX05TX0lELCAiZGF5Iik7CiAgfQp9CmNsYXNzIERheU5hbWVzIGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihMT0NBTEVfU0VUX05TX0lELCAiZGF5TmFtZXMiLCB0cnVlKTsKICAgIHRoaXMuYWJiciA9IGdldEludGVnZXIoewogICAgICBkYXRhOiBhdHRyaWJ1dGVzLmFiYnIsCiAgICAgIGRlZmF1bHRWYWx1ZTogMCwKICAgICAgdmFsaWRhdGU6IHggPT4geCA9PT0gMQogICAgfSk7CiAgICB0aGlzLmRheSA9IG5ldyBYRkFPYmplY3RBcnJheSg3KTsKICB9Cn0KY2xhc3MgRXJhIGV4dGVuZHMgU3RyaW5nT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihMT0NBTEVfU0VUX05TX0lELCAiZXJhIik7CiAgfQp9CmNsYXNzIEVyYU5hbWVzIGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihMT0NBTEVfU0VUX05TX0lELCAiZXJhTmFtZXMiLCB0cnVlKTsKICAgIHRoaXMuZXJhID0gbmV3IFhGQU9iamVjdEFycmF5KDIpOwogIH0KfQpjbGFzcyBsb2NhbGVfc2V0X0xvY2FsZSBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoTE9DQUxFX1NFVF9OU19JRCwgImxvY2FsZSIsIHRydWUpOwogICAgdGhpcy5kZXNjID0gYXR0cmlidXRlcy5kZXNjIHx8ICIiOwogICAgdGhpcy5uYW1lID0gImlzb25hbWUiOwogICAgdGhpcy5jYWxlbmRhclN5bWJvbHMgPSBudWxsOwogICAgdGhpcy5jdXJyZW5jeVN5bWJvbHMgPSBudWxsOwogICAgdGhpcy5kYXRlUGF0dGVybnMgPSBudWxsOwogICAgdGhpcy5kYXRlVGltZVN5bWJvbHMgPSBudWxsOwogICAgdGhpcy5udW1iZXJQYXR0ZXJucyA9IG51bGw7CiAgICB0aGlzLm51bWJlclN5bWJvbHMgPSBudWxsOwogICAgdGhpcy50aW1lUGF0dGVybnMgPSBudWxsOwogICAgdGhpcy50eXBlRmFjZXMgPSBudWxsOwogIH0KfQpjbGFzcyBsb2NhbGVfc2V0X0xvY2FsZVNldCBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoTE9DQUxFX1NFVF9OU19JRCwgImxvY2FsZVNldCIsIHRydWUpOwogICAgdGhpcy5sb2NhbGUgPSBuZXcgWEZBT2JqZWN0QXJyYXkoKTsKICB9Cn0KY2xhc3MgTWVyaWRpZW0gZXh0ZW5kcyBTdHJpbmdPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKExPQ0FMRV9TRVRfTlNfSUQsICJtZXJpZGllbSIpOwogIH0KfQpjbGFzcyBNZXJpZGllbU5hbWVzIGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihMT0NBTEVfU0VUX05TX0lELCAibWVyaWRpZW1OYW1lcyIsIHRydWUpOwogICAgdGhpcy5tZXJpZGllbSA9IG5ldyBYRkFPYmplY3RBcnJheSgyKTsKICB9Cn0KY2xhc3MgTW9udGggZXh0ZW5kcyBTdHJpbmdPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKExPQ0FMRV9TRVRfTlNfSUQsICJtb250aCIpOwogIH0KfQpjbGFzcyBNb250aE5hbWVzIGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihMT0NBTEVfU0VUX05TX0lELCAibW9udGhOYW1lcyIsIHRydWUpOwogICAgdGhpcy5hYmJyID0gZ2V0SW50ZWdlcih7CiAgICAgIGRhdGE6IGF0dHJpYnV0ZXMuYWJiciwKICAgICAgZGVmYXVsdFZhbHVlOiAwLAogICAgICB2YWxpZGF0ZTogeCA9PiB4ID09PSAxCiAgICB9KTsKICAgIHRoaXMubW9udGggPSBuZXcgWEZBT2JqZWN0QXJyYXkoMTIpOwogIH0KfQpjbGFzcyBOdW1iZXJQYXR0ZXJuIGV4dGVuZHMgU3RyaW5nT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihMT0NBTEVfU0VUX05TX0lELCAibnVtYmVyUGF0dGVybiIpOwogICAgdGhpcy5uYW1lID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMubmFtZSwgWyJmdWxsIiwgImxvbmciLCAibWVkIiwgInNob3J0Il0pOwogIH0KfQpjbGFzcyBOdW1iZXJQYXR0ZXJucyBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoTE9DQUxFX1NFVF9OU19JRCwgIm51bWJlclBhdHRlcm5zIiwgdHJ1ZSk7CiAgICB0aGlzLm51bWJlclBhdHRlcm4gPSBuZXcgWEZBT2JqZWN0QXJyYXkoNCk7CiAgfQp9CmNsYXNzIE51bWJlclN5bWJvbCBleHRlbmRzIFN0cmluZ09iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoTE9DQUxFX1NFVF9OU19JRCwgIm51bWJlclN5bWJvbCIpOwogICAgdGhpcy5uYW1lID0gZ2V0U3RyaW5nT3B0aW9uKGF0dHJpYnV0ZXMubmFtZSwgWyJkZWNpbWFsIiwgImdyb3VwaW5nIiwgInBlcmNlbnQiLCAibWludXMiLCAiemVybyJdKTsKICB9Cn0KY2xhc3MgTnVtYmVyU3ltYm9scyBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoTE9DQUxFX1NFVF9OU19JRCwgIm51bWJlclN5bWJvbHMiLCB0cnVlKTsKICAgIHRoaXMubnVtYmVyU3ltYm9sID0gbmV3IFhGQU9iamVjdEFycmF5KDUpOwogIH0KfQpjbGFzcyBUaW1lUGF0dGVybiBleHRlbmRzIFN0cmluZ09iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoTE9DQUxFX1NFVF9OU19JRCwgInRpbWVQYXR0ZXJuIik7CiAgICB0aGlzLm5hbWUgPSBnZXRTdHJpbmdPcHRpb24oYXR0cmlidXRlcy5uYW1lLCBbImZ1bGwiLCAibG9uZyIsICJtZWQiLCAic2hvcnQiXSk7CiAgfQp9CmNsYXNzIFRpbWVQYXR0ZXJucyBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoTE9DQUxFX1NFVF9OU19JRCwgInRpbWVQYXR0ZXJucyIsIHRydWUpOwogICAgdGhpcy50aW1lUGF0dGVybiA9IG5ldyBYRkFPYmplY3RBcnJheSg0KTsKICB9Cn0KY2xhc3MgVHlwZUZhY2UgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKExPQ0FMRV9TRVRfTlNfSUQsICJ0eXBlRmFjZSIsIHRydWUpOwogICAgdGhpcy5uYW1lID0gYXR0cmlidXRlcy5uYW1lIHwgIiI7CiAgfQp9CmNsYXNzIFR5cGVGYWNlcyBleHRlbmRzIFhGQU9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoTE9DQUxFX1NFVF9OU19JRCwgInR5cGVGYWNlcyIsIHRydWUpOwogICAgdGhpcy50eXBlRmFjZSA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogIH0KfQpjbGFzcyBMb2NhbGVTZXROYW1lc3BhY2UgewogIHN0YXRpYyBbJGJ1aWxkWEZBT2JqZWN0XShuYW1lLCBhdHRyaWJ1dGVzKSB7CiAgICBpZiAoTG9jYWxlU2V0TmFtZXNwYWNlLmhhc093blByb3BlcnR5KG5hbWUpKSB7CiAgICAgIHJldHVybiBMb2NhbGVTZXROYW1lc3BhY2VbbmFtZV0oYXR0cmlidXRlcyk7CiAgICB9CiAgICByZXR1cm4gdW5kZWZpbmVkOwogIH0KICBzdGF0aWMgY2FsZW5kYXJTeW1ib2xzKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IENhbGVuZGFyU3ltYm9scyhhdHRycyk7CiAgfQogIHN0YXRpYyBjdXJyZW5jeVN5bWJvbChhdHRycykgewogICAgcmV0dXJuIG5ldyBDdXJyZW5jeVN5bWJvbChhdHRycyk7CiAgfQogIHN0YXRpYyBjdXJyZW5jeVN5bWJvbHMoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgQ3VycmVuY3lTeW1ib2xzKGF0dHJzKTsKICB9CiAgc3RhdGljIGRhdGVQYXR0ZXJuKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IERhdGVQYXR0ZXJuKGF0dHJzKTsKICB9CiAgc3RhdGljIGRhdGVQYXR0ZXJucyhhdHRycykgewogICAgcmV0dXJuIG5ldyBEYXRlUGF0dGVybnMoYXR0cnMpOwogIH0KICBzdGF0aWMgZGF0ZVRpbWVTeW1ib2xzKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IERhdGVUaW1lU3ltYm9scyhhdHRycyk7CiAgfQogIHN0YXRpYyBkYXkoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgRGF5KGF0dHJzKTsKICB9CiAgc3RhdGljIGRheU5hbWVzKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IERheU5hbWVzKGF0dHJzKTsKICB9CiAgc3RhdGljIGVyYShhdHRycykgewogICAgcmV0dXJuIG5ldyBFcmEoYXR0cnMpOwogIH0KICBzdGF0aWMgZXJhTmFtZXMoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgRXJhTmFtZXMoYXR0cnMpOwogIH0KICBzdGF0aWMgbG9jYWxlKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IGxvY2FsZV9zZXRfTG9jYWxlKGF0dHJzKTsKICB9CiAgc3RhdGljIGxvY2FsZVNldChhdHRycykgewogICAgcmV0dXJuIG5ldyBsb2NhbGVfc2V0X0xvY2FsZVNldChhdHRycyk7CiAgfQogIHN0YXRpYyBtZXJpZGllbShhdHRycykgewogICAgcmV0dXJuIG5ldyBNZXJpZGllbShhdHRycyk7CiAgfQogIHN0YXRpYyBtZXJpZGllbU5hbWVzKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IE1lcmlkaWVtTmFtZXMoYXR0cnMpOwogIH0KICBzdGF0aWMgbW9udGgoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgTW9udGgoYXR0cnMpOwogIH0KICBzdGF0aWMgbW9udGhOYW1lcyhhdHRycykgewogICAgcmV0dXJuIG5ldyBNb250aE5hbWVzKGF0dHJzKTsKICB9CiAgc3RhdGljIG51bWJlclBhdHRlcm4oYXR0cnMpIHsKICAgIHJldHVybiBuZXcgTnVtYmVyUGF0dGVybihhdHRycyk7CiAgfQogIHN0YXRpYyBudW1iZXJQYXR0ZXJucyhhdHRycykgewogICAgcmV0dXJuIG5ldyBOdW1iZXJQYXR0ZXJucyhhdHRycyk7CiAgfQogIHN0YXRpYyBudW1iZXJTeW1ib2woYXR0cnMpIHsKICAgIHJldHVybiBuZXcgTnVtYmVyU3ltYm9sKGF0dHJzKTsKICB9CiAgc3RhdGljIG51bWJlclN5bWJvbHMoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgTnVtYmVyU3ltYm9scyhhdHRycyk7CiAgfQogIHN0YXRpYyB0aW1lUGF0dGVybihhdHRycykgewogICAgcmV0dXJuIG5ldyBUaW1lUGF0dGVybihhdHRycyk7CiAgfQogIHN0YXRpYyB0aW1lUGF0dGVybnMoYXR0cnMpIHsKICAgIHJldHVybiBuZXcgVGltZVBhdHRlcm5zKGF0dHJzKTsKICB9CiAgc3RhdGljIHR5cGVGYWNlKGF0dHJzKSB7CiAgICByZXR1cm4gbmV3IFR5cGVGYWNlKGF0dHJzKTsKICB9CiAgc3RhdGljIHR5cGVGYWNlcyhhdHRycykgewogICAgcmV0dXJuIG5ldyBUeXBlRmFjZXMoYXR0cnMpOwogIH0KfQoKOy8vIC4vc3JjL2NvcmUveGZhL3NpZ25hdHVyZS5qcwoKCmNvbnN0IFNJR05BVFVSRV9OU19JRCA9IE5hbWVzcGFjZUlkcy5zaWduYXR1cmUuaWQ7CmNsYXNzIHNpZ25hdHVyZV9TaWduYXR1cmUgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKFNJR05BVFVSRV9OU19JRCwgInNpZ25hdHVyZSIsIHRydWUpOwogIH0KfQpjbGFzcyBTaWduYXR1cmVOYW1lc3BhY2UgewogIHN0YXRpYyBbJGJ1aWxkWEZBT2JqZWN0XShuYW1lLCBhdHRyaWJ1dGVzKSB7CiAgICBpZiAoU2lnbmF0dXJlTmFtZXNwYWNlLmhhc093blByb3BlcnR5KG5hbWUpKSB7CiAgICAgIHJldHVybiBTaWduYXR1cmVOYW1lc3BhY2VbbmFtZV0oYXR0cmlidXRlcyk7CiAgICB9CiAgICByZXR1cm4gdW5kZWZpbmVkOwogIH0KICBzdGF0aWMgc2lnbmF0dXJlKGF0dHJpYnV0ZXMpIHsKICAgIHJldHVybiBuZXcgc2lnbmF0dXJlX1NpZ25hdHVyZShhdHRyaWJ1dGVzKTsKICB9Cn0KCjsvLyAuL3NyYy9jb3JlL3hmYS9zdHlsZXNoZWV0LmpzCgoKY29uc3QgU1RZTEVTSEVFVF9OU19JRCA9IE5hbWVzcGFjZUlkcy5zdHlsZXNoZWV0LmlkOwpjbGFzcyBTdHlsZXNoZWV0IGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihTVFlMRVNIRUVUX05TX0lELCAic3R5bGVzaGVldCIsIHRydWUpOwogIH0KfQpjbGFzcyBTdHlsZXNoZWV0TmFtZXNwYWNlIHsKICBzdGF0aWMgWyRidWlsZFhGQU9iamVjdF0obmFtZSwgYXR0cmlidXRlcykgewogICAgaWYgKFN0eWxlc2hlZXROYW1lc3BhY2UuaGFzT3duUHJvcGVydHkobmFtZSkpIHsKICAgICAgcmV0dXJuIFN0eWxlc2hlZXROYW1lc3BhY2VbbmFtZV0oYXR0cmlidXRlcyk7CiAgICB9CiAgICByZXR1cm4gdW5kZWZpbmVkOwogIH0KICBzdGF0aWMgc3R5bGVzaGVldChhdHRyaWJ1dGVzKSB7CiAgICByZXR1cm4gbmV3IFN0eWxlc2hlZXQoYXR0cmlidXRlcyk7CiAgfQp9Cgo7Ly8gLi9zcmMvY29yZS94ZmEveGRwLmpzCgoKCmNvbnN0IFhEUF9OU19JRCA9IE5hbWVzcGFjZUlkcy54ZHAuaWQ7CmNsYXNzIHhkcF9YZHAgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKFhEUF9OU19JRCwgInhkcCIsIHRydWUpOwogICAgdGhpcy51dWlkID0gYXR0cmlidXRlcy51dWlkIHx8ICIiOwogICAgdGhpcy50aW1lU3RhbXAgPSBhdHRyaWJ1dGVzLnRpbWVTdGFtcCB8fCAiIjsKICAgIHRoaXMuY29uZmlnID0gbnVsbDsKICAgIHRoaXMuY29ubmVjdGlvblNldCA9IG51bGw7CiAgICB0aGlzLmRhdGFzZXRzID0gbnVsbDsKICAgIHRoaXMubG9jYWxlU2V0ID0gbnVsbDsKICAgIHRoaXMuc3R5bGVzaGVldCA9IG5ldyBYRkFPYmplY3RBcnJheSgpOwogICAgdGhpcy50ZW1wbGF0ZSA9IG51bGw7CiAgfQogIFskb25DaGlsZENoZWNrXShjaGlsZCkgewogICAgY29uc3QgbnMgPSBOYW1lc3BhY2VJZHNbY2hpbGRbJG5vZGVOYW1lXV07CiAgICByZXR1cm4gbnMgJiYgY2hpbGRbJG5hbWVzcGFjZUlkXSA9PT0gbnMuaWQ7CiAgfQp9CmNsYXNzIFhkcE5hbWVzcGFjZSB7CiAgc3RhdGljIFskYnVpbGRYRkFPYmplY3RdKG5hbWUsIGF0dHJpYnV0ZXMpIHsKICAgIGlmIChYZHBOYW1lc3BhY2UuaGFzT3duUHJvcGVydHkobmFtZSkpIHsKICAgICAgcmV0dXJuIFhkcE5hbWVzcGFjZVtuYW1lXShhdHRyaWJ1dGVzKTsKICAgIH0KICAgIHJldHVybiB1bmRlZmluZWQ7CiAgfQogIHN0YXRpYyB4ZHAoYXR0cmlidXRlcykgewogICAgcmV0dXJuIG5ldyB4ZHBfWGRwKGF0dHJpYnV0ZXMpOwogIH0KfQoKOy8vIC4vc3JjL2NvcmUveGZhL3hodG1sLmpzCgoKCgoKCgoKCgoKCgoKCmNvbnN0IFhIVE1MX05TX0lEID0gTmFtZXNwYWNlSWRzLnhodG1sLmlkOwpjb25zdCAkcmljaFRleHQgPSBTeW1ib2woKTsKY29uc3QgVkFMSURfU1RZTEVTID0gbmV3IFNldChbImNvbG9yIiwgImZvbnQiLCAiZm9udC1mYW1pbHkiLCAiZm9udC1zaXplIiwgImZvbnQtc3RyZXRjaCIsICJmb250LXN0eWxlIiwgImZvbnQtd2VpZ2h0IiwgIm1hcmdpbiIsICJtYXJnaW4tYm90dG9tIiwgIm1hcmdpbi1sZWZ0IiwgIm1hcmdpbi1yaWdodCIsICJtYXJnaW4tdG9wIiwgImxldHRlci1zcGFjaW5nIiwgImxpbmUtaGVpZ2h0IiwgIm9ycGhhbnMiLCAicGFnZS1icmVhay1hZnRlciIsICJwYWdlLWJyZWFrLWJlZm9yZSIsICJwYWdlLWJyZWFrLWluc2lkZSIsICJ0YWItaW50ZXJ2YWwiLCAidGFiLXN0b3AiLCAidGV4dC1hbGlnbiIsICJ0ZXh0LWRlY29yYXRpb24iLCAidGV4dC1pbmRlbnQiLCAidmVydGljYWwtYWxpZ24iLCAid2lkb3dzIiwgImtlcm5pbmctbW9kZSIsICJ4ZmEtZm9udC1ob3Jpem9udGFsLXNjYWxlIiwgInhmYS1mb250LXZlcnRpY2FsLXNjYWxlIiwgInhmYS1zcGFjZXJ1biIsICJ4ZmEtdGFiLXN0b3BzIl0pOwpjb25zdCBTdHlsZU1hcHBpbmcgPSBuZXcgTWFwKFtbInBhZ2UtYnJlYWstYWZ0ZXIiLCAiYnJlYWtBZnRlciJdLCBbInBhZ2UtYnJlYWstYmVmb3JlIiwgImJyZWFrQmVmb3JlIl0sIFsicGFnZS1icmVhay1pbnNpZGUiLCAiYnJlYWtJbnNpZGUiXSwgWyJrZXJuaW5nLW1vZGUiLCB2YWx1ZSA9PiB2YWx1ZSA9PT0gIm5vbmUiID8gIm5vbmUiIDogIm5vcm1hbCJdLCBbInhmYS1mb250LWhvcml6b250YWwtc2NhbGUiLCB2YWx1ZSA9PiBgc2NhbGVYKCR7TWF0aC5tYXgoMCwgcGFyc2VJbnQodmFsdWUpIC8gMTAwKS50b0ZpeGVkKDIpfSlgXSwgWyJ4ZmEtZm9udC12ZXJ0aWNhbC1zY2FsZSIsIHZhbHVlID0+IGBzY2FsZVkoJHtNYXRoLm1heCgwLCBwYXJzZUludCh2YWx1ZSkgLyAxMDApLnRvRml4ZWQoMil9KWBdLCBbInhmYS1zcGFjZXJ1biIsICIiXSwgWyJ4ZmEtdGFiLXN0b3BzIiwgIiJdLCBbImZvbnQtc2l6ZSIsICh2YWx1ZSwgb3JpZ2luYWwpID0+IHsKICB2YWx1ZSA9IG9yaWdpbmFsLmZvbnRTaXplID0gTWF0aC5hYnMoZ2V0TWVhc3VyZW1lbnQodmFsdWUpKTsKICByZXR1cm4gbWVhc3VyZVRvU3RyaW5nKDAuOTkgKiB2YWx1ZSk7Cn1dLCBbImxldHRlci1zcGFjaW5nIiwgdmFsdWUgPT4gbWVhc3VyZVRvU3RyaW5nKGdldE1lYXN1cmVtZW50KHZhbHVlKSldLCBbImxpbmUtaGVpZ2h0IiwgdmFsdWUgPT4gbWVhc3VyZVRvU3RyaW5nKGdldE1lYXN1cmVtZW50KHZhbHVlKSldLCBbIm1hcmdpbiIsIHZhbHVlID0+IG1lYXN1cmVUb1N0cmluZyhnZXRNZWFzdXJlbWVudCh2YWx1ZSkpXSwgWyJtYXJnaW4tYm90dG9tIiwgdmFsdWUgPT4gbWVhc3VyZVRvU3RyaW5nKGdldE1lYXN1cmVtZW50KHZhbHVlKSldLCBbIm1hcmdpbi1sZWZ0IiwgdmFsdWUgPT4gbWVhc3VyZVRvU3RyaW5nKGdldE1lYXN1cmVtZW50KHZhbHVlKSldLCBbIm1hcmdpbi1yaWdodCIsIHZhbHVlID0+IG1lYXN1cmVUb1N0cmluZyhnZXRNZWFzdXJlbWVudCh2YWx1ZSkpXSwgWyJtYXJnaW4tdG9wIiwgdmFsdWUgPT4gbWVhc3VyZVRvU3RyaW5nKGdldE1lYXN1cmVtZW50KHZhbHVlKSldLCBbInRleHQtaW5kZW50IiwgdmFsdWUgPT4gbWVhc3VyZVRvU3RyaW5nKGdldE1lYXN1cmVtZW50KHZhbHVlKSldLCBbImZvbnQtZmFtaWx5IiwgdmFsdWUgPT4gdmFsdWVdLCBbInZlcnRpY2FsLWFsaWduIiwgdmFsdWUgPT4gbWVhc3VyZVRvU3RyaW5nKGdldE1lYXN1cmVtZW50KHZhbHVlKSldXSk7CmNvbnN0IHNwYWNlc1JlZ0V4cCA9IC9ccysvZzsKY29uc3QgY3JsZlJlZ0V4cCA9IC9bXHJcbl0rL2c7CmNvbnN0IGNybGZGb3JSaWNoVGV4dFJlZ0V4cCA9IC9cclxuPy9nOwpmdW5jdGlvbiBtYXBTdHlsZShzdHlsZVN0ciwgbm9kZSwgcmljaFRleHQpIHsKICBjb25zdCBzdHlsZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgaWYgKCFzdHlsZVN0cikgewogICAgcmV0dXJuIHN0eWxlOwogIH0KICBjb25zdCBvcmlnaW5hbCA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2Ygc3R5bGVTdHIuc3BsaXQoIjsiKS5tYXAocyA9PiBzLnNwbGl0KCI6IiwgMikpKSB7CiAgICBjb25zdCBtYXBwaW5nID0gU3R5bGVNYXBwaW5nLmdldChrZXkpOwogICAgaWYgKG1hcHBpbmcgPT09ICIiKSB7CiAgICAgIGNvbnRpbnVlOwogICAgfQogICAgbGV0IG5ld1ZhbHVlID0gdmFsdWU7CiAgICBpZiAobWFwcGluZykgewogICAgICBuZXdWYWx1ZSA9IHR5cGVvZiBtYXBwaW5nID09PSAic3RyaW5nIiA/IG1hcHBpbmcgOiBtYXBwaW5nKHZhbHVlLCBvcmlnaW5hbCk7CiAgICB9CiAgICBpZiAoa2V5LmVuZHNXaXRoKCJzY2FsZSIpKSB7CiAgICAgIHN0eWxlLnRyYW5zZm9ybSA9IHN0eWxlLnRyYW5zZm9ybSA/IGAke3N0eWxlW2tleV19ICR7bmV3VmFsdWV9YCA6IG5ld1ZhbHVlOwogICAgfSBlbHNlIHsKICAgICAgc3R5bGVba2V5LnJlcGxhY2VBbGwoLy0oW2EtekEtWl0pL2csIChfLCB4KSA9PiB4LnRvVXBwZXJDYXNlKCkpXSA9IG5ld1ZhbHVlOwogICAgfQogIH0KICBpZiAoc3R5bGUuZm9udEZhbWlseSkgewogICAgc2V0Rm9udEZhbWlseSh7CiAgICAgIHR5cGVmYWNlOiBzdHlsZS5mb250RmFtaWx5LAogICAgICB3ZWlnaHQ6IHN0eWxlLmZvbnRXZWlnaHQgfHwgIm5vcm1hbCIsCiAgICAgIHBvc3R1cmU6IHN0eWxlLmZvbnRTdHlsZSB8fCAibm9ybWFsIiwKICAgICAgc2l6ZTogb3JpZ2luYWwuZm9udFNpemUgfHwgMAogICAgfSwgbm9kZSwgbm9kZVskZ2xvYmFsRGF0YV0uZm9udEZpbmRlciwgc3R5bGUpOwogIH0KICBpZiAocmljaFRleHQgJiYgc3R5bGUudmVydGljYWxBbGlnbiAmJiBzdHlsZS52ZXJ0aWNhbEFsaWduICE9PSAiMHB4IiAmJiBzdHlsZS5mb250U2l6ZSkgewogICAgY29uc3QgU1VCX1NVUEVSX1NDUklQVF9GQUNUT1IgPSAwLjU4MzsKICAgIGNvbnN0IFZFUlRJQ0FMX0ZBQ1RPUiA9IDAuMzMzOwogICAgY29uc3QgZm9udFNpemUgPSBnZXRNZWFzdXJlbWVudChzdHlsZS5mb250U2l6ZSk7CiAgICBzdHlsZS5mb250U2l6ZSA9IG1lYXN1cmVUb1N0cmluZyhmb250U2l6ZSAqIFNVQl9TVVBFUl9TQ1JJUFRfRkFDVE9SKTsKICAgIHN0eWxlLnZlcnRpY2FsQWxpZ24gPSBtZWFzdXJlVG9TdHJpbmcoTWF0aC5zaWduKGdldE1lYXN1cmVtZW50KHN0eWxlLnZlcnRpY2FsQWxpZ24pKSAqIGZvbnRTaXplICogVkVSVElDQUxfRkFDVE9SKTsKICB9CiAgaWYgKHJpY2hUZXh0ICYmIHN0eWxlLmZvbnRTaXplKSB7CiAgICBzdHlsZS5mb250U2l6ZSA9IGBjYWxjKCR7c3R5bGUuZm9udFNpemV9ICogdmFyKC0tdG90YWwtc2NhbGUtZmFjdG9yKSlgOwogIH0KICBmaXhUZXh0SW5kZW50KHN0eWxlKTsKICByZXR1cm4gc3R5bGU7Cn0KZnVuY3Rpb24gY2hlY2tTdHlsZShub2RlKSB7CiAgaWYgKCFub2RlLnN0eWxlKSB7CiAgICByZXR1cm4gIiI7CiAgfQogIHJldHVybiBub2RlLnN0eWxlLnNwbGl0KCI7IikuZmlsdGVyKHMgPT4gISFzLnRyaW0oKSkubWFwKHMgPT4gcy5zcGxpdCgiOiIsIDIpLm1hcCh0ID0+IHQudHJpbSgpKSkuZmlsdGVyKChba2V5LCB2YWx1ZV0pID0+IHsKICAgIGlmIChrZXkgPT09ICJmb250LWZhbWlseSIpIHsKICAgICAgbm9kZVskZ2xvYmFsRGF0YV0udXNlZFR5cGVmYWNlcy5hZGQodmFsdWUpOwogICAgfQogICAgcmV0dXJuIFZBTElEX1NUWUxFUy5oYXMoa2V5KTsKICB9KS5tYXAoa3YgPT4ga3Yuam9pbigiOiIpKS5qb2luKCI7Iik7Cn0KY29uc3QgTm9XaGl0ZXMgPSBuZXcgU2V0KFsiYm9keSIsICJodG1sIl0pOwpjbGFzcyBYaHRtbE9iamVjdCBleHRlbmRzIFhtbE9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcywgbmFtZSkgewogICAgc3VwZXIoWEhUTUxfTlNfSUQsIG5hbWUpOwogICAgdGhpc1skcmljaFRleHRdID0gZmFsc2U7CiAgICB0aGlzLnN0eWxlID0gYXR0cmlidXRlcy5zdHlsZSB8fCAiIjsKICB9CiAgWyRjbGVhbl0oYnVpbGRlcikgewogICAgc3VwZXJbJGNsZWFuXShidWlsZGVyKTsKICAgIHRoaXMuc3R5bGUgPSBjaGVja1N0eWxlKHRoaXMpOwogIH0KICBbJGFjY2VwdFdoaXRlc3BhY2VdKCkgewogICAgcmV0dXJuICFOb1doaXRlcy5oYXModGhpc1skbm9kZU5hbWVdKTsKICB9CiAgWyRvblRleHRdKHN0ciwgcmljaFRleHQgPSBmYWxzZSkgewogICAgaWYgKCFyaWNoVGV4dCkgewogICAgICBzdHIgPSBzdHIucmVwbGFjZUFsbChjcmxmUmVnRXhwLCAiIik7CiAgICAgIGlmICghdGhpcy5zdHlsZS5pbmNsdWRlcygieGZhLXNwYWNlcnVuOnllcyIpKSB7CiAgICAgICAgc3RyID0gc3RyLnJlcGxhY2VBbGwoc3BhY2VzUmVnRXhwLCAiICIpOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICB0aGlzWyRyaWNoVGV4dF0gPSB0cnVlOwogICAgfQogICAgaWYgKHN0cikgewogICAgICB0aGlzWyRjb250ZW50XSArPSBzdHI7CiAgICB9CiAgfQogIFskcHVzaEdseXBoc10obWVhc3VyZSwgbXVzdFBvcCA9IHRydWUpIHsKICAgIGNvbnN0IHhmYUZvbnQgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgY29uc3QgbWFyZ2luID0gewogICAgICB0b3A6IE5hTiwKICAgICAgYm90dG9tOiBOYU4sCiAgICAgIGxlZnQ6IE5hTiwKICAgICAgcmlnaHQ6IE5hTgogICAgfTsKICAgIGxldCBsaW5lSGVpZ2h0ID0gbnVsbDsKICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIHRoaXMuc3R5bGUuc3BsaXQoIjsiKS5tYXAocyA9PiBzLnNwbGl0KCI6IiwgMikpKSB7CiAgICAgIHN3aXRjaCAoa2V5KSB7CiAgICAgICAgY2FzZSAiZm9udC1mYW1pbHkiOgogICAgICAgICAgeGZhRm9udC50eXBlZmFjZSA9IHN0cmlwUXVvdGVzKHZhbHVlKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgImZvbnQtc2l6ZSI6CiAgICAgICAgICB4ZmFGb250LnNpemUgPSBnZXRNZWFzdXJlbWVudCh2YWx1ZSk7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJmb250LXdlaWdodCI6CiAgICAgICAgICB4ZmFGb250LndlaWdodCA9IHZhbHVlOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAiZm9udC1zdHlsZSI6CiAgICAgICAgICB4ZmFGb250LnBvc3R1cmUgPSB2YWx1ZTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgImxldHRlci1zcGFjaW5nIjoKICAgICAgICAgIHhmYUZvbnQubGV0dGVyU3BhY2luZyA9IGdldE1lYXN1cmVtZW50KHZhbHVlKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgIm1hcmdpbiI6CiAgICAgICAgICBjb25zdCB2YWx1ZXMgPSB2YWx1ZS5zcGxpdCgvIFx0LykubWFwKHggPT4gZ2V0TWVhc3VyZW1lbnQoeCkpOwogICAgICAgICAgc3dpdGNoICh2YWx1ZXMubGVuZ3RoKSB7CiAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICBtYXJnaW4udG9wID0gbWFyZ2luLmJvdHRvbSA9IG1hcmdpbi5sZWZ0ID0gbWFyZ2luLnJpZ2h0ID0gdmFsdWVzWzBdOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgbWFyZ2luLnRvcCA9IG1hcmdpbi5ib3R0b20gPSB2YWx1ZXNbMF07CiAgICAgICAgICAgICAgbWFyZ2luLmxlZnQgPSBtYXJnaW4ucmlnaHQgPSB2YWx1ZXNbMV07CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICBtYXJnaW4udG9wID0gdmFsdWVzWzBdOwogICAgICAgICAgICAgIG1hcmdpbi5ib3R0b20gPSB2YWx1ZXNbMl07CiAgICAgICAgICAgICAgbWFyZ2luLmxlZnQgPSBtYXJnaW4ucmlnaHQgPSB2YWx1ZXNbMV07CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICBtYXJnaW4udG9wID0gdmFsdWVzWzBdOwogICAgICAgICAgICAgIG1hcmdpbi5sZWZ0ID0gdmFsdWVzWzFdOwogICAgICAgICAgICAgIG1hcmdpbi5ib3R0b20gPSB2YWx1ZXNbMl07CiAgICAgICAgICAgICAgbWFyZ2luLnJpZ2h0ID0gdmFsdWVzWzNdOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAibWFyZ2luLXRvcCI6CiAgICAgICAgICBtYXJnaW4udG9wID0gZ2V0TWVhc3VyZW1lbnQodmFsdWUpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAibWFyZ2luLWJvdHRvbSI6CiAgICAgICAgICBtYXJnaW4uYm90dG9tID0gZ2V0TWVhc3VyZW1lbnQodmFsdWUpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAibWFyZ2luLWxlZnQiOgogICAgICAgICAgbWFyZ2luLmxlZnQgPSBnZXRNZWFzdXJlbWVudCh2YWx1ZSk7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJtYXJnaW4tcmlnaHQiOgogICAgICAgICAgbWFyZ2luLnJpZ2h0ID0gZ2V0TWVhc3VyZW1lbnQodmFsdWUpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAibGluZS1oZWlnaHQiOgogICAgICAgICAgbGluZUhlaWdodCA9IGdldE1lYXN1cmVtZW50KHZhbHVlKTsKICAgICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CiAgICBtZWFzdXJlLnB1c2hEYXRhKHhmYUZvbnQsIG1hcmdpbiwgbGluZUhlaWdodCk7CiAgICBpZiAodGhpc1skY29udGVudF0pIHsKICAgICAgbWVhc3VyZS5hZGRTdHJpbmcodGhpc1skY29udGVudF0pOwogICAgfSBlbHNlIHsKICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiB0aGlzWyRnZXRDaGlsZHJlbl0oKSkgewogICAgICAgIGlmIChjaGlsZFskbm9kZU5hbWVdID09PSAiI3RleHQiKSB7CiAgICAgICAgICBtZWFzdXJlLmFkZFN0cmluZyhjaGlsZFskY29udGVudF0pOwogICAgICAgICAgY29udGludWU7CiAgICAgICAgfQogICAgICAgIGNoaWxkWyRwdXNoR2x5cGhzXShtZWFzdXJlKTsKICAgICAgfQogICAgfQogICAgaWYgKG11c3RQb3ApIHsKICAgICAgbWVhc3VyZS5wb3BGb250KCk7CiAgICB9CiAgfQogIFskdG9IVE1MXShhdmFpbGFibGVTcGFjZSkgewogICAgY29uc3QgY2hpbGRyZW4gPSBbXTsKICAgIHRoaXNbJGV4dHJhXSA9IHsKICAgICAgY2hpbGRyZW4KICAgIH07CiAgICB0aGlzWyRjaGlsZHJlblRvSFRNTF0oe30pOwogICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA9PT0gMCAmJiAhdGhpc1skY29udGVudF0pIHsKICAgICAgcmV0dXJuIEhUTUxSZXN1bHQuRU1QVFk7CiAgICB9CiAgICBsZXQgdmFsdWU7CiAgICBpZiAodGhpc1skcmljaFRleHRdKSB7CiAgICAgIHZhbHVlID0gdGhpc1skY29udGVudF0gPyB0aGlzWyRjb250ZW50XS5yZXBsYWNlQWxsKGNybGZGb3JSaWNoVGV4dFJlZ0V4cCwgIlxuIikgOiB1bmRlZmluZWQ7CiAgICB9IGVsc2UgewogICAgICB2YWx1ZSA9IHRoaXNbJGNvbnRlbnRdIHx8IHVuZGVmaW5lZDsKICAgIH0KICAgIHJldHVybiBIVE1MUmVzdWx0LnN1Y2Nlc3MoewogICAgICBuYW1lOiB0aGlzWyRub2RlTmFtZV0sCiAgICAgIGF0dHJpYnV0ZXM6IHsKICAgICAgICBocmVmOiB0aGlzLmhyZWYsCiAgICAgICAgc3R5bGU6IG1hcFN0eWxlKHRoaXMuc3R5bGUsIHRoaXMsIHRoaXNbJHJpY2hUZXh0XSkKICAgICAgfSwKICAgICAgY2hpbGRyZW4sCiAgICAgIHZhbHVlCiAgICB9KTsKICB9Cn0KY2xhc3MgQSBleHRlbmRzIFhodG1sT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihhdHRyaWJ1dGVzLCAiYSIpOwogICAgdGhpcy5ocmVmID0gZml4VVJMKGF0dHJpYnV0ZXMuaHJlZikgfHwgIiI7CiAgfQp9CmNsYXNzIEIgZXh0ZW5kcyBYaHRtbE9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoYXR0cmlidXRlcywgImIiKTsKICB9CiAgWyRwdXNoR2x5cGhzXShtZWFzdXJlKSB7CiAgICBtZWFzdXJlLnB1c2hGb250KHsKICAgICAgd2VpZ2h0OiAiYm9sZCIKICAgIH0pOwogICAgc3VwZXJbJHB1c2hHbHlwaHNdKG1lYXN1cmUpOwogICAgbWVhc3VyZS5wb3BGb250KCk7CiAgfQp9CmNsYXNzIEJvZHkgZXh0ZW5kcyBYaHRtbE9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoYXR0cmlidXRlcywgImJvZHkiKTsKICB9CiAgWyR0b0hUTUxdKGF2YWlsYWJsZVNwYWNlKSB7CiAgICBjb25zdCByZXMgPSBzdXBlclskdG9IVE1MXShhdmFpbGFibGVTcGFjZSk7CiAgICBjb25zdCB7CiAgICAgIGh0bWwKICAgIH0gPSByZXM7CiAgICBpZiAoIWh0bWwpIHsKICAgICAgcmV0dXJuIEhUTUxSZXN1bHQuRU1QVFk7CiAgICB9CiAgICBodG1sLm5hbWUgPSAiZGl2IjsKICAgIGh0bWwuYXR0cmlidXRlcy5jbGFzcyA9IFsieGZhUmljaCJdOwogICAgcmV0dXJuIHJlczsKICB9Cn0KY2xhc3MgQnIgZXh0ZW5kcyBYaHRtbE9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoYXR0cmlidXRlcywgImJyIik7CiAgfQogIFskdGV4dF0oKSB7CiAgICByZXR1cm4gIlxuIjsKICB9CiAgWyRwdXNoR2x5cGhzXShtZWFzdXJlKSB7CiAgICBtZWFzdXJlLmFkZFN0cmluZygiXG4iKTsKICB9CiAgWyR0b0hUTUxdKGF2YWlsYWJsZVNwYWNlKSB7CiAgICByZXR1cm4gSFRNTFJlc3VsdC5zdWNjZXNzKHsKICAgICAgbmFtZTogImJyIgogICAgfSk7CiAgfQp9CmNsYXNzIEh0bWwgZXh0ZW5kcyBYaHRtbE9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoYXR0cmlidXRlcywgImh0bWwiKTsKICB9CiAgWyR0b0hUTUxdKGF2YWlsYWJsZVNwYWNlKSB7CiAgICBjb25zdCBjaGlsZHJlbiA9IFtdOwogICAgdGhpc1skZXh0cmFdID0gewogICAgICBjaGlsZHJlbgogICAgfTsKICAgIHRoaXNbJGNoaWxkcmVuVG9IVE1MXSh7fSk7CiAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7CiAgICAgIHJldHVybiBIVE1MUmVzdWx0LnN1Y2Nlc3MoewogICAgICAgIG5hbWU6ICJkaXYiLAogICAgICAgIGF0dHJpYnV0ZXM6IHsKICAgICAgICAgIGNsYXNzOiBbInhmYVJpY2giXSwKICAgICAgICAgIHN0eWxlOiB7fQogICAgICAgIH0sCiAgICAgICAgdmFsdWU6IHRoaXNbJGNvbnRlbnRdIHx8ICIiCiAgICAgIH0pOwogICAgfQogICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA9PT0gMSkgewogICAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuWzBdOwogICAgICBpZiAoY2hpbGQuYXR0cmlidXRlcz8uY2xhc3MuaW5jbHVkZXMoInhmYVJpY2giKSkgewogICAgICAgIHJldHVybiBIVE1MUmVzdWx0LnN1Y2Nlc3MoY2hpbGQpOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gSFRNTFJlc3VsdC5zdWNjZXNzKHsKICAgICAgbmFtZTogImRpdiIsCiAgICAgIGF0dHJpYnV0ZXM6IHsKICAgICAgICBjbGFzczogWyJ4ZmFSaWNoIl0sCiAgICAgICAgc3R5bGU6IHt9CiAgICAgIH0sCiAgICAgIGNoaWxkcmVuCiAgICB9KTsKICB9Cn0KY2xhc3MgSSBleHRlbmRzIFhodG1sT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihhdHRyaWJ1dGVzLCAiaSIpOwogIH0KICBbJHB1c2hHbHlwaHNdKG1lYXN1cmUpIHsKICAgIG1lYXN1cmUucHVzaEZvbnQoewogICAgICBwb3N0dXJlOiAiaXRhbGljIgogICAgfSk7CiAgICBzdXBlclskcHVzaEdseXBoc10obWVhc3VyZSk7CiAgICBtZWFzdXJlLnBvcEZvbnQoKTsKICB9Cn0KY2xhc3MgTGkgZXh0ZW5kcyBYaHRtbE9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoYXR0cmlidXRlcywgImxpIik7CiAgfQp9CmNsYXNzIE9sIGV4dGVuZHMgWGh0bWxPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKGF0dHJpYnV0ZXMsICJvbCIpOwogIH0KfQpjbGFzcyBQIGV4dGVuZHMgWGh0bWxPYmplY3QgewogIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHsKICAgIHN1cGVyKGF0dHJpYnV0ZXMsICJwIik7CiAgfQogIFskcHVzaEdseXBoc10obWVhc3VyZSkgewogICAgc3VwZXJbJHB1c2hHbHlwaHNdKG1lYXN1cmUsIGZhbHNlKTsKICAgIG1lYXN1cmUuYWRkU3RyaW5nKCJcbiIpOwogICAgbWVhc3VyZS5hZGRQYXJhKCk7CiAgICBtZWFzdXJlLnBvcEZvbnQoKTsKICB9CiAgWyR0ZXh0XSgpIHsKICAgIGNvbnN0IHNpYmxpbmdzID0gdGhpc1skZ2V0UGFyZW50XSgpWyRnZXRDaGlsZHJlbl0oKTsKICAgIGlmIChzaWJsaW5ncy5hdCgtMSkgPT09IHRoaXMpIHsKICAgICAgcmV0dXJuIHN1cGVyWyR0ZXh0XSgpOwogICAgfQogICAgcmV0dXJuIHN1cGVyWyR0ZXh0XSgpICsgIlxuIjsKICB9Cn0KY2xhc3MgU3BhbiBleHRlbmRzIFhodG1sT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihhdHRyaWJ1dGVzLCAic3BhbiIpOwogIH0KfQpjbGFzcyBTdWIgZXh0ZW5kcyBYaHRtbE9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoYXR0cmlidXRlcywgInN1YiIpOwogIH0KfQpjbGFzcyBTdXAgZXh0ZW5kcyBYaHRtbE9iamVjdCB7CiAgY29uc3RydWN0b3IoYXR0cmlidXRlcykgewogICAgc3VwZXIoYXR0cmlidXRlcywgInN1cCIpOwogIH0KfQpjbGFzcyBVbCBleHRlbmRzIFhodG1sT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7CiAgICBzdXBlcihhdHRyaWJ1dGVzLCAidWwiKTsKICB9Cn0KY2xhc3MgWGh0bWxOYW1lc3BhY2UgewogIHN0YXRpYyBbJGJ1aWxkWEZBT2JqZWN0XShuYW1lLCBhdHRyaWJ1dGVzKSB7CiAgICBpZiAoWGh0bWxOYW1lc3BhY2UuaGFzT3duUHJvcGVydHkobmFtZSkpIHsKICAgICAgcmV0dXJuIFhodG1sTmFtZXNwYWNlW25hbWVdKGF0dHJpYnV0ZXMpOwogICAgfQogICAgcmV0dXJuIHVuZGVmaW5lZDsKICB9CiAgc3RhdGljIGEoYXR0cmlidXRlcykgewogICAgcmV0dXJuIG5ldyBBKGF0dHJpYnV0ZXMpOwogIH0KICBzdGF0aWMgYihhdHRyaWJ1dGVzKSB7CiAgICByZXR1cm4gbmV3IEIoYXR0cmlidXRlcyk7CiAgfQogIHN0YXRpYyBib2R5KGF0dHJpYnV0ZXMpIHsKICAgIHJldHVybiBuZXcgQm9keShhdHRyaWJ1dGVzKTsKICB9CiAgc3RhdGljIGJyKGF0dHJpYnV0ZXMpIHsKICAgIHJldHVybiBuZXcgQnIoYXR0cmlidXRlcyk7CiAgfQogIHN0YXRpYyBodG1sKGF0dHJpYnV0ZXMpIHsKICAgIHJldHVybiBuZXcgSHRtbChhdHRyaWJ1dGVzKTsKICB9CiAgc3RhdGljIGkoYXR0cmlidXRlcykgewogICAgcmV0dXJuIG5ldyBJKGF0dHJpYnV0ZXMpOwogIH0KICBzdGF0aWMgbGkoYXR0cmlidXRlcykgewogICAgcmV0dXJuIG5ldyBMaShhdHRyaWJ1dGVzKTsKICB9CiAgc3RhdGljIG9sKGF0dHJpYnV0ZXMpIHsKICAgIHJldHVybiBuZXcgT2woYXR0cmlidXRlcyk7CiAgfQogIHN0YXRpYyBwKGF0dHJpYnV0ZXMpIHsKICAgIHJldHVybiBuZXcgUChhdHRyaWJ1dGVzKTsKICB9CiAgc3RhdGljIHNwYW4oYXR0cmlidXRlcykgewogICAgcmV0dXJuIG5ldyBTcGFuKGF0dHJpYnV0ZXMpOwogIH0KICBzdGF0aWMgc3ViKGF0dHJpYnV0ZXMpIHsKICAgIHJldHVybiBuZXcgU3ViKGF0dHJpYnV0ZXMpOwogIH0KICBzdGF0aWMgc3VwKGF0dHJpYnV0ZXMpIHsKICAgIHJldHVybiBuZXcgU3VwKGF0dHJpYnV0ZXMpOwogIH0KICBzdGF0aWMgdWwoYXR0cmlidXRlcykgewogICAgcmV0dXJuIG5ldyBVbChhdHRyaWJ1dGVzKTsKICB9Cn0KCjsvLyAuL3NyYy9jb3JlL3hmYS9zZXR1cC5qcwoKCgoKCgoKCgpjb25zdCBOYW1lc3BhY2VTZXRVcCA9IHsKICBjb25maWc6IENvbmZpZ05hbWVzcGFjZSwKICBjb25uZWN0aW9uOiBDb25uZWN0aW9uU2V0TmFtZXNwYWNlLAogIGRhdGFzZXRzOiBEYXRhc2V0c05hbWVzcGFjZSwKICBsb2NhbGVTZXQ6IExvY2FsZVNldE5hbWVzcGFjZSwKICBzaWduYXR1cmU6IFNpZ25hdHVyZU5hbWVzcGFjZSwKICBzdHlsZXNoZWV0OiBTdHlsZXNoZWV0TmFtZXNwYWNlLAogIHRlbXBsYXRlOiBUZW1wbGF0ZU5hbWVzcGFjZSwKICB4ZHA6IFhkcE5hbWVzcGFjZSwKICB4aHRtbDogWGh0bWxOYW1lc3BhY2UKfTsKCjsvLyAuL3NyYy9jb3JlL3hmYS91bmtub3duLmpzCgoKY2xhc3MgVW5rbm93bk5hbWVzcGFjZSB7CiAgY29uc3RydWN0b3IobnNJZCkgewogICAgdGhpcy5uYW1lc3BhY2VJZCA9IG5zSWQ7CiAgfQogIFskYnVpbGRYRkFPYmplY3RdKG5hbWUsIGF0dHJpYnV0ZXMpIHsKICAgIHJldHVybiBuZXcgWG1sT2JqZWN0KHRoaXMubmFtZXNwYWNlSWQsIG5hbWUsIGF0dHJpYnV0ZXMpOwogIH0KfQoKOy8vIC4vc3JjL2NvcmUveGZhL2J1aWxkZXIuanMKCgoKCgoKCgoKCgpjbGFzcyBSb290IGV4dGVuZHMgWEZBT2JqZWN0IHsKICBjb25zdHJ1Y3RvcihpZHMpIHsKICAgIHN1cGVyKC0xLCAicm9vdCIsIE9iamVjdC5jcmVhdGUobnVsbCkpOwogICAgdGhpcy5lbGVtZW50ID0gbnVsbDsKICAgIHRoaXNbJGlkc10gPSBpZHM7CiAgfQogIFskb25DaGlsZF0oY2hpbGQpIHsKICAgIHRoaXMuZWxlbWVudCA9IGNoaWxkOwogICAgcmV0dXJuIHRydWU7CiAgfQogIFskZmluYWxpemVdKCkgewogICAgc3VwZXJbJGZpbmFsaXplXSgpOwogICAgaWYgKHRoaXMuZWxlbWVudC50ZW1wbGF0ZSBpbnN0YW5jZW9mIFRlbXBsYXRlKSB7CiAgICAgIHRoaXNbJGlkc10uc2V0KCRyb290LCB0aGlzLmVsZW1lbnQpOwogICAgICB0aGlzLmVsZW1lbnQudGVtcGxhdGVbJHJlc29sdmVQcm90b3R5cGVzXSh0aGlzWyRpZHNdKTsKICAgICAgdGhpcy5lbGVtZW50LnRlbXBsYXRlWyRpZHNdID0gdGhpc1skaWRzXTsKICAgIH0KICB9Cn0KY2xhc3MgRW1wdHkgZXh0ZW5kcyBYRkFPYmplY3QgewogIGNvbnN0cnVjdG9yKCkgewogICAgc3VwZXIoLTEsICIiLCBPYmplY3QuY3JlYXRlKG51bGwpKTsKICB9CiAgWyRvbkNoaWxkXShfKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQp9CmNsYXNzIEJ1aWxkZXIgewogIGNvbnN0cnVjdG9yKHJvb3ROYW1lU3BhY2UgPSBudWxsKSB7CiAgICB0aGlzLl9uYW1lc3BhY2VTdGFjayA9IFtdOwogICAgdGhpcy5fbnNBZ25vc3RpY0xldmVsID0gMDsKICAgIHRoaXMuX25hbWVzcGFjZVByZWZpeGVzID0gbmV3IE1hcCgpOwogICAgdGhpcy5fbmFtZXNwYWNlcyA9IG5ldyBNYXAoKTsKICAgIHRoaXMuX25leHROc0lkID0gTWF0aC5tYXgoLi4uT2JqZWN0LnZhbHVlcyhOYW1lc3BhY2VJZHMpLm1hcCgoewogICAgICBpZAogICAgfSkgPT4gaWQpKTsKICAgIHRoaXMuX2N1cnJlbnROYW1lc3BhY2UgPSByb290TmFtZVNwYWNlIHx8IG5ldyBVbmtub3duTmFtZXNwYWNlKCsrdGhpcy5fbmV4dE5zSWQpOwogIH0KICBidWlsZFJvb3QoaWRzKSB7CiAgICByZXR1cm4gbmV3IFJvb3QoaWRzKTsKICB9CiAgYnVpbGQoewogICAgbnNQcmVmaXgsCiAgICBuYW1lLAogICAgYXR0cmlidXRlcywKICAgIG5hbWVzcGFjZSwKICAgIHByZWZpeGVzCiAgfSkgewogICAgY29uc3QgaGFzTmFtZXNwYWNlRGVmID0gbmFtZXNwYWNlICE9PSBudWxsOwogICAgaWYgKGhhc05hbWVzcGFjZURlZikgewogICAgICB0aGlzLl9uYW1lc3BhY2VTdGFjay5wdXNoKHRoaXMuX2N1cnJlbnROYW1lc3BhY2UpOwogICAgICB0aGlzLl9jdXJyZW50TmFtZXNwYWNlID0gdGhpcy5fc2VhcmNoTmFtZXNwYWNlKG5hbWVzcGFjZSk7CiAgICB9CiAgICBpZiAocHJlZml4ZXMpIHsKICAgICAgdGhpcy5fYWRkTmFtZXNwYWNlUHJlZml4KHByZWZpeGVzKTsKICAgIH0KICAgIGlmIChhdHRyaWJ1dGVzLmhhc093blByb3BlcnR5KCRuc0F0dHJpYnV0ZXMpKSB7CiAgICAgIGNvbnN0IGRhdGFUZW1wbGF0ZSA9IE5hbWVzcGFjZVNldFVwLmRhdGFzZXRzOwogICAgICBjb25zdCBuc0F0dHJzID0gYXR0cmlidXRlc1skbnNBdHRyaWJ1dGVzXTsKICAgICAgbGV0IHhmYUF0dHJzID0gbnVsbDsKICAgICAgZm9yIChjb25zdCBbbnMsIGF0dHJzXSBvZiBPYmplY3QuZW50cmllcyhuc0F0dHJzKSkgewogICAgICAgIGNvbnN0IG5zVG9Vc2UgPSB0aGlzLl9nZXROYW1lc3BhY2VUb1VzZShucyk7CiAgICAgICAgaWYgKG5zVG9Vc2UgPT09IGRhdGFUZW1wbGF0ZSkgewogICAgICAgICAgeGZhQXR0cnMgPSB7CiAgICAgICAgICAgIHhmYTogYXR0cnMKICAgICAgICAgIH07CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKHhmYUF0dHJzKSB7CiAgICAgICAgYXR0cmlidXRlc1skbnNBdHRyaWJ1dGVzXSA9IHhmYUF0dHJzOwogICAgICB9IGVsc2UgewogICAgICAgIGRlbGV0ZSBhdHRyaWJ1dGVzWyRuc0F0dHJpYnV0ZXNdOwogICAgICB9CiAgICB9CiAgICBjb25zdCBuYW1lc3BhY2VUb1VzZSA9IHRoaXMuX2dldE5hbWVzcGFjZVRvVXNlKG5zUHJlZml4KTsKICAgIGNvbnN0IG5vZGUgPSBuYW1lc3BhY2VUb1VzZT8uWyRidWlsZFhGQU9iamVjdF0obmFtZSwgYXR0cmlidXRlcykgfHwgbmV3IEVtcHR5KCk7CiAgICBpZiAobm9kZVskaXNOc0Fnbm9zdGljXSgpKSB7CiAgICAgIHRoaXMuX25zQWdub3N0aWNMZXZlbCsrOwogICAgfQogICAgaWYgKGhhc05hbWVzcGFjZURlZiB8fCBwcmVmaXhlcyB8fCBub2RlWyRpc05zQWdub3N0aWNdKCkpIHsKICAgICAgbm9kZVskY2xlYW51cF0gPSB7CiAgICAgICAgaGFzTmFtZXNwYWNlOiBoYXNOYW1lc3BhY2VEZWYsCiAgICAgICAgcHJlZml4ZXMsCiAgICAgICAgbnNBZ25vc3RpYzogbm9kZVskaXNOc0Fnbm9zdGljXSgpCiAgICAgIH07CiAgICB9CiAgICByZXR1cm4gbm9kZTsKICB9CiAgaXNOc0Fnbm9zdGljKCkgewogICAgcmV0dXJuIHRoaXMuX25zQWdub3N0aWNMZXZlbCA+IDA7CiAgfQogIF9zZWFyY2hOYW1lc3BhY2UobnNOYW1lKSB7CiAgICBsZXQgbnMgPSB0aGlzLl9uYW1lc3BhY2VzLmdldChuc05hbWUpOwogICAgaWYgKG5zKSB7CiAgICAgIHJldHVybiBuczsKICAgIH0KICAgIGZvciAoY29uc3QgW25hbWUsIHsKICAgICAgY2hlY2sKICAgIH1dIG9mIE9iamVjdC5lbnRyaWVzKE5hbWVzcGFjZUlkcykpIHsKICAgICAgaWYgKGNoZWNrKG5zTmFtZSkpIHsKICAgICAgICBucyA9IE5hbWVzcGFjZVNldFVwW25hbWVdOwogICAgICAgIGlmIChucykgewogICAgICAgICAgdGhpcy5fbmFtZXNwYWNlcy5zZXQobnNOYW1lLCBucyk7CiAgICAgICAgICByZXR1cm4gbnM7CiAgICAgICAgfQogICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CiAgICBucyA9IG5ldyBVbmtub3duTmFtZXNwYWNlKCsrdGhpcy5fbmV4dE5zSWQpOwogICAgdGhpcy5fbmFtZXNwYWNlcy5zZXQobnNOYW1lLCBucyk7CiAgICByZXR1cm4gbnM7CiAgfQogIF9hZGROYW1lc3BhY2VQcmVmaXgocHJlZml4ZXMpIHsKICAgIGZvciAoY29uc3QgewogICAgICBwcmVmaXgsCiAgICAgIHZhbHVlCiAgICB9IG9mIHByZWZpeGVzKSB7CiAgICAgIGNvbnN0IG5hbWVzcGFjZSA9IHRoaXMuX3NlYXJjaE5hbWVzcGFjZSh2YWx1ZSk7CiAgICAgIGxldCBwcmVmaXhTdGFjayA9IHRoaXMuX25hbWVzcGFjZVByZWZpeGVzLmdldChwcmVmaXgpOwogICAgICBpZiAoIXByZWZpeFN0YWNrKSB7CiAgICAgICAgcHJlZml4U3RhY2sgPSBbXTsKICAgICAgICB0aGlzLl9uYW1lc3BhY2VQcmVmaXhlcy5zZXQocHJlZml4LCBwcmVmaXhTdGFjayk7CiAgICAgIH0KICAgICAgcHJlZml4U3RhY2sucHVzaChuYW1lc3BhY2UpOwogICAgfQogIH0KICBfZ2V0TmFtZXNwYWNlVG9Vc2UocHJlZml4KSB7CiAgICBpZiAoIXByZWZpeCkgewogICAgICByZXR1cm4gdGhpcy5fY3VycmVudE5hbWVzcGFjZTsKICAgIH0KICAgIGNvbnN0IHByZWZpeFN0YWNrID0gdGhpcy5fbmFtZXNwYWNlUHJlZml4ZXMuZ2V0KHByZWZpeCk7CiAgICBpZiAocHJlZml4U3RhY2s/Lmxlbmd0aCA+IDApIHsKICAgICAgcmV0dXJuIHByZWZpeFN0YWNrLmF0KC0xKTsKICAgIH0KICAgIHdhcm4oYFVua25vd24gbmFtZXNwYWNlIHByZWZpeDogJHtwcmVmaXh9LmApOwogICAgcmV0dXJuIG51bGw7CiAgfQogIGNsZWFuKGRhdGEpIHsKICAgIGNvbnN0IHsKICAgICAgaGFzTmFtZXNwYWNlLAogICAgICBwcmVmaXhlcywKICAgICAgbnNBZ25vc3RpYwogICAgfSA9IGRhdGE7CiAgICBpZiAoaGFzTmFtZXNwYWNlKSB7CiAgICAgIHRoaXMuX2N1cnJlbnROYW1lc3BhY2UgPSB0aGlzLl9uYW1lc3BhY2VTdGFjay5wb3AoKTsKICAgIH0KICAgIGlmIChwcmVmaXhlcykgewogICAgICBwcmVmaXhlcy5mb3JFYWNoKCh7CiAgICAgICAgcHJlZml4CiAgICAgIH0pID0+IHsKICAgICAgICB0aGlzLl9uYW1lc3BhY2VQcmVmaXhlcy5nZXQocHJlZml4KS5wb3AoKTsKICAgICAgfSk7CiAgICB9CiAgICBpZiAobnNBZ25vc3RpYykgewogICAgICB0aGlzLl9uc0Fnbm9zdGljTGV2ZWwtLTsKICAgIH0KICB9Cn0KCjsvLyAuL3NyYy9jb3JlL3hmYS9wYXJzZXIuanMKCgoKCgoKCgoKCgoKY2xhc3MgWEZBUGFyc2VyIGV4dGVuZHMgWE1MUGFyc2VyQmFzZSB7CiAgY29uc3RydWN0b3Iocm9vdE5hbWVTcGFjZSA9IG51bGwsIHJpY2hUZXh0ID0gZmFsc2UpIHsKICAgIHN1cGVyKCk7CiAgICB0aGlzLl9idWlsZGVyID0gbmV3IEJ1aWxkZXIocm9vdE5hbWVTcGFjZSk7CiAgICB0aGlzLl9zdGFjayA9IFtdOwogICAgdGhpcy5fZ2xvYmFsRGF0YSA9IHsKICAgICAgdXNlZFR5cGVmYWNlczogbmV3IFNldCgpCiAgICB9OwogICAgdGhpcy5faWRzID0gbmV3IE1hcCgpOwogICAgdGhpcy5fY3VycmVudCA9IHRoaXMuX2J1aWxkZXIuYnVpbGRSb290KHRoaXMuX2lkcyk7CiAgICB0aGlzLl9lcnJvckNvZGUgPSBYTUxQYXJzZXJFcnJvckNvZGUuTm9FcnJvcjsKICAgIHRoaXMuX3doaXRlUmVnZXggPSAvXlxzKyQvOwogICAgdGhpcy5fbmJzcHMgPSAvXHhhMCsvZzsKICAgIHRoaXMuX3JpY2hUZXh0ID0gcmljaFRleHQ7CiAgfQogIHBhcnNlKGRhdGEpIHsKICAgIHRoaXMucGFyc2VYbWwoZGF0YSk7CiAgICBpZiAodGhpcy5fZXJyb3JDb2RlICE9PSBYTUxQYXJzZXJFcnJvckNvZGUuTm9FcnJvcikgewogICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgfQogICAgdGhpcy5fY3VycmVudFskZmluYWxpemVdKCk7CiAgICByZXR1cm4gdGhpcy5fY3VycmVudC5lbGVtZW50OwogIH0KICBvblRleHQodGV4dCkgewogICAgdGV4dCA9IHRleHQucmVwbGFjZSh0aGlzLl9uYnNwcywgbWF0Y2ggPT4gbWF0Y2guc2xpY2UoMSkgKyAiICIpOwogICAgaWYgKHRoaXMuX3JpY2hUZXh0IHx8IHRoaXMuX2N1cnJlbnRbJGFjY2VwdFdoaXRlc3BhY2VdKCkpIHsKICAgICAgdGhpcy5fY3VycmVudFskb25UZXh0XSh0ZXh0LCB0aGlzLl9yaWNoVGV4dCk7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGlmICh0aGlzLl93aGl0ZVJlZ2V4LnRlc3QodGV4dCkpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgdGhpcy5fY3VycmVudFskb25UZXh0XSh0ZXh0LnRyaW0oKSk7CiAgfQogIG9uQ2RhdGEodGV4dCkgewogICAgdGhpcy5fY3VycmVudFskb25UZXh0XSh0ZXh0KTsKICB9CiAgX21rQXR0cmlidXRlcyhhdHRyaWJ1dGVzLCB0YWdOYW1lKSB7CiAgICBsZXQgbmFtZXNwYWNlID0gbnVsbDsKICAgIGxldCBwcmVmaXhlcyA9IG51bGw7CiAgICBjb25zdCBhdHRyaWJ1dGVPYmogPSBPYmplY3QuY3JlYXRlKHt9KTsKICAgIGZvciAoY29uc3QgewogICAgICBuYW1lLAogICAgICB2YWx1ZQogICAgfSBvZiBhdHRyaWJ1dGVzKSB7CiAgICAgIGlmIChuYW1lID09PSAieG1sbnMiKSB7CiAgICAgICAgaWYgKCFuYW1lc3BhY2UpIHsKICAgICAgICAgIG5hbWVzcGFjZSA9IHZhbHVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB3YXJuKGBYRkEgLSBtdWx0aXBsZSBuYW1lc3BhY2UgZGVmaW5pdGlvbiBpbiA8JHt0YWdOYW1lfT5gKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAobmFtZS5zdGFydHNXaXRoKCJ4bWxuczoiKSkgewogICAgICAgIGNvbnN0IHByZWZpeCA9IG5hbWUuc3Vic3RyaW5nKCJ4bWxuczoiLmxlbmd0aCk7CiAgICAgICAgcHJlZml4ZXMgPz89IFtdOwogICAgICAgIHByZWZpeGVzLnB1c2goewogICAgICAgICAgcHJlZml4LAogICAgICAgICAgdmFsdWUKICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICBjb25zdCBpID0gbmFtZS5pbmRleE9mKCI6Iik7CiAgICAgICAgaWYgKGkgPT09IC0xKSB7CiAgICAgICAgICBhdHRyaWJ1dGVPYmpbbmFtZV0gPSB2YWx1ZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY29uc3QgbnNBdHRycyA9IGF0dHJpYnV0ZU9ialskbnNBdHRyaWJ1dGVzXSA/Pz0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgICAgICAgIGNvbnN0IFtucywgYXR0ck5hbWVdID0gW25hbWUuc2xpY2UoMCwgaSksIG5hbWUuc2xpY2UoaSArIDEpXTsKICAgICAgICAgIGNvbnN0IGF0dHJzID0gbnNBdHRyc1tuc10gfHw9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgICAgICAgICBhdHRyc1thdHRyTmFtZV0gPSB2YWx1ZTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBbbmFtZXNwYWNlLCBwcmVmaXhlcywgYXR0cmlidXRlT2JqXTsKICB9CiAgX2dldE5hbWVBbmRQcmVmaXgobmFtZSwgbnNBZ25vc3RpYykgewogICAgY29uc3QgaSA9IG5hbWUuaW5kZXhPZigiOiIpOwogICAgaWYgKGkgPT09IC0xKSB7CiAgICAgIHJldHVybiBbbmFtZSwgbnVsbF07CiAgICB9CiAgICByZXR1cm4gW25hbWUuc3Vic3RyaW5nKGkgKyAxKSwgbnNBZ25vc3RpYyA/ICIiIDogbmFtZS5zdWJzdHJpbmcoMCwgaSldOwogIH0KICBvbkJlZ2luRWxlbWVudCh0YWdOYW1lLCBhdHRyaWJ1dGVzLCBpc0VtcHR5KSB7CiAgICBjb25zdCBbbmFtZXNwYWNlLCBwcmVmaXhlcywgYXR0cmlidXRlc09ial0gPSB0aGlzLl9ta0F0dHJpYnV0ZXMoYXR0cmlidXRlcywgdGFnTmFtZSk7CiAgICBjb25zdCBbbmFtZSwgbnNQcmVmaXhdID0gdGhpcy5fZ2V0TmFtZUFuZFByZWZpeCh0YWdOYW1lLCB0aGlzLl9idWlsZGVyLmlzTnNBZ25vc3RpYygpKTsKICAgIGNvbnN0IG5vZGUgPSB0aGlzLl9idWlsZGVyLmJ1aWxkKHsKICAgICAgbnNQcmVmaXgsCiAgICAgIG5hbWUsCiAgICAgIGF0dHJpYnV0ZXM6IGF0dHJpYnV0ZXNPYmosCiAgICAgIG5hbWVzcGFjZSwKICAgICAgcHJlZml4ZXMKICAgIH0pOwogICAgbm9kZVskZ2xvYmFsRGF0YV0gPSB0aGlzLl9nbG9iYWxEYXRhOwogICAgaWYgKGlzRW1wdHkpIHsKICAgICAgbm9kZVskZmluYWxpemVdKCk7CiAgICAgIGlmICh0aGlzLl9jdXJyZW50WyRvbkNoaWxkXShub2RlKSkgewogICAgICAgIG5vZGVbJHNldElkXSh0aGlzLl9pZHMpOwogICAgICB9CiAgICAgIG5vZGVbJGNsZWFuXSh0aGlzLl9idWlsZGVyKTsKICAgICAgcmV0dXJuOwogICAgfQogICAgdGhpcy5fc3RhY2sucHVzaCh0aGlzLl9jdXJyZW50KTsKICAgIHRoaXMuX2N1cnJlbnQgPSBub2RlOwogIH0KICBvbkVuZEVsZW1lbnQobmFtZSkgewogICAgY29uc3Qgbm9kZSA9IHRoaXMuX2N1cnJlbnQ7CiAgICBpZiAobm9kZVskaXNDREFUQVhtbF0oKSAmJiB0eXBlb2Ygbm9kZVskY29udGVudF0gPT09ICJzdHJpbmciKSB7CiAgICAgIGNvbnN0IHBhcnNlciA9IG5ldyBYRkFQYXJzZXIoKTsKICAgICAgcGFyc2VyLl9nbG9iYWxEYXRhID0gdGhpcy5fZ2xvYmFsRGF0YTsKICAgICAgY29uc3Qgcm9vdCA9IHBhcnNlci5wYXJzZShub2RlWyRjb250ZW50XSk7CiAgICAgIG5vZGVbJGNvbnRlbnRdID0gbnVsbDsKICAgICAgbm9kZVskb25DaGlsZF0ocm9vdCk7CiAgICB9CiAgICBub2RlWyRmaW5hbGl6ZV0oKTsKICAgIHRoaXMuX2N1cnJlbnQgPSB0aGlzLl9zdGFjay5wb3AoKTsKICAgIGlmICh0aGlzLl9jdXJyZW50WyRvbkNoaWxkXShub2RlKSkgewogICAgICBub2RlWyRzZXRJZF0odGhpcy5faWRzKTsKICAgIH0KICAgIG5vZGVbJGNsZWFuXSh0aGlzLl9idWlsZGVyKTsKICB9CiAgb25FcnJvcihjb2RlKSB7CiAgICB0aGlzLl9lcnJvckNvZGUgPSBjb2RlOwogIH0KfQoKOy8vIC4vc3JjL2NvcmUveGZhL2ZhY3RvcnkuanMKCgoKCgoKCgoKCgoKCmNsYXNzIFhGQUZhY3RvcnkgewogIGNvbnN0cnVjdG9yKGRhdGEpIHsKICAgIHRyeSB7CiAgICAgIHRoaXMucm9vdCA9IG5ldyBYRkFQYXJzZXIoKS5wYXJzZShYRkFGYWN0b3J5Ll9jcmVhdGVEb2N1bWVudChkYXRhKSk7CiAgICAgIGNvbnN0IGJpbmRlciA9IG5ldyBCaW5kZXIodGhpcy5yb290KTsKICAgICAgdGhpcy5mb3JtID0gYmluZGVyLmJpbmQoKTsKICAgICAgdGhpcy5kYXRhSGFuZGxlciA9IG5ldyBEYXRhSGFuZGxlcih0aGlzLnJvb3QsIGJpbmRlci5nZXREYXRhKCkpOwogICAgICB0aGlzLmZvcm1bJGdsb2JhbERhdGFdLnRlbXBsYXRlID0gdGhpcy5mb3JtOwogICAgfSBjYXRjaCAoZSkgewogICAgICB3YXJuKGBYRkEgLSBhbiBlcnJvciBvY2N1cnJlZCBkdXJpbmcgcGFyc2luZyBhbmQgYmluZGluZzogJHtlfWApOwogICAgfQogIH0KICBpc1ZhbGlkKCkgewogICAgcmV0dXJuICEhKHRoaXMucm9vdCAmJiB0aGlzLmZvcm0pOwogIH0KICBfY3JlYXRlUGFnZXNIZWxwZXIoKSB7CiAgICBjb25zdCBpdGVyYXRvciA9IHRoaXMuZm9ybVskdG9QYWdlc10oKTsKICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7CiAgICAgIGNvbnN0IG5leHRJdGVyYXRpb24gPSAoKSA9PiB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIGNvbnN0IHZhbHVlID0gaXRlcmF0b3IubmV4dCgpOwogICAgICAgICAgaWYgKHZhbHVlLmRvbmUpIHsKICAgICAgICAgICAgcmVzb2x2ZSh2YWx1ZS52YWx1ZSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBzZXRUaW1lb3V0KG5leHRJdGVyYXRpb24sIDApOwogICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgIHJlamVjdChlKTsKICAgICAgICB9CiAgICAgIH07CiAgICAgIHNldFRpbWVvdXQobmV4dEl0ZXJhdGlvbiwgMCk7CiAgICB9KTsKICB9CiAgYXN5bmMgX2NyZWF0ZVBhZ2VzKCkgewogICAgdHJ5IHsKICAgICAgdGhpcy5wYWdlcyA9IGF3YWl0IHRoaXMuX2NyZWF0ZVBhZ2VzSGVscGVyKCk7CiAgICAgIHRoaXMuZGltcyA9IHRoaXMucGFnZXMuY2hpbGRyZW4ubWFwKGMgPT4gewogICAgICAgIGNvbnN0IHsKICAgICAgICAgIHdpZHRoLAogICAgICAgICAgaGVpZ2h0CiAgICAgICAgfSA9IGMuYXR0cmlidXRlcy5zdHlsZTsKICAgICAgICByZXR1cm4gWzAsIDAsIHBhcnNlSW50KHdpZHRoKSwgcGFyc2VJbnQoaGVpZ2h0KV07CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB3YXJuKGBYRkEgLSBhbiBlcnJvciBvY2N1cnJlZCBkdXJpbmcgbGF5b3V0OiAke2V9YCk7CiAgICB9CiAgfQogIGdldEJvdW5kaW5nQm94KHBhZ2VJbmRleCkgewogICAgcmV0dXJuIHRoaXMuZGltc1twYWdlSW5kZXhdOwogIH0KICBhc3luYyBnZXROdW1QYWdlcygpIHsKICAgIGlmICghdGhpcy5wYWdlcykgewogICAgICBhd2FpdCB0aGlzLl9jcmVhdGVQYWdlcygpOwogICAgfQogICAgcmV0dXJuIHRoaXMuZGltcy5sZW5ndGg7CiAgfQogIHNldEltYWdlcyhpbWFnZXMpIHsKICAgIHRoaXMuZm9ybVskZ2xvYmFsRGF0YV0uaW1hZ2VzID0gaW1hZ2VzOwogIH0KICBzZXRGb250cyhmb250cykgewogICAgdGhpcy5mb3JtWyRnbG9iYWxEYXRhXS5mb250RmluZGVyID0gbmV3IEZvbnRGaW5kZXIoZm9udHMpOwogICAgY29uc3QgbWlzc2luZ0ZvbnRzID0gW107CiAgICBmb3IgKGxldCB0eXBlZmFjZSBvZiB0aGlzLmZvcm1bJGdsb2JhbERhdGFdLnVzZWRUeXBlZmFjZXMpIHsKICAgICAgdHlwZWZhY2UgPSBzdHJpcFF1b3Rlcyh0eXBlZmFjZSk7CiAgICAgIGNvbnN0IGZvbnQgPSB0aGlzLmZvcm1bJGdsb2JhbERhdGFdLmZvbnRGaW5kZXIuZmluZCh0eXBlZmFjZSk7CiAgICAgIGlmICghZm9udCkgewogICAgICAgIG1pc3NpbmdGb250cy5wdXNoKHR5cGVmYWNlKTsKICAgICAgfQogICAgfQogICAgaWYgKG1pc3NpbmdGb250cy5sZW5ndGggPiAwKSB7CiAgICAgIHJldHVybiBtaXNzaW5nRm9udHM7CiAgICB9CiAgICByZXR1cm4gbnVsbDsKICB9CiAgYXBwZW5kRm9udHMoZm9udHMsIHJlYWxseU1pc3NpbmdGb250cykgewogICAgdGhpcy5mb3JtWyRnbG9iYWxEYXRhXS5mb250RmluZGVyLmFkZChmb250cywgcmVhbGx5TWlzc2luZ0ZvbnRzKTsKICB9CiAgYXN5bmMgZ2V0UGFnZXMoKSB7CiAgICBpZiAoIXRoaXMucGFnZXMpIHsKICAgICAgYXdhaXQgdGhpcy5fY3JlYXRlUGFnZXMoKTsKICAgIH0KICAgIGNvbnN0IHBhZ2VzID0gdGhpcy5wYWdlczsKICAgIHRoaXMucGFnZXMgPSBudWxsOwogICAgcmV0dXJuIHBhZ2VzOwogIH0KICBzZXJpYWxpemVEYXRhKHN0b3JhZ2UpIHsKICAgIHJldHVybiB0aGlzLmRhdGFIYW5kbGVyLnNlcmlhbGl6ZShzdG9yYWdlKTsKICB9CiAgc3RhdGljIF9jcmVhdGVEb2N1bWVudChkYXRhKSB7CiAgICBpZiAoIWRhdGFbIi94ZHA6eGRwIl0pIHsKICAgICAgcmV0dXJuIGRhdGFbInhkcDp4ZHAiXTsKICAgIH0KICAgIHJldHVybiBPYmplY3QudmFsdWVzKGRhdGEpLmpvaW4oIiIpOwogIH0KICBzdGF0aWMgZ2V0UmljaFRleHRBc0h0bWwocmMpIHsKICAgIGlmICghcmMgfHwgdHlwZW9mIHJjICE9PSAic3RyaW5nIikgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIHRyeSB7CiAgICAgIGxldCByb290ID0gbmV3IFhGQVBhcnNlcihYaHRtbE5hbWVzcGFjZSwgdHJ1ZSkucGFyc2UocmMpOwogICAgICBpZiAoIVsiYm9keSIsICJ4aHRtbCJdLmluY2x1ZGVzKHJvb3RbJG5vZGVOYW1lXSkpIHsKICAgICAgICBjb25zdCBuZXdSb290ID0gWGh0bWxOYW1lc3BhY2UuYm9keSh7fSk7CiAgICAgICAgbmV3Um9vdFskYXBwZW5kQ2hpbGRdKHJvb3QpOwogICAgICAgIHJvb3QgPSBuZXdSb290OwogICAgICB9CiAgICAgIGNvbnN0IHJlc3VsdCA9IHJvb3RbJHRvSFRNTF0oKTsKICAgICAgaWYgKCFyZXN1bHQuc3VjY2VzcykgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CiAgICAgIGNvbnN0IHsKICAgICAgICBodG1sCiAgICAgIH0gPSByZXN1bHQ7CiAgICAgIGNvbnN0IHsKICAgICAgICBhdHRyaWJ1dGVzCiAgICAgIH0gPSBodG1sOwogICAgICBpZiAoYXR0cmlidXRlcykgewogICAgICAgIGlmIChhdHRyaWJ1dGVzLmNsYXNzKSB7CiAgICAgICAgICBhdHRyaWJ1dGVzLmNsYXNzID0gYXR0cmlidXRlcy5jbGFzcy5maWx0ZXIoYXR0ciA9PiAhYXR0ci5zdGFydHNXaXRoKCJ4ZmEiKSk7CiAgICAgICAgfQogICAgICAgIGF0dHJpYnV0ZXMuZGlyID0gImF1dG8iOwogICAgICB9CiAgICAgIHJldHVybiB7CiAgICAgICAgaHRtbCwKICAgICAgICBzdHI6IHJvb3RbJHRleHRdKCkKICAgICAgfTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgd2FybihgWEZBIC0gYW4gZXJyb3Igb2NjdXJyZWQgZHVyaW5nIHBhcnNpbmcgb2YgcmljaCB0ZXh0OiAke2V9YCk7CiAgICB9CiAgICByZXR1cm4gbnVsbDsKICB9Cn0KCjsvLyAuL3NyYy9jb3JlL2Fubm90YXRpb24uanMKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpjbGFzcyBBbm5vdGF0aW9uRmFjdG9yeSB7CiAgc3RhdGljIGNyZWF0ZUdsb2JhbHMocGRmTWFuYWdlcikgewogICAgcmV0dXJuIFByb21pc2UuYWxsKFtwZGZNYW5hZ2VyLmVuc3VyZUNhdGFsb2coImFjcm9Gb3JtIiksIHBkZk1hbmFnZXIuZW5zdXJlRG9jKCJ4ZmFEYXRhc2V0cyIpLCBwZGZNYW5hZ2VyLmVuc3VyZUNhdGFsb2coInN0cnVjdFRyZWVSb290IiksIHBkZk1hbmFnZXIuZW5zdXJlQ2F0YWxvZygiYmFzZVVybCIpLCBwZGZNYW5hZ2VyLmVuc3VyZUNhdGFsb2coImF0dGFjaG1lbnRzIiksIHBkZk1hbmFnZXIuZW5zdXJlQ2F0YWxvZygiZ2xvYmFsQ29sb3JTcGFjZUNhY2hlIildKS50aGVuKChbYWNyb0Zvcm0sIHhmYURhdGFzZXRzLCBzdHJ1Y3RUcmVlUm9vdCwgYmFzZVVybCwgYXR0YWNobWVudHMsIGdsb2JhbENvbG9yU3BhY2VDYWNoZV0pID0+ICh7CiAgICAgIHBkZk1hbmFnZXIsCiAgICAgIGFjcm9Gb3JtOiBhY3JvRm9ybSBpbnN0YW5jZW9mIERpY3QgPyBhY3JvRm9ybSA6IERpY3QuZW1wdHksCiAgICAgIHhmYURhdGFzZXRzLAogICAgICBzdHJ1Y3RUcmVlUm9vdCwKICAgICAgYmFzZVVybCwKICAgICAgYXR0YWNobWVudHMsCiAgICAgIGdsb2JhbENvbG9yU3BhY2VDYWNoZQogICAgfSksIHJlYXNvbiA9PiB7CiAgICAgIHdhcm4oYGNyZWF0ZUdsb2JhbHM6ICIke3JlYXNvbn0iLmApOwogICAgICByZXR1cm4gbnVsbDsKICAgIH0pOwogIH0KICBzdGF0aWMgYXN5bmMgY3JlYXRlKHhyZWYsIHJlZiwgYW5ub3RhdGlvbkdsb2JhbHMsIGlkRmFjdG9yeSwgY29sbGVjdEZpZWxkcywgb3JwaGFuRmllbGRzLCBjb2xsZWN0QnlUeXBlLCBwYWdlUmVmKSB7CiAgICBjb25zdCBwYWdlSW5kZXggPSBjb2xsZWN0RmllbGRzID8gYXdhaXQgdGhpcy5fZ2V0UGFnZUluZGV4KHhyZWYsIHJlZiwgYW5ub3RhdGlvbkdsb2JhbHMucGRmTWFuYWdlcikgOiBudWxsOwogICAgcmV0dXJuIGFubm90YXRpb25HbG9iYWxzLnBkZk1hbmFnZXIuZW5zdXJlKHRoaXMsICJfY3JlYXRlIiwgW3hyZWYsIHJlZiwgYW5ub3RhdGlvbkdsb2JhbHMsIGlkRmFjdG9yeSwgY29sbGVjdEZpZWxkcywgb3JwaGFuRmllbGRzLCBjb2xsZWN0QnlUeXBlLCBwYWdlSW5kZXgsIHBhZ2VSZWZdKTsKICB9CiAgc3RhdGljIF9jcmVhdGUoeHJlZiwgcmVmLCBhbm5vdGF0aW9uR2xvYmFscywgaWRGYWN0b3J5LCBjb2xsZWN0RmllbGRzID0gZmFsc2UsIG9ycGhhbkZpZWxkcyA9IG51bGwsIGNvbGxlY3RCeVR5cGUgPSBudWxsLCBwYWdlSW5kZXggPSBudWxsLCBwYWdlUmVmID0gbnVsbCkgewogICAgY29uc3QgZGljdCA9IHhyZWYuZmV0Y2hJZlJlZihyZWYpOwogICAgaWYgKCEoZGljdCBpbnN0YW5jZW9mIERpY3QpKSB7CiAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgICB9CiAgICBsZXQgc3VidHlwZSA9IGRpY3QuZ2V0KCJTdWJ0eXBlIik7CiAgICBzdWJ0eXBlID0gc3VidHlwZSBpbnN0YW5jZW9mIE5hbWUgPyBzdWJ0eXBlLm5hbWUgOiBudWxsOwogICAgaWYgKGNvbGxlY3RCeVR5cGUgJiYgIWNvbGxlY3RCeVR5cGUuaGFzKEFubm90YXRpb25UeXBlW3N1YnR5cGUudG9VcHBlckNhc2UoKV0pKSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgY29uc3QgewogICAgICBhY3JvRm9ybSwKICAgICAgcGRmTWFuYWdlcgogICAgfSA9IGFubm90YXRpb25HbG9iYWxzOwogICAgY29uc3QgaWQgPSByZWYgaW5zdGFuY2VvZiBSZWYgPyByZWYudG9TdHJpbmcoKSA6IGBhbm5vdF8ke2lkRmFjdG9yeS5jcmVhdGVPYmpJZCgpfWA7CiAgICBjb25zdCBwYXJhbWV0ZXJzID0gewogICAgICB4cmVmLAogICAgICByZWYsCiAgICAgIGRpY3QsCiAgICAgIHN1YnR5cGUsCiAgICAgIGlkLAogICAgICBhbm5vdGF0aW9uR2xvYmFscywKICAgICAgY29sbGVjdEZpZWxkcywKICAgICAgb3JwaGFuRmllbGRzLAogICAgICBuZWVkQXBwZWFyYW5jZXM6ICFjb2xsZWN0RmllbGRzICYmIGFjcm9Gb3JtLmdldCgiTmVlZEFwcGVhcmFuY2VzIikgPT09IHRydWUsCiAgICAgIHBhZ2VJbmRleCwKICAgICAgZXZhbHVhdG9yT3B0aW9uczogcGRmTWFuYWdlci5ldmFsdWF0b3JPcHRpb25zLAogICAgICBwYWdlUmVmCiAgICB9OwogICAgc3dpdGNoIChzdWJ0eXBlKSB7CiAgICAgIGNhc2UgIkxpbmsiOgogICAgICAgIHJldHVybiBuZXcgTGlua0Fubm90YXRpb24ocGFyYW1ldGVycyk7CiAgICAgIGNhc2UgIlRleHQiOgogICAgICAgIHJldHVybiBuZXcgVGV4dEFubm90YXRpb24ocGFyYW1ldGVycyk7CiAgICAgIGNhc2UgIldpZGdldCI6CiAgICAgICAgbGV0IGZpZWxkVHlwZSA9IGdldEluaGVyaXRhYmxlUHJvcGVydHkoewogICAgICAgICAgZGljdCwKICAgICAgICAgIGtleTogIkZUIgogICAgICAgIH0pOwogICAgICAgIGZpZWxkVHlwZSA9IGZpZWxkVHlwZSBpbnN0YW5jZW9mIE5hbWUgPyBmaWVsZFR5cGUubmFtZSA6IG51bGw7CiAgICAgICAgc3dpdGNoIChmaWVsZFR5cGUpIHsKICAgICAgICAgIGNhc2UgIlR4IjoKICAgICAgICAgICAgcmV0dXJuIG5ldyBUZXh0V2lkZ2V0QW5ub3RhdGlvbihwYXJhbWV0ZXJzKTsKICAgICAgICAgIGNhc2UgIkJ0biI6CiAgICAgICAgICAgIHJldHVybiBuZXcgQnV0dG9uV2lkZ2V0QW5ub3RhdGlvbihwYXJhbWV0ZXJzKTsKICAgICAgICAgIGNhc2UgIkNoIjoKICAgICAgICAgICAgcmV0dXJuIG5ldyBDaG9pY2VXaWRnZXRBbm5vdGF0aW9uKHBhcmFtZXRlcnMpOwogICAgICAgICAgY2FzZSAiU2lnIjoKICAgICAgICAgICAgcmV0dXJuIG5ldyBTaWduYXR1cmVXaWRnZXRBbm5vdGF0aW9uKHBhcmFtZXRlcnMpOwogICAgICAgIH0KICAgICAgICB3YXJuKGBVbmltcGxlbWVudGVkIHdpZGdldCBmaWVsZCB0eXBlICIke2ZpZWxkVHlwZX0iLCBgICsgImZhbGxpbmcgYmFjayB0byBiYXNlIGZpZWxkIHR5cGUuIik7CiAgICAgICAgcmV0dXJuIG5ldyBXaWRnZXRBbm5vdGF0aW9uKHBhcmFtZXRlcnMpOwogICAgICBjYXNlICJQb3B1cCI6CiAgICAgICAgcmV0dXJuIG5ldyBQb3B1cEFubm90YXRpb24ocGFyYW1ldGVycyk7CiAgICAgIGNhc2UgIkZyZWVUZXh0IjoKICAgICAgICByZXR1cm4gbmV3IEZyZWVUZXh0QW5ub3RhdGlvbihwYXJhbWV0ZXJzKTsKICAgICAgY2FzZSAiTGluZSI6CiAgICAgICAgcmV0dXJuIG5ldyBMaW5lQW5ub3RhdGlvbihwYXJhbWV0ZXJzKTsKICAgICAgY2FzZSAiU3F1YXJlIjoKICAgICAgICByZXR1cm4gbmV3IFNxdWFyZUFubm90YXRpb24ocGFyYW1ldGVycyk7CiAgICAgIGNhc2UgIkNpcmNsZSI6CiAgICAgICAgcmV0dXJuIG5ldyBDaXJjbGVBbm5vdGF0aW9uKHBhcmFtZXRlcnMpOwogICAgICBjYXNlICJQb2x5TGluZSI6CiAgICAgICAgcmV0dXJuIG5ldyBQb2x5bGluZUFubm90YXRpb24ocGFyYW1ldGVycyk7CiAgICAgIGNhc2UgIlBvbHlnb24iOgogICAgICAgIHJldHVybiBuZXcgUG9seWdvbkFubm90YXRpb24ocGFyYW1ldGVycyk7CiAgICAgIGNhc2UgIkNhcmV0IjoKICAgICAgICByZXR1cm4gbmV3IENhcmV0QW5ub3RhdGlvbihwYXJhbWV0ZXJzKTsKICAgICAgY2FzZSAiSW5rIjoKICAgICAgICByZXR1cm4gbmV3IElua0Fubm90YXRpb24ocGFyYW1ldGVycyk7CiAgICAgIGNhc2UgIkhpZ2hsaWdodCI6CiAgICAgICAgcmV0dXJuIG5ldyBIaWdobGlnaHRBbm5vdGF0aW9uKHBhcmFtZXRlcnMpOwogICAgICBjYXNlICJVbmRlcmxpbmUiOgogICAgICAgIHJldHVybiBuZXcgVW5kZXJsaW5lQW5ub3RhdGlvbihwYXJhbWV0ZXJzKTsKICAgICAgY2FzZSAiU3F1aWdnbHkiOgogICAgICAgIHJldHVybiBuZXcgU3F1aWdnbHlBbm5vdGF0aW9uKHBhcmFtZXRlcnMpOwogICAgICBjYXNlICJTdHJpa2VPdXQiOgogICAgICAgIHJldHVybiBuZXcgU3RyaWtlT3V0QW5ub3RhdGlvbihwYXJhbWV0ZXJzKTsKICAgICAgY2FzZSAiU3RhbXAiOgogICAgICAgIHJldHVybiBuZXcgU3RhbXBBbm5vdGF0aW9uKHBhcmFtZXRlcnMpOwogICAgICBjYXNlICJGaWxlQXR0YWNobWVudCI6CiAgICAgICAgcmV0dXJuIG5ldyBGaWxlQXR0YWNobWVudEFubm90YXRpb24ocGFyYW1ldGVycyk7CiAgICAgIGRlZmF1bHQ6CiAgICAgICAgaWYgKCFjb2xsZWN0RmllbGRzKSB7CiAgICAgICAgICBpZiAoIXN1YnR5cGUpIHsKICAgICAgICAgICAgd2FybigiQW5ub3RhdGlvbiBpcyBtaXNzaW5nIHRoZSByZXF1aXJlZCAvU3VidHlwZS4iKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHdhcm4oYFVuaW1wbGVtZW50ZWQgYW5ub3RhdGlvbiB0eXBlICIke3N1YnR5cGV9IiwgYCArICJmYWxsaW5nIGJhY2sgdG8gYmFzZSBhbm5vdGF0aW9uLiIpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3IEFubm90YXRpb24ocGFyYW1ldGVycyk7CiAgICB9CiAgfQogIHN0YXRpYyBhc3luYyBfZ2V0UGFnZUluZGV4KHhyZWYsIHJlZiwgcGRmTWFuYWdlcikgewogICAgdHJ5IHsKICAgICAgY29uc3QgYW5ub3REaWN0ID0gYXdhaXQgeHJlZi5mZXRjaElmUmVmQXN5bmMocmVmKTsKICAgICAgaWYgKCEoYW5ub3REaWN0IGluc3RhbmNlb2YgRGljdCkpIHsKICAgICAgICByZXR1cm4gLTE7CiAgICAgIH0KICAgICAgY29uc3QgcGFnZVJlZiA9IGFubm90RGljdC5nZXRSYXcoIlAiKTsKICAgICAgaWYgKHBhZ2VSZWYgaW5zdGFuY2VvZiBSZWYpIHsKICAgICAgICB0cnkgewogICAgICAgICAgY29uc3QgcGFnZUluZGV4ID0gYXdhaXQgcGRmTWFuYWdlci5lbnN1cmVDYXRhbG9nKCJnZXRQYWdlSW5kZXgiLCBbcGFnZVJlZl0pOwogICAgICAgICAgcmV0dXJuIHBhZ2VJbmRleDsKICAgICAgICB9IGNhdGNoIChleCkgewogICAgICAgICAgaW5mbyhgX2dldFBhZ2VJbmRleCAtLSBub3QgYSB2YWxpZCBwYWdlIHJlZmVyZW5jZTogIiR7ZXh9Ii5gKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKGFubm90RGljdC5oYXMoIktpZHMiKSkgewogICAgICAgIHJldHVybiAtMTsKICAgICAgfQogICAgICBjb25zdCBudW1QYWdlcyA9IGF3YWl0IHBkZk1hbmFnZXIuZW5zdXJlRG9jKCJudW1QYWdlcyIpOwogICAgICBmb3IgKGxldCBwYWdlSW5kZXggPSAwOyBwYWdlSW5kZXggPCBudW1QYWdlczsgcGFnZUluZGV4KyspIHsKICAgICAgICBjb25zdCBwYWdlID0gYXdhaXQgcGRmTWFuYWdlci5nZXRQYWdlKHBhZ2VJbmRleCk7CiAgICAgICAgY29uc3QgYW5ub3RhdGlvbnMgPSBhd2FpdCBwZGZNYW5hZ2VyLmVuc3VyZShwYWdlLCAiYW5ub3RhdGlvbnMiKTsKICAgICAgICBmb3IgKGNvbnN0IGFubm90UmVmIG9mIGFubm90YXRpb25zKSB7CiAgICAgICAgICBpZiAoYW5ub3RSZWYgaW5zdGFuY2VvZiBSZWYgJiYgaXNSZWZzRXF1YWwoYW5ub3RSZWYsIHJlZikpIHsKICAgICAgICAgICAgcmV0dXJuIHBhZ2VJbmRleDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0gY2F0Y2ggKGV4KSB7CiAgICAgIHdhcm4oYF9nZXRQYWdlSW5kZXg6ICIke2V4fSIuYCk7CiAgICB9CiAgICByZXR1cm4gLTE7CiAgfQogIHN0YXRpYyBnZW5lcmF0ZUltYWdlcyhhbm5vdGF0aW9ucywgeHJlZiwgaXNPZmZzY3JlZW5DYW52YXNTdXBwb3J0ZWQpIHsKICAgIGlmICghaXNPZmZzY3JlZW5DYW52YXNTdXBwb3J0ZWQpIHsKICAgICAgd2FybigiZ2VuZXJhdGVJbWFnZXM6IE9mZnNjcmVlbkNhbnZhcyBpcyBub3Qgc3VwcG9ydGVkLCBjYW5ub3Qgc2F2ZSBvciBwcmludCBzb21lIGFubm90YXRpb25zIHdpdGggaW1hZ2VzLiIpOwogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIGxldCBpbWFnZVByb21pc2VzOwogICAgZm9yIChjb25zdCB7CiAgICAgIGJpdG1hcElkLAogICAgICBiaXRtYXAKICAgIH0gb2YgYW5ub3RhdGlvbnMpIHsKICAgICAgaWYgKCFiaXRtYXApIHsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBpbWFnZVByb21pc2VzIHx8PSBuZXcgTWFwKCk7CiAgICAgIGltYWdlUHJvbWlzZXMuc2V0KGJpdG1hcElkLCBTdGFtcEFubm90YXRpb24uY3JlYXRlSW1hZ2UoYml0bWFwLCB4cmVmKSk7CiAgICB9CiAgICByZXR1cm4gaW1hZ2VQcm9taXNlczsKICB9CiAgc3RhdGljIGFzeW5jIHNhdmVOZXdBbm5vdGF0aW9ucyhldmFsdWF0b3IsIHRhc2ssIGFubm90YXRpb25zLCBpbWFnZVByb21pc2VzLCBjaGFuZ2VzKSB7CiAgICBjb25zdCB4cmVmID0gZXZhbHVhdG9yLnhyZWY7CiAgICBsZXQgYmFzZUZvbnRSZWY7CiAgICBjb25zdCBwcm9taXNlcyA9IFtdOwogICAgY29uc3QgewogICAgICBpc09mZnNjcmVlbkNhbnZhc1N1cHBvcnRlZAogICAgfSA9IGV2YWx1YXRvci5vcHRpb25zOwogICAgZm9yIChjb25zdCBhbm5vdGF0aW9uIG9mIGFubm90YXRpb25zKSB7CiAgICAgIGlmIChhbm5vdGF0aW9uLmRlbGV0ZWQpIHsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBzd2l0Y2ggKGFubm90YXRpb24uYW5ub3RhdGlvblR5cGUpIHsKICAgICAgICBjYXNlIEFubm90YXRpb25FZGl0b3JUeXBlLkZSRUVURVhUOgogICAgICAgICAgaWYgKCFiYXNlRm9udFJlZikgewogICAgICAgICAgICBjb25zdCBiYXNlRm9udCA9IG5ldyBEaWN0KHhyZWYpOwogICAgICAgICAgICBiYXNlRm9udC5zZXRJZk5hbWUoIkJhc2VGb250IiwgIkhlbHZldGljYSIpOwogICAgICAgICAgICBiYXNlRm9udC5zZXRJZk5hbWUoIlR5cGUiLCAiRm9udCIpOwogICAgICAgICAgICBiYXNlRm9udC5zZXRJZk5hbWUoIlN1YnR5cGUiLCAiVHlwZTEiKTsKICAgICAgICAgICAgYmFzZUZvbnQuc2V0SWZOYW1lKCJFbmNvZGluZyIsICJXaW5BbnNpRW5jb2RpbmciKTsKICAgICAgICAgICAgYmFzZUZvbnRSZWYgPSB4cmVmLmdldE5ld1RlbXBvcmFyeVJlZigpOwogICAgICAgICAgICBjaGFuZ2VzLnB1dChiYXNlRm9udFJlZiwgewogICAgICAgICAgICAgIGRhdGE6IGJhc2VGb250CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgICAgcHJvbWlzZXMucHVzaChGcmVlVGV4dEFubm90YXRpb24uY3JlYXRlTmV3QW5ub3RhdGlvbih4cmVmLCBhbm5vdGF0aW9uLCBjaGFuZ2VzLCB7CiAgICAgICAgICAgIGV2YWx1YXRvciwKICAgICAgICAgICAgdGFzaywKICAgICAgICAgICAgYmFzZUZvbnRSZWYKICAgICAgICAgIH0pKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgQW5ub3RhdGlvbkVkaXRvclR5cGUuSElHSExJR0hUOgogICAgICAgICAgaWYgKGFubm90YXRpb24ucXVhZFBvaW50cykgewogICAgICAgICAgICBwcm9taXNlcy5wdXNoKEhpZ2hsaWdodEFubm90YXRpb24uY3JlYXRlTmV3QW5ub3RhdGlvbih4cmVmLCBhbm5vdGF0aW9uLCBjaGFuZ2VzKSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBwcm9taXNlcy5wdXNoKElua0Fubm90YXRpb24uY3JlYXRlTmV3QW5ub3RhdGlvbih4cmVmLCBhbm5vdGF0aW9uLCBjaGFuZ2VzKSk7CiAgICAgICAgICB9CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIEFubm90YXRpb25FZGl0b3JUeXBlLklOSzoKICAgICAgICAgIHByb21pc2VzLnB1c2goSW5rQW5ub3RhdGlvbi5jcmVhdGVOZXdBbm5vdGF0aW9uKHhyZWYsIGFubm90YXRpb24sIGNoYW5nZXMpKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgQW5ub3RhdGlvbkVkaXRvclR5cGUuU1RBTVA6CiAgICAgICAgICBjb25zdCBpbWFnZSA9IGlzT2Zmc2NyZWVuQ2FudmFzU3VwcG9ydGVkID8gYXdhaXQgaW1hZ2VQcm9taXNlcz8uZ2V0KGFubm90YXRpb24uYml0bWFwSWQpIDogbnVsbDsKICAgICAgICAgIGlmIChpbWFnZT8uaW1hZ2VTdHJlYW0pIHsKICAgICAgICAgICAgY29uc3QgewogICAgICAgICAgICAgIGltYWdlU3RyZWFtLAogICAgICAgICAgICAgIHNtYXNrU3RyZWFtCiAgICAgICAgICAgIH0gPSBpbWFnZTsKICAgICAgICAgICAgaWYgKHNtYXNrU3RyZWFtKSB7CiAgICAgICAgICAgICAgY29uc3Qgc21hc2tSZWYgPSB4cmVmLmdldE5ld1RlbXBvcmFyeVJlZigpOwogICAgICAgICAgICAgIGNoYW5nZXMucHV0KHNtYXNrUmVmLCB7CiAgICAgICAgICAgICAgICBkYXRhOiBzbWFza1N0cmVhbQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIGltYWdlU3RyZWFtLmRpY3Quc2V0KCJTTWFzayIsIHNtYXNrUmVmKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjb25zdCBpbWFnZVJlZiA9IGltYWdlLmltYWdlUmVmID0geHJlZi5nZXROZXdUZW1wb3JhcnlSZWYoKTsKICAgICAgICAgICAgY2hhbmdlcy5wdXQoaW1hZ2VSZWYsIHsKICAgICAgICAgICAgICBkYXRhOiBpbWFnZVN0cmVhbQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgaW1hZ2UuaW1hZ2VTdHJlYW0gPSBpbWFnZS5zbWFza1N0cmVhbSA9IG51bGw7CiAgICAgICAgICB9CiAgICAgICAgICBwcm9taXNlcy5wdXNoKFN0YW1wQW5ub3RhdGlvbi5jcmVhdGVOZXdBbm5vdGF0aW9uKHhyZWYsIGFubm90YXRpb24sIGNoYW5nZXMsIHsKICAgICAgICAgICAgaW1hZ2UKICAgICAgICAgIH0pKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgQW5ub3RhdGlvbkVkaXRvclR5cGUuU0lHTkFUVVJFOgogICAgICAgICAgcHJvbWlzZXMucHVzaChTdGFtcEFubm90YXRpb24uY3JlYXRlTmV3QW5ub3RhdGlvbih4cmVmLCBhbm5vdGF0aW9uLCBjaGFuZ2VzLCB7fSkpOwogICAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiB7CiAgICAgIGFubm90YXRpb25zOiAoYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpKS5mbGF0KCkKICAgIH07CiAgfQogIHN0YXRpYyBhc3luYyBwcmludE5ld0Fubm90YXRpb25zKGFubm90YXRpb25HbG9iYWxzLCBldmFsdWF0b3IsIHRhc2ssIGFubm90YXRpb25zLCBpbWFnZVByb21pc2VzKSB7CiAgICBpZiAoIWFubm90YXRpb25zKSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgY29uc3QgewogICAgICBvcHRpb25zLAogICAgICB4cmVmCiAgICB9ID0gZXZhbHVhdG9yOwogICAgY29uc3QgcHJvbWlzZXMgPSBbXTsKICAgIGZvciAoY29uc3QgYW5ub3RhdGlvbiBvZiBhbm5vdGF0aW9ucykgewogICAgICBpZiAoYW5ub3RhdGlvbi5kZWxldGVkKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgc3dpdGNoIChhbm5vdGF0aW9uLmFubm90YXRpb25UeXBlKSB7CiAgICAgICAgY2FzZSBBbm5vdGF0aW9uRWRpdG9yVHlwZS5GUkVFVEVYVDoKICAgICAgICAgIHByb21pc2VzLnB1c2goRnJlZVRleHRBbm5vdGF0aW9uLmNyZWF0ZU5ld1ByaW50QW5ub3RhdGlvbihhbm5vdGF0aW9uR2xvYmFscywgeHJlZiwgYW5ub3RhdGlvbiwgewogICAgICAgICAgICBldmFsdWF0b3IsCiAgICAgICAgICAgIHRhc2ssCiAgICAgICAgICAgIGV2YWx1YXRvck9wdGlvbnM6IG9wdGlvbnMKICAgICAgICAgIH0pKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgQW5ub3RhdGlvbkVkaXRvclR5cGUuSElHSExJR0hUOgogICAgICAgICAgaWYgKGFubm90YXRpb24ucXVhZFBvaW50cykgewogICAgICAgICAgICBwcm9taXNlcy5wdXNoKEhpZ2hsaWdodEFubm90YXRpb24uY3JlYXRlTmV3UHJpbnRBbm5vdGF0aW9uKGFubm90YXRpb25HbG9iYWxzLCB4cmVmLCBhbm5vdGF0aW9uLCB7CiAgICAgICAgICAgICAgZXZhbHVhdG9yT3B0aW9uczogb3B0aW9ucwogICAgICAgICAgICB9KSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBwcm9taXNlcy5wdXNoKElua0Fubm90YXRpb24uY3JlYXRlTmV3UHJpbnRBbm5vdGF0aW9uKGFubm90YXRpb25HbG9iYWxzLCB4cmVmLCBhbm5vdGF0aW9uLCB7CiAgICAgICAgICAgICAgZXZhbHVhdG9yT3B0aW9uczogb3B0aW9ucwogICAgICAgICAgICB9KSk7CiAgICAgICAgICB9CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIEFubm90YXRpb25FZGl0b3JUeXBlLklOSzoKICAgICAgICAgIHByb21pc2VzLnB1c2goSW5rQW5ub3RhdGlvbi5jcmVhdGVOZXdQcmludEFubm90YXRpb24oYW5ub3RhdGlvbkdsb2JhbHMsIHhyZWYsIGFubm90YXRpb24sIHsKICAgICAgICAgICAgZXZhbHVhdG9yT3B0aW9uczogb3B0aW9ucwogICAgICAgICAgfSkpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSBBbm5vdGF0aW9uRWRpdG9yVHlwZS5TVEFNUDoKICAgICAgICAgIGNvbnN0IGltYWdlID0gb3B0aW9ucy5pc09mZnNjcmVlbkNhbnZhc1N1cHBvcnRlZCA/IGF3YWl0IGltYWdlUHJvbWlzZXM/LmdldChhbm5vdGF0aW9uLmJpdG1hcElkKSA6IG51bGw7CiAgICAgICAgICBpZiAoaW1hZ2U/LmltYWdlU3RyZWFtKSB7CiAgICAgICAgICAgIGNvbnN0IHsKICAgICAgICAgICAgICBpbWFnZVN0cmVhbSwKICAgICAgICAgICAgICBzbWFza1N0cmVhbQogICAgICAgICAgICB9ID0gaW1hZ2U7CiAgICAgICAgICAgIGlmIChzbWFza1N0cmVhbSkgewogICAgICAgICAgICAgIGltYWdlU3RyZWFtLmRpY3Quc2V0KCJTTWFzayIsIHNtYXNrU3RyZWFtKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpbWFnZS5pbWFnZVJlZiA9IG5ldyBKcGVnU3RyZWFtKGltYWdlU3RyZWFtLCBpbWFnZVN0cmVhbS5sZW5ndGgpOwogICAgICAgICAgICBpbWFnZS5pbWFnZVN0cmVhbSA9IGltYWdlLnNtYXNrU3RyZWFtID0gbnVsbDsKICAgICAgICAgIH0KICAgICAgICAgIHByb21pc2VzLnB1c2goU3RhbXBBbm5vdGF0aW9uLmNyZWF0ZU5ld1ByaW50QW5ub3RhdGlvbihhbm5vdGF0aW9uR2xvYmFscywgeHJlZiwgYW5ub3RhdGlvbiwgewogICAgICAgICAgICBpbWFnZSwKICAgICAgICAgICAgZXZhbHVhdG9yT3B0aW9uczogb3B0aW9ucwogICAgICAgICAgfSkpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSBBbm5vdGF0aW9uRWRpdG9yVHlwZS5TSUdOQVRVUkU6CiAgICAgICAgICBwcm9taXNlcy5wdXNoKFN0YW1wQW5ub3RhdGlvbi5jcmVhdGVOZXdQcmludEFubm90YXRpb24oYW5ub3RhdGlvbkdsb2JhbHMsIHhyZWYsIGFubm90YXRpb24sIHsKICAgICAgICAgICAgZXZhbHVhdG9yT3B0aW9uczogb3B0aW9ucwogICAgICAgICAgfSkpOwogICAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7CiAgfQp9CmZ1bmN0aW9uIGdldFJnYkNvbG9yKGNvbG9yLCBkZWZhdWx0Q29sb3IgPSBuZXcgVWludDhDbGFtcGVkQXJyYXkoMykpIHsKICBpZiAoIUFycmF5LmlzQXJyYXkoY29sb3IpKSB7CiAgICByZXR1cm4gZGVmYXVsdENvbG9yOwogIH0KICBjb25zdCByZ2JDb2xvciA9IGRlZmF1bHRDb2xvciB8fCBuZXcgVWludDhDbGFtcGVkQXJyYXkoMyk7CiAgc3dpdGNoIChjb2xvci5sZW5ndGgpIHsKICAgIGNhc2UgMDoKICAgICAgcmV0dXJuIG51bGw7CiAgICBjYXNlIDE6CiAgICAgIENvbG9yU3BhY2VVdGlscy5ncmF5LmdldFJnYkl0ZW0oY29sb3IsIDAsIHJnYkNvbG9yLCAwKTsKICAgICAgcmV0dXJuIHJnYkNvbG9yOwogICAgY2FzZSAzOgogICAgICBDb2xvclNwYWNlVXRpbHMucmdiLmdldFJnYkl0ZW0oY29sb3IsIDAsIHJnYkNvbG9yLCAwKTsKICAgICAgcmV0dXJuIHJnYkNvbG9yOwogICAgY2FzZSA0OgogICAgICBDb2xvclNwYWNlVXRpbHMuY215ay5nZXRSZ2JJdGVtKGNvbG9yLCAwLCByZ2JDb2xvciwgMCk7CiAgICAgIHJldHVybiByZ2JDb2xvcjsKICAgIGRlZmF1bHQ6CiAgICAgIHJldHVybiBkZWZhdWx0Q29sb3I7CiAgfQp9CmZ1bmN0aW9uIGdldFBkZkNvbG9yQXJyYXkoY29sb3IsIGRlZmF1bHRWYWx1ZSA9IG51bGwpIHsKICByZXR1cm4gY29sb3IgJiYgQXJyYXkuZnJvbShjb2xvciwgYyA9PiBjIC8gMjU1KSB8fCBkZWZhdWx0VmFsdWU7Cn0KZnVuY3Rpb24gZ2V0UXVhZFBvaW50cyhkaWN0LCByZWN0KSB7CiAgY29uc3QgcXVhZFBvaW50cyA9IGRpY3QuZ2V0QXJyYXkoIlF1YWRQb2ludHMiKTsKICBpZiAoIWlzTnVtYmVyQXJyYXkocXVhZFBvaW50cywgbnVsbCkgfHwgcXVhZFBvaW50cy5sZW5ndGggPT09IDAgfHwgcXVhZFBvaW50cy5sZW5ndGggJSA4ID4gMCkgewogICAgcmV0dXJuIG51bGw7CiAgfQogIGNvbnN0IG5ld1F1YWRQb2ludHMgPSBuZXcgRmxvYXQzMkFycmF5KHF1YWRQb2ludHMubGVuZ3RoKTsKICBmb3IgKGxldCBpID0gMCwgaWkgPSBxdWFkUG9pbnRzLmxlbmd0aDsgaSA8IGlpOyBpICs9IDgpIHsKICAgIGNvbnN0IFt4MSwgeTEsIHgyLCB5MiwgeDMsIHkzLCB4NCwgeTRdID0gcXVhZFBvaW50cy5zbGljZShpLCBpICsgOCk7CiAgICBjb25zdCBtaW5YID0gTWF0aC5taW4oeDEsIHgyLCB4MywgeDQpOwogICAgY29uc3QgbWF4WCA9IE1hdGgubWF4KHgxLCB4MiwgeDMsIHg0KTsKICAgIGNvbnN0IG1pblkgPSBNYXRoLm1pbih5MSwgeTIsIHkzLCB5NCk7CiAgICBjb25zdCBtYXhZID0gTWF0aC5tYXgoeTEsIHkyLCB5MywgeTQpOwogICAgaWYgKHJlY3QgIT09IG51bGwgJiYgKG1pblggPCByZWN0WzBdIHx8IG1heFggPiByZWN0WzJdIHx8IG1pblkgPCByZWN0WzFdIHx8IG1heFkgPiByZWN0WzNdKSkgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIG5ld1F1YWRQb2ludHMuc2V0KFttaW5YLCBtYXhZLCBtYXhYLCBtYXhZLCBtaW5YLCBtaW5ZLCBtYXhYLCBtaW5ZXSwgaSk7CiAgfQogIHJldHVybiBuZXdRdWFkUG9pbnRzOwp9CmZ1bmN0aW9uIGdldFRyYW5zZm9ybU1hdHJpeChyZWN0LCBiYm94LCBtYXRyaXgpIHsKICBjb25zdCBtaW5NYXggPSBuZXcgRmxvYXQzMkFycmF5KFtJbmZpbml0eSwgSW5maW5pdHksIC1JbmZpbml0eSwgLUluZmluaXR5XSk7CiAgVXRpbC5heGlhbEFsaWduZWRCb3VuZGluZ0JveChiYm94LCBtYXRyaXgsIG1pbk1heCk7CiAgY29uc3QgW21pblgsIG1pblksIG1heFgsIG1heFldID0gbWluTWF4OwogIGlmIChtaW5YID09PSBtYXhYIHx8IG1pblkgPT09IG1heFkpIHsKICAgIHJldHVybiBbMSwgMCwgMCwgMSwgcmVjdFswXSwgcmVjdFsxXV07CiAgfQogIGNvbnN0IHhSYXRpbyA9IChyZWN0WzJdIC0gcmVjdFswXSkgLyAobWF4WCAtIG1pblgpOwogIGNvbnN0IHlSYXRpbyA9IChyZWN0WzNdIC0gcmVjdFsxXSkgLyAobWF4WSAtIG1pblkpOwogIHJldHVybiBbeFJhdGlvLCAwLCAwLCB5UmF0aW8sIHJlY3RbMF0gLSBtaW5YICogeFJhdGlvLCByZWN0WzFdIC0gbWluWSAqIHlSYXRpb107Cn0KY2xhc3MgQW5ub3RhdGlvbiB7CiAgY29uc3RydWN0b3IocGFyYW1zKSB7CiAgICBjb25zdCB7CiAgICAgIGRpY3QsCiAgICAgIHhyZWYsCiAgICAgIGFubm90YXRpb25HbG9iYWxzLAogICAgICByZWYsCiAgICAgIG9ycGhhbkZpZWxkcwogICAgfSA9IHBhcmFtczsKICAgIGNvbnN0IHBhcmVudFJlZiA9IG9ycGhhbkZpZWxkcz8uZ2V0KHJlZik7CiAgICBpZiAocGFyZW50UmVmKSB7CiAgICAgIGRpY3Quc2V0KCJQYXJlbnQiLCBwYXJlbnRSZWYpOwogICAgfQogICAgdGhpcy5zZXRUaXRsZShkaWN0LmdldCgiVCIpKTsKICAgIHRoaXMuc2V0Q29udGVudHMoZGljdC5nZXQoIkNvbnRlbnRzIikpOwogICAgdGhpcy5zZXRNb2RpZmljYXRpb25EYXRlKGRpY3QuZ2V0KCJNIikpOwogICAgdGhpcy5zZXRGbGFncyhkaWN0LmdldCgiRiIpKTsKICAgIHRoaXMuc2V0UmVjdGFuZ2xlKGRpY3QuZ2V0QXJyYXkoIlJlY3QiKSk7CiAgICB0aGlzLnNldENvbG9yKGRpY3QuZ2V0QXJyYXkoIkMiKSk7CiAgICB0aGlzLnNldEJvcmRlclN0eWxlKGRpY3QpOwogICAgdGhpcy5zZXRBcHBlYXJhbmNlKGRpY3QpOwogICAgdGhpcy5zZXRPcHRpb25hbENvbnRlbnQoZGljdCk7CiAgICBjb25zdCBNSyA9IGRpY3QuZ2V0KCJNSyIpOwogICAgdGhpcy5zZXRCb3JkZXJBbmRCYWNrZ3JvdW5kQ29sb3JzKE1LKTsKICAgIHRoaXMuc2V0Um90YXRpb24oTUssIGRpY3QpOwogICAgdGhpcy5yZWYgPSBwYXJhbXMucmVmIGluc3RhbmNlb2YgUmVmID8gcGFyYW1zLnJlZiA6IG51bGw7CiAgICB0aGlzLl9zdHJlYW1zID0gW107CiAgICBpZiAodGhpcy5hcHBlYXJhbmNlKSB7CiAgICAgIHRoaXMuX3N0cmVhbXMucHVzaCh0aGlzLmFwcGVhcmFuY2UpOwogICAgfQogICAgY29uc3QgaXNMb2NrZWQgPSAhISh0aGlzLmZsYWdzICYgQW5ub3RhdGlvbkZsYWcuTE9DS0VEKTsKICAgIGNvbnN0IGlzQ29udGVudExvY2tlZCA9ICEhKHRoaXMuZmxhZ3MgJiBBbm5vdGF0aW9uRmxhZy5MT0NLRURDT05URU5UUyk7CiAgICB0aGlzLmRhdGEgPSB7CiAgICAgIGFubm90YXRpb25GbGFnczogdGhpcy5mbGFncywKICAgICAgYm9yZGVyU3R5bGU6IHRoaXMuYm9yZGVyU3R5bGUsCiAgICAgIGNvbG9yOiB0aGlzLmNvbG9yLAogICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMuYmFja2dyb3VuZENvbG9yLAogICAgICBib3JkZXJDb2xvcjogdGhpcy5ib3JkZXJDb2xvciwKICAgICAgcm90YXRpb246IHRoaXMucm90YXRpb24sCiAgICAgIGNvbnRlbnRzT2JqOiB0aGlzLl9jb250ZW50cywKICAgICAgaGFzQXBwZWFyYW5jZTogISF0aGlzLmFwcGVhcmFuY2UsCiAgICAgIGlkOiBwYXJhbXMuaWQsCiAgICAgIG1vZGlmaWNhdGlvbkRhdGU6IHRoaXMubW9kaWZpY2F0aW9uRGF0ZSwKICAgICAgcmVjdDogdGhpcy5yZWN0YW5nbGUsCiAgICAgIHN1YnR5cGU6IHBhcmFtcy5zdWJ0eXBlLAogICAgICBoYXNPd25DYW52YXM6IGZhbHNlLAogICAgICBub1JvdGF0ZTogISEodGhpcy5mbGFncyAmIEFubm90YXRpb25GbGFnLk5PUk9UQVRFKSwKICAgICAgbm9IVE1MOiBpc0xvY2tlZCAmJiBpc0NvbnRlbnRMb2NrZWQsCiAgICAgIGlzRWRpdGFibGU6IGZhbHNlLAogICAgICBzdHJ1Y3RQYXJlbnQ6IC0xCiAgICB9OwogICAgaWYgKGFubm90YXRpb25HbG9iYWxzLnN0cnVjdFRyZWVSb290KSB7CiAgICAgIGxldCBzdHJ1Y3RQYXJlbnQgPSBkaWN0LmdldCgiU3RydWN0UGFyZW50Iik7CiAgICAgIHRoaXMuZGF0YS5zdHJ1Y3RQYXJlbnQgPSBzdHJ1Y3RQYXJlbnQgPSBOdW1iZXIuaXNJbnRlZ2VyKHN0cnVjdFBhcmVudCkgJiYgc3RydWN0UGFyZW50ID49IDAgPyBzdHJ1Y3RQYXJlbnQgOiAtMTsKICAgICAgYW5ub3RhdGlvbkdsb2JhbHMuc3RydWN0VHJlZVJvb3QuYWRkQW5ub3RhdGlvbklkVG9QYWdlKHBhcmFtcy5wYWdlUmVmLCBzdHJ1Y3RQYXJlbnQpOwogICAgfQogICAgaWYgKHBhcmFtcy5jb2xsZWN0RmllbGRzKSB7CiAgICAgIGNvbnN0IGtpZHMgPSBkaWN0LmdldCgiS2lkcyIpOwogICAgICBpZiAoQXJyYXkuaXNBcnJheShraWRzKSkgewogICAgICAgIGNvbnN0IGtpZElkcyA9IFtdOwogICAgICAgIGZvciAoY29uc3Qga2lkIG9mIGtpZHMpIHsKICAgICAgICAgIGlmIChraWQgaW5zdGFuY2VvZiBSZWYpIHsKICAgICAgICAgICAga2lkSWRzLnB1c2goa2lkLnRvU3RyaW5nKCkpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoa2lkSWRzLmxlbmd0aCAhPT0gMCkgewogICAgICAgICAgdGhpcy5kYXRhLmtpZElkcyA9IGtpZElkczsKICAgICAgICB9CiAgICAgIH0KICAgICAgdGhpcy5kYXRhLmFjdGlvbnMgPSBjb2xsZWN0QWN0aW9ucyh4cmVmLCBkaWN0LCBBbm5vdGF0aW9uQWN0aW9uRXZlbnRUeXBlKTsKICAgICAgdGhpcy5kYXRhLmZpZWxkTmFtZSA9IHRoaXMuX2NvbnN0cnVjdEZpZWxkTmFtZShkaWN0KTsKICAgICAgdGhpcy5kYXRhLnBhZ2VJbmRleCA9IHBhcmFtcy5wYWdlSW5kZXg7CiAgICB9CiAgICBjb25zdCBpdCA9IGRpY3QuZ2V0KCJJVCIpOwogICAgaWYgKGl0IGluc3RhbmNlb2YgTmFtZSkgewogICAgICB0aGlzLmRhdGEuaXQgPSBpdC5uYW1lOwogICAgfQogICAgdGhpcy5faXNPZmZzY3JlZW5DYW52YXNTdXBwb3J0ZWQgPSBwYXJhbXMuZXZhbHVhdG9yT3B0aW9ucy5pc09mZnNjcmVlbkNhbnZhc1N1cHBvcnRlZDsKICAgIHRoaXMuX2ZhbGxiYWNrRm9udERpY3QgPSBudWxsOwogICAgdGhpcy5fbmVlZEFwcGVhcmFuY2VzID0gZmFsc2U7CiAgfQogIF9oYXNGbGFnKGZsYWdzLCBmbGFnKSB7CiAgICByZXR1cm4gISEoZmxhZ3MgJiBmbGFnKTsKICB9CiAgX2J1aWxkRmxhZ3Mobm9WaWV3LCBub1ByaW50KSB7CiAgICBsZXQgewogICAgICBmbGFncwogICAgfSA9IHRoaXM7CiAgICBpZiAobm9WaWV3ID09PSB1bmRlZmluZWQpIHsKICAgICAgaWYgKG5vUHJpbnQgPT09IHVuZGVmaW5lZCkgewogICAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgICAgIH0KICAgICAgaWYgKG5vUHJpbnQpIHsKICAgICAgICByZXR1cm4gZmxhZ3MgJiB+QW5ub3RhdGlvbkZsYWcuUFJJTlQ7CiAgICAgIH0KICAgICAgcmV0dXJuIGZsYWdzICYgfkFubm90YXRpb25GbGFnLkhJRERFTiB8IEFubm90YXRpb25GbGFnLlBSSU5UOwogICAgfQogICAgaWYgKG5vVmlldykgewogICAgICBmbGFncyB8PSBBbm5vdGF0aW9uRmxhZy5QUklOVDsKICAgICAgaWYgKG5vUHJpbnQpIHsKICAgICAgICByZXR1cm4gZmxhZ3MgJiB+QW5ub3RhdGlvbkZsYWcuTk9WSUVXIHwgQW5ub3RhdGlvbkZsYWcuSElEREVOOwogICAgICB9CiAgICAgIHJldHVybiBmbGFncyAmIH5Bbm5vdGF0aW9uRmxhZy5ISURERU4gfCBBbm5vdGF0aW9uRmxhZy5OT1ZJRVc7CiAgICB9CiAgICBmbGFncyAmPSB+KEFubm90YXRpb25GbGFnLkhJRERFTiB8IEFubm90YXRpb25GbGFnLk5PVklFVyk7CiAgICBpZiAobm9QcmludCkgewogICAgICByZXR1cm4gZmxhZ3MgJiB+QW5ub3RhdGlvbkZsYWcuUFJJTlQ7CiAgICB9CiAgICByZXR1cm4gZmxhZ3MgfCBBbm5vdGF0aW9uRmxhZy5QUklOVDsKICB9CiAgX2lzVmlld2FibGUoZmxhZ3MpIHsKICAgIHJldHVybiAhdGhpcy5faGFzRmxhZyhmbGFncywgQW5ub3RhdGlvbkZsYWcuSU5WSVNJQkxFKSAmJiAhdGhpcy5faGFzRmxhZyhmbGFncywgQW5ub3RhdGlvbkZsYWcuTk9WSUVXKTsKICB9CiAgX2lzUHJpbnRhYmxlKGZsYWdzKSB7CiAgICByZXR1cm4gdGhpcy5faGFzRmxhZyhmbGFncywgQW5ub3RhdGlvbkZsYWcuUFJJTlQpICYmICF0aGlzLl9oYXNGbGFnKGZsYWdzLCBBbm5vdGF0aW9uRmxhZy5ISURERU4pICYmICF0aGlzLl9oYXNGbGFnKGZsYWdzLCBBbm5vdGF0aW9uRmxhZy5JTlZJU0lCTEUpOwogIH0KICBtdXN0QmVWaWV3ZWQoYW5ub3RhdGlvblN0b3JhZ2UsIF9yZW5kZXJGb3JtcykgewogICAgY29uc3Qgbm9WaWV3ID0gYW5ub3RhdGlvblN0b3JhZ2U/LmdldCh0aGlzLmRhdGEuaWQpPy5ub1ZpZXc7CiAgICBpZiAobm9WaWV3ICE9PSB1bmRlZmluZWQpIHsKICAgICAgcmV0dXJuICFub1ZpZXc7CiAgICB9CiAgICByZXR1cm4gdGhpcy52aWV3YWJsZSAmJiAhdGhpcy5faGFzRmxhZyh0aGlzLmZsYWdzLCBBbm5vdGF0aW9uRmxhZy5ISURERU4pOwogIH0KICBtdXN0QmVQcmludGVkKGFubm90YXRpb25TdG9yYWdlKSB7CiAgICBjb25zdCBub1ByaW50ID0gYW5ub3RhdGlvblN0b3JhZ2U/LmdldCh0aGlzLmRhdGEuaWQpPy5ub1ByaW50OwogICAgaWYgKG5vUHJpbnQgIT09IHVuZGVmaW5lZCkgewogICAgICByZXR1cm4gIW5vUHJpbnQ7CiAgICB9CiAgICByZXR1cm4gdGhpcy5wcmludGFibGU7CiAgfQogIG11c3RCZVZpZXdlZFdoZW5FZGl0aW5nKGlzRWRpdGluZywgbW9kaWZpZWRJZHMgPSBudWxsKSB7CiAgICByZXR1cm4gaXNFZGl0aW5nID8gIXRoaXMuZGF0YS5pc0VkaXRhYmxlIDogIW1vZGlmaWVkSWRzPy5oYXModGhpcy5kYXRhLmlkKTsKICB9CiAgZ2V0IHZpZXdhYmxlKCkgewogICAgaWYgKHRoaXMuZGF0YS5xdWFkUG9pbnRzID09PSBudWxsKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICAgIGlmICh0aGlzLmZsYWdzID09PSAwKSB7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgcmV0dXJuIHRoaXMuX2lzVmlld2FibGUodGhpcy5mbGFncyk7CiAgfQogIGdldCBwcmludGFibGUoKSB7CiAgICBpZiAodGhpcy5kYXRhLnF1YWRQb2ludHMgPT09IG51bGwpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgaWYgKHRoaXMuZmxhZ3MgPT09IDApIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgcmV0dXJuIHRoaXMuX2lzUHJpbnRhYmxlKHRoaXMuZmxhZ3MpOwogIH0KICBfcGFyc2VTdHJpbmdIZWxwZXIoZGF0YSkgewogICAgY29uc3Qgc3RyID0gdHlwZW9mIGRhdGEgPT09ICJzdHJpbmciID8gc3RyaW5nVG9QREZTdHJpbmcoZGF0YSkgOiAiIjsKICAgIGNvbnN0IGRpciA9IHN0ciAmJiBiaWRpKHN0cikuZGlyID09PSAicnRsIiA/ICJydGwiIDogImx0ciI7CiAgICByZXR1cm4gewogICAgICBzdHIsCiAgICAgIGRpcgogICAgfTsKICB9CiAgc2V0RGVmYXVsdEFwcGVhcmFuY2UocGFyYW1zKSB7CiAgICBjb25zdCB7CiAgICAgIGRpY3QsCiAgICAgIGFubm90YXRpb25HbG9iYWxzCiAgICB9ID0gcGFyYW1zOwogICAgY29uc3QgZGVmYXVsdEFwcGVhcmFuY2UgPSBnZXRJbmhlcml0YWJsZVByb3BlcnR5KHsKICAgICAgZGljdCwKICAgICAga2V5OiAiREEiCiAgICB9KSB8fCBhbm5vdGF0aW9uR2xvYmFscy5hY3JvRm9ybS5nZXQoIkRBIik7CiAgICB0aGlzLl9kZWZhdWx0QXBwZWFyYW5jZSA9IHR5cGVvZiBkZWZhdWx0QXBwZWFyYW5jZSA9PT0gInN0cmluZyIgPyBkZWZhdWx0QXBwZWFyYW5jZSA6ICIiOwogICAgdGhpcy5kYXRhLmRlZmF1bHRBcHBlYXJhbmNlRGF0YSA9IHBhcnNlRGVmYXVsdEFwcGVhcmFuY2UodGhpcy5fZGVmYXVsdEFwcGVhcmFuY2UpOwogIH0KICBzZXRUaXRsZSh0aXRsZSkgewogICAgdGhpcy5fdGl0bGUgPSB0aGlzLl9wYXJzZVN0cmluZ0hlbHBlcih0aXRsZSk7CiAgfQogIHNldENvbnRlbnRzKGNvbnRlbnRzKSB7CiAgICB0aGlzLl9jb250ZW50cyA9IHRoaXMuX3BhcnNlU3RyaW5nSGVscGVyKGNvbnRlbnRzKTsKICB9CiAgc2V0TW9kaWZpY2F0aW9uRGF0ZShtb2RpZmljYXRpb25EYXRlKSB7CiAgICB0aGlzLm1vZGlmaWNhdGlvbkRhdGUgPSB0eXBlb2YgbW9kaWZpY2F0aW9uRGF0ZSA9PT0gInN0cmluZyIgPyBtb2RpZmljYXRpb25EYXRlIDogbnVsbDsKICB9CiAgc2V0RmxhZ3MoZmxhZ3MpIHsKICAgIHRoaXMuZmxhZ3MgPSBOdW1iZXIuaXNJbnRlZ2VyKGZsYWdzKSAmJiBmbGFncyA+IDAgPyBmbGFncyA6IDA7CiAgICBpZiAodGhpcy5mbGFncyAmIEFubm90YXRpb25GbGFnLklOVklTSUJMRSAmJiB0aGlzLmNvbnN0cnVjdG9yLm5hbWUgIT09ICJBbm5vdGF0aW9uIikgewogICAgICB0aGlzLmZsYWdzIF49IEFubm90YXRpb25GbGFnLklOVklTSUJMRTsKICAgIH0KICB9CiAgaGFzRmxhZyhmbGFnKSB7CiAgICByZXR1cm4gdGhpcy5faGFzRmxhZyh0aGlzLmZsYWdzLCBmbGFnKTsKICB9CiAgc2V0UmVjdGFuZ2xlKHJlY3RhbmdsZSkgewogICAgdGhpcy5yZWN0YW5nbGUgPSBsb29rdXBOb3JtYWxSZWN0KHJlY3RhbmdsZSwgWzAsIDAsIDAsIDBdKTsKICB9CiAgc2V0Q29sb3IoY29sb3IpIHsKICAgIHRoaXMuY29sb3IgPSBnZXRSZ2JDb2xvcihjb2xvcik7CiAgfQogIHNldExpbmVFbmRpbmdzKGxpbmVFbmRpbmdzKSB7CiAgICB0aGlzLmxpbmVFbmRpbmdzID0gWyJOb25lIiwgIk5vbmUiXTsKICAgIGlmIChBcnJheS5pc0FycmF5KGxpbmVFbmRpbmdzKSAmJiBsaW5lRW5kaW5ncy5sZW5ndGggPT09IDIpIHsKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyOyBpKyspIHsKICAgICAgICBjb25zdCBvYmogPSBsaW5lRW5kaW5nc1tpXTsKICAgICAgICBpZiAob2JqIGluc3RhbmNlb2YgTmFtZSkgewogICAgICAgICAgc3dpdGNoIChvYmoubmFtZSkgewogICAgICAgICAgICBjYXNlICJOb25lIjoKICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgY2FzZSAiU3F1YXJlIjoKICAgICAgICAgICAgY2FzZSAiQ2lyY2xlIjoKICAgICAgICAgICAgY2FzZSAiRGlhbW9uZCI6CiAgICAgICAgICAgIGNhc2UgIk9wZW5BcnJvdyI6CiAgICAgICAgICAgIGNhc2UgIkNsb3NlZEFycm93IjoKICAgICAgICAgICAgY2FzZSAiQnV0dCI6CiAgICAgICAgICAgIGNhc2UgIlJPcGVuQXJyb3ciOgogICAgICAgICAgICBjYXNlICJSQ2xvc2VkQXJyb3ciOgogICAgICAgICAgICBjYXNlICJTbGFzaCI6CiAgICAgICAgICAgICAgdGhpcy5saW5lRW5kaW5nc1tpXSA9IG9iai5uYW1lOwogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB3YXJuKGBJZ25vcmluZyBpbnZhbGlkIGxpbmVFbmRpbmc6ICR7b2JqfWApOwogICAgICB9CiAgICB9CiAgfQogIHNldFJvdGF0aW9uKG1rLCBkaWN0KSB7CiAgICB0aGlzLnJvdGF0aW9uID0gMDsKICAgIGxldCBhbmdsZSA9IG1rIGluc3RhbmNlb2YgRGljdCA/IG1rLmdldCgiUiIpIHx8IDAgOiBkaWN0LmdldCgiUm90YXRlIikgfHwgMDsKICAgIGlmIChOdW1iZXIuaXNJbnRlZ2VyKGFuZ2xlKSAmJiBhbmdsZSAhPT0gMCkgewogICAgICBhbmdsZSAlPSAzNjA7CiAgICAgIGlmIChhbmdsZSA8IDApIHsKICAgICAgICBhbmdsZSArPSAzNjA7CiAgICAgIH0KICAgICAgaWYgKGFuZ2xlICUgOTAgPT09IDApIHsKICAgICAgICB0aGlzLnJvdGF0aW9uID0gYW5nbGU7CiAgICAgIH0KICAgIH0KICB9CiAgc2V0Qm9yZGVyQW5kQmFja2dyb3VuZENvbG9ycyhtaykgewogICAgaWYgKG1rIGluc3RhbmNlb2YgRGljdCkgewogICAgICB0aGlzLmJvcmRlckNvbG9yID0gZ2V0UmdiQ29sb3IobWsuZ2V0QXJyYXkoIkJDIiksIG51bGwpOwogICAgICB0aGlzLmJhY2tncm91bmRDb2xvciA9IGdldFJnYkNvbG9yKG1rLmdldEFycmF5KCJCRyIpLCBudWxsKTsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMuYm9yZGVyQ29sb3IgPSB0aGlzLmJhY2tncm91bmRDb2xvciA9IG51bGw7CiAgICB9CiAgfQogIHNldEJvcmRlclN0eWxlKGJvcmRlclN0eWxlKSB7CiAgICB0aGlzLmJvcmRlclN0eWxlID0gbmV3IEFubm90YXRpb25Cb3JkZXJTdHlsZSgpOwogICAgaWYgKCEoYm9yZGVyU3R5bGUgaW5zdGFuY2VvZiBEaWN0KSkgewogICAgICByZXR1cm47CiAgICB9CiAgICBpZiAoYm9yZGVyU3R5bGUuaGFzKCJCUyIpKSB7CiAgICAgIGNvbnN0IGRpY3QgPSBib3JkZXJTdHlsZS5nZXQoIkJTIik7CiAgICAgIGlmIChkaWN0IGluc3RhbmNlb2YgRGljdCkgewogICAgICAgIGNvbnN0IGRpY3RUeXBlID0gZGljdC5nZXQoIlR5cGUiKTsKICAgICAgICBpZiAoIWRpY3RUeXBlIHx8IGlzTmFtZShkaWN0VHlwZSwgIkJvcmRlciIpKSB7CiAgICAgICAgICB0aGlzLmJvcmRlclN0eWxlLnNldFdpZHRoKGRpY3QuZ2V0KCJXIiksIHRoaXMucmVjdGFuZ2xlKTsKICAgICAgICAgIHRoaXMuYm9yZGVyU3R5bGUuc2V0U3R5bGUoZGljdC5nZXQoIlMiKSk7CiAgICAgICAgICB0aGlzLmJvcmRlclN0eWxlLnNldERhc2hBcnJheShkaWN0LmdldEFycmF5KCJEIikpOwogICAgICAgIH0KICAgICAgfQogICAgfSBlbHNlIGlmIChib3JkZXJTdHlsZS5oYXMoIkJvcmRlciIpKSB7CiAgICAgIGNvbnN0IGFycmF5ID0gYm9yZGVyU3R5bGUuZ2V0QXJyYXkoIkJvcmRlciIpOwogICAgICBpZiAoQXJyYXkuaXNBcnJheShhcnJheSkgJiYgYXJyYXkubGVuZ3RoID49IDMpIHsKICAgICAgICB0aGlzLmJvcmRlclN0eWxlLnNldEhvcml6b250YWxDb3JuZXJSYWRpdXMoYXJyYXlbMF0pOwogICAgICAgIHRoaXMuYm9yZGVyU3R5bGUuc2V0VmVydGljYWxDb3JuZXJSYWRpdXMoYXJyYXlbMV0pOwogICAgICAgIHRoaXMuYm9yZGVyU3R5bGUuc2V0V2lkdGgoYXJyYXlbMl0sIHRoaXMucmVjdGFuZ2xlKTsKICAgICAgICBpZiAoYXJyYXkubGVuZ3RoID09PSA0KSB7CiAgICAgICAgICB0aGlzLmJvcmRlclN0eWxlLnNldERhc2hBcnJheShhcnJheVszXSwgdHJ1ZSk7CiAgICAgICAgfQogICAgICB9CiAgICB9IGVsc2UgewogICAgICB0aGlzLmJvcmRlclN0eWxlLnNldFdpZHRoKDApOwogICAgfQogIH0KICBzZXRBcHBlYXJhbmNlKGRpY3QpIHsKICAgIHRoaXMuYXBwZWFyYW5jZSA9IG51bGw7CiAgICBjb25zdCBhcHBlYXJhbmNlU3RhdGVzID0gZGljdC5nZXQoIkFQIik7CiAgICBpZiAoIShhcHBlYXJhbmNlU3RhdGVzIGluc3RhbmNlb2YgRGljdCkpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgY29uc3Qgbm9ybWFsQXBwZWFyYW5jZVN0YXRlID0gYXBwZWFyYW5jZVN0YXRlcy5nZXQoIk4iKTsKICAgIGlmIChub3JtYWxBcHBlYXJhbmNlU3RhdGUgaW5zdGFuY2VvZiBCYXNlU3RyZWFtKSB7CiAgICAgIHRoaXMuYXBwZWFyYW5jZSA9IG5vcm1hbEFwcGVhcmFuY2VTdGF0ZTsKICAgICAgcmV0dXJuOwogICAgfQogICAgaWYgKCEobm9ybWFsQXBwZWFyYW5jZVN0YXRlIGluc3RhbmNlb2YgRGljdCkpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgY29uc3QgYXMgPSBkaWN0LmdldCgiQVMiKTsKICAgIGlmICghKGFzIGluc3RhbmNlb2YgTmFtZSkgfHwgIW5vcm1hbEFwcGVhcmFuY2VTdGF0ZS5oYXMoYXMubmFtZSkpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgY29uc3QgYXBwZWFyYW5jZSA9IG5vcm1hbEFwcGVhcmFuY2VTdGF0ZS5nZXQoYXMubmFtZSk7CiAgICBpZiAoYXBwZWFyYW5jZSBpbnN0YW5jZW9mIEJhc2VTdHJlYW0pIHsKICAgICAgdGhpcy5hcHBlYXJhbmNlID0gYXBwZWFyYW5jZTsKICAgIH0KICB9CiAgc2V0T3B0aW9uYWxDb250ZW50KGRpY3QpIHsKICAgIHRoaXMub2MgPSBudWxsOwogICAgY29uc3Qgb2MgPSBkaWN0LmdldCgiT0MiKTsKICAgIGlmIChvYyBpbnN0YW5jZW9mIE5hbWUpIHsKICAgICAgd2Fybigic2V0T3B0aW9uYWxDb250ZW50OiBTdXBwb3J0IGZvciAvTmFtZS1lbnRyeSBpcyBub3QgaW1wbGVtZW50ZWQuIik7CiAgICB9IGVsc2UgaWYgKG9jIGluc3RhbmNlb2YgRGljdCkgewogICAgICB0aGlzLm9jID0gb2M7CiAgICB9CiAgfQogIGFzeW5jIGxvYWRSZXNvdXJjZXMoa2V5cywgYXBwZWFyYW5jZSkgewogICAgY29uc3QgcmVzb3VyY2VzID0gYXdhaXQgYXBwZWFyYW5jZS5kaWN0LmdldEFzeW5jKCJSZXNvdXJjZXMiKTsKICAgIGlmIChyZXNvdXJjZXMpIHsKICAgICAgYXdhaXQgT2JqZWN0TG9hZGVyLmxvYWQocmVzb3VyY2VzLCBrZXlzLCByZXNvdXJjZXMueHJlZik7CiAgICB9CiAgICByZXR1cm4gcmVzb3VyY2VzOwogIH0KICBhc3luYyBnZXRPcGVyYXRvckxpc3QoZXZhbHVhdG9yLCB0YXNrLCBpbnRlbnQsIGFubm90YXRpb25TdG9yYWdlKSB7CiAgICBjb25zdCB7CiAgICAgIGhhc093bkNhbnZhcywKICAgICAgaWQsCiAgICAgIHJlY3QKICAgIH0gPSB0aGlzLmRhdGE7CiAgICBsZXQgYXBwZWFyYW5jZSA9IHRoaXMuYXBwZWFyYW5jZTsKICAgIGNvbnN0IGlzVXNpbmdPd25DYW52YXMgPSAhIShoYXNPd25DYW52YXMgJiYgaW50ZW50ICYgUmVuZGVyaW5nSW50ZW50RmxhZy5ESVNQTEFZKTsKICAgIGlmIChpc1VzaW5nT3duQ2FudmFzICYmICh0aGlzLndpZHRoID09PSAwIHx8IHRoaXMuaGVpZ2h0ID09PSAwKSkgewogICAgICB0aGlzLmRhdGEuaGFzT3duQ2FudmFzID0gZmFsc2U7CiAgICAgIHJldHVybiB7CiAgICAgICAgb3BMaXN0OiBuZXcgT3BlcmF0b3JMaXN0KCksCiAgICAgICAgc2VwYXJhdGVGb3JtOiBmYWxzZSwKICAgICAgICBzZXBhcmF0ZUNhbnZhczogZmFsc2UKICAgICAgfTsKICAgIH0KICAgIGlmICghYXBwZWFyYW5jZSkgewogICAgICBpZiAoIWlzVXNpbmdPd25DYW52YXMpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgb3BMaXN0OiBuZXcgT3BlcmF0b3JMaXN0KCksCiAgICAgICAgICBzZXBhcmF0ZUZvcm06IGZhbHNlLAogICAgICAgICAgc2VwYXJhdGVDYW52YXM6IGZhbHNlCiAgICAgICAgfTsKICAgICAgfQogICAgICBhcHBlYXJhbmNlID0gbmV3IFN0cmluZ1N0cmVhbSgiIik7CiAgICAgIGFwcGVhcmFuY2UuZGljdCA9IG5ldyBEaWN0KCk7CiAgICB9CiAgICBjb25zdCBhcHBlYXJhbmNlRGljdCA9IGFwcGVhcmFuY2UuZGljdDsKICAgIGNvbnN0IHJlc291cmNlcyA9IGF3YWl0IHRoaXMubG9hZFJlc291cmNlcyhSRVNPVVJDRVNfS0VZU19PUEVSQVRPUl9MSVNULCBhcHBlYXJhbmNlKTsKICAgIGNvbnN0IGJib3ggPSBsb29rdXBSZWN0KGFwcGVhcmFuY2VEaWN0LmdldEFycmF5KCJCQm94IiksIFswLCAwLCAxLCAxXSk7CiAgICBjb25zdCBtYXRyaXggPSBsb29rdXBNYXRyaXgoYXBwZWFyYW5jZURpY3QuZ2V0QXJyYXkoIk1hdHJpeCIpLCBJREVOVElUWV9NQVRSSVgpOwogICAgY29uc3QgdHJhbnNmb3JtID0gZ2V0VHJhbnNmb3JtTWF0cml4KHJlY3QsIGJib3gsIG1hdHJpeCk7CiAgICBjb25zdCBvcExpc3QgPSBuZXcgT3BlcmF0b3JMaXN0KCk7CiAgICBsZXQgb3B0aW9uYWxDb250ZW50OwogICAgaWYgKHRoaXMub2MpIHsKICAgICAgb3B0aW9uYWxDb250ZW50ID0gYXdhaXQgZXZhbHVhdG9yLnBhcnNlTWFya2VkQ29udGVudFByb3BzKHRoaXMub2MsIG51bGwpOwogICAgfQogICAgaWYgKG9wdGlvbmFsQ29udGVudCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgIG9wTGlzdC5hZGRPcChPUFMuYmVnaW5NYXJrZWRDb250ZW50UHJvcHMsIFsiT0MiLCBvcHRpb25hbENvbnRlbnRdKTsKICAgIH0KICAgIG9wTGlzdC5hZGRPcChPUFMuYmVnaW5Bbm5vdGF0aW9uLCBbaWQsIHJlY3QsIHRyYW5zZm9ybSwgbWF0cml4LCBpc1VzaW5nT3duQ2FudmFzXSk7CiAgICBhd2FpdCBldmFsdWF0b3IuZ2V0T3BlcmF0b3JMaXN0KHsKICAgICAgc3RyZWFtOiBhcHBlYXJhbmNlLAogICAgICB0YXNrLAogICAgICByZXNvdXJjZXMsCiAgICAgIG9wZXJhdG9yTGlzdDogb3BMaXN0LAogICAgICBmYWxsYmFja0ZvbnREaWN0OiB0aGlzLl9mYWxsYmFja0ZvbnREaWN0CiAgICB9KTsKICAgIG9wTGlzdC5hZGRPcChPUFMuZW5kQW5ub3RhdGlvbiwgW10pOwogICAgaWYgKG9wdGlvbmFsQ29udGVudCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgIG9wTGlzdC5hZGRPcChPUFMuZW5kTWFya2VkQ29udGVudCwgW10pOwogICAgfQogICAgdGhpcy5yZXNldCgpOwogICAgcmV0dXJuIHsKICAgICAgb3BMaXN0LAogICAgICBzZXBhcmF0ZUZvcm06IGZhbHNlLAogICAgICBzZXBhcmF0ZUNhbnZhczogaXNVc2luZ093bkNhbnZhcwogICAgfTsKICB9CiAgYXN5bmMgc2F2ZShldmFsdWF0b3IsIHRhc2ssIGFubm90YXRpb25TdG9yYWdlLCBjaGFuZ2VzKSB7CiAgICByZXR1cm4gbnVsbDsKICB9CiAgZ2V0IG92ZXJsYXlzVGV4dENvbnRlbnQoKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQogIGdldCBoYXNUZXh0Q29udGVudCgpIHsKICAgIHJldHVybiBmYWxzZTsKICB9CiAgYXN5bmMgZXh0cmFjdFRleHRDb250ZW50KGV2YWx1YXRvciwgdGFzaywgdmlld0JveCkgewogICAgaWYgKCF0aGlzLmFwcGVhcmFuY2UpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgY29uc3QgcmVzb3VyY2VzID0gYXdhaXQgdGhpcy5sb2FkUmVzb3VyY2VzKFJFU09VUkNFU19LRVlTX1RFWFRfQ09OVEVOVCwgdGhpcy5hcHBlYXJhbmNlKTsKICAgIGNvbnN0IHRleHQgPSBbXTsKICAgIGNvbnN0IGJ1ZmZlciA9IFtdOwogICAgbGV0IGZpcnN0UG9zaXRpb24gPSBudWxsOwogICAgY29uc3Qgc2luayA9IHsKICAgICAgZGVzaXJlZFNpemU6IE1hdGguSW5maW5pdHksCiAgICAgIHJlYWR5OiB0cnVlLAogICAgICBlbnF1ZXVlKGNodW5rLCBzaXplKSB7CiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGNodW5rLml0ZW1zKSB7CiAgICAgICAgICBpZiAoaXRlbS5zdHIgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIGZpcnN0UG9zaXRpb24gfHw9IGl0ZW0udHJhbnNmb3JtLnNsaWNlKC0yKTsKICAgICAgICAgIGJ1ZmZlci5wdXNoKGl0ZW0uc3RyKTsKICAgICAgICAgIGlmIChpdGVtLmhhc0VPTCkgewogICAgICAgICAgICB0ZXh0LnB1c2goYnVmZmVyLmpvaW4oIiIpLnRyaW1FbmQoKSk7CiAgICAgICAgICAgIGJ1ZmZlci5sZW5ndGggPSAwOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfTsKICAgIGF3YWl0IGV2YWx1YXRvci5nZXRUZXh0Q29udGVudCh7CiAgICAgIHN0cmVhbTogdGhpcy5hcHBlYXJhbmNlLAogICAgICB0YXNrLAogICAgICByZXNvdXJjZXMsCiAgICAgIGluY2x1ZGVNYXJrZWRDb250ZW50OiB0cnVlLAogICAgICBrZWVwV2hpdGVTcGFjZTogdHJ1ZSwKICAgICAgc2luaywKICAgICAgdmlld0JveAogICAgfSk7CiAgICB0aGlzLnJlc2V0KCk7CiAgICBpZiAoYnVmZmVyLmxlbmd0aCkgewogICAgICB0ZXh0LnB1c2goYnVmZmVyLmpvaW4oIiIpLnRyaW1FbmQoKSk7CiAgICB9CiAgICBpZiAodGV4dC5sZW5ndGggPiAxIHx8IHRleHRbMF0pIHsKICAgICAgY29uc3QgYXBwZWFyYW5jZURpY3QgPSB0aGlzLmFwcGVhcmFuY2UuZGljdDsKICAgICAgY29uc3QgYmJveCA9IGxvb2t1cFJlY3QoYXBwZWFyYW5jZURpY3QuZ2V0QXJyYXkoIkJCb3giKSwgbnVsbCk7CiAgICAgIGNvbnN0IG1hdHJpeCA9IGxvb2t1cE1hdHJpeChhcHBlYXJhbmNlRGljdC5nZXRBcnJheSgiTWF0cml4IiksIG51bGwpOwogICAgICB0aGlzLmRhdGEudGV4dFBvc2l0aW9uID0gdGhpcy5fdHJhbnNmb3JtUG9pbnQoZmlyc3RQb3NpdGlvbiwgYmJveCwgbWF0cml4KTsKICAgICAgdGhpcy5kYXRhLnRleHRDb250ZW50ID0gdGV4dDsKICAgIH0KICB9CiAgX3RyYW5zZm9ybVBvaW50KGNvb3JkcywgYmJveCwgbWF0cml4KSB7CiAgICBjb25zdCB7CiAgICAgIHJlY3QKICAgIH0gPSB0aGlzLmRhdGE7CiAgICBiYm94IHx8PSBbMCwgMCwgMSwgMV07CiAgICBtYXRyaXggfHw9IFsxLCAwLCAwLCAxLCAwLCAwXTsKICAgIGNvbnN0IHRyYW5zZm9ybSA9IGdldFRyYW5zZm9ybU1hdHJpeChyZWN0LCBiYm94LCBtYXRyaXgpOwogICAgdHJhbnNmb3JtWzRdIC09IHJlY3RbMF07CiAgICB0cmFuc2Zvcm1bNV0gLT0gcmVjdFsxXTsKICAgIGNvbnN0IHAgPSBjb29yZHMuc2xpY2UoKTsKICAgIFV0aWwuYXBwbHlUcmFuc2Zvcm0ocCwgdHJhbnNmb3JtKTsKICAgIFV0aWwuYXBwbHlUcmFuc2Zvcm0ocCwgbWF0cml4KTsKICAgIHJldHVybiBwOwogIH0KICBnZXRGaWVsZE9iamVjdCgpIHsKICAgIGlmICh0aGlzLmRhdGEua2lkSWRzKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgaWQ6IHRoaXMuZGF0YS5pZCwKICAgICAgICBhY3Rpb25zOiB0aGlzLmRhdGEuYWN0aW9ucywKICAgICAgICBuYW1lOiB0aGlzLmRhdGEuZmllbGROYW1lLAogICAgICAgIHN0cm9rZUNvbG9yOiB0aGlzLmRhdGEuYm9yZGVyQ29sb3IsCiAgICAgICAgZmlsbENvbG9yOiB0aGlzLmRhdGEuYmFja2dyb3VuZENvbG9yLAogICAgICAgIHR5cGU6ICIiLAogICAgICAgIGtpZElkczogdGhpcy5kYXRhLmtpZElkcywKICAgICAgICBwYWdlOiB0aGlzLmRhdGEucGFnZUluZGV4LAogICAgICAgIHJvdGF0aW9uOiB0aGlzLnJvdGF0aW9uCiAgICAgIH07CiAgICB9CiAgICByZXR1cm4gbnVsbDsKICB9CiAgcmVzZXQoKSB7CiAgICBmb3IgKGNvbnN0IHN0cmVhbSBvZiB0aGlzLl9zdHJlYW1zKSB7CiAgICAgIHN0cmVhbS5yZXNldCgpOwogICAgfQogIH0KICBfY29uc3RydWN0RmllbGROYW1lKGRpY3QpIHsKICAgIGlmICghZGljdC5oYXMoIlQiKSAmJiAhZGljdC5oYXMoIlBhcmVudCIpKSB7CiAgICAgIHdhcm4oIlVua25vd24gZmllbGQgbmFtZSwgZmFsbGluZyBiYWNrIHRvIGVtcHR5IGZpZWxkIG5hbWUuIik7CiAgICAgIHJldHVybiAiIjsKICAgIH0KICAgIGlmICghZGljdC5oYXMoIlBhcmVudCIpKSB7CiAgICAgIHJldHVybiBzdHJpbmdUb1BERlN0cmluZyhkaWN0LmdldCgiVCIpKTsKICAgIH0KICAgIGNvbnN0IGZpZWxkTmFtZSA9IFtdOwogICAgaWYgKGRpY3QuaGFzKCJUIikpIHsKICAgICAgZmllbGROYW1lLnVuc2hpZnQoc3RyaW5nVG9QREZTdHJpbmcoZGljdC5nZXQoIlQiKSkpOwogICAgfQogICAgbGV0IGxvb3BEaWN0ID0gZGljdDsKICAgIGNvbnN0IHZpc2l0ZWQgPSBuZXcgUmVmU2V0KCk7CiAgICBpZiAoZGljdC5vYmpJZCkgewogICAgICB2aXNpdGVkLnB1dChkaWN0Lm9iaklkKTsKICAgIH0KICAgIHdoaWxlIChsb29wRGljdC5oYXMoIlBhcmVudCIpKSB7CiAgICAgIGxvb3BEaWN0ID0gbG9vcERpY3QuZ2V0KCJQYXJlbnQiKTsKICAgICAgaWYgKCEobG9vcERpY3QgaW5zdGFuY2VvZiBEaWN0KSB8fCBsb29wRGljdC5vYmpJZCAmJiB2aXNpdGVkLmhhcyhsb29wRGljdC5vYmpJZCkpIHsKICAgICAgICBicmVhazsKICAgICAgfQogICAgICBpZiAobG9vcERpY3Qub2JqSWQpIHsKICAgICAgICB2aXNpdGVkLnB1dChsb29wRGljdC5vYmpJZCk7CiAgICAgIH0KICAgICAgaWYgKGxvb3BEaWN0LmhhcygiVCIpKSB7CiAgICAgICAgZmllbGROYW1lLnVuc2hpZnQoc3RyaW5nVG9QREZTdHJpbmcobG9vcERpY3QuZ2V0KCJUIikpKTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIGZpZWxkTmFtZS5qb2luKCIuIik7CiAgfQogIGdldCB3aWR0aCgpIHsKICAgIHJldHVybiB0aGlzLmRhdGEucmVjdFsyXSAtIHRoaXMuZGF0YS5yZWN0WzBdOwogIH0KICBnZXQgaGVpZ2h0KCkgewogICAgcmV0dXJuIHRoaXMuZGF0YS5yZWN0WzNdIC0gdGhpcy5kYXRhLnJlY3RbMV07CiAgfQp9CmNsYXNzIEFubm90YXRpb25Cb3JkZXJTdHlsZSB7CiAgY29uc3RydWN0b3IoKSB7CiAgICB0aGlzLndpZHRoID0gMTsKICAgIHRoaXMucmF3V2lkdGggPSAxOwogICAgdGhpcy5zdHlsZSA9IEFubm90YXRpb25Cb3JkZXJTdHlsZVR5cGUuU09MSUQ7CiAgICB0aGlzLmRhc2hBcnJheSA9IFszXTsKICAgIHRoaXMuaG9yaXpvbnRhbENvcm5lclJhZGl1cyA9IDA7CiAgICB0aGlzLnZlcnRpY2FsQ29ybmVyUmFkaXVzID0gMDsKICB9CiAgc2V0V2lkdGgod2lkdGgsIHJlY3QgPSBbMCwgMCwgMCwgMF0pIHsKICAgIGlmICh3aWR0aCBpbnN0YW5jZW9mIE5hbWUpIHsKICAgICAgdGhpcy53aWR0aCA9IDA7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGlmICh0eXBlb2Ygd2lkdGggPT09ICJudW1iZXIiKSB7CiAgICAgIGlmICh3aWR0aCA+IDApIHsKICAgICAgICB0aGlzLnJhd1dpZHRoID0gd2lkdGg7CiAgICAgICAgY29uc3QgbWF4V2lkdGggPSAocmVjdFsyXSAtIHJlY3RbMF0pIC8gMjsKICAgICAgICBjb25zdCBtYXhIZWlnaHQgPSAocmVjdFszXSAtIHJlY3RbMV0pIC8gMjsKICAgICAgICBpZiAobWF4V2lkdGggPiAwICYmIG1heEhlaWdodCA+IDAgJiYgKHdpZHRoID4gbWF4V2lkdGggfHwgd2lkdGggPiBtYXhIZWlnaHQpKSB7CiAgICAgICAgICB3YXJuKGBBbm5vdGF0aW9uQm9yZGVyU3R5bGUuc2V0V2lkdGggLSBpZ25vcmluZyB3aWR0aDogJHt3aWR0aH1gKTsKICAgICAgICAgIHdpZHRoID0gMTsKICAgICAgICB9CiAgICAgIH0KICAgICAgdGhpcy53aWR0aCA9IHdpZHRoOwogICAgfQogIH0KICBzZXRTdHlsZShzdHlsZSkgewogICAgaWYgKCEoc3R5bGUgaW5zdGFuY2VvZiBOYW1lKSkgewogICAgICByZXR1cm47CiAgICB9CiAgICBzd2l0Y2ggKHN0eWxlLm5hbWUpIHsKICAgICAgY2FzZSAiUyI6CiAgICAgICAgdGhpcy5zdHlsZSA9IEFubm90YXRpb25Cb3JkZXJTdHlsZVR5cGUuU09MSUQ7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgIkQiOgogICAgICAgIHRoaXMuc3R5bGUgPSBBbm5vdGF0aW9uQm9yZGVyU3R5bGVUeXBlLkRBU0hFRDsKICAgICAgICBicmVhazsKICAgICAgY2FzZSAiQiI6CiAgICAgICAgdGhpcy5zdHlsZSA9IEFubm90YXRpb25Cb3JkZXJTdHlsZVR5cGUuQkVWRUxFRDsKICAgICAgICBicmVhazsKICAgICAgY2FzZSAiSSI6CiAgICAgICAgdGhpcy5zdHlsZSA9IEFubm90YXRpb25Cb3JkZXJTdHlsZVR5cGUuSU5TRVQ7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgIlUiOgogICAgICAgIHRoaXMuc3R5bGUgPSBBbm5vdGF0aW9uQm9yZGVyU3R5bGVUeXBlLlVOREVSTElORTsKICAgICAgICBicmVhazsKICAgICAgZGVmYXVsdDoKICAgICAgICBicmVhazsKICAgIH0KICB9CiAgc2V0RGFzaEFycmF5KGRhc2hBcnJheSwgZm9yY2VTdHlsZSA9IGZhbHNlKSB7CiAgICBpZiAoQXJyYXkuaXNBcnJheShkYXNoQXJyYXkpKSB7CiAgICAgIGxldCBpc1ZhbGlkID0gdHJ1ZTsKICAgICAgbGV0IGFsbFplcm9zID0gdHJ1ZTsKICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGRhc2hBcnJheSkgewogICAgICAgIGNvbnN0IHZhbGlkTnVtYmVyID0gK2VsZW1lbnQgPj0gMDsKICAgICAgICBpZiAoIXZhbGlkTnVtYmVyKSB7CiAgICAgICAgICBpc1ZhbGlkID0gZmFsc2U7CiAgICAgICAgICBicmVhazsKICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQgPiAwKSB7CiAgICAgICAgICBhbGxaZXJvcyA9IGZhbHNlOwogICAgICAgIH0KICAgICAgfQogICAgICBpZiAoZGFzaEFycmF5Lmxlbmd0aCA9PT0gMCB8fCBpc1ZhbGlkICYmICFhbGxaZXJvcykgewogICAgICAgIHRoaXMuZGFzaEFycmF5ID0gZGFzaEFycmF5OwogICAgICAgIGlmIChmb3JjZVN0eWxlKSB7CiAgICAgICAgICB0aGlzLnNldFN0eWxlKE5hbWUuZ2V0KCJEIikpOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLndpZHRoID0gMDsKICAgICAgfQogICAgfSBlbHNlIGlmIChkYXNoQXJyYXkpIHsKICAgICAgdGhpcy53aWR0aCA9IDA7CiAgICB9CiAgfQogIHNldEhvcml6b250YWxDb3JuZXJSYWRpdXMocmFkaXVzKSB7CiAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcihyYWRpdXMpKSB7CiAgICAgIHRoaXMuaG9yaXpvbnRhbENvcm5lclJhZGl1cyA9IHJhZGl1czsKICAgIH0KICB9CiAgc2V0VmVydGljYWxDb3JuZXJSYWRpdXMocmFkaXVzKSB7CiAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcihyYWRpdXMpKSB7CiAgICAgIHRoaXMudmVydGljYWxDb3JuZXJSYWRpdXMgPSByYWRpdXM7CiAgICB9CiAgfQp9CmNsYXNzIE1hcmt1cEFubm90YXRpb24gZXh0ZW5kcyBBbm5vdGF0aW9uIHsKICBjb25zdHJ1Y3RvcihwYXJhbXMpIHsKICAgIHN1cGVyKHBhcmFtcyk7CiAgICBjb25zdCB7CiAgICAgIGRpY3QKICAgIH0gPSBwYXJhbXM7CiAgICBpZiAoZGljdC5oYXMoIklSVCIpKSB7CiAgICAgIGNvbnN0IHJhd0lSVCA9IGRpY3QuZ2V0UmF3KCJJUlQiKTsKICAgICAgdGhpcy5kYXRhLmluUmVwbHlUbyA9IHJhd0lSVCBpbnN0YW5jZW9mIFJlZiA/IHJhd0lSVC50b1N0cmluZygpIDogbnVsbDsKICAgICAgY29uc3QgcnQgPSBkaWN0LmdldCgiUlQiKTsKICAgICAgdGhpcy5kYXRhLnJlcGx5VHlwZSA9IHJ0IGluc3RhbmNlb2YgTmFtZSA/IHJ0Lm5hbWUgOiBBbm5vdGF0aW9uUmVwbHlUeXBlLlJFUExZOwogICAgfQogICAgbGV0IHBvcHVwUmVmID0gbnVsbDsKICAgIGlmICh0aGlzLmRhdGEucmVwbHlUeXBlID09PSBBbm5vdGF0aW9uUmVwbHlUeXBlLkdST1VQKSB7CiAgICAgIGNvbnN0IHBhcmVudCA9IGRpY3QuZ2V0KCJJUlQiKTsKICAgICAgdGhpcy5zZXRUaXRsZShwYXJlbnQuZ2V0KCJUIikpOwogICAgICB0aGlzLmRhdGEudGl0bGVPYmogPSB0aGlzLl90aXRsZTsKICAgICAgdGhpcy5zZXRDb250ZW50cyhwYXJlbnQuZ2V0KCJDb250ZW50cyIpKTsKICAgICAgdGhpcy5kYXRhLmNvbnRlbnRzT2JqID0gdGhpcy5fY29udGVudHM7CiAgICAgIGlmICghcGFyZW50LmhhcygiQ3JlYXRpb25EYXRlIikpIHsKICAgICAgICB0aGlzLmRhdGEuY3JlYXRpb25EYXRlID0gbnVsbDsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnNldENyZWF0aW9uRGF0ZShwYXJlbnQuZ2V0KCJDcmVhdGlvbkRhdGUiKSk7CiAgICAgICAgdGhpcy5kYXRhLmNyZWF0aW9uRGF0ZSA9IHRoaXMuY3JlYXRpb25EYXRlOwogICAgICB9CiAgICAgIGlmICghcGFyZW50LmhhcygiTSIpKSB7CiAgICAgICAgdGhpcy5kYXRhLm1vZGlmaWNhdGlvbkRhdGUgPSBudWxsOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuc2V0TW9kaWZpY2F0aW9uRGF0ZShwYXJlbnQuZ2V0KCJNIikpOwogICAgICAgIHRoaXMuZGF0YS5tb2RpZmljYXRpb25EYXRlID0gdGhpcy5tb2RpZmljYXRpb25EYXRlOwogICAgICB9CiAgICAgIHBvcHVwUmVmID0gcGFyZW50LmdldFJhdygiUG9wdXAiKTsKICAgICAgaWYgKCFwYXJlbnQuaGFzKCJDIikpIHsKICAgICAgICB0aGlzLmRhdGEuY29sb3IgPSBudWxsOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuc2V0Q29sb3IocGFyZW50LmdldEFycmF5KCJDIikpOwogICAgICAgIHRoaXMuZGF0YS5jb2xvciA9IHRoaXMuY29sb3I7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHRoaXMuZGF0YS50aXRsZU9iaiA9IHRoaXMuX3RpdGxlOwogICAgICB0aGlzLnNldENyZWF0aW9uRGF0ZShkaWN0LmdldCgiQ3JlYXRpb25EYXRlIikpOwogICAgICB0aGlzLmRhdGEuY3JlYXRpb25EYXRlID0gdGhpcy5jcmVhdGlvbkRhdGU7CiAgICAgIHBvcHVwUmVmID0gZGljdC5nZXRSYXcoIlBvcHVwIik7CiAgICAgIGlmICghZGljdC5oYXMoIkMiKSkgewogICAgICAgIHRoaXMuZGF0YS5jb2xvciA9IG51bGw7CiAgICAgIH0KICAgIH0KICAgIHRoaXMuZGF0YS5wb3B1cFJlZiA9IHBvcHVwUmVmIGluc3RhbmNlb2YgUmVmID8gcG9wdXBSZWYudG9TdHJpbmcoKSA6IG51bGw7CiAgICBpZiAoZGljdC5oYXMoIlJDIikpIHsKICAgICAgdGhpcy5kYXRhLnJpY2hUZXh0ID0gWEZBRmFjdG9yeS5nZXRSaWNoVGV4dEFzSHRtbChkaWN0LmdldCgiUkMiKSk7CiAgICB9CiAgfQogIHNldENyZWF0aW9uRGF0ZShjcmVhdGlvbkRhdGUpIHsKICAgIHRoaXMuY3JlYXRpb25EYXRlID0gdHlwZW9mIGNyZWF0aW9uRGF0ZSA9PT0gInN0cmluZyIgPyBjcmVhdGlvbkRhdGUgOiBudWxsOwogIH0KICBfc2V0RGVmYXVsdEFwcGVhcmFuY2UoewogICAgeHJlZiwKICAgIGV4dHJhLAogICAgc3Ryb2tlQ29sb3IsCiAgICBmaWxsQ29sb3IsCiAgICBibGVuZE1vZGUsCiAgICBzdHJva2VBbHBoYSwKICAgIGZpbGxBbHBoYSwKICAgIHBvaW50c0NhbGxiYWNrCiAgfSkgewogICAgY29uc3QgYmJveCA9IHRoaXMuZGF0YS5yZWN0ID0gW0luZmluaXR5LCBJbmZpbml0eSwgLUluZmluaXR5LCAtSW5maW5pdHldOwogICAgY29uc3QgYnVmZmVyID0gWyJxIl07CiAgICBpZiAoZXh0cmEpIHsKICAgICAgYnVmZmVyLnB1c2goZXh0cmEpOwogICAgfQogICAgaWYgKHN0cm9rZUNvbG9yKSB7CiAgICAgIGJ1ZmZlci5wdXNoKGAke3N0cm9rZUNvbG9yWzBdfSAke3N0cm9rZUNvbG9yWzFdfSAke3N0cm9rZUNvbG9yWzJdfSBSR2ApOwogICAgfQogICAgaWYgKGZpbGxDb2xvcikgewogICAgICBidWZmZXIucHVzaChgJHtmaWxsQ29sb3JbMF19ICR7ZmlsbENvbG9yWzFdfSAke2ZpbGxDb2xvclsyXX0gcmdgKTsKICAgIH0KICAgIGNvbnN0IHBvaW50c0FycmF5ID0gdGhpcy5kYXRhLnF1YWRQb2ludHMgfHwgRmxvYXQzMkFycmF5LmZyb20oW3RoaXMucmVjdGFuZ2xlWzBdLCB0aGlzLnJlY3RhbmdsZVszXSwgdGhpcy5yZWN0YW5nbGVbMl0sIHRoaXMucmVjdGFuZ2xlWzNdLCB0aGlzLnJlY3RhbmdsZVswXSwgdGhpcy5yZWN0YW5nbGVbMV0sIHRoaXMucmVjdGFuZ2xlWzJdLCB0aGlzLnJlY3RhbmdsZVsxXV0pOwogICAgZm9yIChsZXQgaSA9IDAsIGlpID0gcG9pbnRzQXJyYXkubGVuZ3RoOyBpIDwgaWk7IGkgKz0gOCkgewogICAgICBjb25zdCBwb2ludHMgPSBwb2ludHNDYWxsYmFjayhidWZmZXIsIHBvaW50c0FycmF5LnN1YmFycmF5KGksIGkgKyA4KSk7CiAgICAgIFV0aWwucmVjdEJvdW5kaW5nQm94KC4uLnBvaW50cywgYmJveCk7CiAgICB9CiAgICBidWZmZXIucHVzaCgiUSIpOwogICAgY29uc3QgZm9ybURpY3QgPSBuZXcgRGljdCh4cmVmKTsKICAgIGNvbnN0IGFwcGVhcmFuY2VTdHJlYW1EaWN0ID0gbmV3IERpY3QoeHJlZik7CiAgICBhcHBlYXJhbmNlU3RyZWFtRGljdC5zZXRJZk5hbWUoIlN1YnR5cGUiLCAiRm9ybSIpOwogICAgY29uc3QgYXBwZWFyYW5jZVN0cmVhbSA9IG5ldyBTdHJpbmdTdHJlYW0oYnVmZmVyLmpvaW4oIiAiKSk7CiAgICBhcHBlYXJhbmNlU3RyZWFtLmRpY3QgPSBhcHBlYXJhbmNlU3RyZWFtRGljdDsKICAgIGZvcm1EaWN0LnNldCgiRm0wIiwgYXBwZWFyYW5jZVN0cmVhbSk7CiAgICBjb25zdCBnc0RpY3QgPSBuZXcgRGljdCh4cmVmKTsKICAgIGlmIChibGVuZE1vZGUpIHsKICAgICAgZ3NEaWN0LnNldElmTmFtZSgiQk0iLCBibGVuZE1vZGUpOwogICAgfQogICAgZ3NEaWN0LnNldElmTnVtYmVyKCJDQSIsIHN0cm9rZUFscGhhKTsKICAgIGdzRGljdC5zZXRJZk51bWJlcigiY2EiLCBmaWxsQWxwaGEpOwogICAgY29uc3Qgc3RhdGVEaWN0ID0gbmV3IERpY3QoeHJlZik7CiAgICBzdGF0ZURpY3Quc2V0KCJHUzAiLCBnc0RpY3QpOwogICAgY29uc3QgcmVzb3VyY2VzID0gbmV3IERpY3QoeHJlZik7CiAgICByZXNvdXJjZXMuc2V0KCJFeHRHU3RhdGUiLCBzdGF0ZURpY3QpOwogICAgcmVzb3VyY2VzLnNldCgiWE9iamVjdCIsIGZvcm1EaWN0KTsKICAgIGNvbnN0IGFwcGVhcmFuY2VEaWN0ID0gbmV3IERpY3QoeHJlZik7CiAgICBhcHBlYXJhbmNlRGljdC5zZXQoIlJlc291cmNlcyIsIHJlc291cmNlcyk7CiAgICBhcHBlYXJhbmNlRGljdC5zZXQoIkJCb3giLCBiYm94KTsKICAgIHRoaXMuYXBwZWFyYW5jZSA9IG5ldyBTdHJpbmdTdHJlYW0oIi9HUzAgZ3MgL0ZtMCBEbyIpOwogICAgdGhpcy5hcHBlYXJhbmNlLmRpY3QgPSBhcHBlYXJhbmNlRGljdDsKICAgIHRoaXMuX3N0cmVhbXMucHVzaCh0aGlzLmFwcGVhcmFuY2UsIGFwcGVhcmFuY2VTdHJlYW0pOwogIH0KICBzdGF0aWMgYXN5bmMgY3JlYXRlTmV3QW5ub3RhdGlvbih4cmVmLCBhbm5vdGF0aW9uLCBjaGFuZ2VzLCBwYXJhbXMpIHsKICAgIGNvbnN0IGFubm90YXRpb25SZWYgPSBhbm5vdGF0aW9uLnJlZiB8fD0geHJlZi5nZXROZXdUZW1wb3JhcnlSZWYoKTsKICAgIGNvbnN0IGFwID0gYXdhaXQgdGhpcy5jcmVhdGVOZXdBcHBlYXJhbmNlU3RyZWFtKGFubm90YXRpb24sIHhyZWYsIHBhcmFtcyk7CiAgICBsZXQgYW5ub3RhdGlvbkRpY3Q7CiAgICBpZiAoYXApIHsKICAgICAgY29uc3QgYXBSZWYgPSB4cmVmLmdldE5ld1RlbXBvcmFyeVJlZigpOwogICAgICBhbm5vdGF0aW9uRGljdCA9IHRoaXMuY3JlYXRlTmV3RGljdChhbm5vdGF0aW9uLCB4cmVmLCB7CiAgICAgICAgYXBSZWYKICAgICAgfSk7CiAgICAgIGNoYW5nZXMucHV0KGFwUmVmLCB7CiAgICAgICAgZGF0YTogYXAKICAgICAgfSk7CiAgICB9IGVsc2UgewogICAgICBhbm5vdGF0aW9uRGljdCA9IHRoaXMuY3JlYXRlTmV3RGljdChhbm5vdGF0aW9uLCB4cmVmLCB7fSk7CiAgICB9CiAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcihhbm5vdGF0aW9uLnBhcmVudFRyZWVJZCkpIHsKICAgICAgYW5ub3RhdGlvbkRpY3Quc2V0KCJTdHJ1Y3RQYXJlbnQiLCBhbm5vdGF0aW9uLnBhcmVudFRyZWVJZCk7CiAgICB9CiAgICBjaGFuZ2VzLnB1dChhbm5vdGF0aW9uUmVmLCB7CiAgICAgIGRhdGE6IGFubm90YXRpb25EaWN0CiAgICB9KTsKICAgIGNvbnN0IHJldFJlZiA9IHsKICAgICAgcmVmOiBhbm5vdGF0aW9uUmVmCiAgICB9OwogICAgaWYgKGFubm90YXRpb24ucG9wdXApIHsKICAgICAgY29uc3QgcG9wdXAgPSBhbm5vdGF0aW9uLnBvcHVwOwogICAgICBpZiAocG9wdXAuZGVsZXRlZCkgewogICAgICAgIGFubm90YXRpb25EaWN0LmRlbGV0ZSgiUG9wdXAiKTsKICAgICAgICBhbm5vdGF0aW9uRGljdC5kZWxldGUoIkNvbnRlbnRzIik7CiAgICAgICAgYW5ub3RhdGlvbkRpY3QuZGVsZXRlKCJSQyIpOwogICAgICAgIHJldHVybiByZXRSZWY7CiAgICAgIH0KICAgICAgY29uc3QgcG9wdXBSZWYgPSBwb3B1cC5yZWYgfHw9IHhyZWYuZ2V0TmV3VGVtcG9yYXJ5UmVmKCk7CiAgICAgIHBvcHVwLnBhcmVudCA9IGFubm90YXRpb25SZWY7CiAgICAgIGNvbnN0IHBvcHVwRGljdCA9IFBvcHVwQW5ub3RhdGlvbi5jcmVhdGVOZXdEaWN0KHBvcHVwLCB4cmVmKTsKICAgICAgY2hhbmdlcy5wdXQocG9wdXBSZWYsIHsKICAgICAgICBkYXRhOiBwb3B1cERpY3QKICAgICAgfSk7CiAgICAgIGFubm90YXRpb25EaWN0LnNldElmRGVmaW5lZCgiQ29udGVudHMiLCBzdHJpbmdUb0FzY2lpT3JVVEYxNkJFKHBvcHVwLmNvbnRlbnRzKSk7CiAgICAgIGFubm90YXRpb25EaWN0LnNldCgiUG9wdXAiLCBwb3B1cFJlZik7CiAgICAgIHJldHVybiBbcmV0UmVmLCB7CiAgICAgICAgcmVmOiBwb3B1cFJlZgogICAgICB9XTsKICAgIH0KICAgIHJldHVybiByZXRSZWY7CiAgfQogIHN0YXRpYyBhc3luYyBjcmVhdGVOZXdQcmludEFubm90YXRpb24oYW5ub3RhdGlvbkdsb2JhbHMsIHhyZWYsIGFubm90YXRpb24sIHBhcmFtcykgewogICAgY29uc3QgYXAgPSBhd2FpdCB0aGlzLmNyZWF0ZU5ld0FwcGVhcmFuY2VTdHJlYW0oYW5ub3RhdGlvbiwgeHJlZiwgcGFyYW1zKTsKICAgIGNvbnN0IGFubm90YXRpb25EaWN0ID0gdGhpcy5jcmVhdGVOZXdEaWN0KGFubm90YXRpb24sIHhyZWYsIGFwID8gewogICAgICBhcAogICAgfSA6IHt9KTsKICAgIGNvbnN0IG5ld0Fubm90YXRpb24gPSBuZXcgdGhpcy5wcm90b3R5cGUuY29uc3RydWN0b3IoewogICAgICBkaWN0OiBhbm5vdGF0aW9uRGljdCwKICAgICAgeHJlZiwKICAgICAgYW5ub3RhdGlvbkdsb2JhbHMsCiAgICAgIGV2YWx1YXRvck9wdGlvbnM6IHBhcmFtcy5ldmFsdWF0b3JPcHRpb25zCiAgICB9KTsKICAgIGlmIChhbm5vdGF0aW9uLnJlZikgewogICAgICBuZXdBbm5vdGF0aW9uLnJlZiA9IG5ld0Fubm90YXRpb24ucmVmVG9SZXBsYWNlID0gYW5ub3RhdGlvbi5yZWY7CiAgICB9CiAgICByZXR1cm4gbmV3QW5ub3RhdGlvbjsKICB9Cn0KY2xhc3MgV2lkZ2V0QW5ub3RhdGlvbiBleHRlbmRzIEFubm90YXRpb24gewogIGNvbnN0cnVjdG9yKHBhcmFtcykgewogICAgc3VwZXIocGFyYW1zKTsKICAgIGNvbnN0IHsKICAgICAgZGljdCwKICAgICAgeHJlZiwKICAgICAgYW5ub3RhdGlvbkdsb2JhbHMKICAgIH0gPSBwYXJhbXM7CiAgICBjb25zdCBkYXRhID0gdGhpcy5kYXRhOwogICAgdGhpcy5fbmVlZEFwcGVhcmFuY2VzID0gcGFyYW1zLm5lZWRBcHBlYXJhbmNlczsKICAgIGRhdGEuYW5ub3RhdGlvblR5cGUgPSBBbm5vdGF0aW9uVHlwZS5XSURHRVQ7CiAgICBpZiAoZGF0YS5maWVsZE5hbWUgPT09IHVuZGVmaW5lZCkgewogICAgICBkYXRhLmZpZWxkTmFtZSA9IHRoaXMuX2NvbnN0cnVjdEZpZWxkTmFtZShkaWN0KTsKICAgIH0KICAgIGlmIChkYXRhLmFjdGlvbnMgPT09IHVuZGVmaW5lZCkgewogICAgICBkYXRhLmFjdGlvbnMgPSBjb2xsZWN0QWN0aW9ucyh4cmVmLCBkaWN0LCBBbm5vdGF0aW9uQWN0aW9uRXZlbnRUeXBlKTsKICAgIH0KICAgIGxldCBmaWVsZFZhbHVlID0gZ2V0SW5oZXJpdGFibGVQcm9wZXJ0eSh7CiAgICAgIGRpY3QsCiAgICAgIGtleTogIlYiLAogICAgICBnZXRBcnJheTogdHJ1ZQogICAgfSk7CiAgICBkYXRhLmZpZWxkVmFsdWUgPSB0aGlzLl9kZWNvZGVGb3JtVmFsdWUoZmllbGRWYWx1ZSk7CiAgICBjb25zdCBkZWZhdWx0RmllbGRWYWx1ZSA9IGdldEluaGVyaXRhYmxlUHJvcGVydHkoewogICAgICBkaWN0LAogICAgICBrZXk6ICJEViIsCiAgICAgIGdldEFycmF5OiB0cnVlCiAgICB9KTsKICAgIGRhdGEuZGVmYXVsdEZpZWxkVmFsdWUgPSB0aGlzLl9kZWNvZGVGb3JtVmFsdWUoZGVmYXVsdEZpZWxkVmFsdWUpOwogICAgaWYgKGZpZWxkVmFsdWUgPT09IHVuZGVmaW5lZCAmJiBhbm5vdGF0aW9uR2xvYmFscy54ZmFEYXRhc2V0cykgewogICAgICBjb25zdCBwYXRoID0gdGhpcy5fdGl0bGUuc3RyOwogICAgICBpZiAocGF0aCkgewogICAgICAgIHRoaXMuX2hhc1ZhbHVlRnJvbVhGQSA9IHRydWU7CiAgICAgICAgZGF0YS5maWVsZFZhbHVlID0gZmllbGRWYWx1ZSA9IGFubm90YXRpb25HbG9iYWxzLnhmYURhdGFzZXRzLmdldFZhbHVlKHBhdGgpOwogICAgICB9CiAgICB9CiAgICBpZiAoZmllbGRWYWx1ZSA9PT0gdW5kZWZpbmVkICYmIGRhdGEuZGVmYXVsdEZpZWxkVmFsdWUgIT09IG51bGwpIHsKICAgICAgZGF0YS5maWVsZFZhbHVlID0gZGF0YS5kZWZhdWx0RmllbGRWYWx1ZTsKICAgIH0KICAgIGRhdGEuYWx0ZXJuYXRpdmVUZXh0ID0gc3RyaW5nVG9QREZTdHJpbmcoZGljdC5nZXQoIlRVIikgfHwgIiIpOwogICAgdGhpcy5zZXREZWZhdWx0QXBwZWFyYW5jZShwYXJhbXMpOwogICAgZGF0YS5oYXNBcHBlYXJhbmNlIHx8PSB0aGlzLl9uZWVkQXBwZWFyYW5jZXMgJiYgZGF0YS5maWVsZFZhbHVlICE9PSB1bmRlZmluZWQgJiYgZGF0YS5maWVsZFZhbHVlICE9PSBudWxsOwogICAgY29uc3QgZmllbGRUeXBlID0gZ2V0SW5oZXJpdGFibGVQcm9wZXJ0eSh7CiAgICAgIGRpY3QsCiAgICAgIGtleTogIkZUIgogICAgfSk7CiAgICBkYXRhLmZpZWxkVHlwZSA9IGZpZWxkVHlwZSBpbnN0YW5jZW9mIE5hbWUgPyBmaWVsZFR5cGUubmFtZSA6IG51bGw7CiAgICBjb25zdCBsb2NhbFJlc291cmNlcyA9IGdldEluaGVyaXRhYmxlUHJvcGVydHkoewogICAgICBkaWN0LAogICAgICBrZXk6ICJEUiIKICAgIH0pOwogICAgY29uc3QgYWNyb0Zvcm1SZXNvdXJjZXMgPSBhbm5vdGF0aW9uR2xvYmFscy5hY3JvRm9ybS5nZXQoIkRSIik7CiAgICBjb25zdCBhcHBlYXJhbmNlUmVzb3VyY2VzID0gdGhpcy5hcHBlYXJhbmNlPy5kaWN0LmdldCgiUmVzb3VyY2VzIik7CiAgICB0aGlzLl9maWVsZFJlc291cmNlcyA9IHsKICAgICAgbG9jYWxSZXNvdXJjZXMsCiAgICAgIGFjcm9Gb3JtUmVzb3VyY2VzLAogICAgICBhcHBlYXJhbmNlUmVzb3VyY2VzLAogICAgICBtZXJnZWRSZXNvdXJjZXM6IERpY3QubWVyZ2UoewogICAgICAgIHhyZWYsCiAgICAgICAgZGljdEFycmF5OiBbbG9jYWxSZXNvdXJjZXMsIGFwcGVhcmFuY2VSZXNvdXJjZXMsIGFjcm9Gb3JtUmVzb3VyY2VzXSwKICAgICAgICBtZXJnZVN1YkRpY3RzOiB0cnVlCiAgICAgIH0pCiAgICB9OwogICAgZGF0YS5maWVsZEZsYWdzID0gZ2V0SW5oZXJpdGFibGVQcm9wZXJ0eSh7CiAgICAgIGRpY3QsCiAgICAgIGtleTogIkZmIgogICAgfSk7CiAgICBpZiAoIU51bWJlci5pc0ludGVnZXIoZGF0YS5maWVsZEZsYWdzKSB8fCBkYXRhLmZpZWxkRmxhZ3MgPCAwKSB7CiAgICAgIGRhdGEuZmllbGRGbGFncyA9IDA7CiAgICB9CiAgICBkYXRhLnBhc3N3b3JkID0gdGhpcy5oYXNGaWVsZEZsYWcoQW5ub3RhdGlvbkZpZWxkRmxhZy5QQVNTV09SRCk7CiAgICBkYXRhLnJlYWRPbmx5ID0gdGhpcy5oYXNGaWVsZEZsYWcoQW5ub3RhdGlvbkZpZWxkRmxhZy5SRUFET05MWSk7CiAgICBkYXRhLnJlcXVpcmVkID0gdGhpcy5oYXNGaWVsZEZsYWcoQW5ub3RhdGlvbkZpZWxkRmxhZy5SRVFVSVJFRCk7CiAgICBkYXRhLmhpZGRlbiA9IHRoaXMuX2hhc0ZsYWcoZGF0YS5hbm5vdGF0aW9uRmxhZ3MsIEFubm90YXRpb25GbGFnLkhJRERFTikgfHwgdGhpcy5faGFzRmxhZyhkYXRhLmFubm90YXRpb25GbGFncywgQW5ub3RhdGlvbkZsYWcuTk9WSUVXKTsKICB9CiAgX2RlY29kZUZvcm1WYWx1ZShmb3JtVmFsdWUpIHsKICAgIGlmIChBcnJheS5pc0FycmF5KGZvcm1WYWx1ZSkpIHsKICAgICAgcmV0dXJuIGZvcm1WYWx1ZS5maWx0ZXIoaXRlbSA9PiB0eXBlb2YgaXRlbSA9PT0gInN0cmluZyIpLm1hcChpdGVtID0+IHN0cmluZ1RvUERGU3RyaW5nKGl0ZW0pKTsKICAgIH0gZWxzZSBpZiAoZm9ybVZhbHVlIGluc3RhbmNlb2YgTmFtZSkgewogICAgICByZXR1cm4gc3RyaW5nVG9QREZTdHJpbmcoZm9ybVZhbHVlLm5hbWUpOwogICAgfSBlbHNlIGlmICh0eXBlb2YgZm9ybVZhbHVlID09PSAic3RyaW5nIikgewogICAgICByZXR1cm4gc3RyaW5nVG9QREZTdHJpbmcoZm9ybVZhbHVlKTsKICAgIH0KICAgIHJldHVybiBudWxsOwogIH0KICBoYXNGaWVsZEZsYWcoZmxhZykgewogICAgcmV0dXJuICEhKHRoaXMuZGF0YS5maWVsZEZsYWdzICYgZmxhZyk7CiAgfQogIF9pc1ZpZXdhYmxlKGZsYWdzKSB7CiAgICByZXR1cm4gdHJ1ZTsKICB9CiAgbXVzdEJlVmlld2VkKGFubm90YXRpb25TdG9yYWdlLCByZW5kZXJGb3JtcykgewogICAgaWYgKHJlbmRlckZvcm1zKSB7CiAgICAgIHJldHVybiB0aGlzLnZpZXdhYmxlOwogICAgfQogICAgcmV0dXJuIHN1cGVyLm11c3RCZVZpZXdlZChhbm5vdGF0aW9uU3RvcmFnZSwgcmVuZGVyRm9ybXMpICYmICF0aGlzLl9oYXNGbGFnKHRoaXMuZmxhZ3MsIEFubm90YXRpb25GbGFnLk5PVklFVyk7CiAgfQogIGdldFJvdGF0aW9uTWF0cml4KGFubm90YXRpb25TdG9yYWdlKSB7CiAgICBsZXQgcm90YXRpb24gPSBhbm5vdGF0aW9uU3RvcmFnZT8uZ2V0KHRoaXMuZGF0YS5pZCk/LnJvdGF0aW9uOwogICAgaWYgKHJvdGF0aW9uID09PSB1bmRlZmluZWQpIHsKICAgICAgcm90YXRpb24gPSB0aGlzLnJvdGF0aW9uOwogICAgfQogICAgcmV0dXJuIHJvdGF0aW9uID09PSAwID8gSURFTlRJVFlfTUFUUklYIDogZ2V0Um90YXRpb25NYXRyaXgocm90YXRpb24sIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTsKICB9CiAgZ2V0Qm9yZGVyQW5kQmFja2dyb3VuZEFwcGVhcmFuY2VzKGFubm90YXRpb25TdG9yYWdlKSB7CiAgICBsZXQgcm90YXRpb24gPSBhbm5vdGF0aW9uU3RvcmFnZT8uZ2V0KHRoaXMuZGF0YS5pZCk/LnJvdGF0aW9uOwogICAgaWYgKHJvdGF0aW9uID09PSB1bmRlZmluZWQpIHsKICAgICAgcm90YXRpb24gPSB0aGlzLnJvdGF0aW9uOwogICAgfQogICAgaWYgKCF0aGlzLmJhY2tncm91bmRDb2xvciAmJiAhdGhpcy5ib3JkZXJDb2xvcikgewogICAgICByZXR1cm4gIiI7CiAgICB9CiAgICBjb25zdCByZWN0ID0gcm90YXRpb24gPT09IDAgfHwgcm90YXRpb24gPT09IDE4MCA/IGAwIDAgJHt0aGlzLndpZHRofSAke3RoaXMuaGVpZ2h0fSByZWAgOiBgMCAwICR7dGhpcy5oZWlnaHR9ICR7dGhpcy53aWR0aH0gcmVgOwogICAgbGV0IHN0ciA9ICIiOwogICAgaWYgKHRoaXMuYmFja2dyb3VuZENvbG9yKSB7CiAgICAgIHN0ciA9IGAke2dldFBkZkNvbG9yKHRoaXMuYmFja2dyb3VuZENvbG9yLCB0cnVlKX0gJHtyZWN0fSBmIGA7CiAgICB9CiAgICBpZiAodGhpcy5ib3JkZXJDb2xvcikgewogICAgICBjb25zdCBib3JkZXJXaWR0aCA9IHRoaXMuYm9yZGVyU3R5bGUud2lkdGggfHwgMTsKICAgICAgc3RyICs9IGAke2JvcmRlcldpZHRofSB3ICR7Z2V0UGRmQ29sb3IodGhpcy5ib3JkZXJDb2xvciwgZmFsc2UpfSAke3JlY3R9IFMgYDsKICAgIH0KICAgIHJldHVybiBzdHI7CiAgfQogIGFzeW5jIGdldE9wZXJhdG9yTGlzdChldmFsdWF0b3IsIHRhc2ssIGludGVudCwgYW5ub3RhdGlvblN0b3JhZ2UpIHsKICAgIGlmIChpbnRlbnQgJiBSZW5kZXJpbmdJbnRlbnRGbGFnLkFOTk9UQVRJT05TX0ZPUk1TICYmICEodGhpcyBpbnN0YW5jZW9mIFNpZ25hdHVyZVdpZGdldEFubm90YXRpb24pICYmICF0aGlzLmRhdGEubm9IVE1MICYmICF0aGlzLmRhdGEuaGFzT3duQ2FudmFzKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgb3BMaXN0OiBuZXcgT3BlcmF0b3JMaXN0KCksCiAgICAgICAgc2VwYXJhdGVGb3JtOiB0cnVlLAogICAgICAgIHNlcGFyYXRlQ2FudmFzOiBmYWxzZQogICAgICB9OwogICAgfQogICAgaWYgKCF0aGlzLl9oYXNUZXh0KSB7CiAgICAgIHJldHVybiBzdXBlci5nZXRPcGVyYXRvckxpc3QoZXZhbHVhdG9yLCB0YXNrLCBpbnRlbnQsIGFubm90YXRpb25TdG9yYWdlKTsKICAgIH0KICAgIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCB0aGlzLl9nZXRBcHBlYXJhbmNlKGV2YWx1YXRvciwgdGFzaywgaW50ZW50LCBhbm5vdGF0aW9uU3RvcmFnZSk7CiAgICBpZiAodGhpcy5hcHBlYXJhbmNlICYmIGNvbnRlbnQgPT09IG51bGwpIHsKICAgICAgcmV0dXJuIHN1cGVyLmdldE9wZXJhdG9yTGlzdChldmFsdWF0b3IsIHRhc2ssIGludGVudCwgYW5ub3RhdGlvblN0b3JhZ2UpOwogICAgfQogICAgY29uc3Qgb3BMaXN0ID0gbmV3IE9wZXJhdG9yTGlzdCgpOwogICAgaWYgKCF0aGlzLl9kZWZhdWx0QXBwZWFyYW5jZSB8fCBjb250ZW50ID09PSBudWxsKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgb3BMaXN0LAogICAgICAgIHNlcGFyYXRlRm9ybTogZmFsc2UsCiAgICAgICAgc2VwYXJhdGVDYW52YXM6IGZhbHNlCiAgICAgIH07CiAgICB9CiAgICBjb25zdCBpc1VzaW5nT3duQ2FudmFzID0gISEodGhpcy5kYXRhLmhhc093bkNhbnZhcyAmJiBpbnRlbnQgJiBSZW5kZXJpbmdJbnRlbnRGbGFnLkRJU1BMQVkpOwogICAgY29uc3QgbWF0cml4ID0gWzEsIDAsIDAsIDEsIDAsIDBdOwogICAgY29uc3QgYmJveCA9IFswLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodF07CiAgICBjb25zdCB0cmFuc2Zvcm0gPSBnZXRUcmFuc2Zvcm1NYXRyaXgodGhpcy5kYXRhLnJlY3QsIGJib3gsIG1hdHJpeCk7CiAgICBsZXQgb3B0aW9uYWxDb250ZW50OwogICAgaWYgKHRoaXMub2MpIHsKICAgICAgb3B0aW9uYWxDb250ZW50ID0gYXdhaXQgZXZhbHVhdG9yLnBhcnNlTWFya2VkQ29udGVudFByb3BzKHRoaXMub2MsIG51bGwpOwogICAgfQogICAgaWYgKG9wdGlvbmFsQ29udGVudCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgIG9wTGlzdC5hZGRPcChPUFMuYmVnaW5NYXJrZWRDb250ZW50UHJvcHMsIFsiT0MiLCBvcHRpb25hbENvbnRlbnRdKTsKICAgIH0KICAgIG9wTGlzdC5hZGRPcChPUFMuYmVnaW5Bbm5vdGF0aW9uLCBbdGhpcy5kYXRhLmlkLCB0aGlzLmRhdGEucmVjdCwgdHJhbnNmb3JtLCB0aGlzLmdldFJvdGF0aW9uTWF0cml4KGFubm90YXRpb25TdG9yYWdlKSwgaXNVc2luZ093bkNhbnZhc10pOwogICAgY29uc3Qgc3RyZWFtID0gbmV3IFN0cmluZ1N0cmVhbShjb250ZW50KTsKICAgIGF3YWl0IGV2YWx1YXRvci5nZXRPcGVyYXRvckxpc3QoewogICAgICBzdHJlYW0sCiAgICAgIHRhc2ssCiAgICAgIHJlc291cmNlczogdGhpcy5fZmllbGRSZXNvdXJjZXMubWVyZ2VkUmVzb3VyY2VzLAogICAgICBvcGVyYXRvckxpc3Q6IG9wTGlzdAogICAgfSk7CiAgICBvcExpc3QuYWRkT3AoT1BTLmVuZEFubm90YXRpb24sIFtdKTsKICAgIGlmIChvcHRpb25hbENvbnRlbnQgIT09IHVuZGVmaW5lZCkgewogICAgICBvcExpc3QuYWRkT3AoT1BTLmVuZE1hcmtlZENvbnRlbnQsIFtdKTsKICAgIH0KICAgIHJldHVybiB7CiAgICAgIG9wTGlzdCwKICAgICAgc2VwYXJhdGVGb3JtOiBmYWxzZSwKICAgICAgc2VwYXJhdGVDYW52YXM6IGlzVXNpbmdPd25DYW52YXMKICAgIH07CiAgfQogIF9nZXRNS0RpY3Qocm90YXRpb24pIHsKICAgIGNvbnN0IG1rID0gbmV3IERpY3QobnVsbCk7CiAgICBpZiAocm90YXRpb24pIHsKICAgICAgbWsuc2V0KCJSIiwgcm90YXRpb24pOwogICAgfQogICAgbWsuc2V0SWZBcnJheSgiQkMiLCBnZXRQZGZDb2xvckFycmF5KHRoaXMuYm9yZGVyQ29sb3IpKTsKICAgIG1rLnNldElmQXJyYXkoIkJHIiwgZ2V0UGRmQ29sb3JBcnJheSh0aGlzLmJhY2tncm91bmRDb2xvcikpOwogICAgcmV0dXJuIG1rLnNpemUgPiAwID8gbWsgOiBudWxsOwogIH0KICBhbWVuZFNhdmVkRGljdChhbm5vdGF0aW9uU3RvcmFnZSwgZGljdCkge30KICBzZXRWYWx1ZShkaWN0LCB2YWx1ZSwgeHJlZiwgY2hhbmdlcykgewogICAgY29uc3QgewogICAgICBkaWN0OiBwYXJlbnREaWN0LAogICAgICByZWY6IHBhcmVudFJlZgogICAgfSA9IGdldFBhcmVudFRvVXBkYXRlKGRpY3QsIHRoaXMucmVmLCB4cmVmKTsKICAgIGlmICghcGFyZW50RGljdCkgewogICAgICBkaWN0LnNldCgiViIsIHZhbHVlKTsKICAgIH0gZWxzZSBpZiAoIWNoYW5nZXMuaGFzKHBhcmVudFJlZikpIHsKICAgICAgY29uc3QgbmV3UGFyZW50RGljdCA9IHBhcmVudERpY3QuY2xvbmUoKTsKICAgICAgbmV3UGFyZW50RGljdC5zZXQoIlYiLCB2YWx1ZSk7CiAgICAgIGNoYW5nZXMucHV0KHBhcmVudFJlZiwgewogICAgICAgIGRhdGE6IG5ld1BhcmVudERpY3QKICAgICAgfSk7CiAgICAgIHJldHVybiBuZXdQYXJlbnREaWN0OwogICAgfQogICAgcmV0dXJuIG51bGw7CiAgfQogIGFzeW5jIHNhdmUoZXZhbHVhdG9yLCB0YXNrLCBhbm5vdGF0aW9uU3RvcmFnZSwgY2hhbmdlcykgewogICAgY29uc3Qgc3RvcmFnZUVudHJ5ID0gYW5ub3RhdGlvblN0b3JhZ2U/LmdldCh0aGlzLmRhdGEuaWQpOwogICAgY29uc3QgZmxhZ3MgPSB0aGlzLl9idWlsZEZsYWdzKHN0b3JhZ2VFbnRyeT8ubm9WaWV3LCBzdG9yYWdlRW50cnk/Lm5vUHJpbnQpOwogICAgbGV0IHZhbHVlID0gc3RvcmFnZUVudHJ5Py52YWx1ZSwKICAgICAgcm90YXRpb24gPSBzdG9yYWdlRW50cnk/LnJvdGF0aW9uOwogICAgaWYgKHZhbHVlID09PSB0aGlzLmRhdGEuZmllbGRWYWx1ZSB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgIGlmICghdGhpcy5faGFzVmFsdWVGcm9tWEZBICYmIHJvdGF0aW9uID09PSB1bmRlZmluZWQgJiYgZmxhZ3MgPT09IHVuZGVmaW5lZCkgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICB2YWx1ZSB8fD0gdGhpcy5kYXRhLmZpZWxkVmFsdWU7CiAgICB9CiAgICBpZiAocm90YXRpb24gPT09IHVuZGVmaW5lZCAmJiAhdGhpcy5faGFzVmFsdWVGcm9tWEZBICYmIEFycmF5LmlzQXJyYXkodmFsdWUpICYmIEFycmF5LmlzQXJyYXkodGhpcy5kYXRhLmZpZWxkVmFsdWUpICYmIGlzQXJyYXlFcXVhbCh2YWx1ZSwgdGhpcy5kYXRhLmZpZWxkVmFsdWUpICYmIGZsYWdzID09PSB1bmRlZmluZWQpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgaWYgKHJvdGF0aW9uID09PSB1bmRlZmluZWQpIHsKICAgICAgcm90YXRpb24gPSB0aGlzLnJvdGF0aW9uOwogICAgfQogICAgbGV0IGFwcGVhcmFuY2UgPSBudWxsOwogICAgaWYgKCF0aGlzLl9uZWVkQXBwZWFyYW5jZXMpIHsKICAgICAgYXBwZWFyYW5jZSA9IGF3YWl0IHRoaXMuX2dldEFwcGVhcmFuY2UoZXZhbHVhdG9yLCB0YXNrLCBSZW5kZXJpbmdJbnRlbnRGbGFnLlNBVkUsIGFubm90YXRpb25TdG9yYWdlKTsKICAgICAgaWYgKGFwcGVhcmFuY2UgPT09IG51bGwgJiYgZmxhZ3MgPT09IHVuZGVmaW5lZCkgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgfSBlbHNlIHt9CiAgICBsZXQgbmVlZEFwcGVhcmFuY2VzID0gZmFsc2U7CiAgICBpZiAoYXBwZWFyYW5jZT8ubmVlZEFwcGVhcmFuY2VzKSB7CiAgICAgIG5lZWRBcHBlYXJhbmNlcyA9IHRydWU7CiAgICAgIGFwcGVhcmFuY2UgPSBudWxsOwogICAgfQogICAgY29uc3QgewogICAgICB4cmVmCiAgICB9ID0gZXZhbHVhdG9yOwogICAgY29uc3Qgb3JpZ2luYWxEaWN0ID0geHJlZi5mZXRjaElmUmVmKHRoaXMucmVmKTsKICAgIGlmICghKG9yaWdpbmFsRGljdCBpbnN0YW5jZW9mIERpY3QpKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGNvbnN0IGRpY3QgPSBuZXcgRGljdCh4cmVmKTsKICAgIGZvciAoY29uc3Qga2V5IG9mIG9yaWdpbmFsRGljdC5nZXRLZXlzKCkpIHsKICAgICAgaWYgKGtleSAhPT0gIkFQIikgewogICAgICAgIGRpY3Quc2V0KGtleSwgb3JpZ2luYWxEaWN0LmdldFJhdyhrZXkpKTsKICAgICAgfQogICAgfQogICAgaWYgKGZsYWdzICE9PSB1bmRlZmluZWQpIHsKICAgICAgZGljdC5zZXQoIkYiLCBmbGFncyk7CiAgICAgIGlmIChhcHBlYXJhbmNlID09PSBudWxsICYmICFuZWVkQXBwZWFyYW5jZXMpIHsKICAgICAgICBjb25zdCBhcCA9IG9yaWdpbmFsRGljdC5nZXRSYXcoIkFQIik7CiAgICAgICAgaWYgKGFwKSB7CiAgICAgICAgICBkaWN0LnNldCgiQVAiLCBhcCk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBjb25zdCB4ZmEgPSB7CiAgICAgIHBhdGg6IHRoaXMuZGF0YS5maWVsZE5hbWUsCiAgICAgIHZhbHVlCiAgICB9OwogICAgY29uc3QgbmV3UGFyZW50RGljdCA9IHRoaXMuc2V0VmFsdWUoZGljdCwgQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5tYXAoc3RyaW5nVG9Bc2NpaU9yVVRGMTZCRSkgOiBzdHJpbmdUb0FzY2lpT3JVVEYxNkJFKHZhbHVlKSwgeHJlZiwgY2hhbmdlcyk7CiAgICB0aGlzLmFtZW5kU2F2ZWREaWN0KGFubm90YXRpb25TdG9yYWdlLCBuZXdQYXJlbnREaWN0IHx8IGRpY3QpOwogICAgY29uc3QgbWF5YmVNSyA9IHRoaXMuX2dldE1LRGljdChyb3RhdGlvbik7CiAgICBpZiAobWF5YmVNSykgewogICAgICBkaWN0LnNldCgiTUsiLCBtYXliZU1LKTsKICAgIH0KICAgIGNoYW5nZXMucHV0KHRoaXMucmVmLCB7CiAgICAgIGRhdGE6IGRpY3QsCiAgICAgIHhmYSwKICAgICAgbmVlZEFwcGVhcmFuY2VzCiAgICB9KTsKICAgIGlmIChhcHBlYXJhbmNlICE9PSBudWxsKSB7CiAgICAgIGNvbnN0IG5ld1JlZiA9IHhyZWYuZ2V0TmV3VGVtcG9yYXJ5UmVmKCk7CiAgICAgIGNvbnN0IEFQID0gbmV3IERpY3QoeHJlZik7CiAgICAgIGRpY3Quc2V0KCJBUCIsIEFQKTsKICAgICAgQVAuc2V0KCJOIiwgbmV3UmVmKTsKICAgICAgY29uc3QgcmVzb3VyY2VzID0gdGhpcy5fZ2V0U2F2ZUZpZWxkUmVzb3VyY2VzKHhyZWYpOwogICAgICBjb25zdCBhcHBlYXJhbmNlU3RyZWFtID0gbmV3IFN0cmluZ1N0cmVhbShhcHBlYXJhbmNlKTsKICAgICAgY29uc3QgYXBwZWFyYW5jZURpY3QgPSBhcHBlYXJhbmNlU3RyZWFtLmRpY3QgPSBuZXcgRGljdCh4cmVmKTsKICAgICAgYXBwZWFyYW5jZURpY3Quc2V0SWZOYW1lKCJTdWJ0eXBlIiwgIkZvcm0iKTsKICAgICAgYXBwZWFyYW5jZURpY3Quc2V0KCJSZXNvdXJjZXMiLCByZXNvdXJjZXMpOwogICAgICBjb25zdCBiYm94ID0gcm90YXRpb24gJSAxODAgPT09IDAgPyBbMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHRdIDogWzAsIDAsIHRoaXMuaGVpZ2h0LCB0aGlzLndpZHRoXTsKICAgICAgYXBwZWFyYW5jZURpY3Quc2V0KCJCQm94IiwgYmJveCk7CiAgICAgIGNvbnN0IHJvdGF0aW9uTWF0cml4ID0gdGhpcy5nZXRSb3RhdGlvbk1hdHJpeChhbm5vdGF0aW9uU3RvcmFnZSk7CiAgICAgIGlmIChyb3RhdGlvbk1hdHJpeCAhPT0gSURFTlRJVFlfTUFUUklYKSB7CiAgICAgICAgYXBwZWFyYW5jZURpY3Quc2V0KCJNYXRyaXgiLCByb3RhdGlvbk1hdHJpeCk7CiAgICAgIH0KICAgICAgY2hhbmdlcy5wdXQobmV3UmVmLCB7CiAgICAgICAgZGF0YTogYXBwZWFyYW5jZVN0cmVhbSwKICAgICAgICB4ZmE6IG51bGwsCiAgICAgICAgbmVlZEFwcGVhcmFuY2VzOiBmYWxzZQogICAgICB9KTsKICAgIH0KICAgIGRpY3Quc2V0KCJNIiwgYEQ6JHtnZXRNb2RpZmljYXRpb25EYXRlKCl9YCk7CiAgfQogIGFzeW5jIF9nZXRBcHBlYXJhbmNlKGV2YWx1YXRvciwgdGFzaywgaW50ZW50LCBhbm5vdGF0aW9uU3RvcmFnZSkgewogICAgaWYgKHRoaXMuZGF0YS5wYXNzd29yZCkgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIGNvbnN0IHN0b3JhZ2VFbnRyeSA9IGFubm90YXRpb25TdG9yYWdlPy5nZXQodGhpcy5kYXRhLmlkKTsKICAgIGxldCB2YWx1ZSwgcm90YXRpb247CiAgICBpZiAoc3RvcmFnZUVudHJ5KSB7CiAgICAgIHZhbHVlID0gc3RvcmFnZUVudHJ5LmZvcm1hdHRlZFZhbHVlIHx8IHN0b3JhZ2VFbnRyeS52YWx1ZTsKICAgICAgcm90YXRpb24gPSBzdG9yYWdlRW50cnkucm90YXRpb247CiAgICB9CiAgICBpZiAocm90YXRpb24gPT09IHVuZGVmaW5lZCAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICF0aGlzLl9uZWVkQXBwZWFyYW5jZXMpIHsKICAgICAgaWYgKCF0aGlzLl9oYXNWYWx1ZUZyb21YRkEgfHwgdGhpcy5hcHBlYXJhbmNlKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgIH0KICAgIGNvbnN0IGNvbG9ycyA9IHRoaXMuZ2V0Qm9yZGVyQW5kQmFja2dyb3VuZEFwcGVhcmFuY2VzKGFubm90YXRpb25TdG9yYWdlKTsKICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgIHZhbHVlID0gdGhpcy5kYXRhLmZpZWxkVmFsdWU7CiAgICAgIGlmICghdmFsdWUpIHsKICAgICAgICByZXR1cm4gYC9UeCBCTUMgcSAke2NvbG9yc31RIEVNQ2A7CiAgICAgIH0KICAgIH0KICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDEpIHsKICAgICAgdmFsdWUgPSB2YWx1ZVswXTsKICAgIH0KICAgIGFzc2VydCh0eXBlb2YgdmFsdWUgPT09ICJzdHJpbmciLCAiRXhwZWN0ZWQgYHZhbHVlYCB0byBiZSBhIHN0cmluZy4iKTsKICAgIHZhbHVlID0gdmFsdWUudHJpbUVuZCgpOwogICAgaWYgKHRoaXMuZGF0YS5jb21ibykgewogICAgICBjb25zdCBvcHRpb24gPSB0aGlzLmRhdGEub3B0aW9ucy5maW5kKCh7CiAgICAgICAgZXhwb3J0VmFsdWUKICAgICAgfSkgPT4gdmFsdWUgPT09IGV4cG9ydFZhbHVlKTsKICAgICAgdmFsdWUgPSBvcHRpb24/LmRpc3BsYXlWYWx1ZSB8fCB2YWx1ZTsKICAgIH0KICAgIGlmICh2YWx1ZSA9PT0gIiIpIHsKICAgICAgcmV0dXJuIGAvVHggQk1DIHEgJHtjb2xvcnN9USBFTUNgOwogICAgfQogICAgaWYgKHJvdGF0aW9uID09PSB1bmRlZmluZWQpIHsKICAgICAgcm90YXRpb24gPSB0aGlzLnJvdGF0aW9uOwogICAgfQogICAgbGV0IGxpbmVDb3VudCA9IC0xOwogICAgbGV0IGxpbmVzOwogICAgaWYgKHRoaXMuZGF0YS5tdWx0aUxpbmUpIHsKICAgICAgbGluZXMgPSB2YWx1ZS5zcGxpdCgvXHJcbj98XG4vKS5tYXAobGluZSA9PiBsaW5lLm5vcm1hbGl6ZSgiTkZDIikpOwogICAgICBsaW5lQ291bnQgPSBsaW5lcy5sZW5ndGg7CiAgICB9IGVsc2UgewogICAgICBsaW5lcyA9IFt2YWx1ZS5yZXBsYWNlKC9cclxuP3xcbi8sICIiKS5ub3JtYWxpemUoIk5GQyIpXTsKICAgIH0KICAgIGNvbnN0IGRlZmF1bHRQYWRkaW5nID0gMTsKICAgIGNvbnN0IGRlZmF1bHRIUGFkZGluZyA9IDI7CiAgICBsZXQgewogICAgICB3aWR0aDogdG90YWxXaWR0aCwKICAgICAgaGVpZ2h0OiB0b3RhbEhlaWdodAogICAgfSA9IHRoaXM7CiAgICBpZiAocm90YXRpb24gPT09IDkwIHx8IHJvdGF0aW9uID09PSAyNzApIHsKICAgICAgW3RvdGFsV2lkdGgsIHRvdGFsSGVpZ2h0XSA9IFt0b3RhbEhlaWdodCwgdG90YWxXaWR0aF07CiAgICB9CiAgICBpZiAoIXRoaXMuX2RlZmF1bHRBcHBlYXJhbmNlKSB7CiAgICAgIHRoaXMuZGF0YS5kZWZhdWx0QXBwZWFyYW5jZURhdGEgPSBwYXJzZURlZmF1bHRBcHBlYXJhbmNlKHRoaXMuX2RlZmF1bHRBcHBlYXJhbmNlID0gIi9IZWx2ZXRpY2EgMCBUZiAwIGciKTsKICAgIH0KICAgIGxldCBmb250ID0gYXdhaXQgV2lkZ2V0QW5ub3RhdGlvbi5fZ2V0Rm9udERhdGEoZXZhbHVhdG9yLCB0YXNrLCB0aGlzLmRhdGEuZGVmYXVsdEFwcGVhcmFuY2VEYXRhLCB0aGlzLl9maWVsZFJlc291cmNlcy5tZXJnZWRSZXNvdXJjZXMpOwogICAgbGV0IGRlZmF1bHRBcHBlYXJhbmNlLCBmb250U2l6ZSwgbGluZUhlaWdodDsKICAgIGNvbnN0IGVuY29kZWRMaW5lcyA9IFtdOwogICAgbGV0IGVuY29kaW5nRXJyb3IgPSBmYWxzZTsKICAgIGZvciAoY29uc3QgbGluZSBvZiBsaW5lcykgewogICAgICBjb25zdCBlbmNvZGVkU3RyaW5nID0gZm9udC5lbmNvZGVTdHJpbmcobGluZSk7CiAgICAgIGlmIChlbmNvZGVkU3RyaW5nLmxlbmd0aCA+IDEpIHsKICAgICAgICBlbmNvZGluZ0Vycm9yID0gdHJ1ZTsKICAgICAgfQogICAgICBlbmNvZGVkTGluZXMucHVzaChlbmNvZGVkU3RyaW5nLmpvaW4oIiIpKTsKICAgIH0KICAgIGlmIChlbmNvZGluZ0Vycm9yICYmIGludGVudCAmIFJlbmRlcmluZ0ludGVudEZsYWcuU0FWRSkgewogICAgICByZXR1cm4gewogICAgICAgIG5lZWRBcHBlYXJhbmNlczogdHJ1ZQogICAgICB9OwogICAgfQogICAgaWYgKGVuY29kaW5nRXJyb3IgJiYgdGhpcy5faXNPZmZzY3JlZW5DYW52YXNTdXBwb3J0ZWQpIHsKICAgICAgY29uc3QgZm9udEZhbWlseSA9IHRoaXMuZGF0YS5jb21iID8gIm1vbm9zcGFjZSIgOiAic2Fucy1zZXJpZiI7CiAgICAgIGNvbnN0IGZha2VVbmljb2RlRm9udCA9IG5ldyBGYWtlVW5pY29kZUZvbnQoZXZhbHVhdG9yLnhyZWYsIGZvbnRGYW1pbHkpOwogICAgICBjb25zdCByZXNvdXJjZXMgPSBmYWtlVW5pY29kZUZvbnQuY3JlYXRlRm9udFJlc291cmNlcyhsaW5lcy5qb2luKCIiKSk7CiAgICAgIGNvbnN0IG5ld0ZvbnQgPSByZXNvdXJjZXMuZ2V0UmF3KCJGb250Iik7CiAgICAgIGlmICh0aGlzLl9maWVsZFJlc291cmNlcy5tZXJnZWRSZXNvdXJjZXMuaGFzKCJGb250IikpIHsKICAgICAgICBjb25zdCBvbGRGb250ID0gdGhpcy5fZmllbGRSZXNvdXJjZXMubWVyZ2VkUmVzb3VyY2VzLmdldCgiRm9udCIpOwogICAgICAgIGZvciAoY29uc3Qga2V5IG9mIG5ld0ZvbnQuZ2V0S2V5cygpKSB7CiAgICAgICAgICBvbGRGb250LnNldChrZXksIG5ld0ZvbnQuZ2V0UmF3KGtleSkpOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLl9maWVsZFJlc291cmNlcy5tZXJnZWRSZXNvdXJjZXMuc2V0KCJGb250IiwgbmV3Rm9udCk7CiAgICAgIH0KICAgICAgY29uc3QgZm9udE5hbWUgPSBmYWtlVW5pY29kZUZvbnQuZm9udE5hbWUubmFtZTsKICAgICAgZm9udCA9IGF3YWl0IFdpZGdldEFubm90YXRpb24uX2dldEZvbnREYXRhKGV2YWx1YXRvciwgdGFzaywgewogICAgICAgIGZvbnROYW1lLAogICAgICAgIGZvbnRTaXplOiAwCiAgICAgIH0sIHJlc291cmNlcyk7CiAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGVuY29kZWRMaW5lcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgICAgZW5jb2RlZExpbmVzW2ldID0gc3RyaW5nVG9VVEYxNlN0cmluZyhsaW5lc1tpXSk7CiAgICAgIH0KICAgICAgY29uc3Qgc2F2ZWREZWZhdWx0QXBwZWFyYW5jZSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShudWxsKSwgdGhpcy5kYXRhLmRlZmF1bHRBcHBlYXJhbmNlRGF0YSk7CiAgICAgIHRoaXMuZGF0YS5kZWZhdWx0QXBwZWFyYW5jZURhdGEuZm9udFNpemUgPSAwOwogICAgICB0aGlzLmRhdGEuZGVmYXVsdEFwcGVhcmFuY2VEYXRhLmZvbnROYW1lID0gZm9udE5hbWU7CiAgICAgIFtkZWZhdWx0QXBwZWFyYW5jZSwgZm9udFNpemUsIGxpbmVIZWlnaHRdID0gdGhpcy5fY29tcHV0ZUZvbnRTaXplKHRvdGFsSGVpZ2h0IC0gMiAqIGRlZmF1bHRQYWRkaW5nLCB0b3RhbFdpZHRoIC0gMiAqIGRlZmF1bHRIUGFkZGluZywgdmFsdWUsIGZvbnQsIGxpbmVDb3VudCk7CiAgICAgIHRoaXMuZGF0YS5kZWZhdWx0QXBwZWFyYW5jZURhdGEgPSBzYXZlZERlZmF1bHRBcHBlYXJhbmNlOwogICAgfSBlbHNlIHsKICAgICAgaWYgKCF0aGlzLl9pc09mZnNjcmVlbkNhbnZhc1N1cHBvcnRlZCkgewogICAgICAgIHdhcm4oIl9nZXRBcHBlYXJhbmNlOiBPZmZzY3JlZW5DYW52YXMgaXMgbm90IHN1cHBvcnRlZCwgYW5ub3RhdGlvbiBtYXkgbm90IHJlbmRlciBjb3JyZWN0bHkuIik7CiAgICAgIH0KICAgICAgW2RlZmF1bHRBcHBlYXJhbmNlLCBmb250U2l6ZSwgbGluZUhlaWdodF0gPSB0aGlzLl9jb21wdXRlRm9udFNpemUodG90YWxIZWlnaHQgLSAyICogZGVmYXVsdFBhZGRpbmcsIHRvdGFsV2lkdGggLSAyICogZGVmYXVsdEhQYWRkaW5nLCB2YWx1ZSwgZm9udCwgbGluZUNvdW50KTsKICAgIH0KICAgIGxldCBkZXNjZW50ID0gZm9udC5kZXNjZW50OwogICAgaWYgKGlzTmFOKGRlc2NlbnQpKSB7CiAgICAgIGRlc2NlbnQgPSBCQVNFTElORV9GQUNUT1IgKiBsaW5lSGVpZ2h0OwogICAgfSBlbHNlIHsKICAgICAgZGVzY2VudCA9IE1hdGgubWF4KEJBU0VMSU5FX0ZBQ1RPUiAqIGxpbmVIZWlnaHQsIE1hdGguYWJzKGRlc2NlbnQpICogZm9udFNpemUpOwogICAgfQogICAgY29uc3QgZGVmYXVsdFZQYWRkaW5nID0gTWF0aC5taW4oTWF0aC5mbG9vcigodG90YWxIZWlnaHQgLSBmb250U2l6ZSkgLyAyKSwgZGVmYXVsdFBhZGRpbmcpOwogICAgY29uc3QgYWxpZ25tZW50ID0gdGhpcy5kYXRhLnRleHRBbGlnbm1lbnQ7CiAgICBpZiAodGhpcy5kYXRhLm11bHRpTGluZSkgewogICAgICByZXR1cm4gdGhpcy5fZ2V0TXVsdGlsaW5lQXBwZWFyYW5jZShkZWZhdWx0QXBwZWFyYW5jZSwgZW5jb2RlZExpbmVzLCBmb250LCBmb250U2l6ZSwgdG90YWxXaWR0aCwgdG90YWxIZWlnaHQsIGFsaWdubWVudCwgZGVmYXVsdEhQYWRkaW5nLCBkZWZhdWx0VlBhZGRpbmcsIGRlc2NlbnQsIGxpbmVIZWlnaHQsIGFubm90YXRpb25TdG9yYWdlKTsKICAgIH0KICAgIGlmICh0aGlzLmRhdGEuY29tYikgewogICAgICByZXR1cm4gdGhpcy5fZ2V0Q29tYkFwcGVhcmFuY2UoZGVmYXVsdEFwcGVhcmFuY2UsIGZvbnQsIGVuY29kZWRMaW5lc1swXSwgZm9udFNpemUsIHRvdGFsV2lkdGgsIHRvdGFsSGVpZ2h0LCBkZWZhdWx0SFBhZGRpbmcsIGRlZmF1bHRWUGFkZGluZywgZGVzY2VudCwgbGluZUhlaWdodCwgYW5ub3RhdGlvblN0b3JhZ2UpOwogICAgfQogICAgY29uc3QgYm90dG9tUGFkZGluZyA9IGRlZmF1bHRWUGFkZGluZyArIGRlc2NlbnQ7CiAgICBpZiAoYWxpZ25tZW50ID09PSAwIHx8IGFsaWdubWVudCA+IDIpIHsKICAgICAgcmV0dXJuIGAvVHggQk1DIHEgJHtjb2xvcnN9QlQgYCArIGRlZmF1bHRBcHBlYXJhbmNlICsgYCAxIDAgMCAxICR7bnVtYmVyVG9TdHJpbmcoZGVmYXVsdEhQYWRkaW5nKX0gJHtudW1iZXJUb1N0cmluZyhib3R0b21QYWRkaW5nKX0gVG0gKCR7ZXNjYXBlU3RyaW5nKGVuY29kZWRMaW5lc1swXSl9KSBUamAgKyAiIEVUIFEgRU1DIjsKICAgIH0KICAgIGNvbnN0IHByZXZJbmZvID0gewogICAgICBzaGlmdDogMAogICAgfTsKICAgIGNvbnN0IHJlbmRlcmVkVGV4dCA9IHRoaXMuX3JlbmRlclRleHQoZW5jb2RlZExpbmVzWzBdLCBmb250LCBmb250U2l6ZSwgdG90YWxXaWR0aCwgYWxpZ25tZW50LCBwcmV2SW5mbywgZGVmYXVsdEhQYWRkaW5nLCBib3R0b21QYWRkaW5nKTsKICAgIHJldHVybiBgL1R4IEJNQyBxICR7Y29sb3JzfUJUIGAgKyBkZWZhdWx0QXBwZWFyYW5jZSArIGAgMSAwIDAgMSAwIDAgVG0gJHtyZW5kZXJlZFRleHR9YCArICIgRVQgUSBFTUMiOwogIH0KICBzdGF0aWMgYXN5bmMgX2dldEZvbnREYXRhKGV2YWx1YXRvciwgdGFzaywgYXBwZWFyYW5jZURhdGEsIHJlc291cmNlcykgewogICAgY29uc3Qgb3BlcmF0b3JMaXN0ID0gbmV3IE9wZXJhdG9yTGlzdCgpOwogICAgY29uc3QgaW5pdGlhbFN0YXRlID0gewogICAgICBmb250OiBudWxsLAogICAgICBjbG9uZSgpIHsKICAgICAgICByZXR1cm4gdGhpczsKICAgICAgfQogICAgfTsKICAgIGNvbnN0IHsKICAgICAgZm9udE5hbWUsCiAgICAgIGZvbnRTaXplCiAgICB9ID0gYXBwZWFyYW5jZURhdGE7CiAgICBhd2FpdCBldmFsdWF0b3IuaGFuZGxlU2V0Rm9udChyZXNvdXJjZXMsIFtmb250TmFtZSAmJiBOYW1lLmdldChmb250TmFtZSksIGZvbnRTaXplXSwgbnVsbCwgb3BlcmF0b3JMaXN0LCB0YXNrLCBpbml0aWFsU3RhdGUsIG51bGwpOwogICAgcmV0dXJuIGluaXRpYWxTdGF0ZS5mb250OwogIH0KICBfZ2V0VGV4dFdpZHRoKHRleHQsIGZvbnQpIHsKICAgIHJldHVybiBNYXRoLnN1bVByZWNpc2UoZm9udC5jaGFyc1RvR2x5cGhzKHRleHQpLm1hcChnID0+IGcud2lkdGgpKSAvIDEwMDA7CiAgfQogIF9jb21wdXRlRm9udFNpemUoaGVpZ2h0LCB3aWR0aCwgdGV4dCwgZm9udCwgbGluZUNvdW50KSB7CiAgICBsZXQgewogICAgICBmb250U2l6ZQogICAgfSA9IHRoaXMuZGF0YS5kZWZhdWx0QXBwZWFyYW5jZURhdGE7CiAgICBsZXQgbGluZUhlaWdodCA9IChmb250U2l6ZSB8fCAxMikgKiBMSU5FX0ZBQ1RPUiwKICAgICAgbnVtYmVyT2ZMaW5lcyA9IE1hdGgucm91bmQoaGVpZ2h0IC8gbGluZUhlaWdodCk7CiAgICBpZiAoIWZvbnRTaXplKSB7CiAgICAgIGNvbnN0IHJvdW5kV2l0aFR3b0RpZ2l0cyA9IHggPT4gTWF0aC5mbG9vcih4ICogMTAwKSAvIDEwMDsKICAgICAgaWYgKGxpbmVDb3VudCA9PT0gLTEpIHsKICAgICAgICBjb25zdCB0ZXh0V2lkdGggPSB0aGlzLl9nZXRUZXh0V2lkdGgodGV4dCwgZm9udCk7CiAgICAgICAgZm9udFNpemUgPSByb3VuZFdpdGhUd29EaWdpdHMoTWF0aC5taW4oaGVpZ2h0IC8gTElORV9GQUNUT1IsIHdpZHRoIC8gdGV4dFdpZHRoKSk7CiAgICAgICAgbnVtYmVyT2ZMaW5lcyA9IDE7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY29uc3QgbGluZXMgPSB0ZXh0LnNwbGl0KC9cclxuP3xcbi8pOwogICAgICAgIGNvbnN0IGNhY2hlZExpbmVzID0gW107CiAgICAgICAgZm9yIChjb25zdCBsaW5lIG9mIGxpbmVzKSB7CiAgICAgICAgICBjb25zdCBlbmNvZGVkID0gZm9udC5lbmNvZGVTdHJpbmcobGluZSkuam9pbigiIik7CiAgICAgICAgICBjb25zdCBnbHlwaHMgPSBmb250LmNoYXJzVG9HbHlwaHMoZW5jb2RlZCk7CiAgICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSBmb250LmdldENoYXJQb3NpdGlvbnMoZW5jb2RlZCk7CiAgICAgICAgICBjYWNoZWRMaW5lcy5wdXNoKHsKICAgICAgICAgICAgbGluZTogZW5jb2RlZCwKICAgICAgICAgICAgZ2x5cGhzLAogICAgICAgICAgICBwb3NpdGlvbnMKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICBjb25zdCBpc1Rvb0JpZyA9IGZzaXplID0+IHsKICAgICAgICAgIGxldCB0b3RhbEhlaWdodCA9IDA7CiAgICAgICAgICBmb3IgKGNvbnN0IGNhY2hlIG9mIGNhY2hlZExpbmVzKSB7CiAgICAgICAgICAgIGNvbnN0IGNodW5rcyA9IHRoaXMuX3NwbGl0TGluZShudWxsLCBmb250LCBmc2l6ZSwgd2lkdGgsIGNhY2hlKTsKICAgICAgICAgICAgdG90YWxIZWlnaHQgKz0gY2h1bmtzLmxlbmd0aCAqIGZzaXplOwogICAgICAgICAgICBpZiAodG90YWxIZWlnaHQgPiBoZWlnaHQpIHsKICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH07CiAgICAgICAgbnVtYmVyT2ZMaW5lcyA9IE1hdGgubWF4KG51bWJlck9mTGluZXMsIGxpbmVDb3VudCk7CiAgICAgICAgd2hpbGUgKHRydWUpIHsKICAgICAgICAgIGxpbmVIZWlnaHQgPSBoZWlnaHQgLyBudW1iZXJPZkxpbmVzOwogICAgICAgICAgZm9udFNpemUgPSByb3VuZFdpdGhUd29EaWdpdHMobGluZUhlaWdodCAvIExJTkVfRkFDVE9SKTsKICAgICAgICAgIGlmIChpc1Rvb0JpZyhmb250U2l6ZSkpIHsKICAgICAgICAgICAgbnVtYmVyT2ZMaW5lcysrOwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgfQogICAgICBjb25zdCB7CiAgICAgICAgZm9udE5hbWUsCiAgICAgICAgZm9udENvbG9yCiAgICAgIH0gPSB0aGlzLmRhdGEuZGVmYXVsdEFwcGVhcmFuY2VEYXRhOwogICAgICB0aGlzLl9kZWZhdWx0QXBwZWFyYW5jZSA9IGNyZWF0ZURlZmF1bHRBcHBlYXJhbmNlKHsKICAgICAgICBmb250U2l6ZSwKICAgICAgICBmb250TmFtZSwKICAgICAgICBmb250Q29sb3IKICAgICAgfSk7CiAgICB9CiAgICByZXR1cm4gW3RoaXMuX2RlZmF1bHRBcHBlYXJhbmNlLCBmb250U2l6ZSwgaGVpZ2h0IC8gbnVtYmVyT2ZMaW5lc107CiAgfQogIF9yZW5kZXJUZXh0KHRleHQsIGZvbnQsIGZvbnRTaXplLCB0b3RhbFdpZHRoLCBhbGlnbm1lbnQsIHByZXZJbmZvLCBoUGFkZGluZywgdlBhZGRpbmcpIHsKICAgIGxldCBzaGlmdDsKICAgIGlmIChhbGlnbm1lbnQgPT09IDEpIHsKICAgICAgY29uc3Qgd2lkdGggPSB0aGlzLl9nZXRUZXh0V2lkdGgodGV4dCwgZm9udCkgKiBmb250U2l6ZTsKICAgICAgc2hpZnQgPSAodG90YWxXaWR0aCAtIHdpZHRoKSAvIDI7CiAgICB9IGVsc2UgaWYgKGFsaWdubWVudCA9PT0gMikgewogICAgICBjb25zdCB3aWR0aCA9IHRoaXMuX2dldFRleHRXaWR0aCh0ZXh0LCBmb250KSAqIGZvbnRTaXplOwogICAgICBzaGlmdCA9IHRvdGFsV2lkdGggLSB3aWR0aCAtIGhQYWRkaW5nOwogICAgfSBlbHNlIHsKICAgICAgc2hpZnQgPSBoUGFkZGluZzsKICAgIH0KICAgIGNvbnN0IHNoaWZ0U3RyID0gbnVtYmVyVG9TdHJpbmcoc2hpZnQgLSBwcmV2SW5mby5zaGlmdCk7CiAgICBwcmV2SW5mby5zaGlmdCA9IHNoaWZ0OwogICAgdlBhZGRpbmcgPSBudW1iZXJUb1N0cmluZyh2UGFkZGluZyk7CiAgICByZXR1cm4gYCR7c2hpZnRTdHJ9ICR7dlBhZGRpbmd9IFRkICgke2VzY2FwZVN0cmluZyh0ZXh0KX0pIFRqYDsKICB9CiAgX2dldFNhdmVGaWVsZFJlc291cmNlcyh4cmVmKSB7CiAgICBjb25zdCB7CiAgICAgIGxvY2FsUmVzb3VyY2VzLAogICAgICBhcHBlYXJhbmNlUmVzb3VyY2VzLAogICAgICBhY3JvRm9ybVJlc291cmNlcwogICAgfSA9IHRoaXMuX2ZpZWxkUmVzb3VyY2VzOwogICAgY29uc3QgZm9udE5hbWUgPSB0aGlzLmRhdGEuZGVmYXVsdEFwcGVhcmFuY2VEYXRhPy5mb250TmFtZTsKICAgIGlmICghZm9udE5hbWUpIHsKICAgICAgcmV0dXJuIGxvY2FsUmVzb3VyY2VzIHx8IERpY3QuZW1wdHk7CiAgICB9CiAgICBmb3IgKGNvbnN0IHJlc291cmNlcyBvZiBbbG9jYWxSZXNvdXJjZXMsIGFwcGVhcmFuY2VSZXNvdXJjZXNdKSB7CiAgICAgIGlmIChyZXNvdXJjZXMgaW5zdGFuY2VvZiBEaWN0KSB7CiAgICAgICAgY29uc3QgbG9jYWxGb250ID0gcmVzb3VyY2VzLmdldCgiRm9udCIpOwogICAgICAgIGlmIChsb2NhbEZvbnQgaW5zdGFuY2VvZiBEaWN0ICYmIGxvY2FsRm9udC5oYXMoZm9udE5hbWUpKSB7CiAgICAgICAgICByZXR1cm4gcmVzb3VyY2VzOwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgaWYgKGFjcm9Gb3JtUmVzb3VyY2VzIGluc3RhbmNlb2YgRGljdCkgewogICAgICBjb25zdCBhY3JvRm9ybUZvbnQgPSBhY3JvRm9ybVJlc291cmNlcy5nZXQoIkZvbnQiKTsKICAgICAgaWYgKGFjcm9Gb3JtRm9udCBpbnN0YW5jZW9mIERpY3QgJiYgYWNyb0Zvcm1Gb250Lmhhcyhmb250TmFtZSkpIHsKICAgICAgICBjb25zdCBzdWJGb250RGljdCA9IG5ldyBEaWN0KHhyZWYpOwogICAgICAgIHN1YkZvbnREaWN0LnNldChmb250TmFtZSwgYWNyb0Zvcm1Gb250LmdldFJhdyhmb250TmFtZSkpOwogICAgICAgIGNvbnN0IHN1YlJlc291cmNlc0RpY3QgPSBuZXcgRGljdCh4cmVmKTsKICAgICAgICBzdWJSZXNvdXJjZXNEaWN0LnNldCgiRm9udCIsIHN1YkZvbnREaWN0KTsKICAgICAgICByZXR1cm4gRGljdC5tZXJnZSh7CiAgICAgICAgICB4cmVmLAogICAgICAgICAgZGljdEFycmF5OiBbc3ViUmVzb3VyY2VzRGljdCwgbG9jYWxSZXNvdXJjZXNdLAogICAgICAgICAgbWVyZ2VTdWJEaWN0czogdHJ1ZQogICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gbG9jYWxSZXNvdXJjZXMgfHwgRGljdC5lbXB0eTsKICB9CiAgZ2V0RmllbGRPYmplY3QoKSB7CiAgICByZXR1cm4gbnVsbDsKICB9Cn0KY2xhc3MgVGV4dFdpZGdldEFubm90YXRpb24gZXh0ZW5kcyBXaWRnZXRBbm5vdGF0aW9uIHsKICBjb25zdHJ1Y3RvcihwYXJhbXMpIHsKICAgIHN1cGVyKHBhcmFtcyk7CiAgICBjb25zdCB7CiAgICAgIGRpY3QKICAgIH0gPSBwYXJhbXM7CiAgICBpZiAoZGljdC5oYXMoIlBNRCIpKSB7CiAgICAgIHRoaXMuZmxhZ3MgfD0gQW5ub3RhdGlvbkZsYWcuSElEREVOOwogICAgICB0aGlzLmRhdGEuaGlkZGVuID0gdHJ1ZTsKICAgICAgd2FybigiQmFyY29kZXMgYXJlIG5vdCBzdXBwb3J0ZWQiKTsKICAgIH0KICAgIHRoaXMuZGF0YS5oYXNPd25DYW52YXMgPSB0aGlzLmRhdGEucmVhZE9ubHkgJiYgIXRoaXMuZGF0YS5ub0hUTUw7CiAgICB0aGlzLl9oYXNUZXh0ID0gdHJ1ZTsKICAgIGlmICh0eXBlb2YgdGhpcy5kYXRhLmZpZWxkVmFsdWUgIT09ICJzdHJpbmciKSB7CiAgICAgIHRoaXMuZGF0YS5maWVsZFZhbHVlID0gIiI7CiAgICB9CiAgICBsZXQgYWxpZ25tZW50ID0gZ2V0SW5oZXJpdGFibGVQcm9wZXJ0eSh7CiAgICAgIGRpY3QsCiAgICAgIGtleTogIlEiCiAgICB9KTsKICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihhbGlnbm1lbnQpIHx8IGFsaWdubWVudCA8IDAgfHwgYWxpZ25tZW50ID4gMikgewogICAgICBhbGlnbm1lbnQgPSBudWxsOwogICAgfQogICAgdGhpcy5kYXRhLnRleHRBbGlnbm1lbnQgPSBhbGlnbm1lbnQ7CiAgICBsZXQgbWF4aW11bUxlbmd0aCA9IGdldEluaGVyaXRhYmxlUHJvcGVydHkoewogICAgICBkaWN0LAogICAgICBrZXk6ICJNYXhMZW4iCiAgICB9KTsKICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihtYXhpbXVtTGVuZ3RoKSB8fCBtYXhpbXVtTGVuZ3RoIDwgMCkgewogICAgICBtYXhpbXVtTGVuZ3RoID0gMDsKICAgIH0KICAgIHRoaXMuZGF0YS5tYXhMZW4gPSBtYXhpbXVtTGVuZ3RoOwogICAgdGhpcy5kYXRhLm11bHRpTGluZSA9IHRoaXMuaGFzRmllbGRGbGFnKEFubm90YXRpb25GaWVsZEZsYWcuTVVMVElMSU5FKTsKICAgIHRoaXMuZGF0YS5jb21iID0gdGhpcy5oYXNGaWVsZEZsYWcoQW5ub3RhdGlvbkZpZWxkRmxhZy5DT01CKSAmJiAhdGhpcy5kYXRhLm11bHRpTGluZSAmJiAhdGhpcy5kYXRhLnBhc3N3b3JkICYmICF0aGlzLmhhc0ZpZWxkRmxhZyhBbm5vdGF0aW9uRmllbGRGbGFnLkZJTEVTRUxFQ1QpICYmIHRoaXMuZGF0YS5tYXhMZW4gIT09IDA7CiAgICB0aGlzLmRhdGEuZG9Ob3RTY3JvbGwgPSB0aGlzLmhhc0ZpZWxkRmxhZyhBbm5vdGF0aW9uRmllbGRGbGFnLkRPTk9UU0NST0xMKTsKICAgIGNvbnN0IHsKICAgICAgZGF0YTogewogICAgICAgIGFjdGlvbnMKICAgICAgfQogICAgfSA9IHRoaXM7CiAgICBpZiAoIWFjdGlvbnMpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgY29uc3QgQUZEYXRlVGltZSA9IC9eQUYoRGF0ZXxUaW1lKV8oPzpLZXlzdHJva2V8Rm9ybWF0KSg/OkV4KT9cKFsnIl0/KFteJyJdKylbJyJdP1wpOyQvOwogICAgbGV0IGNhblVzZUhUTUxEYXRlVGltZSA9IGZhbHNlOwogICAgaWYgKGFjdGlvbnMuRm9ybWF0Py5sZW5ndGggPT09IDEgJiYgYWN0aW9ucy5LZXlzdHJva2U/Lmxlbmd0aCA9PT0gMSAmJiBBRkRhdGVUaW1lLnRlc3QoYWN0aW9ucy5Gb3JtYXRbMF0pICYmIEFGRGF0ZVRpbWUudGVzdChhY3Rpb25zLktleXN0cm9rZVswXSkgfHwgYWN0aW9ucy5Gb3JtYXQ/Lmxlbmd0aCA9PT0gMCAmJiBhY3Rpb25zLktleXN0cm9rZT8ubGVuZ3RoID09PSAxICYmIEFGRGF0ZVRpbWUudGVzdChhY3Rpb25zLktleXN0cm9rZVswXSkgfHwgYWN0aW9ucy5LZXlzdHJva2U/Lmxlbmd0aCA9PT0gMCAmJiBhY3Rpb25zLkZvcm1hdD8ubGVuZ3RoID09PSAxICYmIEFGRGF0ZVRpbWUudGVzdChhY3Rpb25zLkZvcm1hdFswXSkpIHsKICAgICAgY2FuVXNlSFRNTERhdGVUaW1lID0gdHJ1ZTsKICAgIH0KICAgIGNvbnN0IGFjdGlvbnNUb1Zpc2l0ID0gW107CiAgICBpZiAoYWN0aW9ucy5Gb3JtYXQpIHsKICAgICAgYWN0aW9uc1RvVmlzaXQucHVzaCguLi5hY3Rpb25zLkZvcm1hdCk7CiAgICB9CiAgICBpZiAoYWN0aW9ucy5LZXlzdHJva2UpIHsKICAgICAgYWN0aW9uc1RvVmlzaXQucHVzaCguLi5hY3Rpb25zLktleXN0cm9rZSk7CiAgICB9CiAgICBpZiAoY2FuVXNlSFRNTERhdGVUaW1lKSB7CiAgICAgIGRlbGV0ZSBhY3Rpb25zLktleXN0cm9rZTsKICAgICAgYWN0aW9ucy5Gb3JtYXQgPSBhY3Rpb25zVG9WaXNpdDsKICAgIH0KICAgIGZvciAoY29uc3QgZm9ybWF0QWN0aW9uIG9mIGFjdGlvbnNUb1Zpc2l0KSB7CiAgICAgIGNvbnN0IG0gPSBmb3JtYXRBY3Rpb24ubWF0Y2goQUZEYXRlVGltZSk7CiAgICAgIGlmICghbSkgewogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGNvbnN0IGlzRGF0ZSA9IG1bMV0gPT09ICJEYXRlIjsKICAgICAgbGV0IGZvcm1hdCA9IG1bMl07CiAgICAgIGNvbnN0IG51bSA9IHBhcnNlSW50KGZvcm1hdCwgMTApOwogICAgICBpZiAoIWlzTmFOKG51bSkgJiYgTWF0aC5mbG9vcihNYXRoLmxvZzEwKG51bSkpICsgMSA9PT0gbVsyXS5sZW5ndGgpIHsKICAgICAgICBmb3JtYXQgPSAoaXNEYXRlID8gRGF0ZUZvcm1hdHMgOiBUaW1lRm9ybWF0cylbbnVtXSA/PyBmb3JtYXQ7CiAgICAgIH0KICAgICAgdGhpcy5kYXRhLmRhdGV0aW1lRm9ybWF0ID0gZm9ybWF0OwogICAgICBpZiAoIWNhblVzZUhUTUxEYXRlVGltZSkgewogICAgICAgIGJyZWFrOwogICAgICB9CiAgICAgIGlmIChpc0RhdGUpIHsKICAgICAgICBpZiAoL0hIfE1NfHNzfGgvLnRlc3QoZm9ybWF0KSkgewogICAgICAgICAgdGhpcy5kYXRhLmRhdGV0aW1lVHlwZSA9ICJkYXRldGltZS1sb2NhbCI7CiAgICAgICAgICB0aGlzLmRhdGEudGltZVN0ZXAgPSAvc3MvLnRlc3QoZm9ybWF0KSA/IDEgOiA2MDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy5kYXRhLmRhdGV0aW1lVHlwZSA9ICJkYXRlIjsKICAgICAgICB9CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgICAgdGhpcy5kYXRhLmRhdGV0aW1lVHlwZSA9ICJ0aW1lIjsKICAgICAgdGhpcy5kYXRhLnRpbWVTdGVwID0gL3NzLy50ZXN0KGZvcm1hdCkgPyAxIDogNjA7CiAgICAgIGJyZWFrOwogICAgfQogIH0KICBnZXQgaGFzVGV4dENvbnRlbnQoKSB7CiAgICByZXR1cm4gISF0aGlzLmFwcGVhcmFuY2UgJiYgIXRoaXMuX25lZWRBcHBlYXJhbmNlczsKICB9CiAgX2dldENvbWJBcHBlYXJhbmNlKGRlZmF1bHRBcHBlYXJhbmNlLCBmb250LCB0ZXh0LCBmb250U2l6ZSwgd2lkdGgsIGhlaWdodCwgaFBhZGRpbmcsIHZQYWRkaW5nLCBkZXNjZW50LCBsaW5lSGVpZ2h0LCBhbm5vdGF0aW9uU3RvcmFnZSkgewogICAgY29uc3QgY29tYldpZHRoID0gd2lkdGggLyB0aGlzLmRhdGEubWF4TGVuOwogICAgY29uc3QgY29sb3JzID0gdGhpcy5nZXRCb3JkZXJBbmRCYWNrZ3JvdW5kQXBwZWFyYW5jZXMoYW5ub3RhdGlvblN0b3JhZ2UpOwogICAgY29uc3QgYnVmID0gW107CiAgICBjb25zdCBwb3NpdGlvbnMgPSBmb250LmdldENoYXJQb3NpdGlvbnModGV4dCk7CiAgICBmb3IgKGNvbnN0IFtzdGFydCwgZW5kXSBvZiBwb3NpdGlvbnMpIHsKICAgICAgYnVmLnB1c2goYCgke2VzY2FwZVN0cmluZyh0ZXh0LnN1YnN0cmluZyhzdGFydCwgZW5kKSl9KSBUamApOwogICAgfQogICAgY29uc3QgcmVuZGVyZWRDb21iID0gYnVmLmpvaW4oYCAke251bWJlclRvU3RyaW5nKGNvbWJXaWR0aCl9IDAgVGQgYCk7CiAgICByZXR1cm4gYC9UeCBCTUMgcSAke2NvbG9yc31CVCBgICsgZGVmYXVsdEFwcGVhcmFuY2UgKyBgIDEgMCAwIDEgJHtudW1iZXJUb1N0cmluZyhoUGFkZGluZyl9ICR7bnVtYmVyVG9TdHJpbmcodlBhZGRpbmcgKyBkZXNjZW50KX0gVG0gJHtyZW5kZXJlZENvbWJ9YCArICIgRVQgUSBFTUMiOwogIH0KICBfZ2V0TXVsdGlsaW5lQXBwZWFyYW5jZShkZWZhdWx0QXBwZWFyYW5jZSwgbGluZXMsIGZvbnQsIGZvbnRTaXplLCB3aWR0aCwgaGVpZ2h0LCBhbGlnbm1lbnQsIGhQYWRkaW5nLCB2UGFkZGluZywgZGVzY2VudCwgbGluZUhlaWdodCwgYW5ub3RhdGlvblN0b3JhZ2UpIHsKICAgIGNvbnN0IGJ1ZiA9IFtdOwogICAgY29uc3QgdG90YWxXaWR0aCA9IHdpZHRoIC0gMiAqIGhQYWRkaW5nOwogICAgY29uc3QgcHJldkluZm8gPSB7CiAgICAgIHNoaWZ0OiAwCiAgICB9OwogICAgZm9yIChsZXQgaSA9IDAsIGlpID0gbGluZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgICBjb25zdCBsaW5lID0gbGluZXNbaV07CiAgICAgIGNvbnN0IGNodW5rcyA9IHRoaXMuX3NwbGl0TGluZShsaW5lLCBmb250LCBmb250U2l6ZSwgdG90YWxXaWR0aCk7CiAgICAgIGZvciAobGV0IGogPSAwLCBqaiA9IGNodW5rcy5sZW5ndGg7IGogPCBqajsgaisrKSB7CiAgICAgICAgY29uc3QgY2h1bmsgPSBjaHVua3Nbal07CiAgICAgICAgY29uc3QgdlNoaWZ0ID0gaSA9PT0gMCAmJiBqID09PSAwID8gLXZQYWRkaW5nIC0gKGxpbmVIZWlnaHQgLSBkZXNjZW50KSA6IC1saW5lSGVpZ2h0OwogICAgICAgIGJ1Zi5wdXNoKHRoaXMuX3JlbmRlclRleHQoY2h1bmssIGZvbnQsIGZvbnRTaXplLCB3aWR0aCwgYWxpZ25tZW50LCBwcmV2SW5mbywgaFBhZGRpbmcsIHZTaGlmdCkpOwogICAgICB9CiAgICB9CiAgICBjb25zdCBjb2xvcnMgPSB0aGlzLmdldEJvcmRlckFuZEJhY2tncm91bmRBcHBlYXJhbmNlcyhhbm5vdGF0aW9uU3RvcmFnZSk7CiAgICBjb25zdCByZW5kZXJlZFRleHQgPSBidWYuam9pbigiXG4iKTsKICAgIHJldHVybiBgL1R4IEJNQyBxICR7Y29sb3JzfUJUIGAgKyBkZWZhdWx0QXBwZWFyYW5jZSArIGAgMSAwIDAgMSAwICR7bnVtYmVyVG9TdHJpbmcoaGVpZ2h0KX0gVG0gJHtyZW5kZXJlZFRleHR9YCArICIgRVQgUSBFTUMiOwogIH0KICBfc3BsaXRMaW5lKGxpbmUsIGZvbnQsIGZvbnRTaXplLCB3aWR0aCwgY2FjaGUgPSB7fSkgewogICAgbGluZSA9IGNhY2hlLmxpbmUgfHwgbGluZTsKICAgIGNvbnN0IGdseXBocyA9IGNhY2hlLmdseXBocyB8fCBmb250LmNoYXJzVG9HbHlwaHMobGluZSk7CiAgICBpZiAoZ2x5cGhzLmxlbmd0aCA8PSAxKSB7CiAgICAgIHJldHVybiBbbGluZV07CiAgICB9CiAgICBjb25zdCBwb3NpdGlvbnMgPSBjYWNoZS5wb3NpdGlvbnMgfHwgZm9udC5nZXRDaGFyUG9zaXRpb25zKGxpbmUpOwogICAgY29uc3Qgc2NhbGUgPSBmb250U2l6ZSAvIDEwMDA7CiAgICBjb25zdCBjaHVua3MgPSBbXTsKICAgIGxldCBsYXN0U3BhY2VQb3NJblN0cmluZ1N0YXJ0ID0gLTEsCiAgICAgIGxhc3RTcGFjZVBvc0luU3RyaW5nRW5kID0gLTEsCiAgICAgIGxhc3RTcGFjZVBvcyA9IC0xLAogICAgICBzdGFydENodW5rID0gMCwKICAgICAgY3VycmVudFdpZHRoID0gMDsKICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGdseXBocy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgIGNvbnN0IFtzdGFydCwgZW5kXSA9IHBvc2l0aW9uc1tpXTsKICAgICAgY29uc3QgZ2x5cGggPSBnbHlwaHNbaV07CiAgICAgIGNvbnN0IGdseXBoV2lkdGggPSBnbHlwaC53aWR0aCAqIHNjYWxlOwogICAgICBpZiAoZ2x5cGgudW5pY29kZSA9PT0gIiAiKSB7CiAgICAgICAgaWYgKGN1cnJlbnRXaWR0aCArIGdseXBoV2lkdGggPiB3aWR0aCkgewogICAgICAgICAgY2h1bmtzLnB1c2gobGluZS5zdWJzdHJpbmcoc3RhcnRDaHVuaywgc3RhcnQpKTsKICAgICAgICAgIHN0YXJ0Q2h1bmsgPSBzdGFydDsKICAgICAgICAgIGN1cnJlbnRXaWR0aCA9IGdseXBoV2lkdGg7CiAgICAgICAgICBsYXN0U3BhY2VQb3NJblN0cmluZ1N0YXJ0ID0gLTE7CiAgICAgICAgICBsYXN0U3BhY2VQb3MgPSAtMTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY3VycmVudFdpZHRoICs9IGdseXBoV2lkdGg7CiAgICAgICAgICBsYXN0U3BhY2VQb3NJblN0cmluZ1N0YXJ0ID0gc3RhcnQ7CiAgICAgICAgICBsYXN0U3BhY2VQb3NJblN0cmluZ0VuZCA9IGVuZDsKICAgICAgICAgIGxhc3RTcGFjZVBvcyA9IGk7CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKGN1cnJlbnRXaWR0aCArIGdseXBoV2lkdGggPiB3aWR0aCkgewogICAgICAgIGlmIChsYXN0U3BhY2VQb3NJblN0cmluZ1N0YXJ0ICE9PSAtMSkgewogICAgICAgICAgY2h1bmtzLnB1c2gobGluZS5zdWJzdHJpbmcoc3RhcnRDaHVuaywgbGFzdFNwYWNlUG9zSW5TdHJpbmdFbmQpKTsKICAgICAgICAgIHN0YXJ0Q2h1bmsgPSBsYXN0U3BhY2VQb3NJblN0cmluZ0VuZDsKICAgICAgICAgIGkgPSBsYXN0U3BhY2VQb3MgKyAxOwogICAgICAgICAgbGFzdFNwYWNlUG9zSW5TdHJpbmdTdGFydCA9IC0xOwogICAgICAgICAgY3VycmVudFdpZHRoID0gMDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY2h1bmtzLnB1c2gobGluZS5zdWJzdHJpbmcoc3RhcnRDaHVuaywgc3RhcnQpKTsKICAgICAgICAgIHN0YXJ0Q2h1bmsgPSBzdGFydDsKICAgICAgICAgIGN1cnJlbnRXaWR0aCA9IGdseXBoV2lkdGg7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIGN1cnJlbnRXaWR0aCArPSBnbHlwaFdpZHRoOwogICAgICB9CiAgICB9CiAgICBpZiAoc3RhcnRDaHVuayA8IGxpbmUubGVuZ3RoKSB7CiAgICAgIGNodW5rcy5wdXNoKGxpbmUuc3Vic3RyaW5nKHN0YXJ0Q2h1bmssIGxpbmUubGVuZ3RoKSk7CiAgICB9CiAgICByZXR1cm4gY2h1bmtzOwogIH0KICBhc3luYyBleHRyYWN0VGV4dENvbnRlbnQoZXZhbHVhdG9yLCB0YXNrLCB2aWV3Qm94KSB7CiAgICBhd2FpdCBzdXBlci5leHRyYWN0VGV4dENvbnRlbnQoZXZhbHVhdG9yLCB0YXNrLCB2aWV3Qm94KTsKICAgIGNvbnN0IHRleHQgPSB0aGlzLmRhdGEudGV4dENvbnRlbnQ7CiAgICBpZiAoIXRleHQpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgY29uc3QgYWxsVGV4dCA9IHRleHQuam9pbigiXG4iKTsKICAgIGlmIChhbGxUZXh0ID09PSB0aGlzLmRhdGEuZmllbGRWYWx1ZSkgewogICAgICByZXR1cm47CiAgICB9CiAgICBjb25zdCByZWdleCA9IGFsbFRleHQucmVwbGFjZUFsbCgvKFsuKis/XiR7fSgpfFtcXVxcXSl8KFxzKykvZywgKF9tLCBwMSkgPT4gcDEgPyBgXFwke3AxfWAgOiAiXFxzKyIpOwogICAgaWYgKG5ldyBSZWdFeHAoYF5cXHMqJHtyZWdleH1cXHMqJGApLnRlc3QodGhpcy5kYXRhLmZpZWxkVmFsdWUpKSB7CiAgICAgIHRoaXMuZGF0YS50ZXh0Q29udGVudCA9IHRoaXMuZGF0YS5maWVsZFZhbHVlLnNwbGl0KCJcbiIpOwogICAgfQogIH0KICBnZXRGaWVsZE9iamVjdCgpIHsKICAgIHJldHVybiB7CiAgICAgIGlkOiB0aGlzLmRhdGEuaWQsCiAgICAgIHZhbHVlOiB0aGlzLmRhdGEuZmllbGRWYWx1ZSwKICAgICAgZGVmYXVsdFZhbHVlOiB0aGlzLmRhdGEuZGVmYXVsdEZpZWxkVmFsdWUgfHwgIiIsCiAgICAgIG11bHRpbGluZTogdGhpcy5kYXRhLm11bHRpTGluZSwKICAgICAgcGFzc3dvcmQ6IHRoaXMuZGF0YS5wYXNzd29yZCwKICAgICAgY2hhckxpbWl0OiB0aGlzLmRhdGEubWF4TGVuLAogICAgICBjb21iOiB0aGlzLmRhdGEuY29tYiwKICAgICAgZWRpdGFibGU6ICF0aGlzLmRhdGEucmVhZE9ubHksCiAgICAgIGhpZGRlbjogdGhpcy5kYXRhLmhpZGRlbiwKICAgICAgbmFtZTogdGhpcy5kYXRhLmZpZWxkTmFtZSwKICAgICAgcmVjdDogdGhpcy5kYXRhLnJlY3QsCiAgICAgIGFjdGlvbnM6IHRoaXMuZGF0YS5hY3Rpb25zLAogICAgICBwYWdlOiB0aGlzLmRhdGEucGFnZUluZGV4LAogICAgICBzdHJva2VDb2xvcjogdGhpcy5kYXRhLmJvcmRlckNvbG9yLAogICAgICBmaWxsQ29sb3I6IHRoaXMuZGF0YS5iYWNrZ3JvdW5kQ29sb3IsCiAgICAgIHJvdGF0aW9uOiB0aGlzLnJvdGF0aW9uLAogICAgICBkYXRldGltZUZvcm1hdDogdGhpcy5kYXRhLmRhdGV0aW1lRm9ybWF0LAogICAgICBoYXNEYXRldGltZUhUTUw6ICEhdGhpcy5kYXRhLmRhdGV0aW1lVHlwZSwKICAgICAgdHlwZTogInRleHQiCiAgICB9OwogIH0KfQpjbGFzcyBCdXR0b25XaWRnZXRBbm5vdGF0aW9uIGV4dGVuZHMgV2lkZ2V0QW5ub3RhdGlvbiB7CiAgY29uc3RydWN0b3IocGFyYW1zKSB7CiAgICBzdXBlcihwYXJhbXMpOwogICAgdGhpcy5jaGVja2VkQXBwZWFyYW5jZSA9IG51bGw7CiAgICB0aGlzLnVuY2hlY2tlZEFwcGVhcmFuY2UgPSBudWxsOwogICAgY29uc3QgaXNSYWRpbyA9IHRoaXMuaGFzRmllbGRGbGFnKEFubm90YXRpb25GaWVsZEZsYWcuUkFESU8pLAogICAgICBpc1B1c2hCdXR0b24gPSB0aGlzLmhhc0ZpZWxkRmxhZyhBbm5vdGF0aW9uRmllbGRGbGFnLlBVU0hCVVRUT04pOwogICAgdGhpcy5kYXRhLmNoZWNrQm94ID0gIWlzUmFkaW8gJiYgIWlzUHVzaEJ1dHRvbjsKICAgIHRoaXMuZGF0YS5yYWRpb0J1dHRvbiA9IGlzUmFkaW8gJiYgIWlzUHVzaEJ1dHRvbjsKICAgIHRoaXMuZGF0YS5wdXNoQnV0dG9uID0gaXNQdXNoQnV0dG9uOwogICAgdGhpcy5kYXRhLmlzVG9vbHRpcE9ubHkgPSBmYWxzZTsKICAgIGlmICh0aGlzLmRhdGEuY2hlY2tCb3gpIHsKICAgICAgdGhpcy5fcHJvY2Vzc0NoZWNrQm94KHBhcmFtcyk7CiAgICB9IGVsc2UgaWYgKHRoaXMuZGF0YS5yYWRpb0J1dHRvbikgewogICAgICB0aGlzLl9wcm9jZXNzUmFkaW9CdXR0b24ocGFyYW1zKTsKICAgIH0gZWxzZSBpZiAodGhpcy5kYXRhLnB1c2hCdXR0b24pIHsKICAgICAgdGhpcy5kYXRhLmhhc093bkNhbnZhcyA9IHRydWU7CiAgICAgIHRoaXMuZGF0YS5ub0hUTUwgPSBmYWxzZTsKICAgICAgdGhpcy5fcHJvY2Vzc1B1c2hCdXR0b24ocGFyYW1zKTsKICAgIH0gZWxzZSB7CiAgICAgIHdhcm4oIkludmFsaWQgZmllbGQgZmxhZ3MgZm9yIGJ1dHRvbiB3aWRnZXQgYW5ub3RhdGlvbiIpOwogICAgfQogIH0KICBhc3luYyBnZXRPcGVyYXRvckxpc3QoZXZhbHVhdG9yLCB0YXNrLCBpbnRlbnQsIGFubm90YXRpb25TdG9yYWdlKSB7CiAgICBpZiAodGhpcy5kYXRhLnB1c2hCdXR0b24pIHsKICAgICAgcmV0dXJuIHN1cGVyLmdldE9wZXJhdG9yTGlzdChldmFsdWF0b3IsIHRhc2ssIGludGVudCwgZmFsc2UsIGFubm90YXRpb25TdG9yYWdlKTsKICAgIH0KICAgIGxldCB2YWx1ZSA9IG51bGw7CiAgICBsZXQgcm90YXRpb24gPSBudWxsOwogICAgaWYgKGFubm90YXRpb25TdG9yYWdlKSB7CiAgICAgIGNvbnN0IHN0b3JhZ2VFbnRyeSA9IGFubm90YXRpb25TdG9yYWdlLmdldCh0aGlzLmRhdGEuaWQpOwogICAgICB2YWx1ZSA9IHN0b3JhZ2VFbnRyeSA/IHN0b3JhZ2VFbnRyeS52YWx1ZSA6IG51bGw7CiAgICAgIHJvdGF0aW9uID0gc3RvcmFnZUVudHJ5ID8gc3RvcmFnZUVudHJ5LnJvdGF0aW9uIDogbnVsbDsKICAgIH0KICAgIGlmICh2YWx1ZSA9PT0gbnVsbCAmJiB0aGlzLmFwcGVhcmFuY2UpIHsKICAgICAgcmV0dXJuIHN1cGVyLmdldE9wZXJhdG9yTGlzdChldmFsdWF0b3IsIHRhc2ssIGludGVudCwgYW5ub3RhdGlvblN0b3JhZ2UpOwogICAgfQogICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHsKICAgICAgdmFsdWUgPSB0aGlzLmRhdGEuY2hlY2tCb3ggPyB0aGlzLmRhdGEuZmllbGRWYWx1ZSA9PT0gdGhpcy5kYXRhLmV4cG9ydFZhbHVlIDogdGhpcy5kYXRhLmZpZWxkVmFsdWUgPT09IHRoaXMuZGF0YS5idXR0b25WYWx1ZTsKICAgIH0KICAgIGNvbnN0IGFwcGVhcmFuY2UgPSB2YWx1ZSA/IHRoaXMuY2hlY2tlZEFwcGVhcmFuY2UgOiB0aGlzLnVuY2hlY2tlZEFwcGVhcmFuY2U7CiAgICBpZiAoYXBwZWFyYW5jZSkgewogICAgICBjb25zdCBzYXZlZEFwcGVhcmFuY2UgPSB0aGlzLmFwcGVhcmFuY2U7CiAgICAgIGNvbnN0IHNhdmVkTWF0cml4ID0gbG9va3VwTWF0cml4KGFwcGVhcmFuY2UuZGljdC5nZXRBcnJheSgiTWF0cml4IiksIElERU5USVRZX01BVFJJWCk7CiAgICAgIGlmIChyb3RhdGlvbikgewogICAgICAgIGFwcGVhcmFuY2UuZGljdC5zZXQoIk1hdHJpeCIsIHRoaXMuZ2V0Um90YXRpb25NYXRyaXgoYW5ub3RhdGlvblN0b3JhZ2UpKTsKICAgICAgfQogICAgICB0aGlzLmFwcGVhcmFuY2UgPSBhcHBlYXJhbmNlOwogICAgICBjb25zdCBvcGVyYXRvckxpc3QgPSBzdXBlci5nZXRPcGVyYXRvckxpc3QoZXZhbHVhdG9yLCB0YXNrLCBpbnRlbnQsIGFubm90YXRpb25TdG9yYWdlKTsKICAgICAgdGhpcy5hcHBlYXJhbmNlID0gc2F2ZWRBcHBlYXJhbmNlOwogICAgICBhcHBlYXJhbmNlLmRpY3Quc2V0KCJNYXRyaXgiLCBzYXZlZE1hdHJpeCk7CiAgICAgIHJldHVybiBvcGVyYXRvckxpc3Q7CiAgICB9CiAgICByZXR1cm4gewogICAgICBvcExpc3Q6IG5ldyBPcGVyYXRvckxpc3QoKSwKICAgICAgc2VwYXJhdGVGb3JtOiBmYWxzZSwKICAgICAgc2VwYXJhdGVDYW52YXM6IGZhbHNlCiAgICB9OwogIH0KICBhc3luYyBzYXZlKGV2YWx1YXRvciwgdGFzaywgYW5ub3RhdGlvblN0b3JhZ2UsIGNoYW5nZXMpIHsKICAgIGlmICh0aGlzLmRhdGEuY2hlY2tCb3gpIHsKICAgICAgdGhpcy5fc2F2ZUNoZWNrYm94KGV2YWx1YXRvciwgdGFzaywgYW5ub3RhdGlvblN0b3JhZ2UsIGNoYW5nZXMpOwogICAgICByZXR1cm47CiAgICB9CiAgICBpZiAodGhpcy5kYXRhLnJhZGlvQnV0dG9uKSB7CiAgICAgIHRoaXMuX3NhdmVSYWRpb0J1dHRvbihldmFsdWF0b3IsIHRhc2ssIGFubm90YXRpb25TdG9yYWdlLCBjaGFuZ2VzKTsKICAgIH0KICB9CiAgYXN5bmMgX3NhdmVDaGVja2JveChldmFsdWF0b3IsIHRhc2ssIGFubm90YXRpb25TdG9yYWdlLCBjaGFuZ2VzKSB7CiAgICBpZiAoIWFubm90YXRpb25TdG9yYWdlKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGNvbnN0IHN0b3JhZ2VFbnRyeSA9IGFubm90YXRpb25TdG9yYWdlLmdldCh0aGlzLmRhdGEuaWQpOwogICAgY29uc3QgZmxhZ3MgPSB0aGlzLl9idWlsZEZsYWdzKHN0b3JhZ2VFbnRyeT8ubm9WaWV3LCBzdG9yYWdlRW50cnk/Lm5vUHJpbnQpOwogICAgbGV0IHJvdGF0aW9uID0gc3RvcmFnZUVudHJ5Py5yb3RhdGlvbiwKICAgICAgdmFsdWUgPSBzdG9yYWdlRW50cnk/LnZhbHVlOwogICAgaWYgKHJvdGF0aW9uID09PSB1bmRlZmluZWQgJiYgZmxhZ3MgPT09IHVuZGVmaW5lZCkgewogICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBjb25zdCBkZWZhdWx0VmFsdWUgPSB0aGlzLmRhdGEuZmllbGRWYWx1ZSA9PT0gdGhpcy5kYXRhLmV4cG9ydFZhbHVlOwogICAgICBpZiAoZGVmYXVsdFZhbHVlID09PSB2YWx1ZSkgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgfQogICAgbGV0IGRpY3QgPSBldmFsdWF0b3IueHJlZi5mZXRjaElmUmVmKHRoaXMucmVmKTsKICAgIGlmICghKGRpY3QgaW5zdGFuY2VvZiBEaWN0KSkgewogICAgICByZXR1cm47CiAgICB9CiAgICBkaWN0ID0gZGljdC5jbG9uZSgpOwogICAgaWYgKHJvdGF0aW9uID09PSB1bmRlZmluZWQpIHsKICAgICAgcm90YXRpb24gPSB0aGlzLnJvdGF0aW9uOwogICAgfQogICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHsKICAgICAgdmFsdWUgPSB0aGlzLmRhdGEuZmllbGRWYWx1ZSA9PT0gdGhpcy5kYXRhLmV4cG9ydFZhbHVlOwogICAgfQogICAgY29uc3QgeGZhID0gewogICAgICBwYXRoOiB0aGlzLmRhdGEuZmllbGROYW1lLAogICAgICB2YWx1ZTogdmFsdWUgPyB0aGlzLmRhdGEuZXhwb3J0VmFsdWUgOiAiIgogICAgfTsKICAgIGNvbnN0IG5hbWUgPSBOYW1lLmdldCh2YWx1ZSA/IHRoaXMuZGF0YS5leHBvcnRWYWx1ZSA6ICJPZmYiKTsKICAgIHRoaXMuc2V0VmFsdWUoZGljdCwgbmFtZSwgZXZhbHVhdG9yLnhyZWYsIGNoYW5nZXMpOwogICAgZGljdC5zZXQoIkFTIiwgbmFtZSk7CiAgICBkaWN0LnNldCgiTSIsIGBEOiR7Z2V0TW9kaWZpY2F0aW9uRGF0ZSgpfWApOwogICAgaWYgKGZsYWdzICE9PSB1bmRlZmluZWQpIHsKICAgICAgZGljdC5zZXQoIkYiLCBmbGFncyk7CiAgICB9CiAgICBjb25zdCBtYXliZU1LID0gdGhpcy5fZ2V0TUtEaWN0KHJvdGF0aW9uKTsKICAgIGlmIChtYXliZU1LKSB7CiAgICAgIGRpY3Quc2V0KCJNSyIsIG1heWJlTUspOwogICAgfQogICAgY2hhbmdlcy5wdXQodGhpcy5yZWYsIHsKICAgICAgZGF0YTogZGljdCwKICAgICAgeGZhLAogICAgICBuZWVkQXBwZWFyYW5jZXM6IGZhbHNlCiAgICB9KTsKICB9CiAgYXN5bmMgX3NhdmVSYWRpb0J1dHRvbihldmFsdWF0b3IsIHRhc2ssIGFubm90YXRpb25TdG9yYWdlLCBjaGFuZ2VzKSB7CiAgICBpZiAoIWFubm90YXRpb25TdG9yYWdlKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGNvbnN0IHN0b3JhZ2VFbnRyeSA9IGFubm90YXRpb25TdG9yYWdlLmdldCh0aGlzLmRhdGEuaWQpOwogICAgY29uc3QgZmxhZ3MgPSB0aGlzLl9idWlsZEZsYWdzKHN0b3JhZ2VFbnRyeT8ubm9WaWV3LCBzdG9yYWdlRW50cnk/Lm5vUHJpbnQpOwogICAgbGV0IHJvdGF0aW9uID0gc3RvcmFnZUVudHJ5Py5yb3RhdGlvbiwKICAgICAgdmFsdWUgPSBzdG9yYWdlRW50cnk/LnZhbHVlOwogICAgaWYgKHJvdGF0aW9uID09PSB1bmRlZmluZWQgJiYgZmxhZ3MgPT09IHVuZGVmaW5lZCkgewogICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBjb25zdCBkZWZhdWx0VmFsdWUgPSB0aGlzLmRhdGEuZmllbGRWYWx1ZSA9PT0gdGhpcy5kYXRhLmJ1dHRvblZhbHVlOwogICAgICBpZiAoZGVmYXVsdFZhbHVlID09PSB2YWx1ZSkgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgfQogICAgbGV0IGRpY3QgPSBldmFsdWF0b3IueHJlZi5mZXRjaElmUmVmKHRoaXMucmVmKTsKICAgIGlmICghKGRpY3QgaW5zdGFuY2VvZiBEaWN0KSkgewogICAgICByZXR1cm47CiAgICB9CiAgICBkaWN0ID0gZGljdC5jbG9uZSgpOwogICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHsKICAgICAgdmFsdWUgPSB0aGlzLmRhdGEuZmllbGRWYWx1ZSA9PT0gdGhpcy5kYXRhLmJ1dHRvblZhbHVlOwogICAgfQogICAgaWYgKHJvdGF0aW9uID09PSB1bmRlZmluZWQpIHsKICAgICAgcm90YXRpb24gPSB0aGlzLnJvdGF0aW9uOwogICAgfQogICAgY29uc3QgeGZhID0gewogICAgICBwYXRoOiB0aGlzLmRhdGEuZmllbGROYW1lLAogICAgICB2YWx1ZTogdmFsdWUgPyB0aGlzLmRhdGEuYnV0dG9uVmFsdWUgOiAiIgogICAgfTsKICAgIGNvbnN0IG5hbWUgPSBOYW1lLmdldCh2YWx1ZSA/IHRoaXMuZGF0YS5idXR0b25WYWx1ZSA6ICJPZmYiKTsKICAgIGlmICh2YWx1ZSkgewogICAgICB0aGlzLnNldFZhbHVlKGRpY3QsIG5hbWUsIGV2YWx1YXRvci54cmVmLCBjaGFuZ2VzKTsKICAgIH0KICAgIGRpY3Quc2V0KCJBUyIsIG5hbWUpOwogICAgZGljdC5zZXQoIk0iLCBgRDoke2dldE1vZGlmaWNhdGlvbkRhdGUoKX1gKTsKICAgIGlmIChmbGFncyAhPT0gdW5kZWZpbmVkKSB7CiAgICAgIGRpY3Quc2V0KCJGIiwgZmxhZ3MpOwogICAgfQogICAgY29uc3QgbWF5YmVNSyA9IHRoaXMuX2dldE1LRGljdChyb3RhdGlvbik7CiAgICBpZiAobWF5YmVNSykgewogICAgICBkaWN0LnNldCgiTUsiLCBtYXliZU1LKTsKICAgIH0KICAgIGNoYW5nZXMucHV0KHRoaXMucmVmLCB7CiAgICAgIGRhdGE6IGRpY3QsCiAgICAgIHhmYSwKICAgICAgbmVlZEFwcGVhcmFuY2VzOiBmYWxzZQogICAgfSk7CiAgfQogIF9nZXREZWZhdWx0Q2hlY2tlZEFwcGVhcmFuY2UocGFyYW1zLCB0eXBlKSB7CiAgICBjb25zdCB7CiAgICAgIHdpZHRoLAogICAgICBoZWlnaHQKICAgIH0gPSB0aGlzOwogICAgY29uc3QgYmJveCA9IFswLCAwLCB3aWR0aCwgaGVpZ2h0XTsKICAgIGNvbnN0IEZPTlRfUkFUSU8gPSAwLjg7CiAgICBjb25zdCBmb250U2l6ZSA9IE1hdGgubWluKHdpZHRoLCBoZWlnaHQpICogRk9OVF9SQVRJTzsKICAgIGxldCBtZXRyaWNzLCBjaGFyOwogICAgaWYgKHR5cGUgPT09ICJjaGVjayIpIHsKICAgICAgbWV0cmljcyA9IHsKICAgICAgICB3aWR0aDogMC43NTUgKiBmb250U2l6ZSwKICAgICAgICBoZWlnaHQ6IDAuNzA1ICogZm9udFNpemUKICAgICAgfTsKICAgICAgY2hhciA9ICJceDMzIjsKICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gImRpc2MiKSB7CiAgICAgIG1ldHJpY3MgPSB7CiAgICAgICAgd2lkdGg6IDAuNzkxICogZm9udFNpemUsCiAgICAgICAgaGVpZ2h0OiAwLjcwNSAqIGZvbnRTaXplCiAgICAgIH07CiAgICAgIGNoYXIgPSAiXHg2QyI7CiAgICB9IGVsc2UgewogICAgICB1bnJlYWNoYWJsZShgX2dldERlZmF1bHRDaGVja2VkQXBwZWFyYW5jZSAtIHVuc3VwcG9ydGVkIHR5cGU6ICR7dHlwZX1gKTsKICAgIH0KICAgIGNvbnN0IHhTaGlmdCA9IG51bWJlclRvU3RyaW5nKCh3aWR0aCAtIG1ldHJpY3Mud2lkdGgpIC8gMik7CiAgICBjb25zdCB5U2hpZnQgPSBudW1iZXJUb1N0cmluZygoaGVpZ2h0IC0gbWV0cmljcy5oZWlnaHQpIC8gMik7CiAgICBjb25zdCBhcHBlYXJhbmNlID0gYHEgQlQgL1BkZkpzWmFEYiAke2ZvbnRTaXplfSBUZiAwIGcgJHt4U2hpZnR9ICR7eVNoaWZ0fSBUZCAoJHtjaGFyfSkgVGogRVQgUWA7CiAgICBjb25zdCBhcHBlYXJhbmNlU3RyZWFtRGljdCA9IG5ldyBEaWN0KHBhcmFtcy54cmVmKTsKICAgIGFwcGVhcmFuY2VTdHJlYW1EaWN0LnNldCgiRm9ybVR5cGUiLCAxKTsKICAgIGFwcGVhcmFuY2VTdHJlYW1EaWN0LnNldElmTmFtZSgiU3VidHlwZSIsICJGb3JtIik7CiAgICBhcHBlYXJhbmNlU3RyZWFtRGljdC5zZXRJZk5hbWUoIlR5cGUiLCAiWE9iamVjdCIpOwogICAgYXBwZWFyYW5jZVN0cmVhbURpY3Quc2V0KCJCQm94IiwgYmJveCk7CiAgICBhcHBlYXJhbmNlU3RyZWFtRGljdC5zZXQoIk1hdHJpeCIsIFsxLCAwLCAwLCAxLCAwLCAwXSk7CiAgICBhcHBlYXJhbmNlU3RyZWFtRGljdC5zZXQoIkxlbmd0aCIsIGFwcGVhcmFuY2UubGVuZ3RoKTsKICAgIGNvbnN0IHJlc291cmNlcyA9IG5ldyBEaWN0KHBhcmFtcy54cmVmKTsKICAgIGNvbnN0IGZvbnQgPSBuZXcgRGljdChwYXJhbXMueHJlZik7CiAgICBmb250LnNldCgiUGRmSnNaYURiIiwgdGhpcy5mYWxsYmFja0ZvbnREaWN0KTsKICAgIHJlc291cmNlcy5zZXQoIkZvbnQiLCBmb250KTsKICAgIGFwcGVhcmFuY2VTdHJlYW1EaWN0LnNldCgiUmVzb3VyY2VzIiwgcmVzb3VyY2VzKTsKICAgIHRoaXMuY2hlY2tlZEFwcGVhcmFuY2UgPSBuZXcgU3RyaW5nU3RyZWFtKGFwcGVhcmFuY2UpOwogICAgdGhpcy5jaGVja2VkQXBwZWFyYW5jZS5kaWN0ID0gYXBwZWFyYW5jZVN0cmVhbURpY3Q7CiAgICB0aGlzLl9zdHJlYW1zLnB1c2godGhpcy5jaGVja2VkQXBwZWFyYW5jZSk7CiAgfQogIF9wcm9jZXNzQ2hlY2tCb3gocGFyYW1zKSB7CiAgICBjb25zdCBjdXN0b21BcHBlYXJhbmNlID0gcGFyYW1zLmRpY3QuZ2V0KCJBUCIpOwogICAgaWYgKCEoY3VzdG9tQXBwZWFyYW5jZSBpbnN0YW5jZW9mIERpY3QpKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGNvbnN0IG5vcm1hbEFwcGVhcmFuY2UgPSBjdXN0b21BcHBlYXJhbmNlLmdldCgiTiIpOwogICAgaWYgKCEobm9ybWFsQXBwZWFyYW5jZSBpbnN0YW5jZW9mIERpY3QpKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGNvbnN0IGFzVmFsdWUgPSB0aGlzLl9kZWNvZGVGb3JtVmFsdWUocGFyYW1zLmRpY3QuZ2V0KCJBUyIpKTsKICAgIGlmICh0eXBlb2YgYXNWYWx1ZSA9PT0gInN0cmluZyIpIHsKICAgICAgdGhpcy5kYXRhLmZpZWxkVmFsdWUgPSBhc1ZhbHVlOwogICAgfQogICAgY29uc3QgeWVzID0gdGhpcy5kYXRhLmZpZWxkVmFsdWUgIT09IG51bGwgJiYgdGhpcy5kYXRhLmZpZWxkVmFsdWUgIT09ICJPZmYiID8gdGhpcy5kYXRhLmZpZWxkVmFsdWUgOiAiWWVzIjsKICAgIGNvbnN0IGV4cG9ydFZhbHVlcyA9IHRoaXMuX2RlY29kZUZvcm1WYWx1ZShub3JtYWxBcHBlYXJhbmNlLmdldEtleXMoKSk7CiAgICBpZiAoZXhwb3J0VmFsdWVzLmxlbmd0aCA9PT0gMCkgewogICAgICBleHBvcnRWYWx1ZXMucHVzaCgiT2ZmIiwgeWVzKTsKICAgIH0gZWxzZSBpZiAoZXhwb3J0VmFsdWVzLmxlbmd0aCA9PT0gMSkgewogICAgICBpZiAoZXhwb3J0VmFsdWVzWzBdID09PSAiT2ZmIikgewogICAgICAgIGV4cG9ydFZhbHVlcy5wdXNoKHllcyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZXhwb3J0VmFsdWVzLnVuc2hpZnQoIk9mZiIpOwogICAgICB9CiAgICB9IGVsc2UgaWYgKGV4cG9ydFZhbHVlcy5pbmNsdWRlcyh5ZXMpKSB7CiAgICAgIGV4cG9ydFZhbHVlcy5sZW5ndGggPSAwOwogICAgICBleHBvcnRWYWx1ZXMucHVzaCgiT2ZmIiwgeWVzKTsKICAgIH0gZWxzZSB7CiAgICAgIGNvbnN0IG90aGVyWWVzID0gZXhwb3J0VmFsdWVzLmZpbmQodiA9PiB2ICE9PSAiT2ZmIik7CiAgICAgIGV4cG9ydFZhbHVlcy5sZW5ndGggPSAwOwogICAgICBleHBvcnRWYWx1ZXMucHVzaCgiT2ZmIiwgb3RoZXJZZXMpOwogICAgfQogICAgaWYgKCFleHBvcnRWYWx1ZXMuaW5jbHVkZXModGhpcy5kYXRhLmZpZWxkVmFsdWUpKSB7CiAgICAgIHRoaXMuZGF0YS5maWVsZFZhbHVlID0gIk9mZiI7CiAgICB9CiAgICB0aGlzLmRhdGEuZXhwb3J0VmFsdWUgPSBleHBvcnRWYWx1ZXNbMV07CiAgICBjb25zdCBjaGVja2VkQXBwZWFyYW5jZSA9IG5vcm1hbEFwcGVhcmFuY2UuZ2V0KHRoaXMuZGF0YS5leHBvcnRWYWx1ZSk7CiAgICB0aGlzLmNoZWNrZWRBcHBlYXJhbmNlID0gY2hlY2tlZEFwcGVhcmFuY2UgaW5zdGFuY2VvZiBCYXNlU3RyZWFtID8gY2hlY2tlZEFwcGVhcmFuY2UgOiBudWxsOwogICAgY29uc3QgdW5jaGVja2VkQXBwZWFyYW5jZSA9IG5vcm1hbEFwcGVhcmFuY2UuZ2V0KCJPZmYiKTsKICAgIHRoaXMudW5jaGVja2VkQXBwZWFyYW5jZSA9IHVuY2hlY2tlZEFwcGVhcmFuY2UgaW5zdGFuY2VvZiBCYXNlU3RyZWFtID8gdW5jaGVja2VkQXBwZWFyYW5jZSA6IG51bGw7CiAgICBpZiAodGhpcy5jaGVja2VkQXBwZWFyYW5jZSkgewogICAgICB0aGlzLl9zdHJlYW1zLnB1c2godGhpcy5jaGVja2VkQXBwZWFyYW5jZSk7CiAgICB9IGVsc2UgewogICAgICB0aGlzLl9nZXREZWZhdWx0Q2hlY2tlZEFwcGVhcmFuY2UocGFyYW1zLCAiY2hlY2siKTsKICAgIH0KICAgIGlmICh0aGlzLnVuY2hlY2tlZEFwcGVhcmFuY2UpIHsKICAgICAgdGhpcy5fc3RyZWFtcy5wdXNoKHRoaXMudW5jaGVja2VkQXBwZWFyYW5jZSk7CiAgICB9CiAgICB0aGlzLl9mYWxsYmFja0ZvbnREaWN0ID0gdGhpcy5mYWxsYmFja0ZvbnREaWN0OwogICAgaWYgKHRoaXMuZGF0YS5kZWZhdWx0RmllbGRWYWx1ZSA9PT0gbnVsbCkgewogICAgICB0aGlzLmRhdGEuZGVmYXVsdEZpZWxkVmFsdWUgPSAiT2ZmIjsKICAgIH0KICB9CiAgX3Byb2Nlc3NSYWRpb0J1dHRvbihwYXJhbXMpIHsKICAgIHRoaXMuZGF0YS5idXR0b25WYWx1ZSA9IG51bGw7CiAgICBjb25zdCBmaWVsZFBhcmVudCA9IHBhcmFtcy5kaWN0LmdldCgiUGFyZW50Iik7CiAgICBpZiAoZmllbGRQYXJlbnQgaW5zdGFuY2VvZiBEaWN0KSB7CiAgICAgIHRoaXMucGFyZW50ID0gcGFyYW1zLmRpY3QuZ2V0UmF3KCJQYXJlbnQiKTsKICAgICAgY29uc3QgZmllbGRQYXJlbnRWYWx1ZSA9IGZpZWxkUGFyZW50LmdldCgiViIpOwogICAgICBpZiAoZmllbGRQYXJlbnRWYWx1ZSBpbnN0YW5jZW9mIE5hbWUpIHsKICAgICAgICB0aGlzLmRhdGEuZmllbGRWYWx1ZSA9IHRoaXMuX2RlY29kZUZvcm1WYWx1ZShmaWVsZFBhcmVudFZhbHVlKTsKICAgICAgfQogICAgfQogICAgY29uc3QgYXBwZWFyYW5jZVN0YXRlcyA9IHBhcmFtcy5kaWN0LmdldCgiQVAiKTsKICAgIGlmICghKGFwcGVhcmFuY2VTdGF0ZXMgaW5zdGFuY2VvZiBEaWN0KSkgewogICAgICByZXR1cm47CiAgICB9CiAgICBjb25zdCBub3JtYWxBcHBlYXJhbmNlID0gYXBwZWFyYW5jZVN0YXRlcy5nZXQoIk4iKTsKICAgIGlmICghKG5vcm1hbEFwcGVhcmFuY2UgaW5zdGFuY2VvZiBEaWN0KSkgewogICAgICByZXR1cm47CiAgICB9CiAgICBmb3IgKGNvbnN0IGtleSBvZiBub3JtYWxBcHBlYXJhbmNlLmdldEtleXMoKSkgewogICAgICBpZiAoa2V5ICE9PSAiT2ZmIikgewogICAgICAgIHRoaXMuZGF0YS5idXR0b25WYWx1ZSA9IHRoaXMuX2RlY29kZUZvcm1WYWx1ZShrZXkpOwogICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CiAgICBjb25zdCBjaGVja2VkQXBwZWFyYW5jZSA9IG5vcm1hbEFwcGVhcmFuY2UuZ2V0KHRoaXMuZGF0YS5idXR0b25WYWx1ZSk7CiAgICB0aGlzLmNoZWNrZWRBcHBlYXJhbmNlID0gY2hlY2tlZEFwcGVhcmFuY2UgaW5zdGFuY2VvZiBCYXNlU3RyZWFtID8gY2hlY2tlZEFwcGVhcmFuY2UgOiBudWxsOwogICAgY29uc3QgdW5jaGVja2VkQXBwZWFyYW5jZSA9IG5vcm1hbEFwcGVhcmFuY2UuZ2V0KCJPZmYiKTsKICAgIHRoaXMudW5jaGVja2VkQXBwZWFyYW5jZSA9IHVuY2hlY2tlZEFwcGVhcmFuY2UgaW5zdGFuY2VvZiBCYXNlU3RyZWFtID8gdW5jaGVja2VkQXBwZWFyYW5jZSA6IG51bGw7CiAgICBpZiAodGhpcy5jaGVja2VkQXBwZWFyYW5jZSkgewogICAgICB0aGlzLl9zdHJlYW1zLnB1c2godGhpcy5jaGVja2VkQXBwZWFyYW5jZSk7CiAgICB9IGVsc2UgewogICAgICB0aGlzLl9nZXREZWZhdWx0Q2hlY2tlZEFwcGVhcmFuY2UocGFyYW1zLCAiZGlzYyIpOwogICAgfQogICAgaWYgKHRoaXMudW5jaGVja2VkQXBwZWFyYW5jZSkgewogICAgICB0aGlzLl9zdHJlYW1zLnB1c2godGhpcy51bmNoZWNrZWRBcHBlYXJhbmNlKTsKICAgIH0KICAgIHRoaXMuX2ZhbGxiYWNrRm9udERpY3QgPSB0aGlzLmZhbGxiYWNrRm9udERpY3Q7CiAgICBpZiAodGhpcy5kYXRhLmRlZmF1bHRGaWVsZFZhbHVlID09PSBudWxsKSB7CiAgICAgIHRoaXMuZGF0YS5kZWZhdWx0RmllbGRWYWx1ZSA9ICJPZmYiOwogICAgfQogIH0KICBfcHJvY2Vzc1B1c2hCdXR0b24ocGFyYW1zKSB7CiAgICBjb25zdCB7CiAgICAgIGRpY3QsCiAgICAgIGFubm90YXRpb25HbG9iYWxzCiAgICB9ID0gcGFyYW1zOwogICAgaWYgKCFkaWN0LmhhcygiQSIpICYmICFkaWN0LmhhcygiQUEiKSAmJiAhdGhpcy5kYXRhLmFsdGVybmF0aXZlVGV4dCkgewogICAgICB3YXJuKCJQdXNoIGJ1dHRvbnMgd2l0aG91dCBhY3Rpb24gZGljdGlvbmFyaWVzIGFyZSBub3Qgc3VwcG9ydGVkIik7CiAgICAgIHJldHVybjsKICAgIH0KICAgIHRoaXMuZGF0YS5pc1Rvb2x0aXBPbmx5ID0gIWRpY3QuaGFzKCJBIikgJiYgIWRpY3QuaGFzKCJBQSIpOwogICAgQ2F0YWxvZy5wYXJzZURlc3REaWN0aW9uYXJ5KHsKICAgICAgZGVzdERpY3Q6IGRpY3QsCiAgICAgIHJlc3VsdE9iajogdGhpcy5kYXRhLAogICAgICBkb2NCYXNlVXJsOiBhbm5vdGF0aW9uR2xvYmFscy5iYXNlVXJsLAogICAgICBkb2NBdHRhY2htZW50czogYW5ub3RhdGlvbkdsb2JhbHMuYXR0YWNobWVudHMKICAgIH0pOwogIH0KICBnZXRGaWVsZE9iamVjdCgpIHsKICAgIGxldCB0eXBlID0gImJ1dHRvbiI7CiAgICBsZXQgZXhwb3J0VmFsdWVzOwogICAgaWYgKHRoaXMuZGF0YS5jaGVja0JveCkgewogICAgICB0eXBlID0gImNoZWNrYm94IjsKICAgICAgZXhwb3J0VmFsdWVzID0gdGhpcy5kYXRhLmV4cG9ydFZhbHVlOwogICAgfSBlbHNlIGlmICh0aGlzLmRhdGEucmFkaW9CdXR0b24pIHsKICAgICAgdHlwZSA9ICJyYWRpb2J1dHRvbiI7CiAgICAgIGV4cG9ydFZhbHVlcyA9IHRoaXMuZGF0YS5idXR0b25WYWx1ZTsKICAgIH0KICAgIHJldHVybiB7CiAgICAgIGlkOiB0aGlzLmRhdGEuaWQsCiAgICAgIHZhbHVlOiB0aGlzLmRhdGEuZmllbGRWYWx1ZSB8fCAiT2ZmIiwKICAgICAgZGVmYXVsdFZhbHVlOiB0aGlzLmRhdGEuZGVmYXVsdEZpZWxkVmFsdWUsCiAgICAgIGV4cG9ydFZhbHVlcywKICAgICAgZWRpdGFibGU6ICF0aGlzLmRhdGEucmVhZE9ubHksCiAgICAgIG5hbWU6IHRoaXMuZGF0YS5maWVsZE5hbWUsCiAgICAgIHJlY3Q6IHRoaXMuZGF0YS5yZWN0LAogICAgICBoaWRkZW46IHRoaXMuZGF0YS5oaWRkZW4sCiAgICAgIGFjdGlvbnM6IHRoaXMuZGF0YS5hY3Rpb25zLAogICAgICBwYWdlOiB0aGlzLmRhdGEucGFnZUluZGV4LAogICAgICBzdHJva2VDb2xvcjogdGhpcy5kYXRhLmJvcmRlckNvbG9yLAogICAgICBmaWxsQ29sb3I6IHRoaXMuZGF0YS5iYWNrZ3JvdW5kQ29sb3IsCiAgICAgIHJvdGF0aW9uOiB0aGlzLnJvdGF0aW9uLAogICAgICB0eXBlCiAgICB9OwogIH0KICBnZXQgZmFsbGJhY2tGb250RGljdCgpIHsKICAgIGNvbnN0IGRpY3QgPSBuZXcgRGljdCgpOwogICAgZGljdC5zZXRJZk5hbWUoIkJhc2VGb250IiwgIlphcGZEaW5nYmF0cyIpOwogICAgZGljdC5zZXRJZk5hbWUoIlR5cGUiLCAiRmFsbGJhY2tUeXBlIik7CiAgICBkaWN0LnNldElmTmFtZSgiU3VidHlwZSIsICJGYWxsYmFja1R5cGUiKTsKICAgIGRpY3Quc2V0SWZOYW1lKCJFbmNvZGluZyIsICJaYXBmRGluZ2JhdHNFbmNvZGluZyIpOwogICAgcmV0dXJuIHNoYWRvdyh0aGlzLCAiZmFsbGJhY2tGb250RGljdCIsIGRpY3QpOwogIH0KfQpjbGFzcyBDaG9pY2VXaWRnZXRBbm5vdGF0aW9uIGV4dGVuZHMgV2lkZ2V0QW5ub3RhdGlvbiB7CiAgY29uc3RydWN0b3IocGFyYW1zKSB7CiAgICBzdXBlcihwYXJhbXMpOwogICAgY29uc3QgewogICAgICBkaWN0LAogICAgICB4cmVmCiAgICB9ID0gcGFyYW1zOwogICAgdGhpcy5pbmRpY2VzID0gZGljdC5nZXRBcnJheSgiSSIpOwogICAgdGhpcy5oYXNJbmRpY2VzID0gQXJyYXkuaXNBcnJheSh0aGlzLmluZGljZXMpICYmIHRoaXMuaW5kaWNlcy5sZW5ndGggPiAwOwogICAgdGhpcy5kYXRhLm9wdGlvbnMgPSBbXTsKICAgIGNvbnN0IG9wdGlvbnMgPSBnZXRJbmhlcml0YWJsZVByb3BlcnR5KHsKICAgICAgZGljdCwKICAgICAga2V5OiAiT3B0IgogICAgfSk7CiAgICBpZiAoQXJyYXkuaXNBcnJheShvcHRpb25zKSkgewogICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBvcHRpb25zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgICBjb25zdCBvcHRpb24gPSB4cmVmLmZldGNoSWZSZWYob3B0aW9uc1tpXSk7CiAgICAgICAgY29uc3QgaXNPcHRpb25BcnJheSA9IEFycmF5LmlzQXJyYXkob3B0aW9uKTsKICAgICAgICB0aGlzLmRhdGEub3B0aW9uc1tpXSA9IHsKICAgICAgICAgIGV4cG9ydFZhbHVlOiB0aGlzLl9kZWNvZGVGb3JtVmFsdWUoaXNPcHRpb25BcnJheSA/IHhyZWYuZmV0Y2hJZlJlZihvcHRpb25bMF0pIDogb3B0aW9uKSwKICAgICAgICAgIGRpc3BsYXlWYWx1ZTogdGhpcy5fZGVjb2RlRm9ybVZhbHVlKGlzT3B0aW9uQXJyYXkgPyB4cmVmLmZldGNoSWZSZWYob3B0aW9uWzFdKSA6IG9wdGlvbikKICAgICAgICB9OwogICAgICB9CiAgICB9CiAgICBpZiAoIXRoaXMuaGFzSW5kaWNlcykgewogICAgICBpZiAodHlwZW9mIHRoaXMuZGF0YS5maWVsZFZhbHVlID09PSAic3RyaW5nIikgewogICAgICAgIHRoaXMuZGF0YS5maWVsZFZhbHVlID0gW3RoaXMuZGF0YS5maWVsZFZhbHVlXTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmRhdGEuZmllbGRWYWx1ZSB8fD0gW107CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHRoaXMuZGF0YS5maWVsZFZhbHVlID0gW107CiAgICAgIGNvbnN0IGlpID0gdGhpcy5kYXRhLm9wdGlvbnMubGVuZ3RoOwogICAgICBmb3IgKGNvbnN0IGkgb2YgdGhpcy5pbmRpY2VzKSB7CiAgICAgICAgaWYgKE51bWJlci5pc0ludGVnZXIoaSkgJiYgaSA+PSAwICYmIGkgPCBpaSkgewogICAgICAgICAgdGhpcy5kYXRhLmZpZWxkVmFsdWUucHVzaCh0aGlzLmRhdGEub3B0aW9uc1tpXS5leHBvcnRWYWx1ZSk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBpZiAodGhpcy5kYXRhLm9wdGlvbnMubGVuZ3RoID09PSAwICYmIHRoaXMuZGF0YS5maWVsZFZhbHVlLmxlbmd0aCA+IDApIHsKICAgICAgdGhpcy5kYXRhLm9wdGlvbnMgPSB0aGlzLmRhdGEuZmllbGRWYWx1ZS5tYXAodmFsdWUgPT4gKHsKICAgICAgICBleHBvcnRWYWx1ZTogdmFsdWUsCiAgICAgICAgZGlzcGxheVZhbHVlOiB2YWx1ZQogICAgICB9KSk7CiAgICB9CiAgICB0aGlzLmRhdGEuY29tYm8gPSB0aGlzLmhhc0ZpZWxkRmxhZyhBbm5vdGF0aW9uRmllbGRGbGFnLkNPTUJPKTsKICAgIHRoaXMuZGF0YS5tdWx0aVNlbGVjdCA9IHRoaXMuaGFzRmllbGRGbGFnKEFubm90YXRpb25GaWVsZEZsYWcuTVVMVElTRUxFQ1QpOwogICAgdGhpcy5faGFzVGV4dCA9IHRydWU7CiAgfQogIGdldEZpZWxkT2JqZWN0KCkgewogICAgY29uc3QgdHlwZSA9IHRoaXMuZGF0YS5jb21ibyA/ICJjb21ib2JveCIgOiAibGlzdGJveCI7CiAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZGF0YS5maWVsZFZhbHVlLmxlbmd0aCA+IDAgPyB0aGlzLmRhdGEuZmllbGRWYWx1ZVswXSA6IG51bGw7CiAgICByZXR1cm4gewogICAgICBpZDogdGhpcy5kYXRhLmlkLAogICAgICB2YWx1ZSwKICAgICAgZGVmYXVsdFZhbHVlOiB0aGlzLmRhdGEuZGVmYXVsdEZpZWxkVmFsdWUsCiAgICAgIGVkaXRhYmxlOiAhdGhpcy5kYXRhLnJlYWRPbmx5LAogICAgICBuYW1lOiB0aGlzLmRhdGEuZmllbGROYW1lLAogICAgICByZWN0OiB0aGlzLmRhdGEucmVjdCwKICAgICAgbnVtSXRlbXM6IHRoaXMuZGF0YS5maWVsZFZhbHVlLmxlbmd0aCwKICAgICAgbXVsdGlwbGVTZWxlY3Rpb246IHRoaXMuZGF0YS5tdWx0aVNlbGVjdCwKICAgICAgaGlkZGVuOiB0aGlzLmRhdGEuaGlkZGVuLAogICAgICBhY3Rpb25zOiB0aGlzLmRhdGEuYWN0aW9ucywKICAgICAgaXRlbXM6IHRoaXMuZGF0YS5vcHRpb25zLAogICAgICBwYWdlOiB0aGlzLmRhdGEucGFnZUluZGV4LAogICAgICBzdHJva2VDb2xvcjogdGhpcy5kYXRhLmJvcmRlckNvbG9yLAogICAgICBmaWxsQ29sb3I6IHRoaXMuZGF0YS5iYWNrZ3JvdW5kQ29sb3IsCiAgICAgIHJvdGF0aW9uOiB0aGlzLnJvdGF0aW9uLAogICAgICB0eXBlCiAgICB9OwogIH0KICBhbWVuZFNhdmVkRGljdChhbm5vdGF0aW9uU3RvcmFnZSwgZGljdCkgewogICAgaWYgKCF0aGlzLmhhc0luZGljZXMpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgbGV0IHZhbHVlcyA9IGFubm90YXRpb25TdG9yYWdlPy5nZXQodGhpcy5kYXRhLmlkKT8udmFsdWU7CiAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWVzKSkgewogICAgICB2YWx1ZXMgPSBbdmFsdWVzXTsKICAgIH0KICAgIGNvbnN0IGluZGljZXMgPSBbXTsKICAgIGNvbnN0IHsKICAgICAgb3B0aW9ucwogICAgfSA9IHRoaXMuZGF0YTsKICAgIGZvciAobGV0IGkgPSAwLCBqID0gMCwgaWkgPSBvcHRpb25zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgaWYgKG9wdGlvbnNbaV0uZXhwb3J0VmFsdWUgPT09IHZhbHVlc1tqXSkgewogICAgICAgIGluZGljZXMucHVzaChpKTsKICAgICAgICBqICs9IDE7CiAgICAgIH0KICAgIH0KICAgIGRpY3Quc2V0KCJJIiwgaW5kaWNlcyk7CiAgfQogIGFzeW5jIF9nZXRBcHBlYXJhbmNlKGV2YWx1YXRvciwgdGFzaywgaW50ZW50LCBhbm5vdGF0aW9uU3RvcmFnZSkgewogICAgaWYgKHRoaXMuZGF0YS5jb21ibykgewogICAgICByZXR1cm4gc3VwZXIuX2dldEFwcGVhcmFuY2UoZXZhbHVhdG9yLCB0YXNrLCBpbnRlbnQsIGFubm90YXRpb25TdG9yYWdlKTsKICAgIH0KICAgIGxldCBleHBvcnRlZFZhbHVlLCByb3RhdGlvbjsKICAgIGNvbnN0IHN0b3JhZ2VFbnRyeSA9IGFubm90YXRpb25TdG9yYWdlPy5nZXQodGhpcy5kYXRhLmlkKTsKICAgIGlmIChzdG9yYWdlRW50cnkpIHsKICAgICAgcm90YXRpb24gPSBzdG9yYWdlRW50cnkucm90YXRpb247CiAgICAgIGV4cG9ydGVkVmFsdWUgPSBzdG9yYWdlRW50cnkudmFsdWU7CiAgICB9CiAgICBpZiAocm90YXRpb24gPT09IHVuZGVmaW5lZCAmJiBleHBvcnRlZFZhbHVlID09PSB1bmRlZmluZWQgJiYgIXRoaXMuX25lZWRBcHBlYXJhbmNlcykgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIGlmIChleHBvcnRlZFZhbHVlID09PSB1bmRlZmluZWQpIHsKICAgICAgZXhwb3J0ZWRWYWx1ZSA9IHRoaXMuZGF0YS5maWVsZFZhbHVlOwogICAgfSBlbHNlIGlmICghQXJyYXkuaXNBcnJheShleHBvcnRlZFZhbHVlKSkgewogICAgICBleHBvcnRlZFZhbHVlID0gW2V4cG9ydGVkVmFsdWVdOwogICAgfQogICAgY29uc3QgZGVmYXVsdFBhZGRpbmcgPSAxOwogICAgY29uc3QgZGVmYXVsdEhQYWRkaW5nID0gMjsKICAgIGxldCB7CiAgICAgIHdpZHRoOiB0b3RhbFdpZHRoLAogICAgICBoZWlnaHQ6IHRvdGFsSGVpZ2h0CiAgICB9ID0gdGhpczsKICAgIGlmIChyb3RhdGlvbiA9PT0gOTAgfHwgcm90YXRpb24gPT09IDI3MCkgewogICAgICBbdG90YWxXaWR0aCwgdG90YWxIZWlnaHRdID0gW3RvdGFsSGVpZ2h0LCB0b3RhbFdpZHRoXTsKICAgIH0KICAgIGNvbnN0IGxpbmVDb3VudCA9IHRoaXMuZGF0YS5vcHRpb25zLmxlbmd0aDsKICAgIGNvbnN0IHZhbHVlSW5kaWNlcyA9IFtdOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lQ291bnQ7IGkrKykgewogICAgICBjb25zdCB7CiAgICAgICAgZXhwb3J0VmFsdWUKICAgICAgfSA9IHRoaXMuZGF0YS5vcHRpb25zW2ldOwogICAgICBpZiAoZXhwb3J0ZWRWYWx1ZS5pbmNsdWRlcyhleHBvcnRWYWx1ZSkpIHsKICAgICAgICB2YWx1ZUluZGljZXMucHVzaChpKTsKICAgICAgfQogICAgfQogICAgaWYgKCF0aGlzLl9kZWZhdWx0QXBwZWFyYW5jZSkgewogICAgICB0aGlzLmRhdGEuZGVmYXVsdEFwcGVhcmFuY2VEYXRhID0gcGFyc2VEZWZhdWx0QXBwZWFyYW5jZSh0aGlzLl9kZWZhdWx0QXBwZWFyYW5jZSA9ICIvSGVsdmV0aWNhIDAgVGYgMCBnIik7CiAgICB9CiAgICBjb25zdCBmb250ID0gYXdhaXQgV2lkZ2V0QW5ub3RhdGlvbi5fZ2V0Rm9udERhdGEoZXZhbHVhdG9yLCB0YXNrLCB0aGlzLmRhdGEuZGVmYXVsdEFwcGVhcmFuY2VEYXRhLCB0aGlzLl9maWVsZFJlc291cmNlcy5tZXJnZWRSZXNvdXJjZXMpOwogICAgbGV0IGRlZmF1bHRBcHBlYXJhbmNlOwogICAgbGV0IHsKICAgICAgZm9udFNpemUKICAgIH0gPSB0aGlzLmRhdGEuZGVmYXVsdEFwcGVhcmFuY2VEYXRhOwogICAgaWYgKCFmb250U2l6ZSkgewogICAgICBjb25zdCBsaW5lSGVpZ2h0ID0gKHRvdGFsSGVpZ2h0IC0gZGVmYXVsdFBhZGRpbmcpIC8gbGluZUNvdW50OwogICAgICBsZXQgbGluZVdpZHRoID0gLTE7CiAgICAgIGxldCB2YWx1ZTsKICAgICAgZm9yIChjb25zdCB7CiAgICAgICAgZGlzcGxheVZhbHVlCiAgICAgIH0gb2YgdGhpcy5kYXRhLm9wdGlvbnMpIHsKICAgICAgICBjb25zdCB3aWR0aCA9IHRoaXMuX2dldFRleHRXaWR0aChkaXNwbGF5VmFsdWUsIGZvbnQpOwogICAgICAgIGlmICh3aWR0aCA+IGxpbmVXaWR0aCkgewogICAgICAgICAgbGluZVdpZHRoID0gd2lkdGg7CiAgICAgICAgICB2YWx1ZSA9IGRpc3BsYXlWYWx1ZTsKICAgICAgICB9CiAgICAgIH0KICAgICAgW2RlZmF1bHRBcHBlYXJhbmNlLCBmb250U2l6ZV0gPSB0aGlzLl9jb21wdXRlRm9udFNpemUobGluZUhlaWdodCwgdG90YWxXaWR0aCAtIDIgKiBkZWZhdWx0SFBhZGRpbmcsIHZhbHVlLCBmb250LCAtMSk7CiAgICB9IGVsc2UgewogICAgICBkZWZhdWx0QXBwZWFyYW5jZSA9IHRoaXMuX2RlZmF1bHRBcHBlYXJhbmNlOwogICAgfQogICAgY29uc3QgbGluZUhlaWdodCA9IGZvbnRTaXplICogTElORV9GQUNUT1I7CiAgICBjb25zdCB2UGFkZGluZyA9IChsaW5lSGVpZ2h0IC0gZm9udFNpemUpIC8gMjsKICAgIGNvbnN0IG51bWJlck9mVmlzaWJsZUxpbmVzID0gTWF0aC5mbG9vcih0b3RhbEhlaWdodCAvIGxpbmVIZWlnaHQpOwogICAgbGV0IGZpcnN0SW5kZXggPSAwOwogICAgaWYgKHZhbHVlSW5kaWNlcy5sZW5ndGggPiAwKSB7CiAgICAgIGNvbnN0IG1pbkluZGV4ID0gTWF0aC5taW4oLi4udmFsdWVJbmRpY2VzKTsKICAgICAgY29uc3QgbWF4SW5kZXggPSBNYXRoLm1heCguLi52YWx1ZUluZGljZXMpOwogICAgICBmaXJzdEluZGV4ID0gTWF0aC5tYXgoMCwgbWF4SW5kZXggLSBudW1iZXJPZlZpc2libGVMaW5lcyArIDEpOwogICAgICBpZiAoZmlyc3RJbmRleCA+IG1pbkluZGV4KSB7CiAgICAgICAgZmlyc3RJbmRleCA9IG1pbkluZGV4OwogICAgICB9CiAgICB9CiAgICBjb25zdCBlbmQgPSBNYXRoLm1pbihmaXJzdEluZGV4ICsgbnVtYmVyT2ZWaXNpYmxlTGluZXMgKyAxLCBsaW5lQ291bnQpOwogICAgY29uc3QgYnVmID0gWyIvVHggQk1DIHEiLCBgMSAxICR7dG90YWxXaWR0aH0gJHt0b3RhbEhlaWdodH0gcmUgVyBuYF07CiAgICBpZiAodmFsdWVJbmRpY2VzLmxlbmd0aCkgewogICAgICBidWYucHVzaCgiMC42MDAwMDYgMC43NTY4NjYgMC44NTQ5MDQgcmciKTsKICAgICAgZm9yIChjb25zdCBpbmRleCBvZiB2YWx1ZUluZGljZXMpIHsKICAgICAgICBpZiAoZmlyc3RJbmRleCA8PSBpbmRleCAmJiBpbmRleCA8IGVuZCkgewogICAgICAgICAgYnVmLnB1c2goYDEgJHt0b3RhbEhlaWdodCAtIChpbmRleCAtIGZpcnN0SW5kZXggKyAxKSAqIGxpbmVIZWlnaHR9ICR7dG90YWxXaWR0aH0gJHtsaW5lSGVpZ2h0fSByZSBmYCk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBidWYucHVzaCgiQlQiLCBkZWZhdWx0QXBwZWFyYW5jZSwgYDEgMCAwIDEgMCAke3RvdGFsSGVpZ2h0fSBUbWApOwogICAgY29uc3QgcHJldkluZm8gPSB7CiAgICAgIHNoaWZ0OiAwCiAgICB9OwogICAgZm9yIChsZXQgaSA9IGZpcnN0SW5kZXg7IGkgPCBlbmQ7IGkrKykgewogICAgICBjb25zdCB7CiAgICAgICAgZGlzcGxheVZhbHVlCiAgICAgIH0gPSB0aGlzLmRhdGEub3B0aW9uc1tpXTsKICAgICAgY29uc3QgdnBhZGRpbmcgPSBpID09PSBmaXJzdEluZGV4ID8gdlBhZGRpbmcgOiAwOwogICAgICBidWYucHVzaCh0aGlzLl9yZW5kZXJUZXh0KGRpc3BsYXlWYWx1ZSwgZm9udCwgZm9udFNpemUsIHRvdGFsV2lkdGgsIDAsIHByZXZJbmZvLCBkZWZhdWx0SFBhZGRpbmcsIC1saW5lSGVpZ2h0ICsgdnBhZGRpbmcpKTsKICAgIH0KICAgIGJ1Zi5wdXNoKCJFVCBRIEVNQyIpOwogICAgcmV0dXJuIGJ1Zi5qb2luKCJcbiIpOwogIH0KfQpjbGFzcyBTaWduYXR1cmVXaWRnZXRBbm5vdGF0aW9uIGV4dGVuZHMgV2lkZ2V0QW5ub3RhdGlvbiB7CiAgY29uc3RydWN0b3IocGFyYW1zKSB7CiAgICBzdXBlcihwYXJhbXMpOwogICAgdGhpcy5kYXRhLmZpZWxkVmFsdWUgPSBudWxsOwogICAgdGhpcy5kYXRhLmhhc093bkNhbnZhcyA9IHRoaXMuZGF0YS5ub1JvdGF0ZTsKICAgIHRoaXMuZGF0YS5ub0hUTUwgPSAhdGhpcy5kYXRhLmhhc093bkNhbnZhczsKICB9CiAgZ2V0RmllbGRPYmplY3QoKSB7CiAgICByZXR1cm4gewogICAgICBpZDogdGhpcy5kYXRhLmlkLAogICAgICB2YWx1ZTogbnVsbCwKICAgICAgcGFnZTogdGhpcy5kYXRhLnBhZ2VJbmRleCwKICAgICAgdHlwZTogInNpZ25hdHVyZSIKICAgIH07CiAgfQp9CmNsYXNzIFRleHRBbm5vdGF0aW9uIGV4dGVuZHMgTWFya3VwQW5ub3RhdGlvbiB7CiAgY29uc3RydWN0b3IocGFyYW1zKSB7CiAgICBjb25zdCBERUZBVUxUX0lDT05fU0laRSA9IDIyOwogICAgc3VwZXIocGFyYW1zKTsKICAgIHRoaXMuZGF0YS5ub1JvdGF0ZSA9IHRydWU7CiAgICB0aGlzLmRhdGEuaGFzT3duQ2FudmFzID0gdGhpcy5kYXRhLm5vUm90YXRlOwogICAgdGhpcy5kYXRhLm5vSFRNTCA9IGZhbHNlOwogICAgY29uc3QgewogICAgICBkaWN0CiAgICB9ID0gcGFyYW1zOwogICAgdGhpcy5kYXRhLmFubm90YXRpb25UeXBlID0gQW5ub3RhdGlvblR5cGUuVEVYVDsKICAgIGlmICh0aGlzLmRhdGEuaGFzQXBwZWFyYW5jZSkgewogICAgICB0aGlzLmRhdGEubmFtZSA9ICJOb0ljb24iOwogICAgfSBlbHNlIHsKICAgICAgdGhpcy5kYXRhLnJlY3RbMV0gPSB0aGlzLmRhdGEucmVjdFszXSAtIERFRkFVTFRfSUNPTl9TSVpFOwogICAgICB0aGlzLmRhdGEucmVjdFsyXSA9IHRoaXMuZGF0YS5yZWN0WzBdICsgREVGQVVMVF9JQ09OX1NJWkU7CiAgICAgIHRoaXMuZGF0YS5uYW1lID0gZGljdC5oYXMoIk5hbWUiKSA/IGRpY3QuZ2V0KCJOYW1lIikubmFtZSA6ICJOb3RlIjsKICAgIH0KICAgIGlmIChkaWN0LmhhcygiU3RhdGUiKSkgewogICAgICB0aGlzLmRhdGEuc3RhdGUgPSBkaWN0LmdldCgiU3RhdGUiKSB8fCBudWxsOwogICAgICB0aGlzLmRhdGEuc3RhdGVNb2RlbCA9IGRpY3QuZ2V0KCJTdGF0ZU1vZGVsIikgfHwgbnVsbDsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMuZGF0YS5zdGF0ZSA9IG51bGw7CiAgICAgIHRoaXMuZGF0YS5zdGF0ZU1vZGVsID0gbnVsbDsKICAgIH0KICB9Cn0KY2xhc3MgTGlua0Fubm90YXRpb24gZXh0ZW5kcyBBbm5vdGF0aW9uIHsKICBjb25zdHJ1Y3RvcihwYXJhbXMpIHsKICAgIHN1cGVyKHBhcmFtcyk7CiAgICBjb25zdCB7CiAgICAgIGRpY3QsCiAgICAgIGFubm90YXRpb25HbG9iYWxzCiAgICB9ID0gcGFyYW1zOwogICAgdGhpcy5kYXRhLmFubm90YXRpb25UeXBlID0gQW5ub3RhdGlvblR5cGUuTElOSzsKICAgIHRoaXMuZGF0YS5ub0hUTUwgPSBmYWxzZTsKICAgIGNvbnN0IHF1YWRQb2ludHMgPSBnZXRRdWFkUG9pbnRzKGRpY3QsIHRoaXMucmVjdGFuZ2xlKTsKICAgIGlmIChxdWFkUG9pbnRzKSB7CiAgICAgIHRoaXMuZGF0YS5xdWFkUG9pbnRzID0gcXVhZFBvaW50czsKICAgIH0KICAgIHRoaXMuZGF0YS5ib3JkZXJDb2xvciB8fD0gdGhpcy5kYXRhLmNvbG9yOwogICAgQ2F0YWxvZy5wYXJzZURlc3REaWN0aW9uYXJ5KHsKICAgICAgZGVzdERpY3Q6IGRpY3QsCiAgICAgIHJlc3VsdE9iajogdGhpcy5kYXRhLAogICAgICBkb2NCYXNlVXJsOiBhbm5vdGF0aW9uR2xvYmFscy5iYXNlVXJsLAogICAgICBkb2NBdHRhY2htZW50czogYW5ub3RhdGlvbkdsb2JhbHMuYXR0YWNobWVudHMKICAgIH0pOwogIH0KICBnZXQgb3ZlcmxheXNUZXh0Q29udGVudCgpIHsKICAgIHJldHVybiB0cnVlOwogIH0KfQpjbGFzcyBQb3B1cEFubm90YXRpb24gZXh0ZW5kcyBBbm5vdGF0aW9uIHsKICBjb25zdHJ1Y3RvcihwYXJhbXMpIHsKICAgIHN1cGVyKHBhcmFtcyk7CiAgICBjb25zdCB7CiAgICAgIGRpY3QKICAgIH0gPSBwYXJhbXM7CiAgICB0aGlzLmRhdGEuYW5ub3RhdGlvblR5cGUgPSBBbm5vdGF0aW9uVHlwZS5QT1BVUDsKICAgIHRoaXMuZGF0YS5ub0hUTUwgPSBmYWxzZTsKICAgIGlmICh0aGlzLndpZHRoID09PSAwIHx8IHRoaXMuaGVpZ2h0ID09PSAwKSB7CiAgICAgIHRoaXMuZGF0YS5yZWN0ID0gbnVsbDsKICAgIH0KICAgIGxldCBwYXJlbnRJdGVtID0gZGljdC5nZXQoIlBhcmVudCIpOwogICAgaWYgKCFwYXJlbnRJdGVtKSB7CiAgICAgIHdhcm4oIlBvcHVwIGFubm90YXRpb24gaGFzIGEgbWlzc2luZyBvciBpbnZhbGlkIHBhcmVudCBhbm5vdGF0aW9uLiIpOwogICAgICByZXR1cm47CiAgICB9CiAgICB0aGlzLmRhdGEucGFyZW50UmVjdCA9IGxvb2t1cE5vcm1hbFJlY3QocGFyZW50SXRlbS5nZXRBcnJheSgiUmVjdCIpLCBudWxsKTsKICAgIHRoaXMuZGF0YS5jcmVhdGlvbkRhdGUgPSBwYXJlbnRJdGVtLmdldCgiQ3JlYXRpb25EYXRlIikgfHwgIiI7CiAgICBjb25zdCBydCA9IHBhcmVudEl0ZW0uZ2V0KCJSVCIpOwogICAgaWYgKGlzTmFtZShydCwgQW5ub3RhdGlvblJlcGx5VHlwZS5HUk9VUCkpIHsKICAgICAgcGFyZW50SXRlbSA9IHBhcmVudEl0ZW0uZ2V0KCJJUlQiKTsKICAgIH0KICAgIGlmICghcGFyZW50SXRlbS5oYXMoIk0iKSkgewogICAgICB0aGlzLmRhdGEubW9kaWZpY2F0aW9uRGF0ZSA9IG51bGw7CiAgICB9IGVsc2UgewogICAgICB0aGlzLnNldE1vZGlmaWNhdGlvbkRhdGUocGFyZW50SXRlbS5nZXQoIk0iKSk7CiAgICAgIHRoaXMuZGF0YS5tb2RpZmljYXRpb25EYXRlID0gdGhpcy5tb2RpZmljYXRpb25EYXRlOwogICAgfQogICAgaWYgKCFwYXJlbnRJdGVtLmhhcygiQyIpKSB7CiAgICAgIHRoaXMuZGF0YS5jb2xvciA9IG51bGw7CiAgICB9IGVsc2UgewogICAgICB0aGlzLnNldENvbG9yKHBhcmVudEl0ZW0uZ2V0QXJyYXkoIkMiKSk7CiAgICAgIHRoaXMuZGF0YS5jb2xvciA9IHRoaXMuY29sb3I7CiAgICB9CiAgICBpZiAoIXRoaXMudmlld2FibGUpIHsKICAgICAgY29uc3QgcGFyZW50RmxhZ3MgPSBwYXJlbnRJdGVtLmdldCgiRiIpOwogICAgICBpZiAodGhpcy5faXNWaWV3YWJsZShwYXJlbnRGbGFncykpIHsKICAgICAgICB0aGlzLnNldEZsYWdzKHBhcmVudEZsYWdzKTsKICAgICAgfQogICAgfQogICAgdGhpcy5zZXRUaXRsZShwYXJlbnRJdGVtLmdldCgiVCIpKTsKICAgIHRoaXMuZGF0YS50aXRsZU9iaiA9IHRoaXMuX3RpdGxlOwogICAgdGhpcy5zZXRDb250ZW50cyhwYXJlbnRJdGVtLmdldCgiQ29udGVudHMiKSk7CiAgICB0aGlzLmRhdGEuY29udGVudHNPYmogPSB0aGlzLl9jb250ZW50czsKICAgIGlmIChwYXJlbnRJdGVtLmhhcygiUkMiKSkgewogICAgICB0aGlzLmRhdGEucmljaFRleHQgPSBYRkFGYWN0b3J5LmdldFJpY2hUZXh0QXNIdG1sKHBhcmVudEl0ZW0uZ2V0KCJSQyIpKTsKICAgIH0KICAgIHRoaXMuZGF0YS5vcGVuID0gISFkaWN0LmdldCgiT3BlbiIpOwogIH0KICBzdGF0aWMgY3JlYXRlTmV3RGljdChhbm5vdGF0aW9uLCB4cmVmLCBfcGFyYW1zKSB7CiAgICBjb25zdCB7CiAgICAgIG9sZEFubm90YXRpb24sCiAgICAgIHJlY3QsCiAgICAgIHBhcmVudAogICAgfSA9IGFubm90YXRpb247CiAgICBjb25zdCBwb3B1cCA9IG9sZEFubm90YXRpb24gfHwgbmV3IERpY3QoeHJlZik7CiAgICBwb3B1cC5zZXRJZk5vdEV4aXN0cygiVHlwZSIsIE5hbWUuZ2V0KCJBbm5vdCIpKTsKICAgIHBvcHVwLnNldElmTm90RXhpc3RzKCJTdWJ0eXBlIiwgTmFtZS5nZXQoIlBvcHVwIikpOwogICAgcG9wdXAuc2V0SWZOb3RFeGlzdHMoIk9wZW4iLCBmYWxzZSk7CiAgICBwb3B1cC5zZXRJZkFycmF5KCJSZWN0IiwgcmVjdCk7CiAgICBwb3B1cC5zZXQoIlBhcmVudCIsIHBhcmVudCk7CiAgICByZXR1cm4gcG9wdXA7CiAgfQogIHN0YXRpYyBhc3luYyBjcmVhdGVOZXdBcHBlYXJhbmNlU3RyZWFtKGFubm90YXRpb24sIHhyZWYsIHBhcmFtcykgewogICAgcmV0dXJuIG51bGw7CiAgfQp9CmNsYXNzIEZyZWVUZXh0QW5ub3RhdGlvbiBleHRlbmRzIE1hcmt1cEFubm90YXRpb24gewogIGNvbnN0cnVjdG9yKHBhcmFtcykgewogICAgc3VwZXIocGFyYW1zKTsKICAgIHRoaXMuZGF0YS5oYXNPd25DYW52YXMgPSB0aGlzLmRhdGEubm9Sb3RhdGU7CiAgICB0aGlzLmRhdGEuaXNFZGl0YWJsZSA9ICF0aGlzLmRhdGEubm9IVE1MOwogICAgdGhpcy5kYXRhLm5vSFRNTCA9IGZhbHNlOwogICAgY29uc3QgewogICAgICBhbm5vdGF0aW9uR2xvYmFscywKICAgICAgZXZhbHVhdG9yT3B0aW9ucywKICAgICAgeHJlZgogICAgfSA9IHBhcmFtczsKICAgIHRoaXMuZGF0YS5hbm5vdGF0aW9uVHlwZSA9IEFubm90YXRpb25UeXBlLkZSRUVURVhUOwogICAgdGhpcy5zZXREZWZhdWx0QXBwZWFyYW5jZShwYXJhbXMpOwogICAgdGhpcy5faGFzQXBwZWFyYW5jZSA9ICEhdGhpcy5hcHBlYXJhbmNlOwogICAgaWYgKHRoaXMuX2hhc0FwcGVhcmFuY2UpIHsKICAgICAgY29uc3QgewogICAgICAgIGZvbnRDb2xvciwKICAgICAgICBmb250U2l6ZQogICAgICB9ID0gcGFyc2VBcHBlYXJhbmNlU3RyZWFtKHRoaXMuYXBwZWFyYW5jZSwgZXZhbHVhdG9yT3B0aW9ucywgeHJlZiwgYW5ub3RhdGlvbkdsb2JhbHMuZ2xvYmFsQ29sb3JTcGFjZUNhY2hlKTsKICAgICAgdGhpcy5kYXRhLmRlZmF1bHRBcHBlYXJhbmNlRGF0YS5mb250Q29sb3IgPSBmb250Q29sb3I7CiAgICAgIHRoaXMuZGF0YS5kZWZhdWx0QXBwZWFyYW5jZURhdGEuZm9udFNpemUgPSBmb250U2l6ZSB8fCAxMDsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMuZGF0YS5kZWZhdWx0QXBwZWFyYW5jZURhdGEuZm9udFNpemUgfHw9IDEwOwogICAgICBjb25zdCB7CiAgICAgICAgZm9udENvbG9yLAogICAgICAgIGZvbnRTaXplCiAgICAgIH0gPSB0aGlzLmRhdGEuZGVmYXVsdEFwcGVhcmFuY2VEYXRhOwogICAgICBpZiAodGhpcy5fY29udGVudHMuc3RyKSB7CiAgICAgICAgdGhpcy5kYXRhLnRleHRDb250ZW50ID0gdGhpcy5fY29udGVudHMuc3RyLnNwbGl0KC9cclxuP3xcbi8pLm1hcChsaW5lID0+IGxpbmUudHJpbUVuZCgpKTsKICAgICAgICBjb25zdCB7CiAgICAgICAgICBjb29yZHMsCiAgICAgICAgICBiYm94LAogICAgICAgICAgbWF0cml4CiAgICAgICAgfSA9IEZha2VVbmljb2RlRm9udC5nZXRGaXJzdFBvc2l0aW9uSW5mbyh0aGlzLnJlY3RhbmdsZSwgdGhpcy5yb3RhdGlvbiwgZm9udFNpemUpOwogICAgICAgIHRoaXMuZGF0YS50ZXh0UG9zaXRpb24gPSB0aGlzLl90cmFuc2Zvcm1Qb2ludChjb29yZHMsIGJib3gsIG1hdHJpeCk7CiAgICAgIH0KICAgICAgaWYgKHRoaXMuX2lzT2Zmc2NyZWVuQ2FudmFzU3VwcG9ydGVkKSB7CiAgICAgICAgY29uc3Qgc3Ryb2tlQWxwaGEgPSBwYXJhbXMuZGljdC5nZXQoIkNBIik7CiAgICAgICAgY29uc3QgZmFrZVVuaWNvZGVGb250ID0gbmV3IEZha2VVbmljb2RlRm9udCh4cmVmLCAic2Fucy1zZXJpZiIpOwogICAgICAgIHRoaXMuYXBwZWFyYW5jZSA9IGZha2VVbmljb2RlRm9udC5jcmVhdGVBcHBlYXJhbmNlKHRoaXMuX2NvbnRlbnRzLnN0ciwgdGhpcy5yZWN0YW5nbGUsIHRoaXMucm90YXRpb24sIGZvbnRTaXplLCBmb250Q29sb3IsIHN0cm9rZUFscGhhKTsKICAgICAgICB0aGlzLl9zdHJlYW1zLnB1c2godGhpcy5hcHBlYXJhbmNlKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB3YXJuKCJGcmVlVGV4dEFubm90YXRpb246IE9mZnNjcmVlbkNhbnZhcyBpcyBub3Qgc3VwcG9ydGVkLCBhbm5vdGF0aW9uIG1heSBub3QgcmVuZGVyIGNvcnJlY3RseS4iKTsKICAgICAgfQogICAgfQogIH0KICBnZXQgaGFzVGV4dENvbnRlbnQoKSB7CiAgICByZXR1cm4gdGhpcy5faGFzQXBwZWFyYW5jZTsKICB9CiAgc3RhdGljIGNyZWF0ZU5ld0RpY3QoYW5ub3RhdGlvbiwgeHJlZiwgewogICAgYXBSZWYsCiAgICBhcAogIH0pIHsKICAgIGNvbnN0IHsKICAgICAgY29sb3IsCiAgICAgIGRhdGUsCiAgICAgIGZvbnRTaXplLAogICAgICBvbGRBbm5vdGF0aW9uLAogICAgICByZWN0LAogICAgICByb3RhdGlvbiwKICAgICAgdXNlciwKICAgICAgdmFsdWUKICAgIH0gPSBhbm5vdGF0aW9uOwogICAgY29uc3QgZnJlZXRleHQgPSBvbGRBbm5vdGF0aW9uIHx8IG5ldyBEaWN0KHhyZWYpOwogICAgZnJlZXRleHQuc2V0SWZOb3RFeGlzdHMoIlR5cGUiLCBOYW1lLmdldCgiQW5ub3QiKSk7CiAgICBmcmVldGV4dC5zZXRJZk5vdEV4aXN0cygiU3VidHlwZSIsIE5hbWUuZ2V0KCJGcmVlVGV4dCIpKTsKICAgIGZyZWV0ZXh0LnNldChvbGRBbm5vdGF0aW9uID8gIk0iIDogIkNyZWF0aW9uRGF0ZSIsIGBEOiR7Z2V0TW9kaWZpY2F0aW9uRGF0ZShkYXRlKX1gKTsKICAgIGlmIChvbGRBbm5vdGF0aW9uKSB7CiAgICAgIGZyZWV0ZXh0LmRlbGV0ZSgiUkMiKTsKICAgIH0KICAgIGZyZWV0ZXh0LnNldElmQXJyYXkoIlJlY3QiLCByZWN0KTsKICAgIGNvbnN0IGRhID0gYC9IZWx2ICR7Zm9udFNpemV9IFRmICR7Z2V0UGRmQ29sb3IoY29sb3IsIHRydWUpfWA7CiAgICBmcmVldGV4dC5zZXQoIkRBIiwgZGEpOwogICAgZnJlZXRleHQuc2V0SWZEZWZpbmVkKCJDb250ZW50cyIsIHN0cmluZ1RvQXNjaWlPclVURjE2QkUodmFsdWUpKTsKICAgIGZyZWV0ZXh0LnNldElmTm90RXhpc3RzKCJGIiwgNCk7CiAgICBmcmVldGV4dC5zZXRJZk5vdEV4aXN0cygiQm9yZGVyIiwgWzAsIDAsIDBdKTsKICAgIGZyZWV0ZXh0LnNldElmTnVtYmVyKCJSb3RhdGUiLCByb3RhdGlvbik7CiAgICBmcmVldGV4dC5zZXRJZkRlZmluZWQoIlQiLCBzdHJpbmdUb0FzY2lpT3JVVEYxNkJFKHVzZXIpKTsKICAgIGlmIChhcFJlZiB8fCBhcCkgewogICAgICBjb25zdCBuID0gbmV3IERpY3QoeHJlZik7CiAgICAgIGZyZWV0ZXh0LnNldCgiQVAiLCBuKTsKICAgICAgbi5zZXQoIk4iLCBhcFJlZiB8fCBhcCk7CiAgICB9CiAgICByZXR1cm4gZnJlZXRleHQ7CiAgfQogIHN0YXRpYyBhc3luYyBjcmVhdGVOZXdBcHBlYXJhbmNlU3RyZWFtKGFubm90YXRpb24sIHhyZWYsIHBhcmFtcykgewogICAgY29uc3QgewogICAgICBiYXNlRm9udFJlZiwKICAgICAgZXZhbHVhdG9yLAogICAgICB0YXNrCiAgICB9ID0gcGFyYW1zOwogICAgY29uc3QgewogICAgICBjb2xvciwKICAgICAgZm9udFNpemUsCiAgICAgIHJlY3QsCiAgICAgIHJvdGF0aW9uLAogICAgICB2YWx1ZQogICAgfSA9IGFubm90YXRpb247CiAgICBpZiAoIWNvbG9yKSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgY29uc3QgcmVzb3VyY2VzID0gbmV3IERpY3QoeHJlZik7CiAgICBjb25zdCBmb250ID0gbmV3IERpY3QoeHJlZik7CiAgICBpZiAoYmFzZUZvbnRSZWYpIHsKICAgICAgZm9udC5zZXQoIkhlbHYiLCBiYXNlRm9udFJlZik7CiAgICB9IGVsc2UgewogICAgICBjb25zdCBiYXNlRm9udCA9IG5ldyBEaWN0KHhyZWYpOwogICAgICBiYXNlRm9udC5zZXRJZk5hbWUoIkJhc2VGb250IiwgIkhlbHZldGljYSIpOwogICAgICBiYXNlRm9udC5zZXRJZk5hbWUoIlR5cGUiLCAiRm9udCIpOwogICAgICBiYXNlRm9udC5zZXRJZk5hbWUoIlN1YnR5cGUiLCAiVHlwZTEiKTsKICAgICAgYmFzZUZvbnQuc2V0SWZOYW1lKCJFbmNvZGluZyIsICJXaW5BbnNpRW5jb2RpbmciKTsKICAgICAgZm9udC5zZXQoIkhlbHYiLCBiYXNlRm9udCk7CiAgICB9CiAgICByZXNvdXJjZXMuc2V0KCJGb250IiwgZm9udCk7CiAgICBjb25zdCBoZWx2ID0gYXdhaXQgV2lkZ2V0QW5ub3RhdGlvbi5fZ2V0Rm9udERhdGEoZXZhbHVhdG9yLCB0YXNrLCB7CiAgICAgIGZvbnROYW1lOiAiSGVsdiIsCiAgICAgIGZvbnRTaXplCiAgICB9LCByZXNvdXJjZXMpOwogICAgY29uc3QgW3gxLCB5MSwgeDIsIHkyXSA9IHJlY3Q7CiAgICBsZXQgdyA9IHgyIC0geDE7CiAgICBsZXQgaCA9IHkyIC0geTE7CiAgICBpZiAocm90YXRpb24gJSAxODAgIT09IDApIHsKICAgICAgW3csIGhdID0gW2gsIHddOwogICAgfQogICAgY29uc3QgbGluZXMgPSB2YWx1ZS5zcGxpdCgiXG4iKTsKICAgIGNvbnN0IHNjYWxlID0gZm9udFNpemUgLyAxMDAwOwogICAgbGV0IHRvdGFsV2lkdGggPSAtSW5maW5pdHk7CiAgICBjb25zdCBlbmNvZGVkTGluZXMgPSBbXTsKICAgIGZvciAobGV0IGxpbmUgb2YgbGluZXMpIHsKICAgICAgY29uc3QgZW5jb2RlZCA9IGhlbHYuZW5jb2RlU3RyaW5nKGxpbmUpOwogICAgICBpZiAoZW5jb2RlZC5sZW5ndGggPiAxKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgICAgbGluZSA9IGVuY29kZWQuam9pbigiIik7CiAgICAgIGVuY29kZWRMaW5lcy5wdXNoKGxpbmUpOwogICAgICBsZXQgbGluZVdpZHRoID0gMDsKICAgICAgY29uc3QgZ2x5cGhzID0gaGVsdi5jaGFyc1RvR2x5cGhzKGxpbmUpOwogICAgICBmb3IgKGNvbnN0IGdseXBoIG9mIGdseXBocykgewogICAgICAgIGxpbmVXaWR0aCArPSBnbHlwaC53aWR0aCAqIHNjYWxlOwogICAgICB9CiAgICAgIHRvdGFsV2lkdGggPSBNYXRoLm1heCh0b3RhbFdpZHRoLCBsaW5lV2lkdGgpOwogICAgfQogICAgbGV0IGhzY2FsZSA9IDE7CiAgICBpZiAodG90YWxXaWR0aCA+IHcpIHsKICAgICAgaHNjYWxlID0gdyAvIHRvdGFsV2lkdGg7CiAgICB9CiAgICBsZXQgdnNjYWxlID0gMTsKICAgIGNvbnN0IGxpbmVIZWlnaHQgPSBMSU5FX0ZBQ1RPUiAqIGZvbnRTaXplOwogICAgY29uc3QgbGluZUFzY2VudCA9IChMSU5FX0ZBQ1RPUiAtIExJTkVfREVTQ0VOVF9GQUNUT1IpICogZm9udFNpemU7CiAgICBjb25zdCB0b3RhbEhlaWdodCA9IGxpbmVIZWlnaHQgKiBsaW5lcy5sZW5ndGg7CiAgICBpZiAodG90YWxIZWlnaHQgPiBoKSB7CiAgICAgIHZzY2FsZSA9IGggLyB0b3RhbEhlaWdodDsKICAgIH0KICAgIGNvbnN0IGZzY2FsZSA9IE1hdGgubWluKGhzY2FsZSwgdnNjYWxlKTsKICAgIGNvbnN0IG5ld0ZvbnRTaXplID0gZm9udFNpemUgKiBmc2NhbGU7CiAgICBsZXQgZmlyc3RQb2ludCwgY2xpcEJveCwgbWF0cml4OwogICAgc3dpdGNoIChyb3RhdGlvbikgewogICAgICBjYXNlIDA6CiAgICAgICAgbWF0cml4ID0gWzEsIDAsIDAsIDFdOwogICAgICAgIGNsaXBCb3ggPSBbcmVjdFswXSwgcmVjdFsxXSwgdywgaF07CiAgICAgICAgZmlyc3RQb2ludCA9IFtyZWN0WzBdLCByZWN0WzNdIC0gbGluZUFzY2VudF07CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgOTA6CiAgICAgICAgbWF0cml4ID0gWzAsIDEsIC0xLCAwXTsKICAgICAgICBjbGlwQm94ID0gW3JlY3RbMV0sIC1yZWN0WzJdLCB3LCBoXTsKICAgICAgICBmaXJzdFBvaW50ID0gW3JlY3RbMV0sIC1yZWN0WzBdIC0gbGluZUFzY2VudF07CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgMTgwOgogICAgICAgIG1hdHJpeCA9IFstMSwgMCwgMCwgLTFdOwogICAgICAgIGNsaXBCb3ggPSBbLXJlY3RbMl0sIC1yZWN0WzNdLCB3LCBoXTsKICAgICAgICBmaXJzdFBvaW50ID0gWy1yZWN0WzJdLCAtcmVjdFsxXSAtIGxpbmVBc2NlbnRdOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlIDI3MDoKICAgICAgICBtYXRyaXggPSBbMCwgLTEsIDEsIDBdOwogICAgICAgIGNsaXBCb3ggPSBbLXJlY3RbM10sIHJlY3RbMF0sIHcsIGhdOwogICAgICAgIGZpcnN0UG9pbnQgPSBbLXJlY3RbM10sIHJlY3RbMl0gLSBsaW5lQXNjZW50XTsKICAgICAgICBicmVhazsKICAgIH0KICAgIGNvbnN0IGJ1ZmZlciA9IFsicSIsIGAke21hdHJpeC5qb2luKCIgIil9IDAgMCBjbWAsIGAke2NsaXBCb3guam9pbigiICIpfSByZSBXIG5gLCBgQlRgLCBgJHtnZXRQZGZDb2xvcihjb2xvciwgdHJ1ZSl9YCwgYDAgVGMgL0hlbHYgJHtudW1iZXJUb1N0cmluZyhuZXdGb250U2l6ZSl9IFRmYF07CiAgICBidWZmZXIucHVzaChgJHtmaXJzdFBvaW50LmpvaW4oIiAiKX0gVGQgKCR7ZXNjYXBlU3RyaW5nKGVuY29kZWRMaW5lc1swXSl9KSBUamApOwogICAgY29uc3QgdlNoaWZ0ID0gbnVtYmVyVG9TdHJpbmcobGluZUhlaWdodCk7CiAgICBmb3IgKGxldCBpID0gMSwgaWkgPSBlbmNvZGVkTGluZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgICBjb25zdCBsaW5lID0gZW5jb2RlZExpbmVzW2ldOwogICAgICBidWZmZXIucHVzaChgMCAtJHt2U2hpZnR9IFRkICgke2VzY2FwZVN0cmluZyhsaW5lKX0pIFRqYCk7CiAgICB9CiAgICBidWZmZXIucHVzaCgiRVQiLCAiUSIpOwogICAgY29uc3QgYXBwZWFyYW5jZSA9IGJ1ZmZlci5qb2luKCJcbiIpOwogICAgY29uc3QgYXBwZWFyYW5jZVN0cmVhbURpY3QgPSBuZXcgRGljdCh4cmVmKTsKICAgIGFwcGVhcmFuY2VTdHJlYW1EaWN0LnNldCgiRm9ybVR5cGUiLCAxKTsKICAgIGFwcGVhcmFuY2VTdHJlYW1EaWN0LnNldElmTmFtZSgiU3VidHlwZSIsICJGb3JtIik7CiAgICBhcHBlYXJhbmNlU3RyZWFtRGljdC5zZXRJZk5hbWUoIlR5cGUiLCAiWE9iamVjdCIpOwogICAgYXBwZWFyYW5jZVN0cmVhbURpY3Quc2V0KCJCQm94IiwgcmVjdCk7CiAgICBhcHBlYXJhbmNlU3RyZWFtRGljdC5zZXQoIlJlc291cmNlcyIsIHJlc291cmNlcyk7CiAgICBhcHBlYXJhbmNlU3RyZWFtRGljdC5zZXQoIk1hdHJpeCIsIFsxLCAwLCAwLCAxLCAtcmVjdFswXSwgLXJlY3RbMV1dKTsKICAgIGNvbnN0IGFwID0gbmV3IFN0cmluZ1N0cmVhbShhcHBlYXJhbmNlKTsKICAgIGFwLmRpY3QgPSBhcHBlYXJhbmNlU3RyZWFtRGljdDsKICAgIHJldHVybiBhcDsKICB9Cn0KY2xhc3MgTGluZUFubm90YXRpb24gZXh0ZW5kcyBNYXJrdXBBbm5vdGF0aW9uIHsKICBjb25zdHJ1Y3RvcihwYXJhbXMpIHsKICAgIHN1cGVyKHBhcmFtcyk7CiAgICBjb25zdCB7CiAgICAgIGRpY3QsCiAgICAgIHhyZWYKICAgIH0gPSBwYXJhbXM7CiAgICB0aGlzLmRhdGEuYW5ub3RhdGlvblR5cGUgPSBBbm5vdGF0aW9uVHlwZS5MSU5FOwogICAgdGhpcy5kYXRhLmhhc093bkNhbnZhcyA9IHRoaXMuZGF0YS5ub1JvdGF0ZTsKICAgIHRoaXMuZGF0YS5ub0hUTUwgPSBmYWxzZTsKICAgIGNvbnN0IGxpbmVDb29yZGluYXRlcyA9IGxvb2t1cFJlY3QoZGljdC5nZXRBcnJheSgiTCIpLCBbMCwgMCwgMCwgMF0pOwogICAgdGhpcy5kYXRhLmxpbmVDb29yZGluYXRlcyA9IFV0aWwubm9ybWFsaXplUmVjdChsaW5lQ29vcmRpbmF0ZXMpOwogICAgdGhpcy5zZXRMaW5lRW5kaW5ncyhkaWN0LmdldEFycmF5KCJMRSIpKTsKICAgIHRoaXMuZGF0YS5saW5lRW5kaW5ncyA9IHRoaXMubGluZUVuZGluZ3M7CiAgICBpZiAoIXRoaXMuYXBwZWFyYW5jZSkgewogICAgICBjb25zdCBzdHJva2VDb2xvciA9IGdldFBkZkNvbG9yQXJyYXkodGhpcy5jb2xvciwgWzAsIDAsIDBdKTsKICAgICAgY29uc3Qgc3Ryb2tlQWxwaGEgPSBkaWN0LmdldCgiQ0EiKTsKICAgICAgY29uc3QgaW50ZXJpb3JDb2xvciA9IGdldFJnYkNvbG9yKGRpY3QuZ2V0QXJyYXkoIklDIiksIG51bGwpOwogICAgICBjb25zdCBmaWxsQ29sb3IgPSBnZXRQZGZDb2xvckFycmF5KGludGVyaW9yQ29sb3IpOwogICAgICBjb25zdCBmaWxsQWxwaGEgPSBmaWxsQ29sb3IgPyBzdHJva2VBbHBoYSA6IG51bGw7CiAgICAgIGNvbnN0IGJvcmRlcldpZHRoID0gdGhpcy5ib3JkZXJTdHlsZS53aWR0aCB8fCAxLAogICAgICAgIGJvcmRlckFkanVzdCA9IDIgKiBib3JkZXJXaWR0aDsKICAgICAgY29uc3QgYmJveCA9IFt0aGlzLmRhdGEubGluZUNvb3JkaW5hdGVzWzBdIC0gYm9yZGVyQWRqdXN0LCB0aGlzLmRhdGEubGluZUNvb3JkaW5hdGVzWzFdIC0gYm9yZGVyQWRqdXN0LCB0aGlzLmRhdGEubGluZUNvb3JkaW5hdGVzWzJdICsgYm9yZGVyQWRqdXN0LCB0aGlzLmRhdGEubGluZUNvb3JkaW5hdGVzWzNdICsgYm9yZGVyQWRqdXN0XTsKICAgICAgaWYgKCFVdGlsLmludGVyc2VjdCh0aGlzLnJlY3RhbmdsZSwgYmJveCkpIHsKICAgICAgICB0aGlzLnJlY3RhbmdsZSA9IGJib3g7CiAgICAgIH0KICAgICAgdGhpcy5fc2V0RGVmYXVsdEFwcGVhcmFuY2UoewogICAgICAgIHhyZWYsCiAgICAgICAgZXh0cmE6IGAke2JvcmRlcldpZHRofSB3YCwKICAgICAgICBzdHJva2VDb2xvciwKICAgICAgICBmaWxsQ29sb3IsCiAgICAgICAgc3Ryb2tlQWxwaGEsCiAgICAgICAgZmlsbEFscGhhLAogICAgICAgIHBvaW50c0NhbGxiYWNrOiAoYnVmZmVyLCBwb2ludHMpID0+IHsKICAgICAgICAgIGJ1ZmZlci5wdXNoKGAke2xpbmVDb29yZGluYXRlc1swXX0gJHtsaW5lQ29vcmRpbmF0ZXNbMV19IG1gLCBgJHtsaW5lQ29vcmRpbmF0ZXNbMl19ICR7bGluZUNvb3JkaW5hdGVzWzNdfSBsYCwgIlMiKTsKICAgICAgICAgIHJldHVybiBbcG9pbnRzWzBdIC0gYm9yZGVyV2lkdGgsIHBvaW50c1s3XSAtIGJvcmRlcldpZHRoLCBwb2ludHNbMl0gKyBib3JkZXJXaWR0aCwgcG9pbnRzWzNdICsgYm9yZGVyV2lkdGhdOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfQp9CmNsYXNzIFNxdWFyZUFubm90YXRpb24gZXh0ZW5kcyBNYXJrdXBBbm5vdGF0aW9uIHsKICBjb25zdHJ1Y3RvcihwYXJhbXMpIHsKICAgIHN1cGVyKHBhcmFtcyk7CiAgICBjb25zdCB7CiAgICAgIGRpY3QsCiAgICAgIHhyZWYKICAgIH0gPSBwYXJhbXM7CiAgICB0aGlzLmRhdGEuYW5ub3RhdGlvblR5cGUgPSBBbm5vdGF0aW9uVHlwZS5TUVVBUkU7CiAgICB0aGlzLmRhdGEuaGFzT3duQ2FudmFzID0gdGhpcy5kYXRhLm5vUm90YXRlOwogICAgdGhpcy5kYXRhLm5vSFRNTCA9IGZhbHNlOwogICAgaWYgKCF0aGlzLmFwcGVhcmFuY2UpIHsKICAgICAgY29uc3Qgc3Ryb2tlQ29sb3IgPSBnZXRQZGZDb2xvckFycmF5KHRoaXMuY29sb3IsIFswLCAwLCAwXSk7CiAgICAgIGNvbnN0IHN0cm9rZUFscGhhID0gZGljdC5nZXQoIkNBIik7CiAgICAgIGNvbnN0IGludGVyaW9yQ29sb3IgPSBnZXRSZ2JDb2xvcihkaWN0LmdldEFycmF5KCJJQyIpLCBudWxsKTsKICAgICAgY29uc3QgZmlsbENvbG9yID0gZ2V0UGRmQ29sb3JBcnJheShpbnRlcmlvckNvbG9yKTsKICAgICAgY29uc3QgZmlsbEFscGhhID0gZmlsbENvbG9yID8gc3Ryb2tlQWxwaGEgOiBudWxsOwogICAgICBpZiAodGhpcy5ib3JkZXJTdHlsZS53aWR0aCA9PT0gMCAmJiAhZmlsbENvbG9yKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIHRoaXMuX3NldERlZmF1bHRBcHBlYXJhbmNlKHsKICAgICAgICB4cmVmLAogICAgICAgIGV4dHJhOiBgJHt0aGlzLmJvcmRlclN0eWxlLndpZHRofSB3YCwKICAgICAgICBzdHJva2VDb2xvciwKICAgICAgICBmaWxsQ29sb3IsCiAgICAgICAgc3Ryb2tlQWxwaGEsCiAgICAgICAgZmlsbEFscGhhLAogICAgICAgIHBvaW50c0NhbGxiYWNrOiAoYnVmZmVyLCBwb2ludHMpID0+IHsKICAgICAgICAgIGNvbnN0IHggPSBwb2ludHNbNF0gKyB0aGlzLmJvcmRlclN0eWxlLndpZHRoIC8gMjsKICAgICAgICAgIGNvbnN0IHkgPSBwb2ludHNbNV0gKyB0aGlzLmJvcmRlclN0eWxlLndpZHRoIC8gMjsKICAgICAgICAgIGNvbnN0IHdpZHRoID0gcG9pbnRzWzZdIC0gcG9pbnRzWzRdIC0gdGhpcy5ib3JkZXJTdHlsZS53aWR0aDsKICAgICAgICAgIGNvbnN0IGhlaWdodCA9IHBvaW50c1szXSAtIHBvaW50c1s3XSAtIHRoaXMuYm9yZGVyU3R5bGUud2lkdGg7CiAgICAgICAgICBidWZmZXIucHVzaChgJHt4fSAke3l9ICR7d2lkdGh9ICR7aGVpZ2h0fSByZWApOwogICAgICAgICAgaWYgKGZpbGxDb2xvcikgewogICAgICAgICAgICBidWZmZXIucHVzaCgiQiIpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYnVmZmVyLnB1c2goIlMiKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBbcG9pbnRzWzBdLCBwb2ludHNbN10sIHBvaW50c1syXSwgcG9pbnRzWzNdXTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0KfQpjbGFzcyBDaXJjbGVBbm5vdGF0aW9uIGV4dGVuZHMgTWFya3VwQW5ub3RhdGlvbiB7CiAgY29uc3RydWN0b3IocGFyYW1zKSB7CiAgICBzdXBlcihwYXJhbXMpOwogICAgY29uc3QgewogICAgICBkaWN0LAogICAgICB4cmVmCiAgICB9ID0gcGFyYW1zOwogICAgdGhpcy5kYXRhLmFubm90YXRpb25UeXBlID0gQW5ub3RhdGlvblR5cGUuQ0lSQ0xFOwogICAgaWYgKCF0aGlzLmFwcGVhcmFuY2UpIHsKICAgICAgY29uc3Qgc3Ryb2tlQ29sb3IgPSBnZXRQZGZDb2xvckFycmF5KHRoaXMuY29sb3IsIFswLCAwLCAwXSk7CiAgICAgIGNvbnN0IHN0cm9rZUFscGhhID0gZGljdC5nZXQoIkNBIik7CiAgICAgIGNvbnN0IGludGVyaW9yQ29sb3IgPSBnZXRSZ2JDb2xvcihkaWN0LmdldEFycmF5KCJJQyIpLCBudWxsKTsKICAgICAgY29uc3QgZmlsbENvbG9yID0gZ2V0UGRmQ29sb3JBcnJheShpbnRlcmlvckNvbG9yKTsKICAgICAgY29uc3QgZmlsbEFscGhhID0gZmlsbENvbG9yID8gc3Ryb2tlQWxwaGEgOiBudWxsOwogICAgICBpZiAodGhpcy5ib3JkZXJTdHlsZS53aWR0aCA9PT0gMCAmJiAhZmlsbENvbG9yKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIGNvbnN0IGNvbnRyb2xQb2ludHNEaXN0YW5jZSA9IDQgLyAzICogTWF0aC50YW4oTWF0aC5QSSAvICgyICogNCkpOwogICAgICB0aGlzLl9zZXREZWZhdWx0QXBwZWFyYW5jZSh7CiAgICAgICAgeHJlZiwKICAgICAgICBleHRyYTogYCR7dGhpcy5ib3JkZXJTdHlsZS53aWR0aH0gd2AsCiAgICAgICAgc3Ryb2tlQ29sb3IsCiAgICAgICAgZmlsbENvbG9yLAogICAgICAgIHN0cm9rZUFscGhhLAogICAgICAgIGZpbGxBbHBoYSwKICAgICAgICBwb2ludHNDYWxsYmFjazogKGJ1ZmZlciwgcG9pbnRzKSA9PiB7CiAgICAgICAgICBjb25zdCB4MCA9IHBvaW50c1swXSArIHRoaXMuYm9yZGVyU3R5bGUud2lkdGggLyAyOwogICAgICAgICAgY29uc3QgeTAgPSBwb2ludHNbMV0gLSB0aGlzLmJvcmRlclN0eWxlLndpZHRoIC8gMjsKICAgICAgICAgIGNvbnN0IHgxID0gcG9pbnRzWzZdIC0gdGhpcy5ib3JkZXJTdHlsZS53aWR0aCAvIDI7CiAgICAgICAgICBjb25zdCB5MSA9IHBvaW50c1s3XSArIHRoaXMuYm9yZGVyU3R5bGUud2lkdGggLyAyOwogICAgICAgICAgY29uc3QgeE1pZCA9IHgwICsgKHgxIC0geDApIC8gMjsKICAgICAgICAgIGNvbnN0IHlNaWQgPSB5MCArICh5MSAtIHkwKSAvIDI7CiAgICAgICAgICBjb25zdCB4T2Zmc2V0ID0gKHgxIC0geDApIC8gMiAqIGNvbnRyb2xQb2ludHNEaXN0YW5jZTsKICAgICAgICAgIGNvbnN0IHlPZmZzZXQgPSAoeTEgLSB5MCkgLyAyICogY29udHJvbFBvaW50c0Rpc3RhbmNlOwogICAgICAgICAgYnVmZmVyLnB1c2goYCR7eE1pZH0gJHt5MX0gbWAsIGAke3hNaWQgKyB4T2Zmc2V0fSAke3kxfSAke3gxfSAke3lNaWQgKyB5T2Zmc2V0fSAke3gxfSAke3lNaWR9IGNgLCBgJHt4MX0gJHt5TWlkIC0geU9mZnNldH0gJHt4TWlkICsgeE9mZnNldH0gJHt5MH0gJHt4TWlkfSAke3kwfSBjYCwgYCR7eE1pZCAtIHhPZmZzZXR9ICR7eTB9ICR7eDB9ICR7eU1pZCAtIHlPZmZzZXR9ICR7eDB9ICR7eU1pZH0gY2AsIGAke3gwfSAke3lNaWQgKyB5T2Zmc2V0fSAke3hNaWQgLSB4T2Zmc2V0fSAke3kxfSAke3hNaWR9ICR7eTF9IGNgLCAiaCIpOwogICAgICAgICAgaWYgKGZpbGxDb2xvcikgewogICAgICAgICAgICBidWZmZXIucHVzaCgiQiIpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYnVmZmVyLnB1c2goIlMiKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBbcG9pbnRzWzBdLCBwb2ludHNbN10sIHBvaW50c1syXSwgcG9pbnRzWzNdXTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0KfQpjbGFzcyBQb2x5bGluZUFubm90YXRpb24gZXh0ZW5kcyBNYXJrdXBBbm5vdGF0aW9uIHsKICBjb25zdHJ1Y3RvcihwYXJhbXMpIHsKICAgIHN1cGVyKHBhcmFtcyk7CiAgICBjb25zdCB7CiAgICAgIGRpY3QsCiAgICAgIHhyZWYKICAgIH0gPSBwYXJhbXM7CiAgICB0aGlzLmRhdGEuYW5ub3RhdGlvblR5cGUgPSBBbm5vdGF0aW9uVHlwZS5QT0xZTElORTsKICAgIHRoaXMuZGF0YS5oYXNPd25DYW52YXMgPSB0aGlzLmRhdGEubm9Sb3RhdGU7CiAgICB0aGlzLmRhdGEubm9IVE1MID0gZmFsc2U7CiAgICB0aGlzLmRhdGEudmVydGljZXMgPSBudWxsOwogICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFBvbHlnb25Bbm5vdGF0aW9uKSkgewogICAgICB0aGlzLnNldExpbmVFbmRpbmdzKGRpY3QuZ2V0QXJyYXkoIkxFIikpOwogICAgICB0aGlzLmRhdGEubGluZUVuZGluZ3MgPSB0aGlzLmxpbmVFbmRpbmdzOwogICAgfQogICAgY29uc3QgcmF3VmVydGljZXMgPSBkaWN0LmdldEFycmF5KCJWZXJ0aWNlcyIpOwogICAgaWYgKCFpc051bWJlckFycmF5KHJhd1ZlcnRpY2VzLCBudWxsKSkgewogICAgICByZXR1cm47CiAgICB9CiAgICBjb25zdCB2ZXJ0aWNlcyA9IHRoaXMuZGF0YS52ZXJ0aWNlcyA9IEZsb2F0MzJBcnJheS5mcm9tKHJhd1ZlcnRpY2VzKTsKICAgIGlmICghdGhpcy5hcHBlYXJhbmNlKSB7CiAgICAgIGNvbnN0IHN0cm9rZUNvbG9yID0gZ2V0UGRmQ29sb3JBcnJheSh0aGlzLmNvbG9yLCBbMCwgMCwgMF0pOwogICAgICBjb25zdCBzdHJva2VBbHBoYSA9IGRpY3QuZ2V0KCJDQSIpOwogICAgICBsZXQgZmlsbENvbG9yID0gZ2V0UmdiQ29sb3IoZGljdC5nZXRBcnJheSgiSUMiKSwgbnVsbCk7CiAgICAgIGlmIChmaWxsQ29sb3IpIHsKICAgICAgICBmaWxsQ29sb3IgPSBnZXRQZGZDb2xvckFycmF5KGZpbGxDb2xvcik7CiAgICAgIH0KICAgICAgbGV0IG9wZXJhdG9yOwogICAgICBpZiAoZmlsbENvbG9yKSB7CiAgICAgICAgaWYgKHRoaXMuY29sb3IpIHsKICAgICAgICAgIG9wZXJhdG9yID0gZmlsbENvbG9yLmV2ZXJ5KChjLCBpKSA9PiBjID09PSBzdHJva2VDb2xvcltpXSkgPyAiZiIgOiAiQiI7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIG9wZXJhdG9yID0gImYiOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBvcGVyYXRvciA9ICJTIjsKICAgICAgfQogICAgICBjb25zdCBib3JkZXJXaWR0aCA9IHRoaXMuYm9yZGVyU3R5bGUud2lkdGggfHwgMSwKICAgICAgICBib3JkZXJBZGp1c3QgPSAyICogYm9yZGVyV2lkdGg7CiAgICAgIGNvbnN0IGJib3ggPSBbSW5maW5pdHksIEluZmluaXR5LCAtSW5maW5pdHksIC1JbmZpbml0eV07CiAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IHZlcnRpY2VzLmxlbmd0aDsgaSA8IGlpOyBpICs9IDIpIHsKICAgICAgICBVdGlsLnJlY3RCb3VuZGluZ0JveCh2ZXJ0aWNlc1tpXSAtIGJvcmRlckFkanVzdCwgdmVydGljZXNbaSArIDFdIC0gYm9yZGVyQWRqdXN0LCB2ZXJ0aWNlc1tpXSArIGJvcmRlckFkanVzdCwgdmVydGljZXNbaSArIDFdICsgYm9yZGVyQWRqdXN0LCBiYm94KTsKICAgICAgfQogICAgICBpZiAoIVV0aWwuaW50ZXJzZWN0KHRoaXMucmVjdGFuZ2xlLCBiYm94KSkgewogICAgICAgIHRoaXMucmVjdGFuZ2xlID0gYmJveDsKICAgICAgfQogICAgICB0aGlzLl9zZXREZWZhdWx0QXBwZWFyYW5jZSh7CiAgICAgICAgeHJlZiwKICAgICAgICBleHRyYTogYCR7Ym9yZGVyV2lkdGh9IHdgLAogICAgICAgIHN0cm9rZUNvbG9yLAogICAgICAgIHN0cm9rZUFscGhhLAogICAgICAgIGZpbGxDb2xvciwKICAgICAgICBmaWxsQWxwaGE6IGZpbGxDb2xvciA/IHN0cm9rZUFscGhhIDogbnVsbCwKICAgICAgICBwb2ludHNDYWxsYmFjazogKGJ1ZmZlciwgcG9pbnRzKSA9PiB7CiAgICAgICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSB2ZXJ0aWNlcy5sZW5ndGg7IGkgPCBpaTsgaSArPSAyKSB7CiAgICAgICAgICAgIGJ1ZmZlci5wdXNoKGAke3ZlcnRpY2VzW2ldfSAke3ZlcnRpY2VzW2kgKyAxXX0gJHtpID09PSAwID8gIm0iIDogImwifWApOwogICAgICAgICAgfQogICAgICAgICAgYnVmZmVyLnB1c2gob3BlcmF0b3IpOwogICAgICAgICAgcmV0dXJuIFtwb2ludHNbMF0sIHBvaW50c1s3XSwgcG9pbnRzWzJdLCBwb2ludHNbM11dOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfQp9CmNsYXNzIFBvbHlnb25Bbm5vdGF0aW9uIGV4dGVuZHMgUG9seWxpbmVBbm5vdGF0aW9uIHsKICBjb25zdHJ1Y3RvcihwYXJhbXMpIHsKICAgIHN1cGVyKHBhcmFtcyk7CiAgICB0aGlzLmRhdGEuYW5ub3RhdGlvblR5cGUgPSBBbm5vdGF0aW9uVHlwZS5QT0xZR09OOwogIH0KfQpjbGFzcyBDYXJldEFubm90YXRpb24gZXh0ZW5kcyBNYXJrdXBBbm5vdGF0aW9uIHsKICBjb25zdHJ1Y3RvcihwYXJhbXMpIHsKICAgIHN1cGVyKHBhcmFtcyk7CiAgICB0aGlzLmRhdGEuYW5ub3RhdGlvblR5cGUgPSBBbm5vdGF0aW9uVHlwZS5DQVJFVDsKICB9Cn0KY2xhc3MgSW5rQW5ub3RhdGlvbiBleHRlbmRzIE1hcmt1cEFubm90YXRpb24gewogIGNvbnN0cnVjdG9yKHBhcmFtcykgewogICAgc3VwZXIocGFyYW1zKTsKICAgIHRoaXMuZGF0YS5oYXNPd25DYW52YXMgPSB0aGlzLmRhdGEubm9Sb3RhdGU7CiAgICB0aGlzLmRhdGEubm9IVE1MID0gZmFsc2U7CiAgICBjb25zdCB7CiAgICAgIGRpY3QsCiAgICAgIHhyZWYKICAgIH0gPSBwYXJhbXM7CiAgICB0aGlzLmRhdGEuYW5ub3RhdGlvblR5cGUgPSBBbm5vdGF0aW9uVHlwZS5JTks7CiAgICB0aGlzLmRhdGEuaW5rTGlzdHMgPSBbXTsKICAgIHRoaXMuZGF0YS5pc0VkaXRhYmxlID0gIXRoaXMuZGF0YS5ub0hUTUw7CiAgICB0aGlzLmRhdGEubm9IVE1MID0gZmFsc2U7CiAgICB0aGlzLmRhdGEub3BhY2l0eSA9IGRpY3QuZ2V0KCJDQSIpIHx8IDE7CiAgICBjb25zdCByYXdJbmtMaXN0cyA9IGRpY3QuZ2V0QXJyYXkoIklua0xpc3QiKTsKICAgIGlmICghQXJyYXkuaXNBcnJheShyYXdJbmtMaXN0cykpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgZm9yIChsZXQgaSA9IDAsIGlpID0gcmF3SW5rTGlzdHMubGVuZ3RoOyBpIDwgaWk7ICsraSkgewogICAgICBpZiAoIUFycmF5LmlzQXJyYXkocmF3SW5rTGlzdHNbaV0pKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgY29uc3QgaW5rTGlzdCA9IG5ldyBGbG9hdDMyQXJyYXkocmF3SW5rTGlzdHNbaV0ubGVuZ3RoKTsKICAgICAgdGhpcy5kYXRhLmlua0xpc3RzLnB1c2goaW5rTGlzdCk7CiAgICAgIGZvciAobGV0IGogPSAwLCBqaiA9IHJhd0lua0xpc3RzW2ldLmxlbmd0aDsgaiA8IGpqOyBqICs9IDIpIHsKICAgICAgICBjb25zdCB4ID0geHJlZi5mZXRjaElmUmVmKHJhd0lua0xpc3RzW2ldW2pdKSwKICAgICAgICAgIHkgPSB4cmVmLmZldGNoSWZSZWYocmF3SW5rTGlzdHNbaV1baiArIDFdKTsKICAgICAgICBpZiAodHlwZW9mIHggPT09ICJudW1iZXIiICYmIHR5cGVvZiB5ID09PSAibnVtYmVyIikgewogICAgICAgICAgaW5rTGlzdFtqXSA9IHg7CiAgICAgICAgICBpbmtMaXN0W2ogKyAxXSA9IHk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBpZiAoIXRoaXMuYXBwZWFyYW5jZSkgewogICAgICBjb25zdCBzdHJva2VDb2xvciA9IGdldFBkZkNvbG9yQXJyYXkodGhpcy5jb2xvciwgWzAsIDAsIDBdKTsKICAgICAgY29uc3Qgc3Ryb2tlQWxwaGEgPSBkaWN0LmdldCgiQ0EiKTsKICAgICAgY29uc3QgYm9yZGVyV2lkdGggPSB0aGlzLmJvcmRlclN0eWxlLndpZHRoIHx8IDEsCiAgICAgICAgYm9yZGVyQWRqdXN0ID0gMiAqIGJvcmRlcldpZHRoOwogICAgICBjb25zdCBiYm94ID0gW0luZmluaXR5LCBJbmZpbml0eSwgLUluZmluaXR5LCAtSW5maW5pdHldOwogICAgICBmb3IgKGNvbnN0IGlua0xpc3Qgb2YgdGhpcy5kYXRhLmlua0xpc3RzKSB7CiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gaW5rTGlzdC5sZW5ndGg7IGkgPCBpaTsgaSArPSAyKSB7CiAgICAgICAgICBVdGlsLnJlY3RCb3VuZGluZ0JveChpbmtMaXN0W2ldIC0gYm9yZGVyQWRqdXN0LCBpbmtMaXN0W2kgKyAxXSAtIGJvcmRlckFkanVzdCwgaW5rTGlzdFtpXSArIGJvcmRlckFkanVzdCwgaW5rTGlzdFtpICsgMV0gKyBib3JkZXJBZGp1c3QsIGJib3gpOwogICAgICAgIH0KICAgICAgfQogICAgICBpZiAoIVV0aWwuaW50ZXJzZWN0KHRoaXMucmVjdGFuZ2xlLCBiYm94KSkgewogICAgICAgIHRoaXMucmVjdGFuZ2xlID0gYmJveDsKICAgICAgfQogICAgICB0aGlzLl9zZXREZWZhdWx0QXBwZWFyYW5jZSh7CiAgICAgICAgeHJlZiwKICAgICAgICBleHRyYTogYCR7Ym9yZGVyV2lkdGh9IHdgLAogICAgICAgIHN0cm9rZUNvbG9yLAogICAgICAgIHN0cm9rZUFscGhhLAogICAgICAgIHBvaW50c0NhbGxiYWNrOiAoYnVmZmVyLCBwb2ludHMpID0+IHsKICAgICAgICAgIGZvciAoY29uc3QgaW5rTGlzdCBvZiB0aGlzLmRhdGEuaW5rTGlzdHMpIHsKICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gaW5rTGlzdC5sZW5ndGg7IGkgPCBpaTsgaSArPSAyKSB7CiAgICAgICAgICAgICAgYnVmZmVyLnB1c2goYCR7aW5rTGlzdFtpXX0gJHtpbmtMaXN0W2kgKyAxXX0gJHtpID09PSAwID8gIm0iIDogImwifWApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGJ1ZmZlci5wdXNoKCJTIik7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gW3BvaW50c1swXSwgcG9pbnRzWzddLCBwb2ludHNbMl0sIHBvaW50c1szXV07CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9CiAgc3RhdGljIGNyZWF0ZU5ld0RpY3QoYW5ub3RhdGlvbiwgeHJlZiwgewogICAgYXBSZWYsCiAgICBhcAogIH0pIHsKICAgIGNvbnN0IHsKICAgICAgb2xkQW5ub3RhdGlvbiwKICAgICAgY29sb3IsCiAgICAgIGRhdGUsCiAgICAgIG9wYWNpdHksCiAgICAgIHBhdGhzLAogICAgICBvdXRsaW5lcywKICAgICAgcmVjdCwKICAgICAgcm90YXRpb24sCiAgICAgIHRoaWNrbmVzcywKICAgICAgdXNlcgogICAgfSA9IGFubm90YXRpb247CiAgICBjb25zdCBpbmsgPSBvbGRBbm5vdGF0aW9uIHx8IG5ldyBEaWN0KHhyZWYpOwogICAgaW5rLnNldElmTm90RXhpc3RzKCJUeXBlIiwgTmFtZS5nZXQoIkFubm90IikpOwogICAgaW5rLnNldElmTm90RXhpc3RzKCJTdWJ0eXBlIiwgTmFtZS5nZXQoIkluayIpKTsKICAgIGluay5zZXQob2xkQW5ub3RhdGlvbiA/ICJNIiA6ICJDcmVhdGlvbkRhdGUiLCBgRDoke2dldE1vZGlmaWNhdGlvbkRhdGUoZGF0ZSl9YCk7CiAgICBpbmsuc2V0SWZBcnJheSgiUmVjdCIsIHJlY3QpOwogICAgaW5rLnNldElmQXJyYXkoIklua0xpc3QiLCBvdXRsaW5lcz8ucG9pbnRzIHx8IHBhdGhzPy5wb2ludHMpOwogICAgaW5rLnNldElmTm90RXhpc3RzKCJGIiwgNCk7CiAgICBpbmsuc2V0SWZOdW1iZXIoIlJvdGF0ZSIsIHJvdGF0aW9uKTsKICAgIGluay5zZXRJZkRlZmluZWQoIlQiLCBzdHJpbmdUb0FzY2lpT3JVVEYxNkJFKHVzZXIpKTsKICAgIGlmIChvdXRsaW5lcykgewogICAgICBpbmsuc2V0SWZOYW1lKCJJVCIsICJJbmtIaWdobGlnaHQiKTsKICAgIH0KICAgIGlmICh0aGlja25lc3MgPiAwKSB7CiAgICAgIGNvbnN0IGJzID0gbmV3IERpY3QoeHJlZik7CiAgICAgIGluay5zZXQoIkJTIiwgYnMpOwogICAgICBicy5zZXQoIlciLCB0aGlja25lc3MpOwogICAgfQogICAgaW5rLnNldElmQXJyYXkoIkMiLCBnZXRQZGZDb2xvckFycmF5KGNvbG9yKSk7CiAgICBpbmsuc2V0SWZOdW1iZXIoIkNBIiwgb3BhY2l0eSk7CiAgICBpZiAoYXAgfHwgYXBSZWYpIHsKICAgICAgY29uc3QgbiA9IG5ldyBEaWN0KHhyZWYpOwogICAgICBpbmsuc2V0KCJBUCIsIG4pOwogICAgICBuLnNldCgiTiIsIGFwUmVmIHx8IGFwKTsKICAgIH0KICAgIHJldHVybiBpbms7CiAgfQogIHN0YXRpYyBhc3luYyBjcmVhdGVOZXdBcHBlYXJhbmNlU3RyZWFtKGFubm90YXRpb24sIHhyZWYsIHBhcmFtcykgewogICAgaWYgKGFubm90YXRpb24ub3V0bGluZXMpIHsKICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlTmV3QXBwZWFyYW5jZVN0cmVhbUZvckhpZ2hsaWdodChhbm5vdGF0aW9uLCB4cmVmLCBwYXJhbXMpOwogICAgfQogICAgY29uc3QgewogICAgICBjb2xvciwKICAgICAgcmVjdCwKICAgICAgcGF0aHMsCiAgICAgIHRoaWNrbmVzcywKICAgICAgb3BhY2l0eQogICAgfSA9IGFubm90YXRpb247CiAgICBpZiAoIWNvbG9yKSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgY29uc3QgYXBwZWFyYW5jZUJ1ZmZlciA9IFtgJHt0aGlja25lc3N9IHcgMSBKIDEgamAsIGAke2dldFBkZkNvbG9yKGNvbG9yLCBmYWxzZSl9YF07CiAgICBpZiAob3BhY2l0eSAhPT0gMSkgewogICAgICBhcHBlYXJhbmNlQnVmZmVyLnB1c2goIi9SMCBncyIpOwogICAgfQogICAgZm9yIChjb25zdCBvdXRsaW5lIG9mIHBhdGhzLmxpbmVzKSB7CiAgICAgIGFwcGVhcmFuY2VCdWZmZXIucHVzaChgJHtudW1iZXJUb1N0cmluZyhvdXRsaW5lWzRdKX0gJHtudW1iZXJUb1N0cmluZyhvdXRsaW5lWzVdKX0gbWApOwogICAgICBmb3IgKGxldCBpID0gNiwgaWkgPSBvdXRsaW5lLmxlbmd0aDsgaSA8IGlpOyBpICs9IDYpIHsKICAgICAgICBpZiAoaXNOYU4ob3V0bGluZVtpXSkpIHsKICAgICAgICAgIGFwcGVhcmFuY2VCdWZmZXIucHVzaChgJHtudW1iZXJUb1N0cmluZyhvdXRsaW5lW2kgKyA0XSl9ICR7bnVtYmVyVG9TdHJpbmcob3V0bGluZVtpICsgNV0pfSBsYCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNvbnN0IFtjMXgsIGMxeSwgYzJ4LCBjMnksIHgsIHldID0gb3V0bGluZS5zbGljZShpLCBpICsgNik7CiAgICAgICAgICBhcHBlYXJhbmNlQnVmZmVyLnB1c2goW2MxeCwgYzF5LCBjMngsIGMyeSwgeCwgeV0ubWFwKG51bWJlclRvU3RyaW5nKS5qb2luKCIgIikgKyAiIGMiKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKG91dGxpbmUubGVuZ3RoID09PSA2KSB7CiAgICAgICAgYXBwZWFyYW5jZUJ1ZmZlci5wdXNoKGAke251bWJlclRvU3RyaW5nKG91dGxpbmVbNF0pfSAke251bWJlclRvU3RyaW5nKG91dGxpbmVbNV0pfSBsYCk7CiAgICAgIH0KICAgIH0KICAgIGFwcGVhcmFuY2VCdWZmZXIucHVzaCgiUyIpOwogICAgY29uc3QgYXBwZWFyYW5jZSA9IGFwcGVhcmFuY2VCdWZmZXIuam9pbigiXG4iKTsKICAgIGNvbnN0IGFwcGVhcmFuY2VTdHJlYW1EaWN0ID0gbmV3IERpY3QoeHJlZik7CiAgICBhcHBlYXJhbmNlU3RyZWFtRGljdC5zZXQoIkZvcm1UeXBlIiwgMSk7CiAgICBhcHBlYXJhbmNlU3RyZWFtRGljdC5zZXRJZk5hbWUoIlN1YnR5cGUiLCAiRm9ybSIpOwogICAgYXBwZWFyYW5jZVN0cmVhbURpY3Quc2V0SWZOYW1lKCJUeXBlIiwgIlhPYmplY3QiKTsKICAgIGFwcGVhcmFuY2VTdHJlYW1EaWN0LnNldCgiQkJveCIsIHJlY3QpOwogICAgYXBwZWFyYW5jZVN0cmVhbURpY3Quc2V0KCJMZW5ndGgiLCBhcHBlYXJhbmNlLmxlbmd0aCk7CiAgICBpZiAob3BhY2l0eSAhPT0gMSkgewogICAgICBjb25zdCByZXNvdXJjZXMgPSBuZXcgRGljdCh4cmVmKTsKICAgICAgY29uc3QgZXh0R1N0YXRlID0gbmV3IERpY3QoeHJlZik7CiAgICAgIGNvbnN0IHIwID0gbmV3IERpY3QoeHJlZik7CiAgICAgIHIwLnNldCgiQ0EiLCBvcGFjaXR5KTsKICAgICAgcjAuc2V0SWZOYW1lKCJUeXBlIiwgIkV4dEdTdGF0ZSIpOwogICAgICBleHRHU3RhdGUuc2V0KCJSMCIsIHIwKTsKICAgICAgcmVzb3VyY2VzLnNldCgiRXh0R1N0YXRlIiwgZXh0R1N0YXRlKTsKICAgICAgYXBwZWFyYW5jZVN0cmVhbURpY3Quc2V0KCJSZXNvdXJjZXMiLCByZXNvdXJjZXMpOwogICAgfQogICAgY29uc3QgYXAgPSBuZXcgU3RyaW5nU3RyZWFtKGFwcGVhcmFuY2UpOwogICAgYXAuZGljdCA9IGFwcGVhcmFuY2VTdHJlYW1EaWN0OwogICAgcmV0dXJuIGFwOwogIH0KICBzdGF0aWMgYXN5bmMgY3JlYXRlTmV3QXBwZWFyYW5jZVN0cmVhbUZvckhpZ2hsaWdodChhbm5vdGF0aW9uLCB4cmVmLCBwYXJhbXMpIHsKICAgIGNvbnN0IHsKICAgICAgY29sb3IsCiAgICAgIHJlY3QsCiAgICAgIG91dGxpbmVzOiB7CiAgICAgICAgb3V0bGluZQogICAgICB9LAogICAgICBvcGFjaXR5CiAgICB9ID0gYW5ub3RhdGlvbjsKICAgIGlmICghY29sb3IpIHsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICBjb25zdCBhcHBlYXJhbmNlQnVmZmVyID0gW2Ake2dldFBkZkNvbG9yKGNvbG9yLCB0cnVlKX1gLCAiL1IwIGdzIl07CiAgICBhcHBlYXJhbmNlQnVmZmVyLnB1c2goYCR7bnVtYmVyVG9TdHJpbmcob3V0bGluZVs0XSl9ICR7bnVtYmVyVG9TdHJpbmcob3V0bGluZVs1XSl9IG1gKTsKICAgIGZvciAobGV0IGkgPSA2LCBpaSA9IG91dGxpbmUubGVuZ3RoOyBpIDwgaWk7IGkgKz0gNikgewogICAgICBpZiAoaXNOYU4ob3V0bGluZVtpXSkpIHsKICAgICAgICBhcHBlYXJhbmNlQnVmZmVyLnB1c2goYCR7bnVtYmVyVG9TdHJpbmcob3V0bGluZVtpICsgNF0pfSAke251bWJlclRvU3RyaW5nKG91dGxpbmVbaSArIDVdKX0gbGApOwogICAgICB9IGVsc2UgewogICAgICAgIGNvbnN0IFtjMXgsIGMxeSwgYzJ4LCBjMnksIHgsIHldID0gb3V0bGluZS5zbGljZShpLCBpICsgNik7CiAgICAgICAgYXBwZWFyYW5jZUJ1ZmZlci5wdXNoKFtjMXgsIGMxeSwgYzJ4LCBjMnksIHgsIHldLm1hcChudW1iZXJUb1N0cmluZykuam9pbigiICIpICsgIiBjIik7CiAgICAgIH0KICAgIH0KICAgIGFwcGVhcmFuY2VCdWZmZXIucHVzaCgiaCBmIik7CiAgICBjb25zdCBhcHBlYXJhbmNlID0gYXBwZWFyYW5jZUJ1ZmZlci5qb2luKCJcbiIpOwogICAgY29uc3QgYXBwZWFyYW5jZVN0cmVhbURpY3QgPSBuZXcgRGljdCh4cmVmKTsKICAgIGFwcGVhcmFuY2VTdHJlYW1EaWN0LnNldCgiRm9ybVR5cGUiLCAxKTsKICAgIGFwcGVhcmFuY2VTdHJlYW1EaWN0LnNldElmTmFtZSgiU3VidHlwZSIsICJGb3JtIik7CiAgICBhcHBlYXJhbmNlU3RyZWFtRGljdC5zZXRJZk5hbWUoIlR5cGUiLCAiWE9iamVjdCIpOwogICAgYXBwZWFyYW5jZVN0cmVhbURpY3Quc2V0KCJCQm94IiwgcmVjdCk7CiAgICBhcHBlYXJhbmNlU3RyZWFtRGljdC5zZXQoIkxlbmd0aCIsIGFwcGVhcmFuY2UubGVuZ3RoKTsKICAgIGNvbnN0IHJlc291cmNlcyA9IG5ldyBEaWN0KHhyZWYpOwogICAgY29uc3QgZXh0R1N0YXRlID0gbmV3IERpY3QoeHJlZik7CiAgICByZXNvdXJjZXMuc2V0KCJFeHRHU3RhdGUiLCBleHRHU3RhdGUpOwogICAgYXBwZWFyYW5jZVN0cmVhbURpY3Quc2V0KCJSZXNvdXJjZXMiLCByZXNvdXJjZXMpOwogICAgY29uc3QgcjAgPSBuZXcgRGljdCh4cmVmKTsKICAgIGV4dEdTdGF0ZS5zZXQoIlIwIiwgcjApOwogICAgcjAuc2V0SWZOYW1lKCJCTSIsICJNdWx0aXBseSIpOwogICAgaWYgKG9wYWNpdHkgIT09IDEpIHsKICAgICAgcjAuc2V0KCJjYSIsIG9wYWNpdHkpOwogICAgICByMC5zZXRJZk5hbWUoIlR5cGUiLCAiRXh0R1N0YXRlIik7CiAgICB9CiAgICBjb25zdCBhcCA9IG5ldyBTdHJpbmdTdHJlYW0oYXBwZWFyYW5jZSk7CiAgICBhcC5kaWN0ID0gYXBwZWFyYW5jZVN0cmVhbURpY3Q7CiAgICByZXR1cm4gYXA7CiAgfQp9CmNsYXNzIEhpZ2hsaWdodEFubm90YXRpb24gZXh0ZW5kcyBNYXJrdXBBbm5vdGF0aW9uIHsKICBjb25zdHJ1Y3RvcihwYXJhbXMpIHsKICAgIHN1cGVyKHBhcmFtcyk7CiAgICBjb25zdCB7CiAgICAgIGRpY3QsCiAgICAgIHhyZWYKICAgIH0gPSBwYXJhbXM7CiAgICB0aGlzLmRhdGEuYW5ub3RhdGlvblR5cGUgPSBBbm5vdGF0aW9uVHlwZS5ISUdITElHSFQ7CiAgICB0aGlzLmRhdGEuaXNFZGl0YWJsZSA9ICF0aGlzLmRhdGEubm9IVE1MOwogICAgdGhpcy5kYXRhLm5vSFRNTCA9IGZhbHNlOwogICAgdGhpcy5kYXRhLm9wYWNpdHkgPSBkaWN0LmdldCgiQ0EiKSB8fCAxOwogICAgY29uc3QgcXVhZFBvaW50cyA9IHRoaXMuZGF0YS5xdWFkUG9pbnRzID0gZ2V0UXVhZFBvaW50cyhkaWN0LCBudWxsKTsKICAgIGlmIChxdWFkUG9pbnRzKSB7CiAgICAgIGNvbnN0IHJlc291cmNlcyA9IHRoaXMuYXBwZWFyYW5jZT8uZGljdC5nZXQoIlJlc291cmNlcyIpOwogICAgICBpZiAoIXRoaXMuYXBwZWFyYW5jZSB8fCAhcmVzb3VyY2VzPy5oYXMoIkV4dEdTdGF0ZSIpKSB7CiAgICAgICAgaWYgKHRoaXMuYXBwZWFyYW5jZSkgewogICAgICAgICAgd2FybigiSGlnaGxpZ2h0QW5ub3RhdGlvbiAtIGlnbm9yaW5nIGJ1aWx0LWluIGFwcGVhcmFuY2Ugc3RyZWFtLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBmaWxsQ29sb3IgPSBnZXRQZGZDb2xvckFycmF5KHRoaXMuY29sb3IsIFsxLCAxLCAwXSk7CiAgICAgICAgY29uc3QgZmlsbEFscGhhID0gZGljdC5nZXQoIkNBIik7CiAgICAgICAgdGhpcy5fc2V0RGVmYXVsdEFwcGVhcmFuY2UoewogICAgICAgICAgeHJlZiwKICAgICAgICAgIGZpbGxDb2xvciwKICAgICAgICAgIGJsZW5kTW9kZTogIk11bHRpcGx5IiwKICAgICAgICAgIGZpbGxBbHBoYSwKICAgICAgICAgIHBvaW50c0NhbGxiYWNrOiAoYnVmZmVyLCBwb2ludHMpID0+IHsKICAgICAgICAgICAgYnVmZmVyLnB1c2goYCR7cG9pbnRzWzBdfSAke3BvaW50c1sxXX0gbWAsIGAke3BvaW50c1syXX0gJHtwb2ludHNbM119IGxgLCBgJHtwb2ludHNbNl19ICR7cG9pbnRzWzddfSBsYCwgYCR7cG9pbnRzWzRdfSAke3BvaW50c1s1XX0gbGAsICJmIik7CiAgICAgICAgICAgIHJldHVybiBbcG9pbnRzWzBdLCBwb2ludHNbN10sIHBvaW50c1syXSwgcG9pbnRzWzNdXTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgdGhpcy5kYXRhLnBvcHVwUmVmID0gbnVsbDsKICAgIH0KICB9CiAgZ2V0IG92ZXJsYXlzVGV4dENvbnRlbnQoKSB7CiAgICByZXR1cm4gdHJ1ZTsKICB9CiAgc3RhdGljIGNyZWF0ZU5ld0RpY3QoYW5ub3RhdGlvbiwgeHJlZiwgewogICAgYXBSZWYsCiAgICBhcAogIH0pIHsKICAgIGNvbnN0IHsKICAgICAgY29sb3IsCiAgICAgIGRhdGUsCiAgICAgIG9sZEFubm90YXRpb24sCiAgICAgIG9wYWNpdHksCiAgICAgIHJlY3QsCiAgICAgIHJvdGF0aW9uLAogICAgICB1c2VyLAogICAgICBxdWFkUG9pbnRzCiAgICB9ID0gYW5ub3RhdGlvbjsKICAgIGNvbnN0IGhpZ2hsaWdodCA9IG9sZEFubm90YXRpb24gfHwgbmV3IERpY3QoeHJlZik7CiAgICBoaWdobGlnaHQuc2V0SWZOb3RFeGlzdHMoIlR5cGUiLCBOYW1lLmdldCgiQW5ub3QiKSk7CiAgICBoaWdobGlnaHQuc2V0SWZOb3RFeGlzdHMoIlN1YnR5cGUiLCBOYW1lLmdldCgiSGlnaGxpZ2h0IikpOwogICAgaGlnaGxpZ2h0LnNldChvbGRBbm5vdGF0aW9uID8gIk0iIDogIkNyZWF0aW9uRGF0ZSIsIGBEOiR7Z2V0TW9kaWZpY2F0aW9uRGF0ZShkYXRlKX1gKTsKICAgIGhpZ2hsaWdodC5zZXRJZkFycmF5KCJSZWN0IiwgcmVjdCk7CiAgICBoaWdobGlnaHQuc2V0SWZOb3RFeGlzdHMoIkYiLCA0KTsKICAgIGhpZ2hsaWdodC5zZXRJZk5vdEV4aXN0cygiQm9yZGVyIiwgWzAsIDAsIDBdKTsKICAgIGhpZ2hsaWdodC5zZXRJZk51bWJlcigiUm90YXRlIiwgcm90YXRpb24pOwogICAgaGlnaGxpZ2h0LnNldElmQXJyYXkoIlF1YWRQb2ludHMiLCBxdWFkUG9pbnRzKTsKICAgIGhpZ2hsaWdodC5zZXRJZkFycmF5KCJDIiwgZ2V0UGRmQ29sb3JBcnJheShjb2xvcikpOwogICAgaGlnaGxpZ2h0LnNldElmTnVtYmVyKCJDQSIsIG9wYWNpdHkpOwogICAgaGlnaGxpZ2h0LnNldElmRGVmaW5lZCgiVCIsIHN0cmluZ1RvQXNjaWlPclVURjE2QkUodXNlcikpOwogICAgaWYgKGFwUmVmIHx8IGFwKSB7CiAgICAgIGNvbnN0IG4gPSBuZXcgRGljdCh4cmVmKTsKICAgICAgaGlnaGxpZ2h0LnNldCgiQVAiLCBuKTsKICAgICAgbi5zZXQoIk4iLCBhcFJlZiB8fCBhcCk7CiAgICB9CiAgICByZXR1cm4gaGlnaGxpZ2h0OwogIH0KICBzdGF0aWMgYXN5bmMgY3JlYXRlTmV3QXBwZWFyYW5jZVN0cmVhbShhbm5vdGF0aW9uLCB4cmVmLCBwYXJhbXMpIHsKICAgIGNvbnN0IHsKICAgICAgY29sb3IsCiAgICAgIHJlY3QsCiAgICAgIG91dGxpbmVzLAogICAgICBvcGFjaXR5CiAgICB9ID0gYW5ub3RhdGlvbjsKICAgIGlmICghY29sb3IpIHsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICBjb25zdCBhcHBlYXJhbmNlQnVmZmVyID0gW2Ake2dldFBkZkNvbG9yKGNvbG9yLCB0cnVlKX1gLCAiL1IwIGdzIl07CiAgICBjb25zdCBidWZmZXIgPSBbXTsKICAgIGZvciAoY29uc3Qgb3V0bGluZSBvZiBvdXRsaW5lcykgewogICAgICBidWZmZXIubGVuZ3RoID0gMDsKICAgICAgYnVmZmVyLnB1c2goYCR7bnVtYmVyVG9TdHJpbmcob3V0bGluZVswXSl9ICR7bnVtYmVyVG9TdHJpbmcob3V0bGluZVsxXSl9IG1gKTsKICAgICAgZm9yIChsZXQgaSA9IDIsIGlpID0gb3V0bGluZS5sZW5ndGg7IGkgPCBpaTsgaSArPSAyKSB7CiAgICAgICAgYnVmZmVyLnB1c2goYCR7bnVtYmVyVG9TdHJpbmcob3V0bGluZVtpXSl9ICR7bnVtYmVyVG9TdHJpbmcob3V0bGluZVtpICsgMV0pfSBsYCk7CiAgICAgIH0KICAgICAgYnVmZmVyLnB1c2goImgiKTsKICAgICAgYXBwZWFyYW5jZUJ1ZmZlci5wdXNoKGJ1ZmZlci5qb2luKCJcbiIpKTsKICAgIH0KICAgIGFwcGVhcmFuY2VCdWZmZXIucHVzaCgiZioiKTsKICAgIGNvbnN0IGFwcGVhcmFuY2UgPSBhcHBlYXJhbmNlQnVmZmVyLmpvaW4oIlxuIik7CiAgICBjb25zdCBhcHBlYXJhbmNlU3RyZWFtRGljdCA9IG5ldyBEaWN0KHhyZWYpOwogICAgYXBwZWFyYW5jZVN0cmVhbURpY3Quc2V0KCJGb3JtVHlwZSIsIDEpOwogICAgYXBwZWFyYW5jZVN0cmVhbURpY3Quc2V0SWZOYW1lKCJTdWJ0eXBlIiwgIkZvcm0iKTsKICAgIGFwcGVhcmFuY2VTdHJlYW1EaWN0LnNldElmTmFtZSgiVHlwZSIsICJYT2JqZWN0Iik7CiAgICBhcHBlYXJhbmNlU3RyZWFtRGljdC5zZXQoIkJCb3giLCByZWN0KTsKICAgIGFwcGVhcmFuY2VTdHJlYW1EaWN0LnNldCgiTGVuZ3RoIiwgYXBwZWFyYW5jZS5sZW5ndGgpOwogICAgY29uc3QgcmVzb3VyY2VzID0gbmV3IERpY3QoeHJlZik7CiAgICBjb25zdCBleHRHU3RhdGUgPSBuZXcgRGljdCh4cmVmKTsKICAgIHJlc291cmNlcy5zZXQoIkV4dEdTdGF0ZSIsIGV4dEdTdGF0ZSk7CiAgICBhcHBlYXJhbmNlU3RyZWFtRGljdC5zZXQoIlJlc291cmNlcyIsIHJlc291cmNlcyk7CiAgICBjb25zdCByMCA9IG5ldyBEaWN0KHhyZWYpOwogICAgZXh0R1N0YXRlLnNldCgiUjAiLCByMCk7CiAgICByMC5zZXRJZk5hbWUoIkJNIiwgIk11bHRpcGx5Iik7CiAgICBpZiAob3BhY2l0eSAhPT0gMSkgewogICAgICByMC5zZXQoImNhIiwgb3BhY2l0eSk7CiAgICAgIHIwLnNldElmTmFtZSgiVHlwZSIsICJFeHRHU3RhdGUiKTsKICAgIH0KICAgIGNvbnN0IGFwID0gbmV3IFN0cmluZ1N0cmVhbShhcHBlYXJhbmNlKTsKICAgIGFwLmRpY3QgPSBhcHBlYXJhbmNlU3RyZWFtRGljdDsKICAgIHJldHVybiBhcDsKICB9Cn0KY2xhc3MgVW5kZXJsaW5lQW5ub3RhdGlvbiBleHRlbmRzIE1hcmt1cEFubm90YXRpb24gewogIGNvbnN0cnVjdG9yKHBhcmFtcykgewogICAgc3VwZXIocGFyYW1zKTsKICAgIGNvbnN0IHsKICAgICAgZGljdCwKICAgICAgeHJlZgogICAgfSA9IHBhcmFtczsKICAgIHRoaXMuZGF0YS5hbm5vdGF0aW9uVHlwZSA9IEFubm90YXRpb25UeXBlLlVOREVSTElORTsKICAgIGNvbnN0IHF1YWRQb2ludHMgPSB0aGlzLmRhdGEucXVhZFBvaW50cyA9IGdldFF1YWRQb2ludHMoZGljdCwgbnVsbCk7CiAgICBpZiAocXVhZFBvaW50cykgewogICAgICBpZiAoIXRoaXMuYXBwZWFyYW5jZSkgewogICAgICAgIGNvbnN0IHN0cm9rZUNvbG9yID0gZ2V0UGRmQ29sb3JBcnJheSh0aGlzLmNvbG9yLCBbMCwgMCwgMF0pOwogICAgICAgIGNvbnN0IHN0cm9rZUFscGhhID0gZGljdC5nZXQoIkNBIik7CiAgICAgICAgdGhpcy5fc2V0RGVmYXVsdEFwcGVhcmFuY2UoewogICAgICAgICAgeHJlZiwKICAgICAgICAgIGV4dHJhOiAiW10gMCBkIDAuNTcxIHciLAogICAgICAgICAgc3Ryb2tlQ29sb3IsCiAgICAgICAgICBzdHJva2VBbHBoYSwKICAgICAgICAgIHBvaW50c0NhbGxiYWNrOiAoYnVmZmVyLCBwb2ludHMpID0+IHsKICAgICAgICAgICAgYnVmZmVyLnB1c2goYCR7cG9pbnRzWzRdfSAke3BvaW50c1s1XSArIDEuM30gbWAsIGAke3BvaW50c1s2XX0gJHtwb2ludHNbN10gKyAxLjN9IGxgLCAiUyIpOwogICAgICAgICAgICByZXR1cm4gW3BvaW50c1swXSwgcG9pbnRzWzddLCBwb2ludHNbMl0sIHBvaW50c1szXV07CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHRoaXMuZGF0YS5wb3B1cFJlZiA9IG51bGw7CiAgICB9CiAgfQogIGdldCBvdmVybGF5c1RleHRDb250ZW50KCkgewogICAgcmV0dXJuIHRydWU7CiAgfQp9CmNsYXNzIFNxdWlnZ2x5QW5ub3RhdGlvbiBleHRlbmRzIE1hcmt1cEFubm90YXRpb24gewogIGNvbnN0cnVjdG9yKHBhcmFtcykgewogICAgc3VwZXIocGFyYW1zKTsKICAgIGNvbnN0IHsKICAgICAgZGljdCwKICAgICAgeHJlZgogICAgfSA9IHBhcmFtczsKICAgIHRoaXMuZGF0YS5hbm5vdGF0aW9uVHlwZSA9IEFubm90YXRpb25UeXBlLlNRVUlHR0xZOwogICAgY29uc3QgcXVhZFBvaW50cyA9IHRoaXMuZGF0YS5xdWFkUG9pbnRzID0gZ2V0UXVhZFBvaW50cyhkaWN0LCBudWxsKTsKICAgIGlmIChxdWFkUG9pbnRzKSB7CiAgICAgIGlmICghdGhpcy5hcHBlYXJhbmNlKSB7CiAgICAgICAgY29uc3Qgc3Ryb2tlQ29sb3IgPSBnZXRQZGZDb2xvckFycmF5KHRoaXMuY29sb3IsIFswLCAwLCAwXSk7CiAgICAgICAgY29uc3Qgc3Ryb2tlQWxwaGEgPSBkaWN0LmdldCgiQ0EiKTsKICAgICAgICB0aGlzLl9zZXREZWZhdWx0QXBwZWFyYW5jZSh7CiAgICAgICAgICB4cmVmLAogICAgICAgICAgZXh0cmE6ICJbXSAwIGQgMSB3IiwKICAgICAgICAgIHN0cm9rZUNvbG9yLAogICAgICAgICAgc3Ryb2tlQWxwaGEsCiAgICAgICAgICBwb2ludHNDYWxsYmFjazogKGJ1ZmZlciwgcG9pbnRzKSA9PiB7CiAgICAgICAgICAgIGNvbnN0IGR5ID0gKHBvaW50c1sxXSAtIHBvaW50c1s1XSkgLyA2OwogICAgICAgICAgICBsZXQgc2hpZnQgPSBkeTsKICAgICAgICAgICAgbGV0IHggPSBwb2ludHNbNF07CiAgICAgICAgICAgIGNvbnN0IHkgPSBwb2ludHNbNV07CiAgICAgICAgICAgIGNvbnN0IHhFbmQgPSBwb2ludHNbNl07CiAgICAgICAgICAgIGJ1ZmZlci5wdXNoKGAke3h9ICR7eSArIHNoaWZ0fSBtYCk7CiAgICAgICAgICAgIGRvIHsKICAgICAgICAgICAgICB4ICs9IDI7CiAgICAgICAgICAgICAgc2hpZnQgPSBzaGlmdCA9PT0gMCA/IGR5IDogMDsKICAgICAgICAgICAgICBidWZmZXIucHVzaChgJHt4fSAke3kgKyBzaGlmdH0gbGApOwogICAgICAgICAgICB9IHdoaWxlICh4IDwgeEVuZCk7CiAgICAgICAgICAgIGJ1ZmZlci5wdXNoKCJTIik7CiAgICAgICAgICAgIHJldHVybiBbcG9pbnRzWzRdLCB5IC0gMiAqIGR5LCB4RW5kLCB5ICsgMiAqIGR5XTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgdGhpcy5kYXRhLnBvcHVwUmVmID0gbnVsbDsKICAgIH0KICB9CiAgZ2V0IG92ZXJsYXlzVGV4dENvbnRlbnQoKSB7CiAgICByZXR1cm4gdHJ1ZTsKICB9Cn0KY2xhc3MgU3RyaWtlT3V0QW5ub3RhdGlvbiBleHRlbmRzIE1hcmt1cEFubm90YXRpb24gewogIGNvbnN0cnVjdG9yKHBhcmFtcykgewogICAgc3VwZXIocGFyYW1zKTsKICAgIGNvbnN0IHsKICAgICAgZGljdCwKICAgICAgeHJlZgogICAgfSA9IHBhcmFtczsKICAgIHRoaXMuZGF0YS5hbm5vdGF0aW9uVHlwZSA9IEFubm90YXRpb25UeXBlLlNUUklLRU9VVDsKICAgIGNvbnN0IHF1YWRQb2ludHMgPSB0aGlzLmRhdGEucXVhZFBvaW50cyA9IGdldFF1YWRQb2ludHMoZGljdCwgbnVsbCk7CiAgICBpZiAocXVhZFBvaW50cykgewogICAgICBpZiAoIXRoaXMuYXBwZWFyYW5jZSkgewogICAgICAgIGNvbnN0IHN0cm9rZUNvbG9yID0gZ2V0UGRmQ29sb3JBcnJheSh0aGlzLmNvbG9yLCBbMCwgMCwgMF0pOwogICAgICAgIGNvbnN0IHN0cm9rZUFscGhhID0gZGljdC5nZXQoIkNBIik7CiAgICAgICAgdGhpcy5fc2V0RGVmYXVsdEFwcGVhcmFuY2UoewogICAgICAgICAgeHJlZiwKICAgICAgICAgIGV4dHJhOiAiW10gMCBkIDEgdyIsCiAgICAgICAgICBzdHJva2VDb2xvciwKICAgICAgICAgIHN0cm9rZUFscGhhLAogICAgICAgICAgcG9pbnRzQ2FsbGJhY2s6IChidWZmZXIsIHBvaW50cykgPT4gewogICAgICAgICAgICBidWZmZXIucHVzaChgJHsocG9pbnRzWzBdICsgcG9pbnRzWzRdKSAvIDJ9IGAgKyBgJHsocG9pbnRzWzFdICsgcG9pbnRzWzVdKSAvIDJ9IG1gLCBgJHsocG9pbnRzWzJdICsgcG9pbnRzWzZdKSAvIDJ9IGAgKyBgJHsocG9pbnRzWzNdICsgcG9pbnRzWzddKSAvIDJ9IGxgLCAiUyIpOwogICAgICAgICAgICByZXR1cm4gW3BvaW50c1swXSwgcG9pbnRzWzddLCBwb2ludHNbMl0sIHBvaW50c1szXV07CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHRoaXMuZGF0YS5wb3B1cFJlZiA9IG51bGw7CiAgICB9CiAgfQogIGdldCBvdmVybGF5c1RleHRDb250ZW50KCkgewogICAgcmV0dXJuIHRydWU7CiAgfQp9CmNsYXNzIFN0YW1wQW5ub3RhdGlvbiBleHRlbmRzIE1hcmt1cEFubm90YXRpb24gewogICNzYXZlZEhhc093bkNhbnZhcyA9IG51bGw7CiAgY29uc3RydWN0b3IocGFyYW1zKSB7CiAgICBzdXBlcihwYXJhbXMpOwogICAgdGhpcy5kYXRhLmFubm90YXRpb25UeXBlID0gQW5ub3RhdGlvblR5cGUuU1RBTVA7CiAgICB0aGlzLmRhdGEuaGFzT3duQ2FudmFzID0gdGhpcy5kYXRhLm5vUm90YXRlOwogICAgdGhpcy5kYXRhLmlzRWRpdGFibGUgPSAhdGhpcy5kYXRhLm5vSFRNTDsKICAgIHRoaXMuZGF0YS5ub0hUTUwgPSBmYWxzZTsKICB9CiAgbXVzdEJlVmlld2VkV2hlbkVkaXRpbmcoaXNFZGl0aW5nLCBtb2RpZmllZElkcyA9IG51bGwpIHsKICAgIGlmIChpc0VkaXRpbmcpIHsKICAgICAgaWYgKCF0aGlzLmRhdGEuaXNFZGl0YWJsZSkgewogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICAgIHRoaXMuI3NhdmVkSGFzT3duQ2FudmFzID8/PSB0aGlzLmRhdGEuaGFzT3duQ2FudmFzOwogICAgICB0aGlzLmRhdGEuaGFzT3duQ2FudmFzID0gdHJ1ZTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICBpZiAodGhpcy4jc2F2ZWRIYXNPd25DYW52YXMgIT09IG51bGwpIHsKICAgICAgdGhpcy5kYXRhLmhhc093bkNhbnZhcyA9IHRoaXMuI3NhdmVkSGFzT3duQ2FudmFzOwogICAgICB0aGlzLiNzYXZlZEhhc093bkNhbnZhcyA9IG51bGw7CiAgICB9CiAgICByZXR1cm4gIW1vZGlmaWVkSWRzPy5oYXModGhpcy5kYXRhLmlkKTsKICB9CiAgc3RhdGljIGFzeW5jIGNyZWF0ZUltYWdlKGJpdG1hcCwgeHJlZikgewogICAgY29uc3QgewogICAgICB3aWR0aCwKICAgICAgaGVpZ2h0CiAgICB9ID0gYml0bWFwOwogICAgY29uc3QgY2FudmFzID0gbmV3IE9mZnNjcmVlbkNhbnZhcyh3aWR0aCwgaGVpZ2h0KTsKICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCIyZCIsIHsKICAgICAgYWxwaGE6IHRydWUKICAgIH0pOwogICAgY3R4LmRyYXdJbWFnZShiaXRtYXAsIDAsIDApOwogICAgY29uc3QgZGF0YSA9IGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgd2lkdGgsIGhlaWdodCkuZGF0YTsKICAgIGNvbnN0IGJ1ZjMyID0gbmV3IFVpbnQzMkFycmF5KGRhdGEuYnVmZmVyKTsKICAgIGNvbnN0IGhhc0FscGhhID0gYnVmMzIuc29tZShGZWF0dXJlVGVzdC5pc0xpdHRsZUVuZGlhbiA/IHggPT4geCA+Pj4gMjQgIT09IDB4ZmYgOiB4ID0+ICh4ICYgMHhmZikgIT09IDB4ZmYpOwogICAgaWYgKGhhc0FscGhhKSB7CiAgICAgIGN0eC5maWxsU3R5bGUgPSAid2hpdGUiOwogICAgICBjdHguZmlsbFJlY3QoMCwgMCwgd2lkdGgsIGhlaWdodCk7CiAgICAgIGN0eC5kcmF3SW1hZ2UoYml0bWFwLCAwLCAwKTsKICAgIH0KICAgIGNvbnN0IGpwZWdCdWZmZXJQcm9taXNlID0gY2FudmFzLmNvbnZlcnRUb0Jsb2IoewogICAgICB0eXBlOiAiaW1hZ2UvanBlZyIsCiAgICAgIHF1YWxpdHk6IDEKICAgIH0pLnRoZW4oYmxvYiA9PiBibG9iLmFycmF5QnVmZmVyKCkpOwogICAgY29uc3QgeG9iamVjdE5hbWUgPSBOYW1lLmdldCgiWE9iamVjdCIpOwogICAgY29uc3QgaW1hZ2VOYW1lID0gTmFtZS5nZXQoIkltYWdlIik7CiAgICBjb25zdCBpbWFnZSA9IG5ldyBEaWN0KHhyZWYpOwogICAgaW1hZ2Uuc2V0KCJUeXBlIiwgeG9iamVjdE5hbWUpOwogICAgaW1hZ2Uuc2V0KCJTdWJ0eXBlIiwgaW1hZ2VOYW1lKTsKICAgIGltYWdlLnNldCgiQml0c1BlckNvbXBvbmVudCIsIDgpOwogICAgaW1hZ2Uuc2V0SWZOYW1lKCJDb2xvclNwYWNlIiwgIkRldmljZVJHQiIpOwogICAgaW1hZ2Uuc2V0SWZOYW1lKCJGaWx0ZXIiLCAiRENURGVjb2RlIik7CiAgICBpbWFnZS5zZXQoIkJCb3giLCBbMCwgMCwgd2lkdGgsIGhlaWdodF0pOwogICAgaW1hZ2Uuc2V0KCJXaWR0aCIsIHdpZHRoKTsKICAgIGltYWdlLnNldCgiSGVpZ2h0IiwgaGVpZ2h0KTsKICAgIGxldCBzbWFza1N0cmVhbSA9IG51bGw7CiAgICBpZiAoaGFzQWxwaGEpIHsKICAgICAgY29uc3QgYWxwaGFCdWZmZXIgPSBuZXcgVWludDhBcnJheShidWYzMi5sZW5ndGgpOwogICAgICBpZiAoRmVhdHVyZVRlc3QuaXNMaXR0bGVFbmRpYW4pIHsKICAgICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBidWYzMi5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgICAgICBhbHBoYUJ1ZmZlcltpXSA9IGJ1ZjMyW2ldID4+PiAyNDsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gYnVmMzIubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgICAgICAgYWxwaGFCdWZmZXJbaV0gPSBidWYzMltpXSAmIDB4ZmY7CiAgICAgICAgfQogICAgICB9CiAgICAgIGNvbnN0IHNtYXNrID0gbmV3IERpY3QoeHJlZik7CiAgICAgIHNtYXNrLnNldCgiVHlwZSIsIHhvYmplY3ROYW1lKTsKICAgICAgc21hc2suc2V0KCJTdWJ0eXBlIiwgaW1hZ2VOYW1lKTsKICAgICAgc21hc2suc2V0KCJCaXRzUGVyQ29tcG9uZW50IiwgOCk7CiAgICAgIHNtYXNrLnNldElmTmFtZSgiQ29sb3JTcGFjZSIsICJEZXZpY2VHcmF5Iik7CiAgICAgIHNtYXNrLnNldCgiV2lkdGgiLCB3aWR0aCk7CiAgICAgIHNtYXNrLnNldCgiSGVpZ2h0IiwgaGVpZ2h0KTsKICAgICAgc21hc2tTdHJlYW0gPSBuZXcgU3RyZWFtKGFscGhhQnVmZmVyLCAwLCAwLCBzbWFzayk7CiAgICB9CiAgICBjb25zdCBpbWFnZVN0cmVhbSA9IG5ldyBTdHJlYW0oYXdhaXQganBlZ0J1ZmZlclByb21pc2UsIDAsIDAsIGltYWdlKTsKICAgIHJldHVybiB7CiAgICAgIGltYWdlU3RyZWFtLAogICAgICBzbWFza1N0cmVhbSwKICAgICAgd2lkdGgsCiAgICAgIGhlaWdodAogICAgfTsKICB9CiAgc3RhdGljIGNyZWF0ZU5ld0RpY3QoYW5ub3RhdGlvbiwgeHJlZiwgewogICAgYXBSZWYsCiAgICBhcAogIH0pIHsKICAgIGNvbnN0IHsKICAgICAgZGF0ZSwKICAgICAgb2xkQW5ub3RhdGlvbiwKICAgICAgcmVjdCwKICAgICAgcm90YXRpb24sCiAgICAgIHVzZXIKICAgIH0gPSBhbm5vdGF0aW9uOwogICAgY29uc3Qgc3RhbXAgPSBvbGRBbm5vdGF0aW9uIHx8IG5ldyBEaWN0KHhyZWYpOwogICAgc3RhbXAuc2V0SWZOb3RFeGlzdHMoIlR5cGUiLCBOYW1lLmdldCgiQW5ub3QiKSk7CiAgICBzdGFtcC5zZXRJZk5vdEV4aXN0cygiU3VidHlwZSIsIE5hbWUuZ2V0KCJTdGFtcCIpKTsKICAgIHN0YW1wLnNldChvbGRBbm5vdGF0aW9uID8gIk0iIDogIkNyZWF0aW9uRGF0ZSIsIGBEOiR7Z2V0TW9kaWZpY2F0aW9uRGF0ZShkYXRlKX1gKTsKICAgIHN0YW1wLnNldElmQXJyYXkoIlJlY3QiLCByZWN0KTsKICAgIHN0YW1wLnNldElmTm90RXhpc3RzKCJGIiwgNCk7CiAgICBzdGFtcC5zZXRJZk5vdEV4aXN0cygiQm9yZGVyIiwgWzAsIDAsIDBdKTsKICAgIHN0YW1wLnNldElmTnVtYmVyKCJSb3RhdGUiLCByb3RhdGlvbik7CiAgICBzdGFtcC5zZXRJZkRlZmluZWQoIlQiLCBzdHJpbmdUb0FzY2lpT3JVVEYxNkJFKHVzZXIpKTsKICAgIGlmIChhcFJlZiB8fCBhcCkgewogICAgICBjb25zdCBuID0gbmV3IERpY3QoeHJlZik7CiAgICAgIHN0YW1wLnNldCgiQVAiLCBuKTsKICAgICAgbi5zZXQoIk4iLCBhcFJlZiB8fCBhcCk7CiAgICB9CiAgICByZXR1cm4gc3RhbXA7CiAgfQogIHN0YXRpYyBhc3luYyAjY3JlYXRlTmV3QXBwZWFyYW5jZVN0cmVhbUZvckRyYXdpbmcoYW5ub3RhdGlvbiwgeHJlZikgewogICAgY29uc3QgewogICAgICBhcmVDb250b3VycywKICAgICAgY29sb3IsCiAgICAgIHJlY3QsCiAgICAgIGxpbmVzLAogICAgICB0aGlja25lc3MKICAgIH0gPSBhbm5vdGF0aW9uOwogICAgaWYgKCFjb2xvcikgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIGNvbnN0IGFwcGVhcmFuY2VCdWZmZXIgPSBbYCR7dGhpY2tuZXNzfSB3IDEgSiAxIGpgLCBgJHtnZXRQZGZDb2xvcihjb2xvciwgYXJlQ29udG91cnMpfWBdOwogICAgZm9yIChjb25zdCBsaW5lIG9mIGxpbmVzKSB7CiAgICAgIGFwcGVhcmFuY2VCdWZmZXIucHVzaChgJHtudW1iZXJUb1N0cmluZyhsaW5lWzRdKX0gJHtudW1iZXJUb1N0cmluZyhsaW5lWzVdKX0gbWApOwogICAgICBmb3IgKGxldCBpID0gNiwgaWkgPSBsaW5lLmxlbmd0aDsgaSA8IGlpOyBpICs9IDYpIHsKICAgICAgICBpZiAoaXNOYU4obGluZVtpXSkpIHsKICAgICAgICAgIGFwcGVhcmFuY2VCdWZmZXIucHVzaChgJHtudW1iZXJUb1N0cmluZyhsaW5lW2kgKyA0XSl9ICR7bnVtYmVyVG9TdHJpbmcobGluZVtpICsgNV0pfSBsYCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNvbnN0IFtjMXgsIGMxeSwgYzJ4LCBjMnksIHgsIHldID0gbGluZS5zbGljZShpLCBpICsgNik7CiAgICAgICAgICBhcHBlYXJhbmNlQnVmZmVyLnB1c2goW2MxeCwgYzF5LCBjMngsIGMyeSwgeCwgeV0ubWFwKG51bWJlclRvU3RyaW5nKS5qb2luKCIgIikgKyAiIGMiKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKGxpbmUubGVuZ3RoID09PSA2KSB7CiAgICAgICAgYXBwZWFyYW5jZUJ1ZmZlci5wdXNoKGAke251bWJlclRvU3RyaW5nKGxpbmVbNF0pfSAke251bWJlclRvU3RyaW5nKGxpbmVbNV0pfSBsYCk7CiAgICAgIH0KICAgIH0KICAgIGFwcGVhcmFuY2VCdWZmZXIucHVzaChhcmVDb250b3VycyA/ICJGIiA6ICJTIik7CiAgICBjb25zdCBhcHBlYXJhbmNlID0gYXBwZWFyYW5jZUJ1ZmZlci5qb2luKCJcbiIpOwogICAgY29uc3QgYXBwZWFyYW5jZVN0cmVhbURpY3QgPSBuZXcgRGljdCh4cmVmKTsKICAgIGFwcGVhcmFuY2VTdHJlYW1EaWN0LnNldCgiRm9ybVR5cGUiLCAxKTsKICAgIGFwcGVhcmFuY2VTdHJlYW1EaWN0LnNldElmTmFtZSgiU3VidHlwZSIsICJGb3JtIik7CiAgICBhcHBlYXJhbmNlU3RyZWFtRGljdC5zZXRJZk5hbWUoIlR5cGUiLCAiWE9iamVjdCIpOwogICAgYXBwZWFyYW5jZVN0cmVhbURpY3Quc2V0KCJCQm94IiwgcmVjdCk7CiAgICBhcHBlYXJhbmNlU3RyZWFtRGljdC5zZXQoIkxlbmd0aCIsIGFwcGVhcmFuY2UubGVuZ3RoKTsKICAgIGNvbnN0IGFwID0gbmV3IFN0cmluZ1N0cmVhbShhcHBlYXJhbmNlKTsKICAgIGFwLmRpY3QgPSBhcHBlYXJhbmNlU3RyZWFtRGljdDsKICAgIHJldHVybiBhcDsKICB9CiAgc3RhdGljIGFzeW5jIGNyZWF0ZU5ld0FwcGVhcmFuY2VTdHJlYW0oYW5ub3RhdGlvbiwgeHJlZiwgcGFyYW1zKSB7CiAgICBpZiAoYW5ub3RhdGlvbi5vbGRBbm5vdGF0aW9uKSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgaWYgKGFubm90YXRpb24uaXNTaWduYXR1cmUpIHsKICAgICAgcmV0dXJuIHRoaXMuI2NyZWF0ZU5ld0FwcGVhcmFuY2VTdHJlYW1Gb3JEcmF3aW5nKGFubm90YXRpb24sIHhyZWYpOwogICAgfQogICAgY29uc3QgewogICAgICByb3RhdGlvbgogICAgfSA9IGFubm90YXRpb247CiAgICBjb25zdCB7CiAgICAgIGltYWdlUmVmLAogICAgICB3aWR0aCwKICAgICAgaGVpZ2h0CiAgICB9ID0gcGFyYW1zLmltYWdlOwogICAgY29uc3QgcmVzb3VyY2VzID0gbmV3IERpY3QoeHJlZik7CiAgICBjb25zdCB4b2JqZWN0ID0gbmV3IERpY3QoeHJlZik7CiAgICByZXNvdXJjZXMuc2V0KCJYT2JqZWN0IiwgeG9iamVjdCk7CiAgICB4b2JqZWN0LnNldCgiSW0wIiwgaW1hZ2VSZWYpOwogICAgY29uc3QgYXBwZWFyYW5jZSA9IGBxICR7d2lkdGh9IDAgMCAke2hlaWdodH0gMCAwIGNtIC9JbTAgRG8gUWA7CiAgICBjb25zdCBhcHBlYXJhbmNlU3RyZWFtRGljdCA9IG5ldyBEaWN0KHhyZWYpOwogICAgYXBwZWFyYW5jZVN0cmVhbURpY3Quc2V0KCJGb3JtVHlwZSIsIDEpOwogICAgYXBwZWFyYW5jZVN0cmVhbURpY3Quc2V0SWZOYW1lKCJTdWJ0eXBlIiwgIkZvcm0iKTsKICAgIGFwcGVhcmFuY2VTdHJlYW1EaWN0LnNldElmTmFtZSgiVHlwZSIsICJYT2JqZWN0Iik7CiAgICBhcHBlYXJhbmNlU3RyZWFtRGljdC5zZXQoIkJCb3giLCBbMCwgMCwgd2lkdGgsIGhlaWdodF0pOwogICAgYXBwZWFyYW5jZVN0cmVhbURpY3Quc2V0KCJSZXNvdXJjZXMiLCByZXNvdXJjZXMpOwogICAgaWYgKHJvdGF0aW9uKSB7CiAgICAgIGNvbnN0IG1hdHJpeCA9IGdldFJvdGF0aW9uTWF0cml4KHJvdGF0aW9uLCB3aWR0aCwgaGVpZ2h0KTsKICAgICAgYXBwZWFyYW5jZVN0cmVhbURpY3Quc2V0KCJNYXRyaXgiLCBtYXRyaXgpOwogICAgfQogICAgY29uc3QgYXAgPSBuZXcgU3RyaW5nU3RyZWFtKGFwcGVhcmFuY2UpOwogICAgYXAuZGljdCA9IGFwcGVhcmFuY2VTdHJlYW1EaWN0OwogICAgcmV0dXJuIGFwOwogIH0KfQpjbGFzcyBGaWxlQXR0YWNobWVudEFubm90YXRpb24gZXh0ZW5kcyBNYXJrdXBBbm5vdGF0aW9uIHsKICBjb25zdHJ1Y3RvcihwYXJhbXMpIHsKICAgIHN1cGVyKHBhcmFtcyk7CiAgICBjb25zdCB7CiAgICAgIGRpY3QsCiAgICAgIHhyZWYKICAgIH0gPSBwYXJhbXM7CiAgICBjb25zdCBmaWxlID0gbmV3IEZpbGVTcGVjKGRpY3QuZ2V0KCJGUyIpLCB4cmVmKTsKICAgIHRoaXMuZGF0YS5hbm5vdGF0aW9uVHlwZSA9IEFubm90YXRpb25UeXBlLkZJTEVBVFRBQ0hNRU5UOwogICAgdGhpcy5kYXRhLmhhc093bkNhbnZhcyA9IHRoaXMuZGF0YS5ub1JvdGF0ZTsKICAgIHRoaXMuZGF0YS5ub0hUTUwgPSBmYWxzZTsKICAgIHRoaXMuZGF0YS5maWxlID0gZmlsZS5zZXJpYWxpemFibGU7CiAgICBjb25zdCBuYW1lID0gZGljdC5nZXQoIk5hbWUiKTsKICAgIHRoaXMuZGF0YS5uYW1lID0gbmFtZSBpbnN0YW5jZW9mIE5hbWUgPyBzdHJpbmdUb1BERlN0cmluZyhuYW1lLm5hbWUpIDogIlB1c2hQaW4iOwogICAgY29uc3QgZmlsbEFscGhhID0gZGljdC5nZXQoImNhIik7CiAgICB0aGlzLmRhdGEuZmlsbEFscGhhID0gdHlwZW9mIGZpbGxBbHBoYSA9PT0gIm51bWJlciIgJiYgZmlsbEFscGhhID49IDAgJiYgZmlsbEFscGhhIDw9IDEgPyBmaWxsQWxwaGEgOiBudWxsOwogIH0KfQoKOy8vIC4vc3JjL2NvcmUvY2FsY3VsYXRlX21kNS5qcwoKCgoKCgoKCgpjb25zdCBQQVJBTVMgPSB7CiAgZ2V0IHIoKSB7CiAgICByZXR1cm4gc2hhZG93KHRoaXMsICJyIiwgbmV3IFVpbnQ4QXJyYXkoWzcsIDEyLCAxNywgMjIsIDcsIDEyLCAxNywgMjIsIDcsIDEyLCAxNywgMjIsIDcsIDEyLCAxNywgMjIsIDUsIDksIDE0LCAyMCwgNSwgOSwgMTQsIDIwLCA1LCA5LCAxNCwgMjAsIDUsIDksIDE0LCAyMCwgNCwgMTEsIDE2LCAyMywgNCwgMTEsIDE2LCAyMywgNCwgMTEsIDE2LCAyMywgNCwgMTEsIDE2LCAyMywgNiwgMTAsIDE1LCAyMSwgNiwgMTAsIDE1LCAyMSwgNiwgMTAsIDE1LCAyMSwgNiwgMTAsIDE1LCAyMV0pKTsKICB9LAogIGdldCBrKCkgewogICAgcmV0dXJuIHNoYWRvdyh0aGlzLCAiayIsIG5ldyBJbnQzMkFycmF5KFstNjgwODc2OTM2LCAtMzg5NTY0NTg2LCA2MDYxMDU4MTksIC0xMDQ0NTI1MzMwLCAtMTc2NDE4ODk3LCAxMjAwMDgwNDI2LCAtMTQ3MzIzMTM0MSwgLTQ1NzA1OTgzLCAxNzcwMDM1NDE2LCAtMTk1ODQxNDQxNywgLTQyMDYzLCAtMTk5MDQwNDE2MiwgMTgwNDYwMzY4MiwgLTQwMzQxMTAxLCAtMTUwMjAwMjI5MCwgMTIzNjUzNTMyOSwgLTE2NTc5NjUxMCwgLTEwNjk1MDE2MzIsIDY0MzcxNzcxMywgLTM3Mzg5NzMwMiwgLTcwMTU1ODY5MSwgMzgwMTYwODMsIC02NjA0NzgzMzUsIC00MDU1Mzc4NDgsIDU2ODQ0NjQzOCwgLTEwMTk4MDM2OTAsIC0xODczNjM5NjEsIDExNjM1MzE1MDEsIC0xNDQ0NjgxNDY3LCAtNTE0MDM3ODQsIDE3MzUzMjg0NzMsIC0xOTI2NjA3NzM0LCAtMzc4NTU4LCAtMjAyMjU3NDQ2MywgMTgzOTAzMDU2MiwgLTM1MzA5NTU2LCAtMTUzMDk5MjA2MCwgMTI3Mjg5MzM1MywgLTE1NTQ5NzYzMiwgLTEwOTQ3MzA2NDAsIDY4MTI3OTE3NCwgLTM1ODUzNzIyMiwgLTcyMjUyMTk3OSwgNzYwMjkxODksIC02NDAzNjQ0ODcsIC00MjE4MTU4MzUsIDUzMDc0MjUyMCwgLTk5NTMzODY1MSwgLTE5ODYzMDg0NCwgMTEyNjg5MTQxNSwgLTE0MTYzNTQ5MDUsIC01NzQzNDA1NSwgMTcwMDQ4NTU3MSwgLTE4OTQ5ODY2MDYsIC0xMDUxNTIzLCAtMjA1NDkyMjc5OSwgMTg3MzMxMzM1OSwgLTMwNjExNzQ0LCAtMTU2MDE5ODM4MCwgMTMwOTE1MTY0OSwgLTE0NTUyMzA3MCwgLTExMjAyMTAzNzksIDcxODc4NzI1OSwgLTM0MzQ4NTU1MV0pKTsKICB9Cn07CmZ1bmN0aW9uIGNhbGN1bGF0ZU1ENShkYXRhLCBvZmZzZXQsIGxlbmd0aCkgewogIGxldCBoMCA9IDE3MzI1ODQxOTMsCiAgICBoMSA9IC0yNzE3MzM4NzksCiAgICBoMiA9IC0xNzMyNTg0MTk0LAogICAgaDMgPSAyNzE3MzM4Nzg7CiAgY29uc3QgcGFkZGVkTGVuZ3RoID0gbGVuZ3RoICsgNzIgJiB+NjM7CiAgY29uc3QgcGFkZGVkID0gbmV3IFVpbnQ4QXJyYXkocGFkZGVkTGVuZ3RoKTsKICBsZXQgaSwgajsKICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgIHBhZGRlZFtpXSA9IGRhdGFbb2Zmc2V0KytdOwogIH0KICBwYWRkZWRbaSsrXSA9IDB4ODA7CiAgY29uc3QgbiA9IHBhZGRlZExlbmd0aCAtIDg7CiAgaWYgKGkgPCBuKSB7CiAgICBpID0gbjsKICB9CiAgcGFkZGVkW2krK10gPSBsZW5ndGggPDwgMyAmIDB4ZmY7CiAgcGFkZGVkW2krK10gPSBsZW5ndGggPj4gNSAmIDB4ZmY7CiAgcGFkZGVkW2krK10gPSBsZW5ndGggPj4gMTMgJiAweGZmOwogIHBhZGRlZFtpKytdID0gbGVuZ3RoID4+IDIxICYgMHhmZjsKICBwYWRkZWRbaSsrXSA9IGxlbmd0aCA+Pj4gMjkgJiAweGZmOwogIGkgKz0gMzsKICBjb25zdCB3ID0gbmV3IEludDMyQXJyYXkoMTYpOwogIGNvbnN0IHsKICAgIGssCiAgICByCiAgfSA9IFBBUkFNUzsKICBmb3IgKGkgPSAwOyBpIDwgcGFkZGVkTGVuZ3RoOykgewogICAgZm9yIChqID0gMDsgaiA8IDE2OyArK2osIGkgKz0gNCkgewogICAgICB3W2pdID0gcGFkZGVkW2ldIHwgcGFkZGVkW2kgKyAxXSA8PCA4IHwgcGFkZGVkW2kgKyAyXSA8PCAxNiB8IHBhZGRlZFtpICsgM10gPDwgMjQ7CiAgICB9CiAgICBsZXQgYSA9IGgwLAogICAgICBiID0gaDEsCiAgICAgIGMgPSBoMiwKICAgICAgZCA9IGgzLAogICAgICBmLAogICAgICBnOwogICAgZm9yIChqID0gMDsgaiA8IDY0OyArK2opIHsKICAgICAgaWYgKGogPCAxNikgewogICAgICAgIGYgPSBiICYgYyB8IH5iICYgZDsKICAgICAgICBnID0gajsKICAgICAgfSBlbHNlIGlmIChqIDwgMzIpIHsKICAgICAgICBmID0gZCAmIGIgfCB+ZCAmIGM7CiAgICAgICAgZyA9IDUgKiBqICsgMSAmIDE1OwogICAgICB9IGVsc2UgaWYgKGogPCA0OCkgewogICAgICAgIGYgPSBiIF4gYyBeIGQ7CiAgICAgICAgZyA9IDMgKiBqICsgNSAmIDE1OwogICAgICB9IGVsc2UgewogICAgICAgIGYgPSBjIF4gKGIgfCB+ZCk7CiAgICAgICAgZyA9IDcgKiBqICYgMTU7CiAgICAgIH0KICAgICAgY29uc3QgdG1wID0gZCwKICAgICAgICByb3RhdGVBcmcgPSBhICsgZiArIGtbal0gKyB3W2ddIHwgMCwKICAgICAgICByb3RhdGUgPSByW2pdOwogICAgICBkID0gYzsKICAgICAgYyA9IGI7CiAgICAgIGIgPSBiICsgKHJvdGF0ZUFyZyA8PCByb3RhdGUgfCByb3RhdGVBcmcgPj4+IDMyIC0gcm90YXRlKSB8IDA7CiAgICAgIGEgPSB0bXA7CiAgICB9CiAgICBoMCA9IGgwICsgYSB8IDA7CiAgICBoMSA9IGgxICsgYiB8IDA7CiAgICBoMiA9IGgyICsgYyB8IDA7CiAgICBoMyA9IGgzICsgZCB8IDA7CiAgfQogIHJldHVybiBuZXcgVWludDhBcnJheShbaDAgJiAweEZGLCBoMCA+PiA4ICYgMHhGRiwgaDAgPj4gMTYgJiAweEZGLCBoMCA+Pj4gMjQgJiAweEZGLCBoMSAmIDB4RkYsIGgxID4+IDggJiAweEZGLCBoMSA+PiAxNiAmIDB4RkYsIGgxID4+PiAyNCAmIDB4RkYsIGgyICYgMHhGRiwgaDIgPj4gOCAmIDB4RkYsIGgyID4+IDE2ICYgMHhGRiwgaDIgPj4+IDI0ICYgMHhGRiwgaDMgJiAweEZGLCBoMyA+PiA4ICYgMHhGRiwgaDMgPj4gMTYgJiAweEZGLCBoMyA+Pj4gMjQgJiAweEZGXSk7Cn0KCjsvLyAuL3NyYy9jb3JlL2RhdGFzZXRfcmVhZGVyLmpzCgoKCgoKZnVuY3Rpb24gZGVjb2RlU3RyaW5nKHN0cikgewogIHRyeSB7CiAgICByZXR1cm4gc3RyaW5nVG9VVEY4U3RyaW5nKHN0cik7CiAgfSBjYXRjaCAoZXgpIHsKICAgIHdhcm4oYFVURi04IGRlY29kaW5nIGZhaWxlZDogIiR7ZXh9Ii5gKTsKICAgIHJldHVybiBzdHI7CiAgfQp9CmNsYXNzIERhdGFzZXRYTUxQYXJzZXIgZXh0ZW5kcyBTaW1wbGVYTUxQYXJzZXIgewogIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHsKICAgIHN1cGVyKG9wdGlvbnMpOwogICAgdGhpcy5ub2RlID0gbnVsbDsKICB9CiAgb25FbmRFbGVtZW50KG5hbWUpIHsKICAgIGNvbnN0IG5vZGUgPSBzdXBlci5vbkVuZEVsZW1lbnQobmFtZSk7CiAgICBpZiAobm9kZSAmJiBuYW1lID09PSAieGZhOmRhdGFzZXRzIikgewogICAgICB0aGlzLm5vZGUgPSBub2RlOwogICAgICB0aHJvdyBuZXcgRXJyb3IoIkFib3J0aW5nIERhdGFzZXRYTUxQYXJzZXIuIik7CiAgICB9CiAgfQp9CmNsYXNzIERhdGFzZXRSZWFkZXIgewogIGNvbnN0cnVjdG9yKGRhdGEpIHsKICAgIGlmIChkYXRhLmRhdGFzZXRzKSB7CiAgICAgIHRoaXMubm9kZSA9IG5ldyBTaW1wbGVYTUxQYXJzZXIoewogICAgICAgIGhhc0F0dHJpYnV0ZXM6IHRydWUKICAgICAgfSkucGFyc2VGcm9tU3RyaW5nKGRhdGEuZGF0YXNldHMpLmRvY3VtZW50RWxlbWVudDsKICAgIH0gZWxzZSB7CiAgICAgIGNvbnN0IHBhcnNlciA9IG5ldyBEYXRhc2V0WE1MUGFyc2VyKHsKICAgICAgICBoYXNBdHRyaWJ1dGVzOiB0cnVlCiAgICAgIH0pOwogICAgICB0cnkgewogICAgICAgIHBhcnNlci5wYXJzZUZyb21TdHJpbmcoZGF0YVsieGRwOnhkcCJdKTsKICAgICAgfSBjYXRjaCB7fQogICAgICB0aGlzLm5vZGUgPSBwYXJzZXIubm9kZTsKICAgIH0KICB9CiAgZ2V0VmFsdWUocGF0aCkgewogICAgaWYgKCF0aGlzLm5vZGUgfHwgIXBhdGgpIHsKICAgICAgcmV0dXJuICIiOwogICAgfQogICAgY29uc3Qgbm9kZSA9IHRoaXMubm9kZS5zZWFyY2hOb2RlKHBhcnNlWEZBUGF0aChwYXRoKSwgMCk7CiAgICBpZiAoIW5vZGUpIHsKICAgICAgcmV0dXJuICIiOwogICAgfQogICAgY29uc3QgZmlyc3QgPSBub2RlLmZpcnN0Q2hpbGQ7CiAgICBpZiAoZmlyc3Q/Lm5vZGVOYW1lID09PSAidmFsdWUiKSB7CiAgICAgIHJldHVybiBub2RlLmNoaWxkcmVuLm1hcChjaGlsZCA9PiBkZWNvZGVTdHJpbmcoY2hpbGQudGV4dENvbnRlbnQpKTsKICAgIH0KICAgIHJldHVybiBkZWNvZGVTdHJpbmcobm9kZS50ZXh0Q29udGVudCk7CiAgfQp9Cgo7Ly8gLi9zcmMvY29yZS9pbnRlcnNlY3Rvci5qcwoKCgoKCgoKCmNsYXNzIFNpbmdsZUludGVyc2VjdG9yIHsKICAjYW5ub3RhdGlvbjsKICAjbWluWCA9IEluZmluaXR5OwogICNtaW5ZID0gSW5maW5pdHk7CiAgI21heFggPSAtSW5maW5pdHk7CiAgI21heFkgPSAtSW5maW5pdHk7CiAgI3F1YWRQb2ludHMgPSBudWxsOwogICN0ZXh0ID0gW107CiAgI2V4dHJhQ2hhcnMgPSBbXTsKICAjbGFzdEludGVyc2VjdGluZ1F1YWRJbmRleCA9IC0xOwogICNjYW5UYWtlRXh0cmFDaGFycyA9IGZhbHNlOwogIGNvbnN0cnVjdG9yKGFubm90YXRpb24pIHsKICAgIHRoaXMuI2Fubm90YXRpb24gPSBhbm5vdGF0aW9uOwogICAgY29uc3QgcXVhZFBvaW50cyA9IGFubm90YXRpb24uZGF0YS5xdWFkUG9pbnRzOwogICAgaWYgKCFxdWFkUG9pbnRzKSB7CiAgICAgIFt0aGlzLiNtaW5YLCB0aGlzLiNtaW5ZLCB0aGlzLiNtYXhYLCB0aGlzLiNtYXhZXSA9IGFubm90YXRpb24uZGF0YS5yZWN0OwogICAgICByZXR1cm47CiAgICB9CiAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBxdWFkUG9pbnRzLmxlbmd0aDsgaSA8IGlpOyBpICs9IDgpIHsKICAgICAgdGhpcy4jbWluWCA9IE1hdGgubWluKHRoaXMuI21pblgsIHF1YWRQb2ludHNbaV0pOwogICAgICB0aGlzLiNtYXhYID0gTWF0aC5tYXgodGhpcy4jbWF4WCwgcXVhZFBvaW50c1tpICsgMl0pOwogICAgICB0aGlzLiNtaW5ZID0gTWF0aC5taW4odGhpcy4jbWluWSwgcXVhZFBvaW50c1tpICsgNV0pOwogICAgICB0aGlzLiNtYXhZID0gTWF0aC5tYXgodGhpcy4jbWF4WSwgcXVhZFBvaW50c1tpICsgMV0pOwogICAgfQogICAgaWYgKHF1YWRQb2ludHMubGVuZ3RoID4gOCkgewogICAgICB0aGlzLiNxdWFkUG9pbnRzID0gcXVhZFBvaW50czsKICAgIH0KICB9CiAgb3ZlcmxhcHMob3RoZXIpIHsKICAgIHJldHVybiAhKHRoaXMuI21pblggPj0gb3RoZXIuI21heFggfHwgdGhpcy4jbWF4WCA8PSBvdGhlci4jbWluWCB8fCB0aGlzLiNtaW5ZID49IG90aGVyLiNtYXhZIHx8IHRoaXMuI21heFkgPD0gb3RoZXIuI21pblkpOwogIH0KICAjaW50ZXJzZWN0cyh4LCB5KSB7CiAgICBpZiAodGhpcy4jbWluWCA+PSB4IHx8IHRoaXMuI21heFggPD0geCB8fCB0aGlzLiNtaW5ZID49IHkgfHwgdGhpcy4jbWF4WSA8PSB5KSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICAgIGNvbnN0IHF1YWRQb2ludHMgPSB0aGlzLiNxdWFkUG9pbnRzOwogICAgaWYgKCFxdWFkUG9pbnRzKSB7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgaWYgKHRoaXMuI2xhc3RJbnRlcnNlY3RpbmdRdWFkSW5kZXggPj0gMCkgewogICAgICBjb25zdCBpID0gdGhpcy4jbGFzdEludGVyc2VjdGluZ1F1YWRJbmRleDsKICAgICAgaWYgKCEocXVhZFBvaW50c1tpXSA+PSB4IHx8IHF1YWRQb2ludHNbaSArIDJdIDw9IHggfHwgcXVhZFBvaW50c1tpICsgNV0gPj0geSB8fCBxdWFkUG9pbnRzW2kgKyAxXSA8PSB5KSkgewogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICAgIHRoaXMuI2xhc3RJbnRlcnNlY3RpbmdRdWFkSW5kZXggPSAtMTsKICAgIH0KICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IHF1YWRQb2ludHMubGVuZ3RoOyBpIDwgaWk7IGkgKz0gOCkgewogICAgICBpZiAoIShxdWFkUG9pbnRzW2ldID49IHggfHwgcXVhZFBvaW50c1tpICsgMl0gPD0geCB8fCBxdWFkUG9pbnRzW2kgKyA1XSA+PSB5IHx8IHF1YWRQb2ludHNbaSArIDFdIDw9IHkpKSB7CiAgICAgICAgdGhpcy4jbGFzdEludGVyc2VjdGluZ1F1YWRJbmRleCA9IGk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBmYWxzZTsKICB9CiAgYWRkR2x5cGgoeCwgeSwgZ2x5cGgpIHsKICAgIGlmICghdGhpcy4jaW50ZXJzZWN0cyh4LCB5KSkgewogICAgICB0aGlzLmRpc2FibGVFeHRyYUNoYXJzKCk7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICAgIGlmICh0aGlzLiNleHRyYUNoYXJzLmxlbmd0aCA+IDApIHsKICAgICAgdGhpcy4jdGV4dC5wdXNoKHRoaXMuI2V4dHJhQ2hhcnMuam9pbigiIikpOwogICAgICB0aGlzLiNleHRyYUNoYXJzLmxlbmd0aCA9IDA7CiAgICB9CiAgICB0aGlzLiN0ZXh0LnB1c2goZ2x5cGgpOwogICAgdGhpcy4jY2FuVGFrZUV4dHJhQ2hhcnMgPSB0cnVlOwogICAgcmV0dXJuIHRydWU7CiAgfQogIGFkZEV4dHJhQ2hhcihjaGFyKSB7CiAgICBpZiAodGhpcy4jY2FuVGFrZUV4dHJhQ2hhcnMpIHsKICAgICAgdGhpcy4jZXh0cmFDaGFycy5wdXNoKGNoYXIpOwogICAgfQogIH0KICBkaXNhYmxlRXh0cmFDaGFycygpIHsKICAgIGlmICghdGhpcy4jY2FuVGFrZUV4dHJhQ2hhcnMpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgdGhpcy4jY2FuVGFrZUV4dHJhQ2hhcnMgPSBmYWxzZTsKICAgIHRoaXMuI2V4dHJhQ2hhcnMubGVuZ3RoID0gMDsKICB9CiAgc2V0VGV4dCgpIHsKICAgIHRoaXMuI2Fubm90YXRpb24uZGF0YS5vdmVybGFpZFRleHQgPSB0aGlzLiN0ZXh0LmpvaW4oIiIpOwogIH0KfQpjbGFzcyBJbnRlcnNlY3RvciB7CiAgI2ludGVyc2VjdG9ycyA9IG5ldyBNYXAoKTsKICBjb25zdHJ1Y3Rvcihhbm5vdGF0aW9ucykgewogICAgZm9yIChjb25zdCBhbm5vdGF0aW9uIG9mIGFubm90YXRpb25zKSB7CiAgICAgIGlmICghYW5ub3RhdGlvbi5kYXRhLnF1YWRQb2ludHMgJiYgIWFubm90YXRpb24uZGF0YS5yZWN0KSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgY29uc3QgaW50ZXJzZWN0b3IgPSBuZXcgU2luZ2xlSW50ZXJzZWN0b3IoYW5ub3RhdGlvbik7CiAgICAgIGZvciAoY29uc3QgW290aGVySW50ZXJzZWN0b3IsIG92ZXJsYXBwaW5nXSBvZiB0aGlzLiNpbnRlcnNlY3RvcnMpIHsKICAgICAgICBpZiAob3RoZXJJbnRlcnNlY3Rvci5vdmVybGFwcyhpbnRlcnNlY3RvcikpIHsKICAgICAgICAgIGlmICghb3ZlcmxhcHBpbmcpIHsKICAgICAgICAgICAgdGhpcy4jaW50ZXJzZWN0b3JzLnNldChvdGhlckludGVyc2VjdG9yLCBuZXcgU2V0KFtpbnRlcnNlY3Rvcl0pKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG92ZXJsYXBwaW5nLmFkZChpbnRlcnNlY3Rvcik7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIHRoaXMuI2ludGVyc2VjdG9ycy5zZXQoaW50ZXJzZWN0b3IsIG51bGwpOwogICAgfQogIH0KICBhZGRHbHlwaCh0cmFuc2Zvcm0sIHdpZHRoLCBoZWlnaHQsIGdseXBoKSB7CiAgICBjb25zdCB4ID0gdHJhbnNmb3JtWzRdICsgd2lkdGggLyAyOwogICAgY29uc3QgeSA9IHRyYW5zZm9ybVs1XSArIGhlaWdodCAvIDI7CiAgICBsZXQgb3ZlcmxhcHBpbmdJbnRlcnNlY3RvcnM7CiAgICBmb3IgKGNvbnN0IFtpbnRlcnNlY3Rvciwgb3ZlcmxhcHBpbmddIG9mIHRoaXMuI2ludGVyc2VjdG9ycykgewogICAgICBpZiAob3ZlcmxhcHBpbmdJbnRlcnNlY3RvcnMpIHsKICAgICAgICBpZiAob3ZlcmxhcHBpbmdJbnRlcnNlY3RvcnMuaGFzKGludGVyc2VjdG9yKSkgewogICAgICAgICAgaW50ZXJzZWN0b3IuYWRkR2x5cGgoeCwgeSwgZ2x5cGgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpbnRlcnNlY3Rvci5kaXNhYmxlRXh0cmFDaGFycygpOwogICAgICAgIH0KICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBpZiAoIWludGVyc2VjdG9yLmFkZEdseXBoKHgsIHksIGdseXBoKSkgewogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIG92ZXJsYXBwaW5nSW50ZXJzZWN0b3JzID0gb3ZlcmxhcHBpbmc7CiAgICB9CiAgfQogIGFkZEV4dHJhQ2hhcihjaGFyKSB7CiAgICBmb3IgKGNvbnN0IGludGVyc2VjdG9yIG9mIHRoaXMuI2ludGVyc2VjdG9ycy5rZXlzKCkpIHsKICAgICAgaW50ZXJzZWN0b3IuYWRkRXh0cmFDaGFyKGNoYXIpOwogICAgfQogIH0KICBzZXRUZXh0KCkgewogICAgZm9yIChjb25zdCBpbnRlcnNlY3RvciBvZiB0aGlzLiNpbnRlcnNlY3RvcnMua2V5cygpKSB7CiAgICAgIGludGVyc2VjdG9yLnNldFRleHQoKTsKICAgIH0KICB9Cn0KCjsvLyAuL3NyYy9jb3JlL2NhbGN1bGF0ZV9zaGFfb3RoZXIuanMKCgoKCgoKCgoKY2xhc3MgV29yZDY0IHsKICBjb25zdHJ1Y3RvcihoaWdoSW50ZWdlciwgbG93SW50ZWdlcikgewogICAgdGhpcy5oaWdoID0gaGlnaEludGVnZXIgfCAwOwogICAgdGhpcy5sb3cgPSBsb3dJbnRlZ2VyIHwgMDsKICB9CiAgYW5kKHdvcmQpIHsKICAgIHRoaXMuaGlnaCAmPSB3b3JkLmhpZ2g7CiAgICB0aGlzLmxvdyAmPSB3b3JkLmxvdzsKICB9CiAgeG9yKHdvcmQpIHsKICAgIHRoaXMuaGlnaCBePSB3b3JkLmhpZ2g7CiAgICB0aGlzLmxvdyBePSB3b3JkLmxvdzsKICB9CiAgc2hpZnRSaWdodChwbGFjZXMpIHsKICAgIGlmIChwbGFjZXMgPj0gMzIpIHsKICAgICAgdGhpcy5sb3cgPSB0aGlzLmhpZ2ggPj4+IHBsYWNlcyAtIDMyIHwgMDsKICAgICAgdGhpcy5oaWdoID0gMDsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMubG93ID0gdGhpcy5sb3cgPj4+IHBsYWNlcyB8IHRoaXMuaGlnaCA8PCAzMiAtIHBsYWNlczsKICAgICAgdGhpcy5oaWdoID0gdGhpcy5oaWdoID4+PiBwbGFjZXMgfCAwOwogICAgfQogIH0KICByb3RhdGVSaWdodChwbGFjZXMpIHsKICAgIGxldCBsb3csIGhpZ2g7CiAgICBpZiAocGxhY2VzICYgMzIpIHsKICAgICAgaGlnaCA9IHRoaXMubG93OwogICAgICBsb3cgPSB0aGlzLmhpZ2g7CiAgICB9IGVsc2UgewogICAgICBsb3cgPSB0aGlzLmxvdzsKICAgICAgaGlnaCA9IHRoaXMuaGlnaDsKICAgIH0KICAgIHBsYWNlcyAmPSAzMTsKICAgIHRoaXMubG93ID0gbG93ID4+PiBwbGFjZXMgfCBoaWdoIDw8IDMyIC0gcGxhY2VzOwogICAgdGhpcy5oaWdoID0gaGlnaCA+Pj4gcGxhY2VzIHwgbG93IDw8IDMyIC0gcGxhY2VzOwogIH0KICBub3QoKSB7CiAgICB0aGlzLmhpZ2ggPSB+dGhpcy5oaWdoOwogICAgdGhpcy5sb3cgPSB+dGhpcy5sb3c7CiAgfQogIGFkZCh3b3JkKSB7CiAgICBjb25zdCBsb3dBZGQgPSAodGhpcy5sb3cgPj4+IDApICsgKHdvcmQubG93ID4+PiAwKTsKICAgIGxldCBoaWdoQWRkID0gKHRoaXMuaGlnaCA+Pj4gMCkgKyAod29yZC5oaWdoID4+PiAwKTsKICAgIGlmIChsb3dBZGQgPiAweGZmZmZmZmZmKSB7CiAgICAgIGhpZ2hBZGQgKz0gMTsKICAgIH0KICAgIHRoaXMubG93ID0gbG93QWRkIHwgMDsKICAgIHRoaXMuaGlnaCA9IGhpZ2hBZGQgfCAwOwogIH0KICBjb3B5VG8oYnl0ZXMsIG9mZnNldCkgewogICAgYnl0ZXNbb2Zmc2V0XSA9IHRoaXMuaGlnaCA+Pj4gMjQgJiAweGZmOwogICAgYnl0ZXNbb2Zmc2V0ICsgMV0gPSB0aGlzLmhpZ2ggPj4gMTYgJiAweGZmOwogICAgYnl0ZXNbb2Zmc2V0ICsgMl0gPSB0aGlzLmhpZ2ggPj4gOCAmIDB4ZmY7CiAgICBieXRlc1tvZmZzZXQgKyAzXSA9IHRoaXMuaGlnaCAmIDB4ZmY7CiAgICBieXRlc1tvZmZzZXQgKyA0XSA9IHRoaXMubG93ID4+PiAyNCAmIDB4ZmY7CiAgICBieXRlc1tvZmZzZXQgKyA1XSA9IHRoaXMubG93ID4+IDE2ICYgMHhmZjsKICAgIGJ5dGVzW29mZnNldCArIDZdID0gdGhpcy5sb3cgPj4gOCAmIDB4ZmY7CiAgICBieXRlc1tvZmZzZXQgKyA3XSA9IHRoaXMubG93ICYgMHhmZjsKICB9CiAgYXNzaWduKHdvcmQpIHsKICAgIHRoaXMuaGlnaCA9IHdvcmQuaGlnaDsKICAgIHRoaXMubG93ID0gd29yZC5sb3c7CiAgfQp9CmNvbnN0IGNhbGN1bGF0ZV9zaGFfb3RoZXJfUEFSQU1TID0gewogIGdldCBrKCkgewogICAgcmV0dXJuIHNoYWRvdyh0aGlzLCAiayIsIFtuZXcgV29yZDY0KDB4NDI4YTJmOTgsIDB4ZDcyOGFlMjIpLCBuZXcgV29yZDY0KDB4NzEzNzQ0OTEsIDB4MjNlZjY1Y2QpLCBuZXcgV29yZDY0KDB4YjVjMGZiY2YsIDB4ZWM0ZDNiMmYpLCBuZXcgV29yZDY0KDB4ZTliNWRiYTUsIDB4ODE4OWRiYmMpLCBuZXcgV29yZDY0KDB4Mzk1NmMyNWIsIDB4ZjM0OGI1MzgpLCBuZXcgV29yZDY0KDB4NTlmMTExZjEsIDB4YjYwNWQwMTkpLCBuZXcgV29yZDY0KDB4OTIzZjgyYTQsIDB4YWYxOTRmOWIpLCBuZXcgV29yZDY0KDB4YWIxYzVlZDUsIDB4ZGE2ZDgxMTgpLCBuZXcgV29yZDY0KDB4ZDgwN2FhOTgsIDB4YTMwMzAyNDIpLCBuZXcgV29yZDY0KDB4MTI4MzViMDEsIDB4NDU3MDZmYmUpLCBuZXcgV29yZDY0KDB4MjQzMTg1YmUsIDB4NGVlNGIyOGMpLCBuZXcgV29yZDY0KDB4NTUwYzdkYzMsIDB4ZDVmZmI0ZTIpLCBuZXcgV29yZDY0KDB4NzJiZTVkNzQsIDB4ZjI3Yjg5NmYpLCBuZXcgV29yZDY0KDB4ODBkZWIxZmUsIDB4M2IxNjk2YjEpLCBuZXcgV29yZDY0KDB4OWJkYzA2YTcsIDB4MjVjNzEyMzUpLCBuZXcgV29yZDY0KDB4YzE5YmYxNzQsIDB4Y2Y2OTI2OTQpLCBuZXcgV29yZDY0KDB4ZTQ5YjY5YzEsIDB4OWVmMTRhZDIpLCBuZXcgV29yZDY0KDB4ZWZiZTQ3ODYsIDB4Mzg0ZjI1ZTMpLCBuZXcgV29yZDY0KDB4MGZjMTlkYzYsIDB4OGI4Y2Q1YjUpLCBuZXcgV29yZDY0KDB4MjQwY2ExY2MsIDB4NzdhYzljNjUpLCBuZXcgV29yZDY0KDB4MmRlOTJjNmYsIDB4NTkyYjAyNzUpLCBuZXcgV29yZDY0KDB4NGE3NDg0YWEsIDB4NmVhNmU0ODMpLCBuZXcgV29yZDY0KDB4NWNiMGE5ZGMsIDB4YmQ0MWZiZDQpLCBuZXcgV29yZDY0KDB4NzZmOTg4ZGEsIDB4ODMxMTUzYjUpLCBuZXcgV29yZDY0KDB4OTgzZTUxNTIsIDB4ZWU2NmRmYWIpLCBuZXcgV29yZDY0KDB4YTgzMWM2NmQsIDB4MmRiNDMyMTApLCBuZXcgV29yZDY0KDB4YjAwMzI3YzgsIDB4OThmYjIxM2YpLCBuZXcgV29yZDY0KDB4YmY1OTdmYzcsIDB4YmVlZjBlZTQpLCBuZXcgV29yZDY0KDB4YzZlMDBiZjMsIDB4M2RhODhmYzIpLCBuZXcgV29yZDY0KDB4ZDVhNzkxNDcsIDB4OTMwYWE3MjUpLCBuZXcgV29yZDY0KDB4MDZjYTYzNTEsIDB4ZTAwMzgyNmYpLCBuZXcgV29yZDY0KDB4MTQyOTI5NjcsIDB4MGEwZTZlNzApLCBuZXcgV29yZDY0KDB4MjdiNzBhODUsIDB4NDZkMjJmZmMpLCBuZXcgV29yZDY0KDB4MmUxYjIxMzgsIDB4NWMyNmM5MjYpLCBuZXcgV29yZDY0KDB4NGQyYzZkZmMsIDB4NWFjNDJhZWQpLCBuZXcgV29yZDY0KDB4NTMzODBkMTMsIDB4OWQ5NWIzZGYpLCBuZXcgV29yZDY0KDB4NjUwYTczNTQsIDB4OGJhZjYzZGUpLCBuZXcgV29yZDY0KDB4NzY2YTBhYmIsIDB4M2M3N2IyYTgpLCBuZXcgV29yZDY0KDB4ODFjMmM5MmUsIDB4NDdlZGFlZTYpLCBuZXcgV29yZDY0KDB4OTI3MjJjODUsIDB4MTQ4MjM1M2IpLCBuZXcgV29yZDY0KDB4YTJiZmU4YTEsIDB4NGNmMTAzNjQpLCBuZXcgV29yZDY0KDB4YTgxYTY2NGIsIDB4YmM0MjMwMDEpLCBuZXcgV29yZDY0KDB4YzI0YjhiNzAsIDB4ZDBmODk3OTEpLCBuZXcgV29yZDY0KDB4Yzc2YzUxYTMsIDB4MDY1NGJlMzApLCBuZXcgV29yZDY0KDB4ZDE5MmU4MTksIDB4ZDZlZjUyMTgpLCBuZXcgV29yZDY0KDB4ZDY5OTA2MjQsIDB4NTU2NWE5MTApLCBuZXcgV29yZDY0KDB4ZjQwZTM1ODUsIDB4NTc3MTIwMmEpLCBuZXcgV29yZDY0KDB4MTA2YWEwNzAsIDB4MzJiYmQxYjgpLCBuZXcgV29yZDY0KDB4MTlhNGMxMTYsIDB4YjhkMmQwYzgpLCBuZXcgV29yZDY0KDB4MWUzNzZjMDgsIDB4NTE0MWFiNTMpLCBuZXcgV29yZDY0KDB4Mjc0ODc3NGMsIDB4ZGY4ZWViOTkpLCBuZXcgV29yZDY0KDB4MzRiMGJjYjUsIDB4ZTE5YjQ4YTgpLCBuZXcgV29yZDY0KDB4MzkxYzBjYjMsIDB4YzVjOTVhNjMpLCBuZXcgV29yZDY0KDB4NGVkOGFhNGEsIDB4ZTM0MThhY2IpLCBuZXcgV29yZDY0KDB4NWI5Y2NhNGYsIDB4Nzc2M2UzNzMpLCBuZXcgV29yZDY0KDB4NjgyZTZmZjMsIDB4ZDZiMmI4YTMpLCBuZXcgV29yZDY0KDB4NzQ4ZjgyZWUsIDB4NWRlZmIyZmMpLCBuZXcgV29yZDY0KDB4NzhhNTYzNmYsIDB4NDMxNzJmNjApLCBuZXcgV29yZDY0KDB4ODRjODc4MTQsIDB4YTFmMGFiNzIpLCBuZXcgV29yZDY0KDB4OGNjNzAyMDgsIDB4MWE2NDM5ZWMpLCBuZXcgV29yZDY0KDB4OTBiZWZmZmEsIDB4MjM2MzFlMjgpLCBuZXcgV29yZDY0KDB4YTQ1MDZjZWIsIDB4ZGU4MmJkZTkpLCBuZXcgV29yZDY0KDB4YmVmOWEzZjcsIDB4YjJjNjc5MTUpLCBuZXcgV29yZDY0KDB4YzY3MTc4ZjIsIDB4ZTM3MjUzMmIpLCBuZXcgV29yZDY0KDB4Y2EyNzNlY2UsIDB4ZWEyNjYxOWMpLCBuZXcgV29yZDY0KDB4ZDE4NmI4YzcsIDB4MjFjMGMyMDcpLCBuZXcgV29yZDY0KDB4ZWFkYTdkZDYsIDB4Y2RlMGViMWUpLCBuZXcgV29yZDY0KDB4ZjU3ZDRmN2YsIDB4ZWU2ZWQxNzgpLCBuZXcgV29yZDY0KDB4MDZmMDY3YWEsIDB4NzIxNzZmYmEpLCBuZXcgV29yZDY0KDB4MGE2MzdkYzUsIDB4YTJjODk4YTYpLCBuZXcgV29yZDY0KDB4MTEzZjk4MDQsIDB4YmVmOTBkYWUpLCBuZXcgV29yZDY0KDB4MWI3MTBiMzUsIDB4MTMxYzQ3MWIpLCBuZXcgV29yZDY0KDB4MjhkYjc3ZjUsIDB4MjMwNDdkODQpLCBuZXcgV29yZDY0KDB4MzJjYWFiN2IsIDB4NDBjNzI0OTMpLCBuZXcgV29yZDY0KDB4M2M5ZWJlMGEsIDB4MTVjOWJlYmMpLCBuZXcgV29yZDY0KDB4NDMxZDY3YzQsIDB4OWMxMDBkNGMpLCBuZXcgV29yZDY0KDB4NGNjNWQ0YmUsIDB4Y2IzZTQyYjYpLCBuZXcgV29yZDY0KDB4NTk3ZjI5OWMsIDB4ZmM2NTdlMmEpLCBuZXcgV29yZDY0KDB4NWZjYjZmYWIsIDB4M2FkNmZhZWMpLCBuZXcgV29yZDY0KDB4NmM0NDE5OGMsIDB4NGE0NzU4MTcpXSk7CiAgfQp9OwpmdW5jdGlvbiBjaChyZXN1bHQsIHgsIHksIHosIHRtcCkgewogIHJlc3VsdC5hc3NpZ24oeCk7CiAgcmVzdWx0LmFuZCh5KTsKICB0bXAuYXNzaWduKHgpOwogIHRtcC5ub3QoKTsKICB0bXAuYW5kKHopOwogIHJlc3VsdC54b3IodG1wKTsKfQpmdW5jdGlvbiBtYWoocmVzdWx0LCB4LCB5LCB6LCB0bXApIHsKICByZXN1bHQuYXNzaWduKHgpOwogIHJlc3VsdC5hbmQoeSk7CiAgdG1wLmFzc2lnbih4KTsKICB0bXAuYW5kKHopOwogIHJlc3VsdC54b3IodG1wKTsKICB0bXAuYXNzaWduKHkpOwogIHRtcC5hbmQoeik7CiAgcmVzdWx0Lnhvcih0bXApOwp9CmZ1bmN0aW9uIHNpZ21hKHJlc3VsdCwgeCwgdG1wKSB7CiAgcmVzdWx0LmFzc2lnbih4KTsKICByZXN1bHQucm90YXRlUmlnaHQoMjgpOwogIHRtcC5hc3NpZ24oeCk7CiAgdG1wLnJvdGF0ZVJpZ2h0KDM0KTsKICByZXN1bHQueG9yKHRtcCk7CiAgdG1wLmFzc2lnbih4KTsKICB0bXAucm90YXRlUmlnaHQoMzkpOwogIHJlc3VsdC54b3IodG1wKTsKfQpmdW5jdGlvbiBzaWdtYVByaW1lKHJlc3VsdCwgeCwgdG1wKSB7CiAgcmVzdWx0LmFzc2lnbih4KTsKICByZXN1bHQucm90YXRlUmlnaHQoMTQpOwogIHRtcC5hc3NpZ24oeCk7CiAgdG1wLnJvdGF0ZVJpZ2h0KDE4KTsKICByZXN1bHQueG9yKHRtcCk7CiAgdG1wLmFzc2lnbih4KTsKICB0bXAucm90YXRlUmlnaHQoNDEpOwogIHJlc3VsdC54b3IodG1wKTsKfQpmdW5jdGlvbiBsaXR0bGVTaWdtYShyZXN1bHQsIHgsIHRtcCkgewogIHJlc3VsdC5hc3NpZ24oeCk7CiAgcmVzdWx0LnJvdGF0ZVJpZ2h0KDEpOwogIHRtcC5hc3NpZ24oeCk7CiAgdG1wLnJvdGF0ZVJpZ2h0KDgpOwogIHJlc3VsdC54b3IodG1wKTsKICB0bXAuYXNzaWduKHgpOwogIHRtcC5zaGlmdFJpZ2h0KDcpOwogIHJlc3VsdC54b3IodG1wKTsKfQpmdW5jdGlvbiBsaXR0bGVTaWdtYVByaW1lKHJlc3VsdCwgeCwgdG1wKSB7CiAgcmVzdWx0LmFzc2lnbih4KTsKICByZXN1bHQucm90YXRlUmlnaHQoMTkpOwogIHRtcC5hc3NpZ24oeCk7CiAgdG1wLnJvdGF0ZVJpZ2h0KDYxKTsKICByZXN1bHQueG9yKHRtcCk7CiAgdG1wLmFzc2lnbih4KTsKICB0bXAuc2hpZnRSaWdodCg2KTsKICByZXN1bHQueG9yKHRtcCk7Cn0KZnVuY3Rpb24gY2FsY3VsYXRlU0hBNTEyKGRhdGEsIG9mZnNldCwgbGVuZ3RoLCBtb2RlMzg0ID0gZmFsc2UpIHsKICBsZXQgaDAsIGgxLCBoMiwgaDMsIGg0LCBoNSwgaDYsIGg3OwogIGlmICghbW9kZTM4NCkgewogICAgaDAgPSBuZXcgV29yZDY0KDB4NmEwOWU2NjcsIDB4ZjNiY2M5MDgpOwogICAgaDEgPSBuZXcgV29yZDY0KDB4YmI2N2FlODUsIDB4ODRjYWE3M2IpOwogICAgaDIgPSBuZXcgV29yZDY0KDB4M2M2ZWYzNzIsIDB4ZmU5NGY4MmIpOwogICAgaDMgPSBuZXcgV29yZDY0KDB4YTU0ZmY1M2EsIDB4NWYxZDM2ZjEpOwogICAgaDQgPSBuZXcgV29yZDY0KDB4NTEwZTUyN2YsIDB4YWRlNjgyZDEpOwogICAgaDUgPSBuZXcgV29yZDY0KDB4OWIwNTY4OGMsIDB4MmIzZTZjMWYpOwogICAgaDYgPSBuZXcgV29yZDY0KDB4MWY4M2Q5YWIsIDB4ZmI0MWJkNmIpOwogICAgaDcgPSBuZXcgV29yZDY0KDB4NWJlMGNkMTksIDB4MTM3ZTIxNzkpOwogIH0gZWxzZSB7CiAgICBoMCA9IG5ldyBXb3JkNjQoMHhjYmJiOWQ1ZCwgMHhjMTA1OWVkOCk7CiAgICBoMSA9IG5ldyBXb3JkNjQoMHg2MjlhMjkyYSwgMHgzNjdjZDUwNyk7CiAgICBoMiA9IG5ldyBXb3JkNjQoMHg5MTU5MDE1YSwgMHgzMDcwZGQxNyk7CiAgICBoMyA9IG5ldyBXb3JkNjQoMHgxNTJmZWNkOCwgMHhmNzBlNTkzOSk7CiAgICBoNCA9IG5ldyBXb3JkNjQoMHg2NzMzMjY2NywgMHhmZmMwMGIzMSk7CiAgICBoNSA9IG5ldyBXb3JkNjQoMHg4ZWI0NGE4NywgMHg2ODU4MTUxMSk7CiAgICBoNiA9IG5ldyBXb3JkNjQoMHhkYjBjMmUwZCwgMHg2NGY5OGZhNyk7CiAgICBoNyA9IG5ldyBXb3JkNjQoMHg0N2I1NDgxZCwgMHhiZWZhNGZhNCk7CiAgfQogIGNvbnN0IHBhZGRlZExlbmd0aCA9IE1hdGguY2VpbCgobGVuZ3RoICsgMTcpIC8gMTI4KSAqIDEyODsKICBjb25zdCBwYWRkZWQgPSBuZXcgVWludDhBcnJheShwYWRkZWRMZW5ndGgpOwogIGxldCBpLCBqOwogIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgcGFkZGVkW2ldID0gZGF0YVtvZmZzZXQrK107CiAgfQogIHBhZGRlZFtpKytdID0gMHg4MDsKICBjb25zdCBuID0gcGFkZGVkTGVuZ3RoIC0gMTY7CiAgaWYgKGkgPCBuKSB7CiAgICBpID0gbjsKICB9CiAgaSArPSAxMTsKICBwYWRkZWRbaSsrXSA9IGxlbmd0aCA+Pj4gMjkgJiAweGZmOwogIHBhZGRlZFtpKytdID0gbGVuZ3RoID4+IDIxICYgMHhmZjsKICBwYWRkZWRbaSsrXSA9IGxlbmd0aCA+PiAxMyAmIDB4ZmY7CiAgcGFkZGVkW2krK10gPSBsZW5ndGggPj4gNSAmIDB4ZmY7CiAgcGFkZGVkW2krK10gPSBsZW5ndGggPDwgMyAmIDB4ZmY7CiAgY29uc3QgdyA9IG5ldyBBcnJheSg4MCk7CiAgZm9yIChpID0gMDsgaSA8IDgwOyBpKyspIHsKICAgIHdbaV0gPSBuZXcgV29yZDY0KDAsIDApOwogIH0KICBjb25zdCB7CiAgICBrCiAgfSA9IGNhbGN1bGF0ZV9zaGFfb3RoZXJfUEFSQU1TOwogIGxldCBhID0gbmV3IFdvcmQ2NCgwLCAwKSwKICAgIGIgPSBuZXcgV29yZDY0KDAsIDApLAogICAgYyA9IG5ldyBXb3JkNjQoMCwgMCk7CiAgbGV0IGQgPSBuZXcgV29yZDY0KDAsIDApLAogICAgZSA9IG5ldyBXb3JkNjQoMCwgMCksCiAgICBmID0gbmV3IFdvcmQ2NCgwLCAwKTsKICBsZXQgZyA9IG5ldyBXb3JkNjQoMCwgMCksCiAgICBoID0gbmV3IFdvcmQ2NCgwLCAwKTsKICBjb25zdCB0MSA9IG5ldyBXb3JkNjQoMCwgMCksCiAgICB0MiA9IG5ldyBXb3JkNjQoMCwgMCk7CiAgY29uc3QgdG1wMSA9IG5ldyBXb3JkNjQoMCwgMCksCiAgICB0bXAyID0gbmV3IFdvcmQ2NCgwLCAwKTsKICBsZXQgdG1wMzsKICBmb3IgKGkgPSAwOyBpIDwgcGFkZGVkTGVuZ3RoOykgewogICAgZm9yIChqID0gMDsgaiA8IDE2OyArK2opIHsKICAgICAgd1tqXS5oaWdoID0gcGFkZGVkW2ldIDw8IDI0IHwgcGFkZGVkW2kgKyAxXSA8PCAxNiB8IHBhZGRlZFtpICsgMl0gPDwgOCB8IHBhZGRlZFtpICsgM107CiAgICAgIHdbal0ubG93ID0gcGFkZGVkW2kgKyA0XSA8PCAyNCB8IHBhZGRlZFtpICsgNV0gPDwgMTYgfCBwYWRkZWRbaSArIDZdIDw8IDggfCBwYWRkZWRbaSArIDddOwogICAgICBpICs9IDg7CiAgICB9CiAgICBmb3IgKGogPSAxNjsgaiA8IDgwOyArK2opIHsKICAgICAgdG1wMyA9IHdbal07CiAgICAgIGxpdHRsZVNpZ21hUHJpbWUodG1wMywgd1tqIC0gMl0sIHRtcDIpOwogICAgICB0bXAzLmFkZCh3W2ogLSA3XSk7CiAgICAgIGxpdHRsZVNpZ21hKHRtcDEsIHdbaiAtIDE1XSwgdG1wMik7CiAgICAgIHRtcDMuYWRkKHRtcDEpOwogICAgICB0bXAzLmFkZCh3W2ogLSAxNl0pOwogICAgfQogICAgYS5hc3NpZ24oaDApOwogICAgYi5hc3NpZ24oaDEpOwogICAgYy5hc3NpZ24oaDIpOwogICAgZC5hc3NpZ24oaDMpOwogICAgZS5hc3NpZ24oaDQpOwogICAgZi5hc3NpZ24oaDUpOwogICAgZy5hc3NpZ24oaDYpOwogICAgaC5hc3NpZ24oaDcpOwogICAgZm9yIChqID0gMDsgaiA8IDgwOyArK2opIHsKICAgICAgdDEuYXNzaWduKGgpOwogICAgICBzaWdtYVByaW1lKHRtcDEsIGUsIHRtcDIpOwogICAgICB0MS5hZGQodG1wMSk7CiAgICAgIGNoKHRtcDEsIGUsIGYsIGcsIHRtcDIpOwogICAgICB0MS5hZGQodG1wMSk7CiAgICAgIHQxLmFkZChrW2pdKTsKICAgICAgdDEuYWRkKHdbal0pOwogICAgICBzaWdtYSh0MiwgYSwgdG1wMik7CiAgICAgIG1haih0bXAxLCBhLCBiLCBjLCB0bXAyKTsKICAgICAgdDIuYWRkKHRtcDEpOwogICAgICB0bXAzID0gaDsKICAgICAgaCA9IGc7CiAgICAgIGcgPSBmOwogICAgICBmID0gZTsKICAgICAgZC5hZGQodDEpOwogICAgICBlID0gZDsKICAgICAgZCA9IGM7CiAgICAgIGMgPSBiOwogICAgICBiID0gYTsKICAgICAgdG1wMy5hc3NpZ24odDEpOwogICAgICB0bXAzLmFkZCh0Mik7CiAgICAgIGEgPSB0bXAzOwogICAgfQogICAgaDAuYWRkKGEpOwogICAgaDEuYWRkKGIpOwogICAgaDIuYWRkKGMpOwogICAgaDMuYWRkKGQpOwogICAgaDQuYWRkKGUpOwogICAgaDUuYWRkKGYpOwogICAgaDYuYWRkKGcpOwogICAgaDcuYWRkKGgpOwogIH0KICBsZXQgcmVzdWx0OwogIGlmICghbW9kZTM4NCkgewogICAgcmVzdWx0ID0gbmV3IFVpbnQ4QXJyYXkoNjQpOwogICAgaDAuY29weVRvKHJlc3VsdCwgMCk7CiAgICBoMS5jb3B5VG8ocmVzdWx0LCA4KTsKICAgIGgyLmNvcHlUbyhyZXN1bHQsIDE2KTsKICAgIGgzLmNvcHlUbyhyZXN1bHQsIDI0KTsKICAgIGg0LmNvcHlUbyhyZXN1bHQsIDMyKTsKICAgIGg1LmNvcHlUbyhyZXN1bHQsIDQwKTsKICAgIGg2LmNvcHlUbyhyZXN1bHQsIDQ4KTsKICAgIGg3LmNvcHlUbyhyZXN1bHQsIDU2KTsKICB9IGVsc2UgewogICAgcmVzdWx0ID0gbmV3IFVpbnQ4QXJyYXkoNDgpOwogICAgaDAuY29weVRvKHJlc3VsdCwgMCk7CiAgICBoMS5jb3B5VG8ocmVzdWx0LCA4KTsKICAgIGgyLmNvcHlUbyhyZXN1bHQsIDE2KTsKICAgIGgzLmNvcHlUbyhyZXN1bHQsIDI0KTsKICAgIGg0LmNvcHlUbyhyZXN1bHQsIDMyKTsKICAgIGg1LmNvcHlUbyhyZXN1bHQsIDQwKTsKICB9CiAgcmV0dXJuIHJlc3VsdDsKfQpmdW5jdGlvbiBjYWxjdWxhdGVTSEEzODQoZGF0YSwgb2Zmc2V0LCBsZW5ndGgpIHsKICByZXR1cm4gY2FsY3VsYXRlU0hBNTEyKGRhdGEsIG9mZnNldCwgbGVuZ3RoLCB0cnVlKTsKfQoKOy8vIC4vc3JjL2NvcmUvY2FsY3VsYXRlX3NoYTI1Ni5qcwoKCgoKCgoKCgpjb25zdCBjYWxjdWxhdGVfc2hhMjU2X1BBUkFNUyA9IHsKICBnZXQgaygpIHsKICAgIHJldHVybiBzaGFkb3codGhpcywgImsiLCBbMHg0MjhhMmY5OCwgMHg3MTM3NDQ5MSwgMHhiNWMwZmJjZiwgMHhlOWI1ZGJhNSwgMHgzOTU2YzI1YiwgMHg1OWYxMTFmMSwgMHg5MjNmODJhNCwgMHhhYjFjNWVkNSwgMHhkODA3YWE5OCwgMHgxMjgzNWIwMSwgMHgyNDMxODViZSwgMHg1NTBjN2RjMywgMHg3MmJlNWQ3NCwgMHg4MGRlYjFmZSwgMHg5YmRjMDZhNywgMHhjMTliZjE3NCwgMHhlNDliNjljMSwgMHhlZmJlNDc4NiwgMHgwZmMxOWRjNiwgMHgyNDBjYTFjYywgMHgyZGU5MmM2ZiwgMHg0YTc0ODRhYSwgMHg1Y2IwYTlkYywgMHg3NmY5ODhkYSwgMHg5ODNlNTE1MiwgMHhhODMxYzY2ZCwgMHhiMDAzMjdjOCwgMHhiZjU5N2ZjNywgMHhjNmUwMGJmMywgMHhkNWE3OTE0NywgMHgwNmNhNjM1MSwgMHgxNDI5Mjk2NywgMHgyN2I3MGE4NSwgMHgyZTFiMjEzOCwgMHg0ZDJjNmRmYywgMHg1MzM4MGQxMywgMHg2NTBhNzM1NCwgMHg3NjZhMGFiYiwgMHg4MWMyYzkyZSwgMHg5MjcyMmM4NSwgMHhhMmJmZThhMSwgMHhhODFhNjY0YiwgMHhjMjRiOGI3MCwgMHhjNzZjNTFhMywgMHhkMTkyZTgxOSwgMHhkNjk5MDYyNCwgMHhmNDBlMzU4NSwgMHgxMDZhYTA3MCwgMHgxOWE0YzExNiwgMHgxZTM3NmMwOCwgMHgyNzQ4Nzc0YywgMHgzNGIwYmNiNSwgMHgzOTFjMGNiMywgMHg0ZWQ4YWE0YSwgMHg1YjljY2E0ZiwgMHg2ODJlNmZmMywgMHg3NDhmODJlZSwgMHg3OGE1NjM2ZiwgMHg4NGM4NzgxNCwgMHg4Y2M3MDIwOCwgMHg5MGJlZmZmYSwgMHhhNDUwNmNlYiwgMHhiZWY5YTNmNywgMHhjNjcxNzhmMl0pOwogIH0KfTsKZnVuY3Rpb24gcm90cih4LCBuKSB7CiAgcmV0dXJuIHggPj4+IG4gfCB4IDw8IDMyIC0gbjsKfQpmdW5jdGlvbiBjYWxjdWxhdGVfc2hhMjU2X2NoKHgsIHksIHopIHsKICByZXR1cm4geCAmIHkgXiB+eCAmIHo7Cn0KZnVuY3Rpb24gY2FsY3VsYXRlX3NoYTI1Nl9tYWooeCwgeSwgeikgewogIHJldHVybiB4ICYgeSBeIHggJiB6IF4geSAmIHo7Cn0KZnVuY3Rpb24gY2FsY3VsYXRlX3NoYTI1Nl9zaWdtYSh4KSB7CiAgcmV0dXJuIHJvdHIoeCwgMikgXiByb3RyKHgsIDEzKSBeIHJvdHIoeCwgMjIpOwp9CmZ1bmN0aW9uIGNhbGN1bGF0ZV9zaGEyNTZfc2lnbWFQcmltZSh4KSB7CiAgcmV0dXJuIHJvdHIoeCwgNikgXiByb3RyKHgsIDExKSBeIHJvdHIoeCwgMjUpOwp9CmZ1bmN0aW9uIGNhbGN1bGF0ZV9zaGEyNTZfbGl0dGxlU2lnbWEoeCkgewogIHJldHVybiByb3RyKHgsIDcpIF4gcm90cih4LCAxOCkgXiB4ID4+PiAzOwp9CmZ1bmN0aW9uIGNhbGN1bGF0ZV9zaGEyNTZfbGl0dGxlU2lnbWFQcmltZSh4KSB7CiAgcmV0dXJuIHJvdHIoeCwgMTcpIF4gcm90cih4LCAxOSkgXiB4ID4+PiAxMDsKfQpmdW5jdGlvbiBjYWxjdWxhdGVTSEEyNTYoZGF0YSwgb2Zmc2V0LCBsZW5ndGgpIHsKICBsZXQgaDAgPSAweDZhMDllNjY3LAogICAgaDEgPSAweGJiNjdhZTg1LAogICAgaDIgPSAweDNjNmVmMzcyLAogICAgaDMgPSAweGE1NGZmNTNhLAogICAgaDQgPSAweDUxMGU1MjdmLAogICAgaDUgPSAweDliMDU2ODhjLAogICAgaDYgPSAweDFmODNkOWFiLAogICAgaDcgPSAweDViZTBjZDE5OwogIGNvbnN0IHBhZGRlZExlbmd0aCA9IE1hdGguY2VpbCgobGVuZ3RoICsgOSkgLyA2NCkgKiA2NDsKICBjb25zdCBwYWRkZWQgPSBuZXcgVWludDhBcnJheShwYWRkZWRMZW5ndGgpOwogIGxldCBpLCBqOwogIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgcGFkZGVkW2ldID0gZGF0YVtvZmZzZXQrK107CiAgfQogIHBhZGRlZFtpKytdID0gMHg4MDsKICBjb25zdCBuID0gcGFkZGVkTGVuZ3RoIC0gODsKICBpZiAoaSA8IG4pIHsKICAgIGkgPSBuOwogIH0KICBpICs9IDM7CiAgcGFkZGVkW2krK10gPSBsZW5ndGggPj4+IDI5ICYgMHhmZjsKICBwYWRkZWRbaSsrXSA9IGxlbmd0aCA+PiAyMSAmIDB4ZmY7CiAgcGFkZGVkW2krK10gPSBsZW5ndGggPj4gMTMgJiAweGZmOwogIHBhZGRlZFtpKytdID0gbGVuZ3RoID4+IDUgJiAweGZmOwogIHBhZGRlZFtpKytdID0gbGVuZ3RoIDw8IDMgJiAweGZmOwogIGNvbnN0IHcgPSBuZXcgVWludDMyQXJyYXkoNjQpOwogIGNvbnN0IHsKICAgIGsKICB9ID0gY2FsY3VsYXRlX3NoYTI1Nl9QQVJBTVM7CiAgZm9yIChpID0gMDsgaSA8IHBhZGRlZExlbmd0aDspIHsKICAgIGZvciAoaiA9IDA7IGogPCAxNjsgKytqKSB7CiAgICAgIHdbal0gPSBwYWRkZWRbaV0gPDwgMjQgfCBwYWRkZWRbaSArIDFdIDw8IDE2IHwgcGFkZGVkW2kgKyAyXSA8PCA4IHwgcGFkZGVkW2kgKyAzXTsKICAgICAgaSArPSA0OwogICAgfQogICAgZm9yIChqID0gMTY7IGogPCA2NDsgKytqKSB7CiAgICAgIHdbal0gPSBjYWxjdWxhdGVfc2hhMjU2X2xpdHRsZVNpZ21hUHJpbWUod1tqIC0gMl0pICsgd1tqIC0gN10gKyBjYWxjdWxhdGVfc2hhMjU2X2xpdHRsZVNpZ21hKHdbaiAtIDE1XSkgKyB3W2ogLSAxNl0gfCAwOwogICAgfQogICAgbGV0IGEgPSBoMCwKICAgICAgYiA9IGgxLAogICAgICBjID0gaDIsCiAgICAgIGQgPSBoMywKICAgICAgZSA9IGg0LAogICAgICBmID0gaDUsCiAgICAgIGcgPSBoNiwKICAgICAgaCA9IGg3LAogICAgICB0MSwKICAgICAgdDI7CiAgICBmb3IgKGogPSAwOyBqIDwgNjQ7ICsraikgewogICAgICB0MSA9IGggKyBjYWxjdWxhdGVfc2hhMjU2X3NpZ21hUHJpbWUoZSkgKyBjYWxjdWxhdGVfc2hhMjU2X2NoKGUsIGYsIGcpICsga1tqXSArIHdbal07CiAgICAgIHQyID0gY2FsY3VsYXRlX3NoYTI1Nl9zaWdtYShhKSArIGNhbGN1bGF0ZV9zaGEyNTZfbWFqKGEsIGIsIGMpOwogICAgICBoID0gZzsKICAgICAgZyA9IGY7CiAgICAgIGYgPSBlOwogICAgICBlID0gZCArIHQxIHwgMDsKICAgICAgZCA9IGM7CiAgICAgIGMgPSBiOwogICAgICBiID0gYTsKICAgICAgYSA9IHQxICsgdDIgfCAwOwogICAgfQogICAgaDAgPSBoMCArIGEgfCAwOwogICAgaDEgPSBoMSArIGIgfCAwOwogICAgaDIgPSBoMiArIGMgfCAwOwogICAgaDMgPSBoMyArIGQgfCAwOwogICAgaDQgPSBoNCArIGUgfCAwOwogICAgaDUgPSBoNSArIGYgfCAwOwogICAgaDYgPSBoNiArIGcgfCAwOwogICAgaDcgPSBoNyArIGggfCAwOwogIH0KICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoW2gwID4+IDI0ICYgMHhGRiwgaDAgPj4gMTYgJiAweEZGLCBoMCA+PiA4ICYgMHhGRiwgaDAgJiAweEZGLCBoMSA+PiAyNCAmIDB4RkYsIGgxID4+IDE2ICYgMHhGRiwgaDEgPj4gOCAmIDB4RkYsIGgxICYgMHhGRiwgaDIgPj4gMjQgJiAweEZGLCBoMiA+PiAxNiAmIDB4RkYsIGgyID4+IDggJiAweEZGLCBoMiAmIDB4RkYsIGgzID4+IDI0ICYgMHhGRiwgaDMgPj4gMTYgJiAweEZGLCBoMyA+PiA4ICYgMHhGRiwgaDMgJiAweEZGLCBoNCA+PiAyNCAmIDB4RkYsIGg0ID4+IDE2ICYgMHhGRiwgaDQgPj4gOCAmIDB4RkYsIGg0ICYgMHhGRiwgaDUgPj4gMjQgJiAweEZGLCBoNSA+PiAxNiAmIDB4RkYsIGg1ID4+IDggJiAweEZGLCBoNSAmIDB4RkYsIGg2ID4+IDI0ICYgMHhGRiwgaDYgPj4gMTYgJiAweEZGLCBoNiA+PiA4ICYgMHhGRiwgaDYgJiAweEZGLCBoNyA+PiAyNCAmIDB4RkYsIGg3ID4+IDE2ICYgMHhGRiwgaDcgPj4gOCAmIDB4RkYsIGg3ICYgMHhGRl0pOwp9Cgo7Ly8gLi9zcmMvY29yZS9kZWNyeXB0X3N0cmVhbS5qcwoKY29uc3QgY2h1bmtTaXplID0gNTEyOwpjbGFzcyBEZWNyeXB0U3RyZWFtIGV4dGVuZHMgRGVjb2RlU3RyZWFtIHsKICBjb25zdHJ1Y3RvcihzdHIsIG1heWJlTGVuZ3RoLCBkZWNyeXB0KSB7CiAgICBzdXBlcihtYXliZUxlbmd0aCk7CiAgICB0aGlzLnN0ciA9IHN0cjsKICAgIHRoaXMuZGljdCA9IHN0ci5kaWN0OwogICAgdGhpcy5kZWNyeXB0ID0gZGVjcnlwdDsKICAgIHRoaXMubmV4dENodW5rID0gbnVsbDsKICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZTsKICB9CiAgcmVhZEJsb2NrKCkgewogICAgbGV0IGNodW5rOwogICAgaWYgKHRoaXMuaW5pdGlhbGl6ZWQpIHsKICAgICAgY2h1bmsgPSB0aGlzLm5leHRDaHVuazsKICAgIH0gZWxzZSB7CiAgICAgIGNodW5rID0gdGhpcy5zdHIuZ2V0Qnl0ZXMoY2h1bmtTaXplKTsKICAgICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7CiAgICB9CiAgICBpZiAoIWNodW5rPy5sZW5ndGgpIHsKICAgICAgdGhpcy5lb2YgPSB0cnVlOwogICAgICByZXR1cm47CiAgICB9CiAgICB0aGlzLm5leHRDaHVuayA9IHRoaXMuc3RyLmdldEJ5dGVzKGNodW5rU2l6ZSk7CiAgICBjb25zdCBoYXNNb3JlRGF0YSA9IHRoaXMubmV4dENodW5rPy5sZW5ndGggPiAwOwogICAgY29uc3QgZGVjcnlwdCA9IHRoaXMuZGVjcnlwdDsKICAgIGNodW5rID0gZGVjcnlwdChjaHVuaywgIWhhc01vcmVEYXRhKTsKICAgIGNvbnN0IGJ1ZmZlckxlbmd0aCA9IHRoaXMuYnVmZmVyTGVuZ3RoLAogICAgICBuZXdMZW5ndGggPSBidWZmZXJMZW5ndGggKyBjaHVuay5sZW5ndGgsCiAgICAgIGJ1ZmZlciA9IHRoaXMuZW5zdXJlQnVmZmVyKG5ld0xlbmd0aCk7CiAgICBidWZmZXIuc2V0KGNodW5rLCBidWZmZXJMZW5ndGgpOwogICAgdGhpcy5idWZmZXJMZW5ndGggPSBuZXdMZW5ndGg7CiAgfQp9Cgo7Ly8gLi9zcmMvY29yZS9jcnlwdG8uanMKCgoKCgoKCgoKCgoKCgoKCgoKCmNsYXNzIEFSQ0ZvdXJDaXBoZXIgewogIGNvbnN0cnVjdG9yKGtleSkgewogICAgdGhpcy5hID0gMDsKICAgIHRoaXMuYiA9IDA7CiAgICBjb25zdCBzID0gbmV3IFVpbnQ4QXJyYXkoMjU2KTsKICAgIGNvbnN0IGtleUxlbmd0aCA9IGtleS5sZW5ndGg7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDI1NjsgKytpKSB7CiAgICAgIHNbaV0gPSBpOwogICAgfQogICAgZm9yIChsZXQgaSA9IDAsIGogPSAwOyBpIDwgMjU2OyArK2kpIHsKICAgICAgY29uc3QgdG1wID0gc1tpXTsKICAgICAgaiA9IGogKyB0bXAgKyBrZXlbaSAlIGtleUxlbmd0aF0gJiAweGZmOwogICAgICBzW2ldID0gc1tqXTsKICAgICAgc1tqXSA9IHRtcDsKICAgIH0KICAgIHRoaXMucyA9IHM7CiAgfQogIGVuY3J5cHRCbG9jayhkYXRhKSB7CiAgICBsZXQgYSA9IHRoaXMuYSwKICAgICAgYiA9IHRoaXMuYjsKICAgIGNvbnN0IHMgPSB0aGlzLnM7CiAgICBjb25zdCBuID0gZGF0YS5sZW5ndGg7CiAgICBjb25zdCBvdXRwdXQgPSBuZXcgVWludDhBcnJheShuKTsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgKytpKSB7CiAgICAgIGEgPSBhICsgMSAmIDB4ZmY7CiAgICAgIGNvbnN0IHRtcCA9IHNbYV07CiAgICAgIGIgPSBiICsgdG1wICYgMHhmZjsKICAgICAgY29uc3QgdG1wMiA9IHNbYl07CiAgICAgIHNbYV0gPSB0bXAyOwogICAgICBzW2JdID0gdG1wOwogICAgICBvdXRwdXRbaV0gPSBkYXRhW2ldIF4gc1t0bXAgKyB0bXAyICYgMHhmZl07CiAgICB9CiAgICB0aGlzLmEgPSBhOwogICAgdGhpcy5iID0gYjsKICAgIHJldHVybiBvdXRwdXQ7CiAgfQogIGRlY3J5cHRCbG9jayhkYXRhKSB7CiAgICByZXR1cm4gdGhpcy5lbmNyeXB0QmxvY2soZGF0YSk7CiAgfQogIGVuY3J5cHQoZGF0YSkgewogICAgcmV0dXJuIHRoaXMuZW5jcnlwdEJsb2NrKGRhdGEpOwogIH0KfQpjbGFzcyBOdWxsQ2lwaGVyIHsKICBkZWNyeXB0QmxvY2soZGF0YSkgewogICAgcmV0dXJuIGRhdGE7CiAgfQogIGVuY3J5cHQoZGF0YSkgewogICAgcmV0dXJuIGRhdGE7CiAgfQp9CmNsYXNzIEFFU0Jhc2VDaXBoZXIgewogIF9zID0gbmV3IFVpbnQ4QXJyYXkoWzB4NjMsIDB4N2MsIDB4NzcsIDB4N2IsIDB4ZjIsIDB4NmIsIDB4NmYsIDB4YzUsIDB4MzAsIDB4MDEsIDB4NjcsIDB4MmIsIDB4ZmUsIDB4ZDcsIDB4YWIsIDB4NzYsIDB4Y2EsIDB4ODIsIDB4YzksIDB4N2QsIDB4ZmEsIDB4NTksIDB4NDcsIDB4ZjAsIDB4YWQsIDB4ZDQsIDB4YTIsIDB4YWYsIDB4OWMsIDB4YTQsIDB4NzIsIDB4YzAsIDB4YjcsIDB4ZmQsIDB4OTMsIDB4MjYsIDB4MzYsIDB4M2YsIDB4ZjcsIDB4Y2MsIDB4MzQsIDB4YTUsIDB4ZTUsIDB4ZjEsIDB4NzEsIDB4ZDgsIDB4MzEsIDB4MTUsIDB4MDQsIDB4YzcsIDB4MjMsIDB4YzMsIDB4MTgsIDB4OTYsIDB4MDUsIDB4OWEsIDB4MDcsIDB4MTIsIDB4ODAsIDB4ZTIsIDB4ZWIsIDB4MjcsIDB4YjIsIDB4NzUsIDB4MDksIDB4ODMsIDB4MmMsIDB4MWEsIDB4MWIsIDB4NmUsIDB4NWEsIDB4YTAsIDB4NTIsIDB4M2IsIDB4ZDYsIDB4YjMsIDB4MjksIDB4ZTMsIDB4MmYsIDB4ODQsIDB4NTMsIDB4ZDEsIDB4MDAsIDB4ZWQsIDB4MjAsIDB4ZmMsIDB4YjEsIDB4NWIsIDB4NmEsIDB4Y2IsIDB4YmUsIDB4MzksIDB4NGEsIDB4NGMsIDB4NTgsIDB4Y2YsIDB4ZDAsIDB4ZWYsIDB4YWEsIDB4ZmIsIDB4NDMsIDB4NGQsIDB4MzMsIDB4ODUsIDB4NDUsIDB4ZjksIDB4MDIsIDB4N2YsIDB4NTAsIDB4M2MsIDB4OWYsIDB4YTgsIDB4NTEsIDB4YTMsIDB4NDAsIDB4OGYsIDB4OTIsIDB4OWQsIDB4MzgsIDB4ZjUsIDB4YmMsIDB4YjYsIDB4ZGEsIDB4MjEsIDB4MTAsIDB4ZmYsIDB4ZjMsIDB4ZDIsIDB4Y2QsIDB4MGMsIDB4MTMsIDB4ZWMsIDB4NWYsIDB4OTcsIDB4NDQsIDB4MTcsIDB4YzQsIDB4YTcsIDB4N2UsIDB4M2QsIDB4NjQsIDB4NWQsIDB4MTksIDB4NzMsIDB4NjAsIDB4ODEsIDB4NGYsIDB4ZGMsIDB4MjIsIDB4MmEsIDB4OTAsIDB4ODgsIDB4NDYsIDB4ZWUsIDB4YjgsIDB4MTQsIDB4ZGUsIDB4NWUsIDB4MGIsIDB4ZGIsIDB4ZTAsIDB4MzIsIDB4M2EsIDB4MGEsIDB4NDksIDB4MDYsIDB4MjQsIDB4NWMsIDB4YzIsIDB4ZDMsIDB4YWMsIDB4NjIsIDB4OTEsIDB4OTUsIDB4ZTQsIDB4NzksIDB4ZTcsIDB4YzgsIDB4MzcsIDB4NmQsIDB4OGQsIDB4ZDUsIDB4NGUsIDB4YTksIDB4NmMsIDB4NTYsIDB4ZjQsIDB4ZWEsIDB4NjUsIDB4N2EsIDB4YWUsIDB4MDgsIDB4YmEsIDB4NzgsIDB4MjUsIDB4MmUsIDB4MWMsIDB4YTYsIDB4YjQsIDB4YzYsIDB4ZTgsIDB4ZGQsIDB4NzQsIDB4MWYsIDB4NGIsIDB4YmQsIDB4OGIsIDB4OGEsIDB4NzAsIDB4M2UsIDB4YjUsIDB4NjYsIDB4NDgsIDB4MDMsIDB4ZjYsIDB4MGUsIDB4NjEsIDB4MzUsIDB4NTcsIDB4YjksIDB4ODYsIDB4YzEsIDB4MWQsIDB4OWUsIDB4ZTEsIDB4ZjgsIDB4OTgsIDB4MTEsIDB4NjksIDB4ZDksIDB4OGUsIDB4OTQsIDB4OWIsIDB4MWUsIDB4ODcsIDB4ZTksIDB4Y2UsIDB4NTUsIDB4MjgsIDB4ZGYsIDB4OGMsIDB4YTEsIDB4ODksIDB4MGQsIDB4YmYsIDB4ZTYsIDB4NDIsIDB4NjgsIDB4NDEsIDB4OTksIDB4MmQsIDB4MGYsIDB4YjAsIDB4NTQsIDB4YmIsIDB4MTZdKTsKICBfaW52X3MgPSBuZXcgVWludDhBcnJheShbMHg1MiwgMHgwOSwgMHg2YSwgMHhkNSwgMHgzMCwgMHgzNiwgMHhhNSwgMHgzOCwgMHhiZiwgMHg0MCwgMHhhMywgMHg5ZSwgMHg4MSwgMHhmMywgMHhkNywgMHhmYiwgMHg3YywgMHhlMywgMHgzOSwgMHg4MiwgMHg5YiwgMHgyZiwgMHhmZiwgMHg4NywgMHgzNCwgMHg4ZSwgMHg0MywgMHg0NCwgMHhjNCwgMHhkZSwgMHhlOSwgMHhjYiwgMHg1NCwgMHg3YiwgMHg5NCwgMHgzMiwgMHhhNiwgMHhjMiwgMHgyMywgMHgzZCwgMHhlZSwgMHg0YywgMHg5NSwgMHgwYiwgMHg0MiwgMHhmYSwgMHhjMywgMHg0ZSwgMHgwOCwgMHgyZSwgMHhhMSwgMHg2NiwgMHgyOCwgMHhkOSwgMHgyNCwgMHhiMiwgMHg3NiwgMHg1YiwgMHhhMiwgMHg0OSwgMHg2ZCwgMHg4YiwgMHhkMSwgMHgyNSwgMHg3MiwgMHhmOCwgMHhmNiwgMHg2NCwgMHg4NiwgMHg2OCwgMHg5OCwgMHgxNiwgMHhkNCwgMHhhNCwgMHg1YywgMHhjYywgMHg1ZCwgMHg2NSwgMHhiNiwgMHg5MiwgMHg2YywgMHg3MCwgMHg0OCwgMHg1MCwgMHhmZCwgMHhlZCwgMHhiOSwgMHhkYSwgMHg1ZSwgMHgxNSwgMHg0NiwgMHg1NywgMHhhNywgMHg4ZCwgMHg5ZCwgMHg4NCwgMHg5MCwgMHhkOCwgMHhhYiwgMHgwMCwgMHg4YywgMHhiYywgMHhkMywgMHgwYSwgMHhmNywgMHhlNCwgMHg1OCwgMHgwNSwgMHhiOCwgMHhiMywgMHg0NSwgMHgwNiwgMHhkMCwgMHgyYywgMHgxZSwgMHg4ZiwgMHhjYSwgMHgzZiwgMHgwZiwgMHgwMiwgMHhjMSwgMHhhZiwgMHhiZCwgMHgwMywgMHgwMSwgMHgxMywgMHg4YSwgMHg2YiwgMHgzYSwgMHg5MSwgMHgxMSwgMHg0MSwgMHg0ZiwgMHg2NywgMHhkYywgMHhlYSwgMHg5NywgMHhmMiwgMHhjZiwgMHhjZSwgMHhmMCwgMHhiNCwgMHhlNiwgMHg3MywgMHg5NiwgMHhhYywgMHg3NCwgMHgyMiwgMHhlNywgMHhhZCwgMHgzNSwgMHg4NSwgMHhlMiwgMHhmOSwgMHgzNywgMHhlOCwgMHgxYywgMHg3NSwgMHhkZiwgMHg2ZSwgMHg0NywgMHhmMSwgMHgxYSwgMHg3MSwgMHgxZCwgMHgyOSwgMHhjNSwgMHg4OSwgMHg2ZiwgMHhiNywgMHg2MiwgMHgwZSwgMHhhYSwgMHgxOCwgMHhiZSwgMHgxYiwgMHhmYywgMHg1NiwgMHgzZSwgMHg0YiwgMHhjNiwgMHhkMiwgMHg3OSwgMHgyMCwgMHg5YSwgMHhkYiwgMHhjMCwgMHhmZSwgMHg3OCwgMHhjZCwgMHg1YSwgMHhmNCwgMHgxZiwgMHhkZCwgMHhhOCwgMHgzMywgMHg4OCwgMHgwNywgMHhjNywgMHgzMSwgMHhiMSwgMHgxMiwgMHgxMCwgMHg1OSwgMHgyNywgMHg4MCwgMHhlYywgMHg1ZiwgMHg2MCwgMHg1MSwgMHg3ZiwgMHhhOSwgMHgxOSwgMHhiNSwgMHg0YSwgMHgwZCwgMHgyZCwgMHhlNSwgMHg3YSwgMHg5ZiwgMHg5MywgMHhjOSwgMHg5YywgMHhlZiwgMHhhMCwgMHhlMCwgMHgzYiwgMHg0ZCwgMHhhZSwgMHgyYSwgMHhmNSwgMHhiMCwgMHhjOCwgMHhlYiwgMHhiYiwgMHgzYywgMHg4MywgMHg1MywgMHg5OSwgMHg2MSwgMHgxNywgMHgyYiwgMHgwNCwgMHg3ZSwgMHhiYSwgMHg3NywgMHhkNiwgMHgyNiwgMHhlMSwgMHg2OSwgMHgxNCwgMHg2MywgMHg1NSwgMHgyMSwgMHgwYywgMHg3ZF0pOwogIF9taXggPSBuZXcgVWludDMyQXJyYXkoWzB4MDAwMDAwMDAsIDB4MGUwOTBkMGIsIDB4MWMxMjFhMTYsIDB4MTIxYjE3MWQsIDB4MzgyNDM0MmMsIDB4MzYyZDM5MjcsIDB4MjQzNjJlM2EsIDB4MmEzZjIzMzEsIDB4NzA0ODY4NTgsIDB4N2U0MTY1NTMsIDB4NmM1YTcyNGUsIDB4NjI1MzdmNDUsIDB4NDg2YzVjNzQsIDB4NDY2NTUxN2YsIDB4NTQ3ZTQ2NjIsIDB4NWE3NzRiNjksIDB4ZTA5MGQwYjAsIDB4ZWU5OWRkYmIsIDB4ZmM4MmNhYTYsIDB4ZjI4YmM3YWQsIDB4ZDhiNGU0OWMsIDB4ZDZiZGU5OTcsIDB4YzRhNmZlOGEsIDB4Y2FhZmYzODEsIDB4OTBkOGI4ZTgsIDB4OWVkMWI1ZTMsIDB4OGNjYWEyZmUsIDB4ODJjM2FmZjUsIDB4YThmYzhjYzQsIDB4YTZmNTgxY2YsIDB4YjRlZTk2ZDIsIDB4YmFlNzliZDksIDB4ZGIzYmJiN2IsIDB4ZDUzMmI2NzAsIDB4YzcyOWExNmQsIDB4YzkyMGFjNjYsIDB4ZTMxZjhmNTcsIDB4ZWQxNjgyNWMsIDB4ZmYwZDk1NDEsIDB4ZjEwNDk4NGEsIDB4YWI3M2QzMjMsIDB4YTU3YWRlMjgsIDB4Yjc2MWM5MzUsIDB4Yjk2OGM0M2UsIDB4OTM1N2U3MGYsIDB4OWQ1ZWVhMDQsIDB4OGY0NWZkMTksIDB4ODE0Y2YwMTIsIDB4M2JhYjZiY2IsIDB4MzVhMjY2YzAsIDB4MjdiOTcxZGQsIDB4MjliMDdjZDYsIDB4MDM4ZjVmZTcsIDB4MGQ4NjUyZWMsIDB4MWY5ZDQ1ZjEsIDB4MTE5NDQ4ZmEsIDB4NGJlMzAzOTMsIDB4NDVlYTBlOTgsIDB4NTdmMTE5ODUsIDB4NTlmODE0OGUsIDB4NzNjNzM3YmYsIDB4N2RjZTNhYjQsIDB4NmZkNTJkYTksIDB4NjFkYzIwYTIsIDB4YWQ3NjZkZjYsIDB4YTM3ZjYwZmQsIDB4YjE2NDc3ZTAsIDB4YmY2ZDdhZWIsIDB4OTU1MjU5ZGEsIDB4OWI1YjU0ZDEsIDB4ODk0MDQzY2MsIDB4ODc0OTRlYzcsIDB4ZGQzZTA1YWUsIDB4ZDMzNzA4YTUsIDB4YzEyYzFmYjgsIDB4Y2YyNTEyYjMsIDB4ZTUxYTMxODIsIDB4ZWIxMzNjODksIDB4ZjkwODJiOTQsIDB4ZjcwMTI2OWYsIDB4NGRlNmJkNDYsIDB4NDNlZmIwNGQsIDB4NTFmNGE3NTAsIDB4NWZmZGFhNWIsIDB4NzVjMjg5NmEsIDB4N2JjYjg0NjEsIDB4NjlkMDkzN2MsIDB4NjdkOTllNzcsIDB4M2RhZWQ1MWUsIDB4MzNhN2Q4MTUsIDB4MjFiY2NmMDgsIDB4MmZiNWMyMDMsIDB4MDU4YWUxMzIsIDB4MGI4M2VjMzksIDB4MTk5OGZiMjQsIDB4MTc5MWY2MmYsIDB4NzY0ZGQ2OGQsIDB4Nzg0NGRiODYsIDB4NmE1ZmNjOWIsIDB4NjQ1NmMxOTAsIDB4NGU2OWUyYTEsIDB4NDA2MGVmYWEsIDB4NTI3YmY4YjcsIDB4NWM3MmY1YmMsIDB4MDYwNWJlZDUsIDB4MDgwY2IzZGUsIDB4MWExN2E0YzMsIDB4MTQxZWE5YzgsIDB4M2UyMThhZjksIDB4MzAyODg3ZjIsIDB4MjIzMzkwZWYsIDB4MmMzYTlkZTQsIDB4OTZkZDA2M2QsIDB4OThkNDBiMzYsIDB4OGFjZjFjMmIsIDB4ODRjNjExMjAsIDB4YWVmOTMyMTEsIDB4YTBmMDNmMWEsIDB4YjJlYjI4MDcsIDB4YmNlMjI1MGMsIDB4ZTY5NTZlNjUsIDB4ZTg5YzYzNmUsIDB4ZmE4Nzc0NzMsIDB4ZjQ4ZTc5NzgsIDB4ZGViMTVhNDksIDB4ZDBiODU3NDIsIDB4YzJhMzQwNWYsIDB4Y2NhYTRkNTQsIDB4NDFlY2RhZjcsIDB4NGZlNWQ3ZmMsIDB4NWRmZWMwZTEsIDB4NTNmN2NkZWEsIDB4NzljOGVlZGIsIDB4NzdjMWUzZDAsIDB4NjVkYWY0Y2QsIDB4NmJkM2Y5YzYsIDB4MzFhNGIyYWYsIDB4M2ZhZGJmYTQsIDB4MmRiNmE4YjksIDB4MjNiZmE1YjIsIDB4MDk4MDg2ODMsIDB4MDc4OThiODgsIDB4MTU5MjljOTUsIDB4MWI5YjkxOWUsIDB4YTE3YzBhNDcsIDB4YWY3NTA3NGMsIDB4YmQ2ZTEwNTEsIDB4YjM2NzFkNWEsIDB4OTk1ODNlNmIsIDB4OTc1MTMzNjAsIDB4ODU0YTI0N2QsIDB4OGI0MzI5NzYsIDB4ZDEzNDYyMWYsIDB4ZGYzZDZmMTQsIDB4Y2QyNjc4MDksIDB4YzMyZjc1MDIsIDB4ZTkxMDU2MzMsIDB4ZTcxOTViMzgsIDB4ZjUwMjRjMjUsIDB4ZmIwYjQxMmUsIDB4OWFkNzYxOGMsIDB4OTRkZTZjODcsIDB4ODZjNTdiOWEsIDB4ODhjYzc2OTEsIDB4YTJmMzU1YTAsIDB4YWNmYTU4YWIsIDB4YmVlMTRmYjYsIDB4YjBlODQyYmQsIDB4ZWE5ZjA5ZDQsIDB4ZTQ5NjA0ZGYsIDB4ZjY4ZDEzYzIsIDB4Zjg4NDFlYzksIDB4ZDJiYjNkZjgsIDB4ZGNiMjMwZjMsIDB4Y2VhOTI3ZWUsIDB4YzBhMDJhZTUsIDB4N2E0N2IxM2MsIDB4NzQ0ZWJjMzcsIDB4NjY1NWFiMmEsIDB4Njg1Y2E2MjEsIDB4NDI2Mzg1MTAsIDB4NGM2YTg4MWIsIDB4NWU3MTlmMDYsIDB4NTA3ODkyMGQsIDB4MGEwZmQ5NjQsIDB4MDQwNmQ0NmYsIDB4MTYxZGMzNzIsIDB4MTgxNGNlNzksIDB4MzIyYmVkNDgsIDB4M2MyMmUwNDMsIDB4MmUzOWY3NWUsIDB4MjAzMGZhNTUsIDB4ZWM5YWI3MDEsIDB4ZTI5M2JhMGEsIDB4ZjA4OGFkMTcsIDB4ZmU4MWEwMWMsIDB4ZDRiZTgzMmQsIDB4ZGFiNzhlMjYsIDB4YzhhYzk5M2IsIDB4YzZhNTk0MzAsIDB4OWNkMmRmNTksIDB4OTJkYmQyNTIsIDB4ODBjMGM1NGYsIDB4OGVjOWM4NDQsIDB4YTRmNmViNzUsIDB4YWFmZmU2N2UsIDB4YjhlNGYxNjMsIDB4YjZlZGZjNjgsIDB4MGMwYTY3YjEsIDB4MDIwMzZhYmEsIDB4MTAxODdkYTcsIDB4MWUxMTcwYWMsIDB4MzQyZTUzOWQsIDB4M2EyNzVlOTYsIDB4MjgzYzQ5OGIsIDB4MjYzNTQ0ODAsIDB4N2M0MjBmZTksIDB4NzI0YjAyZTIsIDB4NjA1MDE1ZmYsIDB4NmU1OTE4ZjQsIDB4NDQ2NjNiYzUsIDB4NGE2ZjM2Y2UsIDB4NTg3NDIxZDMsIDB4NTY3ZDJjZDgsIDB4MzdhMTBjN2EsIDB4MzlhODAxNzEsIDB4MmJiMzE2NmMsIDB4MjViYTFiNjcsIDB4MGY4NTM4NTYsIDB4MDE4YzM1NWQsIDB4MTM5NzIyNDAsIDB4MWQ5ZTJmNGIsIDB4NDdlOTY0MjIsIDB4NDllMDY5MjksIDB4NWJmYjdlMzQsIDB4NTVmMjczM2YsIDB4N2ZjZDUwMGUsIDB4NzFjNDVkMDUsIDB4NjNkZjRhMTgsIDB4NmRkNjQ3MTMsIDB4ZDczMWRjY2EsIDB4ZDkzOGQxYzEsIDB4Y2IyM2M2ZGMsIDB4YzUyYWNiZDcsIDB4ZWYxNWU4ZTYsIDB4ZTExY2U1ZWQsIDB4ZjMwN2YyZjAsIDB4ZmQwZWZmZmIsIDB4YTc3OWI0OTIsIDB4YTk3MGI5OTksIDB4YmI2YmFlODQsIDB4YjU2MmEzOGYsIDB4OWY1ZDgwYmUsIDB4OTE1NDhkYjUsIDB4ODM0ZjlhYTgsIDB4OGQ0Njk3YTNdKTsKICBfbWl4Q29sID0gbmV3IFVpbnQ4QXJyYXkoMjU2KS5tYXAoKF8sIGkpID0+IGkgPCAxMjggPyBpIDw8IDEgOiBpIDw8IDEgXiAweDFiKTsKICBjb25zdHJ1Y3RvcigpIHsKICAgIHRoaXMuYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoMTYpOwogICAgdGhpcy5idWZmZXJQb3NpdGlvbiA9IDA7CiAgfQogIF9leHBhbmRLZXkoY2lwaGVyS2V5KSB7CiAgICB1bnJlYWNoYWJsZSgiQ2Fubm90IGNhbGwgYF9leHBhbmRLZXlgIG9uIHRoZSBiYXNlIGNsYXNzIik7CiAgfQogIF9kZWNyeXB0KGlucHV0LCBrZXkpIHsKICAgIGxldCB0LCB1LCB2OwogICAgY29uc3Qgc3RhdGUgPSBuZXcgVWludDhBcnJheSgxNik7CiAgICBzdGF0ZS5zZXQoaW5wdXQpOwogICAgZm9yIChsZXQgaiA9IDAsIGsgPSB0aGlzLl9rZXlTaXplOyBqIDwgMTY7ICsraiwgKytrKSB7CiAgICAgIHN0YXRlW2pdIF49IGtleVtrXTsKICAgIH0KICAgIGZvciAobGV0IGkgPSB0aGlzLl9jeWNsZXNPZlJlcGV0aXRpb24gLSAxOyBpID49IDE7IC0taSkgewogICAgICB0ID0gc3RhdGVbMTNdOwogICAgICBzdGF0ZVsxM10gPSBzdGF0ZVs5XTsKICAgICAgc3RhdGVbOV0gPSBzdGF0ZVs1XTsKICAgICAgc3RhdGVbNV0gPSBzdGF0ZVsxXTsKICAgICAgc3RhdGVbMV0gPSB0OwogICAgICB0ID0gc3RhdGVbMTRdOwogICAgICB1ID0gc3RhdGVbMTBdOwogICAgICBzdGF0ZVsxNF0gPSBzdGF0ZVs2XTsKICAgICAgc3RhdGVbMTBdID0gc3RhdGVbMl07CiAgICAgIHN0YXRlWzZdID0gdDsKICAgICAgc3RhdGVbMl0gPSB1OwogICAgICB0ID0gc3RhdGVbMTVdOwogICAgICB1ID0gc3RhdGVbMTFdOwogICAgICB2ID0gc3RhdGVbN107CiAgICAgIHN0YXRlWzE1XSA9IHN0YXRlWzNdOwogICAgICBzdGF0ZVsxMV0gPSB0OwogICAgICBzdGF0ZVs3XSA9IHU7CiAgICAgIHN0YXRlWzNdID0gdjsKICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCAxNjsgKytqKSB7CiAgICAgICAgc3RhdGVbal0gPSB0aGlzLl9pbnZfc1tzdGF0ZVtqXV07CiAgICAgIH0KICAgICAgZm9yIChsZXQgaiA9IDAsIGsgPSBpICogMTY7IGogPCAxNjsgKytqLCArK2spIHsKICAgICAgICBzdGF0ZVtqXSBePSBrZXlba107CiAgICAgIH0KICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCAxNjsgaiArPSA0KSB7CiAgICAgICAgY29uc3QgczAgPSB0aGlzLl9taXhbc3RhdGVbal1dOwogICAgICAgIGNvbnN0IHMxID0gdGhpcy5fbWl4W3N0YXRlW2ogKyAxXV07CiAgICAgICAgY29uc3QgczIgPSB0aGlzLl9taXhbc3RhdGVbaiArIDJdXTsKICAgICAgICBjb25zdCBzMyA9IHRoaXMuX21peFtzdGF0ZVtqICsgM11dOwogICAgICAgIHQgPSBzMCBeIHMxID4+PiA4IF4gczEgPDwgMjQgXiBzMiA+Pj4gMTYgXiBzMiA8PCAxNiBeIHMzID4+PiAyNCBeIHMzIDw8IDg7CiAgICAgICAgc3RhdGVbal0gPSB0ID4+PiAyNCAmIDB4ZmY7CiAgICAgICAgc3RhdGVbaiArIDFdID0gdCA+PiAxNiAmIDB4ZmY7CiAgICAgICAgc3RhdGVbaiArIDJdID0gdCA+PiA4ICYgMHhmZjsKICAgICAgICBzdGF0ZVtqICsgM10gPSB0ICYgMHhmZjsKICAgICAgfQogICAgfQogICAgdCA9IHN0YXRlWzEzXTsKICAgIHN0YXRlWzEzXSA9IHN0YXRlWzldOwogICAgc3RhdGVbOV0gPSBzdGF0ZVs1XTsKICAgIHN0YXRlWzVdID0gc3RhdGVbMV07CiAgICBzdGF0ZVsxXSA9IHQ7CiAgICB0ID0gc3RhdGVbMTRdOwogICAgdSA9IHN0YXRlWzEwXTsKICAgIHN0YXRlWzE0XSA9IHN0YXRlWzZdOwogICAgc3RhdGVbMTBdID0gc3RhdGVbMl07CiAgICBzdGF0ZVs2XSA9IHQ7CiAgICBzdGF0ZVsyXSA9IHU7CiAgICB0ID0gc3RhdGVbMTVdOwogICAgdSA9IHN0YXRlWzExXTsKICAgIHYgPSBzdGF0ZVs3XTsKICAgIHN0YXRlWzE1XSA9IHN0YXRlWzNdOwogICAgc3RhdGVbMTFdID0gdDsKICAgIHN0YXRlWzddID0gdTsKICAgIHN0YXRlWzNdID0gdjsKICAgIGZvciAobGV0IGogPSAwOyBqIDwgMTY7ICsraikgewogICAgICBzdGF0ZVtqXSA9IHRoaXMuX2ludl9zW3N0YXRlW2pdXTsKICAgICAgc3RhdGVbal0gXj0ga2V5W2pdOwogICAgfQogICAgcmV0dXJuIHN0YXRlOwogIH0KICBfZW5jcnlwdChpbnB1dCwga2V5KSB7CiAgICBjb25zdCBzID0gdGhpcy5fczsKICAgIGxldCB0LCB1LCB2OwogICAgY29uc3Qgc3RhdGUgPSBuZXcgVWludDhBcnJheSgxNik7CiAgICBzdGF0ZS5zZXQoaW5wdXQpOwogICAgZm9yIChsZXQgaiA9IDA7IGogPCAxNjsgKytqKSB7CiAgICAgIHN0YXRlW2pdIF49IGtleVtqXTsKICAgIH0KICAgIGZvciAobGV0IGkgPSAxOyBpIDwgdGhpcy5fY3ljbGVzT2ZSZXBldGl0aW9uOyBpKyspIHsKICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCAxNjsgKytqKSB7CiAgICAgICAgc3RhdGVbal0gPSBzW3N0YXRlW2pdXTsKICAgICAgfQogICAgICB2ID0gc3RhdGVbMV07CiAgICAgIHN0YXRlWzFdID0gc3RhdGVbNV07CiAgICAgIHN0YXRlWzVdID0gc3RhdGVbOV07CiAgICAgIHN0YXRlWzldID0gc3RhdGVbMTNdOwogICAgICBzdGF0ZVsxM10gPSB2OwogICAgICB2ID0gc3RhdGVbMl07CiAgICAgIHUgPSBzdGF0ZVs2XTsKICAgICAgc3RhdGVbMl0gPSBzdGF0ZVsxMF07CiAgICAgIHN0YXRlWzZdID0gc3RhdGVbMTRdOwogICAgICBzdGF0ZVsxMF0gPSB2OwogICAgICBzdGF0ZVsxNF0gPSB1OwogICAgICB2ID0gc3RhdGVbM107CiAgICAgIHUgPSBzdGF0ZVs3XTsKICAgICAgdCA9IHN0YXRlWzExXTsKICAgICAgc3RhdGVbM10gPSBzdGF0ZVsxNV07CiAgICAgIHN0YXRlWzddID0gdjsKICAgICAgc3RhdGVbMTFdID0gdTsKICAgICAgc3RhdGVbMTVdID0gdDsKICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCAxNjsgaiArPSA0KSB7CiAgICAgICAgY29uc3QgczAgPSBzdGF0ZVtqXTsKICAgICAgICBjb25zdCBzMSA9IHN0YXRlW2ogKyAxXTsKICAgICAgICBjb25zdCBzMiA9IHN0YXRlW2ogKyAyXTsKICAgICAgICBjb25zdCBzMyA9IHN0YXRlW2ogKyAzXTsKICAgICAgICB0ID0gczAgXiBzMSBeIHMyIF4gczM7CiAgICAgICAgc3RhdGVbal0gXj0gdCBeIHRoaXMuX21peENvbFtzMCBeIHMxXTsKICAgICAgICBzdGF0ZVtqICsgMV0gXj0gdCBeIHRoaXMuX21peENvbFtzMSBeIHMyXTsKICAgICAgICBzdGF0ZVtqICsgMl0gXj0gdCBeIHRoaXMuX21peENvbFtzMiBeIHMzXTsKICAgICAgICBzdGF0ZVtqICsgM10gXj0gdCBeIHRoaXMuX21peENvbFtzMyBeIHMwXTsKICAgICAgfQogICAgICBmb3IgKGxldCBqID0gMCwgayA9IGkgKiAxNjsgaiA8IDE2OyArK2osICsraykgewogICAgICAgIHN0YXRlW2pdIF49IGtleVtrXTsKICAgICAgfQogICAgfQogICAgZm9yIChsZXQgaiA9IDA7IGogPCAxNjsgKytqKSB7CiAgICAgIHN0YXRlW2pdID0gc1tzdGF0ZVtqXV07CiAgICB9CiAgICB2ID0gc3RhdGVbMV07CiAgICBzdGF0ZVsxXSA9IHN0YXRlWzVdOwogICAgc3RhdGVbNV0gPSBzdGF0ZVs5XTsKICAgIHN0YXRlWzldID0gc3RhdGVbMTNdOwogICAgc3RhdGVbMTNdID0gdjsKICAgIHYgPSBzdGF0ZVsyXTsKICAgIHUgPSBzdGF0ZVs2XTsKICAgIHN0YXRlWzJdID0gc3RhdGVbMTBdOwogICAgc3RhdGVbNl0gPSBzdGF0ZVsxNF07CiAgICBzdGF0ZVsxMF0gPSB2OwogICAgc3RhdGVbMTRdID0gdTsKICAgIHYgPSBzdGF0ZVszXTsKICAgIHUgPSBzdGF0ZVs3XTsKICAgIHQgPSBzdGF0ZVsxMV07CiAgICBzdGF0ZVszXSA9IHN0YXRlWzE1XTsKICAgIHN0YXRlWzddID0gdjsKICAgIHN0YXRlWzExXSA9IHU7CiAgICBzdGF0ZVsxNV0gPSB0OwogICAgZm9yIChsZXQgaiA9IDAsIGsgPSB0aGlzLl9rZXlTaXplOyBqIDwgMTY7ICsraiwgKytrKSB7CiAgICAgIHN0YXRlW2pdIF49IGtleVtrXTsKICAgIH0KICAgIHJldHVybiBzdGF0ZTsKICB9CiAgX2RlY3J5cHRCbG9jazIoZGF0YSwgZmluYWxpemUpIHsKICAgIGNvbnN0IHNvdXJjZUxlbmd0aCA9IGRhdGEubGVuZ3RoOwogICAgbGV0IGJ1ZmZlciA9IHRoaXMuYnVmZmVyLAogICAgICBidWZmZXJMZW5ndGggPSB0aGlzLmJ1ZmZlclBvc2l0aW9uOwogICAgY29uc3QgcmVzdWx0ID0gW107CiAgICBsZXQgaXYgPSB0aGlzLml2OwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb3VyY2VMZW5ndGg7ICsraSkgewogICAgICBidWZmZXJbYnVmZmVyTGVuZ3RoXSA9IGRhdGFbaV07CiAgICAgICsrYnVmZmVyTGVuZ3RoOwogICAgICBpZiAoYnVmZmVyTGVuZ3RoIDwgMTYpIHsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBjb25zdCBwbGFpbiA9IHRoaXMuX2RlY3J5cHQoYnVmZmVyLCB0aGlzLl9rZXkpOwogICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDE2OyArK2opIHsKICAgICAgICBwbGFpbltqXSBePSBpdltqXTsKICAgICAgfQogICAgICBpdiA9IGJ1ZmZlcjsKICAgICAgcmVzdWx0LnB1c2gocGxhaW4pOwogICAgICBidWZmZXIgPSBuZXcgVWludDhBcnJheSgxNik7CiAgICAgIGJ1ZmZlckxlbmd0aCA9IDA7CiAgICB9CiAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjsKICAgIHRoaXMuYnVmZmVyTGVuZ3RoID0gYnVmZmVyTGVuZ3RoOwogICAgdGhpcy5pdiA9IGl2OwogICAgaWYgKHJlc3VsdC5sZW5ndGggPT09IDApIHsKICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KDApOwogICAgfQogICAgbGV0IG91dHB1dExlbmd0aCA9IDE2ICogcmVzdWx0Lmxlbmd0aDsKICAgIGlmIChmaW5hbGl6ZSkgewogICAgICBjb25zdCBsYXN0QmxvY2sgPSByZXN1bHQuYXQoLTEpOwogICAgICBsZXQgcHNMZW4gPSBsYXN0QmxvY2tbMTVdOwogICAgICBpZiAocHNMZW4gPD0gMTYpIHsKICAgICAgICBmb3IgKGxldCBpID0gMTUsIGlpID0gMTYgLSBwc0xlbjsgaSA+PSBpaTsgLS1pKSB7CiAgICAgICAgICBpZiAobGFzdEJsb2NrW2ldICE9PSBwc0xlbikgewogICAgICAgICAgICBwc0xlbiA9IDA7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBvdXRwdXRMZW5ndGggLT0gcHNMZW47CiAgICAgICAgcmVzdWx0W3Jlc3VsdC5sZW5ndGggLSAxXSA9IGxhc3RCbG9jay5zdWJhcnJheSgwLCAxNiAtIHBzTGVuKTsKICAgICAgfQogICAgfQogICAgY29uc3Qgb3V0cHV0ID0gbmV3IFVpbnQ4QXJyYXkob3V0cHV0TGVuZ3RoKTsKICAgIGZvciAobGV0IGkgPSAwLCBqID0gMCwgaWkgPSByZXN1bHQubGVuZ3RoOyBpIDwgaWk7ICsraSwgaiArPSAxNikgewogICAgICBvdXRwdXQuc2V0KHJlc3VsdFtpXSwgaik7CiAgICB9CiAgICByZXR1cm4gb3V0cHV0OwogIH0KICBkZWNyeXB0QmxvY2soZGF0YSwgZmluYWxpemUsIGl2ID0gbnVsbCkgewogICAgY29uc3Qgc291cmNlTGVuZ3RoID0gZGF0YS5sZW5ndGg7CiAgICBjb25zdCBidWZmZXIgPSB0aGlzLmJ1ZmZlcjsKICAgIGxldCBidWZmZXJMZW5ndGggPSB0aGlzLmJ1ZmZlclBvc2l0aW9uOwogICAgaWYgKGl2KSB7CiAgICAgIHRoaXMuaXYgPSBpdjsKICAgIH0gZWxzZSB7CiAgICAgIGZvciAobGV0IGkgPSAwOyBidWZmZXJMZW5ndGggPCAxNiAmJiBpIDwgc291cmNlTGVuZ3RoOyArK2ksICsrYnVmZmVyTGVuZ3RoKSB7CiAgICAgICAgYnVmZmVyW2J1ZmZlckxlbmd0aF0gPSBkYXRhW2ldOwogICAgICB9CiAgICAgIGlmIChidWZmZXJMZW5ndGggPCAxNikgewogICAgICAgIHRoaXMuYnVmZmVyTGVuZ3RoID0gYnVmZmVyTGVuZ3RoOwogICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheSgwKTsKICAgICAgfQogICAgICB0aGlzLml2ID0gYnVmZmVyOwogICAgICBkYXRhID0gZGF0YS5zdWJhcnJheSgxNik7CiAgICB9CiAgICB0aGlzLmJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KDE2KTsKICAgIHRoaXMuYnVmZmVyTGVuZ3RoID0gMDsKICAgIHRoaXMuZGVjcnlwdEJsb2NrID0gdGhpcy5fZGVjcnlwdEJsb2NrMjsKICAgIHJldHVybiB0aGlzLmRlY3J5cHRCbG9jayhkYXRhLCBmaW5hbGl6ZSk7CiAgfQogIGVuY3J5cHQoZGF0YSwgaXYpIHsKICAgIGNvbnN0IHNvdXJjZUxlbmd0aCA9IGRhdGEubGVuZ3RoOwogICAgbGV0IGJ1ZmZlciA9IHRoaXMuYnVmZmVyLAogICAgICBidWZmZXJMZW5ndGggPSB0aGlzLmJ1ZmZlclBvc2l0aW9uOwogICAgY29uc3QgcmVzdWx0ID0gW107CiAgICBpdiB8fD0gbmV3IFVpbnQ4QXJyYXkoMTYpOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb3VyY2VMZW5ndGg7ICsraSkgewogICAgICBidWZmZXJbYnVmZmVyTGVuZ3RoXSA9IGRhdGFbaV07CiAgICAgICsrYnVmZmVyTGVuZ3RoOwogICAgICBpZiAoYnVmZmVyTGVuZ3RoIDwgMTYpIHsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDE2OyArK2opIHsKICAgICAgICBidWZmZXJbal0gXj0gaXZbal07CiAgICAgIH0KICAgICAgY29uc3QgY2lwaGVyID0gdGhpcy5fZW5jcnlwdChidWZmZXIsIHRoaXMuX2tleSk7CiAgICAgIGl2ID0gY2lwaGVyOwogICAgICByZXN1bHQucHVzaChjaXBoZXIpOwogICAgICBidWZmZXIgPSBuZXcgVWludDhBcnJheSgxNik7CiAgICAgIGJ1ZmZlckxlbmd0aCA9IDA7CiAgICB9CiAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjsKICAgIHRoaXMuYnVmZmVyTGVuZ3RoID0gYnVmZmVyTGVuZ3RoOwogICAgdGhpcy5pdiA9IGl2OwogICAgaWYgKHJlc3VsdC5sZW5ndGggPT09IDApIHsKICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KDApOwogICAgfQogICAgY29uc3Qgb3V0cHV0TGVuZ3RoID0gMTYgKiByZXN1bHQubGVuZ3RoOwogICAgY29uc3Qgb3V0cHV0ID0gbmV3IFVpbnQ4QXJyYXkob3V0cHV0TGVuZ3RoKTsKICAgIGZvciAobGV0IGkgPSAwLCBqID0gMCwgaWkgPSByZXN1bHQubGVuZ3RoOyBpIDwgaWk7ICsraSwgaiArPSAxNikgewogICAgICBvdXRwdXQuc2V0KHJlc3VsdFtpXSwgaik7CiAgICB9CiAgICByZXR1cm4gb3V0cHV0OwogIH0KfQpjbGFzcyBBRVMxMjhDaXBoZXIgZXh0ZW5kcyBBRVNCYXNlQ2lwaGVyIHsKICBfcmNvbiA9IG5ldyBVaW50OEFycmF5KFsweDhkLCAweDAxLCAweDAyLCAweDA0LCAweDA4LCAweDEwLCAweDIwLCAweDQwLCAweDgwLCAweDFiLCAweDM2LCAweDZjLCAweGQ4LCAweGFiLCAweDRkLCAweDlhLCAweDJmLCAweDVlLCAweGJjLCAweDYzLCAweGM2LCAweDk3LCAweDM1LCAweDZhLCAweGQ0LCAweGIzLCAweDdkLCAweGZhLCAweGVmLCAweGM1LCAweDkxLCAweDM5LCAweDcyLCAweGU0LCAweGQzLCAweGJkLCAweDYxLCAweGMyLCAweDlmLCAweDI1LCAweDRhLCAweDk0LCAweDMzLCAweDY2LCAweGNjLCAweDgzLCAweDFkLCAweDNhLCAweDc0LCAweGU4LCAweGNiLCAweDhkLCAweDAxLCAweDAyLCAweDA0LCAweDA4LCAweDEwLCAweDIwLCAweDQwLCAweDgwLCAweDFiLCAweDM2LCAweDZjLCAweGQ4LCAweGFiLCAweDRkLCAweDlhLCAweDJmLCAweDVlLCAweGJjLCAweDYzLCAweGM2LCAweDk3LCAweDM1LCAweDZhLCAweGQ0LCAweGIzLCAweDdkLCAweGZhLCAweGVmLCAweGM1LCAweDkxLCAweDM5LCAweDcyLCAweGU0LCAweGQzLCAweGJkLCAweDYxLCAweGMyLCAweDlmLCAweDI1LCAweDRhLCAweDk0LCAweDMzLCAweDY2LCAweGNjLCAweDgzLCAweDFkLCAweDNhLCAweDc0LCAweGU4LCAweGNiLCAweDhkLCAweDAxLCAweDAyLCAweDA0LCAweDA4LCAweDEwLCAweDIwLCAweDQwLCAweDgwLCAweDFiLCAweDM2LCAweDZjLCAweGQ4LCAweGFiLCAweDRkLCAweDlhLCAweDJmLCAweDVlLCAweGJjLCAweDYzLCAweGM2LCAweDk3LCAweDM1LCAweDZhLCAweGQ0LCAweGIzLCAweDdkLCAweGZhLCAweGVmLCAweGM1LCAweDkxLCAweDM5LCAweDcyLCAweGU0LCAweGQzLCAweGJkLCAweDYxLCAweGMyLCAweDlmLCAweDI1LCAweDRhLCAweDk0LCAweDMzLCAweDY2LCAweGNjLCAweDgzLCAweDFkLCAweDNhLCAweDc0LCAweGU4LCAweGNiLCAweDhkLCAweDAxLCAweDAyLCAweDA0LCAweDA4LCAweDEwLCAweDIwLCAweDQwLCAweDgwLCAweDFiLCAweDM2LCAweDZjLCAweGQ4LCAweGFiLCAweDRkLCAweDlhLCAweDJmLCAweDVlLCAweGJjLCAweDYzLCAweGM2LCAweDk3LCAweDM1LCAweDZhLCAweGQ0LCAweGIzLCAweDdkLCAweGZhLCAweGVmLCAweGM1LCAweDkxLCAweDM5LCAweDcyLCAweGU0LCAweGQzLCAweGJkLCAweDYxLCAweGMyLCAweDlmLCAweDI1LCAweDRhLCAweDk0LCAweDMzLCAweDY2LCAweGNjLCAweDgzLCAweDFkLCAweDNhLCAweDc0LCAweGU4LCAweGNiLCAweDhkLCAweDAxLCAweDAyLCAweDA0LCAweDA4LCAweDEwLCAweDIwLCAweDQwLCAweDgwLCAweDFiLCAweDM2LCAweDZjLCAweGQ4LCAweGFiLCAweDRkLCAweDlhLCAweDJmLCAweDVlLCAweGJjLCAweDYzLCAweGM2LCAweDk3LCAweDM1LCAweDZhLCAweGQ0LCAweGIzLCAweDdkLCAweGZhLCAweGVmLCAweGM1LCAweDkxLCAweDM5LCAweDcyLCAweGU0LCAweGQzLCAweGJkLCAweDYxLCAweGMyLCAweDlmLCAweDI1LCAweDRhLCAweDk0LCAweDMzLCAweDY2LCAweGNjLCAweDgzLCAweDFkLCAweDNhLCAweDc0LCAweGU4LCAweGNiLCAweDhkXSk7CiAgY29uc3RydWN0b3Ioa2V5KSB7CiAgICBzdXBlcigpOwogICAgdGhpcy5fY3ljbGVzT2ZSZXBldGl0aW9uID0gMTA7CiAgICB0aGlzLl9rZXlTaXplID0gMTYwOwogICAgdGhpcy5fa2V5ID0gdGhpcy5fZXhwYW5kS2V5KGtleSk7CiAgfQogIF9leHBhbmRLZXkoY2lwaGVyS2V5KSB7CiAgICBjb25zdCBiID0gMTc2OwogICAgY29uc3QgcyA9IHRoaXMuX3M7CiAgICBjb25zdCByY29uID0gdGhpcy5fcmNvbjsKICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KGIpOwogICAgcmVzdWx0LnNldChjaXBoZXJLZXkpOwogICAgZm9yIChsZXQgaiA9IDE2LCBpID0gMTsgaiA8IGI7ICsraSkgewogICAgICBsZXQgdDEgPSByZXN1bHRbaiAtIDNdOwogICAgICBsZXQgdDIgPSByZXN1bHRbaiAtIDJdOwogICAgICBsZXQgdDMgPSByZXN1bHRbaiAtIDFdOwogICAgICBsZXQgdDQgPSByZXN1bHRbaiAtIDRdOwogICAgICB0MSA9IHNbdDFdOwogICAgICB0MiA9IHNbdDJdOwogICAgICB0MyA9IHNbdDNdOwogICAgICB0NCA9IHNbdDRdOwogICAgICB0MSBePSByY29uW2ldOwogICAgICBmb3IgKGxldCBuID0gMDsgbiA8IDQ7ICsrbikgewogICAgICAgIHJlc3VsdFtqXSA9IHQxIF49IHJlc3VsdFtqIC0gMTZdOwogICAgICAgIGorKzsKICAgICAgICByZXN1bHRbal0gPSB0MiBePSByZXN1bHRbaiAtIDE2XTsKICAgICAgICBqKys7CiAgICAgICAgcmVzdWx0W2pdID0gdDMgXj0gcmVzdWx0W2ogLSAxNl07CiAgICAgICAgaisrOwogICAgICAgIHJlc3VsdFtqXSA9IHQ0IF49IHJlc3VsdFtqIC0gMTZdOwogICAgICAgIGorKzsKICAgICAgfQogICAgfQogICAgcmV0dXJuIHJlc3VsdDsKICB9Cn0KY2xhc3MgQUVTMjU2Q2lwaGVyIGV4dGVuZHMgQUVTQmFzZUNpcGhlciB7CiAgY29uc3RydWN0b3Ioa2V5KSB7CiAgICBzdXBlcigpOwogICAgdGhpcy5fY3ljbGVzT2ZSZXBldGl0aW9uID0gMTQ7CiAgICB0aGlzLl9rZXlTaXplID0gMjI0OwogICAgdGhpcy5fa2V5ID0gdGhpcy5fZXhwYW5kS2V5KGtleSk7CiAgfQogIF9leHBhbmRLZXkoY2lwaGVyS2V5KSB7CiAgICBjb25zdCBiID0gMjQwOwogICAgY29uc3QgcyA9IHRoaXMuX3M7CiAgICBjb25zdCByZXN1bHQgPSBuZXcgVWludDhBcnJheShiKTsKICAgIHJlc3VsdC5zZXQoY2lwaGVyS2V5KTsKICAgIGxldCByID0gMTsKICAgIGxldCB0MSwgdDIsIHQzLCB0NDsKICAgIGZvciAobGV0IGogPSAzMiwgaSA9IDE7IGogPCBiOyArK2kpIHsKICAgICAgaWYgKGogJSAzMiA9PT0gMTYpIHsKICAgICAgICB0MSA9IHNbdDFdOwogICAgICAgIHQyID0gc1t0Ml07CiAgICAgICAgdDMgPSBzW3QzXTsKICAgICAgICB0NCA9IHNbdDRdOwogICAgICB9IGVsc2UgaWYgKGogJSAzMiA9PT0gMCkgewogICAgICAgIHQxID0gcmVzdWx0W2ogLSAzXTsKICAgICAgICB0MiA9IHJlc3VsdFtqIC0gMl07CiAgICAgICAgdDMgPSByZXN1bHRbaiAtIDFdOwogICAgICAgIHQ0ID0gcmVzdWx0W2ogLSA0XTsKICAgICAgICB0MSA9IHNbdDFdOwogICAgICAgIHQyID0gc1t0Ml07CiAgICAgICAgdDMgPSBzW3QzXTsKICAgICAgICB0NCA9IHNbdDRdOwogICAgICAgIHQxIF49IHI7CiAgICAgICAgaWYgKChyIDw8PSAxKSA+PSAyNTYpIHsKICAgICAgICAgIHIgPSAociBeIDB4MWIpICYgMHhmZjsKICAgICAgICB9CiAgICAgIH0KICAgICAgZm9yIChsZXQgbiA9IDA7IG4gPCA0OyArK24pIHsKICAgICAgICByZXN1bHRbal0gPSB0MSBePSByZXN1bHRbaiAtIDMyXTsKICAgICAgICBqKys7CiAgICAgICAgcmVzdWx0W2pdID0gdDIgXj0gcmVzdWx0W2ogLSAzMl07CiAgICAgICAgaisrOwogICAgICAgIHJlc3VsdFtqXSA9IHQzIF49IHJlc3VsdFtqIC0gMzJdOwogICAgICAgIGorKzsKICAgICAgICByZXN1bHRbal0gPSB0NCBePSByZXN1bHRbaiAtIDMyXTsKICAgICAgICBqKys7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiByZXN1bHQ7CiAgfQp9CmNsYXNzIFBERkJhc2UgewogIF9oYXNoKHBhc3N3b3JkLCBpbnB1dCwgdXNlckJ5dGVzKSB7CiAgICB1bnJlYWNoYWJsZSgiQWJzdHJhY3QgbWV0aG9kIGBfaGFzaGAgY2FsbGVkIik7CiAgfQogIGNoZWNrT3duZXJQYXNzd29yZChwYXNzd29yZCwgb3duZXJWYWxpZGF0aW9uU2FsdCwgdXNlckJ5dGVzLCBvd25lclBhc3N3b3JkKSB7CiAgICBjb25zdCBoYXNoRGF0YSA9IG5ldyBVaW50OEFycmF5KHBhc3N3b3JkLmxlbmd0aCArIDU2KTsKICAgIGhhc2hEYXRhLnNldChwYXNzd29yZCwgMCk7CiAgICBoYXNoRGF0YS5zZXQob3duZXJWYWxpZGF0aW9uU2FsdCwgcGFzc3dvcmQubGVuZ3RoKTsKICAgIGhhc2hEYXRhLnNldCh1c2VyQnl0ZXMsIHBhc3N3b3JkLmxlbmd0aCArIG93bmVyVmFsaWRhdGlvblNhbHQubGVuZ3RoKTsKICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX2hhc2gocGFzc3dvcmQsIGhhc2hEYXRhLCB1c2VyQnl0ZXMpOwogICAgcmV0dXJuIGlzQXJyYXlFcXVhbChyZXN1bHQsIG93bmVyUGFzc3dvcmQpOwogIH0KICBjaGVja1VzZXJQYXNzd29yZChwYXNzd29yZCwgdXNlclZhbGlkYXRpb25TYWx0LCB1c2VyUGFzc3dvcmQpIHsKICAgIGNvbnN0IGhhc2hEYXRhID0gbmV3IFVpbnQ4QXJyYXkocGFzc3dvcmQubGVuZ3RoICsgOCk7CiAgICBoYXNoRGF0YS5zZXQocGFzc3dvcmQsIDApOwogICAgaGFzaERhdGEuc2V0KHVzZXJWYWxpZGF0aW9uU2FsdCwgcGFzc3dvcmQubGVuZ3RoKTsKICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX2hhc2gocGFzc3dvcmQsIGhhc2hEYXRhLCBbXSk7CiAgICByZXR1cm4gaXNBcnJheUVxdWFsKHJlc3VsdCwgdXNlclBhc3N3b3JkKTsKICB9CiAgZ2V0T3duZXJLZXkocGFzc3dvcmQsIG93bmVyS2V5U2FsdCwgdXNlckJ5dGVzLCBvd25lckVuY3J5cHRpb24pIHsKICAgIGNvbnN0IGhhc2hEYXRhID0gbmV3IFVpbnQ4QXJyYXkocGFzc3dvcmQubGVuZ3RoICsgNTYpOwogICAgaGFzaERhdGEuc2V0KHBhc3N3b3JkLCAwKTsKICAgIGhhc2hEYXRhLnNldChvd25lcktleVNhbHQsIHBhc3N3b3JkLmxlbmd0aCk7CiAgICBoYXNoRGF0YS5zZXQodXNlckJ5dGVzLCBwYXNzd29yZC5sZW5ndGggKyBvd25lcktleVNhbHQubGVuZ3RoKTsKICAgIGNvbnN0IGtleSA9IHRoaXMuX2hhc2gocGFzc3dvcmQsIGhhc2hEYXRhLCB1c2VyQnl0ZXMpOwogICAgY29uc3QgY2lwaGVyID0gbmV3IEFFUzI1NkNpcGhlcihrZXkpOwogICAgcmV0dXJuIGNpcGhlci5kZWNyeXB0QmxvY2sob3duZXJFbmNyeXB0aW9uLCBmYWxzZSwgbmV3IFVpbnQ4QXJyYXkoMTYpKTsKICB9CiAgZ2V0VXNlcktleShwYXNzd29yZCwgdXNlcktleVNhbHQsIHVzZXJFbmNyeXB0aW9uKSB7CiAgICBjb25zdCBoYXNoRGF0YSA9IG5ldyBVaW50OEFycmF5KHBhc3N3b3JkLmxlbmd0aCArIDgpOwogICAgaGFzaERhdGEuc2V0KHBhc3N3b3JkLCAwKTsKICAgIGhhc2hEYXRhLnNldCh1c2VyS2V5U2FsdCwgcGFzc3dvcmQubGVuZ3RoKTsKICAgIGNvbnN0IGtleSA9IHRoaXMuX2hhc2gocGFzc3dvcmQsIGhhc2hEYXRhLCBbXSk7CiAgICBjb25zdCBjaXBoZXIgPSBuZXcgQUVTMjU2Q2lwaGVyKGtleSk7CiAgICByZXR1cm4gY2lwaGVyLmRlY3J5cHRCbG9jayh1c2VyRW5jcnlwdGlvbiwgZmFsc2UsIG5ldyBVaW50OEFycmF5KDE2KSk7CiAgfQp9CmNsYXNzIFBERjE3IGV4dGVuZHMgUERGQmFzZSB7CiAgX2hhc2gocGFzc3dvcmQsIGlucHV0LCB1c2VyQnl0ZXMpIHsKICAgIHJldHVybiBjYWxjdWxhdGVTSEEyNTYoaW5wdXQsIDAsIGlucHV0Lmxlbmd0aCk7CiAgfQp9CmNsYXNzIFBERjIwIGV4dGVuZHMgUERGQmFzZSB7CiAgX2hhc2gocGFzc3dvcmQsIGlucHV0LCB1c2VyQnl0ZXMpIHsKICAgIGxldCBrID0gY2FsY3VsYXRlU0hBMjU2KGlucHV0LCAwLCBpbnB1dC5sZW5ndGgpLnN1YmFycmF5KDAsIDMyKTsKICAgIGxldCBlID0gWzBdOwogICAgbGV0IGkgPSAwOwogICAgd2hpbGUgKGkgPCA2NCB8fCBlLmF0KC0xKSA+IGkgLSAzMikgewogICAgICBjb25zdCBjb21iaW5lZExlbmd0aCA9IHBhc3N3b3JkLmxlbmd0aCArIGsubGVuZ3RoICsgdXNlckJ5dGVzLmxlbmd0aCwKICAgICAgICBjb21iaW5lZEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoY29tYmluZWRMZW5ndGgpOwogICAgICBsZXQgd3JpdGVPZmZzZXQgPSAwOwogICAgICBjb21iaW5lZEFycmF5LnNldChwYXNzd29yZCwgd3JpdGVPZmZzZXQpOwogICAgICB3cml0ZU9mZnNldCArPSBwYXNzd29yZC5sZW5ndGg7CiAgICAgIGNvbWJpbmVkQXJyYXkuc2V0KGssIHdyaXRlT2Zmc2V0KTsKICAgICAgd3JpdGVPZmZzZXQgKz0gay5sZW5ndGg7CiAgICAgIGNvbWJpbmVkQXJyYXkuc2V0KHVzZXJCeXRlcywgd3JpdGVPZmZzZXQpOwogICAgICBjb25zdCBrMSA9IG5ldyBVaW50OEFycmF5KGNvbWJpbmVkTGVuZ3RoICogNjQpOwogICAgICBmb3IgKGxldCBqID0gMCwgcG9zID0gMDsgaiA8IDY0OyBqKyssIHBvcyArPSBjb21iaW5lZExlbmd0aCkgewogICAgICAgIGsxLnNldChjb21iaW5lZEFycmF5LCBwb3MpOwogICAgICB9CiAgICAgIGNvbnN0IGNpcGhlciA9IG5ldyBBRVMxMjhDaXBoZXIoay5zdWJhcnJheSgwLCAxNikpOwogICAgICBlID0gY2lwaGVyLmVuY3J5cHQoazEsIGsuc3ViYXJyYXkoMTYsIDMyKSk7CiAgICAgIGNvbnN0IHJlbWFpbmRlciA9IE1hdGguc3VtUHJlY2lzZShlLnNsaWNlKDAsIDE2KSkgJSAzOwogICAgICBpZiAocmVtYWluZGVyID09PSAwKSB7CiAgICAgICAgayA9IGNhbGN1bGF0ZVNIQTI1NihlLCAwLCBlLmxlbmd0aCk7CiAgICAgIH0gZWxzZSBpZiAocmVtYWluZGVyID09PSAxKSB7CiAgICAgICAgayA9IGNhbGN1bGF0ZVNIQTM4NChlLCAwLCBlLmxlbmd0aCk7CiAgICAgIH0gZWxzZSBpZiAocmVtYWluZGVyID09PSAyKSB7CiAgICAgICAgayA9IGNhbGN1bGF0ZVNIQTUxMihlLCAwLCBlLmxlbmd0aCk7CiAgICAgIH0KICAgICAgaSsrOwogICAgfQogICAgcmV0dXJuIGsuc3ViYXJyYXkoMCwgMzIpOwogIH0KfQpjbGFzcyBDaXBoZXJUcmFuc2Zvcm0gewogIGNvbnN0cnVjdG9yKHN0cmluZ0NpcGhlckNvbnN0cnVjdG9yLCBzdHJlYW1DaXBoZXJDb25zdHJ1Y3RvcikgewogICAgdGhpcy5TdHJpbmdDaXBoZXJDb25zdHJ1Y3RvciA9IHN0cmluZ0NpcGhlckNvbnN0cnVjdG9yOwogICAgdGhpcy5TdHJlYW1DaXBoZXJDb25zdHJ1Y3RvciA9IHN0cmVhbUNpcGhlckNvbnN0cnVjdG9yOwogIH0KICBjcmVhdGVTdHJlYW0oc3RyZWFtLCBsZW5ndGgpIHsKICAgIGNvbnN0IGNpcGhlciA9IG5ldyB0aGlzLlN0cmVhbUNpcGhlckNvbnN0cnVjdG9yKCk7CiAgICByZXR1cm4gbmV3IERlY3J5cHRTdHJlYW0oc3RyZWFtLCBsZW5ndGgsIGZ1bmN0aW9uIGNpcGhlclRyYW5zZm9ybURlY3J5cHRTdHJlYW0oZGF0YSwgZmluYWxpemUpIHsKICAgICAgcmV0dXJuIGNpcGhlci5kZWNyeXB0QmxvY2soZGF0YSwgZmluYWxpemUpOwogICAgfSk7CiAgfQogIGRlY3J5cHRTdHJpbmcocykgewogICAgY29uc3QgY2lwaGVyID0gbmV3IHRoaXMuU3RyaW5nQ2lwaGVyQ29uc3RydWN0b3IoKTsKICAgIGxldCBkYXRhID0gc3RyaW5nVG9CeXRlcyhzKTsKICAgIGRhdGEgPSBjaXBoZXIuZGVjcnlwdEJsb2NrKGRhdGEsIHRydWUpOwogICAgcmV0dXJuIGJ5dGVzVG9TdHJpbmcoZGF0YSk7CiAgfQogIGVuY3J5cHRTdHJpbmcocykgewogICAgY29uc3QgY2lwaGVyID0gbmV3IHRoaXMuU3RyaW5nQ2lwaGVyQ29uc3RydWN0b3IoKTsKICAgIGlmIChjaXBoZXIgaW5zdGFuY2VvZiBBRVNCYXNlQ2lwaGVyKSB7CiAgICAgIGNvbnN0IHN0ckxlbiA9IHMubGVuZ3RoOwogICAgICBjb25zdCBwYWQgPSAxNiAtIHN0ckxlbiAlIDE2OwogICAgICBzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUocGFkKS5yZXBlYXQocGFkKTsKICAgICAgY29uc3QgaXYgPSBuZXcgVWludDhBcnJheSgxNik7CiAgICAgIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMoaXYpOwogICAgICBsZXQgZGF0YSA9IHN0cmluZ1RvQnl0ZXMocyk7CiAgICAgIGRhdGEgPSBjaXBoZXIuZW5jcnlwdChkYXRhLCBpdik7CiAgICAgIGNvbnN0IGJ1ZiA9IG5ldyBVaW50OEFycmF5KDE2ICsgZGF0YS5sZW5ndGgpOwogICAgICBidWYuc2V0KGl2KTsKICAgICAgYnVmLnNldChkYXRhLCAxNik7CiAgICAgIHJldHVybiBieXRlc1RvU3RyaW5nKGJ1Zik7CiAgICB9CiAgICBsZXQgZGF0YSA9IHN0cmluZ1RvQnl0ZXMocyk7CiAgICBkYXRhID0gY2lwaGVyLmVuY3J5cHQoZGF0YSk7CiAgICByZXR1cm4gYnl0ZXNUb1N0cmluZyhkYXRhKTsKICB9Cn0KY2xhc3MgQ2lwaGVyVHJhbnNmb3JtRmFjdG9yeSB7CiAgc3RhdGljIGdldCBfZGVmYXVsdFBhc3N3b3JkQnl0ZXMoKSB7CiAgICByZXR1cm4gc2hhZG93KHRoaXMsICJfZGVmYXVsdFBhc3N3b3JkQnl0ZXMiLCBuZXcgVWludDhBcnJheShbMHgyOCwgMHhiZiwgMHg0ZSwgMHg1ZSwgMHg0ZSwgMHg3NSwgMHg4YSwgMHg0MSwgMHg2NCwgMHgwMCwgMHg0ZSwgMHg1NiwgMHhmZiwgMHhmYSwgMHgwMSwgMHgwOCwgMHgyZSwgMHgyZSwgMHgwMCwgMHhiNiwgMHhkMCwgMHg2OCwgMHgzZSwgMHg4MCwgMHgyZiwgMHgwYywgMHhhOSwgMHhmZSwgMHg2NCwgMHg1MywgMHg2OSwgMHg3YV0pKTsKICB9CiAgI2NyZWF0ZUVuY3J5cHRpb25LZXkyMChyZXZpc2lvbiwgcGFzc3dvcmQsIG93bmVyUGFzc3dvcmQsIG93bmVyVmFsaWRhdGlvblNhbHQsIG93bmVyS2V5U2FsdCwgdUJ5dGVzLCB1c2VyUGFzc3dvcmQsIHVzZXJWYWxpZGF0aW9uU2FsdCwgdXNlcktleVNhbHQsIG93bmVyRW5jcnlwdGlvbiwgdXNlckVuY3J5cHRpb24sIHBlcm1zKSB7CiAgICBpZiAocGFzc3dvcmQpIHsKICAgICAgY29uc3QgcGFzc3dvcmRMZW5ndGggPSBNYXRoLm1pbigxMjcsIHBhc3N3b3JkLmxlbmd0aCk7CiAgICAgIHBhc3N3b3JkID0gcGFzc3dvcmQuc3ViYXJyYXkoMCwgcGFzc3dvcmRMZW5ndGgpOwogICAgfSBlbHNlIHsKICAgICAgcGFzc3dvcmQgPSBbXTsKICAgIH0KICAgIGNvbnN0IHBkZkFsZ29yaXRobSA9IHJldmlzaW9uID09PSA2ID8gbmV3IFBERjIwKCkgOiBuZXcgUERGMTcoKTsKICAgIGlmIChwZGZBbGdvcml0aG0uY2hlY2tVc2VyUGFzc3dvcmQocGFzc3dvcmQsIHVzZXJWYWxpZGF0aW9uU2FsdCwgdXNlclBhc3N3b3JkKSkgewogICAgICByZXR1cm4gcGRmQWxnb3JpdGhtLmdldFVzZXJLZXkocGFzc3dvcmQsIHVzZXJLZXlTYWx0LCB1c2VyRW5jcnlwdGlvbik7CiAgICB9IGVsc2UgaWYgKHBhc3N3b3JkLmxlbmd0aCAmJiBwZGZBbGdvcml0aG0uY2hlY2tPd25lclBhc3N3b3JkKHBhc3N3b3JkLCBvd25lclZhbGlkYXRpb25TYWx0LCB1Qnl0ZXMsIG93bmVyUGFzc3dvcmQpKSB7CiAgICAgIHJldHVybiBwZGZBbGdvcml0aG0uZ2V0T3duZXJLZXkocGFzc3dvcmQsIG93bmVyS2V5U2FsdCwgdUJ5dGVzLCBvd25lckVuY3J5cHRpb24pOwogICAgfQogICAgcmV0dXJuIG51bGw7CiAgfQogICNwcmVwYXJlS2V5RGF0YShmaWxlSWQsIHBhc3N3b3JkLCBvd25lclBhc3N3b3JkLCB1c2VyUGFzc3dvcmQsIGZsYWdzLCByZXZpc2lvbiwga2V5TGVuZ3RoLCBlbmNyeXB0TWV0YWRhdGEpIHsKICAgIGNvbnN0IGhhc2hEYXRhU2l6ZSA9IDQwICsgb3duZXJQYXNzd29yZC5sZW5ndGggKyBmaWxlSWQubGVuZ3RoOwogICAgY29uc3QgaGFzaERhdGEgPSBuZXcgVWludDhBcnJheShoYXNoRGF0YVNpemUpOwogICAgbGV0IGkgPSAwLAogICAgICBqLAogICAgICBuOwogICAgaWYgKHBhc3N3b3JkKSB7CiAgICAgIG4gPSBNYXRoLm1pbigzMiwgcGFzc3dvcmQubGVuZ3RoKTsKICAgICAgZm9yICg7IGkgPCBuOyArK2kpIHsKICAgICAgICBoYXNoRGF0YVtpXSA9IHBhc3N3b3JkW2ldOwogICAgICB9CiAgICB9CiAgICBqID0gMDsKICAgIHdoaWxlIChpIDwgMzIpIHsKICAgICAgaGFzaERhdGFbaSsrXSA9IENpcGhlclRyYW5zZm9ybUZhY3RvcnkuX2RlZmF1bHRQYXNzd29yZEJ5dGVzW2orK107CiAgICB9CiAgICBoYXNoRGF0YS5zZXQob3duZXJQYXNzd29yZCwgaSk7CiAgICBpICs9IG93bmVyUGFzc3dvcmQubGVuZ3RoOwogICAgaGFzaERhdGFbaSsrXSA9IGZsYWdzICYgMHhmZjsKICAgIGhhc2hEYXRhW2krK10gPSBmbGFncyA+PiA4ICYgMHhmZjsKICAgIGhhc2hEYXRhW2krK10gPSBmbGFncyA+PiAxNiAmIDB4ZmY7CiAgICBoYXNoRGF0YVtpKytdID0gZmxhZ3MgPj4+IDI0ICYgMHhmZjsKICAgIGhhc2hEYXRhLnNldChmaWxlSWQsIGkpOwogICAgaSArPSBmaWxlSWQubGVuZ3RoOwogICAgaWYgKHJldmlzaW9uID49IDQgJiYgIWVuY3J5cHRNZXRhZGF0YSkgewogICAgICBoYXNoRGF0YS5maWxsKDB4ZmYsIGksIGkgKyA0KTsKICAgICAgaSArPSA0OwogICAgfQogICAgbGV0IGhhc2ggPSBjYWxjdWxhdGVNRDUoaGFzaERhdGEsIDAsIGkpOwogICAgY29uc3Qga2V5TGVuZ3RoSW5CeXRlcyA9IGtleUxlbmd0aCA+PiAzOwogICAgaWYgKHJldmlzaW9uID49IDMpIHsKICAgICAgZm9yIChqID0gMDsgaiA8IDUwOyArK2opIHsKICAgICAgICBoYXNoID0gY2FsY3VsYXRlTUQ1KGhhc2gsIDAsIGtleUxlbmd0aEluQnl0ZXMpOwogICAgICB9CiAgICB9CiAgICBjb25zdCBlbmNyeXB0aW9uS2V5ID0gaGFzaC5zdWJhcnJheSgwLCBrZXlMZW5ndGhJbkJ5dGVzKTsKICAgIGxldCBjaXBoZXIsIGNoZWNrRGF0YTsKICAgIGlmIChyZXZpc2lvbiA+PSAzKSB7CiAgICAgIGkgPSAwOwogICAgICBoYXNoRGF0YS5zZXQoQ2lwaGVyVHJhbnNmb3JtRmFjdG9yeS5fZGVmYXVsdFBhc3N3b3JkQnl0ZXMsIGkpOwogICAgICBpICs9IDMyOwogICAgICBoYXNoRGF0YS5zZXQoZmlsZUlkLCBpKTsKICAgICAgaSArPSBmaWxlSWQubGVuZ3RoOwogICAgICBjaXBoZXIgPSBuZXcgQVJDRm91ckNpcGhlcihlbmNyeXB0aW9uS2V5KTsKICAgICAgY2hlY2tEYXRhID0gY2lwaGVyLmVuY3J5cHRCbG9jayhjYWxjdWxhdGVNRDUoaGFzaERhdGEsIDAsIGkpKTsKICAgICAgbiA9IGVuY3J5cHRpb25LZXkubGVuZ3RoOwogICAgICBjb25zdCBkZXJpdmVkS2V5ID0gbmV3IFVpbnQ4QXJyYXkobik7CiAgICAgIGZvciAoaiA9IDE7IGogPD0gMTk7ICsraikgewogICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgbjsgKytrKSB7CiAgICAgICAgICBkZXJpdmVkS2V5W2tdID0gZW5jcnlwdGlvbktleVtrXSBeIGo7CiAgICAgICAgfQogICAgICAgIGNpcGhlciA9IG5ldyBBUkNGb3VyQ2lwaGVyKGRlcml2ZWRLZXkpOwogICAgICAgIGNoZWNrRGF0YSA9IGNpcGhlci5lbmNyeXB0QmxvY2soY2hlY2tEYXRhKTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgY2lwaGVyID0gbmV3IEFSQ0ZvdXJDaXBoZXIoZW5jcnlwdGlvbktleSk7CiAgICAgIGNoZWNrRGF0YSA9IGNpcGhlci5lbmNyeXB0QmxvY2soQ2lwaGVyVHJhbnNmb3JtRmFjdG9yeS5fZGVmYXVsdFBhc3N3b3JkQnl0ZXMpOwogICAgfQogICAgcmV0dXJuIGNoZWNrRGF0YS5ldmVyeSgoZGF0YSwgaykgPT4gdXNlclBhc3N3b3JkW2tdID09PSBkYXRhKSA/IGVuY3J5cHRpb25LZXkgOiBudWxsOwogIH0KICAjZGVjb2RlVXNlclBhc3N3b3JkKHBhc3N3b3JkLCBvd25lclBhc3N3b3JkLCByZXZpc2lvbiwga2V5TGVuZ3RoKSB7CiAgICBjb25zdCBoYXNoRGF0YSA9IG5ldyBVaW50OEFycmF5KDMyKTsKICAgIGxldCBpID0gMDsKICAgIGNvbnN0IG4gPSBNYXRoLm1pbigzMiwgcGFzc3dvcmQubGVuZ3RoKTsKICAgIGZvciAoOyBpIDwgbjsgKytpKSB7CiAgICAgIGhhc2hEYXRhW2ldID0gcGFzc3dvcmRbaV07CiAgICB9CiAgICBsZXQgaiA9IDA7CiAgICB3aGlsZSAoaSA8IDMyKSB7CiAgICAgIGhhc2hEYXRhW2krK10gPSBDaXBoZXJUcmFuc2Zvcm1GYWN0b3J5Ll9kZWZhdWx0UGFzc3dvcmRCeXRlc1tqKytdOwogICAgfQogICAgbGV0IGhhc2ggPSBjYWxjdWxhdGVNRDUoaGFzaERhdGEsIDAsIGkpOwogICAgY29uc3Qga2V5TGVuZ3RoSW5CeXRlcyA9IGtleUxlbmd0aCA+PiAzOwogICAgaWYgKHJldmlzaW9uID49IDMpIHsKICAgICAgZm9yIChqID0gMDsgaiA8IDUwOyArK2opIHsKICAgICAgICBoYXNoID0gY2FsY3VsYXRlTUQ1KGhhc2gsIDAsIGhhc2gubGVuZ3RoKTsKICAgICAgfQogICAgfQogICAgbGV0IGNpcGhlciwgdXNlclBhc3N3b3JkOwogICAgaWYgKHJldmlzaW9uID49IDMpIHsKICAgICAgdXNlclBhc3N3b3JkID0gb3duZXJQYXNzd29yZDsKICAgICAgY29uc3QgZGVyaXZlZEtleSA9IG5ldyBVaW50OEFycmF5KGtleUxlbmd0aEluQnl0ZXMpOwogICAgICBmb3IgKGogPSAxOTsgaiA+PSAwOyBqLS0pIHsKICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IGtleUxlbmd0aEluQnl0ZXM7ICsraykgewogICAgICAgICAgZGVyaXZlZEtleVtrXSA9IGhhc2hba10gXiBqOwogICAgICAgIH0KICAgICAgICBjaXBoZXIgPSBuZXcgQVJDRm91ckNpcGhlcihkZXJpdmVkS2V5KTsKICAgICAgICB1c2VyUGFzc3dvcmQgPSBjaXBoZXIuZW5jcnlwdEJsb2NrKHVzZXJQYXNzd29yZCk7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGNpcGhlciA9IG5ldyBBUkNGb3VyQ2lwaGVyKGhhc2guc3ViYXJyYXkoMCwga2V5TGVuZ3RoSW5CeXRlcykpOwogICAgICB1c2VyUGFzc3dvcmQgPSBjaXBoZXIuZW5jcnlwdEJsb2NrKG93bmVyUGFzc3dvcmQpOwogICAgfQogICAgcmV0dXJuIHVzZXJQYXNzd29yZDsKICB9CiAgI2J1aWxkT2JqZWN0S2V5KG51bSwgZ2VuLCBlbmNyeXB0aW9uS2V5LCBpc0FlcyA9IGZhbHNlKSB7CiAgICBjb25zdCBuID0gZW5jcnlwdGlvbktleS5sZW5ndGg7CiAgICBjb25zdCBrZXkgPSBuZXcgVWludDhBcnJheShuICsgOSk7CiAgICBrZXkuc2V0KGVuY3J5cHRpb25LZXkpOwogICAgbGV0IGkgPSBuOwogICAga2V5W2krK10gPSBudW0gJiAweGZmOwogICAga2V5W2krK10gPSBudW0gPj4gOCAmIDB4ZmY7CiAgICBrZXlbaSsrXSA9IG51bSA+PiAxNiAmIDB4ZmY7CiAgICBrZXlbaSsrXSA9IGdlbiAmIDB4ZmY7CiAgICBrZXlbaSsrXSA9IGdlbiA+PiA4ICYgMHhmZjsKICAgIGlmIChpc0FlcykgewogICAgICBrZXlbaSsrXSA9IDB4NzM7CiAgICAgIGtleVtpKytdID0gMHg0MTsKICAgICAga2V5W2krK10gPSAweDZjOwogICAgICBrZXlbaSsrXSA9IDB4NTQ7CiAgICB9CiAgICBjb25zdCBoYXNoID0gY2FsY3VsYXRlTUQ1KGtleSwgMCwgaSk7CiAgICByZXR1cm4gaGFzaC5zdWJhcnJheSgwLCBNYXRoLm1pbihuICsgNSwgMTYpKTsKICB9CiAgI2J1aWxkQ2lwaGVyQ29uc3RydWN0b3IoY2YsIG5hbWUsIG51bSwgZ2VuLCBrZXkpIHsKICAgIGlmICghKG5hbWUgaW5zdGFuY2VvZiBOYW1lKSkgewogICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoIkludmFsaWQgY3J5cHQgZmlsdGVyIG5hbWUuIik7CiAgICB9CiAgICBjb25zdCBzZWxmID0gdGhpczsKICAgIGNvbnN0IGNyeXB0RmlsdGVyID0gY2YuZ2V0KG5hbWUubmFtZSk7CiAgICBjb25zdCBjZm0gPSBjcnlwdEZpbHRlcj8uZ2V0KCJDRk0iKTsKICAgIGlmICghY2ZtIHx8IGNmbS5uYW1lID09PSAiTm9uZSIpIHsKICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gbmV3IE51bGxDaXBoZXIoKTsKICAgICAgfTsKICAgIH0KICAgIGlmIChjZm0ubmFtZSA9PT0gIlYyIikgewogICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBuZXcgQVJDRm91ckNpcGhlcihzZWxmLiNidWlsZE9iamVjdEtleShudW0sIGdlbiwga2V5LCBmYWxzZSkpOwogICAgICB9OwogICAgfQogICAgaWYgKGNmbS5uYW1lID09PSAiQUVTVjIiKSB7CiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIG5ldyBBRVMxMjhDaXBoZXIoc2VsZi4jYnVpbGRPYmplY3RLZXkobnVtLCBnZW4sIGtleSwgdHJ1ZSkpOwogICAgICB9OwogICAgfQogICAgaWYgKGNmbS5uYW1lID09PSAiQUVTVjMiKSB7CiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIG5ldyBBRVMyNTZDaXBoZXIoa2V5KTsKICAgICAgfTsKICAgIH0KICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigiVW5rbm93biBjcnlwdG8gbWV0aG9kIik7CiAgfQogIGNvbnN0cnVjdG9yKGRpY3QsIGZpbGVJZCwgcGFzc3dvcmQpIHsKICAgIGNvbnN0IGZpbHRlciA9IGRpY3QuZ2V0KCJGaWx0ZXIiKTsKICAgIGlmICghaXNOYW1lKGZpbHRlciwgIlN0YW5kYXJkIikpIHsKICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCJ1bmtub3duIGVuY3J5cHRpb24gbWV0aG9kIik7CiAgICB9CiAgICB0aGlzLmZpbHRlck5hbWUgPSBmaWx0ZXIubmFtZTsKICAgIHRoaXMuZGljdCA9IGRpY3Q7CiAgICBjb25zdCBhbGdvcml0aG0gPSBkaWN0LmdldCgiViIpOwogICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKGFsZ29yaXRobSkgfHwgYWxnb3JpdGhtICE9PSAxICYmIGFsZ29yaXRobSAhPT0gMiAmJiBhbGdvcml0aG0gIT09IDQgJiYgYWxnb3JpdGhtICE9PSA1KSB7CiAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigidW5zdXBwb3J0ZWQgZW5jcnlwdGlvbiBhbGdvcml0aG0iKTsKICAgIH0KICAgIHRoaXMuYWxnb3JpdGhtID0gYWxnb3JpdGhtOwogICAgbGV0IGtleUxlbmd0aCA9IGRpY3QuZ2V0KCJMZW5ndGgiKTsKICAgIGlmICgha2V5TGVuZ3RoKSB7CiAgICAgIGlmIChhbGdvcml0aG0gPD0gMykgewogICAgICAgIGtleUxlbmd0aCA9IDQwOwogICAgICB9IGVsc2UgewogICAgICAgIGNvbnN0IGNmRGljdCA9IGRpY3QuZ2V0KCJDRiIpOwogICAgICAgIGNvbnN0IHN0cmVhbUNyeXB0b05hbWUgPSBkaWN0LmdldCgiU3RtRiIpOwogICAgICAgIGlmIChjZkRpY3QgaW5zdGFuY2VvZiBEaWN0ICYmIHN0cmVhbUNyeXB0b05hbWUgaW5zdGFuY2VvZiBOYW1lKSB7CiAgICAgICAgICBjZkRpY3Quc3VwcHJlc3NFbmNyeXB0aW9uID0gdHJ1ZTsKICAgICAgICAgIGNvbnN0IGhhbmRsZXJEaWN0ID0gY2ZEaWN0LmdldChzdHJlYW1DcnlwdG9OYW1lLm5hbWUpOwogICAgICAgICAga2V5TGVuZ3RoID0gaGFuZGxlckRpY3Q/LmdldCgiTGVuZ3RoIikgfHwgMTI4OwogICAgICAgICAgaWYgKGtleUxlbmd0aCA8IDQwKSB7CiAgICAgICAgICAgIGtleUxlbmd0aCA8PD0gMzsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihrZXlMZW5ndGgpIHx8IGtleUxlbmd0aCA8IDQwIHx8IGtleUxlbmd0aCAlIDggIT09IDApIHsKICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCJpbnZhbGlkIGtleSBsZW5ndGgiKTsKICAgIH0KICAgIGNvbnN0IG93bmVyQnl0ZXMgPSBzdHJpbmdUb0J5dGVzKGRpY3QuZ2V0KCJPIikpLAogICAgICB1c2VyQnl0ZXMgPSBzdHJpbmdUb0J5dGVzKGRpY3QuZ2V0KCJVIikpOwogICAgY29uc3Qgb3duZXJQYXNzd29yZCA9IG93bmVyQnl0ZXMuc3ViYXJyYXkoMCwgMzIpOwogICAgY29uc3QgdXNlclBhc3N3b3JkID0gdXNlckJ5dGVzLnN1YmFycmF5KDAsIDMyKTsKICAgIGNvbnN0IGZsYWdzID0gZGljdC5nZXQoIlAiKTsKICAgIGNvbnN0IHJldmlzaW9uID0gZGljdC5nZXQoIlIiKTsKICAgIGNvbnN0IGVuY3J5cHRNZXRhZGF0YSA9IChhbGdvcml0aG0gPT09IDQgfHwgYWxnb3JpdGhtID09PSA1KSAmJiBkaWN0LmdldCgiRW5jcnlwdE1ldGFkYXRhIikgIT09IGZhbHNlOwogICAgdGhpcy5lbmNyeXB0TWV0YWRhdGEgPSBlbmNyeXB0TWV0YWRhdGE7CiAgICBjb25zdCBmaWxlSWRCeXRlcyA9IHN0cmluZ1RvQnl0ZXMoZmlsZUlkKTsKICAgIGxldCBwYXNzd29yZEJ5dGVzOwogICAgaWYgKHBhc3N3b3JkKSB7CiAgICAgIGlmIChyZXZpc2lvbiA9PT0gNikgewogICAgICAgIHRyeSB7CiAgICAgICAgICBwYXNzd29yZCA9IHV0ZjhTdHJpbmdUb1N0cmluZyhwYXNzd29yZCk7CiAgICAgICAgfSBjYXRjaCB7CiAgICAgICAgICB3YXJuKCJDaXBoZXJUcmFuc2Zvcm1GYWN0b3J5OiBVbmFibGUgdG8gY29udmVydCBVVEY4IGVuY29kZWQgcGFzc3dvcmQuIik7CiAgICAgICAgfQogICAgICB9CiAgICAgIHBhc3N3b3JkQnl0ZXMgPSBzdHJpbmdUb0J5dGVzKHBhc3N3b3JkKTsKICAgIH0KICAgIGxldCBlbmNyeXB0aW9uS2V5OwogICAgaWYgKGFsZ29yaXRobSAhPT0gNSkgewogICAgICBlbmNyeXB0aW9uS2V5ID0gdGhpcy4jcHJlcGFyZUtleURhdGEoZmlsZUlkQnl0ZXMsIHBhc3N3b3JkQnl0ZXMsIG93bmVyUGFzc3dvcmQsIHVzZXJQYXNzd29yZCwgZmxhZ3MsIHJldmlzaW9uLCBrZXlMZW5ndGgsIGVuY3J5cHRNZXRhZGF0YSk7CiAgICB9IGVsc2UgewogICAgICBjb25zdCBvd25lclZhbGlkYXRpb25TYWx0ID0gb3duZXJCeXRlcy5zdWJhcnJheSgzMiwgNDApOwogICAgICBjb25zdCBvd25lcktleVNhbHQgPSBvd25lckJ5dGVzLnN1YmFycmF5KDQwLCA0OCk7CiAgICAgIGNvbnN0IHVCeXRlcyA9IHVzZXJCeXRlcy5zdWJhcnJheSgwLCA0OCk7CiAgICAgIGNvbnN0IHVzZXJWYWxpZGF0aW9uU2FsdCA9IHVzZXJCeXRlcy5zdWJhcnJheSgzMiwgNDApOwogICAgICBjb25zdCB1c2VyS2V5U2FsdCA9IHVzZXJCeXRlcy5zdWJhcnJheSg0MCwgNDgpOwogICAgICBjb25zdCBvd25lckVuY3J5cHRpb24gPSBzdHJpbmdUb0J5dGVzKGRpY3QuZ2V0KCJPRSIpKTsKICAgICAgY29uc3QgdXNlckVuY3J5cHRpb24gPSBzdHJpbmdUb0J5dGVzKGRpY3QuZ2V0KCJVRSIpKTsKICAgICAgY29uc3QgcGVybXMgPSBzdHJpbmdUb0J5dGVzKGRpY3QuZ2V0KCJQZXJtcyIpKTsKICAgICAgZW5jcnlwdGlvbktleSA9IHRoaXMuI2NyZWF0ZUVuY3J5cHRpb25LZXkyMChyZXZpc2lvbiwgcGFzc3dvcmRCeXRlcywgb3duZXJQYXNzd29yZCwgb3duZXJWYWxpZGF0aW9uU2FsdCwgb3duZXJLZXlTYWx0LCB1Qnl0ZXMsIHVzZXJQYXNzd29yZCwgdXNlclZhbGlkYXRpb25TYWx0LCB1c2VyS2V5U2FsdCwgb3duZXJFbmNyeXB0aW9uLCB1c2VyRW5jcnlwdGlvbiwgcGVybXMpOwogICAgfQogICAgaWYgKCFlbmNyeXB0aW9uS2V5KSB7CiAgICAgIGlmICghcGFzc3dvcmQpIHsKICAgICAgICB0aHJvdyBuZXcgUGFzc3dvcmRFeGNlcHRpb24oIk5vIHBhc3N3b3JkIGdpdmVuIiwgUGFzc3dvcmRSZXNwb25zZXMuTkVFRF9QQVNTV09SRCk7CiAgICAgIH0KICAgICAgY29uc3QgZGVjb2RlZFBhc3N3b3JkID0gdGhpcy4jZGVjb2RlVXNlclBhc3N3b3JkKHBhc3N3b3JkQnl0ZXMsIG93bmVyUGFzc3dvcmQsIHJldmlzaW9uLCBrZXlMZW5ndGgpOwogICAgICBlbmNyeXB0aW9uS2V5ID0gdGhpcy4jcHJlcGFyZUtleURhdGEoZmlsZUlkQnl0ZXMsIGRlY29kZWRQYXNzd29yZCwgb3duZXJQYXNzd29yZCwgdXNlclBhc3N3b3JkLCBmbGFncywgcmV2aXNpb24sIGtleUxlbmd0aCwgZW5jcnlwdE1ldGFkYXRhKTsKICAgIH0KICAgIGlmICghZW5jcnlwdGlvbktleSkgewogICAgICB0aHJvdyBuZXcgUGFzc3dvcmRFeGNlcHRpb24oIkluY29ycmVjdCBQYXNzd29yZCIsIFBhc3N3b3JkUmVzcG9uc2VzLklOQ09SUkVDVF9QQVNTV09SRCk7CiAgICB9CiAgICBpZiAoYWxnb3JpdGhtID09PSA0ICYmIGVuY3J5cHRpb25LZXkubGVuZ3RoIDwgMTYpIHsKICAgICAgdGhpcy5lbmNyeXB0aW9uS2V5ID0gbmV3IFVpbnQ4QXJyYXkoMTYpOwogICAgICB0aGlzLmVuY3J5cHRpb25LZXkuc2V0KGVuY3J5cHRpb25LZXkpOwogICAgfSBlbHNlIHsKICAgICAgdGhpcy5lbmNyeXB0aW9uS2V5ID0gZW5jcnlwdGlvbktleTsKICAgIH0KICAgIGlmIChhbGdvcml0aG0gPj0gNCkgewogICAgICBjb25zdCBjZiA9IGRpY3QuZ2V0KCJDRiIpOwogICAgICBpZiAoY2YgaW5zdGFuY2VvZiBEaWN0KSB7CiAgICAgICAgY2Yuc3VwcHJlc3NFbmNyeXB0aW9uID0gdHJ1ZTsKICAgICAgfQogICAgICB0aGlzLmNmID0gY2Y7CiAgICAgIHRoaXMuc3RtZiA9IGRpY3QuZ2V0KCJTdG1GIikgfHwgTmFtZS5nZXQoIklkZW50aXR5Iik7CiAgICAgIHRoaXMuc3RyZiA9IGRpY3QuZ2V0KCJTdHJGIikgfHwgTmFtZS5nZXQoIklkZW50aXR5Iik7CiAgICAgIHRoaXMuZWZmID0gZGljdC5nZXQoIkVGRiIpIHx8IHRoaXMuc3RtZjsKICAgIH0KICB9CiAgY3JlYXRlQ2lwaGVyVHJhbnNmb3JtKG51bSwgZ2VuKSB7CiAgICBpZiAodGhpcy5hbGdvcml0aG0gPT09IDQgfHwgdGhpcy5hbGdvcml0aG0gPT09IDUpIHsKICAgICAgcmV0dXJuIG5ldyBDaXBoZXJUcmFuc2Zvcm0odGhpcy4jYnVpbGRDaXBoZXJDb25zdHJ1Y3Rvcih0aGlzLmNmLCB0aGlzLnN0cmYsIG51bSwgZ2VuLCB0aGlzLmVuY3J5cHRpb25LZXkpLCB0aGlzLiNidWlsZENpcGhlckNvbnN0cnVjdG9yKHRoaXMuY2YsIHRoaXMuc3RtZiwgbnVtLCBnZW4sIHRoaXMuZW5jcnlwdGlvbktleSkpOwogICAgfQogICAgY29uc3Qga2V5ID0gdGhpcy4jYnVpbGRPYmplY3RLZXkobnVtLCBnZW4sIHRoaXMuZW5jcnlwdGlvbktleSwgZmFsc2UpOwogICAgY29uc3QgY2lwaGVyQ29uc3RydWN0b3IgPSBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBuZXcgQVJDRm91ckNpcGhlcihrZXkpOwogICAgfTsKICAgIHJldHVybiBuZXcgQ2lwaGVyVHJhbnNmb3JtKGNpcGhlckNvbnN0cnVjdG9yLCBjaXBoZXJDb25zdHJ1Y3Rvcik7CiAgfQp9Cgo7Ly8gLi9zcmMvY29yZS94cmVmLmpzCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpjbGFzcyBYUmVmIHsKICAjZmlyc3RYUmVmU3RtUG9zID0gbnVsbDsKICBjb25zdHJ1Y3RvcihzdHJlYW0sIHBkZk1hbmFnZXIpIHsKICAgIHRoaXMuc3RyZWFtID0gc3RyZWFtOwogICAgdGhpcy5wZGZNYW5hZ2VyID0gcGRmTWFuYWdlcjsKICAgIHRoaXMuZW50cmllcyA9IFtdOwogICAgdGhpcy5feHJlZlN0bXMgPSBuZXcgU2V0KCk7CiAgICB0aGlzLl9jYWNoZU1hcCA9IG5ldyBNYXAoKTsKICAgIHRoaXMuX3BlbmRpbmdSZWZzID0gbmV3IFJlZlNldCgpOwogICAgdGhpcy5fbmV3UGVyc2lzdGVudFJlZk51bSA9IG51bGw7CiAgICB0aGlzLl9uZXdUZW1wb3JhcnlSZWZOdW0gPSBudWxsOwogICAgdGhpcy5fcGVyc2lzdGVudFJlZnNDYWNoZSA9IG51bGw7CiAgfQogIGdldE5ld1BlcnNpc3RlbnRSZWYob2JqKSB7CiAgICBpZiAodGhpcy5fbmV3UGVyc2lzdGVudFJlZk51bSA9PT0gbnVsbCkgewogICAgICB0aGlzLl9uZXdQZXJzaXN0ZW50UmVmTnVtID0gdGhpcy5lbnRyaWVzLmxlbmd0aCB8fCAxOwogICAgfQogICAgY29uc3QgbnVtID0gdGhpcy5fbmV3UGVyc2lzdGVudFJlZk51bSsrOwogICAgdGhpcy5fY2FjaGVNYXAuc2V0KG51bSwgb2JqKTsKICAgIHJldHVybiBSZWYuZ2V0KG51bSwgMCk7CiAgfQogIGdldE5ld1RlbXBvcmFyeVJlZigpIHsKICAgIGlmICh0aGlzLl9uZXdUZW1wb3JhcnlSZWZOdW0gPT09IG51bGwpIHsKICAgICAgdGhpcy5fbmV3VGVtcG9yYXJ5UmVmTnVtID0gdGhpcy5lbnRyaWVzLmxlbmd0aCB8fCAxOwogICAgICBpZiAodGhpcy5fbmV3UGVyc2lzdGVudFJlZk51bSkgewogICAgICAgIHRoaXMuX3BlcnNpc3RlbnRSZWZzQ2FjaGUgPSBuZXcgTWFwKCk7CiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuX25ld1RlbXBvcmFyeVJlZk51bTsgaSA8IHRoaXMuX25ld1BlcnNpc3RlbnRSZWZOdW07IGkrKykgewogICAgICAgICAgdGhpcy5fcGVyc2lzdGVudFJlZnNDYWNoZS5zZXQoaSwgdGhpcy5fY2FjaGVNYXAuZ2V0KGkpKTsKICAgICAgICAgIHRoaXMuX2NhY2hlTWFwLmRlbGV0ZShpKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBSZWYuZ2V0KHRoaXMuX25ld1RlbXBvcmFyeVJlZk51bSsrLCAwKTsKICB9CiAgcmVzZXROZXdUZW1wb3JhcnlSZWYoKSB7CiAgICB0aGlzLl9uZXdUZW1wb3JhcnlSZWZOdW0gPSBudWxsOwogICAgaWYgKHRoaXMuX3BlcnNpc3RlbnRSZWZzQ2FjaGUpIHsKICAgICAgZm9yIChjb25zdCBbbnVtLCBvYmpdIG9mIHRoaXMuX3BlcnNpc3RlbnRSZWZzQ2FjaGUpIHsKICAgICAgICB0aGlzLl9jYWNoZU1hcC5zZXQobnVtLCBvYmopOwogICAgICB9CiAgICB9CiAgICB0aGlzLl9wZXJzaXN0ZW50UmVmc0NhY2hlID0gbnVsbDsKICB9CiAgc2V0U3RhcnRYUmVmKHN0YXJ0WFJlZikgewogICAgdGhpcy5zdGFydFhSZWZRdWV1ZSA9IFtzdGFydFhSZWZdOwogIH0KICBwYXJzZShyZWNvdmVyeU1vZGUgPSBmYWxzZSkgewogICAgbGV0IHRyYWlsZXJEaWN0OwogICAgaWYgKCFyZWNvdmVyeU1vZGUpIHsKICAgICAgdHJhaWxlckRpY3QgPSB0aGlzLnJlYWRYUmVmKCk7CiAgICB9IGVsc2UgewogICAgICB3YXJuKCJJbmRleGluZyBhbGwgUERGIG9iamVjdHMiKTsKICAgICAgdHJhaWxlckRpY3QgPSB0aGlzLmluZGV4T2JqZWN0cygpOwogICAgfQogICAgdHJhaWxlckRpY3QuYXNzaWduWHJlZih0aGlzKTsKICAgIHRoaXMudHJhaWxlciA9IHRyYWlsZXJEaWN0OwogICAgbGV0IGVuY3J5cHQ7CiAgICB0cnkgewogICAgICBlbmNyeXB0ID0gdHJhaWxlckRpY3QuZ2V0KCJFbmNyeXB0Iik7CiAgICB9IGNhdGNoIChleCkgewogICAgICBpZiAoZXggaW5zdGFuY2VvZiBNaXNzaW5nRGF0YUV4Y2VwdGlvbikgewogICAgICAgIHRocm93IGV4OwogICAgICB9CiAgICAgIHdhcm4oYFhSZWYucGFyc2UgLSBJbnZhbGlkICJFbmNyeXB0IiByZWZlcmVuY2U6ICIke2V4fSIuYCk7CiAgICB9CiAgICBpZiAoZW5jcnlwdCBpbnN0YW5jZW9mIERpY3QpIHsKICAgICAgY29uc3QgaWRzID0gdHJhaWxlckRpY3QuZ2V0KCJJRCIpOwogICAgICBjb25zdCBmaWxlSWQgPSBpZHM/Lmxlbmd0aCA/IGlkc1swXSA6ICIiOwogICAgICBlbmNyeXB0LnN1cHByZXNzRW5jcnlwdGlvbiA9IHRydWU7CiAgICAgIHRoaXMuZW5jcnlwdCA9IG5ldyBDaXBoZXJUcmFuc2Zvcm1GYWN0b3J5KGVuY3J5cHQsIGZpbGVJZCwgdGhpcy5wZGZNYW5hZ2VyLnBhc3N3b3JkKTsKICAgIH0KICAgIGxldCByb290OwogICAgdHJ5IHsKICAgICAgcm9vdCA9IHRyYWlsZXJEaWN0LmdldCgiUm9vdCIpOwogICAgfSBjYXRjaCAoZXgpIHsKICAgICAgaWYgKGV4IGluc3RhbmNlb2YgTWlzc2luZ0RhdGFFeGNlcHRpb24pIHsKICAgICAgICB0aHJvdyBleDsKICAgICAgfQogICAgICB3YXJuKGBYUmVmLnBhcnNlIC0gSW52YWxpZCAiUm9vdCIgcmVmZXJlbmNlOiAiJHtleH0iLmApOwogICAgfQogICAgaWYgKHJvb3QgaW5zdGFuY2VvZiBEaWN0KSB7CiAgICAgIHRyeSB7CiAgICAgICAgY29uc3QgcGFnZXMgPSByb290LmdldCgiUGFnZXMiKTsKICAgICAgICBpZiAocGFnZXMgaW5zdGFuY2VvZiBEaWN0KSB7CiAgICAgICAgICB0aGlzLnJvb3QgPSByb290OwogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXgpIHsKICAgICAgICBpZiAoZXggaW5zdGFuY2VvZiBNaXNzaW5nRGF0YUV4Y2VwdGlvbikgewogICAgICAgICAgdGhyb3cgZXg7CiAgICAgICAgfQogICAgICAgIHdhcm4oYFhSZWYucGFyc2UgLSBJbnZhbGlkICJQYWdlcyIgcmVmZXJlbmNlOiAiJHtleH0iLmApOwogICAgICB9CiAgICB9CiAgICBpZiAoIXJlY292ZXJ5TW9kZSkgewogICAgICB0aHJvdyBuZXcgWFJlZlBhcnNlRXhjZXB0aW9uKCk7CiAgICB9CiAgICB0aHJvdyBuZXcgSW52YWxpZFBERkV4Y2VwdGlvbigiSW52YWxpZCBSb290IHJlZmVyZW5jZS4iKTsKICB9CiAgcHJvY2Vzc1hSZWZUYWJsZShwYXJzZXIpIHsKICAgIGlmICghKCJ0YWJsZVN0YXRlIiBpbiB0aGlzKSkgewogICAgICB0aGlzLnRhYmxlU3RhdGUgPSB7CiAgICAgICAgZW50cnlOdW06IDAsCiAgICAgICAgc3RyZWFtUG9zOiBwYXJzZXIubGV4ZXIuc3RyZWFtLnBvcywKICAgICAgICBwYXJzZXJCdWYxOiBwYXJzZXIuYnVmMSwKICAgICAgICBwYXJzZXJCdWYyOiBwYXJzZXIuYnVmMgogICAgICB9OwogICAgfQogICAgY29uc3Qgb2JqID0gdGhpcy5yZWFkWFJlZlRhYmxlKHBhcnNlcik7CiAgICBpZiAoIWlzQ21kKG9iaiwgInRyYWlsZXIiKSkgewogICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoIkludmFsaWQgWFJlZiB0YWJsZTogY291bGQgbm90IGZpbmQgdHJhaWxlciBkaWN0aW9uYXJ5Iik7CiAgICB9CiAgICBsZXQgZGljdCA9IHBhcnNlci5nZXRPYmooKTsKICAgIGlmICghKGRpY3QgaW5zdGFuY2VvZiBEaWN0KSAmJiBkaWN0LmRpY3QpIHsKICAgICAgZGljdCA9IGRpY3QuZGljdDsKICAgIH0KICAgIGlmICghKGRpY3QgaW5zdGFuY2VvZiBEaWN0KSkgewogICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoIkludmFsaWQgWFJlZiB0YWJsZTogY291bGQgbm90IHBhcnNlIHRyYWlsZXIgZGljdGlvbmFyeSIpOwogICAgfQogICAgZGVsZXRlIHRoaXMudGFibGVTdGF0ZTsKICAgIHJldHVybiBkaWN0OwogIH0KICByZWFkWFJlZlRhYmxlKHBhcnNlcikgewogICAgY29uc3Qgc3RyZWFtID0gcGFyc2VyLmxleGVyLnN0cmVhbTsKICAgIGNvbnN0IHRhYmxlU3RhdGUgPSB0aGlzLnRhYmxlU3RhdGU7CiAgICBzdHJlYW0ucG9zID0gdGFibGVTdGF0ZS5zdHJlYW1Qb3M7CiAgICBwYXJzZXIuYnVmMSA9IHRhYmxlU3RhdGUucGFyc2VyQnVmMTsKICAgIHBhcnNlci5idWYyID0gdGFibGVTdGF0ZS5wYXJzZXJCdWYyOwogICAgbGV0IG9iajsKICAgIHdoaWxlICh0cnVlKSB7CiAgICAgIGlmICghKCJmaXJzdEVudHJ5TnVtIiBpbiB0YWJsZVN0YXRlKSB8fCAhKCJlbnRyeUNvdW50IiBpbiB0YWJsZVN0YXRlKSkgewogICAgICAgIGlmIChpc0NtZChvYmogPSBwYXJzZXIuZ2V0T2JqKCksICJ0cmFpbGVyIikpIHsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgICB0YWJsZVN0YXRlLmZpcnN0RW50cnlOdW0gPSBvYmo7CiAgICAgICAgdGFibGVTdGF0ZS5lbnRyeUNvdW50ID0gcGFyc2VyLmdldE9iaigpOwogICAgICB9CiAgICAgIGxldCBmaXJzdCA9IHRhYmxlU3RhdGUuZmlyc3RFbnRyeU51bTsKICAgICAgY29uc3QgY291bnQgPSB0YWJsZVN0YXRlLmVudHJ5Q291bnQ7CiAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihmaXJzdCkgfHwgIU51bWJlci5pc0ludGVnZXIoY291bnQpKSB7CiAgICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCJJbnZhbGlkIFhSZWYgdGFibGU6IHdyb25nIHR5cGVzIGluIHN1YnNlY3Rpb24gaGVhZGVyIik7CiAgICAgIH0KICAgICAgZm9yIChsZXQgaSA9IHRhYmxlU3RhdGUuZW50cnlOdW07IGkgPCBjb3VudDsgaSsrKSB7CiAgICAgICAgdGFibGVTdGF0ZS5zdHJlYW1Qb3MgPSBzdHJlYW0ucG9zOwogICAgICAgIHRhYmxlU3RhdGUuZW50cnlOdW0gPSBpOwogICAgICAgIHRhYmxlU3RhdGUucGFyc2VyQnVmMSA9IHBhcnNlci5idWYxOwogICAgICAgIHRhYmxlU3RhdGUucGFyc2VyQnVmMiA9IHBhcnNlci5idWYyOwogICAgICAgIGNvbnN0IGVudHJ5ID0ge307CiAgICAgICAgZW50cnkub2Zmc2V0ID0gcGFyc2VyLmdldE9iaigpOwogICAgICAgIGVudHJ5LmdlbiA9IHBhcnNlci5nZXRPYmooKTsKICAgICAgICBjb25zdCB0eXBlID0gcGFyc2VyLmdldE9iaigpOwogICAgICAgIGlmICh0eXBlIGluc3RhbmNlb2YgQ21kKSB7CiAgICAgICAgICBzd2l0Y2ggKHR5cGUuY21kKSB7CiAgICAgICAgICAgIGNhc2UgImYiOgogICAgICAgICAgICAgIGVudHJ5LmZyZWUgPSB0cnVlOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlICJuIjoKICAgICAgICAgICAgICBlbnRyeS51bmNvbXByZXNzZWQgPSB0cnVlOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIoZW50cnkub2Zmc2V0KSB8fCAhTnVtYmVyLmlzSW50ZWdlcihlbnRyeS5nZW4pIHx8ICEoZW50cnkuZnJlZSB8fCBlbnRyeS51bmNvbXByZXNzZWQpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoYEludmFsaWQgZW50cnkgaW4gWFJlZiBzdWJzZWN0aW9uOiAke2ZpcnN0fSwgJHtjb3VudH1gKTsKICAgICAgICB9CiAgICAgICAgaWYgKGkgPT09IDAgJiYgZW50cnkuZnJlZSAmJiBmaXJzdCA9PT0gMSkgewogICAgICAgICAgZmlyc3QgPSAwOwogICAgICAgIH0KICAgICAgICBpZiAoIXRoaXMuZW50cmllc1tpICsgZmlyc3RdKSB7CiAgICAgICAgICB0aGlzLmVudHJpZXNbaSArIGZpcnN0XSA9IGVudHJ5OwogICAgICAgIH0KICAgICAgfQogICAgICB0YWJsZVN0YXRlLmVudHJ5TnVtID0gMDsKICAgICAgdGFibGVTdGF0ZS5zdHJlYW1Qb3MgPSBzdHJlYW0ucG9zOwogICAgICB0YWJsZVN0YXRlLnBhcnNlckJ1ZjEgPSBwYXJzZXIuYnVmMTsKICAgICAgdGFibGVTdGF0ZS5wYXJzZXJCdWYyID0gcGFyc2VyLmJ1ZjI7CiAgICAgIGRlbGV0ZSB0YWJsZVN0YXRlLmZpcnN0RW50cnlOdW07CiAgICAgIGRlbGV0ZSB0YWJsZVN0YXRlLmVudHJ5Q291bnQ7CiAgICB9CiAgICBpZiAodGhpcy5lbnRyaWVzWzBdICYmICF0aGlzLmVudHJpZXNbMF0uZnJlZSkgewogICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoIkludmFsaWQgWFJlZiB0YWJsZTogdW5leHBlY3RlZCBmaXJzdCBvYmplY3QiKTsKICAgIH0KICAgIHJldHVybiBvYmo7CiAgfQogIHByb2Nlc3NYUmVmU3RyZWFtKHN0cmVhbSkgewogICAgaWYgKCEoInN0cmVhbVN0YXRlIiBpbiB0aGlzKSkgewogICAgICBjb25zdCB7CiAgICAgICAgZGljdCwKICAgICAgICBwb3MKICAgICAgfSA9IHN0cmVhbTsKICAgICAgY29uc3QgYnl0ZVdpZHRocyA9IGRpY3QuZ2V0KCJXIik7CiAgICAgIGNvbnN0IHJhbmdlID0gZGljdC5nZXQoIkluZGV4IikgfHwgWzAsIGRpY3QuZ2V0KCJTaXplIildOwogICAgICB0aGlzLnN0cmVhbVN0YXRlID0gewogICAgICAgIGVudHJ5UmFuZ2VzOiByYW5nZSwKICAgICAgICBieXRlV2lkdGhzLAogICAgICAgIGVudHJ5TnVtOiAwLAogICAgICAgIHN0cmVhbVBvczogcG9zCiAgICAgIH07CiAgICB9CiAgICB0aGlzLnJlYWRYUmVmU3RyZWFtKHN0cmVhbSk7CiAgICBkZWxldGUgdGhpcy5zdHJlYW1TdGF0ZTsKICAgIHJldHVybiBzdHJlYW0uZGljdDsKICB9CiAgcmVhZFhSZWZTdHJlYW0oc3RyZWFtKSB7CiAgICBjb25zdCBzdHJlYW1TdGF0ZSA9IHRoaXMuc3RyZWFtU3RhdGU7CiAgICBzdHJlYW0ucG9zID0gc3RyZWFtU3RhdGUuc3RyZWFtUG9zOwogICAgY29uc3QgW3R5cGVGaWVsZFdpZHRoLCBvZmZzZXRGaWVsZFdpZHRoLCBnZW5lcmF0aW9uRmllbGRXaWR0aF0gPSBzdHJlYW1TdGF0ZS5ieXRlV2lkdGhzOwogICAgY29uc3QgZW50cnlSYW5nZXMgPSBzdHJlYW1TdGF0ZS5lbnRyeVJhbmdlczsKICAgIHdoaWxlIChlbnRyeVJhbmdlcy5sZW5ndGggPiAwKSB7CiAgICAgIGNvbnN0IFtmaXJzdCwgbl0gPSBlbnRyeVJhbmdlczsKICAgICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKGZpcnN0KSB8fCAhTnVtYmVyLmlzSW50ZWdlcihuKSkgewogICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcihgSW52YWxpZCBYUmVmIHJhbmdlIGZpZWxkczogJHtmaXJzdH0sICR7bn1gKTsKICAgICAgfQogICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIodHlwZUZpZWxkV2lkdGgpIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKG9mZnNldEZpZWxkV2lkdGgpIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKGdlbmVyYXRpb25GaWVsZFdpZHRoKSkgewogICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcihgSW52YWxpZCBYUmVmIGVudHJ5IGZpZWxkcyBsZW5ndGg6ICR7Zmlyc3R9LCAke259YCk7CiAgICAgIH0KICAgICAgZm9yIChsZXQgaSA9IHN0cmVhbVN0YXRlLmVudHJ5TnVtOyBpIDwgbjsgKytpKSB7CiAgICAgICAgc3RyZWFtU3RhdGUuZW50cnlOdW0gPSBpOwogICAgICAgIHN0cmVhbVN0YXRlLnN0cmVhbVBvcyA9IHN0cmVhbS5wb3M7CiAgICAgICAgbGV0IHR5cGUgPSAwLAogICAgICAgICAgb2Zmc2V0ID0gMCwKICAgICAgICAgIGdlbmVyYXRpb24gPSAwOwogICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdHlwZUZpZWxkV2lkdGg7ICsraikgewogICAgICAgICAgY29uc3QgdHlwZUJ5dGUgPSBzdHJlYW0uZ2V0Qnl0ZSgpOwogICAgICAgICAgaWYgKHR5cGVCeXRlID09PSAtMSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoIkludmFsaWQgWFJlZiBieXRlV2lkdGhzICd0eXBlJy4iKTsKICAgICAgICAgIH0KICAgICAgICAgIHR5cGUgPSB0eXBlIDw8IDggfCB0eXBlQnl0ZTsKICAgICAgICB9CiAgICAgICAgaWYgKHR5cGVGaWVsZFdpZHRoID09PSAwKSB7CiAgICAgICAgICB0eXBlID0gMTsKICAgICAgICB9CiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBvZmZzZXRGaWVsZFdpZHRoOyArK2opIHsKICAgICAgICAgIGNvbnN0IG9mZnNldEJ5dGUgPSBzdHJlYW0uZ2V0Qnl0ZSgpOwogICAgICAgICAgaWYgKG9mZnNldEJ5dGUgPT09IC0xKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigiSW52YWxpZCBYUmVmIGJ5dGVXaWR0aHMgJ29mZnNldCcuIik7CiAgICAgICAgICB9CiAgICAgICAgICBvZmZzZXQgPSBvZmZzZXQgPDwgOCB8IG9mZnNldEJ5dGU7CiAgICAgICAgfQogICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZ2VuZXJhdGlvbkZpZWxkV2lkdGg7ICsraikgewogICAgICAgICAgY29uc3QgZ2VuZXJhdGlvbkJ5dGUgPSBzdHJlYW0uZ2V0Qnl0ZSgpOwogICAgICAgICAgaWYgKGdlbmVyYXRpb25CeXRlID09PSAtMSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoIkludmFsaWQgWFJlZiBieXRlV2lkdGhzICdnZW5lcmF0aW9uJy4iKTsKICAgICAgICAgIH0KICAgICAgICAgIGdlbmVyYXRpb24gPSBnZW5lcmF0aW9uIDw8IDggfCBnZW5lcmF0aW9uQnl0ZTsKICAgICAgICB9CiAgICAgICAgY29uc3QgZW50cnkgPSB7fTsKICAgICAgICBlbnRyeS5vZmZzZXQgPSBvZmZzZXQ7CiAgICAgICAgZW50cnkuZ2VuID0gZ2VuZXJhdGlvbjsKICAgICAgICBzd2l0Y2ggKHR5cGUpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgZW50cnkuZnJlZSA9IHRydWU7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICBlbnRyeS51bmNvbXByZXNzZWQgPSB0cnVlOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoYEludmFsaWQgWFJlZiBlbnRyeSB0eXBlOiAke3R5cGV9YCk7CiAgICAgICAgfQogICAgICAgIGlmICghdGhpcy5lbnRyaWVzW2ZpcnN0ICsgaV0pIHsKICAgICAgICAgIHRoaXMuZW50cmllc1tmaXJzdCArIGldID0gZW50cnk7CiAgICAgICAgfQogICAgICB9CiAgICAgIHN0cmVhbVN0YXRlLmVudHJ5TnVtID0gMDsKICAgICAgc3RyZWFtU3RhdGUuc3RyZWFtUG9zID0gc3RyZWFtLnBvczsKICAgICAgZW50cnlSYW5nZXMuc3BsaWNlKDAsIDIpOwogICAgfQogIH0KICBpbmRleE9iamVjdHMoKSB7CiAgICBjb25zdCBUQUIgPSAweDksCiAgICAgIExGID0gMHhhLAogICAgICBDUiA9IDB4ZCwKICAgICAgU1BBQ0UgPSAweDIwOwogICAgY29uc3QgUEVSQ0VOVCA9IDB4MjUsCiAgICAgIExUID0gMHgzYzsKICAgIGZ1bmN0aW9uIHJlYWRUb2tlbihkYXRhLCBvZmZzZXQpIHsKICAgICAgbGV0IHRva2VuID0gIiIsCiAgICAgICAgY2ggPSBkYXRhW29mZnNldF07CiAgICAgIHdoaWxlIChjaCAhPT0gTEYgJiYgY2ggIT09IENSICYmIGNoICE9PSBMVCkgewogICAgICAgIGlmICgrK29mZnNldCA+PSBkYXRhLmxlbmd0aCkgewogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICAgIHRva2VuICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2gpOwogICAgICAgIGNoID0gZGF0YVtvZmZzZXRdOwogICAgICB9CiAgICAgIHJldHVybiB0b2tlbjsKICAgIH0KICAgIGZ1bmN0aW9uIHNraXBVbnRpbChkYXRhLCBvZmZzZXQsIHdoYXQpIHsKICAgICAgY29uc3QgbGVuZ3RoID0gd2hhdC5sZW5ndGgsCiAgICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoOwogICAgICBsZXQgc2tpcHBlZCA9IDA7CiAgICAgIHdoaWxlIChvZmZzZXQgPCBkYXRhTGVuZ3RoKSB7CiAgICAgICAgbGV0IGkgPSAwOwogICAgICAgIHdoaWxlIChpIDwgbGVuZ3RoICYmIGRhdGFbb2Zmc2V0ICsgaV0gPT09IHdoYXRbaV0pIHsKICAgICAgICAgICsraTsKICAgICAgICB9CiAgICAgICAgaWYgKGkgPj0gbGVuZ3RoKSB7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgICAgb2Zmc2V0Kys7CiAgICAgICAgc2tpcHBlZCsrOwogICAgICB9CiAgICAgIHJldHVybiBza2lwcGVkOwogICAgfQogICAgY29uc3QgZ0VuZG9ialJlZ0V4cCA9IC9cYihlbmRvYmp8XGQrXHMrXGQrXHMrb2JqfHhyZWZ8dHJhaWxlclxzKjw8KVxiL2c7CiAgICBjb25zdCBnU3RhcnR4cmVmUmVnRXhwID0gL1xiKHN0YXJ0eHJlZnxcZCtccytcZCtccytvYmopXGIvZzsKICAgIGNvbnN0IG9ialJlZ0V4cCA9IC9eKFxkKylccysoXGQrKVxzK29ialxiLzsKICAgIGNvbnN0IHRyYWlsZXJCeXRlcyA9IG5ldyBVaW50OEFycmF5KFsxMTYsIDExNCwgOTcsIDEwNSwgMTA4LCAxMDEsIDExNF0pOwogICAgY29uc3Qgc3RhcnR4cmVmQnl0ZXMgPSBuZXcgVWludDhBcnJheShbMTE1LCAxMTYsIDk3LCAxMTQsIDExNiwgMTIwLCAxMTQsIDEwMSwgMTAyXSk7CiAgICBjb25zdCB4cmVmQnl0ZXMgPSBuZXcgVWludDhBcnJheShbNDcsIDg4LCA4MiwgMTAxLCAxMDJdKTsKICAgIHRoaXMuZW50cmllcy5sZW5ndGggPSAwOwogICAgdGhpcy5fY2FjaGVNYXAuY2xlYXIoKTsKICAgIGNvbnN0IHN0cmVhbSA9IHRoaXMuc3RyZWFtOwogICAgc3RyZWFtLnBvcyA9IDA7CiAgICBjb25zdCBidWZmZXIgPSBzdHJlYW0uZ2V0Qnl0ZXMoKSwKICAgICAgYnVmZmVyU3RyID0gYnl0ZXNUb1N0cmluZyhidWZmZXIpLAogICAgICBsZW5ndGggPSBidWZmZXIubGVuZ3RoOwogICAgbGV0IHBvc2l0aW9uID0gc3RyZWFtLnN0YXJ0OwogICAgY29uc3QgdHJhaWxlcnMgPSBbXSwKICAgICAgeHJlZlN0bXMgPSBbXTsKICAgIHdoaWxlIChwb3NpdGlvbiA8IGxlbmd0aCkgewogICAgICBsZXQgY2ggPSBidWZmZXJbcG9zaXRpb25dOwogICAgICBpZiAoY2ggPT09IFRBQiB8fCBjaCA9PT0gTEYgfHwgY2ggPT09IENSIHx8IGNoID09PSBTUEFDRSkgewogICAgICAgICsrcG9zaXRpb247CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgaWYgKGNoID09PSBQRVJDRU5UKSB7CiAgICAgICAgZG8gewogICAgICAgICAgKytwb3NpdGlvbjsKICAgICAgICAgIGlmIChwb3NpdGlvbiA+PSBsZW5ndGgpIHsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgICBjaCA9IGJ1ZmZlcltwb3NpdGlvbl07CiAgICAgICAgfSB3aGlsZSAoY2ggIT09IExGICYmIGNoICE9PSBDUik7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgY29uc3QgdG9rZW4gPSByZWFkVG9rZW4oYnVmZmVyLCBwb3NpdGlvbik7CiAgICAgIGxldCBtOwogICAgICBpZiAodG9rZW4uc3RhcnRzV2l0aCgieHJlZiIpICYmICh0b2tlbi5sZW5ndGggPT09IDQgfHwgL1xzLy50ZXN0KHRva2VuWzRdKSkpIHsKICAgICAgICBwb3NpdGlvbiArPSBza2lwVW50aWwoYnVmZmVyLCBwb3NpdGlvbiwgdHJhaWxlckJ5dGVzKTsKICAgICAgICB0cmFpbGVycy5wdXNoKHBvc2l0aW9uKTsKICAgICAgICBwb3NpdGlvbiArPSBza2lwVW50aWwoYnVmZmVyLCBwb3NpdGlvbiwgc3RhcnR4cmVmQnl0ZXMpOwogICAgICB9IGVsc2UgaWYgKG0gPSBvYmpSZWdFeHAuZXhlYyh0b2tlbikpIHsKICAgICAgICBjb25zdCBudW0gPSBtWzFdIHwgMCwKICAgICAgICAgIGdlbiA9IG1bMl0gfCAwOwogICAgICAgIGNvbnN0IHN0YXJ0UG9zID0gcG9zaXRpb24gKyB0b2tlbi5sZW5ndGg7CiAgICAgICAgbGV0IGNvbnRlbnRMZW5ndGgsCiAgICAgICAgICB1cGRhdGVFbnRyaWVzID0gZmFsc2U7CiAgICAgICAgaWYgKCF0aGlzLmVudHJpZXNbbnVtXSkgewogICAgICAgICAgdXBkYXRlRW50cmllcyA9IHRydWU7CiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmVudHJpZXNbbnVtXS5nZW4gPT09IGdlbikgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgY29uc3QgcGFyc2VyID0gbmV3IFBhcnNlcih7CiAgICAgICAgICAgICAgbGV4ZXI6IG5ldyBMZXhlcihzdHJlYW0ubWFrZVN1YlN0cmVhbShzdGFydFBvcykpCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBwYXJzZXIuZ2V0T2JqKCk7CiAgICAgICAgICAgIHVwZGF0ZUVudHJpZXMgPSB0cnVlOwogICAgICAgICAgfSBjYXRjaCAoZXgpIHsKICAgICAgICAgICAgaWYgKGV4IGluc3RhbmNlb2YgUGFyc2VyRU9GRXhjZXB0aW9uKSB7CiAgICAgICAgICAgICAgd2FybihgaW5kZXhPYmplY3RzIC0tIGNoZWNraW5nIG9iamVjdCAoJHt0b2tlbn0pOiAiJHtleH0iLmApOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHVwZGF0ZUVudHJpZXMgPSB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmICh1cGRhdGVFbnRyaWVzKSB7CiAgICAgICAgICB0aGlzLmVudHJpZXNbbnVtXSA9IHsKICAgICAgICAgICAgb2Zmc2V0OiBwb3NpdGlvbiAtIHN0cmVhbS5zdGFydCwKICAgICAgICAgICAgZ2VuLAogICAgICAgICAgICB1bmNvbXByZXNzZWQ6IHRydWUKICAgICAgICAgIH07CiAgICAgICAgfQogICAgICAgIGdFbmRvYmpSZWdFeHAubGFzdEluZGV4ID0gc3RhcnRQb3M7CiAgICAgICAgY29uc3QgbWF0Y2ggPSBnRW5kb2JqUmVnRXhwLmV4ZWMoYnVmZmVyU3RyKTsKICAgICAgICBpZiAobWF0Y2gpIHsKICAgICAgICAgIGNvbnN0IGVuZFBvcyA9IGdFbmRvYmpSZWdFeHAubGFzdEluZGV4ICsgMTsKICAgICAgICAgIGNvbnRlbnRMZW5ndGggPSBlbmRQb3MgLSBwb3NpdGlvbjsKICAgICAgICAgIGlmIChtYXRjaFsxXSAhPT0gImVuZG9iaiIpIHsKICAgICAgICAgICAgd2FybihgaW5kZXhPYmplY3RzOiBGb3VuZCAiJHttYXRjaFsxXX0iIGluc2lkZSBvZiBhbm90aGVyICJvYmoiLCBgICsgJ2NhdXNlZCBieSBtaXNzaW5nICJlbmRvYmoiIC0tIHRyeWluZyB0byByZWNvdmVyLicpOwogICAgICAgICAgICBjb250ZW50TGVuZ3RoIC09IG1hdGNoWzFdLmxlbmd0aCArIDE7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNvbnRlbnRMZW5ndGggPSBsZW5ndGggLSBwb3NpdGlvbjsKICAgICAgICB9CiAgICAgICAgY29uc3QgY29udGVudCA9IGJ1ZmZlci5zdWJhcnJheShwb3NpdGlvbiwgcG9zaXRpb24gKyBjb250ZW50TGVuZ3RoKTsKICAgICAgICBjb25zdCB4cmVmVGFnT2Zmc2V0ID0gc2tpcFVudGlsKGNvbnRlbnQsIDAsIHhyZWZCeXRlcyk7CiAgICAgICAgaWYgKHhyZWZUYWdPZmZzZXQgPCBjb250ZW50TGVuZ3RoICYmIGNvbnRlbnRbeHJlZlRhZ09mZnNldCArIDVdIDwgNjQpIHsKICAgICAgICAgIHhyZWZTdG1zLnB1c2gocG9zaXRpb24gLSBzdHJlYW0uc3RhcnQpOwogICAgICAgICAgdGhpcy5feHJlZlN0bXMuYWRkKHBvc2l0aW9uIC0gc3RyZWFtLnN0YXJ0KTsKICAgICAgICB9CiAgICAgICAgcG9zaXRpb24gKz0gY29udGVudExlbmd0aDsKICAgICAgfSBlbHNlIGlmICh0b2tlbi5zdGFydHNXaXRoKCJ0cmFpbGVyIikgJiYgKHRva2VuLmxlbmd0aCA9PT0gNyB8fCAvXHMvLnRlc3QodG9rZW5bN10pKSkgewogICAgICAgIHRyYWlsZXJzLnB1c2gocG9zaXRpb24pOwogICAgICAgIGNvbnN0IHN0YXJ0UG9zID0gcG9zaXRpb24gKyB0b2tlbi5sZW5ndGg7CiAgICAgICAgbGV0IGNvbnRlbnRMZW5ndGg7CiAgICAgICAgZ1N0YXJ0eHJlZlJlZ0V4cC5sYXN0SW5kZXggPSBzdGFydFBvczsKICAgICAgICBjb25zdCBtYXRjaCA9IGdTdGFydHhyZWZSZWdFeHAuZXhlYyhidWZmZXJTdHIpOwogICAgICAgIGlmIChtYXRjaCkgewogICAgICAgICAgY29uc3QgZW5kUG9zID0gZ1N0YXJ0eHJlZlJlZ0V4cC5sYXN0SW5kZXggKyAxOwogICAgICAgICAgY29udGVudExlbmd0aCA9IGVuZFBvcyAtIHBvc2l0aW9uOwogICAgICAgICAgaWYgKG1hdGNoWzFdICE9PSAic3RhcnR4cmVmIikgewogICAgICAgICAgICB3YXJuKGBpbmRleE9iamVjdHM6IEZvdW5kICIke21hdGNoWzFdfSIgYWZ0ZXIgInRyYWlsZXIiLCBgICsgJ2NhdXNlZCBieSBtaXNzaW5nICJzdGFydHhyZWYiIC0tIHRyeWluZyB0byByZWNvdmVyLicpOwogICAgICAgICAgICBjb250ZW50TGVuZ3RoIC09IG1hdGNoWzFdLmxlbmd0aCArIDE7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNvbnRlbnRMZW5ndGggPSBsZW5ndGggLSBwb3NpdGlvbjsKICAgICAgICB9CiAgICAgICAgcG9zaXRpb24gKz0gY29udGVudExlbmd0aDsKICAgICAgfSBlbHNlIHsKICAgICAgICBwb3NpdGlvbiArPSB0b2tlbi5sZW5ndGggKyAxOwogICAgICB9CiAgICB9CiAgICBmb3IgKGNvbnN0IHhyZWZTdG0gb2YgeHJlZlN0bXMpIHsKICAgICAgdGhpcy5zdGFydFhSZWZRdWV1ZS5wdXNoKHhyZWZTdG0pOwogICAgICB0aGlzLnJlYWRYUmVmKHRydWUpOwogICAgfQogICAgY29uc3QgdHJhaWxlckRpY3RzID0gW107CiAgICBsZXQgaXNFbmNyeXB0ZWQgPSBmYWxzZTsKICAgIGZvciAoY29uc3QgdHJhaWxlciBvZiB0cmFpbGVycykgewogICAgICBzdHJlYW0ucG9zID0gdHJhaWxlcjsKICAgICAgY29uc3QgcGFyc2VyID0gbmV3IFBhcnNlcih7CiAgICAgICAgbGV4ZXI6IG5ldyBMZXhlcihzdHJlYW0pLAogICAgICAgIHhyZWY6IHRoaXMsCiAgICAgICAgYWxsb3dTdHJlYW1zOiB0cnVlLAogICAgICAgIHJlY292ZXJ5TW9kZTogdHJ1ZQogICAgICB9KTsKICAgICAgY29uc3Qgb2JqID0gcGFyc2VyLmdldE9iaigpOwogICAgICBpZiAoIWlzQ21kKG9iaiwgInRyYWlsZXIiKSkgewogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGNvbnN0IGRpY3QgPSBwYXJzZXIuZ2V0T2JqKCk7CiAgICAgIGlmICghKGRpY3QgaW5zdGFuY2VvZiBEaWN0KSkgewogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIHRyYWlsZXJEaWN0cy5wdXNoKGRpY3QpOwogICAgICBpZiAoZGljdC5oYXMoIkVuY3J5cHQiKSkgewogICAgICAgIGlzRW5jcnlwdGVkID0gdHJ1ZTsKICAgICAgfQogICAgfQogICAgbGV0IHRyYWlsZXJEaWN0LCB0cmFpbGVyRXJyb3I7CiAgICBmb3IgKGNvbnN0IGRpY3Qgb2YgWy4uLnRyYWlsZXJEaWN0cywgImdlbkZhbGxiYWNrIiwgLi4udHJhaWxlckRpY3RzXSkgewogICAgICBpZiAoZGljdCA9PT0gImdlbkZhbGxiYWNrIikgewogICAgICAgIGlmICghdHJhaWxlckVycm9yKSB7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgICAgdGhpcy5fZ2VuZXJhdGlvbkZhbGxiYWNrID0gdHJ1ZTsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBsZXQgdmFsaWRQYWdlc0RpY3QgPSBmYWxzZTsKICAgICAgdHJ5IHsKICAgICAgICBjb25zdCByb290RGljdCA9IGRpY3QuZ2V0KCJSb290Iik7CiAgICAgICAgaWYgKCEocm9vdERpY3QgaW5zdGFuY2VvZiBEaWN0KSkgewogICAgICAgICAgY29udGludWU7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHBhZ2VzRGljdCA9IHJvb3REaWN0LmdldCgiUGFnZXMiKTsKICAgICAgICBpZiAoIShwYWdlc0RpY3QgaW5zdGFuY2VvZiBEaWN0KSkgewogICAgICAgICAgY29udGludWU7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHBhZ2VzQ291bnQgPSBwYWdlc0RpY3QuZ2V0KCJDb3VudCIpOwogICAgICAgIGlmIChOdW1iZXIuaXNJbnRlZ2VyKHBhZ2VzQ291bnQpKSB7CiAgICAgICAgICB2YWxpZFBhZ2VzRGljdCA9IHRydWU7CiAgICAgICAgfQogICAgICB9IGNhdGNoIChleCkgewogICAgICAgIHRyYWlsZXJFcnJvciA9IGV4OwogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGlmICh2YWxpZFBhZ2VzRGljdCAmJiAoIWlzRW5jcnlwdGVkIHx8IGRpY3QuaGFzKCJFbmNyeXB0IikpICYmIGRpY3QuaGFzKCJJRCIpKSB7CiAgICAgICAgcmV0dXJuIGRpY3Q7CiAgICAgIH0KICAgICAgdHJhaWxlckRpY3QgPSBkaWN0OwogICAgfQogICAgaWYgKHRyYWlsZXJEaWN0KSB7CiAgICAgIHJldHVybiB0cmFpbGVyRGljdDsKICAgIH0KICAgIGlmICh0aGlzLnRvcERpY3QpIHsKICAgICAgcmV0dXJuIHRoaXMudG9wRGljdDsKICAgIH0KICAgIGlmICghdHJhaWxlckRpY3RzLmxlbmd0aCkgewogICAgICBmb3IgKGNvbnN0IG51bSBpbiB0aGlzLmVudHJpZXMpIHsKICAgICAgICBpZiAoIU9iamVjdC5oYXNPd24odGhpcy5lbnRyaWVzLCBudW0pKSB7CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CiAgICAgICAgY29uc3QgZW50cnkgPSB0aGlzLmVudHJpZXNbbnVtXTsKICAgICAgICBjb25zdCByZWYgPSBSZWYuZ2V0KHBhcnNlSW50KG51bSksIGVudHJ5Lmdlbik7CiAgICAgICAgbGV0IG9iajsKICAgICAgICB0cnkgewogICAgICAgICAgb2JqID0gdGhpcy5mZXRjaChyZWYpOwogICAgICAgIH0gY2F0Y2ggewogICAgICAgICAgY29udGludWU7CiAgICAgICAgfQogICAgICAgIGlmIChvYmogaW5zdGFuY2VvZiBCYXNlU3RyZWFtKSB7CiAgICAgICAgICBvYmogPSBvYmouZGljdDsKICAgICAgICB9CiAgICAgICAgaWYgKG9iaiBpbnN0YW5jZW9mIERpY3QgJiYgb2JqLmhhcygiUm9vdCIpKSB7CiAgICAgICAgICByZXR1cm4gb2JqOwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgdGhyb3cgbmV3IEludmFsaWRQREZFeGNlcHRpb24oIkludmFsaWQgUERGIHN0cnVjdHVyZS4iKTsKICB9CiAgcmVhZFhSZWYocmVjb3ZlcnlNb2RlID0gZmFsc2UpIHsKICAgIGNvbnN0IHN0cmVhbSA9IHRoaXMuc3RyZWFtOwogICAgY29uc3Qgc3RhcnRYUmVmUGFyc2VkQ2FjaGUgPSBuZXcgU2V0KCk7CiAgICB3aGlsZSAodGhpcy5zdGFydFhSZWZRdWV1ZS5sZW5ndGgpIHsKICAgICAgdHJ5IHsKICAgICAgICBjb25zdCBzdGFydFhSZWYgPSB0aGlzLnN0YXJ0WFJlZlF1ZXVlWzBdOwogICAgICAgIGlmIChzdGFydFhSZWZQYXJzZWRDYWNoZS5oYXMoc3RhcnRYUmVmKSkgewogICAgICAgICAgd2FybigicmVhZFhSZWYgLSBza2lwcGluZyBYUmVmIHRhYmxlIHNpbmNlIGl0IHdhcyBhbHJlYWR5IHBhcnNlZC4iKTsKICAgICAgICAgIHRoaXMuc3RhcnRYUmVmUXVldWUuc2hpZnQoKTsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgICBzdGFydFhSZWZQYXJzZWRDYWNoZS5hZGQoc3RhcnRYUmVmKTsKICAgICAgICBzdHJlYW0ucG9zID0gc3RhcnRYUmVmICsgc3RyZWFtLnN0YXJ0OwogICAgICAgIGNvbnN0IHBhcnNlciA9IG5ldyBQYXJzZXIoewogICAgICAgICAgbGV4ZXI6IG5ldyBMZXhlcihzdHJlYW0pLAogICAgICAgICAgeHJlZjogdGhpcywKICAgICAgICAgIGFsbG93U3RyZWFtczogdHJ1ZQogICAgICAgIH0pOwogICAgICAgIGxldCBvYmogPSBwYXJzZXIuZ2V0T2JqKCk7CiAgICAgICAgbGV0IGRpY3Q7CiAgICAgICAgaWYgKGlzQ21kKG9iaiwgInhyZWYiKSkgewogICAgICAgICAgZGljdCA9IHRoaXMucHJvY2Vzc1hSZWZUYWJsZShwYXJzZXIpOwogICAgICAgICAgaWYgKCF0aGlzLnRvcERpY3QpIHsKICAgICAgICAgICAgdGhpcy50b3BEaWN0ID0gZGljdDsKICAgICAgICAgIH0KICAgICAgICAgIG9iaiA9IGRpY3QuZ2V0KCJYUmVmU3RtIik7CiAgICAgICAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcihvYmopICYmICF0aGlzLl94cmVmU3Rtcy5oYXMob2JqKSkgewogICAgICAgICAgICB0aGlzLl94cmVmU3Rtcy5hZGQob2JqKTsKICAgICAgICAgICAgdGhpcy5zdGFydFhSZWZRdWV1ZS5wdXNoKG9iaik7CiAgICAgICAgICAgIHRoaXMuI2ZpcnN0WFJlZlN0bVBvcyA/Pz0gb2JqOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAoTnVtYmVyLmlzSW50ZWdlcihvYmopKSB7CiAgICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIocGFyc2VyLmdldE9iaigpKSB8fCAhaXNDbWQocGFyc2VyLmdldE9iaigpLCAib2JqIikgfHwgISgob2JqID0gcGFyc2VyLmdldE9iaigpKSBpbnN0YW5jZW9mIEJhc2VTdHJlYW0pKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcigiSW52YWxpZCBYUmVmIHN0cmVhbSIpOwogICAgICAgICAgfQogICAgICAgICAgZGljdCA9IHRoaXMucHJvY2Vzc1hSZWZTdHJlYW0ob2JqKTsKICAgICAgICAgIGlmICghdGhpcy50b3BEaWN0KSB7CiAgICAgICAgICAgIHRoaXMudG9wRGljdCA9IGRpY3Q7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoIWRpY3QpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCJGYWlsZWQgdG8gcmVhZCBYUmVmIHN0cmVhbSIpOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoIkludmFsaWQgWFJlZiBzdHJlYW0gaGVhZGVyIik7CiAgICAgICAgfQogICAgICAgIG9iaiA9IGRpY3QuZ2V0KCJQcmV2Iik7CiAgICAgICAgaWYgKE51bWJlci5pc0ludGVnZXIob2JqKSkgewogICAgICAgICAgdGhpcy5zdGFydFhSZWZRdWV1ZS5wdXNoKG9iaik7CiAgICAgICAgfSBlbHNlIGlmIChvYmogaW5zdGFuY2VvZiBSZWYpIHsKICAgICAgICAgIHRoaXMuc3RhcnRYUmVmUXVldWUucHVzaChvYmoubnVtKTsKICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIE1pc3NpbmdEYXRhRXhjZXB0aW9uKSB7CiAgICAgICAgICB0aHJvdyBlOwogICAgICAgIH0KICAgICAgICBpbmZvKCIod2hpbGUgcmVhZGluZyBYUmVmKTogIiArIGUpOwogICAgICB9CiAgICAgIHRoaXMuc3RhcnRYUmVmUXVldWUuc2hpZnQoKTsKICAgIH0KICAgIGlmICh0aGlzLnRvcERpY3QpIHsKICAgICAgcmV0dXJuIHRoaXMudG9wRGljdDsKICAgIH0KICAgIGlmIChyZWNvdmVyeU1vZGUpIHsKICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICAgIH0KICAgIHRocm93IG5ldyBYUmVmUGFyc2VFeGNlcHRpb24oKTsKICB9CiAgZ2V0IGxhc3RYUmVmU3RyZWFtUG9zKCkgewogICAgcmV0dXJuIHRoaXMuI2ZpcnN0WFJlZlN0bVBvcyA/PyAodGhpcy5feHJlZlN0bXMuc2l6ZSA+IDAgPyBNYXRoLm1heCguLi50aGlzLl94cmVmU3RtcykgOiBudWxsKTsKICB9CiAgZ2V0RW50cnkoaSkgewogICAgY29uc3QgeHJlZkVudHJ5ID0gdGhpcy5lbnRyaWVzW2ldOwogICAgaWYgKHhyZWZFbnRyeSAmJiAheHJlZkVudHJ5LmZyZWUgJiYgeHJlZkVudHJ5Lm9mZnNldCkgewogICAgICByZXR1cm4geHJlZkVudHJ5OwogICAgfQogICAgcmV0dXJuIG51bGw7CiAgfQogIGZldGNoSWZSZWYob2JqLCBzdXBwcmVzc0VuY3J5cHRpb24gPSBmYWxzZSkgewogICAgaWYgKG9iaiBpbnN0YW5jZW9mIFJlZikgewogICAgICByZXR1cm4gdGhpcy5mZXRjaChvYmosIHN1cHByZXNzRW5jcnlwdGlvbik7CiAgICB9CiAgICByZXR1cm4gb2JqOwogIH0KICBmZXRjaChyZWYsIHN1cHByZXNzRW5jcnlwdGlvbiA9IGZhbHNlKSB7CiAgICBpZiAoIShyZWYgaW5zdGFuY2VvZiBSZWYpKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcigicmVmIG9iamVjdCBpcyBub3QgYSByZWZlcmVuY2UiKTsKICAgIH0KICAgIGNvbnN0IG51bSA9IHJlZi5udW07CiAgICBjb25zdCBjYWNoZUVudHJ5ID0gdGhpcy5fY2FjaGVNYXAuZ2V0KG51bSk7CiAgICBpZiAoY2FjaGVFbnRyeSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgIGlmIChjYWNoZUVudHJ5IGluc3RhbmNlb2YgRGljdCAmJiAhY2FjaGVFbnRyeS5vYmpJZCkgewogICAgICAgIGNhY2hlRW50cnkub2JqSWQgPSByZWYudG9TdHJpbmcoKTsKICAgICAgfQogICAgICByZXR1cm4gY2FjaGVFbnRyeTsKICAgIH0KICAgIGxldCB4cmVmRW50cnkgPSB0aGlzLmdldEVudHJ5KG51bSk7CiAgICBpZiAoeHJlZkVudHJ5ID09PSBudWxsKSB7CiAgICAgIHJldHVybiB4cmVmRW50cnk7CiAgICB9CiAgICBpZiAodGhpcy5fcGVuZGluZ1JlZnMuaGFzKHJlZikpIHsKICAgICAgdGhpcy5fcGVuZGluZ1JlZnMucmVtb3ZlKHJlZik7CiAgICAgIHdhcm4oYElnbm9yaW5nIGNpcmN1bGFyIHJlZmVyZW5jZTogJHtyZWZ9LmApOwogICAgICByZXR1cm4gQ0lSQ1VMQVJfUkVGOwogICAgfQogICAgdGhpcy5fcGVuZGluZ1JlZnMucHV0KHJlZik7CiAgICB0cnkgewogICAgICB4cmVmRW50cnkgPSB4cmVmRW50cnkudW5jb21wcmVzc2VkID8gdGhpcy5mZXRjaFVuY29tcHJlc3NlZChyZWYsIHhyZWZFbnRyeSwgc3VwcHJlc3NFbmNyeXB0aW9uKSA6IHRoaXMuZmV0Y2hDb21wcmVzc2VkKHJlZiwgeHJlZkVudHJ5LCBzdXBwcmVzc0VuY3J5cHRpb24pOwogICAgICB0aGlzLl9wZW5kaW5nUmVmcy5yZW1vdmUocmVmKTsKICAgIH0gY2F0Y2ggKGV4KSB7CiAgICAgIHRoaXMuX3BlbmRpbmdSZWZzLnJlbW92ZShyZWYpOwogICAgICB0aHJvdyBleDsKICAgIH0KICAgIGlmICh4cmVmRW50cnkgaW5zdGFuY2VvZiBEaWN0KSB7CiAgICAgIHhyZWZFbnRyeS5vYmpJZCA9IHJlZi50b1N0cmluZygpOwogICAgfSBlbHNlIGlmICh4cmVmRW50cnkgaW5zdGFuY2VvZiBCYXNlU3RyZWFtKSB7CiAgICAgIHhyZWZFbnRyeS5kaWN0Lm9iaklkID0gcmVmLnRvU3RyaW5nKCk7CiAgICB9CiAgICByZXR1cm4geHJlZkVudHJ5OwogIH0KICBmZXRjaFVuY29tcHJlc3NlZChyZWYsIHhyZWZFbnRyeSwgc3VwcHJlc3NFbmNyeXB0aW9uID0gZmFsc2UpIHsKICAgIGNvbnN0IGdlbiA9IHJlZi5nZW47CiAgICBsZXQgbnVtID0gcmVmLm51bTsKICAgIGlmICh4cmVmRW50cnkuZ2VuICE9PSBnZW4pIHsKICAgICAgY29uc3QgbXNnID0gYEluY29uc2lzdGVudCBnZW5lcmF0aW9uIGluIFhSZWY6ICR7cmVmfWA7CiAgICAgIGlmICh0aGlzLl9nZW5lcmF0aW9uRmFsbGJhY2sgJiYgeHJlZkVudHJ5LmdlbiA8IGdlbikgewogICAgICAgIHdhcm4obXNnKTsKICAgICAgICByZXR1cm4gdGhpcy5mZXRjaFVuY29tcHJlc3NlZChSZWYuZ2V0KG51bSwgeHJlZkVudHJ5LmdlbiksIHhyZWZFbnRyeSwgc3VwcHJlc3NFbmNyeXB0aW9uKTsKICAgICAgfQogICAgICB0aHJvdyBuZXcgWFJlZkVudHJ5RXhjZXB0aW9uKG1zZyk7CiAgICB9CiAgICBjb25zdCBzdHJlYW0gPSB0aGlzLnN0cmVhbS5tYWtlU3ViU3RyZWFtKHhyZWZFbnRyeS5vZmZzZXQgKyB0aGlzLnN0cmVhbS5zdGFydCk7CiAgICBjb25zdCBwYXJzZXIgPSBuZXcgUGFyc2VyKHsKICAgICAgbGV4ZXI6IG5ldyBMZXhlcihzdHJlYW0pLAogICAgICB4cmVmOiB0aGlzLAogICAgICBhbGxvd1N0cmVhbXM6IHRydWUKICAgIH0pOwogICAgY29uc3Qgb2JqMSA9IHBhcnNlci5nZXRPYmooKTsKICAgIGNvbnN0IG9iajIgPSBwYXJzZXIuZ2V0T2JqKCk7CiAgICBjb25zdCBvYmozID0gcGFyc2VyLmdldE9iaigpOwogICAgaWYgKG9iajEgIT09IG51bSB8fCBvYmoyICE9PSBnZW4gfHwgIShvYmozIGluc3RhbmNlb2YgQ21kKSkgewogICAgICB0aHJvdyBuZXcgWFJlZkVudHJ5RXhjZXB0aW9uKGBCYWQgKHVuY29tcHJlc3NlZCkgWFJlZiBlbnRyeTogJHtyZWZ9YCk7CiAgICB9CiAgICBpZiAob2JqMy5jbWQgIT09ICJvYmoiKSB7CiAgICAgIGlmIChvYmozLmNtZC5zdGFydHNXaXRoKCJvYmoiKSkgewogICAgICAgIG51bSA9IHBhcnNlSW50KG9iajMuY21kLnN1YnN0cmluZygzKSwgMTApOwogICAgICAgIGlmICghTnVtYmVyLmlzTmFOKG51bSkpIHsKICAgICAgICAgIHJldHVybiBudW07CiAgICAgICAgfQogICAgICB9CiAgICAgIHRocm93IG5ldyBYUmVmRW50cnlFeGNlcHRpb24oYEJhZCAodW5jb21wcmVzc2VkKSBYUmVmIGVudHJ5OiAke3JlZn1gKTsKICAgIH0KICAgIHhyZWZFbnRyeSA9IHRoaXMuZW5jcnlwdCAmJiAhc3VwcHJlc3NFbmNyeXB0aW9uID8gcGFyc2VyLmdldE9iaih0aGlzLmVuY3J5cHQuY3JlYXRlQ2lwaGVyVHJhbnNmb3JtKG51bSwgZ2VuKSkgOiBwYXJzZXIuZ2V0T2JqKCk7CiAgICBpZiAoISh4cmVmRW50cnkgaW5zdGFuY2VvZiBCYXNlU3RyZWFtKSkgewogICAgICB0aGlzLl9jYWNoZU1hcC5zZXQobnVtLCB4cmVmRW50cnkpOwogICAgfQogICAgcmV0dXJuIHhyZWZFbnRyeTsKICB9CiAgZmV0Y2hDb21wcmVzc2VkKHJlZiwgeHJlZkVudHJ5LCBzdXBwcmVzc0VuY3J5cHRpb24gPSBmYWxzZSkgewogICAgY29uc3QgdGFibGVPZmZzZXQgPSB4cmVmRW50cnkub2Zmc2V0OwogICAgY29uc3Qgc3RyZWFtID0gdGhpcy5mZXRjaChSZWYuZ2V0KHRhYmxlT2Zmc2V0LCAwKSk7CiAgICBpZiAoIShzdHJlYW0gaW5zdGFuY2VvZiBCYXNlU3RyZWFtKSkgewogICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoImJhZCBPYmpTdG0gc3RyZWFtIik7CiAgICB9CiAgICBjb25zdCBmaXJzdCA9IHN0cmVhbS5kaWN0LmdldCgiRmlyc3QiKTsKICAgIGNvbnN0IG4gPSBzdHJlYW0uZGljdC5nZXQoIk4iKTsKICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihmaXJzdCkgfHwgIU51bWJlci5pc0ludGVnZXIobikpIHsKICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCJpbnZhbGlkIGZpcnN0IGFuZCBuIHBhcmFtZXRlcnMgZm9yIE9ialN0bSBzdHJlYW0iKTsKICAgIH0KICAgIGxldCBwYXJzZXIgPSBuZXcgUGFyc2VyKHsKICAgICAgbGV4ZXI6IG5ldyBMZXhlcihzdHJlYW0pLAogICAgICB4cmVmOiB0aGlzLAogICAgICBhbGxvd1N0cmVhbXM6IHRydWUKICAgIH0pOwogICAgY29uc3QgbnVtcyA9IG5ldyBBcnJheShuKTsKICAgIGNvbnN0IG9mZnNldHMgPSBuZXcgQXJyYXkobik7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG47ICsraSkgewogICAgICBjb25zdCBudW0gPSBwYXJzZXIuZ2V0T2JqKCk7CiAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihudW0pKSB7CiAgICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKGBpbnZhbGlkIG9iamVjdCBudW1iZXIgaW4gdGhlIE9ialN0bSBzdHJlYW06ICR7bnVtfWApOwogICAgICB9CiAgICAgIGNvbnN0IG9mZnNldCA9IHBhcnNlci5nZXRPYmooKTsKICAgICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKG9mZnNldCkpIHsKICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoYGludmFsaWQgb2JqZWN0IG9mZnNldCBpbiB0aGUgT2JqU3RtIHN0cmVhbTogJHtvZmZzZXR9YCk7CiAgICAgIH0KICAgICAgbnVtc1tpXSA9IG51bTsKICAgICAgY29uc3QgZW50cnkgPSB0aGlzLmdldEVudHJ5KG51bSk7CiAgICAgIGlmIChlbnRyeT8ub2Zmc2V0ID09PSB0YWJsZU9mZnNldCAmJiBlbnRyeS5nZW4gIT09IGkpIHsKICAgICAgICBlbnRyeS5nZW4gPSBpOwogICAgICB9CiAgICAgIG9mZnNldHNbaV0gPSBvZmZzZXQ7CiAgICB9CiAgICBjb25zdCBzdGFydCA9IChzdHJlYW0uc3RhcnQgfHwgMCkgKyBmaXJzdDsKICAgIGNvbnN0IGVudHJpZXMgPSBuZXcgQXJyYXkobik7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG47ICsraSkgewogICAgICBjb25zdCBsZW5ndGggPSBpIDwgbiAtIDEgPyBvZmZzZXRzW2kgKyAxXSAtIG9mZnNldHNbaV0gOiB1bmRlZmluZWQ7CiAgICAgIGlmIChsZW5ndGggPCAwKSB7CiAgICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCJJbnZhbGlkIG9mZnNldCBpbiB0aGUgT2JqU3RtIHN0cmVhbS4iKTsKICAgICAgfQogICAgICBwYXJzZXIgPSBuZXcgUGFyc2VyKHsKICAgICAgICBsZXhlcjogbmV3IExleGVyKHN0cmVhbS5tYWtlU3ViU3RyZWFtKHN0YXJ0ICsgb2Zmc2V0c1tpXSwgbGVuZ3RoLCBzdHJlYW0uZGljdCkpLAogICAgICAgIHhyZWY6IHRoaXMsCiAgICAgICAgYWxsb3dTdHJlYW1zOiB0cnVlCiAgICAgIH0pOwogICAgICBjb25zdCBvYmogPSBwYXJzZXIuZ2V0T2JqKCk7CiAgICAgIGVudHJpZXNbaV0gPSBvYmo7CiAgICAgIGlmIChvYmogaW5zdGFuY2VvZiBCYXNlU3RyZWFtKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgY29uc3QgbnVtID0gbnVtc1tpXSwKICAgICAgICBlbnRyeSA9IHRoaXMuZW50cmllc1tudW1dOwogICAgICBpZiAoZW50cnkgJiYgZW50cnkub2Zmc2V0ID09PSB0YWJsZU9mZnNldCAmJiBlbnRyeS5nZW4gPT09IGkpIHsKICAgICAgICB0aGlzLl9jYWNoZU1hcC5zZXQobnVtLCBvYmopOwogICAgICB9CiAgICB9CiAgICB4cmVmRW50cnkgPSBlbnRyaWVzW3hyZWZFbnRyeS5nZW5dOwogICAgaWYgKHhyZWZFbnRyeSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgIHRocm93IG5ldyBYUmVmRW50cnlFeGNlcHRpb24oYEJhZCAoY29tcHJlc3NlZCkgWFJlZiBlbnRyeTogJHtyZWZ9YCk7CiAgICB9CiAgICByZXR1cm4geHJlZkVudHJ5OwogIH0KICBhc3luYyBmZXRjaElmUmVmQXN5bmMob2JqLCBzdXBwcmVzc0VuY3J5cHRpb24pIHsKICAgIGlmIChvYmogaW5zdGFuY2VvZiBSZWYpIHsKICAgICAgcmV0dXJuIHRoaXMuZmV0Y2hBc3luYyhvYmosIHN1cHByZXNzRW5jcnlwdGlvbik7CiAgICB9CiAgICByZXR1cm4gb2JqOwogIH0KICBhc3luYyBmZXRjaEFzeW5jKHJlZiwgc3VwcHJlc3NFbmNyeXB0aW9uKSB7CiAgICB0cnkgewogICAgICByZXR1cm4gdGhpcy5mZXRjaChyZWYsIHN1cHByZXNzRW5jcnlwdGlvbik7CiAgICB9IGNhdGNoIChleCkgewogICAgICBpZiAoIShleCBpbnN0YW5jZW9mIE1pc3NpbmdEYXRhRXhjZXB0aW9uKSkgewogICAgICAgIHRocm93IGV4OwogICAgICB9CiAgICAgIGF3YWl0IHRoaXMucGRmTWFuYWdlci5yZXF1ZXN0UmFuZ2UoZXguYmVnaW4sIGV4LmVuZCk7CiAgICAgIHJldHVybiB0aGlzLmZldGNoQXN5bmMocmVmLCBzdXBwcmVzc0VuY3J5cHRpb24pOwogICAgfQogIH0KICBnZXRDYXRhbG9nT2JqKCkgewogICAgcmV0dXJuIHRoaXMucm9vdDsKICB9Cn0KCjsvLyAuL3NyYy9jb3JlL2RvY3VtZW50LmpzCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpjb25zdCBMRVRURVJfU0laRV9NRURJQUJPWCA9IFswLCAwLCA2MTIsIDc5Ml07CmNsYXNzIFBhZ2UgewogICNhcmVBbm5vdGF0aW9uc0NhY2hlZCA9IGZhbHNlOwogICNyZXNvdXJjZXNQcm9taXNlID0gbnVsbDsKICBjb25zdHJ1Y3Rvcih7CiAgICBwZGZNYW5hZ2VyLAogICAgeHJlZiwKICAgIHBhZ2VJbmRleCwKICAgIHBhZ2VEaWN0LAogICAgcmVmLAogICAgZ2xvYmFsSWRGYWN0b3J5LAogICAgZm9udENhY2hlLAogICAgYnVpbHRJbkNNYXBDYWNoZSwKICAgIHN0YW5kYXJkRm9udERhdGFDYWNoZSwKICAgIGdsb2JhbENvbG9yU3BhY2VDYWNoZSwKICAgIGdsb2JhbEltYWdlQ2FjaGUsCiAgICBzeXN0ZW1Gb250Q2FjaGUsCiAgICBub25CbGVuZE1vZGVzU2V0LAogICAgeGZhRmFjdG9yeQogIH0pIHsKICAgIHRoaXMucGRmTWFuYWdlciA9IHBkZk1hbmFnZXI7CiAgICB0aGlzLnBhZ2VJbmRleCA9IHBhZ2VJbmRleDsKICAgIHRoaXMucGFnZURpY3QgPSBwYWdlRGljdDsKICAgIHRoaXMueHJlZiA9IHhyZWY7CiAgICB0aGlzLnJlZiA9IHJlZjsKICAgIHRoaXMuZm9udENhY2hlID0gZm9udENhY2hlOwogICAgdGhpcy5idWlsdEluQ01hcENhY2hlID0gYnVpbHRJbkNNYXBDYWNoZTsKICAgIHRoaXMuc3RhbmRhcmRGb250RGF0YUNhY2hlID0gc3RhbmRhcmRGb250RGF0YUNhY2hlOwogICAgdGhpcy5nbG9iYWxDb2xvclNwYWNlQ2FjaGUgPSBnbG9iYWxDb2xvclNwYWNlQ2FjaGU7CiAgICB0aGlzLmdsb2JhbEltYWdlQ2FjaGUgPSBnbG9iYWxJbWFnZUNhY2hlOwogICAgdGhpcy5zeXN0ZW1Gb250Q2FjaGUgPSBzeXN0ZW1Gb250Q2FjaGU7CiAgICB0aGlzLm5vbkJsZW5kTW9kZXNTZXQgPSBub25CbGVuZE1vZGVzU2V0OwogICAgdGhpcy5ldmFsdWF0b3JPcHRpb25zID0gcGRmTWFuYWdlci5ldmFsdWF0b3JPcHRpb25zOwogICAgdGhpcy54ZmFGYWN0b3J5ID0geGZhRmFjdG9yeTsKICAgIGNvbnN0IGlkQ291bnRlcnMgPSB7CiAgICAgIG9iajogMAogICAgfTsKICAgIHRoaXMuX2xvY2FsSWRGYWN0b3J5ID0gY2xhc3MgZXh0ZW5kcyBnbG9iYWxJZEZhY3RvcnkgewogICAgICBzdGF0aWMgY3JlYXRlT2JqSWQoKSB7CiAgICAgICAgcmV0dXJuIGBwJHtwYWdlSW5kZXh9XyR7KytpZENvdW50ZXJzLm9ian1gOwogICAgICB9CiAgICAgIHN0YXRpYyBnZXRQYWdlT2JqSWQoKSB7CiAgICAgICAgcmV0dXJuIGBwJHtyZWYudG9TdHJpbmcoKX1gOwogICAgICB9CiAgICB9OwogIH0KICAjY3JlYXRlUGFydGlhbEV2YWx1YXRvcihoYW5kbGVyKSB7CiAgICByZXR1cm4gbmV3IFBhcnRpYWxFdmFsdWF0b3IoewogICAgICB4cmVmOiB0aGlzLnhyZWYsCiAgICAgIGhhbmRsZXIsCiAgICAgIHBhZ2VJbmRleDogdGhpcy5wYWdlSW5kZXgsCiAgICAgIGlkRmFjdG9yeTogdGhpcy5fbG9jYWxJZEZhY3RvcnksCiAgICAgIGZvbnRDYWNoZTogdGhpcy5mb250Q2FjaGUsCiAgICAgIGJ1aWx0SW5DTWFwQ2FjaGU6IHRoaXMuYnVpbHRJbkNNYXBDYWNoZSwKICAgICAgc3RhbmRhcmRGb250RGF0YUNhY2hlOiB0aGlzLnN0YW5kYXJkRm9udERhdGFDYWNoZSwKICAgICAgZ2xvYmFsQ29sb3JTcGFjZUNhY2hlOiB0aGlzLmdsb2JhbENvbG9yU3BhY2VDYWNoZSwKICAgICAgZ2xvYmFsSW1hZ2VDYWNoZTogdGhpcy5nbG9iYWxJbWFnZUNhY2hlLAogICAgICBzeXN0ZW1Gb250Q2FjaGU6IHRoaXMuc3lzdGVtRm9udENhY2hlLAogICAgICBvcHRpb25zOiB0aGlzLmV2YWx1YXRvck9wdGlvbnMKICAgIH0pOwogIH0KICAjZ2V0SW5oZXJpdGFibGVQcm9wZXJ0eShrZXksIGdldEFycmF5ID0gZmFsc2UpIHsKICAgIGNvbnN0IHZhbHVlID0gZ2V0SW5oZXJpdGFibGVQcm9wZXJ0eSh7CiAgICAgIGRpY3Q6IHRoaXMucGFnZURpY3QsCiAgICAgIGtleSwKICAgICAgZ2V0QXJyYXksCiAgICAgIHN0b3BXaGVuRm91bmQ6IGZhbHNlCiAgICB9KTsKICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHsKICAgICAgcmV0dXJuIHZhbHVlOwogICAgfQogICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMSB8fCAhKHZhbHVlWzBdIGluc3RhbmNlb2YgRGljdCkpIHsKICAgICAgcmV0dXJuIHZhbHVlWzBdOwogICAgfQogICAgcmV0dXJuIERpY3QubWVyZ2UoewogICAgICB4cmVmOiB0aGlzLnhyZWYsCiAgICAgIGRpY3RBcnJheTogdmFsdWUKICAgIH0pOwogIH0KICBnZXQgY29udGVudCgpIHsKICAgIHJldHVybiB0aGlzLnBhZ2VEaWN0LmdldEFycmF5KCJDb250ZW50cyIpOwogIH0KICBnZXQgcmVzb3VyY2VzKCkgewogICAgY29uc3QgcmVzb3VyY2VzID0gdGhpcy4jZ2V0SW5oZXJpdGFibGVQcm9wZXJ0eSgiUmVzb3VyY2VzIik7CiAgICByZXR1cm4gc2hhZG93KHRoaXMsICJyZXNvdXJjZXMiLCByZXNvdXJjZXMgaW5zdGFuY2VvZiBEaWN0ID8gcmVzb3VyY2VzIDogRGljdC5lbXB0eSk7CiAgfQogICNnZXRCb3VuZGluZ0JveChuYW1lKSB7CiAgICBpZiAodGhpcy54ZmFEYXRhKSB7CiAgICAgIHJldHVybiB0aGlzLnhmYURhdGEuYmJveDsKICAgIH0KICAgIGNvbnN0IGJveCA9IGxvb2t1cE5vcm1hbFJlY3QodGhpcy4jZ2V0SW5oZXJpdGFibGVQcm9wZXJ0eShuYW1lLCB0cnVlKSwgbnVsbCk7CiAgICBpZiAoYm94KSB7CiAgICAgIGlmIChib3hbMl0gLSBib3hbMF0gPiAwICYmIGJveFszXSAtIGJveFsxXSA+IDApIHsKICAgICAgICByZXR1cm4gYm94OwogICAgICB9CiAgICAgIHdhcm4oYEVtcHR5LCBvciBpbnZhbGlkLCAvJHtuYW1lfSBlbnRyeS5gKTsKICAgIH0KICAgIHJldHVybiBudWxsOwogIH0KICBnZXQgbWVkaWFCb3goKSB7CiAgICByZXR1cm4gc2hhZG93KHRoaXMsICJtZWRpYUJveCIsIHRoaXMuI2dldEJvdW5kaW5nQm94KCJNZWRpYUJveCIpIHx8IExFVFRFUl9TSVpFX01FRElBQk9YKTsKICB9CiAgZ2V0IGNyb3BCb3goKSB7CiAgICByZXR1cm4gc2hhZG93KHRoaXMsICJjcm9wQm94IiwgdGhpcy4jZ2V0Qm91bmRpbmdCb3goIkNyb3BCb3giKSB8fCB0aGlzLm1lZGlhQm94KTsKICB9CiAgZ2V0IHVzZXJVbml0KCkgewogICAgY29uc3Qgb2JqID0gdGhpcy5wYWdlRGljdC5nZXQoIlVzZXJVbml0Iik7CiAgICByZXR1cm4gc2hhZG93KHRoaXMsICJ1c2VyVW5pdCIsIHR5cGVvZiBvYmogPT09ICJudW1iZXIiICYmIG9iaiA+IDAgPyBvYmogOiAxLjApOwogIH0KICBnZXQgdmlldygpIHsKICAgIGNvbnN0IHsKICAgICAgY3JvcEJveCwKICAgICAgbWVkaWFCb3gKICAgIH0gPSB0aGlzOwogICAgaWYgKGNyb3BCb3ggIT09IG1lZGlhQm94ICYmICFpc0FycmF5RXF1YWwoY3JvcEJveCwgbWVkaWFCb3gpKSB7CiAgICAgIGNvbnN0IGJveCA9IFV0aWwuaW50ZXJzZWN0KGNyb3BCb3gsIG1lZGlhQm94KTsKICAgICAgaWYgKGJveCAmJiBib3hbMl0gLSBib3hbMF0gPiAwICYmIGJveFszXSAtIGJveFsxXSA+IDApIHsKICAgICAgICByZXR1cm4gc2hhZG93KHRoaXMsICJ2aWV3IiwgYm94KTsKICAgICAgfQogICAgICB3YXJuKCJFbXB0eSAvQ3JvcEJveCBhbmQgL01lZGlhQm94IGludGVyc2VjdGlvbi4iKTsKICAgIH0KICAgIHJldHVybiBzaGFkb3codGhpcywgInZpZXciLCBtZWRpYUJveCk7CiAgfQogIGdldCByb3RhdGUoKSB7CiAgICBsZXQgcm90YXRlID0gdGhpcy4jZ2V0SW5oZXJpdGFibGVQcm9wZXJ0eSgiUm90YXRlIikgfHwgMDsKICAgIGlmIChyb3RhdGUgJSA5MCAhPT0gMCkgewogICAgICByb3RhdGUgPSAwOwogICAgfSBlbHNlIGlmIChyb3RhdGUgPj0gMzYwKSB7CiAgICAgIHJvdGF0ZSAlPSAzNjA7CiAgICB9IGVsc2UgaWYgKHJvdGF0ZSA8IDApIHsKICAgICAgcm90YXRlID0gKHJvdGF0ZSAlIDM2MCArIDM2MCkgJSAzNjA7CiAgICB9CiAgICByZXR1cm4gc2hhZG93KHRoaXMsICJyb3RhdGUiLCByb3RhdGUpOwogIH0KICAjb25TdWJTdHJlYW1FcnJvcihyZWFzb24sIG9iaklkKSB7CiAgICBpZiAodGhpcy5ldmFsdWF0b3JPcHRpb25zLmlnbm9yZUVycm9ycykgewogICAgICB3YXJuKGBnZXRDb250ZW50U3RyZWFtIC0gaWdub3Jpbmcgc3ViLXN0cmVhbSAoJHtvYmpJZH0pOiAiJHtyZWFzb259Ii5gKTsKICAgICAgcmV0dXJuOwogICAgfQogICAgdGhyb3cgcmVhc29uOwogIH0KICBhc3luYyBnZXRDb250ZW50U3RyZWFtKCkgewogICAgY29uc3QgY29udGVudCA9IGF3YWl0IHRoaXMucGRmTWFuYWdlci5lbnN1cmUodGhpcywgImNvbnRlbnQiKTsKICAgIGlmIChjb250ZW50IGluc3RhbmNlb2YgQmFzZVN0cmVhbSkgewogICAgICByZXR1cm4gY29udGVudDsKICAgIH0KICAgIGlmIChBcnJheS5pc0FycmF5KGNvbnRlbnQpKSB7CiAgICAgIHJldHVybiBuZXcgU3RyZWFtc1NlcXVlbmNlU3RyZWFtKGNvbnRlbnQsIHRoaXMuI29uU3ViU3RyZWFtRXJyb3IuYmluZCh0aGlzKSk7CiAgICB9CiAgICByZXR1cm4gbmV3IE51bGxTdHJlYW0oKTsKICB9CiAgZ2V0IHhmYURhdGEoKSB7CiAgICByZXR1cm4gc2hhZG93KHRoaXMsICJ4ZmFEYXRhIiwgdGhpcy54ZmFGYWN0b3J5ID8gewogICAgICBiYm94OiB0aGlzLnhmYUZhY3RvcnkuZ2V0Qm91bmRpbmdCb3godGhpcy5wYWdlSW5kZXgpCiAgICB9IDogbnVsbCk7CiAgfQogIGFzeW5jICNyZXBsYWNlSWRCeVJlZihhbm5vdGF0aW9ucywgZGVsZXRlZEFubm90YXRpb25zLCBleGlzdGluZ0Fubm90YXRpb25zKSB7CiAgICBjb25zdCBwcm9taXNlcyA9IFtdOwogICAgZm9yIChjb25zdCBhbm5vdGF0aW9uIG9mIGFubm90YXRpb25zKSB7CiAgICAgIGlmIChhbm5vdGF0aW9uLmlkKSB7CiAgICAgICAgY29uc3QgcmVmID0gUmVmLmZyb21TdHJpbmcoYW5ub3RhdGlvbi5pZCk7CiAgICAgICAgaWYgKCFyZWYpIHsKICAgICAgICAgIHdhcm4oYEEgbm9uLWxpbmtlZCBhbm5vdGF0aW9uIGNhbm5vdCBiZSBtb2RpZmllZDogJHthbm5vdGF0aW9uLmlkfWApOwogICAgICAgICAgY29udGludWU7CiAgICAgICAgfQogICAgICAgIGlmIChhbm5vdGF0aW9uLmRlbGV0ZWQpIHsKICAgICAgICAgIGRlbGV0ZWRBbm5vdGF0aW9ucy5wdXQocmVmLCByZWYpOwogICAgICAgICAgaWYgKGFubm90YXRpb24ucG9wdXBSZWYpIHsKICAgICAgICAgICAgY29uc3QgcG9wdXBSZWYgPSBSZWYuZnJvbVN0cmluZyhhbm5vdGF0aW9uLnBvcHVwUmVmKTsKICAgICAgICAgICAgaWYgKHBvcHVwUmVmKSB7CiAgICAgICAgICAgICAgZGVsZXRlZEFubm90YXRpb25zLnB1dChwb3B1cFJlZiwgcG9wdXBSZWYpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CiAgICAgICAgaWYgKGFubm90YXRpb24ucG9wdXA/LmRlbGV0ZWQpIHsKICAgICAgICAgIGNvbnN0IHBvcHVwUmVmID0gUmVmLmZyb21TdHJpbmcoYW5ub3RhdGlvbi5wb3B1cFJlZik7CiAgICAgICAgICBpZiAocG9wdXBSZWYpIHsKICAgICAgICAgICAgZGVsZXRlZEFubm90YXRpb25zLnB1dChwb3B1cFJlZiwgcG9wdXBSZWYpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBleGlzdGluZ0Fubm90YXRpb25zPy5wdXQocmVmKTsKICAgICAgICBhbm5vdGF0aW9uLnJlZiA9IHJlZjsKICAgICAgICBwcm9taXNlcy5wdXNoKHRoaXMueHJlZi5mZXRjaEFzeW5jKHJlZikudGhlbihvYmogPT4gewogICAgICAgICAgaWYgKG9iaiBpbnN0YW5jZW9mIERpY3QpIHsKICAgICAgICAgICAgYW5ub3RhdGlvbi5vbGRBbm5vdGF0aW9uID0gb2JqLmNsb25lKCk7CiAgICAgICAgICB9CiAgICAgICAgfSwgKCkgPT4gewogICAgICAgICAgd2FybihgQ2Fubm90IGZldGNoIFxgb2xkQW5ub3RhdGlvblxgIGZvcjogJHtyZWZ9LmApOwogICAgICAgIH0pKTsKICAgICAgICBkZWxldGUgYW5ub3RhdGlvbi5pZDsKICAgICAgfQogICAgfQogICAgYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpOwogIH0KICBhc3luYyBzYXZlTmV3QW5ub3RhdGlvbnMoaGFuZGxlciwgdGFzaywgYW5ub3RhdGlvbnMsIGltYWdlUHJvbWlzZXMsIGNoYW5nZXMpIHsKICAgIGlmICh0aGlzLnhmYUZhY3RvcnkpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCJYRkE6IENhbm5vdCBzYXZlIG5ldyBhbm5vdGF0aW9ucy4iKTsKICAgIH0KICAgIGNvbnN0IHBhcnRpYWxFdmFsdWF0b3IgPSB0aGlzLiNjcmVhdGVQYXJ0aWFsRXZhbHVhdG9yKGhhbmRsZXIpOwogICAgY29uc3QgZGVsZXRlZEFubm90YXRpb25zID0gbmV3IFJlZlNldENhY2hlKCk7CiAgICBjb25zdCBleGlzdGluZ0Fubm90YXRpb25zID0gbmV3IFJlZlNldCgpOwogICAgYXdhaXQgdGhpcy4jcmVwbGFjZUlkQnlSZWYoYW5ub3RhdGlvbnMsIGRlbGV0ZWRBbm5vdGF0aW9ucywgZXhpc3RpbmdBbm5vdGF0aW9ucyk7CiAgICBjb25zdCBwYWdlRGljdCA9IHRoaXMucGFnZURpY3Q7CiAgICBjb25zdCBhbm5vdGF0aW9uc0FycmF5ID0gdGhpcy5hbm5vdGF0aW9ucy5maWx0ZXIoYSA9PiAhKGEgaW5zdGFuY2VvZiBSZWYgJiYgZGVsZXRlZEFubm90YXRpb25zLmhhcyhhKSkpOwogICAgY29uc3QgbmV3RGF0YSA9IGF3YWl0IEFubm90YXRpb25GYWN0b3J5LnNhdmVOZXdBbm5vdGF0aW9ucyhwYXJ0aWFsRXZhbHVhdG9yLCB0YXNrLCBhbm5vdGF0aW9ucywgaW1hZ2VQcm9taXNlcywgY2hhbmdlcyk7CiAgICBmb3IgKGNvbnN0IHsKICAgICAgcmVmCiAgICB9IG9mIG5ld0RhdGEuYW5ub3RhdGlvbnMpIHsKICAgICAgaWYgKHJlZiBpbnN0YW5jZW9mIFJlZiAmJiAhZXhpc3RpbmdBbm5vdGF0aW9ucy5oYXMocmVmKSkgewogICAgICAgIGFubm90YXRpb25zQXJyYXkucHVzaChyZWYpOwogICAgICB9CiAgICB9CiAgICBjb25zdCBkaWN0ID0gcGFnZURpY3QuY2xvbmUoKTsKICAgIGRpY3Quc2V0KCJBbm5vdHMiLCBhbm5vdGF0aW9uc0FycmF5KTsKICAgIGNoYW5nZXMucHV0KHRoaXMucmVmLCB7CiAgICAgIGRhdGE6IGRpY3QKICAgIH0pOwogICAgZm9yIChjb25zdCBkZWxldGVkUmVmIG9mIGRlbGV0ZWRBbm5vdGF0aW9ucykgewogICAgICBjaGFuZ2VzLnB1dChkZWxldGVkUmVmLCB7CiAgICAgICAgZGF0YTogbnVsbAogICAgICB9KTsKICAgIH0KICB9CiAgYXN5bmMgc2F2ZShoYW5kbGVyLCB0YXNrLCBhbm5vdGF0aW9uU3RvcmFnZSwgY2hhbmdlcykgewogICAgY29uc3QgcGFydGlhbEV2YWx1YXRvciA9IHRoaXMuI2NyZWF0ZVBhcnRpYWxFdmFsdWF0b3IoaGFuZGxlcik7CiAgICBjb25zdCBhbm5vdGF0aW9ucyA9IGF3YWl0IHRoaXMuX3BhcnNlZEFubm90YXRpb25zOwogICAgY29uc3QgcHJvbWlzZXMgPSBbXTsKICAgIGZvciAoY29uc3QgYW5ub3RhdGlvbiBvZiBhbm5vdGF0aW9ucykgewogICAgICBwcm9taXNlcy5wdXNoKGFubm90YXRpb24uc2F2ZShwYXJ0aWFsRXZhbHVhdG9yLCB0YXNrLCBhbm5vdGF0aW9uU3RvcmFnZSwgY2hhbmdlcykuY2F0Y2goZnVuY3Rpb24gKHJlYXNvbikgewogICAgICAgIHdhcm4oInNhdmUgLSBpZ25vcmluZyBhbm5vdGF0aW9uIGRhdGEgZHVyaW5nICIgKyBgIiR7dGFzay5uYW1lfSIgdGFzazogIiR7cmVhc29ufSIuYCk7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0pKTsKICAgIH0KICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7CiAgfQogIGFzeW5jIGxvYWRSZXNvdXJjZXMoa2V5cykgewogICAgYXdhaXQgKHRoaXMuI3Jlc291cmNlc1Byb21pc2UgPz89IHRoaXMucGRmTWFuYWdlci5lbnN1cmUodGhpcywgInJlc291cmNlcyIpKTsKICAgIGF3YWl0IE9iamVjdExvYWRlci5sb2FkKHRoaXMucmVzb3VyY2VzLCBrZXlzLCB0aGlzLnhyZWYpOwogIH0KICBhc3luYyAjZ2V0TWVyZ2VkUmVzb3VyY2VzKHN0cmVhbURpY3QsIGtleXMpIHsKICAgIGNvbnN0IGxvY2FsUmVzb3VyY2VzID0gc3RyZWFtRGljdD8uZ2V0KCJSZXNvdXJjZXMiKTsKICAgIGlmICghKGxvY2FsUmVzb3VyY2VzIGluc3RhbmNlb2YgRGljdCAmJiBsb2NhbFJlc291cmNlcy5zaXplKSkgewogICAgICByZXR1cm4gdGhpcy5yZXNvdXJjZXM7CiAgICB9CiAgICBhd2FpdCBPYmplY3RMb2FkZXIubG9hZChsb2NhbFJlc291cmNlcywga2V5cywgdGhpcy54cmVmKTsKICAgIHJldHVybiBEaWN0Lm1lcmdlKHsKICAgICAgeHJlZjogdGhpcy54cmVmLAogICAgICBkaWN0QXJyYXk6IFtsb2NhbFJlc291cmNlcywgdGhpcy5yZXNvdXJjZXNdLAogICAgICBtZXJnZVN1YkRpY3RzOiB0cnVlCiAgICB9KTsKICB9CiAgYXN5bmMgZ2V0T3BlcmF0b3JMaXN0KHsKICAgIGhhbmRsZXIsCiAgICBzaW5rLAogICAgdGFzaywKICAgIGludGVudCwKICAgIGNhY2hlS2V5LAogICAgYW5ub3RhdGlvblN0b3JhZ2UgPSBudWxsLAogICAgbW9kaWZpZWRJZHMgPSBudWxsCiAgfSkgewogICAgY29uc3QgY29udGVudFN0cmVhbVByb21pc2UgPSB0aGlzLmdldENvbnRlbnRTdHJlYW0oKTsKICAgIGNvbnN0IHJlc291cmNlc1Byb21pc2UgPSB0aGlzLmxvYWRSZXNvdXJjZXMoUkVTT1VSQ0VTX0tFWVNfT1BFUkFUT1JfTElTVCk7CiAgICBjb25zdCBwYXJ0aWFsRXZhbHVhdG9yID0gdGhpcy4jY3JlYXRlUGFydGlhbEV2YWx1YXRvcihoYW5kbGVyKTsKICAgIGNvbnN0IG5ld0Fubm90c0J5UGFnZSA9ICF0aGlzLnhmYUZhY3RvcnkgPyBnZXROZXdBbm5vdGF0aW9uc01hcChhbm5vdGF0aW9uU3RvcmFnZSkgOiBudWxsOwogICAgY29uc3QgbmV3QW5ub3RzID0gbmV3QW5ub3RzQnlQYWdlPy5nZXQodGhpcy5wYWdlSW5kZXgpOwogICAgbGV0IG5ld0Fubm90YXRpb25zUHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShudWxsKTsKICAgIGxldCBkZWxldGVkQW5ub3RhdGlvbnMgPSBudWxsOwogICAgaWYgKG5ld0Fubm90cykgewogICAgICBjb25zdCBhbm5vdGF0aW9uR2xvYmFsc1Byb21pc2UgPSB0aGlzLnBkZk1hbmFnZXIuZW5zdXJlRG9jKCJhbm5vdGF0aW9uR2xvYmFscyIpOwogICAgICBsZXQgaW1hZ2VQcm9taXNlczsKICAgICAgY29uc3QgbWlzc2luZ0JpdG1hcHMgPSBuZXcgU2V0KCk7CiAgICAgIGZvciAoY29uc3QgewogICAgICAgIGJpdG1hcElkLAogICAgICAgIGJpdG1hcAogICAgICB9IG9mIG5ld0Fubm90cykgewogICAgICAgIGlmIChiaXRtYXBJZCAmJiAhYml0bWFwICYmICFtaXNzaW5nQml0bWFwcy5oYXMoYml0bWFwSWQpKSB7CiAgICAgICAgICBtaXNzaW5nQml0bWFwcy5hZGQoYml0bWFwSWQpOwogICAgICAgIH0KICAgICAgfQogICAgICBjb25zdCB7CiAgICAgICAgaXNPZmZzY3JlZW5DYW52YXNTdXBwb3J0ZWQKICAgICAgfSA9IHRoaXMuZXZhbHVhdG9yT3B0aW9uczsKICAgICAgaWYgKG1pc3NpbmdCaXRtYXBzLnNpemUgPiAwKSB7CiAgICAgICAgY29uc3QgYW5ub3RhdGlvbldpdGhCaXRtYXBzID0gbmV3QW5ub3RzLnNsaWNlKCk7CiAgICAgICAgZm9yIChjb25zdCBba2V5LCBhbm5vdGF0aW9uXSBvZiBhbm5vdGF0aW9uU3RvcmFnZSkgewogICAgICAgICAgaWYgKCFrZXkuc3RhcnRzV2l0aChBbm5vdGF0aW9uRWRpdG9yUHJlZml4KSkgewogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChhbm5vdGF0aW9uLmJpdG1hcCAmJiBtaXNzaW5nQml0bWFwcy5oYXMoYW5ub3RhdGlvbi5iaXRtYXBJZCkpIHsKICAgICAgICAgICAgYW5ub3RhdGlvbldpdGhCaXRtYXBzLnB1c2goYW5ub3RhdGlvbik7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGltYWdlUHJvbWlzZXMgPSBBbm5vdGF0aW9uRmFjdG9yeS5nZW5lcmF0ZUltYWdlcyhhbm5vdGF0aW9uV2l0aEJpdG1hcHMsIHRoaXMueHJlZiwgaXNPZmZzY3JlZW5DYW52YXNTdXBwb3J0ZWQpOwogICAgICB9IGVsc2UgewogICAgICAgIGltYWdlUHJvbWlzZXMgPSBBbm5vdGF0aW9uRmFjdG9yeS5nZW5lcmF0ZUltYWdlcyhuZXdBbm5vdHMsIHRoaXMueHJlZiwgaXNPZmZzY3JlZW5DYW52YXNTdXBwb3J0ZWQpOwogICAgICB9CiAgICAgIGRlbGV0ZWRBbm5vdGF0aW9ucyA9IG5ldyBSZWZTZXQoKTsKICAgICAgbmV3QW5ub3RhdGlvbnNQcm9taXNlID0gUHJvbWlzZS5hbGwoW2Fubm90YXRpb25HbG9iYWxzUHJvbWlzZSwgdGhpcy4jcmVwbGFjZUlkQnlSZWYobmV3QW5ub3RzLCBkZWxldGVkQW5ub3RhdGlvbnMsIG51bGwpXSkudGhlbigoW2Fubm90YXRpb25HbG9iYWxzXSkgPT4gewogICAgICAgIGlmICghYW5ub3RhdGlvbkdsb2JhbHMpIHsKICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0KICAgICAgICByZXR1cm4gQW5ub3RhdGlvbkZhY3RvcnkucHJpbnROZXdBbm5vdGF0aW9ucyhhbm5vdGF0aW9uR2xvYmFscywgcGFydGlhbEV2YWx1YXRvciwgdGFzaywgbmV3QW5ub3RzLCBpbWFnZVByb21pc2VzKTsKICAgICAgfSk7CiAgICB9CiAgICBjb25zdCBwYWdlTGlzdFByb21pc2UgPSBQcm9taXNlLmFsbChbY29udGVudFN0cmVhbVByb21pc2UsIHJlc291cmNlc1Byb21pc2VdKS50aGVuKGFzeW5jIChbY29udGVudFN0cmVhbV0pID0+IHsKICAgICAgY29uc3QgcmVzb3VyY2VzID0gYXdhaXQgdGhpcy4jZ2V0TWVyZ2VkUmVzb3VyY2VzKGNvbnRlbnRTdHJlYW0uZGljdCwgUkVTT1VSQ0VTX0tFWVNfT1BFUkFUT1JfTElTVCk7CiAgICAgIGNvbnN0IG9wTGlzdCA9IG5ldyBPcGVyYXRvckxpc3QoaW50ZW50LCBzaW5rKTsKICAgICAgaGFuZGxlci5zZW5kKCJTdGFydFJlbmRlclBhZ2UiLCB7CiAgICAgICAgdHJhbnNwYXJlbmN5OiBwYXJ0aWFsRXZhbHVhdG9yLmhhc0JsZW5kTW9kZXMocmVzb3VyY2VzLCB0aGlzLm5vbkJsZW5kTW9kZXNTZXQpLAogICAgICAgIHBhZ2VJbmRleDogdGhpcy5wYWdlSW5kZXgsCiAgICAgICAgY2FjaGVLZXkKICAgICAgfSk7CiAgICAgIGF3YWl0IHBhcnRpYWxFdmFsdWF0b3IuZ2V0T3BlcmF0b3JMaXN0KHsKICAgICAgICBzdHJlYW06IGNvbnRlbnRTdHJlYW0sCiAgICAgICAgdGFzaywKICAgICAgICByZXNvdXJjZXMsCiAgICAgICAgb3BlcmF0b3JMaXN0OiBvcExpc3QKICAgICAgfSk7CiAgICAgIHJldHVybiBvcExpc3Q7CiAgICB9KTsKICAgIGxldCBbcGFnZU9wTGlzdCwgYW5ub3RhdGlvbnMsIG5ld0Fubm90YXRpb25zXSA9IGF3YWl0IFByb21pc2UuYWxsKFtwYWdlTGlzdFByb21pc2UsIHRoaXMuX3BhcnNlZEFubm90YXRpb25zLCBuZXdBbm5vdGF0aW9uc1Byb21pc2VdKTsKICAgIGlmIChuZXdBbm5vdGF0aW9ucykgewogICAgICBhbm5vdGF0aW9ucyA9IGFubm90YXRpb25zLmZpbHRlcihhID0+ICEoYS5yZWYgJiYgZGVsZXRlZEFubm90YXRpb25zLmhhcyhhLnJlZikpKTsKICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gbmV3QW5ub3RhdGlvbnMubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgICAgIGNvbnN0IG5ld0Fubm90YXRpb24gPSBuZXdBbm5vdGF0aW9uc1tpXTsKICAgICAgICBpZiAobmV3QW5ub3RhdGlvbi5yZWZUb1JlcGxhY2UpIHsKICAgICAgICAgIGNvbnN0IGogPSBhbm5vdGF0aW9ucy5maW5kSW5kZXgoYSA9PiBhLnJlZiAmJiBpc1JlZnNFcXVhbChhLnJlZiwgbmV3QW5ub3RhdGlvbi5yZWZUb1JlcGxhY2UpKTsKICAgICAgICAgIGlmIChqID49IDApIHsKICAgICAgICAgICAgYW5ub3RhdGlvbnMuc3BsaWNlKGosIDEsIG5ld0Fubm90YXRpb24pOwogICAgICAgICAgICBuZXdBbm5vdGF0aW9ucy5zcGxpY2UoaS0tLCAxKTsKICAgICAgICAgICAgaWktLTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgYW5ub3RhdGlvbnMgPSBhbm5vdGF0aW9ucy5jb25jYXQobmV3QW5ub3RhdGlvbnMpOwogICAgfQogICAgaWYgKGFubm90YXRpb25zLmxlbmd0aCA9PT0gMCB8fCBpbnRlbnQgJiBSZW5kZXJpbmdJbnRlbnRGbGFnLkFOTk9UQVRJT05TX0RJU0FCTEUpIHsKICAgICAgcGFnZU9wTGlzdC5mbHVzaCh0cnVlKTsKICAgICAgcmV0dXJuIHsKICAgICAgICBsZW5ndGg6IHBhZ2VPcExpc3QudG90YWxMZW5ndGgKICAgICAgfTsKICAgIH0KICAgIGNvbnN0IHJlbmRlckZvcm1zID0gISEoaW50ZW50ICYgUmVuZGVyaW5nSW50ZW50RmxhZy5BTk5PVEFUSU9OU19GT1JNUyksCiAgICAgIGlzRWRpdGluZyA9ICEhKGludGVudCAmIFJlbmRlcmluZ0ludGVudEZsYWcuSVNfRURJVElORyksCiAgICAgIGludGVudEFueSA9ICEhKGludGVudCAmIFJlbmRlcmluZ0ludGVudEZsYWcuQU5ZKSwKICAgICAgaW50ZW50RGlzcGxheSA9ICEhKGludGVudCAmIFJlbmRlcmluZ0ludGVudEZsYWcuRElTUExBWSksCiAgICAgIGludGVudFByaW50ID0gISEoaW50ZW50ICYgUmVuZGVyaW5nSW50ZW50RmxhZy5QUklOVCk7CiAgICBjb25zdCBvcExpc3RQcm9taXNlcyA9IFtdOwogICAgZm9yIChjb25zdCBhbm5vdGF0aW9uIG9mIGFubm90YXRpb25zKSB7CiAgICAgIGlmIChpbnRlbnRBbnkgfHwgaW50ZW50RGlzcGxheSAmJiBhbm5vdGF0aW9uLm11c3RCZVZpZXdlZChhbm5vdGF0aW9uU3RvcmFnZSwgcmVuZGVyRm9ybXMpICYmIGFubm90YXRpb24ubXVzdEJlVmlld2VkV2hlbkVkaXRpbmcoaXNFZGl0aW5nLCBtb2RpZmllZElkcykgfHwgaW50ZW50UHJpbnQgJiYgYW5ub3RhdGlvbi5tdXN0QmVQcmludGVkKGFubm90YXRpb25TdG9yYWdlKSkgewogICAgICAgIG9wTGlzdFByb21pc2VzLnB1c2goYW5ub3RhdGlvbi5nZXRPcGVyYXRvckxpc3QocGFydGlhbEV2YWx1YXRvciwgdGFzaywgaW50ZW50LCBhbm5vdGF0aW9uU3RvcmFnZSkuY2F0Y2goZnVuY3Rpb24gKHJlYXNvbikgewogICAgICAgICAgd2FybigiZ2V0T3BlcmF0b3JMaXN0IC0gaWdub3JpbmcgYW5ub3RhdGlvbiBkYXRhIGR1cmluZyAiICsgYCIke3Rhc2submFtZX0iIHRhc2s6ICIke3JlYXNvbn0iLmApOwogICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgb3BMaXN0OiBudWxsLAogICAgICAgICAgICBzZXBhcmF0ZUZvcm06IGZhbHNlLAogICAgICAgICAgICBzZXBhcmF0ZUNhbnZhczogZmFsc2UKICAgICAgICAgIH07CiAgICAgICAgfSkpOwogICAgICB9CiAgICB9CiAgICBjb25zdCBvcExpc3RzID0gYXdhaXQgUHJvbWlzZS5hbGwob3BMaXN0UHJvbWlzZXMpOwogICAgbGV0IGZvcm0gPSBmYWxzZSwKICAgICAgY2FudmFzID0gZmFsc2U7CiAgICBmb3IgKGNvbnN0IHsKICAgICAgb3BMaXN0LAogICAgICBzZXBhcmF0ZUZvcm0sCiAgICAgIHNlcGFyYXRlQ2FudmFzCiAgICB9IG9mIG9wTGlzdHMpIHsKICAgICAgcGFnZU9wTGlzdC5hZGRPcExpc3Qob3BMaXN0KTsKICAgICAgZm9ybSB8fD0gc2VwYXJhdGVGb3JtOwogICAgICBjYW52YXMgfHw9IHNlcGFyYXRlQ2FudmFzOwogICAgfQogICAgcGFnZU9wTGlzdC5mbHVzaCh0cnVlLCB7CiAgICAgIGZvcm0sCiAgICAgIGNhbnZhcwogICAgfSk7CiAgICByZXR1cm4gewogICAgICBsZW5ndGg6IHBhZ2VPcExpc3QudG90YWxMZW5ndGgKICAgIH07CiAgfQogIGFzeW5jIGV4dHJhY3RUZXh0Q29udGVudCh7CiAgICBoYW5kbGVyLAogICAgdGFzaywKICAgIGluY2x1ZGVNYXJrZWRDb250ZW50LAogICAgZGlzYWJsZU5vcm1hbGl6YXRpb24sCiAgICBzaW5rLAogICAgaW50ZXJzZWN0b3IgPSBudWxsCiAgfSkgewogICAgY29uc3QgY29udGVudFN0cmVhbVByb21pc2UgPSB0aGlzLmdldENvbnRlbnRTdHJlYW0oKTsKICAgIGNvbnN0IHJlc291cmNlc1Byb21pc2UgPSB0aGlzLmxvYWRSZXNvdXJjZXMoUkVTT1VSQ0VTX0tFWVNfVEVYVF9DT05URU5UKTsKICAgIGNvbnN0IGxhbmdQcm9taXNlID0gdGhpcy5wZGZNYW5hZ2VyLmVuc3VyZUNhdGFsb2coImxhbmciKTsKICAgIGNvbnN0IFtjb250ZW50U3RyZWFtLCwgbGFuZ10gPSBhd2FpdCBQcm9taXNlLmFsbChbY29udGVudFN0cmVhbVByb21pc2UsIHJlc291cmNlc1Byb21pc2UsIGxhbmdQcm9taXNlXSk7CiAgICBjb25zdCByZXNvdXJjZXMgPSBhd2FpdCB0aGlzLiNnZXRNZXJnZWRSZXNvdXJjZXMoY29udGVudFN0cmVhbS5kaWN0LCBSRVNPVVJDRVNfS0VZU19URVhUX0NPTlRFTlQpOwogICAgY29uc3QgcGFydGlhbEV2YWx1YXRvciA9IHRoaXMuI2NyZWF0ZVBhcnRpYWxFdmFsdWF0b3IoaGFuZGxlcik7CiAgICByZXR1cm4gcGFydGlhbEV2YWx1YXRvci5nZXRUZXh0Q29udGVudCh7CiAgICAgIHN0cmVhbTogY29udGVudFN0cmVhbSwKICAgICAgdGFzaywKICAgICAgcmVzb3VyY2VzLAogICAgICBpbmNsdWRlTWFya2VkQ29udGVudCwKICAgICAgZGlzYWJsZU5vcm1hbGl6YXRpb24sCiAgICAgIHNpbmssCiAgICAgIHZpZXdCb3g6IHRoaXMudmlldywKICAgICAgbGFuZywKICAgICAgaW50ZXJzZWN0b3IKICAgIH0pOwogIH0KICBhc3luYyBnZXRTdHJ1Y3RUcmVlKCkgewogICAgY29uc3Qgc3RydWN0VHJlZVJvb3QgPSBhd2FpdCB0aGlzLnBkZk1hbmFnZXIuZW5zdXJlQ2F0YWxvZygic3RydWN0VHJlZVJvb3QiKTsKICAgIGlmICghc3RydWN0VHJlZVJvb3QpIHsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICBhd2FpdCB0aGlzLl9wYXJzZWRBbm5vdGF0aW9uczsKICAgIHRyeSB7CiAgICAgIGNvbnN0IHN0cnVjdFRyZWUgPSBhd2FpdCB0aGlzLnBkZk1hbmFnZXIuZW5zdXJlKHRoaXMsICJfcGFyc2VTdHJ1Y3RUcmVlIiwgW3N0cnVjdFRyZWVSb290XSk7CiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLnBkZk1hbmFnZXIuZW5zdXJlKHN0cnVjdFRyZWUsICJzZXJpYWxpemFibGUiKTsKICAgICAgcmV0dXJuIGRhdGE7CiAgICB9IGNhdGNoIChleCkgewogICAgICB3YXJuKGBnZXRTdHJ1Y3RUcmVlOiAiJHtleH0iLmApOwogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICB9CiAgX3BhcnNlU3RydWN0VHJlZShzdHJ1Y3RUcmVlUm9vdCkgewogICAgY29uc3QgdHJlZSA9IG5ldyBTdHJ1Y3RUcmVlUGFnZShzdHJ1Y3RUcmVlUm9vdCwgdGhpcy5wYWdlRGljdCk7CiAgICB0cmVlLnBhcnNlKHRoaXMucmVmKTsKICAgIHJldHVybiB0cmVlOwogIH0KICBhc3luYyBnZXRBbm5vdGF0aW9uc0RhdGEoaGFuZGxlciwgdGFzaywgaW50ZW50KSB7CiAgICBjb25zdCBhbm5vdGF0aW9ucyA9IGF3YWl0IHRoaXMuX3BhcnNlZEFubm90YXRpb25zOwogICAgaWYgKGFubm90YXRpb25zLmxlbmd0aCA9PT0gMCkgewogICAgICByZXR1cm4gYW5ub3RhdGlvbnM7CiAgICB9CiAgICBjb25zdCBhbm5vdGF0aW9uc0RhdGEgPSBbXSwKICAgICAgdGV4dENvbnRlbnRQcm9taXNlcyA9IFtdOwogICAgbGV0IHBhcnRpYWxFdmFsdWF0b3I7CiAgICBjb25zdCBpbnRlbnRBbnkgPSAhIShpbnRlbnQgJiBSZW5kZXJpbmdJbnRlbnRGbGFnLkFOWSksCiAgICAgIGludGVudERpc3BsYXkgPSAhIShpbnRlbnQgJiBSZW5kZXJpbmdJbnRlbnRGbGFnLkRJU1BMQVkpLAogICAgICBpbnRlbnRQcmludCA9ICEhKGludGVudCAmIFJlbmRlcmluZ0ludGVudEZsYWcuUFJJTlQpOwogICAgY29uc3QgaGlnaGxpZ2h0ZWRBbm5vdGF0aW9ucyA9IFtdOwogICAgZm9yIChjb25zdCBhbm5vdGF0aW9uIG9mIGFubm90YXRpb25zKSB7CiAgICAgIGNvbnN0IGlzVmlzaWJsZSA9IGludGVudEFueSB8fCBpbnRlbnREaXNwbGF5ICYmIGFubm90YXRpb24udmlld2FibGU7CiAgICAgIGlmIChpc1Zpc2libGUgfHwgaW50ZW50UHJpbnQgJiYgYW5ub3RhdGlvbi5wcmludGFibGUpIHsKICAgICAgICBhbm5vdGF0aW9uc0RhdGEucHVzaChhbm5vdGF0aW9uLmRhdGEpOwogICAgICB9CiAgICAgIGlmIChhbm5vdGF0aW9uLmhhc1RleHRDb250ZW50ICYmIGlzVmlzaWJsZSkgewogICAgICAgIHBhcnRpYWxFdmFsdWF0b3IgPz89IHRoaXMuI2NyZWF0ZVBhcnRpYWxFdmFsdWF0b3IoaGFuZGxlcik7CiAgICAgICAgdGV4dENvbnRlbnRQcm9taXNlcy5wdXNoKGFubm90YXRpb24uZXh0cmFjdFRleHRDb250ZW50KHBhcnRpYWxFdmFsdWF0b3IsIHRhc2ssIFstSW5maW5pdHksIC1JbmZpbml0eSwgSW5maW5pdHksIEluZmluaXR5XSkuY2F0Y2goZnVuY3Rpb24gKHJlYXNvbikgewogICAgICAgICAgd2FybihgZ2V0QW5ub3RhdGlvbnNEYXRhIC0gaWdub3JpbmcgdGV4dENvbnRlbnQgZHVyaW5nICIke3Rhc2submFtZX0iIHRhc2s6ICIke3JlYXNvbn0iLmApOwogICAgICAgIH0pKTsKICAgICAgfSBlbHNlIGlmIChhbm5vdGF0aW9uLm92ZXJsYXlzVGV4dENvbnRlbnQgJiYgaXNWaXNpYmxlKSB7CiAgICAgICAgaGlnaGxpZ2h0ZWRBbm5vdGF0aW9ucy5wdXNoKGFubm90YXRpb24pOwogICAgICB9CiAgICB9CiAgICBpZiAoaGlnaGxpZ2h0ZWRBbm5vdGF0aW9ucy5sZW5ndGggPiAwKSB7CiAgICAgIGNvbnN0IGludGVyc2VjdG9yID0gbmV3IEludGVyc2VjdG9yKGhpZ2hsaWdodGVkQW5ub3RhdGlvbnMpOwogICAgICB0ZXh0Q29udGVudFByb21pc2VzLnB1c2godGhpcy5leHRyYWN0VGV4dENvbnRlbnQoewogICAgICAgIGhhbmRsZXIsCiAgICAgICAgdGFzaywKICAgICAgICBpbmNsdWRlTWFya2VkQ29udGVudDogZmFsc2UsCiAgICAgICAgZGlzYWJsZU5vcm1hbGl6YXRpb246IGZhbHNlLAogICAgICAgIHNpbms6IG51bGwsCiAgICAgICAgdmlld0JveDogdGhpcy52aWV3LAogICAgICAgIGxhbmc6IG51bGwsCiAgICAgICAgaW50ZXJzZWN0b3IKICAgICAgfSkudGhlbigoKSA9PiB7CiAgICAgICAgaW50ZXJzZWN0b3Iuc2V0VGV4dCgpOwogICAgICB9KSk7CiAgICB9CiAgICBhd2FpdCBQcm9taXNlLmFsbCh0ZXh0Q29udGVudFByb21pc2VzKTsKICAgIHJldHVybiBhbm5vdGF0aW9uc0RhdGE7CiAgfQogIGdldCBhbm5vdGF0aW9ucygpIHsKICAgIGNvbnN0IGFubm90cyA9IHRoaXMuI2dldEluaGVyaXRhYmxlUHJvcGVydHkoIkFubm90cyIpOwogICAgcmV0dXJuIHNoYWRvdyh0aGlzLCAiYW5ub3RhdGlvbnMiLCBBcnJheS5pc0FycmF5KGFubm90cykgPyBhbm5vdHMgOiBbXSk7CiAgfQogIGdldCBfcGFyc2VkQW5ub3RhdGlvbnMoKSB7CiAgICBjb25zdCBwcm9taXNlID0gdGhpcy5wZGZNYW5hZ2VyLmVuc3VyZSh0aGlzLCAiYW5ub3RhdGlvbnMiKS50aGVuKGFzeW5jIGFubm90cyA9PiB7CiAgICAgIGlmIChhbm5vdHMubGVuZ3RoID09PSAwKSB7CiAgICAgICAgcmV0dXJuIGFubm90czsKICAgICAgfQogICAgICBjb25zdCBbYW5ub3RhdGlvbkdsb2JhbHMsIGZpZWxkT2JqZWN0c10gPSBhd2FpdCBQcm9taXNlLmFsbChbdGhpcy5wZGZNYW5hZ2VyLmVuc3VyZURvYygiYW5ub3RhdGlvbkdsb2JhbHMiKSwgdGhpcy5wZGZNYW5hZ2VyLmVuc3VyZURvYygiZmllbGRPYmplY3RzIildKTsKICAgICAgaWYgKCFhbm5vdGF0aW9uR2xvYmFscykgewogICAgICAgIHJldHVybiBbXTsKICAgICAgfQogICAgICBjb25zdCBvcnBoYW5GaWVsZHMgPSBmaWVsZE9iamVjdHM/Lm9ycGhhbkZpZWxkczsKICAgICAgY29uc3QgYW5ub3RhdGlvblByb21pc2VzID0gW107CiAgICAgIGZvciAoY29uc3QgYW5ub3RhdGlvblJlZiBvZiBhbm5vdHMpIHsKICAgICAgICBhbm5vdGF0aW9uUHJvbWlzZXMucHVzaChBbm5vdGF0aW9uRmFjdG9yeS5jcmVhdGUodGhpcy54cmVmLCBhbm5vdGF0aW9uUmVmLCBhbm5vdGF0aW9uR2xvYmFscywgdGhpcy5fbG9jYWxJZEZhY3RvcnksIGZhbHNlLCBvcnBoYW5GaWVsZHMsIG51bGwsIHRoaXMucmVmKS5jYXRjaChmdW5jdGlvbiAocmVhc29uKSB7CiAgICAgICAgICB3YXJuKGBfcGFyc2VkQW5ub3RhdGlvbnM6ICIke3JlYXNvbn0iLmApOwogICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfSkpOwogICAgICB9CiAgICAgIGNvbnN0IHNvcnRlZEFubm90YXRpb25zID0gW107CiAgICAgIGxldCBwb3B1cEFubm90YXRpb25zLCB3aWRnZXRBbm5vdGF0aW9uczsKICAgICAgZm9yIChjb25zdCBhbm5vdGF0aW9uIG9mIGF3YWl0IFByb21pc2UuYWxsKGFubm90YXRpb25Qcm9taXNlcykpIHsKICAgICAgICBpZiAoIWFubm90YXRpb24pIHsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgICBpZiAoYW5ub3RhdGlvbiBpbnN0YW5jZW9mIFdpZGdldEFubm90YXRpb24pIHsKICAgICAgICAgICh3aWRnZXRBbm5vdGF0aW9ucyB8fD0gW10pLnB1c2goYW5ub3RhdGlvbik7CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CiAgICAgICAgaWYgKGFubm90YXRpb24gaW5zdGFuY2VvZiBQb3B1cEFubm90YXRpb24pIHsKICAgICAgICAgIChwb3B1cEFubm90YXRpb25zIHx8PSBbXSkucHVzaChhbm5vdGF0aW9uKTsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgICBzb3J0ZWRBbm5vdGF0aW9ucy5wdXNoKGFubm90YXRpb24pOwogICAgICB9CiAgICAgIGlmICh3aWRnZXRBbm5vdGF0aW9ucykgewogICAgICAgIHNvcnRlZEFubm90YXRpb25zLnB1c2goLi4ud2lkZ2V0QW5ub3RhdGlvbnMpOwogICAgICB9CiAgICAgIGlmIChwb3B1cEFubm90YXRpb25zKSB7CiAgICAgICAgc29ydGVkQW5ub3RhdGlvbnMucHVzaCguLi5wb3B1cEFubm90YXRpb25zKTsKICAgICAgfQogICAgICByZXR1cm4gc29ydGVkQW5ub3RhdGlvbnM7CiAgICB9KTsKICAgIHRoaXMuI2FyZUFubm90YXRpb25zQ2FjaGVkID0gdHJ1ZTsKICAgIHJldHVybiBzaGFkb3codGhpcywgIl9wYXJzZWRBbm5vdGF0aW9ucyIsIHByb21pc2UpOwogIH0KICBnZXQganNBY3Rpb25zKCkgewogICAgY29uc3QgYWN0aW9ucyA9IGNvbGxlY3RBY3Rpb25zKHRoaXMueHJlZiwgdGhpcy5wYWdlRGljdCwgUGFnZUFjdGlvbkV2ZW50VHlwZSk7CiAgICByZXR1cm4gc2hhZG93KHRoaXMsICJqc0FjdGlvbnMiLCBhY3Rpb25zKTsKICB9CiAgYXN5bmMgY29sbGVjdEFubm90YXRpb25zQnlUeXBlKGhhbmRsZXIsIHRhc2ssIHR5cGVzLCBwcm9taXNlcywgYW5ub3RhdGlvbkdsb2JhbHMpIHsKICAgIGNvbnN0IHsKICAgICAgcGFnZUluZGV4CiAgICB9ID0gdGhpczsKICAgIGlmICh0aGlzLiNhcmVBbm5vdGF0aW9uc0NhY2hlZCkgewogICAgICBjb25zdCBjYWNoZWRBbm5vdGF0aW9ucyA9IGF3YWl0IHRoaXMuX3BhcnNlZEFubm90YXRpb25zOwogICAgICBmb3IgKGNvbnN0IHsKICAgICAgICBkYXRhCiAgICAgIH0gb2YgY2FjaGVkQW5ub3RhdGlvbnMpIHsKICAgICAgICBpZiAoIXR5cGVzIHx8IHR5cGVzLmhhcyhkYXRhLmFubm90YXRpb25UeXBlKSkgewogICAgICAgICAgZGF0YS5wYWdlSW5kZXggPSBwYWdlSW5kZXg7CiAgICAgICAgICBwcm9taXNlcy5wdXNoKFByb21pc2UucmVzb2x2ZShkYXRhKSk7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybjsKICAgIH0KICAgIGNvbnN0IGFubm90cyA9IGF3YWl0IHRoaXMucGRmTWFuYWdlci5lbnN1cmUodGhpcywgImFubm90YXRpb25zIik7CiAgICBmb3IgKGNvbnN0IGFubm90YXRpb25SZWYgb2YgYW5ub3RzKSB7CiAgICAgIHByb21pc2VzLnB1c2goQW5ub3RhdGlvbkZhY3RvcnkuY3JlYXRlKHRoaXMueHJlZiwgYW5ub3RhdGlvblJlZiwgYW5ub3RhdGlvbkdsb2JhbHMsIHRoaXMuX2xvY2FsSWRGYWN0b3J5LCBmYWxzZSwgbnVsbCwgdHlwZXMsIHRoaXMucmVmKS50aGVuKGFzeW5jIGFubm90YXRpb24gPT4gewogICAgICAgIGlmICghYW5ub3RhdGlvbikgewogICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQogICAgICAgIGFubm90YXRpb24uZGF0YS5wYWdlSW5kZXggPSBwYWdlSW5kZXg7CiAgICAgICAgaWYgKGFubm90YXRpb24uaGFzVGV4dENvbnRlbnQgJiYgYW5ub3RhdGlvbi52aWV3YWJsZSkgewogICAgICAgICAgY29uc3QgcGFydGlhbEV2YWx1YXRvciA9IHRoaXMuI2NyZWF0ZVBhcnRpYWxFdmFsdWF0b3IoaGFuZGxlcik7CiAgICAgICAgICBhd2FpdCBhbm5vdGF0aW9uLmV4dHJhY3RUZXh0Q29udGVudChwYXJ0aWFsRXZhbHVhdG9yLCB0YXNrLCBbLUluZmluaXR5LCAtSW5maW5pdHksIEluZmluaXR5LCBJbmZpbml0eV0pOwogICAgICAgIH0KICAgICAgICByZXR1cm4gYW5ub3RhdGlvbi5kYXRhOwogICAgICB9KS5jYXRjaChmdW5jdGlvbiAocmVhc29uKSB7CiAgICAgICAgd2FybihgY29sbGVjdEFubm90YXRpb25zQnlUeXBlOiAiJHtyZWFzb259Ii5gKTsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfSkpOwogICAgfQogIH0KfQpjb25zdCBQREZfSEVBREVSX1NJR05BVFVSRSA9IG5ldyBVaW50OEFycmF5KFsweDI1LCAweDUwLCAweDQ0LCAweDQ2LCAweDJkXSk7CmNvbnN0IFNUQVJUWFJFRl9TSUdOQVRVUkUgPSBuZXcgVWludDhBcnJheShbMHg3MywgMHg3NCwgMHg2MSwgMHg3MiwgMHg3NCwgMHg3OCwgMHg3MiwgMHg2NSwgMHg2Nl0pOwpjb25zdCBFTkRPQkpfU0lHTkFUVVJFID0gbmV3IFVpbnQ4QXJyYXkoWzB4NjUsIDB4NmUsIDB4NjQsIDB4NmYsIDB4NjIsIDB4NmFdKTsKZnVuY3Rpb24gZmluZChzdHJlYW0sIHNpZ25hdHVyZSwgbGltaXQgPSAxMDI0LCBiYWNrd2FyZHMgPSBmYWxzZSkgewogIGNvbnN0IHNpZ25hdHVyZUxlbmd0aCA9IHNpZ25hdHVyZS5sZW5ndGg7CiAgY29uc3Qgc2NhbkJ5dGVzID0gc3RyZWFtLnBlZWtCeXRlcyhsaW1pdCk7CiAgY29uc3Qgc2Nhbkxlbmd0aCA9IHNjYW5CeXRlcy5sZW5ndGggLSBzaWduYXR1cmVMZW5ndGg7CiAgaWYgKHNjYW5MZW5ndGggPD0gMCkgewogICAgcmV0dXJuIGZhbHNlOwogIH0KICBpZiAoYmFja3dhcmRzKSB7CiAgICBjb25zdCBzaWduYXR1cmVFbmQgPSBzaWduYXR1cmVMZW5ndGggLSAxOwogICAgbGV0IHBvcyA9IHNjYW5CeXRlcy5sZW5ndGggLSAxOwogICAgd2hpbGUgKHBvcyA+PSBzaWduYXR1cmVFbmQpIHsKICAgICAgbGV0IGogPSAwOwogICAgICB3aGlsZSAoaiA8IHNpZ25hdHVyZUxlbmd0aCAmJiBzY2FuQnl0ZXNbcG9zIC0gal0gPT09IHNpZ25hdHVyZVtzaWduYXR1cmVFbmQgLSBqXSkgewogICAgICAgIGorKzsKICAgICAgfQogICAgICBpZiAoaiA+PSBzaWduYXR1cmVMZW5ndGgpIHsKICAgICAgICBzdHJlYW0ucG9zICs9IHBvcyAtIHNpZ25hdHVyZUVuZDsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgICBwb3MtLTsKICAgIH0KICB9IGVsc2UgewogICAgbGV0IHBvcyA9IDA7CiAgICB3aGlsZSAocG9zIDw9IHNjYW5MZW5ndGgpIHsKICAgICAgbGV0IGogPSAwOwogICAgICB3aGlsZSAoaiA8IHNpZ25hdHVyZUxlbmd0aCAmJiBzY2FuQnl0ZXNbcG9zICsgal0gPT09IHNpZ25hdHVyZVtqXSkgewogICAgICAgIGorKzsKICAgICAgfQogICAgICBpZiAoaiA+PSBzaWduYXR1cmVMZW5ndGgpIHsKICAgICAgICBzdHJlYW0ucG9zICs9IHBvczsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgICBwb3MrKzsKICAgIH0KICB9CiAgcmV0dXJuIGZhbHNlOwp9CmNsYXNzIFBERkRvY3VtZW50IHsKICAjcGFnZVByb21pc2VzID0gbmV3IE1hcCgpOwogICN2ZXJzaW9uID0gbnVsbDsKICBjb25zdHJ1Y3RvcihwZGZNYW5hZ2VyLCBzdHJlYW0pIHsKICAgIGlmIChzdHJlYW0ubGVuZ3RoIDw9IDApIHsKICAgICAgdGhyb3cgbmV3IEludmFsaWRQREZFeGNlcHRpb24oIlRoZSBQREYgZmlsZSBpcyBlbXB0eSwgaS5lLiBpdHMgc2l6ZSBpcyB6ZXJvIGJ5dGVzLiIpOwogICAgfQogICAgdGhpcy5wZGZNYW5hZ2VyID0gcGRmTWFuYWdlcjsKICAgIHRoaXMuc3RyZWFtID0gc3RyZWFtOwogICAgdGhpcy54cmVmID0gbmV3IFhSZWYoc3RyZWFtLCBwZGZNYW5hZ2VyKTsKICAgIGNvbnN0IGlkQ291bnRlcnMgPSB7CiAgICAgIGZvbnQ6IDAKICAgIH07CiAgICB0aGlzLl9nbG9iYWxJZEZhY3RvcnkgPSBjbGFzcyB7CiAgICAgIHN0YXRpYyBnZXREb2NJZCgpIHsKICAgICAgICByZXR1cm4gYGdfJHtwZGZNYW5hZ2VyLmRvY0lkfWA7CiAgICAgIH0KICAgICAgc3RhdGljIGNyZWF0ZUZvbnRJZCgpIHsKICAgICAgICByZXR1cm4gYGYkeysraWRDb3VudGVycy5mb250fWA7CiAgICAgIH0KICAgICAgc3RhdGljIGNyZWF0ZU9iaklkKCkgewogICAgICAgIHVucmVhY2hhYmxlKCJBYnN0cmFjdCBtZXRob2QgYGNyZWF0ZU9iaklkYCBjYWxsZWQuIik7CiAgICAgIH0KICAgICAgc3RhdGljIGdldFBhZ2VPYmpJZCgpIHsKICAgICAgICB1bnJlYWNoYWJsZSgiQWJzdHJhY3QgbWV0aG9kIGBnZXRQYWdlT2JqSWRgIGNhbGxlZC4iKTsKICAgICAgfQogICAgfTsKICB9CiAgcGFyc2UocmVjb3ZlcnlNb2RlKSB7CiAgICB0aGlzLnhyZWYucGFyc2UocmVjb3ZlcnlNb2RlKTsKICAgIHRoaXMuY2F0YWxvZyA9IG5ldyBDYXRhbG9nKHRoaXMucGRmTWFuYWdlciwgdGhpcy54cmVmKTsKICB9CiAgZ2V0IGxpbmVhcml6YXRpb24oKSB7CiAgICBsZXQgbGluZWFyaXphdGlvbiA9IG51bGw7CiAgICB0cnkgewogICAgICBsaW5lYXJpemF0aW9uID0gTGluZWFyaXphdGlvbi5jcmVhdGUodGhpcy5zdHJlYW0pOwogICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBNaXNzaW5nRGF0YUV4Y2VwdGlvbikgewogICAgICAgIHRocm93IGVycjsKICAgICAgfQogICAgICBpbmZvKGVycik7CiAgICB9CiAgICByZXR1cm4gc2hhZG93KHRoaXMsICJsaW5lYXJpemF0aW9uIiwgbGluZWFyaXphdGlvbik7CiAgfQogIGdldCBzdGFydFhSZWYoKSB7CiAgICBjb25zdCBzdHJlYW0gPSB0aGlzLnN0cmVhbTsKICAgIGxldCBzdGFydFhSZWYgPSAwOwogICAgaWYgKHRoaXMubGluZWFyaXphdGlvbikgewogICAgICBzdHJlYW0ucmVzZXQoKTsKICAgICAgaWYgKGZpbmQoc3RyZWFtLCBFTkRPQkpfU0lHTkFUVVJFKSkgewogICAgICAgIHN0cmVhbS5za2lwKDYpOwogICAgICAgIGxldCBjaCA9IHN0cmVhbS5wZWVrQnl0ZSgpOwogICAgICAgIHdoaWxlIChpc1doaXRlU3BhY2UoY2gpKSB7CiAgICAgICAgICBzdHJlYW0ucG9zKys7CiAgICAgICAgICBjaCA9IHN0cmVhbS5wZWVrQnl0ZSgpOwogICAgICAgIH0KICAgICAgICBzdGFydFhSZWYgPSBzdHJlYW0ucG9zIC0gc3RyZWFtLnN0YXJ0OwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBjb25zdCBzdGVwID0gMTAyNDsKICAgICAgY29uc3Qgc3RhcnRYUmVmTGVuZ3RoID0gU1RBUlRYUkVGX1NJR05BVFVSRS5sZW5ndGg7CiAgICAgIGxldCBmb3VuZCA9IGZhbHNlLAogICAgICAgIHBvcyA9IHN0cmVhbS5lbmQ7CiAgICAgIHdoaWxlICghZm91bmQgJiYgcG9zID4gMCkgewogICAgICAgIHBvcyAtPSBzdGVwIC0gc3RhcnRYUmVmTGVuZ3RoOwogICAgICAgIGlmIChwb3MgPCAwKSB7CiAgICAgICAgICBwb3MgPSAwOwogICAgICAgIH0KICAgICAgICBzdHJlYW0ucG9zID0gcG9zOwogICAgICAgIGZvdW5kID0gZmluZChzdHJlYW0sIFNUQVJUWFJFRl9TSUdOQVRVUkUsIHN0ZXAsIHRydWUpOwogICAgICB9CiAgICAgIGlmIChmb3VuZCkgewogICAgICAgIHN0cmVhbS5za2lwKDkpOwogICAgICAgIGxldCBjaDsKICAgICAgICBkbyB7CiAgICAgICAgICBjaCA9IHN0cmVhbS5nZXRCeXRlKCk7CiAgICAgICAgfSB3aGlsZSAoaXNXaGl0ZVNwYWNlKGNoKSk7CiAgICAgICAgbGV0IHN0ciA9ICIiOwogICAgICAgIHdoaWxlIChjaCA+PSAweDIwICYmIGNoIDw9IDB4MzkpIHsKICAgICAgICAgIHN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoKTsKICAgICAgICAgIGNoID0gc3RyZWFtLmdldEJ5dGUoKTsKICAgICAgICB9CiAgICAgICAgc3RhcnRYUmVmID0gcGFyc2VJbnQoc3RyLCAxMCk7CiAgICAgICAgaWYgKGlzTmFOKHN0YXJ0WFJlZikpIHsKICAgICAgICAgIHN0YXJ0WFJlZiA9IDA7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICByZXR1cm4gc2hhZG93KHRoaXMsICJzdGFydFhSZWYiLCBzdGFydFhSZWYpOwogIH0KICBjaGVja0hlYWRlcigpIHsKICAgIGNvbnN0IHN0cmVhbSA9IHRoaXMuc3RyZWFtOwogICAgc3RyZWFtLnJlc2V0KCk7CiAgICBpZiAoIWZpbmQoc3RyZWFtLCBQREZfSEVBREVSX1NJR05BVFVSRSkpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgc3RyZWFtLm1vdmVTdGFydCgpOwogICAgc3RyZWFtLnNraXAoUERGX0hFQURFUl9TSUdOQVRVUkUubGVuZ3RoKTsKICAgIGxldCB2ZXJzaW9uID0gIiIsCiAgICAgIGNoOwogICAgd2hpbGUgKChjaCA9IHN0cmVhbS5nZXRCeXRlKCkpID4gMHgyMCAmJiB2ZXJzaW9uLmxlbmd0aCA8IDcpIHsKICAgICAgdmVyc2lvbiArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoKTsKICAgIH0KICAgIGlmIChQREZfVkVSU0lPTl9SRUdFWFAudGVzdCh2ZXJzaW9uKSkgewogICAgICB0aGlzLiN2ZXJzaW9uID0gdmVyc2lvbjsKICAgIH0gZWxzZSB7CiAgICAgIHdhcm4oYEludmFsaWQgUERGIGhlYWRlciB2ZXJzaW9uOiAke3ZlcnNpb259YCk7CiAgICB9CiAgfQogIHBhcnNlU3RhcnRYUmVmKCkgewogICAgdGhpcy54cmVmLnNldFN0YXJ0WFJlZih0aGlzLnN0YXJ0WFJlZik7CiAgfQogIGdldCBudW1QYWdlcygpIHsKICAgIGxldCBudW0gPSAwOwogICAgaWYgKHRoaXMuY2F0YWxvZy5oYXNBY3R1YWxOdW1QYWdlcykgewogICAgICBudW0gPSB0aGlzLmNhdGFsb2cubnVtUGFnZXM7CiAgICB9IGVsc2UgaWYgKHRoaXMueGZhRmFjdG9yeSkgewogICAgICBudW0gPSB0aGlzLnhmYUZhY3RvcnkuZ2V0TnVtUGFnZXMoKTsKICAgIH0gZWxzZSBpZiAodGhpcy5saW5lYXJpemF0aW9uKSB7CiAgICAgIG51bSA9IHRoaXMubGluZWFyaXphdGlvbi5udW1QYWdlczsKICAgIH0gZWxzZSB7CiAgICAgIG51bSA9IHRoaXMuY2F0YWxvZy5udW1QYWdlczsKICAgIH0KICAgIHJldHVybiBzaGFkb3codGhpcywgIm51bVBhZ2VzIiwgbnVtKTsKICB9CiAgI2hhc09ubHlEb2N1bWVudFNpZ25hdHVyZXMoZmllbGRzLCByZWN1cnNpb25EZXB0aCA9IDApIHsKICAgIGNvbnN0IFJFQ1VSU0lPTl9MSU1JVCA9IDEwOwogICAgaWYgKCFBcnJheS5pc0FycmF5KGZpZWxkcykpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgcmV0dXJuIGZpZWxkcy5ldmVyeShmaWVsZCA9PiB7CiAgICAgIGZpZWxkID0gdGhpcy54cmVmLmZldGNoSWZSZWYoZmllbGQpOwogICAgICBpZiAoIShmaWVsZCBpbnN0YW5jZW9mIERpY3QpKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICAgIGlmIChmaWVsZC5oYXMoIktpZHMiKSkgewogICAgICAgIGlmICgrK3JlY3Vyc2lvbkRlcHRoID4gUkVDVVJTSU9OX0xJTUlUKSB7CiAgICAgICAgICB3YXJuKCIjaGFzT25seURvY3VtZW50U2lnbmF0dXJlczogbWF4aW11bSByZWN1cnNpb24gZGVwdGggcmVhY2hlZCIpOwogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdGhpcy4jaGFzT25seURvY3VtZW50U2lnbmF0dXJlcyhmaWVsZC5nZXQoIktpZHMiKSwgcmVjdXJzaW9uRGVwdGgpOwogICAgICB9CiAgICAgIGNvbnN0IGlzU2lnbmF0dXJlID0gaXNOYW1lKGZpZWxkLmdldCgiRlQiKSwgIlNpZyIpOwogICAgICBjb25zdCByZWN0YW5nbGUgPSBmaWVsZC5nZXQoIlJlY3QiKTsKICAgICAgY29uc3QgaXNJbnZpc2libGUgPSBBcnJheS5pc0FycmF5KHJlY3RhbmdsZSkgJiYgcmVjdGFuZ2xlLmV2ZXJ5KHZhbHVlID0+IHZhbHVlID09PSAwKTsKICAgICAgcmV0dXJuIGlzU2lnbmF0dXJlICYmIGlzSW52aXNpYmxlOwogICAgfSk7CiAgfQogICNjb2xsZWN0U2lnbmF0dXJlQ2VydGlmaWNhdGVzKGZpZWxkcywgY29sbGVjdGVkU2lnbmF0dXJlQ2VydGlmaWNhdGVzLCB2aXNpdGVkID0gbmV3IFJlZlNldCgpKSB7CiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZmllbGRzKSkgewogICAgICByZXR1cm47CiAgICB9CiAgICBmb3IgKGxldCBmaWVsZCBvZiBmaWVsZHMpIHsKICAgICAgaWYgKGZpZWxkIGluc3RhbmNlb2YgUmVmKSB7CiAgICAgICAgaWYgKHZpc2l0ZWQuaGFzKGZpZWxkKSkgewogICAgICAgICAgY29udGludWU7CiAgICAgICAgfQogICAgICAgIHZpc2l0ZWQucHV0KGZpZWxkKTsKICAgICAgfQogICAgICBmaWVsZCA9IHRoaXMueHJlZi5mZXRjaElmUmVmKGZpZWxkKTsKICAgICAgaWYgKCEoZmllbGQgaW5zdGFuY2VvZiBEaWN0KSkgewogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGlmIChmaWVsZC5oYXMoIktpZHMiKSkgewogICAgICAgIHRoaXMuI2NvbGxlY3RTaWduYXR1cmVDZXJ0aWZpY2F0ZXMoZmllbGQuZ2V0KCJLaWRzIiksIGNvbGxlY3RlZFNpZ25hdHVyZUNlcnRpZmljYXRlcywgdmlzaXRlZCk7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgY29uc3QgaXNTaWduYXR1cmUgPSBpc05hbWUoZmllbGQuZ2V0KCJGVCIpLCAiU2lnIik7CiAgICAgIGlmICghaXNTaWduYXR1cmUpIHsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBjb25zdCB2YWx1ZSA9IGZpZWxkLmdldCgiViIpOwogICAgICBpZiAoISh2YWx1ZSBpbnN0YW5jZW9mIERpY3QpKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgY29uc3Qgc3ViRmlsdGVyID0gdmFsdWUuZ2V0KCJTdWJGaWx0ZXIiKTsKICAgICAgaWYgKCEoc3ViRmlsdGVyIGluc3RhbmNlb2YgTmFtZSkpIHsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBjb2xsZWN0ZWRTaWduYXR1cmVDZXJ0aWZpY2F0ZXMuYWRkKHN1YkZpbHRlci5uYW1lKTsKICAgIH0KICB9CiAgZ2V0IF94ZmFTdHJlYW1zKCkgewogICAgY29uc3QgewogICAgICBhY3JvRm9ybQogICAgfSA9IHRoaXMuY2F0YWxvZzsKICAgIGlmICghYWNyb0Zvcm0pIHsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICBjb25zdCB4ZmEgPSBhY3JvRm9ybS5nZXQoIlhGQSIpOwogICAgY29uc3QgZW50cmllcyA9IG5ldyBNYXAoWyJ4ZHA6eGRwIiwgInRlbXBsYXRlIiwgImRhdGFzZXRzIiwgImNvbmZpZyIsICJjb25uZWN0aW9uU2V0IiwgImxvY2FsZVNldCIsICJzdHlsZXNoZWV0IiwgIi94ZHA6eGRwIl0ubWFwKGUgPT4gW2UsIG51bGxdKSk7CiAgICBpZiAoeGZhIGluc3RhbmNlb2YgQmFzZVN0cmVhbSAmJiAheGZhLmlzRW1wdHkpIHsKICAgICAgZW50cmllcy5zZXQoInhkcDp4ZHAiLCB4ZmEpOwogICAgICByZXR1cm4gZW50cmllczsKICAgIH0KICAgIGlmICghQXJyYXkuaXNBcnJheSh4ZmEpIHx8IHhmYS5sZW5ndGggPT09IDApIHsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICBmb3IgKGxldCBpID0gMCwgaWkgPSB4ZmEubGVuZ3RoOyBpIDwgaWk7IGkgKz0gMikgewogICAgICBsZXQgbmFtZTsKICAgICAgaWYgKGkgPT09IDApIHsKICAgICAgICBuYW1lID0gInhkcDp4ZHAiOwogICAgICB9IGVsc2UgaWYgKGkgPT09IGlpIC0gMikgewogICAgICAgIG5hbWUgPSAiL3hkcDp4ZHAiOwogICAgICB9IGVsc2UgewogICAgICAgIG5hbWUgPSB4ZmFbaV07CiAgICAgIH0KICAgICAgaWYgKCFlbnRyaWVzLmhhcyhuYW1lKSkgewogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLnhyZWYuZmV0Y2hJZlJlZih4ZmFbaSArIDFdKTsKICAgICAgaWYgKCEoZGF0YSBpbnN0YW5jZW9mIEJhc2VTdHJlYW0pIHx8IGRhdGEuaXNFbXB0eSkgewogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGVudHJpZXMuc2V0KG5hbWUsIGRhdGEpOwogICAgfQogICAgcmV0dXJuIGVudHJpZXM7CiAgfQogIGdldCB4ZmFEYXRhc2V0cygpIHsKICAgIGNvbnN0IHN0cmVhbXMgPSB0aGlzLl94ZmFTdHJlYW1zOwogICAgaWYgKCFzdHJlYW1zKSB7CiAgICAgIHJldHVybiBzaGFkb3codGhpcywgInhmYURhdGFzZXRzIiwgbnVsbCk7CiAgICB9CiAgICBmb3IgKGNvbnN0IGtleSBvZiBbImRhdGFzZXRzIiwgInhkcDp4ZHAiXSkgewogICAgICBjb25zdCBzdHJlYW0gPSBzdHJlYW1zLmdldChrZXkpOwogICAgICBpZiAoIXN0cmVhbSkgewogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIHRyeSB7CiAgICAgICAgY29uc3Qgc3RyID0gc3RyaW5nVG9VVEY4U3RyaW5nKHN0cmVhbS5nZXRTdHJpbmcoKSk7CiAgICAgICAgY29uc3QgZGF0YSA9IHsKICAgICAgICAgIFtrZXldOiBzdHIKICAgICAgICB9OwogICAgICAgIHJldHVybiBzaGFkb3codGhpcywgInhmYURhdGFzZXRzIiwgbmV3IERhdGFzZXRSZWFkZXIoZGF0YSkpOwogICAgICB9IGNhdGNoIHsKICAgICAgICB3YXJuKCJYRkEgLSBJbnZhbGlkIHV0Zi04IHN0cmluZy4iKTsKICAgICAgICBicmVhazsKICAgICAgfQogICAgfQogICAgcmV0dXJuIHNoYWRvdyh0aGlzLCAieGZhRGF0YXNldHMiLCBudWxsKTsKICB9CiAgZ2V0IHhmYURhdGEoKSB7CiAgICBjb25zdCBzdHJlYW1zID0gdGhpcy5feGZhU3RyZWFtczsKICAgIGlmICghc3RyZWFtcykgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIGNvbnN0IGRhdGEgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgZm9yIChjb25zdCBba2V5LCBzdHJlYW1dIG9mIHN0cmVhbXMpIHsKICAgICAgaWYgKCFzdHJlYW0pIHsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICB0cnkgewogICAgICAgIGRhdGFba2V5XSA9IHN0cmluZ1RvVVRGOFN0cmluZyhzdHJlYW0uZ2V0U3RyaW5nKCkpOwogICAgICB9IGNhdGNoIHsKICAgICAgICB3YXJuKCJYRkEgLSBJbnZhbGlkIHV0Zi04IHN0cmluZy4iKTsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgfQogICAgcmV0dXJuIGRhdGE7CiAgfQogIGdldCB4ZmFGYWN0b3J5KCkgewogICAgbGV0IGRhdGE7CiAgICBpZiAodGhpcy5wZGZNYW5hZ2VyLmVuYWJsZVhmYSAmJiB0aGlzLmNhdGFsb2cubmVlZHNSZW5kZXJpbmcgJiYgdGhpcy5mb3JtSW5mby5oYXNYZmEgJiYgIXRoaXMuZm9ybUluZm8uaGFzQWNyb0Zvcm0pIHsKICAgICAgZGF0YSA9IHRoaXMueGZhRGF0YTsKICAgIH0KICAgIHJldHVybiBzaGFkb3codGhpcywgInhmYUZhY3RvcnkiLCBkYXRhID8gbmV3IFhGQUZhY3RvcnkoZGF0YSkgOiBudWxsKTsKICB9CiAgZ2V0IGlzUHVyZVhmYSgpIHsKICAgIHJldHVybiB0aGlzLnhmYUZhY3RvcnkgPyB0aGlzLnhmYUZhY3RvcnkuaXNWYWxpZCgpIDogZmFsc2U7CiAgfQogIGdldCBodG1sRm9yWGZhKCkgewogICAgcmV0dXJuIHRoaXMueGZhRmFjdG9yeSA/IHRoaXMueGZhRmFjdG9yeS5nZXRQYWdlcygpIDogbnVsbDsKICB9CiAgYXN5bmMgI2xvYWRYZmFJbWFnZXMoKSB7CiAgICBjb25zdCB4ZmFJbWFnZXMgPSBhd2FpdCB0aGlzLnBkZk1hbmFnZXIuZW5zdXJlQ2F0YWxvZygieGZhSW1hZ2VzIik7CiAgICBpZiAoIXhmYUltYWdlcykgewogICAgICByZXR1cm47CiAgICB9CiAgICB0aGlzLnhmYUZhY3Rvcnkuc2V0SW1hZ2VzKHhmYUltYWdlcyk7CiAgfQogIGFzeW5jICNsb2FkWGZhRm9udHMoaGFuZGxlciwgdGFzaykgewogICAgY29uc3QgYWNyb0Zvcm0gPSBhd2FpdCB0aGlzLnBkZk1hbmFnZXIuZW5zdXJlQ2F0YWxvZygiYWNyb0Zvcm0iKTsKICAgIGlmICghYWNyb0Zvcm0pIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgY29uc3QgcmVzb3VyY2VzID0gYXdhaXQgYWNyb0Zvcm0uZ2V0QXN5bmMoIkRSIik7CiAgICBpZiAoIShyZXNvdXJjZXMgaW5zdGFuY2VvZiBEaWN0KSkgewogICAgICByZXR1cm47CiAgICB9CiAgICBhd2FpdCBPYmplY3RMb2FkZXIubG9hZChyZXNvdXJjZXMsIFsiRm9udCJdLCB0aGlzLnhyZWYpOwogICAgY29uc3QgZm9udFJlcyA9IHJlc291cmNlcy5nZXQoIkZvbnQiKTsKICAgIGlmICghKGZvbnRSZXMgaW5zdGFuY2VvZiBEaWN0KSkgewogICAgICByZXR1cm47CiAgICB9CiAgICBjb25zdCBvcHRpb25zID0gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKG51bGwpLCB0aGlzLnBkZk1hbmFnZXIuZXZhbHVhdG9yT3B0aW9ucywgewogICAgICB1c2VTeXN0ZW1Gb250czogZmFsc2UKICAgIH0pOwogICAgY29uc3QgewogICAgICBidWlsdEluQ01hcENhY2hlLAogICAgICBmb250Q2FjaGUsCiAgICAgIHN0YW5kYXJkRm9udERhdGFDYWNoZQogICAgfSA9IHRoaXMuY2F0YWxvZzsKICAgIGNvbnN0IHBhcnRpYWxFdmFsdWF0b3IgPSBuZXcgUGFydGlhbEV2YWx1YXRvcih7CiAgICAgIHhyZWY6IHRoaXMueHJlZiwKICAgICAgaGFuZGxlciwKICAgICAgcGFnZUluZGV4OiAtMSwKICAgICAgaWRGYWN0b3J5OiB0aGlzLl9nbG9iYWxJZEZhY3RvcnksCiAgICAgIGZvbnRDYWNoZSwKICAgICAgYnVpbHRJbkNNYXBDYWNoZSwKICAgICAgc3RhbmRhcmRGb250RGF0YUNhY2hlLAogICAgICBvcHRpb25zCiAgICB9KTsKICAgIGNvbnN0IG9wZXJhdG9yTGlzdCA9IG5ldyBPcGVyYXRvckxpc3QoKTsKICAgIGNvbnN0IHBkZkZvbnRzID0gW107CiAgICBjb25zdCBpbml0aWFsU3RhdGUgPSB7CiAgICAgIGdldCBmb250KCkgewogICAgICAgIHJldHVybiBwZGZGb250cy5hdCgtMSk7CiAgICAgIH0sCiAgICAgIHNldCBmb250KGZvbnQpIHsKICAgICAgICBwZGZGb250cy5wdXNoKGZvbnQpOwogICAgICB9LAogICAgICBjbG9uZSgpIHsKICAgICAgICByZXR1cm4gdGhpczsKICAgICAgfQogICAgfTsKICAgIGNvbnN0IHBhcnNlRm9udCA9IChmb250TmFtZSwgZmFsbGJhY2tGb250RGljdCwgY3NzRm9udEluZm8pID0+IHBhcnRpYWxFdmFsdWF0b3IuaGFuZGxlU2V0Rm9udChyZXNvdXJjZXMsIFtOYW1lLmdldChmb250TmFtZSksIDFdLCBudWxsLCBvcGVyYXRvckxpc3QsIHRhc2ssIGluaXRpYWxTdGF0ZSwgZmFsbGJhY2tGb250RGljdCwgY3NzRm9udEluZm8pLmNhdGNoKHJlYXNvbiA9PiB7CiAgICAgIHdhcm4oYGxvYWRYZmFGb250czogIiR7cmVhc29ufSIuYCk7CiAgICAgIHJldHVybiBudWxsOwogICAgfSk7CiAgICBjb25zdCBwcm9taXNlcyA9IFtdOwogICAgZm9yIChjb25zdCBbZm9udE5hbWUsIGZvbnRdIG9mIGZvbnRSZXMpIHsKICAgICAgY29uc3QgZGVzY3JpcHRvciA9IGZvbnQuZ2V0KCJGb250RGVzY3JpcHRvciIpOwogICAgICBpZiAoIShkZXNjcmlwdG9yIGluc3RhbmNlb2YgRGljdCkpIHsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBsZXQgZm9udEZhbWlseSA9IGRlc2NyaXB0b3IuZ2V0KCJGb250RmFtaWx5Iik7CiAgICAgIGZvbnRGYW1pbHkgPSBmb250RmFtaWx5LnJlcGxhY2VBbGwoL1sgXSsoXGQpL2csICIkMSIpOwogICAgICBjb25zdCBmb250V2VpZ2h0ID0gZGVzY3JpcHRvci5nZXQoIkZvbnRXZWlnaHQiKTsKICAgICAgY29uc3QgaXRhbGljQW5nbGUgPSAtZGVzY3JpcHRvci5nZXQoIkl0YWxpY0FuZ2xlIik7CiAgICAgIGNvbnN0IGNzc0ZvbnRJbmZvID0gewogICAgICAgIGZvbnRGYW1pbHksCiAgICAgICAgZm9udFdlaWdodCwKICAgICAgICBpdGFsaWNBbmdsZQogICAgICB9OwogICAgICBpZiAoIXZhbGlkYXRlQ1NTRm9udChjc3NGb250SW5mbykpIHsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBwcm9taXNlcy5wdXNoKHBhcnNlRm9udChmb250TmFtZSwgbnVsbCwgY3NzRm9udEluZm8pKTsKICAgIH0KICAgIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTsKICAgIGNvbnN0IG1pc3NpbmdGb250cyA9IHRoaXMueGZhRmFjdG9yeS5zZXRGb250cyhwZGZGb250cyk7CiAgICBpZiAoIW1pc3NpbmdGb250cykgewogICAgICByZXR1cm47CiAgICB9CiAgICBvcHRpb25zLmlnbm9yZUVycm9ycyA9IHRydWU7CiAgICBwcm9taXNlcy5sZW5ndGggPSAwOwogICAgcGRmRm9udHMubGVuZ3RoID0gMDsKICAgIGNvbnN0IHJlYWxseU1pc3NpbmdGb250cyA9IG5ldyBTZXQoKTsKICAgIGZvciAoY29uc3QgbWlzc2luZyBvZiBtaXNzaW5nRm9udHMpIHsKICAgICAgaWYgKCFnZXRYZmFGb250TmFtZShgJHttaXNzaW5nfS1SZWd1bGFyYCkpIHsKICAgICAgICByZWFsbHlNaXNzaW5nRm9udHMuYWRkKG1pc3NpbmcpOwogICAgICB9CiAgICB9CiAgICBpZiAocmVhbGx5TWlzc2luZ0ZvbnRzLnNpemUpIHsKICAgICAgbWlzc2luZ0ZvbnRzLnB1c2goIlBkZkpTLUZhbGxiYWNrIik7CiAgICB9CiAgICBmb3IgKGNvbnN0IG1pc3Npbmcgb2YgbWlzc2luZ0ZvbnRzKSB7CiAgICAgIGlmIChyZWFsbHlNaXNzaW5nRm9udHMuaGFzKG1pc3NpbmcpKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgZm9yIChjb25zdCBmb250SW5mbyBvZiBbewogICAgICAgIG5hbWU6ICJSZWd1bGFyIiwKICAgICAgICBmb250V2VpZ2h0OiA0MDAsCiAgICAgICAgaXRhbGljQW5nbGU6IDAKICAgICAgfSwgewogICAgICAgIG5hbWU6ICJCb2xkIiwKICAgICAgICBmb250V2VpZ2h0OiA3MDAsCiAgICAgICAgaXRhbGljQW5nbGU6IDAKICAgICAgfSwgewogICAgICAgIG5hbWU6ICJJdGFsaWMiLAogICAgICAgIGZvbnRXZWlnaHQ6IDQwMCwKICAgICAgICBpdGFsaWNBbmdsZTogMTIKICAgICAgfSwgewogICAgICAgIG5hbWU6ICJCb2xkSXRhbGljIiwKICAgICAgICBmb250V2VpZ2h0OiA3MDAsCiAgICAgICAgaXRhbGljQW5nbGU6IDEyCiAgICAgIH1dKSB7CiAgICAgICAgY29uc3QgbmFtZSA9IGAke21pc3Npbmd9LSR7Zm9udEluZm8ubmFtZX1gOwogICAgICAgIHByb21pc2VzLnB1c2gocGFyc2VGb250KG5hbWUsIGdldFhmYUZvbnREaWN0KG5hbWUpLCB7CiAgICAgICAgICBmb250RmFtaWx5OiBtaXNzaW5nLAogICAgICAgICAgZm9udFdlaWdodDogZm9udEluZm8uZm9udFdlaWdodCwKICAgICAgICAgIGl0YWxpY0FuZ2xlOiBmb250SW5mby5pdGFsaWNBbmdsZQogICAgICAgIH0pKTsKICAgICAgfQogICAgfQogICAgYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpOwogICAgdGhpcy54ZmFGYWN0b3J5LmFwcGVuZEZvbnRzKHBkZkZvbnRzLCByZWFsbHlNaXNzaW5nRm9udHMpOwogIH0KICBsb2FkWGZhUmVzb3VyY2VzKGhhbmRsZXIsIHRhc2spIHsKICAgIHJldHVybiBQcm9taXNlLmFsbChbdGhpcy4jbG9hZFhmYUZvbnRzKGhhbmRsZXIsIHRhc2spLmNhdGNoKCgpID0+IHt9KSwgdGhpcy4jbG9hZFhmYUltYWdlcygpXSk7CiAgfQogIHNlcmlhbGl6ZVhmYURhdGEoYW5ub3RhdGlvblN0b3JhZ2UpIHsKICAgIHJldHVybiB0aGlzLnhmYUZhY3RvcnkgPyB0aGlzLnhmYUZhY3Rvcnkuc2VyaWFsaXplRGF0YShhbm5vdGF0aW9uU3RvcmFnZSkgOiBudWxsOwogIH0KICBnZXQgdmVyc2lvbigpIHsKICAgIHJldHVybiB0aGlzLmNhdGFsb2cudmVyc2lvbiB8fCB0aGlzLiN2ZXJzaW9uOwogIH0KICBnZXQgZm9ybUluZm8oKSB7CiAgICBjb25zdCBmb3JtSW5mbyA9IHsKICAgICAgaGFzRmllbGRzOiBmYWxzZSwKICAgICAgaGFzQWNyb0Zvcm06IGZhbHNlLAogICAgICBoYXNYZmE6IGZhbHNlLAogICAgICBoYXNTaWduYXR1cmVzOiBmYWxzZQogICAgfTsKICAgIGNvbnN0IHsKICAgICAgYWNyb0Zvcm0KICAgIH0gPSB0aGlzLmNhdGFsb2c7CiAgICBpZiAoIWFjcm9Gb3JtKSB7CiAgICAgIHJldHVybiBzaGFkb3codGhpcywgImZvcm1JbmZvIiwgZm9ybUluZm8pOwogICAgfQogICAgdHJ5IHsKICAgICAgY29uc3QgZmllbGRzID0gYWNyb0Zvcm0uZ2V0KCJGaWVsZHMiKTsKICAgICAgY29uc3QgaGFzRmllbGRzID0gQXJyYXkuaXNBcnJheShmaWVsZHMpICYmIGZpZWxkcy5sZW5ndGggPiAwOwogICAgICBmb3JtSW5mby5oYXNGaWVsZHMgPSBoYXNGaWVsZHM7CiAgICAgIGNvbnN0IHhmYSA9IGFjcm9Gb3JtLmdldCgiWEZBIik7CiAgICAgIGZvcm1JbmZvLmhhc1hmYSA9IEFycmF5LmlzQXJyYXkoeGZhKSAmJiB4ZmEubGVuZ3RoID4gMCB8fCB4ZmEgaW5zdGFuY2VvZiBCYXNlU3RyZWFtICYmICF4ZmEuaXNFbXB0eTsKICAgICAgY29uc3Qgc2lnRmxhZ3MgPSBhY3JvRm9ybS5nZXQoIlNpZ0ZsYWdzIik7CiAgICAgIGNvbnN0IGhhc1NpZ25hdHVyZXMgPSAhIShzaWdGbGFncyAmIDB4MSk7CiAgICAgIGNvbnN0IGhhc09ubHlEb2N1bWVudFNpZ25hdHVyZXMgPSBoYXNTaWduYXR1cmVzICYmIHRoaXMuI2hhc09ubHlEb2N1bWVudFNpZ25hdHVyZXMoZmllbGRzKTsKICAgICAgZm9ybUluZm8uaGFzQWNyb0Zvcm0gPSBoYXNGaWVsZHMgJiYgIWhhc09ubHlEb2N1bWVudFNpZ25hdHVyZXM7CiAgICAgIGZvcm1JbmZvLmhhc1NpZ25hdHVyZXMgPSBoYXNTaWduYXR1cmVzOwogICAgfSBjYXRjaCAoZXgpIHsKICAgICAgaWYgKGV4IGluc3RhbmNlb2YgTWlzc2luZ0RhdGFFeGNlcHRpb24pIHsKICAgICAgICB0aHJvdyBleDsKICAgICAgfQogICAgICB3YXJuKGBDYW5ub3QgZmV0Y2ggZm9ybSBpbmZvcm1hdGlvbjogIiR7ZXh9Ii5gKTsKICAgIH0KICAgIHJldHVybiBzaGFkb3codGhpcywgImZvcm1JbmZvIiwgZm9ybUluZm8pOwogIH0KICBnZXQgZG9jdW1lbnRJbmZvKCkgewogICAgY29uc3QgewogICAgICBjYXRhbG9nLAogICAgICBmb3JtSW5mbywKICAgICAgeHJlZgogICAgfSA9IHRoaXM7CiAgICBjb25zdCBkb2NJbmZvID0gewogICAgICBQREZGb3JtYXRWZXJzaW9uOiB0aGlzLnZlcnNpb24sCiAgICAgIExhbmd1YWdlOiBjYXRhbG9nLmxhbmcsCiAgICAgIEVuY3J5cHRGaWx0ZXJOYW1lOiB4cmVmLmVuY3J5cHQ/LmZpbHRlck5hbWUgPz8gbnVsbCwKICAgICAgSXNMaW5lYXJpemVkOiAhIXRoaXMubGluZWFyaXphdGlvbiwKICAgICAgSXNBY3JvRm9ybVByZXNlbnQ6IGZvcm1JbmZvLmhhc0Fjcm9Gb3JtLAogICAgICBJc1hGQVByZXNlbnQ6IGZvcm1JbmZvLmhhc1hmYSwKICAgICAgSXNDb2xsZWN0aW9uUHJlc2VudDogISFjYXRhbG9nLmNvbGxlY3Rpb24sCiAgICAgIElzU2lnbmF0dXJlc1ByZXNlbnQ6IGZvcm1JbmZvLmhhc1NpZ25hdHVyZXMKICAgIH07CiAgICBsZXQgaW5mb0RpY3Q7CiAgICB0cnkgewogICAgICBpbmZvRGljdCA9IHhyZWYudHJhaWxlci5nZXQoIkluZm8iKTsKICAgIH0gY2F0Y2ggKGVycikgewogICAgICBpZiAoZXJyIGluc3RhbmNlb2YgTWlzc2luZ0RhdGFFeGNlcHRpb24pIHsKICAgICAgICB0aHJvdyBlcnI7CiAgICAgIH0KICAgICAgaW5mbygiVGhlIGRvY3VtZW50IGluZm9ybWF0aW9uIGRpY3Rpb25hcnkgaXMgaW52YWxpZC4iKTsKICAgIH0KICAgIGlmICghKGluZm9EaWN0IGluc3RhbmNlb2YgRGljdCkpIHsKICAgICAgcmV0dXJuIHNoYWRvdyh0aGlzLCAiZG9jdW1lbnRJbmZvIiwgZG9jSW5mbyk7CiAgICB9CiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBpbmZvRGljdCkgewogICAgICBzd2l0Y2ggKGtleSkgewogICAgICAgIGNhc2UgIlRpdGxlIjoKICAgICAgICBjYXNlICJBdXRob3IiOgogICAgICAgIGNhc2UgIlN1YmplY3QiOgogICAgICAgIGNhc2UgIktleXdvcmRzIjoKICAgICAgICBjYXNlICJDcmVhdG9yIjoKICAgICAgICBjYXNlICJQcm9kdWNlciI6CiAgICAgICAgY2FzZSAiQ3JlYXRpb25EYXRlIjoKICAgICAgICBjYXNlICJNb2REYXRlIjoKICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICJzdHJpbmciKSB7CiAgICAgICAgICAgIGRvY0luZm9ba2V5XSA9IHN0cmluZ1RvUERGU3RyaW5nKHZhbHVlKTsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJUcmFwcGVkIjoKICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE5hbWUpIHsKICAgICAgICAgICAgZG9jSW5mb1trZXldID0gdmFsdWU7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgICAgYnJlYWs7CiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIGxldCBjdXN0b21WYWx1ZTsKICAgICAgICAgIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7CiAgICAgICAgICAgIGNhc2UgInN0cmluZyI6CiAgICAgICAgICAgICAgY3VzdG9tVmFsdWUgPSBzdHJpbmdUb1BERlN0cmluZyh2YWx1ZSk7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgIm51bWJlciI6CiAgICAgICAgICAgIGNhc2UgImJvb2xlYW4iOgogICAgICAgICAgICAgIGN1c3RvbVZhbHVlID0gdmFsdWU7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTmFtZSkgewogICAgICAgICAgICAgICAgY3VzdG9tVmFsdWUgPSB2YWx1ZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoY3VzdG9tVmFsdWUgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICB3YXJuKGBCYWQgdmFsdWUsIGZvciBjdXN0b20ga2V5ICIke2tleX0iLCBpbiBJbmZvOiAke3ZhbHVlfS5gKTsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICBkb2NJbmZvLkN1c3RvbSA/Pz0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgICAgICAgIGRvY0luZm8uQ3VzdG9tW2tleV0gPSBjdXN0b21WYWx1ZTsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIHdhcm4oYEJhZCB2YWx1ZSwgZm9yIGtleSAiJHtrZXl9IiwgaW4gSW5mbzogJHt2YWx1ZX0uYCk7CiAgICB9CiAgICByZXR1cm4gc2hhZG93KHRoaXMsICJkb2N1bWVudEluZm8iLCBkb2NJbmZvKTsKICB9CiAgZ2V0IGZpbmdlcnByaW50cygpIHsKICAgIGNvbnN0IEZJTkdFUlBSSU5UX0ZJUlNUX0JZVEVTID0gMTAyNDsKICAgIGNvbnN0IEVNUFRZX0ZJTkdFUlBSSU5UID0gIlx4MDAiLnJlcGVhdCgxNik7CiAgICBmdW5jdGlvbiB2YWxpZGF0ZShkYXRhKSB7CiAgICAgIHJldHVybiB0eXBlb2YgZGF0YSA9PT0gInN0cmluZyIgJiYgZGF0YS5sZW5ndGggPT09IDE2ICYmIGRhdGEgIT09IEVNUFRZX0ZJTkdFUlBSSU5UOwogICAgfQogICAgY29uc3QgaWQgPSB0aGlzLnhyZWYudHJhaWxlci5nZXQoIklEIik7CiAgICBsZXQgaGFzaE9yaWdpbmFsLCBoYXNoTW9kaWZpZWQ7CiAgICBpZiAoQXJyYXkuaXNBcnJheShpZCkgJiYgdmFsaWRhdGUoaWRbMF0pKSB7CiAgICAgIGhhc2hPcmlnaW5hbCA9IHN0cmluZ1RvQnl0ZXMoaWRbMF0pOwogICAgICBpZiAoaWRbMV0gIT09IGlkWzBdICYmIHZhbGlkYXRlKGlkWzFdKSkgewogICAgICAgIGhhc2hNb2RpZmllZCA9IHN0cmluZ1RvQnl0ZXMoaWRbMV0pOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBoYXNoT3JpZ2luYWwgPSBjYWxjdWxhdGVNRDUodGhpcy5zdHJlYW0uZ2V0Qnl0ZVJhbmdlKDAsIEZJTkdFUlBSSU5UX0ZJUlNUX0JZVEVTKSwgMCwgRklOR0VSUFJJTlRfRklSU1RfQllURVMpOwogICAgfQogICAgcmV0dXJuIHNoYWRvdyh0aGlzLCAiZmluZ2VycHJpbnRzIiwgW3RvSGV4VXRpbChoYXNoT3JpZ2luYWwpLCBoYXNoTW9kaWZpZWQgPyB0b0hleFV0aWwoaGFzaE1vZGlmaWVkKSA6IG51bGxdKTsKICB9CiAgYXN5bmMgI2dldExpbmVhcml6YXRpb25QYWdlKHBhZ2VJbmRleCkgewogICAgY29uc3QgewogICAgICBjYXRhbG9nLAogICAgICBsaW5lYXJpemF0aW9uLAogICAgICB4cmVmCiAgICB9ID0gdGhpczsKICAgIGNvbnN0IHJlZiA9IFJlZi5nZXQobGluZWFyaXphdGlvbi5vYmplY3ROdW1iZXJGaXJzdCwgMCk7CiAgICB0cnkgewogICAgICBjb25zdCBvYmogPSBhd2FpdCB4cmVmLmZldGNoQXN5bmMocmVmKTsKICAgICAgaWYgKG9iaiBpbnN0YW5jZW9mIERpY3QpIHsKICAgICAgICBsZXQgdHlwZSA9IG9iai5nZXRSYXcoIlR5cGUiKTsKICAgICAgICBpZiAodHlwZSBpbnN0YW5jZW9mIFJlZikgewogICAgICAgICAgdHlwZSA9IGF3YWl0IHhyZWYuZmV0Y2hBc3luYyh0eXBlKTsKICAgICAgICB9CiAgICAgICAgaWYgKGlzTmFtZSh0eXBlLCAiUGFnZSIpIHx8ICFvYmouaGFzKCJUeXBlIikgJiYgIW9iai5oYXMoIktpZHMiKSAmJiBvYmouaGFzKCJDb250ZW50cyIpKSB7CiAgICAgICAgICBpZiAoIWNhdGFsb2cucGFnZUtpZHNDb3VudENhY2hlLmhhcyhyZWYpKSB7CiAgICAgICAgICAgIGNhdGFsb2cucGFnZUtpZHNDb3VudENhY2hlLnB1dChyZWYsIDEpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKCFjYXRhbG9nLnBhZ2VJbmRleENhY2hlLmhhcyhyZWYpKSB7CiAgICAgICAgICAgIGNhdGFsb2cucGFnZUluZGV4Q2FjaGUucHV0KHJlZiwgMCk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gW29iaiwgcmVmXTsKICAgICAgICB9CiAgICAgIH0KICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCJUaGUgTGluZWFyaXphdGlvbiBkaWN0aW9uYXJ5IGRvZXNuJ3QgcG9pbnQgdG8gYSB2YWxpZCBQYWdlIGRpY3Rpb25hcnkuIik7CiAgICB9IGNhdGNoIChyZWFzb24pIHsKICAgICAgd2FybihgX2dldExpbmVhcml6YXRpb25QYWdlOiAiJHtyZWFzb24ubWVzc2FnZX0iLmApOwogICAgICByZXR1cm4gY2F0YWxvZy5nZXRQYWdlRGljdChwYWdlSW5kZXgpOwogICAgfQogIH0KICBnZXRQYWdlKHBhZ2VJbmRleCkgewogICAgY29uc3QgY2FjaGVkUHJvbWlzZSA9IHRoaXMuI3BhZ2VQcm9taXNlcy5nZXQocGFnZUluZGV4KTsKICAgIGlmIChjYWNoZWRQcm9taXNlKSB7CiAgICAgIHJldHVybiBjYWNoZWRQcm9taXNlOwogICAgfQogICAgY29uc3QgewogICAgICBjYXRhbG9nLAogICAgICBsaW5lYXJpemF0aW9uLAogICAgICB4ZmFGYWN0b3J5CiAgICB9ID0gdGhpczsKICAgIGxldCBwcm9taXNlOwogICAgaWYgKHhmYUZhY3RvcnkpIHsKICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShbRGljdC5lbXB0eSwgbnVsbF0pOwogICAgfSBlbHNlIGlmIChsaW5lYXJpemF0aW9uPy5wYWdlRmlyc3QgPT09IHBhZ2VJbmRleCkgewogICAgICBwcm9taXNlID0gdGhpcy4jZ2V0TGluZWFyaXphdGlvblBhZ2UocGFnZUluZGV4KTsKICAgIH0gZWxzZSB7CiAgICAgIHByb21pc2UgPSBjYXRhbG9nLmdldFBhZ2VEaWN0KHBhZ2VJbmRleCk7CiAgICB9CiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKChbcGFnZURpY3QsIHJlZl0pID0+IG5ldyBQYWdlKHsKICAgICAgcGRmTWFuYWdlcjogdGhpcy5wZGZNYW5hZ2VyLAogICAgICB4cmVmOiB0aGlzLnhyZWYsCiAgICAgIHBhZ2VJbmRleCwKICAgICAgcGFnZURpY3QsCiAgICAgIHJlZiwKICAgICAgZ2xvYmFsSWRGYWN0b3J5OiB0aGlzLl9nbG9iYWxJZEZhY3RvcnksCiAgICAgIGZvbnRDYWNoZTogY2F0YWxvZy5mb250Q2FjaGUsCiAgICAgIGJ1aWx0SW5DTWFwQ2FjaGU6IGNhdGFsb2cuYnVpbHRJbkNNYXBDYWNoZSwKICAgICAgc3RhbmRhcmRGb250RGF0YUNhY2hlOiBjYXRhbG9nLnN0YW5kYXJkRm9udERhdGFDYWNoZSwKICAgICAgZ2xvYmFsQ29sb3JTcGFjZUNhY2hlOiBjYXRhbG9nLmdsb2JhbENvbG9yU3BhY2VDYWNoZSwKICAgICAgZ2xvYmFsSW1hZ2VDYWNoZTogY2F0YWxvZy5nbG9iYWxJbWFnZUNhY2hlLAogICAgICBzeXN0ZW1Gb250Q2FjaGU6IGNhdGFsb2cuc3lzdGVtRm9udENhY2hlLAogICAgICBub25CbGVuZE1vZGVzU2V0OiBjYXRhbG9nLm5vbkJsZW5kTW9kZXNTZXQsCiAgICAgIHhmYUZhY3RvcnkKICAgIH0pKTsKICAgIHRoaXMuI3BhZ2VQcm9taXNlcy5zZXQocGFnZUluZGV4LCBwcm9taXNlKTsKICAgIHJldHVybiBwcm9taXNlOwogIH0KICBhc3luYyBjaGVja0ZpcnN0UGFnZShyZWNvdmVyeU1vZGUgPSBmYWxzZSkgewogICAgaWYgKHJlY292ZXJ5TW9kZSkgewogICAgICByZXR1cm47CiAgICB9CiAgICB0cnkgewogICAgICBhd2FpdCB0aGlzLmdldFBhZ2UoMCk7CiAgICB9IGNhdGNoIChyZWFzb24pIHsKICAgICAgaWYgKHJlYXNvbiBpbnN0YW5jZW9mIFhSZWZFbnRyeUV4Y2VwdGlvbikgewogICAgICAgIHRoaXMuI3BhZ2VQcm9taXNlcy5kZWxldGUoMCk7CiAgICAgICAgYXdhaXQgdGhpcy5jbGVhbnVwKCk7CiAgICAgICAgdGhyb3cgbmV3IFhSZWZQYXJzZUV4Y2VwdGlvbigpOwogICAgICB9CiAgICB9CiAgfQogIGFzeW5jIGNoZWNrTGFzdFBhZ2UocmVjb3ZlcnlNb2RlID0gZmFsc2UpIHsKICAgIGNvbnN0IHsKICAgICAgY2F0YWxvZywKICAgICAgcGRmTWFuYWdlcgogICAgfSA9IHRoaXM7CiAgICBjYXRhbG9nLnNldEFjdHVhbE51bVBhZ2VzKCk7CiAgICBsZXQgbnVtUGFnZXM7CiAgICB0cnkgewogICAgICBhd2FpdCBQcm9taXNlLmFsbChbcGRmTWFuYWdlci5lbnN1cmVEb2MoInhmYUZhY3RvcnkiKSwgcGRmTWFuYWdlci5lbnN1cmVEb2MoImxpbmVhcml6YXRpb24iKSwgcGRmTWFuYWdlci5lbnN1cmVDYXRhbG9nKCJudW1QYWdlcyIpXSk7CiAgICAgIGlmICh0aGlzLnhmYUZhY3RvcnkpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0gZWxzZSBpZiAodGhpcy5saW5lYXJpemF0aW9uKSB7CiAgICAgICAgbnVtUGFnZXMgPSB0aGlzLmxpbmVhcml6YXRpb24ubnVtUGFnZXM7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgbnVtUGFnZXMgPSBjYXRhbG9nLm51bVBhZ2VzOwogICAgICB9CiAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihudW1QYWdlcykpIHsKICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoIlBhZ2UgY291bnQgaXMgbm90IGFuIGludGVnZXIuIik7CiAgICAgIH0gZWxzZSBpZiAobnVtUGFnZXMgPD0gMSkgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBhd2FpdCB0aGlzLmdldFBhZ2UobnVtUGFnZXMgLSAxKTsKICAgIH0gY2F0Y2ggKHJlYXNvbikgewogICAgICB0aGlzLiNwYWdlUHJvbWlzZXMuZGVsZXRlKG51bVBhZ2VzIC0gMSk7CiAgICAgIGF3YWl0IHRoaXMuY2xlYW51cCgpOwogICAgICBpZiAocmVhc29uIGluc3RhbmNlb2YgWFJlZkVudHJ5RXhjZXB0aW9uICYmICFyZWNvdmVyeU1vZGUpIHsKICAgICAgICB0aHJvdyBuZXcgWFJlZlBhcnNlRXhjZXB0aW9uKCk7CiAgICAgIH0KICAgICAgd2FybihgY2hlY2tMYXN0UGFnZSAtIGludmFsaWQgL1BhZ2VzIHRyZWUgL0NvdW50OiAke251bVBhZ2VzfS5gKTsKICAgICAgbGV0IHBhZ2VzVHJlZTsKICAgICAgdHJ5IHsKICAgICAgICBwYWdlc1RyZWUgPSBhd2FpdCBjYXRhbG9nLmdldEFsbFBhZ2VEaWN0cyhyZWNvdmVyeU1vZGUpOwogICAgICB9IGNhdGNoIChyZWFzb25BbGwpIHsKICAgICAgICBpZiAocmVhc29uQWxsIGluc3RhbmNlb2YgWFJlZkVudHJ5RXhjZXB0aW9uICYmICFyZWNvdmVyeU1vZGUpIHsKICAgICAgICAgIHRocm93IG5ldyBYUmVmUGFyc2VFeGNlcHRpb24oKTsKICAgICAgICB9CiAgICAgICAgY2F0YWxvZy5zZXRBY3R1YWxOdW1QYWdlcygxKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgZm9yIChjb25zdCBbcGFnZUluZGV4LCBbcGFnZURpY3QsIHJlZl1dIG9mIHBhZ2VzVHJlZSkgewogICAgICAgIGxldCBwcm9taXNlOwogICAgICAgIGlmIChwYWdlRGljdCBpbnN0YW5jZW9mIEVycm9yKSB7CiAgICAgICAgICBwcm9taXNlID0gUHJvbWlzZS5yZWplY3QocGFnZURpY3QpOwogICAgICAgICAgcHJvbWlzZS5jYXRjaCgoKSA9PiB7fSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUobmV3IFBhZ2UoewogICAgICAgICAgICBwZGZNYW5hZ2VyLAogICAgICAgICAgICB4cmVmOiB0aGlzLnhyZWYsCiAgICAgICAgICAgIHBhZ2VJbmRleCwKICAgICAgICAgICAgcGFnZURpY3QsCiAgICAgICAgICAgIHJlZiwKICAgICAgICAgICAgZ2xvYmFsSWRGYWN0b3J5OiB0aGlzLl9nbG9iYWxJZEZhY3RvcnksCiAgICAgICAgICAgIGZvbnRDYWNoZTogY2F0YWxvZy5mb250Q2FjaGUsCiAgICAgICAgICAgIGJ1aWx0SW5DTWFwQ2FjaGU6IGNhdGFsb2cuYnVpbHRJbkNNYXBDYWNoZSwKICAgICAgICAgICAgc3RhbmRhcmRGb250RGF0YUNhY2hlOiBjYXRhbG9nLnN0YW5kYXJkRm9udERhdGFDYWNoZSwKICAgICAgICAgICAgZ2xvYmFsQ29sb3JTcGFjZUNhY2hlOiB0aGlzLmdsb2JhbENvbG9yU3BhY2VDYWNoZSwKICAgICAgICAgICAgZ2xvYmFsSW1hZ2VDYWNoZTogY2F0YWxvZy5nbG9iYWxJbWFnZUNhY2hlLAogICAgICAgICAgICBzeXN0ZW1Gb250Q2FjaGU6IGNhdGFsb2cuc3lzdGVtRm9udENhY2hlLAogICAgICAgICAgICBub25CbGVuZE1vZGVzU2V0OiBjYXRhbG9nLm5vbkJsZW5kTW9kZXNTZXQsCiAgICAgICAgICAgIHhmYUZhY3Rvcnk6IG51bGwKICAgICAgICAgIH0pKTsKICAgICAgICB9CiAgICAgICAgdGhpcy4jcGFnZVByb21pc2VzLnNldChwYWdlSW5kZXgsIHByb21pc2UpOwogICAgICB9CiAgICAgIGNhdGFsb2cuc2V0QWN0dWFsTnVtUGFnZXMocGFnZXNUcmVlLnNpemUpOwogICAgfQogIH0KICBhc3luYyBmb250RmFsbGJhY2soaWQsIGhhbmRsZXIpIHsKICAgIGNvbnN0IHsKICAgICAgY2F0YWxvZywKICAgICAgcGRmTWFuYWdlcgogICAgfSA9IHRoaXM7CiAgICBmb3IgKGNvbnN0IHRyYW5zbGF0ZWRGb250IG9mIGF3YWl0IFByb21pc2UuYWxsKGNhdGFsb2cuZm9udENhY2hlKSkgewogICAgICBpZiAodHJhbnNsYXRlZEZvbnQubG9hZGVkTmFtZSA9PT0gaWQpIHsKICAgICAgICB0cmFuc2xhdGVkRm9udC5mYWxsYmFjayhoYW5kbGVyLCBwZGZNYW5hZ2VyLmV2YWx1YXRvck9wdGlvbnMpOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgfQogIH0KICBhc3luYyBjbGVhbnVwKG1hbnVhbGx5VHJpZ2dlcmVkID0gZmFsc2UpIHsKICAgIHJldHVybiB0aGlzLmNhdGFsb2cgPyB0aGlzLmNhdGFsb2cuY2xlYW51cChtYW51YWxseVRyaWdnZXJlZCkgOiBjbGVhckdsb2JhbENhY2hlcygpOwogIH0KICBhc3luYyAjY29sbGVjdEZpZWxkT2JqZWN0cyhuYW1lLCBwYXJlbnRSZWYsIGZpZWxkUmVmLCBwcm9taXNlcywgYW5ub3RhdGlvbkdsb2JhbHMsIHZpc2l0ZWRSZWZzLCBvcnBoYW5GaWVsZHMpIHsKICAgIGNvbnN0IHsKICAgICAgeHJlZgogICAgfSA9IHRoaXM7CiAgICBpZiAoIShmaWVsZFJlZiBpbnN0YW5jZW9mIFJlZikgfHwgdmlzaXRlZFJlZnMuaGFzKGZpZWxkUmVmKSkgewogICAgICByZXR1cm47CiAgICB9CiAgICB2aXNpdGVkUmVmcy5wdXQoZmllbGRSZWYpOwogICAgY29uc3QgZmllbGQgPSBhd2FpdCB4cmVmLmZldGNoQXN5bmMoZmllbGRSZWYpOwogICAgaWYgKCEoZmllbGQgaW5zdGFuY2VvZiBEaWN0KSkgewogICAgICByZXR1cm47CiAgICB9CiAgICBsZXQgc3VidHlwZSA9IGF3YWl0IGZpZWxkLmdldEFzeW5jKCJTdWJ0eXBlIik7CiAgICBzdWJ0eXBlID0gc3VidHlwZSBpbnN0YW5jZW9mIE5hbWUgPyBzdWJ0eXBlLm5hbWUgOiBudWxsOwogICAgc3dpdGNoIChzdWJ0eXBlKSB7CiAgICAgIGNhc2UgIkxpbmsiOgogICAgICAgIHJldHVybjsKICAgIH0KICAgIGlmIChmaWVsZC5oYXMoIlQiKSkgewogICAgICBjb25zdCBwYXJ0TmFtZSA9IHN0cmluZ1RvUERGU3RyaW5nKGF3YWl0IGZpZWxkLmdldEFzeW5jKCJUIikpOwogICAgICBuYW1lID0gbmFtZSA9PT0gIiIgPyBwYXJ0TmFtZSA6IGAke25hbWV9LiR7cGFydE5hbWV9YDsKICAgIH0gZWxzZSB7CiAgICAgIGxldCBvYmogPSBmaWVsZDsKICAgICAgd2hpbGUgKHRydWUpIHsKICAgICAgICBvYmogPSBvYmouZ2V0UmF3KCJQYXJlbnQiKSB8fCBwYXJlbnRSZWY7CiAgICAgICAgaWYgKG9iaiBpbnN0YW5jZW9mIFJlZikgewogICAgICAgICAgaWYgKHZpc2l0ZWRSZWZzLmhhcyhvYmopKSB7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgICAgb2JqID0gYXdhaXQgeHJlZi5mZXRjaEFzeW5jKG9iaik7CiAgICAgICAgfQogICAgICAgIGlmICghKG9iaiBpbnN0YW5jZW9mIERpY3QpKSB7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgICAgaWYgKG9iai5oYXMoIlQiKSkgewogICAgICAgICAgY29uc3QgcGFydE5hbWUgPSBzdHJpbmdUb1BERlN0cmluZyhhd2FpdCBvYmouZ2V0QXN5bmMoIlQiKSk7CiAgICAgICAgICBuYW1lID0gbmFtZSA9PT0gIiIgPyBwYXJ0TmFtZSA6IGAke25hbWV9LiR7cGFydE5hbWV9YDsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgaWYgKHBhcmVudFJlZiAmJiAhZmllbGQuaGFzKCJQYXJlbnQiKSAmJiBpc05hbWUoZmllbGQuZ2V0KCJTdWJ0eXBlIiksICJXaWRnZXQiKSkgewogICAgICBvcnBoYW5GaWVsZHMucHV0KGZpZWxkUmVmLCBwYXJlbnRSZWYpOwogICAgfQogICAgaWYgKCFwcm9taXNlcy5oYXMobmFtZSkpIHsKICAgICAgcHJvbWlzZXMuc2V0KG5hbWUsIFtdKTsKICAgIH0KICAgIHByb21pc2VzLmdldChuYW1lKS5wdXNoKEFubm90YXRpb25GYWN0b3J5LmNyZWF0ZSh4cmVmLCBmaWVsZFJlZiwgYW5ub3RhdGlvbkdsb2JhbHMsIG51bGwsIHRydWUsIG9ycGhhbkZpZWxkcywgbnVsbCwgbnVsbCkudGhlbihhbm5vdGF0aW9uID0+IGFubm90YXRpb24/LmdldEZpZWxkT2JqZWN0KCkpLmNhdGNoKGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgd2FybihgI2NvbGxlY3RGaWVsZE9iamVjdHM6ICIke3JlYXNvbn0iLmApOwogICAgICByZXR1cm4gbnVsbDsKICAgIH0pKTsKICAgIGlmICghZmllbGQuaGFzKCJLaWRzIikpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgY29uc3Qga2lkcyA9IGF3YWl0IGZpZWxkLmdldEFzeW5jKCJLaWRzIik7CiAgICBpZiAoQXJyYXkuaXNBcnJheShraWRzKSkgewogICAgICBmb3IgKGNvbnN0IGtpZCBvZiBraWRzKSB7CiAgICAgICAgYXdhaXQgdGhpcy4jY29sbGVjdEZpZWxkT2JqZWN0cyhuYW1lLCBmaWVsZFJlZiwga2lkLCBwcm9taXNlcywgYW5ub3RhdGlvbkdsb2JhbHMsIHZpc2l0ZWRSZWZzLCBvcnBoYW5GaWVsZHMpOwogICAgICB9CiAgICB9CiAgfQogIGdldCBmaWVsZE9iamVjdHMoKSB7CiAgICBjb25zdCBwcm9taXNlID0gdGhpcy5wZGZNYW5hZ2VyLmVuc3VyZURvYygiZm9ybUluZm8iKS50aGVuKGFzeW5jIGZvcm1JbmZvID0+IHsKICAgICAgaWYgKCFmb3JtSW5mby5oYXNGaWVsZHMpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgICBjb25zdCBhbm5vdGF0aW9uR2xvYmFscyA9IGF3YWl0IHRoaXMuYW5ub3RhdGlvbkdsb2JhbHM7CiAgICAgIGlmICghYW5ub3RhdGlvbkdsb2JhbHMpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgICBjb25zdCB7CiAgICAgICAgYWNyb0Zvcm0KICAgICAgfSA9IGFubm90YXRpb25HbG9iYWxzOwogICAgICBjb25zdCB2aXNpdGVkUmVmcyA9IG5ldyBSZWZTZXQoKTsKICAgICAgY29uc3QgYWxsRmllbGRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgICAgY29uc3QgZmllbGRQcm9taXNlcyA9IG5ldyBNYXAoKTsKICAgICAgY29uc3Qgb3JwaGFuRmllbGRzID0gbmV3IFJlZlNldENhY2hlKCk7CiAgICAgIGZvciAoY29uc3QgZmllbGRSZWYgb2YgYWNyb0Zvcm0uZ2V0KCJGaWVsZHMiKSkgewogICAgICAgIGF3YWl0IHRoaXMuI2NvbGxlY3RGaWVsZE9iamVjdHMoIiIsIG51bGwsIGZpZWxkUmVmLCBmaWVsZFByb21pc2VzLCBhbm5vdGF0aW9uR2xvYmFscywgdmlzaXRlZFJlZnMsIG9ycGhhbkZpZWxkcyk7CiAgICAgIH0KICAgICAgY29uc3QgYWxsUHJvbWlzZXMgPSBbXTsKICAgICAgZm9yIChjb25zdCBbbmFtZSwgcHJvbWlzZXNdIG9mIGZpZWxkUHJvbWlzZXMpIHsKICAgICAgICBhbGxQcm9taXNlcy5wdXNoKFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKGZpZWxkcyA9PiB7CiAgICAgICAgICBmaWVsZHMgPSBmaWVsZHMuZmlsdGVyKGZpZWxkID0+ICEhZmllbGQpOwogICAgICAgICAgaWYgKGZpZWxkcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIGFsbEZpZWxkc1tuYW1lXSA9IGZpZWxkczsKICAgICAgICAgIH0KICAgICAgICB9KSk7CiAgICAgIH0KICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoYWxsUHJvbWlzZXMpOwogICAgICByZXR1cm4gewogICAgICAgIGFsbEZpZWxkczogb2JqZWN0U2l6ZShhbGxGaWVsZHMpID4gMCA/IGFsbEZpZWxkcyA6IG51bGwsCiAgICAgICAgb3JwaGFuRmllbGRzCiAgICAgIH07CiAgICB9KTsKICAgIHJldHVybiBzaGFkb3codGhpcywgImZpZWxkT2JqZWN0cyIsIHByb21pc2UpOwogIH0KICBnZXQgaGFzSlNBY3Rpb25zKCkgewogICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucGRmTWFuYWdlci5lbnN1cmVEb2MoIl9wYXJzZUhhc0pTQWN0aW9ucyIpOwogICAgcmV0dXJuIHNoYWRvdyh0aGlzLCAiaGFzSlNBY3Rpb25zIiwgcHJvbWlzZSk7CiAgfQogIGFzeW5jIF9wYXJzZUhhc0pTQWN0aW9ucygpIHsKICAgIGNvbnN0IFtjYXRhbG9nSnNBY3Rpb25zLCBmaWVsZE9iamVjdHNdID0gYXdhaXQgUHJvbWlzZS5hbGwoW3RoaXMucGRmTWFuYWdlci5lbnN1cmVDYXRhbG9nKCJqc0FjdGlvbnMiKSwgdGhpcy5wZGZNYW5hZ2VyLmVuc3VyZURvYygiZmllbGRPYmplY3RzIildKTsKICAgIGlmIChjYXRhbG9nSnNBY3Rpb25zKSB7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgaWYgKGZpZWxkT2JqZWN0cz8uYWxsRmllbGRzKSB7CiAgICAgIHJldHVybiBPYmplY3QudmFsdWVzKGZpZWxkT2JqZWN0cy5hbGxGaWVsZHMpLnNvbWUoZmllbGRPYmplY3QgPT4gZmllbGRPYmplY3Quc29tZShvYmplY3QgPT4gb2JqZWN0LmFjdGlvbnMgIT09IG51bGwpKTsKICAgIH0KICAgIHJldHVybiBmYWxzZTsKICB9CiAgZ2V0IGNhbGN1bGF0aW9uT3JkZXJJZHMoKSB7CiAgICBjb25zdCBjYWxjdWxhdGlvbk9yZGVyID0gdGhpcy5jYXRhbG9nLmFjcm9Gb3JtPy5nZXQoIkNPIik7CiAgICBpZiAoIUFycmF5LmlzQXJyYXkoY2FsY3VsYXRpb25PcmRlcikgfHwgY2FsY3VsYXRpb25PcmRlci5sZW5ndGggPT09IDApIHsKICAgICAgcmV0dXJuIHNoYWRvdyh0aGlzLCAiY2FsY3VsYXRpb25PcmRlcklkcyIsIG51bGwpOwogICAgfQogICAgY29uc3QgaWRzID0gW107CiAgICBmb3IgKGNvbnN0IGlkIG9mIGNhbGN1bGF0aW9uT3JkZXIpIHsKICAgICAgaWYgKGlkIGluc3RhbmNlb2YgUmVmKSB7CiAgICAgICAgaWRzLnB1c2goaWQudG9TdHJpbmcoKSk7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBzaGFkb3codGhpcywgImNhbGN1bGF0aW9uT3JkZXJJZHMiLCBpZHMubGVuZ3RoID8gaWRzIDogbnVsbCk7CiAgfQogIGdldCBhbm5vdGF0aW9uR2xvYmFscygpIHsKICAgIHJldHVybiBzaGFkb3codGhpcywgImFubm90YXRpb25HbG9iYWxzIiwgQW5ub3RhdGlvbkZhY3RvcnkuY3JlYXRlR2xvYmFscyh0aGlzLnBkZk1hbmFnZXIpKTsKICB9Cn0KCjsvLyAuL3NyYy9jb3JlL3BkZl9tYW5hZ2VyLmpzCgoKCgoKCgoKCgpmdW5jdGlvbiBwYXJzZURvY0Jhc2VVcmwodXJsKSB7CiAgaWYgKHVybCkgewogICAgY29uc3QgYWJzb2x1dGVVcmwgPSBjcmVhdGVWYWxpZEFic29sdXRlVXJsKHVybCk7CiAgICBpZiAoYWJzb2x1dGVVcmwpIHsKICAgICAgcmV0dXJuIGFic29sdXRlVXJsLmhyZWY7CiAgICB9CiAgICB3YXJuKGBJbnZhbGlkIGFic29sdXRlIGRvY0Jhc2VVcmw6ICIke3VybH0iLmApOwogIH0KICByZXR1cm4gbnVsbDsKfQpjbGFzcyBCYXNlUGRmTWFuYWdlciB7CiAgY29uc3RydWN0b3IoewogICAgZG9jQmFzZVVybCwKICAgIGRvY0lkLAogICAgZW5hYmxlWGZhLAogICAgZXZhbHVhdG9yT3B0aW9ucywKICAgIGhhbmRsZXIsCiAgICBwYXNzd29yZAogIH0pIHsKICAgIHRoaXMuX2RvY0Jhc2VVcmwgPSBwYXJzZURvY0Jhc2VVcmwoZG9jQmFzZVVybCk7CiAgICB0aGlzLl9kb2NJZCA9IGRvY0lkOwogICAgdGhpcy5fcGFzc3dvcmQgPSBwYXNzd29yZDsKICAgIHRoaXMuZW5hYmxlWGZhID0gZW5hYmxlWGZhOwogICAgZXZhbHVhdG9yT3B0aW9ucy5pc09mZnNjcmVlbkNhbnZhc1N1cHBvcnRlZCAmJj0gRmVhdHVyZVRlc3QuaXNPZmZzY3JlZW5DYW52YXNTdXBwb3J0ZWQ7CiAgICBldmFsdWF0b3JPcHRpb25zLmlzSW1hZ2VEZWNvZGVyU3VwcG9ydGVkICYmPSBGZWF0dXJlVGVzdC5pc0ltYWdlRGVjb2RlclN1cHBvcnRlZDsKICAgIHRoaXMuZXZhbHVhdG9yT3B0aW9ucyA9IE9iamVjdC5mcmVlemUoZXZhbHVhdG9yT3B0aW9ucyk7CiAgICBJbWFnZVJlc2l6ZXIuc2V0T3B0aW9ucyhldmFsdWF0b3JPcHRpb25zKTsKICAgIEpwZWdTdHJlYW0uc2V0T3B0aW9ucyhldmFsdWF0b3JPcHRpb25zKTsKICAgIE9wZXJhdG9yTGlzdC5zZXRPcHRpb25zKGV2YWx1YXRvck9wdGlvbnMpOwogICAgY29uc3Qgb3B0aW9ucyA9IHsKICAgICAgLi4uZXZhbHVhdG9yT3B0aW9ucywKICAgICAgaGFuZGxlcgogICAgfTsKICAgIEpweEltYWdlLnNldE9wdGlvbnMob3B0aW9ucyk7CiAgICBJY2NDb2xvclNwYWNlLnNldE9wdGlvbnMob3B0aW9ucyk7CiAgICBDbXlrSUNDQmFzZWRDUy5zZXRPcHRpb25zKG9wdGlvbnMpOwogIH0KICBnZXQgZG9jSWQoKSB7CiAgICByZXR1cm4gdGhpcy5fZG9jSWQ7CiAgfQogIGdldCBwYXNzd29yZCgpIHsKICAgIHJldHVybiB0aGlzLl9wYXNzd29yZDsKICB9CiAgZ2V0IGRvY0Jhc2VVcmwoKSB7CiAgICByZXR1cm4gdGhpcy5fZG9jQmFzZVVybDsKICB9CiAgZW5zdXJlRG9jKHByb3AsIGFyZ3MpIHsKICAgIHJldHVybiB0aGlzLmVuc3VyZSh0aGlzLnBkZkRvY3VtZW50LCBwcm9wLCBhcmdzKTsKICB9CiAgZW5zdXJlWFJlZihwcm9wLCBhcmdzKSB7CiAgICByZXR1cm4gdGhpcy5lbnN1cmUodGhpcy5wZGZEb2N1bWVudC54cmVmLCBwcm9wLCBhcmdzKTsKICB9CiAgZW5zdXJlQ2F0YWxvZyhwcm9wLCBhcmdzKSB7CiAgICByZXR1cm4gdGhpcy5lbnN1cmUodGhpcy5wZGZEb2N1bWVudC5jYXRhbG9nLCBwcm9wLCBhcmdzKTsKICB9CiAgZ2V0UGFnZShwYWdlSW5kZXgpIHsKICAgIHJldHVybiB0aGlzLnBkZkRvY3VtZW50LmdldFBhZ2UocGFnZUluZGV4KTsKICB9CiAgZm9udEZhbGxiYWNrKGlkLCBoYW5kbGVyKSB7CiAgICByZXR1cm4gdGhpcy5wZGZEb2N1bWVudC5mb250RmFsbGJhY2soaWQsIGhhbmRsZXIpOwogIH0KICBjbGVhbnVwKG1hbnVhbGx5VHJpZ2dlcmVkID0gZmFsc2UpIHsKICAgIHJldHVybiB0aGlzLnBkZkRvY3VtZW50LmNsZWFudXAobWFudWFsbHlUcmlnZ2VyZWQpOwogIH0KICBhc3luYyBlbnN1cmUob2JqLCBwcm9wLCBhcmdzKSB7CiAgICB1bnJlYWNoYWJsZSgiQWJzdHJhY3QgbWV0aG9kIGBlbnN1cmVgIGNhbGxlZCIpOwogIH0KICByZXF1ZXN0UmFuZ2UoYmVnaW4sIGVuZCkgewogICAgdW5yZWFjaGFibGUoIkFic3RyYWN0IG1ldGhvZCBgcmVxdWVzdFJhbmdlYCBjYWxsZWQiKTsKICB9CiAgcmVxdWVzdExvYWRlZFN0cmVhbShub0ZldGNoID0gZmFsc2UpIHsKICAgIHVucmVhY2hhYmxlKCJBYnN0cmFjdCBtZXRob2QgYHJlcXVlc3RMb2FkZWRTdHJlYW1gIGNhbGxlZCIpOwogIH0KICBzZW5kUHJvZ3Jlc3NpdmVEYXRhKGNodW5rKSB7CiAgICB1bnJlYWNoYWJsZSgiQWJzdHJhY3QgbWV0aG9kIGBzZW5kUHJvZ3Jlc3NpdmVEYXRhYCBjYWxsZWQiKTsKICB9CiAgdXBkYXRlUGFzc3dvcmQocGFzc3dvcmQpIHsKICAgIHRoaXMuX3Bhc3N3b3JkID0gcGFzc3dvcmQ7CiAgfQogIHRlcm1pbmF0ZShyZWFzb24pIHsKICAgIHVucmVhY2hhYmxlKCJBYnN0cmFjdCBtZXRob2QgYHRlcm1pbmF0ZWAgY2FsbGVkIik7CiAgfQp9CmNsYXNzIExvY2FsUGRmTWFuYWdlciBleHRlbmRzIEJhc2VQZGZNYW5hZ2VyIHsKICBjb25zdHJ1Y3RvcihhcmdzKSB7CiAgICBzdXBlcihhcmdzKTsKICAgIGNvbnN0IHN0cmVhbSA9IG5ldyBTdHJlYW0oYXJncy5zb3VyY2UpOwogICAgdGhpcy5wZGZEb2N1bWVudCA9IG5ldyBQREZEb2N1bWVudCh0aGlzLCBzdHJlYW0pOwogICAgdGhpcy5fbG9hZGVkU3RyZWFtUHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShzdHJlYW0pOwogIH0KICBhc3luYyBlbnN1cmUob2JqLCBwcm9wLCBhcmdzKSB7CiAgICBjb25zdCB2YWx1ZSA9IG9ialtwcm9wXTsKICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICJmdW5jdGlvbiIpIHsKICAgICAgcmV0dXJuIHZhbHVlLmFwcGx5KG9iaiwgYXJncyk7CiAgICB9CiAgICByZXR1cm4gdmFsdWU7CiAgfQogIHJlcXVlc3RSYW5nZShiZWdpbiwgZW5kKSB7CiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7CiAgfQogIHJlcXVlc3RMb2FkZWRTdHJlYW0obm9GZXRjaCA9IGZhbHNlKSB7CiAgICByZXR1cm4gdGhpcy5fbG9hZGVkU3RyZWFtUHJvbWlzZTsKICB9CiAgdGVybWluYXRlKHJlYXNvbikge30KfQpjbGFzcyBOZXR3b3JrUGRmTWFuYWdlciBleHRlbmRzIEJhc2VQZGZNYW5hZ2VyIHsKICBjb25zdHJ1Y3RvcihhcmdzKSB7CiAgICBzdXBlcihhcmdzKTsKICAgIHRoaXMuc3RyZWFtTWFuYWdlciA9IG5ldyBDaHVua2VkU3RyZWFtTWFuYWdlcihhcmdzLnNvdXJjZSwgewogICAgICBtc2dIYW5kbGVyOiBhcmdzLmhhbmRsZXIsCiAgICAgIGxlbmd0aDogYXJncy5sZW5ndGgsCiAgICAgIGRpc2FibGVBdXRvRmV0Y2g6IGFyZ3MuZGlzYWJsZUF1dG9GZXRjaCwKICAgICAgcmFuZ2VDaHVua1NpemU6IGFyZ3MucmFuZ2VDaHVua1NpemUKICAgIH0pOwogICAgdGhpcy5wZGZEb2N1bWVudCA9IG5ldyBQREZEb2N1bWVudCh0aGlzLCB0aGlzLnN0cmVhbU1hbmFnZXIuZ2V0U3RyZWFtKCkpOwogIH0KICBhc3luYyBlbnN1cmUob2JqLCBwcm9wLCBhcmdzKSB7CiAgICB0cnkgewogICAgICBjb25zdCB2YWx1ZSA9IG9ialtwcm9wXTsKICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gImZ1bmN0aW9uIikgewogICAgICAgIHJldHVybiB2YWx1ZS5hcHBseShvYmosIGFyZ3MpOwogICAgICB9CiAgICAgIHJldHVybiB2YWx1ZTsKICAgIH0gY2F0Y2ggKGV4KSB7CiAgICAgIGlmICghKGV4IGluc3RhbmNlb2YgTWlzc2luZ0RhdGFFeGNlcHRpb24pKSB7CiAgICAgICAgdGhyb3cgZXg7CiAgICAgIH0KICAgICAgYXdhaXQgdGhpcy5yZXF1ZXN0UmFuZ2UoZXguYmVnaW4sIGV4LmVuZCk7CiAgICAgIHJldHVybiB0aGlzLmVuc3VyZShvYmosIHByb3AsIGFyZ3MpOwogICAgfQogIH0KICByZXF1ZXN0UmFuZ2UoYmVnaW4sIGVuZCkgewogICAgcmV0dXJuIHRoaXMuc3RyZWFtTWFuYWdlci5yZXF1ZXN0UmFuZ2UoYmVnaW4sIGVuZCk7CiAgfQogIHJlcXVlc3RMb2FkZWRTdHJlYW0obm9GZXRjaCA9IGZhbHNlKSB7CiAgICByZXR1cm4gdGhpcy5zdHJlYW1NYW5hZ2VyLnJlcXVlc3RBbGxDaHVua3Mobm9GZXRjaCk7CiAgfQogIHNlbmRQcm9ncmVzc2l2ZURhdGEoY2h1bmspIHsKICAgIHRoaXMuc3RyZWFtTWFuYWdlci5vblJlY2VpdmVEYXRhKHsKICAgICAgY2h1bmsKICAgIH0pOwogIH0KICB0ZXJtaW5hdGUocmVhc29uKSB7CiAgICB0aGlzLnN0cmVhbU1hbmFnZXIuYWJvcnQocmVhc29uKTsKICB9Cn0KCjsvLyAuL3NyYy9zaGFyZWQvbWVzc2FnZV9oYW5kbGVyLmpzCgoKCmNvbnN0IENhbGxiYWNrS2luZCA9IHsKICBEQVRBOiAxLAogIEVSUk9SOiAyCn07CmNvbnN0IFN0cmVhbUtpbmQgPSB7CiAgQ0FOQ0VMOiAxLAogIENBTkNFTF9DT01QTEVURTogMiwKICBDTE9TRTogMywKICBFTlFVRVVFOiA0LAogIEVSUk9SOiA1LAogIFBVTEw6IDYsCiAgUFVMTF9DT01QTEVURTogNywKICBTVEFSVF9DT01QTEVURTogOAp9OwpmdW5jdGlvbiBvbkZuKCkge30KZnVuY3Rpb24gd3JhcFJlYXNvbihleCkgewogIGlmIChleCBpbnN0YW5jZW9mIEFib3J0RXhjZXB0aW9uIHx8IGV4IGluc3RhbmNlb2YgSW52YWxpZFBERkV4Y2VwdGlvbiB8fCBleCBpbnN0YW5jZW9mIFBhc3N3b3JkRXhjZXB0aW9uIHx8IGV4IGluc3RhbmNlb2YgUmVzcG9uc2VFeGNlcHRpb24gfHwgZXggaW5zdGFuY2VvZiBVbmtub3duRXJyb3JFeGNlcHRpb24pIHsKICAgIHJldHVybiBleDsKICB9CiAgaWYgKCEoZXggaW5zdGFuY2VvZiBFcnJvciB8fCB0eXBlb2YgZXggPT09ICJvYmplY3QiICYmIGV4ICE9PSBudWxsKSkgewogICAgdW5yZWFjaGFibGUoJ3dyYXBSZWFzb246IEV4cGVjdGVkICJyZWFzb24iIHRvIGJlIGEgKHBvc3NpYmx5IGNsb25lZCkgRXJyb3IuJyk7CiAgfQogIHN3aXRjaCAoZXgubmFtZSkgewogICAgY2FzZSAiQWJvcnRFeGNlcHRpb24iOgogICAgICByZXR1cm4gbmV3IEFib3J0RXhjZXB0aW9uKGV4Lm1lc3NhZ2UpOwogICAgY2FzZSAiSW52YWxpZFBERkV4Y2VwdGlvbiI6CiAgICAgIHJldHVybiBuZXcgSW52YWxpZFBERkV4Y2VwdGlvbihleC5tZXNzYWdlKTsKICAgIGNhc2UgIlBhc3N3b3JkRXhjZXB0aW9uIjoKICAgICAgcmV0dXJuIG5ldyBQYXNzd29yZEV4Y2VwdGlvbihleC5tZXNzYWdlLCBleC5jb2RlKTsKICAgIGNhc2UgIlJlc3BvbnNlRXhjZXB0aW9uIjoKICAgICAgcmV0dXJuIG5ldyBSZXNwb25zZUV4Y2VwdGlvbihleC5tZXNzYWdlLCBleC5zdGF0dXMsIGV4Lm1pc3NpbmcpOwogICAgY2FzZSAiVW5rbm93bkVycm9yRXhjZXB0aW9uIjoKICAgICAgcmV0dXJuIG5ldyBVbmtub3duRXJyb3JFeGNlcHRpb24oZXgubWVzc2FnZSwgZXguZGV0YWlscyk7CiAgfQogIHJldHVybiBuZXcgVW5rbm93bkVycm9yRXhjZXB0aW9uKGV4Lm1lc3NhZ2UsIGV4LnRvU3RyaW5nKCkpOwp9CmNsYXNzIE1lc3NhZ2VIYW5kbGVyIHsKICAjbWVzc2FnZUFDID0gbmV3IEFib3J0Q29udHJvbGxlcigpOwogIGNvbnN0cnVjdG9yKHNvdXJjZU5hbWUsIHRhcmdldE5hbWUsIGNvbU9iaikgewogICAgdGhpcy5zb3VyY2VOYW1lID0gc291cmNlTmFtZTsKICAgIHRoaXMudGFyZ2V0TmFtZSA9IHRhcmdldE5hbWU7CiAgICB0aGlzLmNvbU9iaiA9IGNvbU9iajsKICAgIHRoaXMuY2FsbGJhY2tJZCA9IDE7CiAgICB0aGlzLnN0cmVhbUlkID0gMTsKICAgIHRoaXMuc3RyZWFtU2lua3MgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgdGhpcy5zdHJlYW1Db250cm9sbGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgICB0aGlzLmNhbGxiYWNrQ2FwYWJpbGl0aWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgIHRoaXMuYWN0aW9uSGFuZGxlciA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgICBjb21PYmouYWRkRXZlbnRMaXN0ZW5lcigibWVzc2FnZSIsIHRoaXMuI29uTWVzc2FnZS5iaW5kKHRoaXMpLCB7CiAgICAgIHNpZ25hbDogdGhpcy4jbWVzc2FnZUFDLnNpZ25hbAogICAgfSk7CiAgfQogICNvbk1lc3NhZ2UoewogICAgZGF0YQogIH0pIHsKICAgIGlmIChkYXRhLnRhcmdldE5hbWUgIT09IHRoaXMuc291cmNlTmFtZSkgewogICAgICByZXR1cm47CiAgICB9CiAgICBpZiAoZGF0YS5zdHJlYW0pIHsKICAgICAgdGhpcy4jcHJvY2Vzc1N0cmVhbU1lc3NhZ2UoZGF0YSk7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGlmIChkYXRhLmNhbGxiYWNrKSB7CiAgICAgIGNvbnN0IGNhbGxiYWNrSWQgPSBkYXRhLmNhbGxiYWNrSWQ7CiAgICAgIGNvbnN0IGNhcGFiaWxpdHkgPSB0aGlzLmNhbGxiYWNrQ2FwYWJpbGl0aWVzW2NhbGxiYWNrSWRdOwogICAgICBpZiAoIWNhcGFiaWxpdHkpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCByZXNvbHZlIGNhbGxiYWNrICR7Y2FsbGJhY2tJZH1gKTsKICAgICAgfQogICAgICBkZWxldGUgdGhpcy5jYWxsYmFja0NhcGFiaWxpdGllc1tjYWxsYmFja0lkXTsKICAgICAgaWYgKGRhdGEuY2FsbGJhY2sgPT09IENhbGxiYWNrS2luZC5EQVRBKSB7CiAgICAgICAgY2FwYWJpbGl0eS5yZXNvbHZlKGRhdGEuZGF0YSk7CiAgICAgIH0gZWxzZSBpZiAoZGF0YS5jYWxsYmFjayA9PT0gQ2FsbGJhY2tLaW5kLkVSUk9SKSB7CiAgICAgICAgY2FwYWJpbGl0eS5yZWplY3Qod3JhcFJlYXNvbihkYXRhLnJlYXNvbikpOwogICAgICB9IGVsc2UgewogICAgICAgIHRocm93IG5ldyBFcnJvcigiVW5leHBlY3RlZCBjYWxsYmFjayBjYXNlIik7CiAgICAgIH0KICAgICAgcmV0dXJuOwogICAgfQogICAgY29uc3QgYWN0aW9uID0gdGhpcy5hY3Rpb25IYW5kbGVyW2RhdGEuYWN0aW9uXTsKICAgIGlmICghYWN0aW9uKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBhY3Rpb24gZnJvbSB3b3JrZXI6ICR7ZGF0YS5hY3Rpb259YCk7CiAgICB9CiAgICBpZiAoZGF0YS5jYWxsYmFja0lkKSB7CiAgICAgIGNvbnN0IHNvdXJjZU5hbWUgPSB0aGlzLnNvdXJjZU5hbWUsCiAgICAgICAgdGFyZ2V0TmFtZSA9IGRhdGEuc291cmNlTmFtZSwKICAgICAgICBjb21PYmogPSB0aGlzLmNvbU9iajsKICAgICAgUHJvbWlzZS50cnkoYWN0aW9uLCBkYXRhLmRhdGEpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgIGNvbU9iai5wb3N0TWVzc2FnZSh7CiAgICAgICAgICBzb3VyY2VOYW1lLAogICAgICAgICAgdGFyZ2V0TmFtZSwKICAgICAgICAgIGNhbGxiYWNrOiBDYWxsYmFja0tpbmQuREFUQSwKICAgICAgICAgIGNhbGxiYWNrSWQ6IGRhdGEuY2FsbGJhY2tJZCwKICAgICAgICAgIGRhdGE6IHJlc3VsdAogICAgICAgIH0pOwogICAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7CiAgICAgICAgY29tT2JqLnBvc3RNZXNzYWdlKHsKICAgICAgICAgIHNvdXJjZU5hbWUsCiAgICAgICAgICB0YXJnZXROYW1lLAogICAgICAgICAgY2FsbGJhY2s6IENhbGxiYWNrS2luZC5FUlJPUiwKICAgICAgICAgIGNhbGxiYWNrSWQ6IGRhdGEuY2FsbGJhY2tJZCwKICAgICAgICAgIHJlYXNvbjogd3JhcFJlYXNvbihyZWFzb24pCiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgICByZXR1cm47CiAgICB9CiAgICBpZiAoZGF0YS5zdHJlYW1JZCkgewogICAgICB0aGlzLiNjcmVhdGVTdHJlYW1TaW5rKGRhdGEpOwogICAgICByZXR1cm47CiAgICB9CiAgICBhY3Rpb24oZGF0YS5kYXRhKTsKICB9CiAgb24oYWN0aW9uTmFtZSwgaGFuZGxlcikgewogICAgY29uc3QgYWggPSB0aGlzLmFjdGlvbkhhbmRsZXI7CiAgICBpZiAoYWhbYWN0aW9uTmFtZV0pIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGVyZSBpcyBhbHJlYWR5IGFuIGFjdGlvbk5hbWUgY2FsbGVkICIke2FjdGlvbk5hbWV9ImApOwogICAgfQogICAgYWhbYWN0aW9uTmFtZV0gPSBoYW5kbGVyOwogIH0KICBzZW5kKGFjdGlvbk5hbWUsIGRhdGEsIHRyYW5zZmVycykgewogICAgdGhpcy5jb21PYmoucG9zdE1lc3NhZ2UoewogICAgICBzb3VyY2VOYW1lOiB0aGlzLnNvdXJjZU5hbWUsCiAgICAgIHRhcmdldE5hbWU6IHRoaXMudGFyZ2V0TmFtZSwKICAgICAgYWN0aW9uOiBhY3Rpb25OYW1lLAogICAgICBkYXRhCiAgICB9LCB0cmFuc2ZlcnMpOwogIH0KICBzZW5kV2l0aFByb21pc2UoYWN0aW9uTmFtZSwgZGF0YSwgdHJhbnNmZXJzKSB7CiAgICBjb25zdCBjYWxsYmFja0lkID0gdGhpcy5jYWxsYmFja0lkKys7CiAgICBjb25zdCBjYXBhYmlsaXR5ID0gUHJvbWlzZS53aXRoUmVzb2x2ZXJzKCk7CiAgICB0aGlzLmNhbGxiYWNrQ2FwYWJpbGl0aWVzW2NhbGxiYWNrSWRdID0gY2FwYWJpbGl0eTsKICAgIHRyeSB7CiAgICAgIHRoaXMuY29tT2JqLnBvc3RNZXNzYWdlKHsKICAgICAgICBzb3VyY2VOYW1lOiB0aGlzLnNvdXJjZU5hbWUsCiAgICAgICAgdGFyZ2V0TmFtZTogdGhpcy50YXJnZXROYW1lLAogICAgICAgIGFjdGlvbjogYWN0aW9uTmFtZSwKICAgICAgICBjYWxsYmFja0lkLAogICAgICAgIGRhdGEKICAgICAgfSwgdHJhbnNmZXJzKTsKICAgIH0gY2F0Y2ggKGV4KSB7CiAgICAgIGNhcGFiaWxpdHkucmVqZWN0KGV4KTsKICAgIH0KICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7CiAgfQogIHNlbmRXaXRoU3RyZWFtKGFjdGlvbk5hbWUsIGRhdGEsIHF1ZXVlaW5nU3RyYXRlZ3ksIHRyYW5zZmVycykgewogICAgY29uc3Qgc3RyZWFtSWQgPSB0aGlzLnN0cmVhbUlkKyssCiAgICAgIHNvdXJjZU5hbWUgPSB0aGlzLnNvdXJjZU5hbWUsCiAgICAgIHRhcmdldE5hbWUgPSB0aGlzLnRhcmdldE5hbWUsCiAgICAgIGNvbU9iaiA9IHRoaXMuY29tT2JqOwogICAgcmV0dXJuIG5ldyBSZWFkYWJsZVN0cmVhbSh7CiAgICAgIHN0YXJ0OiBjb250cm9sbGVyID0+IHsKICAgICAgICBjb25zdCBzdGFydENhcGFiaWxpdHkgPSBQcm9taXNlLndpdGhSZXNvbHZlcnMoKTsKICAgICAgICB0aGlzLnN0cmVhbUNvbnRyb2xsZXJzW3N0cmVhbUlkXSA9IHsKICAgICAgICAgIGNvbnRyb2xsZXIsCiAgICAgICAgICBzdGFydENhbGw6IHN0YXJ0Q2FwYWJpbGl0eSwKICAgICAgICAgIHB1bGxDYWxsOiBudWxsLAogICAgICAgICAgY2FuY2VsQ2FsbDogbnVsbCwKICAgICAgICAgIGlzQ2xvc2VkOiBmYWxzZQogICAgICAgIH07CiAgICAgICAgY29tT2JqLnBvc3RNZXNzYWdlKHsKICAgICAgICAgIHNvdXJjZU5hbWUsCiAgICAgICAgICB0YXJnZXROYW1lLAogICAgICAgICAgYWN0aW9uOiBhY3Rpb25OYW1lLAogICAgICAgICAgc3RyZWFtSWQsCiAgICAgICAgICBkYXRhLAogICAgICAgICAgZGVzaXJlZFNpemU6IGNvbnRyb2xsZXIuZGVzaXJlZFNpemUKICAgICAgICB9LCB0cmFuc2ZlcnMpOwogICAgICAgIHJldHVybiBzdGFydENhcGFiaWxpdHkucHJvbWlzZTsKICAgICAgfSwKICAgICAgcHVsbDogY29udHJvbGxlciA9PiB7CiAgICAgICAgY29uc3QgcHVsbENhcGFiaWxpdHkgPSBQcm9taXNlLndpdGhSZXNvbHZlcnMoKTsKICAgICAgICB0aGlzLnN0cmVhbUNvbnRyb2xsZXJzW3N0cmVhbUlkXS5wdWxsQ2FsbCA9IHB1bGxDYXBhYmlsaXR5OwogICAgICAgIGNvbU9iai5wb3N0TWVzc2FnZSh7CiAgICAgICAgICBzb3VyY2VOYW1lLAogICAgICAgICAgdGFyZ2V0TmFtZSwKICAgICAgICAgIHN0cmVhbTogU3RyZWFtS2luZC5QVUxMLAogICAgICAgICAgc3RyZWFtSWQsCiAgICAgICAgICBkZXNpcmVkU2l6ZTogY29udHJvbGxlci5kZXNpcmVkU2l6ZQogICAgICAgIH0pOwogICAgICAgIHJldHVybiBwdWxsQ2FwYWJpbGl0eS5wcm9taXNlOwogICAgICB9LAogICAgICBjYW5jZWw6IHJlYXNvbiA9PiB7CiAgICAgICAgYXNzZXJ0KHJlYXNvbiBpbnN0YW5jZW9mIEVycm9yLCAiY2FuY2VsIG11c3QgaGF2ZSBhIHZhbGlkIHJlYXNvbiIpOwogICAgICAgIGNvbnN0IGNhbmNlbENhcGFiaWxpdHkgPSBQcm9taXNlLndpdGhSZXNvbHZlcnMoKTsKICAgICAgICB0aGlzLnN0cmVhbUNvbnRyb2xsZXJzW3N0cmVhbUlkXS5jYW5jZWxDYWxsID0gY2FuY2VsQ2FwYWJpbGl0eTsKICAgICAgICB0aGlzLnN0cmVhbUNvbnRyb2xsZXJzW3N0cmVhbUlkXS5pc0Nsb3NlZCA9IHRydWU7CiAgICAgICAgY29tT2JqLnBvc3RNZXNzYWdlKHsKICAgICAgICAgIHNvdXJjZU5hbWUsCiAgICAgICAgICB0YXJnZXROYW1lLAogICAgICAgICAgc3RyZWFtOiBTdHJlYW1LaW5kLkNBTkNFTCwKICAgICAgICAgIHN0cmVhbUlkLAogICAgICAgICAgcmVhc29uOiB3cmFwUmVhc29uKHJlYXNvbikKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gY2FuY2VsQ2FwYWJpbGl0eS5wcm9taXNlOwogICAgICB9CiAgICB9LCBxdWV1ZWluZ1N0cmF0ZWd5KTsKICB9CiAgI2NyZWF0ZVN0cmVhbVNpbmsoZGF0YSkgewogICAgY29uc3Qgc3RyZWFtSWQgPSBkYXRhLnN0cmVhbUlkLAogICAgICBzb3VyY2VOYW1lID0gdGhpcy5zb3VyY2VOYW1lLAogICAgICB0YXJnZXROYW1lID0gZGF0YS5zb3VyY2VOYW1lLAogICAgICBjb21PYmogPSB0aGlzLmNvbU9iajsKICAgIGNvbnN0IHNlbGYgPSB0aGlzLAogICAgICBhY3Rpb24gPSB0aGlzLmFjdGlvbkhhbmRsZXJbZGF0YS5hY3Rpb25dOwogICAgY29uc3Qgc3RyZWFtU2luayA9IHsKICAgICAgZW5xdWV1ZShjaHVuaywgc2l6ZSA9IDEsIHRyYW5zZmVycykgewogICAgICAgIGlmICh0aGlzLmlzQ2FuY2VsbGVkKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGNvbnN0IGxhc3REZXNpcmVkU2l6ZSA9IHRoaXMuZGVzaXJlZFNpemU7CiAgICAgICAgdGhpcy5kZXNpcmVkU2l6ZSAtPSBzaXplOwogICAgICAgIGlmIChsYXN0RGVzaXJlZFNpemUgPiAwICYmIHRoaXMuZGVzaXJlZFNpemUgPD0gMCkgewogICAgICAgICAgdGhpcy5zaW5rQ2FwYWJpbGl0eSA9IFByb21pc2Uud2l0aFJlc29sdmVycygpOwogICAgICAgICAgdGhpcy5yZWFkeSA9IHRoaXMuc2lua0NhcGFiaWxpdHkucHJvbWlzZTsKICAgICAgICB9CiAgICAgICAgY29tT2JqLnBvc3RNZXNzYWdlKHsKICAgICAgICAgIHNvdXJjZU5hbWUsCiAgICAgICAgICB0YXJnZXROYW1lLAogICAgICAgICAgc3RyZWFtOiBTdHJlYW1LaW5kLkVOUVVFVUUsCiAgICAgICAgICBzdHJlYW1JZCwKICAgICAgICAgIGNodW5rCiAgICAgICAgfSwgdHJhbnNmZXJzKTsKICAgICAgfSwKICAgICAgY2xvc2UoKSB7CiAgICAgICAgaWYgKHRoaXMuaXNDYW5jZWxsZWQpIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgdGhpcy5pc0NhbmNlbGxlZCA9IHRydWU7CiAgICAgICAgY29tT2JqLnBvc3RNZXNzYWdlKHsKICAgICAgICAgIHNvdXJjZU5hbWUsCiAgICAgICAgICB0YXJnZXROYW1lLAogICAgICAgICAgc3RyZWFtOiBTdHJlYW1LaW5kLkNMT1NFLAogICAgICAgICAgc3RyZWFtSWQKICAgICAgICB9KTsKICAgICAgICBkZWxldGUgc2VsZi5zdHJlYW1TaW5rc1tzdHJlYW1JZF07CiAgICAgIH0sCiAgICAgIGVycm9yKHJlYXNvbikgewogICAgICAgIGFzc2VydChyZWFzb24gaW5zdGFuY2VvZiBFcnJvciwgImVycm9yIG11c3QgaGF2ZSBhIHZhbGlkIHJlYXNvbiIpOwogICAgICAgIGlmICh0aGlzLmlzQ2FuY2VsbGVkKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIHRoaXMuaXNDYW5jZWxsZWQgPSB0cnVlOwogICAgICAgIGNvbU9iai5wb3N0TWVzc2FnZSh7CiAgICAgICAgICBzb3VyY2VOYW1lLAogICAgICAgICAgdGFyZ2V0TmFtZSwKICAgICAgICAgIHN0cmVhbTogU3RyZWFtS2luZC5FUlJPUiwKICAgICAgICAgIHN0cmVhbUlkLAogICAgICAgICAgcmVhc29uOiB3cmFwUmVhc29uKHJlYXNvbikKICAgICAgICB9KTsKICAgICAgfSwKICAgICAgc2lua0NhcGFiaWxpdHk6IFByb21pc2Uud2l0aFJlc29sdmVycygpLAogICAgICBvblB1bGw6IG51bGwsCiAgICAgIG9uQ2FuY2VsOiBudWxsLAogICAgICBpc0NhbmNlbGxlZDogZmFsc2UsCiAgICAgIGRlc2lyZWRTaXplOiBkYXRhLmRlc2lyZWRTaXplLAogICAgICByZWFkeTogbnVsbAogICAgfTsKICAgIHN0cmVhbVNpbmsuc2lua0NhcGFiaWxpdHkucmVzb2x2ZSgpOwogICAgc3RyZWFtU2luay5yZWFkeSA9IHN0cmVhbVNpbmsuc2lua0NhcGFiaWxpdHkucHJvbWlzZTsKICAgIHRoaXMuc3RyZWFtU2lua3Nbc3RyZWFtSWRdID0gc3RyZWFtU2luazsKICAgIFByb21pc2UudHJ5KGFjdGlvbiwgZGF0YS5kYXRhLCBzdHJlYW1TaW5rKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgY29tT2JqLnBvc3RNZXNzYWdlKHsKICAgICAgICBzb3VyY2VOYW1lLAogICAgICAgIHRhcmdldE5hbWUsCiAgICAgICAgc3RyZWFtOiBTdHJlYW1LaW5kLlNUQVJUX0NPTVBMRVRFLAogICAgICAgIHN0cmVhbUlkLAogICAgICAgIHN1Y2Nlc3M6IHRydWUKICAgICAgfSk7CiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7CiAgICAgIGNvbU9iai5wb3N0TWVzc2FnZSh7CiAgICAgICAgc291cmNlTmFtZSwKICAgICAgICB0YXJnZXROYW1lLAogICAgICAgIHN0cmVhbTogU3RyZWFtS2luZC5TVEFSVF9DT01QTEVURSwKICAgICAgICBzdHJlYW1JZCwKICAgICAgICByZWFzb246IHdyYXBSZWFzb24ocmVhc29uKQogICAgICB9KTsKICAgIH0pOwogIH0KICAjcHJvY2Vzc1N0cmVhbU1lc3NhZ2UoZGF0YSkgewogICAgY29uc3Qgc3RyZWFtSWQgPSBkYXRhLnN0cmVhbUlkLAogICAgICBzb3VyY2VOYW1lID0gdGhpcy5zb3VyY2VOYW1lLAogICAgICB0YXJnZXROYW1lID0gZGF0YS5zb3VyY2VOYW1lLAogICAgICBjb21PYmogPSB0aGlzLmNvbU9iajsKICAgIGNvbnN0IHN0cmVhbUNvbnRyb2xsZXIgPSB0aGlzLnN0cmVhbUNvbnRyb2xsZXJzW3N0cmVhbUlkXSwKICAgICAgc3RyZWFtU2luayA9IHRoaXMuc3RyZWFtU2lua3Nbc3RyZWFtSWRdOwogICAgc3dpdGNoIChkYXRhLnN0cmVhbSkgewogICAgICBjYXNlIFN0cmVhbUtpbmQuU1RBUlRfQ09NUExFVEU6CiAgICAgICAgaWYgKGRhdGEuc3VjY2VzcykgewogICAgICAgICAgc3RyZWFtQ29udHJvbGxlci5zdGFydENhbGwucmVzb2x2ZSgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzdHJlYW1Db250cm9sbGVyLnN0YXJ0Q2FsbC5yZWplY3Qod3JhcFJlYXNvbihkYXRhLnJlYXNvbikpOwogICAgICAgIH0KICAgICAgICBicmVhazsKICAgICAgY2FzZSBTdHJlYW1LaW5kLlBVTExfQ09NUExFVEU6CiAgICAgICAgaWYgKGRhdGEuc3VjY2VzcykgewogICAgICAgICAgc3RyZWFtQ29udHJvbGxlci5wdWxsQ2FsbC5yZXNvbHZlKCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHN0cmVhbUNvbnRyb2xsZXIucHVsbENhbGwucmVqZWN0KHdyYXBSZWFzb24oZGF0YS5yZWFzb24pKTsKICAgICAgICB9CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgU3RyZWFtS2luZC5QVUxMOgogICAgICAgIGlmICghc3RyZWFtU2luaykgewogICAgICAgICAgY29tT2JqLnBvc3RNZXNzYWdlKHsKICAgICAgICAgICAgc291cmNlTmFtZSwKICAgICAgICAgICAgdGFyZ2V0TmFtZSwKICAgICAgICAgICAgc3RyZWFtOiBTdHJlYW1LaW5kLlBVTExfQ09NUExFVEUsCiAgICAgICAgICAgIHN0cmVhbUlkLAogICAgICAgICAgICBzdWNjZXNzOiB0cnVlCiAgICAgICAgICB9KTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgICBpZiAoc3RyZWFtU2luay5kZXNpcmVkU2l6ZSA8PSAwICYmIGRhdGEuZGVzaXJlZFNpemUgPiAwKSB7CiAgICAgICAgICBzdHJlYW1TaW5rLnNpbmtDYXBhYmlsaXR5LnJlc29sdmUoKTsKICAgICAgICB9CiAgICAgICAgc3RyZWFtU2luay5kZXNpcmVkU2l6ZSA9IGRhdGEuZGVzaXJlZFNpemU7CiAgICAgICAgUHJvbWlzZS50cnkoc3RyZWFtU2luay5vblB1bGwgfHwgb25GbikudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICBjb21PYmoucG9zdE1lc3NhZ2UoewogICAgICAgICAgICBzb3VyY2VOYW1lLAogICAgICAgICAgICB0YXJnZXROYW1lLAogICAgICAgICAgICBzdHJlYW06IFN0cmVhbUtpbmQuUFVMTF9DT01QTEVURSwKICAgICAgICAgICAgc3RyZWFtSWQsCiAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUKICAgICAgICAgIH0pOwogICAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgICAgIGNvbU9iai5wb3N0TWVzc2FnZSh7CiAgICAgICAgICAgIHNvdXJjZU5hbWUsCiAgICAgICAgICAgIHRhcmdldE5hbWUsCiAgICAgICAgICAgIHN0cmVhbTogU3RyZWFtS2luZC5QVUxMX0NPTVBMRVRFLAogICAgICAgICAgICBzdHJlYW1JZCwKICAgICAgICAgICAgcmVhc29uOiB3cmFwUmVhc29uKHJlYXNvbikKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlIFN0cmVhbUtpbmQuRU5RVUVVRToKICAgICAgICBhc3NlcnQoc3RyZWFtQ29udHJvbGxlciwgImVucXVldWUgc2hvdWxkIGhhdmUgc3RyZWFtIGNvbnRyb2xsZXIiKTsKICAgICAgICBpZiAoc3RyZWFtQ29udHJvbGxlci5pc0Nsb3NlZCkgewogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICAgIHN0cmVhbUNvbnRyb2xsZXIuY29udHJvbGxlci5lbnF1ZXVlKGRhdGEuY2h1bmspOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlIFN0cmVhbUtpbmQuQ0xPU0U6CiAgICAgICAgYXNzZXJ0KHN0cmVhbUNvbnRyb2xsZXIsICJjbG9zZSBzaG91bGQgaGF2ZSBzdHJlYW0gY29udHJvbGxlciIpOwogICAgICAgIGlmIChzdHJlYW1Db250cm9sbGVyLmlzQ2xvc2VkKSB7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgICAgc3RyZWFtQ29udHJvbGxlci5pc0Nsb3NlZCA9IHRydWU7CiAgICAgICAgc3RyZWFtQ29udHJvbGxlci5jb250cm9sbGVyLmNsb3NlKCk7CiAgICAgICAgdGhpcy4jZGVsZXRlU3RyZWFtQ29udHJvbGxlcihzdHJlYW1Db250cm9sbGVyLCBzdHJlYW1JZCk7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgU3RyZWFtS2luZC5FUlJPUjoKICAgICAgICBhc3NlcnQoc3RyZWFtQ29udHJvbGxlciwgImVycm9yIHNob3VsZCBoYXZlIHN0cmVhbSBjb250cm9sbGVyIik7CiAgICAgICAgc3RyZWFtQ29udHJvbGxlci5jb250cm9sbGVyLmVycm9yKHdyYXBSZWFzb24oZGF0YS5yZWFzb24pKTsKICAgICAgICB0aGlzLiNkZWxldGVTdHJlYW1Db250cm9sbGVyKHN0cmVhbUNvbnRyb2xsZXIsIHN0cmVhbUlkKTsKICAgICAgICBicmVhazsKICAgICAgY2FzZSBTdHJlYW1LaW5kLkNBTkNFTF9DT01QTEVURToKICAgICAgICBpZiAoZGF0YS5zdWNjZXNzKSB7CiAgICAgICAgICBzdHJlYW1Db250cm9sbGVyLmNhbmNlbENhbGwucmVzb2x2ZSgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzdHJlYW1Db250cm9sbGVyLmNhbmNlbENhbGwucmVqZWN0KHdyYXBSZWFzb24oZGF0YS5yZWFzb24pKTsKICAgICAgICB9CiAgICAgICAgdGhpcy4jZGVsZXRlU3RyZWFtQ29udHJvbGxlcihzdHJlYW1Db250cm9sbGVyLCBzdHJlYW1JZCk7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgU3RyZWFtS2luZC5DQU5DRUw6CiAgICAgICAgaWYgKCFzdHJlYW1TaW5rKSB7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgICAgY29uc3QgZGF0YVJlYXNvbiA9IHdyYXBSZWFzb24oZGF0YS5yZWFzb24pOwogICAgICAgIFByb21pc2UudHJ5KHN0cmVhbVNpbmsub25DYW5jZWwgfHwgb25GbiwgZGF0YVJlYXNvbikudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICBjb21PYmoucG9zdE1lc3NhZ2UoewogICAgICAgICAgICBzb3VyY2VOYW1lLAogICAgICAgICAgICB0YXJnZXROYW1lLAogICAgICAgICAgICBzdHJlYW06IFN0cmVhbUtpbmQuQ0FOQ0VMX0NPTVBMRVRFLAogICAgICAgICAgICBzdHJlYW1JZCwKICAgICAgICAgICAgc3VjY2VzczogdHJ1ZQogICAgICAgICAgfSk7CiAgICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikgewogICAgICAgICAgY29tT2JqLnBvc3RNZXNzYWdlKHsKICAgICAgICAgICAgc291cmNlTmFtZSwKICAgICAgICAgICAgdGFyZ2V0TmFtZSwKICAgICAgICAgICAgc3RyZWFtOiBTdHJlYW1LaW5kLkNBTkNFTF9DT01QTEVURSwKICAgICAgICAgICAgc3RyZWFtSWQsCiAgICAgICAgICAgIHJlYXNvbjogd3JhcFJlYXNvbihyZWFzb24pCiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgICBzdHJlYW1TaW5rLnNpbmtDYXBhYmlsaXR5LnJlamVjdChkYXRhUmVhc29uKTsKICAgICAgICBzdHJlYW1TaW5rLmlzQ2FuY2VsbGVkID0gdHJ1ZTsKICAgICAgICBkZWxldGUgdGhpcy5zdHJlYW1TaW5rc1tzdHJlYW1JZF07CiAgICAgICAgYnJlYWs7CiAgICAgIGRlZmF1bHQ6CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJVbmV4cGVjdGVkIHN0cmVhbSBjYXNlIik7CiAgICB9CiAgfQogIGFzeW5jICNkZWxldGVTdHJlYW1Db250cm9sbGVyKHN0cmVhbUNvbnRyb2xsZXIsIHN0cmVhbUlkKSB7CiAgICBhd2FpdCBQcm9taXNlLmFsbFNldHRsZWQoW3N0cmVhbUNvbnRyb2xsZXIuc3RhcnRDYWxsPy5wcm9taXNlLCBzdHJlYW1Db250cm9sbGVyLnB1bGxDYWxsPy5wcm9taXNlLCBzdHJlYW1Db250cm9sbGVyLmNhbmNlbENhbGw/LnByb21pc2VdKTsKICAgIGRlbGV0ZSB0aGlzLnN0cmVhbUNvbnRyb2xsZXJzW3N0cmVhbUlkXTsKICB9CiAgZGVzdHJveSgpIHsKICAgIHRoaXMuI21lc3NhZ2VBQz8uYWJvcnQoKTsKICAgIHRoaXMuI21lc3NhZ2VBQyA9IG51bGw7CiAgfQp9Cgo7Ly8gLi9zcmMvY29yZS93cml0ZXIuanMKCgoKCgoKCgoKCgoKCgoKCgoKCmFzeW5jIGZ1bmN0aW9uIHdyaXRlT2JqZWN0KHJlZiwgb2JqLCBidWZmZXIsIHsKICBlbmNyeXB0ID0gbnVsbAp9KSB7CiAgY29uc3QgdHJhbnNmb3JtID0gZW5jcnlwdD8uY3JlYXRlQ2lwaGVyVHJhbnNmb3JtKHJlZi5udW0sIHJlZi5nZW4pOwogIGJ1ZmZlci5wdXNoKGAke3JlZi5udW19ICR7cmVmLmdlbn0gb2JqXG5gKTsKICBpZiAob2JqIGluc3RhbmNlb2YgRGljdCkgewogICAgYXdhaXQgd3JpdGVEaWN0KG9iaiwgYnVmZmVyLCB0cmFuc2Zvcm0pOwogIH0gZWxzZSBpZiAob2JqIGluc3RhbmNlb2YgQmFzZVN0cmVhbSkgewogICAgYXdhaXQgd3JpdGVTdHJlYW0ob2JqLCBidWZmZXIsIHRyYW5zZm9ybSk7CiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9iaikgfHwgQXJyYXlCdWZmZXIuaXNWaWV3KG9iaikpIHsKICAgIGF3YWl0IHdyaXRlQXJyYXkob2JqLCBidWZmZXIsIHRyYW5zZm9ybSk7CiAgfQogIGJ1ZmZlci5wdXNoKCJcbmVuZG9ialxuIik7Cn0KYXN5bmMgZnVuY3Rpb24gd3JpdGVEaWN0KGRpY3QsIGJ1ZmZlciwgdHJhbnNmb3JtKSB7CiAgYnVmZmVyLnB1c2goIjw8Iik7CiAgZm9yIChjb25zdCBrZXkgb2YgZGljdC5nZXRLZXlzKCkpIHsKICAgIGJ1ZmZlci5wdXNoKGAgLyR7ZXNjYXBlUERGTmFtZShrZXkpfSBgKTsKICAgIGF3YWl0IHdyaXRlVmFsdWUoZGljdC5nZXRSYXcoa2V5KSwgYnVmZmVyLCB0cmFuc2Zvcm0pOwogIH0KICBidWZmZXIucHVzaCgiPj4iKTsKfQphc3luYyBmdW5jdGlvbiB3cml0ZVN0cmVhbShzdHJlYW0sIGJ1ZmZlciwgdHJhbnNmb3JtKSB7CiAgbGV0IGJ5dGVzID0gc3RyZWFtLmdldEJ5dGVzKCk7CiAgY29uc3QgewogICAgZGljdAogIH0gPSBzdHJlYW07CiAgY29uc3QgW2ZpbHRlciwgcGFyYW1zXSA9IGF3YWl0IFByb21pc2UuYWxsKFtkaWN0LmdldEFzeW5jKCJGaWx0ZXIiKSwgZGljdC5nZXRBc3luYygiRGVjb2RlUGFybXMiKV0pOwogIGNvbnN0IGZpbHRlclplcm8gPSBBcnJheS5pc0FycmF5KGZpbHRlcikgPyBhd2FpdCBkaWN0LnhyZWYuZmV0Y2hJZlJlZkFzeW5jKGZpbHRlclswXSkgOiBmaWx0ZXI7CiAgY29uc3QgaXNGaWx0ZXJaZXJvRmxhdGVEZWNvZGUgPSBpc05hbWUoZmlsdGVyWmVybywgIkZsYXRlRGVjb2RlIik7CiAgY29uc3QgTUlOX0xFTkdUSF9GT1JfQ09NUFJFU1NJTkcgPSAyNTY7CiAgaWYgKGJ5dGVzLmxlbmd0aCA+PSBNSU5fTEVOR1RIX0ZPUl9DT01QUkVTU0lORyB8fCBpc0ZpbHRlclplcm9GbGF0ZURlY29kZSkgewogICAgdHJ5IHsKICAgICAgY29uc3QgY3MgPSBuZXcgQ29tcHJlc3Npb25TdHJlYW0oImRlZmxhdGUiKTsKICAgICAgY29uc3Qgd3JpdGVyID0gY3Mud3JpdGFibGUuZ2V0V3JpdGVyKCk7CiAgICAgIGF3YWl0IHdyaXRlci5yZWFkeTsKICAgICAgd3JpdGVyLndyaXRlKGJ5dGVzKS50aGVuKGFzeW5jICgpID0+IHsKICAgICAgICBhd2FpdCB3cml0ZXIucmVhZHk7CiAgICAgICAgYXdhaXQgd3JpdGVyLmNsb3NlKCk7CiAgICAgIH0pLmNhdGNoKCgpID0+IHt9KTsKICAgICAgY29uc3QgYnVmID0gYXdhaXQgbmV3IFJlc3BvbnNlKGNzLnJlYWRhYmxlKS5hcnJheUJ1ZmZlcigpOwogICAgICBieXRlcyA9IG5ldyBVaW50OEFycmF5KGJ1Zik7CiAgICAgIGxldCBuZXdGaWx0ZXIsIG5ld1BhcmFtczsKICAgICAgaWYgKCFmaWx0ZXIpIHsKICAgICAgICBuZXdGaWx0ZXIgPSBOYW1lLmdldCgiRmxhdGVEZWNvZGUiKTsKICAgICAgfSBlbHNlIGlmICghaXNGaWx0ZXJaZXJvRmxhdGVEZWNvZGUpIHsKICAgICAgICBuZXdGaWx0ZXIgPSBBcnJheS5pc0FycmF5KGZpbHRlcikgPyBbTmFtZS5nZXQoIkZsYXRlRGVjb2RlIiksIC4uLmZpbHRlcl0gOiBbTmFtZS5nZXQoIkZsYXRlRGVjb2RlIiksIGZpbHRlcl07CiAgICAgICAgaWYgKHBhcmFtcykgewogICAgICAgICAgbmV3UGFyYW1zID0gQXJyYXkuaXNBcnJheShwYXJhbXMpID8gW251bGwsIC4uLnBhcmFtc10gOiBbbnVsbCwgcGFyYW1zXTsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKG5ld0ZpbHRlcikgewogICAgICAgIGRpY3Quc2V0KCJGaWx0ZXIiLCBuZXdGaWx0ZXIpOwogICAgICB9CiAgICAgIGlmIChuZXdQYXJhbXMpIHsKICAgICAgICBkaWN0LnNldCgiRGVjb2RlUGFybXMiLCBuZXdQYXJhbXMpOwogICAgICB9CiAgICB9IGNhdGNoIChleCkgewogICAgICBpbmZvKGB3cml0ZVN0cmVhbSAtIGNhbm5vdCBjb21wcmVzcyBkYXRhOiAiJHtleH0iLmApOwogICAgfQogIH0KICBsZXQgc3RyaW5nID0gYnl0ZXNUb1N0cmluZyhieXRlcyk7CiAgaWYgKHRyYW5zZm9ybSkgewogICAgc3RyaW5nID0gdHJhbnNmb3JtLmVuY3J5cHRTdHJpbmcoc3RyaW5nKTsKICB9CiAgZGljdC5zZXQoIkxlbmd0aCIsIHN0cmluZy5sZW5ndGgpOwogIGF3YWl0IHdyaXRlRGljdChkaWN0LCBidWZmZXIsIHRyYW5zZm9ybSk7CiAgYnVmZmVyLnB1c2goIiBzdHJlYW1cbiIsIHN0cmluZywgIlxuZW5kc3RyZWFtIik7Cn0KYXN5bmMgZnVuY3Rpb24gd3JpdGVBcnJheShhcnJheSwgYnVmZmVyLCB0cmFuc2Zvcm0pIHsKICBidWZmZXIucHVzaCgiWyIpOwogIGxldCBmaXJzdCA9IHRydWU7CiAgZm9yIChjb25zdCB2YWwgb2YgYXJyYXkpIHsKICAgIGlmICghZmlyc3QpIHsKICAgICAgYnVmZmVyLnB1c2goIiAiKTsKICAgIH0gZWxzZSB7CiAgICAgIGZpcnN0ID0gZmFsc2U7CiAgICB9CiAgICBhd2FpdCB3cml0ZVZhbHVlKHZhbCwgYnVmZmVyLCB0cmFuc2Zvcm0pOwogIH0KICBidWZmZXIucHVzaCgiXSIpOwp9CmFzeW5jIGZ1bmN0aW9uIHdyaXRlVmFsdWUodmFsdWUsIGJ1ZmZlciwgdHJhbnNmb3JtKSB7CiAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTmFtZSkgewogICAgYnVmZmVyLnB1c2goYC8ke2VzY2FwZVBERk5hbWUodmFsdWUubmFtZSl9YCk7CiAgfSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFJlZikgewogICAgYnVmZmVyLnB1c2goYCR7dmFsdWUubnVtfSAke3ZhbHVlLmdlbn0gUmApOwogIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgfHwgQXJyYXlCdWZmZXIuaXNWaWV3KHZhbHVlKSkgewogICAgYXdhaXQgd3JpdGVBcnJheSh2YWx1ZSwgYnVmZmVyLCB0cmFuc2Zvcm0pOwogIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAic3RyaW5nIikgewogICAgaWYgKHRyYW5zZm9ybSkgewogICAgICB2YWx1ZSA9IHRyYW5zZm9ybS5lbmNyeXB0U3RyaW5nKHZhbHVlKTsKICAgIH0KICAgIGJ1ZmZlci5wdXNoKGAoJHtlc2NhcGVTdHJpbmcodmFsdWUpfSlgKTsKICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gIm51bWJlciIpIHsKICAgIGJ1ZmZlci5wdXNoKG51bWJlclRvU3RyaW5nKHZhbHVlKSk7CiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICJib29sZWFuIikgewogICAgYnVmZmVyLnB1c2godmFsdWUudG9TdHJpbmcoKSk7CiAgfSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERpY3QpIHsKICAgIGF3YWl0IHdyaXRlRGljdCh2YWx1ZSwgYnVmZmVyLCB0cmFuc2Zvcm0pOwogIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBCYXNlU3RyZWFtKSB7CiAgICBhd2FpdCB3cml0ZVN0cmVhbSh2YWx1ZSwgYnVmZmVyLCB0cmFuc2Zvcm0pOwogIH0gZWxzZSBpZiAodmFsdWUgPT09IG51bGwpIHsKICAgIGJ1ZmZlci5wdXNoKCJudWxsIik7CiAgfSBlbHNlIHsKICAgIHdhcm4oYFVuaGFuZGxlZCB2YWx1ZSBpbiB3cml0ZXI6ICR7dHlwZW9mIHZhbHVlfSwgcGxlYXNlIGZpbGUgYSBidWcuYCk7CiAgfQp9CmZ1bmN0aW9uIHdyaXRlSW50KG51bWJlciwgc2l6ZSwgb2Zmc2V0LCBidWZmZXIpIHsKICBmb3IgKGxldCBpID0gc2l6ZSArIG9mZnNldCAtIDE7IGkgPiBvZmZzZXQgLSAxOyBpLS0pIHsKICAgIGJ1ZmZlcltpXSA9IG51bWJlciAmIDB4ZmY7CiAgICBudW1iZXIgPj49IDg7CiAgfQogIHJldHVybiBvZmZzZXQgKyBzaXplOwp9CmZ1bmN0aW9uIHdyaXRlU3RyaW5nKHN0cmluZywgb2Zmc2V0LCBidWZmZXIpIHsKICBjb25zdCBpaSA9IHN0cmluZy5sZW5ndGg7CiAgZm9yIChsZXQgaSA9IDA7IGkgPCBpaTsgaSsrKSB7CiAgICBidWZmZXJbb2Zmc2V0ICsgaV0gPSBzdHJpbmcuY2hhckNvZGVBdChpKSAmIDB4ZmY7CiAgfQogIHJldHVybiBvZmZzZXQgKyBpaTsKfQpmdW5jdGlvbiBjb21wdXRlTUQ1KGZpbGVzaXplLCB4cmVmSW5mbykgewogIGNvbnN0IHRpbWUgPSBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKTsKICBjb25zdCBmaWxlbmFtZSA9IHhyZWZJbmZvLmZpbGVuYW1lIHx8ICIiOwogIGNvbnN0IG1kNUJ1ZmZlciA9IFt0aW1lLnRvU3RyaW5nKCksIGZpbGVuYW1lLCBmaWxlc2l6ZS50b1N0cmluZygpLCAuLi54cmVmSW5mby5pbmZvTWFwLnZhbHVlcygpXTsKICBjb25zdCBtZDVCdWZmZXJMZW4gPSBNYXRoLnN1bVByZWNpc2UobWQ1QnVmZmVyLm1hcChzdHIgPT4gc3RyLmxlbmd0aCkpOwogIGNvbnN0IGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkobWQ1QnVmZmVyTGVuKTsKICBsZXQgb2Zmc2V0ID0gMDsKICBmb3IgKGNvbnN0IHN0ciBvZiBtZDVCdWZmZXIpIHsKICAgIG9mZnNldCA9IHdyaXRlU3RyaW5nKHN0ciwgb2Zmc2V0LCBhcnJheSk7CiAgfQogIHJldHVybiBieXRlc1RvU3RyaW5nKGNhbGN1bGF0ZU1ENShhcnJheSwgMCwgYXJyYXkubGVuZ3RoKSk7Cn0KZnVuY3Rpb24gd3JpdGVYRkFEYXRhRm9yQWNyb2Zvcm0oc3RyLCBjaGFuZ2VzKSB7CiAgY29uc3QgeG1sID0gbmV3IFNpbXBsZVhNTFBhcnNlcih7CiAgICBoYXNBdHRyaWJ1dGVzOiB0cnVlCiAgfSkucGFyc2VGcm9tU3RyaW5nKHN0cik7CiAgZm9yIChjb25zdCB7CiAgICB4ZmEKICB9IG9mIGNoYW5nZXMpIHsKICAgIGlmICgheGZhKSB7CiAgICAgIGNvbnRpbnVlOwogICAgfQogICAgY29uc3QgewogICAgICBwYXRoLAogICAgICB2YWx1ZQogICAgfSA9IHhmYTsKICAgIGlmICghcGF0aCkgewogICAgICBjb250aW51ZTsKICAgIH0KICAgIGNvbnN0IG5vZGVQYXRoID0gcGFyc2VYRkFQYXRoKHBhdGgpOwogICAgbGV0IG5vZGUgPSB4bWwuZG9jdW1lbnRFbGVtZW50LnNlYXJjaE5vZGUobm9kZVBhdGgsIDApOwogICAgaWYgKCFub2RlICYmIG5vZGVQYXRoLmxlbmd0aCA+IDEpIHsKICAgICAgbm9kZSA9IHhtbC5kb2N1bWVudEVsZW1lbnQuc2VhcmNoTm9kZShbbm9kZVBhdGguYXQoLTEpXSwgMCk7CiAgICB9CiAgICBpZiAobm9kZSkgewogICAgICBub2RlLmNoaWxkTm9kZXMgPSBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLm1hcCh2YWwgPT4gbmV3IFNpbXBsZURPTU5vZGUoInZhbHVlIiwgdmFsKSkgOiBbbmV3IFNpbXBsZURPTU5vZGUoIiN0ZXh0IiwgdmFsdWUpXTsKICAgIH0gZWxzZSB7CiAgICAgIHdhcm4oYE5vZGUgbm90IGZvdW5kIGZvciBwYXRoOiAke3BhdGh9YCk7CiAgICB9CiAgfQogIGNvbnN0IGJ1ZmZlciA9IFtdOwogIHhtbC5kb2N1bWVudEVsZW1lbnQuZHVtcChidWZmZXIpOwogIHJldHVybiBidWZmZXIuam9pbigiIik7Cn0KYXN5bmMgZnVuY3Rpb24gdXBkYXRlQWNyb2Zvcm0oewogIHhyZWYsCiAgYWNyb0Zvcm0sCiAgYWNyb0Zvcm1SZWYsCiAgaGFzWGZhLAogIGhhc1hmYURhdGFzZXRzRW50cnksCiAgeGZhRGF0YXNldHNSZWYsCiAgbmVlZEFwcGVhcmFuY2VzLAogIGNoYW5nZXMKfSkgewogIGlmIChoYXNYZmEgJiYgIWhhc1hmYURhdGFzZXRzRW50cnkgJiYgIXhmYURhdGFzZXRzUmVmKSB7CiAgICB3YXJuKCJYRkEgLSBDYW5ub3Qgc2F2ZSBpdCIpOwogIH0KICBpZiAoIW5lZWRBcHBlYXJhbmNlcyAmJiAoIWhhc1hmYSB8fCAheGZhRGF0YXNldHNSZWYgfHwgaGFzWGZhRGF0YXNldHNFbnRyeSkpIHsKICAgIHJldHVybjsKICB9CiAgY29uc3QgZGljdCA9IGFjcm9Gb3JtLmNsb25lKCk7CiAgaWYgKGhhc1hmYSAmJiAhaGFzWGZhRGF0YXNldHNFbnRyeSkgewogICAgY29uc3QgbmV3WGZhID0gYWNyb0Zvcm0uZ2V0KCJYRkEiKS5zbGljZSgpOwogICAgbmV3WGZhLnNwbGljZSgyLCAwLCAiZGF0YXNldHMiKTsKICAgIG5ld1hmYS5zcGxpY2UoMywgMCwgeGZhRGF0YXNldHNSZWYpOwogICAgZGljdC5zZXQoIlhGQSIsIG5ld1hmYSk7CiAgfQogIGlmIChuZWVkQXBwZWFyYW5jZXMpIHsKICAgIGRpY3Quc2V0KCJOZWVkQXBwZWFyYW5jZXMiLCB0cnVlKTsKICB9CiAgY2hhbmdlcy5wdXQoYWNyb0Zvcm1SZWYsIHsKICAgIGRhdGE6IGRpY3QKICB9KTsKfQpmdW5jdGlvbiB1cGRhdGVYRkEoewogIHhmYURhdGEsCiAgeGZhRGF0YXNldHNSZWYsCiAgY2hhbmdlcywKICB4cmVmCn0pIHsKICBpZiAoeGZhRGF0YSA9PT0gbnVsbCkgewogICAgY29uc3QgZGF0YXNldHMgPSB4cmVmLmZldGNoSWZSZWYoeGZhRGF0YXNldHNSZWYpOwogICAgeGZhRGF0YSA9IHdyaXRlWEZBRGF0YUZvckFjcm9mb3JtKGRhdGFzZXRzLmdldFN0cmluZygpLCBjaGFuZ2VzKTsKICB9CiAgY29uc3QgeGZhRGF0YVN0cmVhbSA9IG5ldyBTdHJpbmdTdHJlYW0oeGZhRGF0YSk7CiAgeGZhRGF0YVN0cmVhbS5kaWN0ID0gbmV3IERpY3QoeHJlZik7CiAgeGZhRGF0YVN0cmVhbS5kaWN0LnNldElmTmFtZSgiVHlwZSIsICJFbWJlZGRlZEZpbGUiKTsKICBjaGFuZ2VzLnB1dCh4ZmFEYXRhc2V0c1JlZiwgewogICAgZGF0YTogeGZhRGF0YVN0cmVhbQogIH0pOwp9CmFzeW5jIGZ1bmN0aW9uIGdldFhSZWZUYWJsZSh4cmVmSW5mbywgYmFzZU9mZnNldCwgbmV3UmVmcywgbmV3WHJlZiwgYnVmZmVyKSB7CiAgYnVmZmVyLnB1c2goInhyZWZcbiIpOwogIGNvbnN0IGluZGV4ZXMgPSBnZXRJbmRleGVzKG5ld1JlZnMpOwogIGxldCBpbmRleGVzUG9zaXRpb24gPSAwOwogIGZvciAoY29uc3QgewogICAgcmVmLAogICAgZGF0YQogIH0gb2YgbmV3UmVmcykgewogICAgaWYgKHJlZi5udW0gPT09IGluZGV4ZXNbaW5kZXhlc1Bvc2l0aW9uXSkgewogICAgICBidWZmZXIucHVzaChgJHtpbmRleGVzW2luZGV4ZXNQb3NpdGlvbl19ICR7aW5kZXhlc1tpbmRleGVzUG9zaXRpb24gKyAxXX1cbmApOwogICAgICBpbmRleGVzUG9zaXRpb24gKz0gMjsKICAgIH0KICAgIGlmIChkYXRhICE9PSBudWxsKSB7CiAgICAgIGJ1ZmZlci5wdXNoKGAke2Jhc2VPZmZzZXQudG9TdHJpbmcoKS5wYWRTdGFydCgxMCwgIjAiKX0gJHtNYXRoLm1pbihyZWYuZ2VuLCAweGZmZmYpLnRvU3RyaW5nKCkucGFkU3RhcnQoNSwgIjAiKX0gblxyXG5gKTsKICAgICAgYmFzZU9mZnNldCArPSBkYXRhLmxlbmd0aDsKICAgIH0gZWxzZSB7CiAgICAgIGJ1ZmZlci5wdXNoKGAwMDAwMDAwMDAwICR7TWF0aC5taW4ocmVmLmdlbiArIDEsIDB4ZmZmZikudG9TdHJpbmcoKS5wYWRTdGFydCg1LCAiMCIpfSBmXHJcbmApOwogICAgfQogIH0KICBjb21wdXRlSURzKGJhc2VPZmZzZXQsIHhyZWZJbmZvLCBuZXdYcmVmKTsKICBidWZmZXIucHVzaCgidHJhaWxlclxuIik7CiAgYXdhaXQgd3JpdGVEaWN0KG5ld1hyZWYsIGJ1ZmZlcik7CiAgYnVmZmVyLnB1c2goIlxuc3RhcnR4cmVmXG4iLCBiYXNlT2Zmc2V0LnRvU3RyaW5nKCksICJcbiUlRU9GXG4iKTsKfQpmdW5jdGlvbiBnZXRJbmRleGVzKG5ld1JlZnMpIHsKICBjb25zdCBpbmRleGVzID0gW107CiAgZm9yIChjb25zdCB7CiAgICByZWYKICB9IG9mIG5ld1JlZnMpIHsKICAgIGlmIChyZWYubnVtID09PSBpbmRleGVzLmF0KC0yKSArIGluZGV4ZXMuYXQoLTEpKSB7CiAgICAgIGluZGV4ZXNbaW5kZXhlcy5sZW5ndGggLSAxXSArPSAxOwogICAgfSBlbHNlIHsKICAgICAgaW5kZXhlcy5wdXNoKHJlZi5udW0sIDEpOwogICAgfQogIH0KICByZXR1cm4gaW5kZXhlczsKfQphc3luYyBmdW5jdGlvbiBnZXRYUmVmU3RyZWFtVGFibGUoeHJlZkluZm8sIGJhc2VPZmZzZXQsIG5ld1JlZnMsIG5ld1hyZWYsIGJ1ZmZlcikgewogIGNvbnN0IHhyZWZUYWJsZURhdGEgPSBbXTsKICBsZXQgbWF4T2Zmc2V0ID0gMDsKICBsZXQgbWF4R2VuID0gMDsKICBmb3IgKGNvbnN0IHsKICAgIHJlZiwKICAgIGRhdGEKICB9IG9mIG5ld1JlZnMpIHsKICAgIGxldCBnZW47CiAgICBtYXhPZmZzZXQgPSBNYXRoLm1heChtYXhPZmZzZXQsIGJhc2VPZmZzZXQpOwogICAgaWYgKGRhdGEgIT09IG51bGwpIHsKICAgICAgZ2VuID0gTWF0aC5taW4ocmVmLmdlbiwgMHhmZmZmKTsKICAgICAgeHJlZlRhYmxlRGF0YS5wdXNoKFsxLCBiYXNlT2Zmc2V0LCBnZW5dKTsKICAgICAgYmFzZU9mZnNldCArPSBkYXRhLmxlbmd0aDsKICAgIH0gZWxzZSB7CiAgICAgIGdlbiA9IE1hdGgubWluKHJlZi5nZW4gKyAxLCAweGZmZmYpOwogICAgICB4cmVmVGFibGVEYXRhLnB1c2goWzAsIDAsIGdlbl0pOwogICAgfQogICAgbWF4R2VuID0gTWF0aC5tYXgobWF4R2VuLCBnZW4pOwogIH0KICBuZXdYcmVmLnNldCgiSW5kZXgiLCBnZXRJbmRleGVzKG5ld1JlZnMpKTsKICBjb25zdCBvZmZzZXRTaXplID0gZ2V0U2l6ZUluQnl0ZXMobWF4T2Zmc2V0KTsKICBjb25zdCBtYXhHZW5TaXplID0gZ2V0U2l6ZUluQnl0ZXMobWF4R2VuKTsKICBjb25zdCBzaXplcyA9IFsxLCBvZmZzZXRTaXplLCBtYXhHZW5TaXplXTsKICBuZXdYcmVmLnNldCgiVyIsIHNpemVzKTsKICBjb21wdXRlSURzKGJhc2VPZmZzZXQsIHhyZWZJbmZvLCBuZXdYcmVmKTsKICBjb25zdCBzdHJ1Y3RTaXplID0gTWF0aC5zdW1QcmVjaXNlKHNpemVzKTsKICBjb25zdCBkYXRhID0gbmV3IFVpbnQ4QXJyYXkoc3RydWN0U2l6ZSAqIHhyZWZUYWJsZURhdGEubGVuZ3RoKTsKICBjb25zdCBzdHJlYW0gPSBuZXcgU3RyZWFtKGRhdGEpOwogIHN0cmVhbS5kaWN0ID0gbmV3WHJlZjsKICBsZXQgb2Zmc2V0ID0gMDsKICBmb3IgKGNvbnN0IFt0eXBlLCBvYmpPZmZzZXQsIGdlbl0gb2YgeHJlZlRhYmxlRGF0YSkgewogICAgb2Zmc2V0ID0gd3JpdGVJbnQodHlwZSwgc2l6ZXNbMF0sIG9mZnNldCwgZGF0YSk7CiAgICBvZmZzZXQgPSB3cml0ZUludChvYmpPZmZzZXQsIHNpemVzWzFdLCBvZmZzZXQsIGRhdGEpOwogICAgb2Zmc2V0ID0gd3JpdGVJbnQoZ2VuLCBzaXplc1syXSwgb2Zmc2V0LCBkYXRhKTsKICB9CiAgYXdhaXQgd3JpdGVPYmplY3QoeHJlZkluZm8ubmV3UmVmLCBzdHJlYW0sIGJ1ZmZlciwge30pOwogIGJ1ZmZlci5wdXNoKCJzdGFydHhyZWZcbiIsIGJhc2VPZmZzZXQudG9TdHJpbmcoKSwgIlxuJSVFT0ZcbiIpOwp9CmZ1bmN0aW9uIGNvbXB1dGVJRHMoYmFzZU9mZnNldCwgeHJlZkluZm8sIG5ld1hyZWYpIHsKICBpZiAoQXJyYXkuaXNBcnJheSh4cmVmSW5mby5maWxlSWRzKSAmJiB4cmVmSW5mby5maWxlSWRzLmxlbmd0aCA+IDApIHsKICAgIGNvbnN0IG1kNSA9IGNvbXB1dGVNRDUoYmFzZU9mZnNldCwgeHJlZkluZm8pOwogICAgbmV3WHJlZi5zZXQoIklEIiwgW3hyZWZJbmZvLmZpbGVJZHNbMF0sIG1kNV0pOwogIH0KfQpmdW5jdGlvbiBnZXRUcmFpbGVyRGljdCh4cmVmSW5mbywgY2hhbmdlcywgdXNlWHJlZlN0cmVhbSkgewogIGNvbnN0IG5ld1hyZWYgPSBuZXcgRGljdChudWxsKTsKICBuZXdYcmVmLnNldCgiUHJldiIsIHhyZWZJbmZvLnN0YXJ0WFJlZik7CiAgY29uc3QgcmVmRm9yWHJlZlRhYmxlID0geHJlZkluZm8ubmV3UmVmOwogIGlmICh1c2VYcmVmU3RyZWFtKSB7CiAgICBjaGFuZ2VzLnB1dChyZWZGb3JYcmVmVGFibGUsIHsKICAgICAgZGF0YTogIiIKICAgIH0pOwogICAgbmV3WHJlZi5zZXQoIlNpemUiLCByZWZGb3JYcmVmVGFibGUubnVtICsgMSk7CiAgICBuZXdYcmVmLnNldElmTmFtZSgiVHlwZSIsICJYUmVmIik7CiAgfSBlbHNlIHsKICAgIG5ld1hyZWYuc2V0KCJTaXplIiwgcmVmRm9yWHJlZlRhYmxlLm51bSk7CiAgfQogIGlmICh4cmVmSW5mby5yb290UmVmICE9PSBudWxsKSB7CiAgICBuZXdYcmVmLnNldCgiUm9vdCIsIHhyZWZJbmZvLnJvb3RSZWYpOwogIH0KICBpZiAoeHJlZkluZm8uaW5mb1JlZiAhPT0gbnVsbCkgewogICAgbmV3WHJlZi5zZXQoIkluZm8iLCB4cmVmSW5mby5pbmZvUmVmKTsKICB9CiAgaWYgKHhyZWZJbmZvLmVuY3J5cHRSZWYgIT09IG51bGwpIHsKICAgIG5ld1hyZWYuc2V0KCJFbmNyeXB0IiwgeHJlZkluZm8uZW5jcnlwdFJlZik7CiAgfQogIHJldHVybiBuZXdYcmVmOwp9CmFzeW5jIGZ1bmN0aW9uIHdyaXRlQ2hhbmdlcyhjaGFuZ2VzLCB4cmVmLCBidWZmZXIgPSBbXSkgewogIGNvbnN0IG5ld1JlZnMgPSBbXTsKICBmb3IgKGNvbnN0IFtyZWYsIHsKICAgIGRhdGEKICB9XSBvZiBjaGFuZ2VzLml0ZW1zKCkpIHsKICAgIGlmIChkYXRhID09PSBudWxsIHx8IHR5cGVvZiBkYXRhID09PSAic3RyaW5nIikgewogICAgICBuZXdSZWZzLnB1c2goewogICAgICAgIHJlZiwKICAgICAgICBkYXRhCiAgICAgIH0pOwogICAgICBjb250aW51ZTsKICAgIH0KICAgIGF3YWl0IHdyaXRlT2JqZWN0KHJlZiwgZGF0YSwgYnVmZmVyLCB4cmVmKTsKICAgIG5ld1JlZnMucHVzaCh7CiAgICAgIHJlZiwKICAgICAgZGF0YTogYnVmZmVyLmpvaW4oIiIpCiAgICB9KTsKICAgIGJ1ZmZlci5sZW5ndGggPSAwOwogIH0KICByZXR1cm4gbmV3UmVmcy5zb3J0KChhLCBiKSA9PiBhLnJlZi5udW0gLSBiLnJlZi5udW0pOwp9CmFzeW5jIGZ1bmN0aW9uIGluY3JlbWVudGFsVXBkYXRlKHsKICBvcmlnaW5hbERhdGEsCiAgeHJlZkluZm8sCiAgY2hhbmdlcywKICB4cmVmID0gbnVsbCwKICBoYXNYZmEgPSBmYWxzZSwKICB4ZmFEYXRhc2V0c1JlZiA9IG51bGwsCiAgaGFzWGZhRGF0YXNldHNFbnRyeSA9IGZhbHNlLAogIG5lZWRBcHBlYXJhbmNlcywKICBhY3JvRm9ybVJlZiA9IG51bGwsCiAgYWNyb0Zvcm0gPSBudWxsLAogIHhmYURhdGEgPSBudWxsLAogIHVzZVhyZWZTdHJlYW0gPSBmYWxzZQp9KSB7CiAgYXdhaXQgdXBkYXRlQWNyb2Zvcm0oewogICAgeHJlZiwKICAgIGFjcm9Gb3JtLAogICAgYWNyb0Zvcm1SZWYsCiAgICBoYXNYZmEsCiAgICBoYXNYZmFEYXRhc2V0c0VudHJ5LAogICAgeGZhRGF0YXNldHNSZWYsCiAgICBuZWVkQXBwZWFyYW5jZXMsCiAgICBjaGFuZ2VzCiAgfSk7CiAgaWYgKGhhc1hmYSkgewogICAgdXBkYXRlWEZBKHsKICAgICAgeGZhRGF0YSwKICAgICAgeGZhRGF0YXNldHNSZWYsCiAgICAgIGNoYW5nZXMsCiAgICAgIHhyZWYKICAgIH0pOwogIH0KICBjb25zdCBuZXdYcmVmID0gZ2V0VHJhaWxlckRpY3QoeHJlZkluZm8sIGNoYW5nZXMsIHVzZVhyZWZTdHJlYW0pOwogIGNvbnN0IGJ1ZmZlciA9IFtdOwogIGNvbnN0IG5ld1JlZnMgPSBhd2FpdCB3cml0ZUNoYW5nZXMoY2hhbmdlcywgeHJlZiwgYnVmZmVyKTsKICBsZXQgYmFzZU9mZnNldCA9IG9yaWdpbmFsRGF0YS5sZW5ndGg7CiAgY29uc3QgbGFzdEJ5dGUgPSBvcmlnaW5hbERhdGEuYXQoLTEpOwogIGlmIChsYXN0Qnl0ZSAhPT0gMHgwYSAmJiBsYXN0Qnl0ZSAhPT0gMHgwZCkgewogICAgYnVmZmVyLnB1c2goIlxuIik7CiAgICBiYXNlT2Zmc2V0ICs9IDE7CiAgfQogIGZvciAoY29uc3QgewogICAgZGF0YQogIH0gb2YgbmV3UmVmcykgewogICAgaWYgKGRhdGEgIT09IG51bGwpIHsKICAgICAgYnVmZmVyLnB1c2goZGF0YSk7CiAgICB9CiAgfQogIGF3YWl0ICh1c2VYcmVmU3RyZWFtID8gZ2V0WFJlZlN0cmVhbVRhYmxlKHhyZWZJbmZvLCBiYXNlT2Zmc2V0LCBuZXdSZWZzLCBuZXdYcmVmLCBidWZmZXIpIDogZ2V0WFJlZlRhYmxlKHhyZWZJbmZvLCBiYXNlT2Zmc2V0LCBuZXdSZWZzLCBuZXdYcmVmLCBidWZmZXIpKTsKICBjb25zdCB0b3RhbExlbmd0aCA9IG9yaWdpbmFsRGF0YS5sZW5ndGggKyBNYXRoLnN1bVByZWNpc2UoYnVmZmVyLm1hcChzdHIgPT4gc3RyLmxlbmd0aCkpOwogIGNvbnN0IGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkodG90YWxMZW5ndGgpOwogIGFycmF5LnNldChvcmlnaW5hbERhdGEpOwogIGxldCBvZmZzZXQgPSBvcmlnaW5hbERhdGEubGVuZ3RoOwogIGZvciAoY29uc3Qgc3RyIG9mIGJ1ZmZlcikgewogICAgb2Zmc2V0ID0gd3JpdGVTdHJpbmcoc3RyLCBvZmZzZXQsIGFycmF5KTsKICB9CiAgcmV0dXJuIGFycmF5Owp9Cgo7Ly8gLi9zcmMvY29yZS93b3JrZXJfc3RyZWFtLmpzCgoKY2xhc3MgUERGV29ya2VyU3RyZWFtIHsKICBjb25zdHJ1Y3Rvcihtc2dIYW5kbGVyKSB7CiAgICB0aGlzLl9tc2dIYW5kbGVyID0gbXNnSGFuZGxlcjsKICAgIHRoaXMuX2NvbnRlbnRMZW5ndGggPSBudWxsOwogICAgdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIgPSBudWxsOwogICAgdGhpcy5fcmFuZ2VSZXF1ZXN0UmVhZGVycyA9IFtdOwogIH0KICBnZXRGdWxsUmVhZGVyKCkgewogICAgYXNzZXJ0KCF0aGlzLl9mdWxsUmVxdWVzdFJlYWRlciwgIlBERldvcmtlclN0cmVhbS5nZXRGdWxsUmVhZGVyIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlLiIpOwogICAgdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIgPSBuZXcgUERGV29ya2VyU3RyZWFtUmVhZGVyKHRoaXMuX21zZ0hhbmRsZXIpOwogICAgcmV0dXJuIHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyOwogIH0KICBnZXRSYW5nZVJlYWRlcihiZWdpbiwgZW5kKSB7CiAgICBjb25zdCByZWFkZXIgPSBuZXcgUERGV29ya2VyU3RyZWFtUmFuZ2VSZWFkZXIoYmVnaW4sIGVuZCwgdGhpcy5fbXNnSGFuZGxlcik7CiAgICB0aGlzLl9yYW5nZVJlcXVlc3RSZWFkZXJzLnB1c2gocmVhZGVyKTsKICAgIHJldHVybiByZWFkZXI7CiAgfQogIGNhbmNlbEFsbFJlcXVlc3RzKHJlYXNvbikgewogICAgdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXI/LmNhbmNlbChyZWFzb24pOwogICAgZm9yIChjb25zdCByZWFkZXIgb2YgdGhpcy5fcmFuZ2VSZXF1ZXN0UmVhZGVycy5zbGljZSgwKSkgewogICAgICByZWFkZXIuY2FuY2VsKHJlYXNvbik7CiAgICB9CiAgfQp9CmNsYXNzIFBERldvcmtlclN0cmVhbVJlYWRlciB7CiAgY29uc3RydWN0b3IobXNnSGFuZGxlcikgewogICAgdGhpcy5fbXNnSGFuZGxlciA9IG1zZ0hhbmRsZXI7CiAgICB0aGlzLm9uUHJvZ3Jlc3MgPSBudWxsOwogICAgdGhpcy5fY29udGVudExlbmd0aCA9IG51bGw7CiAgICB0aGlzLl9pc1JhbmdlU3VwcG9ydGVkID0gZmFsc2U7CiAgICB0aGlzLl9pc1N0cmVhbWluZ1N1cHBvcnRlZCA9IGZhbHNlOwogICAgY29uc3QgcmVhZGFibGVTdHJlYW0gPSB0aGlzLl9tc2dIYW5kbGVyLnNlbmRXaXRoU3RyZWFtKCJHZXRSZWFkZXIiKTsKICAgIHRoaXMuX3JlYWRlciA9IHJlYWRhYmxlU3RyZWFtLmdldFJlYWRlcigpOwogICAgdGhpcy5faGVhZGVyc1JlYWR5ID0gdGhpcy5fbXNnSGFuZGxlci5zZW5kV2l0aFByb21pc2UoIlJlYWRlckhlYWRlcnNSZWFkeSIpLnRoZW4oZGF0YSA9PiB7CiAgICAgIHRoaXMuX2lzU3RyZWFtaW5nU3VwcG9ydGVkID0gZGF0YS5pc1N0cmVhbWluZ1N1cHBvcnRlZDsKICAgICAgdGhpcy5faXNSYW5nZVN1cHBvcnRlZCA9IGRhdGEuaXNSYW5nZVN1cHBvcnRlZDsKICAgICAgdGhpcy5fY29udGVudExlbmd0aCA9IGRhdGEuY29udGVudExlbmd0aDsKICAgIH0pOwogIH0KICBnZXQgaGVhZGVyc1JlYWR5KCkgewogICAgcmV0dXJuIHRoaXMuX2hlYWRlcnNSZWFkeTsKICB9CiAgZ2V0IGNvbnRlbnRMZW5ndGgoKSB7CiAgICByZXR1cm4gdGhpcy5fY29udGVudExlbmd0aDsKICB9CiAgZ2V0IGlzU3RyZWFtaW5nU3VwcG9ydGVkKCkgewogICAgcmV0dXJuIHRoaXMuX2lzU3RyZWFtaW5nU3VwcG9ydGVkOwogIH0KICBnZXQgaXNSYW5nZVN1cHBvcnRlZCgpIHsKICAgIHJldHVybiB0aGlzLl9pc1JhbmdlU3VwcG9ydGVkOwogIH0KICBhc3luYyByZWFkKCkgewogICAgY29uc3QgewogICAgICB2YWx1ZSwKICAgICAgZG9uZQogICAgfSA9IGF3YWl0IHRoaXMuX3JlYWRlci5yZWFkKCk7CiAgICBpZiAoZG9uZSkgewogICAgICByZXR1cm4gewogICAgICAgIHZhbHVlOiB1bmRlZmluZWQsCiAgICAgICAgZG9uZTogdHJ1ZQogICAgICB9OwogICAgfQogICAgcmV0dXJuIHsKICAgICAgdmFsdWU6IHZhbHVlLmJ1ZmZlciwKICAgICAgZG9uZTogZmFsc2UKICAgIH07CiAgfQogIGNhbmNlbChyZWFzb24pIHsKICAgIHRoaXMuX3JlYWRlci5jYW5jZWwocmVhc29uKTsKICB9Cn0KY2xhc3MgUERGV29ya2VyU3RyZWFtUmFuZ2VSZWFkZXIgewogIGNvbnN0cnVjdG9yKGJlZ2luLCBlbmQsIG1zZ0hhbmRsZXIpIHsKICAgIHRoaXMuX21zZ0hhbmRsZXIgPSBtc2dIYW5kbGVyOwogICAgdGhpcy5vblByb2dyZXNzID0gbnVsbDsKICAgIGNvbnN0IHJlYWRhYmxlU3RyZWFtID0gdGhpcy5fbXNnSGFuZGxlci5zZW5kV2l0aFN0cmVhbSgiR2V0UmFuZ2VSZWFkZXIiLCB7CiAgICAgIGJlZ2luLAogICAgICBlbmQKICAgIH0pOwogICAgdGhpcy5fcmVhZGVyID0gcmVhZGFibGVTdHJlYW0uZ2V0UmVhZGVyKCk7CiAgfQogIGdldCBpc1N0cmVhbWluZ1N1cHBvcnRlZCgpIHsKICAgIHJldHVybiBmYWxzZTsKICB9CiAgYXN5bmMgcmVhZCgpIHsKICAgIGNvbnN0IHsKICAgICAgdmFsdWUsCiAgICAgIGRvbmUKICAgIH0gPSBhd2FpdCB0aGlzLl9yZWFkZXIucmVhZCgpOwogICAgaWYgKGRvbmUpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLAogICAgICAgIGRvbmU6IHRydWUKICAgICAgfTsKICAgIH0KICAgIHJldHVybiB7CiAgICAgIHZhbHVlOiB2YWx1ZS5idWZmZXIsCiAgICAgIGRvbmU6IGZhbHNlCiAgICB9OwogIH0KICBjYW5jZWwocmVhc29uKSB7CiAgICB0aGlzLl9yZWFkZXIuY2FuY2VsKHJlYXNvbik7CiAgfQp9Cgo7Ly8gLi9zcmMvY29yZS93b3JrZXIuanMKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpjbGFzcyBXb3JrZXJUYXNrIHsKICBjb25zdHJ1Y3RvcihuYW1lKSB7CiAgICB0aGlzLm5hbWUgPSBuYW1lOwogICAgdGhpcy50ZXJtaW5hdGVkID0gZmFsc2U7CiAgICB0aGlzLl9jYXBhYmlsaXR5ID0gUHJvbWlzZS53aXRoUmVzb2x2ZXJzKCk7CiAgfQogIGdldCBmaW5pc2hlZCgpIHsKICAgIHJldHVybiB0aGlzLl9jYXBhYmlsaXR5LnByb21pc2U7CiAgfQogIGZpbmlzaCgpIHsKICAgIHRoaXMuX2NhcGFiaWxpdHkucmVzb2x2ZSgpOwogIH0KICB0ZXJtaW5hdGUoKSB7CiAgICB0aGlzLnRlcm1pbmF0ZWQgPSB0cnVlOwogIH0KICBlbnN1cmVOb3RUZXJtaW5hdGVkKCkgewogICAgaWYgKHRoaXMudGVybWluYXRlZCkgewogICAgICB0aHJvdyBuZXcgRXJyb3IoIldvcmtlciB0YXNrIHdhcyB0ZXJtaW5hdGVkIik7CiAgICB9CiAgfQp9CmNsYXNzIFdvcmtlck1lc3NhZ2VIYW5kbGVyIHsKICBzdGF0aWMgewogICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICJ1bmRlZmluZWQiICYmICFpc05vZGVKUyAmJiB0eXBlb2Ygc2VsZiAhPT0gInVuZGVmaW5lZCIgJiYgdHlwZW9mIHNlbGYucG9zdE1lc3NhZ2UgPT09ICJmdW5jdGlvbiIgJiYgIm9ubWVzc2FnZSIgaW4gc2VsZikgewogICAgICB0aGlzLmluaXRpYWxpemVGcm9tUG9ydChzZWxmKTsKICAgIH0KICB9CiAgc3RhdGljIHNldHVwKGhhbmRsZXIsIHBvcnQpIHsKICAgIGxldCB0ZXN0TWVzc2FnZVByb2Nlc3NlZCA9IGZhbHNlOwogICAgaGFuZGxlci5vbigidGVzdCIsIGRhdGEgPT4gewogICAgICBpZiAodGVzdE1lc3NhZ2VQcm9jZXNzZWQpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgdGVzdE1lc3NhZ2VQcm9jZXNzZWQgPSB0cnVlOwogICAgICBoYW5kbGVyLnNlbmQoInRlc3QiLCBkYXRhIGluc3RhbmNlb2YgVWludDhBcnJheSk7CiAgICB9KTsKICAgIGhhbmRsZXIub24oImNvbmZpZ3VyZSIsIGRhdGEgPT4gewogICAgICBzZXRWZXJib3NpdHlMZXZlbChkYXRhLnZlcmJvc2l0eSk7CiAgICB9KTsKICAgIGhhbmRsZXIub24oIkdldERvY1JlcXVlc3QiLCBkYXRhID0+IHRoaXMuY3JlYXRlRG9jdW1lbnRIYW5kbGVyKGRhdGEsIHBvcnQpKTsKICB9CiAgc3RhdGljIGNyZWF0ZURvY3VtZW50SGFuZGxlcihkb2NQYXJhbXMsIHBvcnQpIHsKICAgIGxldCBwZGZNYW5hZ2VyOwogICAgbGV0IHRlcm1pbmF0ZWQgPSBmYWxzZTsKICAgIGxldCBjYW5jZWxYSFJzID0gbnVsbDsKICAgIGNvbnN0IFdvcmtlclRhc2tzID0gbmV3IFNldCgpOwogICAgY29uc3QgdmVyYm9zaXR5ID0gZ2V0VmVyYm9zaXR5TGV2ZWwoKTsKICAgIGNvbnN0IHsKICAgICAgZG9jSWQsCiAgICAgIGFwaVZlcnNpb24KICAgIH0gPSBkb2NQYXJhbXM7CiAgICBjb25zdCB3b3JrZXJWZXJzaW9uID0gIjUuNC4xNDkiOwogICAgaWYgKGFwaVZlcnNpb24gIT09IHdvcmtlclZlcnNpb24pIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgQVBJIHZlcnNpb24gIiR7YXBpVmVyc2lvbn0iIGRvZXMgbm90IG1hdGNoIGAgKyBgdGhlIFdvcmtlciB2ZXJzaW9uICIke3dvcmtlclZlcnNpb259Ii5gKTsKICAgIH0KICAgIGNvbnN0IGJ1aWxkTXNnID0gKHR5cGUsIHByb3ApID0+IGBUaGUgXGAke3R5cGV9LnByb3RvdHlwZVxgIGNvbnRhaW5zIHVuZXhwZWN0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBgICsgYCIke3Byb3B9IiwgdGh1cyBicmVha2luZyBlLmcuIFxgZm9yLi4uaW5cYCBpdGVyYXRpb24gb2YgJHt0eXBlfXMuYDsKICAgIGZvciAoY29uc3QgcHJvcCBpbiB7fSkgewogICAgICB0aHJvdyBuZXcgRXJyb3IoYnVpbGRNc2coIk9iamVjdCIsIHByb3ApKTsKICAgIH0KICAgIGZvciAoY29uc3QgcHJvcCBpbiBbXSkgewogICAgICB0aHJvdyBuZXcgRXJyb3IoYnVpbGRNc2coIkFycmF5IiwgcHJvcCkpOwogICAgfQogICAgY29uc3Qgd29ya2VySGFuZGxlck5hbWUgPSBkb2NJZCArICJfd29ya2VyIjsKICAgIGxldCBoYW5kbGVyID0gbmV3IE1lc3NhZ2VIYW5kbGVyKHdvcmtlckhhbmRsZXJOYW1lLCBkb2NJZCwgcG9ydCk7CiAgICBmdW5jdGlvbiBlbnN1cmVOb3RUZXJtaW5hdGVkKCkgewogICAgICBpZiAodGVybWluYXRlZCkgewogICAgICAgIHRocm93IG5ldyBFcnJvcigiV29ya2VyIHdhcyB0ZXJtaW5hdGVkIik7CiAgICAgIH0KICAgIH0KICAgIGZ1bmN0aW9uIHN0YXJ0V29ya2VyVGFzayh0YXNrKSB7CiAgICAgIFdvcmtlclRhc2tzLmFkZCh0YXNrKTsKICAgIH0KICAgIGZ1bmN0aW9uIGZpbmlzaFdvcmtlclRhc2sodGFzaykgewogICAgICB0YXNrLmZpbmlzaCgpOwogICAgICBXb3JrZXJUYXNrcy5kZWxldGUodGFzayk7CiAgICB9CiAgICBhc3luYyBmdW5jdGlvbiBsb2FkRG9jdW1lbnQocmVjb3ZlcnlNb2RlKSB7CiAgICAgIGF3YWl0IHBkZk1hbmFnZXIuZW5zdXJlRG9jKCJjaGVja0hlYWRlciIpOwogICAgICBhd2FpdCBwZGZNYW5hZ2VyLmVuc3VyZURvYygicGFyc2VTdGFydFhSZWYiKTsKICAgICAgYXdhaXQgcGRmTWFuYWdlci5lbnN1cmVEb2MoInBhcnNlIiwgW3JlY292ZXJ5TW9kZV0pOwogICAgICBhd2FpdCBwZGZNYW5hZ2VyLmVuc3VyZURvYygiY2hlY2tGaXJzdFBhZ2UiLCBbcmVjb3ZlcnlNb2RlXSk7CiAgICAgIGF3YWl0IHBkZk1hbmFnZXIuZW5zdXJlRG9jKCJjaGVja0xhc3RQYWdlIiwgW3JlY292ZXJ5TW9kZV0pOwogICAgICBjb25zdCBpc1B1cmVYZmEgPSBhd2FpdCBwZGZNYW5hZ2VyLmVuc3VyZURvYygiaXNQdXJlWGZhIik7CiAgICAgIGlmIChpc1B1cmVYZmEpIHsKICAgICAgICBjb25zdCB0YXNrID0gbmV3IFdvcmtlclRhc2soImxvYWRYZmFSZXNvdXJjZXMiKTsKICAgICAgICBzdGFydFdvcmtlclRhc2sodGFzayk7CiAgICAgICAgYXdhaXQgcGRmTWFuYWdlci5lbnN1cmVEb2MoImxvYWRYZmFSZXNvdXJjZXMiLCBbaGFuZGxlciwgdGFza10pOwogICAgICAgIGZpbmlzaFdvcmtlclRhc2sodGFzayk7CiAgICAgIH0KICAgICAgY29uc3QgW251bVBhZ2VzLCBmaW5nZXJwcmludHNdID0gYXdhaXQgUHJvbWlzZS5hbGwoW3BkZk1hbmFnZXIuZW5zdXJlRG9jKCJudW1QYWdlcyIpLCBwZGZNYW5hZ2VyLmVuc3VyZURvYygiZmluZ2VycHJpbnRzIildKTsKICAgICAgY29uc3QgaHRtbEZvclhmYSA9IGlzUHVyZVhmYSA/IGF3YWl0IHBkZk1hbmFnZXIuZW5zdXJlRG9jKCJodG1sRm9yWGZhIikgOiBudWxsOwogICAgICByZXR1cm4gewogICAgICAgIG51bVBhZ2VzLAogICAgICAgIGZpbmdlcnByaW50cywKICAgICAgICBodG1sRm9yWGZhCiAgICAgIH07CiAgICB9CiAgICBhc3luYyBmdW5jdGlvbiBnZXRQZGZNYW5hZ2VyKHsKICAgICAgZGF0YSwKICAgICAgcGFzc3dvcmQsCiAgICAgIGRpc2FibGVBdXRvRmV0Y2gsCiAgICAgIHJhbmdlQ2h1bmtTaXplLAogICAgICBsZW5ndGgsCiAgICAgIGRvY0Jhc2VVcmwsCiAgICAgIGVuYWJsZVhmYSwKICAgICAgZXZhbHVhdG9yT3B0aW9ucwogICAgfSkgewogICAgICBjb25zdCBwZGZNYW5hZ2VyQXJncyA9IHsKICAgICAgICBzb3VyY2U6IG51bGwsCiAgICAgICAgZGlzYWJsZUF1dG9GZXRjaCwKICAgICAgICBkb2NCYXNlVXJsLAogICAgICAgIGRvY0lkLAogICAgICAgIGVuYWJsZVhmYSwKICAgICAgICBldmFsdWF0b3JPcHRpb25zLAogICAgICAgIGhhbmRsZXIsCiAgICAgICAgbGVuZ3RoLAogICAgICAgIHBhc3N3b3JkLAogICAgICAgIHJhbmdlQ2h1bmtTaXplCiAgICAgIH07CiAgICAgIGlmIChkYXRhKSB7CiAgICAgICAgcGRmTWFuYWdlckFyZ3Muc291cmNlID0gZGF0YTsKICAgICAgICByZXR1cm4gbmV3IExvY2FsUGRmTWFuYWdlcihwZGZNYW5hZ2VyQXJncyk7CiAgICAgIH0KICAgICAgY29uc3QgcGRmU3RyZWFtID0gbmV3IFBERldvcmtlclN0cmVhbShoYW5kbGVyKSwKICAgICAgICBmdWxsUmVxdWVzdCA9IHBkZlN0cmVhbS5nZXRGdWxsUmVhZGVyKCk7CiAgICAgIGNvbnN0IHBkZk1hbmFnZXJDYXBhYmlsaXR5ID0gUHJvbWlzZS53aXRoUmVzb2x2ZXJzKCk7CiAgICAgIGxldCBuZXdQZGZNYW5hZ2VyLAogICAgICAgIGNhY2hlZENodW5rcyA9IFtdLAogICAgICAgIGxvYWRlZCA9IDA7CiAgICAgIGZ1bGxSZXF1ZXN0LmhlYWRlcnNSZWFkeS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICBpZiAoIWZ1bGxSZXF1ZXN0LmlzUmFuZ2VTdXBwb3J0ZWQpIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgcGRmTWFuYWdlckFyZ3Muc291cmNlID0gcGRmU3RyZWFtOwogICAgICAgIHBkZk1hbmFnZXJBcmdzLmxlbmd0aCA9IGZ1bGxSZXF1ZXN0LmNvbnRlbnRMZW5ndGg7CiAgICAgICAgcGRmTWFuYWdlckFyZ3MuZGlzYWJsZUF1dG9GZXRjaCB8fD0gZnVsbFJlcXVlc3QuaXNTdHJlYW1pbmdTdXBwb3J0ZWQ7CiAgICAgICAgbmV3UGRmTWFuYWdlciA9IG5ldyBOZXR3b3JrUGRmTWFuYWdlcihwZGZNYW5hZ2VyQXJncyk7CiAgICAgICAgZm9yIChjb25zdCBjaHVuayBvZiBjYWNoZWRDaHVua3MpIHsKICAgICAgICAgIG5ld1BkZk1hbmFnZXIuc2VuZFByb2dyZXNzaXZlRGF0YShjaHVuayk7CiAgICAgICAgfQogICAgICAgIGNhY2hlZENodW5rcyA9IFtdOwogICAgICAgIHBkZk1hbmFnZXJDYXBhYmlsaXR5LnJlc29sdmUobmV3UGRmTWFuYWdlcik7CiAgICAgICAgY2FuY2VsWEhScyA9IG51bGw7CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgICBwZGZNYW5hZ2VyQ2FwYWJpbGl0eS5yZWplY3QocmVhc29uKTsKICAgICAgICBjYW5jZWxYSFJzID0gbnVsbDsKICAgICAgfSk7CiAgICAgIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBjb25zdCByZWFkQ2h1bmsgPSBmdW5jdGlvbiAoewogICAgICAgICAgdmFsdWUsCiAgICAgICAgICBkb25lCiAgICAgICAgfSkgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgZW5zdXJlTm90VGVybWluYXRlZCgpOwogICAgICAgICAgICBpZiAoZG9uZSkgewogICAgICAgICAgICAgIGlmICghbmV3UGRmTWFuYWdlcikgewogICAgICAgICAgICAgICAgY29uc3QgcGRmRmlsZSA9IGFycmF5QnVmZmVyc1RvQnl0ZXMoY2FjaGVkQ2h1bmtzKTsKICAgICAgICAgICAgICAgIGNhY2hlZENodW5rcyA9IFtdOwogICAgICAgICAgICAgICAgaWYgKGxlbmd0aCAmJiBwZGZGaWxlLmxlbmd0aCAhPT0gbGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgIHdhcm4oInJlcG9ydGVkIEhUVFAgbGVuZ3RoIGlzIGRpZmZlcmVudCBmcm9tIGFjdHVhbCIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGRmTWFuYWdlckFyZ3Muc291cmNlID0gcGRmRmlsZTsKICAgICAgICAgICAgICAgIG5ld1BkZk1hbmFnZXIgPSBuZXcgTG9jYWxQZGZNYW5hZ2VyKHBkZk1hbmFnZXJBcmdzKTsKICAgICAgICAgICAgICAgIHBkZk1hbmFnZXJDYXBhYmlsaXR5LnJlc29sdmUobmV3UGRmTWFuYWdlcik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGNhbmNlbFhIUnMgPSBudWxsOwogICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICBsb2FkZWQgKz0gdmFsdWUuYnl0ZUxlbmd0aDsKICAgICAgICAgICAgaWYgKCFmdWxsUmVxdWVzdC5pc1N0cmVhbWluZ1N1cHBvcnRlZCkgewogICAgICAgICAgICAgIGhhbmRsZXIuc2VuZCgiRG9jUHJvZ3Jlc3MiLCB7CiAgICAgICAgICAgICAgICBsb2FkZWQsCiAgICAgICAgICAgICAgICB0b3RhbDogTWF0aC5tYXgobG9hZGVkLCBmdWxsUmVxdWVzdC5jb250ZW50TGVuZ3RoIHx8IDApCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKG5ld1BkZk1hbmFnZXIpIHsKICAgICAgICAgICAgICBuZXdQZGZNYW5hZ2VyLnNlbmRQcm9ncmVzc2l2ZURhdGEodmFsdWUpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGNhY2hlZENodW5rcy5wdXNoKHZhbHVlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdWxsUmVxdWVzdC5yZWFkKCkudGhlbihyZWFkQ2h1bmssIHJlamVjdCk7CiAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgIHJlamVjdChlKTsKICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIGZ1bGxSZXF1ZXN0LnJlYWQoKS50aGVuKHJlYWRDaHVuaywgcmVqZWN0KTsKICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgICBwZGZNYW5hZ2VyQ2FwYWJpbGl0eS5yZWplY3QoZSk7CiAgICAgICAgY2FuY2VsWEhScyA9IG51bGw7CiAgICAgIH0pOwogICAgICBjYW5jZWxYSFJzID0gcmVhc29uID0+IHsKICAgICAgICBwZGZTdHJlYW0uY2FuY2VsQWxsUmVxdWVzdHMocmVhc29uKTsKICAgICAgfTsKICAgICAgcmV0dXJuIHBkZk1hbmFnZXJDYXBhYmlsaXR5LnByb21pc2U7CiAgICB9CiAgICBmdW5jdGlvbiBzZXR1cERvYyhkYXRhKSB7CiAgICAgIGZ1bmN0aW9uIG9uU3VjY2Vzcyhkb2MpIHsKICAgICAgICBlbnN1cmVOb3RUZXJtaW5hdGVkKCk7CiAgICAgICAgaGFuZGxlci5zZW5kKCJHZXREb2MiLCB7CiAgICAgICAgICBwZGZJbmZvOiBkb2MKICAgICAgICB9KTsKICAgICAgfQogICAgICBmdW5jdGlvbiBvbkZhaWx1cmUoZXgpIHsKICAgICAgICBlbnN1cmVOb3RUZXJtaW5hdGVkKCk7CiAgICAgICAgaWYgKGV4IGluc3RhbmNlb2YgUGFzc3dvcmRFeGNlcHRpb24pIHsKICAgICAgICAgIGNvbnN0IHRhc2sgPSBuZXcgV29ya2VyVGFzayhgUGFzc3dvcmRFeGNlcHRpb246IHJlc3BvbnNlICR7ZXguY29kZX1gKTsKICAgICAgICAgIHN0YXJ0V29ya2VyVGFzayh0YXNrKTsKICAgICAgICAgIGhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKCJQYXNzd29yZFJlcXVlc3QiLCBleCkudGhlbihmdW5jdGlvbiAoewogICAgICAgICAgICBwYXNzd29yZAogICAgICAgICAgfSkgewogICAgICAgICAgICBmaW5pc2hXb3JrZXJUYXNrKHRhc2spOwogICAgICAgICAgICBwZGZNYW5hZ2VyLnVwZGF0ZVBhc3N3b3JkKHBhc3N3b3JkKTsKICAgICAgICAgICAgcGRmTWFuYWdlclJlYWR5KCk7CiAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGZpbmlzaFdvcmtlclRhc2sodGFzayk7CiAgICAgICAgICAgIGhhbmRsZXIuc2VuZCgiRG9jRXhjZXB0aW9uIiwgZXgpOwogICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGhhbmRsZXIuc2VuZCgiRG9jRXhjZXB0aW9uIiwgd3JhcFJlYXNvbihleCkpOwogICAgICAgIH0KICAgICAgfQogICAgICBmdW5jdGlvbiBwZGZNYW5hZ2VyUmVhZHkoKSB7CiAgICAgICAgZW5zdXJlTm90VGVybWluYXRlZCgpOwogICAgICAgIGxvYWREb2N1bWVudChmYWxzZSkudGhlbihvblN1Y2Nlc3MsIGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgICAgIGVuc3VyZU5vdFRlcm1pbmF0ZWQoKTsKICAgICAgICAgIGlmICghKHJlYXNvbiBpbnN0YW5jZW9mIFhSZWZQYXJzZUV4Y2VwdGlvbikpIHsKICAgICAgICAgICAgb25GYWlsdXJlKHJlYXNvbik7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KICAgICAgICAgIHBkZk1hbmFnZXIucmVxdWVzdExvYWRlZFN0cmVhbSgpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgICAgICBlbnN1cmVOb3RUZXJtaW5hdGVkKCk7CiAgICAgICAgICAgIGxvYWREb2N1bWVudCh0cnVlKS50aGVuKG9uU3VjY2Vzcywgb25GYWlsdXJlKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9CiAgICAgIGVuc3VyZU5vdFRlcm1pbmF0ZWQoKTsKICAgICAgZ2V0UGRmTWFuYWdlcihkYXRhKS50aGVuKGZ1bmN0aW9uIChuZXdQZGZNYW5hZ2VyKSB7CiAgICAgICAgaWYgKHRlcm1pbmF0ZWQpIHsKICAgICAgICAgIG5ld1BkZk1hbmFnZXIudGVybWluYXRlKG5ldyBBYm9ydEV4Y2VwdGlvbigiV29ya2VyIHdhcyB0ZXJtaW5hdGVkLiIpKTsKICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiV29ya2VyIHdhcyB0ZXJtaW5hdGVkIik7CiAgICAgICAgfQogICAgICAgIHBkZk1hbmFnZXIgPSBuZXdQZGZNYW5hZ2VyOwogICAgICAgIHBkZk1hbmFnZXIucmVxdWVzdExvYWRlZFN0cmVhbSh0cnVlKS50aGVuKHN0cmVhbSA9PiB7CiAgICAgICAgICBoYW5kbGVyLnNlbmQoIkRhdGFMb2FkZWQiLCB7CiAgICAgICAgICAgIGxlbmd0aDogc3RyZWFtLmJ5dGVzLmJ5dGVMZW5ndGgKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KS50aGVuKHBkZk1hbmFnZXJSZWFkeSwgb25GYWlsdXJlKTsKICAgIH0KICAgIGhhbmRsZXIub24oIkdldFBhZ2UiLCBmdW5jdGlvbiAoZGF0YSkgewogICAgICByZXR1cm4gcGRmTWFuYWdlci5nZXRQYWdlKGRhdGEucGFnZUluZGV4KS50aGVuKGZ1bmN0aW9uIChwYWdlKSB7CiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFtwZGZNYW5hZ2VyLmVuc3VyZShwYWdlLCAicm90YXRlIiksIHBkZk1hbmFnZXIuZW5zdXJlKHBhZ2UsICJyZWYiKSwgcGRmTWFuYWdlci5lbnN1cmUocGFnZSwgInVzZXJVbml0IiksIHBkZk1hbmFnZXIuZW5zdXJlKHBhZ2UsICJ2aWV3IildKS50aGVuKGZ1bmN0aW9uIChbcm90YXRlLCByZWYsIHVzZXJVbml0LCB2aWV3XSkgewogICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgcm90YXRlLAogICAgICAgICAgICByZWYsCiAgICAgICAgICAgIHJlZlN0cjogcmVmPy50b1N0cmluZygpID8/IG51bGwsCiAgICAgICAgICAgIHVzZXJVbml0LAogICAgICAgICAgICB2aWV3CiAgICAgICAgICB9OwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0pOwogICAgaGFuZGxlci5vbigiR2V0UGFnZUluZGV4IiwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgY29uc3QgcGFnZVJlZiA9IFJlZi5nZXQoZGF0YS5udW0sIGRhdGEuZ2VuKTsKICAgICAgcmV0dXJuIHBkZk1hbmFnZXIuZW5zdXJlQ2F0YWxvZygiZ2V0UGFnZUluZGV4IiwgW3BhZ2VSZWZdKTsKICAgIH0pOwogICAgaGFuZGxlci5vbigiR2V0RGVzdGluYXRpb25zIiwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgcmV0dXJuIHBkZk1hbmFnZXIuZW5zdXJlQ2F0YWxvZygiZGVzdGluYXRpb25zIik7CiAgICB9KTsKICAgIGhhbmRsZXIub24oIkdldERlc3RpbmF0aW9uIiwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgcmV0dXJuIHBkZk1hbmFnZXIuZW5zdXJlQ2F0YWxvZygiZ2V0RGVzdGluYXRpb24iLCBbZGF0YS5pZF0pOwogICAgfSk7CiAgICBoYW5kbGVyLm9uKCJHZXRQYWdlTGFiZWxzIiwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgcmV0dXJuIHBkZk1hbmFnZXIuZW5zdXJlQ2F0YWxvZygicGFnZUxhYmVscyIpOwogICAgfSk7CiAgICBoYW5kbGVyLm9uKCJHZXRQYWdlTGF5b3V0IiwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgcmV0dXJuIHBkZk1hbmFnZXIuZW5zdXJlQ2F0YWxvZygicGFnZUxheW91dCIpOwogICAgfSk7CiAgICBoYW5kbGVyLm9uKCJHZXRQYWdlTW9kZSIsIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgIHJldHVybiBwZGZNYW5hZ2VyLmVuc3VyZUNhdGFsb2coInBhZ2VNb2RlIik7CiAgICB9KTsKICAgIGhhbmRsZXIub24oIkdldFZpZXdlclByZWZlcmVuY2VzIiwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgcmV0dXJuIHBkZk1hbmFnZXIuZW5zdXJlQ2F0YWxvZygidmlld2VyUHJlZmVyZW5jZXMiKTsKICAgIH0pOwogICAgaGFuZGxlci5vbigiR2V0T3BlbkFjdGlvbiIsIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgIHJldHVybiBwZGZNYW5hZ2VyLmVuc3VyZUNhdGFsb2coIm9wZW5BY3Rpb24iKTsKICAgIH0pOwogICAgaGFuZGxlci5vbigiR2V0QXR0YWNobWVudHMiLCBmdW5jdGlvbiAoZGF0YSkgewogICAgICByZXR1cm4gcGRmTWFuYWdlci5lbnN1cmVDYXRhbG9nKCJhdHRhY2htZW50cyIpOwogICAgfSk7CiAgICBoYW5kbGVyLm9uKCJHZXREb2NKU0FjdGlvbnMiLCBmdW5jdGlvbiAoZGF0YSkgewogICAgICByZXR1cm4gcGRmTWFuYWdlci5lbnN1cmVDYXRhbG9nKCJqc0FjdGlvbnMiKTsKICAgIH0pOwogICAgaGFuZGxlci5vbigiR2V0UGFnZUpTQWN0aW9ucyIsIGZ1bmN0aW9uICh7CiAgICAgIHBhZ2VJbmRleAogICAgfSkgewogICAgICByZXR1cm4gcGRmTWFuYWdlci5nZXRQYWdlKHBhZ2VJbmRleCkudGhlbihwYWdlID0+IHBkZk1hbmFnZXIuZW5zdXJlKHBhZ2UsICJqc0FjdGlvbnMiKSk7CiAgICB9KTsKICAgIGhhbmRsZXIub24oIkdldEFubm90YXRpb25zQnlUeXBlIiwgYXN5bmMgZnVuY3Rpb24gKHsKICAgICAgdHlwZXMsCiAgICAgIHBhZ2VJbmRleGVzVG9Ta2lwCiAgICB9KSB7CiAgICAgIGNvbnN0IFtudW1QYWdlcywgYW5ub3RhdGlvbkdsb2JhbHNdID0gYXdhaXQgUHJvbWlzZS5hbGwoW3BkZk1hbmFnZXIuZW5zdXJlRG9jKCJudW1QYWdlcyIpLCBwZGZNYW5hZ2VyLmVuc3VyZURvYygiYW5ub3RhdGlvbkdsb2JhbHMiKV0pOwogICAgICBpZiAoIWFubm90YXRpb25HbG9iYWxzKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgICAgY29uc3QgcGFnZVByb21pc2VzID0gW107CiAgICAgIGNvbnN0IGFubm90YXRpb25Qcm9taXNlcyA9IFtdOwogICAgICBsZXQgdGFzayA9IG51bGw7CiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gbnVtUGFnZXM7IGkgPCBpaTsgaSsrKSB7CiAgICAgICAgICBpZiAocGFnZUluZGV4ZXNUb1NraXA/LmhhcyhpKSkgewogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICghdGFzaykgewogICAgICAgICAgICB0YXNrID0gbmV3IFdvcmtlclRhc2soIkdldEFubm90YXRpb25zQnlUeXBlIik7CiAgICAgICAgICAgIHN0YXJ0V29ya2VyVGFzayh0YXNrKTsKICAgICAgICAgIH0KICAgICAgICAgIHBhZ2VQcm9taXNlcy5wdXNoKHBkZk1hbmFnZXIuZ2V0UGFnZShpKS50aGVuKGFzeW5jIHBhZ2UgPT4gewogICAgICAgICAgICBpZiAoIXBhZ2UpIHsKICAgICAgICAgICAgICByZXR1cm4gW107CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHBhZ2UuY29sbGVjdEFubm90YXRpb25zQnlUeXBlKGhhbmRsZXIsIHRhc2ssIHR5cGVzLCBhbm5vdGF0aW9uUHJvbWlzZXMsIGFubm90YXRpb25HbG9iYWxzKSB8fCBbXTsKICAgICAgICAgIH0pKTsKICAgICAgICB9CiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwocGFnZVByb21pc2VzKTsKICAgICAgICBjb25zdCBhbm5vdGF0aW9ucyA9IGF3YWl0IFByb21pc2UuYWxsKGFubm90YXRpb25Qcm9taXNlcyk7CiAgICAgICAgcmV0dXJuIGFubm90YXRpb25zLmZpbHRlcihhID0+ICEhYSk7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgaWYgKHRhc2spIHsKICAgICAgICAgIGZpbmlzaFdvcmtlclRhc2sodGFzayk7CiAgICAgICAgfQogICAgICB9CiAgICB9KTsKICAgIGhhbmRsZXIub24oIkdldE91dGxpbmUiLCBmdW5jdGlvbiAoZGF0YSkgewogICAgICByZXR1cm4gcGRmTWFuYWdlci5lbnN1cmVDYXRhbG9nKCJkb2N1bWVudE91dGxpbmUiKTsKICAgIH0pOwogICAgaGFuZGxlci5vbigiR2V0T3B0aW9uYWxDb250ZW50Q29uZmlnIiwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgcmV0dXJuIHBkZk1hbmFnZXIuZW5zdXJlQ2F0YWxvZygib3B0aW9uYWxDb250ZW50Q29uZmlnIik7CiAgICB9KTsKICAgIGhhbmRsZXIub24oIkdldFBlcm1pc3Npb25zIiwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgcmV0dXJuIHBkZk1hbmFnZXIuZW5zdXJlQ2F0YWxvZygicGVybWlzc2lvbnMiKTsKICAgIH0pOwogICAgaGFuZGxlci5vbigiR2V0TWV0YWRhdGEiLCBmdW5jdGlvbiAoZGF0YSkgewogICAgICByZXR1cm4gUHJvbWlzZS5hbGwoW3BkZk1hbmFnZXIuZW5zdXJlRG9jKCJkb2N1bWVudEluZm8iKSwgcGRmTWFuYWdlci5lbnN1cmVDYXRhbG9nKCJtZXRhZGF0YSIpXSk7CiAgICB9KTsKICAgIGhhbmRsZXIub24oIkdldE1hcmtJbmZvIiwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgcmV0dXJuIHBkZk1hbmFnZXIuZW5zdXJlQ2F0YWxvZygibWFya0luZm8iKTsKICAgIH0pOwogICAgaGFuZGxlci5vbigiR2V0RGF0YSIsIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgIHJldHVybiBwZGZNYW5hZ2VyLnJlcXVlc3RMb2FkZWRTdHJlYW0oKS50aGVuKHN0cmVhbSA9PiBzdHJlYW0uYnl0ZXMpOwogICAgfSk7CiAgICBoYW5kbGVyLm9uKCJHZXRBbm5vdGF0aW9ucyIsIGZ1bmN0aW9uICh7CiAgICAgIHBhZ2VJbmRleCwKICAgICAgaW50ZW50CiAgICB9KSB7CiAgICAgIHJldHVybiBwZGZNYW5hZ2VyLmdldFBhZ2UocGFnZUluZGV4KS50aGVuKGZ1bmN0aW9uIChwYWdlKSB7CiAgICAgICAgY29uc3QgdGFzayA9IG5ldyBXb3JrZXJUYXNrKGBHZXRBbm5vdGF0aW9uczogcGFnZSAke3BhZ2VJbmRleH1gKTsKICAgICAgICBzdGFydFdvcmtlclRhc2sodGFzayk7CiAgICAgICAgcmV0dXJuIHBhZ2UuZ2V0QW5ub3RhdGlvbnNEYXRhKGhhbmRsZXIsIHRhc2ssIGludGVudCkudGhlbihkYXRhID0+IHsKICAgICAgICAgIGZpbmlzaFdvcmtlclRhc2sodGFzayk7CiAgICAgICAgICByZXR1cm4gZGF0YTsKICAgICAgICB9LCByZWFzb24gPT4gewogICAgICAgICAgZmluaXNoV29ya2VyVGFzayh0YXNrKTsKICAgICAgICAgIHRocm93IHJlYXNvbjsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9KTsKICAgIGhhbmRsZXIub24oIkdldEZpZWxkT2JqZWN0cyIsIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgIHJldHVybiBwZGZNYW5hZ2VyLmVuc3VyZURvYygiZmllbGRPYmplY3RzIikudGhlbihmaWVsZE9iamVjdHMgPT4gZmllbGRPYmplY3RzPy5hbGxGaWVsZHMgfHwgbnVsbCk7CiAgICB9KTsKICAgIGhhbmRsZXIub24oIkhhc0pTQWN0aW9ucyIsIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgIHJldHVybiBwZGZNYW5hZ2VyLmVuc3VyZURvYygiaGFzSlNBY3Rpb25zIik7CiAgICB9KTsKICAgIGhhbmRsZXIub24oIkdldENhbGN1bGF0aW9uT3JkZXJJZHMiLCBmdW5jdGlvbiAoZGF0YSkgewogICAgICByZXR1cm4gcGRmTWFuYWdlci5lbnN1cmVEb2MoImNhbGN1bGF0aW9uT3JkZXJJZHMiKTsKICAgIH0pOwogICAgaGFuZGxlci5vbigiU2F2ZURvY3VtZW50IiwgYXN5bmMgZnVuY3Rpb24gKHsKICAgICAgaXNQdXJlWGZhLAogICAgICBudW1QYWdlcywKICAgICAgYW5ub3RhdGlvblN0b3JhZ2UsCiAgICAgIGZpbGVuYW1lCiAgICB9KSB7CiAgICAgIGNvbnN0IGdsb2JhbFByb21pc2VzID0gW3BkZk1hbmFnZXIucmVxdWVzdExvYWRlZFN0cmVhbSgpLCBwZGZNYW5hZ2VyLmVuc3VyZUNhdGFsb2coImFjcm9Gb3JtIiksIHBkZk1hbmFnZXIuZW5zdXJlQ2F0YWxvZygiYWNyb0Zvcm1SZWYiKSwgcGRmTWFuYWdlci5lbnN1cmVEb2MoInN0YXJ0WFJlZiIpLCBwZGZNYW5hZ2VyLmVuc3VyZURvYygieHJlZiIpLCBwZGZNYW5hZ2VyLmVuc3VyZURvYygibGluZWFyaXphdGlvbiIpLCBwZGZNYW5hZ2VyLmVuc3VyZUNhdGFsb2coInN0cnVjdFRyZWVSb290IildOwogICAgICBjb25zdCBjaGFuZ2VzID0gbmV3IFJlZlNldENhY2hlKCk7CiAgICAgIGNvbnN0IHByb21pc2VzID0gW107CiAgICAgIGNvbnN0IG5ld0Fubm90YXRpb25zQnlQYWdlID0gIWlzUHVyZVhmYSA/IGdldE5ld0Fubm90YXRpb25zTWFwKGFubm90YXRpb25TdG9yYWdlKSA6IG51bGw7CiAgICAgIGNvbnN0IFtzdHJlYW0sIGFjcm9Gb3JtLCBhY3JvRm9ybVJlZiwgc3RhcnRYUmVmLCB4cmVmLCBsaW5lYXJpemF0aW9uLCBfc3RydWN0VHJlZVJvb3RdID0gYXdhaXQgUHJvbWlzZS5hbGwoZ2xvYmFsUHJvbWlzZXMpOwogICAgICBjb25zdCBjYXRhbG9nUmVmID0geHJlZi50cmFpbGVyLmdldFJhdygiUm9vdCIpIHx8IG51bGw7CiAgICAgIGxldCBzdHJ1Y3RUcmVlUm9vdDsKICAgICAgaWYgKG5ld0Fubm90YXRpb25zQnlQYWdlKSB7CiAgICAgICAgaWYgKCFfc3RydWN0VHJlZVJvb3QpIHsKICAgICAgICAgIGlmIChhd2FpdCBTdHJ1Y3RUcmVlUm9vdC5jYW5DcmVhdGVTdHJ1Y3R1cmVUcmVlKHsKICAgICAgICAgICAgY2F0YWxvZ1JlZiwKICAgICAgICAgICAgcGRmTWFuYWdlciwKICAgICAgICAgICAgbmV3QW5ub3RhdGlvbnNCeVBhZ2UKICAgICAgICAgIH0pKSB7CiAgICAgICAgICAgIHN0cnVjdFRyZWVSb290ID0gbnVsbDsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKGF3YWl0IF9zdHJ1Y3RUcmVlUm9vdC5jYW5VcGRhdGVTdHJ1Y3RUcmVlKHsKICAgICAgICAgIHBkZk1hbmFnZXIsCiAgICAgICAgICBuZXdBbm5vdGF0aW9uc0J5UGFnZQogICAgICAgIH0pKSB7CiAgICAgICAgICBzdHJ1Y3RUcmVlUm9vdCA9IF9zdHJ1Y3RUcmVlUm9vdDsKICAgICAgICB9CiAgICAgICAgY29uc3QgaW1hZ2VQcm9taXNlcyA9IEFubm90YXRpb25GYWN0b3J5LmdlbmVyYXRlSW1hZ2VzKGFubm90YXRpb25TdG9yYWdlLnZhbHVlcygpLCB4cmVmLCBwZGZNYW5hZ2VyLmV2YWx1YXRvck9wdGlvbnMuaXNPZmZzY3JlZW5DYW52YXNTdXBwb3J0ZWQpOwogICAgICAgIGNvbnN0IG5ld0Fubm90YXRpb25Qcm9taXNlcyA9IHN0cnVjdFRyZWVSb290ID09PSB1bmRlZmluZWQgPyBwcm9taXNlcyA6IFtdOwogICAgICAgIGZvciAoY29uc3QgW3BhZ2VJbmRleCwgYW5ub3RhdGlvbnNdIG9mIG5ld0Fubm90YXRpb25zQnlQYWdlKSB7CiAgICAgICAgICBuZXdBbm5vdGF0aW9uUHJvbWlzZXMucHVzaChwZGZNYW5hZ2VyLmdldFBhZ2UocGFnZUluZGV4KS50aGVuKHBhZ2UgPT4gewogICAgICAgICAgICBjb25zdCB0YXNrID0gbmV3IFdvcmtlclRhc2soYFNhdmUgKGVkaXRvcik6IHBhZ2UgJHtwYWdlSW5kZXh9YCk7CiAgICAgICAgICAgIHN0YXJ0V29ya2VyVGFzayh0YXNrKTsKICAgICAgICAgICAgcmV0dXJuIHBhZ2Uuc2F2ZU5ld0Fubm90YXRpb25zKGhhbmRsZXIsIHRhc2ssIGFubm90YXRpb25zLCBpbWFnZVByb21pc2VzLCBjaGFuZ2VzKS5maW5hbGx5KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICBmaW5pc2hXb3JrZXJUYXNrKHRhc2spOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pKTsKICAgICAgICB9CiAgICAgICAgaWYgKHN0cnVjdFRyZWVSb290ID09PSBudWxsKSB7CiAgICAgICAgICBwcm9taXNlcy5wdXNoKFByb21pc2UuYWxsKG5ld0Fubm90YXRpb25Qcm9taXNlcykudGhlbihhc3luYyAoKSA9PiB7CiAgICAgICAgICAgIGF3YWl0IFN0cnVjdFRyZWVSb290LmNyZWF0ZVN0cnVjdHVyZVRyZWUoewogICAgICAgICAgICAgIG5ld0Fubm90YXRpb25zQnlQYWdlLAogICAgICAgICAgICAgIHhyZWYsCiAgICAgICAgICAgICAgY2F0YWxvZ1JlZiwKICAgICAgICAgICAgICBwZGZNYW5hZ2VyLAogICAgICAgICAgICAgIGNoYW5nZXMKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KSk7CiAgICAgICAgfSBlbHNlIGlmIChzdHJ1Y3RUcmVlUm9vdCkgewogICAgICAgICAgcHJvbWlzZXMucHVzaChQcm9taXNlLmFsbChuZXdBbm5vdGF0aW9uUHJvbWlzZXMpLnRoZW4oYXN5bmMgKCkgPT4gewogICAgICAgICAgICBhd2FpdCBzdHJ1Y3RUcmVlUm9vdC51cGRhdGVTdHJ1Y3R1cmVUcmVlKHsKICAgICAgICAgICAgICBuZXdBbm5vdGF0aW9uc0J5UGFnZSwKICAgICAgICAgICAgICBwZGZNYW5hZ2VyLAogICAgICAgICAgICAgIGNoYW5nZXMKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KSk7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmIChpc1B1cmVYZmEpIHsKICAgICAgICBwcm9taXNlcy5wdXNoKHBkZk1hbmFnZXIuZW5zdXJlRG9jKCJzZXJpYWxpemVYZmFEYXRhIiwgW2Fubm90YXRpb25TdG9yYWdlXSkpOwogICAgICB9IGVsc2UgewogICAgICAgIGZvciAobGV0IHBhZ2VJbmRleCA9IDA7IHBhZ2VJbmRleCA8IG51bVBhZ2VzOyBwYWdlSW5kZXgrKykgewogICAgICAgICAgcHJvbWlzZXMucHVzaChwZGZNYW5hZ2VyLmdldFBhZ2UocGFnZUluZGV4KS50aGVuKGZ1bmN0aW9uIChwYWdlKSB7CiAgICAgICAgICAgIGNvbnN0IHRhc2sgPSBuZXcgV29ya2VyVGFzayhgU2F2ZTogcGFnZSAke3BhZ2VJbmRleH1gKTsKICAgICAgICAgICAgc3RhcnRXb3JrZXJUYXNrKHRhc2spOwogICAgICAgICAgICByZXR1cm4gcGFnZS5zYXZlKGhhbmRsZXIsIHRhc2ssIGFubm90YXRpb25TdG9yYWdlLCBjaGFuZ2VzKS5maW5hbGx5KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICBmaW5pc2hXb3JrZXJUYXNrKHRhc2spOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgY29uc3QgcmVmcyA9IGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTsKICAgICAgbGV0IHhmYURhdGEgPSBudWxsOwogICAgICBpZiAoaXNQdXJlWGZhKSB7CiAgICAgICAgeGZhRGF0YSA9IHJlZnNbMF07CiAgICAgICAgaWYgKCF4ZmFEYXRhKSB7CiAgICAgICAgICByZXR1cm4gc3RyZWFtLmJ5dGVzOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmIChjaGFuZ2VzLnNpemUgPT09IDApIHsKICAgICAgICByZXR1cm4gc3RyZWFtLmJ5dGVzOwogICAgICB9CiAgICAgIGNvbnN0IG5lZWRBcHBlYXJhbmNlcyA9IGFjcm9Gb3JtUmVmICYmIGFjcm9Gb3JtIGluc3RhbmNlb2YgRGljdCAmJiBjaGFuZ2VzLnZhbHVlcygpLnNvbWUocmVmID0+IHJlZi5uZWVkQXBwZWFyYW5jZXMpOwogICAgICBjb25zdCB4ZmEgPSBhY3JvRm9ybSBpbnN0YW5jZW9mIERpY3QgJiYgYWNyb0Zvcm0uZ2V0KCJYRkEiKSB8fCBudWxsOwogICAgICBsZXQgeGZhRGF0YXNldHNSZWYgPSBudWxsOwogICAgICBsZXQgaGFzWGZhRGF0YXNldHNFbnRyeSA9IGZhbHNlOwogICAgICBpZiAoQXJyYXkuaXNBcnJheSh4ZmEpKSB7CiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0geGZhLmxlbmd0aDsgaSA8IGlpOyBpICs9IDIpIHsKICAgICAgICAgIGlmICh4ZmFbaV0gPT09ICJkYXRhc2V0cyIpIHsKICAgICAgICAgICAgeGZhRGF0YXNldHNSZWYgPSB4ZmFbaSArIDFdOwogICAgICAgICAgICBoYXNYZmFEYXRhc2V0c0VudHJ5ID0gdHJ1ZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKHhmYURhdGFzZXRzUmVmID09PSBudWxsKSB7CiAgICAgICAgICB4ZmFEYXRhc2V0c1JlZiA9IHhyZWYuZ2V0TmV3VGVtcG9yYXJ5UmVmKCk7CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKHhmYSkgewogICAgICAgIHdhcm4oIlVuc3VwcG9ydGVkIFhGQSB0eXBlLiIpOwogICAgICB9CiAgICAgIGxldCBuZXdYcmVmSW5mbyA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgICAgIGlmICh4cmVmLnRyYWlsZXIpIHsKICAgICAgICBjb25zdCBpbmZvTWFwID0gbmV3IE1hcCgpOwogICAgICAgIGNvbnN0IHhyZWZJbmZvID0geHJlZi50cmFpbGVyLmdldCgiSW5mbyIpIHx8IG51bGw7CiAgICAgICAgaWYgKHhyZWZJbmZvIGluc3RhbmNlb2YgRGljdCkgewogICAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgeHJlZkluZm8pIHsKICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gInN0cmluZyIpIHsKICAgICAgICAgICAgICBpbmZvTWFwLnNldChrZXksIHN0cmluZ1RvUERGU3RyaW5nKHZhbHVlKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgbmV3WHJlZkluZm8gPSB7CiAgICAgICAgICByb290UmVmOiBjYXRhbG9nUmVmLAogICAgICAgICAgZW5jcnlwdFJlZjogeHJlZi50cmFpbGVyLmdldFJhdygiRW5jcnlwdCIpIHx8IG51bGwsCiAgICAgICAgICBuZXdSZWY6IHhyZWYuZ2V0TmV3VGVtcG9yYXJ5UmVmKCksCiAgICAgICAgICBpbmZvUmVmOiB4cmVmLnRyYWlsZXIuZ2V0UmF3KCJJbmZvIikgfHwgbnVsbCwKICAgICAgICAgIGluZm9NYXAsCiAgICAgICAgICBmaWxlSWRzOiB4cmVmLnRyYWlsZXIuZ2V0KCJJRCIpIHx8IG51bGwsCiAgICAgICAgICBzdGFydFhSZWY6IGxpbmVhcml6YXRpb24gPyBzdGFydFhSZWYgOiB4cmVmLmxhc3RYUmVmU3RyZWFtUG9zID8/IHN0YXJ0WFJlZiwKICAgICAgICAgIGZpbGVuYW1lCiAgICAgICAgfTsKICAgICAgfQogICAgICByZXR1cm4gaW5jcmVtZW50YWxVcGRhdGUoewogICAgICAgIG9yaWdpbmFsRGF0YTogc3RyZWFtLmJ5dGVzLAogICAgICAgIHhyZWZJbmZvOiBuZXdYcmVmSW5mbywKICAgICAgICBjaGFuZ2VzLAogICAgICAgIHhyZWYsCiAgICAgICAgaGFzWGZhOiAhIXhmYSwKICAgICAgICB4ZmFEYXRhc2V0c1JlZiwKICAgICAgICBoYXNYZmFEYXRhc2V0c0VudHJ5LAogICAgICAgIG5lZWRBcHBlYXJhbmNlcywKICAgICAgICBhY3JvRm9ybVJlZiwKICAgICAgICBhY3JvRm9ybSwKICAgICAgICB4ZmFEYXRhLAogICAgICAgIHVzZVhyZWZTdHJlYW06IGlzRGljdCh4cmVmLnRvcERpY3QsICJYUmVmIikKICAgICAgfSkuZmluYWxseSgoKSA9PiB7CiAgICAgICAgeHJlZi5yZXNldE5ld1RlbXBvcmFyeVJlZigpOwogICAgICB9KTsKICAgIH0pOwogICAgaGFuZGxlci5vbigiR2V0T3BlcmF0b3JMaXN0IiwgZnVuY3Rpb24gKGRhdGEsIHNpbmspIHsKICAgICAgY29uc3QgcGFnZUluZGV4ID0gZGF0YS5wYWdlSW5kZXg7CiAgICAgIHBkZk1hbmFnZXIuZ2V0UGFnZShwYWdlSW5kZXgpLnRoZW4oZnVuY3Rpb24gKHBhZ2UpIHsKICAgICAgICBjb25zdCB0YXNrID0gbmV3IFdvcmtlclRhc2soYEdldE9wZXJhdG9yTGlzdDogcGFnZSAke3BhZ2VJbmRleH1gKTsKICAgICAgICBzdGFydFdvcmtlclRhc2sodGFzayk7CiAgICAgICAgY29uc3Qgc3RhcnQgPSB2ZXJib3NpdHkgPj0gVmVyYm9zaXR5TGV2ZWwuSU5GT1MgPyBEYXRlLm5vdygpIDogMDsKICAgICAgICBwYWdlLmdldE9wZXJhdG9yTGlzdCh7CiAgICAgICAgICBoYW5kbGVyLAogICAgICAgICAgc2luaywKICAgICAgICAgIHRhc2ssCiAgICAgICAgICBpbnRlbnQ6IGRhdGEuaW50ZW50LAogICAgICAgICAgY2FjaGVLZXk6IGRhdGEuY2FjaGVLZXksCiAgICAgICAgICBhbm5vdGF0aW9uU3RvcmFnZTogZGF0YS5hbm5vdGF0aW9uU3RvcmFnZSwKICAgICAgICAgIG1vZGlmaWVkSWRzOiBkYXRhLm1vZGlmaWVkSWRzCiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAob3BlcmF0b3JMaXN0SW5mbykgewogICAgICAgICAgZmluaXNoV29ya2VyVGFzayh0YXNrKTsKICAgICAgICAgIGlmIChzdGFydCkgewogICAgICAgICAgICBpbmZvKGBwYWdlPSR7cGFnZUluZGV4ICsgMX0gLSBnZXRPcGVyYXRvckxpc3Q6IHRpbWU9YCArIGAke0RhdGUubm93KCkgLSBzdGFydH1tcywgbGVuPSR7b3BlcmF0b3JMaXN0SW5mby5sZW5ndGh9YCk7CiAgICAgICAgICB9CiAgICAgICAgICBzaW5rLmNsb3NlKCk7CiAgICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikgewogICAgICAgICAgZmluaXNoV29ya2VyVGFzayh0YXNrKTsKICAgICAgICAgIGlmICh0YXNrLnRlcm1pbmF0ZWQpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQogICAgICAgICAgc2luay5lcnJvcihyZWFzb24pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0pOwogICAgaGFuZGxlci5vbigiR2V0VGV4dENvbnRlbnQiLCBmdW5jdGlvbiAoZGF0YSwgc2luaykgewogICAgICBjb25zdCB7CiAgICAgICAgcGFnZUluZGV4LAogICAgICAgIGluY2x1ZGVNYXJrZWRDb250ZW50LAogICAgICAgIGRpc2FibGVOb3JtYWxpemF0aW9uCiAgICAgIH0gPSBkYXRhOwogICAgICBwZGZNYW5hZ2VyLmdldFBhZ2UocGFnZUluZGV4KS50aGVuKGZ1bmN0aW9uIChwYWdlKSB7CiAgICAgICAgY29uc3QgdGFzayA9IG5ldyBXb3JrZXJUYXNrKCJHZXRUZXh0Q29udGVudDogcGFnZSAiICsgcGFnZUluZGV4KTsKICAgICAgICBzdGFydFdvcmtlclRhc2sodGFzayk7CiAgICAgICAgY29uc3Qgc3RhcnQgPSB2ZXJib3NpdHkgPj0gVmVyYm9zaXR5TGV2ZWwuSU5GT1MgPyBEYXRlLm5vdygpIDogMDsKICAgICAgICBwYWdlLmV4dHJhY3RUZXh0Q29udGVudCh7CiAgICAgICAgICBoYW5kbGVyLAogICAgICAgICAgdGFzaywKICAgICAgICAgIHNpbmssCiAgICAgICAgICBpbmNsdWRlTWFya2VkQ29udGVudCwKICAgICAgICAgIGRpc2FibGVOb3JtYWxpemF0aW9uCiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICBmaW5pc2hXb3JrZXJUYXNrKHRhc2spOwogICAgICAgICAgaWYgKHN0YXJ0KSB7CiAgICAgICAgICAgIGluZm8oYHBhZ2U9JHtwYWdlSW5kZXggKyAxfSAtIGdldFRleHRDb250ZW50OiB0aW1lPWAgKyBgJHtEYXRlLm5vdygpIC0gc3RhcnR9bXNgKTsKICAgICAgICAgIH0KICAgICAgICAgIHNpbmsuY2xvc2UoKTsKICAgICAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7CiAgICAgICAgICBmaW5pc2hXb3JrZXJUYXNrKHRhc2spOwogICAgICAgICAgaWYgKHRhc2sudGVybWluYXRlZCkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CiAgICAgICAgICBzaW5rLmVycm9yKHJlYXNvbik7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfSk7CiAgICBoYW5kbGVyLm9uKCJHZXRTdHJ1Y3RUcmVlIiwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgcmV0dXJuIHBkZk1hbmFnZXIuZ2V0UGFnZShkYXRhLnBhZ2VJbmRleCkudGhlbihwYWdlID0+IHBkZk1hbmFnZXIuZW5zdXJlKHBhZ2UsICJnZXRTdHJ1Y3RUcmVlIikpOwogICAgfSk7CiAgICBoYW5kbGVyLm9uKCJGb250RmFsbGJhY2siLCBmdW5jdGlvbiAoZGF0YSkgewogICAgICByZXR1cm4gcGRmTWFuYWdlci5mb250RmFsbGJhY2soZGF0YS5pZCwgaGFuZGxlcik7CiAgICB9KTsKICAgIGhhbmRsZXIub24oIkNsZWFudXAiLCBmdW5jdGlvbiAoZGF0YSkgewogICAgICByZXR1cm4gcGRmTWFuYWdlci5jbGVhbnVwKHRydWUpOwogICAgfSk7CiAgICBoYW5kbGVyLm9uKCJUZXJtaW5hdGUiLCBmdW5jdGlvbiAoZGF0YSkgewogICAgICB0ZXJtaW5hdGVkID0gdHJ1ZTsKICAgICAgY29uc3Qgd2FpdE9uID0gW107CiAgICAgIGlmIChwZGZNYW5hZ2VyKSB7CiAgICAgICAgcGRmTWFuYWdlci50ZXJtaW5hdGUobmV3IEFib3J0RXhjZXB0aW9uKCJXb3JrZXIgd2FzIHRlcm1pbmF0ZWQuIikpOwogICAgICAgIGNvbnN0IGNsZWFudXBQcm9taXNlID0gcGRmTWFuYWdlci5jbGVhbnVwKCk7CiAgICAgICAgd2FpdE9uLnB1c2goY2xlYW51cFByb21pc2UpOwogICAgICAgIHBkZk1hbmFnZXIgPSBudWxsOwogICAgICB9IGVsc2UgewogICAgICAgIGNsZWFyR2xvYmFsQ2FjaGVzKCk7CiAgICAgIH0KICAgICAgY2FuY2VsWEhScz8uKG5ldyBBYm9ydEV4Y2VwdGlvbigiV29ya2VyIHdhcyB0ZXJtaW5hdGVkLiIpKTsKICAgICAgZm9yIChjb25zdCB0YXNrIG9mIFdvcmtlclRhc2tzKSB7CiAgICAgICAgd2FpdE9uLnB1c2godGFzay5maW5pc2hlZCk7CiAgICAgICAgdGFzay50ZXJtaW5hdGUoKTsKICAgICAgfQogICAgICByZXR1cm4gUHJvbWlzZS5hbGwod2FpdE9uKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICBoYW5kbGVyLmRlc3Ryb3koKTsKICAgICAgICBoYW5kbGVyID0gbnVsbDsKICAgICAgfSk7CiAgICB9KTsKICAgIGhhbmRsZXIub24oIlJlYWR5IiwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgc2V0dXBEb2MoZG9jUGFyYW1zKTsKICAgICAgZG9jUGFyYW1zID0gbnVsbDsKICAgIH0pOwogICAgcmV0dXJuIHdvcmtlckhhbmRsZXJOYW1lOwogIH0KICBzdGF0aWMgaW5pdGlhbGl6ZUZyb21Qb3J0KHBvcnQpIHsKICAgIGNvbnN0IGhhbmRsZXIgPSBuZXcgTWVzc2FnZUhhbmRsZXIoIndvcmtlciIsICJtYWluIiwgcG9ydCk7CiAgICB0aGlzLnNldHVwKGhhbmRsZXIsIHBvcnQpOwogICAgaGFuZGxlci5zZW5kKCJyZWFkeSIsIG51bGwpOwogIH0KfQoKOy8vIC4vc3JjL3BkZi53b3JrZXIuanMKCmdsb2JhbFRoaXMucGRmanNXb3JrZXIgPSB7CiAgV29ya2VyTWVzc2FnZUhhbmRsZXI6IFdvcmtlck1lc3NhZ2VIYW5kbGVyCn07CgpleHBvcnQgeyBXb3JrZXJNZXNzYWdlSGFuZGxlciB9OwoKLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGRmLndvcmtlci5tanMubWFw";
class hI {
  static tolerance = 2;
  static applyTransform(I, g) {
    const C = I[0] * g[0] + I[1] * g[2] + g[4], A = I[0] * g[1] + I[1] * g[3] + g[5];
    return [C, A];
  }
}
class U extends hI {
  x;
  y;
  constructor(I, g) {
    super(), this.x = I, this.y = g;
  }
  equal(I) {
    return I.x === this.x && I.y === this.y;
  }
  transform(I) {
    const g = hI.applyTransform([this.x, this.y], I);
    return this.x = g[0], this.y = g[1], this;
  }
}
var TI = /* @__PURE__ */ ((s) => (s[s.None = 0] = "None", s[s.Horizontal = 1] = "Horizontal", s[s.Vertical = 2] = "Vertical", s))(TI || {});
class YI extends hI {
  from;
  to;
  direction = 0;
  length = 0;
  intersections = [];
  gaps = [];
  constructor(I, g) {
    super(), this.from = I, this.to = g, this.init();
  }
  init() {
    let I = this.from, g = this.to;
    if (Math.abs(I.y - g.y) < hI.tolerance) {
      if (this.direction = 1, g.y = I.y, I.x > g.x) {
        const C = I;
        I = g, g = C;
      }
      this.length = g.x - I.x;
    } else if (Math.abs(I.x - g.x) < hI.tolerance) {
      if (this.direction = 2, g.x = I.x, I.y > g.y) {
        const C = I;
        I = g, g = C;
      }
      this.length = g.y - I.y;
    }
    this.from = I, this.to = g;
  }
  _valid = void 0;
  get valid() {
    return this._valid === void 0 && (this._valid = this.direction !== 0 && this.length > hI.tolerance), this._valid;
  }
  get normalized() {
    return this.direction === 1 ? new YI(new U(this.from.x - hI.tolerance, this.from.y), new U(this.to.x + hI.tolerance, this.from.y)) : this.direction === 2 ? new YI(new U(this.from.x, this.from.y - hI.tolerance), new U(this.from.x, this.to.y + hI.tolerance)) : this;
  }
  addGap(I) {
    this.gaps.push(I);
  }
  containsPoint(I) {
    return this.direction === 2 ? this.from.x === I.x && I.y >= this.from.y && I.y <= this.to.y : this.direction === 1 ? this.from.y === I.y && I.x >= this.from.x && I.x <= this.to.x : !1;
  }
  // // todo implement
  // public containsLine(l:Line):boolean{
  //     if(this.direction === LineDirection.Vertical && l.direction === LineDirection.Vertical){
  //         return this.from.x === l.from.x
  //     }
  //     else if(this.direction === LineDirection.Horizontal && l.direction === LineDirection.Horizontal){
  //         return this.from.y === l.from.y
  //     }
  //     return false
  // }
  addIntersectionPoint(I) {
    for (const g of this.intersections)
      if (g.equal(I)) return;
    this.intersections.push(I);
  }
  intersection(I) {
    let g;
    if (!this.valid || !I.valid)
      return g;
    const C = this.normalized, A = I.normalized;
    if (this.direction === 1 && I.direction === 2) {
      const l = A.from.x, Z = C.from.y;
      if (l > C.from.x && l < C.to.x && Z > A.from.y && Z < A.to.y) {
        const d = new U(l, Z);
        this.addIntersectionPoint(d), I.addIntersectionPoint(d), g = d;
      }
    } else if (this.direction === 2 && I.direction === 1) {
      const l = C.from.x, Z = A.from.y;
      if (l > A.from.x && l < A.to.x && Z > C.from.y && Z < C.to.y) {
        const d = new U(l, Z);
        this.addIntersectionPoint(d), I.addIntersectionPoint(d), g = d;
      }
    }
    return g;
  }
  transform(I) {
    const g = this.from.transform(I), C = this.to.transform(I), A = Math.min(g.x, C.x), l = Math.min(g.y, C.y), Z = Math.abs(g.x - C.x), i = Math.abs(g.y - C.y);
    return this.from = new U(A, l), this.to = new U(A + Z, l + i), this.init(), this;
  }
}
class EZ {
  minXY;
  maxXY;
  rows;
  rowPivots;
  colPivots;
  constructor(I, g, C, A) {
    this.minXY = I, this.maxXY = g, this.rows = [], this.rowPivots = C, this.colPivots = A;
  }
  findCell(I, g) {
    if (I >= this.minXY.x && g >= this.minXY.y && I <= this.maxXY.x && g <= this.maxXY.y) {
      for (const C of this.rows)
        for (const A of C)
          if (A.minXY.x <= I && A.minXY.y <= g && A.maxXY.x >= I && A.maxXY.y >= g)
            return A;
    }
  }
  get cellCount() {
    return this.rows.reduce((I, g) => I + g.length, 0);
  }
  get rowCount() {
    return this.rows.length;
  }
  check() {
    const I = (this.colPivots.length - 1) * (this.rowPivots.length - 1);
    let g = 0;
    for (const C of this.rows)
      for (const A of C) {
        const l = (A.colspan || 1) * (A.rowspan || 1);
        g += l;
      }
    return I === g;
  }
  toArray() {
    const I = [];
    for (const g of this.rows) {
      const C = [];
      for (const A of g) {
        let l = A.text.join("");
        l = l.replace(/^[\s]+|[\s]+$/g, ""), l = l.trim(), C.push(l);
      }
      I.push(C);
    }
    return I;
  }
}
class nA {
  hLines = [];
  vLines = [];
  constructor(I) {
    I.direction === TI.Horizontal ? this.hLines.push(I) : I.direction === TI.Vertical && this.vLines.push(I);
  }
  get isValid() {
    return this.hLines.length + this.vLines.length > 4;
  }
  get rowPivots() {
    const I = /* @__PURE__ */ new Set();
    for (const g of this.hLines)
      I.add(g.from.y);
    return [...I].sort((g, C) => g - C);
  }
  get colPivots() {
    const I = /* @__PURE__ */ new Set();
    for (const g of this.vLines)
      I.add(g.from.x);
    return [...I].sort((g, C) => g - C);
  }
  add(I) {
    if (this.intersection(I)) {
      if (I.direction === TI.Horizontal)
        return this.hLines.push(I), !0;
      if (I.direction === TI.Vertical)
        return this.vLines.push(I), !0;
    }
    return !1;
  }
  intersection(I) {
    let g = !1;
    if (!I.valid) return g;
    if (I.direction === TI.Horizontal)
      for (const C of this.vLines)
        I.intersection(C) && (g = !0);
    else if (I.direction === TI.Vertical)
      for (const C of this.hLines)
        I.intersection(C) && (g = !0);
    return g;
  }
  getSameHorizontal(I) {
    const g = [I], C = [];
    for (; this.hLines.length > 0; ) {
      const A = this.hLines.shift();
      A && (A.from.y === I.from.y ? g.push(A) : C.push(A));
    }
    return this.hLines = C, g;
  }
  getSameVertical(I) {
    const g = [I], C = [];
    for (; this.vLines.length > 0; ) {
      const A = this.vLines.shift();
      A && (A.from.x === I.from.x ? g.push(A) : C.push(A));
    }
    return this.vLines = C, g;
  }
  mergeHorizontalLines(I) {
    I.sort((l, Z) => l.from.x - Z.from.x);
    const g = I[0].from.x, C = I[I.length - 1].to.x, A = new YI(new U(g, I[0].from.y), new U(C, I[0].from.y));
    for (let l = 1; l < I.length; l++) {
      const Z = I[l - 1], i = I[l];
      if (Math.abs(Z.to.x - i.from.x) > hI.tolerance) {
        const d = new YI(new U(Z.to.x, Z.from.y), new U(i.from.x, i.from.y));
        A.addGap(d);
      }
    }
    return A;
  }
  mergeVerticalLines(I) {
    I.sort((l, Z) => l.from.y - Z.from.y);
    const g = I[0].from.y, C = I[I.length - 1].to.y, A = new YI(new U(I[0].from.x, g), new U(I[0].from.x, C));
    for (let l = 1; l < I.length; l++) {
      const Z = I[l - 1], i = I[l];
      if (Math.abs(Z.to.y - i.from.y) > hI.tolerance) {
        const d = new YI(new U(Z.to.x, Z.to.y), new U(Z.to.x, i.from.y));
        A.addGap(d);
      }
    }
    return A;
  }
  normalize() {
    this.hLines = this.hLines.filter((C) => C.intersections.length > 1), this.vLines = this.vLines.filter((C) => C.intersections.length > 1), this.hLines.sort((C, A) => C.from.y - A.from.y), this.vLines.sort((C, A) => C.from.x - A.from.x);
    const I = [];
    for (; this.hLines.length > 0; ) {
      const C = this.hLines.shift();
      if (!C) continue;
      const A = this.getSameHorizontal(C), l = this.mergeHorizontalLines(A);
      I.push(l);
    }
    this.hLines = I;
    const g = [];
    for (; this.vLines.length > 0; ) {
      const C = this.vLines.shift();
      if (!C) continue;
      const A = this.getSameVertical(C), l = this.mergeVerticalLines(A);
      g.push(l);
    }
    this.vLines = g;
  }
  verticalExists(I, g, C) {
    if (I.direction !== TI.Vertical)
      throw new Error("Line is not vertical");
    if (g >= C)
      throw new Error("y1 must be less than y2");
    if (I.from.y <= g && I.to.y >= C) {
      for (const A of I.gaps)
        if (A.from.y <= g && A.to.y >= C)
          return !1;
      return !0;
    }
    return !1;
  }
  horizontalExists(I, g, C) {
    if (I.direction !== TI.Horizontal)
      throw new Error("Line is not horizontal");
    if (g >= C)
      throw new Error("x1 must be less than x2");
    if (I.from.x <= g && I.to.x >= C) {
      for (const A of I.gaps)
        if (A.from.x <= g && A.to.x >= C)
          return !1;
      return !0;
    }
    return !1;
  }
  findBottomLineIndex(I, g) {
    for (let C = I; C < this.hLines.length; C++) {
      const A = this.hLines[C];
      if (A.from.x <= g && A.to.x >= g)
        return C;
    }
    return -1;
  }
  findVerticalLineIndexs(I, g) {
    const C = [];
    for (let A = 0; A < this.vLines.length; A++) {
      const l = this.vLines[A];
      l.from.y <= g && l.to.y >= g && I.intersection(l) && C.push(A);
    }
    return C;
  }
  getRow(I, g, C) {
    const A = [], l = this.hLines[I], Z = this.findVerticalLineIndexs(l, C);
    for (let i = 1; i < Z.length; i++) {
      const d = this.vLines[Z[i - 1]], c = this.vLines[Z[i]], G = (d.from.x + c.from.x) / 2, b = this.findBottomLineIndex(g, G), m = this.hLines[b], B = {
        minXY: new U(d.from.x, l.from.y),
        maxXY: new U(c.from.x, m.from.y),
        width: c.from.x - d.from.x,
        height: m.from.y - l.from.y,
        text: []
      }, o = Z[i] - Z[i - 1], W = b - I;
      o > 1 && (B.colspan = o), W > 1 && (B.rowspan = W), A.push(B);
    }
    return A;
  }
  toData() {
    const I = this.rowPivots, g = this.colPivots, C = new U(g[0], I[0]), A = new U(g[g.length - 1], I[I.length - 1]), l = new EZ(C, A, I, g);
    for (let Z = 1; Z < this.hLines.length; Z++) {
      const i = this.hLines[Z - 1], d = this.hLines[Z], c = (i.from.y + d.from.y) / 2, G = this.getRow(Z - 1, Z, c);
      l.rows.push(G);
    }
    return l;
  }
}
class yA {
  hLines = [];
  vLines = [];
  add(I) {
    I.valid && (I.direction === TI.Horizontal ? this.hLines.push(I) : I.direction === TI.Vertical && this.vLines.push(I));
  }
  addRectangle(I) {
    for (const g of I.getLines())
      this.add(g);
  }
  getTableData() {
    const I = [], g = this.getTables();
    for (const C of g) {
      const A = C.toData();
      A && I.push(A);
    }
    return I;
  }
  getTables() {
    const I = [];
    for (; this.hLines.length !== 0; ) {
      const C = this.hLines.shift();
      if (!C || this.tryFill(I, C)) continue;
      const l = new nA(C);
      this.fillTable(l), I.push(l);
    }
    for (; this.vLines.length !== 0; ) {
      const C = this.vLines.shift();
      if (!C || this.tryFill(I, C)) continue;
      const l = new nA(C);
      this.fillTable(l), I.push(l);
    }
    const g = I.filter((C) => C.isValid);
    for (const C of g)
      C.normalize();
    return g;
  }
  normalize() {
    this.normalizeHorizontal(), this.normalizeVertical();
  }
  normalizeHorizontal() {
    this.hLines.sort((C, A) => C.from.y - A.from.y);
    const I = [];
    let g = [];
    for (const C of this.hLines)
      if (g.length === 0)
        g.push(C);
      else if (Math.abs(g[0]?.from.y - C.from.y) < hI.tolerance)
        g.push(C);
      else {
        const A = this.margeHorizontalLines(g);
        I.push(...A), g = [C];
      }
    if (g.length > 0) {
      const C = this.margeHorizontalLines(g);
      I.push(...C);
    }
    this.hLines = I;
  }
  normalizeVertical() {
    this.vLines.sort((C, A) => C.from.x - A.from.x);
    const I = [];
    let g = [];
    for (const C of this.vLines)
      if (g.length === 0)
        g.push(C);
      else if (Math.abs(g[0]?.from.x - C.from.x) < hI.tolerance)
        g.push(C);
      else {
        const A = this.margeVerticalLines(g);
        I.push(...A), g = [C];
      }
    if (g.length > 0) {
      const C = this.margeVerticalLines(g);
      I.push(...C);
    }
    this.vLines = I;
  }
  fillTable(I) {
    const g = [], C = [];
    for (const A of this.vLines)
      I.add(A) || g.push(A);
    for (const A of this.hLines)
      I.add(A) || C.push(A);
    this.hLines = C, this.vLines = g;
  }
  tryFill(I, g) {
    for (const C of I)
      if (C.add(g))
        return this.fillTable(C), !0;
    return !1;
  }
  margeHorizontalLines(I) {
    const g = [];
    I.sort((i, d) => i.from.x - d.from.x);
    const C = I[0]?.from.y;
    if (C === void 0) return g;
    let A = Number.MAX_SAFE_INTEGER, l = Number.MIN_SAFE_INTEGER;
    for (const i of I)
      i.from.x - l < hI.tolerance ? (i.from.x < A && (A = i.from.x), i.to.x > l && (l = i.to.x)) : (l > A && g.push(new YI(new U(A, C), new U(l, C))), A = i.from.x, l = i.to.x);
    const Z = g[g.length - 1];
    return Z ? Z.from.x !== A && Z.to.x !== l && g.push(new YI(new U(A, C), new U(l, C))) : g.push(new YI(new U(A, C), new U(l, C))), g;
  }
  margeVerticalLines(I) {
    const g = [];
    I.sort((i, d) => i.from.y - d.from.y);
    const C = I[0]?.from.x;
    if (C === void 0) return g;
    let A = Number.MAX_SAFE_INTEGER, l = Number.MIN_SAFE_INTEGER;
    for (const i of I)
      i.from.y - l < hI.tolerance ? (i.from.y < A && (A = i.from.y), i.to.y > l && (l = i.to.y)) : (l > A && g.push(new YI(new U(C, A), new U(C, l))), A = i.from.y, l = i.to.y);
    const Z = g[g.length - 1];
    return Z ? Z.from.y !== A && Z.to.y !== l && g.push(new YI(new U(C, A), new U(C, l))) : g.push(new YI(new U(C, A), new U(C, l))), g;
  }
}
class NA extends hI {
  from;
  width;
  height;
  constructor(I, g, C) {
    super(), this.from = I, this.width = g, this.height = C;
  }
  get to() {
    return new U(this.from.x + this.width, this.from.y + this.height);
  }
  getLines() {
    const I = this.to;
    return [
      new YI(this.from, new U(I.x, this.from.y)),
      new YI(this.from, new U(this.from.x, I.y)),
      new YI(new U(I.x, this.from.y), I),
      new YI(new U(this.from.x, I.y), I)
    ].filter((C) => C.valid);
  }
  transform(I) {
    const g = hI.applyTransform([this.from.x, this.from.y], I), C = hI.applyTransform([this.from.x + this.width, this.from.y + this.height], I), A = Math.min(g[0], C[0]), l = Math.min(g[1], C[1]), Z = Math.abs(g[0] - C[0]), i = Math.abs(g[1] - C[1]);
    return this.from = new U(A, l), this.width = Z, this.height = i, this;
  }
}
class PZ {
  pages = [];
  total = 0;
  getPageImage(I, g) {
    for (const C of this.pages)
      if (C.pageNumber === I) {
        for (const A of C.images)
          if (A.fileName === g)
            return A;
      }
    return null;
  }
  constructor(I) {
    Object.assign(this, I);
  }
}
class fZ {
  pages = [];
  total = 0;
  constructor(I) {
    Object.assign(this, I);
  }
}
var qI = /* @__PURE__ */ ((s) => (s[s.undefined = 0] = "undefined", s[s.hline = 1] = "hline", s[s.vline = 2] = "vline", s[s.rectangle = 3] = "rectangle", s))(qI || {});
class qZ {
  pages = [];
  mergedTables = [];
  total = 0;
  constructor(I) {
    Object.assign(this, I);
  }
}
class _Z {
  pages = [];
  text = "";
  total = 0;
  getPageText(I) {
    for (const g of this.pages)
      if (g.num === I) return g.text;
    return "";
  }
  constructor(I) {
    Object.assign(this, I);
  }
}
$Z();
class tA {
  options;
  doc;
  constructor(I) {
    typeof I.data == "object" && "buffer" in I.data && (I.data = new Uint8Array(I.data)), I.verbosity = Ng.ERRORS, this.options = I;
  }
  async getText() {
    const I = await this.load(), g = new _Z(I);
    if (this.doc === void 0)
      throw new Error("PDF document not loaded");
    for (let C = 1; C <= g.total; C++)
      if (this.shouldParse(C, g.total)) {
        const A = await this.doc.getPage(C), l = await this.getPageText(A);
        g.pages.push({
          text: l,
          num: C
        }), A.cleanup();
      }
    await this.doc.destroy(), this.doc = void 0;
    for (const C of g.pages)
      g.text += `${C.text}

`;
    return g;
  }
  async load() {
    const I = { ...this.options };
    this.options.data instanceof Uint8Array && (I.data = new Uint8Array(this.options.data));
    const g = jC(I);
    this.doc = await g.promise;
    const C = await this.doc.getMetadata();
    return {
      total: this.doc.numPages,
      info: C.info,
      metadata: C.metadata
    };
  }
  shouldParse(I, g) {
    let C = !1;
    return this.options.partial ? (this.options.first && I <= this.options.first && (C = !0), C || this.options.last && I > g - this.options.last && (C = !0)) : C = !0, C;
  }
  async getPageText(I) {
    const g = await I.getTextContent({
      includeMarkedContent: !1,
      disableNormalization: !1
    }), C = [];
    for (const A of g.items)
      "str" in A && (C.push(A.str), A.hasEOL && C.push(`
`));
    return C.join("");
  }
  async getImage() {
    const I = await this.load(), g = new PZ(I);
    if (this.doc === void 0)
      throw new Error("PDF document not loaded");
    for (let C = 1; C <= g.total; C++)
      if (this.shouldParse(C, g.total)) {
        const A = await this.doc.getPage(C), l = await A.getOperatorList(), Z = { pageNumber: C, images: [] };
        g.pages.push(Z);
        for (let i = 0; i < l.fnArray.length; i++)
          if (l.fnArray[i] === sI.paintInlineImageXObject || l.fnArray[i] === sI.paintImageXObject) {
            const d = l.argsArray[i][0], G = A.commonObjs.has(d) ? this.resolveEmbeddedImage(A.commonObjs, d) : this.resolveEmbeddedImage(A.objs, d), { width: b, height: m, kind: B, data: o } = await G, Y = this.doc.canvasFactory.create(b, m), h = Y.context;
            let a = null;
            B === lg.RGBA_32BPP ? (a = h.createImageData(b, m), a.data.set(o)) : (a = h.createImageData(b, m), this.convertToRGBA({
              src: o,
              dest: new Uint32Array(a.data.buffer),
              width: b,
              height: m,
              kind: B
            })), h.putImageData(a, 0, 0);
            const w = Y.canvas.toBuffer("image/png"), V = `data:image/png;base64,${w.toString("base64")}`;
            Z.images.push({
              data: w,
              dataUrl: V,
              fileName: d,
              height: m,
              width: b,
              kind: B
            });
          }
      }
    return await this.doc.destroy(), this.doc = void 0, g;
  }
  convertToRGBA({ src: I, dest: g, width: C, height: A, kind: l }) {
    if (l === lg.RGB_24BPP)
      for (let Z = 0, i = 0; Z < I.length; Z += 3, i++) {
        const d = I[Z], c = I[Z + 1], G = I[Z + 2];
        g[i] = 255 << 24 | G << 16 | c << 8 | d;
      }
    else if (l === lg.GRAYSCALE_1BPP) {
      let Z = 0;
      for (let i = 0; i < I.length; i++) {
        const d = I[i];
        for (let c = 7; c >= 0 && !(Z >= C * A); c--) {
          const b = (d >> c & 1) === 1 ? 255 : 0;
          g[Z++] = 255 << 24 | b << 16 | b << 8 | b;
        }
      }
    } else
      throw new Error(`convertToRGBA: Unsupported image kind: ${l}`);
  }
  resolveEmbeddedImage(I, g) {
    return new Promise((C, A) => {
      I.get(g, (l) => {
        if (l) {
          const Z = new Uint8Array(l.data);
          C({ width: l.width, height: l.height, kind: l.kind, data: Z });
        } else
          A(new Error(`Image object ${g} not found`));
      });
    });
  }
  async pageToImage() {
    const I = await this.load(), g = new fZ(I);
    if (this.doc === void 0)
      throw new Error("PDF document not loaded");
    for (let C = 1; C <= g.total; C++)
      if (this.shouldParse(C, g.total)) {
        const A = await this.doc.getPage(C), l = this.doc.canvasFactory, Z = A.getViewport({ scale: 1 }), i = l.create(Z.width, Z.height), d = {
          canvasContext: i.context,
          viewport: Z,
          canvas: i.canvas
        };
        await A.render(d).promise;
        const G = i.canvas.toBuffer("image/png"), m = `data:image/png;base64,${G.toString("base64")}`;
        g.pages.push({
          data: G,
          dataUrl: m,
          pageNumber: C
        }), A.cleanup();
      }
    return await this.doc.destroy(), this.doc = void 0, g;
  }
  async getTable() {
    const I = await this.load(), g = new qZ(I);
    if (this.doc === void 0)
      throw new Error("PDF document not loaded");
    for (let C = 1; C <= g.total; C++)
      if (this.shouldParse(C, g.total)) {
        const A = await this.doc.getPage(C);
        A.getViewport({ scale: 1 });
        const l = await this.getPageTables(A);
        l.normalize();
        const Z = l.getTableData();
        await this.fillPageTables(A, Z);
        for (const i of Z) {
          const d = { num: C, tables: i.toArray() };
          g.pages.push(d);
        }
        A.cleanup();
      }
    return await this.doc.destroy(), g;
  }
  getPathGeometry(I) {
    const g = I[2] - I[0], C = I[3] - I[1];
    return I[0] === 1 / 0 ? qI.undefined : g > 5 && C > 5 ? qI.rectangle : g > 5 && C === 0 ? qI.hline : g === 0 && C > 5 ? qI.vline : qI.undefined;
  }
  async getPageTables(I) {
    const g = new yA(), C = I.getViewport({ scale: 1 });
    let A = [1, 0, 0, 1, 0, 0];
    const l = [], Z = await I.getOperatorList();
    for (let i = 0; i < Z.fnArray.length; i++) {
      const d = Z.fnArray[i], c = Z.argsArray[i], G = c?.[0] ?? 0, b = c?.[2] ?? [1 / 0, 1 / 0, -1 / 0, -1 / 0];
      if (d === sI.constructPath) {
        if (sI.fill, G !== sI.stroke)
          continue;
        const m = this.getPathGeometry(b);
        if (m === qI.rectangle) {
          const B = new NA(new U(b[0], b[1]), b[2] - b[0], b[3] - b[1]);
          B.transform(A), B.transform(C.transform), g.addRectangle(B);
        } else if (m === qI.hline || m === qI.vline) {
          const B = new U(b[0], b[1]), o = new U(b[2], b[3]), W = new YI(B, o);
          W.transform(A), W.transform(C.transform), g.add(W);
        } else
          debugger;
      } else if (d === sI.setLineWidth)
        debugger;
      else if (d === sI.save)
        l.push(A);
      else if (d === sI.restore) {
        const m = l.pop();
        m && (A = m);
      } else d === sI.transform && (A = J.transform(A, c));
    }
    return g;
  }
  async getPageGeometry(I) {
    const g = new yA(), C = await I.getOperatorList(), A = I.getViewport({ scale: 1 });
    let l = [1, 0, 0, 1, 0, 0];
    const Z = [];
    let i = 0, d = 0;
    for (let c = 0; c < C.fnArray.length; c++) {
      const G = C.fnArray[c], b = C.argsArray[c];
      if (G === sI.constructPath)
        for (; b[0].length; ) {
          const m = b[0].shift(), B = J.transform(A.transform, l);
          if (m === sI.rectangle) {
            const o = b[1].shift(), W = b[1].shift(), Y = b[1].shift(), h = b[1].shift();
            if (Math.min(Y, h) <= 2)
              debugger;
            const a = new NA(new U(o, W), Y, h);
            a.transform(B), g.addRectangle(a);
          } else if (m === sI.moveTo)
            i = b[1].shift(), d = b[1].shift();
          else if (m === sI.lineTo) {
            const o = b[1].shift(), W = b[1].shift(), Y = new U(i, d), h = new U(o, W), a = new YI(Y, h);
            a.transform(B), g.add(a), i = o, d = W;
          }
        }
      else if (G === sI.save)
        Z.push(l);
      else if (G === sI.restore) {
        const m = Z.pop();
        m && (l = m);
      } else G === sI.transform && (l = J.transform(l, b));
    }
    return g;
  }
  async fillPageTables(I, g) {
    const C = I.getViewport({ scale: 1 }), A = await I.getTextContent({
      includeMarkedContent: !1,
      disableNormalization: !1
    });
    for (const l of A.items) {
      if (!("str" in l)) continue;
      const Z = J.transform(J.transform(C.transform, l.transform), [1, 0, 0, -1, 0, 0]);
      for (const i of g) {
        const d = i.findCell(Z[4], Z[5]);
        if (d) {
          d.text.push(l.str), l.hasEOL && d.text.push(`
`);
          break;
        }
      }
    }
  }
}
function $Z() {
  typeof globalThis.pdfjs > "u" && (globalThis.pdfjs = vZ);
  const s = typeof window < "u" && typeof document < "u", I = typeof require < "u" && typeof module < "u" && typeof module.exports < "u", g = xZ;
  Ig !== null && (s || I && g.startsWith("data:text/javascript")) && (Ig.workerSrc = g);
}
async function gi(s) {
  let I;
  return s instanceof URL ? I = new tA({ url: s }) : I = new tA({ data: s }), await I.getText();
}
export {
  tA as PDFParse,
  gi as pdf
};
